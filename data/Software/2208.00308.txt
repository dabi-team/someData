2
2
0
2

l
u
J

0
3

]
E
S
.
s
c
[

1
v
8
0
3
0
0
.
8
0
2
2
:
v
i
X
r
a

Motivating the Contributions: An Open Innovation
Perspective on What to Share as Open Source Software

J. Lin˚akera,∗, H. Munira, K. Wnukb, C.E. Molsc

aLund University, Box 118, 221 00 Lund, Sweden
bBlekinge Institute of Technology, 371 79 Karlskrona, Sweden
cSony Mobile, Mobilv¨agen 10, Lund, Sweden

Abstract

Open Source Software (OSS) ecosystems have reshaped the ways how software-
intensive ﬁrms develop products and deliver value to customers. However, ﬁrms
still need support for strategic product planning in terms of what to develop
internally and what to share as OSS. Existing models accurately capture com-
moditization in software business, but lack operational support to decide what
contribution strategy to employ in terms of what and when to contribute. This
study proposes a Contribution Acceptance Process (CAP) model from which
ﬁrms can adopt contribution strategies that align with product strategies and
planning. In a design science inﬂuenced case study executed at Sony Mobile,
the CAP model was iteratively developed in close collaboration with the ﬁrm’s
practitioners. The CAP model helps classify artifacts according to business im-
pact and control complexity so ﬁrms may estimate and plan whether an artifact
should be contributed or not. Further, an information meta-model is proposed
that helps operationalize the CAP model at the organization. The CAP model
provides an operational OI perspective on what ﬁrms involved in OSS ecosys-
tems should share, by helping them motivate contributions through the creation
of contribution strategies. The goal is to help maximize return on investment
and sustain needed inﬂuence in OSS ecosystems.

Keywords: Open Innovation, Open Source Software, Software Ecosystem,
Contribution Strategy, Product Planning, Product Strategy

1. Introduction

Open Innovation (OI) has attracted scholarly interest from a wide range of
disciplines since its introduction [1], but remains generally unexplored in soft-
ware engineering [2]. A notable exception is that of Open Source Software (OSS)

∗Corresponding author
Email addresses: johan.linaker@cs.lth.se (J. Lin˚aker), hussan.munir@cs.lth.se

(H. Munir), krw@bth.se (K. Wnuk), carl-eric.mols@sonymobile.com (C.E. Mols)

Preprint submitted to Journal of LATEX Templates

August 2, 2022

 
 
 
 
 
 
ecosystems [3, 4, 5]. Directly or indirectly adopting OSS as part of a ﬁrm’s busi-
ness model [6] may help the ﬁrm to accelerate its internal innovation process [7].
One reason for this lies in the access to an external workforce, which may imply
that costs can be reduced due to lower internal maintenance and higher product
quality, as well as a faster time-to-market [8, 9]. A further potential beneﬁt is
the inﬂow of features from the OSS ecosystem. This phenomenon is explained
by Joy’s law as “no matter who you are, not all smart people work for you”.

From an industry perspective, these beneﬁts are highlighted in a recent study
of 489 projects from European organizations that showed projects of organiza-
tions involving OI achieved a better ﬁnancial return on investment compared to
organizations that did not involve OI [10]. Further, two other studies [11, 12]
have shown that organizations with more sources of external knowledge achieved
better product and process innovation for organization’s proprietary products.
Moreover, a recent survey study [13] in 125 large ﬁrms of EU and US showed
that 78% of organizations in the survey are practicing OI and neither of them
has abandoned it since the introduction of OI in the organization. This intense
practicing of OI also leads 82% of the organizations to increase management
support for it and 53% of the organizations to designate more than 5 employ-
ees working full-time with OI. Moreover, the evidence suggests that 61% of the
organizations have increased the ﬁnancial investment and 22% have increased
the ﬁnancial investment by 50% in OI.

To better realize the potential beneﬁts of OI resulting from participation in
OSS ecosystems, ﬁrms need to establish synchronization mechanisms between
their product strategy and product planning [14], and how they participate
in the ecosystems and position themselves in the ecosystem governance struc-
tures [2, 15, 16, 17]. This primarily concerns ﬁrms that either base their products
on OSS or employ OSS as part of their sourcing strategy. To achieve this syn-
chronization, these ﬁrms need to enrich their product planning and deﬁnition
activities with a strategic perspective that involves what to keep closed and what
to contribute as OSS. We label this type of synchronization as strategic product
planning in OI. Contribution strategies [15], i.e., guidelines that explain what
should be contributed, and when play a vital role here. A common strategy
is to contribute parts considered as a commodity while keeping diﬀerentiating
parts closed [4, 18]. The timing aspect is critical as functionality sooner or
later will pass over from being diﬀerentiating to commodity due to a constantly
progressing technology life-cycle [19]. This strategy is further emphasized by
existing commoditization models [19, 20]. However, these models are not de-
signed with active OSS ecosystem participation in mind and lack support for
strategic product planning and contribution strategies.

In this paper, we occupy this research gap by presenting a Contribution
Acceptance Process (CAP) model. The model was developed in close collabo-
ration with Sony Mobile. Sony Mobile is actively involved in a number of OSS
ecosystem, both in regard to their products features and their internal develop-

2

ment infrastructure1. With the consideration of OSS as an external asset, the
CAP model is based on the Kraljic’s portfolio purchasing model which helps
ﬁrms analyze risk and maximize proﬁt when sourcing material for their product
manufacturing [21]. The original model is adapted through an extensive inves-
tigation of Sony Mobile’s contribution processes and policies, and designed to
support ﬁrms’ strategic product planning. More speciﬁcally, the model helps
ﬁrms to create contribution strategies for their products and software artifacts
such as features and components. Hence, the CAP model is an important
step for ﬁrms that use OSS ecosystems in their product development and want
to gain or increase the OI beneﬁts, such as increased innovation and reduced
time-to-market. Moreover, we help ﬁrms to operationalize the CAP model by
proposing an information meta-model. The meta-model is an information sup-
port that should be integrated into the requirements management infrastructure
and enables contribution strategies to be communicated and followed up on a
software artifact-level throughout a ﬁrm’s development organization. As a ﬁrst
validation outside of Sony Mobile, the CAP model was presented to and applied
in three case ﬁrms. This provided understanding of the model’s generalizability,
and also input to future design cycles.

The rest of the paper is structured as follows: In section 2, we position our
study with related work and further motivate the underlying research gap. This
is followed by section 3 in which we describe the research design of our study,
its threats to validity and strategies used to minimize these threats. In section 4
we present our CAP model and in section 5 we present an information meta-
model for how contribution decisions may be traced. In section 6, we present an
example of how the CAP model and meta-model may be used together inside
Sony Mobile. In section 7 we present ﬁndings from three exploratory case studies
outside Sony Mobile where we focused on early validation the CAP model’s
applicability and usability. Finally, in section 8 we discuss the CAP model in
relation to related work, and speciﬁc considerations, while we summarize our
study in section 9.

2. Related Work

Below we describe the context of our research with respect to how software
engineering and OSS ﬁts into the context of OI. Further, we give a background
on contribution strategies and commoditization models. Moreover, we provide
a background of the sourcing model on which the CAP model is based. We
than provide an overview on what we label as strategic product planning, as
well as on software artifacts, and conclude by describing the research gap, that
this study aims to ﬁll.

1http://developer.sonymobile.com/knowledge-base/open-source/

3

2.1. Open Innovation in Software Engineering

OI is commonly explained by a funnel model [22] representing a ﬁrm’s R&D
process, see Fig. 1. The funnel (1) is permeable, meaning that the ﬁrm can
interact with the open environment surrounding it. This conceptualization ﬁts
onto many contexts, e.g., a ﬁrm that takes part in a joint-venture or start-up
acquisition. In our case, we focus on ecosystems (2) and speciﬁcally those based
on OSS [3, 23]. An OSS ecosystem consists of the focal ﬁrm along with other
actors who jointly see to the development and maintenance of an OSS project,
which may be seen as the technological platform underpinning the relationships
between the actors [24, 25]. In the context of this study, the focal ﬁrm repre-
sented by the OI funnel is Sony Mobile and their internal software development
process. The OSS ecosystem could, for example, be represented by that sur-
rounding the Android Open Source Project2 (AOSP). The interactions between
the focal ﬁrm and the ecosystem (see Fig. 1) are represented by the arrows go-
ing in and out and can be further characterized as knowledge exchange between
the ﬁrm and the OSS ecosystem (e.g., Sony Mobile and AOSP). Examples of
transactions can include software artifacts (e.g., bug ﬁxes, features, plug-ins, or
complete projects), but also opinions, knowledge, and support that could aﬀect
any step of the internal or external development.

The interactions (3) may be bi-directional in the sense that they can go
into the development process from the open environment (outside-in), or from
the development process out to the open environment (inside-out). Coupled
innovation [26] happens when outside-in and inside-out transactions occurs to-
gether (i.e., consumption of and contribution to OSS). This may be expected in
co-development between a ﬁrm and other ecosystem participants in regard to
speciﬁc functionality (e.g., Sony Mobile’s developer toolkits3).

How ﬁrms choose to work with and leverage these interactions with OSS
ecosystems impact how they will realize the potential beneﬁts of OI, such as
increased innovation, shorter time-to-market, and better resource allocation [8,
9]. The CAP model presented in this paper provides operational and decision-
making guidelines for these ﬁrms in terms what they should contribute to and
source of from the OSS ecosystems. I.e., how they should interact with the open
environment in an inside-out, outside-in, or coupled direction. Hence, what the
CAP model brings in terms of novelty is an operational OI perspective on what
ﬁrms involved in OSS ecosystems should share, by helping ﬁrms motivate the
contributions through the creation of tailored contribution strategies.

2.2. Contribution Strategies in Open Source Software Ecosystem

Wnuk et al. [15] deﬁne a contribution strategy as a managerial practice that
helps to decide what to contribute as OSS, and when. To know what to con-
tribute, it is important for ﬁrms to understand how they participate in various
OSS ecosystems in regards to their business model and product strategy from

2https://source.android.com/
3https://github.com/sonyxperiadev

4

Figure 1: The OI model illustrated with interactions between the ﬁrm (1) and its external
collaborations (2,4). Adopted from Chesbrough [22].

5

an OI perspective. Dahlander & Magnusson [27] describe how a ﬁrm may access
the OSS ecosystems in order to extend its resource base and align its product
strategy with ecosystems’ strategies. In another study, Dahlander & Magnus-
son [28] describe how a ﬁrm can adapt its relationships with the OSS ecosys-
tems based on how much inﬂuence the ﬁrm needs, e.g., by openly contributing
back to the OSS ecosystem, or by keeping new features internal. To build and
regulate these relationships, a ﬁrm can apply diﬀerent revealing strategies in
this regard: diﬀerentiating parts are kept internal while commodity parts are
contributed [18, 4]. Further, licenses may be used so that the technology can
be disclosed under conditions where control is still maintained [4]. Depend-
ing on the revealing strategy the level of openness may vary from completely
open, partly transparent conditions [6], to completely closed. As highlighted by
Jansen et al. [29], the openness of a ﬁrm should be considered as a continuum
rather than a binary choice.

2.3. Commoditization Models

With commoditization models, we refer to models that describe a software
artifact’s value depreciation [30] and how it moves between a diﬀerential to a
commodity state, i.e., to what extent the artifact is considered to help distin-
guish the focal ﬁrm’s product oﬀering relative to its competitors. Such models
can help ﬁrms better understand what they should contribute to OSS ecosys-
tems, and when, i.e., provide a base to design contribution strategies [15]. Van
der Linden et al. [19] stressed that eﬃcient software development should focus
“. . . on producing only the diﬀerentiating parts” and that “. . . preferably, ﬁrms
acquire the commodity software elsewhere, through a distributed development and
external software such as [commercial software] or OSS”. Firms should hence
set the diﬀerentiating value of a software artifact in relation to how it should be
developed, or even if it should be acquired. Commoditization is also related to
the product’s life-cycle and, is more often experienced towards the end of the
life cycle [31].

Van der Linden et al. [19] present a commoditization model that highlights
how commoditization is a continuous and inevitable process for all software ar-
tifacts. Therefore, ﬁrms should consider whether the software or technology
should be developed, acquired, or kept internally, shared with other ﬁrms, or
made completely open (e.g., as OSS) [32]. Ideally, diﬀerentiating software or
technology should be kept internal, but as their life-cycle progresses their value
depreciates and they should be made open. This is particularly relevant for soft-
ware artifacts that have an enabling role for cross-value creation, data collection
or support value creation when combined with other parts of the oﬀering, e.g.,
an artifact that collects and analyzes anonymous customer data that could be
oﬀered as business intelligence to customers [30]. Bosch [20] presents a similar
commoditization model, which classiﬁes the software into three layers and de-
scribes how a software’s functionality moves from an early development stage as
experimental and innovative, to a more mature stage where it provides special
value to customers and advantage towards competition, then ﬁnally transition-

6

ing to stage where it is considered as commodity, hence it “. . . no longer adds
any real value” [20].

A challenge identiﬁed by both van der Linden et al. [19] and Bosch [20] is
the risk of losing Intellectual property rights (IPR) to competitors, a challenge
that has also been highlighted in numerous other studies [15, 18, 33, 5]. By not
contributing software and technology that are considered diﬀerentiating, ﬁrms
can avoid the risk of giving away its added value to competitors. However, both
van der Linden et al. [19] and Bosch [20] highlight how the acquisition of the
commodity functionality may help ﬁrms to reduce the development and main-
tenance cost, and potentially shorten time-to-market. Instead, they can shift
internal focus to diﬀerential features and better-justiﬁed R&D activities [19].

2.4. The Kraljic Portfolio Purchasing Model

From the software product planning perspective, sourcing refers to decisions
of what parts of the software that should be developed internally or acquired ex-
ternally, from where and how [31], and is an important part of a ﬁrm’s product
strategy [14]. A recent literature review of software component decision-making
in-house, outsourcing, COTS and OSS
making lists four sourcing strategies:
and brings supporting evidence that two sourcing strategies are often consid-
ered [32]. From an OSS perspective, sourcing, therefore, regards decisions on
if, and what, parts of the internal software that should be based on and/or
co-developed as OSS (also referred to as Open-Sourcing [34]). This is further
highlighted in existing commoditization models (see section 2.3), which argues
how commodity parts should be acquired, contributed and sourced in diﬀerent
ways, while internal development should be focused on diﬀerenting parts [19, 20].
With this background, we have chosen to base the CAP-model presented in this
study on the portfolio purchasing model by Peter Kraljic [21].

Kraljic’s model describes how to develop a sourcing strategy for the supply-
items (e.g., material and components) required for a product. First, the supply-
items are classiﬁed according to the Proﬁt impact and Supply risk dimensions
on a scale from low to high. The proﬁt impact concerns the strategic importance
of the item, as well as the added value and costs which that it generates for the
ﬁrm. The supply risk refers to the availability of the item, ease to substitute its
suppliers, and how it is controlled. The supply items are then positioned onto
a matrix with four quadrants, based on the two dimensions, see Fig. 2.4. Each
quadrant represents a speciﬁc item category with its own distinctive purchasing
strategy towards the suppliers [21].

• Strategic items: These are items with high-proﬁt impact and high sup-
ply risk. They can usually only be acquired from a single supplier. A
common strategy is to form and maintain a strategic partnership with the
supplier [35].

• Leverage items: These are items with high-proﬁt impact and low supply
risk. Can generally be obtained from multiple suppliers at a low switching
cost. A common strategy is to exploit buying power within the supplier
market [35].

7

Figure 2: The matrix used in Kraljic’s portfolio purchasing model [21], which allows supply-
items needed for a product to classiﬁed into four item categories based on the two dimensions
Business impact and Supply risk.

8

• Bottleneck items: These are items with low-proﬁt impact and high
supply risk. Suppliers are usually in a dominant position. A common
strategy is to accept dependence and strive to reduce negative eﬀects,
e.g., through risk analysis and stock-piling [35].

• Non-critical items: These are items with low-proﬁt impact and low
supply risk. They generally have a low added-value per item. A general
strategy is to reduce related costs, such as logistic and administrative [35].

Determining how a material or component should be classiﬁed may be done
in several ways. Gelderman et al. [36] report how a consensus-seeking method
is frequently used by inviting cross-functional competencies and internal stake-
holders to discuss how items should be rated in regard to the two dimensions [36].
Other measurement approaches involve representing each dimension with a spe-
ciﬁc variable (e.g., supply risk as a number of available suppliers), or using a
set of variable and weighting them together. After a set of items have been
analyzed and put on the matrix, discussions, and reﬂections are performed and
can potentially lead to a revision of the item categorization [36]. This discussion
may concern how the ﬁrm should maintain the items’ current positions or strive
to move certain items between the quadrants.

The model inspired several industries and academics. Among some exam-
ples, Cani¨els and Gelderman [35] studied the choice of various purchasing strate-
gies and empirically quantiﬁed the ”relative power” and ”total interdependence”
aspects among Dutch purchasing professionals. Ulkuniemi et al. [37] looked at
purchasing as a market shaping mechanism and identiﬁed ﬁve types of market
shaping actions. Shaya discussed the usage of the Kraljic’s portfolio model for
optimizing the process of sourcing IT and managing software licenses at Skanska
ITN [38]. Gangadharan et al. proposed using Kraljic’s portfolio model for map-
ping SaaS services and sourcing structure [39]. To the best of our knowledge,
no study has suggested using Kraljic’s model in the context of OSS ecosystems
and creation of contribution strategies for software artifacts.

2.5. Strategic Product Planning in OI

A software product strategy deﬁnes the product and describes how it will
evolve for a longer period of time [14]. It should consider aspects such as the
product deﬁnition in terms of functional and quality scope, target market, de-
livery model, positioning and sourcing 4. Product planning executes product
strategy with the help of roadmapping, release planning, and requirements man-
agement processes [14]. Hence, decisions regarding if, and what parts of the
product should be based on OSS concerns executive management and the soft-
ware product management (SPM) as they usually oversee the product strat-
egy [40], but also the development organization as they, together with SPM,
oversee the product planning and development.

4http://community.ispma.org/body-of-knowledge/

9

To the best of our knowledge, the current literature oﬀers limited opera-
tional support for creating contribution strategies that help synchronize product
strategies and product planning with OSS ecosystems. Therefore, we present
the CAP model to support software ﬁrms in building strategic product planning
that looks beyond realizing a set of features in a series of software releases that
reﬂects the overall product strategy and adds the strategic OI aspect with the
help of contribution strategies.

2.6. Artifacts in Software Engineering

The CAP model presented in this paper oﬀers a tool for ﬁrms to decide
whether or not a software artifact should be contributed to an OSS ecosystem
or not. In this context, a software artifact may refer to a functionality of diﬀer-
ent abstractions, e.g., bug-ﬁxes, requirements, features, architectural assets or
components. These artifacts may be represented and linked together in software
artifact repositories [41], often used for gathering, speciﬁcation and communica-
tion of requirements inside a software development organization’s requirements
management infrastructure [42].

Artifacts may be structured and stored in diﬀerent ways depending on the
context and process used [41]. The resulting artifact structure (also called in-
frastructure) supports communication between diﬀerent roles and departments
inside an organization, e.g., to which product platform a certain feature belongs,
what requirements a certain feature consists of, what test cases that belong to
a certain requirement, which release a certain requirement should be imple-
mented in, or what artifacts patches that represent the implementation of a
certain requirement. The communication schema should be altered dependent
on the ﬁrms’ needs and processes [43], e.g. to follow-up what requirements are
contributed. In this study, we introduce an information meta-model that pro-
poses how a set of repositories may be set up to support the above-mentioned
communication and decision-making.

Firms often store software artifacts in a central database and require certain
quality criteria in terms of completeness and traceability etc [44]. In contrast,
OSS ecosystems constitute an opposite extreme with their usually very informal
practices [45]. Here, a requirement may be represented by several artifacts, often
complementing each other to give a more complete picture, e.g., as an issue, in a
mail thread, and/or as a prototype or a ﬁnished implementation. These artifacts
are examples of what Scacchi refers to as informalisms [46] and are stored in
decentralized repositories (such as issue trackers, mailing lists, and source code
repositories respectively).

2.7. Summary

Software engineering has received limited attention in the context of OI,
speciﬁcally in relation to OSS, which is widespread in practice [2]. Hence, the
limited attention that contribution strategies have gotten is not surprising with
some exceptions [15, 16]. There is literature explaining general incentives and
strategies for how ﬁrms should act [27, 5, 47], but neither of the aforementioned

10

or existing models [19, 20] consider aspects speciﬁc to OSS, and how ﬁrms
should synchronize internal product strategy and planning with OSS ecosystem
participation [2]. This study aims to address this research gap through a close
academia and industry collaboration.

3. Research methodology

In this section, we describe the research design, the process of our study, and
our research questions. Further, we motivate the choices of research methods
and how these were performed to answer the research questions. Finally, we
discuss related validity threats and how these were managed.

3.1. Case Firm

Sony Mobile is a multinational ﬁrm with roughly 5,000 employees, developing
mobile phones and tablets. The studied branch is focused on developing Android
based phones and tablets and has 1600 employees, of which 900 are directly
involved in software development. Sony Mobile develops software using agile
methodologies and uses software product line management with a database of
more than 20,000 features suggested or implemented across all product lines [48].
As reported in earlier work [12], Sony Mobile is a mature OSS player with
involvement in several OSS projects. Their existing processes for managing
contribution strategies and compliance issues is centrally managed by an inter-
nal group referred to as their OSS governance board [12] (cf. OSS Working
group [49]). The board has a cross-functional composition as previously sug-
gested with engineers, business managers, and legal experts, and applies the
reactive approach as described in section 4.3.

3.2. Research Questions

This study aims to support software-intensive ﬁrms involved in OSS ecosys-
tems with integrating their internal product strategy and planning [14] with the
decision-process of what software artifacts that they should contribute to the
OSS ecosystems, and when, formalized as contribution strategies [15]. Strate-
gic product planning in OI primarily concerns what parts should be revealed
(contributed) in an inside-out direction [7] from the ﬁrm to the ecosystem. This
contribution aﬀects the OSS which in turn is sourced in an outside-in direc-
tion [7] from the ecosystem to the ﬁrm and is a key enabler in achieving the
potential beneﬁts of OI [2]. Earlier research in this area of OI [1], and OSS [2],
is sparse and often limited to a management level (e.g., [28, 27, 18, 19]). To
occupy this research gap, we aim to design a solution that supports ﬁrms in
strategic product planning. We pose our ﬁrst research question (RQ1) as:

RQ1 How can contribution strategies be created and structured to support

strategic product planning from an OI perspective?

11

Product planning is a broad practice and usually involves a cross-functional
set of internal stakeholders (e.g., legal, marketing, product management, and
developers) [50]. This is also the case for strategic product planning and associ-
ated contribution strategies. For a ﬁrm with a small development organization,
these internal stakeholders may be co-located and eﬃciently communicate and
discuss decisions on a daily basis, but for larger (geographically-distributed)
development organizations this may not be possible and cumbersome [51]. A
contribution strategy for a certain feature needs to be communicated from the
product planning team to the development teams who should implement and
contribute accordingly. Conversely, product planning is responsible for moni-
toring the realization of the approved contribution strategies and what impact
they have.

One of the main challenges for market-driven ﬁrms is to know what requirements-

associated information to obtain, store, manage, and how to enable eﬃcient
communication across all stakeholders involved in the crucial decisions that
lead to product success [52, 53]. Handling information overload [54] and eﬃ-
ciently connecting the necessary bits and pieces of information is important for
strategy realization and follow up analysis. This is particularly important when
introducing new concepts that require close collaboration and eﬃcient commu-
nication between product management and product development organizations.
Thus, RQ2 focuses on the information meta-model that should be integrated
into the software artifact repositories used for requirements management and
product planning. Our goal is to develop an information meta-model that de-
scribes how contributions to OSS ecosystems can be traced to internal product
requirements and platforms, and vice versa, and allow for an organizational
adoption of contribution strategies for concerned ﬁrms. This leads us to pose
our second research question (RQ2):

RQ2 What software and product planning artifact types and repositories are
required and how should they be represented in a meta-model to enable
communication and follow-up of contribution strategies in strategic prod-
uct planning?

By answering these two research questions our goal is to create a practical

solution for uncovering further beneﬁts that OI brings [2].

3.3. Research Design and Operation

This study is a design science [55] inspired case study [56]. The work was
initiated by problem identiﬁcation and analysis of its relevance. This was fol-
lowed by an artifact design process where the artifacts (the CAP model and
information meta-model) addressing the research problems (RQ1 & RQ2) was
created. Finally, the artifacts were validated in the context of the research
problem. These steps were performed in close academia-industry collaboration
between the researchers and Sony Mobile. We performed data collection and
analysis throughout the steps and concluded with reporting of the results (see
Fig. 3).

12

3.3.1. Problem Identiﬁcation

The objectives of the problem investigation phase in the design process [55]
are to further understand the problem context and current practices. To gain
greater understanding, we conducted informal consultations with four experts
(I1-I4) at Sony Mobile who is involved in the decision-making process of OSS
contributions (see Table 1). This allowed us to further reﬁne both RQ1 and
RQ2 and conﬁrmed their importance and relevance for the industry. Simul-
taneously, internal processes and policy documentation at Sony Mobile were
studied. Next, we received permission to access additional data sources and
were able to investigate requirements and contribution repositories. The con-
sultations and investigations conﬁrmed that a suitable solution requires a com-
bination of a technology-based artifact and an organization-based artifact (see
guidelines one and two by Hevner [55]). The technology-based artifact (RQ1)
should allow ﬁrms to create contribution strategies for software artifacts and the
organizational-based artifact (RQ2) should support the organizational adoption
and operationalization of the technology-based artifact.

Expert Id Years of experience Role

Table 1: Consultation with experts

I1
I2
I3
I4

6 Years
8 Years
15 Years
5 Years

Team Lead
Director OSS SW Operations
Senior Manager
Software Developer

Figure 3: Overview of the research methodology used in this study. The design process was
performed iteratively through the three steps involved: problem investigation, artifact design,
and artifact valuation [55].

13

3.3.2. Artifact Design

RQ1 is addressed by designing an artifact that would allow the practitioners
to decide whether a software artifact should be contributed to an OSS ecosystem
or not. As this is a sourcing issue at the product strategy-level [31, 14, 32], we
decided to base the artifact on Kraljic’s portfolio purchasing model [21] following
the advice and experience of I2 in sourcing. The model consists of a matrix that
allows ﬁrms to analyze how they source and purchase material and components
for their production (see section 2.4).

With this foundation, we iteratively formalized our ﬁndings from the con-
sultations with I1-I4 and studies of internal processes and policy documenta-
tion. The results of this formalization are the CAP model and the associated
meta-model of information required to instantiate the CAP model, support-
ing strategic product planning in OI. Each item category from the original
model [21] has a corresponding type of contribution strategy [15], and instead
of supply items, we refer to software artifacts, e.g., features or components.
The two dimensions are reﬁned to represent Business impact and Control com-
plexity, inspired by existing commoditization models [19, 20] and literature on
OSS ecosystem governance (e.g., [17, 28, 57]). The measurement process is
proposed to employ a consensus-seeking approach [36] with the involvement of
cross-functional competencies and internal stakeholders [50]. To help frame the
measurement discussion process, questions are deﬁned inspired by literature re-
lated to the Kraljic portfolio purchasing model (e.g., [36, 35]), commoditization
models [19, 20], software value map (e.g., [58, 59], and OSS ecosystem gover-
nance (e.g., [17, 28, 57]). An overlay is created on top of the CAP model to
highlight which contribution objective should be the primary driver for the cho-
sen contribution strategy. The objectives represent important value incentives
inspired by OI literature [7, 4, 8, 9]. The intention is to help users of the model
to ﬁne-tune the contribution strategy for the classiﬁed artifact. The CAP model
is presented in more detail in section 4.

To address RQ2 and enable an organizational adoption and operationaliza-
tion of the CAP-model, we created an information meta-model that facilitates
communication and follow-up on software artifacts and their contribution strate-
gies. In the problem investigation phase, it became apparent that the informa-
tion support should be integrated into the software artifact repositories used
for requirements management. The information support would then be able
to reach everyone who is involved in the product planning and development.
This required us to expand our investigation of Sony Mobile’s requirements and
contribution repositories, which included a broad set of software artifact repos-
itories that are used in the product planning of mobile phones. We focused the
repository investigation on understanding how contributions could be traced to
product requirements and platforms, and vice versa. Through consultation with
I1-I4, we selected six relevant repositories: the internal product portfolio, fea-
ture repository, feature-based architectural asset repository, patch repository,
contribution repository and commit repository (see section 5).

These repositories and their unique artifact IDs (e.g., requirement id, patch

14

id, and contribution id) allowed us to trace the contributions and commits to the
architectural assets, product requirements and platforms, via the patches that
developers create and commit to internal source code branches. This analysis
resulted in the information meta-model presented in Fig. 5. The meta-model cre-
ation process was driven by the principles of ﬁnding a balance between research
rigor and relevance, moving away from extensive mathematical formalizations
of the CAP model and focusing on the applicability and generalizability of the
model, see guideline ﬁve by Hevner [55].

3.3.3. Artifacts Validation

Validation helps conﬁrm that candidate solutions actually address the iden-
tiﬁed research problems. As we are in an early stage of the research and design
process, this study uses static validation [60]. This type of validation uses
presentation of candidate solutions to industry practitioners and gathering of
feedback that can help to further understand the problem context and reﬁne
candidate solutions, in line with the design science process [55]. Dynamic val-
idation [60], which concerns piloting of the candidate solutions in a real-work
setting, is a later step in the technology transfer process and is currently under
planning at the case ﬁrm and is left for future work.

Both the CAP-model and its related information meta-model were validated
statically through continuous consultations with experts at Sony Mobile (I1-I4).
In these consultations, the models were explained and discussed. Feedback and
improvement ideas were collected and used for iterative reﬁnement and improve-
ment. Experts were asked to run the CAP model against examples of features in
relation to the four software artifact categories and related contribution strate-
gies that CAP model describes. The examples are presented together with
the CAP model and provide further detail and validation of its potential use,
see section 4.4. A complete example of how the CAP model and meta-model
are used is further presented in section 6. These examples help to evaluate
functionality, completeness, and consistency of the CAP model and associated
information meta-model. The usability of the information meta-model was fur-
ther validated by performing traces between the diﬀerent types of artifacts and
their repositories. These traces were presented and used in the static valida-
tion of the meta-model. From a design science perspective [55], we employed
observational validation through a case study at Sony Mobile where we studied
the artifacts (models) in a business environment. We also employed descriptive
evaluation where we obtained detailed scenarios to demonstrate the utility of
the CAP model, see guideline three by Hevner [55].

To improve the external validity of the CAP model, we conducted exploratory
case studies at three diﬀerent case ﬁrms (see Section 7). In these case studies,
we used static validation [60] where we presented the CAP model to participants
from the respective ﬁrms and applied it in a simulated setting as part of the
interviews. In two of the cases, semi-structured interviews were used with one
representative from each ﬁrm. In the third case, a workshop setting was used
with eight participants from the ﬁrm. When collecting feedback from the three
case ﬁrms, we focused on applicability and usability of the CAP model.

15

3.4. Ethics and Conﬁdentiality

This study involved analysis of sensitive data from Sony Mobile. The re-
searchers in the study had to maintain the data’s integrity and adhere to agreed
procedures that data will not be made public. Researchers arranged meetings
with experts from Sony Mobile to inform them about the study reporting poli-
cies. Data acquired from Sony Mobile is conﬁdential and will not be publicly
shared to ensure that the study does not hurt the reputation or business of
Sony Mobile. Finally, before submitting the paper for publication, the study
was shared with an expert at Sony Mobile who reviewed the manuscript to
ensure the validity and transparency of results for the scientiﬁc community.

3.5. Validity Threats

This section highlights the validity threats associated with the study. Four
types of validity threats [56] are mentioned along with their mitigation strate-
gies.

3.5.1. Internal Validity

Internal validity refers to factors aﬀecting the outcome of the study without

the knowledge of the researchers [56].

Researcher bias refers to when the researcher may risk inﬂuencing the re-
sults in a wanted direction [61]. The proposed CAP model was created with
an iterative cooperation between researchers and industry practitioners. Thus,
there was a risk of introducing the researcher’s bias while working towards the
creation of the model.
In order to minimize this risk, regular meetings were
arranged between researchers and industry experts to ensure the objective un-
derstanding and proposed outcomes of the study. Furthermore, researchers and
industry practitioners reviewed the paper independently to avoid introducing
researcher’s bias.

A central part of the CAP model involves estimating the business impact
and control complexity. These estimations involve several factors and can have
multiple confounding factors that inﬂuence them. In this work, we assume that
this threat to internal validity is taken into consideration during the estimation
process and therefore is not in the direct focus of the CAP model. Moreover,
the CAP model does not prevent additions of new factors that support these
estimates.

Triangulation refers to the use of data from multiple sources and also en-
suring observer triangulation [61].
In this study, our data analysis involved
interpretation of qualitative and quantitative data obtained from Sony Mobile.
We applied data triangulation by using Sony Mobile’s internal artifacts reposito-
ries, documents related to contribution strategies and consultation with relevant
experts before proposing the CAP model. There were risks of identifying the
wrong data ﬂows and subjective interpretation of interviews. In order to miti-
gate these risks, concerned multiple experts with diﬀerent roles and experiences
(see Table 1) were consulted at Sony Mobile. We ensured observer triangula-
tion by involving all researchers who authored this manuscript into the data
collection and analysis phases.

16

3.5.2. External Validity

External validity deals with the ability to generalize the study ﬁndings to

other contexts.

We have focused on analytic generalization rather than statistical general-
ization [62] by comparing the characteristics of the case to a possible target and
presenting case ﬁrm characteristics as much as conﬁdentiality concerns allowed.
The scope of this study is limited to ﬁrms realizing OI with OSS ecosystems.
Sony Mobile represents an organization with a focus on software development
for embedded devices. However, the practices that are reported and proposed
in the study has the potential to be generalized to all ﬁrms involved in OSS
ecosystems. It should be noted that the case ﬁrm can be considered a mature
ﬁrm in relation to OSS usage for creating product value and realizing product
strategies. Also, they recognize the need to invest resources in the ecosystems
by contributing back in order to be able to inﬂuence and control in accordance
with internal needs and incentives. Thus, the application of the proposed CAP
model in an other context or in other ﬁrms remains part of future work.

The CAP model assumes that ﬁrms realize their products based, in part,
on OSS code and OSS ecosystem participation. This limits its external gen-
eralizability to these ﬁrms. At the same time, we believe that the innovation
assessment part of the CAP model may be applied to artifacts without OSS
elements. In this case, the CAP model provides only partial support as it only
helps to estimate the innovativeness of the features (as an innovation bench-
mark) without setting contribution strategies. Still, this part of the CAP model
should work in the same way for both OSS and non-OSS based products. Fi-
nally, the classiﬁcation of software artifacts has a marked business view and
a clear business connotation. A threat remains here that important technical
aspects (e.g. technical debt, architectural complexity) are overlooked. However,
throughout the static validation examples, we saw limited negative impact on
this aspect, especially in a ﬁrm experienced in building its product on an OSS
platform.

The meta-model was derived from Sony Mobile’s software artifact reposito-
ries. We believe that the meta-model will ﬁt organizations in similar charac-
teristics. For other cases, we believe that the meta-model can provide inspira-
tion and guidance for how development organizations should implementing the
necessary adaptations to existing requirements management infrastructure, or
create such, so that contribution strategies for artifacts can be communicated
and monitored. We do acknowledge this as a limitation in regards to external
validity that we aim to address in future design cycles.

3.5.3. Construct Validity

Construct validity deals with choosing the suitable measures for the con-
cepts under study [63]. Four threats to the construct validity of the study are
highlighted below.

First, there was a risk that academic researchers and industry practitioners
may use diﬀerent terms and have diﬀerent theoretical frames of reference when
addressing contribution strategies. Furthermore, the presence of researchers

17

may have biased the experts from Sony Mobile to give information according
to researchers’ expectations. The selection of a smaller number of experts from
Sony Mobile might also contribute to the unbalanced view of the construct.

Second, there was a potential threat to construct validity due to the used
innovation assessment criteria based on business impact and control complex-
ity. Both dimensions can be expanded by additional questions (e.g.
internal
business perspective or innovation and learning perspective [30]) and the CAP
model provides this ﬂexibility. One could argue that also technical and archi-
tectural aspects should be taken into consideration here. At the same time, the
static validation results at Sony Mobile conﬁrm that these aspects have limited
importance at least for the studied cases. Still, they should not be overlooked
when executing the CAP model in other contexts.

Third, a common theoretical frame of reference is important to avoid mis-
interpretations between researchers and practitioners [61].
In this study, the
Kraljic’s portfolio model is used as a reference framework to the CAP model.
However, the horizontal and vertical dimensions of Kraljic’s portfolio model
were changed to control complexity and business impact respectively. Both in-
dustry practitioners and academic researchers had a common understanding of
Kraljic’s portfolio model [21] before discussions in the study. Furthermore, the-
oretical constructs were validated by involving one of the experts in the writing
process from Sony Mobile to ensure consistent understanding.

Fourth, prolonged involvement refers to a long-term relationship or involve-
ment between the researchers and organization [61]. Since there was an in-
volvement of conﬁdential information in the study, it was important to have
a mutual trust between academic researchers and practitioners to be able to
constructively present the ﬁndings. The adequate level of trust was gained as
a result of long past history of collaboration between academic researchers and
experts from Sony Mobile.

3.5.4. Reliability

The reliability deals with to what extent the data and the analysis are de-

pendent on the speciﬁc researcher and the ability to replicate the study.

Member checking may involve having multiple individuals go through the
data, or letting interviewees review a transcript [61]. In this study, the ﬁrst two
authors proposed the meta-model after independent discussions and reviewed
by the third author. Furthermore, the model was validated by a team lead,
software developer, and senior manager at Sony Mobile, involved in making
contributions to OSS communities, were consulted to ensure the correctness of
the meta-model and associated data.

Audit trail regards maintaining traceability between collected data during
the study [61]. For this study, the ﬁrst two researchers kept track of all the mined
data from the software artifact repositories as well as the email and informal
communication between researchers and Sony Mobile representative. Results
were shared with Sony Mobile for any possible misinterpretation or correction
of data.

18

4. The Contribution Acceptance Process (CAP) Model (RQ1)

The CAP model is an adapted version of the portfolio model introduced by
Peter Kraljic [21]. Kraljic’s model was originally constructed to help ﬁrms with
creating purchasing strategies towards their suppliers of items needed for their
product manufacturing. The CAP model is focused on software artifacts and
how these should be sourced and contributed as OSS. The artifacts may be of
diﬀerent abstraction levels, e.g., ranging from speciﬁc requirements or issues to
sets of requirements as features, frameworks, tools or higher level components.
The model may be used proactively or reactively. In the former, the model
is systematically used on a portfolio or set of artifacts to decide on speciﬁc
contribution strategies for each artifact, but also to get a general overview and
analyze the artifacts relative each other. In the reactive case, the model is used
to follow-up on previously classiﬁed artifacts, and for individual contribution
requests of artifacts from the development organization. We start by describing
how the model may be used to classify artifacts and elicit contribution strategies.
We then move on and put the model into the context of the two approaches.
Lastly, we give examples of artifacts and related contribution strategies.

4.1. Model Description

The focal point of the CAP model is the matrix presented in Fig. 4.1.1.
Artifacts are mapped on to the matrix based on how they are valued in regard
to the two dimensions Business impact and Control complexity, located on the
vertical and horizontal axis respectively. Business impact refers to how much
you proﬁt from the artifact, and control complexity refers to how hard the
technology and knowledge behind the artifact is to acquire and control. Both
dimensions range from low to high.

4.1.1. Artifact Types and Contribution Strategies

An artifact is categorized into one of the four quadrants, where each quadrant
represents a speciﬁc artifact type with certain characteristics and contribution
strategy. The four types are as follows:

• Strategic artifacts: high business impact and high control complexity.

• Platform/leverage artifacts: high business impact and low control com-

plexity.

• Products/bottlenecks artifacts: low business impact and high control com-

plexity.

• Standard artifacts: low business impact and low control complexity.

Strategic Artifacts: This category includes artifacts that can be internally
or externally developed, have a diﬀerential value and makes up a competitive
edge for the ﬁrm. Due to their value and uniqueness, there is a need to main-
tain a high degree of control over these artifacts. OSS contributions within this

19

Figure 4: The Contribution Acceptance Process (CAP) model and its diﬀerent quadrants that
help to determine what contribution strategy to use depending on how a software artifacts are
classiﬁed in terms of business impact and control complexity. The overlaying arches marks
up four contribution objectives which help to further tailor the contribution strategy (see
section 4.1.2).

20

category should generally be restricted and made in a controlled manner, ensur-
ing that the diﬀerentiation is kept. However, this does not account for possible
enablers and/or frameworks, i.e., parts of the artifact that are required for the
artifact to work in a given environment. Those have to be actively maintained
and contributed. This may require that the artifacts undergo special screening
to identify the parts that enable the diﬀerentiating parts. In case the artifact
is already connected to an existing OSS ecosystem, the ﬁrm should strive to-
wards gaining and maintaining a high inﬂuence in the ecosystem in regard to
the speciﬁc artifact and attached functionality. If this is not achievable, e.g.,
when the contribution terms of an existing ecosystem require contributions to
include the diﬀerential IP, the option of creating a new and ﬁrm-orchestrated
OSS ecosystems should be considered. For examples of Strategic artifacts, see
section 4.4.1.

Platform/Leverage Artifacts: These artifacts have a high degree of inno-
vation and positive business impact, but their development does not necessarily
need to be controlled by the ﬁrm. Examples include technology and market
opportunity enablers that have competing alternatives available, ideally with a
low switching cost. Generally, everything could be contributed, but with prior-
ity given to contributions with the highest potential to reduce time-to-market,
i.e., contributions with substance should be prioritized over minor ones, such
as error-corrections and maintenance contributions that are purely motivated
due to cost reduction. Due to the lower need for control, ﬁrms should strive
to contribute to existing projects rather than creating new ones, which would
require a substantial degree of eﬀort and resources and represent an unnecessary
investment. For examples of Platform/Leverage artifacts, see section 4.4.2.

Products/Bottleneck Artifacts: This category includes artifacts that
do not have a high positive business impact by itself but would have a nega-
tive eﬀect if not present or provided. For example, functionality ﬁrmly required
in certain customer-speciﬁc solutions but are not made available for the gen-
eral market. These artifacts are hard to acquire and requires a high degree of
control due to the speciﬁc requirements. The strategy calls for securing the
delivery for the speciﬁc customers, while and if possible, sharing the burden of
development and maintenance. Generally, everything could be contributed, but
with priority given to contributions with the highest potential to reduce time-
to-market, or in this case rather the time-to-customer. But, due to the unique
nature of these artifacts, the number of other stakeholders may be limited in
existing OSS ecosystems. This may imply that the artifact will be problematic
to contribute in a general OSS ecosystem. An option would then be to identify
and target speciﬁc stakeholders of interest, i.e. of customers and their suppli-
ers, and create a limited project and related OSS ecosystem. For examples of
Products/Bottlenecks artifacts, see section 4.4.3.

Standard Artifacts: This category includes artifacts that may be con-
sidered as a commodity to the ﬁrm. They do not have a competitive edge if
kept internal and has reached a stage in the technology life-cycle where they
can create more value externally. They may be externally acquired as easily as
internally developed and may, therefore, be considered to have a low level of

21

control complexity. Generally, everything should be contributed, but with pri-
ority given to contributions with the highest cost reduction potential. Creating
a competing solution to existing ones could lead to unnecessary internal main-
tenance costs, which has no potential of triggering a positive business impact
for a ﬁrm. For examples of Standard artifacts, see section 4.4.4.

4.1.2. Contribution Objectives

Mapping an artifact relative to the four quadrants brings an indication and
guideline about its contribution strategy. There are also intrinsic objectives for
making contributions that are not fully captured by just accessing the busi-
ness impact and control complexity in the artifact classiﬁcation process. These
objectives include:

• Cost focus

• Time-to-market (TTM) focus

• Control focus

• Strategic Alliances and Investments

These objectives are closely coupled to the diﬀerent strategies and are pre-
sented as an overlay of the matrix, thus emphasizing the main contribution
objective per strategy.

Cost focus: Artifacts with a limited competitive advantage, i.e., they are
considered as commodity or enablers for other artifacts, will have a contribution
objective mainly focused on reducing the cost of development and maintenance.
The contribution strategy should focus on minimizing the number of internal
patches that need to be applied to each new OSS project release and reusing
common solutions available in OSS to fulﬁll internal requirements, i.e., overall
reduce variants and strive for the standardization that comes with OSS. As a
consequence, internal resources may be shifted towards tasks that have more
diﬀerentiation value for a ﬁrm.

Time-To-Market (TTM) focus: Artifacts that have higher levels of com-
petitive advantage, and/or require a higher amount of control and understand-
ing than commodity artifacts should likely to have the general objective to be
advanced to the marketplace as soon as possible, superseding the objective of
reducing maintenance costs. These artifacts may also be referred to as qual-
iﬁers, i.e., artifacts that are essential but still non-diﬀerential, and should be
contributed as soon and often as possible in order to allow for the own solution
to be established as the leading open solution. This will potentially give the
advantage of control and barring competing solutions which would otherwise
require additional patching or even costly redesigns to one’s own product.

Control focus: Artifacts with a high level of competitive advantage and
requiring a high level of control are likely to provide diﬀerentiation in the market-
place, and should thus not be contributed. Yet, in securing that these artifacts
are enabled to operate in an open environment, it is as important to contribute

22

the enabling parts to the OSS ecosystems. If an alternative open solution would
become widely adapted out of the ﬁrm’s control, the ﬁrm’s competitive edge
will likely be diminished and make a costly redesign imperative. Hence, the
contribution objective for these artifacts is to take control of the OSS ecosys-
tem with the general strategy to gain and maintain necessary inﬂuence in order
to better manage conﬂicting agendas and levy one’s own strategy in supporting
the artifact.

Strategic Alliances and Investments: These artifacts carry a very large
part of product innovation and competitive advantage, and require strict control.
Thus, these artifacts should be internally developed, or, if this is not feasible, co-
developed using strategic alliances and investments that secure IPR ownership,
hence there is generally no objective for making open source contributions.

4.1.3. Adapting Contribution Strategies with Contribution Objectives

Having just a single contribution objective for an artifact is rare except for
the extreme cases, e.g., when an artifact is mapped in the far corners of the
matrix, such as the bottom left as strictly standard and commodity. More
common is to have two or more contribution objectives in play, though one of
the objectives would be the leading one. The overlay of contribution objectives
on the matrix’s diﬀerent contribution strategies is intended as a guidance for
ﬁne-tuning the contribution strategy for individual artifacts when more than
one contribution objective is in play. E.g., although two artifacts who are found
to have the same overall Platform/Leverage contribution strategy, there might
be a degree of diﬀerence in the emphasis to be made in the time-to-market
objective for an artifact closer to the Strategic area, compared with an artifact
closer to the Standard area where considerations on cost of maintenance might
overtake as the leading objective.

4.2. Proactive Approach

When proactively using the model, the following step-by-step approach is

recommended:

S1 Decision on scope and abstraction level.

S2 Classiﬁcation and mapping artifacts to the matrix.

(a) Begin with an initial set of artifacts to the matrix.

(b) Synchronize and reiterate mapping.

(c) Map the rest of the artifacts to the matrix.

S3 Reiteration of the artifact mapping.

S4 Documentation and communication of the decisions.

S5 Monitoring and follow-up on the decisions.

23

Before the model is used, the scope and abstraction level of the analysis needs
to be decided (S1). The scope may, for example, entails a product, a platform or
functional area. Abstraction level concerns the artifacts relative to the scope,
e.g., components, features, or requirements. Based on these limitations, the
artifacts should be listed, and necessary background information collected, e.g.,
market intelligence, architectural notes and impact analysis, OSS ecosystem
intelligence, and license compliance analysis.

The collected information should then be used as input to an open consensus-
seeking discussion forum (S2), where relevant internal stakeholders help to clas-
sify the artifacts. As in the roadmapping process [50], these stakeholders should
bring cross-functional perspective to the decision-making to further explain and
argue based on the collected background information, e.g., representatives from
marketing, product management, development, and legal.

To facilitate the discussions and help assess the business impact of the ar-
tifacts, a set of questions may be used. The joint answers to these questions
are given on a Likert scale with values between 1 and 4. The reason for this
scale is to force discussion participants to take a clear stand on which side of
two quadrants they think an artifact belongs. The questions are as follows (it
equals an artifact):

1. How does it impact on the ﬁrm’s proﬁt and revenue?

2. How does it impact on the customer and end user value?

3. How does it impact on the product diﬀerentiation?

4. How does it impact on the access to leading technology/trends?

5. How does it impact if there are diﬃculties or shortages?

As with the business impact, a set of questions are proposed to help asses

the control complexity of the artifact on a scale between 1-4:

1. Do we have knowledge and capacity to absorb the technology?

2. Are there technology availability barriers and IPR constraints?

3. What is the level of innovativeness and novelty?

4. Is there a lack of alternatives?

5. Are there limitations or constraints by the ﬁrm?

For an example of how these questions can be used, see section 6. When all
questions are answered, the mean values for both dimensions should be calcu-
lated. Based on these values, the artifact is then mapped onto the matrix (see
Fig. 4.1.1), which will put it into one of the four quadrants. The group should
then ask themselves if the calculated position agrees with their general belief
of where it should be. They should also ask themselves where they want it to

24

be. Further, they should consider what contribution objective(s) that apply,
and how this aﬀects the contribution strategy. This process should be allowed
to take time and reiteration of the ﬁrst set of artifacts, as this is necessary for
everyone to get accustomed with the process and the classiﬁcation criteria.

This classiﬁcation process is not intended to be quantitative and rigor-
ous, but rather qualitative and informal. The process was facilitated through
consensus-seeking discussions within a cross-functional group. This approach
helps to create guidelines without introducing complexity which may risk intro-
ducing negative eﬀects on the usability and applicability of the CAP model. The
questions should further be seen as a mean to frame and drive the discussion,
during which further questions might come up.

When all artifacts have been classiﬁed and mapped onto the matrix, an
overall discussion and reﬂection should be performed (S3). When consensus is
reached, the decisions should be documented and handed over to product man-
agement for communication out to the development organization (S4) through
required channels supported by the information meta-model, e.g., the require-
ments management infrastructure (see section 5). The contribution strategies
for each artifact should then be monitored and followed-up in a given suitable
time frame (e.g., in relation to internal release cycles) (S5). This task may
be suitable for product or project management with accountability towards the
ﬁrm’s OSS executive.

4.3. Reactive Approach

The CAP model may also be used in a reactive mode which is based on Sony
Mobile’s current practices. This approach is critical in order to continuously
follow-up on previously classiﬁed artifacts as the classiﬁcation may change with
the artifacts’ technology life-cycle. The approach is also useful for managing
individual contribution requests of artifacts from the development organization,
e.g.
in response when a manager or developer request to contribute a certain
artifact, or be allowed to work actively with a speciﬁc OSS ecosystem. The
CAP model is used in this case by a group of internal stakeholders, similarly
to that of the proactive approach. Sony Mobile applies this reactive approach
through their OSS governance board (see section 3.1).

When an individual wants to make a contribution, they have to pass through
the board. However, to avoid too much bureaucracy and a bottleneck eﬀect,
the contribution process varies depending on the size and complexity of the
contribution. In the CAP model, the contributions may be characterized in one
of three diﬀerent levels:

• Trivial contributions are rather small changes to already existing OSS
ecosystems, which enhances the non-signiﬁcant code quality without adding
any new functionality to the system e.g., bug ﬁxes, re-factoring etc.

• Medium contributions entails both substantially changed functionality,
and completely new functionality e.g., new features, architectural changes
etc.

25

• Major contributions are comprised of substantial amounts of code, with
signiﬁcant value in regard to IPR. These contributions are a result of a
signiﬁcant amount of internal development eﬀorts. At Sony Mobile, one
example of such a contribution is the Jenkins-Gerrit-trigger plug-in [12].

For trivial contributions, the approval of concerned business manager is suf-
ﬁcient. For medium and major contributions, the business manager has to
prepare a case for the Open Source Governance board to verify the legal and
IPR aspects of the OSS adoption or contribution. The Open Source Governance
board decides after case investigation that include IPR review. Consequently,
the board accepts or rejects the original request from the engineers. To further
lessen the bureaucracy, Sony Mobile uses frame agreements that can be created
for OSS ecosystems that are generally considered as having a non-competitive
advantage for Sony Mobile (e.g., development and deployment infrastructure).
In these cases, developers are given free hands to contribute what they con-
sider as minor or medium contributions, while major contributions must still go
through the board.

4.4. Contribution Strategies with Artifact Examples

In this section, we provide examples in regard to the four artifact types of
the CAP model, which we elicited from consultations with experts from Sony
Mobile.

4.4.1. Strategic Artifacts:

Example 1 - Gaming, Audio, Video, and Camera: A typical example
of a contributable enabler is multimedia frameworks which are needed for ser-
vices such as music, gaming, and videos. The frameworks themselves are not of
a strategic value, but they are essential for driving the Sony brand proposition
since they are needed in order to provide the full experience of strategic media
and content services provided by Sony. Such artifacts may also be referred to
as Qualiﬁers, as they are essential, yet not strategic by themselves.

An example of such a multimedia framework that Sony Mobile uses is An-
droid’s Stagefright5. It is for example used for managing movies captured by the
camera. The framework itself could be contributed into, but not speciﬁc cam-
era features such as smile recognition as these are considered as diﬀerentiating
towards the competition, hence have a high business impact and control com-
plexity for Sony Mobile. In short, camera eﬀects can not be contributed, but all
enablers of such eﬀects should be, thus Sony Mobile contributes to the frame-
works to steer and open up a platform for strategic assets, e.g., an extended
camera experience on their mobile phones. A further example of a framework
that has been made open by Sony, but in the context of gaming, is the Authoring
Tools Framework6 for the PlayStation 4.

5https://source.android.com/devices/media/
6https://github.com/SonyWWS/ATF

26

4.4.2. Platform/Leverage Artifacts

Example 1 - Digital Living Network Alliance: Digital Living Network
Alliance (DLNA) (originally named Digital Home Working Group) was founded
by a group of consumer electronics ﬁrms, with Sony and Intel in leading roles,
in June 2003. DLNA promotes a set of interoperability guidelines for sharing
and streaming digital media among multimedia devices.

As support for DNLA was eventually included in Android, creating a propri-
etary in-house solution would not have been wise given that the OSS solution
already was oﬀered. Instead, Sony Mobile chose to support the Android DNLA
solution with targeted but limited contributions. This is a typical example of
leveraging functionality that a ﬁrm does not create, own, or control, but that
is good to have. Hence, Sony Mobile did not need to commit extra resources
to secure the interoperability of an own solution. Instead, those extra resources
could be used for making the overall oﬀering better, e.g., the seamless stream-
ing of media between Android devices and other DNLA compliant device, for
instance, a PlayStation console, and in that way promote DNLA across Sony’s
all device oﬀerings.

Example 2 - Mozilla Firefox: The most signiﬁcant web browsers during
the 1990s were proprietary products. For instance, Netscape was only free for
individuals, business users had to pay for the license. In 1995, Microsoft stepped
into browser market due to the competitive threat from Netscape browser. Mi-
crosoft decided to drive the price of web browsers market by bundling its com-
petitive browsers for free with the Windows operating system. In order to save
the market share, Netscape open sourced the code to its web browsers in 1998
which resulted in the creation of the Mozilla organization. The current browser
known as Firefox is the main oﬀspring from that time. By making their browsers
open source, Netscape was able to compete against Microsoft’s web browsers by
commoditizing the platform and enabling for other services and products.

4.4.3. Products/Bottleneck Artifacts

Example 1 - Symbian network operators requirements: In the ecosys-
tem surrounding the Symbian operating system, network operators were consid-
ered one of the key stakeholders. Network operators ran the telephone networks
to which Symbian smart-phones would be connected. Handset manufactures
are dependent on the operators for distribution of more than 90% of the mobile
phone handsets, and they were highly fragmented, with over 500 networks in
200 countries. Consequently, operators can impose requirements upon hand-
set manufactures in key areas such as pre-loaded software and security. These
requirements can carry the potential to one of those components that do not
contribute in terms of a business value but would make a negative impact on
ﬁrm’s business if missing, e.g., by a product not being ranged.

Example 2 - DoCoMo mobile phone operator: DoCoMo, an operator
on the Japanese market, had the requirement that the DRM protection in their
provided handsets uses Microsoft’s PlayReady DRM mechanism. This require-
ment applied to all handset manufacturers, including Sony Mobile’s competitors.
Sony Mobile, who had an internally developed PlayReady plug-in, proposed

27

that they could contribute it as OSS and create an ecosystem around it and
also because it already contributed the DRM framework. DoCoMo accepted,
which allowed Sony Mobile and its competitors to share maintenance and de-
velopment of upcoming requirements from DoCoMo. In summary, Sony Mobile
solved a potential bottleneck requirement which has no business value for them
by making it OSS and shared the development cost with all its competitors
while still satisfying the operator.

4.4.4. Standard Artifacts

Example 1 - WiFi-connect7: This OSS checks whether a device is con-
nected to a Wi-Fi. If not, it tries to join the favorite network, and if this fails, it
opens an Access Point to which you can connect using a laptop or mobile phone
and input new Wi-Fi credentials.

Example 2 - Universal Image Loader8: Universal Image Loader is built
to provide a ﬂexible, powerful and highly customizable instrument for image
loading, caching and displaying. It provides a lot of conﬁguration options and
good control over the image loading and caching process.

Both examples are considered standard artifacts because they can be con-
sidered as a commodity, accessible for competition and do not add any value to
customers in the sense that they would not be willing to pay extra for them.

5. Operationalization of the CAP model (RQ2)

Putting contribution strategies into practice requires appropriate processes
and information support to know which artifacts, or what parts of them that
should be contributed. Furthermore, to follow up the contribution strategy
execution and make necessary adaptations as the market changes, there needs
to be a possibility to see what has been contributed, where, and when. In this
section, we address research question RQ2 and propose an information meta-
model which can be used to record and communicate the operationalization of
the CAP model, e.g., by integrating it into the requirements management and
product management information infrastructure.

The meta-model was created through an investigation of Sony Mobile’s soft-
ware and product management artifact repositories used in product planning
and product development. During this investigation, we focused on how the
contributions could be traced to product requirements and platforms, and vice
versa. Through consultation with I1-4, the investigation resulted in the selection
of six repositories, see Fig. 5:

• Product Portfolio repository

• Features repository

7https://github.com/resin-io/resin-wiﬁ-connect
8https://github.com/nostra13/Android-Universal-Image-Loader

28

Figure 5: Software artifact repositories necessary to communicate and follow-up on contribu-
tion strategies decided with the CAP model.

• Feature-Based Architecture Assets repository

• Patch repository

• Contribution repository

• Commit repository

These repositories and their unique artifact ids (e.g., requirement id, patch
id, and contribution id) allowed us to trace the contributions and commits
to their architectural assets, product features, and platforms, via the patches
that developers create and commits to internal source code branches. Table 2
presents the repositories including their attributes.

The product portfolio repository is used to support Sony Mobile’s soft-
ware platform strategy, where one platform is reused across multiple phones.
The repository stores the diﬀerent conﬁgurations between platforms, hardware
and other major components along with market and customer related informa-
tion. The feature repository stores information about each feature, which
can be assigned to and updated by diﬀerent roles as the feature passes through
the ﬁrm’s product development process. Information saved includes documen-
tation of the feature description and justiﬁcation, decision process, architectural
notes, impact analysis, involved parties, and current implementation state. The
contribution strategy attribute is used to communicate the decisions from the
CAP model usage, on whether the feature should be contributed or not.

Feature-Based Architectural Asset (FBAA) repository (FBAAs)
groups features together that make up common functionality that can be found

29

Product Portfolio Platform_IDSoftwareProduct nameFeaturesFeature_IDPlatform_IDFBAAFBAA_IDFeature_ID(s)DescriptionPatchesPatch_IDFeature_IDTitleFBAA_IDContributionsContribution_IDPatch_IDStateTitleCommitsPatch_IDFBAA nameTitleCategoryAssetsDevelopment stateFeature categoryDescriptionDMS_IDStatusTypeCommunityContributorTable 2: Description of selected attributes from the software artifact repositories mentioned
in Fig. 5

Repository
Name

Products

Features

FBAA

Patches

Attributes

Description

Platform ID
Product name
Software

Status

Feature ID
Platform ID
Description
Development
state
Feature
gory
Contribution
Strategy

cate-

FBAA ID

FP IDs
Description

Patch ID
FP ID
FBAA ID
Title
Category

Assets

A unique ID for platform name
Product name with the platform.
Related software description, e.g., Android, OSE, Epice, Kept
etc.
Current standing of the platform, e.g., expired, announced etc.

A unique Id for a feature, which refers to features.
ID associated with the speciﬁc platform e.g. android, core etc.
Details of the feature.
Refers to the current status a feature’s implementation, e.g.,
started, executed.
Refers to the type of feature, e.g., new functionality, bug ﬁx,
extension etc.
Refers to whether the requirement is contributable or not.

A unique Id for each Feature Based Architecture Asset
(FBAA).
A combination of FP IDs associated with the FBAA.
Details of a FBAA.

A unique id for each patch.
A unique ID from the FP repository.
A unique ID from the FBAA repository.
A description of a patch.
Importance of a patch, e.g., market critical, development crit-
ical, stability, ecosystem critical etc.
Refers to the type of a patch, e.g., bug ﬁx, extension, operator
requirement, platform related, generic etc.

Contribution ID A unique ID for each contribution.
Patch ID
Title
State

A unique ID from the patches repositories.
A description of a contribution.
Refers the current state of the patch, e.g., ecosystem merged,
already ﬁxed, CEO rejected, legal reject, ecosystem review
etc.
Refers to criticality of a contribution, e.g., trivial, non-trivial,
bug ﬁx etc.
Refers to the ecosystem in which the contribution will be
made, e.g., Google, Firefox etc.
Refers the contributor information.

Contributions

Commits

Type

ecosystem

Contributors

Patch ID
Title
FBAA name

A unique Id from the patch repository.
A detailed description of a commit.
Commits associated with the FBAA.

30

features connected to power functionality may be
in multiple products, e.g.
grouped together in its own FBAA and revised with new versions as the un-
derlying features evolve along with new products. Products are deﬁned by
composing diﬀerent FBAAs which can be considered as a form of conﬁguration
management.

Even though Sony Mobile uses Android as an underlying platform, cus-
tomization and new development are needed in order to meet customers’ expec-
tations. These adaptations are stored as patch artifacts in the patch repos-
itory. The patch artifacts contain information about the technical implemen-
tation and serve as an abstraction layer for the code commits which are stored
in a separate commit repository. Each patch artifact can be traced to both
FBAAs and features.

The patches that are contributed back to the OSS ecosystems have associated
contribution artifacts stored in the contribution repository. These artifacts
store information such as the type of contribution and complexity, responsible
manager and contributor, and concerned OSS ecosystem. Each contribution
artifact can be traced to its related patch artifact.

With this set-up of repositories and their respective artifacts, Sony Mobile
can gather information necessary to follow up on what functionality is given
back to OSS ecosystems. Moreover, Sony Mobile can also measure how much
resources that are invested in the work surrounding the implementation and
contribution. Hence, this set-up makes up a critical part in both the structuring
and execution of the CAP model.

This meta-model was created in the context of Sony Mobile’s development
organization. Hence, it is adapted to ﬁt Sony Mobile’ software product line
strategy with platforms from which they draw their diﬀerent products from.
The architectural assets (FBAAs) play a key part in this conﬁguration manage-
ment. As highlighted in section 3.5.2, we believe that the meta-model will ﬁt
organizations in similar characteristics, and for other cases provide inspiration
and guidance. This is something that we aim to explore and validate beyond
Sony Mobile in future design cycles.

6. Combining the CAP Model and the Information Meta-model

In this section, we provide an example of how the CAP model may be used
to classify an artifact, and combine this with the information meta-model to
support communication and follow-up of the artifact and its decided contribu-
tion strategy. The example is ﬁctive 9 and was derived together with one of the
experts (I2) from Sony Mobile with the intention to demonstrate the reasoning
behind the artifact classiﬁcation. Following the proactive process deﬁned in
section 4.2, we begin by discussing scope and abstraction level.

For Sony Mobile, FBAAs oﬀer a suitable abstraction level to determine
whether certain functionality (e.g., a media player or power saving functional-

9Due to conﬁdentiality reasons, we have to select this example.

31

ity) can be contributed or not. If the artifact is too ﬁne-grained it may be hard
to quantify its business impact and control complexity. In these cases, features
included in a certain FBAA would inherit the decision of whether it can be
contributed or not. Regarding the scope, we look at FBAAs related to the tele-
phony part of a certain platform-range. The FBAA that we classify regards the
support for Voice over Long-Term Evolution (VoLTE), which is a standard for
voice service in the LTE mobile radio system [64]. Note that this classiﬁcation
is performed when VoLTE was relatively new to the market in 2015.

VoLTE is classiﬁed in regard to its business impact and control complexity.
The questions deﬁned in section 4.2 were used. Under each question, we provide
a quote from I2 about how (s)he reasons, and the score which can be in the range
of 1-4. We start by addressing the business impact:

1. How does it impact on the ﬁrm’s proﬁt and revenue?

“VoLTE is hot and an enabler for services and the European operators
are very eager to get this included. This directly aﬀects the ﬁrm’s ability
to range its products at the operators. So very important.
Is it super
important? The consumers will not understand the diﬀerence of it, they
will get it either way.” - Score: 3.

2. How does it impact on the customer and end user value?

“The consumers themselves may not know about VoLTE, but they will ap-
preciate that the sound is better and clearer because other coding standards
may be used.” - Score: 3.

3. How does it impact on the product diﬀerentiation?

“VoLTE has a positive eﬀect. Some product vendors will have VoLTE
enabled and some not. So there is a diﬀerentiation which is positive. Does
this have a decisive eﬀect concerning diﬀerentiation? Is it something that
the consumers will interpret as something that is very important? No.” -
Score: 3.

4. How does it impact on the access to leading technology/trends?

“VoLTE is very hot and is deﬁnitely a leading technology.” - Score: 3.

5. How does it impact if there are diﬃculties or shortages?

“If we cannot deliver VoLTE to our customers, how will that aﬀect them?
It will not be interpreted as positive, and will not pass us by. But they will
not be fanatic about it.” - Score: 2.

This gives us a mean score of 2,8. We repeat the same process for control

complexity:

1. Do we have knowledge and capacity to absorb the technology?

“Yes, we have. We are not world experts but we do have good knowledge
about it.” - Score: 3.

32

Figure 6: The CAP model and the example of VoLTE which is classiﬁed in regard to its
business impact and control complexity.

2. Are there technology availability barriers and IPR constraints?

“Yes, there were some, but not devastating. There are patents so it is not
straight forward.” - Score: 2.

3. What is the level of innovativeness and novelty?

“It is not something fantastic but good.” - Score: 3.

4. Is there a lack of alternatives?

“Yes, there are not that many who have development on it so there are
quite a few options. So we implemented a stack ourselves.” - Score: 3.

5. Are there limitations or constraints by the ﬁrm?

“No, there are none. There is not a demand that we should have or need
to have control over.” - Score: 1.

This gives us a mean score of 2,4. This places VoLTE in the bottom be-
tween of the upper two quadrants; the strategic and platform/leverage artifact
quadrants. I2 elaborates on the strategy chosen:

“VoLTE is an opportunity for us. We should invest in this technology, but
we do not have to develop our own solution. Rather, we should take what is
available externally. We should do active contributions, not just to get rid of
maintenance, but also to push the technology forward with a time-to-market as
our main contribution objective. It does not matter if it is open source. This is

33

Table 3: Overview of the three case ﬁrms in regard to their domain, use of OSS, scope and
abstraction analyzed with the CAP, and the setting in which the model was applied.
Use
Setting
OSS

Description

of

&

Scope
Abstrac-
tion

Firm
A

Firm
B

Firm
C

ﬁrm
plat-
for
agricultural

Small-sized
building
a
form product
the
domain.
Small-sized
building
games
platforms.
Large-sized ﬁrm in
the telecommunica-
tion domain.

ﬁrm
mobile
for mobile

com-
in

OSS
ponents
platform.

Features
platform
product.

in

Interview
with CTO.

com-

game

OSS
ponents
in
products.
OSS in ser-
vice infras-
tructure.

in
speciﬁc

Features
a
game.

Interview
with
Founder.

in-

Internal
frastructure
project

Workshop
with 8 cross-
functional
participants.

not rocket science that only we know about. We should have an open attitude
towards VoLTE and support it as OSS and invest in it.”

After reiterations and discussions, the decisions should be documented and
communicated to the development organization.
In Sony Mobile’s case, the
information meta-model is already integrated into requirements and product
management infrastructure. Thus, these decisions would be added to the con-
tribution strategy attribute of the feature artifacts which belong to the VoLTE
FBAA artifact. To monitor and follow-up on the contribution strategy execu-
tion for VoLTE, product management can trace patch artifacts connected to the
VoLTE feature artifacts, and see which of these that have contribution artifacts
connected to them.

7. Case Studies

To perform a ﬁrst validation of the CAP model outside Sony Mobile, we
have conducted three exploratory case studies where we applied the CAP model
and investigated its applicability and usability. Further and more extensive
application and validation are planned for future design cycles. Below we present
the results from this validation per case ﬁrm, which due to conﬁdentiality reasons
are made anonymous and referred to as ﬁrm A-C. For each ﬁrm, we present
general characteristics, and how we conducted the case study. We then give a
brief overview of their overall contribution strategy, followed a summary of the
application of the CAP model, and an evaluation of the model in terms of its
usability. For an overview, see table 3.

34

7.1. Case Firm A

Firm A operates in the agriculture business. The main product of the ﬁrm is
software designed to improve the eﬃciency of global grain marketing. The soft-
ware oﬀers a communication platform between the growers and buyers combined
with real-time market intelligence. The main beneﬁt is an enhanced ability to
quickly respond to domestic and global market demands. We interviewed the
CTO of the ﬁrm who has over 25 years of experience in the IT sector and was in-
volved in 10 start-ups and many projects. The CAP model was used to analyze
the current product the ﬁrm is oﬀering.

7.1.1. Overall Contribution Strategy

The ﬁrm makes extensive use of OSS code as long as it is not released under
the GPL version 3 license. The ﬁrm keeps its own copy of the source code and
often contributes bug ﬁxes or other small changes, however without following
up if they are integrated into the common code base. Decisions if to adapt the
OSS ecosystem’s version of the code are made on regular basis upon analysis.

The ﬁrm has currently a static code policy that is based on the following
reasoning. If the existing code works at the time, the ﬁrm does not care if it
evolves and does not check if never versions are available. If there are changes,
the ﬁrm checks ﬁrst if the suggested improvements are beneﬁcial before any new
version is considered and integrated.

Maintenance cost reduction is important for the ﬁrm, however not for the
price of loosing competitive advantage. Thus, any functionality that has a dif-
ferentiating potential is kept proprietary for about 6-9 months to check the
market response and proﬁtability. After this time, the ﬁrm analyzes if cost re-
duction is substantial before deciding to contribute the code or not. Estimating
the current or future value of an asset is challenging, mainly because of rapid
market changes and high market uncertainty. An example here is inventory
management module that the ﬁrm’s product has. This module (feature) turned
out to be a strategic asset 12 months after developing it. So what may seem
to be a rational decision from the development/technology perspective can be
overwhelmed by market forces or conditions. Moreover, it may take a substan-
tial amount of time before an intellectual property asset reveals its true value
in the market place due to delays in the technology adoption curve. Therefore,
cautious evaluation of the business and revenue values are necessary.
If the
technology adoption is slow, it is much more challenging and harder to see if
and when to contribute.

Regarding the contribution strategy, the ﬁrm has the following rules:

• high proﬁt and critical to maintain control features are never shared with
the OSS ecosystem as these build the ﬁrm’s value in the eyes of the share-
holders

• high proﬁt and not critical to maintain control features - some resources
are dedicated to investigate and see the potential of growing from low
proﬁt to high proﬁt before a decision to contribute is made

35

• low proﬁt and critical to maintain control features - the ﬁrm can release

these features after commodity analysis.

• low proﬁt and not critical to maintain control features - the ﬁrm con-

tributes these features as quickly as possible.

The ﬁrm is small and in a growing phase with limited resources that can
be dedicated to working with the OSS communities. The conclusion here is
that OSS ecosystem engagement can be very valuable for large enterprises, in a
resource constrained enterprise it is pretty risky policy.

7.1.2. Application of the CAP Model

Together with the ﬁrm’s CTO, we have analyzed the current product with
the help of the CAP model. The mapping of the product’s features on the CAP
model brings into focus the questions regarding: 1) where the diﬀerentiating
value is, 2) what is the nature of the market the ﬁrm is operating in and 3) how
much value the potential customers can absorb. This resulted in the following
categorization:

• Standard artifacts - Covers about 20% of all features. The CTO adds
that not only OSS software is considered here but also binary modules.

• Product/Bottleneck artifacts - Covers about 20% of all features. These
are mostly purchased or obtained from OSS communities to a lower time-
to-market. An interesting aspect here is the usage of binaries that further
reduces time-to-market as the integration time is lower compared to OSS
modules that often require some scripting and integration eﬀorts.

• Strategic artifacts - Covers only about 5% of all features. The main rea-
son is that the ﬁrm is afraid someone will standardize or control something
in that part (interfaces) and destroy the shareholders’ value.

• Platform/Leverage artifacts - Covers about 55% of all features because
complexity is low and the ﬁrm has high control in case the ﬁrm becomes
dominant in the market (they are currently not dominant).

According to the CTO, a ﬁrm can be a ”big winner” in immature markets
that usually lack standards. Having a high portion of features in the Strategic
artifact corner indicate operating in an established market where alliances need
to be made do deliver substantial value.

7.1.3. Usability of the CAP Model

The CTO indicated that the CAP model can be used by both executives
and operational management. The primary stakeholder remains everyone who
is responsible for product strategies. However, the executives will focus mostly
on the strategy and if it reﬂects the direction given by the Board of Directors
and main shareholders. In that regard, the percentage mapping of the features
on the CAP model is considered useful as it shows where in those four quadrants

36

(see Fig. 4.1.1) a ﬁrm’s product is, but also where it should be. When applied,
there should be a cross-functional group as earlier suggested (see section 4). The
CTO agrees that a consensus-seeking approach should be used where opinions
are ﬁrst expressed independently, shared and then discussed until the group
converges. This shows potential risks and additional uncovered aspects.

When classifying artifacts in terms of business impact and control complex-
ity, the CTO indicated that high-medium-low is suﬃcient in terms of scale.
When several people perform the estimations, the results can show the density
of each level for each aspect. The levels should be augmented with comments
regarding additional risks or other important aspects. A scale of -1, 0 and 1 was
also considered as suitable.

The used frequency of the CAP model is estimated to be every major revision
cycle when new features are added to the product. The complete analysis based
on the CAP model should be performed when, e.g., entering the new market
place or moving to more stable places in the market place.

Our respondent believes that the CAP model usage delivers greater conﬁ-
dence that the ﬁrm is not deviating from the strategic direction and helps to
identify the opportunities in the area in other quadrants. The usefulness was es-
timated as high and could be improved with more guidelines on how to interpret
the mapping results. At the same time, it appears that larger organizations can
beneﬁt more from the CAP model application. The main problem for smaller
ﬁrms with reaching high utility of the CAP model would be to have the re-
sources to do regular analysis and the experience to provide valuable opinions.
Experience in working with OSS and knowledge of the main driving forces for
commoditization is considered essential.

7.2. Case Firm B

Firm B develops mobile games for the Android and iOS platforms. The
market place that the ﬁrm operates in is rather disordered and characterized
by several players who use the same game engine that has a very active ecosys-
tem10 around it. A substantial part of the product is available for free with
little integration eﬀort. Reusing platforms and frameworks with large user base
is an important survival aspect, regardless if they are OSS or not since acqui-
sition costs are marginal. Entry barriers are negligible which implies that the
commercial success is often a ”hit and miss”. In many aspects, the environment
resembles an inverted OSS ecosystem where a given tool from a given provider
or a given module is available with the source. Where a given tool or module
from a given provider is available, often with source, at little or no charge. As a
result, signiﬁcant elements of the games are, essentially, commodities and prod-
uct diﬀerentiation principally occurs within the media assets and the gameplay
experience. The tool provider11 is open sourcing back to the ecosystem and
can gain those inverted beneﬁts. The customers are helping the provider to

10https://unity3d.com/
11https://unity3d.com/

37

improve the quality of the oﬀering. The studied ﬁrm only report bugs to these
ecosystems and never considers any active contributions or extensions.

The mobile game users expect to play the game for free and perceive them as
commodities. This impacts proﬁtability and ability to be commercially viable.
If the game is successful there are many opportunities to disturb the market
place, e.g. a competitor copies the ﬁrst 5 levels of the game and oﬀers a similar
copy to the market. About 80% of the revenue is generated in the ﬁrst ﬁve days
after the game is released since the immediate customer behavior deﬁnes if the
asset is worth something or not.

7.2.1. Overall Contribution Strategy

Since proﬁtability decreases rapidly after product launch, ﬁrm B wants to
directly minimize maintenance costs. This implies contributing the code base or
using commodity parts as much as possible. Contribution strategy associated
decisions need to be made rapidly based on the revenue trends and results.
The odds of having long term playability for games other than adventure are
very low. So for each release, the ﬁrm can receive a spike in the income and
proﬁtability and needs to carefully plan how to utilize this income. Time to
market remains the main success factor in this market segment.

Analyzing this market segment with the help of the CAP model brings for-
ward how extreme the risk levels are in the mobile games business. CAP works
well here as a risk assessment tool that should be applied to investments. In this
market place, the quadrants of the CAP model can be merged and discussed to-
gether. The main analysis should be along the Y-axis and the discussion should
be proﬁt driven since the ﬁrm does not have any control over the platform, but
controls the player experience.

Regarding the contribution strategy, the ﬁrm has the following rules:

• high proﬁt and critical to maintain control features - these features are
considered as key diﬀerentiators but in this context there are very low
barriers to copying by fast followers that clone the features. So keeping
the features proprietary does not eliminate the risk of ”fast clones”.

• low proﬁt and not critical to maintain control features - ﬁrm B obtains

these features from 3rd party suppliers.

• low proﬁt and not critical to maintain control features - ﬁrm B tried
to obtain the components from 3rd parties and if it is not possible the
software architecture is changed to eliminate criticality.

• high proﬁt and not critical to maintain control features - there are no

features with this characteristics according to ﬁrm B.

7.2.2. Application of the CAP Model

We mapped the product features to the CAP model grid. The results are:
0% of the features in the low left quadrant (Standard artifacts), 15% in

38

low right quadrant (Product/Bottleneck artifacts), 80% in upper left quad-
rant (Platform/Leverage artifacts) and 5% in top right (Strategic arti-
facts). Because ﬁrm B works cross platform they are dependent on the platform
provider and obtain other modules from the ecosystem, e.g. the 2d elements and
the networking elements. Firm B hopes that remaining focused on the upper
left corner is suﬃcient to get some customers. The ﬁrm is ”at the mercy of”
the other ﬁrms dominating the top right corner. CAP helps to points out here
that the vast bulk of the technology that enables the experience is already a
commodity and freely available so the only diﬀerentiating side is the game ex-
perience, but this is substantial investment in media, marketing, UI, graphics,
and art-work.

7.2.3. Usability of the CAP Model

The CAP model helps to raise attention that the market is very competitive.
The commodity price is very low, diﬀerentiation is diﬃcult and acquisition costs
are marginal. For ﬁrm B, it means that it is cheaper to pay someone else for
development than to participate in OSS migration and integration. The main
beneﬁt from CAP application remains the conclusion that in mobile game de-
velopment the focus needs to be on business impact. It is important to perform
extensive analysis on the Y-axis for checking if a future game is commercially
viable before analyzing the complexity dimension.

The CAP model, in this case, can be used once and the clear conclusion for
the ﬁrm is that it should change its market focus. The model clearly points
out that if a ﬁrm is relatively new to mobile game development there is little
proﬁtability in this market unless you have 20-30 million dollars to invest in
marketing and other actions to sustain long terms revenues. Our respondent
believes that every new game concept can be and should be evaluated with the
help of the CAP model.

Our respondent believes that the questions in the CAP model should be
answered with the high, medium and low scale during a consensus-driven dis-
cussion. Since most of the discussion in on the Y-axis, the simple 3-point scale
was considered suﬃcient. Our respondent also pointed out that the CAP model
could potentially be extended to include hedonic qualities since a ﬁrm sells ex-
perience rather than software applications. Investing in a high complex game
is very risky so ﬁrms in this domain tend to stay away from high complexity
endeavors that are risky.

7.3. Case Firm C

Firm C operates in the telecommunication domain and extensively uses OSS
to deliver software products and services. We applied the CAP model on one of
the internal software infrastructure projects with the objective to support the
decision process in regard to whether the project should be released as OSS.
CAP was therefore used on a project level, instead of a set of features. We
invited 8 participants from various functions at the ﬁrm (open source strategy,
community management, legal, product management, and development) into a
workshop session where the CAP model was discussed and applied.

39

7.3.1. Overall Contribution Strategy

Decisions on what projects that are released as OSS and what may be con-
tributed to existing OSS projects are made by the OSS governance board, sim-
ilar to that of Sony Mobile (see section 4.3). The board is cross-functional and
includes the representatives from OSS strategy, legal, technology and software
development.

Contribution requests are submitted to the OSS governance board from the
engineering teams and usually concern projects related to the development tool-
chain or the infrastructure technology stack. The requests are usually accepted
given that no security threats are visible or potential patents can be disclosed.
In addition, the board analyses the potential for creating an OSS ecosystem
around the project to be released.

7.3.2. Application of the CAP Model

The studied project was ﬁrst discussed in terms of its background and func-
tionality in order to synchronize the knowledge level among the workshop par-
ticipants. This was followed by a discussion of the project’s business impact.
The questions outlined in Section 4.2 were used for framing the discussion, but
instead of using the Likert scale of 1-4, the workshop participants opted for an
open consensus-seeking discussion from start.

The workshop participants agreed that the project has a high impact in
terms proﬁt and revenue, as it increases operational eﬃciency, decreases the
license-costs, and increases security. As it is an internal infrastructure project
used to deliver software products and services, it has limited impact on the
customers and end-users. The technology is not seen as diﬀerentiating towards
competitors but does enable easier access to new technology-standards that may
have a substantial impact on the business. The ﬁrm’s engineering department
has managed to perform the daily operations and deliver the ﬁrm’s services
without the use of the project, why it would not devastate business if it was no
longer available. However, it does oﬀer clear advantages which would cause a
negative impact if it the availability was reduced or removed.

In regard to control complexity, it was concluded that the ﬁrm has the
competence needed to continue developing the project. Further, the project
did not include any IP and patents from the ﬁrm’s defensive patent portfolio.
The underlying knowledge and technology can be considered as commodity.
However, there is a lack of alternates as only two could be identiﬁed, both with
shortcomings.
Internally of the ﬁrm, there is a deﬁned need for the project,
and that inﬂuence on its development is needed. There is, however, no demand
that the ﬁrm should maintain absolute control, or act as an orchestrator for the
project.

The workshop participants classiﬁed the project as a strategic artifact due
to the high business impact, as well as a relative need for control and lack of
alternatives. Due to the latter reasons, the project should be released as a
new OSS ecosystem as soon as possible in order to maintain the ﬁrst-mover-
advantage and avoid having to adapt to competing solutions. Hence, the main
contribution objective should be to reduce time-to-market. The participants

40

stated that the goal would be to push the project towards commodity, where
the main objective would be to share the maintenance eﬀorts with the ecosystem
and refocus resources on more value-creating activities.

7.3.3. Usability of the CAP Model

The workshop participants found that the CAP model provided a useful lens
through which their OSS governance board could look at contribution requests
and strategically plan decisions. One participant expressed that the CAP model
oﬀers a blue-print to identify what projects that are more important to the ﬁrm,
and align contribution decisions with internal business and product strategies by
explicitly considering the dimensions of business impact and control complexity.
The workshop-participants preferred the open consensus-seeking discussions
as a mean to determine the business impact and control complexity, and based
on this classify the artifact to the most relevant artifact type and contribution
strategy. The chosen strategy and aligning contribution objective could then be
used to add further depth and understanding to the discussion, which helped
the group to arrive at a common decision and ﬁnal contribution strategy for the
reviewed project.

The questions deﬁned in section 4.2 were found useful to frame the discus-
sions. Participants expressed that these could be further customized to a ﬁrm,
but that this should be an iterative process as the OSS governance board ap-
plies the CAP model when reviewing new projects. The participants further
expressed that some questions are more relevant to discuss for certain projects
than others, but they provide a checklist to walk through when reviewing a
project.

8. Discussion

In this section, we discuss the applicability and usability of the CAP model.
We discuss the ﬁndings from the case studies how the CAP model should be
improved or adapted to ﬁt other contexts.

8.1. Applicability and Usability of the CAP Model

The three cases presented in section 7 bring supporting evidence that the
CAP model can be applied on: a set of features, a product or on a complete
project. The model has proven to bring useful insights in analyzing a set of fea-
tures in a product with the indication that larger organizations can beneﬁt more
from the CAP application than small organizations. In case B, the application
of CAP provided valuable insights regarding the nature of the market and the
risks associated with making substantial investment in this market. In case C,
the application of the CAP model provide a lens though which the OSS gover-
nance board can screen current projects and decide upon their contribution or
OSS release strategies.

CAP was found useful as decision-support for individuals, executives and
managers. However, as highlighted by respondents from ﬁrms A, B and C, CAP

41

is best suited for a cross-functional group where consensus-seeking discussions
can be used to bring further facets to the discussions and better answer the
many questions that needs to be addressed. As for Sony Mobile and case ﬁrm
C, a suitable forum for large-sized ﬁrms would be the OSS governance boards
or OSS program oﬃces.

The questions suggested in section 4.2 were found useful, but it was high-
lighted that these may need to be tailored and extended as CAP is applied to
new projects and features. When answering the questions and determining the
dimensions of business impact and control complexity, the cases further showed
that on scale does not ﬁt all. Case ﬁrm A and B suggested a high-medium-
low scale, while case ﬁrm C preferred to use the consensus-seeking discussion
with out the help of a scale. These facts highlight that certain adaptations
are needed for the CAP model to maintain its usability and applicability in
diﬀerent settings.
It also highlights that the decision process should not be
”over-engineered”. Our results suggest that complexity needs to be balanced in
order to maintain usability for the practitioners while still keeping the applica-
bility on diﬀerent types of artifacts and settings. How to adapt this balancing
act and tailor the CAP model to diﬀerent settings is a topic for future design
cycles and case evaluations.

8.2. Inﬂuence Needed to Control

The Kraljic’s portfolio model was originally used to help ﬁrms to procure or
source supply-items for their product manufacturing [21]. One of the model’s
two decision factors is supply risk. To secure access to critical resources, a certain
level of control is needed, e.g., having an inﬂuence on the suppliers to control
the quality and future development of the supply-items. For OSS ecosystems,
this translates into software engineering process control, for example in terms of
how requirements and features are speciﬁed, prioritized and implemented, with
the goal to have them aligned with the ﬁrm’s internal product strategy.

Software artifacts with a high control complexity (e.g., the media frameworks
for Sony Mobile, see section 4.4.1) may require special ownership control and a
high level of inﬂuence in the concerned OSS ecosystems may be warranted to
be able to contribute them. In cases where a ﬁrm does not posses the necessary
inﬂuence, nor wish to invest the contributions and increased OSS activity [28]
which may be required, an alternative strategy is to share the artifact with a
smaller set of actors with similar agendas, which could include direct competi-
tors [5]. This strategy is still in-line with the meritocracy principle as it increases
the potential ecosystem inﬂuence via contributions [28]. Sharing artifacts with
a limited number of ecosystem actors leaves some degree of control and lowers
the maintenance cost via shared ownership [8, 9]. Further, time-to-market for
all actors that received the new artifacts is substantially shortened.

For artifacts with less complexity control, e.g., those concerning require-
ments shared between a majority of the actors in the OSS ecosystem, the need
for control may not be as high, e.g., the DLNA project or Linux commodity
parts, see sections 4.4.2 and 4.4.4. In these cases, it is therefore not motivated

42

to limit control to a smaller set of actors which may require extra eﬀort com-
pared to contributing it to all ecosystem actors. An alternative implementation
may already be present or suggested which conﬂicts with the focal ﬁrm’s solu-
tion. Hence, these types of contributions require careful and long term planning
where the inﬂuence in the ecosystem needs to be leveraged. In case of ﬁrm B,
complexity is controlled by the framework provider.

For both critical or less critical artifacts in regard to control complexity, a
ﬁrm needs to determine the level of inﬂuence in the involved ecosystems. This
factor is not explicitly covered by the CAP model and could be considered as an
additional discussion point or as a separate decision factor in the contribution
strategies which are elicited from the CAP model.

8.3. Direct and Indirect Use of OSS ecosystems

The second decision factor originating from the Kraljic’s model [21] is the
proﬁt impact. Proﬁt generally refers to the margin between what the customer
is willing to pay for the ﬁnal product and what the product costs to produce.
For OSS ecosystems, this translates into how much value a ﬁrm can oﬀer based
on the OSS, e.g. services, and how much resources the ﬁrm needs to invest into
integration and diﬀerentiation activities. I.e., much of the original deﬁnitions
are preserved in the CAP model and the re-labeled decision factor business
impact.

Artifacts with high proﬁt, or high business impact are diﬀerential towards
competitors and add signiﬁcant value to the product and service oﬀerings of the
ﬁrm [19], e.g., the gaming services for Sony Mobile, see section 4.4.1. Analogous,
artifacts with low proﬁt are those related to commodity artifacts shared among
the competitors, e.g., Linux commodity parts, see section 4.4.4. This reasoning
works in cases where the OSS and its ecosystem is directly involved in the
product or service which focal ﬁrm oﬀers to its customers. The customers are
those who decide which product to purchase, and therefore mainly contribute
in the value creation process [59]. This requires good customer-understanding
to judge which artifacts are the potential diﬀerentiators that will inﬂuence the
purchase decision.

In cases where an OSS has an indirect relation to the product or service
of the ﬁrm, the artifact’s value becomes harder to judge. This is because the
artifact may no longer have a clear connection to a requirement which has been
elicited from a customer who is willing to pay for it. In these cases, ﬁrms need
to decide themselves if a particular artifact gives them an advantage relative to
its competitors.

OSS ecosystems often facilitates software engineering process innovations
that later spark product innovations that increase the business impact of an
artifact, e.g., if an artifact makes the development or delivery of the product to a
higher quality or shorter time-to-market respectively [65]. These factors cannot
be judged by marketing, but rather by the developers, architects and product
managers who are involved on the technical aspects of software development
and delivery. In regard to the CAP model, this indirect view of business impact
may be managed by having a cross-functional mix of internal stakeholders and

43

subject-matter experts that can help to give a complete picture of an artifact’s
business impact.

8.4. Comparing to Other Commoditization Models

Both commoditization models suggested by van der Linden et al. [19] and
Bosch [20] consider how an artifact moves from a diﬀerential to a commoditized
state. This is natural as technology and functionality matures and becomes stan-
dardized among actors on the same market or within the same OSS ecosystem.
The impact of whether an artifact is to be considered diﬀerential or commod-
ity is covered by the business impact factor of the CAP model. However, how
quickly an artifact moves from one state to another is not explicitly captured
by the CAP model. This dimension requires ﬁrms to continuously use the CAP
model and track the evolution of features and their business impact. We rec-
ommend that the evaluation is performed every time a new product is planned
and use the reactive approach in combination with the proactive (see section 4.3
and 4.2 respectively).

Relative to the level of commoditization of an artifact, the two previous mod-
els consider how the artifact should be developed and shared. Van der Linden et
al. [19] suggested to internally keep the diﬀerential artifacts and gradually share
them as they become commoditized through intra-organizational collaborations
and ﬁnally as OSS. In the CAP model, this aligns with the control complexity
factor, i.e., how much control and inﬂuence is needed in regard to the artifact.
The main novelty of the CAP model in relation to the other commoditiza-
tion models [19, 20] considers OSS ecosystem participation and enables improved
synchronization towards ﬁrms’ product strategy and product planning, via fea-
ture selection, prioritization and ﬁnally release planning [31]. The strategic
aspect covered by the CAP model uses the commoditization principle together
with business impact estimates and control complexity help may ﬁrms to better
beneﬁt from potential OI beneﬁts. Assuming the commoditization is inevitable,
the CAP model helps ﬁrms to fully beneﬁt the business potential of diﬀeren-
tial features and timely share them with OSS ecosystems for achieving lower
maintenance costs. Moreover, the CAP model helps to visualize the long term
consequences of keeping or contributing an internally developed software arti-
fact (more patches and longer time-to-market as consequence). Finally, the CAP
model provides guidelines for how to position in an OSS ecosystem’s governance
structure [17] and how to inﬂuence it [28].

There may be various reasons why a ﬁrm would wish to contribute an arti-
fact. Thus, the drivers used by Sony Mobile in the CAP model may not be the
same for other ﬁrms wishing to adopt the model. The identiﬁed contribution
drivers and cost structures should be aligned with the ﬁrm’s understanding for
how the value is drawn from the OSS ecosystems. This may help to improve
the understanding of what should be contributed and how the resources should
be planned in relation to these contributions. How the contribution objectives
and drivers for contributions needs to be adapted is a topic for future research.

44

9. Conclusion

The recent changes in software business have forced software-intensive ﬁrms
to rethink and re-plan the ways of creating and sustaining competitive advan-
tage. The advent of OSS ecosystems has accelerated value creation, shortened
time-to-market and reshaped commoditization processes. Harvesting these po-
tential beneﬁts requires improved support for strategic product planning in
terms of clear guidelines of what to develop internally and what to open up.
Currently available commoditization models [19, 20] accurately capture the in-
evitability of commoditization in software business, but lack operational support
that can be used to decide what and when to contribute to OSS ecosystems.
Moreover, the existing software engineering literature lacks operational guide-
lines, for how software-intensive ﬁrms can formulate contribution strategies for
improved strategic product planning at an artifact’s level (e.g., features, require-
ments, test cases, frameworks or other enablers).

This paper introduces the Contribution Acceptance Process (CAP) which is
developed to bridge product strategy with operational product planning and fea-
ture deﬁnition (RQ1). Moreover, the model is designed with commoditization
in mind as it helps in setting contribution strategies in relation to the business
value and control complexity aspects. Setting contribution strategies allow for
strategic product planning that goes beyond feature deﬁnition, realization and
release planning. The CAP model was developed in close collaboration with
Sony Mobile that is actively involved in numerous OSS ecosystems. The model
is an important step for ﬁrms that use these ecosystems in their product devel-
opment and want to increase their OI beneﬁts, such as increased innovation and
shorter time-to-market. This paper also delivers an information meta-model
that instantiates the CAP model and improves the communication and follow-
up of current contribution strategies between the diﬀerent parts of a ﬁrm, such
as management, and development (RQ2).

There are several important avenues for future work around the CAP model.
Firstly, we aim to validate the CAP model and related information meta-model
in other ﬁrms, both statically and dynamically. We plan to focus on under-
standing the ﬁrm speciﬁc and independent parts of the CAP model. Secondly,
we plan to continue to capture operational data from Sony Mobile and the
three case ﬁrms related to the usage of the CAP model that will help in future
improvements and adjustments. Thirdly, we plan to investigate how a contri-
bution strategy can consider the inﬂuence a ﬁrm needs in an OSS ecosystems
to be able to exercise control and introduce new features as needed. We believe
that gaining and maintaining such inﬂuence in the right ecosystems is pivotal
in order to execute successfully on contribution strategies. Fourthly, we want
to investigate to what degree the CAP model supports innovation assessment
for ﬁrms not working with OSS ecosystems. Our assumption is that these ﬁrms
could use the CAP model to estimate the degree of innovativeness of the features
(could be considered as an innovation benchmark) without setting contribution
strategies. Lastly, we plan to explore which technical aspects should be con-
sidered and combined with the current strong business view of the CAP model

45

(e.g. technical debt and architecture impact seems to be good candidates to be
included).

10. Acknowledgement

This work was funded by Vinnova in the ITEA2 project 12018 SCALARE,
and supported by the IKNOWDM project [grant number 20150033] from the
Knowledge Foundation in Sweden and the Swedish National Science Foundation
Framework [grant number 621-2012-5354]. We also would like to thank Prof.
Per Runeson and Prof. Bj¨orn Regnell for valuable feedback and discussions
regarding this study. Further, we would like to thank the four anonymous
reviewers for their constructive and valuable comments provided in the review
process.

References

References

[1] J. West, M. Bogers, Leveraging external sources of innovation: A review of
research on open innovation, Journal of Product Innovation Management
(2013).

[2] H. Munir, K. Wnuk, P. Runeson, Open innovation in software engineering:
a systematic mapping study, Empirical Software Engineering (2015) 1–40.

[3] S. Jansen, S. Brinkkemper, A. Finkelstein, Business network management
as a survival strategy: A tale of two software ecosystems, Proccedings of
the 1st International Workshop on Software Ecosystems (2009) 34–48.

[4] J. West, How open is open enough?: Melding proprietary and open source

platform strategies, Research policy 32 (7) (2003) 1259–1285.

[5] J. West, S. Gallagher, Challenges of open innovation: the paradox of ﬁrm
investment in open-source software, R&d Management 36 (3) (2006) 319–
331.

[6] H. Chesbrough, M. Appleyard, Open innovation and strategy, California

management review 50 (1) (2007) 57–76.

[7] H. Chesbrough, Open innovation: the new imperative for creating and
proﬁting from technology, Harvard Business School Press, Boston, Mass.,
2003.

[8] M. Stuermer, S. Spaeth, G. Von Krogh, Extending private-collective inno-

vation: a case study, R&D Management 39 (2) (2009) 170–191.

[9] K. Ven, H. Mannaert, Challenges and strategies in the use of open source
software by independent software vendors, Information and Software Tech-
nology 50 (9) (2008) 991–1002.

46

[10] J. Du, B. Leten, W. Vanhaverbeke, H. Lopez-Vega, When research meets
development: antecedents and implications of transfer speed, Journal of
Product Innovation Management 31 (6) (2014) 1181–1198.

[11] K. Laursen, A. Salter, Open for innovation: the role of openness in ex-
plaining innovation performance among uk manufacturing ﬁrms, Strategic
management journal 27 (2) (2006) 131–150.

[12] H. Munir, J. Lin˚aker, K. Wnuk, P. Runeson, B. Regnell, Open innovation
using open source tools: a case study at sony mobile, Empirical Software
Engineering (2017) 1–38.

[13] H. Chesbrough, S. Brunswicker, A fad or a phenomenon?: The adoption of
open innovation practices in large ﬁrms, Research-Technology Management
57 (2) (2014) 16–25.

[14] S. Fricker, Software product management,

in:

Software for People,

Springer, 2012, pp. 53–81.

[15] K. Wnuk, D. Pfahl, D. Callele, E. Karlsson, How can open source software
development help requirements management gain the potential of open
innovation: an exploratory study, in: Proceedings of the ACM-IEEE inter-
national symposium on Empirical software engineering and measurement,
ACM, 2012, pp. 271–280.

[16] W. Stam, When does community participation enhance the performance
of open source software companies?, Research Policy 38 (8) (2009) 1288 –
1299.

[17] A. Baars, S. Jansen, A framework for software ecosystem governance, in:
International Conference of Software Business, Springer, 2012, pp. 168–180.

[18] J. Henkel, Selective revealing in open innovation processes: The case of

embedded linux, Research Policy 35 (7) (2006) 953–969.

[19] F. Van Linden, B. Lundell, P. Marttiin, Commodiﬁcation of industrial soft-

ware: A case for open source, IEEE Software 26 (4) (2009) 77–83.

[20] J. Bosch, Achieving simplicity with the three-layer product model, Com-

puter 46 (11) (2013) 34–39.

[21] P. Kraljic, Purchasing must become supply management, Harvard business

review 61 (5) (1983) 109–117.

[22] H. W. Chesbrough, Open innovation: The new imperative for creating and

proﬁting from technology, Harvard Business Press, 2006.

[23] F. J. Garc´ıa-Pe˜nalvo, A. Garc´ıa-Holgado, Open Source Solutions for Knowl-
edge Management and Technological Ecosystems, IGI Global, 2017.

47

[24] S. Jansen, A. Finkelstein, S. Brinkkemper, A sense of community: A re-
search agenda for software ecosystems, in: 31st International Conference
on Software Engineering, IEEE, 2009, pp. 187–190.

[25] K. Manikas, K. Hansen, Software ecosystems–a systematic literature re-

view, Journal of Systems and Software 86 (5) (2013) 1294–1306.

[26] E. Enkel, O. Gassmann, H. Chesbrough, Open r&d and open innovation:
exploring the phenomenon, R&d Management 39 (4) (2009) 311–316.

[27] L. Dahlander, M. Magnusson, How do ﬁrms make use of open source com-

munities?, Long Range Planning 41 (6) (2008) 629–649.

[28] L. Dahlander, M. Magnusson, Relationships between open source software
companies and communities: Observations from nordic ﬁrms, Research Pol-
icy 34 (4) (2005) 481 – 493.

[29] S. Jansen, S. Brinkkemper, J. Souer, L. Luinenburg, Shades of gray: Open-
ing up a software producing organization with the open software enterprise
model, Journal of Systems and Software 85 (7) (2012) 1495–1510.

[30] M. Khurum, T. Gorschek, M. Wilson, The software value map — an ex-
haustive collection of value aspects for the development of software inten-
sive products, Journal of Software: Evolution and Process 25 (7) (2013)
711–741.

[31] H. Kittlaus, P. Clough, Software Product Management and Pricing: Key
Success Factors for Software Organizations, Springer Berlin Heidelberg,
2008.

[32] D. Badampudi, C. Wohlin, K. Petersen, Software component decision-
making: In-house, oss, cots or outsourcing - a systematic literature review,
Journal of Systems and Software 121 (2016) 105 – 124.

[33] J. Henkel, Champions of revealing-the role of open source developers in
commercial ﬁrms, Industrial and Corporate Change 18 (3) (2008) 435–471.

[34] P. J. ˚Agerfalk, B. Fitzgerald, Outsourcing to an unknown workforce: Ex-
ploring opensurcing as a global sourcing strategy, MIS quarterly (2008)
385–409.

[35] M. Cani¨els, C. Gelderman, Purchasing strategies in the kraljic matrix—a
power and dependence perspective, Journal of Purchasing and Supply Man-
agement 11 (2–3) (2005) 141 – 155.

[36] C. Gelderman, A. Weele, Handling measurement issues and strategic di-
rections in kraljic’s purchasing portfolio model, Journal of Purchasing and
Supply Management 9 (5–6) (2003) 207 – 216.

48

[37] P. Ulkuniemi, L. Araujo, J. T¨ahtinen, Purchasing as market-shaping: The
case of component-based software engineering, Industrial Marketing Man-
agement 44 (2015) 54 – 62.

[38] B. Shaya, Process handling: A study for optimizing the processes for sourc-
ing it and managing software licenses, Master Thesis Industrial Economics
and Management (Dept.), KTH, Sweden.

[39] G. Gangadharan, L. Uden, P. Luttighuis, Sourcing Requirements and
Designs for Software as a Service, International Journal of Systems and
Service-Oriented Engineering 6 (1) (2016) 1–16.

[40] A. Maglyas, S. Fricker, The preliminary results from the software prod-
uct management state-of-practice survey, in: C. Lassenius, K. Smolander
(Eds.), International Conference on Software Business, Paphos, Cyprus,
2014, pp. 295–300.

[41] D. M´endez Fern´andez, S. Wagner, K. Lochmann, A. Baumann,
Investigation of
H. de Carne, Field study on requirements engineering:
artifacts, project parameters, and execution strategies, Information and
Software Technology 54 (2) (2012) 162–178.

[42] W. Bekkers, I. van de Weerd, M. Spruit, S. Brinkkemper, A framework
for process improvement in software product management, in: European
Conference on Software Process Improvement, Springer, 2010, pp. 1–12.

[43] D. M. Fern´andez, B. Penzenstadler, M. Kuhrmann, M. Broy, A meta model
for artefact-orientation: Fundamentals and lessons learned in requirements
engineering, no. 6395 in Lecture Notes in Computer Science, Springer Berlin
Heidelberg, 2010, pp. 183–197.

[44] T. Alspaugh, W. Scacchi, et al., Ongoing software development without
classical requirements, in: 21st IEEE International Requirements Engi-
neering Conference, IEEE, 2013, pp. 165–174.

[45] N. Ernst, G. Murphy, Case studies in just-in-time requirements analysis,
in: IEEE Second International Workshop on Empirical Requirements En-
gineering, IEEE, 2012, pp. 25–32.

[46] W. Scacchi, Understanding the requirements for developing open source
software systems, in: Software, IEE Proceedings-, Vol. 149, IET, 2002, pp.
24–39.

[47] J. Henkel, S. Sch¨oberl, O. Alexy, The emergence of openness: How and why
ﬁrms adopt selective revealing in open innovation, Research Policy 43 (5)
(2014) 879–890.

[48] K. Pohl, G. B¨ockle, F. Linden, Software Product Line Engineering: Foun-
dations, Principles and Techniques, Springer-Verlag New York, Inc., Secau-
cus, NJ, USA, 2005.

49

[49] R. Kemp, Open source software (oss) governance in the organisation, Com-

puter Law & Security Review 26 (3) (2010) 309–316.

[50] M. Komssi, M. Kauppinen, H. T¨oh¨onen, L. Lehtola, A. Davis, Roadmap-
ping problems in practice: value creation from the perspective of the cus-
tomers, Requirements Engineering 20 (1) (2015) 45–69.

[51] D. Damian, Stakeholders in global requirements engineering: Lessons

learned from practice, Software, IEEE 24 (2) (2007) 21–27.

[52] L. Karlsson, G. Dahlstedt, B. Regnell, J. N. och Dag, A. Persson, Require-
ments engineering challenges in market-driven software development – an
interview study with practitioners, Information and Software Technology
49 (6) (2007) 588 – 604, qualitative Software Engineering Research.

[53] B. Regnell, S. Brinkkemper, Market-driven requirements engineering for
software products, in: Engineering and managing software requirements,
Springer, 2005, pp. 287–308.

[54] K. Wnuk, B. Regnell, B. Berenbach, Scaling up requirements engineering –
exploring the challenges of increasing size and complexity in market-driven
software development, Springer Berlin Heidelberg, Berlin, Heidelberg, 2011,
pp. 54–59.

[55] A. Hevner, S. March, J. Park, S. Ram, Design science in information sys-

tems research, MIS Q. 28 (1) (2004) 75–105.

[56] P. Runeson, M. H¨ost, A. Rainer, B. Regnell, Case Study Research in Soft-

ware Engineering - Guidelines and Examples, Wiley, 2012.

[57] K. Nakakoji, Y. Yamamoto, Y. Nishinaka, K. Kishida, Y. Ye, Evolution
patterns of open-source software systems and communities, in: Proceedings
of the international workshop on Principles of software evolution, ACM,
2002, pp. 76–85.

[58] M. Khurum, T. Gorschek, M. Wilson, The software value map ˆa€” an
exhaustive collection of value aspects for the development of software in-
tensive products, Journal of Software: Evolution and Process 25 (7) (2013)
711–741.

[59] A. Aurum, C. Wohlin, A value-based approach in requirements engineering:
Explaining some of the fundamental concepts, Springer Berlin Heidelberg,
Berlin, Heidelberg, 2007, pp. 109–115.

[60] T. Gorschek, P. Garre, S. Larsson, C. Wohlin, A model for technology

transfer in practice, IEEE software 23 (6) (2006) 88–95.

[61] P. Runeson, M. H¨ost, Guidelines for conducting and reporting case study
research in software engineering, Empirical software engineering 14 (2)
(2009) 131–164.

50

[62] B. Flyvbjerg, Five misunderstandings about case-study research, in: Quali-
tative Research Practice, concise paperback Edition, SAGE, 2007, pp. 390–
404.

[63] P. Runeson, M. H¨ost, A. Rainer, B. Regnell, Case Study Research in Soft-

ware Engineering - Guidelines and Examples, Wiley, 2012.

[64] M. Poikselk¨a, H. Holma, J. Hongisto, J. Kallio, A. Toskala, Voice over LTE

(VoLTE), John Wiley & Sons, 2012.

[65] J. Lin˚aker, H. Munir, P. Runeson, B. Regnell, C. Schrewelius, A Survey on
the Perception of Innovation in a Large Product-focused Software Organi-
zation, 6th International Conference on Software Business - ICSOB.

51

