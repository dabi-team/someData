2
2
0
2

g
u
A
9
2

]
E
S
.
s
c
[

1
v
1
7
4
3
1
.
8
0
2
2
:
v
i
X
r
a

How to Extend the Abstraction Reﬁnement
Model for Systems with Emergent Behavior?

Mohamed Touﬁk Ailane, Christoph Knieke, and Andreas Rausch

Institute for Software and Systems Engineering, Clausthal University of Technology,
Clausthal-Zellerfeld, Germany
{mohamed.toufik.ailane,christoph.knieke,andreas.rausch}@tu-clausthal.de
https://www.isse.tu-clausthal.de

Abstract. The Abstraction Reﬁnement Model has been widely adopted
since it was ﬁrstly proposed many decades ago. This powerful model of
software evolution process brings important properties into the system
under development, properties such as the guarantee that no extra be-
havior (speciﬁcally harmful behaviors) will be observed once the system
is deployed. However, perfect systems with such a guarantee are not a
common thing to ﬁnd in real world cases, anomalies and unspeciﬁed be-
haviors will always ﬁnd a way to manifest in our systems, behaviors that
are addressed in this paper with the name “emergent behavior”. In this
paper, we extend the Abstract Reﬁnement Model to include the concept
of the emergent behavior. Eventually, this should enable system devel-
opers to: (i) Concretely deﬁne what an emergent behavior is, (ii) help
reason about the potential sources of the emergent behavior along the de-
velopment process, which in return will help in controlling the emergent
behavior at early steps of the development process.

Keywords: Emergent Behavior · Software Evolution · Abstraction Re-
ﬁnement Model · Formal Methods · Software Development Process.

1

Introduction

A proliferation of research works have been dedicated to deﬁne, formalize and
control the “emergent behavior” as it can be detrimental - in a way that it can
endanger human lives in the case of safety-critical systems, as well as it can be
beneﬁcial - in a way that it can fulﬁll some users requirements or bring some
important properties to the system in hand. In this context, one approach to
tackle the emergent behavior issues is to consider the behavior during the early
stages of the development of the system as well as during the operational phases.

©2022 SPRINGER NATURE. Personal use of this material is permitted. Per-
mission from IEEE must be obtained for all other uses,
in any current or fu-
ture media, including reprinting/republishing this material for advertising or pro-
for resale or redistribution to
motional purposes, creating new collective works,
servers or lists, or reuse of any copyrighted component of this work in other works..

 
 
 
 
 
 
Diﬀerent approaches, paradigms and life-cycles were contributed to the wealth
of knowledge of software systems development since the early days of software
engineering. Formal development methods stand as one of the most reliable
approaches for software development although the mathematical complexity it
might impose. Nevertheless, formal methods gained such excellent worldwide
reputation thanks to the ease of correctness and consistency checking. A cor-
rect by construction system is a fundamental property when it comes to resilient
safety-critical systems.

For the sake of investigating the emergent behavior in software systems, we
adopt a model-based development process which is the waterfall development
model [13] as a basis of our work to deﬁne and formalize the emergent behavior.
The waterfall development model is one of the earliest and simplest models
in the history of software development, and it is chosen here as an attempt
to eliminate any kind of complexity that comes along with the development
model, and keep the focus on the concept of the emergence phenomenon and it’s
relative complexity. As the developer(s) move from one phase to the next one,
diﬀerent models are generated based on each phase. Hence, in order to track
the evolution of the software system models, the evolution model Abstraction
Reﬁnement Model (ARM) is chosen. By tracking the evolution of the system
from the very beginning, we investigate how would an emergent behavior emerge
or manifest and how does it evolve and ﬁnally be observed once the system is
deployed.

For this reason, we structure the remainder of this paper as follows: Section 2
will provide some related work regarding the study of the emergence phenomenon
in software engineering. Next, Section 3 brings some fundamentals, in particu-
lar the deﬁnition of the Abstraction Reﬁnement Model (ARM). Our approach
towards extending the ARM for systems with emergent behavior is described in
Section 4. Finally, Section 5 concludes.

2 Related Work

Emergent behavior in software systems engineering has been a subject of study
for a long time. Some research directions in this ﬁeld are how to detect (e.g.,
[10,6]), how to model (e.g., [4,8]), and how to verify and validate (e.g., [3,2]) the
emergent behavior in complex software systems.

In our previous work [1], we formalized the deﬁnition of emergent behavior in
system of systems. The authors discussed various formal and informal deﬁnitions
and stated some properties of emergent behavior. They used an approach to
analyse the development processes in building software systems using an example
of a traﬃc light system. Finally, they gave an informal deﬁnition which states
that emergent behavior is a non designed behavior which can be beneﬁcial,
detrimental or neutral to the system.

3 Fundamentals and Formalization

3.1 Open-/Closed-World Assumption and Circumscription

The development of software systems and applications can be predicated on dif-
ferent world assumptions: In closed-world assumption (CWA), the assumption is
based on a non-monotonic approach where the idea is that what is not currently
known to be true, is false [9]. A software development under the CWA consists
of complete models where anything that is not speciﬁed in the model is faulty
and wrong. As will be shown in later sections, this is advantageous for devel-
oping e.g., safety-critical systems where the system is guaranteed (with proofs)
to fulﬁll safety requirements among other requirements. On the other hand, the
open-world assumption (OWA) is based on the alternative reasoning that states:
what is predicated in the knowledge base to be true does not aﬀect the not
speciﬁed information, i.e, what is not know to be true, it is not necessarily false
like in CWA. The reasoning of unknown information is independent from what
is added to the knowledge base [9].

Another non-monotonic reasoning is called the circumscription. This type of
reasoning can be seen as generalization of the closed-world reasoning where it’s
creator John McCarthy used it to formalize the common sense assumption that
things are as expected unless otherwise speciﬁed [7].

3.2 Abstraction Reﬁnement Model

Abstraction Reﬁnement Model (ARM) is a model of the software evolution pro-
cess. It consists of three components: descriptions of the software system, a pre-
order of relative correctness between system descriptions, and transformations
between the system descriptions [5]. The model is based on the closed-world as-
sumption and a proven model for building reliable and “correct by construction”
systems. It also provides a balance between forward and reverse engineering in
the maintenance phase. In order to deﬁne the concept of the ARM, a set of key
deﬁnitions are provided, which are based on [11]:

Syntactic Model Deﬁnes the description techniques (be it textual or graphical)
that are available for the system developer to describe and represent the diﬀerent
aspects of the system characteristics (requirements, design, etc.). We use the
term model as a short instead of syntactic models.

Model Semantics Reﬂects the meaning of the syntactic model, and for this
reason the semantics are usually preferred to be speciﬁed formally to avoid any
ambiguity consequences. In this paper, a behavior trace can be viewed as a
semantics to a given model.

Semantic Function Is a formal technique to deﬁne the relationship between
each model and it’s corresponding semantics. Hence, the semantic function which
we denote as sem, is a mapping function that maps each representation in the
set of models, to an interpretation in the set of behaviors. The sem function can
be formally deﬁned as follows:

sem : M → P(BT )

(1)

where M is the universe of all models, BT is the universe of all behavior traces,
and P(BT ) is the universe of all behaviors. P stands for the power set, the set
of all subsets of a set (here: BT ).

Evolution An important aspect during the development process is evolution.
The evolution consists of the transformation and change process of the system
speciﬁcations during the diﬀerent development phases. At each phase, a new
model that deﬁnes the system characteristics is developed as can be seen in
Fig. 1. Formally, the evolution function evolve can be formalized as the following:

evolve : M → M

(2)

Based on the degree of transformation and change of a model m ∈ M generated
from a previous model, an evolution step can be called:

– Abstraction: An evolution is said to be of type abstraction, if condition (3)
holds. This means that the newly developed model (which we consider as an
evolution of the previous developed model) will contain all the semantics of
the previous model and may contain more semantics:

sem(m) ⊆ sem(evolve(m))

(3)

– Reﬁnement: An evolution is said to be of type reﬁnement if condition (4)
holds. The semantics of the newly evolved model are all included in the se-
mantics of the previous model. Moreover, the previous developed model may
contain more semantics that are not present in the new model. In ARM, this
condition must hold between the diﬀerent models that are generated during
the software development process. Once the condition holds, the developer
is guaranteed that no extra behavior than speciﬁed is to be observed at
runtime:

sem(evolve(m)) ⊆ sem(m)

(4)

– Total change: An evolution is said to be of type total change if condition
(5) holds, which indicates that the newly developed model is completely
diﬀerent than the previous model, where no semantics are shared:

sem(m) ∩ sem(evolve(m)) = ∅

(5)

– Strict evolution: An evolution is said to be of type strict evolution, if
condition (6) holds. This means that the newly evolved model shares some
semantics with the previous developed model, however, the previous model
may contain a set of semantics that are not part of the newly evolved model
and vice versa:

sem(m) ∩ sem(evolve(m)) (cid:54)= ∅
∧ sem(m) (cid:42) sem(evolve(m))
∧ sem(evolve(m)) (cid:42) sem(m)

(6)

4 Extending the abstraction reﬁnement model for

systems with emergent behavior

4.1 ARM application on the Waterfall sequential development

process model

Waterfall development process model was introduces early in the seventies [13]
for methodological development of software systems. The model consists of pre-
deﬁned development phases presented in a sequential way in the form of a water-
fall (Fig. 1). The software development process usually contains various models
described with diﬀerent notations based on many viewpoints and aspects. The
completion of a phase results in a new model as an output of the phase, e.g., a
requirements model, or a design model.

Fig. 1. Waterfall software development model and reﬁnement according to ARM

In order to apply the ARM on the waterfall development process, the follow-

ing notations are deﬁned and formalized:

Let the set of representations M be the universe of all models and the disjoint

subsets corresponding to software development phases as follows:

– Universe of all requirement models RM such that: RM ⊆ M
– Universe of all design models DM such that: DM ⊆ M
– Universe of all implementation models IM such that: IM ⊆ M

Let BT be the universe of all observable behavior traces, and the power set

of P(BT ) is the universe of all observable behaviors.

By applying the semantic function sem deﬁned above on a given system S,
in order to map each model with the respective set of behavior traces, we get
the following: sem(rms ∈ RM ) := RBTs ∈ P(BT );
sem(dms ∈ DM ) := DBTs ∈ P(BT ); sem(ims ∈ IM ) := IBTs ∈ P(BT ),
where RBTs is the set of behavior traces of the requirement model rm of a
system S, DBTs is the set of behavior traces of the design model dm of a system
S, IBTs is the set of behavior traces of the implementation model im of a system
S.

The basic idea is: if the reﬁnement constraint (equation 4) holds during the
development phases, we are guaranteed to observe a set of behavior traces OBTs
that include no extra behavior than speciﬁed (see Fig. 2). In other words, ARM
guarantees that the following condition always holds:

OBTs ⊆ IBTs ⊆ DBTs ⊆ RBTs

(7)

Fig. 2. Consequences if the reﬁnement constraint of ARM holds during development

4.2 Emergent behavior contradiction in ARM

In the previous sections, we reviewed the key elements regarding the evolution of
diﬀerent development models and corresponding behaviors of the system during
the development process, and how diﬀerent sets of behavior traces can be mapped
to the models to provide an interpretation based on a semantic function. Now,
we reason about the nature of the observed behavior and what could be the
source and semantics of the emergent behavior, and how does it manifest after
deployment at run-time.

First, let EBT be the set of emergent behavior traces, and EBTs the set of

emergent behavior traces of a system S such that:

and

EBTs ⊆ EBT

EBT ⊆ P(BT )

(8)

(9)

If we adopt the deﬁnition of the emergent behavior presented in [1] where
the emergent behavior is the behavior that has not been speciﬁed during devel-
opment but observed during run-time, then ARM guarantees due to reﬁnement
constraints that no emergent behavior will emerge at run-time and the following
condition is always guaranteed to take place:

EBTs (cid:42) OBTs ⊆ IBTs ⊆ DBTs ⊆ RBTs

(10)

This implies that no extra unspeciﬁed behavior can be observed at run-time if
the reﬁnements constrains hold during the development phases. On the other
hand, and due to real world observation, we have:

EBTs ⊆ OBTs ⊆ IBTs ⊆ DBTs ⊆ RBTs

(11)

Eventually, this leads to a contradiction as the emergent behavior manifest itself
to be part of the observed behavior, as it indicates the following:

and:

EBTs ⊆ OBTs.

OBTs (cid:42) IBTs.

(12)

(13)

Both equations 12 and 13 represent the basis observation in [1], where the

following deﬁnition of the emergent behavior was provided:

The emergent behavior is the behavior that is not speciﬁed during development
but appears (observed) at run-time.

The contradiction of both equations (7) and (13) is basically due to the
closed-world assumption that was assumed by adopting ARM as an evolution
model. However, the emergent behavior reﬂects the fact that the development
models are not complete. For this reason we analyse the emergent behavior

semantics at each development phase and reason how do such results reﬂect on
the development process:
Case 1: There is an inconsistency between the observed emergent behavior and
the required behavior. As shown in equation 6, this strict evolution of models says
that the emergent behavior can not be fully explained based on the requirement
model, this can be formally illustrated as the following:

sem(rms) ∩ EBTs (cid:54)= ∅ ∧ sem(rms) (cid:42) EBTs ∧ EBTs (cid:42) sem(rms)

Case 2: The emergent behavior is a reﬁnement of the required behavior. However,
the emergent behavior indicates that it has been a strict evolution of the design
model resulting into an inconsistency between the emergent of the designed
behavior, this can be formally illustrated as the following:

EBT s ⊆ sem (rms) ∧ sem(dms) ∩ EBTs (cid:54)= ∅
∧ sem(dms) (cid:42) EBTs ∧ EBTs (cid:42) sem(dms)

Case 3: The emergent behavior is a reﬁnement of the designed behavior but is
not a reﬁnement of the implemented behavior, again the strict evolution of the
implementation behavior can only be understood if the implementation behavior
consists of something more than the code. If the implementation model is pure
code, it is unlikely to imagine that what will be observed would be semantically
diﬀerent than the emergent behavior. However, if the implementation model
consists of more than the code (hardware equipment, environment setup, etc.),
it could be the case that the emergent behavior can not be fully explained based
on the implementation model, this can be formally illustrated as the following:

EBTs ⊆ sem (dms) ∧ sem(ims) ∩ EBTs (cid:54)= ∅
∧ sem(ims) (cid:42) EBTs ∧ EBTs (cid:42) sem(ims)

In all cases, a room of an emergent behavior can be found at each development
phase, the emergent behavior can be inherited from one phase to another, as
well as it can originate at a speciﬁc development phase. In the next section,
and in order to investigate the emergent behavior, we analyse the speciﬁed and
unspeciﬁed behaviors at each phase to track the notion of the emergent behavior.

4.3 Extended Abstraction Reﬁnement Model

Based on the deﬁnition that the emergent behavior is the behavior that is not
speciﬁed at development time but is observed at run-time, an investigation of the
unspeciﬁed observed behavior traces of a system S (which we denote as U OBTs)
is conducted. At each development phase, we reason about the interpretations
in terms of the speciﬁed behaviors RBTs, DBTs, IBTs and the relevant unspec-
iﬁed behaviors: U OBTsR at a requirement level, and U OBTsD at a design level,
respectively. Here, we assume the implementation model to be pure code, so that
no unspeciﬁed observed behavior traces exist for the implementation model. By

Fig. 3. Emergent behavior in extended ARM

extending the development model as shown in Fig. 3, we expect that we will be
able to track and identify how the emergent behavior occurs and evolves through
the diﬀerent development phases. As explained earlier, the ARM operates based
on the notion of the closed world assumption, where the requirement speciﬁ-
cation is assumed complete. However, in the extended ARM, we reason under
an extended-closed world assumption (circumscription) which operates on the
notion that some intelligent computer systems can reach conclusions based on
sparse data, i.e., some requirements can be completed later by analysing data
from an initial built system [12]. Here, we assume that the models are not com-
plete, and the system will be tested to explore extra behaviors and learning
speciﬁcation by observation at run-time.

We interpret that there are speciﬁed behavior traces and unspeciﬁed behavior
traces in each phase. The speciﬁed behavior trace is the part that is concrete
while the unspeciﬁed part is assumed to be behavior traces that can exist in the
design and implementation phase but not speciﬁed initially in the requirement
phase as seen in Fig. 3. In the design and implementation phase, the concrete part
which is produced through reﬁnement of the previous phase (each surrounded
by the dashed line in Fig. 3) is complete and satisﬁes the reﬁnement condition
while the extra behavior part also relates to the unspeciﬁed part of the preceding
phase. The union of the concrete part and the extra part is what makes the total
speciﬁcation in each phase. The emergent behavior traces (EBTs) is part of the

extra behaviors that can be seen by testing and observing the system during
run-time.

5 Conclusion

Emergent behavior in software systems is the behavior that manifests itself due to
incomplete speciﬁcations during development. To control the emergent behavior
throughout the development process we ﬁrst introduced a formalization based
on the ARM as a model of software evolution process. We showed that a strict
application of the ARM leads to a contradiction, where the emergent behavior
can not occur. Therefore, we extended the ARM to include the concept of the
emergent behavior, where we extend the reﬁnement condition and are now able
to deal with incompletenesses in the speciﬁcations.

In a future work, we will apply speciﬁcation mining techniques to learn spec-
iﬁcations at run-time by observation to detect emergent behavior. The approach
introduced in this paper will be part of an overall “DevOps” development pro-
cess, where the mined speciﬁcations will then be used to automatically complete
speciﬁcations of the development phases, which should improve in return the
understanding and the development of the complex systems.

6 Acknowledgement

The results of this contribution are based on the work of the project “DevOpt:
DevOps for Self-Optimizing Emergent Systems”. DevOpt is funded by the Fed-
eral Ministry of Education and Research (BMBF) of Germany in the funding
programme of “IKT 2020 – Forschung für Innovationen”.

References

1. Ailane, T.M., Abboush, M., Knieke, C., Lawendy, A., Rausch, A.: Toward formal-
izing the emergent behavior in software engineering. In: 2021 IEEE/ACM Joint
9th International Workshop on Software Engineering for Systems-of-Systems and
15th Workshop on Distributed Software Development, Software Ecosystems and
Systems-of-Systems (SESoS/WDES). pp. 32–39. IEEE (2021)

2. Brings, J., Daun, M., Keller, K., Obe, P.A., Weyer, T.: A systematic map on
veriﬁcation and validation of emergent behavior in software engineering research.
Future Generation Computer Systems 112, 1010–1037 (2020)

3. Brings, J., Daun, M., Kempe, M., Weyer, T.: On diﬀerent search methods for
systematic literature reviews and maps: Experiences from a literature search on
validation and veriﬁcation of emergent behavior. In: Proceedings of the 22nd Inter-
national Conference on Evaluation and Assessment in Software Engineering 2018.
pp. 35–45 (2018)

4. Hsu, J.C., Butterﬁeld, M.: Modeling emergent behavior for systems-of-systems. In:
INCOSE International Symposium. vol. 17, pp. 1811–1821. Wiley Online Library
(2007)

5. Keller, B.J., Nance, R.E.: Abstraction reﬁnement: A model of software evolution.
Journal of Software Maintenance: Research and Practice 5(3), 123–145 (1993)
6. Kjeldaas, K.A., Haugen, R.A., Syverud, E.: Challenges in detecting emergent be-
havior in system testing. In: INCOSE International Symposium. vol. 31, pp. 1211–
1228. Wiley Online Library (2021)

7. McCarthy, J.: Circumscription - a form of non-monotonic reasoning. Artiﬁcial in-

telligence 13(1-2), 27–39 (1980)

8. Mittal, S., Diallo, S., Tolk, A.: Emergent behavior in complex systems engineering:

a modeling and simulation approach. John Wiley & Sons (2018)

9. Moore, P., Van Pham, H.: On context and the open world assumption. In: 2015
IEEE 29th International Conference on Advanced Information Networking and
Applications Workshops. pp. 387–392. IEEE (2015)

10. Moshirpour, M., Mousavi, A., Far, B.H.: Detecting emergent behavior in dis-
tributed systems using scenario-based speciﬁcations. International Journal of Soft-
ware Engineering and Knowledge Engineering 22(06), 729–746 (2012)

11. Rausch, A.: Componentware. Ph.D. thesis, Technische Universität München (2001)
12. Razniewski, S., Savkovic, O., Nutt, W.: Turning the partial-closed world assump-

tion upside down. In: AMW (2016)

13. Royce, W.: The software lifecycle model (waterfall model). In: Proc. Westcon.

vol. 314 (1970)

