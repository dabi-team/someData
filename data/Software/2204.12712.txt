Release as a Contract: A Concept of
Meta-Maintenance for the Entire FLOSS Ecosystem

Hideaki Hata
Shinshu University
hata@shinshu-u.ac.jp

2
2
0
2

r
p
A
7
2

]
E
S
.
s
c
[

1
v
2
1
7
2
1
.
4
0
2
2
:
v
i
X
r
a

Abstract—We advocate for a paradigm shift in supporting
free/libre and open source software (FLOSS) ecosystem main-
tenance, from focusing on individual projects to monitoring a
whole organic system of the entire FLOSS ecosystem, which
we call software meta-maintenance. We discuss challenges of
building a global source code management system, a global issue
management system, and FLOSS human capital index, based on
the blockchain technologies.

I. INTRODUCTION AND THE VISION

Free/libre and open source software (FLOSS) is character-
ized as a privately produced public good and a common pool
resource (non-exclusive) [1]. Based on various internal and
external motivations, developers engage in FLOSS [2], and
FLOSS projects have a tremendous impact on our daily lives.
However, because of the nature of free and open source,
and the lack of the view of the whole picture,
there are
several problems even in the aspect of code. (i) Broken
library dependencies. Even though third-party library reuse is
common practice, updating libraries is not as common. From
the study of library migration in more than 4,600 GitHub
software projects, Kula et al. reported that 81.5% of the
studied software used outdated libraries [3]. From the survey,
they also found that 69% of the answered developers claimed
to be unaware of their vulnerable dependencies. (ii) License
violations. From the study of the Android application market
F-Droid, Mlouki et al. found license violations in 17 out
of 857 applications [4]. They also reported that many ﬁles
are not licensed in their ﬁrst release. (iii) Ad hoc code reuses.
Copying software components and then maintaining them by a
new owner is one type of code reuse, which is known as clone-
and-own [5], [6]. In software product line engineering, the
usage of this clone-and-own approach is discouraged, since it
makes maintaining multiple product lines difﬁcult. If changes
are made in the original or copied components, they are not
easily propagated. This is because of the ad hoc nature of
component reusing. Developers working in different product
lines do not know when clone-and-own operations occurred
and where the cloned components are located. Although there
are disadvantages,
the clone-and-own approach is adopted
in FLOSS projects as well as industrial software product
lines due to its beneﬁts, such as simplicity, availability, and
independence of developers [5].

Even with its large-scale code and a large amount of
developers, Google do not have such issues [7]. As Google is
a single company, it is not questionable not to have license

issues. Then how do they solve other problems? Google
is reported to have a monolithic source code management
system, which have several advantages: uniﬁed versioning,
extensive code sharing and reuse, simpliﬁed dependency man-
agement, atomic changes, large-scale refactoring, collaboration
across teams, ﬂexible team boundaries and code ownership,
and code visibility and clear tree structure providing implicit
team namespacing [7]. Based on the monolithic source code
management, changes to core libraries are promptly and easily
propagated through the dependency chain into the ﬁnal prod-
ucts that rely on the libraries [7]. How can we realize this
scenario in FLOSS development?

We advocate for a new vision of supporting FLOSS main-
tenance, meta-maintenance, which intends to monitor and
support a whole organic system of the entire FLOSS projects.
In our previous research, we analyzed the potential of meta-
maintenance targeting the maintenance of common source
code ﬁles in multiple repositories [8], but in this article we
will focus on the concept of maintaining the entire ecosystem,
that is, we intend to introduce Google-like code and knowledge
sharing systems, not in within a single organization, but for
the whole FLOSS projects. Because contributors voluntarily
work to individual FLOSS projects and they do not forfeit
their rights to it, we cannot have the same systems with large-
scale single companies like Google. To maintain source code,
track issues and resources, monitor project health, and recom-
mend sharing knowledge, we discuss the following research
challenges that need to be addressed for meta-maintenance.

• Global source code management system. To address
code-related problems in FLOSS, we propose a concept
of a system of globally shared single source of truth,
a global version control system, instead of a monolithic
version control system.

• Global issue management system. It is reported that,
in Google, technical debt caused by dependent systems
is paid down immediately as changes are made [7]. To
track such cross-project (product) issues, we consider a
global issue tracking system is necessary.

• FLOSS human capital index. FLOSS projects can be no
longer under maintenance because of several reasons and
cause negative impacts to the client projects [9]. Similar
to the Global Human Capital Index (GHCI)1 proposed
and reported by the World Economic Forum, we need a

1http://reports.weforum.org/global-human-capital-report-2017/

 
 
 
 
 
 
participants in the whole FLOSS ecosystem to reliably know
how and who conduct
transactions, and also enable them
to validate those transactions. When considering versioning
systems, we have already had an established modern version
control system, Git. However, we consider that traditional
version control systems does not meet the needs. In order to
clarify the problems, we use the ﬂowchart presented in the
article [13], and shown in Figure 1.

Does more than one participant need to be able to update
the data? Yes. Since anyone can make clone-and-own reuses,
anyone can be the participants in the system. If we will use a
single Git repository as a global versioning system, obviously
it is not a good idea to make all participants committers, who
can record versioning transactions. The pull-based model does
not scale because it requires integrators [14]. As studied in
the previous work, Android project manages their own Git
repositories for cloned components and records histories that
can match for the original component versions [6]. Although
Git can work in a single organization, it should be difﬁcult
to make a single Git repository work in many organizations.
Among various software components and various participants
involved in clone-and-own transactions, we assume no one can
be integrators to validate all reuse transactions to be recorded
in the system.

Do all those updaters trust one another? No. As stated
before, trusting all participants and making them comitters
cannot work. This is not only because of possible evil partici-
pants who are trying to record false information. Even ordinary
participants can record invalid clone-and-own transactions, for
example, license violated reuses. As reported in the previous
study, developers seem to have some difﬁculties in understand-
ing licenses [4].

Would all the participants trust a third party? No.
From the above discussion, having a single (or even having
multiple and integrated) Git repository seems not to be a
good solution. If we will have an alternative and more suitable
version control database, locating it in a hosting service like
GitHub can be an option. However, we consider this is
also not good. If this hosting service goes down, we cannot
record and investigate clone-and-own transactions. This is
worse than the down of GitHub, because we do not have a
local database. Essentially, granting someone or a third party
special permission seems to be inappropriate for this global
system.

Does the data need to be kept private? No. Clone-and-
own data should be public. Transparent processes and records
should be desirable.

Do you need to control who can make changes to the
block-chain software? No. Again, anyone should not have
special permission nor be an admin.

In summary, we cannot use Git for a global versioning
system, nor adopt a pull-based model. We should not have
cloud servers since they can be a point of failure that can stop
the entire system. We need a public and transparent recording
system. As the ﬂowchart in Figure 1 shows, we might need a
public blockchain. We can have similar discussions to a global

Fig. 1. Do you need a blockchain? Chart from [13]. We emphasize one ﬂow.

system for monitoring individual and the whole FLOSS
project health in terms of human capital [10], [11].

Challenges include not only building individual systems but
also integrating those systems effectively. The main idea of
building global systems is adopting blockchain technologies.

II. PRELIMINARY

A. Blockchain

A blockchain is a chronologically irreversible distributed
ledger that records history of transactions between nodes in a
community. Blockchain was originally proposed as a solution
to the double-spending problem of electronic payments by
Satoshi Nakamoto in 2008 [12].

To elucidate the characteristics of blockchain, we can com-
pare it with a traditional client-server model: (i) each node
behaves as a predeﬁned roll, client or server, (ii) all requests
from clients are executed through a server, (iii) all history of
transactions is stored only in a server. In contrast, a blockchain
is based a peer-to-peer (P2P) model, which has the different
characteristics: (i) every node is equivalent to each other and
have a fair authority, (ii) every transaction is directly executed
between two peers, (iii) all history of transactions is stored in
a distributed ledger that all nodes share.

Our idea of building global systems (a global version
control system and a global issue tracking system) is recording
all valid transactions in a public blockchain, which allows

YESNONONONOissue tracking system compared with traditional systems.

B. Smart Contracts

Nick Szabo introduced the concept of a smart contract as a
computerized transaction protocol that executes the terms of a
contract [15]. Within the blockchain context, smart contracts
are scripts stored on the blockchain [16]. By addressing a
transaction, we can trigger a smart contract. It then executes
independently and automatically in a prescribed manner on
every node in the blockchain network. Smart contracts op-
erate as autonomous actors, whose behaviors are completely
predictable.

The most prominent framework for smart contracts is
considered to be Ethereum [17], a blockchain platform that
remotely executes software on a distributed computer system
called the Ethereum Virtual Machine. Ethereum smart con-
tracts generally serve four purposes [18].

• Maintain a data store. For example, simulating a currency
and recording membership in a particular organization.
• Manage an ongoing contract or relationship between
multiple users. One example of this is a contract that
automatically pays a bounty to whoever submits a valid
solution to some mathematical problem

• Resend incoming messages to some desired destination
only if certain conditions are met. This is called a
forwarding contract.

• Provide functions to other contracts like a software li-

brary.

C. Distributed Autonomous Organizations

Based on smart contracts, there is a concept of “decentral-
ized autonomous organizations” (DAOs) [16]. The organiza-
tion members follow rules written in smart contracts, and those
rules can be modiﬁed based on the voting of members. With
our concept of global systems, all participants can be regarded
as members of a DAO. Everyone, including smart agents,
share information, follow rules and manage rules, based on
autonomous and reliable mechanisms.

III. CHALLENGES

A. Global Version Control System

A blockchain enables all stakeholders to have one shared
database to keep track of, where updates from any partic-
ipants come with cryptographic veriﬁability, get propagated
along the blockchain network automatically. Similarly, we can
keep track of reused components with a shared database, a
blockchain network. When participants operate transactions
like shippin new releases, they can create smart contracts or
send signed message to predetermined and agreed-upon smart
contracts to allow every participant on the blockchain network
to know them. We can allow any participants to update data
without a third party. All participants do not need to trust one
another. Data is public and no speciﬁc single participant can
control the system.

Designing smart contracts is the core challenge of the
system. We introduce a concept of release as a contract.

Fig. 2. A temporary idea of the overview of release as a contract. The
relationships of smart contracts among the original owner and cloned owners
in a case of sequential clone-and-own reuses. Forwarded contracts are ignored
for simplicity.

As shown in Figure 2, when the original owner organization
releases a reusable software component, they create the release
0 contract, which describe names and versions of the compo-
nent. If there are updates, newer versions are written in the
contract via the versioning 0 contract, which is also prepared
by the original owner. If another team (cloned owner 1) reuses
the component and release their software with the cloned
component, they send messages to the versioning 0 contract to
notify this clone-and-own transaction. The cloned component
is veriﬁed with prepared libraries whether it satisﬁes the
license and other rules made by the original owner. Only if
this veriﬁcation succeeds, the cloned owner 1 is allowed to
create the release 1 contract that refers the speciﬁc version
of the original component written in the release 0 contract.
Similarly, cloned owner 2 will create the release 2 contract
after passing the veriﬁcation. If there are update changes in
upstream releases, they can be propagated with the tracking
information.

As we discussed previously, smart contracts operate au-
tonomously based on predetermined programs. Versions of
components from the same owners are written in the same
release contracts, and the clone-and-own relationships are seen
in the references. These data are all public and the recording
process is transparent. In addition, there is no human integrator
in this versioning process. Since a smart contract can be
prepared for each release, owner can determine rules of reuses.
If some participants cannot agree on a contract, they do not
need to sign the contract, or they can negotiate with the owner
to change the contract.

If users prefer to use software components released on
isolating from this autonomous
blockchain as contracts,
ecosystem will not be a good choice for development organi-
zations. If we will develop efﬁcient and accurate veriﬁcation
tools for licenses and hidden copy detection, lying should be
difﬁcult and human errors can be decreased.

Note that we do not intend to replace all Git repositories
with the blockchain system. Instead, our global version control
system consists of local independent version control systems

Original ownerVersioning 0Release 0Cloned owner 1Versioning 1Cloned owner 2Versioning 2Release 1Release 2VeriﬁcationVeriﬁcationVeriﬁcation[6] T.

Ito, and K.

Ishio, Y. Sakaguchi, K.

Inoue, “Source ﬁle set
search for clone-and-own reuse analysis,” in Proceedings of the 14th
International Conference on Mining Software Repositories, ser. MSR
’17. Piscataway, NJ, USA: IEEE Press, 2017, pp. 257–268. [Online].
Available: https://doi.org/10.1109/MSR.2017.19

[7] R. Potvin and J. Levenberg, “Why google stores billions of lines of
code in a single repository,” Commun. ACM, vol. 59, no. 7, pp. 78–87,
Jun. 2016. [Online]. Available: http://doi.acm.org/10.1145/2854146

[8] H. Hata, R. G. Kula, T.

Ishio, and C. Treude, “Same ﬁle,
different changes: The potential of meta-maintenance on GitHub,”
the 43rd International Conference on Software
in Proceedings of
Engineering.
IEEE Press, 2021, p. 773–784. [Online]. Available:
https://doi.org/10.1109/ICSE43902.2021.00076

[9] J. Coelho and M. T. Valente, “Why modern open source projects fail,”
the 2017 11th Joint Meeting on Foundations of
in Proceedings of
Software Engineering, ser. ESEC/FSE 2017. New York, NY, USA:
ACM, 2017, pp. 186–196. [Online]. Available: http://doi.acm.org/10.
1145/3106237.3106246

[10] C. Wohlin, D. ˇSmite, and N. B. Moe, “A general theory of software
engineering: Balancing human, social and organizational capitals,”
Journal of Systems and Software, vol. 109, no. Supplement C, pp. 229
– 242, 2015. [Online]. Available: http://www.sciencedirect.com/science/
article/pii/S0164121215001740

[11] S. Onoue, H. Hata, R. Gaikovina Kula, and K. Matsumoto, “Human
Capital in Software Engineering: A Systematic Mapping of Reconcep-
tualized Human Aspect Studies,” ArXiv e-prints, May 2018.

[12] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[13] M. E. Peck, “Blockchain world - do you need a blockchain? this chart
will tell you if the technology can solve your problem,” IEEE Spectrum,
vol. 54, no. 10, pp. 38–60, October 2017.

[14] G. Gousios, A. Zaidman, M.-A. Storey, and A. van Deursen, “Work
practices and challenges in pull-based development: The integrator’s
the 37th International Conference
perspective,” in Proceedings of
on Software Engineering - Volume 1, ser. ICSE ’15.
Piscataway,
NJ, USA:
[Online]. Available:
http://dl.acm.org/citation.cfm?id=2818754.2818800

IEEE Press, 2015, pp. 358–368.

[15] N. Szabo, “Smart contracts,” http://www.fon.hum.uva.nl/rob/Courses/

InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.
best.vwh.net/smart.contracts.html, 1994, [Online; accessed Oct-2017].

[16] K. Christidis and M. Devetsikiotis, “Blockchains and smart contracts for
the internet of things,” IEEE Access, vol. 4, pp. 2292–2303, 2016.
[17] N. Atzei, M. Bartoletti, and T. Cimoli, “A survey of attacks on
ethereum smart contracts sok,” in Proceedings of the 6th International
Conference on Principles of Security and Trust - Volume 10204. New
York, NY, USA: Springer-Verlag New York, Inc., 2017, pp. 164–186.
[Online]. Available: https://doi.org/10.1007/978-3-662-54455-6 8

[18] ethereum/wiki, “Ethereum development

tutorial,” https://github.com/
ethereum/wiki/wiki/Ethereum-Development-Tutorial, 2014–2017, [On-
line; accessed Oct-2017].

[19] H. Hata and T. Ishio, “Software Supply Chain Map: How Reuse
Networks Expand,” arXiv e-prints, p. arXiv:2204.06531, Apr. 2022.
[20] A. Burton-Jones and J.-C. Spender, Eds., The Oxford Handbook of
Human Capital. Oxford University Press, 2012. [Online]. Available:
https://EconPapers.repec.org/RePEc:oxp:obooks:9780199655892

like Git and one blockchain that only record reuse transactions.
We have conducted an empirical analysis of the clone-and-own
reuses exist in the FLOSS ecosystem [19].

B. Global Issue/Resource Tracking System

Similar to the above global version control system, we
can consider issue report as a contract. Versions of depen-
dent components/products, description of the issues, affected
products can be associated with smart contracts of issues. To
make the system practical, issue searching and mechanism to
incentivize contributors to work on cross-project issues are
needed to be developed.

C. FLOSS Human Capital Index

In economics, human investments are seen as capital –
speciﬁcally intellectual capital. Oxford handbook on Human
Capital highlights the importance of human capital, that is, “all
forms of intellectual capital including social and structural
capital are arguably reducible to the human knower, thus
human capital becoming the linchpin” [20]. A practical imple-
mentation of human capital is the Global Human Capital Index
(GHCI)2, as proposed and reported by the World Economic
Forum. As previous study started [10], [11], building such
human capital index for FLOSS is another challenge.

IV. CONCLUSION
This paper introduces a concept of meta-maintenance for
the whole FLOSS projects. mainly using blockchain and smart
contract technologies. Based on the preferable P2P architecture
of blockchain, we design the smart contract relationship for the
idea of release as a contract and issue as a contract. Building
human capital index for health indicator is another challenge.
Obviously there are many challenges technically and socially.
The initial step of this work should be building a working
prototype.

REFERENCES

[1] S. O’Mahony, “Guarding the commons: how community managed
software projects protect their work,” Research Policy, vol. 32, no. 7,
pp. 1179 – 1198, 2003, open Source Software Development.
[Online]. Available: http://www.sciencedirect.com/science/article/pii/
S0048733303000489

[2] J. Coelho, M. T. Valente, L. L. Silva, and A. Hora, “Why we
engage in ﬂoss: Answers from core developers,” in Proceedings
of
the 11th International Workshop on Cooperative and Human
Aspects of Software Engineering, ser. CHASE ’18. New York,
NY, USA: ACM, 2018, pp. 114–121.
[Online]. Available: http:
//doi.acm.org/10.1145/3195836.3195848

[3] R. G. Kula, D. M. German, A. Ouni, T. Ishio, and K. Inoue, “Do
developers update their library dependencies?” Empirical Software
Engineering, May 2017. [Online]. Available: https://doi.org/10.1007/
s10664-017-9521-5

[4] O. Mlouki, F. Khomh, and G. Antoniol, “On the detection of licenses
violations in the android ecosystem,” in 2016 IEEE 23rd Interna-
tional Conference on Software Analysis, Evolution, and Reengineering
(SANER), vol. 1, March 2016, pp. 382–392.

[5] Y. Dubinsky,

J. Rubin, T. Berger, S. Duszynski, M. Becker,
and K. Czarnecki, “An exploratory study of cloning in industrial
software product lines,” in Proceedings of the 2013 17th European
Conference on Software Maintenance and Reengineering, ser. CSMR
’13. Washington, DC, USA: IEEE Computer Society, 2013, pp. 25–34.
[Online]. Available: http://dx.doi.org/10.1109/CSMR.2013.13

2http://reports.weforum.org/global-human-capital-report-2017/

