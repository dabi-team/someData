Planning Landscape Analysis for Self-Adaptive Systems

Tao Chen
Loughborough University
Loughborough, United Kingdom
t.t.chen@lboro.ac.uk

2
2
0
2

r
a

M
3
2

]
E
S
.
s
c
[

1
v
2
7
4
2
1
.
3
0
2
2
:
v
i
X
r
a

ABSTRACT

To assure performance on the fly, planning is arguably one of the
most important steps for self-adaptive systems (SASs), especially
when they are highly configurable with a daunting number of adap-
tation options. However, there has been little understanding of the
planning landscape or ways by which it can be analyzed. This in-
evitably creates barriers to the design of better and tailored planners
for SASs. In this paper, we showcase how the planning landscapes
of SASs can be quantified and reasoned, particularly with respect
to the different environments. By studying four diverse real-world
SASs and 14 environments, we found that (1) the SAS planning
landscapes often provide strong guidance to the planner, but their
ruggedness and multi-modality can be the major obstacle; (2) the
extents of guidance and number of global/local optima are sensitive
to the changing environment, but not the ruggedness of the surface;
(3) the local optima are often closer to the global optimum than
other random points; and (4) there are considerable (and useful)
overlaps on the global/local optima between landscapes under dif-
ferent environments. We then discuss the potential implications to
the future work of planner designs for SASs.

CCS CONCEPTS
‚Ä¢ Software and its engineering ‚Üí Software performance; Soft-
ware configuration management and version control systems.

KEYWORDS

Self-adaptive system, configuration tuning, planning, performance
optimization, search-based software engineering, landscape
ACM Reference Format:
Tao Chen. 2022. Planning Landscape Analysis for Self-Adaptive Systems.
In 17th International Symposium on Software Engineering for Adaptive and
Self-Managing Systems (SEAMS ‚Äô22), May 18‚Äì23, 2022, Pittsburgh, PA, USA.
ACM, New York, NY, USA, 7 pages. https://doi.org/10.1145/3524844.3528060

1 INTRODUCTION

Morden software systems are often engineered as highly config-
urable for handling different performance needs [13, 14, 26, 32, 33],
such as a good latency and throughput, even as the system runs [30].
Therefore, self-adaptation ‚Äî the ability to find a better adaptation
plan of the configurations that improves the performance on the

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SEAMS ‚Äô22, May 18‚Äì23, 2022, Pittsburgh, PA, USA
¬© 2022 Association for Computing Machinery.
ACM ISBN 978-1-4503-9305-8/22/05. . . $15.00
https://doi.org/10.1145/3524844.3528060

(a) Storm under RollingCount

(b) Storm under WordCount

Figure 1: A projected landscape of the Latency with respect
to adaptation options Splitters and Counters for Storm
under the RollingCount and WordCount environment.

and denote a global and local optimum, respectively.

fly ‚Äî is on high demand for highly configurable systems, which is
the type of self-adaptive systems (SASs) we consider in this paper.
For almost any type of SASs, planning is a key step in achieving
self-adaptation and it mainly seeks to address one question: what
is the best adaptation plan to take under a new environment (or
when needed)? To this end, the community has relied on various
different planning algorithms (or search algorithms), particularly
the stochastic ones, to design a planner [2, 9, 12, 19, 28, 43]. This
equips a SAS with the ability to reason about the better or worse of
the adaptation plans in the planning landscape, and hence ideally
choose the one that has the best performance without the need
to traverse the entire search space. From that regard, planning for
SASs resembles a search and optimization process [21], which is
complementary to many other techniques that are widely-used for
SASs, such as control theory [3], machine learning [4, 8, 18, 25],
and formal verification [35].

Despite the importance, designing an effective planner is non-
trivial, because the search space can be too large; the budget for a
planner to conclude is limited; and there may be a complex rela-
tionship between adaptation plans and their performance, as well
as the changing environment (e.g., there may be difficult local op-
tima1). This becomes even more challenging when we have little
understanding of the planning landscape of SASs or ways by which
we can utilize to study it. Indeed, there have been some works on
the planning algorithms for SAS [2, 9, 12, 19, 28, 43], it however
remains unclear about what characteristics of the SAS planning
landscape have enabled their success (or failure).

Figure 1 shows an example of the projected planning landscapes
for Storm under two environments. As can be seen, even with a
clear visualization of such a simplified version (which is what has
been commonly used in existing work [18, 24]), it is not always

1Some sub-optimal points that have better or identical performance to all of their
surrounding points.

51015246150200250300350#Counters#SplittersLatency(ms)51015246200250300350#Counters#SplittersLatency(ms) 
 
 
 
 
 
SEAMS ‚Äô22, May 18‚Äì23, 2022, Pittsburgh, PA, USA

Tao Chen

straightforward to quantify and conclude useful information/prop-
erties about the landscapes and their relative differences across
environments. Of course, simply trying the planner on the SAS
and examining the outcome is insufficient, even if we can do so.
Rather, we need to be able to answer questions like whether the
correlation between performance and plans in the landscape can
provide strong guidance for a planner; how rugged the surface is;
and what properties of the landscapes have been changed (or still
unchanged) with the time-varying environment. We envisage that
such a better understanding of the planning landscape is important,
as it will enable us to derive planner designs that are explicitly
tailored to the observed characteristics of SASs, promoting more
effective and efficient planning which would otherwise be difficult.
To close the above gap, in this paper, we show how the metrics
and notions from the domain of fitness landscape analysis [41,
47] in the optimization community can be derived to study the
planning landscape for SAS, particularly in relation to the different
environments. This is achieved by an empirical analysis of four
real-world SASs with 14 environments from the literature [14, 26,
36, 39, 44], which are of different domains, languages, scales, and
search spaces. The results reveal some interesting patterns:

‚Ä¢ The SAS planning landscapes often provide useful infor-
mation to guide the search process in a planner, but their
ruggedness and multi-modality can pose a barrier.

‚Ä¢ The extents of guidance and number of global/local op-
tima are sensitive to the changing environment, but not
the ruggedness of the surface in the planning landscape.
‚Ä¢ Local optima are often closer to the global optimum than

other random points.

‚Ä¢ Planning landscapes under different environments of a SAS
often share a good amount of global/local optima. In partic-
ular, preserving the local optima of an environment into the
newly changed one can be beneficial, as they may immedi-
ately become the global optimum therein.

We then discuss the implications of our results for future planner
design on SASs. To promote open science, we release the code and
data in this work at: https://doi.org/10.5281/zenodo.5866808.

In what follows, Section 2 introduces the background. Section 3
elaborates on the notions and the metrics chosen for our landscape
analysis. Section 4 presents the methodology of study and analyzes
the results. Key implications are discussed in Section 5 and threats
to validity are presented in Section 6. Sections 7 and 8 analyze the
related work and conclude the paper, respectively.

2 BACKGROUND
When self-adapting highly-configurable systems, there are ùëõ adap-
tation options such that the ùëñth option is denoted as ùë•ùëñ , which can
be a binary/integer variable. The search space of all plans, ùí≥ , is
the Cartesian product of the possible values or all the ùë•ùëñ .

Without lose of generality, the ultimate goal of the SAS planning2

is to achieve the following in a given environment:

argmin ùëì (ùíô), ùíô ‚àà ùí≥
(1)
where ùíô = (ùë•1, ùë•2, ..., ùë•ùëõ) and ùëì measures the performance achieved
by a plan, e.g., {3, 1} for the {num_counters, num_splitters} on

2We assume minimizing the performance objective.

Figure 2: Overview of Storm under changing environments.

Storm. Since the environment can change as the SAS executes,
the planning will run continuously. In the SAS literature, ùëì has
been realized by different ways [10], such as analytical models [22],
machine learning models [6, 12, 18], simulation [21], or even digital
twins [1], the details of which is outside the scope of this paper and
hence we assume that there is a readily available resolution.

Figure 2 illustrates Storm, which is a system that handles data
streaming process under periodically incoming micro-batch of jobs
(environments), e.g., RollingCount and WordCount. In this case,
simply using a fixed configuration can be problematic: Jamshidi and
Casale [24] have shown that using the default setting can lead to
480√ó slower than the best in some environments. This motivates the
need for self-adaptation, where the aim is to optimize the latency by
searching the right adaptation plan over changing environments.

3 LANDSCAPE ANALYSIS OF SAS PLANNING

Fitness landscape is a concept initially coined by Wright [47] and
then extended to study the possible behaviours of algorithms in
the optimization process, which fits precisely the needs of our plan-
ning analysis for SASs. In a nutshell, fitness landscape analysis
concerns with understanding the relationships between the multi-
dimensional encoding of the solutions (genotype) and their good-
ness (fitness) by means of various metrics and procedure [41, 47].
Formally, the landscape for SAS planning under an environment

can be represented as a tuple ‚Ñ± = (ùí≥ , ùëì , ùí©ùëò ), such that:

ùí©ùëò (ùë•) = {ùë¶ ‚àà ùí≥ : ùê∑ (ùë•, ùë¶) ‚â§ ùëò }
(2)
whereby ùí≥ is a set of points (adaptation plans); ùëì is the same
performance table as that in Equation 1. ùí©ùëò is the neighborhood
defined over set ùí≥ according to a distance metric ùê∑ of size ùëò (which
may be the bound for some operators to transform one plan into
another). Clearly, when ùëò covers all the neighboring plans in the
search space, we obtain a complete planning landscape for the SAS.

3.1 Distance, Neighborhood and Local Optima

Quantifying the distance between adaptation plans (and hence the
neighborhood) is the fundamental step in our planning landscape
analysis. In this work, we use Hamming distance ùê∑ùêª to measure
two adaptation plans because of three reasons:

‚Ä¢ The sparse comparison in Hamming distance fits well with
the landscape nature of configurable system [14, 24, 39].
‚Ä¢ Hamming distance does not quantify the magnitude of dif-
ference on an adaptation option, which fits with the need of
most categorical options in configurable systems.

‚Ä¢ It is widely used in many real-world problems [38, 40, 46].

TaskTaskTaskA series of periodic jobs; each micro-batch may be of different types and loads ‚Ä¶Latency change under a configuration across the environment of periodic jobs   Planning Landscape Analysis for Self-Adaptive Systems

SEAMS ‚Äô22, May 18‚Äì23, 2022, Pittsburgh, PA, USA

challenge and an opportunity. On one hand, multi-modality implies
a complex structure (at least globally) and hence can raise the
additional difficulty for the planner. On the other hand, the presence
of different ‚Äútroughs‚Äù, together with the ability to locate them, can
be beneficial for a planner to eventually reach a global optimum.

3.3.2 Ruggedness. Measuring multi-modality by the number of
global/local optima still cannot account for the local paths between
local optima, and the other related points. As a result, we addition-
ally measure the Correlation Length (‚Ñì) of the landscape [45] ‚Äî a
local metric that indicates the local ruggedness property.

To be more specific, the Correlation Length is the results of
randomly sampled adaptation plans in the landscape, and hence it
models the local surface of traversal that a planner would likely to
explore. Formally, ‚Ñì is calculated as below:

‚Ñì (ùëù, ùë†) = ‚àí(ln |

1
ùúé2
ùëì (ùëù ‚àí ùë†)

ùëù‚àíùë†
‚àëÔ∏Å

ùëñ=1

(ùëìùëñ ‚àí ùëì )(ùëìùëñ+ùë† ‚àí ùëì )|)‚àí1

(4)

‚Ñì (ùëù, ùë†) is essentially a nomralized autocorrelation function of neigh-
boring points‚Äô performance values explored and the notations are
the same as that for Equation 3. In this work, we conduct sam-
pling with random walk [46], thus ùë† denotes the step size and ùëù
is the walk length. We use ùë† = 1 in this work, which means that
we target the most restricted form where the autocorrelation is
calculated on adaptation plans sampled from adjacent steps (Note
that the correlation cannot be 0), as this is what has been widely
followed [38, 40, 46]. The higher the value of ‚Ñì, the smoother the
landscape, as the performance of adjacently sampled adaptation
plans are more correlated. Otherwise, it indicates a more rugged
surface [45], which means the easier to trap a planner.

4 METHODOLOGY AND RESULTS

In this work, we seek to answer the following research questions:
‚Ä¢ RQ1: Do the planning landscapes offer useful guidance to a

SAS planner under different environments?

‚Ä¢ RQ2: What are the general structural properties of planning

landscapes for SASs under different environments?

‚Ä¢ RQ3: Do the local optima closer to global optimum than
other non-optimal points in the SAS planning landscape?
‚Ä¢ RQ4: Is it possible to share some information on the planning

landscapes for SAS across different environments?

To that end, as shown in Table 1, we consider 3-4 environments
that can change arbitrarily at runtime for four real-world SAS
and use the same setting as previous work. We exploit the readily
available dataset of those systems [14, 24, 26, 36, 39] which contain
the samples for the entire planning landscape of each environment.
For interpreting the FDC and Correlation Lengths (RQ1 and
RQ2), we adopt Fisher‚Äôs transformation [20] to find the z-score,
which is then interpreted using Zou‚Äôs confidence interval [49] under
a significance level of 0.05. We leverage the non-paired Wilcoxon
rank-sum test at ùõº = 0.05 for comparing the distance in RQ3.

4.1 RQ1: Fitness Guidance in Planning
4.1.1 Method. To answer RQ1, we leverage the FDC coefficient to
measure the extents of guidance that a planning landscape offers to
the planner, considering all SASs and their environments studied.

Figure 3: Heatmap of a projected planning landscape for the
Latency of Storm. The block ‚ÄúL‚Äù is a local optimum under
the neighborhood radius of one option (in red frames).

In this work we set ùê∑ùêª = 1 hence the neighbors are the plans
that differ exactly on one option. A point is a local optimum if it is
no worse than all of its neighbors, as shown in Figure 3.

3.2 Fitness Distance Correlation

Generally speaking, Fitness Distance Correlation (FDC) examines
how close is the relation between fitness value and distance to
the nearest optimum in the search space [27], which quantifies
the overall guidance that the planning landscape can offer for a
planner [46]. Formally, FDC (denoted as ùúö ) is computed as:

ùúö (ùëì , ùëë) =

1
ùúéùëì ùúéùëë ùëù

ùëù
‚àëÔ∏Å

(ùëìùëñ ‚àí ùëì )(ùëëùëñ ‚àí ùëë)

(3)

ùëñ=1
where ùëù is the number of points considered in FDC; in this work, we
set ùëù as the total number of adaptation plans in the space and hence
the FDC reflects the complete planning landscape. ùëìùëñ = ùëì (ùë•ùëñ ) is the
performance value for the ùëñth adaptation plan and ùëëùëñ = ùëëùëúùëùùë° (ùë•ùëñ ) is
the shortest Hamming distance of such a plan to a global optimum.
ùëì (ùëë) and ùúéùëì (ùúéùëë ) are the mean and standard deviation, respectively.
Intuitively, FDC is in fact the Pearson correlation between ùëì and
ùëë, hence it ranges on [‚àí1, 1] where 1 and ‚àí1 imply the strongest
monotonically positive and negative correlation, respectively; 0
indicates no correlation can be detected. Since in our case we prefer
a smaller performance value, when 0 < ùúö ‚â§ 1, the adaptation plan
turns better (smaller performance value) as the shortest distance to
a global optimum reduces. This means that, when FDC becomes
closer to 1, the guidance provided to a planner is stronger and it is
more likely to exist a path towards a global optimum via adaptation
plans with decreasing performance values, hence the planning can
be reasonably solved. In contrast, ‚àí1 ‚â§ ùúö < 0 indicates the opposite.

3.3 Landscape Structure

In this work, we also explicitly assess the structure of the planning
landscape, i.e., multi-modality and ruggedness.

3.3.1 Multi-modality. In general, the multi-modality, as opposed
to the uni-modality with one global optimum and no local optimum,
refers to a special property of the landscape where there is more
than one global/local optimum [23]. To quantify such, we can count
the percentage of global/local optima in the complete planning
landscape as a global metric of its structure [23, 37]. A landscape
with a high degree of multi-modality is an indication that it contains
many ‚Äútroughs‚Äù (for minimizing objectives), which may both be a

24681012141618123456#Counters#Splitters750800850900950Latency(ms)LSEAMS ‚Äô22, May 18‚Äì23, 2022, Pittsburgh, PA, USA

Tao Chen

Table 1: Real-world self-adaptive systems and their environ-
ments studied. We use the deep neural network in Keras.
Reference shows the work that also uses the same systems.

Table 2: Statistical test (ùëù value) on the FDC coefficient (ùúö )
and Correlation Length (‚Ñì) between all pairs of environ-
ments. Statistically significant ones are highlighted in bold.

Subject SAS

Performance Environments

# Options Search Space

FDC coefficient (ùúö )

Correlation Length (‚Ñì)

Storm [14, 24] Latency

Keras [26, 36]

Inferred Time

x264 [14, 39]

Runtime

Spear [44]

Runtime

ùê∏1: Speed-Of-Light
ùê∏2: RollingSort
ùê∏3: WordCount
ùê∏4: RollingCount
ùê∏1: ShapesAll
ùê∏2: DSR
ùê∏3: Adiac
ùê∏4: Coffee
ùê∏1: 8MB
ùê∏2: 32MB
ùê∏3: 128MB
ùê∏1: 4435 CXTY
ùê∏2: 8827 CXTY
ùê∏3: 10286 CXTY

12

12

16

14

2,048

4,096

4,000

16,384

Storm
ùê∏1 : ùê∏2
0.4742
ùê∏1 : ùê∏3 <0.0001 <0.0001
0.0021 <0.0001
ùê∏1 : ùê∏4
ùê∏2 : ùê∏3 <0.0001 <0.0001
ùê∏2 : ùê∏4
0.0001
0.0002
ùê∏3 : ùê∏4 <0.0001
0.4454

Keras
0.0215 <0.0001

x264

Spear
0.0004
0.0151 <0.0001

N/A

N/A
0.0971 <0.0001
N/A
N/A

N/A
N/A

x264

Storm Keras
Spear
0.7340 0.8712 0.8802 0.9142
0.029
0.8095 0.6799 0.9757
0.0516 0.8012 N/A
N/A
0.0659 0.9370 0.7934 0.8900
N/A
0.1081 0.9285 N/A
N/A
0.8163 0.9914 N/A

(a) Storm.

(b) Keras.

(c) x264.

(d) Spear.

Figure 4: The FDC coefficients on all SASs and environments.

To further interpret the FDC coefficients in detail, we adopt the
classification concluded by Jones and Forrest [27] (the values are
reversed as we focus on minimizing the performance objectives):
‚Ä¢ Misleading (ùúö ‚â§ ‚àí0.15). The landscape can drive the search

to move away from the global optimum.

‚Ä¢ Difficult (‚àí0.15 < ùúö < 0.15). The correlation is insignificant

to guide the planner on any particular direction.

‚Ä¢ Straightforward (ùúö ‚â• 0.15). The landscape provides useful

guidance for a planner to reach a global optimum.

4.1.2 Result. The FDC coefficients have been plotted in Figure 4
with statistical test results between each pair of environments for a
SAS in Table 2. As can be seen, we obtain a few interesting findings:
(1) Surprisingly, the planning landscapes on all SASs and envi-
ronments are classified as ‚ÄúStraightforward‚Äù, implying that
they offer a good degree of useful guidance for the planner.
(2) The FDC coefficients tend to differ across the SASs (with the
landscapes of Keras showing the strongest guidance), which
is as expected since they all come from different domains
and are implemented in different languages.

(3) Although the FDC coefficients under different environments
of a SAS may be seen as similar, most of their differences are
statistically significant, i.e., in 15 out of 18 cases (Table 2).

Therefore, for RQ1, we say:

To RQ1: Yes, the planning landscapes offer useful and strong
guidance to the SAS planner in general, but the environmental
change can influence the guidance provided.

(a) % of the global/local optima.

(b) Mean ‚Ñì over 50 repeats.

Figure 5: The landscape ruggedness on all SASs and environ-
ments. The blue lines in (b) are the smallest ‚Ñì (most rugged
landscape) of the other widely-studied problems.

4.2 RQ2: Planning Landscape Structure
4.2.1 Method. The structure in RQ2 is measured in two ways: (1)
the % of global/local optima in the landscape (for multi-modality)
and (2) the Correlation Length (for ruggedness), as discussed in
Section 3.3, for which we set the random walk length of 50 (ùëù = 50
from Equation 4) with 50 repeats and report the mean values.

While we cannot find a general standard to classify the degree
of ruggedness similar to that for FDC, to aid our interpretation, we
turned into the literature from the general optimization community.
We hence use the calculated Correlation Length for some common
problems with well-acknowledged challenges on local optima as the
baselines in our discussion3, such as Multidimensional Knapsack
Problem (MKP) [46], Quadratic Assignment Problem (QAP) [38],
and Timetabling Problem (TP) [40]. This is possible as Correlation
Length is a scale- and unit-agnostic metric.

4.2.2 Result. From the results in Figure 5 and the statistical tests
of ‚Ñì between environments in Table 2, we observe that:

(1) The percentage of global/local optima in SAS planning land-
scape indicates a reasonable sign of multi-modality in gen-
eral. For some SASs, such as x264, it can go over 50%.
(2) Different SASs and their environments often significantly
affect the percentage of global/local optima in the planning
landscape, but the overall multi-modal property is unaffected.
The planning landscapes of x264 exhibit a much higher de-
gree of multi-modality than the other SASs and appears to
be insensitive to environmental change.

3Those problems can have different instances of the landscape; in this work, we use
the smallest mean Correlation Length for each (most rugged surface) as reported.

MisleadingDiffcultStraightforwardE1E2E3E4 1010.530.520.70.6FDC(%)E1E2E3E4 1010.710.740.790.8FDC(%)E1E2E3 1010.570.480.52FDC(%)E1E2E3 1010.540.510.7FDC(%)020406080100StormKerasx264Spear322641242463112576332613%ofoptimaE1E2E3E40510StormKerasx264Spear0.933.312.63.490.883.322.683.442.132.712.583.442.242.66CorrelationLength(`)E1E2E3E4MKPQAPTPPlanning Landscape Analysis for Self-Adaptive Systems

SEAMS ‚Äô22, May 18‚Äì23, 2022, Pittsburgh, PA, USA

Table 3: The patterns on the global and local optima of adap-
tation plans shared between different environments of the
SASs. ùê∏ùë• ‚Üíùê∏ùë¶ means the environment changes from ùê∏ùë• to ùê∏ùë¶.
For ùê¥1 and ùê¥2, ‚úìand ‚úó denote ‚ÄúYes‚Äù and ‚ÄúNo‚Äù, respectively.

(a) Storm.

(b) Keras.

(c) x264.

(d) Spear.

Figure 6: The shortest distance (mean and standard devia-
tion) from the global optimum to local optima and the rest
non-optimal ones, over all SASs and environments studied.
‚àó and ‚ãÑ denote 10‚àí4 ‚â§ ùëù < 0.05 and ùëù < 10‚àí4, respectively.

(3) The Correlation Lengths of all SASs/environments are lower
than that of MKP (which has the smallest value), suggesting
that the ruggedness of SAS planning landscape is non-trivial.
(4) The Correlation Length differs considerably across the SASs
(with landscapes for Storm being the most rugged ones),
but between the environments for the same SAS, the differ-
ences are often insignificant. This has also been evidenced
in Table 2 where only one case has ùëù < 0.05.

In summary, we answer RQ2 as:

To RQ2: The planning landscapes for SASs show a good sign
of multi-modality and they are more rugged than some other
widely-studied problems. Yet, the ruggedness is insensitive to
the changing environment but the multi-modality does.

4.3 RQ3: Distance to Global Optimum
4.3.1 Method. To study RQ3, we report on the overall Hamming
distance (ùëëùëôùëúùëêùëéùëô ) between local optima and their closest global opti-
mum, together with that (ùëëùëúùë°‚Ñéùëíùëüùë† ) between the rest of non-optimal
points and the corresponding closet global optimum.

4.3.2 Result. As we can see from Figure 6, the overall distances
of ùëëùëôùëúùëêùëéùëô is clearly shorter than ùëëùëúùë°‚Ñéùëíùëüùë† , regardless of the SASs and
their environments; the extents of difference differ depending on
the environment for a SAS though. The comparisons also come
with statistical significance in general (ùëù < 0.05). This is strong
evidence that the local optima in the planning landscapes, although
may trap the planner, can be useful for serving as the ‚Äústepping
stones‚Äù which may eventually lead to a global optimum.

Therefore, for RQ3, we say:

To RQ3: The local optima are indeed generally closer to the
global optimum than the other non-optimal points in SAS
planning landscape, meaning that preserving then jumping
out from them is more likely to reach a global optimum.

Storm

Keras

x264
ùê¥2
‚úì
‚úì
‚úì
‚úì

Spear
ùê¥2
‚úì
‚úó
‚úì
‚úó

ùê¥1
‚úì
‚úì
‚úì
‚úì

ùê¥3
85%
86%
85%
87%

ùê¥3
ùê¥1
ùê¥1 ùê¥2 ùê¥3 ùê¥1 ùê¥2 ùê¥3
ùê∏1‚Üíùê∏2 ‚úì ‚úì 56% ‚úì ‚úì 31%
‚úó
18%
ùê∏2‚Üíùê∏1 ‚úì ‚úó
‚úó
44% ‚úì ‚úì 13%
19%
ùê∏1‚Üíùê∏3
‚úó
‚úó ‚úì 38% ‚úì ‚úì 95%
47%
ùê∏3‚Üíùê∏1
‚úó ‚úì 50% ‚úì ‚úó
‚úó
17%
20%
ùê∏1‚Üíùê∏4
‚úó ‚úì 10% ‚úì ‚úì 100% N/A N/A N/A N/A N/A N/A
ùê∏4‚Üíùê∏1
‚úó
‚úó
11% N/A N/A N/A N/A N/A N/A
ùê∏2‚Üíùê∏3 ‚úì ‚úó
65%
86%
ùê∏3‚Üíùê∏2 ‚úì ‚úì 64% ‚úì ‚úó
23%
88%
ùê∏2‚Üíùê∏4 ‚úì ‚úó
11% ‚úì ‚úì 100% N/A N/A N/A N/A N/A N/A
ùê∏4‚Üíùê∏2 ‚úì ‚úì 72% ‚úì ‚úó
28% N/A N/A N/A N/A N/A N/A
ùê∏3‚Üíùê∏4 ‚úì ‚úó
25% ‚úì ‚úì 100% N/A N/A N/A N/A N/A N/A
ùê∏4‚Üíùê∏3 ‚úì ‚úì 98% ‚úì ‚úó
53% N/A N/A N/A N/A N/A N/A

49% ‚úì ‚úó
38% ‚úì ‚úì 63%
33%

‚úì
‚úì

‚úì
‚úó

‚úì
‚úì

‚úó
‚úó

‚Ä¢ ùê¥2: Whether there is at least one local optimum in ùê∏ùë• that

would become a global optimum under ùê∏ùë¶.

‚Ä¢ ùê¥3: The percentage of global/local optima in ùê∏ùë• that are also

global/local optima under ùê∏ùë¶.

4.4.2 Result. We demonstrate the results in Table 3, from which
we can disclose some interesting observations:

(1) From ùê¥1 and ùê¥2, there is only one case (ùê∏4 ‚Üí ùê∏1 for Storm)
where the answers for both ùê¥1 and ùê¥2 are ‚ÄúNo‚Äù. This, to-
gether with the findings for RQ3, suggests that either the
global or local optima (sometimes both) in one environment
often helps the planner to find a global optimum in another.
(2) From ùê¥1 and ùê¥3, we see that generally, the global optimum
in one environment can directly serve as the global optimum
after the environment change, as in 28 out of 36 cases there
is at least one global optimum that satisfies ùê¥1 (with Keras
and Spear having overlapped global optimum over all en-
vironments.) and over half of the cases with more than 50%
global/local optima overlap. x264 also exhibit particularly
high overlapping between environments.

(3) From ùê¥2 and ùê¥3 under a considerable overlap of global/local
optima, there are 21 out of 36 cases in which at least one local
optimum of an environment would become a global optimum
after changing to another. This implies that preserving the
local optima can be useful for a new environment.

At this point, we conclude RQ4 as:

To RQ4: Yes, preserving both the global and local optima of
the planning landscape in one environment can be useful for
SAS planning under a changing environment.

4.4 RQ4: Information Between Environments
4.4.1 Method. In RQ4, we study three aspects to understand the
information of the planning landscapes that can be shared between
environments, e.g., when changing from environment ùê∏ùë• to ùê∏ùë¶:

‚Ä¢ ùê¥1: Whether there is at least one global optimum in ùê∏ùë• that

is also a global optimum under ùê∏ùë¶.

5 IMPLICATIONS

Our findings can excite a few research directions for SAS planning.
RQ1 suggests that, for future research on selecting proper
planning algorithm, SAS planning landscape is suitable for those
algorithms guided by the fitness (performance), and jump from one
adaptation plan to another by taking the distance to the currently
reached adaptation plans into account, e.g., change one (or some

Local optima to global optimumNon-optimal points to global optimumE(cid:5)1E(cid:5)2E(cid:5)3E(cid:5)40123DHE(cid:5)1E(cid:5)2E3E412345DHE‚àó1E‚àó2E‚àó36810DHE‚àó1E‚àó2E(cid:5)30123DHSEAMS ‚Äô22, May 18‚Äì23, 2022, Pittsburgh, PA, USA

Tao Chen

more) option each time such as the GA with neighborhood-based
mutation [46, 47]. In contrast, a planner that alters the adaptation
plan in a random number of options each time will likely lose
the valuable guidance of the landscape. When exploited fully, such
guidance is not only useful when the search space is intractable, but
also helps to find global optimum quicker in a tractable space [47],
which is attractive for SAS planning. However, it is important to
inspect the impact caused by environmental change.

For planner component design from RQ2, we show that a
mechanism which helps the planner to escape from local optima is
indeed necessary. These mechanisms are readily available, such as
larger radius of changes [48], random restarting [34], accepting in-
ferior plans [17], and multi-objectivization [14]. Albeit the number
of local optima from the landscapes may differ, a mechanism that
works for one environment will likely work for the others too.

Finally, from RQ3 and RQ4, we confirm again the importance
of seeded planning and plan reuse for SASs under changing
environments, which has recently attracted attention in the com-
munity [15, 16, 28]. Additionally, we provide initial evidence on
what should be seeded and shared. The most surprising finding is
that the local optima of an environment are also helpful for the
planning under the new environment (in addition to the global
optimum), as they may still be the local optima or one of them
may immediately become the new global optimum therein. This,
together with the finding that local optima are very much closer
to the global optimum than other random points and hence more
helpful (if the planner can escape from them), raises an interesting
topic of multi-modal planning for SAS: in addition to finding the
global optimum, we are also interested in preserving as many local
optima as possible during a planning run [5].

6 THREATS TO VALIDITY
Threats to internal validity can be related to the setting of one
option for defining local optimum and the step of 50 for the random
walking that computes Correlation Length, which were decided
pragmatically based on the needs. Larger values may change the
absolute figures but are unlikely to invalidate the conclusion.

The metrics and evaluation used may possess threats to con-
struct validity. In this work, the most common metrics from fit-
ness landscape analysis are used [27, 41] and those are related to
SAS planning (e.g., those in RQ4). Statistical significance is also
measured. However, we acknowledge that examining more metrics
for the properties of landscapes and using alternative baselines may
reveal more insights, which we will plan to do in future work.

The SASs and environments studied may be subject to the threats
of external validity. We mitigated this by using four commonly
studied SAS that is of different domains, scales, and performance
attributes, together with 14 environments, as used in prior work [14,
24, 26, 36, 39]. Nonetheless, we agree that studying additional sys-
tems/environments, even other types of SASs, may prove fruitful.

7 RELATED WORK

We now discuss the work related to the landscape analysis for SASs.
Planning for SASs: Over the last decade, various planning al-
gorithms have been proposed/adopted for SASs, including the ones
that rely on exact [2, 7, 19, 29] and stochastic planning [12, 28,

42, 43]. However, those planners were designed under certain hy-
potheses instead of understanding/evidence of the planning land-
scapes. We advocate that future planner design for SASs should be
evidence-driven, supported by not only hypotheses but also clear
insights about the properties and characteristics of the planning
landscape [11] ‚Äî the key point that this paper trying to make.

Landscape Analysis for SASs and Configurable Systems: Land-

scape analysis is a fairly new topic for configurable systems and
SASs. Jamshidi and Casale [24] have briefly showcased the local
optima of a configurable system, but this is achieved via visualizing
the projected landscape, which does not provide a comprehensive
summary. Likewise, Donckt et al. [18] also contribute to a simple
analysis via 3D visualization. Fredericks et al. [21] empirically com-
pare the planners, but they do not comment about the landscape.
Recently, Li et al. [31] apply local optima network ‚Äî a special type
of visualization graph ‚Äî to study the landscape of configurable sys-
tem. Our work differs from the above in that we demonstrate how
quantifiable metrics and notions from the domain of fitness land-
scape analysis can be used to study SASs with respect to different
environments while revealing interesting insights.

Performance Analysis for SASs and Configurable Systems:
Another different but related topic is performance analysis for SASs
and configurable systems, which concerns modeling the correlation
between adaptation plan and performance, such as Jamshidi et
al. [25] and Chen [4]. Those studies are orthogonal to this work
as they are complementary to each other. For example, Jamshidi
et al. [25] state that the model can be linearly transferred between
workloads (the environment in this work). This matches with our
finding that there is often a significant overlap on global/local
optima of the planning landscapes between environments (RQ4) ‚Äî
a possible explanation on why they are linearly transferrable.

8 CONCLUSION AND FUTURE WORK

In this paper, we demonstrate how the metrics and notions from the
domain of fitness landscape analysis can be derived for analyzing
the planning landscapes of SASs. We study four real-wold SASs
under 14 different environments. Our results reveal several findings
that can hint on the future research for SAS planner design.

We hope that this work can serve as a good starting point to
raise the importance of planning landscape analysis for SASs and
spark a dialog on a set of relevant future research directions for
SAS planning. As such, the next stage on this research thread is
vast, including building a dedicated methodology for SASs and fully
exploring the implications as we discussed in the paper.

REFERENCES
[1] Chris Anderson, Timothy Gordon Walmsley, and Panos Patros. 2021. A Self-
Learning Architecture for Digital Twins with Self-Protection. In IEEE International
Conference on Autonomic Computing and Self-Organizing Systems, ACSOS 2021,
Washington, DC, USA, September 27 - Oct. 1, 2021. IEEE, 291‚Äì292.

[2] Radu Calinescu, Lars Grunske, Marta Z. Kwiatkowska, Raffaela Mirandola, and
Giordano Tamburrelli. 2011. Dynamic QoS Management and Optimization in
Service-Based Systems. IEEE Trans. Software Eng. 37, 3 (2011), 387‚Äì409.

[3] Javier C√°mara, Alessandro Vittorio Papadopoulos, Thomas Vogel, Danny Weyns,
David Garlan, Shihong Huang, and Kenji Tei. 2020. Towards bridging the gap
between control and self-adaptive system properties. In SEAMS ‚Äô20: IEEE/ACM
15th International Symposium on Software Engineering for Adaptive and Self-
Managing Systems, Seoul, Republic of Korea, 29 June - 3 July, 2020. ACM, 78‚Äì84.
[4] Tao Chen. 2019. All versus one: an empirical comparison on retrained and
incremental machine learning for modeling performance of adaptable software.

Planning Landscape Analysis for Self-Adaptive Systems

SEAMS ‚Äô22, May 18‚Äì23, 2022, Pittsburgh, PA, USA

In Proceedings of the 14th International Symposium on Software Engineering for
Adaptive and Self-Managing Systems, May 25-31, 2019. ACM, 157‚Äì168.

[5] Tao Chen. 2022. Lifelong dynamic optimization for self-adaptive systems: fact or
fiction?. In SANER ‚Äô22: 29th IEEE International Conference on Software Analysis,
Evolution and Reengineering, Hawaii, United States, March 15-18 2022. IEEE.
[6] Tao Chen and Rami Bahsoon. 2013. Self-adaptive and sensitivity-aware QoS
modeling for the cloud. In Proceedings of the 8th International Symposium on
Software Engineering for Adaptive and Self-Managing Systems, SEAMS 2013, San
Francisco, CA, USA, May 20-21, 2013. IEEE Computer Society, 43‚Äì52.

[7] Tao Chen and Rami Bahsoon. 2014. Symbiotic and sensitivity-aware architecture
for globally-optimal benefit in self-adaptive cloud. In 9th International Symposium
on Software Engineering for Adaptive and Self-Managing Systems, SEAMS 2014,
Proceedings, Hyderabad, India, June 2-3, 2014. ACM, 85‚Äì94.

[8] Tao Chen and Rami Bahsoon. 2017. Self-Adaptive and Online QoS Modeling for
Cloud-Based Software Services. IEEE Transactions on Software Engineering. 43, 5
(2017), 453‚Äì475. https://doi.org/10.1109/TSE.2016.2608826

[9] Tao Chen and Rami Bahsoon. 2017. Self-Adaptive Trade-off Decision Making for
Autoscaling Cloud-Based Services. IEEE Transactions on Services Computing. 10,
4 (2017), 618‚Äì632. https://doi.org/10.1109/TSC.2015.2499770

[10] Tao Chen, Rami Bahsoon, and Xin Yao. 2018. A Survey and Taxonomy of Self-
Aware and Self-Adaptive Cloud Autoscaling Systems. ACM Computing Survey
51, 3 (2018), 61:1‚Äì61:40. https://doi.org/10.1145/3190507

[11] Tao Chen, Rami Bahsoon, and Xin Yao. 2020. Synergizing Domain Expertise
With Self-Awareness in Software Systems: A Patternized Architecture Guideline.
Proc. IEEE 108, 7 (2020), 1094‚Äì1126.

[12] Tao Chen, Ke Li, Rami Bahsoon, and Xin Yao. 2018. FEMOSAA: Feature Guided
and Knee Driven Multi-Objective Optimization for Self-Adaptive Software. ACM
Transactions on Software Engineering and Methodology 27, 2 (2018).

[13] Tao Chen and Miqing Li. 2021. MMO: Meta Multi-Objectivization for Software

Configuration Tuning. CoRR abs/2112.07303 (2021). arXiv:2112.07303

[14] Tao Chen and Miqing Li. 2021. Multi-objectivizing software configuration tuning.
In ESEC/FSE ‚Äô21: 29th ACM Joint European Software Engineering Conference and
Symposium on the Foundations of Software Engineering, Athens, Greece, August
23-28, 2021. ACM, 453‚Äì465. https://doi.org/10.1145/3468264.3468555

[15] Tao Chen, Miqing Li, and Xin Yao. 2018. On the effects of seeding strategies:
a case for search-based multi-objective service composition. In the Genetic and
Evolutionary Computation Conference, July 15-19, 2018. ACM, 1419‚Äì1426.
[16] Tao Chen, Miqing Li, and Xin Yao. 2019. Standing on the shoulders of giants:
Seeding search-based multi-objective optimization with prior knowledge for
software service composition. Info. Software Technology 114 (2019), 155‚Äì175.

[17] Xiaoan Ding, Yi Liu, and Depei Qian. 2015. JellyFish: Online Performance Tuning
with Adaptive Configuration and Elastic Container in Hadoop Yarn. In 21st
IEEE International Conference on Parallel and Distributed Systems, ICPADS 2015,
Melbourne, Australia, December 14-17, 2015. IEEE Computer Society, 831‚Äì836.

[18] M. Jeroen Van Der Donckt, Danny Weyns, Federico Quin, Jonas Van Der Donckt,
and Sam Michiels. 2020. Applying deep learning to reduce large adaptation
spaces of self-adaptive systems with multiple types of goals. In IEEE/ACM 15th
International Symposium on Software Engineering for Adaptive and Self-Managing
Systems, Seoul, Republic of Korea, 29 June - 3 July, 2020. ACM, 20‚Äì30.

[19] Ahmed M. Elkhodary, Naeem Esfahani, and Sam Malek. 2010. FUSION: a frame-
work for engineering self-tuning self-adaptive software systems. In Proceedings
of the 18th ACM SIGSOFT International Symposium on Foundations of Software
Engineering, 2010, Santa Fe, NM, USA, November 7-11, 2010. ACM, 7‚Äì16.

[20] Ronald A Fisher. 1915. Frequency distribution of the values of the correlation
coefficient in samples from an indefinitely large population. Biometrika 10, 4
(1915), 507‚Äì521.

[21] Erik M. Fredericks, Ilias Gerostathopoulos, Christian Krupitzer, and Thomas
Vogel. 2019. Planning as Optimization: Dynamically Discovering Optimal Con-
figurations for Runtime Situations. In 13th IEEE International Conference on
Self-Adaptive and Self-Organizing Systems, June 16-20, 2019. IEEE, 1‚Äì10.

[22] Simos Gerasimou, Radu Calinescu, and Giordano Tamburrelli. 2018. Synthesis of
probabilistic models for quality-of-service software engineering. Autom. Softw.
Eng. 25, 4 (2018), 785‚Äì831. https://doi.org/10.1007/s10515-018-0235-8

[23] Jeffrey Horn and David E. Goldberg. 1994. Genetic Algorithm Difficulty and
the Modality of Fitness Landscapes. In Proceedings of the Third Workshop on
Foundations of Genetic Algorithms. July 31 - August 2 1994. 243‚Äì269.

[24] Pooyan Jamshidi and Giuliano Casale. 2016. An Uncertainty-Aware Approach to
Optimal Configuration of Stream Processing Systems. In 24th IEEE International
Symposium on Modeling, Analysis and Simulation of Computer and Telecommuni-
cation Systems, London, United Kingdom, September 19-21, 2016. IEEE, 39‚Äì48.
[25] Pooyan Jamshidi, Norbert Siegmund, Miguel Velez, Christian K√§stner, Akshay
Patel, and Yuvraj Agarwal. 2017. Transfer learning for performance modeling
of configurable systems: an exploratory analysis. In Proceedings of the 32nd
IEEE/ACM International Conference on Automated Software Engineering, ASE 2017,
Urbana, IL, USA, October 30 - November 03, 2017. IEEE Computer Society, 497‚Äì508.
[26] Pooyan Jamshidi, Miguel Velez, Christian K√§stner, and Norbert Siegmund. 2018.
Learning to sample: exploiting similarities across environments to learn perfor-
mance models for configurable systems. In Proceedings of the 2018 ACM Joint

Meeting on European Software Engineering Conference and Symposium on the
Foundations of Software Engineering, November 04-09, 2018. ACM, 71‚Äì82.
[27] Terry Jones and Stephanie Forrest. 1995. Fitness Distance Correlation as a
Measure of Problem Difficulty for Genetic Algorithms. In Proceedings of the 6th
International Conference on Genetic Algorithms, July 15-19, 1995. 184‚Äì192.
[28] Cody Kinneer, David Garlan, and Claire Le Goues. 2021. Information Reuse and
Stochastic Search: Managing Uncertainty in Self-* Systems. ACM Trans. Auton.
Adapt. Syst. 15, 1 (2021), 3:1‚Äì3:36. https://doi.org/10.1145/3440119

[29] Satish Kumar, Tao Chen, Rami Bahsoon, and Rajkumar Buyya. 2020. DATESSO:
self-adapting service composition with debt-aware two levels constraint rea-
soning. In IEEE/ACM 15th International Symposium on Software Engineering for
Adaptive and Self-Managing Systems, 29 June - 3 July, 2020. ACM, 96‚Äì107.
[30] Luc Lesoil, Mathieu Acher, Xhevahire T√´rnava, Arnaud Blouin, and Jean-Marc
J√©z√©quel. 2021. The interplay of compile-time and run-time options for perfor-
mance prediction. In SPLC ‚Äô21: 25th ACM International Systems and Software
Product Line Conference, September 6-11, 2021. ACM, 100‚Äì111.

[31] Ke Li, Peili Mao, and Tao Chen. 2022. LONViZ: Unboxing the black-box of
Configurable Software Systems from a Complex Networks Perspective. CoRR
abs/2201.01429 (2022). arXiv:2201.01429 https://arxiv.org/abs/2201.01429
[32] Ke Li, Zilin Xiang, Tao Chen, and Kay Chen Tan. 2020. BiLO-CPDP: Bi-Level
Programming for Automated Model Discovery in Cross-Project Defect Prediction.
In 35th IEEE/ACM International Conference on Automated Software Engineering,
ASE 2020, Melbourne, Australia, September 21-25, 2020. IEEE, 573‚Äì584.

[33] Ke Li, Zilin Xiang, Tao Chen, Shuo Wang, and Kay Chen Tan. 2020. Understanding
the automated parameter optimization on transfer learning for cross-project
defect prediction: an empirical study. In ICSE ‚Äô20: 42nd International Conference
on Software Engineering, Seoul, South Korea, 27 June - 19 July, 2020. ACM, 566‚Äì577.
[34] Min Li, Liangzhao Zeng, Shicong Meng, Jian Tan, Li Zhang, Ali Raza Butt, and
Nicholas C. Fuller. 2014. MRONLINE: MapReduce online performance tuning. In
The 23rd International Symposium on High-Performance Parallel and Distributed
Computing, HPDC‚Äô14, Vancouver, BC, Canada - June 23 - 27, 2014. ACM, 165‚Äì176.
[35] Claudio Mandrioli and Martina Maggio. 2020. Testing self-adaptive software with
probabilistic guarantees on performance metrics. In ESEC/FSE ‚Äô20: 28th ACM Joint
European Software Engineering Conference and Symposium on the Foundations of
Software Engineering, Virtual Event, USA, November 8-13, 2020. ACM, 1002‚Äì1014.
[36] Pedro Mendes, Maria Casimiro, Paolo Romano, and David Garlan. 2020. Trim-
Tuner: Efficient Optimization of Machine Learning Jobs in the Cloud via Sub-
Sampling. In 28th International Symposium on Modeling, Analysis, and Simulation
of Computer and Telecommunication Systems, November 17-19, 2020. IEEE, 1‚Äì8.

[37] Olaf Mersmann, Bernd Bischl, Heike Trautmann, Mike Preuss, Claus Weihs,
and G√ºnter Rudolph. 2011. Exploratory landscape analysis. In the Genetic and
Evolutionary Computation Conference, July 12-16, 2011. ACM, 829‚Äì836.

[38] Peter Merz and Bernd Freisleben. 2000. Fitness landscape analysis and memetic
algorithms for the quadratic assignment problem. IEEE Trans. Evol. Comput. 4, 4
(2000), 337‚Äì352. https://doi.org/10.1109/4235.887234

[39] Vivek Nair, Zhe Yu, Tim Menzies, Norbert Siegmund, and Sven Apel. 2020. Finding
faster configurations using FLASH. IEEE Trans. Software Eng. 46, 7 (2020).
[40] Gabriela Ochoa, Rong Qu, and Edmund K. Burke. 2009. Analyzing the landscape
of a graph based hyper-heuristic for timetabling problems. In the Genetic and
Evolutionary Computation Conference, July 8-12, 2009. ACM, 341‚Äì348.

[41] Erik Pitzer and Michael Affenzeller. 2012. A Comprehensive Survey on Fitness
Landscape Analysis. In Recent Advances in Intelligent Engineering Systems. Studies
in Computational Intelligence, Vol. 378. Springer, 161‚Äì191.

[42] Andres J. Ramirez, David B. Knoester, Betty H. C. Cheng, and Philip K. McKinley.
2009. Applying genetic algorithms to decision making in autonomic comput-
ing systems. In Proceedings of the 6th International Conference on Autonomic
Computing, ICAC 2009, June 15-19, 2009, Barcelona, Spain. ACM, 97‚Äì106.
[43] Arman Shahbazian, Suhrid Karthik, Yuriy Brun, and Nenad Medvidovic. 2020.
eQual: informing early design decisions. In ESEC/FSE ‚Äô20: 28th ACM Joint European
Software Engineering Conference and Symposium on the Foundations of Software
Engineering, Virtual Event, USA, November 8-13, 2020. ACM, 1039‚Äì1051.

[44] Norbert Siegmund, Sergiy S. Kolesnikov, Christian K√§stner, Sven Apel, Don S.
Batory, Marko Rosenm√ºller, and Gunter Saake. 2012. Predicting performance
via automated feature-interaction detection. In 34th International Conference on
Software Engineering, ICSE 2012, June 2-9, 2012. IEEE Computer Society, 167‚Äì177.
[45] Peter F Stadler. 1996. Landscapes and their correlation functions. Journal of

Mathematical chemistry 20, 1 (1996), 1‚Äì45.

[46] Jorge Tavares, Francisco Baptista Pereira, and Ernesto Costa. 2008. Multidimen-
sional Knapsack Problem: A Fitness Landscape Analysis. IEEE Trans. Syst. Man
Cybern. Part B 38, 3 (2008), 604‚Äì616. https://doi.org/10.1109/TSMCB.2008.915539
[47] S WRIGHT. 1932. The roles of mutation, inbreeding, crossbreeding and selection
in evolution. In The 6th international congress of Genetics, Vol. 1. 356‚Äì366.
[48] Tao Ye and Shivkumar Kalyanaraman. 2003. A recursive random search algo-
rithm for large-scale network parameter configuration. In Proceedings of the
International Conference on Measurements and Modeling of Computer Systems,
SIGMETRICS 2003, June 9-14, 2003, San Diego, CA, USA. ACM, 196‚Äì205.

[49] Guang Yong Zou. 2007. Toward using confidence intervals to compare correla-

tions. Psychological methods 12, 4 (2007), 399.

