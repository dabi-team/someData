2
2
0
2

p
e
S
6

]
E
S
.
s
c
[

1
v
2
2
2
2
0
.
9
0
2
2
:
v
i
X
r
a

Understanding Skills for OSS Communities on GitHub

Jenny T. Liang
University of Washington
Seattle, Washington, USA
jliang9@cs.washington.edu

Thomas Zimmermann
Microsoft Research
Redmond, Washington, USA
tzimmer@microsoft.com

Denae Ford
Microsoft Research
Redmond, Washington, USA
denae@microsoft.com

ABSTRACT

The development of open source software (OSS) is a broad field
which requires diverse skill sets. For example, maintainers help
lead the project and promote its longevity, technical writers assist
with documentation, bug reporters identify defects in software, and
developers program the software. However, it is unknown which
skills are used in OSS development as well as OSS contributors’
general attitudes towards skills in OSS. In this paper, we address
this gap by administering a survey to a diverse set of 455 OSS
contributors. Guided by these responses as well as prior literature
on software development expertise and social factors of OSS, we
develop a model of skills in OSS that considers the many contexts
OSS contributors work in. This model has 45 skills in the following
9 categories: technical skills, working styles, problem solving, con-
tribution types, project-specific skills, interpersonal skills, external
relations, management, and characteristics. Through a mix of qual-
itative and quantitative analyses, we find that OSS contributors are
actively motivated to improve skills and perceive many benefits
in sharing their skills with others. We then use this analysis to
derive a set of design implications and best practices for those who
incorporate skills into OSS tools and platforms, such as GitHub.

CCS CONCEPTS
• Human-centered computing → Open source software.

KEYWORDS
open source software, skills, empirical study, survey

ACM Reference Format:
Jenny T. Liang, Thomas Zimmermann, and Denae Ford. 2022. Understand-
ing Skills for OSS Communities on GitHub. In Proceedings of the 30th
ACM Joint European Software Engineering Conference and Symposium on
the Foundations of Software Engineering (ESEC/FSE ’22), November 14–18,
2022, Singapore, Singapore. ACM, New York, NY, USA, 13 pages. https:
//doi.org/10.1145/3540250.3549082

1 INTRODUCTION

The development of open source software (OSS) is a complex un-
dertaking, which requires a diverse set of people and skill sets. Suc-
cessful OSS projects are not completed alone: maintainers drive the
project to be sustained long-term, keeping in mind their community
and project vision; technical writers generate clear, well-written

Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore
© 2022 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-9413-0/22/11.
https://doi.org/10.1145/3540250.3549082

documentation to teach others to use the OSS; bug reporters iden-
tify defects which improve the product; and software developers
help program software, create new features, and fix bugs.

At the crux of these roles are skills. Skills are critical to software
development, including the development of OSS. While OSS devel-
opment and software development are similar, OSS contributors
also work in contexts that are unique to OSS (e.g., consistently
collaborating in a distributed form). Previous work has investigated
the experience, expertise, and skills of OSS contributors in a variety
of contexts, such as maintainers [16], integrators [27], and men-
tors [5, 59]. While work such as these provide some idea of skills
that are necessary for OSS, it does not fully consider the broad set of
circumstances that OSS contributors work in, such as contributors
who provide essential non-code contributions [13]. Prior work also
does not provide a set of skills relevant to OSS and furthermore,
how contributors would like to share and improve on them.

By better understanding skills related to OSS, we can inform the
design of tools or platforms that incorporate skills and elicit best
practices to leverage them as much as possible. In this paper, we
investigate the skills which are relevant to OSS and contributors’
relationship with skills. We define three research questions:

RQ1 What are relevant skills for OSS?
RQ2 How do OSS contributors grow and improve skills?
RQ3 How do OSS contributors share and display skills?

To answer the research questions, we deployed a survey to elicit
OSS contributors’ insights and to understand their preferences re-
lated to skills. Our survey received 455 responses with perspectives
from OSS contributors. We derive a set of relevant skills from the
survey responses and by leveraging the rich set of literature sur-
rounding social factors of OSS and software development expertise.
From the survey data, we further investigate contributors’ perspec-
tives on skills in OSS, namely how they would like to improve skills
and how they would like to share their skills.

In our study, we find that contributors themselves defined skills
in OSS very broadly, which is amplified by the diverse set of roles
in OSS. Thus, in this paper, we use a general notion of skills, also
following prior work [66]. We define skills as anything that
an individual can actively work to improve on. Our definition
encompasses formal skills as well as personal attributes of contribu-
tors. The broader definition of skill is exemplified by this response:

“Skills are anything that helps improve the project. This can in-
clude coding, writing docs, researching bugs, triaging incoming bug
reports and requests, and doing releases. Larger projects may also
require skills that we see in commercial dev environments, such as
project management, product management, and planning release
schedules. And there is also a need for people skills like dealing
with conflict between project members, enforcing codes of conduct,
and other skills along those lines.” (P188)

 
 
 
 
 
 
ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Liang, et al.

We find that OSS skills include a healthy mixture of hard skills
(e.g., software engineering and other technical expertise) and soft
skills (e.g., interpersonal and management skills). Furthermore,
we find that OSS contributors are actively motivated to improve
skills and perceive many benefits in sharing their skills with others.
However, sharing skills may also have potential negative effects,
which deserves careful consideration.

The contributions of this paper are as follows:

● A model of skills in OSS informed by literature and practi-
tioner experiences from 455 survey responses (Section 4).
● Survey findings on how contributors would like to improve

and share skills (Sections 5 and 6).

● Best practices and design implications on incorporating skills

into OSS platforms, such as GitHub (Section 7).

2 BACKGROUND

Software engineering researchers have studied the skills and
expertise that software engineers rely on. Previous work has found
that effective soft skills (e.g., communication, critical thinking) [1,
18, 49] and hard skills (e.g., fault localization, software design) [68]
are crucial to software engineering. Baltes et al. developed a theory
of software engineering expertise with a focus on programming
expertise being formed [6]. Li et al. uncovered 56 attributes of great
software engineers, focusing on their soft skills, such as personal
and decision making characteristics [38]. In a later study, Li et al.
found that distinguishing traits of great software engineers included
paying attention to coding details, handling complexity, and con-
tinuously improving as well as being open-minded and honest [37].
However, these models cannot be fully applied to OSS development.
OSS development relies on roles aside from software engineering,
such as community managers, technical writers [63], and people
with external domain expertise [32]. Thus, it has unique contexts
(e.g., wrangling contributors [16, 27], identifying funding [16, 63],
consistently collaborating in a distributed, remote form [26, 27])
which prior research in this area does not completely address.

Practitioners have previously discussed the various skills re-
quired in OSS communities. This includes social skills, such as
communication, collaboration, and advocacy, as well as technical
skills, such as tools and technologies, programming, writing doc-
umentation, and bug triaging [4, 11, 20]. Learning about OSS and
related skills have also occurred in academic settings. For instance,
universities have developed graduate degree programs and courses
on free open-source software for students to become experts in the
field [46, 52]. Students have also been invited to participate in OSS
projects as part of class assignments to teach collaborative software
engineering skills [35, 58] and knowledge in OSS work practices
and development processes [42].

Additionally, researchers have investigated contributor motiva-
tion. Contributors participate in OSS projects for self-marketing
and to fulfill personal software needs [2] as well as having fun
and giving back to others. [8]. Huang et. al found that contributors
involved in OSS projects for social good were motivated to join to
impact society and learn new skills [32]. Other research has also
studied career trajectories of contributors. Trinkenreich et al. found
that contributors often start their OSS career by “lurking" in the
community, such as working with the code or joining events. Then,

as involvement increased, they would take on coding or non-coding
roles. Contributors’ careers were non-linear; they could switch roles
throughout their careers. [63]

Meanwhile, previous work in OSS has uncovered aspects of be-
ing a successful OSS contributor across a variety of specific contexts.
However, this body of work does not provide a holistic model of
OSS contributor skills or attributes across the OSS ecosystem. For
example, previous work has independently studied many roles in
OSS, such as attributes of maintainers [16], barriers of newcom-
ers [60, 62] and mentors [5], the practices of integrators [27], and
experiences of quasi-contributors (i.e., contributors who did not
have their contributions accepted) [61]. Other work has examined
how contributions [65] and other contributors [43, 44] are evaluated
by OSS contributors on GitHub.

Related to skills in OSS is Trinkenreich et al.’s work on definitions
of success in OSS [64]. Some factors of success includes coopera-
tion, advancement by level and experience, self-development, and
achieving personal satisfaction. Our work complements this by
enumerating what skills are necessary for contributors to achieve
some forms of success based on their model.

3 METHODOLOGY

To answer the three research questions, we conducted a litera-
ture review (Section 3.1) and deployed a survey among contributors
of open source (Section 3.2). To analyze the data, we used a com-
bination of qualitative coding and statistical analysis (Section 3.3).
Materials to help with replication of this work are available as
supplemental materials [39].

3.1 Literature Review

To compile a list of papers related to skills in OSS, we searched the
ACM Guide to Computing Literature using the following criteria:

● The content type was “Research Article”.
● The title contained one or more of the following terms: “open
source”, “oss”, “software development”, “developer”, “devel-
opers”, “software engineer”, “software engineers”.

● The abstract contained one or more of the following terms:
“skill”, “skills”, “expertise”, “knowledge”, “characteristic”, “at-
tribute”.

● The publication venue was in a top publkication venue in
software engineering (ICSE, ESEC/FSE, FSE, TSE, TOSEM),
human-computer interaction (CHI, CSCW), or computer sci-
ence education (SIGCSE). We included the CHI and CSCW
conferences to get an outside perspective of skill and because
they regularly publish research related to software engineer-
ing. We included the SIGCSE conference because of its focus
on computing education, which is related to skills.

● The publication year was between 2011 and 2021. We selected
recent papers to focus on modern OSS tools, technologies,
or processes. We selected 2011 as the cutoff year because the
first research papers on GitHub and Stack Overflow were
published in 2012 [3, 14, 25].

The initial query yielded 228 results in the ACM Guide. We ex-
cluded papers with fewer than 15 citations unless they had been pub-
lished recently (2019, 2020, 2021). The first author then checked each
of the papers to see if it included an explicit list of skills, attributes,

Understanding Skills for OSS Communities on GitHub

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Survey Questions
⋆ How do you define skills in the context of OSS? What are

some examples of such skills?

⋆ What are your strategies to grow your skills in the context of

OSS?

⋆ What factors influence which skills you want to improve on?
● Do you use GitHub to display skills and experiences that are

relevant for OSS development?

● Do you use LinkedIn to display skills and experiences that

are relevant for OSS development?

● As a maintainer, do you use GitHub to determine what skills

a potential contributor has?

● Which of the following information about your skills would
you display on GitHub to just yourself, your collaborators,
and the public?

⋆ What motivates you to share skills information with others?
⋆ Can you give examples of when it would be helpful to share

skills information with others?

Figure 1: A subset of the survey questions. Open-ended ques-
tions are indicated with a star (⋆). The complete survey in-
strument is in the supplemental materials [39].

or characteristics of software developers or OSS contributors. The
result was a set of ten papers [6, 12, 16, 29, 31, 34, 38, 43, 47, 63]
that discussed skills and expertise in software engineering, often
through the lens of social factors of OSS. The papers covered a
diverse set of skills and contribution types. The paper selection
was not meant to be exhaustive as we planned to supplement this
resource with a survey among OSS contributors.

3.2 Survey

To understand contributors’ perspectives on skills in OSS, we

distributed a Qualtrics survey to OSS contributors on GitHub.

Design. We designed a survey to obtain examples of OSS skills
and investigate the role of skills in OSS. Survey topics included: how
users currently display skills relevant to OSS, identifying relevant
skills in OSS, improving skills in OSS, and evaluating new proposed
methods of displaying skills on GitHub. A subset of the survey
questions is displayed in Figure 1; the full survey instrument is
available in our supplemental materials [39].

Following previous work [32], we used the FDA’s descriptions of
race and ethnicity [17] and the HCI Guidelines for Gender Equity
and Inclusivity [55] to collect demographic information. We allowed
participants to select multiple responses for the demographics re-
lated to ethnicity, gender, and role. While developing the survey,
an external researcher reviewed the survey and provided feedback
on the wording of the questions.

Sampling Strategy. First, we identified GitHub projects to sample
potential contributors from two lists of OSS projects previously used
by Huang et al. to study OSS communities [32]. The list Projects-
OSS4SG contained 437 GitHub projects identified as OSS for social
good (OSS4SG), while the other list Projects-OSS contained 642
GitHub projects that were not included in the first list.

Next, we defined populations based on their contribution types
to each project: 1) authoring commits, 2) opening issues and pull
requests, and 3) commenting on others’ issues and pull requests.
We chose to sample using different contribution types to capture
the diversity of roles that contributors take in OSS projects. We
sampled and distributed the survey in two phases.

In Phase 1, we focused on commits as a contribution type. We
identified the top 30 contributors by commit count for each project in
Project-OSS4SG and Project-OSS, which yielded population sizes of
5,905 and 6,256 contributors respectively. 1,856 users from OSS4SG
and 2,692 users from OSS had contact information publicly available.
After removing duplicates, this resulted in 3,072 users who we
invited to take the survey.

In Phase 2, we focused on issues and pull requests as contri-
bution types. We identified all contributors who submitted an is-
sue or opened a pull request in Project-OSS4SG (25,011 users) and
Project-OSS (72,501 users). We also identified all GitHub users who
commented on another contributor’s issue or pull request in Project-
OSS4SG (5,583 users) and Project-OSS (5,065 users). From these four
lists, we selected users who included contact information in their
public GitHub profile. We removed duplicate users across the four
sets and users who had already been distributed a survey from
Phase 1. This resulted in 28,847 users who participated in GitHub
issues and pull requests. Due to the large size, we further reduced
this set to the users who had opened issues, pull requests, or comments
within the past twelve months. This resulted in 6,023 GitHub users
who we invited to take the survey.

Participants. The survey was sent to a total of 9,095 OSS contrib-
utors and received 455 responses, resulting in a response rate of
5%, which is comparable to other surveys in software engineering,
which range from 6% to 36% [57]. The slightly lower response rate
is due to the length of the survey, which was advertised as 20 min-
utes. Most participants completed the survey within 20 minutes,
with a median completion time of 16 minutes. After completing the
survey, participants could join a sweepstakes to win one of four
$100 electronic gift cards.

Our participants represented various geographic locations, includ-
ing Africa (𝑛 = 23), the Americas (𝑛 = 159), Asia (𝑛 = 115), Europe
(𝑛 = 152), and Oceania (𝑛 = 6). Participants also represented a wide
range of ethnicities, including White (𝑛 = 229), Asian (𝑛 = 123), Black
or African (𝑛 = 14), Hispanic or Latino (𝑛 = 43), Middle Eastern (𝑛 =
22), and Native American or Other Pacific Islander (𝑛 = 1). Multiple
genders were also represented, such as woman (𝑛 = 26), man (𝑛 =
398), and non-binary or gender diverse (𝑛 = 9). Participants also
were involved in diverse set of roles in OSS, such as documentation
writer (𝑛 = 168), bug submitter (𝑛 = 211), graphic artist (𝑛 = 5),
translator (𝑛 = 47), coder (𝑛 = 371), maintainer (𝑛 = 226), porter (𝑛
= 13), tool builder (𝑛 = 63), and GUI designer (𝑛 = 25).

3.3 Analysis

To compile the list of skills in open source (RQ1), we included
a question in the survey which asked participants to provide exam-
ples of skills in OSS, which 368 participants answered. Additionally,
from Section 3.1, we compiled a resource which included 193 in-
stances of skills in OSS or software engineering from literature. This

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Liang, et al.

Through reviewing relevant literature and qualitative coding, we
synthesized an OSS skills model with 45 skills across the following
9 categories: technical skills, working styles, problem solving, con-
tribution types, project-specific skills, interpersonal skills, external
relations, management, and characteristics (see Figure 2). Overall,
we find that characteristics of the contributor underlie all other
skills and allows an individual to excel in other skills. The remain-
ing skill categories are directly related to either the OSS contributor,
project, or community, where management-related skills cross-cut
across all three of these functions.

In analyzing survey responses, we find that participants de-
scribed skills in OSS broadly, and included formal skills as well
as personal attributes. Thus, our model includes any instance of a
skill or attribute listed by participants that could be improved upon
by an individual. Below, we discuss this model and its categories in
further detail. Our full model is summarized in Table 1.

4.1 Model of Skills in OSS

Technical Skills. The Technical Skills category encapsulates
technical knowledge and abilities needed to perform a specific task.
Many of these skills were technology-related. Basic programming
skills, such as debugging, testing, and code comprehension, were
the most commonly mentioned skill in our model. Participants ar-
gued that programming skills were central to OSS development:
“Being able to write working computer code and tests, kind of the
backbone of OSS.” (P4) In this category, participants also frequently
mentioned skills in more advanced aspects of software engineering,
including best practices on software design, requirements engi-
neering, and maintenance. Supporting these technical skills was an
understanding of how to use version control systems, which was
the backbone for remote collaboration. This knowledge included
understanding how to resolve merge conflicts [27] as well as “the
flow of clone, add, commit[, and]...rebas[ing] and cherry-pick[ing]”
(P295). Furthermore, competency in specific technologies as well
as DevOps skills promoted efficient software development. Lastly,
domain knowledge, which encapsulated specialized knowledge
from fields directly related to and unrelated to technology (e.g.,
transportation, finance, cryptography, distributed systems), pro-
vided valuable expertise which drove OSS development.

Working Styles. The Working Styles category describes how
an individual does their work. For example, having an organized
working style helped contributors manage repositories, teams, and
tasks. One participant noted how this skill contributed to the project
being seen as well-maintained: “Skill in organization is important as
well; guiding users that file issues with templates that help you get the
information you need, labeling and organizing into milestones...can
signal to consumers that a project is well maintained.” (P441)

Participants also expressed an appreciation for contributors who
pursued excellence in their work, where individuals would go above
and beyond to produce high-quality contributions. Finally, being
available allowed contributors to give feedback or answer ques-
tions to their teammates in a timely manner. Both these skills were
frequently cited in literature and were associated with great main-
tainers [16] and software engineers [38].

Figure 2: An overview of the skills in our OSS model. Char-
acteristics underlie all skills, while the remaining skill cate-
gories directly relate to the contributor, project, or commu-
nity. Management-related skills cross-cut these functions.

yielded a combined dataset of 561 skills-related items to analyze.
To remove ordering effects, the dataset was randomly shuffled.

To analyze the data, all authors followed best practices in qual-
itative coding and initially coded the same set of statements [54].
During the first round of qualitative coding, they open-coded the
first 100 items from the shuffled dataset. In each item, the authors
independently identified relevant OSS skills. Then, they convened
to discuss the resulting set of codes and their relationships and
to clarify the scope of each code. From this discussion, a shared
codebook was generated that included the authors’ identified skills.
Next, the authors independently performed a second round of
open coding on the next 100 items using the shared codebook. The
authors convened again to discuss the scope of the codes and add
new codes by unanimous vote. In the second round, the authors
agreed on 78.2% of the codes; a moderate agreement which is also
comparable to other empirical software engineering studies [33, 45].
Next, the rest of the items were divided into sections and each
author coded one of the sections independently. Afterwards, the
authors convened for one last discussion on the codes’ scopes and
added new codes based on unanimous vote, which resulted in the
final model in Section 4.

To provide insight on improving skills (RQ2) and displaying
skills (RQ3), we analyzed a combination of open-ended and closed-
ended questions. For the open-ended questions, each question was
assigned a single author. The assigned author then reviewed at least
100 responses and identified common themes across the responses
that answered the prompt, each of which corresponded to a code.
Finally, each response was labeled with one or more codes. The
authors then met to discuss the codes and the emerging themes.
For the closed-ended questions, we used standard statistical analy-
sis techniques. We report percentages of how frequently an item
was selected or how frequently participants agreed or strongly
agreed with a statement. This follows the best practices shared by
Kitchenham and Pfleeger on how to analyze survey data [36].

4 SKILLS IN OSS (RQ1)

In this section, we present the findings for the research question:

“What are relevant skills for OSS?”

ProjectProject-SpecificCommunityExternal RelationsManagementManagementContributorProblem SolvingTechnicalWorking StyleCharacteristicsInterpersonalContribution TypesUnderstanding Skills for OSS Communities on GitHub

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Table 1: A list of skills based on the literature review and analysis of survey responses. ♂ = 1-10 survey mentions, ♂ ♂ = 11-20
survey mentions, ♂ ♂ ♂ = 21-50 survey mentions, ♂ ♂ ♂ ♂ = 51-100 survey mentions, and ♂ ♂ ♂ ♂ ♂ = 100+ survey mentions.

Skill & Description

Technical Skills
Programming. Has skills in basic programming (e.g., testing, code comprehension, debugging)
Software engineering. Has skills in good software engineering practices (e.g., software design, software architecture,
requirements, refactoring, writing maintainable code)
Technologies. Is familiar with specific programming languages, tools, technologies, or frameworks
DevOps. Has knowledge in DevOps to deliver software quickly and efficiently
Domain. Has domain-specific knowledge or expertise
Version control systems. Has basic version control knowledge (e.g., resolving merge conflicts)

Sources

Literature

[38], [47], [63]
[6], [29], [38]

[6], [34], [38], [47]

[16], [38], [47]
[47]

Working Styles
Excellence. Strives to achieve excellence or produce high-quality work by paying attention to smaller details; takes
pride in one’s work
Available. Has time available and is present to answer questions or work with others
Organized. Keeps things in order; works in a systematic way

[6], [16], [29], [38], [43], [63]

[6], [12], [16], [34], [38], [47]

Problem Solving
Creative. Ideates creative solutions to solve a problem
Initiative. Takes initiative to solve problems; executes on the steps to address problems
Analytical. Is able to analyze, apply logical reasoning to, or critically think through problems and solutions

[29], [38]
[34], [38], [43], [63]
[29], [34], [38]

Contribution Types
Bug triaging. Determines the severity of a bug
Bug reporting. Finds and reports defects in software
Code review. Reads through and provides feedback on code contributions
Documentation. Writes content to convey technical information to broad audiences (e.g., documentation)
Visual design. Creates visuals for the OSS project (e.g., graphics, UI/UX)
Translation. Translates content to another language (e.g., localization)

[16], [63]

Project-Specific Skills
Purpose. Understands and believes in the purpose and societal impacts of the project or OSS development at large
Organization. Understands the file and team structure of a project
Processes. Follows project processes and rules

[16], [34], [38], [43], [63]
[31], [34], [38], [63]
[16], [29], [31], [34], [38], [47]

Interpersonal Skills
Kind. Empathizes with others and show kindness
Communication. Clearly communicates with others in written and oral forms
Asking for help. Knows how to ask for help when one needs it
Giving help. Actively helps others when they need it; mentors, guides, or teaches others in the team
Conflict resolution. Resolves conflicts between people
Collaboration. Works with people from diverse backgrounds to achieve a shared goal

External Relations
Stakeholders. Works with stakeholders to coordinate OSS development
Marketing. Promotes the project to broader audiences
Licenses. Understands the process of obtaining a license for the OSS project
Funding. Obtains funding for the OSS project

Management
Community. Cultivates an engaged, healthy community; is involved in community governance
Project. Is a project leader and directs the completion of a project (e.g., setting standards, meeting deadlines)
Planning. Plans the next steps for what is ahead
Delegating. Effectively assigns tasks to others
Time. Manages one’s time effectively given the tasks at hand

Characteristics
Adventurous. Is willing to take risks
Open-minded. Is open to new ideas and viewpoints
Patient. Accepts unexpected delays or problems without being upset
Adaptable. Adapts to changes in the environment
Curious. Is eager to learn or know new things; continuously learns
Reliable. Is reliable and consistent between one’s actions and words
Persevering. Consistently works through difficult or unexpected situations independently and with a positive attitude
Diligent. Works hard to complete tasks; is committed and focused
Self-aware. Assesses one’s situation and makes corrective actions; is transparent and accountable to one’s actions;
displays confidence based on an accurate understanding of abilities

[12], [29], [34], [38], [47]
[6], [12], [29], [31], [34], [38], [47]
[29], [38]
[6], [16], [29], [31], [34], [38]
[29], [34]
[29], [31], [34], [38]

[16], [29], [31], [34], [38], [63]
[31], [63]
[63]
[63]

[12], [16], [29], [31], [34], [38], [63]
[16], [34], [38], [43], [63]
[16], [38], [63]
[34]
[12], [38], [63]

[12], [29], [34]
[6], [16], [29], [34], [38]
[6], [16], [29], [47]
[29], [38]
[6], [16], [29], [38]
[29], [34]
[29], [38]
[16], [29], [34], [38], [43], [47]
[6], [16], [29], [38]

Survey

♂ ♂ ♂ ♂ ♂
♂ ♂ ♂ ♂

♂ ♂ ♂
♂
♂ ♂
♂ ♂ ♂

♂ ♂

♂
♂

♂
♂ ♂
♂ ♂

♂ ♂
♂ ♂
♂ ♂
♂ ♂ ♂ ♂
♂ ♂
♂

♂ ♂ ♂
♂ ♂
♂ ♂

♂ ♂ ♂
♂ ♂ ♂ ♂ ♂
♂
♂ ♂
♂
♂ ♂ ♂ ♂

♂ ♂
♂
♂
♂

♂ ♂ ♂
♂ ♂ ♂
♂ ♂
♂
♂

♂ ♂
♂ ♂
♂
♂ ♂ ♂
♂
♂
♂ ♂
♂

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Liang, et al.

Problem Solving. The Problem Solving category includes skills
related to solving open-ended problems. Contributors described this
skill as at the crux of OSS development: “Analytical and problem-
solving are more important for building any software.” (P382) For
problem solving, being creative helps contributors to brainstorm
innovative solutions to solve the problem, while being analytical
enables contributors to select the best solution through evaluating
trade offs of one solution over another. However, a critical com-
ponent to solving a problem is moving past thinking about the
problem and its solutions by having initiative to execute solving
the problem. One contributor summarized the problem solving
process succinctly: “[Skills that] enable you to quickly assess the
situation, figure out what needs to be done and just do it.” (P83)

Contribution Types. The Contribution Types category encap-
sulates types of contributions to OSS projects. Most of these codes
were not explicitly mentioned in the literature sources but were
elicited through participants. Bug reporting, which encapsulates
identifying defects in OSS products and providing clear and concise
instructions to reproduce it, as well as bug triaging, which describes
parsing through bug reports and prioritize them for the project,
were listed as OSS skills. The most common contribution brought
up by participants was documentation, which is essential to teach
others how to use OSS or contribute to a project. Another type of
contribution was visual design, which describes competency in
designing, prototyping, or developing user interfaces or graphic art.
Participants also mentioned contributing feedback through code
reviews to help others improve as a type of OSS contribution. Fi-
nally, contributors identified translation of materials to different
languages as a skill, such as “contributing to Brazilian Portuguese
translation of repositories.” (P270) The diversity of contributions was
vital to OSS, as one participant summarized: “Most programmers
suck as [sic] documentation, so users and technical writers help fill
those gaps. Programmers suck as [sic] finding their own bugs, so users
are critical to finding and fixing bugs.” (P10)

Project-Specific Skills. The Project-Specific Skills category is
skills related to the particular OSS project. Understanding and fol-
lowing project processes, such as “submitted pull request has com-
prehensive description, with requisite automated tests” (P43). To make
useful contributions, participants said that contributors should un-
derstand and believe in the project’s purpose and its trajectory:
“[One OSS skill is to] create a pull requests [sic] that fixes a bug or
adds a feature that is in line with the package mission statement and
doesn’t break any other functionality.” (P91) This skill also includes
whether a contributor understands and is aligned with the broader
impact of OSS in the world: “[One OSS skill is to] have the capacity
to understand the support you are giving to an emerging community,
software has to be something for everyone, everything you give to a
project is something that someone needs...that can change the future
of the world.” (P31) Finally, knowing the organization of a project
helps contributors work more effectively by knowing where re-
sources are located in the repository as well as who to ask for help
based on the team members’ expertise.

Interpersonal Skills. The Interpersonal Skills category refers
to skills used to interact with others. Communication enabled
“asynchronous and distributed collaboration” (P349), and was one

of the most highly cited skills from literature and by participants.
Collaboration was also a common theme from participants. This
skill enabled groups of people with “different culture, timezone and
skills” (P284) to work with one another. Thus, skills in conflict
resolution helped facilitate teamwork in OSS teams.

Being kind was central to interpersonal skills. One participant
explained how it facilitated collaboration: “Empathy is also a two-
way street; understanding the communication patterns of others and
realizing when someone isn’t too far gone to be guided back to a
path of productive communication is important... It takes skill to
work with these people, de-escalate, and help guide them away from
toxic behavior and back towards being effective contributors.” (P441)
Additionally, participants noted a culture of giving help and asking
for help as vital to OSS. One participant explained how helping
others grows communities: “A bit of mentorship can come a long
way in growing the community, if there’s more on an OSS project
than the product/contents like a knowledge base to tap into.” (P96)

External Relations. The External Relations category describes
skills related towards working with and building relationships indi-
viduals outside the OSS team. The most frequently cited skill from
literature and respondents under this category was building rela-
tionships with stakeholders. One participant explained how these
relationships helped to understand user needs and pain points: “If
you are socially skilled, you can contribute to OSS by conducting
surveys with the OSS users to highlight pain points and helpful fea-
tures.” (P18) Other aspects of external relations included identifying
and obtaining proper licenses, marketing the project to broader
audiences, and finding funding. The latter two skills were cited as
important in promoting the OSS project’s sustainability [16].

Management. The Management category refers to skills related
to managing OSS projects, teams, communities, or tasks. Planning,
delegating, and time management helped contributors execute
tasks efficiently and supported other management-related skills. For
instance, managing a project was a popular skill which involved
forming a long-term, “macro” view of the project and efficiently
lead the team and tasks to remain on schedule. Meanwhile, par-
ticipants mentioned skills in managing the community, which
included being involved in community governance or providing
internal support to foster an engaged, welcoming community. One
participant explained how this skill was vital to successful OSS com-
munities: “The Rust community is a highly successful FOSS commu-
nity and...[that] is due to non-technical contributors who...maintain
and moderate community spaces.” (P32) Managing projects and com-
munities were frequently cited in literature and by participants.

Characteristics. The Characteristics category includes charac-
teristics or personality traits of OSS contributors. Participants noted
some characteristics which facilitated learning and self-improvement.
In particular, being open-minded helped contributors be “open to
ideas” (P35), “open to feedback” (P417) and allowed them to “change
[their] mind” (P48) when new information was presented. Being
curious, which was the most cited trait in the category, allowed
contributors to gain new knowledge and skills as well as “learn
from other’s work” (P345)—one participant even said, “self learning
is the key skill in oss.” (P370)

Understanding Skills for OSS Communities on GitHub

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Character traits which enabled contributors to be pleasant to
work with were also important. Participants mentioned that being
patient with themselves and others was important because “OSS
maintainers are doing it pro-bono [and] people may be busy with
their life” (P239). Additionally, being adaptable, self-aware, and
reliable were listed as examples of OSS skills.

Some characteristics more directly influenced contributors’ work.
For example, being adventurous helped contributors to move into
high-value areas or experiment with new ideas. Being persevering
enabled contributors to “figure things out to the best of [their] abil-
ity without asking others for help immediately” (P55), while being
diligent improved one’s commitment to and passion for the project.

4.2 Validation of the Model

To validate the skill model, we collected a large list of popular
skills related to software development and checked if the skills can
be mapped to the skill model. To collect the popular skills, we used
LinkedIn, an online platform that allows job seekers to post their
CVs and employers to post jobs. With the LinkedIn Talent Insights
tool, we collected the 100 most common skills for three talent pools:
● Software engineers. Professionals with a software engineering
job title (e.g., ‘Software Engineer”, “Senior Software Engi-
neer”, “Lead Software Engineer”).

● General software development. Professionals who listed “Soft-

ware Development” as a skill in their LinkedIn profile.

● Open source. Professionals who listed “Open Source Software”

or “Open Source Development” as skills.

We combined the three lists and removed duplicates, resulting in
a dataset of 157 popular skills that professionals use on LinkedIn.
Next, to validate the skill model, we mapped every LinkedIn
skill to codes in our skill model. We were able to map all LinkedIn
skills to our model without having to create new categories. This
suggests that the skill model is adequate to capture popular software
development skills on LinkedIn.

Most of the LinkedIn skills (49.7%) were mapped to Technologies
in Technical Skills and no LinkedIn skills were mapped to Char-
acteristics, Interpersonal Skills, Working Styles, and Project-
Specific Skills. This is not a limitation of our skill model; it rather
shows that LinkedIn is a site where professionals seem to share
technical skills more than other skills. This highlights opportunities
for showcasing skills from the other categories as we will discuss
in Section 7.4.

○ Summary: Skills in OSS comprise of a mix of hard and
soft skills. Major categories of skills are technical skills, work-
ing styles, problem solving, contribution types, project-specific
skills, interpersonal skills, external relations, management, and
characteristics.

5 IMPROVING SKILLS (RQ2)

In this section, we present the findings for the research question:

“How do OSS contributors grow and improve skills?”

Why contributors improve skills. In our survey, we asked par-
ticipants to explain what factors influence improving skills. We
enumerate a subset of these factors in Table 2. Participants most

Table 2: Reasons why participants learned new skills with
over 20 occurrences; for the full list, please refer to the sup-
plemental materials [39].

Reason

Count

Amount of resources available or difficulty to learn the skill
Benefitting themselves or professional career in the future
Importance and usefulness of the skill on the OSS community,

teammates, and world

Improving areas of weaknesses identified by the contributor

or others

Personal interest in an area or project that requires the skill
Personal goals
What is required for their current roles in OSS projects

68
56
45

42

39
28
28

Table 3: Examples of how participants considered growing
their skills with at least 40 occurrences; for the full list,
please refer to the supplemental materials [39].

Example

Count

Continued efforts to keep learning
Contributing & helping maintain a project
Actively practicing skills to grow
Reading code committed by others
Reading non-code content including blogs and documentation
Reading over code reviews as well as reporting & fixing bugs
Actively engaging with the project and community
Consistently challenging oneself
Observing experts and finding mentors across projects
Networking & forming strong connections w/ peers
Staying curious & creative by tinkering

90
86
83
54
64
63
61
47
44
44
43

commonly said they learned new skills based on their interests;
what would benefit their professional career; the needs of the OSS
community, teammates, or the world; resources available to them,
such as time and energy; and what they or others identified as
potential areas of improvement.

Participants also explained how the impact of the skill was a
factor: “I primarily do open source because it makes me feel good and
I love solving problems. I don’t think about my OSS work in terms of
skills. I think in terms of how can I make the world a better place.”
(P10) Some participants said they would do a cost-benefit analysis
of learning the skill based on the resources required to learn the
skill and its impact: “Time availability vs impact - I have almost no
time, so everything I do has to have a point, sadly.” (P69) Other factors
for learning skills included the contributor’s personal goals, their
interest in learning for self-improvement, their current role, per-
sonal circumstances, trends in the field, their working environment
(e.g., having an inclusive community), and their previous experi-
ence. Some participants reported not having a rationale to learn
skills. Additionally, some said learning skills expanded their social
network: “Growing social contacts. I already have 16000 followers on
LinkedIn and would like to grow it more.” (P35)

A few contributors mentioned they were experienced and had
little need to improve their skills. “My number of years of OSS support
(over 25), as well as my advanced age (77) are such that I probably
won’t be changing my ways very much improvement-wise.” (P156)

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Liang, et al.

How contributors improve skills. Participants described a host of
strategies used to grow their OSS skills, ranging from independently
working to collaborative tasks. We list a subset in Table 3. For in-
stance, participants mentioned learning by reading blogs, following
public OSS figures on social media, and staying up-to-date with
conferences. Another source participants referenced for being up-
dated on the latest frameworks was checking “open source hotspots”
(P29), such as GitHub’s trending topics page. In these settings, par-
ticipants described how helpful it was to learn from other people:
“Learn from other people. People that work in such environments may
be a wonderful example of how to do that kind of things. Watch how
other people work in order to design the workflow that fits you the
best.” (P16) In addition to following others on external platforms,
participants also found it extremely valuable to read code, close
issues, and merge pull requests to grow their skills.

Some participants also described taking their approaches to im-
prove a step further by tinkering and engaging with the community
where they can: “Contribute to open source projects, there are count-
less projects on GitHub in most languages/areas where there really
is something to get involved in from beginner to advance [sic].” (P5)
Participants also described that a great way to improve OSS skills
is to be consistent about practice by “contribut[ing] every day” (P24)
and challenging themselves to step outside their comfort zone and
collaborate with new people on new projects: “Gain experience in
different technical projects to up my technical expertise. Work with
different people, possibly total strangers remotely to practise good
communication skills.” (P22) By the same token, participants de-
scribed that nothing beat getting their hands dirty with making
contributions, no matter their level of expertise: “Start small, even if
you are an expert. Take some easy and maybe a little bit boring issues
at first so you can grasp the vision of the project. Then, start to work
progressively on harder tasks, ask for feedback and discuss. ” (P58)

Contributor thoughts on improving skills. When asked questions
around participants’ future plans to improve skills, the majority
of participants knew how to improve them (72%) and were taking
steps to improve (72%) the OSS-related skills they want to grow.

We asked participants if they joined projects based on the skills
that they could learn (see Table 4). Learning new skills is important:
50% chose projects based on skills that they can gain and 42% chose
projects based on project members who are strong at a particular
skill. Giving back to projects is important too, if not more: 80%
chose projects based on the skills that they can offer and 69% chose
projects that are looking for contributors with the skills they have.

○ Summary: Contributors improve skills by reading blogs,
following OSS figures on social media and conferences, learning
from peers, and contributing to OSS projects. Growing skills
is influenced by contributor interests, needs of the OSS team,
resources available, and identified areas of improvement. Most
contributors are actively taking steps to improve their skills and
join projects based on skills they have to offer.

6 SHOWING SKILLS (RQ3)

In this section, we present the findings for the research question:

“How do OSS contributors share and display skills?”

Table 4: Percentage of respondents who contribute to an OSS
project based on what they can offer vs. what they gain.

I choose to contribute to an OSS project based on. . .

the skills that I can offer to the project.
the skills that I can gain from the project.

80%
50%

I would choose to contribute to a project if I knew. . .

they were looking for contributors with a skill I have.
it had a collaborator who was strong at a particular skill.

69%
42%

Table 5: Motivations for why participants would share their
skills with others with over 20 occurrences; for the full list,
please refer to the supplemental materials [39].

Motivation

Count

Improving career prospects
Building a profile of who they are as a contributor
Promoting transparency and building trust with others
Improving reputation and self-confidence through recognition
Finding experts or being considered as an expert by others
Finding new opportunities to contribute to on OSS platforms
Becoming motivated to improve themselves or others
Helping others, especially via knowledge sharing
Expanding social network
Comparing to others and “gamifying" the skills system

58
55
49
43
42
39
30
27
25
23

Why contributors share skills. We asked participants what moti-
vates them to share skills with others. A subset of reasons are in
Table 5. Participants reported wanting to share their skills mainly
for themselves: to improve career prospects, showcase expertise,
build a profile of their contributions, improve their self-confidence
and reputation, and receive recognition. Another major factor for
sharing skills was for transparency to build trust in the OSS commu-
nity. Some contributors mentioned how transparency allowed them
to see how others were growing new skills: “It’s good to see what
do different people like, what they’re focusing on, how they’re trying
to grow, etc.” (P67) Contributors also mentioned other motivations,
such as finding experts in specific skills, facilitating collaboration,
helping others by sharing knowledge, being matched to projects,
building communities around a skill, motivating themselves and
others to improve, and competing against other contributors.

Notably, some participants also mentioned how they wanted
to have their skills be shown as proof they were qualified in their
professional career, indicating that skills, if automatically detected,
should be accurate: “[I would show my skills] if they are objective
and would provide some more weight to my actions.” (P114)

Additionally, in the survey, 51% of participants said that they
would be more motivated to improve their OSS-related skills if they
were displayed publicly on GitHub.

How contributors show their skills. We asked participants if and
how they currently display skills relevant for OSS development.
GitHub was used by 74% of participants and LinkedIn was used by
54%. On GitHub, participants displayed their skills through their
public repositories (90%), through active contributions to the OSS
projects (81%), and through the GitHub profile description (62%).
On LinkedIn, participants displayed skills in the Skills section in the

Understanding Skills for OSS Communities on GitHub

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Table 6: Examples of when participants consider it to be use-
ful to share their skills with at least 20 occurrences; for the
full list, please refer to the supplemental materials [39].

Example

Recruiting and finding jobs
Assessing projects, contributors, and pull requests
More effective collaboration
Participating or joining a community. Being a new contributor.
Finding experts and contributors for a task or project
Establish credibility

Count

107
49
44
38
34
27

profile (80%), by including projects in their profile (61%), and in the
Experience section (56%). For both GitHub and LinkedIn, several
participants mentioned including links to other online profiles.

When contributors share skills. We also asked participants about
examples of when it could be useful to share skills with others. The
most prominent examples were related to recruiting and personal
branding, i.e., showing their portfolio of work online to help re-
cruiters discover contributors: “Displaying skills next to projects and
contributions would be a great all-in-one CV for developers, designers
and other tech people” (P58) Recruitment was mentioned both in
the context of industry work but also in the context of open source,
e.g., current project members could use skill information “to decide
[to] include or not a person as a collaborator” (P44).

Other examples that were mentioned related to assessing one’s
contributions to an open source project. Skill information can be
useful for pull requests, both for the reviewer to understand the
submitter’s background and for the submitter to get their voice
heard: “To offer some legitimacy / street cred when seeking to get a PR
merged into a project” (P74) and “I think it’s helpful in having people
listen. The way having a lot of commits to certain projects can make
people care about what you have to say.” (P137)

Skill information was also considered useful for newcomers.
Knowing someone’s skills can help existing members to better
understand and support new members through mentorship. “If a
certain person is contributing to an Android project, but they have
a badge which shows they’re newcomers to the Android platform,
we could give them more detailed, step-by-step feedback or explain
some concepts using simpler terms when reviewing” (P67) Another
participant explained: “For example, if I’d want to grow my skills on
the Elixir language, and someone I know notices it, they might offer
me a pair programming or sparring session on one of their projects. I
might also do the same for people around me.” (P113)

Other examples were centered around collaboration between
collaborators, specifically for expert finding: “Facilitate the search
for people with the right skills.” (P116) Learning was mentioned as
another example. Participants suggested that skill information can
help people to find other contributors to learn from: “If a contributor
wants to learn how to contribute to open source, looking at the profile
of someone who’s made lots of contributions would be helpful” (P151)

What skills information contributors would share. Table 7 shows
the willingness of participants to share skill-related information.
The majority of participants would share their skills (76%) and
activities related to the skills (60%) with the public. For the skill

ratings, the majority would share with their collaborators (63%).
Most participants would keep ways to improve skills private and not
share with anyone (58%). It is noteworthy that 30% of participants
would be willing to share all four information types with the public.
As one participant put it: “If [skills] are based on real, objective data,
I don’t see why hiding them. Unless that involves classified work or
things that can get you in prison or worse troubles.” (P105)

How maintainers assess contributor skills. Amongst maintainers,
59% of participants used GitHub to evaluate what skills a potential
contributor has. The main information source was public GitHub
activity (97%). They also looked at public repositories owned by
the contributor (83%), contributions of the contributor on the main-
tainer’s projects (79%) and other projects (64%), interactions with
the contributor on the maintainer’s projects (60%) and other projects
(44%), personal websites (54%), and social media activity (34%).

Feedback on sharing skills. Some participants expressed strong
concern for sharing skills on OSS platforms, citing that it could
create a gamified or competitive environment that would not show a
holistic view of contributors’ abilities. One participant warned that
it would make “GitHub a replacement for LinkedIn.” (P25) Another
expressed distaste towards sharing skills if skills were automatically
detected: “I absolutely hate the idea that people’s behaviour and
priorities are going to be influenced by artificial gamification metrics,
rather than trying to be doing the best they can with reasonable
flexibility for the projects we should all care about, and helpful and
kind to maintainers.” (P65) However, others felt that automatic
detection of skills could be beneficial: “It’s a small psychological
reward for the effort I put in.” (P329) and “I visit GitHub multiple
times a day, so GitHub should just infer [skills] from work and show
callouts every week/something for sharing confirmation.” (P34)

○ Summary: Contributors show their skills and maintainers as-
sess potential contributors on GitHub. Contributors share skills
to improve career prospects and showcase expertise. Contribu-
tors find skills useful for recruitment, assessing contributions,
orienting newcomers to the community, and finding experts.

7 DISCUSSION

Our findings indicate that skills should be a first-class citizen
in software engineering and OSS development. Skills could help
improve many existing tools and experiences (e.g., pull requests) or
create new experiences (e.g., mentorship). However, this requires
careful thought on how to incorporate skills in platforms and tools.
Skills could also enrich empirical studies, for example, for project
success and team composition. Below, we synthesize our findings
with prior literature and discuss implications of this work.

7.1 Detecting Skills

Our skills model (see Section 4.1) indicates that both soft and
hard skills are crucial to OSS, which is corroborated from previous
work [66]. Prior work has automatically detected expertise and
skills from online sources, such as GitHub [7, 28, 30, 48, 50, 51, 53,
56, 69], but largely focuses on software engineering-related skills.

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Liang, et al.

Table 7: Willingness to share skill-related information on
GitHub with the public and with collaborators. Bold values
indicates the majority response.

Share with

Type of Information

Public Collaborators

Skill name

76%

85%

Keep
Private
15%

Activities related to the skill

60%

82%

18%

Skill rating

47%

63%

37%

Ways to improve the skill

30%

42%

58%

An open problem remains: how do we automatically mine soft
and hard skills from online data? Answering this question is a
prime research direction for mining software repositories. Prior
work has investigated this issue [40], but more research is needed.
From our qualitative analysis, some participants viewed detected
skills as a source of truth to assign credibility to their actions. Since
GitHub users use profiles to judge individuals and their contribu-
tions [21, 44], this could impact GitHub activity, such as whose
contributions are accepted. Thus, methods to detect skills should
be accurate, objective, and grounded in developer activity traces.
Research in this area should carefully consider holistic measures
of skill detection to be inclusive of newcomers. For example, being
diligent may be shown through continuous contributions made
over a long duration, a high volume of contributions, or responsive-
ness to assigned issues.

7.2 Skills Development

Our study indicates that contributors are motivated to learn be-
cause a majority of participants are trying to improve their skills in
the next 12 months. In software engineering, many individuals use
massive open online courses (MOOCs) to learn new skills. MOOCs
attract learners who do not aspire to earn formal degrees, but rather
gain knowledge that will help them in their roles [15].

OSS platforms may help support this learning since study partic-
ipants indicated that they learned skills to improve them for OSS
and professional settings. This provides an opportunity to extend
learning to include soft skills, as opposed to only technical knowl-
edge. This could be increasingly important with the introduction of
neural models that generate code with high quality, such as GitHub
Copilot [23]. Future work could detect skills being learned and rec-
ommend supplemental resources to help contributors to learn those
skills. Because participants reported continuous practice being cru-
cial to learning skills, future tools could also create individualized
curriculum which set “bite-sized" goals every day to encourage con-
tributors to learn new skills. Additionally, revealing global trends
of skills across many OSS projects may help contributors identify
skills to improve on based on their potential utility.

Project Matching. Our findings imply that skills are important for
matching contributor to projects. OSS contributors are motivated to
learn skills needed by projects and are likely to contribute to a new
OSS project based on whether the project needs their skill set. Prior
work supports this as well—contributors whose motivation was
associated with career advancement was correlated with higher
levels of satisfaction in participating in a project [67]. Additionally,
common barriers for OSS newcomers are a lack of hard skills, such
as software engineering background and domain expertise, as well
as soft skills, such as communication, patience, and proactivity [60].
Skills could be useful data to match contributors with specific skill
sets to projects that require them, potentially reducing barriers to
newcomers’ first contributions and increasing satisfaction.

7.3 GitHub Profiles

Incorporating skills into GitHub profiles could provide an ad-
ditional signal to assess OSS contributors and enable profiles to
include more dynamic sources of information. Previous work has
shown that OSS contributors analyze GitHub profiles to assess con-
tributors and their potential contributions [21, 44]. In our study,
some participants reported largely being motivated to share skills
to market themselves and their expertise, while others wanted addi-
tional information to evaluate potential contributors or find experts
with specific skills. One could consider revealing some informa-
tion on skills that contributors are currently learning or improving
on for transparency, to be inclusive of newcomers, and showing
a contributor’s trajectory. Allowing contributors to display skill
dimensions that they want to grow (e.g., in a spider graph on their
GitHub profile) is a possible strategy to indicate what motivates
contributors (e.g., a desire to improve their working styles).

Another potential application of skills in GitHub profiles could
be GitHub’s achievement badges [22], which currently only rec-
ognizes contributions to specific repositories or participation in
GitHub programs. There is an opportunity for OSS platforms such
as GitHub to extend achievement badges to include OSS skills, using
the aforementioned mining techniques (see Section 7.1) to surface
them. Similarly, GitHub could develop a certification of skills that
could be made directly available in a user’s profile.

However, our findings also indicate that incorporating skills into
GitHub profiles requires careful design considerations. Techniques
to gamify skills, such as including skill level, could create unhealthy
competition and add additional barriers to entry for newcomers.

Understanding Skills for OSS Communities on GitHub

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Best Practices
¸ Thoroughly validate that the methods to detect skills are

accurate and are grounded in contributor activity.

¸ Design holistic measures of skills, such as thinking of the

many ways that a skill may manifest.

¸ Consider showing what skills a contributor is working on.
¸ Be careful how skills are gamified.
¸ Give people control over which skills are shown publicly and

to collaborators.

¸ Reveal what skills are useful or needed in the OSS community.

Figure 3: Best practices for skills in OSS.

One way to address this concern is by only using gamification for a
contributor’s self-growth (see Section 7.2). Also, consider the access
of skills-related information—based on our results, keep the skill
name, activities related to the skill, and the rating accessible to only
collaborators and ways to improve the skill private. Finally, giving
users control over what skills are seen, such as an ability to add or
remove skills, may also help reduce this concern.

7.4 Collaboration

Peer feedback is delivered through code reviews in OSS. Code
reviews provide technical feedback and assist contributors in peer
impression formation, such as understanding each others’ expertise
and quality of contributions [9], as well as knowledge sharing [10].
However, tools that support an individual’s OSS skills growth do
not exist. These could supplement the feedback provided during
code reviews to facilitate expertise-finding and promote contributor
growth and high-quality contributions. For example, future work
could design tools for OSS contributors to provide feedback on their
collaborators’ skills, including strengths and areas of improvement.
Tools that provide feedback on skills for teams exist, such as OnLoop
[41], but do not tailor their experiences for OSS contexts. Such
tools could be useful for maintainers or mentors to help their team
grow their skills. Our work lays the foundation for such a tool by
providing a vocabulary to discuss OSS skills.

Mentorship. Many challenges exist within OSS mentorship. New-
comers struggle with finding mentors [60] and defining profes-
sional goals [5]. Mentors may face language barriers, lack inter-
personal skills, or struggle to deliver constructive feedback based
on the mentee’s background [5, 59]. Using skills to match mentors
and mentees could increase alignment of mentors’ skill sets with
mentees. Surfacing mentees’ skills could also help mentors craft
appropriate feedback, while enabling mentees to identify areas
of improvement and set personal goals. Following the design of
GitHub Discussions Insights Dashboard [24], which features new-
comers’ and daily contributors’ discussion activity, as well as a
movement to recognize all OSS contributions [13], such tools could
highlight mentees’ valuable non-code contributions.

8 THREATS TO VALIDITY

Below, we discuss the threats to validity of our study.

Internal validity. Survey participants may misinterpret wording
or not respond in a way the question intends. To reduce this threat,
we had an external researcher review the survey to clarify wording.
Additionally, the structure of the survey may have caused unin-
tentional priming in study participants, especially for what skills
in OSS may look like. To address this, we put the question that was
used to validate the skills in OSS model in the beginning of the
survey before any examples of skills were introduced.

External validity. How generalizable single-case empirical stud-
ies, such as this study, to other populations is unknown. However,
these studies contribute to scientific advancement [19]. Our survey
includes participants from many OSS roles, genders, ethnicities, and
geographic regions, which may improve the generalizability of our
findings. Additionally, our sampling approach was designed to cap-
ture a wide range of contributions, as it included stratified samples
across different OSS project types (OSS, OSS4SG) and contribution
types (commits, pull requests, issues, and comments).

Surveys by nature also often suffer from selection bias, and ours
is no different. In this study, non-response bias may have occurred
because our survey was written in English, which may cause less
representation in regions where English is not the primary language.
Self-selection bias may also have occurred. Because the survey was
marketed as a “Survey on Skills in OSS”, participants that felt more
confident about their skills and contributions in OSS may be more
likely to participate in our study. To reduce the effects of the selec-
tion bias, we made the survey as short as possible, were transparent
about the survey’s length, provided incentives to participate in our
study, and kept survey responses anonymous.

Construct validity. Evaluating our model using only LinkedIn
skills may not be completely representative of skills that practi-
tioners find important in practice. To address this, we will run an
additional evaluation of our OSS skills model with OSS experts.

9 CONCLUSION

Skills remain fundamental to the success of OSS development.
The diversity of roles and contributions in OSS requires equally
diverse skill sets which span both soft and hard skills. In this paper,
we investigated the skills that support the development of OSS. We
contributed a model for skills in OSS with 45 skills in 9 categories,
survey results on how contributors grow their skills and how they
would like their skills to be presented, and design implications and
best practices on incorporating skills into OSS tools and platforms.
Our results indicate many future directions for skills in OSS.
Contributors may use the results from this study to drive the devel-
opment of their own skills, while researchers may extend this work
to build new tools and experiences or promote further study of skills
in OSS. To facilitate replication of this work, the survey instrument
and codebook are available as supplemental material [39].

ACKNOWLEDGMENTS

We thank our survey participants for their incredible insight
on their OSS skills. We also thank Christian Bird, Mala Kumar,
Victor Grau Serrat, and Lucy Harris for their feedback. Jenny T.
Liang conducted this work for an internship at Microsoft Research’s
Software Analysis and Intelligence in Engineering Systems Group.

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

Liang, et al.

REFERENCES
[1] Faheem Ahmed, Luiz Fernando Capretz, and Piers Campbell. 2012. Evaluating
the demand for soft skills in software development. IT Professional 14 (2012),
44–49. https://doi.org/10.1109/MITP.2012.7

[2] Shaosong Ou Alexander Hars. 2002. Working for free? Motivations for partici-
pating in open-source projects. International Journal of Electronic Commerce 6, 3
(2002), 25–39. https://doi.org/10.1080/10864415.2002.11044241

[3] Alberto Bacchelli, Luca Ponzanelli, and Michele Lanza. 2012. Harnessing Stack
Overflow for the IDE. In IEEE International Workshop on Recommendation Systems
for Software Engineering (RSSE). 26–30. https://doi.org/10.5555/2666719.2666725
[4] Jono Bacon. 2012. The art of community: Building the new age of participation.

O’Reilly Media, Inc.

[5] Sogol Balali, Igor Steinmacher, Umayal Annamalai, Anita Sarma, and Marco Au-
relio Gerosa. 2018. Newcomers’ barriers... is that all? An analysis of mentors’ and
newcomers’ barriers in OSS projects. In ACM Conference on Computer Supported
Cooperative Work. 679–714. https://doi.org/10.1007/s10606-018-9310-8

[6] Sebastian Baltes and Stephan Diehl. 2018. Towards a theory of software de-
velopment expertise. In ACM Joint Meeting on European Software Engineering
Conference and Symposium on the Foundations of Software Engineering. 187–200.
https://doi.org/10.1145/3236024.3236061

[7] Gunnar R Bergersen, Dag IK Sjøberg, and Tore Dybå. 2014. Construction and
validation of an instrument for measuring programming skill. IEEE Transactions
on Software Engineering 40 (2014), 1163–1184. https://doi.org/10.1109/TSE.2014.
2348997

[8] Jürgen Bitzer, Wolfram Schrettl, and Philipp JH Schröder. 2007. Intrinsic motiva-
tion in open source software development. Journal of Comparative Economics 35,
1 (2007), 160–169. https://doi.org/10.1016/j.jce.2006.10.001

[9] Amiangshu Bosu and Jeffrey C Carver. 2013. Impact of peer code review on
peer impression formation: A survey. In ACM/IEEE International Symposium on
Empirical Software Engineering and Measurement. 133–142. https://doi.org/10.
1109/ESEM.2013.23

[10] Amiangshu Bosu, Jeffrey C Carver, Christian Bird, Jonathan Orbeck, and Christo-
pher Chockley. 2016. Process aspects and social dynamics of contemporary
code review: Insights from open source development and industrial practice
at Microsoft.
IEEE Transactions on Software Engineering 43 (2016), 56–75.
https://doi.org/10.1109/TSE.2017.2768368

[11] VM Vicky Brasseur. 2018. Forge your future with open source: Build your skills.

Build your network. Build the future of technology. Pragmatic Bookshelf.
[12] Jailton Coelho, Marco Tulio Valente, Luciana L Silva, and André Hora. 2018. Why
we engage in FLOSS: Answers from core developers. In International Workshop
on Cooperative and Human Aspects of Software Engineering (CHASE). 114–121.
https://doi.org/10.1145/3195836.3195848

[13] All Contributors. 2022. All Contributors: Recognize all contributors. Retrieved

March 11, 2022 from https://allcontributors.org/.

[14] Laura Dabbish, Colleen Stuart, Jason Tsay, and Jim Herbsleb. 2012. Social coding
in GitHub: Transparency and collaboration in an open software repository. In
ACM Conference on Computer Supported Cooperative Work. 1277–1286. https:
//doi.org/10.1145/2145204.2145396

[15] Balakrishnan Dasarathy, Kevin Sullivan, Douglas C Schmidt, Douglas H Fisher,
and Adam Porter. 2014. The past, present, and future of MOOCs and their
relevance to software engineering. In Future of Software Engineering Proceedings.
212–224. https://doi.org/10.1145/2593882.2593897

[16] Edson Dias, Paulo Meirelles, Fernando Castor, Igor Steinmacher, Igor Wiese, and
Gustavo Pinto. 2021. What makes a great maintainer of open source projects?.
In IEEE/ACM International Conference on Software Engineering (ICSE). 982–994.
https://doi.org/10.1109/ICSE43902.2021.00093

[17] FDA.gov. 2016. Collection of race and ethnicity data in clinical trials: Guidance
for industry and Food and Drug Administration staff. Retrieved March 11, 2022
from https://www.fda.gov/media/75453/download#page=13.

[18] Raluca Florea and Viktoria Stray. 2018. Software tester, we want to hire you!
An analysis of the demand for soft skills. In Springer International Conference on
Agile Software Development. 54–67. https://doi.org/10.1007/978-3-319-91602-6_4
[19] Bent Flyvbjerg. 2006. Five misunderstandings about case-study research. Quali-
tative inquiry 12 (2006), 219–245. https://doi.org/10.1177/1077800405284363
[20] Karl Fogel. 2005. Producing open source software: How to run a successful free

software project. O’Reilly Media, Inc.

[21] Denae Ford, Mahnaz Behroozi, Alexander Serebrenik, and Chris Parnin. 2019.
Beyond the code itself: How programmers really look at pull requests. In Interna-
tional Conference on Software Engineering: Software Engineering in Society. 51–60.
https://doi.org/10.1109/ICSE-SEIS.2019.00014

[22] GitHub. 2021. Personalizing your profile: Displaying badges on your profile.
https://docs.github.com/en/github/setting-up-and-managing-your-github-
profile/customizing-your-profile/personalizing-your-profile#displaying-
badges-on-your-profile.

[23] GitHub. 2022. GitHub Copilot - Your AI pair programmer. Retrieved March 11,

2022 from https://copilot.github.com/.

[24] GitHub. 2022. Viewing insights for your discussions. Retrieved March 11, 2022
from https://docs.github.com/en/discussions/managing-discussions-for-your-
community/viewing-insights-for-your-discussions.

[25] Georgios Gousios and Diomidis Spinellis. 2012. GHTorrent: GitHub’s data from
a firehose. In IEEE Working Conference on Mining Software Repositories. 12–21.
https://doi.org/10.1109/MSR.2012.6224294

[26] Georgios Gousios, Margaret-Anne Storey, and Alberto Bacchelli. 2016. Work
practices and challenges in pull-based development: the contributor’s perspective.
In IEEE/ACM International Conference on Software Engineering (ICSE). 285–296.
https://doi.org/10.1145/2884781.2884826.

[27] Georgios Gousios, Andy Zaidman, Margaret-Anne Storey, and Arie Van Deursen.
2015. Work practices and challenges in pull-based development: The integrator’s
perspective. In IEEE/ACM International Conference on Software Engineering. 358–
368. https://doi.org/10.1109/ICSE.2015.55

[28] Gillian J Greene and Bernd Fischer. 2016. CVExplorer: Identifying candidate
developers by mining and exploring their open source contributions. In IEEE/ACM
International Conference on Automated Software Engineering. 804–809. https:
//doi.org/10.1145/2970276.2970285

[29] Wouter Groeneveld, Hans Jacobs, Joost Vennekens, and Kris Aerts. 2020. Non-
cognitive abilities of exceptional software engineers: a Delphi study. In ACM
Technical Symposium on Computer Science Education (SIGCSE). 1096–1102. https:
//doi.org/10.1145/3328778.3366811

[30] Claudia Hauff and Georgios Gousios. 2015. Matching GitHub developer profiles
to job advertisements. In IEEE/ACM Conference on Mining Software Repositories.
362–366. https://doi.org/10.1109/MSR.2015.41

[31] Rashina Hoda, James Noble, and Stuart Marshall. 2012. Self-organizing roles on
Agile software development teams. IEEE Transactions on Software Engineering 39
(2012), 422–444. https://doi.org/10.1109/TSE.2012.30

[32] Yu Huang, Denae Ford, and Thomas Zimmermann. 2021. Leaving my fingerprints:
Motivations and challenges of contributing to OSS for social good. In IEEE/ACM
International Conference on Software Engineering. 1020–1032. https://doi.org/10.
1109/ICSE43902.2021.00096

[33] Brittany Johnson, Rahul Pandita, Justin Smith, Denae Ford, Sarah Elder, Emerson
Murphy-Hill, Sarah Heckman, and Caitlin Sadowski. 2016. A cross-tool com-
munication study on program analysis tool notifications. In ACM International
Symposium on Foundations of Software Engineering. Association for Computing
Machinery, 73–84. https://doi.org/10.1145/2950290.2950304

[34] Eirini Kalliamvakou, Christian Bird, Thomas Zimmermann, Andrew Begel, Robert
DeLine, and Daniel M German. 2017. What makes a great manager of software
engineers? IEEE Transactions on Software Engineering 45 (2017), 87–106.
[35] Terhi Kilamo, Imed Hammouda, and Mohamed Amine Chatti. 2012. Teaching
collaborative software development: A case study. In 2012 34th International
Conference on Software Engineering (ICSE). IEEE, 1165–1174. https://doi.org/10.
1109/ICSE.2012.6227026

[36] Barbara A. Kitchenham and Shari Lawrence Pfleeger. 2008. Personal Opinion
Surveys. In Guide to Advanced Empirical Software Engineering, Forrest Shull,
Janice Singer, and Dag I. K. Sjøberg (Eds.). Springer, 63–92. https://doi.org/10.
1007/978-1-84800-044-5_3

[37] Paul Luo Li, Amy J Ko, and Andrew Begel. 2020. What distinguishes great
software engineers? Empirical Software Engineering 25 (2020), 322–352. https:
//doi.org/10.1007/s10664-019-09773-y

[38] Paul Luo Li, Amy J Ko, and Jiamin Zhu. 2015. What makes a great software
engineer?. In IEEE/ACM International Conference on Software Engineering, Vol. 1.
700–710. https://doi.org/10.1109/ICSE.2015.335

[39] Jenny T. Liang, Thomas Zimmermann, and Denae Ford. 2022. Supplemental
Materials to “Understanding Skills for OSS Communities on GitHub”. https:
//doi.org/10.6084/m9.figshare.20929087

[40] Jenny T Liang, Thomas Zimmermann, and Denae Ford. 2022. Towards mining OSS
skills from GitHub activity. In International Conference on Software Engineering -
New Ideas and Emerging Results (ICSE-NIER). 106–110. https://doi.org/10.1145/
3510455.3512772

[41] OnLoop Pte Ltd. 2022. OnLoop. Retrieved March 11, 2022 from https://onloop.

com.

[42] Björn Lundell, Anna Persson, and Brian Lings. 2007. Learning through practical
involvement in the OSS ecosystem: Experiences from a masters assignment. In
IFIP International Conference on Open Source Systems. Springer, 289–294. https:
//doi.org/10.1007/978-0-387-72486-7_30

[43] Jennifer Marlow and Laura Dabbish. 2013. Activity traces and signals in software
developer recruitment and hiring. In ACM Conference on Computer-Supported
Cooperative Work & Social Computing. 145–156. https://doi.org/10.1145/2441776.
2441794

[44] Jennifer Marlow, Laura Dabbish, and Jim Herbsleb. 2013. Impression formation
in online peer production: Activity traces and personal profiles in GitHub. In
ACM Conference on Computer-Supported Cooperative Work & Social Computing.
117–128. https://doi.org/10.1145/2441776.2441792

[45] Mary L McHugh. 2012. Interrater reliability: The kappa statistic. Biochemia

medica 22 (2012), 276–282.

Understanding Skills for OSS Communities on GitHub

ESEC/FSE ’22, November 14–18, 2022, Singapore, Singapore

[46] David Megías, Jordi Serra, and Rafael Macau. 2005. An international master pro-
gramme in free software in the European higher education space. In International
Conference on Open Source Systems. 349–352.

[47] Christopher Mendez, Hema Susmita Padala, Zoe Steine-Hanson, Claudia Hilder-
brand, Amber Horvath, Charles Hill, Logan Simpson, Nupoor Patil, Anita Sarma,
and Margaret Burnett. 2018. Open source barriers to entry, revisited: A sociotech-
nical perspective. In International Conference on Software Engineering (ICSE).
1004–1015. https://doi.org/10.1145/3180155.3180241

[48] Audris Mockus and James D. Herbsleb. 2002. Expertise Browser: A quantita-
tive approach to identifying expertise. In International Conference on Software
Engineering. 503–512. https://doi.org/10.1145/581339.581401

[49] João Eduardo Montandon, Cristiano Politowski, Luciana Lourdes Silva,
Marco Tulio Valente, Fabio Petrillo, and Yann-Gaël Guéhéneuc. 2021. What
skills do IT companies look for in new developers? A study with Stack Over-
flow Jobs.
https:
//doi.org/10.1016/j.infsof.2020.106429

Information and Software Technology 129 (2021), 106429.

[50] Joao Eduardo Montandon, Luciana Lourdes Silva, and Marco Tulio Valente. 2019.
Identifying experts in software libraries and frameworks among GitHub users.
In IEEE/ACM International Conference on Mining Software Repositories. 276–287.
https://doi.org/10.1109/MSR.2019.00054

[51] João Eduardo Montandon, Marco Tulio Valente, and Luciana L Silva. 2021. Mining
the technical roles of GitHub users. Information and Software Technology 131
(2021), 106485. https://doi.org/10.1016/j.infsof.2020.106485

[52] Sergio Raúl Montes León, Gregorio Robles, Jesús M González-Barahona, and
Luis E Sánchez C. 2014. Considerations regarding the creation of a post-graduate
master’s degree in free software. In International Conference on Open Source
Systems. 123–132. https://doi.org/10.1007/978-3-642-55128-4_17

[53] Maria Papoutsoglou, Apostolos Ampatzoglou, Nikolaos Mittas, and Lefteris
Angelis. 2019. Extracting knowledge from online sources for software engi-
neering labor market: A mapping study. IEEE Access 7 (2019), 157595–157613.
https://doi.org/10.1109/ACCESS.2019.2949905

[54] Johnny Saldaña. 2009. The coding manual for qualitative researchers. SAGE.
[55] Morgan Klaus Scheuerman, Katta Spiel, Oliver L Haimson, Foad Hamidi, and
Stacy M Branham. 2020. HCI guidelines for gender equity and inclusivity. In
UMBC Faculty Collection.

[56] Janet Siegmund, Christian Kästner, Jörg Liebig, Sven Apel, and Stefan Hanenberg.
2014. Measuring and modeling programming experience. Empirical Software
Engineering 19, 5 (2014), 1299–1334. https://doi.org/10.1007/s10664-013-9286-4
[57] Edward Smith, Robert Loftin, Emerson Murphy-Hill, Christian Bird, and Thomas
Zimmermann. 2013.
Improving developer participation rates in surveys. In
2013 6th International Workshop on Cooperative and Human Aspects of Software
Engineering (CHASE). IEEE, 89–92. https://doi.org/10.1109/CHASE.2013.6614738
[58] Sulayman K Sowe and Ioannis G Stamelos. 2007. Involving software engineering
students in open source software projects: Experiences from a pilot study. Journal
of Information Systems Education 18, 4 (2007), 425.

[59] Igor Steinmacher, Sogol Balali, Bianca Trinkenreich, Mariam Guizani, Daniel
Izquierdo-Cortazar, Griselda G Cuevas Zambrano, Marco Aurelio Gerosa, and
Anita Sarma. 2021. Being a mentor in open source projects. Journal of Internet
Services and Applications 12 (2021), 1–33. https://doi.org/10.1186/s13174-021-
00140-z

[60] Igor Steinmacher, Tayana Conte, Marco Aurélio Gerosa, and David Redmiles.
2015. Social barriers faced by newcomers placing their first contribution in open
source software projects. In ACM Conference on Computer-Supported Cooperative
Work & Social Computing. 1379–1392. https://doi.org/10.1145/2675133.2675215
[61] Igor Steinmacher, Gustavo Pinto, Igor Scaliante Wiese, and Marco Aurélio Gerosa.
2018. Almost there: A study on quasi-contributors in open-source software
projects. In IEEE/ACM International Conference on Software Engineering. 256–266.
https://doi.org/10.1145/3180155.3180208

[62] Igor Steinmacher, Marco Aurelio Graciotto Silva, Marco Aurelio Gerosa, and
David F Redmiles. 2015. A systematic literature review on the barriers faced by
newcomers to open source software projects. Information and Software Technology
59 (2015), 67–85. https://doi.org/10.1016/j.infsof.2014.11.001

[63] Bianca Trinkenreich, Mariam Guizani, Igor Wiese, Anita Sarma, and Igor Stein-
macher. 2020. Hidden figures: Roles and pathways of successful OSS contributors.
ACM on Human-Computer Interaction (2020). https://doi.org/10.1145/3415251

[64] Bianca Trinkenreich, Mariam Guizani, Igor Scaliante Wiese, Tayana Conte, Marco
Gerosa, Anita Sarma, and Igor Steinmacher. 2021. Pots of gold at the end of the
rainbow: What is success for open source contributors. IEEE Transactions on
Software Engineering (2021). https://doi.org/10.1109/TSE.2021.3108032

[65] Jason Tsay, Laura Dabbish, and James Herbsleb. 2014. Influence of social and
technical factors for evaluating contribution in GitHub. In IEEE/ACM International
Conference on Software Engineering. 356–366. https://doi.org/10.1145/2568225.
2568315

[66] Sri Lakshmi Vadlamani and Olga Baysal. 2020. Studying software developer
expertise and contributions in Stack Overflow and GitHub. In IEEE International
Conference on Software Maintenance and Evolution. 312–323. https://doi.org/10.
1109/ICSME46990.2020.00038

[67] Chorng-Guang Wu, James H Gerlach, and Clifford E Young. 2007. An empirical
analysis of open source software developers’ motivations and continuance inten-
tions. Information & Management (2007), 253–262. https://doi.org/10.1016/j.im.
2006.12.006

[68] Xin Xia, Zhiyuan Wan, Pavneet Singh Kochhar, and David Lo. 2019. How prac-
titioners perceive coding proficiency. In IEEE/ACM International Conference on
Software Engineering. 924–935. https://doi.org/10.1109/ICSE.2019.00098
[69] Minghui Zhou and Audris Mockus. 2010. Developer Fluency: Achieving true
mastery in software projects. In ACM Joint Meeting on European Software Engi-
neering Conference and Symposium on the Foundations of Software Engineering.
137–146. https://doi.org/10.1145/1882291.1882313

