2
2
0
2

y
a
M
8
1

]

M
Q
.
o
i
b
-
q
[

1
v
7
5
7
9
0
.
5
0
2
2
:
v
i
X
r
a

Quantifying Population Movement Using a Novel
Implementation of Digital Image Correlation in the
ICvectorﬁelds package

Devin W. Goodsman

May 23, 2022

Abstract

Movements in imagery captivate the human eye and imagination. They are also of
interest in variety of scientiﬁc disciplines that study spatiotemporal dynamics. Popular
methods for quantifying movement in imagery include particle image velocimetry and
digital image correlation. Both methods are widely applied in engineering and materials
science, but less applied in other disciplines. This paper describes an implementation of a
basic digital image correlation algorithm in R [R Core Team, 2021] as well as an extension
designed to quantify persistent movement velocities in sequences of three or more images.
Algorithms are applied in the novel arena of landscape ecology to quantify population
movement and to produce vector ﬁelds for easy visualization of complex movement
patterns across space. Functions to facilitate analyses are available in ICvectorﬁelds
[Goodsman, 2021]. These methods and functions are likely to produce novel insights in
theoretical and landscape ecology because they facilitate visualization and comparison
of theoretical and observed data in complex and heterogeneous environments.

Introduction

Living organisms move through space in complex ways that have inspired many branches
of spatial pattern analysis from Turing instabilities [Alonso et al., 2002, Ruan, 1998],
to complex systems analysis of the emergent properties of individual-level behaviours
when organisms live in groups [Parrish and Edelstein-Keshet, 1999, Johnson, 2009].
Moreover, in mathematical ecology there is a long history of deriving analytic expressions
for traveling wave speeds from mathematical models of biological systems based on
partial diﬀerential equations [Kolmogorov, 1937, Skellam, 1951] and integrodiﬀerence
equations [Kot et al., 1996]. In addition to standard traveling waves and wave-trains,
simulation studies have revealed more unusual patterns of population level movement
can arise from the way organism interact and move on the landscape [Hassell et al.,
1994]. Spiral waves are one example of surprising spatiotemporal dynamics that can
arise in biological systems [Hassell et al., 1991].

1

 
 
 
 
 
 
Travelling waves and spiral waves emerge from mathematical models of population
expansion, which are often based on partial diﬀerential equations and integrodiﬀerence
equations. These types of models, which represent the movement patterns of populations
of organisms, are sometimes classiﬁed as Eulerian approaches to distinguish them from
Lagrangian approaches that focus on the trajectories of individuals. The majority of R
packages that quantify organismal movement, however, are Lagrangian as they pertain
to the analysis of the tracks or trajectories of individual animals with tracking collars or
tracking devices. Integrated step selection models [Avgar et al., 2016], such as those in
the amt package [Signer et al., 2019], which incorporate the impact of spatially variable
habitat or environmental variables on movement of individuals modeled using a discrete
time and discrete space framework, are an example of a Lagrangian approach when ﬁtted
to movement data from individuals. Because my focus in this work is on population-level
movements that are evident in imagery, I will forego further discussion of Lagrangian
models and instead refer the interested reader to a review of R packages for modeling
animal movement [Joo et al., 2020]. At the time of writing, R packages that focus on
the Eulerian approach include IDE [Zammit-Mangion, 2019], deSolve [Soetaert et al.,
2010], and ReacTran [Soetaert and Meysman, 2012]. These packages are designed pri-
marily to obtain numerical solutions to Eulerian models, analyze their dynamics, and ﬁt
them to data. Recently, movement modeling based on stochastic diﬀerential equations,
stochastic partial diﬀerential equations [Krainski et al., 2018], and other stochastic pro-
cess models [Buderman et al., 2016] has proliferated. Computationally eﬃcient Bayesian
statistical approaches are often required to ﬁt these stochastic models to data due to the
ubiquity of noise in spatiotemporal time series in combination with nonlinear dynamical
processes [Krainski et al., 2018].

In contrast to the R packages and approaches I have cited above, this work is focused
on the description of an empirical method for quantifying spatially heterogeneous rates
of movement in sequences of images without ﬁtting a model–although I do approach the
quantiﬁcation problem from an Eulerian perspective. Empirically quantifying spread
rates without imposing a speciﬁc mathematical model allows the user to abandon many
of the assumptions implicit in mathematical modeling of population expansion. For ex-
ample, tractable mathematical models of consumer-resource systems that generate trav-
eling waves, wave-trains, and spiral waves, often rely on assumptions of a homogeneous
spatial environment with respect to resources or one in which there are no discontinu-
ities in resources. In contrast, many organisms spread in environments that are spatially
heterogeneous [Urban et al., 2008], and in environments subject to persistent directional
ﬂows that impact organism movement [Hoﬀman et al., 2006]. The ramiﬁcations of this
claim are more easily understood using a meteorological analogy. In meteorology, vector
ﬁelds are frequently used to illustrate the impacts of high and low pressure systems on
wind speed and direction, and thus on the movement of weather systems. In such me-
teorological systems, wind speed and direction are complicated functions of topography
and complex atmospheric dynamics. As a result, vector ﬁelds representing movement in
such systems are often variable at the regional scale, with winds ﬂowing in one direction
on one side of a map and possibly in an opposing direction on the other side. In ecology,

2

populations of organisms are like the weather systems in that their movement on the
landscape is what is of primary interest to researchers; variable wind causes spatially
variable movement of weather systems similarly to how persistent directional ﬂuid ﬂows,
including wind, in an organism’s environment impact dispersal, and therefore population
movement.

At the time of writing, the only tool in R [R Core Team, 2021] designed to em-
pirically estimate spreading speed or the speed of wave-trains in populations without
ﬁtting a mathematical model is implemented in the ncf R package [Bjornstad, 2020].
The ncf package relies on lagged non-parametric cross-correlation functions to estimate
spreading speed of traveling waves [Bjørnstad and Falck, 2001]. To do so, it takes two
spatiotemporal data sets that diﬀer from one another only in that one is a time-lagged
version of the other, and projects their planar coordinates onto lines of varying angles
that can be speciﬁed using function arguments. After projection onto a line, cross-
correlation is estimated using a spline-correlogram approach [Bjørnstad and Falck, 2001]
and the location of maximum cross-correlation gives an estimate of displacement along
the direction of the projection line. This approach was used to estimate the velocity
of traveling wave-trains in the larch budmoth system in the European Alps [Bjørnstad
et al., 2002].

Projecting population data from a domain with two spatial coordinates onto a domain
that has only one spatial coordinate and then using a correlogram approach precludes
quantiﬁcation of more complicated patterns of movement on the landscape. For example
if two spatially separated populations are moving towards one another at the same speed,
such an approach will yield enigmatic correlograms. Similarly, if several populations
move radially around a central fulcrum, the correlogram will be diﬃcult to translate to
an estimate of directional movement.

In this paper I present an approach for estimating vector-ﬁelds in systems with
spatially variable movement that is inspired by a technique from engineering and mate-
rials science called Digital Image Correlation or DIC [Anuta, 1970, Sutton et al., 2009].
Among other things, Digital Image Correlation is used to estimate displacement based
on photographs of a planar material before, during, and after a force has been applied to
warp its surface [Sutton et al., 2009]. A typical DIC approach as well as the extensions
described in this paper are implemented in the ICvectorﬁelds package [Goodsman,
2021], in which the IC is the abbreviation for Image Correlation. I demonstrate these
approaches using the ICvectorﬁeds package to analyze a simulated data set as well as
the larch budmoth data set provided with the ncf R package [Bjornstad, 2020, Bjørnstad
et al., 2002].

Mathematical and Computational Details

Here I provide mathematical and computational details of the algorithms used in the
ICvectorﬁelds R package starting with a standard digital image correlation approach,
and following with extensions to estimate persistent movement and to account for spa-
tial variability in persistent movement. The ICvectorﬁelds package capitalizes on the

3

algorithms written in C under the title FFTW which stands for Fastest Fourier Trans-
form in the West [Frigo and Johnson, 2005], and a convenient wrapper package in R
Input raster images and raster stacks are read and
called ﬀtwtools [Rahim, 2021].
manipulated using the terra package [Hijmans, 2021].

Digital image correlation

One of the earliest applications of cross-correlation in image analysis was to align images
taken from diﬀerent sensors or at diﬀerent times using satellites or aircraft [Anuta,
1970]. The theoretical and computational details I present here loosely follow those
in this pioneering application.
I will provide the mathematical underpinning of two-
dimensional cross-correlation, and then elaborate on its computational implementation,
which involves some additional complexity due to the circular nature of discrete fast
Fourier transforms. In all descriptions below, I do not normalize the cross-correlation
function to obtain Pearson correlation coeﬃcients and therefore, I follow the convention
of using the terms cross-correlation and cross-covariance interchangeably.

Given two images that have been converted to square matrices f and g of dimension

m × m, two-dimensional cross-correlation can be deﬁned in terms of a convolution:

(f (cid:63) g) (xj, yi) =

(cid:16)

f (−xj, −yi) ∗ g (xj, yi)

(cid:17)

(xj, yi) ,

(1)

in which (f (cid:63) g) is the two-dimensional cross-correlation matrix, the ∗ operator denotes
convolution, f (−xj, −yi) is the complex conjugate of the f (xj, yi) matrix, i is the matrix
row index, and j is the matrix column index i, j ∈ N = {1, 2, ...}. Note that I use array
indices that start at one rather than zero. The coordinates of the centroids of each pixel
are given by xj and yi.

Based on the convolution theorem, equation (1) can be rewritten as

(f (cid:63) g) (xj, yi) = F−1 (cid:16)

(cid:17)
F (f (xj, yi))F (g (xj, yi))

(xj, yi) ,

(2)

wherein F denotes the two-dimensional Fourier transform, F−1 denotes its inverse, and
F (f (xj, yi)) is the complex conjugate of F (f (xj, yi)). Because F (f (xj, yi)) = F
and because f (xj, yi) contains only real numbers, I forego calculating the complex con-
jugate of the Fourier transform of the f matrix and choose instead capitalize on matrix
multiplication to compute the complex conjugate:

(cid:16)

f (−xj, −yi)

(cid:17)

,

f (−xj, −yi) = r × f × r,

(3)

in which the r matrix is a m × m matrix that has zeros everywhere except for along the
diagonal that runs from its lower left to upper right corners, which contains ones:

4










r =

0 0 · · · 0 1
0 0 · · · 1 0
...
...
. . .
0 1 · · · 0 0
1 0 · · · 0 0

...

...










.

(4)

The matrix calculations in equations (3) and (4) substitute for calculation of the complex
conjugate only in the case where all values of the f matrix are real, which is the case in
most natural science applications.

Together, equations (1) through (4) constitute an elegant way to compute two di-
mensional cross-correlation. Computer implementation of these, however, requires some
additional complexity due to the use of discrete fast Fourier transforms to eﬃciently
compute convolutions. Discrete fast Fourier transforms are inherently circular, which
means that what happens on the outer edges of matrices will impact their discrete fast
Fourier transform on the opposite side.
In order to mitigate this problem, zeros are
added to the outer edge on all sides of both the f and g matrices [Anuta, 1970]. In
ICvectorﬁelds, the f and g matrices are padded with as many zeros as there are rows
and columns in the original matrix and then additional zeros are added to ensure that
both matrices are square with an even number of rows and columns.

When matrices are padded as described above and discrete fast Fourier transforms
are used as in equation (2), the non-cyclic components of the convolution end up in
the outer corners of the cross-correlation matrix (f (cid:63) g) (xj, yi) [Anuta, 1970]. Thus,
to obtain a correct estimate of cross-correlation, (f (cid:63) g) (xj, yi) must be divided into
four quadrants and each quadrant must be ﬂipped along its horizontal and vertical axes
using matrix multiplication. For example, if the zero-padded matrices have dimension
k × k, each quadrant of (f (cid:63) g) (xj, yi) will have dimension k/2 × k/2 and the following
operation ﬂips each quadrant matrix:

qf = r × q × r,

(5)

where r is a k/2×k/2 matrix as in equation (4). Then the four quadrants can be reassem-
bled into the k × k cross-correlation matrix. The mathematical operations in equations
(1) through (5) are implemented in the Xcov2D function in the ICvectorﬁelds package.
Once a cross-correlation matrix has been estimated, it can be used to compute dis-
placement in the horizontal and vertical directions in terms of the horizontal and vertical
shifts in pixel numbers that maximize cross-correlation. In ICvectorﬁelds, shifts to the
right and up are designated as positive, whereas shifts to the left and down are considered
negative.

A typical implementation of DIC will deﬁne a region of interest within the input
images or their corresponding matrices wherein displacement vectors are sought using
a bounding box as in the DispFieldbb function in ICvectorﬁelds or using a sub-grid
of equal sized regions of interest as in the DispField function in ICvectorﬁelds. Note
that all of the functions in ICvectorﬁelds that use DIC or variations of it, translate

5

displacement or velocities in terms of pixel shifts to the spatial units deﬁned in the
projection information of the original input rasters. The coordinate information required
for translation of pixel shifts to the correct spatial units is obtained using functions in
the terra R package [Hijmans, 2021].

Extending DIC to quantify persistent movement

In applications of DIC in earth systems with persistent directional ﬂows that inﬂuence
movement, it is valuable to determine directional movement of populations of interest
In such situations, a spatiotemporal array
that persist for more than one time step.
of images with two space dimensions and one time dimension is required. Often these
can be formulated as stacks of raster images, with each layer in the stack representing
spatially referenced observations for one time step (step one in Figure 1). A variation
of DIC which I call Spatiotemporal Image Correlation (STIC) permits estimation of
persistent directional movement in terms of orthogonal velocity vectors.

In STIC, the three dimensional array is ﬁrst lagged by duplicating it and then re-
moving an integer number of layers from the top of one duplicate and the bottom of
the other (steps two and three in Figure 1). The integer lag is user deﬁned and serves
to minimize estimates of zero movement which always would occur in the absence of a
lag. To diﬀerentiate the duplicate lagged arrays, I will refer to the ﬁrst as the reference
array, and the second as the lagged array. Regions of interest in the reference array are
selected and locations outside the region of interest in the reference array are assigned
values of zero (grey shaded region in steps two and three in Figure 1 represent regions
of interest). The reference array and the lagged array are then dimension reduced by
averaging along rows to obtain one pair of two-dimensional matrices and by averaging
along columns to obtain a second pair of two dimensional matrices (step 4 in Figure 1).
The ﬁrst pair of matrices comprises row averaged reference and lagged matrices. The
second pair of matrices comprises column averaged reference and lagged matrices. Each
matrix in the two pairs has one space dimension and one time dimension.

Cross-correlation between the pairs of reference and lagged matrices is then computed
as described for DIC. Recall that one dimension of each of the row or column-averaged
matrices is spatial while the other is temporal, which enables calculation of two orthog-
onal velocity vectors based on space shifts and time shifts obtained by application of
DIC:

vx = sx/stx, stx (cid:54)= 0
vy = sy/sty, sty (cid:54)= 0

(6)

(7)

in which vx and vy are velocity in the horizontal and vertical directions, sx and sy are
shifts in the horizontal and vertical direction, stx is the time shift that corresponds to
spatial shifts in the horizontal direction, and sty is the time shift that corresponds to
spatial shifts in the vertical direction. Note that due to the time shift, the user-deﬁned
time lag does not necessarily pre-determine the denominator of the orthogonal velocity
vectors.

6

Figure 1: The STIC algorithm: The input array in step one is a raster stack of images
in which each image layer represents the phenomenon of interest in planar space at
In step two, the input array is duplicated and based on a
a diﬀerent time instance.
user speciﬁed time lag, layers are removed from the top of one array and the bottom
of the other. In addition, a region of interest is deﬁned in one of the duplicate arrays
represented by the grey shaded region at the top of the prism on the left. In step four the
rows are dimension reduced by averaging along one of the axes (either rows or columns).
This produces a pair or row-averaged matrices and a pair of column-averaged matrices
that are analyzed using cross-correlation to estimate orthogonal velocity vectors.

7

function

algorithm Images ROI

Velocities

DispField
DispFieldbb
DispFieldST
DispFieldSTbb
DispFieldSTall
DispFieldSTbball

DIC
DIC
STIC
STIC
STIC+
STIC+

2
2
3+
3+
3+
3+

grid
variable or not
bounding box
variable or not
grid
less variable
bounding box
less variable
more variable
grid
bounding box more variable

Table 1: ICvectorﬁelds functions, algorithms, and use contexts to facilitate decisions
on which function is most applicable. ROI stands for region of interest, which is deﬁned
either using a grid or a bounding box, Velocities refers to whether the magnitudes of
velocities in the vector ﬁeld are presumed to be spatially variable or not.

Spatially variable velocities

When the magnitudes of movement velocities are highly spatially variable, a single time
lag is not optimal for quantifying orthogonal velocity vectors. For these scenarios a
variation on the STIC algorithm called STIC+ allows the user to specify a maximum
time lag. The algorithm then repeats the steps described for STIC for each integer time
lag from one to the maximum time lag. For each repetition and each location of interest,
the total velocity magnitude (speed) is calculated as

|v| =

(cid:113)

x + v2
v2
y.

(8)

For each region of interest, the horizontal and vertical velocity vectors are determined
by the time lag STIC calculation that maximizes equation (8).

A summary table describing which functions in ICvectorﬁelds use each of the
algorithms described above is provided (Table 1). Two functions in ICvectorﬁelds
use a standard implementation of DIC similar to that described by Anuta [1970], two
functions use the STIC extension and two functions use the STIC+ extension (Table 1).

Application

In this section I demonstrate the use of DIC and extensions implemented in ICvec-
torﬁelds [Goodsman, 2021] using an example in which data were simulated based on a
partial diﬀerential equation and using the classic larch budmoth defoliation data that are
embedded in the ncf package [Bjornstad, 2020]. The data from the simulated example
are embedded in ICvectorﬁelds. For visualization of results, the demonstrations call
functions in several R packages: These include ggplot2 [Wickham, 2016], ggnewscale
[Campitelli, 2021a], metR [Campitelli, 2021b], and terra [Hijmans, 2021].

8

Demonstration using simulated data

The model used to simulate data to test and demonstrate the functionality of ICvec-
torﬁelds is a convection-diﬀusion equation, which is a partial diﬀerential equation with
terms for diﬀusion, advection, and reaction:

∂u
∂t

= ∇ · (D∇u) − ∇ · (vu) + ru,

(9)

in which r is the growth rate with units of per unit time, D is the diﬀusion coeﬃcient
with squared spatial units per unit time, v is the bivariate orthogonal velocity vector in
units of space per unit time, ∇ represents the gradient, and ∇· represents divergence.
The orthogonal velocity vector is spatially dependent in the simulations that follow:

v =






x < 0, y ≥ 0
(0, 0.2),
(0.2, 0),
x ≥ 0, y ≥ 0
(0, −0.2), x ≥ 0, y < 0
(−0.2, 0), x < 0, y < 0

(10)

Note that by convention in equations (9) and (10), movement to the right and up has
a negative sign, and movement to the left and down has a positive sign. This is the
opposite convention used in ICvectorﬁelds. Note that the discontinuities at x = 0
and y = 0 in the advection term in equation (10) create strange model behaviours
once concentration reaches x = 0 or y = 0, and so the model was simulated for only 6
time steps to minimize encounters with these axes. Parameter values for the diﬀusion
coeﬃcient and the growth rate were D = (0.01, 0.01) squared spatial units per unit time
and r = 0.5 per unit time.

The model in equations (9) and (10) was simulated using the ReacTran R package
[Soetaert and Meysman, 2012], using a ﬁnite diﬀerencing scheme with backward diﬀer-
encing on a square domain of 202 cells in each direction, each with a width of 0.049
spatial units. The initial condition was a concentration of one units per arbitrary unit
of volume in the centre of each quadrant of the spatial domain. Boundary conditions
were zero ﬂux (reﬂecting) on all four sides of the spatial domain. The simulation data
are saved in table format within ICvectorﬁelds.

The data are imported and then converted from table format to a raster stack using
the RastStackData helper function. They can then be visualized as rasters as shown
below.

# import simulated data
data(SimData, package = "ICvectorfields")

# convert to raster stack
SimStack <- ICvectorfields::RastStackData(SimData)

# confirming dimension

9

dim(SimStack)

# plotting
layout(matrix(1:6, 2, 3, byrow = TRUE))
layout.show(6)
terra::plot(SimStack[[1]], legend = FALSE, main = "t1")
terra::plot(SimStack[[2]], legend = FALSE, main = "t2")
terra::plot(SimStack[[3]], legend = FALSE, main = "t3")
terra::plot(SimStack[[4]], legend = FALSE, main = "t4")
terra::plot(SimStack[[5]], legend = FALSE, main = "t5")
terra::plot(SimStack[[6]], legend = FALSE, main = "t6")

The ﬁgure showing the simulated spatiotemporal dynamics is identical to Figure 2.

Figure 2: Visualization of simulation data for six time steps. The initial condition at t0
is not shown. Green colours represent the highest concentrations.

To analyze displacement based on a pair of images, I chose to use the standard
implementation of DIC in the DispField function of ICvectorﬁelds. The ﬁrst two
arguments of the DispField function are the input rasters. The ﬁrst input raster is
treated as the reference image and the second is treated as the shifted image. In this
case, the ﬁrst image is the raster layer corresponding to the ﬁrst time step (t1) and the
second image is the raster layer corresponding to the sixth time step (t6). The function
selects regions of interests based on a grid of dimensions given in the factv1 and facth1
arguments, which represent to number of rows and columns in each sub-grid. Sub-grids
start in the upper left corner and as many sub-grids as ﬁt within the original domain
In the code below, sub-grids are 101 × 101, which is approximately
are constructed.

10

row col

frowmin frowmax

fcolmin fcolmax

centx

centy dispx dispy

51
152
51
152

51
51
152
152

1
102
1
102

101
202
101
202

1
1
102
102

101
101
202
202

-2.5
-2.5
2.5
2.5

2.5
-2.5
2.5
-2.5

0.00
0.98
-0.98
0.00

-0.98
0.00
0.00
0.98

Table 2: ICvectorﬁelds output from a call of the DispField function using simulated
data. The table is a duplicate of the data table returned after calling the function except
that the headings for the ﬁrst two columns have been shortened from rowcent to row
and from colcent to col so that the table ﬁts the page. In addition centx and centy have
been rounded to a single decimal place and dispx and dispy have been rounded to two
decimal places.

the size of one quarter of the original spatial domain of the simulation. The restricted
argument is by default set to FALSE. In that case, the DIC algorithm cross-correlates
each region of interest in the ﬁrst image with the entirety of the second image. When
restricted = TRUE The algorithm cross correlates both images only within the region
of interest. If the user has reason to believe that movement is predominantly occurring
within sub-grids the restricted = TRUE option has the added beneﬁt of speeding up
computation.

VFdf1 <- DispField(SimStack[[1]], SimStack[[6]], factv1 = 101, facth1 = 101,

VFdf1

restricted = TRUE)

The output of DispField is in data table format. Because the data table is small, I’ve
printed it to the console in the code example above. For ease of viewing in this paper,
the output is duplicated in Table 2.

The directions of movement coincide with the directions of advection in the sim-
ulation with movement downwards in the upper left quadrant (ﬁrst row of Table 2),
movement to the right in the lower left quadrant (second row of Table 2), movement to
the left in the upper right quadrant (third row of Table 2), and upwards movement in
the lower right quadrant (fourth row of Table 2). Speed of movement can be computed
by dividing displacement by the number of time steps that passed 0.98/5 = 0.196, which
is slightly slower than the simulated advection speed of 0.2 spatial units per time step.
The discrepancy is likely due to the blurring eﬀect of diﬀusion in the partial diﬀerential
equation (equation (9)).

In situations where the speed is constant, velocity can be estimated from pairs of
images as I have demonstrated above. However, the DispFieldST algorithm is designed
to return orthogonal velocity vectors and so for conﬁrmation purposes, I demonstrate it
below:

VFdf2 <- DispFieldST(SimStack, lag1 = 1, factv1 = 101, facth1 = 101, restricted = TRUE)
VFdf2

11

The data table that is printed to the console after running the code above looks
similar to the data table duplicated in Table 2 except that under the heading dispx and
dispy the algorithm returns horizontal and vertical velocities rather than displacement
vectors. The directions of movement are the same as those shown in Table 2, but the
speed is 0.196 spatial units per unit time as previously estimated.

The vector ﬁeld and the raw data can be visualized simultaneously using plotting

functionality in ggplot2 with extensions in the ggnewscale and metR packages.

SimVF = ggplot() +
xlim(c(-5, 5)) +
ylim(c(-5, 5)) +
geom_raster(data = SimData,

aes(x = xcoord, y = ycoord, fill = t1)) +
scale_fill_gradient(low = "white", high = "blue", na.value = NA) +
new_scale("fill") +
geom_raster(data = SimData,

aes(x = xcoord, y = ycoord, fill = t6), alpha = 0.5) +

scale_fill_gradient(low = "white", high = "red", na.value = NA) +
geom_vector(data = VFdf2,

aes(x = centx, y = centy,

mag = Mag(dispx, dispy),
angle = Angle(dispx, dispy))) +

theme_bw()

SimVF

The resulting ﬁgure is duplicated in Figure 3. The velocity vectors in the vector ﬁeld
(Figure 3) are consistent with the simulated advection vectors, although they slightly
underestimate movement speed.

Before proceeding to the next demonstration I will illustrate one of the potential
pitfalls of estimating movement based on cross-correlation. If the argument of the Disp-
FieldST function is left its default restricted = FALSE conﬁguration, the algorithm will
search the entire domain for shifts that maximize cross-correlation. Because the simu-
lations in each quadrant of the spatial domain are quite similar, cross-correlation is in
fact maximized by shifts that cross quadrants, even though simulated movement was not
that large. Therefore, calling DispFieldST with restricted = FALSE produces incorrect
output (Table 3): The simulated advection speed is not at all close to the estimated
maximum orthogonal advection speed of 3.87 spatial units per unit time.

Demonstration using larch budmoth data

Larch budmoths are lepidopteran defoliators that exhibit periodic outbreaks every 8 to 9
years in the European Alps [Bjørnstad et al., 2002]. The larch budmoth data originated
from survey information collected by the forest administrative agencies of France, Italy,
Switzerland, and Austria from 1961 to 1998. The data record the presence of defoliation

12

Figure 3: Vector ﬁeld for radial movement simulated using a convection-diﬀusion equa-
tion. the orthogonal velocity vectors are estimated using the DispFieldST function in
ICvectorﬁelds.

row col

frowmin frowmax

fcolmin fcolmax

centx

centy dispx dispy

51
152
51
152

51
51
152
152

1
102
1
102

101
202
101
202

1
1
102
102

101
101
202
202

-2.5
-2.5
2.5
2.5

2.5
-2.5
2.5
-2.5

0.10
3.87
-3.87
-0.10

-3.87
0.10
-0.10
3.87

Table 3: ICvectorﬁelds output from a call of the DispFieldST function using sim-
ulated data. This call is meant to demonstrate a potential pitfall in using the cross-
correlation approach because when restricted = FALSE, the algorithm ﬁnds positive
cross-correlations that are not caused by movement. The table is a duplicate of the
data table returned after calling the function except that the headings for the ﬁrst two
columns have been shortened from rowcent to row and from colcent to col so that the
table ﬁts the page. In addition centx and centy have been rounded to a single decimal
place and dispx and dispy have been rounded to two decimal places.

13

by larch budmoth caterpillars within 1 × 1 km grid cells (a binary variable). These
data were aggregated up to 20 × 20 km grid cells so that records at this spatial scale
were population proxies for larch budmoth caterpillar abundance [Bjørnstad et al., 2002]
based on the assumption that defoliation damage is proportional to the abundance of the
causal agents. Grid cells were excluded from the data set if they exhibited less than one
percent defoliation or if more than ninety percent of years in which data were collected
at that location exhibited no defoliation by larch budmoth [Bjørnstad et al., 2002]. The
larch budmoth defoliation data exhibit directional traveling wave-trains that travel from
the southwest to the northeast along the European Alps [Bjørnstad et al., 2002]. These
data are embedded in the ncf R package.

After loading the ncf library as well as ICvectorﬁelds, the data can be loaded,

converted to a raster stack and visualized as follows:

# import larch budmoth data
data(lbm, package = "ncf")

# convert to raster stack
LBMStack <- ICvectorfields::RastStackData(lbm)

# confirming dimension
dim(LBMStack)

# visualizing
layout(matrix(1:6, 2, 3, byrow = TRUE))
layout.show(6)
terra::plot(LBMStack[[1]], legend = FALSE, main = "1961")
terra::plot(LBMStack[[2]], legend = FALSE, main = "1962")
terra::plot(LBMStack[[3]], legend = FALSE, main = "1963")
terra::plot(LBMStack[[4]], legend = FALSE, main = "1964")
terra::plot(LBMStack[[5]], legend = FALSE, main = "1965")

This code plots the ﬁrst ﬁve years of the data set (Figure 4), which show a standard
progression of outbreaks from the southwest corner of the Alps to the northeast. This
pattern repeats relatively regularly every 8 to 10 years in the data set.

The study region covers a large geographic area and so it is likely the population
movement speeds vary geographically. For this reason, I elected to use the STIC+
algorithm to analyze the data using DispFieldSTall. In the code below I analyze the
ﬁrst 23 years of the time series (1961 to 1983) as defoliation patterns from 1984 to 1998
are less regular.

VFdf3 <- DispFieldSTall(LBMStack[[1:23]], lagmax = 3, factv1 = 3, facth1 = 3, restricted = FALSE)

LBMVF1 = ggplot() +

geom_tile(data = lbm,

14

Figure 4: The ﬁrst ﬁve years of the larch budmoth defoliation data included in ncf.
Green colours represent the highest level of defoliation.

aes(x = x, y = y,

fill = X1962)) +

scale_fill_gradient(low = "white", high = "blue", na.value = NA) +
new_scale("fill") +
geom_tile(data = lbm,

aes(x = x, y = y, fill = X1964), alpha = 0.5) +

scale_fill_gradient(low = "white", high = "red", na.value = NA) +
geom_vector(data = VFdf3,

aes(x = centx, y = centy,

mag = Mag(dispx, dispy),
angle = Angle(dispx, dispy))) +

theme_bw()

LBMVF1

Calling DispFieldSTall returns a data frame object that is convenient for plotting
the vector ﬁeld. The vector ﬁeld reveals that moth movement is to the north on the
southwestern side of the Alps and then to the east on the northern side of the Alps
(Figure 5). It also reveals deceleration as outbreaks turn the corner and then acceleration
as outbreaks move eastward (Figure 5).

The average speed of larch budmoth movement can be computed from the data frame

output of DispFieldSTall as follows:

VFdf3$speed <- sqrt((VFdf3$dispx^2) + VFdf3$dispy^2)

15

Figure 5: Vector ﬁeld for Larch Budmoth persistent movement. The orthogonal velocity
vectors are estimated using the DispFieldSTall function in ICvectorﬁelds. Blue colours
show the locations and intensities of defoliation in 1962 and red colours show the locations
and intensities of defoliation in 1964. Vectors have their own scale that is distinct from
the scale of the map.

16

# subsetting to remove locations where speed is zero
VFdf4 <- subset(VFdf3, speed > 0)

# computing mean, standard deviation and dimension of data frame
# to obtain sample size
mean(VFdf4$speed)
sd(VFdf4$speed)
dim(VFdf4)

# upper and lower Wald-type 95 percent confidence interval on average speed
mean(VFdf4$speed)/1000 + qt(0.975, dim(VFdf4)[1] - 1)*sd(VFdf4$speed)/1000/sqrt(dim(VFdf4)[1] - 1)
mean(VFdf4$speed)/1000 + qt(0.025, dim(VFdf4)[1] - 1)*sd(VFdf4$speed)/1000/sqrt(dim(VFdf4)[1] - 1)

Using the approach above, the average movement speed is estimated as 176 ± 43
km(Yr)−1, an estimate that is less than the previous speed estimates for northeastern
spread of 220 km(Yr)−1 [Bjørnstad et al., 2002] and 254 km(Yr)−1 [Johnson et al., 2004].
The diﬀerence between estimates in the literature and estimates produced here are likely
due to the direction of movement. The vectors in the larch budmoth vector ﬁeld point
predominantly north and east (Figure 5). In other words they are orthogonal. In contrast
the movement speeds estimated by Bjørnstad et al. [2002] and Johnson et al. [2004] are
projected along lines that run to the northeast. A simple application of geometry reveals
that an average speed of 176 km(Yr)−1 in the north and east directions corresponds to
an estimated speed of 249 km(Yr)−1 in the northeastern direction (Pythagorean theorem
√
1762 + 1762). This estimate is consistent with prior speed estimates for larch budmoth

population movement [Bjørnstad et al., 2002, Johnson et al., 2004].

Summary

The ICvectorﬁelds R package implements standard Digital Image Correlation algo-
rithms in addition to a novel extension that permits estimation of orthogonal velocities
of persistent movement in series of three or more images. Here I demonstrate the useful-
ness of DIC and the extension implemented in ICvectorﬁelds in a new arena: Whereas
DIC is often applied in engineering and materials science to quantify the eﬀects of force
application on materials [Sutton et al., 2009], it has not been used in landscape ecology.
In this ﬁeld, the approach has potential to provide new insights into how populations
move across landscapes and to demonstrate the untenable nature of assumptions of ho-
mogeneity inherent in most analyses based on the traveling wave paradigm. Even when
models of suﬃcient complexity to capture environmental heterogeneity can be used, I
expect that the methods in ICvectorﬁelds will be useful because they facilitate com-
parison between modeled and empirical population movement data as demonstrated in
the partial diﬀerential equation example in this study. Approaches such as this one
that estimate movement based on cross-correlation, however, have a weakness: Under

17

certain circumstances, they are prone to ﬁnding cross-correlations that are unrelated to
movement as was demonstrated in this paper. For this reason, users must exercise vigi-
lance in interpreting the results of vector ﬁeld analyses like those demonstrated herein.
If possible, results should be checked against a standard or against prior published re-
sults regarding movement propensity. Nevertheless, the methods described here hold
promise for exploratory analyses, hypothesis generation, and synoptic pattern analyses
of population movements.

Bibliography

David Alonso, Frederic Bartumeus, and Jordi Catalan. Mutual interference between

predators can give rise to turing spatial patterns. Ecology, 83(1):28–34, 2002.

Paul E Anuta. Spatial registration of multispectral and multitemporal digital imagery
using fast fourier transform techniques. IEEE transactions on Geoscience Electronics,
8(4):353–368, 1970.

Tal Avgar, Jonathan R Potts, Mark A Lewis, and Mark S Boyce.

Integrated step
selection analysis: bridging the gap between resource selection and animal movement.
Methods in Ecology and Evolution, 7(5):619–630, 2016.

Ottar N. Bjornstad. ncf: Spatial Covariance Functions, 2020. URL https://CRAN.

R-project.org/package=ncf. R package version 1.2-9.

Ottar N Bjørnstad and Wilhelm Falck. Nonparametric spatial covariance functions:
estimation and testing. Environmental and Ecological Statistics, 8(1):53–70, 2001.

Ottar N Bjørnstad, Mikko Peltonen, Andrew M Liebhold, and Werner Baltensweiler.
Waves of larch budmoth outbreaks in the european alps. Science, 298(5595):1020–
1023, 2002.

Frances E Buderman, Mevin B Hooten, Jacob S Ivan, and Tanya M Shenk. A functional
model for characterizing long-distance movement behaviour. Methods in Ecology and
Evolution, 7(3):264–273, 2016.

Elio Campitelli. ggnewscale: Multiple Fill and Colour Scales in ’ggplot2’, 2021a. URL

https://CRAN.R-project.org/package=ggnewscale. R package version 0.4.5.

Elio Campitelli. metR: Tools for Easier Analysis of Meteorological Fields, 2021b. URL

https://github.com/eliocamp/metR. R package version 0.9.2.

Matteo Frigo and Steven G. Johnson. The design and implementation of FFTW3.
Proceedings of the IEEE, 93(2):216–231, 2005. Special issue on “Program Generation,
Optimization, and Platform Adaptation”.

18

Devin Goodsman. ICvectorﬁelds: Vector Fields from Spatial Time Series of Population
Abundance, 2021. URL https://CRAN.R-project.org/package=ICvectorfields.
R package version 0.0.2.

Michael P Hassell, Hugh N Comins, and Robert M Mayt. Spatial structure and chaos

in insect population dynamics. Nature, 353(6341):255–258, 1991.

Michael P Hassell, Hugh N Comins, and Robert M May. Species coexistence and self-

organizing spatial dynamics. Nature, 370(6487):290–292, 1994.

Robert J. Hijmans. terra: Spatial Data Analysis, 2021. URL https://CRAN.R-project.

org/package=terra. R package version 1.2-10.

Aaron L Hoﬀman, Julian D Olden, Jeremy B Monroe, N LeRoy Poﬀ, Todd Wellnitz,
and John A Wiens. Current velocity and habitat patchiness shape stream herbivore
movement. Oikos, 115(2):358–368, 2006.

Derek M Johnson, Ottar N Bjørnstad, and Andrew M Liebhold. Landscape geometry
and travelling waves in the larch budmoth. Ecology Letters, 7(10):967–974, 2004.

Neil Johnson. Simply complexity: A clear guide to complexity theory. Simon and Schus-

ter, 2009.

Rocio Joo, Matthew E Boone, Thomas A Clay, Samantha C Patrick, Susana Clusella-
Trullas, and Mathieu Basille. Navigating through the r packages for movement. Jour-
nal of Animal Ecology, 89(1):248–267, 2020.

Andrei N Kolmogorov. ´Etude de l’´equation de la diﬀusion avec croissance de la quantit´e
de mati`ere et son application `a un probl`eme biologique. Bull. Univ. Moskow, Ser.
Internat., Sec. A, 1:1–25, 1937.

Mark Kot, Mark A Lewis, and Pauline van den Driessche. Dispersal data and the spread

of invading organisms. Ecology, 77(7):2027–2042, 1996.

Elias Krainski, Virgilio G´omez-Rubio, Haakon Bakka, Amanda Lenzi, Daniela Castro-
Camilo, Daniel Simpson, Finn Lindgren, and H˚avard Rue. Advanced spatial model-
ing with stochastic partial diﬀerential equations using R and INLA. Chapman and
Hall/CRC, 2018.

Julia K Parrish and Leah Edelstein-Keshet. Complexity, pattern, and evolutionary

trade-oﬀs in animal aggregation. Science, 284(5411):99–101, 1999.

R Core Team. R: A Language and Environment for Statistical Computing. R Foundation
for Statistical Computing, Vienna, Austria, 2021. URL https://www.R-project.
org/.

Karim Rahim. ﬀtwtools: Wrapper for ’FFTW3’ Includes: One-Dimensional, Two-
Dimensional, Three-Dimensional, and Multivariate Transforms, 2021. URL https:
//CRAN.R-project.org/package=fftwtools. R package version 0.9-11.

19

SHIGUI Ruan. Turing instability and travelling waves in diﬀusive plankton models with
delayed nutrient recycling. IMA journal of applied mathematics, 61(1):15–32, 1998.

Johannes Signer, John Fieberg, and Tal Avgar. Animal movement tools (amt): R
package for managing tracking data and conducting habitat selection analyses. Ecology
and Evolution, 9:880–890, 2019. URL https://doi.org/10.1002/ece3.4823.

John Gordon Skellam. Random dispersal in theoretical populations. Biometrika, 38

(1/2):196–218, 1951.

Karline Soetaert and Filip Meysman. Reactive transport in aquatic ecosystems: Rapid
model prototyping in the open source software r. Environmental Modelling & Software,
32:49–60, 2012.

Karline Soetaert, Thomas Petzoldt, and R. Woodrow Setzer. Solving diﬀerential equa-
tions in R: Package deSolve. Journal of Statistical Software, 33(9):1–25, 2010. doi:
10.18637/jss.v033.i09.

Michael A Sutton, Jean Jose Orteu, and Hubert Schreier.

Image correlation for
shape, motion and deformation measurements: basic concepts, theory and applica-
tions. Springer Science & Business Media, 2009.

Mark C Urban, Ben L Phillips, David K Skelly, and Richard Shine. A toad more trav-
eled: the heterogeneous invasion dynamics of cane toads in australia. The American
Naturalist, 171(3):E134–E148, 2008.

Hadley Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New

York, 2016. ISBN 978-3-319-24277-4. URL https://ggplot2.tidyverse.org.

Andrew Zammit-Mangion. IDE: Integro-Diﬀerence Equation Spatio-Temporal Models,
2019. URL https://CRAN.R-project.org/package=IDE. R package version 0.3.0.

20

