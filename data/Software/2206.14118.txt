Empirical Software Engineering manuscript manuscript No.
(will be inserted by the editor)

GitHub Actions: The Impact on the Pull Request
Process

Mairieli Wessel · Joseph Vargovich ·
Marco A. Gerosa · Christoph Treude

Received: date / Accepted: date

Abstract Automated tools are frequently used in social coding repositories
to perform repetitive activities that are part of the distributed software de-
velopment process. Recently, GitHub introduced GitHub Actions, a fea-
ture providing automated workﬂows for repository maintainers. Understand-
ing and anticipating the eﬀects of adopting such kind of technology is impor-
tant for planning and management. Our research investigates how projects
use GitHub Actions, what the communities discuss about them, and how
activity indicators change after their adoption. Our results indicate that a
considerable number of projects adopt GitHub Actions (almost 30% of our
sample) and that developers frequently ask for help with them. Our ﬁndings
also suggest that the adoption of GitHub Actions leads to more rejections
of pull requests (PRs), more communication in accepted PRs and less in re-
jected PRs, fewer commits in accepted PRs and more in rejected PRs, and
more time to accept a PR. We found similar results in the Utility Actions but
we found fewer rejected PRs for the Code Quality Actions. Our results are
especially relevant for practitioners to consider these eﬀects when adopting
GitHub Actions on their projects.

Mairieli Wessel
Radboud University, The Netherlands
E-mail: mairieli.wessel@ru.nl

Joseph Vargovich
Northern Arizona University, USA
E-mail: jrv233@nau.edu

Marco A. Gerosa
Northern Arizona University, USA
E-mail: marco.gerosa@nau.edu

Christoph Treude
University of Melbourne, Australia
E-mail: christoph.treude@unimelb.edu.au

2
2
0
2

n
u
J

8
2

]
E
S
.
s
c
[

1
v
8
1
1
4
1
.
6
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
2

Mairieli Wessel et al.

Keywords GitHub Actions · GitHub Bots · Automated workﬂow · Regression
Discontinuity Design

1 Introduction

Social coding platforms, such as GitHub, have changed the collaborative na-
ture of open source software development by integrating mechanisms such as
issue reporting and pull requests into distributed version control tools [9, 15].
This pull-based development workﬂow oﬀers new opportunities for commu-
nity engagement but at the same time increases the workload for repository
maintainers, who need to communicate, review code, deal with contributor
license agreement issues, explain project guidelines, run tests, and merge pull
requests [16].

To reduce this intensive workload, developers often rely on automation
tools to perform repetitive tasks to check whether the code builds, the tests
pass, and the contribution conforms to a deﬁned style guide [21]. GitHub
projects adopt, for example, tools to support Continuous Integration and Con-
tinuous Delivery or Deployment (CI/CD) [4, 43] and for code review [21, 39].
In recent years, software bots have been widely adopted to automate a vari-
ety of predeﬁned tasks around pull requests [38]. By automating part of the
workﬂow, developers hope to increase both productivity and quality [36].

To further support automation, GitHub recently introduced GitHub Ac-
tions1 (the feature was made available to the public in November 2019).
GitHub Actions allow the automation of tasks based on various triggers
(e.g., commits, pull requests, issues, comments, etc.) and can be easily shared
from one repository to another, making it easier to automate how developers
build, test, and deploy software projects.

However, little is known about the impact of this technology and the chal-
lenges it might impose on the project development process. In this paper,
we aim to understand how software developers use GitHub Actions to auto-
mate their workﬂows and how the dynamics of pull requests of GitHub projects
change following the adoption of GitHub Actions.

As a result of this analysis, we found a considerable number of active
repositories (1489 out of 5000 repositories) adopted GitHub Actions. These
GitHub Actions are spread across 20 categories, including utilities, contin-
uous integration, code quality, and deployment. We found distinct categories
of discussions related to GitHub Actions, including requesting for help, po-
tential of using GitHub Actions, issues reproducing output with GitHub
Actions, and plans to use GitHub Actions. Our ﬁndings also suggest that
the activity indicators change in opposite directions for accepted and rejects
pull requests (PRs): less pull requests, more comments, and fewer commits in
the former, and more pull requests, less comments, and more commits in the
last. Similar results were obtained when segmenting for the four most recur-

1 https://github.com/features/actions

GitHub Actions: The Impact on the Pull Request Process

3

rent categories with the exception for Code Quality Actions, which lead to
fewer rejected pull requests.

The main contributions of this paper are:

1. Characterization of the usage of GitHub Actions.
2. An understanding of how the communities discuss GitHub Actions.
3. An understanding of how GitHub Actions’ adoption impacts project

activities.

This paper extends our prior work [22], published at MSR 2021, along two
major dimensions: the data used and the analyses performed. The data used in
this paper is signiﬁcantly broader than previous work in two major dimensions:
time (24 vs. 10 months after GitHub Actions were introduced), the number
of unique Actions (973 vs. 708), and the data set of projects used. In this
extension, we also added RQ 4: “How does the impact of GitHub Actions
diﬀer across Action categories? ” and included new regression discontinuity
design analyses split by Action categories. We have also updated and improved
multiple parts of the text, including related work and discussion.

2 Workﬂow Automation with GitHub Actions

GitHub Actions is an event-driven API provided by the GitHub platform
to automate development workﬂows. GitHub Actions can run a series of
commands after a speciﬁed event has occurred. An event is a speciﬁc activity
icon). For
that triggers a workﬂow run, as shown in Figure 1 (see the
example, a workﬂow is triggered when a pull request is created for a repository
or when a pull request is merged into the main branch. Workﬂows are deﬁned
in the .github/workﬂows/ directory and use YAML syntax, having either a
.yml or .yaml ﬁle extension.

Fig. 1: GitHub workﬂow automation with GitHub Actions (adapted from
GitHub).

A workﬂow can contain one or more Actions. Developers can create their
own Actions by writing custom code that interacts with their repository, and
use them in their workﬂows or publish them on the GitHub Marketplace.
GitHub allows developers to build Docker and JavaScript Actions and both

Main branchSubmitting a Pull RequestCreating abranchDiscussions, reviews,and improvementsMerging a PullRequestCommiting newcontributionDeploying4

Mairieli Wessel et al.

(a) Greetings workﬂow of Gammapy
– greetings.yml

(b) Example of github-actions bot
greeting a newcomer.

require a metadata ﬁle to deﬁne the inputs, outputs, and main entry point of
the Action.

After the successful execution of a workﬂow, the outputs can be displayed
in diﬀerent ways. One of the possibilities is through a GitHub Action bot. This
bot, as any other bot on GitHub, is implemented as a GitHub user that can
submit code contributions, interact through comments, and merge or close
pull requests [37]. Recently, developers published GitHub Action variants for
many well-known bots (e.g., Coveralls, Codecov, Snyk) and these Actions are
rapidly increasing in popularity [13].

As an example of GitHub Actions adoption, consider the case of the
project Gammapy 2, an open-source Python package for gamma-ray astron-
omy. As of the 13th of November 2019, the Gammapy community adopted a
GitHub Action called First Interaction 3, which is responsible for identifying
and welcoming newcomers when they create their ﬁrst issue or open their ﬁrst
pull request on a project. As shown in Figure 2a, Gammapy created a workﬂow
called Greeting that might be triggered by both new pull requests and issues,
as deﬁned by the on keyword. The output of the First Interaction Action is
displayed through an issue/pull request comment posted by GitHub Action
Bot when a new pull request or issue is authored by a new contributor. An
example of this Action interaction on a GitHub issue is shown in Figure 2b.

2 https://github.com/gammapy/gammapy
3 https://github.com/marketplace/actions/ﬁrst-interaction

GitHub Actions: The Impact on the Pull Request Process

5

3 Research Design

In the following, we present our research questions and research method.

3.1 Research Questions

This study aims to understand GitHub Actions usage and their eﬀects on
GitHub projects. To achieve our goal, we address the following research ques-
tions:

Research Question 1

How do open-source software projects use GitHub Actions?

We aim to understand how commonly repositories use GitHub Actions

and what they use them for.

Research Question 2

How is the use of GitHub Actions discussed by developers?

To gain an insight into how developers perceive GitHub Actions, we
manually analyzed a set of discussion threads that mention GitHub Actions.

Research Question 3

What is the impact of GitHub Actions?

In this RQ, we investigate whether project activity indicators, such as the
number of pull requests, number of comments, number of commits, and the
time to close pull requests change after GitHub Actions adoption. We used
a Regression Discontinuity Design [33] to model the eﬀect of Action adoption
across 662 projects that had adopted GitHub Actions for at least 6 months.

Research Question 4

How does the impact of GitHub Actions diﬀer across categories?

As GitHub Actions are diverse and might perform diﬀerent tasks on
the projects, we also investigated whether the impact of GitHub Actions
diﬀers across Action categories. In this RQ, we used a Regression Discontinuity
Design model to measure the impact of adoption for the same project activities
indicators we investigated in RQ3 across the four most popular GitHub Action
categories: Utilities, Continuous Integration, Code Quality, and Deployment.

3.2 Selecting Projects

We assembled a dataset of GitHub open-source projects that adopted GitHub
Actions at some point in their history. To compose our study sample, we
started by selecting repositories from GitHub. For this, we used the 5,000
most-starred GitHub repositories. We then ﬁlter this dataset to keep open-
source software projects that at some point had adopted a GitHub Action. To

6

Mairieli Wessel et al.

identify these projects, we retrieved data from the GitHub API using a Ruby
toolkit called Octokit.rb.4 We veriﬁed whether the repositories contained ﬁles
of yaml format in the ./github/workﬂows directory to determine if the project
used any GitHub Actions. This ﬁltered dataset comprises 1489 projects.

3.3 Analyzing the use of GitHub Actions

First, we collected and quantitatively analyzed the number of projects using
GitHub Actions and the number of GitHub Actions per project (RQ1).
We also analyzed the workﬂow ﬁles of the studied projects searching for the
category, description, and whether the Action was veriﬁed by GitHub.

3.4 Categorizing GitHub Actions Discussions

To answer RQ2, we investigated how GitHub Actions are discussed in
GitHub’s channel for such conversations: GitHub Discussions [17]. Out of the
5,000 repositories in our dataset, 897 (18%) had the Discussions feature en-
abled at the time of data collection, and 830 (17%) contained at least one
Discussion thread. These 830 repositories account for a total of 88,443 Discus-
sion threads (minimum: 1, median: 22, maximum: 10,129), containing a total
of 326,033 posts. Aiming for high precision rather than recall, we applied a
strict ﬁlter to these posts and selected only the ones which contained the exact
string “GitHub Action” (case insensitive). The resulting 573 posts originate
from 458 threads in 148 diﬀerent repositories.

We applied qualitative coding to the 458 threads to understand how GitHub
Actions are discussed by developers. One author developed a preliminary cod-
ing schema based on a random sample of 20 threads, which was reﬁned through
discussions with all authors. Two authors then independently coded another
set of 20 threads and measured inter-rater agreement. Based on achieving
‘almost perfect’ agreement (Cohen’s κ = 0.939 [25]) and resolving disagree-
ments through discussion, the same two authors divided the remaining threads
equally among them and completed the annotation of all 458 threads. Sec-
tion 4.2 reports the coding schema as well as the detailed results.

3.5 Time series analysis

To answer RQ3 and RQ4, we conducted a time series analysis. We collected
longitudinal data for diﬀerent outcome variables and treated the adoption of
GitHub Actions by each project in our data set as an “intervention”. This
way, we could align all the time series of project-level outcome variables on the
intervention date and compare their trends before and after adopting GitHub
Actions. In the following subsections, we detail the diﬀerent steps involved,
from aggregating the project variables to running the statistical models.

4 http://octokit.github.io/octokit.rb/

GitHub Actions: The Impact on the Pull Request Process

7

3.5.1 Aggregating project variables

We gathered Action data within an observation period of 6 months before and
6 months after the Action adoption within each project. Similarly to previous
work [4, 22, 39, 43], we exclude 30 days around the Action adoption date to
avoid the inﬂuence of the instability caused during this period. Afterward, we
aggregated individual pull request data into monthly periods, considering 6
months before and after the Action introduction. Afterward, we checked the
activity level of the candidate projects, since many projects on GitHub are
inactive [15]. Our data set comprises 662 active projects that have been using
at least one GitHub Action for 6 months.

We focused on the same pull request related variables as in previous work

[22, 39]:

Merged/non-merged pull requests: the number of monthly contributions
(pull requests) that have been merged (accepted), or closed but not merged
(rejected) into the project, computed over all closed pull requests in each time
frame.

Comments on merged/non-merged pull requests: the median number
of monthly comments computed over all merged and non-merged pull requests
in each time frame.

Commits of merged/non-merged pull requests: the median of monthly
commits computed over all merged and non-merged pull requests in each time
frame.

Time-to-merge/time-to-close pull requests: the median of monthly pull
request latency (in hours), computed as the diﬀerence between the time when
the pull request was closed and the time when it was opened. The median is
computed using all merged and non-merged pull requests in each time frame.
Based on previous work [4, 22, 39, 43], we also collected six known covari-

ates for each project:

Project name: the name of the project to which the pull request belongs.
This name is used to uniquely identify the project on GitHub.

Programming language:
automatically provided by GitHub.

the primary project programming language, as

Time since the ﬁrst pull request: in months, computed since the earliest
recorded pull request in the entire project history. We use this variable to
capture the project maturity when it comes to the pull request usage.

Total number of pull request authors: we count how many contributors
submitted pull requests to the project as a proxy for the size of the project
community.

Total number of commits: we compute the total number of commits as a
proxy for the activity level of a project.

Number of pull requests opened:
the number of monthly contributions
(pull requests) received in each time frame. We expect that projects with a

8

Mairieli Wessel et al.

high number of contributions also observe a high number of comments, latency,
commits, and merged and non-merged contributions.

3.5.2 Statistical Approach

We modeled the eﬀect of GitHub Action adoption over time across GitHub
repositories using a Regression Discontinuity Design (RDD) [19, 33], following
the work of Wessel et al. [39]. RDD is a technique used to model the extent of
a discontinuity at the moment of intervention and long after the intervention.
The technique is based on the assumption that if the intervention does not
aﬀect the outcome, there would be no discontinuity, and the outcome would
be continuous over time [7]. The statistical model behind RDD is

yi = α + β · time i + γ · intervention i +

δ · time after intervention i + η · controlsi + εi

where i indicates the observations for a given project.

To model the passage of time as well as the GitHub Action introduction,
we rely on three variables: time, time after intervention, and intervention. The
time variable is measured as months at the time j from the start to the end
of our observation period for each project.

The intervention variable is a binary value used to indicate whether the
time j occurs before (intervention = 0) or after the (intervention = 1) adop-
tion event. The time after intervention variable counts the number of months
at time j since the Action adoption, and the variable is set to 0 before adop-
tion. The controls i variables enable the analysis of Action adoption eﬀects,
rather than confounding the eﬀects that inﬂuence the dependent variables.
For observations before the intervention, holding controls constant, the result-
ing regression line has a slope of β, and after the intervention β + δ. The size
of the intervention eﬀect is measured as the diﬀerence equal to γ between the
two regression values of yi at the moment of the intervention.

Considering that in RQ3 we are interested in the eﬀects of GitHub Ac-
tions on the monthly trend of the number of pull requests, number of com-
ments, number of commits, and time-to-close for both merged and non-merged
pull requests, we ﬁtted eight models (4 variables × 2 cases). In RQ4, we mea-
sured the impact of adoption for the same variables across the four most pop-
ular GitHub Action categories in our ﬁltered dataset: Utilities, Continuous
Integration, Code Quality, and Deployment. Therefore, we ﬁtted thirty-two
models (4 variables × 2 cases × 4 categories).

To balance false positives and false negatives, we report the corrected p-
values after applying multiple corrections using the method of Benjamini and
Hochberg [2]. We implemented the RDD models as a mixed-eﬀects linear re-
gression using the R package lmerTest [23]. We modeled project name and
programming language as random eﬀects [12] to capture project-to-project
and language-to-language variability [43]. We evaluate the model ﬁt using
marginal (R2
c) scores, as described by Nakagawa and

m) and conditional (R2

GitHub Actions: The Impact on the Pull Request Process

9

1

5

10

50

Fig. 3: Number of Actions per repository (log scale)

Schielzeth [28]. The R2
ﬁxed eﬀects alone, and R2
eﬀects together.

m can be interpreted as the variance explained by the
c as the variance explained by the ﬁxed and random

In mixed-eﬀects regression, the variables used to model the intervention
along with the other ﬁxed eﬀects are aggregated across all projects, resulting
in coeﬃcients useful for interpretation. The interpretation of these regression
coeﬃcients supports the discussion of the intervention and its eﬀects, if any.
Thus, we report the signiﬁcant coeﬃcients (p < 0.05) in the regression as
well as their variance, obtained using ANOVA. In addition, we log transform
the ﬁxed eﬀects and dependent variables that have high variance [30]. We also
account for multicollinearity, excluding any ﬁxed eﬀects for which the variance
inﬂation factor (VIF) is higher than 5 [30].

4 Results

In the following, we report the results of our study per research question.

4.1 How do OSS projects use GitHub Actions? (RQ1)

Analyzing the set of 5,000 repositories, we identiﬁed 1,489 (29.8%) open-source
software projects that had adopted at least one GitHub Action at the time
of our data collection. As the box plot in Figure 3 shows, many of these
repositories adopt more than one Action, with a median value of four and a
maximum of 46.

In these repositories, we found a total of 973 diﬀerent predeﬁned GitHub
Actions. We collected data from each Action’s repository and also from the
GitHub Marketplace5 page to categorize these GitHub Actions. If published
in the marketplace, an Action is classiﬁed into 1–2 categories by the publisher.
Table 1 presents the categorization of GitHub Actions we found. Note that
the percentages do not add up to 100 since about half of the GitHub Actions
are assigned to two categories, a primary one and a secondary one.
The ﬁve most frequent categories of GitHub Actions are:
Utilities: GitHub Actions created to automate diverse steps of the
development workﬂow on the GitHub platform, often in support of other
GitHub Actions. The Read Properties Action, for example, inspects Java
.properties ﬁles looking for predeﬁned properties. Another example of a utility

5 https://github.com/marketplace?type=actions

10

Mairieli Wessel et al.

Table 1: Categorization of GitHub Actions found in our sample.

GitHub Actions’ Categories # of GitHub Actions
243
Utilities
241
Continuous integration
94
Deployment
82
Publishing
75
Code quality
61
Open Source management
58
Code review
57
Testing
49
Project management
47
Dependency management
34
Container CI
23
Chat
23
Reporting
18
Security
9
Monitoring
7
AI Assisted
7
Code search
7
Community
7
Support
5
Mobile CI
4
API management
4
Desktop tools
2
Localization
2
IDEs
2
Mobile
1
Code Scanning Ready
1
Backup Utilities
973
total GitHub Actions

%
24.97%
24.77%
9.66%
8.43%
7.71%
6.27%
5.96%
5.86%
5.04%
4.83%
3.49%
2.36%
2.36%
1.85%
0.92%
0.72%
0.72%
0.72%
0.72%
0.51%
0.41%
0.41%
0.21%
0.21%
0.21%
0.10%
0.10%
119.53

Action is Replace string, which replaces strings that match predeﬁned regular
expressions.

Continuous integration: GitHub Actions responsible for running the
CI pipeline and notifying contributors of test failures in CI tools (e.g., Retry
Step, Chef Delivery).

Deployment: GitHub Actions designed to build and deploy the applica-
tion upon request. One example is the Action called Jekyll Deploy, responsible
for building and deploying the Jekyll site to GitHub Pages.

Publishing: GitHub Actions responsible for automatically publishing
packages to the registry. For example, Action For Semantic Release is an
Action that leverages semantic-release to fully automate the package release
workﬂow, determining the next version number, generating the release notes,
and publishing the package.

Code quality: GitHub Actions that analyze source code (e.g., code
style, code coverage, code quality, and smells) submitted through pull requests
and give feedback to developers via GitHub checks or comments.

In addition, we found that 42 (5.93%) out of 973 GitHub Actions are
veriﬁed by GitHub. Creators are veriﬁed if they have an existing relationship

GitHub Actions: The Impact on the Pull Request Process

11

with GitHub, and GitHub has worked closely with the creator to create these
GitHub Actions.

Table 2: Most-used GitHub Actions across repositories.

Action
actions/checkout
actions/cache
actions/setup-node
actions/upload-artifact
actions/setup-python
github/codeql-action/init
github/codeql-action/analyze
actions/setup-java
actions/download-artifact
codecov/codecov-action

# of Repositories % out of 1,489
96.84%
32.57%
30.96%
23.71%
18.74%
10.48%
10.48%
10.21%
9.94%
9.60%

1,442
485
461
353
279
156
156
152
148
143

Table 2 shows the ten most popular GitHub Actions. The most popular
one, actions/checkout is used by the vast majority (97%) of repositories that
have adopted at least one GitHub Actions. The ﬁve most popular GitHub
Actions are the following:

actions/checkout: A veriﬁed, utility Action that checks out a repository
under $GITHUB WORKSPACE. Therefore, a workﬂow can access the repos-
itory for further workﬂow tasks.

actions/cache: A veriﬁed, utility and dependency management Action that
allows caching dependencies and building outputs to improve workﬂow execu-
tion time.

actions/setup-node: A veriﬁed, utility Action that sets up a Node.js envi-
ronment for use in a workﬂow, allowing users to specify a Node.js version.

actions/upload-artifact: A veriﬁed, utility Action that uploads artifacts
from a workﬂow, allowing developers to share data between jobs and store
data once a workﬂow is complete.

actions/setup-python: A veriﬁed, utility Action that sets up a Python
environment for use in a workﬂow, allowing the use of Python features and
commands.

12

Mairieli Wessel et al.

Research Question 1

How do open-source software projects use GitHub Actions?
Out of 5,000 GitHub repositories, 1,489 (29.8%) adopted the GitHub
Actions feature, with a median of four GitHub Actions used per
repository. We found 973 unique predeﬁned GitHub Actions being
used within the workﬂows. These GitHub Actions are spread across 27
categories. The most recurrent ones are utilities, continuous integration,
and deployment.

Comparison to our previous work:
In our previous work, we
found that only 0.7% of repositories considered in our analysis had adopted
GitHub Actions. This number has changed dramatically, with GitHub
Actions now having found much more widespread adoption.

4.2 How is the use of GitHub Actions discussed by developers? (RQ2)

We categorized 458 GitHub Discussion threads containing the phrase “GitHub
Action”. Table 3 shows an overview of this categorization, indicating how many
threads we found in each category. We present the categories in the following.

Table 3: Categorization of discussions.

Category
help wanted in the context of GitHub Actions (no error message)
marginal mention of GitHub Actions
error/debug message in the context of GitHub Actions
potential of using GitHub Actions
issue reproducing output with GitHub Actions
plan to use GitHub Actions
non-English thread
other

Threads
132
126
87
67
20
16
7
3

%
28.82%
27.51%
19.00%
14.63%
4.37%
3.49%
1.53%
0.66%

Help wanted in the context of GitHub Actions (no error message):
The largest group of Discussion threads that mention GitHub Actions con-
cerns requests for help in the context of the feature. We distinguish requests
for help that mention a speciﬁc error message and are primarily aimed at solic-
iting help in debugging from those that are less speciﬁc. Threads that do not
provide a speciﬁc error message might ask for help in conﬁguring a particular
GitHub Action or mention that automation is not working as intended.
Marginal mention of GitHub Actions: While all threads in our dataset
contain the phrase ‘GitHub Action’, the feature is not the main topic of all
such threads. In some cases, GitHub Actions is mentioned as part of a
long discussion thread announcing a release where GitHub Actions only
aﬀected a small number of features. In other cases, GitHub Actions are

GitHub Actions: The Impact on the Pull Request Process

13

only mentioned several months after the threads were started and they are
only marginally related to the thread topic.

Error/debug message in the context of GitHub Actions: Comple-
mentary to the ﬁrst category discussed above, this category contains discus-
sion threads that start with a speciﬁc error or warning message and ask for
help. In most cases, the error or warning has been provided verbatim by the
developer starting the discussion thread. Errors can come from the GitHub
Actions feature itself or from the various applications, such as linters or code
review bots, that are invoked via a GitHub Action.

Potential of using GitHub Actions: Since GitHub Actions is still a
relatively new feature, it is not surprising that not all developers are aware
of it. This category captures discussions in which developers suggest the use
of GitHub Actions to address a speciﬁc task, e.g., “alternatively, the JIRA
issue transitions at both PR creation and merge can be accomplished using
GitHub Actions listening to those events”6 or “you could use the Vercel CLI
directly as part of a GitHub Action (or similar) to deploy when releasing”.7

Issue reproducing output with GitHub Actions:
In many cases, the
goal of using a GitHub Action is to automate something that has been done
manually (or using a diﬀerent tool) so far. Discrepancies can occur when de-
velopers struggle to reproduce the results that they achieved before with the
help of a GitHub Action, e.g., “This only happens with builds in GitHub
Actions and I am unable to reproduce this locally”.8

Plan to use GitHub Actions: Compared to the large number of GitHub
issues dedicated to discussing projects’ migration plans to GitHub Actions
that we identiﬁed in our previous work, we found a smaller number of such
discussion threads in this work, likely due to the fact that the GitHub Ac-
tions feature is more established now. An example of such a discussion thread
is “Migrating from Azure Pipelines to GitHub Actions”,9 a thread which
discusses the pros and cons of the migration as well as how to do the migration
for a speciﬁc project.

Non-English thread: A small number of discussion threads in our dataset
were not in English.

Other: Three of the discussion threads in our dataset did not ﬁt any of the
above categories and were assigned to the ‘Other’ category. An example is
a discussion thread on GitHub’s own docs project10 about how to structure
documentation about GitHub Actions.

6 https://github.com/cli/cli/discussions/3264
7 https://github.com/vercel/next.js/discussions/20905
8 https://github.com/gatsbyjs/gatsby/discussions/32773
9 https://github.com/hyperledger/fabric/discussions/2456
10 https://github.com/github/docs/discussions/2501

14

Mairieli Wessel et al.

Research Question 2

How is the use of GitHub Actions discussed by developers?
Discussion threads that mention GitHub Actions are predominantly
asking for help in the context of the feature, with or without concrete error
messages. A smaller group of discussion threads concerns plans for using
the feature or is debating its potential.

Comparison to our previous work: A couple of years after the
data collection for our previous work in which we analyzed GitHub issues
about GitHub Actions (since GitHub Discussions did not yet exist), we
now ﬁnd fewer discussions about the potential of GitHub Actions and
more discussions about speciﬁc issues, such as errors and discrepancies.

4.3 What is the Impact of GitHub Actions? (RQ3)

To answer this question, we investigated the eﬀects of GitHub Action adoption
on project activities along four dimensions: (i) merged and non-merged pull re-
quests, (ii) human conversation, (iii) eﬃciency to close pull requests, and (iv)
modiﬁcation eﬀort. We start by investigating how Action adoption impacts
the number of merged and non-merged pull requests. We ﬁt two mixed-eﬀect
RDD models, as described in Section 3.5.2. For these models, the number of
merged/non-merged pull requests per month is the dependent variable. Table 4
summarizes the results of these models. In addition to the model coeﬃcients,
the table also shows the sum of squares, with variance explained for each
variable. We also highlighted the time series predictors time, time after inter-
vention, and intervention in bold.

m = 0.87). However, considering R2

Analyzing the model for merged pull requests, we found that the ﬁxed-
c = 0.93,

eﬀects part ﬁts the data well (R2
variability also appears from project-to-project and language-to-language. Among
the ﬁxed eﬀects, we note that the number of monthly pull requests explains
most of the variability in the model, indicating that projects receiving more
contributions tend to have more merged pull requests, with other variables
held constant. Regarding the Action eﬀects, there is a discontinuity at adop-
tion time, followed by a statistically signiﬁcant decrease after the introduction.
Similarly to the previous model, the ﬁxed-eﬀect part of the non-merged
pull requests model ﬁts the data well (R2
m = 0.71), even though a considerable
amount of variability is explained by random eﬀects (R2
c = 0.82). We note
similar results on ﬁxed eﬀects: projects receiving more contributions tend to
have more non-merged pull requests. In addition, pull requests receiving more
comments tend to be rejected. The eﬀect of Action adoption on the non-
merged pull requests diﬀers from the previous model. Regarding the time series
predictors, the negative trend in the number of non-merged pull requests before
the Action adoption is reversed, toward an increase after adoption.

GitHub Actions: The Impact on the Pull Request Process

15

Table 4: The Eﬀects of GitHub Actions on PRs. The response is
log(number of merged/non-merged PRs) per month.

Merged PRs

Non-merged PRs

Coeﬀs

Sum Sq.

Coeﬀs

Sum Sq.

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(PRComments)
log(PRCommits)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

-0.603***
-0.001**
-0.054***
0.099***
0.841***
0.081***
0.270***
-0.00003
0.036***
-0.008***

0.87
0.93

*** p < 0.001, ** p < 0.01, * p < 0.05
Time series predictors in bold.

0.5
694.6
206.7
10688.9
240.0
295.8
0.0
2.2
1.5

-0.820***
-0.002***
0.136***
0.006
0.403***
0.310***
0.151***
0.012***
-0.041***
-0.007**

0.71
0.82

1.5
457.5
65.9
3349.3
1428.8
214.6
8.3
2.9
1.1

Table 5: The Eﬀects of GitHub Actions on Pull Request Comments. The
response is log(median of comments) per month.

Merged PRs

Non-merged PRs

Coeﬀs

Sum Sq.

Coeﬀs

Sum Sq.

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(TimeToClosePRs)
log(PRCommits)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

-0.086
-0.0004
0.053***
-0.011
-0.013***
0.066***
0.355***
-0.001
-0.023***
0.006***

0.30
0.58

*** p < 0.001, ** p < 0.01, * p < 0.05
Time series predictors in bold.

0.28
14.52
0.12
31.04
1258.88
497.59
0.10
0.90
0.92

-0.196***
0.0002
0.002
0.028***
0.083***
0.108***
0.215***
0.0002
0.034***
-0.018***

0.56
0.69

5.7
110.1
22.9
498.4
3828.9
461.9
11.2
2.0
7.9

To investigate the eﬀects of Action adoption on pull request communica-
tion, we ﬁt one model to merged pull requests and another to non-merged ones.
The median of pull request comments per month is the dependent variable.
Table 5 shows the results of the ﬁtted models. Considering the model of com-
ments on merged pull requests, we found that the combined ﬁxed-and-random
eﬀects (R2
c = 0.58) ﬁt the data better than the ﬁxed eﬀects (R2
m = 0.30),
showing that most of the explained variability in the data is associated with
project-to-project and language-to-language variability, rather than the ﬁxed
eﬀects. Additionally, we also observe that time-to-close pull requests explains
the largest amount of variability in the model, indicating that the commu-

16

Mairieli Wessel et al.

nication during the pull request review is strongly associated with the time
to merge it. Regarding the Action eﬀects, we note no statistically signiﬁcant
trend before adoption; a discontinuity at the adoption time; and an apparent
increase of the time trend after adoption.

Turning to the model of comments on non-merged pull requests, the model
ﬁts the data well (R2
m = 0.56) and there is also variability explained by the
random variables (R2
c = 0.69). This model also suggests that communication
during the pull request review is strongly associated with the time to reject
the pull request. Table 5 shows that there is a discontinuity at adoption time,
followed by a statistically signiﬁcant decrease after the Action adoption.

Table 6: The Eﬀects of GitHub Actions on Time-to-close PRs. The response
is log(median of time-to-close PRs) per month.

Merged PRs

Non-merged PRs

Coeﬀs

Sum Sq.

Coeﬀs

Sum Sq.

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(PRComments)
log(PRCommits)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

-0.803***
0.002
0.357***
-0.037
-0.216***
1.262***
1.698***
-0.0003
-0.124***
0.019**

0.35
0.55

*** p < 0.001, ** p < 0.01, * p < 0.05
Time series predictors in bold.

51.6
373.3
0.1
135.3
24644.5
11716.7
13.2
26.1
9.3

-0.064
0.001
0.291***
-0.133***
-0.059***
2.763***
0.698***
0.039***
-0.327***
0.019

0.50
0.61

158
2075
145
5211
93257
4617
57
181
9

We ﬁtted two RDD models where median of time to close pull requests per
month is the dependent variable. The results are shown in Table 6. Analyzing
the results of the eﬀect of GitHub Actions on the latency to merge pull
requests, we found that combined ﬁxed-and-random eﬀects ﬁt the data better
than the ﬁxed eﬀects. Although several variables aﬀect the trends of pull re-
quest latency, communication during the pull requests is responsible for most
of the variability in the data. This indicates the expected results: the more
eﬀort contributors expend discussing the contribution, the more time the con-
tribution takes to merge. The number of commits also explains the amount of
data variability, since a project with many changes needs more time to review
and merge them. We observe a discontinuity at adoption time, followed by a
statistically signiﬁcant decrease after the Action’s introduction.

Turning to the model of non-merged pull requests, we note that it ﬁts the
data well (R2
m = 0.50), and there is also a variability explained by the random
variables (R2
c = 0.61). As above, communication during the pull requests is
responsible for most of the variability encountered in the results. Similar to

GitHub Actions: The Impact on the Pull Request Process

17

the previous model, none of the Action-related predictors have statistically
signiﬁcant eﬀects on the time to reject pull requests. We observe an increasing
trend before adoption, followed by a statistically signiﬁcant discontinuity at
adoption. After adoption, however, there is no eﬀect on the time to reject
pull requests since the time after intervention coeﬃcient is not statistically
signiﬁcant.

Table 7: The Eﬀects of GitHub Actions on Pull Request Commits. The
response is log(median of commits) per month.

Merged PRs

Non-merged PRs

Coeﬀs

Sum Sq.

Coeﬀs

Sum Sq.

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(PRComments)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

0.342***
-0.0001
-0.041***
0.010
0.130***
0.444***
0.002
0.036***
-0.006***

0.37
0.60

*** p < 0.001, ** p < 0.01, * p < 0.05
Time series predictors in bold.

0.00
28.90
7.11
327.96
1189.16
3.72
2.14
1.01

0.235***
0.0003
-0.042***
0.008
0.101***
0.524***
-0.006***
0.004
0.013***

0.36
0.48

2.28
111.58
37.73
573.78
2625.12
0.11
0.03
4.15

Finally, we studied whether Action adoption aﬀects the number of com-
mits made before and during the pull request review. Again, we ﬁtted two
models for merged and non-merged pull requests, where the median of pull
request commits per month is the dependent variable. The results are shown
in Table 7. Analyzing the model of commits on merged pull requests, we found
that the combined ﬁxed-and-random eﬀects (R2
c = 0.60) ﬁt the data better
than the ﬁxed eﬀects (R2
m = 0.37). The statistical signiﬁcance of all Action-
related coeﬃcients indicates that the adoption of GitHub Actions aﬀected
the number of commits. We note a statistically signiﬁcant discontinuity at the
adoption time, followed by a decreasing trend after adoption. Additionally, we
can also observe that the number of pull request comments and the number
of contributions per month explains most of the variability in the result. This
result suggests that the more comments and pull requests there are, the more
commits there will be.

Investigating the results of the non-merged pull request model, we also
found that the combined ﬁxed-and-random eﬀects ﬁt the data better than the
ﬁxed eﬀects. Similar to the previous model, the number of pull request com-
ments per month explains most of the variability in the result. Regarding the
time series predictors, the model did not detect any discontinuity at adoption
time. However, the negative trend in the median of commits before the bot
adoption is reversed, toward an increase after adoption.

18

Mairieli Wessel et al.

Research Question 3

What is the impact of GitHub Actions?
After adopting GitHub Actions, on average, there are fewer accepted
pull requests, with more discussion comments and fewer commits, which
take more time to merge. On the other hand, there are more rejected pull
requests, which contain fewer comments and more commits.

Comparison to our previous work: We conﬁrm the results from
our previous work. We have already shown that GitHub Actions increase
the number of rejected pull requests and decrease the number of commits
on merged pull requests.

4.4 How does the impact of GitHub Actions diﬀer across Action
categories? (RQ4)

To investigate the eﬀects of GitHub Action adoption on project activities
across the four most used Action categories in our dataset, we ﬁt thirty-two
mixed-eﬀect RDD models, as described in Section 3.5.2. We considered the
same activity indicators studied in the previous research question: (i) merged
and non-merged pull requests, (ii) human conversation, (iii) eﬃciency to close
pull requests, and (iv) modiﬁcation eﬀort.

Table 8: The Eﬀects of GitHub Actions on Merged Pull Requests. The
response is log(number of merged PRs) per month.

Utilities

CI

Code Quality

Deployment

Coeffs

SS

Coeffs

SS

Coeffs

SS

Coeffs

SS

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(PRComments)
log(PRCommits)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

-0.711***
-0.002***
-0.030*
0.105***
0.823***
0.075***
0.285***
0.001
0.035***
-0.008**

0.88
0.93

*** p < 0.001, ** p < 0.01, * p < 0.05
SS stands for “Sum of Squares”
Time series predictors in bold.

0.1
845.7
243.4
6074.3
152.4
201.9
0.3
1.2
1.0

-0.938***
-0.003***
0.037
0.097***
0.838***
0.066***
0.287***
0.002
0.029
-0.012

0.91
0.94

2.76
372.20
83.95
727.16
14.34
20.65
0.02
0.09
0.27

-0.752***
-0.0004
-0.071**
0.093***
0.901***
0.125***
0.246***
-0.015*
0.063
0.013

0.70
0.92

4.61
262.96
88.59
827.66
18.11
13.58
0.00
0.55
0.24

-0.769***
-0.002**
-0.080**
0.154***
0.876***
0.065*
0.226***
-0.013
0.122***
-0.005

0.95
0.96

14.958
216.624
70.461
294.845
2.123
4.602
0.003
0.685
0.013

We ﬁtted four RDD models for each of the Action categories where num-
ber of merged pull requests per month is the dependent variable. The results
are shown in Table 8. The statistical signiﬁcance of the time series predictors
for utilities indicates that the adoption of GitHub Actions of this category
aﬀected the trend in the number of merged pull requests. In addition, we ﬁt-
ted four RDD models where number of non-merged pull requests per month is
the dependent variable (see Table 9). In the model of code quality GitHub

GitHub Actions: The Impact on the Pull Request Process

19

Table 9: The Eﬀects of GitHub Actions on Non-merged Pull Requests. The
response is log(number of non-merged PRs) per month.

Utilities

CI

Code Quality

Deployment

Coeffs

SS

Coeffs

SS

Coeffs

SS

Coeffs

SS

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(PRComments)
log(PRCommits)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

-0.744***
-0.002***
0.127***
0.004
0.400***
0.318***
0.153***
0.009***
-0.038***
-0.002

0.71
0.82

*** p < 0.001, ** p < 0.01, * p < 0.05
SS stands for “Sum of Squares”
Time series predictors in bold.

0.77
450.75
66.37
1941.50
846.53
127.53
2.95
1.87
0.05

-0.941***
-0.002**
0.154***
0.008
0.413***
0.327***
0.124***
0.008
-0.032
-0.001

0.74
0.84

0.955
125.377
16.053
238.575
104.532
10.735
0.351
0.179
0.001

-1.281***
-0.004***
0.229***
0.010
0.387***
0.312***
0.152***
0.016*
0.004
-0.026**

0.67
0.79

0.449
89.943
12.975
208.773
98.287
11.747
0.069
0.008
0.893

-1.382***
-0.001
0.191**
0.062
0.329***
0.196***
0.182***
0.033***
-0.112*
-0.019

0.72
0.86

2.864
26.420
3.497
46.801
14.421
7.644
0.645
0.708
0.204

Actions, although the model did not detect any discontinuity at adoption
time, the positive trend in the number of rejected pull requests before Action
adoption is reversed toward a decrease after adoption. Considering the other
categories, the Action-related predictors do not have statistically signiﬁcant
eﬀects, meaning the trend in the number of merged and non-merged pull re-
quests is stationary over time and remains unaﬀected by the Action adoption.

Table 10: The Eﬀects of GitHub Actions on Comments of Merged Pull
Requests. The response is log(number of comments on merged PRs)
per month.

Utilities

CI

Code Quality

Deployment

Coeffs

SS

Coeffs

SS

Coeffs

SS

Coeffs

SS

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(TimeToClosePRs)
log(PRCommits)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

-0.114
-0.0003
0.053***
-0.006
-0.018***
0.068***
0.349***
-0.002
-0.021**
0.007**

0.30
0.58

*** p < 0.001, ** p < 0.01, * p < 0.05
SS stands for “Sum of Squares”
Time series predictors in bold.

0.42
14.26
0.21
18.63
803.26
289.59
0.02
0.38
0.79

0.018
-0.0004
0.082**
-0.047*
-0.0001
0.058***
0.421***
-0.006
-0.004
0.009

0.27
0.61

0.134
2.572
0.009
3.828
75.501
43.721
0.093
0.000
0.173

0.340*
0.0002
-0.005
-0.041
0.008
0.067***
0.356***
0.001
-0.002
0.010

0.27
0.54

0.002
0.329
0.024
4.016
66.694
28.000
0.703
0.001
0.125

-0.257
-0.001
0.133**
-0.019
-0.019
0.044***
0.279***
-0.013
0.031
0.004

0.28
0.74

0.1381
1.0812
0.0018
0.0477
9.8729
5.8289
0.4736
0.0513
0.0083

Analyzing the models of human discussions (see Table 10), where the me-
dian of comments per month in merged pull requests is the dependent variable,
we found that the introduction of utility GitHub Actions increases the dis-
cussions by developers on merged pull requests. There is a discontinuity at
adoption time, followed by a statistically signiﬁcant decrease after the utili-
ties’ introduction. Turning to the models where the median of comments per
month in rejected pull requests is the dependent variable, we found that util-

20

Mairieli Wessel et al.

Table 11: The Eﬀects of GitHub Actions on Comments of Non-merged
Pull Requests. The response is log(number of comments on non-merged
PRs) per month.

Utilities

CI

Code Quality

Deployment

Coeffs

SS

Coeffs

SS

Coeffs

SS

Coeffs

SS

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(TimeToClosePRs)
log(PRCommits)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

-0.211***
0.0002
-0.003
0.033***
0.081***
0.107***
0.204***
0.001
0.037***
-0.018***

0.56
0.68

*** p < 0.001, ** p < 0.01, * p < 0.05
SS stands for “Sum of Squares”
Time series predictors in bold.

5.37
105.70
23.66
292.09
2163.48
236.52
5.94
0.92
4.94

-0.013
0.0002
0.023
-0.021
0.120***
0.106***
0.199***
0.009
0.029
-0.027***

0.54
0.68

2.102
21.696
3.051
44.057
276.011
30.276
0.196
0.040
1.512

-0.025
0.001
-0.050
0.035
0.062***
0.118***
0.246***
-0.009
0.061
-0.003

0.53
0.63

2.904
11.326
3.487
35.652
284.727
33.097
0.146
0.402
0.013

-0.355
0.0002
0.043
0.017
0.104***
0.101***
0.141***
0.006
0.007
-0.030**

0.57
0.76

1.248
6.091
0.880
7.606
59.142
5.055
0.882
0.003
0.522

ities, CI, and deployment GitHub Actions have decreased the number of
comments on rejected pull requests.

Table 12: The Eﬀects of
Actions on Time-to-merge Pull Requests. The response is log(median of
time-to-merge PRs) per month.

Utilities

CI

Code Quality

Deployment

Coeffs

SS

Coeffs

SS

Coeffs

SS

Coeffs

SS

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(PRComments)
log(PRCommits)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

-0.672***
0.002
0.315****
-0.054
-0.183***
1.294***
1.739***
0.015*
-0.183***
0.012

0.36
0.55

*** p < 0.001, ** p < 0.01, * p < 0.05
SS stands for “Sum of Squares”
Time series predictors in bold.

50.4
368.7
0.8
202.2
15948.1
7522.1
0.4
38.6
2.2

-1.664***
0.003
0.307**
0.105
-0.327***
1.151***
1.723***
0.0003
-0.107
0.017

0.29
0.52

26.37
53.63
1.93
0.09
1500.36
737.90
0.38
1.63
0.59

-1.078
0.001
0.480***
-0.071
-0.235***
1.268***
1.608***
-0.010
-0.009
-0.008

0.31
0.52

6.83
39.51
1.87
4.28
1288.99
575.56
5.09
0.02
0.08

-2.200**
0.006
0.449**
0.108
-0.384***
1.384***
1.442***
0.005
0.008
0.016

0.36
0.52

45.16
59.82
0.55
3.81
322.79
172.35
2.02
0.01
0.14

Research Question 4

How does the impact of GitHub Actions diﬀer across categories?
Analyzing the four most used types of GitHub Actions, we found that
the number of comments in rejected pull requests consistently decreased
across categories (3 out of 4). Several other indicators also changed after
the adoption of GitHub Actions from the Utilities category: accepted
pull requests (decreased), comments in accepted pull requests (increased),
commits in accepted pull requests (decreased), and commits in rejected pull
requests (increased). In the Code Quality category, the only indicator that
changed is the number of rejected pull requests (decreased).

GitHub Actions: The Impact on the Pull Request Process

21

Table 13: The Eﬀects of
Actions on Time-to-close Pull Requests. The response is log(median of time-
to-close PRs) per month.

Utilities

CI

Code Quality

Deployment

Coeffs

SS

Coeffs

SS

Coeffs

SS

Coeffs

SS

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(PRComments)
log(PRCommits)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

0.023
0.001
0.309***
-0.160***
-0.039*
2.757***
0.772***
0.031***
-0.280***
0.031*

0.50
0.61

*** p < 0.001, ** p < 0.01, * p < 0.05
SS stands for “Sum of Squares”
Time series predictors in bold.

147.0
2213.0
151.0
3436.0
54150.0
3283.0
41.0
86.0
15.0

-0.895*
0.005
0.118
0.120
-0.241***
2.795***
0.681***
0.011
-0.226
0.020

0.47
0.58

108.7
346.3
60.9
246.7
7146.2
337.8
1.1
7.9
0.8

-0.177
0.001
0.509***
-0.285**
0.004
2.642***
0.742***
0.075*
-0.410**
-0.040

0.50
0.58

63.5
348.4
3.8
431.1
6122.8
291.0
0.0
20.9
2.2

0.038
0.004
0.094
-0.054
-0.160
2.827***
0.797***
0.128**
-0.650**
0.010

0.49
0.63

39.80
98.06
9.90
66.34
1687.45
153.57
24.97
20.03
0.06

Table 14: The Eﬀects of
Actions on Commits of Merged Pull Requests. The response is log(number
of commit on merged PRs) per month.

Utilities

CI

Code Quality

Deployment

Coeffs

SS

Coeffs

SS

Coeffs

SS

Coeffs

SS

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(PRComments)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

0.360***
-0.0001
-0.042***
0.008
0.138***
0.460***
0.0004
0.040***
-0.006**

0.38
0.59

0.02
32.11
7.76
213.85
764.69
1.18
1.74
0.49

0.388***
0.001
-0.067**
0.015
0.128***
0.403***
0.005
0.025
-0.007

0.37
0.62

0.335
4.466
1.270
22.456
70.617
0.531
0.079
0.110

0.284*
-0.0002
-0.034
0.026
0.113***
0.420***
0.005
-0.001
-0.006

0.30
0.55

0.000
2.671
1.139
18.121
60.073
0.091
0.002
0.042

0.375
0.0004
-0.088
0.032
0.153***
0.425***
-0.003
0.067
-0.007

0.35
0.69

0.1896
1.5858
0.5889
7.9283
13.8455
0.0398
0.1982
0.0266

*** p < 0.001, ** p < 0.01, * p < 0.05
SS stands for “Sum of Squares”
Time series predictors in bold.

Table 15: The Eﬀects of
Actions on Commits of Non-merged Pull Requests. The response is
log(number of commit on non-merged PRs) per month.

Utilities

CI

Code Quality

Deployment

Coeffs

SS

Coeffs

SS

Coeffs

SS

Coeffs

SS

Intercept
TimeSinceFirstPR
log(TotalPRAuthors)
log(TotalCommits)
log(OpenedPRs)
log(PRComments)
time
interventionTrue
time after intervention

Marginal R2
Conditional R2

0.196***
0.0003
-0.035**
0.010
0.101***
0.517***
-0.003
-0.011
0.009**

0.36
0.48

*** p < 0.001, ** p < 0.01, * p < 0.05
SS stands for “Sum of Squares”
Time series predictors in bold.

2.11
113.35
37.98
341.01
1462.07
0.01
0.06
1.12

0.457***
0.001
-0.084**
0.008
0.118***
0.467***
-0.014*
0.069*
0.001

0.32
0.45

1.163
17.388
6.760
47.491
162.636
0.649
0.813
0.001

0.270
0.0004
-0.049
0.003
0.119***
0.486***
0.011
-0.016
-0.020

0.34
0.44

1.105
12.732
6.040
44.609
161.848
0.089
0.077
0.517

0.344
-0.0005
-0.032
0.012
0.064**
0.586***
-0.020
-0.057
0.036

0.29
0.50

0.689
5.763
1.455
7.677
53.570
0.459
0.076
0.745

22

5 Discussion

Mairieli Wessel et al.

GitHub Actions are largely used in practice—we found GitHub Actions
in circa 30% of the analyzed repositories, with a median of four GitHub Ac-
tions used per repository. This number is way higher than what we found in
our previous work [22]. Projects use GitHub Actions to automate a variety
of steps of the development workﬂow on the GitHub platform. Among the
most common usages is running the continuous integration pipeline. This ob-
servation is in line with Golzadeh et al. [14]’s study that showed that GitHub
Actions are actually replacing other CI tools. Projects also use GitHub Ac-
tions to automate the build and deploy, publish packages to the registry,
check source code quality, etc. Indeed, automation is getting more popular
and tasks traditionally executed by human reviewers are now carried out by
GitHub Actions. Human developers can now focus on other tasks and this
may help to explain some of the changes we observed after the adoption of
GitHub Actions.

We also found that the adoption of GitHub Actions generated discus-
sion within the projects. The largest group of Discussion threads that mention
GitHub Actions concerns requests for help in the context of the feature,
including dealing with errors. Projects should be prepared to assist develop-
ers in debugging and conﬁguring GitHub Actions they adopt. Our results
also revealed that the use of GitHub Actions sometimes makes debugging
more diﬃcult since developers are unable to reproduce locally issues related
to GitHub Actions. We also found several cases of projects discussing the
potential of using GitHub Actions.

Our results suggest that the introduction of GitHub Actions can cause
changes in several activities indicators. In particular, we noted fewer accepted
pull requests, with fewer commits and more communication, and more rejected
pull requests, with less comments and more commits. This may indicate that
project maintainers started to provide clearer feedback on the pull request,
helping them identify major issues on many contributions.

GitHub Actions produce diﬀerent eﬀects on non-merged pull requests
when compared to the eﬀects of adopting software bots—Wessel et al. [39]
reported that the introduction of bots on pull requests’ reviews leads to fewer
rejected pull requests. We also noticed an increase in the median number of
commits on merged pull requests just after adoption. It makes sense from the
contributors’ side since the Action introduces a secondary evaluation step to
the pull request. Especially at the beginning of the adoption, the Action might
increase the number of commits due to the need to meet all requirements and
obtain stable code.

Segmenting the analysis for speciﬁc categories, we found that the num-
ber of comments in rejected pull requests statistically decreases in 3 out of 4
categories as well as in the whole sample, as can be observed in Table ??. Be-
sides this indicator, the Utilities category, which contains the largest number
of GitHub Actions, resembles the whole sample and also showed statistical
diﬀerence in accepted pull requests (decreased), comments in accepted pull

GitHub Actions: The Impact on the Pull Request Process

23

Indicator
Merged PRs
Non-merged PRs
Comments in Merged PRs
Comments in Non-merged PRs
Commits in Merged PRs
Commits in Non-merged PRs
Time to merge a PR
Time to close a PR

Whole Sample Utilities CI Code Quality Deployment

-
+
+
-
-
+
+

-

+
-
-
+

-

-

-

requests (increased), commits in accepted pull requests (decreased), and com-
mits in rejected pull requests (increased). In the Code Quality category, the
only indicator for which we observed a statistically relevant change is the num-
ber of rejected pull requests (decreased), which is in the opposite direction of
the whole sample. We conjecture that such GitHub Actions help to include
more pull requests that would otherwise be rejected.

Our results may also imply possible negative consequences. GitHub Ac-
tions may cause team members to communicate less, potentially reducing the
chances for serendipitous learning and discovery. Adding GitHub Actions
may also lead to overload and noise in notiﬁcations, as also happens with soft-
ware bots [40]. The community still needs guidelines and best practices about
how to build GitHub Actions and adopt them in projects to holistically
consider the dynamics of the project.

5.1 Implications and Future Work

From our results, we have distilled some implications and future research av-
enues for diﬀerent stakeholders.

Researchers can investigate the interplay between software bots and
GitHub Actions, understanding what is the appropriate channel for spe-
ciﬁc tools. Understanding how these automation tools change the teamwork
dynamics is also another open research venue. Additional eﬀort is also nec-
essary to investigate the impact on newcomers, who already face a variety of
barriers [1, 31]. Educators may also see an opportunity in GitHub Actions
to build automation tools to better support their OSS assignments [29].

Practitioners need to make informed decisions about whether to adopt
GitHub Actions into their projects and how to use them eﬀectively. Also,
GitHub Actions might allow them to automate repetitive tasks in their
projects with their own custom GitHub Action. GitHub Actions provides
hundreds of diﬀerent GitHub Actions, potentially making it diﬃcult for
practitioners to decide which Action to use, if any. Our work provides empirical
data on which GitHub Actions are currently used and what their impact
can be on development processes. We hope that this work will help more
repositories to consider adopting GitHub Actions for their projects.

24

Mairieli Wessel et al.

6 Limitations and Threats to Validity

In this section, we discuss the limitations and threats to validity and how we
have mitigated them.

External Validity: Since we selected top-starred software projects, our
ﬁndings might not be generalized to other or all GitHub projects. One way to
overcome this threat is by studying less popular projects hosted on GitHub.
Additionally, even though we considered a large number of projects and our
results indicate general trends, we recommend running segmented analyses
when applying our results to a given project. In addition, we focused on the
same pull request-related variables as in previous work [4, 39, 43], leaving other
eﬀects and artifacts for future work.

Construct Validity: As stated by Kalliamvakou et al. [20], many merged
pull requests appear non-merged. Since we consider the number of merged
pull requests, our results may be aﬀected by this threat. Our study can be
replicated when automated ways of detecting this issue are developed.

Internal Validity: To reduce internal threats, we applied multiple data
ﬁltering steps to the statistical models. We varied the data ﬁltering criteria
to conﬁrm the robustness of our models. For example, we ﬁltered projects
that did not receive pull requests in all months and observed similar phenom-
ena. We also carried out a series of placebo tests [19] using the same model
with the adoption artiﬁcially set to diﬀerent dates to conﬁrm the model’s ro-
bustness. The assumption of exogeneity of the treatment might be a threat.
We added several controls that might inﬂuence the independent variables to
reduce confounding factors. However, in addition to the already identiﬁed de-
pendent variables, there might also be other factors that inﬂuence the results
and further research is necessary to establish causal relations.

7 Related Work

Previous work has investigated a variety of automation tools, including soft-
ware bots, continuous integration/delivery, and GitHub Actions.

7.1 Software Bots

Software bots have been proposed to automate technical and social aspects
of software development activities [24], such as communication and decision-
making [32]. For example, on GitHub, bots are often integrated into the pull re-
quest workﬂow [11] to perform a variety of tasks, including repairing bugs [27],
refactoring source code [42], recommending tools to help developers [3], and
updating outdated dependencies [26]. Wessel et al. [38] identiﬁed 13 categories
of software bots. Van Tonder and Le Goues [34] believe software bots are a
promising addition to a developer’s toolkit as they bridge the gap between
human software development and automated processes.

GitHub Actions: The Impact on the Pull Request Process

25

However, understanding the impact of software bots on human developers’
interaction is a major challenge. Storey et al. [32] highlight that the way that
software bots interact on pull requests can be disruptive and perceived as un-
welcoming. Wessel et al. [40] identiﬁed several challenges caused by bots in pull
requests and built a theory of how human developers perceive annoying bot
behaviors as noise on social coding platforms. Wessel et al. [39, 41] also found
that the adoption of code review bots changes the team dynamics, for exam-
ple, increasing the number of monthly merged pull requests and decreasing
communication among developers.

7.2 Continuous Integration and Continuous Delivery

Continuous Integration and Continuous Delivery (CI/CD) tools aim to bridge
development and operation activities by automating the building, testing, and
deployment of applications [10]. These tools constantly compile incremental
code changes made by developers, build software deliverables, run automated
tests and veriﬁcations, and deploy applications to servers, improving software
quality and productivity [10]. Vasilescu et al. [36] shows that the use of CI leads
to more pull requests being processed, leading to an increase in the number of
pull requests being accepted or rejected. In the context of Computer Science
education, Hu et al. [18] set up a continuous integration service on GitHub to
provide feedback to students about code style and functionality. Prior work has
also investigated the impact of CI and code review tools on GitHub projects [4,
21, 43] across time. While Zhao et al. [43] and Cassee et al. [4] focused on the
impact of the Travis CI tool’s introduction on development practices, Kavaler
et al. [21] turned to the impact of linters, dependency managers, and coverage
reporter tools. A survey by Chen et al. [5] reports that of the hundreds of
billions of dollars spent on developer wages, up to 25% accounts for ﬁxing
bugs [5]. Continuous integration and other automation tools thus hold huge
potential to further reduce human eﬀort and costs by automatically ﬁxing
bugs.

7.3 GitHub Actions

GitHub Actions oﬀer built-in support to automate parts of the software de-
velopment workﬂows that can be considered larger than what can be achieved
with CI/CD tools. Community-developed GitHub Actions can be triggered
by events such as the creation of a pull request or an issue. Golzadeh et al. [14]
showed that, in 18 months of existence, GitHub Actions have become the
dominant CI service, covering more than half of all repositories with a CI.
Software projects are still adjusting GitHub Actions to their dynamics.
Valenzuela-Toledo and Bergel [35] found 11 reasons for changing the GitHub
Actions’ workﬂow. Researchers are also starting to provide their tools via

26

Mairieli Wessel et al.

GitHub Actions to facilitate the integration with real projects. For exam-
ple, Cordeiro et al. [8] oﬀer a GitHub Action for detecting ﬂakiness in time-
constrained tests. Finally, in a prior work [22], we investigate how developers
use GitHub Actions and how several activity indicators change after their
adoption. We explain how this paper extends our prior work in Section 1.
Chen et al. [6] also extended our prior work. They found that 22% of popu-
lar projects adopt GitHub Actions and adoption is correlated with project
popularity and number of contributors and varies per programming language.
They also found that the number of commits, number of pull requests, issue
latency, and pull request latency tend to decrease while the number of issues
closed tends to increase after adopting GitHub Actions.

8 Conclusion

In this paper, we investigate how software developers use GitHub Actions to
automate their workﬂows, how they discuss these GitHub Actions, and what
are the eﬀects of the adoption of such GitHub Actions on pull requests. We
collected and analyzed data from 5,000 active GitHub repositories. Further, to
understand the impact on practice, we statistically analyzed a sample of 662
open-source projects hosted on GitHub.

Firstly, the ﬁndings showed that circa 30% repositories used GitHub Ac-
tions. We also found that 973 unique predeﬁned GitHub Actions were used
within the workﬂows. Further, we collected and analyzed GitHub Actions
related discussions and found that the majority of the threads were related to
developers asking for help. These ﬁndings indicate that GitHub Actions can
introduce additional issues related to debugging and contributing. By model-
ing the data around the introduction of GitHub Actions, we notice diﬀerent
results from merged pull requests and non-merged ones. For merged pull re-
quests, the number of pull requests and commits decrease while comments
increase, and for non-merged pull requests, the number of pull requests and
commits increase while the number of comments decreases.

Our ﬁndings bring to light how adopters are using, discussing, and being
impacted by GitHub Actions. Learning from those adopters can provide in-
sights to assist the open-source community to decide whether to use GitHub
Actions and how to use them eﬀectively. Future work includes the qualitative
investigation of the eﬀects of adopting a GitHub Actions and the expan-
sion of our analysis for considering the eﬀects of diﬀerent types of GitHub
Actions and activity indicators.

Acknowledgements This work was partially supported by the NSF grants 1815503 and
1900903, and the Australian Research Council’s Discovery Early Career Researcher Award
(DECRA) funding scheme (DE180100153)

GitHub Actions: The Impact on the Pull Request Process

27

References

1. Balali S, Steinmacher I, Annamalai U, Sarma A, Gerosa MA (2018) New-
comers’ barriers... is that all? an analysis of mentors’ and newcomers’ bar-
riers in OSS projects. Computer Supported Cooperative Work (CSCW)
27(3):679–714

2. Benjamini Y, Hochberg Y (1995) Controlling the false discovery rate: a
practical and powerful approach to multiple testing. Journal of the Royal
statistical society: series B (Methodological) 57(1):289–300

3. Brown C, Parnin C (2019) Sorry to bother you: Designing bots for eﬀective
recommendations. In: Proceedings of the 1st International Workshop on
Bots in Software Engineering, IEEE Press, BotSE ’19, p 54–58, DOI
10.1109/BotSE.2019.00021

4. Cassee N, Vasilescu B, Serebrenik A (2020) The silent helper: the impact of
continuous integration on code reviews. In: 27th IEEE International Con-
ference on Software Analysis, Evolution and Reengineering, IEEE Com-
puter Society

5. Chen SK, Fuchs WK, Chung JY (2001) Reversible debugging using
program instrumentation. IEEE Transactions on Software Engineering
27(8):715–727, DOI 10.1109/32.940726

6. Chen T, Zhang Y, Chen S, Wang T, Wu Y (2021) Let’s supercharge the
workﬂows: An empirical study of github actions. In: 2021 IEEE 21st Inter-
national Conference on Software Quality, Reliability and Security Com-
panion (QRS-C), IEEE, pp 01–10

7. Cook T, Campbell D (1979) Quasi-Experimentation: Design and Analysis

Issues for Field Settings. Houghton Miﬄin

8. Cordeiro M, Silva D, Teixeira L, Miranda B, d’Amorim M (2021) Shaker:
a tool for detecting more ﬂaky tests faster. In: 2021 36th IEEE/ACM In-
ternational Conference on Automated Software Engineering (ASE), IEEE,
pp 1281–1285

9. Dabbish L, Stuart C, Tsay J, Herbsleb J (2012) Social coding in GitHub:
Transparency and collaboration in an open software repository. In: Pro-
ceedings of the ACM 2012 Conference on Computer Supported Coopera-
tive Work, ACM, New York, NY, USA, CSCW ’12, pp 1277–1286, DOI
10.1145/2145204.2145396

10. Duvall P, Matyas S, Duvall P, Glover A (2007) Continuous Integration:
Improving Software Quality and Reducing Risk. A Martin Fowler signa-
ture book, Addison-Wesley

11. Erlenhov L, de Oliveira Neto FG, Scandariato R, Leitner P (2019) Current
and future bots in software development. In: Proceedings of the 1st Inter-
national Workshop on Bots in Software Engineering, IEEE Press, BotSE
’19, p 7–11, DOI 10.1109/BotSE.2019.00009

12. Ga(cid:32)lecki A, Burzykowski T (2013) Linear mixed-eﬀects models using R: A

step-by-step approach. Springer Science & Business Media

13. Golzadeh M, Decan A, Legay D, Mens T (2020) A ground-truth dataset
and classiﬁcation model for detecting bots in GitHub issue and PR com-

28

Mairieli Wessel et al.

ments. 2010.03303

14. Golzadeh M, Decan A, Mens T (2022) On the rise and fall of CI services in
GitHub. In: 2022 IEEE 29th International Conference on Software Anal-
ysis, Evolution and Reengineering (SANER)

15. Gousios G, Pinzger M, van Deursen A (2014) An exploratory study of
the pull-based software development model. In: Proceedings of the 36th
International Conference on Software Engineering, ACM, pp 345–355
16. Gousios G, Storey MA, Bacchelli A (2016) Work practices and challenges
in pull-based development: The contributor’s perspective. In: Proceedings
of the 38th International Conference on Software Engineering, ACM, New
York, NY, USA, ICSE ’16, pp 285–296, DOI 10.1145/2884781.2884826
17. Hata H, Novielli N, Baltes S, Kula RG, Treude C (2022) Github discus-
sions: An exploratory study of early adoption. Empirical Software Engi-
neering 27(1):1–32

18. Hu Z, Gehringer E (2019) Use bots to improve GitHub pull-request feed-
back. In: Proceedings of the 50th ACM Technical Symposium on Com-
puter Science Education, Association for Computing Machinery, New
York, NY, USA, SIGCSE ’19, p 1262–1263, DOI 10.1145/3287324.3293787
19. Imbens GW, Lemieux T (2008) Regression discontinuity designs: A guide

to practice. Journal of econometrics 142(2):615–635

20. Kalliamvakou E, Gousios G, Blincoe K, Singer L, German DM, Damian D
(2014) The promises and perils of mining GitHub. In: Proceedings of the
11th Working Conference on Mining Software Repositories, ACM, New
York, NY, USA, MSR 2014, pp 92–101, DOI 10.1145/2597073.2597074
21. Kavaler D, Trockman A, Vasilescu B, Filkov V (2019) Tool choice mat-
ters: JavaScript quality assurance tools and usage outcomes in GitHub
projects. In: Proceedings of the 41st International Conference on Software
Engineering, IEEE Press, pp 476–487

22. Kinsman T, Wessel M, Gerosa M, Treude C (2021) How do software devel-
opers use GitHub actions to automate their workﬂows? In: Mining Soft-
ware Repositories Conference (MSR), IEEE

23. Kuznetsova A, Brockhoﬀ PB, Christensen RHB (2017) lmertest package:
tests in linear mixed eﬀects models. Journal of Statistical Software 82(13)
24. Lin B, Zagalsky A, Storey M, Serebrenik A (2016) Why developers are
slacking oﬀ: Understanding how software teams use Slack. In: Proceedings
of the 19th ACM Conference on Computer Supported Cooperative Work
and Social Computing Companion, ACM, New York, NY, USA, CSCW
’16 Companion, pp 333–336, DOI 10.1145/2818052.2869117

25. McHugh ML (2012) Interrater reliability: the kappa statistic. Biochemia

medica 22(3):276–282

26. Mirhosseini S, Parnin C (2017) Can automated pull requests encourage
software developers to upgrade out-of-date dependencies? In: Proceedings
of the 32nd IEEE/ACM International Conference on Automated Software
Engineering, IEEE Press, ASE 2017, p 84–94

27. Monperrus M (2019) Explainable software bot contributions: Case study of
automated bug ﬁxes. In: Proceedings of the 1st International Workshop on

GitHub Actions: The Impact on the Pull Request Process

29

Bots in Software Engineering, IEEE Press, Piscataway, NJ, USA, BotSE
’19, pp 12–15, DOI 10.1109/BotSE.2019.00010

28. Nakagawa S, Schielzeth H (2013) A general and simple method for obtain-
ing R2 from generalized linear mixed-eﬀects models. Methods in ecology
and evolution 4(2):133–142

29. Pinto GHL, Figueira Filho F, Steinmacher I, Gerosa MA (2017) Training
software engineers using open-source software: the professors’ perspective.
In: 2017 IEEE 30th Conference on Software Engineering Education and
Training (CSEE&T), IEEE, pp 117–121

30. Sheather S (2009) A modern approach to regression with R. Springer Sci-

ence & Business Media

31. Steinmacher I, Conte T, Gerosa MA, Redmiles D (2015) Social barriers
faced by newcomers placing their ﬁrst contribution in open source soft-
ware projects. In: Proceedings of the 18th ACM conference on Computer
supported cooperative work & social computing, pp 1379–1392

32. Storey MA, Zagalsky A (2016) Disrupting developer productivity one bot
at a time. In: Proceedings of the 2016 24th ACM SIGSOFT International
Symposium on Foundations of Software Engineering, ACM, New York,
NY, USA, FSE 2016, pp 928–931, DOI 10.1145/2950290.2983989

33. Thistlethwaite DL, Campbell DT (1960) Regression-discontinuity analy-
sis: An alternative to the ex post facto experiment. Journal of Educational
psychology 51(6):309

34. van Tonder R, Goues CL (2019) Towards s/engineer/bot: Principles for
program repair bots. In: Proceedings of the 1st International Workshop
on Bots in Software Engineering, IEEE Press, BotSE ’19, p 43–47, DOI
10.1109/BotSE.2019.00019

35. Valenzuela-Toledo P, Bergel A (2022) Evolution of GitHub action work-
ﬂows. In: 2022 IEEE 29th International Conference on Software Analysis,
Evolution and Reengineering – Early Research Achievements (SANER-
ERA)

36. Vasilescu B, Yu Y, Wang H, Devanbu P, Filkov V (2015) Quality and
productivity outcomes relating to continuous integration in GitHub. In:
Proceedings of the 2015 10th Joint Meeting on Foundations of Software
Engineering, ACM, New York, NY, USA, ESEC/FSE 2015, pp 805–816,
DOI 10.1145/2786805.2786850

37. Wessel M, Steinmacher I (2020) The inconvenient side of software bots
on pull requests. In: Proceedings of the IEEE/ACM 42nd International
Conference on Software Engineering Workshops, Association for Com-
puting Machinery, New York, NY, USA, ICSEW’20, p 51–55, DOI
10.1145/3387940.3391504

38. Wessel M, de Souza BM, Steinmacher I, Wiese IS, Polato I, Chaves AP,
Gerosa MA (2018) The power of bots: Characterizing and understanding
bots in OSS projects. Proc ACM Hum-Comput Interact 2(CSCW):182:1–
182:19, DOI 10.1145/3274451

39. Wessel M, Serebrenik A, Wiese I, Steinmacher I, Gerosa MA (2020) Eﬀects
of adopting code review bots on pull requests to OSS projects. In: 2020

30

Mairieli Wessel et al.

IEEE International Conference on Software Maintenance and Evolution
(ICSME), pp 1–11, DOI 10.1109/ICSME46990.2020.00011

40. Wessel M, Wiese I, Steinmacher I, Gerosa MA (2021) Don’t disturb
me: Challenges of interacting with software bots on open source soft-
ware projects. Proceedings of the ACM on Human-Computer Interaction
5(CSCW2):1–21

41. Wessel M, Serebrenik A, Wiese I, Steinmacher I, Gerosa MA (2022)
Quality gatekeepers: Investigating the eﬀects of code review bots on
pull request activities. Empirical Software Engineering 27(108), DOI
10.1007/s10664-022-10130-9

42. Wyrich M, Bogner J (2019) Towards an autonomous bot for automatic
source code refactoring. In: Proceedings of the 1st International Work-
shop on Bots in Software Engineering, IEEE Press, Piscataway, NJ, USA,
BotSE ’19, pp 24–28, DOI 10.1109/BotSE.2019.00015

43. Zhao Y, Serebrenik A, Zhou Y, Filkov V, Vasilescu B (2017) The im-
pact of continuous integration on other software development practices: a
large-scale empirical study. In: Proceedings of the 32nd IEEE/ACM In-
ternational Conference on Automated Software Engineering, IEEE Press,
pp 60–71

