2
2
0
2

n
u
J

6
1

]
L
D
.
s
c
[

2
v
0
1
6
9
0
.
4
0
2
2
:
v
i
X
r
a

MEDFORD: A HUMAN AND MACHINE READABLE METADATA
MARKUP LANGUAGE

A PREPRINT

Polina Shpilker
Department of Computer Science
Tufts University
Medford, MA

John Freeman
Department of Computer Science
Tufts University
Medford, MA

Hailey McKelvie
Department of Computer Science
Tufts University
Medford, MA

Jill Ashey
Department of Biological Sciences
University of Rhode Island
Kingston, RI

Jay-Miguel Fonticella
Department of Computer Science
Tufts University
Medford, MA

Hollie Putnam
Department of Biological Sciences
University of Rhode Island
Kingston, RI

Jane Greenberg
College of Computing and Informatics
Drexel University
Philadelphia, PA

Lenore J. Cowen
Department of Computer Science
Tufts University
Medford, MA
cowen@cs.tufts.edu

Alva Couch
Department of Computer Science
Tufts University
Medford, MA
alva.couch@tufts.edu

Noah M. Daniels
Department of Computer Science and Statistics
University of Rhode Island
Kingston, RI
noah daniels@uri.edu

June 17, 2022

ABSTRACT

Reproducibility of research is essential for science. However, in the way modern computational
biology research is done, it is easy to lose track of small, but extremely critical, details. Key details,
such as the speciﬁc version of a software used or iteration of a genome can easily be lost in the
shufﬂe, or perhaps not noted at all. Much work is being done on the database and storage side of
things, ensuring that there exists a space to store experiment-speciﬁc details, but current mechanisms
for recording details are cumbersome for scientists to use. We propose a new metadata description
language, named MEDFORD, in which scientists can record all details relevant to their research.
Human-readable, easily-editable, and templatable, MEDFORD serves as a collection point for all
notes that a researcher could ﬁnd relevant to their research, be it for internal use or for future replica-
tion. MEDFORD has been applied to coral research, documenting research from RNA-seq analyses
to photo collections.

1

Introduction

Corals comprise thousands of different organisms, including the animal host and single celled dinoﬂagellate algae,
bacteria, viruses, and fungi that coexist as a holobiont, or metaorganism [3]. Thus, corals are like cities, rather than
the individual animals that inhabit or visit them, as corals provide factories, housing, restaurants, nurseries, and more
for an entire ecosystem. Research on coral reefs is ever more pressing, given their local and global contributions to

 
 
 
 
 
 
A PREPRINT - JUNE 17, 2022

marine biodiversity, coastal protection, and economics and their sensitivity to climate change [7, 17]. Research in this
area requires integration of interdisciplinary data across multiple environments and a range of data types: ’omic data
such as gene expression data generated using RNA-Seq (RNA transcript sequencing), image and time-lapse video,
and physical and environmental measurements including light and water temperature, to name but a few. The coral
research community has long been committed to sharing and open data formats, and both individual researchers and
large funding agencies have invested heavily in making data available [11, 10, 19, 5] and FAIR (ﬁndable, accessible,
interoperable, and reusable) [16].

Effective data sharing for coral research, as in all data-intensive domains, requires metadata, which is essential for
data organization, discovery, access, use, reuse, interoperability, and overall management [9]. The growing amount
of digital data over the last several decades has resulted in a proliferation of metadata standards supporting these
functions [1, 12]. However, the proposed mechanisms to create metadata have been focused primarily on the ease of
machine parsing and have recommended schema that are cumbersome and difﬁcult for humans attempting to create,
edit, or read the metadata.
If creating metadata in the appropriate format is difﬁcult, or requires expert curators,
then fewer scientists will be able to comply with metadata recommended standards, leading to scientiﬁc data that is
not discoverable, and thus not reusable. Meanwhile, an increasing amount of scientiﬁc data in multiple countries
(including in the US and the EU) now falls under mandated data sharing policies that require speciﬁcation of adequate
metadata for discovery. Thus, there is a need for a format that streamlines the process of providing what is mandated
by law and policy.

For the purposes of maintaining and transferring data itself, there already exists a format known as BagIt [8] that
can handle stable transfer of arbitrary ﬁles and their directory structure. BagIt speciﬁes the structure of a zip ﬁle
that contains an arbitrary directory structure, a payload manifest, and a remote manifest. This structure upholds the
organization of data folders, ensuring that related ﬁles can remain within the same subfolder. The payload manifest
ensures that all data is transferred without error by storing the data’s hash prior to data transfer. The remote manifest
also allows researchers to specify remote ﬁles that are relevant to the data in the bag. However, the BagIt structure
has no inherent descriptor of metadata, although it acts as a convenient means of theoretically transferring metadata.
Essenially, BagIt has ﬁle-based metadata, but does not proscribe a speciﬁc metadata format.

Our research team is building on top of BagIt by developing and implementing the MEtaData Format for Open Reef
Data (MEDFORD). The MEDFORD markup language ﬁle format is simultaneously human and machine writable and
readable. In this regard, we are inspired by the speciﬁcation language for the Protein Data Bank (PDB) [2, 18]. PDB
ﬁles are easily machine-parsable, but unlike JSON ﬁles or other commonly-used database submission ﬁle types, are
also easily human-readable. This human-readability allows for human veriﬁcation of their contents, although PDB ﬁles
are still too complex for manual writing. Unlike the PDB format, MEDFORD is intended to be extensible. MEDFORD
is designed to work in conjunction with BagIt’s ﬁlesystem convention, allowing easily accessible and interoperable
bundles of data and metadata to be created and stored. The MEDFORD language is currently implemented as the
medford parser, which is itself written in Python.

MEDFORD is initially targeted at coral holobiont transcriptomics data and coral image collections, with the sub-
sequent goal of supporting metadata for additional research ﬁelds. The urgent need for international collaboration
around saving coral reefs, plus the sheer complexity of the types and modalities of data the coral scientiﬁc community
generates (from omics data, to image data with geospatial and temporal components, to temperature and color mea-
surements), make corals a good domain choice. This paper provides the rationale for current work and introduces the
MEDFORD (version 1.0) metadata scheme.

MEDFORD will enable interdisciplinary coral reef data to be FAIR [16]. We are currently building the back-end
infrastructure to translate between MEDFORD and make it compatible with other existing databases and systems such
as Resource Description Framework (RDF), ultimately supporting the interoperability and reusability in FAIR as well;
export to RDF is planned for version 1.1 of the medford parser.

This paper reports on our ﬁrst use case, which focuses on the coral holobiont. Speciﬁcally, we focus on coral holo-
biont transcriptomics data (e.g., RNA-Seq, one of the most powerful and common types of omics experiments to
explore the genetic basis of factors that lead to coral resilience or vulnerability to environmental stressors), where
we build the needed complexity to manage spatial-temporal holobiont expression metadata into MEDFORD from the
start. We chose this use case due to difﬁculty we experienced collecting and organizing metadata about existing coral
transcriptomics datasets. A coral researcher, untrained in programming and not a database expert, will be able to di-
rectly produce and interpret MEDFORD ﬁles more easily than working with RDF authoring tools. We have developed
the medford parser to automatically translate MEDFORD ﬁles into existing ﬁle format standards for depositing in
databases and repositories. MEDFORD will enable transcriptomic data to be ﬁndable, accessible, and interoperable.
While MEDFORD is capable of becoming a general-purpose metadata format, we are implementing the speciﬁc use

2

A PREPRINT - JUNE 17, 2022

case of coral data to both provide a proof of concept and to aid the coral research community via a set of detailed
metadata constructions speciﬁc to coral research. An extended abstract describing MEDFORD appeared as [13].

2 MEDFORD Design Principles

Languages proposed for metadata speciﬁcation normally consider ease of either human generation and parsing, or
machine generation and parsing. Human-legible formats, such as unstructured text ﬁles, are easy to write but difﬁcult
to store in databases or even provide publicly. Meanwhile, highly structured formats such as RDF and JSON are
exceptional for import into databases, but are nearly impossible for a researcher to write on the ﬂy. MEDFORD ﬁlls a
previously unmet need by intentionally balancing ease of human and machine generation and parsing simultaneously.

In addition to being designed as both a machine and human readable and writable format, we also decided that MED-
FORD describes the entirety of a project’s metadata within a single ﬁle. This allows MEDFORD to be extremely
lightweight, and it can be simply incorporated into a BagIt bag without any modiﬁcation. This ensures that if a
MEDFORD ﬁle is created, it is straightforward to transfer it alongside its related data.

MEDFORD’s design principles are informed by the those underlying highly successful metadata standards, such as
the Dublin Core [15], Ecological Metadata Language (EML) [6], and the Data Document Initiative (DDI) [14], while
addressing additional requirements enabling ease of metadata creation and other aspects. The design requirements for
creating MEDFORD are as follows:

1. A mechanism for use by scientists at the point of data collection.
2. A human-readable and human-understandable format for specifying metadata.
3. A simple and easily understandable syntax for specifying metadata elements.
4. The ability to create and reuse templates for specifying metadata for common data types.
5. Applicability beyond the coral use case, to other research domains.
6. The ability to author metadata in a user’s preferred text editor without a dependency on special-purpose

software.

7. The ability to detect and explain errors in metadata speciﬁcation via easily understandable error messages

targeted toward scientists.

8. Automatic translation into a number of useful machine-readable formats after initial speciﬁcation, including
the Resource Description Format (RDF), Extensible Markup Language (XML) and JavaScript Object notation
(JSON), as well as database formats. This could ease some costs currently incurred; for instance, BCO-DMO
removes the responsibility for translating to different formats from the scientist to that of a specialized curator,
at substantive cost.

These requirements are justiﬁed by past experience of scientists crafting metadata [12]. Web-based metadata interfaces
can be cumbersome when one is entering metadata for a set of similar data ﬁles or publications. The machine-
readable formats XML, RDF, and JSON are difﬁcult to understand and edit for scientists who are not programmers.
Furthermore, error messages for mistakes in XML, RDF, and JSON speciﬁcations are cryptic for those same people.
Plain-text speciﬁcation of metadata, such as the NSF’s BCO-DMO resource [4] is intensive in human labor for those
who must then translate it into a machine-readable form in order for BCO-DMO to ingest such data (currently, BCO-
DMO requires metadata to be submitted in Rich Text Format, and it is then transcribed by a human operator). Thus,
there is a need for an intermediate format that is both machine-readable and human-readable and understandable by
the scientists most qualiﬁed to specify the metadata correctly.

MEDFORD aims to solve problems associated with specifying interdisciplinary research metadata, as demonstrated
by our initial use case applied to coral reef ’omics data. Coral researchers study a wide variety of properties of corals
(bioinformatics, growth, bleaching, phylogeny) and for a variety of purposes (ecology, basic biology, biomedicine).
Connecting the work of this diverse group of researchers requires developing sustainable scientiﬁc databases so that
researchers can discover each others’ datasets, integrate them into more novel research, and support further scientiﬁc
discovery. These databases need to support both accurate analysis of research as well as data discovery and reuse.
In general, however, the principles above apply to any scientiﬁc metadata speciﬁcation problem, and the speciﬁc
extensions identiﬁed here may be supplemented for other scientiﬁc disciplines. Thus MEDFORD can be used as a
tool for metadata creation in any scientiﬁc discipline.

The requirements above are realized by MEDFORD by adding design elements that satisfy the above principles:

1. A contextual grammar, devoid of parentheses and the need to close clauses with speciﬁc end statements.

3

A PREPRINT - JUNE 17, 2022

2. A simple way to denote kinds of metadata, starting with an @, and containing at most three parts: the major
tag, minor tag, and the metadata itself. A major tag (such as @Contributor) indicates the type of metadata
being described, while a minor tag (such as ORCID in the context of @Contributor-ORCID) indicates the
name of the metadata attribute being described.

3. A two-level hierarchy based on major and minor tags organizes the metadata into categories and subcategories
which provide the relational structure without compromising the simplicity of the metadata description.

4. A simple concept of user-extensible formatting, in which metadata details not covered by the main keywords

can be added via notes.

Consider the following example of a @Contributor clause, where @Contributor is the major tag and ORCID and
Role are the minor tags which associate those metadata with that contributor.

@Contributor Hollie M. Putnam
@Contributor-ORCID 0000-0003-2322-3269
@Contributor-Role Corresponding Author

If we wanted to additionally include this contributor’s email address, we simply add an additional line:

@Contributor Hollie M. Putnam
@Contributor-ORCID 0000-0003-2322-3269
@Contributor-Role Corresponding Author
@Contributor-Email hputnam@uri.edu

2.1 The MEDFORD Language Syntax

In this section we discuss the principles of the design of the syntax of a MEDFORD ﬁle format for metadata. MED-
FORD is written in UTF-8 though all reserved tokens and characters fall within the ASCII range, while user-deﬁned
tags may use extended UTF-8 characters. MEDFORD tags are indicated with the @ character. Anything after an @
character, until the next space in the ﬁle, is read as a tag by the medford parser. There are two other protected symbols
that have special meanings in the MEDFORD language: these are # which is treated as a comment character: charac-
ters after a # on the same line are ignored and not processed by the medford parser. Finally, the $$ string (two dollar
signs in a row) is used to indicate the beginning and end of a string that should be parsed by LATEXmath mode: this
enables a MEDFORD language parser to either render or pass through special characters from raw MEDFORD ﬁles,
in which non-ascii characters are strongly discouraged.

The following design principles are important in MEDFORD ﬁle syntax:

• MEDFORD ﬁles use the ASCII character set whenever possible. The characters @, #, and $$ (as an enclosing

pair to denote LaTeX source) are reserved and protected.

• MEDFORD tags are referred to as @-tags and always start with the @ character. Particular @-tags are given

meanings, and formatting requirements and rules that are either recommended or required

• If a version of the MEDFORD language parser encounters an @-tag it does not recognize, the parser passes
its associated text through verbatim, treating it identically to how @COMMENT is treated. Thus, scientists are
free to make up new tags that extend what is currently deﬁned in the language.

• MEDFORD is initially being developed for corals data, and so @Date and @time and geospatial coordi-
nate data are common and important. These tags have recommended standardized ASCII formats, and the
medford parser does type checking on these ﬁelds. These tags have corresponding *-Unstructured equiv-
alents for ﬂexibility, which are not type checked. For instance, @Date-Unstructured might be used to
denote part of a date, where the precise date is unknown (for instance, “Fall 2021”).

To make MEDFORD ﬁles more easily human-readable, considering our analogy to the protein databank, we adopted
a similar approach to the Fasta ﬁle format, where each header line is distinguished by an ‘>’ symbol. We chose to
use the ‘@’ character, as it is commonly used for tagging users or keywords in systems like GitHub and Twitter, and
is not found in everyday text except for emails. Therefore, a line headed by an ‘@’ symbol can be assumed to be
a MEDFORD tag in all cases. Meanwhile, later ‘@’ characters have no effect on the medford parser, as only ‘@’
characters at the very beginning of a line matter.

This is best explained by example. Consider the example of specifying a pipeline used for RNA-seq analysis of coral
data (note that the metadata associated with a tag can be arbitrarily long and may span multiple lines):

4

A PREPRINT - JUNE 17, 2022

@Software R
@Software-Version 4.0.4 ("Lost Library Book")
@Software-Notes Packages used include dplyr, stringr,

and genefilter.

@Software DESeq2
@Software-Version 1.28.1
@Software-Notes Used as a package in R.
@Software-Notes Installed through BioCManager.

The Software tag speciﬁes a piece of software involved in the research. In this case, R is being described as a relevant
piece of software, with a Version tag used to specify what version of R was used as this is critical information. An
important feature of this example is the arbitrary difference between the way R packages are described. The author has
determined that DESeq2 is a critical package, so decided to use a separate Software tag to describe it. Meanwhile,
dplyr and stringr were useful in the analysis but not critical, so were left as Notes on the R Software block. This
showcases one of the strengths of the MEDFORD ﬁle format; researchers are free to determine whether something is
important enough to warrant having a dedicated Software tag, or if they can be listed as an arbitrary Note on a parent
piece of software.

2.2 MEDFORD Data Provenance

One of the major goals of MEDFORD is to enable the simple association and description of related but possibly
separate data resources. The BagIt ﬁlesystem convention [8] provides a convenient way to wrap multiple ﬁles into a
consistent directory structure. However, BagIt’s own metadata capabilities are limited to describing the ﬁles present
or how to fetch them from a network. By including a MEDFORD ﬁle into a bag, we are able to therefore describe
the metadata as well as reference or include the data themselves. MEDFORD does not try to supplant the W3C
data provenance standard (RDF) but rather provide a tangible, simple format that meets users’ need. A MEDFORD
metadata description could be automatically converted into an RDF representation.

All MEDFORD ﬁles are deﬁned in reference to a BagIt bag, although the special use-case of an empty bag is common
and acceptable. The BagIt bag binds a set of ﬁles to the MEDFORD ﬁle according to the BagIt standard, where these
ﬁles describe a variety of resources, including source code, scientiﬁc papers, or raw data, each represented by a major
tag in the MEDFORD ﬁle. The versioning and origins of that ﬁle are marked using a secondary major tag, where the
tag can represent that the bag is considered to be the primary and authoritative source for the data or resource. Other
secondary major tags describe the ﬁle as either a copy of an existing source, or simply a pointer to a URI where the
resource can be obtained.

@Data Primary
@Data Copy
@Data Ref

@Code Primary
@Code Copy
@Code Ref

@Paper Primary
@Paper Copy
@Paper Ref

MEDFORD’s place in a BagIt directory structure is that the MEDFORD (.mfd) ﬁle is placed at the top level of the
bagit directory structure. Any ﬁles carried along in the BagIt archive exist as Copy or Original directives (whether
Data, Code, or Paper). The BagIt manifest-sha512.txt manifest refers to these ﬁles and their checksums. In
contrast, any ﬁles only referred to using Ref directives are not listed in the BagIt manifest and are instead described in
the BagIt’s fetch.txt as remote resources.

@Data Primary and @Data Copy both refer to resources that have been packaged with the MEDFORD metadata ﬁle,
and should be available from the bag in a self-contained fashion, without having to visit external sources. From the
point of view of the bag itself, there is no difference between these two tags; the difference is based on user context:
@Data Primary means that the BagIt bag is considered to be the primary and authoritative source for the data or
resource; @Data Copy means that BagIt has placed a copy of the data or resource into the bag, but that it does not
claim the primary role. Finally @Data Ref refers to DOIs, URLs, or other pointers to data or resources that are not
placed in the bag, but rather represent external databases or resources.

Here, we provide two potential use cases as examples.

Example use case: Researchers wish to create an index of all publicly available RNAseq raw data that have been
released on the Internet. They create a MEDFORD ﬁle to point to all these data resources, but they will store none of

5

A PREPRINT - JUNE 17, 2022

these themselves; the MEDFORD ﬁle will just be an index, and all @Data tags will be of the form @Data Ref. This is
an example MEDFORD ﬁle which would be associated with an empty bag.

Example use case: Researchers wish to store all the necessary data and programs necessarily to replicate their RNAseq
analysis. They are the owners/collectors of the raw transcriptomic data, which they do downstream analysis using a
couple of small home-grown scripts to ﬁlter bad reads, but then complete their downstream analysis using several pop-
ular software packages, including STAR and DESEQ2. They then used a novel dimension reduction package called
SQUISHSEE from other researchers to visualize their results. They elect to include their transcriptomic data and home-
grown scripts in the bag, and use @Data Primary and @Code Primary tags to reference them. The @Code Primary
tag is not appropriate for STAR, DESEQ2 and SQUISHSEE, since they do not own or maintain these resources; they
need to decide whether to use @Code Copy and place a copy of these resources into the bag or not, in which case they
would use instead the @Code Ref tag. In this case, because STAR and DESEQ2 are well-maintained and supported
standard packages, they elect @Code Ref, and don’t include a copy of the code in the bag. On the other hand SQUISH-
SEE is only used by a handful of researchers, and they worry about its longevity. Thus they also put a copy of the
version of SQUISHSEE they are using in the bag, with a @Code Copy tag. Later, when DESEQ2’s new update uses
a library that is not completely standard, they update the bag and decide to put a copy of the old version of DESEQ2
into the bag, just in case.

for

the MEDFORD language is available at https://github.com/TuftsBCB/

A speciﬁcation document
MEDFORD-Spec.

3 Reusability

3.1 Tag Extensibility

MEDFORD has a set of pre-deﬁned major and minor tags that it uses for conversion into various other formats, but if
a user cannot ﬁnd a tag that they believe suits the metadata that they are storing, they can simply deﬁne one of their
own without any additional overhead. All the user must do is use it as if it were already deﬁned, and the data and its
structure will be read by the MEDFORD parser. Any novel tags deﬁned this way will be treated as *-Unstructured
tags, and not validated, though they will persist across copies of the MEDFORD ﬁle. This provides a dynamic aspect
whereby any model created or adjusted to include the new user-deﬁned tag could be output to any secondary formats
without any changes in MEDFORD structure.

3.2 MEDFORD Templates

Due to the simple plaintext structure of a MEDFORD ﬁle, it is easy to create templates. A MEDFORD ﬁle can be
partially ﬁlled out, saved, copied, and then re-used. For example, a lab may template out a list of contributors and
funding sources and when an individual needs to create a MEDFORD ﬁle they simply create a copy of this MEDFORD
ﬁle and change contributor roles as necessary before ﬁlling out the rest of the ﬁle. MEDFORD ﬁles describing similar
data may also be re-used like this.

For example, consider a researcher who commonly works on one species of coral, such as Pocillopora damicornis.
The researcher could use a MEDFORD template with the commonly-used tags ﬁlled in, shown below:

@Species Pocillopora damicornis
@Species-Loc Sabago Isthmus, Panama
@Species-ReefCollection 06/12/20
@Species-Cultured University of Miami Coral Resource

Facility

@Species-CultureCollection 06/21/20

For further reuse, the researcher may also include MEDFORD’s “invalid value” token, which can be used to force
users of a template to ﬁll it out with complete information. The medford parser would require the user to ﬁll in the
speciﬁc placeholders ([..]) prior to validation. This eliminates the possibility that a researcher could accidentally
leave a value for an older version of the template, further error-prooﬁng MEDFORD templates. The same template,
but using these reserved template tokens, is shown below:

@Species Pocillopora damicornis
@Species-Loc Sabago Isthmus, Panama
@Species-ReefCollection [..]

6

A PREPRINT - JUNE 17, 2022

@Species-Cultured University of Miami Coral Resource

Facility

@Species-CultureCollection [..]

In future work, we plan to include a ‘#include directive which allows the contents of one ﬁle to be imported into and
validated in the context of another MEDFORD ﬁle.

3.3 MEDFORD Macros

To further alleviate the workload placed on researchers to document their work, MEDFORD includes the concept of a
macro. Similar to a variable deﬁned in BASH, a macro is a string name that is directly replaced with another, longer
string. In MEDFORD, a macro is deﬁned by specifying a backtick (‘), @, a one-word name, and the macro body
(which can contain multiple lines, ending at the next reserved word, which could begin another macro deﬁnition or
could be a regular tag). For example, in lieu of typing their institute ﬁve times to document each of their collaborators
at the same institution, they can deﬁne a macro as follows: ‘@myinstitute 100 Institute Drive, State, Zip

Everywhere ‘@myinstitute is used, it will automatically be replaced by 100 Institute Drive, State, Zip.

3.4 Backend Extensibility

Many other formats are simple to add to the MEDFORD parser. For example, one may wish to submit their data
to a database such as BCO-DMO [4], which requires an RTF (rich text format) ﬁle structure with unique content
requirements. For example, for a data submission, BCO-DMO requires at least some form of identiﬁcation for which
@Expedition the samples were collected on. This identiﬁcation, may be either some combination of ShipName or
CruiseID, etc. In deﬁning a backend translation to BCO-DMO for MEDFORD, the MEDFORD parser can ensure
this is upheld. This ability to act as an intermediary allows for a lab to write a single MEDFORD ﬁle to describe their
research and export it to a multitude of different formats.

Similarly to BCO-DMO, other formats can be added to the MEDFORD parser easily; tutorials will be available in
the github repository. It is worth noting that metadata associated with user-deﬁned tags will not be parsed but simply
passed along verbatim. For instance, the @Image-Coverage tag in the coral image data example below does not
specify any units; if this tag were expected by some destination format, units might be assumed by convention, but
would otherwise be left to the user (the user could also specify units in plain text in the metadata, e.g. “6.2 degrees”).

4 Example Medford Files

4.1 MEDFORD File for RNA-Seq data

@Method Illumina HiSeq2500
@Method-Type Sequencing
@Method-Company Dovetail Genomics, Santa Cruz, CA,

USA

@Method-Sample Healthy
@Method-Note Chicago libraries, more sensitive to

DNA size

@Code_Ref HiRise
@Code_Ref-Type Assembly of genome scaffolds

@Code_Ref BLAST
@Code_Ref-Type Identify and remove scaffolds of

non-coral origin

@Code_Ref-Note Searched against databases from
Symbiodiniaceae, Bacteria, and viruses

4.2 MEDFORD File for coral image data

@Image 05-01-19_Image3
@Image-Date 2019-05-01T19:20:30.45
@Image-Site LTER 4

7

A PREPRINT - JUNE 17, 2022

@Image-Habitat Outer 10m
@Image-Pole 3-4
@Image-Quadrant 4
@Image-Coral Acropora
@Image-Coverage 6.2

...

@Taxonomy Cnidaria
@Taxonomy-Type Phylum

@Taxonomy Anthozoa
@Taxonomy-Type Class
@Taxonomy-Parent Cnidaria

...

@Region LTER 1 polygon including

LTER 0 on north shore
@Region-NorthernCoord -17.47
@Region-SouthernCoord -17.49

5 MEDFORD Implementation

5.1 MEDFORD Parser

The MEDFORD parser, known as medford, essentially has two roles. First, it validates the syntax and structure of a
provided MEDFORD ﬁle as described earlier. Additionally, the parser validates the content of a provided MEDFORD
ﬁle, such as ensuring date ﬁelds are in the correct datetime format. In the future, we plan to support further validation
of speciﬁc metadata, such as ORCID, geographic coordinates, and grant numbers from various funding agencies. The
purpose of validation is to ensure that the ﬁle is written in correct MEDFORD format, including major and minor tags,
and that each tag is being applied to some data. For example, a user cannot describe an ORCID without having some
Contributor name with which to associate it. We note that the current MEDFORD speciﬁcation is silent as to whether
or not to preserve the ordering of tags (for example @Contributor does not specify an author order and relies on
@Contributor-Role to indicate signiﬁcance). However, the medford implementation will preserve order of tags in
a future version.

The second role of the medford parser is to optionally compile an input MEDFORD ﬁle into some destination format.
The current medford parser specializes in translating a MEDFORD ﬁle into a Bag; the medford parser can gather all
the ﬁles referenced in a given MEDFORD ﬁle, and creates a Bag following all BagIt speciﬁcations. This Bag can then
be used to transfer all of the metadata and data of a research effort. The current plans include to add additional output
types in the future, such as RDF.

The medford parser is written in Python (3.8), relying on the Pydantic parsing module to validate the MEDFORD
syntax and structure.

Due to the amount of control a compiler has to have over the input, creating a parser normally causes the vocabulary
to become extremely deﬁned and controlled. The medford parser, however, was developed speciﬁcally to avoid
restricting the acceptable vocabulary. While the parser can only validate major and minor tags it is aware of, it will
not break on novel inputs.

As an example, consider the following @Code Ref block, which references code from an external source that was
referenced in a study. The OS and Language minor tags are novel, and MEDFORD will not perform any validation on
them.

@Code_Ref MEDFORD Source Repo
@Code_Ref-Version 1.0
@Code_Ref-URI https://github.com/TuftsBCB/medford
@Code_Ref-Type GitHub
@Code_Ref-Language Python
@Code_Ref-OS Linux MacOS

8

A PREPRINT - JUNE 17, 2022

Importantly, the medford parser is speciﬁcally developed such that the syntactical parsing logic is entirely separate
from the vocabulary deﬁnition. Given a desire to begin validating the contents of a novel tag, a user can easily add
their own validation without having to interact with the parsing logic. All vocabulary validation deﬁnitions are stored
entirely independently of the parsing logic, and can be edited with minimal consequences. In this @Code Ref example,
a user could implement the validation for the OS minor tag to ensure it is some combination of of Windows, MacOS,
and Linux.

Given that the medford parser is open-source, a research group may add validation to their local copy of the MED-
FORD parser without needing to interact with other groups, though we will be welcoming any and all pull requests to
add validation that users feel is missing.

5.2 Error Handling

MEDFORD errors come in three major forms:

• Syntax Errors: errors in the MEDFORD formatting in the provided ﬁle, such as multiple uses of the same

macro name.

• Validation Errors: errors in the content or format of metadata provided for known major-minor tag combi-
nations. For instance, a @Date ﬁeld that does not contain a valid datetime string, or a @Contributor-ORCID
ﬁeld whose ORCID is not valid would both constitute validation errors.

• Missing Data Errors: Required ﬁelds are missing, such as @Date major tag without a corresponding

@Date-Note minor tag.

All three types of errors are errors that a standard user is expected to encounter during use, especially during ﬁrst-time
use or novel data type description. Special care has been invested in ensuring these errors will be as human-legible as
possible.

For all expected errors, medford provides an error text to the user that contains the following information: the line
number where the error was encountered, the major-minor tags involved at that line, and an error text description.

Two examples of medford’s error messages and their improvements are shown below.

First, a standard Pydantic error contains information that is highly speciﬁc to the backend implementation of medford
parser and irrelevant for standard use.

Contributor -> 0 -> 1 -> __root__

Corresponding Authors must have a provided validated email
(type=value_error.incomplete_data_error)

This has been improved with the addition of the line number in which the error appeared in the MEDFORD ﬁle, and
removal of the implementation-speciﬁc array indices.

Line 1 : @Contributor has incomplete information:

Corresponding Authors must have a provided validated email.

Secondly, some major and minor token combinations may have multiple valid formats, and Pydantic’s standard error
handling will throw a unique error for each failed format validation. For example, a @Date may currently either be in
a Date or DateTime format, as speciﬁed by Python:

Date -> 0 -> 1 -> desc -> 0 -> 1

invalid date format (type=value_error.date)

Date -> 0 -> 1 -> desc -> 0 -> 1

invalid datetime format (type=value_error.datetime)

The medford parser automatically consolidates these errors into a singular error for legibility:

Line 7 : @Date-desc is of the wrong type:

invalid date format.

9

A PREPRINT - JUNE 17, 2022

6 Availability of medford and the Coral RNAseq collection

The medford parser is open-source and available under the MIT license at: https://github.com/TuftsBCB/
medford as well as via PyPi as the package medford, so it can be installed by invoking pip install medford. A
speciﬁcation for the MEDFORD language is available at https://github.com/TuftsBCB/MEDFORD-Spec.

Some example ﬁles are provided in the parser directory, however, a separate repository is also in development for a
larger collection of example MEDFORD ﬁles. This repository is available on GitHub at: https://github.com/
TuftsBCB/MEDFORD-examples. This repository is a collection of primarily Coral RNA-Seq experiments. This
repository also contains partial MEDFORD ﬁles for use as templates.

7 Discussion and Future Work

This manuscript presents MEDFORD, a lightweight metadata format initially targeted at coral reef research data,
intended to be easy for researchers without programming expertise to create and maintain. Initially supporting the
FAIR principles [16] of interoperability and reuse, MEDFORD aims to support all FAIR principles.

Currently, MEDFORD relies on editing ASCII or UTF-8 text, but will soon be able to extract text content from
Microsoft Word ﬁles.

One possible critique of MEDFORD is the variety of possible tags. For instance, it may be challenging for
a user to remember whether the needed tag is @Contributor-Association, @Contributor-Institution, or
@Contributor-Location. A rich template library can mitigate this, by providing examples that a user can simply
ﬁll in. A searchable template library portal (similar to LATEX’s CTAN) would enable users to ﬁnd applicable templates
as the template ecosystem grows. In the future, support for the Language Server Protocol will allow a user of any
compatible text editor to get intelligent suggestions and autocompletions for common tags. This will also mitigate the
likelihood of minor typographical errors in tags causing them to be unrecognized. To further mitigate the likelihood
of typographical errors, the medford implementation will reject a minor token without an accompanying major token.
Further user testing and feedback will result in further enhancements to the MEDFORD language and the medford
parser implementation.

As a consequence of the MEDFORD parser’s compilation use, MEDFORD ﬁles have a lifecycle. There are raw, un-
validated MEDFORD ﬁles, there are validated MEDFORD ﬁles, and ﬁnally there are MEDFORD ﬁles that have been
compiled (such as in the case of a BagIt compilation). The difference between these is a critical. A researcher needs
to know whether or not a MEDFORD ﬁle has been validated before they try to submit it to a database.

A major future goal will be output of RDF and support for linked open data. We hope to add the ability to translate a
MEDFORD ﬁle (and created bag, if applicable) into an RDF, as well as the data-1 compliance this involves.

An unsolved problem is how to handle multiple authors, and conﬂicting claims of ownership. While there is nothing
preventing a MEDFORD ﬁle from being passed between collaborators, keeping track of changes is a challenge. How
can one researcher be certain that they are editting the most recent version of a MEDFORD ﬁle? Perhaps even two
researchers are editing their own copies of the same MEDFORD ﬁle. Technically both are the most up-to-date in their
own facet: one researcher added the coral sample metadata while another added the sequencing pipeline metadata.
There exist some solutions to this in external tools such as GitHub, but is it viable to ask MEDFORD adopters to use
these tools?

One solution we are in the process of considering for a future version of MEDFORD is to implement the concept of
the include directive. Rather than restricting a MEDFORD ﬁle to a single ﬁle, include directives will enable users
to work in separate, smaller ﬁles that will automatically be combined by the MEDFORD parser. This allows each
MEDFORD ﬁle to be dedicated to a speciﬁc portion of the research project, such as one ﬁle for coral sample metadata
and another for sequencing pipeline metadata. This partially solves the multiple authorship problem, as each author
can be held responsible ensuring all collaborators have the most up-to-date version of the metadata they are authoring.

The “R” in MEDFORD currently represents “reef” as our initial application domain has been coral reef data. However
it stands to reason that the “R” might represent “research” in the future.

8 Author contributions statement

P.S., J.F., L.C., A.C. and N.D. came up with the initial design for MEDFORD; P.S., J.F., H.M., J-M.F, J.A., and H.P.
tested and implemented initial MEDFORD examples; P.S., A.C. and N.D. worked on the back end medford parser;
P.S., J.G., L.C, A.C., and N.D. helped write and review the manuscript.

10

9 Acknowledgments

This work is supported in part by funds from the National Science Foundation under NSF grants OAC-1939263.
OAC-1939795 and HDR-BIO NSF-OAC #1940233.

A PREPRINT - JUNE 17, 2022

10 Competing interests

The authors declare NO Competing Interest.

References

[1] Alex Ball, Jane Greenberg, Keith Jeffery, and Rebecca Koskela. RDA metadata standards directory working

group. 2016.

[2] Helen M. Berman, John Westbrook, Zukang Feng, Gary Gilliland, T. N. Bhat, Helge Weissig, Ilya N. Shindyalov,

and Philip E. Bourne. The Protein Data Bank. Nucleic Acids Research, 28(1):235–242, 01 2000.

[3] Thomas CG Bosch and Margaret J McFall-Ngai. Metaorganisms as the new frontier. Zoology, 114(4):185–190,

2011.

[4] C. L. Chandler, R. C. Groman, D. Kinkade, et al. BCO-DMO: Stewardship of marine research data from proposal

to preservation. American Geophysical Union, 2016:OD24B–2457, 2016.

[5] Simon D Donner, Gregory JM Rickbeil, and Scott F Heron. A new, high-resolution global mass coral bleaching

database. PLoS One, 12(4):e0175490, 2017.

[6] Eric H Fegraus, Sandy Andelman, Matthew B Jones, and Mark Schildhauer. Maximizing the value of ecolog-
ical data with structured metadata: an introduction to ecological metadata language (EML) and principles for
metadata creation. Bulletin of the Ecological Society of America, 86(3):158–168, 2005.

[7] Terry P Hughes, Michele L Barnes, David R Bellwood, Joshua E Cinner, Graeme S Cumming, Jeremy BC
Jackson, Joanie Kleypas, Ingrid A Van De Leemput, Janice M Lough, Tiffany H Morrison, et al. Coral reefs in
the anthropocene. Nature, 546(7656):82–90, 2017.

[8] John Kunze, Justin Littman, Elizabeth Madden, John Scancella, and Chris Adams. The bagit ﬁle packaging

format (v1. 0). Technical report, 2018.

[9] Jeremy Leipzig, Daniel N¨ust, Charles Tapley Hoyt, Stian Soiland-Reyes, Karthik Ram, and Jane Greenberg. The

role of metadata in reproducible computational research. CoRR, abs/2006.08589, 2020.

[10] Y. J. Liew, M. Aranda, and C. R. Voolstra. Reefgenomics.Org - a repository for marine genomics data. Database,

2016, 12 2016. baw152.

[11] Joshua S Madin, Mia O Hoogenboom, Sean R Connolly, Emily S Darling, Daniel S Falster, Danwei Huang,
Sally A Keith, Toni Mizerek, John M Pandolﬁ, Hollie M Putnam, et al. A trait-based approach to advance coral
reef science. Trends in Ecology & Evolution, 31(6):419–428, 2016.

[12] Jian Qin, Alex Ball, and Jane Greenberg. Functional and architectural requirements for metadata: Support-
ing discovery and management of scientiﬁc data. In International Conference on Dublin Core and Metadata
Applications, pages 62–71, 2012.

[13] Polina Shpilker, John Freeman, Hailey McKelvie, Jill Ashey, Jay-Miguel Fonticella, Hollie Putnam, Jane Green-
berg, Lenore Cowen, Alva Couch, and Noah M. Daniels. Metadata format for open reef data (medford). In
Emmanouel Garoufallou, Mar´ıa-Antonia Ovalle-Perandones, and Andreas Vlachidis, editors, Metadata and Se-
mantic Research, pages 206–211, Cham, 2022. Springer International Publishing.

[14] Mary Vardigan. The DDI matures: 1997 to the present. IASSIST Quarterly, 37(1-4):45–45, 2014.

[15] Stuart L Weibel and Traugott Koch. The Dublin core metadata initiative. D-lib magazine, 6(12):1082–9873,

2000.

[16] M. D. Wilkinson, M. Dumontier, et al. The FAIR guiding principles for scientiﬁc data management and steward-

ship. Scientiﬁc data, 3(1):1–9, 2016.

[17] Anna J Woodhead, Christina C Hicks, Albert V Norstr¨om, Gareth J Williams, and Nicholas AJ Graham. Coral

reef ecosystem services in the anthropocene. Functional Ecology, 33(6):1023–1034, 2019.

11

A PREPRINT - JUNE 17, 2022

[18] Jasmine Y Young, John D Westbrook, Zukang Feng, Ezra Peisach, Irina Persikova, Raul Sala, Sanchayita Sen,
John M Berrisford, G Jawahar Swaminathan, Thomas J Oldﬁeld, et al. Worldwide protein data bank biocuration
supporting open access to high-quality 3D structural biology data. Database, 2018, 2018.

[19] L. Yu, T. Li, L. Li, et al. SAGER: a database of Symbiodiniaceae and Algal Genomic Resource. Database, 2020,

07 2020. baaa051.

12

