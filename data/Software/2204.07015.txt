2
2
0
2

r
p
A
4
1

]

O
R
.
s
c
[

1
v
5
1
0
7
0
.
4
0
2
2
:
v
i
X
r
a

(Preprint) AAS 21-739

NASA/GSFC’S FLIGHT SOFTWARE CORE FLIGHT SYSTEM
IMPLEMENTATION FOR A LUNAR SURFACE IMAGING MISSION

Mohammed Eleffendi*, Daniel Posada†, M. ˙Ilhan Akbas¸ ‡, and Troy Henderson§

The interest in returning to the Moon for research and exploration has increased
as new tipping point technologies are providing the possibility to do so. One of
these initiatives is the Artemis program by NASA, which plans to return humans
by 2024 to the lunar surface and study water deposits in the surface. This program
will also serve as a practice run to plan the logistics of sending humans to explore
Mars. To return humans safely to the Moon, multiple technological advances and
diverse knowledge about the nature of the lunar surface are needed. This paper
will discuss the design and implementation of the ﬂight software of EagleCam, a
CubeSat camera system based on the free open-source core Flight System (cFS)
architecture developed by NASA’s Goddard Space Flight Center. EagleCam is
a payload transported to the Moon by the Commercial Lunar Payload Services
Nova-C lander developed by Intuitive Machines. The camera system will capture
the ﬁrst third-person view of a spacecraft performing a Moon landing and collect
other scientiﬁc data such as plume interaction with the surface. The complete
system is composed of the CubeSat and the deployer that will eject it. This will be
the ﬁrst time WiFi protocol is used on the Moon to establish a local communication
network.

INTRODUCTION

In 2019, NASA’s Commercial Lunar Services (CLPS) contracts allowed the research and devel-
opment of multiple, rapid, commercial deliveries of research instruments and technology demon-
strations from private and governmental parties to the lunar surface. The ﬁrst CLPS contracts were
awarded to Intuitive Machines, Astrobotic, and Orbit Beyond.1 With this award Intuitive Machines
plans on taking a variety of scientiﬁc payloads to the lunar surface using the Nova-C lunar lander,
providing a valuable approach to gather scientiﬁc data.

Intuitive Machines challenged Embry-Riddle Aeronautical University (ERAU) students to design,
build, test, and operate a deployable camera to capture images of the landing of their lander, Nova-
C. EagleCam was developed for this purpose, and it will provide a full 360◦ ﬁeld-of-view (FOV) of
the spacecraft landing and landing site by using an array of cameras.

This paper focuses on the ﬂight software development of EagleCam and the deployer that will
eject it. A modular and reusable ﬂight software that could be used in a later similar mission is

*Masters Student, Electrical Engineering and Computer Science, Embry-Riddle Aeronautical University, 1 Aerospace
Blvd, Daytona Beach, FL., 32114
†Ph.D. Candidate, Aerospace Engineering, Embry-Riddle Aeronautical University, 1 Aerospace Blvd, Daytona Beach,
FL., 32114
‡Assistant Professor, Electrical Engineering and Computer Science, Embry-Riddle Aeronautical University, 1 Aerospace
Blvd, Daytona Beach, FL., 32114
§Assistant Professor, Aerospace Engineering, Embry-Riddle Aeronautical University, 1 Aerospace Blvd, Daytona Beach,
FL., 32114

1

 
 
 
 
 
 
desired. NASA has developed open-source frameworks for developing modular and reusable ﬂight
software. One of these is the F Prime (F’) spaceﬂight software released by NASA’s Jet Propulsion
Laboratory which is a component-driven framework and enables rapid development and deployment
of spaceﬂight and other embedded software applications.2 There is also the core Flight System
(cFS) released by NASA’s Goddard Space Flight Center which is a platform and project independent
reusable software framework and set of reusable software applications.3 Both frameworks satisfy
the modularity and reusability requirements and have ﬂight heritage. However, cFS was chosen for
this mission because it is easier to interface with the Nova-C ﬂight software.

The second section of the paper will focus on brieﬂy describing the mission and its requirements,
the third section will provide a brief introduction about the cFS and discuss the ﬂight software
developed by ERAU, the fourth section will discuss the hardware part of the system, the ﬁfth section
will discuss several tests that the system underwent, and ﬁnally some conclusions about the cFS.

MISSION BACKGROUND

EagleCam is a 1.5U CubeSat that will take a third person view of a landing on the lunar surface.
In order to achieve this, the system utilizes two on-board computers (OBCs) and a few peripherals
as seen in Fig. 1. One OBC is inside the deployer, and a second inside the CubeSat. The deployer
OBC is connected to the EagleCam OBC via WiFi.
It is also connected to the Nova-C lander
through Ethernet. Nova-C will transmit the data it receives from the deployer OBC to mission
control through its high gain antenna.

Figure 1. EagleCam and deployer subsystems.

The system developed by ERAU consists of the EagleCam CubeSat and the deployer that will
deploy it to the lunar surface. The CubeSat consists of the EagleCam OBC and the following
peripherals:

1. Inertial Measurement Unit (IMU) which is a 9 DOF sensor module that will transmit the
EagleCam acceleration, gyroscope and magnetometer measurements to the EagleCam OBC
through a serial connection starting just before deployment and ending after EagleCam has
landed on the lunar surface.

2

Nova-CDeployer OBCEagleCam OBCEthernetWiFiIMUSerial3x NISACamerasUSB2x ArducamI2C, SPIEDSGPIOBatteryModuleI2CMission FlagsHealth & statusPeripheral dataMission FlagsHealth & statusPeripheral dataMission ControlHigh gain antennaHealth & statusPeripheral dataOther data2. Three Nano Immersive Situational Awareness (NISA) cameras, each one with a 186◦ FOV
lens, which will take pictures of the Nova-C lunar lander as it is landing on the lunar surface.
Each NISA camera contains an internal OBC that is connected to the EagleCam OBC via
USB and will run its own software upon receiving a trigger from the EagleCam OBC. All
NISA cameras’ OBCs are running the same software that will continuously take pictures and
store them on the NISA OBC in which it is running. The EagleCam OBC will download
these pictures from each NISA OBC using the File Transfer Protocol (FTP).

3. Two ArduCam camera sensors that will take pictures of Nova-C before and after the Electro-
dynamic Dust Shield (EDS) is activated. The main function of these two cameras is to test
the EDS efﬁcacy (The experiment will be described more in the following sections). Each
ArduCam is connected to the EagleCam OBC via I2C which is used to initialize the camera,
and SPI which is used for image transmission to the EagleCam OBC.

4. An EDS that will be mounted in front of the ArduCam lenses. It will be controlled by the
ﬂight software using a GPIO pin that turns the EDS on and off. The main function of the EDS
is to clean the camera lenses from the lunar dust that will accumulate on them after landing.

5. A battery module that houses the Lithium-Ion batteries which will power on the EagleCam
OBC and its peripherals. This battery module has an I2C interface to read the battery status.

EagleCam is contained within the deployer during launch and ﬂight. It will be under transit lunar
injection for approximately six days before approaching lunar orbit. Then Nova-C will perform a
few orbits for navigation purposes, and ﬁnally it will start the descent maneuver.

When Nova-C reaches lunar orbit and performs terrain relative navigation, it will start the descent
operations to navigate to the intended landing site. EagleCam will be deployed to the lunar surface
at approximately 30 m from the surface when the lander is on the terminal descent phase where
there is only vertical velocity.

The EagleCam OBC will transmit health and status messages in addition to all telemetry collected
by its peripherals to the deployer OBC via WiFi. The deployer OBC stores the data collected by the
EagleCam peripherals which will later be sent to Nova-C, and forwards health and status messages
from the EagleCam OBC to Nova-C which sends them to mission control. In addition, the deployer
OBC forwards the necessary mission ﬂags to the EagleCam OBC upon receiving them from Nova-
C. All communication between the deployer OBC and Nova-C is done via Ethernet.

The EagleCam concept of operations before ejection consists of the following four phases:

• Phase 1: Nova-C powers on the deployer including its OBC. The deployer OBC boots up and

enters standby mode.

• Phase 2: Nova-C sends a software ﬂag to the deployer OBC to power on the EagleCam OBC
and its peripherals. The deployer OBC reacts to the command and the EagleCam OBC boots
up. After boot-up, it initializes the peripherals and enters standby mode during which it sends
health and status messages to the deployer OBC. Then, these messages are forwarded to the
Nova-C OBC. Then, Nova-C relays these messages to mission control.

• Phase 3: At about 50 m altitude above the lunar surface, Nova-C sends a software ﬂag to the
deployer OBC to command the EagleCam to start taking pictures and buffer IMU data. The

3

deployer OBC forwards this ﬂag to the EagleCam OBC which reacts to it by commanding
the cameras’ OBCs to start their software that will capture the images.

• Phase 4: At 30 m, Nova-C sends a software ﬂag to the deployer OBC to indicate to the
EagleCam OBC that it has been deployed. The deployer OBC forwards this ﬂag to the Ea-
gleCam OBC to coordinate data collection and peripheral control. Then, Nova-C triggers a
hardware signal to the deployer and deploys EagleCam. This phase takes place when Nova-C
is performing its vertical terminal descent into the surface as staged in Fig. 2.

Figure 2. Top: EagleCam’s on-orbit ConOps. Bottom: EagleCam’s surface ConOps.

After the ejection maneuver, EagleCam will approach the lunar surface following a ballistic tra-
jectory. During this maneuver, it will buffer IMU data, capture and send images of Nova-C, in
addition to health and status messages to the deployer OBC. Upon EagleCam landing, which hap-
pens approximately six seconds after deployment, EagleCam starts surface operations, which is to
capture images with the ArduCam cameras before and after the EDS is activated, dump IMU buffer
to storage, complete image download from the NISA OBCs and complete peripheral data transfer to

4

the deployer OBC. Rsync is being used for ﬁle transfer and it runs periodically to sync data between
the EagleCam OBC and deployer OBC starting from EagleCam OBC boot up.

Once the lunar regolith settles from the lunar lander landing, the Electrostatic Dust Shield system
will be tested. The purpose of the EDS is to clean the lunar dust off the camera lenses. This technol-
ogy is a demonstration for the Electrostatics and Surface Physics Laboratory in the Swamp Works at
NASA’s Kennedy Space Center (KSC).4 If this technology if successful in the lunar environment, it
could have multiple applications, particularly to protect hardware such as tools or experiments and
astronauts from lunar dust.5

The EagleCam mission success criterion is to transmit at least one picture of Nova-C as it is
landing on the lunar surface. Therefore, if for any reason EagleCam breaks on impact, the mission
will still be considered successful as long as the images of the Nova-C landing are transmitted to
the deployer OBC in time. Therefore, the ﬂight software is setup in a way such that it will transmit
images from the EagleCam OBC to the deployer OBC as soon as they become available.

Figure 3. Exploded view of the ﬁrst iteration of the CubeSat and its components, including the OBC.

EagleCam will experience a variety of thermal environments from being in the shadow during
trans lunar injection to being in the sun after deployment. The lunar thermal environment is based
on radiation from the sun and lunar surface, and conduction of the surface.6 This is important as
temperature can physically affect the hardware. During surface operations, the thermal environ-
ment of EagleCam is dominated by the radiation and conduction of the lunar surface, which are
highly dependent on the sun angle and optical properties.7 This is studied and taken into account to
guarantee that the software and hardware can operate nominally before the environment surpasses
the survivability temperature of the components.8 The temperature is expected to fall within the
range of 262 to 312 K or -11 to +39◦ C. Furthermore, the lunar atmosphere presents a signiﬁcantly
low pressure of 10−4 P a.9 This implies that the software must run efﬁciently to guarantee mission
success under this hazardous environment.

CORE FLIGHT SYSTEM ARCHITECTURE

cFS is a platform and project independent reusable software architecture, and set of reusable
software applications10 with NASA’s Technology readiness Level 8-9.11–14 Therefore, it was chosen

5

for this mission because it provides the base tools for building a modular, reliable, robust, and
reusable ﬂight software and because of ease of interface with the Nova-C lander.

The cFS architecture allows dividing the ﬂight software into separate applications where each
application handles a certain function of the mission. An application can publish its data to other
apps to consume, and it can subscribe to data from other apps. Message routing between apps is
handled by the software bus core service. cFS provides other core services, these are shown in green
in Fig. 4 and Fig. 5. The Scheduler app (SCH) which is shown in blue is a cFS app that provides
a method of generating software bus messages at pre-determined timing intervals. This allows a
system to operate in a Time Division Multiplexed (TDM) fashion with deterministic behavior when
combined with a real-time OS such as VxWorks or Preempt RT Linux.

The EagleCam OBC and the deployer OBC are each running an instance of the cFS and both in-
stances are exchanging messages via WiFi. Each cFS instance is running its own set of applications
as depicted in Fig. 4 and Fig. 5.

EagleCam cFS Implementation

Fig. 4 shows the architecture of the EagleCam cFS instance. Applications were reused from
NASA repositories such as Scheduler (SCH), Telemetry Output (TO) and Command Ingest (CI),
Other applications were created for the EagleCam mission. The following list consists of the mission
applications that were created which comprise the EagleCam cFS that is running on the EagleCam
OBC and their functions:

• IMU App: Initializes the IMU and buffers its data before dumping it to a ﬁle to be sent to
ground control. The app starts buffering data upon receiving mission phase 3 ﬂag from the
deployer OBC.

• NISA App: Commands the three NISA OBCs to start their software that will take the pictures

upon receiving mission phase 3 ﬂag from the deployer OBC.

• ArduCam App: Initializes the two ArduCam camera sensors and waits for mission phase ﬂag
3. Once the ﬂag has been received, the app waits until EagleCam lands on the lunar surface
before it takes a few pictures with the ArduCam cameras, then waits again for the EDS to
clean the lenses, then takes a few more pictures after the EDS is done and deactivated.

• EDS App: Activates the EDS after a time delay counting from the reception of the mission
phase 3 ﬂag, and waits for some time before it deactivates it. The time delay to activate
the EDS is programmed to allow enough time for the lunar regolith to settle on the Ardu-
cam cameras’ lenses. The time during which the EDS is activated is programmed based on
experiments conducted to determine how long the EDS takes to clean the lenses.

• Battery App: Reads battery status from the battery module and publishes it on the software

bus to be sent to ground control as part of the health and status message.

Deployer cFS Implementation

Figure 5 shows the architecture of the deployer cFS instance. Applications from NASA reposi-
tories have been reused such as SCH, TO and CI. Due to cFS modularity, other applications were

6

Figure 4. cFS application architecture running on EagleCam’s OBC.

Figure 5. cFS application architecture running on the deployer OBC.

created speciﬁcally for this mission. The following list consists of the mission applications that were
created which comprise the deployer cFS that is running on the deployer OBC and their functions:

• WiFi App: Constantly ensures WiFi connectivity to the EagleCam OBC and checks the status
of the deployer WiFi chip. The check on the deployer WiFi chip can serve as an indication as
to how long the WiFi chip survives the lunar environment after EagleCam has completed its
mission.

7

• Nova-C App: Receives mission phase ﬂags from Nova-C and forwards the necessary ﬂags to
the EagleCam OBC. It also forwards the health and status message from the EagleCam OBC
to Nova-C.

The health and status message is sent as a CCSDS (Consultative Committee for Space Data

Systems) consists of the following:

• WiFi connection status

• Deployer WiFi chip status

• EagleCam OBC battery status

• EagleCam peripheral data folder size

Application Architecture

The applications of both subsystems were developed following the general application design15

seen in Fig. 6 suggested by NASA.10 These applications are programmed in C language.

Figure 6. cFS generic app design.

The complete diagrams for each application can be found in the appendix.

HARDWARE IMPLEMENTATION

The software was implemented on a NVIDIA Jetson TX2 running Ubuntu Linux 18.04 as seen
in Fig. 7. The Jetson TX2 has one Dual-Core NVIDIA Denver 2 64-Bit CPU and one Quad-
Core ARM® Cortex®-A57 MPCore. The Denver processor is shut down and the software runs
completely on the ARM processor. The TX2 board is connected to a Connect Tech Elroy carrier
board (Fig. 8) to provide connections to different peripherals such as USB, Ethernet, and Serial.

To complement the avionics, the Vectornav VN-100 (Fig. 9) IMU is used. This device was
conﬁgured with a serial data rate of 40Hz to stream and log 3-axis accelerometer ﬁltered and raw
data, 3-axis gyroscope data, and 3-axis magnetometer data to try and do a local magnetic ﬁeld map.

8

Figure 7. Software layers.

Figure 8. NVIDIA Jetson TX2 with Connect Tech Elroy carrier board.

Figure 9. Rugged IMU Vectornav VN-100.

EagleCam will also incorporate three NISA cameras developed by Canadensys which are space-
rated (Fig. 10). Each camera is 12MP with a ﬁsheye lens of 186◦ FOV. Therefore, two of these
cameras are installed back-to-back on the CubeSat to have a 360◦ FOV. The third NISA camera is
located on top of the structure as a redundant sensor to capture the lander, but to also capture images
of space.

Figure 10. NISA TRL9 Engineering model camera and 3D print of ﬂight qualiﬁed hardware.

In addition to the NISA cameras, another set of two 5MP camera sensors from ArduCam are

9

Figure 11. Example of image acquired from the NISA Engineering Model. In the
middle of the image a model of the Nova-C lander can be seen. The real lander will
be seen approximately in the same proportions as the model that is shown.

used (Fig. 12). These cameras’ purpose is to test EDS efﬁcacy and test off-the-shelf components for
short-term space missions. One camera will provide redundancy and will serve to provide a different
perspective of the lunar landscape. The second camera will be used to perform the technological
demonstration of the EDS technology described previously to remove dust from the camera lens.
These images can then be used to quantify the cleanliness of the image and how much dust was
removed.

Figure 12. ArduCam with OV5642 sensor.

SYSTEM TESTING

The ﬂight software has gone through basic functionality testing and unit testing to ensure stability
and reliability. In addition to software testing, a signiﬁcant step for the mission is the testing of the
off-the-shelf hardware that are not space-rated to ensure they will contribute to mission success.
Except for the NISA cameras, the Jetson TX2 and its peripherals are not space-rated. Therefore,
in-lab tests were performed to ensure they would survive in a space environment. The hardware was
tested for vacuum, harsh temperatures, vibrations, radiation, and impact shock.

For vacuum and harsh temperatures, EagleCam OBC and its peripherals were placed in a thermal

10

vacuum chamber (Fig. 13). While vacuum was held constant at 10−6 P a, the temperature inside
the chamber was dropped to -45◦ C and held for 4 hours, then increased to 100◦ C and held for 4
hours. Pressure and temperature values were chosen to simulate what EagleCam will experience
during its mission. during this test, the Jetson TX2 was connected to a WiFi network and pinged
from a separate laptop to ensure it was still operating inside the chamber. The peripherals were
tested separately afterwards to ensure they survived the test. This test will be performed again on
the ﬂight unit which will run the ﬁnal version of the ﬂight software.

Figure 13. Left: TVAC component and WiFi testing. Right: Radiation testing.

The Jetson TX2 was also tested for radiation (Fig. 13). It was placed in a container with 3 cesium
sources delivering a total amount of 167 rads over a time span of 4 days. The amount of radiation
that EagleCam will experience during its mission lifetime will be less than that experienced in the
test. In this test, the Jetson TX2 was connected to a WiFi network and running a script to capture
images using a webcam. A laptop was used to ping the Jetson TX2 over WiFi and retrieve the
images using FTP.

Vibration testing was performed at a Honeywell testing facility. EagleCam was placed on a shaker
and different vibration waveforms were applied on all three axes to simulate the vibrations that will
be encountered during launch. The vibration envelope that was tested is marked with black dashed
lines in Fig. 14.

The Jetson TX2 was turned off during this test since it will be off during launch. It was powered
on afterwards to run the ﬂight software with the IMU, Battery, and WiFi apps. The test was a
success as IMU data was logged, battery status was read, and WiFi connection to a local network
was established after power on.

Drop testing was performed to simulate the impact shock EagleCam will experience upon landing
on the lunar surface (Fig. 15). The EagleCam structure, which was housing the Jetson TX2, the
battery module, and the IMU was dropped from a height of 32 feet ≈ 9.7m into a LMS-1 Lunar
Mare Simulant container.16 The IMU application was used in the ﬂight software to log IMU data.
The Jetson TX2 was pinged from a laptop to ensure it was still operating after the impact. This
data was also used to help validate the theoretical impact models and the real impact including the
survivability of the structure under shock.

The cFS proves very useful for portability as the apps can be ported easily between architectures

making development simpler and faster.

11

Figure 14. Vibration shaker envelope.

Figure 15. Left: Impact frame. Right: Drop test conﬁguration.

CONCLUSIONS

The cFS software developed by NASA Goddard is a very valuable tool towards promoting a faster
software development and implementation for space exploration. It is ﬂexible and can be used in
different platforms. This software framework is space-rated making it robust and reliable. This is
particularly good given the requirements of EagleCam, providing conﬁdence for mission success.
Different applications can be developed fast using the standard proposed by NASA, allowing easy
development of reusable code for multiple hardware architectures. This was experienced by Eagle-
Cam’s software developers allowing a quick development of applications to control peripherals and
exchange telemetry with the deployer and Nova-C.

12

ACKNOWLEDGMENTS

The authors would like to gratefully acknowledge Brian Butcher and the team from Intuitive

Machines for their help and guidance.

REFERENCES

[1] G. Daines, “Commercial Lunar Payload Services,” Mar 2019.
[2] R. Bocchino, T. Canham, G. Watney, L. Reder, and J. Levison, “F Prime: an open-source framework

for small-scale ﬂight software systems,” 2018.

[3] L. E. Prokop and J. J. Wilmot, “NASA’s core ﬂight software-a reusable real-time framework,” Lunch-

n-Learn, 2014.

[4] C. Calle, C. Buhler, M. Johansen, M. Hogue, and S. Snyder, “Active dust control and mitigation tech-
nology for lunar and Martian exploration,” Acta Astronautica, Vol. 69, No. 11-12, 2011, pp. 1082–1088.

[5] J. R. Gaier, “The effects of lunar dust on EVA systems during the Apollo missions,” 2005.
[6] D. M. Hurley, M. Sarantos, C. Grava, J.-P. Williams, K. D. Retherford, M. Siegler, B. Greenhagen, and
D. Paige, “An analytic function of lunar surface temperature for exospheric modeling,” Icarus, Vol. 255,
2015, pp. 159–163.

[7] NASA Marshall Space Flight Center, “Natural Environments Deﬁnition for Design (NEDD),” 2016.
[8] J. I. Sahr, D. Posada, N. Migu´elez-G´omez, D. Korczyk, K. Pepin, J. Parkhurst, C. W. Hays, T. Hender-
son, and E. A. Rojas-Nastrucci, “Wireless Payload Thermal-Vacuum Testing for Lunar Harsh Environ-
ment,” 2021 IEEE Space Hardware and Radio Conference (SHaRC), IEEE, 2021, pp. 13–16.

[9] M. M. Finckenor and K. d. Groh, “A Researcher’s Guide to: Space Environmental Effects,” National
Aeronautics and Space Administration International Space Station Researcher’s Guide Series, NP-
2015-03-015-JSC, 2017, p. 15.

[10] D. McComas, “NASA/GSFC’s Flight Software Core Flight System,” Flight Software Workshop,

Vol. 11, 2012.

[11] H. Cannon, “Flight Software for the LADEE Mission,” 2015.
[12] L. E. Prokop, “Core Flight Software Projects on Orion Multi-Purpose Crew Vehicle,” Flight Software

Workshop, 2018.

[13] A. Cudmore, “Porting the core Flight System to the Dellingr Cubesat,” 2017.
[14] H. Cannon, “Application of the Core Flight System to a Lunar Rover,” 2017.
[15] E. J. Timmons, “Core Flight System (cFS) Training,” 2020.
[16] C. Hays, D. Posada, D. Korczyk, B. Dafoe, and T. Henderson, “Structural Design and Impact Analysis

of a 1.5U CubeSat on the Lunar Surface - Preprint,”

13

APPENDIX: APPLICATIONS FLOWCHARTS

The following diagrams are ﬂowcharts based on the general application design and display how
they were adapted to meet the requirements of the mission and provide the appropriate interaction
with the different hardware.

Figure 16. IMU application ﬂowchart.

14

Start- Initialize App- Register for cFEservices- Initialize IMUCreate child taskWait for deploymentflagBuffer IMU dataDump buffer tostoragePend on SB msgExit child taskHk TlmRequest?Send HK Tlm PacketApp specificprocessingES exit?ExitCall ES Exit to freeresourcesSet flag to exit appStart child taskFigure 17. Battery application ﬂowchart.

Figure 18. EDS application ﬂowchart.

15

Start- Initialize App- Register for cFE services- Initialize battery modulePend on SB msgHk Tlm Request?Send HK Tlm PacketES exit?ExitCall ES Exit to freeresourcesRead batterystatus?Read battery statusApp specificprocessingStart- Initialize App- Register for cFEservicesPend on SB msgHk Tlm Request?Send HK Tlm PacketES exit?ExitCall ES Exit to freeresourcesTime to activate EDS?Activate EDSTime to deactivate EDS?Deactivate EDSApp specificprocessingSet flag to exit appFigure 19. NISA Cameras application ﬂowchart.

Figure 20. ArduCam application ﬂowchart.

16

Start- Initialize App- Register for cFEservicesPend on SB msgHk Tlm Request?Send HK Tlm PacketES exit?ExitCall ES Exit to freeresourcesTime to activate NISAs?Activate NISAsApp specificprocessingStart- Initialize App- Register for cFEservices- Initialize cameraPend on SB msgHk Tlm Request?Send HK Tlm PacketES exit?ExitCall ES Exit to freeresourcesTime to snapimage 1?Snap Image 1Time to snapimage 2?Snap image 2App specificprocessingSet flag to exit appFigure 21. WiFi application ﬂowchart.

Figure 22. Nova-C application ﬂowchart.

17

Start- Initialize App- Register for cFEservicesCreate child taskConnectPend on SB msgHk TlmRequest?Send HK Tlm PacketApp specificprocessingES exit?ExitCall ES Exit to freeresourcesStart child taskConnected to payload?Do nothingStart- Initialize App- Register for cFEservicesPend on SB msgHk Tlm Request?Send HK Tlm PacketES exit?ExitCall ES Exit to freeresourcesPower onpayload?Power on payloadMessage topayload?Forward messageApp specificprocessing