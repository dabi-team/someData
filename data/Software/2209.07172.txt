2
2
0
2

p
e
S
5
1

]
E
S
.
s
c
[

1
v
2
7
1
7
0
.
9
0
2
2
:
v
i
X
r
a

Two case studies on implementing best practices
for Software Process Improvement⋆

Bartosz Walter5,1, Branko Marovi´c2, Ivan Garnizov3, Marcin Wolski1, and
Andrijana Todosijevic4

1 PSNC, Pozna´n, Poland {bartek.walter,marcin.wolski}@man.poznan.pl
2 University of Belgrade, Belgrade, Serbia, branko.marovic@rcub.bg.ac.rs
3 Friedrich-Alexander-University, Erlangen, Germany, ivan.garnizov@fau.de
4 AMRES, Belgrade, Serbia, andrijana.todosijevic@amres.ac.rs
5 Pozna´n University of Technology, Pozna´n, Poland

Abstract. Software Process Improvement requires signiﬁcant eﬀort re-
lated not only to the identiﬁcation of relevant issues and providing an
adequate response to them but also to the implementation and adop-
tion of the changes. Best practices provide recommendations to soft-
ware teams on how to address the identiﬁed objectives in practice, based
on aggregated experience and knowledge. In the paper, we present the
G´EANT experience and observations from the process of adopting the
best practices and present the setting we have been using.

Keywords: software maturity evaluation · best practices · software pro-
cess improvement · SPI monitoring

1

Introduction

The process of software construction, development and maintenance is probably
more complex than many processes we observe in other areas of engineering.
There are diﬀerent reasons for that, starting from dynamically changing require-
ments, through compatibility issues, up to the evolving environment and the
complexity of the supporting tools ecosystem. As a result, processes in the soft-
ware domain are not ﬁxed and need to be constantly updated, optimised and
improved, to remain competitive in the global market and meet quality expecta-
tions. Regardless of the invested eﬀorts, many software projects still exceed one
or a few of the typical business constraints, related to cost, quality and time.
It reveals a gap between the expectations and reality, but also a large room
available for improvement.

⋆

This work is part of a project that has received funding from the European Union’s
Horizon 2020 research and innovation programme under Grant Agreement No.
856726 (GN4-3).
The scientiﬁc/academic work is ﬁnanced from ﬁnancial resources for science in the
years 2019-2022 granted for the realisation of the international project co-ﬁnanced
by the Polish Ministry of Science and Higher Education.

 
 
 
 
 
 
2

B. Walter, B. Marovi´c, I. Garnizov, M. Wolski, and A. Todosijevic

Software Process Improvement (SPI) embraces all eﬀorts aimed at under-
standing the software process as it is being used within an organisation, and
driving the implementation of changes to that process, intended to achieve spe-
ciﬁc goals, such as increasing development speed, achieving higher product qual-
ity or reducing costs. Usually, the business and technological constraints are
mutually contradictory, so the objective is to ﬁnd an acceptable balance be-
tween the expectations of stakeholders, constraints concerning cost and quality,
and the capacity and capability of the development team. Until now, various
approaches related to the design, implementation and evaluation of SPI have
been identiﬁed, studied and veriﬁed [1]. A typical SPI process has many stages,
starting from the identiﬁcation of objectives, via designing changes, operational
procedures and metrics for monitoring, up to implementing them in practice [2].
Usually, SPI endeavours are not linear, but iterative [3], resulting in a highly
reactive and continually improving process driven by the collected feedback. It
will not only help in improving the process, but can reorient the organisation to
continuously seek opportunities for further optimisation.

In previous papers, we have presented various aspects of the SPI-related
challenges, approaches and results of developing and operating an SPI process
in G´EANT, a distributed multi-national European project focused on innova-
tion and exploration of new research directions within networking and soft-
ware [4,5,6]. It faces speciﬁc challenges, which needs to be reﬂected in the SPI
process. As a result, it is based on two pillars: a maturity model (SMM) which
deﬁnes objectives that need to be made, and a catalogue of best practices (CBP)
that are aligned with the SMM and recommend methods of addressing the ob-
jectives. Best practices appear to be a promising way of promoting proven and
well-aligned approaches, techniques and tools.

In this work, we report two examples of implementing best practices in diﬀer-
ent software teams in G´EANT. The early results show that teams can properly
recognise their needs, address them using the framework, and monitor the im-
plementation with the progress metrics.

The remainder of this work is structured as follows. In Sec. 2 we make a brief
overview of the literature concerning the SPI, its implementation and support
from the best practices. In Sec. 3 we brieﬂy provide information about G´EANT,
its structure and constraints concerning software teams. We also present the best
practices framework designed and developed to manage the SPI processes. Two
other sections, 4.2 and 4.3 show how it has been implemented in two diﬀerent
projects, with preliminary results. Observations from that implementation are
available in Sec. 5, and in Sec. 6 we summarise the work and set the directions
for the next steps.

2 Related work

Software processes need to be continuously evaluated and optimised in order
to better fulﬁl the expectations of all the stakeholders of software projects [7].
The maturity of software teams is an established concept used for reﬂecting

Two case studies on implementing best practices for SPI

3

their ability to eﬀectively address and implement all requirements and fulﬁl
objectives in their tasks. Maturity models (MMs) identify the objectives relevant
for speciﬁc areas and evaluate the performance with respect to these objectives.
Garc´ıa-Mireles, Moraga and Garc´ı [8] reported more than 50 software process
capability/maturity models (SPCMM), 35 diﬀerent maturity models related to
the discipline of information systems, and more than 150 models that assess the
maturity of IT service capability, strategic alignment of innovation management,
program management, knowledge management and enterprise architecture.

Eﬀective methods of addressing the objectives and goals deﬁned in maturity
models require also adequate guidance and recommendations in the form of best
practices [9]. A lot of patterns for the successful adoption of SPI practices have
been recognised so far [10]. Best practices for the successful design and imple-
mentation of lightweight software process assessment methods are investigated
[11]. In some of the models, a large part of the SPI success is
by Zarour et al.
achieved through the adoption of best practices [12].

In [13] we explained the approach to monitoring the adoption of best practices

accompanied by preliminary observations of the process improvements.

3 Background

G´EANT is a large pan-European project that initially originated from network-
ing, but now it has become a leader in delivering innovative solutions for re-
search and academia, by embracing complex software components and systems
and deﬁning services on top of the network. As a software organisation, it fea-
tures an innovation-targeting culture combined with a speciﬁc, custom approach
to software development. Software products and components are developed in
small independent teams (SDTs) that are internally diversiﬁed by the nation-
ality of members, native culture of their organisations, remote distance etc. In
addition, the teams are largely self-organising, with a large extent of freedom in
deﬁning speciﬁc processes, or adapting them to their needs. Such high diversity
creates a friendly ground for innovations, but also poses a risk for business-driven
constraints, eﬀective coordination of work and managing the outcomes [4].

The speciﬁcs in the objectives and the federated organisation in the G´EANT
project have a signiﬁcant impact on the working environment and coordination
of eﬀort in the software teams. They adhere to a Product Life-cycle Management
(PLM) framework and use common tools, but they can internally deﬁne their
own processes, techniques and settings [14], which is a signiﬁcant challenge from
the process-oriented point of view.

3.1 Common Best Practices

A large part of SPI in G´EANT is founded on Common Best Practices (CBPs) [15,6].
Unlike the goals identiﬁed in the Software Maturity Model (SMM) [16], which
set objectives for the teams, but do not indicate the ways of addressing them,
the CBPs also provide directional guidance on what could be done in order to

4

B. Walter, B. Marovi´c, I. Garnizov, M. Wolski, and A. Todosijevic

achieve the speciﬁc goals deﬁned in the SMM. The guidance is based on the
experience of other teams and the activities that have been shown to succeed in
G´EANT’s setting.

Currently, 24 practices have been identiﬁed, described and summarised in a
catalogue of best practices [6]. They cover all relevant aspects of software devel-
opment in G´EANT that have been recognised during the analysis of needs and
objectives [17], and additionally include areas related to the team organisation
and product maintenance. For brevity, in Table 1 we present only the ones that
have been adopted by the teams presented and discussed in Sec. 4.

Apart from other simple attributes, each practice is described by several

recommendations, activities, and metrics.

Recommendations – Each CBP is detailed into 2-7 recommendations that
cover diﬀerent aspects of the best practice. The recommendations prescribe ob-
jectives of a best practice process along with recommendations for tools, the
type of tools, the skills and/or procedures that support the process. They point
to the key aspects of the best practice.

Activities – Each recommendation may be associated with a number of ac-
tivities. An activity is an actionable statement that contributes to the fulﬁlment
of the associated recommendation. It is generic enough to be relevant for many
SDTs, regardless of their size and experience. Activities are not steps to be ex-
ecuted in a sequence (e.g., they may be done in parallel), but individual pieces
of work that need to be performed in order to fully address the recommenda-
tion. Of course, the practical implementations may vary between development
teams, as the best practices leave room for their operationalisation, adaptation
and customisation.

Metrics and their values – Metrics address individual, low-level concepts
that can be directly measured or marked as achieved or unsettled. Metrics reﬂect
the current status of a single aspect of implementing the practice; not just for
the development team, but also for SwM. They are substantial and trustworthy,
so that management and external reviewers can rely on the evaluation of these
metrics when concluding about the achievements, maturity and/or readiness of
the SDT in speciﬁc topics or with regard to the speciﬁc risks related to the
activities reviewed in the respective best practice.

3.2 Structure of the SPI project

The software governance and management team (SwM), formed as a part of one
of G´EANT work packages, is the entity that coordinates the process of deﬁning,
managing, implementing and maintaining the best practices framework and the
catalogue. SwM and its experts are also responsible for engaging the teams
promoting SPI within G´EANT and collecting feedback, which is further used
for improvement.

Software development teams (SDTs) voluntarily participate in the implemen-
tation of best practices, however, this is positively acknowledged by the man-
agement and appreciated as one of the recommended self-improvement methods
for all software teams.

Two case studies on implementing best practices for SPI

5

Table 1. An excerpt for the Catalogue of Common Best Practices used in G´EANT.
Presented metrics have been chosen for implementation in Projects A and B (see Sec. 4)

ID

Practice

BP-A.1 Identify an initial group of stakeholders and iteratively reﬁne it
BP-A.2 Elaborate communication strategy for stakeholders

BP-C.2 Identify relevant quality characteristics and test conditions and provide veri-

ﬁcation criteria for them

BP-C.3 Elaborate and maintain a quality plan for the project

BP-E.4 Deﬁne a procedure for deploying changes to running services

3.3 Product Life-Cycle Management and Best Practices

Although software development teams are given the freedom to choose on their
own the methodologies for the development and organisation of the eﬀort, certain
boundaries are set to preserve the business perspective and high-level goals of
the G´EANT project. These deﬁne the Product Lifecycle Management process
imposed and supervised by the Product Management Team. The process is split
into several phases, for which the development teams are required to demonstrate
a certain level of readiness with the product, maturity in delivery, documentation
and engagement from the user community in order to be able to gain further
support for their work in the next phase. Here the beneﬁt of Best Practices was
well recognised, as they also assert speciﬁc levels of maturity in the process of
software development and deal with various related risks, which often match
various concerns and risks identiﬁed on the project management side.

4 Case studies

Based on the previously described work, we started implementing the best prac-
tices as a method for improving software processes in G´EANT. Below we brieﬂy
present two projects, along the the description of the undertaken activities.

4.1 Methodology

In both cases we applied a similar, repetitive approach that followed a number
steps in each software team:

1. Identify the needs of the subject team
2. Identify and scope the area of improvement in the context of the G´EANT

CBPs.

3. Agree with the team on the approach, by addressing its context and by

including the speciﬁc actions and metrics used for monitoring.

4. Monitor the progress and reﬁne the approach (if needed).
5. Conclude the process and evaluate results.

6

B. Walter, B. Marovi´c, I. Garnizov, M. Wolski, and A. Todosijevic

For monitoring the CBP adoption we have developed a dedicated feature
in the G´EANT Software Catalogue [6]6. It allows the assessors from SwM for
collecting and reporting individual assessments, based on metrics deﬁned for
best practices, and tracking their changes.

Each evaluation is described by several attributes, such as a timestamp or a
scale. Values on the scale show how well a given team has adopted the practices.
The values can also be supplemented by a comment, which gives a more thorough
picture of the process at the moment. Having the evaluation recorded, a team
member can get an insight into practices implemented by the team or see the
progress in practices implementation within a speciﬁc period.

4.2 Project A

Overview of the project – The project is a software-based service platform
for assessment and monitoring of the WiFi performance and user experience
in campus areas. End-user devices exchange short anonymised data packets to
collect multiple network performance statistics. The architecture comprises of a
server side for measurement, data collection and GUI with monitoring modules.
The team provides the software as a product, but also a number of services:
support and a live demo environment.

Identiﬁed needs and expectations – During an opening meeting, the team
indicated a number of potential areas for improvement, referring to diverse areas,
from requirements to software deployment. After discussion, the problem of man-
aging software conﬁguration and building it for diﬀerent customers was found
to be essential. The team struggled with delivering updates to many releases of
the product, which resulted in mistakes and delayed delivery.

Best practice chosen for implementation – After the review, a BP-E.4
best practice has been identiﬁed to match the team’s needs. It is focused on
the process of implementing changes to services in operation, which requires a
good understanding of the explicit and implicit dependencies of the running sys-
tem, the risks associated with the management of operational data and the tight
coordination between the diﬀerent operational teams that provide supporting
generic services for example, but not limited to, network connectivity or operat-
ing system management in an attempt to minimise the possible running service
downtime.

The best practice speciﬁes three recommendations:

1. Identify services that could be aﬀected by the subject change;
2. Deﬁne a deployment procedure that minimises the impact on other services;

(a) Consult the procedure with owners of aﬀected services;

6 https://sc.geant.org

Two case studies on implementing best practices for SPI

7

(b) Prepare and verify rollback routines (at least for the core parts of the
deployment procedure) that allow for reversing the deployment in a safe
way;

(c) Deﬁne the deployment schedule in collaboration with the owners of af-

fected services.

3. Make a simulated deployment for the change, if necessary.

(a) Involve the owners of the aﬀected services;
(b) Monitor the simulation and make notes concerning the observed devia-

tions from the procedure;

(c) Update the procedure, if needed.

Results – Following the established SPI process, the SwM team conducted an
initial assessment of the process that could serve as a basis for monitoring.

The SDT developed an internal service to track the product versions ran
by customers to identify those who are actively using it. In the process, they
also clariﬁed the internal release management process, which enabled them to
perform and collect the version checks (automated or manual) from the active
instances.

As follows from the second assessment, the team did improve their process
and is now running an ordered, disciplined and data-based process related to the
version management, properly, tracking the product use and associating versions
with speciﬁc customers and their issues, needs and questions (see Table 4.2).

Table 2. Results of evaluation for the BP-E.4 best practice in Project A

Metric

General evaluation

Orderly collection of new feature requests
Procedure for choosing features to be added to the new release
Predeﬁned release schedule

Assessments
M1 M5 M15

3/7 6/7 7/7

YES YES YES
YES YES YES
YES YES YES

NO YES YES
Communication channel for informing users about updates
Mechanism for performing or nudging updates
NO YES YES
Tool or method for collecting the data about used versions and updates NO YES YES
NO NO YES
Collected data is used in analysis and planning

The changes resulted from additions to delivery, deployment, monitoring,
user support, and release planning that were articulated during the joint ses-
sions of SwM and Project A teams. These additions were expressed as clear
and straightforward software features, utilities and procedural changes, which
enabled the developers and supporters to adopt them as practical and valuable
modiﬁcations, easily implement the needed elements and get immediate improve-
ments. All devised and agreed interventions have been implemented; the data is
collected as a part of the monitoring process and periodically analysed.

8

B. Walter, B. Marovi´c, I. Garnizov, M. Wolski, and A. Todosijevic

An internal procedure for deploying, validating or reverting the changes was
established and applied. Information about the new releases and summaries of
contained changes are timely distributed to registered users. Furthermore, the
project team has established the process of collecting records that describe and
track features and issues reported by users and testers. The instances of the
software update automatically or inform the user about available updates and
assist in their download and installation. The team also developed a method
for collecting the data about used the usage and versions of WiFiMon instances
and the rollout of updates. The tracked parameters are the numbers of active
instances and downloads and the percentage of users running the latest version.
Data about changes, their availability, deployments, active instances and related
user behaviours and response times are used in analysis and planning to enhance
release management, deployment process or communication with users. If new
problems or opportunities for improvement are identiﬁed, they will be used to
further reﬁne the team’s procedures, software tools and metrics, and also the
related best practices.

4.3 Project B

Overview of the project – Project B is an internal online catalogue that in-
cludes comprehensive information about software projects developed and main-
tained in G´EANT. Unlike other similar systems, it does not rely on data entered
manually by operators or users, but rather actively looks for changes in the avail-
able data sources (such as software development tools) and updates its internal
databases. The oﬀered data is diverse; for example, it displays the description and
current status of the project, its current and previous staﬀ, external organisa-
tions involved in it, but also development-related activity in the code repository,
quality-related reports, the employed technology stack, and also some speciﬁc
SPI-related information. In addition, the project is also endowed with a full-text
search engine, which helps the users in ﬁnding the relevant pieces of information.
From the functional point of view, Project B is a central informational hub with
comprehensive data about the projects.

Identiﬁed needs and expectations – Project B is managed from the begin-
ning by a consistent, stable team of developers, with a clear vision of the product.
As a result, several processes and software engineering practices and properly
implemented, addressed and aligned. However, the team decided to participate
in the best practice assessment with an objective to identify deviations, quality
hotspots and opportunities for improvement.

Speciﬁcally, the team decided to focus on two speciﬁc goals: the manage-
ment of stakeholders, and the elements of quality assurance. Both of them have
been partially implemented by achieving and documenting some objectives, while
some aspects have not been addressed yet. The implementation of best practices
provided a good opportunity for improving the status vis-`a-vis these goals.

Two case studies on implementing best practices for SPI

9

Best practice chosen for implementation – A number of meetings and
interviews allowed for the identiﬁcation of the practices to be assessed and im-
plemented in the beginning: BP-A.1: Identify an initial group of stakeholders
and iteratively reﬁne it.

The BP-A.1 practice is focused on having a closely engaged group of stake-
holders, who would and could help in collecting requirements and user needs.
The stakeholders could also contribute to other areas of the project, e.g., iden-
tiﬁcation of risks (BP-C.1) or deﬁnition of user acceptance tests (BP-C.4).

Speciﬁcally, there are two main recommendations formulated for that prac-

tice:

1. Identify an initial group of stakeholders

(a) Consider teams, organisations or individuals that could be aﬀected or

could impact the project.

(b) Look for similarities to other projects, either previous or current.
(c) Look for a dominant stakeholder, who is mostly interested in the outcome

of the project.

2. Maintain (update) the group of stakeholders

(a) Publish the list of stakeholders and their representatives.
(b) Periodically update (involve and retire) the group of stakeholders.
(c) Apply snowballing to identify new stakeholders.
(d) Categorise the stakeholders with respect to their relevance for the project
(e) Identify possible relationships between stakeholders

In Project B, this aspect has been addressed by creating and maintaining a
list of stakeholders. The list is managed by the team leader and periodically
reviewed/updated. Each communication targeted to the stakeholders is also
recorded to monitor the frequency of meetings as well. The part of the prac-
tice that was not implemented concerns the prioritisation of stakeholders, and
all of them were considered equally involved in the project. The recommended
solution would be to identify a group of key stakeholders to be consulted regu-
larly, and the remaining ones, who would be only informed about the changes
and the progress.

Results – Implementation of those best practices has been monitored with a
set of metrics that were adapted from the predeﬁned ones for that practice. The
results of two evaluations are reported in Table 3. They are rather indicative
than conclusive, and provide some information on how the assessment is being
made.

There are three simple Boolean metrics. They directly refer to facts, not
evaluation, which makes them more objective. However, they also carry limited
information, which can be supplemented with a description. In that case, the
assessor provided no remarks. Additionally, there are also three regular metrics.
They capture the number of stakeholders that have been identiﬁed by the team,
and the time since contacting any stakeholder with respect to requirements and

10

B. Walter, B. Marovi´c, I. Garnizov, M. Wolski, and A. Todosijevic

Table 3. Results of evaluation for the BP-A.1 best practice in Project B

Metric

General evaluation

Are stakeholders prioritised?
Is the list of stakeholders updated on a regular basis?
Are the stakeholders’ needs tracked to requirements?

Assessments
M2

M1

4/5

5/5

NO YES
YES YES
YES YES

Number of identiﬁed and contacted stakeholders
14
Time since contact with a stakeholder (about requirements) [days] N/A N/A
N/A N/A
Time since contact with a stakeholder (about UAT) [days]

14

UATs, which reﬂects the activity in communication with them. The two time-
related metrics are not being monitored, as the data has not been collected so
far. The team also decided that they are not relevant in that case.

During the ﬁrst assessment it has been found that a relatively large group
of stakeholders is managed in the same way, which did not properly reﬂect the
real needs. The SwM and Project B teams have decided to reﬁne the list of
stakeholders to identify key stakeholders and involve them more closely in the
project. As a result, a dedicated list of key stakeholders was introduced, which
was appreciated during the second assessment.

Currently, all recommendations for the practice have been implemented, and
now it needs to be only monitored. If new opportunities for improvement would
be identiﬁed, then they could result in deﬁning another, more reﬁned best prac-
tice.

5 Concluding observations

Two projects are not suﬃcient to make conclusions concerning the eﬀects of
applying best practices as drivers for SPI improvement. However, we can sum-
marise the current status of the project with some concluding observations.

Each practice has been linked with an initial set of predeﬁned metrics that
could be used for monitoring. The metrics are diverse with respect to various
dimensions addressed by the practice and provide a starting point for measuring
progress. However, the set is only a proposal and is not closed: it can be easily
extended by deﬁning new metrics or modifying existing ones, depending on the
context, needs and capabilities of individual development teams. Each SPI im-
plementation project is initiated at a meeting, during which both the SDT and
SwM teams agree on how it would be monitored, which also includes the selec-
tion of speciﬁc metrics. It ensures that only relevant parameters which reﬂect
the speciﬁcs of the project are measured.

The metrics are a relatively new element of the framework. Unlike directional
recommendations included in each best practice, metrics are speciﬁc and set a
kind of a roadmap that facilitates its implementation. They reﬂect diﬀerent

Two case studies on implementing best practices for SPI

11

dimensions of the corresponding SMM goal and the associated CBP, so they
help both the development team and the assessors in monitoring the progress.
However, metrics should not be considered as a tool for evaluating the team, but
rather support in monitoring the implementation of best practices.

Introducing metrics to the framework is at least partially successful. On one
hand, the measurements using the metrics are still subjective and should be
conducted by trained support staﬀ, and in close collaboration with the software
development team. On the other hand, even in their current form they provide
real help to the assessors and let them focus on speciﬁc objectives, goals and
process dimensions deﬁned by a given best practice. Therefore, they indicate the
ways of interpreting the practices in the desired direction for implementation,
largely reducing ambiguities in their interpretation.

Due to subjective factors in the metrics and necessary per-case modiﬁcations,
the best practices framework cannot be used to compare the maturity of diﬀerent
projects and their progress in implementing them. Cross-project studies would be
inherently biased by diﬀerent metrics for the evaluation and diﬀerences in teams’
contexts, e.g., the team structure and size, adopted methods of communication,
external needs, the tools used, etc. However, the metrics can still be used for
monitoring projects and conducting longitudinal studies.

6 Summary

In this work, we have presented two examples for implementing the SPI project
based on the best practices framework, from the identiﬁcation of needs and
expectations to monitoring. In particular, the monitoring process was founded on
metrics, which deliver objective and quantitative information about the progress.
While the implementation process in other teams is still not ﬁnished, we were
able to validate the entire process with real software development teams and
collect feedback.

First, the two projects delivered several insights concerning ways of engaging
teams in the SPI eﬀort, the methods of extracting their real needs with respect to
process maturity, and provided hints about planning the implementation process.
Based on that, future implementations could be more streamlined and less eﬀort-
demanding.

Overall, the structure of the SPI project appeared eﬀective. In each case, the
work coordination is in the hands of the SwM team, which is also responsible for
planning the work and improving the SPI framework. In principle, collaboration
with each of the software teams is managed by one lead expert, supported by
another person. This fosters ﬂuent and eﬀective communication within the SwM
team, but also provides a smooth take-over in case of unavailability of the lead
expert.

Thanks to the speciﬁc recommendations and related metrics, teams have be-
come more aware of the complexity of SPI activities and their multi-dimensional
impact on other processes. They also understood the relationship between intu-
itive, but quite generic recommendations and the speciﬁc metrics that reﬂect the

12

B. Walter, B. Marovi´c, I. Garnizov, M. Wolski, and A. Todosijevic

progress. In many cases, the teams have considered the metrics not as progress-
tracking tools, but rather as an illustration of how the framework worked.

The implementation has become a process on its own, with inputs, phases,
expected and actual outcomes. That also helped both the development teams
and the SwM team to stick on track and complete the implementation of the
best practice successfully.

Future work includes the wider adoption of best practices, with an objective
of collecting more data about the process performance, so that the conclusions
could be founded on more stable empirical evidence.

References

1. Michael Unterkalmsteiner, Tony Gorschek, A. Islam, Chow Cheng, Rahadian Per-
madi, and Robert Feldt. A conceptual framework for spi evaluation. Journal of
Software: Evolution and Process, 02 2014.

2. Banu Aysolmaz and Onur Demir¨ors. A detailed software process improvement
methodology: Bg-spi. In Rory V. O‘Connor, Jan Pries-Heje, and Richard Messnarz,
editors, Systems, Software and Service Process Improvement, pages 97–108, Berlin,
Heidelberg, 2011. Springer Berlin Heidelberg.

3. Zeljko Stojanov. Inductive approaches in software process assessment. pages I–XV,

06 2016.

4. Z. Stanisavljevic, B. Walter, M. Vukasovic, A. Todosijevic, M. Labedzki, and
M. Wolski. G´EANT software maturity model. In 2018 26th Telecommunications
Forum (TELFOR), pages 420–425, Nov 2018.

5. Bartosz Walter, Branko Marovic, Ivan Garnizov, Marcin Wolski, and Andrijana To-
dosijevic. Best practices for software maturity improvement: A g´eant case study.
In Murat Yilmaz, J¨org Niemann, Paul M. Clarke, and Richard Messnarz, edi-
tors, Systems, Software and Services Process Improvement - 27th European Con-
ference, EuroSPI 2020, D¨usseldorf, Germany, September 9-11, 2020, Proceedings,
volume 1251 of Communications in Computer and Information Science, pages 30–
41. Springer, 2020.

6. Bartosz Walter, Branko Marovic, Ivan Garnizov, Marcin Wolski, and Andrijana
Todosijevic. Monitoring the adoption of spi-related best practices. an experience
report. In Murat Yilmaz, Paul M. Clarke, Richard Messnarz, and Michael Reiner,
editors, Systems, Software and Services Process Improvement - 28th European Con-
ference, EuroSPI 2021, Krems, Austria, September 1-3, 2021, Proceedings, volume
1442 of Communications in Computer and Information Science, pages 475–484.
Springer, 2021.

7. Alfonso Fuggetta and Elisabetta Di Nitto. Software process. In Proceedings of the

on Future of Software Engineering, pages 1–12. ACM, 2014.

8. G.A. Garc´ıa-Mireles, M. ´Angeles Moraga, and F. Garc´ıa. Development of maturity
models: a systematic literature review. In IET Seminar Digest, volume 2012, pages
279–283, 2012.

9. Pierre Bourque, Richard E. Fairley, and IEEE Computer Society. Guide to the Soft-
ware Engineering Body of Knowledge (SWEBOK(R)): Version 3.0. IEEE Com-
puter Society Press, Washington, DC, USA, 3rd edition, 2014.

10. L.G. Singer. Improving the Adoption of Software Engineering Practices Through

Persuasive Interventions. Lulu Com, 2013.

Two case studies on implementing best practices for SPI

13

11. Mohammad Zarour, Alain Abran, Jean-Marc Desharnais, and Abdulrahman Alar-
iﬁ. An investigation into the best practices for the successful design and implemen-
tation of lightweight software process assessment methods: A systematic literature
review. Journal of Systems and Software, 101:180–192, 2015.

12. Sussy Bayona-Or´e, Josselyn Chamilco, and Dayvis Perez. Applying cmmi best
practices to improve processes. MATEC Web of Conferences, 292:01065, 01 2019.
13. Bartosz Walter, Branko Marovic, Ivan Garnizov, Marcin Wolski, and Andrijana
Todosijevic. Monitoring the adoption of spi-related best practices. an experience
report. In Murat Yilmaz, Paul M. Clarke, Richard Messnarz, and Michael Reiner,
editors, Systems, Software and Services Process Improvement - 28th European Con-
ference, EuroSPI 2021, Krems, Austria, September 1-3, 2021, Proceedings, volume
1442 of Communications in Computer and Information Science, pages 475–484.
Springer, 2021.

14. Marcin Wolski and Toby Rodwell. Software Governance in a Large European
Project - G´EANT Case Study.
In Xavier Franch, Tomi M¨annist¨o, and Silve-
rio Mart´ınez-Fern´andez, editors, Product-Focused Software Process Improvement,
pages 620–625, Cham, 2019. Springer International Publishing.

15. Bartosz Walter, Branko Marovi´c, Ivan Garnizov, Marcin Wolski, and Andrijana
Todosijevic. Best practices for software maturity improvement: A g´eant case study.
In Murat Yilmaz, J¨org Niemann, Paul Clarke, and Richard Messnarz, editors,
Systems, Software and Services Process Improvement, pages 30–41, Cham, 2020.
Springer International Publishing.

16. Bartosz Walter, Marcin Wolski, Zarko Stanisavljevic, and Andrijana Todosijevi´c.
Designing a Maturity Model for a Distributed Software Organization. An Experi-
ence Report, pages 123–135. 08 2019.

17. Marcin Wolski, Marina Adomeit, Ivana Golub, Rade Martinovic, Szymon Kupi´nski,
Maciej Labedzki, Sharique Javaid, Andrijana Todosijevic, Aleksandra Radulovic,
Simone Visconti, and Cezary Mazurek. Deliverable D5.3 - Analysis of Requirements
for Software Management. Technical report, 2017.

This figure "PLM.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/2209.07172v1

This figure "process.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/2209.07172v1

(cid:24)(cid:258)(cid:410)(cid:258)(cid:3)(cid:4)

(cid:24)(cid:258)(cid:410)(cid:258)(cid:3)(cid:17)

(cid:1009)(cid:1004)

(cid:1008)(cid:1009)

(cid:1008)(cid:1004)

(cid:1007)(cid:1009)

(cid:1007)(cid:1004)

(cid:1006)(cid:1009)

(cid:1006)(cid:1004)

(cid:1005)(cid:1009)

(cid:1005)(cid:1004)

(cid:1009)

(cid:1004)

(cid:1004)

(cid:1009)

(cid:1005)(cid:1004)

(cid:1005)(cid:1009)

(cid:1006)(cid:1004)

(cid:1006)(cid:1009)

(cid:1007)(cid:1004)

This figure "sc.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/2209.07172v1

