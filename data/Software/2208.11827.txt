2
2
0
2

g
u
A
5
2

]

C
O
.
h
t
a
m

[

1
v
7
2
8
1
1
.
8
0
2
2
:
v
i
X
r
a

SSD – Software for Systems with Delays:
Reproducible Examples and Benchmarks on
Model Reduction and H2 Norm Computation

Suat Gumussoy ∗

∗ Siemens Technology, Princeton, NJ 08540 USA
(e-mail: suat.gumussoy@siemens.com).

Abstract: We present SSD – Software for Systems with Delays, a de novo MATLAB package
for the analysis and model reduction of retarded time delay systems (RTDS). Underneath,
our delay system object bridges RTDS representation and Linear Fractional Transformation
(LFT) representation of MATLAB. This allows seamless use of many available visualizations
of MATLAB. In addition, we implemented a set of key functionalities such as H2 norm and
system gramian computations, balanced realization and reduction by direct integral deﬁnitions
and utilizing sparse computation. As a theoretical contribution, we extend the frequency-limited
balanced reduction to delay systems ﬁrst time, propose a computational algorithm and give
its implementation. We collected two set of benchmark problems on H2 norm computation
and model reduction. SSD is publicly available in GitHub ∗. Our reproducible paper and two
benchmarks collections are shared as executable notebooks.
∗ https://github.com/gumussoysuat/ssd

Keywords: H2 norm, frequency-limited balanced reduction, software, sparse computation.

1. INTRODUCTION

Software packages are essential and practical tools for
analysis and design of control systems. Considerable re-
search eﬀort is devoted to extend classical and modern
control techniques to accommodate delays. Without being
exhaustive and focusing only publicly available ones, we
can group software packages as:

• Solution of delay diﬀerential equations, Hairer et al.
(1995); Enright et al. (1997); Shampine et al. (2001).
• Stability and bifurcation analyses, Engelborghs et al.
(2002); Breda et al. (2009); Wu et al. (2012); Avanes-
soﬀ et al. (2013); Vyhlidal et al. (2014); Breda et al.
(2016).

• System norms and other metrics, Michiels et al.
(2010); Gumussoy et al. (2010); Appeltans et al.
(2019).

• Controller design:

· Stabilization, Michiels (2011b).
· Pole placement, Boussaada et al. (2021).
· PID design, Gumussoy et al. (2012); Appeltans

et al. (2022).

· H∞ control, Gumussoy et al. (2011).

This paper gives a guided tour to a new MATLAB package,
Software for Delay Systems (SSD) focusing on model
reduction and H2 norm computation for retarded time
delay systems (RTDSs). Our main contributions are

• allowing easy-to-access MATLAB’s time and fre-
quency domain visualizations by bridging RTDS and
MATLAB’s LFT representation,

• publicly available implementation of model reduction
and H2 norm computation using their direct deﬁni-

tions of the integral form and utilizing sparse compu-
tation,

• as a theoretical contribution, extension of the frequency-
limited balanced reduction ﬁrst time for RTDS and a
computational algorithm via integral expressions for
delay systems,

• collecting two sets of benchmark problems on model
reduction and H2 norm computation and sharing
them as two executable notebooks,

• making our paper completely executable and repro-

ducible to facilitate reproducible research.

Our goals are two folds: First, to introduce publicly avail-
able functionalities as a baseline approach for comparison
with the advanced techniques in model reduction and H2
norm computation. Second, to facilitate the analysis of
delay systems having small to mid-size state dimensions
by SSD’s easy-to-use interface.

The paper is organized as follows. First we deﬁne the delay
system representation as an RTDS and show its use in
the next section. We illustrate how time and frequency
domain visualizations are used in Section 3. The model
reduction functionalities and H2 norm computation are
overviewed in Section 4. We summarized the collected
benchmark problems in Section 5. We give details on
the computational aspects of our MATLAB package in
Section 6. We end our paper with concluding remarks and
some future directions.

2. DELAY SYSTEM DEFINITION

SSD constructs a retarded time-delay system as

 
 
 
 
 
 
˙x(t) =

y(t) =

mA(cid:88)

i=0

mC(cid:88)

i=0

Ai x(t − hA

i ) +

Ci x(t − hC

i ) +

mB(cid:88)

i=0

mD(cid:88)

i=0

Di u(t − hD

i ).

Bi u(t − hB

i ),

(1)

hD: 0
name: []

The system matrices are Ai ∈ Rn×n, Bi ∈ Rn×nu , Ci ∈
Rny×n and Di ∈ Rny×nu . The number of time delays are
mA, mB for states and inputs in the state equation and
mC, mD for states and inputs in the output equation. By
convention, hA
0 = 0. All delays are
non-negative real numbers.

0 = hD

0 = hC

0 = hB

The ssd object is constructed using the function ssd as

>> sys = ssd(A,hA,B,hB,C,hC,D,hD);

where A, B, C, and D matrices are 3-dimensional matrices
and hA, hB, hC, and hD are unique, increasing non-
negative vectors as shown below in Figure 1.

Fig. 1. System matrices and delays in ssd object.

We borrow the following delay system from Jarlebring
et al. (2013) as a motivational example,

˙x(t) =

(cid:20) −2 −1
−3/2 −1/2

(cid:21)

x(t) +

(cid:21)

(cid:20) 0 1/2
1 0

x(t − 1) +

(cid:21)

(cid:20) 1
−1

u(t),

y(t) = [ 2 0.2 ] x(t).
We ﬁrst deﬁne the system matrices as follows,

>> A0 = [-2 -1; -3/2 -1/2];
>> A1 = [0 1/2; 1 0];
>> A = cat(3,A0,A1);
>> B = [1; -1];
>> C = [2 0.2];

Then we create the ssd object by

>> sys = ssd(A,[0 1],B,0,C,0)

sys =

ssd with properties:

A: [2×2×2 double]
hA: [0 1]
B: [2×1 double]
hB: 0

C: [2 0.2000]

hC: 0
D: 0

Note that there is no D matrix in the above example.
Therefore, the matrix and its delay argument are not
included. Alternatively, one can set them to empty vector,
[ ] or enter zero matrix with appropriate dimensions and
zero delay.

The interface of ssd is a natural extension of state-space
object, ss(A,B,C,D), of MATLAB by introducing extra
delays per system matrix. While the ssd object keeps the
delay system structure, it also constructs the MATLAB’s
LFT-based ss object with delays behind the scenes to
leverage pre-deﬁned functionalities of MATLAB as we
illustrate in the next section.

3. TIME / FREQUENCY DOMAIN VISUALIZATIONS

Time and frequency domain plots gives additional insights
for the analysis and design of delay systems. The ssd
object interfaces with MATLAB plotting functionality and
enables frequency domain plots, bode, bodemag, sigma,
nyquist and the time domain plot, step as in MATLAB
including multiple system support.

Continuing with the same system matrices of previous
example, sys, we deﬁne two additional systems, one with
a state delay of 0.5 and the other one with no delay.

>> sys1 = ssd(A,[0 0.5],B,0,C,0);
>> sys2 = ssd(sum(A,3),0,B,0,C,0);
>> sys2.name=’no delay’;
>> step(sys,’r’,sys1,’g.-’,sys2,’b--’);

Fig. 2. Step responses of
multiple systems.

Fig. 3. Analytical and nu-
merical H2 norm val-
ues.

Note that sys2 is a standard state-space system with no
delay. As seen in Figure 2, SSD shows the system names
and allows the user to modify the names as needed.

4. H2 NORM AND MODEL REDUCTION

SSD provides a set of functionality on H2 norm computa-
tion and model reduction. In next two sections, we intro-
duce the basic deﬁnitions, outline our direct computational
approach and illustrate their use with the example codes.

4.1 H2 Norm Computation

Assuming the exponential stability of the delay system, its
H2 norm is deﬁned in frequency domain as,

(cid:115)

(cid:107)G(cid:107)2 :=

1
2π

(cid:90) ∞

−∞

trace (G(jω)∗G(jω)) dw

(2)

0.10.20.30.40.50.60.70.80.91h0.70.80.911.11.21.31.4H2 normH2 norm wrt delay hanalyticalnumericalwhere G(s) = C(s) (sI − A(s))−1 B(s) with the auxiliary
terms, A(s) := (cid:80)mA
i=0 Bie−jωhB
i ,
and C(s) := (cid:80)mC
i . By deﬁnition, D matrix is
zero for a well-deﬁned H2 norm.

i , B(s) := (cid:80)mB

i=0 Aie−jωhA

i=0 Cie−jωhC

We borrow the hot shower problem from Jarlebring et al.
(2011) (included in benchmarks_h2norm.mlx at GitHub
as the ﬁrst benchmark). The system equations are

˙x = −ax(t − h) + bu(t),

y(t) = cx(t).

2 = c2b2

This example admits a closed form for the H2 norm
cos(ah)
as, (cid:107)G(cid:107)2
1−sin(ah) . Set the system parameters as
a = b = c = 1, then the following code computes the
analytical and approximate H2 norms.

2a

>> a = 1; b = 1; c = 1;
>> h = 0.1:.1:1;
>> h2 = ((c*b)^2/2/a)*(cos(a*h)./(1-sin(a*h)));
>> for ct=1:length(h)
>>
>>
>> end
>> plot(h,sqrt(h2),’o’,h,happrox);

sys = ssd(cat(3,0,-a),[0 h(ct)],1,0,1,0);
happrox(ct) = h2norm(sys);

Figure 3 shows the comparison. The values are same within
numerical tolerances.

SSD utilizes sparse computation inside the integrals for
H2 norm computation (2). For delay systems with large
dimensions, enabling sparse option inside ssdoptions
can speed up the computation considerably. Computing
H2 norm without and with the sparse option enabled for
the heated rod example sys4 of order 1000 (included in
our benchmark problems) results in 50 times speed up.

>> tic; h2 = h2norm(sys4); time=toc

time = 400.7489

>> opt = ssdoptions(’sparse’,true);
>> tic; h2_sparse = h2norm(sys4,opt); time=toc

time = 8.3189

4.2 Balanced Reduction

SSD implements one of the standard model reduction tech-
niques, the balanced reduction (a survey of model reduc-
tion techniques is given in Antoulas (2002)). In balanced
reduction, a transformation matrix is computed where
the transformed states are ordered from easy to diﬃcult
according to the measure of how diﬃcult to observe and
reach them simultaneously. Such transformation matrix is
the balancing transformation and the transformed system
is the balanced realization. The measure of reachability and
observability for delay systems is deﬁned in terms of system
gramians in frequency domain as,

Wc =

Wo =

1
2π
1
2π

(cid:90) ∞

−∞
(cid:90) ∞

−∞

GAB(jω)G∗

AB(jω)dω,

G∗

CA(jω)GCA(jω)dω.

(3)

(4)

Note that we deﬁne the gramians in the sense of position
balancing, Jarlebring et al. (2013), p.160. For convenience,
we drop the term position in our paper.

The function gram computes the system gramians. It
calculates the system gramians by the direct deﬁnitions
(3) and (4) and the integral function of MATLAB. For
our example system, sys, the system gramians are

>> [Wc,Wo] = gram(sys,’co’)

Wc =

0.9273
-1.7426

-1.7426
3.6292

Wo =

1.2674
-0.4129

-0.4129
0.3674

which are equal to the values given in Jarlebring et al.
(2013), p.160. The sparse computation is also available
for system gramians. It can be set from ssdoptions and
passed to the gram function as an argument.

The function balreal computes the balanced realization.
It ﬁrst computes the system gramians as above, then
ﬁnds the balancing transformation as in Algorithm 1 in
Jarlebring et al. (2013), p.160 without any truncation and
applies to the delay system.

>> [sysb,info] = balreal(sys);
>> plot(info)

where sysb is a balanced realization of sys with the same
system matrices given in Jarlebring et al. (2013), p. 162.
One can see that the state contributions by plotting the
info object. Figure 4 shows that the ﬁrst transformed
state’s contribution is major.

Fig. 4. Energy contribu-
tions of the states.

Fig. 5. Step responses of

sys and sysr.

Based on the energy contributions of the states, the
balanced reduction eliminates the states of the balanced
realization upto a desired order deﬁned by the user. The
function balred performs this reduction. Figure 4 suggests
that the ﬁrst-order model may approximate the sys well.
We reduce the system and compare the step responses of
the original and the reduced systems by

>> sysr = balred(sys,1);
>> step(sys,sysr);

where GAB(s) = (sI − A(s))−1 B(s) and GCA(s) =
C(s) (sI − A(s))−1.

Figure 5 shows that the ﬁrst-order model captures most of
the dynamics as expected.

Energies of states12Order (Number of states)00.20.40.60.811.21.41.61.82State contributionX 1Y 1.98078X 2Y 0.157277As a theoretical contribution, to the best of the author’s
knowledge, SSD extends the frequency-limited balanced
reduction to delay systems ﬁrst time where the system
gramians are computed over the frequency intervals of
interest (see Gawronski et al. (1990) for standard case).
The resulting reduced system approximates the dynamics
better over the desired frequency range with less number
of states.

Let sys3 represent the delay system Example 3 in Jar-
lebring et al. (2011) (included as the third benchmark
in benchmarks_h2norm.mlx). The frequency interval
is
deﬁned in FreqInt ﬁeld of ssdoptions object.

>> sys3r = balred(sys3,2);
>> opt = ssdoptions(’FreqInt’,[20 Inf]);
>> sys3rf = balred(sys3,2,opt);
>> sigma(sys3,sys3r,sys3rf);

The zoomed version of
sigma plot, Fig-
the
ure 6, shows that the
frequency-limited balanced
reduction approximates
better compared to the
standard reduction over
the
focused frequency
range.

As a ﬁnal remark, the
object info stores the
gramian related informa-
tion and the full balanc-
ing transformation ma-
trices. The function balred

Fig.

6. Reduced

systems
sys3r and sys3rf over
[20, ∞).

computes the reduced orders very fast when info is pro-
vided since it does not recompute gramian information,
i.e.,

>> tic; [sys3r,info3] = balred(sys3,2); time=toc
>> tic; sys3r1 = balred(sys3,4,info3); time=toc

time = 3.1990

time = 0.0041

5. BENCHMARK PROBLEMS

We surveyed the literature and collected two sets of
benchmark problems for the model reduction and the H2
norm computation. We prepared two executable notebooks
in which we deﬁne the benchmark problems and show how
to use SSD on them in GitHub repository.

(2) Mass-spring (MS) system in Saadvandi et al.
(2012): A 1000th-order coupled mass-spring system
with dampers and feedback controls with delays.
(3) Platoon of eight vehicles (P8V) in Scarciotti
et al. (2014): A 23rd-order model describing the
problem of controlling a group of vehicles tightly
spaced following a leader, all moving in longitudinal
direction.

(4) Example 1 in Lordejani et al. (2020): A 6th-order
synthetic model with one state and one output delay.
(5) Second-order system with proportional damp-
ing example (SOSPD) in Jiang et al. (2019): A
2000th-order model with a single state delay.

Table 1 shows the state, output, input dimensions and
the number of delays for all system matrices. Since the
maximum delay may aﬀect the complexity of the method,
this information is included in the table.

The examples in Saadvandi et al. (2012) and Jiang et al.
(2019) are second-order mechanical systems and the orders
of their ﬁrst-order equivalent models are twice of their
dimensions. The benchmark problems are single-input-
single-output (SISO) systems and mostly single state delay
in the state equation is considered.

Dimensions
(n,ny,nu)
(100, 1, 1)
(1000†, 1, 1)
(23, 1, 1)
(6, 1, 1)

Ex.

# Delays

Max.
(mA,mB,mC ,mD) Delay

HR2
MS
P8V
Ex.1

1
2
0.005
1.6
1
† The dimension of the second-order system.
Table 1. Model reduction benchmark problems

(1, 0, 0, 0)
(1, 0, 0, 0)
(1, 0, 0, 0)
(1, 0, 1, 0)
(1, 0, 0, 0)

SOSPD (2000†, 1, 1)

A snapshot of the heated rod example from our notebook
can be seen in Figure 7.

Fig. 7. A snapshot of the
heated rod example.

Fig. 8. A snapshot of the

hot shower example.

5.1 Model Reduction

5.2 H2 Norm Computation

There are ﬁve benchmark problems provided in the ex-
ecutable notebook, benchmarks_model_reduction.mlx.
We used the model reduction functionality of SSD on the
selected benchmarks:

(1) The heated rod (HR2) Example in Michiels
(2011a): A 100th-order model with a single delay
derived from the discretization of heat equations
describing the temperature in a rod controlled with
distributed delayed feedback.

There are six benchmark problems for H2 norm computa-
tion collected in our notebook, benchmarks_h2norm.mlx:

(1) The hot shower (HS) problem in Jarlebring
et al. (2011), Ex.1: A ﬁrst-order state-space model
whose H2 norm can be computed analytically. Its
delay can be set by the user.

(2) Example 2.b in Jarlebring et al. (2011), Ex.2b:
A 3rd-order synthetic model with two state delays.

2030405060708090100-42-40-38-36-34-32-30-28-26sys3sys3rsys3rfSingular ValuesFrequency (rad/s)Singular Values (dB)(3) Example 3 in Jarlebring et al. (2011), Ex.3: A
9th-order model with two state-delays obtained from
discretization of partial diﬀerential equations with
delays.

(4) The heat exchanger (HE) example in Michiels
et al. (2019): A 5th-order model with seven delays
for a heat exchanger for which the controller based
on a combination of static state feedback and pro-
portional integral control.

(5) The heated rod (HR2) Example in Peeters
et al. (2013): A 100th-order model with a single
delay, same as the previous example in the model
reduction benchmarks.

(6) The heated rod (HR4) Example in Michiels
et al. (2019): A 10000th-order model with a single
delay, same as the previous example with larger size.

Ref.

HS
Ex.2b
Ex.3
HE
HR2
HR4

Dimensions
(n,ny,nu)
(1, 1, 1)
(3, 1, 1)
(9, 1, 1)
(5, 1, 5)
(100, 1, 1)
(10000, 1, 1)

# Delays
(mA,mB,mC ,mD)
(1, 0, 0, 0)
(2, 0, 0, 0)
(2, 0, 0, 0)
(7, 0, 0, 0)
(1, 0, 0, 0)
(1, 0, 0, 0)

Max.
Delay
User-deﬁned
1
3
40
1
1

Table 2. H2 benchmark problems

Table 2 summarizes the dimensions and the number of
delays for all system matrices. In general, the examples
in the literature has one or two state delays and no
delays at input and output matrices excluding D matrices
which must be zero for well-posedness of the norm. Most
examples are SISO systems. Finally, we share a snapshot
from the executable notebook for the hot shower example
in Figure 8.

6. COMPUTATIONAL ASPECTS

For experimental 1 testing of the computational complex-
ity of balanced reduction and H2 norm computation, we
randomly generate delay systems with the following prop-
erties:

• Input and output sizes are 3, ny = nu = 3,
• There are 3 delays, mA = mB = mC = 3,
• All delays are uniformly selected from (0, 1),
• All matrices are dense whose elements uniformly
selected from [−3, 3] and in addition, 3I subtracted
from A0 matrix to make it stable.

• D matrices are set to zero since they are not needed
for H2 norm computation and balanced reduction.

We validated that the generated delay systems have rich
dynamics. We measured the computation time of h2norm
and gram (computing both gramians) functions since the
latter function is the main computational bottleneck of
balreal and balred. The number of states varies as
1 − 10, 10 − 100 by 10 increments and 100 − 500 for
by 100 increments (The upper bound is 400 for model
reduction). For each step, we created 5 delay systems,
computed the average of computational times and the
standard deviation.
1 All experiments are performed on HP Z6 G4 Workstation with
Intel Xeon Silver 4114 2.2GHz CPU, 64GB RAM.

Fig. 9. Average and standard deviation of the computation
time of h2norm (left) and gram (right) functions with
respect to the number of states.

Figure 9 (left) shows that the H2 norm computation time
is in the order of seconds upto 100 states, that of minutes
upto 300 states and around 8 minutes for 500 states.

Figure 9 (right) shows that the gram(sys,’co’) compu-
tation time is under a minute upto 50 states, under 10
minutes upto 200 states and almost 2 hours for 400 states.
In the light of these experiments, we see that SSD can
handle small to medium size state dimensions.

For large-scale delay systems with sparse matrices, the
sparse option of ssdoptions can be used to speed up the
computation. As a large-scale benchmark, we computed
the H2 norm of HR4 example with 10, 000 states from
Section 5.2. We set the absolute tolerance a little high
10−3 to make the relative error active and set the relative
error to 10−4 as reported in Michiels et al. (2019) and
get similar order of time magnitude, around 6 seconds,
compared to their results 4.8 seconds obtained by their
special large-scale approach.

>> opt = ssdoptions(’Sparse’,true, ...

’RelTol’,1e-4, ’AbsTol’,1e-3);

>> tic
>> h2 = h2norm(sys_hr4,opt)
>> time=toc

h2 = 0.4357

time = 5.9651

As a ﬁnal remark, the function integral over [0, ∞]
interval may be computationally expensive or less accurate
when the integrand has highly oscillatory behavior for a
large part of the interval. In our experiments, it shows
satisfactory performance.

7. CONCLUDING REMARKS

We took a guided tour of a new MATLAB package, SSD,
on several examples. SSD seamlessly integrates with the
time and frequency domain visualization capabilities of
MATLAB while oﬀering new features on model reduc-
tion and H2 norm computations built on a frequently-
used RTDS delay system representation. The list of SSD
functions is given in Table 3.

Our computational analysis shows that SSD is suitable for
small to mid-size state dimensions. We hope that SSD’s
delay system deﬁnition of matrices and delays, easy-to-use
interface, and provided functionalities will facilitate the
analysis of delay systems and be used as a baseline for
advanced techniques.

H2 norm computation time050100150200250300350400450500Number of states10-310-210-1100101102103TimeGram computation time (two system gramians)050100150200250300350400Number of states10-210-1100101102103104105TimeFocus
Visualizations
Norm
Model Reduction
Options

Function names
bode, bodemag, sigma, nyquist, step
h2norm†
gram†, balreal, balred
ssdoptions

† Sparse computation is available.
Table 3. SSD functions

All the examples in this paper are reproducible by our ex-
ecutable notebook, introduction.mlx. We share two ex-
ecutable notebooks, benchmarks_model_reduction.mlx
and benchmarks_h2norm.mlx with a collection of bench-
mark problems on model reduction and H2 norm computa-
tion. SSD and three notebooks are available at the GitHub
repo

https://github.com/gumussoysuat/ssd.

ACKNOWLEDGEMENTS

The author thanks Izmir D. Gumussoy for the fruitful
discussions.

REFERENCES

A. C. Antoulas. Approximation of Large-Scale Dynamical

Systems. SIAM, 2005.

P. Appeltans and W. Michiels. A pseudo-spectra based
characterisation of the robust strong H-inﬁnity norm
of time-delay systems with real-valued and structured
uncertainties. ArXiv, 1909.07778, 2019.

P. Appeltans, S.-I. Niculescu, and W. Michiels. Analysis
and Design of Strongly Stabilizing PID Controllers for
Time-Delay Systems. SIAM J. Control Optim., 60:124-
–146, 2022.

D. Avanessoﬀ, A. R. Fioravanti, and C. Bonnet. YALTA: a
Matlab toolbox for the H∞-stability analysis of classical
and fractional systems with commensurate delays. IFAC
Proceedings Volumes, 46:839–844, 2013.

I. Boussaada, G. Mazanti, S.-I. Niculescu, A. Leclerc, J.
Raj, and M. Perraudin. New Features of P3δ soft-
ware: Partial Pole Placement via Delay Action. IFAC-
PapersOnLine, 54:215—221, 2021.

D. Breda, S. Maset, and R. Vermiglio. TRACE-DDE: a
Tool for Robust Analysis and Characteristic Equations
for Delay Diﬀerential Equations. Topics in Time Delay
Systems, Springer, 388:145–155, 2009.

D. Breda, O. Diekmann, M. Gyllenberg, F. Scarabel and
R. Vermiglio. Pseudospectral discretization of nonlinear
delay equations: New prospects for numerical bifurca-
tion analysis. SIAM J. Appl. Dyn. Syst., 15:1–23, 2016.
K. Engelborghs, T. Luzyanina, and D. Roose. Numerical
bifurcation analysis of delay diﬀerential equations using
DDE-BIFTOOL. ACM Transactions on Mathematical
Software, 28:1–21, 2002.

W. H. Enright and H. Hayashi. A delay diﬀerential
equation solver based on a continuous Runge-Kutta
method with defect control. Numerical Algorithms, 16:
349–364, 1997.

W. Gawronski and J.-N. Juang. Model reduction in limited
time and frequency intervals. International Journal of
Systems Science, 21:349–376, 1990.

S. Gumussoy and W. Michiels. A predictor–corrector type
algorithm for the pseudospectral abscissa computation
of time-delay systems. Automatica, 46:657–664, 2010.

S. Gumussoy and W. Michiels. Fixed-Order H-Inﬁnity
Control for Interconnected Systems Using Delay Diﬀer-
ential Algebraic Equations. SIAM J. Control Optim, 49:
2212–2238, 2011.

S. Gumussoy, B. Eryilmaz, and P. Gahinet. Working with
IFAC Proceedings

Time-Delay Systems in MATLAB.
Volumes, 45:108—113, 2012.
and
for

G. Wanner.

Hairer

E.

Software
http://www.unige.ch/ hairer/software.html, 1995.

Diﬀerential

Delay

RETARD:
Equations.

E. Jarlebring, J. Vanbiervliet, and W. Michiels. Character-
izing and Computing the H2 Norm of Time-Delay Sys-
tems by Solving the Delay Lyapunov Equation. IEEE
Transactions on Automatic Control, 56:814—825, 2011.
E. Jarlebring, T. Damm, and W. Michiels. Model reduc-
tion of time-delay systems using position balancing and
delay Lyapunov equations. Math. Control Signals Syst.,
25:147—166, 2013.

Y.-L. Jiang, Z.-Y. Qiu, and P. Yang. Structure preserving
model reduction of second-order time-delay systems
via approximate Gramians.
IET Circuits, Devices &
Systems, 14:130—136, 2019.

S. Naderi Lordejani, B. Besselink, A. Chaillet, and N. van
de Wouw. Model order reduction for linear time delay
systems: A delay-dependent approach based on energy
functionals. Automatica, 112:1—10, 2020.

W. Michiels and S. Gumussoy. Characterization and
computation of H-inﬁnity norms of time-delay systems.
SIAM Journal on Matrix Analysis and Applications, 31:
2093–2115, 2010.

W. Michiels, E. Jarlebring, and K. Meerbergen. Krylov-
Based Model Order Reduction of Time-delay Systems.
SIAM J. Matrix Anal. Appl., 32:1399—1421, 2011.
W. Michiels. Spectrum-based stability analysis and sta-
bilisation of systems described by delay diﬀerential al-
gebraic equations. IET Control Theory & Applications,
5:1829—1842, 2011.

W. Michiels and B. Zhou. Computing Delay Lyapunov
Matrices and H2 Norms for Large-scale Problems. SIAM
J. Matrix Anal. Appl., 40:845—869, 2019.

J. Peeters and W. Michiels. Computing the H2 norm
IFAC Proceedings

of large-scale time-delay systems.
Volumes, 46:114—119, 2013.

M. Saadvandi, K. Meerbergen, and E. Jarlebring. On
dominant poles and model reduction of second order
time-delay systems. Applied Numerical Mathematics,
62:21—34, 2012.

G. Scarciotti and A. Astolﬁ. Model Reduction by Mo-
ment Matching for Linear Time-Delay Systems. IFAC
Proceedings Volumes, 47:9462—9467, 2014.

L. F. Shampine and S. Thompson.

Solving DDEs in
Matlab. Applied Numerical Mathematics, 37:441–458,
2001.

T. Vyhl´ıdal, and P. Z´ıtek. QPmR-Quasi-polynomial root-
ﬁnder: Algorithm update and examples. Delay Systems,
Springer, 1:299–312, 2014.

Z. Wu and W. Michiels. Reliably computing all character-
istic roots of delay diﬀerential equations in a given right
half plane using a spectral method. Journal of Compu-
tational and Applied Mathematics, 236:2499–2514, 2012.

