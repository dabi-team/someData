社団法人 電子情報通信学会
THE INSTITUTE OF ELECTRONICS,
INFORMATION AND COMMUNICATION ENGINEERS

信学技報
TECHNICAL REPORT OF IEICE.
ICM2022-13(2022-07)

環境適応処理における配置再構成の提案

山登庸次†

† NTT ネットワークサービスシステム研究所，東京都武蔵野市緑町 3-9-11
E-mail: †yoji.yamato.wa@hco.ntt.co.jp

あらまし ヘテロハードウェアを活用するには，プログラマーは OpenMP，CUDA，OpenCL 等の十分な技術スキル

が必要であった．そこで，私は，一度記述したコードの自動変換，構成を行い，高性能操作を可能にする環境適応ソ

フトウェアを提案し，自動変換，適正配置等に取り組んできた．しかし，今まで変換アプリケーションをどこに初期

配置するかは検討されていたが，他ユーザの配置状況を考慮した全体最適な配置は検討されていなかった．本論文で

は，環境適応ソフトウェアの新しい要素として，運用開始後に他ユーザの配置状況を勘案して全体的なユーザ満足度

を向上させる運用中配置再構成を，線形計画手法を用いて検討する．再構成アプリケーション数等の条件を変化させ

たシミュレーション実験を通じて適切に再配置できることを確認した．

キーワード 環境適応ソフトウェア, 自動オフロード，最適配置，運用中再構成

Proposal of deployment reconﬁguration for environment adaptation

Yoji YAMATO†

† Network Service Systems Laboratories, NTT Corporation, 3-9-11, Midori-cho, Musashino-shi, Tokyo
E-mail: †yoji.yamato.wa@hco.ntt.co.jp

Abstract To use heterogeneous hardware, programmers needed suﬃcient technical skills such as OpenMP, CUDA,

and OpenCL. Therefore, I have proposed environment-adaptive software that enables high-performance operation

by automatically converting and conﬁguring the code once written, and have been working on automatic conversion

and proper placement. However, until now, where to initially place the converted application has been considered,

but the overall optimal placement has not been considered in consideration of the placement status of other users.

In this paper, as a new element of environment-adaptive software, I study the relocation during operation, which im-

proves the overall user satisfaction by considering the placement of other users, using a linear programming method.

It was conﬁrmed that it can be properly rearranged through simulation experiments.

Key words Environment Adaptive Software, Automatic Oﬄoading, Optimum Placement, Reconﬁguration During
Operation

1. は じ め に

Language）[20]，CUDA（Compute Uniﬁed Device Architec-

ture）[21] や組み込み技術といった知識が必要になってくるた

近年，ムーアの法則の鈍化が予想されている．そのような状

め，スキルの壁が高い．Java [22] は一度記述したコードをどこ

況から，CPU だけでなく，FPGA（Field Programmable Gate

でも動かせると言うが性能は考慮外だった．そこで，私は，一

Array）や GPU（Graphics Processing Unit）等のデバイスの

度記述したコードを，配置先の環境に存在する GPU や FPGA，

活用が増えている．例えば，Microsoft 社は FPGA を使って

メニーコア CPU 等を利用できるように，変換，配置等を自動

Bing の検索効率を高め [1]，Amazon 社は，FPGA, GPU をク

で行い，アプリ（アプリケーション）を高性能に動作させるこ

ラウド技術を用いて（例えば，[2]- [8]）インスタンス提供して

とを目的とした，環境適応ソフトウェアを提案した．合わせて，

いる [9]．また，システムでの IoT 機器利用（例えば，[10]- [18])

環境適応ソフトウェアの要素として，アプリのループ文及び機

も増えている．

能ブロックを，FPGA，GPU に自動オフロードする方式を提

しかし，CPU 以外のデバイスを適切に活用するためには，デ

案評価している [23]- [28]．さらに，変換アプリをユーザの応答

バイス特性を意識したプログラム作成が必要で，OpenMP

時間や価格要求を満たして，配置先を適正化する手法について

（Open Multi-Processing）[19]，OpenCL（Open Computing

も提案してきた．

— 1 —

本稿では，環境適応ソフトウェアの新たな要素として，変換

して配置し動作させているアプリを，別ユーザの配置状況等を

踏まえて再配置することで，全体的なユーザ満足度を上げる運

用中再構成の手法を提案し，評価する．

2. 既 存 技 術

2. 1 市 中 技 術

GPU の並列計算能力を一般用途にも使う GPGPU（General

Purpose GPU）（例えば，[29] 等）を行うための環境として

CUDA が普及している．CUDA は GPGPU 向けの NVIDIA

社の環境だが，FPGA，メニーコア CPU，GPU 等のヘテロな

デバイスを同じように扱うための仕様として OpenCL とその

開発環境（例えば，[30] 等）が出てきている．しかし，CUDA，

OpenCL は，C 言語の拡張を行いプログラムを行う形だが，メ

モリ処理の記述等プログラムの難度は高い．

このため，スキルが乏しいプログラマーが，FPGA や GPU

を活用してアプリを高速化することは難しいし，自動並列化技

図 1 環境適応ソフトウェアのフロー

換した後のアプリの配置については，個別ユーザの要件に応じ

た個別最適の配置検討のみで，他ユーザの配置状況を勘案した

全体最適の配置検討はされていない．そのため，本稿では，運

用開始後に配置を再構成することで再構成対象の複数のユーザ

の満足度を向上させることを検討する．

術（例えば，[31] 等）を使う場合も並列処理箇所探索の試行錯誤

3. アプリケーション配置再構成

等の稼働が必要だった．並列処理箇所探索の試行錯誤を指示行

ベース仕様（OpenACC [32] [33] 等）を用いて自動化する取り

組みとして，著者は進化計算手法を用いた GPU 自動オフロー

ドを提案している．

配置に関して，ネットワークリソースの最適利用として，ネッ

トワーク上にあるサーバ 群に対して VN（Virtual Network）

の埋め込み位置を最適化する研究がある [34]．[34] では，通信ト

ラヒックを考慮した VN の最適配置を決定する．しかし，単一

リソースの仮想ネットワークが対象で，キャリアの設備コスト

や全体的応答時間の削減が目的で，個々に異なるアプリの処理

時間や，個々のユーザの価格や応答時間要求等の条件は考慮さ

れていなかった．

2. 2 環境適応処理のフロー

ソフトウェアの環境適応を実現するため，著者は図 1 の処理

フローを提案している．環境適応ソフトウェアは，環境適応機

能を中心に，検証環境，商用環境，テストケース DB，コード

パターン DB，設備リソース DB の機能群が連携することで動

作する．

Step1 コード分析：

Step2 オフロード可能部抽出：

Step3 適切なオフロード部探索：

Step4 リソース量調整：

Step5 配置場所調整：

Step6 実行ファイル配置と動作検証：

Step7 運用中再構成：

ここで，Step 1-7 で，環境適応するために必要となる，コー

ドの変換，リソース量の調整，配置場所の決定，検証，運用中

の再構成を行うことできる．

現状を整理する．ヘテロなデバイスに対するオフロードは手

動での取組みが主流である．著者は環境適応ソフトウェアのコ

ンセプトを提案し，自動オフロードを検討してきたが，自動変

著者は，環境適応ソフトウェアのコンセプトを具体化するた

めに，これまで，プログラムループ文や機能ブロックの GPU，

FPGA 自動オフロード，オフロード先リソース量自動調整や配

置適正化を提案してきた．これらの要素技術検討も踏まえて，

本節の，3.1 では，自動オフロードの例としてループ文の GPU

自動変換技術について概説する，3.2 では，既存の初期配置方

式と再構成の必要性を検討する．3.3 では，アプリを適切に再

配置するための，線形計画手法の定式化と方式提案を行う．

3. 1 ループ文の GPU 自動変換

通常の CPU で動作しているプログラムを，GPU や FPGA

等のデバイスにオフロードすることで高速化する事例は多いが，

自動で行っている例は少ない．ループ文の GPU 自動変換技術

を紹介する．

まず，基本的な課題として，コンパイラがこのループ文は

GPU で並列処理できないという制限を見つけることは可能だ

が，このループ文は GPU の並列処理に適しているという適合

性を見つけることは難しいのが現状である．一般的にループ

回数が多い等のループの方が適していると言われるが，実際

に GPU にオフロードすることでどの程度の性能になるかは，

実測してみないと予測は困難である．そのため，このループ

を GPU にオフロードするという指示を手動で行い，性能測

定を試行錯誤することが頻繁に行われている．[23] はそれを踏

まえ，Clang [35] 等でのパースライブラリで解析されたコード

構造から，GPU にオフロードする適切なループ文の発見を，

進化計算手法の一つである遺伝的アルゴリズム GA（Genetic

Algorithm）[36] で自動的に行うことを提案している．GPU 処

理を想定していない通常 CPU 向け汎用プログラムから，最初

に並列可能ループ文のチェックを行い，次に並列可能ループ文

群に対して，GPU 実行の際を 1，CPU 実行の際を 0 と値を置

いて遺伝子化し，検証環境で性能検証試行を反復し適切な領域

を探索している．並列可能ループ文に絞った上で，遺伝子の部

— 2 —

図 2 ループ文の GPU 自動変換方式

分の形で，高速化可能な並列処理パターンを保持し組み換えて

いくことで，取り得る膨大な並列処理パターンから，効率的に

高速化可能なパターンを探索している（図 2）．

[28] では，ループ文の適切な抽出に加えて，ネストループ

図 3 計算ノードのトポロジー例

文の中で利用される変数について，ループ文を GPU にオフ

いのでなく，応答時間や価格に対する個々のユーザ要求を満た

ロードする際に，ネストの下位で CPU-GPU 転送が行われる

す必要があり，アプリ配置ポリシーも動的に変わり得る．

と下位のループの度に転送が行われ効率的でないため，上位で

この二つの特徴も踏まえ，著者は以前に，ユーザの応答時間

CPU-GPU 転送が行われても問題ない変数については，上位で

要求や価格要求を満たす配置計算のため，線形計画手法によ

まとめて転送を行うことを提案している．

り，ユーザがアプリを配置依頼した際の，変換後アプリの応答

更に，より CPU-GPU 転送を削減する方式も提案している．

時間と価格を定式化して，応答時間か価格の片方を目的関数に

具体的には，ネストだけでなく，複数ファイルで定義された変

最小化する方法を提案している．提案方式を用いて，複数種の

数について，GPU 処理と CPU 処理が入れ子にならず，CPU

アプリを想定して，1000 アプリの配置最適化を GLPK（Gnu

処理と GPU 処理が分けられる変数については，一括化して転

Linear Programming Kit）5.0 にてシミュレーションし，提案

送する指定を行う．さらに，コンパイラがコンパイラ判断で変

方式の有効性を確認している．

数を転送してしまうことを避けるため，変数転送には一時領域

しかし，提案方式は，個別ユーザの応答時間や価格要求に従

を作成し一時領域でパラメータを初期化して，CPU-GPU 転送

い，アプリを配置していくため，基本的に早い者勝ちとなり，

に用いている．

例えば安さ優先の要求条件ばかりの場合クラウドが，速さ優先

ループ文の GPU 自動変換については，進化計算手法を用い

の要求条件ばかりの場合エッジが埋まってしまい，埋まった後

た最適化と，CPU-GPU 転送の低減により，自動化を可能とし

は別サーバへの配置が必要になってくる．そこで，早い者勝ち

ている．

の配置を緩和するため，運用開始前だけでなく運用開始後の配

同様の手法を用いて，ループ文の FPGA 向け自動変換，機

置再構成が必要と考える．

能ブロックの自動オフロードを提案しており，自動変換後，コ

3. 3 再構成方式

ストパフォーマンス高く運用するためオフロード先デバイスの

本サブ節では，他ユーザ配置状況も踏まえ，アプリを適切な

リソース量を自動調整する方式も提案している．

配置場所に再構成するための再構成方式を，線形計画手法の定

3. 2 既存方式と再構成必要性

式化も含めて提案する．

計算ノードリンクとしては，ユーザエッジ，キャリアエッジ，

再構成では，一定数アプリの配置毎（100 アプリ等）に，複数

クラウドの 3 層のトポロジーを想定する（図 3 等）．計算ノード

ユーザの当初要求条件を満たす形で，一定数アプリ（全アプリ

は CPU，GPU，FPGA の 3 種に分けられる．GPU や FPGA

or100 アプリ等）の配置再構成を試行計算することで，応答時

を備えるノードは，仮想化技術（例えば，[37]）により，GPU，

間や価格の変化により定まるユーザ群の満足度を向上させる．

FPGA インスタンスとして，CPU リソースも含む形で提供さ

再構成の試行計算の結果，満足度変化が一定の閾値を超える等，

れる．

再構成の効果が高い場合のみ，再構成が行われる．実際の再構

従来は [34] 等の検討の様に，例えば仮想ネットワークを収容

成は，アプリ実行サーバの変更が必要となるため，ライブマイ

するサーバを配置する場所を，トラフィック増加等の長期的傾

グレーション等の手法を用いて，ユーザ影響を抑えて行う．

向を見て，計画的に設計していた．それに対して，環境適応ソ

再構成のための線形計画式を (1)-(5) に，パラメータを図 4

フトウェアでは 2 つ特徴がある．一つ目は，配置アプリは静的

に示す．(1) がユーザ満足度評価のための目的関数，(2)(3) が

に定まっているのでなく，GPU や FPGA 向けに自動変換さ

アプリ配置毎にユーザが指定する応答時間要求，価格要求の制

れ，GA 等を通じ利用形態に適したパターンが実測を通じて抽

約条件，(4)(5) がサーバリソース上限の制約条件である．

出されるため，アプリコードや性能は動的に変わり得る．二つ

まず，新規配置は (2)-(5) の式に応じて配置がされる．ユー

目は，キャリア設備コストや全体的応答時間だけ低減すれば良

ザは配置の際に，応答時間，価格の片方か両方の要求条件を付

— 3 —

∑

i∈Device

ai(

· Bd
k

Ad
i,k
C d
i

) +

∑

j∈Link

bj(

Al

j,k

· Bl
k

C l
j

)

= P af ter
k

<= P upper

k

∑

k∈App
∑

k∈App
価

4. 評

(Ad

i,k · Bd

k) <= C d

i

(Al

j,k · Bl

k) <= C l

j

(3)

(4)

(5)

図 4 線形計画式パラメータ

けることができる．応答時間要求 Rupper
必要か，価格要求 P upper
の片方だけ指定の場合は，その逆の最小化が目的関数となり，

は一月幾ら以下かを指定する．(2)(3)

は何秒以内に応答が

k

k

4. 1 評 価 条 件

4. 1. 1 対象アプリケーション

配置アプリは，多くのユーザが利用すると想定されるフーリ

エ変換と画像処理とする．

フーリエ変換処理 FFT（Fast Fourier Transform）は，振動

両方指定の場合は目的関数はどちらかの最小化をユーザが指

周波数の分析等，IoT でのモニタリングの様々な場面で利用さ

定する．(4)(5) は，計算リソース及び通信帯域の上限を設定す

れている．NAS.FT [38] は，FFT 処理のオープンソースアプ

る制約条件であり，他ユーザ配置アプリ含めて計算され，新規

リの一つである．備え付けのサンプルテストの 2048*2048 サイ

ユーザのアプリ配置によるリソース上限超過を防ぐ．新規配置

ズの計算を行う．

は，ユーザの配置依頼に対して，順次 (2)-(5) の計算を行って

MRI-Q [39] は，非デカルト空間の 3 次元 MRI 再構成アルゴ

いくことで行われる．

リズムで使用されるキャリブレーション用のスキャナー構成を

次に再構成を考える．再構成は (1)-(5) 式に応じて計算がさ

表す行列 Q を計算する．MRI-Q は，パフォーマンス測定中に

れるが，特にユーザ満足度に応じる値 S の計算が新たに加わる．

3 次元 MRI 画像処理を実行し，Large の 64*64*64 サイズのサ

個別ユーザの満足度として，再構成前の配置で応答時間 1 点，
価格 1 点を基本の値として，再構成前応答時間 Rbef ore
成後 Raf ter
値，再構成前価格 P bef ore
ら Y が価格満足度に関連した値とする．再構成の試行計算の

k で X 倍になったら X が応答時間満足度に関連した
が再構成後 P af ter
で Y 倍になった

が再構

k

k

k

ンプルデータを使用して処理時間を測定する．

著 者 の GPU，FPGA 自 動 オ フ ロ ー ド 技 術 [28] に よ り ，

NAS.FT は GPU で，MRI-Q は FPGA で高速化でき，CPU

に比べてそれぞれ 5 倍，7 倍の性能がでることが分かっている．

4. 1. 2 評 価 手 法

目的関数は，再構成対象の一定数アプリのユーザ群満足度に関

アプリを配置するトポロジーは図 3 の様に 3 層で構成され，

連した値であり，複数アプリに対して（X+Y）の総和を最小化

クラウドレイヤーの拠点数は 5，キャリアエッジレイヤーは 20，

する配置を計算する．目的関数の具体的内容は (1) である．ま

ユーザエッジレイヤーは 60，インプットノードは 300 とする．

た，新規配置時に，ユーザが片方しか制約条件を指定していな

各拠点に，クラウドでは，サーバは CPU 8 台，GPU 16GB

い場合は，そのアプリでは (2)(3) は片方だけ指定される．

RAM 4 台，FPGA 2 台，キャリアエッジでは，CPU 4 台，

(1)-(5) の線形計画の式に基づき，GLPK や CPLEX（IBM

GPU 8GB RAM 2 台，FPGA 1 台，ユーザエッジでは，CPU

Decision Optimization）等の線形計画ソルバで解を導出するこ

2 台，GPU 4GB RAM 1 台とする．サーバ 1 台の全リソース

とで，再構成の効果を計算する．再構成対象のアプリ数は一定

使用（GPU では 16GB RAM 利用時）の月額はクラウドでは

値であり，全アプリでない事もある．ソルバ計算時間は，再構

5 万，10 万，12 万とした．集約効果のため，キャリアエッジ，

成を計算するアプリの数が増えると増大する．そのため，アプ

ユーザエッジは割高になり，クラウドの 1.25 倍，1.5 倍の月額

リ一定数の設定は可変とし，100 配置毎に 100 アプリを最適化

とした．

や，一度に全アプリを最適化等は，ソルバの計算時間に応じて

リンクについては，クラウド-キャリアエッジ間は 100Mbps，

サイズを調整して決定する．

S =

∑

(
k∈App

Raf ter
k
Rbef ore

k

+

P af ter
k
P bef ore

k

)

∑

∑

(Ad

i,k · Bp

i,k) +

i∈Device

j∈Link

(Al

j,k · Ck
Bl
k

)

= Raf ter
k

<= Rupper

k

キャリアエッジ-ユーザエッジ間は 10Mbps の帯域が確保され

ている．リンクコストについては，100Mbps のリンクは月額

(1)

8000 円，10Mbps のリンクは月額 3000 円とした．

アプリが利用するリソースとして，処理時間等は，実際に

GPU，FPGA にオフロードした際の値を用いる．NAS.FT は，

利用リソース量は GPU 1GB RAM，利用帯域 2Mbps，転送

(2)

データ量 0.2MB，処理時間 5.8 秒である．MRI-Q は，利用リ

ソース量は FPGA サーバの 10%（FlipFlop，LookUpTable 等

の利用数が FPGA の利用リソースとなる），利用帯域 1Mbps，

転送データ量 0.15MB，処理時間 2.0 秒である．

— 4 —

まず，400 個のアプリを新規配置する．アプリは，インプッ

トノードから生じるデータを分析する想定で，300 のインプッ

トノードから配置依頼をランダムに生じさせる．配置依頼数と

して，NAS.FT：MRI-Q=3:1 の割合で 400 回アプリの配置依

頼をする．

ユーザ要求条件として，配置依頼する際に価格条件か応答時

間条件かその両方が選ばれる．NAS.FT の場合，価格に関して

は月 7500 円 (a) か 8500 円 (b) か 10000 円 (c) 上限か，応答時

間に関しては 6 秒 (A) か 7 秒 (B) か 10 秒 (C) 上限かが選択さ

れる．MRI-Q の場合，価格に関しては月 12500 円 (x) か 20000

円 (y) 上限か，応答時間に関しては，4 秒 (X) か 8 秒 (Y) 上限

図 5 (a) 実 再 構 成 ア プ リ 数 の 変 化 ，(b) 実 再 構 成 ア プ リ の

Raf ter
k

/Rbef ore
k

+P af ter
k

/P bef ore
k

の変化

が選択される．ユーザ要求として，NAS.FT では a, b, c, A, B,

再構成方式を提案した．

C, aC, bB, bC, cA, cB, cC をそれぞれ 1/12 ずつ，MRI-Q で

は x, y, X, Y, xY, yX, yY をそれぞれ 1/7 ずつの確率で選択す

る．ユーザ上限要求が 1 つの指標の際は別指標の最小化が目的

関数に，2 つの指標の際は一方がランダムに選択されその最小

化が目的関数になる．

次に，400 個の配置後は，100 アプリ配置毎に，一定数アプ

リの再構成を行う．配置周期の配置アプリ数は 100 で固定だが

再構成アプリ数は，100，200，400 アプリと可変にし，ユーザ

満足度を計算する．

4. 2 結

果

実験は，ソルバ GLPK5.0 を用いたシミュレーションにより

行った．図 5(a) は，再構成対象アプリ数を横軸に，実際に再構

成したアプリ数を縦軸に取ったグラフであり，図 5(b) は，実際
に再構成したアプリの Raf ter
/Rbef ore
k
値を縦軸に取ったグラフである．

/P bef ore
k

+P af ter
k

の平均

k

計算時間について，新規配置では総計 500 個を順に計算して

配置するだけなので，1 分以内の短時間で終わる．一方，再構

成時間は，再構成対象のアプリが増えるにつれ，線形計画の条

件式が増えることになるが，100 アプリでは 10 秒以内だった

が，400 アプリでも 1 分以内で終わっている．

図 5(a) に関して，若干ばらつきはあるが，再構成対象アプ

リ数の約 1 割が，実際に再構成されていることが分かる．新

規配置では，1 アプリ毎に個別最適な配置をしているが，再構

成では複数アプリ一括で適正配置を計算することで，再構成可

能なアプリがある程度見つかることが分かる．図 5(b) に関し
て，再構成を行ったアプリは Raf ter
/P bef ore
k
k
の平均が 1.96 程度に改善されていることが分かる．この値は 2

/Rbef ore
k

+P af ter
k

から大きく改善される値ではないが，例えば，NAS.FT をキャ

リアエッジからクラウドに配置を変えた際は応答時間が 6.6 秒

から 7.4 秒になるが，価格が約 8400 円から約 7000 円となるた

め，値は 2 から 1.954 になる．図 5(b) より，この値は再構成対

象アプリ数によらずほぼ一定となっており，再構成対象は全ア

プリを対象にしなくても良いことが分かる．

5. ま と め

提案方式は，線形計画手法を用いて，再構成対象アプリのユー

ザ群満足度の向上を目的関数に，試行計算する．具体的には，

ユーザの応答時間，価格の要求条件を満たした上で，再構成し

た際の応答時間，価格から定まるユーザ満足度を計算し，線形

計画ソルバで再構成対象の複数アプリに対する解を求める．

複数種のアプリを想定して，シミュレーション実験を行い，

提案方式で再構成した際のユーザ満足度向上を確認し，提案方

式の有効性を示した．今後は，配置だけでなく，オフロードデ

バイスのリソースバランス再構成等，再構成対象の拡張を検討

する．

文

献

[1] A. Putnam, et al., "A reconﬁgurable fabric for accelerating
large-scale datacenter services," Proceedings of the 41th An-
nual International Symposium on Computer Architecture
(ISCA’14), pp.13-24, June 2014.

[2] O. Sefraoui, et al., "OpenStack: toward an open-source so-
lution for cloud computing," International Journal of Com-
puter Applications, Vol.55, No.3, 2012.

[3] Y. Yamato, "Automatic system test technology of virtual
machine software patch on IaaS cloud," IEEJ Transactions
on Electrical and Electronic Engineering, Vol.10, Issue.S1,
pp.165-167, Oct. 2015.

[4] Y. Yamato, "Server Structure Proposal and Automatic Ver-
iﬁcation Technology on IaaS Cloud of Plural Type Servers,"
International Conference on Internet Studies (NETs2015),
July 2015.

[5] Y. Yamato, et al., "Fast Restoration Method of Virtual
Resources on OpenStack," IEEE Consumer Communica-
tions and Networking Conference (CCNC2015), Las Vegas,
pp.607-608, Jan. 2015.

[6] Y. Yamato, "Automatic veriﬁcation for plural virtual ma-
chines patches," The 7th International Conference on Ubiq-
uitous and Future Networks (ICUFN 2015), pp.837-838,
Sapporo, July 2015.

[7] Y. Yamato, "Proposal of Optimum Application Deployment
Technology for Heterogeneous IaaS Cloud," 2016 6th Inter-
national Workshop on Computer Science and Engineering
(WCSE 2016), pp.34-37, June 2016.

[8] Y. Yamato, et al., "Fast and Reliable Restoration Method
of Virtual Resources on OpenStack," IEEE Transactions on
Cloud Computing, DOI: 10.1109/TCC.2015.2481392, Sep.
2015.

[9] AWS EC2 web site, https://aws.amazon.com/ec2/instance-

types/

本稿では，著者が提案している環境適応ソフトウェアの新た

[10] M. Hermann, et al., "Design Principles for Industrie 4.0 Sce-

な要素として，運用開始後に他ユーザのアプリ配置状況を勘案

して，再配置を行うことで，対象ユーザの満足度を向上させる

narios," Rechnische Universitat Dortmund. 2015.

[11] Y. Yamato, "Proposal of Vital Data Analysis Platform us-

— 5 —

ing Wearable Sensor," 5th IIAE International Conference
on Industrial Application Engineering 2017 (ICIAE2017),
pp.138-143, Mar. 2017.

ference on Acoustics, Speech, and Signal Processing, Vol. 5,
pp.93-96, 2004.

[30] Xilinx SDK web site, https://japan.xilinx.com/html_docs/

[12] Y. Yamato and M. Takemoto, "Method of Service Template
Generation on a Service Coordination Framework," 2nd In-
ternational Symposium on Ubiquitous Computing Systems
(UCS 2004), Nov. 2004.

[13] Y. Yamato, et al., "Proposal of Real Time Predictive Main-
tenance Platform with 3D Printer for Business Vehicles,"
International Journal of Information and Electronics Engi-
neering, Vol.6, No.5, pp.289-293, Sep. 2016.

[14] Y. Yamato, et al., "Security Camera Movie and ERP Data
Matching System to Prevent Theft," IEEE Consumer Com-
munications and Networking Conference (CCNC 2017),
pp.1021-1022, Jan. 2017.

[15] Y. Yamato, et al., "Proposal of Shoplifting Prevention Ser-
vice Using Image Analysis and ERP Check," IEEJ Trans-
actions on Electrical and Electronic Engineering, Vol.12, Is-
sue.S1, pp.141-145, June 2017.

[16] Y. Yamato, et al., "Analyzing Machine Noise for Real
Time Maintenance," 2016 8th International Conference on
Graphic and Image Processing (ICGIP 2016), Oct. 2016. 　
[17] Y. Yamato, "Experiments of posture estimation on vehicles
using wearable acceleration sensors," The 3rd IEEE Inter-
national Conference on Big Data Security on Cloud (Big-
DataSecurity 2017), pp.14-17, May 2017.

[18] P. C. Evans and M. Annunziata, "Industrial Internet: Push-
ing the Boundaries of Minds and Machines," Technical re-
port of General Electric (GE), Nov. 2012.

[19] T. Sterling, et al., "High performance computing : modern
systems and practices," Cambridge, MA : Morgan Kauf-
mann, ISBN 9780124202153, 2018.

[20] J. E. Stone, et al., "OpenCL: A parallel programming stan-
dard for heterogeneous computing systems," Computing in
science & engineering, Vol.12, No.3, pp.66-73, 2010.
[21] J. Sanders and E. Kandrot, "CUDA by example : an intro-
duction to general-purpose GPU programming," Addison-
Wesley, 2011.

[22] J. Gosling, et al., "The Java language speciﬁcation, third
edition," Addison-Wesley, 2005. ISBN 0-321-24678-0.
[23] Y. Yamato, et al., "Automatic GPU Oﬄoading Technology
for Open IoT Environment," IEEE Internet of Things Jour-
nal, DOI: 10.1109/JIOT.2018.2872545, Sep. 2018.

[24] Y. Yamato,

"Study and Evaluation of Automatic
GPU Oﬄoading Method from Various Language Ap-
plications," International Journal of Parallel, Emergent
and Distributed Systems, Taylor and Francis, DOI:
10.1080/17445760.2021.1971666, Sep. 2021.

[25] Y. Yamato, "Study and Evaluation of Improved Automatic
GPU Oﬄoading Method," International Journal of Paral-
lel, Emergent and Distributed Systems, Taylor and Francis,
DOI: 10.1080/17445760.2021.1941010, June 2021.

[26] Y. Yamato, "Improvement Proposal of Automatic GPU
Oﬄoading Technology," The 8th International Conference
on Information and Education Technology (ICIET 2020),
pp.242-246, Mar. 2020.

[27] Y. Yamato, "Proposal of Automatic Oﬄoading for Function
Blocks of Applications," The 8th IIAE International Con-
ference on Industrial Application Engineering 2020 (ICIAE
2020), pp.4-11, Mar. 2020.

[28] Y. Yamato, "Study of parallel processing area extraction
and data transfer number reduction for automatic GPU of-
ﬂoading of IoT applications," Journal of Intelligent Infor-
mation Systems, Springer, DOI:10.1007/s10844-019-00575-
8, 2019.

[29] J. Fung and M. Steve, "Computer vision signal processing
on graphics processing units," 2004 IEEE International Con-

xilinx2017_4/sdaccel_doc/lyx1504034296578.html

[31] E. Su, et al., "Compiler support of the workqueuing execu-
tion model for Intel SMP architectures," In Fourth Euro-
pean Workshop on OpenMP, Sep. 2002.

[32] S. Wienke, et al., "OpenACC-ﬁrst experiences with real-
world applications," Euro-Par 2012 Parallel Processing,
pp.859-870, 2012.

[33] M. Wolfe, "Implementing the PGI accelerator model," ACM
the 3rd Workshop on General-Purpose Computation on
Graphics Processing Units, pp.43-50, Mar. 2010.

[34] C. C. Wang, et al., "Toward optimal resource allocation of
virtualized network functions for hierarchical datacenters,"
IEEE Transactions on Network and Service Management,
Vol.15, No.4, pp.1532-1544, 2018.

[35] Clang website, http://llvm.org/
[36] J. H. Holland, "Genetic algorithms," Scientiﬁc american,

Vol.267, No.1, pp.66-73, 1992.

[37] NVIDIA vGPU software web site, https://docs.nvidia.com/

grid/index.html

[38] NAS.FT website, https://www.nas.nasa.gov/publications/

npb.html

[39] MRI-Q website, http://impact.crhc.illinois.edu/parboil/

— 6 —

