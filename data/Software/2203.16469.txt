2
2
0
2

r
a

M
0
3

]
T
N
.
h
t
a
m

[

1
v
9
6
4
6
1
.
3
0
2
2
:
v
i
X
r
a

Factorials and Legendre’s three-square theorem: II

Rob Burns

31st March 2022

Abstract

Let ¯S denote the set of integers n such that n! cannot be written as a sum
of three squares. Let ¯S(n) denote ¯S ∩ [1, n]. We establish an exact formula for
¯S(2k) and show that ¯S(n) = 1/8 ∗ n + O(
n). We also list the lengths of gaps
appearing in ¯S. We make use of the software package Walnut to establish these
results.

√

1

Introduction

In a previous paper [1], we constructed an automaton accepting integers n such that
In the current paper we use this
n! cannot be written as a sum of three squares.
automaton and the software package Walnut to explore the sets

S := {n : n! is a sum of three squares},

¯S := {n : n! is not a sum of three squares},

S(n) := {x ≤ n : x! is a sum of three squares}.

and

¯S(n) := {x ≤ n : x! is not a sum of three squares}.

In particular, we establish a formula for S(2k), or equivalently, ¯S(2k), and show that
¯S(n) = 1/8 ∗ n + O(
n). We also list the lengths of possible gaps in S and its
complement ¯S.

√

We mention here some similar previous results. In [2], Deshouillers and Luca estab-
lished the two equivalent bounds

S(n) = 7n/8 + O(n2/3) and ¯S(n) = x/8 + O(n2/3).

This bound was improved by Hajdu and Papp [7] to

¯S(n) = x/8 + O(n1/2 log2 n).

1

 
 
 
 
 
 
Hajdu and Papp [7] proved that the largest gap between consecutive elements of ¯S
is 42. In theorem 3.1, we list the lengths of all gaps that occur between consecutive
elements of S and ¯S.

We make use of the software package Walnut. Hamoon Mousavi, who wrote the
program, has provided an introductory article [8]. Papers that have used Walnut
include [9], [12], [10], [5], [3]. Further resources related to Walnut can be found at
Jeﬀrey Shallit’s page

https://www.cs.uwaterloo.ca/~shallit/papers.html

.

The free open-source mathematics software system SageMath [14] was essential for
the matrix algebra and factoring of polynomials.
In the next section, we describe the automaton that will be used to examine ¯S and
¯S(x).

2 The automaton

We ﬁrst summarise the conditions satisﬁed by integers in ¯S. These come from [1] but
were previously established by Granville and Zhu in 1990 [6]. Let n ∈ N, with binary
representation given by n = (cid:80)
k≥0 ak2k, where all but ﬁnitely many ai are zero. Let
γ be the highest power of 2 dividing n!. For i ∈ {3, 5}, deﬁne αi = αi(n) by

α3 = α3(n) := #

α5 = α5(n) := #

(cid:110)

(cid:110)

k ≥ 0 :

k ≥ 0 :

k+2
(cid:88)

i=k
k+2
(cid:88)

i=k

ai2i−k ∈ {3, 4}

(cid:111)

ai2i−k ∈ {5, 6}

(cid:111)

.

(1)

(2)

Theorem 2.1. Let n ∈ N have binary representation n = (cid:80)
k≥0 ak2k, where all but
ﬁnitely many ai are zero. If γ is the highest power of 2 dividing n!, then n! = 2γZ,
where Z satisﬁes

Z ≡ 3α3(n)(−1)α5(n)

(mod 8)

Corollary 2.2. If n ∈ N, then n! cannot be written as a sum of three squares if and
only if γ and α3 are even and α5 is odd.

According to the above two results, whether n! can be written as a sum of three squares
is determined by the triple (γ (mod 2), α3 (mod 2), α5 (mod 2)). For convenience,

2

Figure 1: Automaton for the parity of γ

Figure 2: Automaton for the parity of α3

we will give this triple a name. For integers n, deﬁne Θ(n) by

Θ(n) := ( γ

(mod 2), α3

(mod 2), α5

(mod 2) ).

The components of Θ(n) are

Θ1(n) := γ

(mod 2), Θ2(n) := α3

(mod 2), Θ3(n) := α5

(mod 2).

(3)

Then, n ∈ ¯S if and only if Θ(n) = (0, 0, 1).

We present here three automata which take as input the binary digits of an integer
n, starting with the least signiﬁcant digit. The automata were produced by Walnut
based on the instructions provided in [1]. The ﬁrst automaton, which we call gamma,
is pictured in ﬁgure 1. It accepts integers n if and only if γ(n) is even. The second
automaton, which we call a3, is pictured in ﬁgure 2. It accepts integers n if and only
if α3(n) is even. The third automaton, which we call a5, is pictured in ﬁgure 3. It
accepts integers n if and only if the α5(n) is even.

For any triple of binary digits (x, y, z), we can use Walnut to create an automaton
which accepts n if and only if Θ(n) = (x, y, z). We are particularly interested in
determining when Θ(n) = (0, 0, 1). We create this automaton using the Walnut
command:

def factauto "?lsd_2 $gamma(n) & $a3(n) & ~$a5(n)":

3

Figure 3: Automaton for the parity of α5

Figure 4: Automaton accepting n if n! cannot be written as a sum of 3 squares

4

The resulting automaton has 33 states and is pictured in ﬁgure 4.

3 Gaps and runs in S and ¯S
In this section we investigate the gaps and runs in the sets S and ¯S. A gap g exists
in S (or ¯S) if there are integers x and y which are consecutive elements of S and such
that y − x = g. A run of length r exists in S (or ¯S) if S contains x, x + 1, . . . , x + r − 1
but x − 1 and x + r are not in S. Since S ∪ ¯S = N, gaps in S correspond to runs in
¯S and vice versa. For example, if S contains a run of size r, then ¯S contains a gap of
length r + 1.

In [7], Hajdu and Papp proved that the largest gap between consecutive elements of
¯S is 42.

Theorem 3.1. The gap sizes in S are {1, 2, 3, 4}. The gap sizes in ¯S are

{1, 2, 3, . . . , 23, 25, 26, 28, 30, 31, 33, 34, 35, 37, 38, 42}.

Proof. We ﬁrstly deal with ¯S. Recall the automaton "factauto" which was deﬁned
previously. It accepts integers n such that n! cannot be written as a sum of three
squares. We use Walnut to deﬁne an automaton, which we call "gaps":

def gaps "?lsd_2 $factauto(n) & $factauto(n+r) & (Aj (j < r-1) => ~$

factauto(n+ j + 1))":

This automaton takes as input the integer pair (n, r) and reaches an accepting state
if and only if n ∈ ¯S and the next integer in ¯S is n + r, i.e. there a gap of length r in
¯S starting at n. Since the automaton has 319 states, we will not display it here. The
following Walnut command creates an automaton which accepts an integer r if and
only if there is a gap of length r somewhere in ¯S:

eval tmp "?lsd_2 E n $gaps(n, r)":

This automaton is displayed in ﬁgure 5. A patient reader will see that the automaton
accepts the integers listed in the theorem.

We can use the same approach to ﬁnd all gaps in the set S. We deﬁne the automaton
"sgaps" which takes as input the integer pair (n, r) and reaches an accepting state if
and only if n ∈ S and the next integer in S is n + r, i.e. there a gap of length r in S
starting at n.

def sgaps "?lsd_2 ~$factauto(n) & ~$factauto(n+r) & (Aj (j < r-1) => $

factauto(n+ j + 1))":

5

Figure 5: Automaton accepting gap lengths in ¯S

The resulting automaton has 203 states. The following Walnut command creates
an automaton which accepts an integer r if and only if there is a gap of length r
somewhere in S:

eval tmp "?lsd_2 E n $sgaps(n, r)":

This automaton is displayed in ﬁgure 6. It is clear that it only accepts the integers
1, 2, 3, 4.

Remarks. A gap of 42 in ¯S commences at n = 23268 as mentioned by Hajdu and
Papp. This is the second last gap to appear in the sequence ¯S. The last gap to appear
in ¯S is 33, which commences at n = 153828 = (100101100011100100)2.
Theorem 3.1 is about gaps in the set ¯S which contains integers n satisfying Θ(n) =
(0, 0, 1). The same method can be used for other sets deﬁned in terms of Θ (see (9)
below). Hajdu and Papp showed that the maximum gap length in any of these sets
is 42.

4 A formula for ¯S(2k)
In this section we establish a formula for ¯S(2k), The method we use is taken from the
papers [4], [11], [13]. Firstly, we use Walnut to obtain a linear representation of ¯S(n).
Walnut produces matrices M0 and M1 and vectors v and w such that, if n has binary
representation (n0, n1, . . . , nk) where n0 is the least signiﬁcant digit, then

¯S(n) = v ∗ Mn0 ∗ Mn1 ∗ · · · ∗ Mnk ∗ w

(4)

6

Figure 6: Automaton accepting gap lengths in S

In the particular case that n = 2k, we have ¯S(2k) = v ∗ M k
0 ∗ M1 ∗ w. The theory of
linear recurrences says that there are constants {ci} such that ¯S(2k) can be written
as

¯S(2k) =

(cid:88)

ciλk
i

(5)

where {λi} are the roots of the minimal polynomial of M0. The constants {ci} can
be determined by calculating ¯S(2k) for enough values of k and plugging the values
into (5) to obtain a system of linear equations that can be solved.

i

Theorem 4.1. For k ≥ 2,

¯S(2k) =






2k−3 − 2(k−4)/2,
2k−3 − 2(k−3)/2,
2k−3 − 2(k−5)/2,
2k−3 + 2(k−4)/2,
2k−3 + 2(k−3)/2,
2k−3 − 3 ∗ 2(k−5)/2,
2k−3

(mod 24)

(mod 24)

(mod 24)

if k ≡ {0, 2, 22}
if k ≡ {1, 3}
if k ≡ 11
if k ≡ {14, 16, 18}
if k ≡ 17
if k ≡ 23
otherwise

(mod 24)
(mod 24)

(mod 24)

Proof. The Walnut command

eval sumfact n "?lsd_2 (j>=1) & (j<=n) & $factauto(j)":

produces the matrices M0 and M1 and the vectors v and w mentioned above. Since
the dimensions of these objects are large, we will not display them here. The minimal

7

polynomial of M0 is

h(x) = x20 − 7 ∗ x19 + 20 ∗ x18 − 30 ∗ x17 + 24 ∗ x16 − 40 ∗ x14 + 64 ∗ x13 − 128 ∗ x11

+ 160 ∗ x10 − 384 ∗ x8 + 960 ∗ x7 − 1280 ∗ x6 + 896 ∗ x5 − 256 ∗ x4

√

√

= (x − 2) ∗ (x − 1) ∗ (x − i − 1) ∗ (x + i − 1) ∗ (x − i

2) ∗ (x + i

2)∗

∗ (x +

2) ∗ (x + (−i/2 + 1/2) ∗

3 + i/2 − 1/2)∗

√

∗ (x − 1/2 ∗

2 ∗

√

√

∗ (x + (i/2 + 1/2) ∗
√

√

∗ (x − 1/2 ∗

2 ∗

√

√

√

∗ (x + (i/2 − 1/2) ∗

3 + i/2 − 1/2) ∗ (x −

3 − 1/2 ∗
√

2) ∗ (x + 1/2 ∗
√

√

√

2)∗

√

3 − 1/2 ∗

2)∗

√

√

√

√

2 ∗
2) ∗ x4

3 + 1/2 ∗
√

2) ∗ (x + 1/2 ∗

2 ∗

3 + 1/2 ∗

3 − i/2 − 1/2) ∗ (x + (−i/2 − 1/2) ∗

3 − i/2 − 1/2)∗

All roots of h, apart from 2 and 1, are of the form λi =
We then have for 0 ≤ s < 24,

√

2 ∗ (a 24’th root of unity).

¯S(224k+s) =

(cid:88)

j

cjλ24k+s
j

= c0 ∗ 224k+s + c1 +

(cid:88)

λj (cid:54)1,2

cjλ24k+s
j

=c0 ∗ 224k+s + c1 + 212k ∗

(cid:88)

cjλs
j

λj (cid:54)=1,2

(6)

The values of the {cj} can be determined by calculating ¯S(2k) for enough k using (4).
We create a matrix A having the same dimension as the number of constants. The
j’th row of A is

Then the vector of constants is given by

2j+2, 1, λj+2

2

, λj+2
3

, . . .

(c0, c1, . . . ) = A−1 ∗ ( ¯S(22), ¯S(23), . . . ).

The calculation gives c0 = 1/8 and c1 = 0. Since we are only interested in the values
for c0 and c1, an alternative approach is to use (6) and the calculated values of, say,
¯S(23) = 0, ¯S(227) = 16773120 and ¯S(251) = 281474959933440 to create three linear
equations. The equations are:

23 ∗ c0 + c1 + τ =0
227 ∗ c0 + c1 + 212 ∗ τ =16773120
251 ∗ c0 + c1 + 224 ∗ τ =281474959933440

where τ = (cid:80)

λj (cid:54)=1,2 cjλ3

j . These can be solved to give c0 = 1/8, c1 = 0 and τ = −1.

Plugging the values for c0 and c1 into (6), we see that, for each 0 ≤ s < 24, the terms
(cid:80)

λj (cid:54)=1,2 cjλs

j satisfy

(cid:88)

λj (cid:54)=1,2

cjλs

j = ¯S(2s) − 2s−3

8

As an example of the calculation that is required for each s, ¯S(23) = 0 so (cid:80)
j =
−1. Hence, if n ≡ 3 (mod 24), then ¯S(2n) = 2n−3 − 212∗(cid:98)n/24(cid:99) = 2n−3 − 2(n−3)/2. Here
(cid:98)x(cid:99) is the ﬂoor function. A similar calculation can be made for each s.

λj (cid:54)=1,2 cjλ3

Theorem 4.2. For k ≥ 5,

¯S(3 ∗ 2k) =






3 ∗ 2k−3 + 1,
3 ∗ 2k−3 + 1 − 2(k−3)/2,
3 ∗ 2k−3 + 1 − 2(k−2)/2,
3 ∗ 2k−3 + 1 − 2(k−4)/2,
3 ∗ 2k−3 + 1 − 2(k−5)/2,
3 ∗ 2k−3 + 1 + 2(k−4)/2,
3 ∗ 2k−3 + 1 + 2(k−1)/2,
3 ∗ 2k−3 + 1 + 3 ∗ 2(k−4)/2,
3 ∗ 2k−3 + 1 + 2(k−3)/2,
3 ∗ 2k−3 + 1 − 3 ∗ 2(k−4)/2,
3 ∗ 2k−3 + 1 − 2(k−1)/2,

(mod 24)

(mod 24)

(mod 24)
(mod 24)

if k ≡ {7, 9, 13, 18, 19} (mod 24)
if k ≡ {1, 3, 5}
if k ≡ {0, 4, 10}
if k ≡ {2, 6, 8, 12}
if k ≡ {11, 23}
if k ≡ 14
if k ≡ 15
if k ≡ 16
if k ≡ 17
if k ≡ {20, 22}
if k ≡ 21

(mod 24)
(mod 24)
(mod 24)
(mod 24)

(mod 24)

(mod 24)

Proof. From (4),

¯S(3 ∗ 2k) = v ∗ M k

0 ∗ M1 ∗ M1 ∗ w

We can therefore use the same approach as in theorem 4.1. We have,

¯S(3 ∗ 2k) =

(cid:88)

ciλk
i

i

(7)

where {cj} are constants and {λj} are the roots of the minimal polynomial of M0,
which we have already calculated. The constants c0 and c1 can be calculated using
the values of ¯S(3 ∗ 23) = 3, ¯S(3 ∗ 227) = 50327553 and ¯S(3 ∗ 251) = 844424913354753
to create three linear equations. The equations are:

23 ∗ c0 + c1 + τ =3
227 ∗ c0 + c1 + 212 ∗ τ =50327553
251 ∗ c0 + c1 + 224 ∗ τ =844424913354753

where τ = (cid:80)
λj (cid:54)=1,2 cjλ3
As before, we have for 0 ≤ s < 24,

j . These can be solved to give c0 = 3/8, c1 = 0 and τ = −1.

¯S(3 ∗ 224k+s) =

(cid:88)

j

cjλ24k+s
j

= 3/8 ∗ 224k+s + 1 +

(cid:88)

λj (cid:54)1,2

cjλ24k+s
j

=3 ∗ 224k+s−3 + 1 + 212k ∗

(cid:88)

cjλs
j

λj (cid:54)=1,2

(8)

9

The formula for ¯S(3 ∗ 2k) can be deduced once (7) is used to calculate (cid:80)
for each 0 ≤ s < 24.

λj (cid:54)=1,2 cjλs

j

5 A bound for ¯S(n)
In this section we establish a best possible bound on ¯S(n). We borrow an argument
from the paper by Hajdu and Papp [7].

We introduce the following sets for any triple (x, y, z) of binary digits:

¯S(x,y,z) :={n : Θ(n) = (x, y, z)},
¯S(x,y,z)(n) :={r ≤ n : Θ(r) = (x, y, z)},
¯S(x,y,z)(m, n) :={m < r ≤ n : Θ(r) = (x, y, z)}

(9)

Then ¯S(0,0,1) = ¯S and ¯S(0,0,1)(n) = ¯S(n).

Note that our set ¯S(x,y,z) is equivalent to the set H (α,β) used by Hajdu and Papp,
where α = x and β = 3y(−1)z.

We note that the results from the previous section show that
√

¯S(2k) = 1/8 ∗ 2k + O(

2k)

and

¯S(3 ∗ 2k) = 1/8(3 ∗ 2k) + O(

2k)

√

The same bound can be shown to apply for other sets of numbers deﬁned by (γ, α3, α5).
In summary, as for the case when (x, y, z) = (0, 0, 1), the set ¯S(x,y,z)(n) is accepted
by an automaton constructed from the automata "gamma", "a3" and "a5" displayed
earlier. For example, the set of {n : Θ(n) = (1, 1, 1)} is accepted by the automaton
deﬁned by the Walnut command:

def factauto111 "?lsd_2 ~$gamma(n) & ~$a3(n) & ~$a5(n)":

As before, a linear representation of this automaton in terms of the matrices M0 and
M1 and the vectors v and w comes from the command:

eval sumfact111 n "?lsd_2 (j>=1) & (j<=n) & $factauto111(j)":

For all choices of (x, y, z), the matrix M0 that Walnut produces is the same as the
matrix M0 that was produced by the automaton "sumfact" that was used in analysing
the Θ(n) = (0, 0, 1) case. All the previous analysis related to the case Θ(n) = (0, 0, 1)
therefore applies to the other choices of (x, y, z). As a result, the same methods show
that, for any (x, y, z),

¯S(x,y,z)(2k) = 1/8 ∗ 2k + O(

√

2k)

and

¯S(x,y,z)(3 ∗ 2k) = 1/8(3 ∗ 2k) + O(

√

2k). (10)

10

It then follows that, for any choice of (x, y, z) and k,

¯S(x,y,z)(2k, 2k+1) = 1/8 ∗ 2k + O(
¯S(x,y,z)(2k+1, 3 ∗ 2k) = 1/8 ∗ 2k + O(
¯S(x,y,z)(3 ∗ 2k−2, 2k) = 1/8 ∗ 2k + O(

√

√

√

2k)

2k)

2k).

(11)

Lemma 5.1 (Hajdu and Papp Lemma 3.1). For any integer k with k ≥ 1, we have
γ(t ∗ 2k + i) = γ(i) + γ(t ∗ 2k) (mod 2) for 0 ≤ i < 2k.

For the following lemma, we divide the region [0, 2s) into four equal sized subregions
given by:

I1 :={i : 0 ≤ i < 2s−2}
I2 :={i : 2s−2 ≤ i < 2s−1}
I3 :={i : 2s−1 ≤ i < 3 ∗ 2s−2}
I4 :={i : 3 ∗ 2s−2 ≤ i < 2s}.

(12)

Lemma 5.2 (Hajdu and Papp Lemma 3.3). Let k be an integer and t an odd integer
with t ≥ 1. Then, for each j ∈ {1, 2, 3, 4}, there exist numbers c(t, j) ∈ {1, 3, 5, 7}
such that

3α3(t∗2k+i) ∗ (−1)α5(t∗2k+i) = c(t, j) ∗ 3α3(i) ∗ (−1)α5(i)

(mod 8)

for all i ∈ Ij.

Lemma 5.3. For integers r, s and t satisfying 0 ≤ r < s, 0 ≤ t < 2s, 2 (cid:54) |t,

¯S(t ∗ 2s, t ∗ 2s + 2r) = 1/8 ∗ 2r + O(

√

2r)

Proof.

¯S(t ∗ 2s, t ∗ 2s + 2r) = #{i : 0 ≤ i < 2r, Θ(t ∗ 2s + i) = (0, 0, 1)}

4
(cid:88)

{i ∈ Ij : Θ(t ∗ 2s + i) = (0, 0, 1)}

=

j=1

where Ij are the regions deﬁned in ( 12 ). From lemma 5.1, if 0 ≤ i < 2s,

Θ1(t ∗ 2s + i) = 0 ⇐⇒ Θ1(i) = −Θ1(t ∗ 2s)

11

From lemma 5.2, if i ∈ Ij,

(Θ2(t ∗ 2s + i), Θ3(t ∗ 2s + i)) = (0, 1)

⇐⇒ c(t, j) ∗ 3α3(i) ∗ (−1)α5(i) ≡ −1
⇐⇒ (Θ2(i), Θ3(i)) = (d2(t, j), d3(t, j))

(mod 8)

for some d1, d2 ∈ {0, 1}. Hence,

¯S(t ∗ 2s, t ∗ 2s + 2r) =

4
(cid:88)

j=1

#{i ∈ Ij : Θ(i) = (−Θ1(t ∗ 2k), d2(t, j), d3(t, j))}

= ¯S(x,y,z)1(2r−2) + ¯S(x,y,z)2(2r−2, 2r−1) +

+ ¯S(x,y,z)3(2r−1, 3 ∗ 2r−2) + ¯S(x,y,z)4(3 ∗ 2r−2, 2r)
2r))

√

= 4 ∗ (1/8 ∗ 2r−2 + O(
= 1/8 ∗ 2r + O(

2r).

√

where (x, y, z)j = (−Θ1(t ∗ 2k), d2(t, j), d3(t, j)) for j ∈ {1, 2, 3, 4} and we have used
(11).

The argument in the following theorem comes from theorem 2.3 in the paper by Hajdu
and Papp.

Theorem 5.4. ¯S(n) = 1/8 ∗ n + O(

√

n)

Proof. We ﬁrst note that (10) implies that for any (x, y, z),

¯S(x,y,z)(2k−2, 2k−1) =1/8 ∗ 2k−2 + O(
¯S(x,y,z)(2k−1, 3 ∗ 2k−2) =1/8 ∗ 2k−2 + O(
¯S(x,y,z)(3 ∗ 2k−2, 2k) =1/8 ∗ 2k−2 + O(

√

√

√

2k)

2k)

2k).

(13)

Let n be an integer with binary representation n = (cid:80)j
Then,

1 2fi, where f1 > · · · > fj ≥ 0.

¯S(n) = ¯S(2f1) + ¯S(2f1, 2f1 + 2f2) + · · · + ¯S(2f1 + · · · + 2fj−1, 2f1 + · · · + 2fj )

Any of the terms above can be written as

¯S(2f1 + · · · + 2fl−1, 2f1 + · · · + 2fj ) = ¯S(t ∗ 2fl, t ∗ 2fl + 2fl+1)

where t < 2fl is odd. Since,

¯S(t ∗ 2fl, t ∗ 2fl + 2fl+1) = 1/8 ∗ 2fl+1 + O(

√

fl+1
2

)

12

by lemma 5.3, we have

¯S(n) =

j
(cid:88)

l=1

1/8 ∗ 2fl + O(

√
fl)
2

√

f1+1
=1/8 ∗ n + O((
2
√
f1).
2

=1/8 ∗ n + O(

√

− 1)/(

2 − 1))

Since f1 ≤ log2(n) we have

¯S(n) = 1/8 ∗ n + O(

√

n).

References

[1] Rob Burns. Factorials and Legendre’s three-square theorem. arXiv, 2021. 1, 2, 3

[2] Jean-Marc Deshouillers and Florian Luca. How often is n! a sum of three squares?
In The Legacy of Alladi Ramakrishnan in the Mathematical Sciences, pages 243–251.
Springer New York, 2010. 1

[3] Chen Fei Du, Hamoon Mousavi, Eric Rowland, Luke Schaeﬀer, and Jeﬀrey Shallit. De-
cision algorithms for ﬁbonacci-automatic words, ii: Related sequences and avoidability.
Theoretical Computer Science, 657:146–162, 2017. 2

[4] Chen Fei Du, Hamoon Mousavi, Luke Schaeﬀer, and Jeﬀrey Shallit. Decision algorithms
for ﬁbonacci-automatic words, III: Enumeration and abelian properties. International
Journal of Foundations of Computer Science, 27(08):943–963, dec 2016. 6

[5] Daniel Goč, Hamoon Mousavi, and Jeﬀrey Shallit. On the number of unbordered
factors. In Language and Automata Theory and Applications, pages 299–310. Springer
Berlin Heidelberg, 2013. 2

[6] Andrew Granville and Yiliang Zhu. Representing binomial coeﬃcients as sums of

squares. The American Mathematical Monthly, 97(6):486–493, 1990. 2

[7] L. Hajdu and A. Papp. On asymptotic density properties of the sequence n! Acta

Arithmetica, 184(4):317–340, 2018. 1, 2, 5, 10

[8] Hamoon Mousavi. Automatic theorem proving in Walnut. arXiv, 2016. 2

[9] Hamoon Mousavi, Luke Schaeﬀer, and Jeﬀrey Shallit. Decision algorithms for ﬁbonacci-
automatic words, i: Basic results. RAIRO Theor. Informatics Appl., 50:39–66, 2016.
2

13

[10] Narad Rampersad and Jeﬀrey Shallit. Congruence properties of combinatorial se-
quences via walnut and the rowland-yassawi-zeilberger automaton. arXiv, 2021. 2

[11] Jeﬀrey Shallit. Sumsets of wythoﬀ sequences, ﬁbonacci representation, and beyond.

arXiv, 2020. 6

[12] Jeﬀrey Shallit. Frobenius numbers and automatic sequences. arXiv, 2021. 2

[13] Jeﬀrey Shallit. Intertwining of complementary thue-morse factors. arXiv, 2022. 6

[14] The Sage Developers. SageMath, the Sage Mathematics Software System (Version 8.2),

2018. https://www.sagemath.org. 2

14

