Systematic Mapping Protocol

Variability Management in Dynamic Software Product Lines for
Self-Adaptive Systems

Oscar Aguayo, Samuel Sep´ulveda

Departamento de Ciencias de la Computaci´on e Inform´atica
Universidad de La Frontera
Temuco, Chile
May 2022

2
2
0
2

n
u
J

9
2

]
E
S
.
s
c
[

2
v
7
8
4
8
0
.
5
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
Abstract

Context: The Importance of Dynamic Variability Management in Dynamic Software Product
Lines.
Objective: Deﬁne a protocol for conducting a systematic mapping study to summarize and
synthesize evidence on dynamic variability management for Dynamic Software Product Lines in
self-adaptive systems.
Method: Application the protocol to conduct a systematic mapping study according the guide-
lines of K. Petersen.
Results: A validated protocol to conduct a systematic mapping study.
Conclusions: First ﬁndings show that it is necessary to visualize new ways to manage variability
in dynamic software product lines.
Keywords: Self-adaptive systems, reconﬁguration, Dynamic software product lines, systematic
mapping

1 Introduction

With the constant evolution of software due to technological changes and its diversiﬁcation in their
needs, there is an increasing number of self-adaptive software systems, whose main feature is the adap-
tation of the system to the diﬀerent needs, either the customer or the environment [1]. Therefore,
these approaches must provide system reconﬁguration capabilities, giving the possibility to adapt at
runtime to react to changes in the context [1]. In [2], states that facing these challenges has led to the
development of several approaches to adapt to changing needs, including self-adaptive, agent-based,
autonomous, emergent, and bio-inspired systems. Dynamic software product lines (DSPLs) can meet
these needs by providing a conceptual framework for managing variability in these types of systems,
generating runtime changes, and managing system variability according to the needs of the environ-
ment [3].

This paper aims to present the deﬁnition of a protocol to systematically map the evolution of variability
management in Dynamic Software Product Lines during the reconﬁguration process of self-adaptive
systems between the years 2010 and 2021. The report is structured as follows. Section 2 describes the
research method conducted, including the deﬁnition of the search string, the search process, and the
criteria for inclusion and exclusion of articles. Finally, Section 3 presents the conclusions and future
work.

2 Protocol deﬁnition

conducting a systematic mapping study (SMS) according to the guidelines deﬁned by Petersen [4].

2.1 Need

This work is the initial part of a proposal that seeks to build and develop an architecture to manage
variability in DSPL during the software reconﬁguration process for self-adaptive systems, where it is
necessary to know in detail the proposals that exist today in the area, as this will allow:

• Identify the requirements to generate a software reconﬁguration while maintaining a level of

stability in the running system during the process.

• Know which technologies, tools, approaches, or others are used during the system reconﬁguration

process in DSPL and understand the justiﬁcations for use in each case.

• Avoid activities or processes already performed by other authors.

• Identify existing challenges in the area of reconﬁgurations for DSPL.

The results of the systematic mapping are expected to serve the SPL and eventually DSPL research
community as a synthesis of what has happened in the last 11 years in run-time reconﬁguration
architectures for self-adaptive systems, both at the theoretical-practical and bibliometric levels.

1

2.2 Objective

The aim of this work is to collect several proposals of architectures or design patterns to manage the
reconﬁguration process in DSPL for self-adaptive systems present in the literature.
It will seek to
analyze various proposals of constraints in the reconﬁguration process, main errors during the system
adaptation process or also some notion regarding how to maintain system stability and reliability
during reconﬁgurations, ensuring the consistency of the software with respect to the models and the
running system [3]. For this purpose, a systematic mapping of the literature for the most relevant
articles of the last 11 years will be carried out, with the intention of collecting as much data as possible
on the proposals to analyze the methodological approach used to reconﬁgure the solution domain of
a software in an execution environment. The ﬁnal part of the paper is a synthesis and publication of
results. It is expected that the publication of the systematic mapping will contribute to identify several
challenges in the management of variability for the DSPL scientiﬁc community, as well as contribute
to the integral development of the DSPL through the generation of a line of research.

2.3 Research questions

The research will be focused on obtaining background on how variability is managed in DSPL, main
challenges and constraints used. The main question of our research refers to What are the main
diﬃculties or errors in the proposed architectures for managing variability during the reconﬁguration
of Dynamic Software Product Lines in self-adaptive systems?. In order to solve this research question,
it will be subdivided into more speciﬁc questions, which are described in Table 1.

Classiﬁcation
Agents,
Software
lan-
Constraint
guage,
Machine
Learning, Meta-
models, Reasoning
Static
engines,
Re-
adaptations,
on
strictions
feature modeling,
Others.
-Proprietary archi-
tecture, MAPE-K,
Agent-oriented
software
ing,
software

engineer-
Third-party

ID RQ
1 What

approach
was used to ap-
constraints
ply
software
during
reconﬁgurations in
DSPL?

2 What methodolo-
gies are currently
to manage
used
DSPL
variability
during reconﬁgura-
tions?

3 What are the cur-
rent challenges
in
the management of
DSPL?

Objective
Collect information
on the type of prac-
tices used to main-
tain system stabil-
ity during DSPL re-
conﬁgurations.

Identify how the
variability model
communicates with
sys-
the
running
tem to
visualize
reconﬁguration
changes
Highlight the main
challenges to prop-
erly manage the dy-
namic variability of
DSPL.

Table 1: Research questions

2.4 Publication Questions

A set of publication questions (PQ) is included to complement the information collected and to char-
acterize the bibliographic, demographic and bibliographic space. This includes the type of place where
published papers and the number of articles per year, details are shown in Table 2.

2

ID PQ
1 What year was the

Classiﬁcation
2010-2021

article published?

2 Where was the arti-
cle published?

Journal, Congress

Objective
Highlight
how
DSPL research has
evolved over
the
years. Years with
more publications
Identify the jour-
nals and congresses
interested
most
study of
in the
ana-
the DSPL,
the most
lyzing
con-
predominant
gresses,
journals
and publishers

Table 2: Publication questions

2.5 Data Sources

According to [5][6] we consider the data sources detailed in Table 3, that are recognized among the
most relevant in the Software Engineering community.

Library
ACM Digital Library
IEEE Xplore
Science Direct
Springer Link
Wiley Inter-Science

URL
dl.acm.org
ieeexplore.ieee.org
sciencedirect.com
springer.com
onlinelibrary.wiley.com

Table 3: Data Sources

2.6 Search String

The search string has been constructed according to the steps deﬁned by [5], through the context and
the research question a set of keywords has been extracted, then for each keyword a set of synonyms
has been proposed to widen the search range. Using PICOC [7], the search string for the systematic
mapping is constructed.

• Population: Dynamic Software Product Lines (DSPL)

• Intervention: Variability management approaches for DSPL.

• Comparison: The comparison does not apply to our study because the RQs did not consider the
comparison of the assembled documents with a speciﬁc DSPL variability management proposal.

• Outcome: Software reconﬁgurations.

• Context: Dynamic Software Product Lines and Self-Adaptive Systems.

The list of keywords and synonyms is listed as follows:

• adaptation / reconﬁguration

• dynamic software product lines / software product lines

• self-adaptive systems / adaptive systems / evolution

3

The ﬁnal query string is described as follows:
(”self-adaptive systems” OR ”self-adapting systems” OR ”autoadaptive systems” OR ”self-adaptive”
OR ”self-adapting” OR ”adaptive systems” OR “Self-adaptation” OR “Adaptation”)
AND
(”dynamic software product line” OR ”dynamic software product lines” OR ”dynamic product family”
OR ”dynamic product families” OR ”dynamic product line” OR ”dynamic product lines” OR “Software
product line” OR “software product lines” OR “product family” OR “product families” OR “product
line” OR “product lines”)
AND
(”system reconﬁguration” OR ”reconﬁguration” OR “reconﬁguration rules” OR “conﬁguration rules”
OR “adaptation rules” OR “evolution”)

It is important to mention that the search string has been adapted for some search engines, due to
the limitations of each one [8]. However, each adaptation does not add or remove any ﬁlters. Table 4
shows the total results of the search string used in the selected data sources. Due to the restriction in
the search string of the Science Direct data source, where a maximum of eight key terms is allowed,
the following search string is used:

(“self-adaptive systems” OR “self-adaptive” OR “auto-adaptive systems” OR “adaptation”) AND
(“dynamic software product line” OR “dynamic software product lines” OR “software product lines”
OR “software product line”)

Library
ACM Digital Library
IEEE Xplore
Science Direct
Springer Link
Wiley Inter-Science
Total Result

Result
765
74
485
5511
1011
7846

Table 4: Search string, total results (5 May 2022)

2.7 Search and Selection Process

The search process starts with an automatic search in the selected electronic data sources using the
search string deﬁned in 2.6. The goal of this is to obtain the ﬁrst collection of articles to be distributed
among the researchers of the team. Each researcher has to independently ﬁlter this initial collection
according to the following inclusion/exclusion criteria, which allow deciding whether an article in the
collection is relevant or not for this study by reviewing only the title, abstract and keywords of each
article.
The ﬁrst ﬁlter consists of applying the Inclusion (IC) and Exclusion (EC) criteria according to the
following priority deﬁned in Figure 1. The deﬁnition of each IC and EC is shown in Tables 4 and 5. To
avoid the exclusion of articles relevant to the research, we will occupy the snowballing search according
to the guidelines proposed by Wohlin [9], in which the search range will be extended by reviewing the
references of each article (backward snowballing) and the citations obtained by the articles (forward
snowballing) already selected by the inclusion and exclusion criteria.

2.8 Resolving diﬀerences and avoiding bias

In order to minimize possible diﬀerences in the conduct of the study, our protocol states the following
decisions:

• External validation of the search string and papers ﬁltering.

• Publication of the protocol for public review on the arXiv platform.

• Collaborative deﬁnition of the SMS protocol and RQs.

4

Criteria

ID
IC1 Articles published between 2010-2021.
IC2 Papers written in English.
IC3 Type of paper:

• Proceeding.

• Journal.

• Conference Paper.

• Chapter LNCS (Lecture Notes in

Computer Science).

CI4 Papers with more than one version, only the latest version will be

included.

CI5 Papers whose abstracts deal with Dynamic Software Product
Lines or reconﬁgurations in Software Product Lines for self-
adaptive systems.

CI6 Topic:

• Computer Science.

Table 5: Inclusion criteria

Criteria

ID
CE1 Articles written before 2010.
CE2 Articles not related to Software Product Lines.
CE3

Secondary researches. (If they exist, they will be added as related
work).

CE4 Papers without access.
CE5 Duplicate papers will be excluded.
CE6 The following types of items will be excluded:

• Tutorials.

• Short Paper.

• Abstract.

• Poster.

• Paper in progress (incomplete).

• Book.

Table 6: Exclusion criteria

• The researchers individually decide on the inclusion or exclusion of the assigned articles, chosen

at random from those retrieved through a pilot selection.

• As a means of validation in the ﬁltering and subsequent classiﬁcation of the study, a concordance
test based on Fleiss’ Kappa statistic [10] will be performed. If Kappa ≥ 0.75 then the criterion
is suﬃciently clear [11], otherwise, the criterion should be revised to obtain by its interpretation
and application.

2.9 Results and Reporting

After having ﬁltered the articles by inclusion and exclusion criteria, the relevant data will be extracted
from the selected papers to answer the RQs and PQs.
The Meta-data collected for each article: (i) title, (ii) authors (each author), (iii) year of publication,
(iv) publication type and classiﬁcation, (v) approach used to generate reconﬁgurational constraints
in DSPL, (vi) methodologies used to manage variability, (vii) challenges in DSPL management, (viii)
results and future work.

5

Figure 1: Results from the search strategies

Another output will be a bubble diagram that graphically represents the number of documents found
divided into categories. An example is shown in Figure 2.
Presenting the results of this SMS considers 3 stages:

• Stage 1: Publish the SMS protocol at Arxiv web platform.

• Stage 2: Publish the results of the SMS in an academic journal or at a conference focused on

the topic of software engineering and DSPL.

• Stage 3: Present a proposal for dynamic variability management based on the problems en-

countered in the SMS.

The report with the results of phase 2 will be prepared with the structure recommended by [5]. The
main sections are:

• Introduction

– Context

– Aim and need

• Background

– DSPL

– Dynamic variability

– Self-adaptive systems

• Related work

• Methodology

• Results and discussion

– Answers to RQs and PQs

– Threats to validity

6

Figure 2: Bubble Diagram Example

– DSPL Challenges

• Conclusion

– Conclusions

– Future work

3 Conclusion and Future Work

We presented a protocol deﬁnition of an SMS to summarize and synthesize the evidence over the last
few years on variability management in DSPL for self-adaptive systems. The initial results show that
a detailed review needs to be done on the diﬀerent challenges pertaining to the variability management
of self-adaptive systems using DSPLs and their impact on an eventual architecture proposal to manage
such variability.
As future work we plan to deﬁne an architecture or methodology that allows managing variability
dynamically for DSPL ensuring minimum quality criteria, such as usability and performance in each
reconﬁguration.

7

References

[1] D. Weyns, Software Engineering of Self-adaptive Systems. Cham: Springer International
Publishing, 2019, pp. 399–443. [Online]. Available: https://doi.org/10.1007/978-3-030-00262-6 11

[2] M. Hinchey, S. Park, and K. Schmid, “Building dynamic software product lines,” Computer,

vol. 45, no. 10, pp. 22–26, 2012.

[3] C. Quinton, M. Vierhauser, R. Rabiser, L. Baresi, P. Gr¨unbacher, and C. Schuhmayer,
Evolution and
https:

“Evolution in dynamic software product
Process, vol. 33, no. 2, p. e2293, 2021,
//onlinelibrary.wiley.com/doi/abs/10.1002/smr.2293

lines,” Journal of Software:

[Online]. Available:

e2293 smr.2293.

[4] K. Petersen, S. Vakkalanka, and L. Kuzniarz, “Guidelines

for conducting systematic
mapping studies in software engineering: An update,” Information and Software Technology,
vol. 64, pp. 1–18, 2015. [Online]. Available: https://www.sciencedirect.com/science/article/pii/
S0950584915000646

[5] B. Kitchenham and S. Charters, “Guidelines for performing systematic literature reviews in soft-

ware engineering,” 2007.

[6] P. Brereton, B. A. Kitchenham, D. Budgen, M. Turner, and M. Khalil, “Lessons from applying
the systematic literature review process within the software engineering domain,” Journal of
Systems and Software, vol. 80, no. 4, pp. 571–583, 2007, software Performance.
[Online].
Available: https://www.sciencedirect.com/science/article/pii/S016412120600197X

[7] How to Find the Studies: The Literature Search.

John Wiley & Sons, Ltd, 2006, ch. 4, pp.
79–124. [Online]. Available: https://onlinelibrary.wiley.com/doi/abs/10.1002/9780470754887.ch4

[8] M. Gusenbauer and N. R. Haddaway, “Which academic search systems are suitable for systematic
reviews or meta-analyses? evaluating retrieval qualities of google scholar, pubmed, and 26 other
resources,” Research Synthesis Methods, vol. 11, no. 2, pp. 181–217, 2020. [Online]. Available:
https://onlinelibrary.wiley.com/doi/abs/10.1002/jrsm.1378

[9] C. Wohlin, “Guidelines for snowballing in systematic literature studies and a replication in
software engineering,” in Proceedings of the 18th International Conference on Evaluation and
Assessment in Software Engineering, ser. EASE ’14. New York, NY, USA: Association for
Computing Machinery, 2014. [Online]. Available: https://doi.org/10.1145/2601248.2601268

[10] K. Gwet, “Kappa statistic is not satisfactory for assessing the extent of agreement between raters,”

Statistical methods for inter-rater reliability assessment, vol. 1, no. 6, pp. 1–6, 2002.

[11] J. L. Fleiss, B. Levin, and M. C. Paik, Statistical methods for rates and proportions.

john wiley

& sons, 2013.

8

