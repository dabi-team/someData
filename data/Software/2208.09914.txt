2
2
0
2

g
u
A
1
2

]
h
p
-
t
n
a
u
q
[

1
v
4
1
9
9
0
.
8
0
2
2
:
v
i
X
r
a

An Implementation of the Quantum Veriﬁcation of Matrix
Products Algorithm

Elton Pinto

1

Introduction

Quantum computing has experienced a recent surge in popularity given the advancements in NISQ
machines. Quantum algorithms are known to solve problems like factoring numbers and simulating
natural systems more eﬃciently than a classical computer. Companies such as IBM, Google, and
Rigetti have recently built quantum computers that allow researchers to run quantum algorithms
on physical hardware. Given these developments, it has become important to survey the feasibility
of using quantum computing to solve large-scale problems.

Several studies have experimentally evaluated quantum algorithms on quantum hardware. Mandvi-
walla et al. evaluated a 4-qubit implementation of Grover search on the IBM-Q quantum processor
[12]. Similarly, Acasiete et al. evaluated quantum random walks on graphs with 8 to 16 vertices
[14]. However, these studies do not highlight the challenges involved when scaling to larger-sized
circuits.

Extensive work has been carried out on developing quantum programming frameworks. IBM has
created Qiskit, a Python framework that supports prototyping and executing quantum algorithms
on simulators and quantum hardware. ORNL has developed QCOR, a heterogenous classical-
quantum framework that aims to use quantum computers as accelerators akin to GPUs [16]. How-
ever, little work has been done to evaluate the eﬃcacy of using these frameworks to develop quantum
systems.

Our study aims to ﬁll in these gaps by documenting the process of developing an oracle for the
Quantum Veriﬁcation of Matrix Products (QVMP) [4][3] algorithm. This can be tricky to do given
the non-deterministic nature of quantum programs and the shortage of formal veriﬁcation tooling
in this space. We implement this algorithm in Qiskit and demonstrate its functionality by running
it on the Aer simulator. We report a proof of oracle correctness, circuit metrics (gate count, qubit
count, circuit depth), transpilation times, and simulation times.

2 Literature Review

Quantum computing places an emphasis on thinking about how computation is performed physi-
cally. It achieves speedup over classical algorithms by exploiting physical phenomenon like entan-
glement to encode and perform computation. The main promise of the ﬁeld is that it can oﬀer
a non-trivial speedup over classical computing. The algorithm that is frequently brought up to
demonstrate this promise is Shor’s algorithm. Shor’s algorithm provides an exponential speedup

1

 
 
 
 
 
 
over classical algorithms for factoring numbers and is capable of cracking a subset of the widely-used
RSA encryption. It achieves this by using the Quantum Fourier Transform (QFT), the quantum
analogue of a Fourier transform, to perform phase estimation and order-ﬁnding [2].

There are other algorithms like superdense coding, quantum key distribution, and quantum simu-
lation that have potential applications in scientiﬁc simulation, machine learning, and cryptography.
However, these algorithms tend to require a very large number of qubits to be of practical use. One
of the major challenges in developing large-scale multi-qubit systems is error-correction and noise.
Before we reach the holy grail of fault-tolerant quantum systems, the ﬁeld is currently attempting
to make use of Noisy Intermediate Quantum Computers (NISQ) to solve problems of important
practical use.

√

Grover’s algorithm is a quantum search algorithm that provides an O(
N ) algorithm for searching
through unstructured data, which is a quadratic speed-up over its classical counterpart. It does this
by performing multiple Grover iteration steps which constructively amplify states that correspond
to search results [2]. A Grover iteration requires a user-deﬁned oracle to function correctly. The job
of the oracle is to report back whether an input (encoded as a quantum state) satisﬁes the search
criteria. The core of Grover search is farily straightforward to implement. The main challenge here
is eﬃciently encoding the oracle (which is typically described as a classical decision function) as a
quantum circuit. In this study, we try to better understand this challenge by implementing QVMP
which uses Grover search (and therefore an oracle) as a sub-routine.

There are two popular algorithms for QVMP. The ﬁrst algorithm, proposed by Ambainis, Buhrman,
Høyer, Karpinski, and Kurur, uses amplitude ampliﬁcation along with Grover search to look for a
7
sub-matrix that doesn’t satisfy the product [3]. This algorithm runs in O(n
4 ) time and improves
upon the optimal classical bound provided by Freivalds [1]. The speedup is obtained because the
algorithm makes use of interference to arrive at a result in a smaller number of iterations. However,
metrics do not exist for the number of qubits required to implement the oracles for the quantum
search algorithms used, and the resources required to carry out operations like multiplying sub-
matrices. Further, little research has been done on evaluating the algorithm in a heterogenous
classical-quantum setup where quantum computers are used to accelerate certain parts of the al-
gorithm. There exists a 4-qubit physical implementation of Grover search on IBM’s quantum
processor [12]. This implementation tests IBM quantum computers on Grover’s algorithm to inves-
tigate the impacts of diﬀerent circuit and device attributes, and to highlight the current capabilities
of the system. This study reports that current quantum computers are able to solve the search
problem on very small data sets. This is similar to what our study intends to do, however, it does
not investigate the practicality of running algorithms that use Grover search and does not comment
on the composability of circuits and how it aﬀects performance and results. The second algorithm,
proposed by Buhrman and Spalek, uses quantum random walks to speed up the veriﬁcation process
and runs in O(n

5
3 ) time [4].

Quantum random walks are analogous to classical walks, and have a number of applications in
quantum programming tasks. For example, they are used in solving the element distinctness
problem, in which the goal is to ﬁnd if there exists a set of M non-distinct elements in a domain of
N elements [5]. There have been attempts to run quantum random walks on quantum hardware.
Balu et al. implemented an eﬃcient physical realization of a quantum random walk using log2(N )
qubits to represent an N -point lattice [10]. Experimental evaluation was carried out on the IBM-
Q ﬁve-qubit processor. To overcome resource requirements, they used a continuous time-limit

2

quantum random walk implementation. Acasiete et al. have implemented discrete-time quantum
random walks on IBM-Q, and were able to run quantum search based algorithms on graphs with 8
and 16 vertices [14]. They were able to obtain results with 50% ﬁdelity, and claim that the results
are more eﬃcient than equivalent classical algorithms.

There exists research on resource estimate quantiﬁcation and benchmarking for some quantum al-
gorithms. Jaques et al. implemented Grover oracles for key search on AES and LowMC encryption
[15]. They lay out a formal description of the oracle, describe a reversible quantum-gate implemen-
tation of the AES encryption-decryption algorithm, and estimate the number of Cliﬀord, T, and
CNOT gates required for running circuits that can crack AES-128, AES-192, and AES-256. The
project uses Q#, a quantum programming language developed by Microsoft. The project reduces
the circuit depth of the Grover oracle by using internal parallelization, in which the Grover search
instance is run on disjoint subsets of the input domain.

A number of open-source frameworks exist for conducting quantum computing research.
IBM
provides the Qiskit framework which lets researchers quickly prototype and test algorithms on a
simulator, and also run some workloads on a quantum computer, the biggest one being the IBM-Q
16-qubit processor in Melbourne. Fingerhuth et al. have compiled comparisons between Qiskit and
other frameworks like Quil, XACC, and ScaﬀCC [11]. They comment on the programming language
choice, documentation, license, and general culture around these communities. However, they do
not compare these frameworks based on their performance and ability to execute on quantum
hardware. LaRose has compared simulator performance and the quantum compiler of Qiskit and
Rigetti [13]. The study does not report which algorithm was used during performance evaluation.
Instead, it qualiﬁes a benchmark based on the number of qubits used. ORNL has developed QCOR,
which is a heterogenous framework that aims to enable developers to use quantum computers
as accelerators, much like GPUs [16]. QCOR doesn’t support amplitude ampliﬁcation, quantum
random walks, and basic circuits for performing arithmetic as of now. Support will need to be added
to facilitate experimentation using the hybrid classical-quantum programming approach provided
by this framework. Salm et al. has worked on a NISQ analyzer that determines the best quantum
computer system to run a given workload based on the nature of the quantum algorithm [17]. They
believe that this will improve developer experience by obviating the need to understand complicated
mathematics to determine the best machine for running a particular quantum programming task.
None of the frameworks currently have a working implementation of quantum veriﬁcation of matrix
products which we can use to perform benchmarking.

We believe that it is important to have estimates on how big of an input a concrete implementation
of an algorithm can process. We can use such evaluation reports to gauge the current state of
quantum computing and suggest areas which need more improvement. Further, we can provide
valuable feedback to library authors about features that need to be added to facilitate productive
quantum algorithm research.

3 Materials and Methods

This section covers the major components of QVMP, the algorithm itself, implementation details,
and experimental setup.

3

3.1 Grover search

Grover’s algorithm is a popular quantum search algorithm. Given an input space of N elements
and an oracle Uf , Grover search can ﬁnd M solution indices in O(
M ) time. For simplicity, we
assume that N is a power of 2.

(cid:113) N

For M = 1 Grover search runs in O(
N ) time, which is a quadratic speedup over the classical
algorithm for searching in an unstructured database which takes O(N ) time. Therefore, Grover
search oﬀers a signiﬁcant speedup.

√

The algorithm works by repeatedly applying a Grover operator G to the initial state H ⊗n |0(cid:105)⊗n:

G = (H ⊗n(2 |0(cid:105) (cid:104)0| − I)H ⊗n)Uf = (2 |ψ(cid:105) (cid:104)ψ| − I)Uf

(1)

It consists of the oracle Uf and a phase shift operator (2 |ψ(cid:105) (cid:104)ψ| − I) known as the diﬀuser. The
speciﬁc characteristics of Uf are described in § 3.1.1.

Each iteration can be geometrically viewed as a rotation of the state vector in a plane spanned by
the uniform superposition of solutions and non-solutions. After the application of Uf , the diﬀuser
rotates the state vector towards the superposition of solutions. The number of such iterations can
M ). Therefore, in order to use Grover’s algorithm, one needs to know the

be shown to be O(
exact number of solutions M in the search space.

(cid:113) N

The Grover operator circuit is summarized in Fig. 1.

Figure 1: Grover operator circuit

3.1.1 Grover Oracles

The oracle Uf used in Grover’s algorithm can be viewed as black box that knows how to recognize
solutions in the search problem. Let us say we are given a function f which takes an input x ∈ N
and returns 1 if x is a solution to the search problem, and 0 otherwise. Then, the action of Uf can
be written as:

Uf |x(cid:105) (cid:55)→ (−1)f (x) |x(cid:105)

(2)

Note how the oracle only applies a phase shift to solutions of the search space.

The above oracle is commonly implemented by encoding f in a quantum circuit that ﬂips a target

4

qubit |y(cid:105) for all inputs x that are a solution to the search problem. We obtain the phase shift by
initializing the target qubit to the |−(cid:105) state.

3.2 Amplitude Ampliﬁcation

Amplitude ampliﬁcation is a generalization of the Grover operator G. Instead of wrapping Hadamard
gates H around the diﬀuser, we now use an arbitrary unitary U .

The oracle O behaves in the same way as described in § 3.1.1. The unitary can be thought of as a
quantum subroutine A that performs a series of quantum operations without making measurements.

U (2 |0(cid:105) (cid:104)0| − I)U †O

(3)

3.3 Quantum Veriﬁcation of Matrix Products

Given three square matrices A, B, and C of size n, the veriﬁcation of matrix products (VMP)
decides if AB = C. Freivalds describes a classical algorithm which can run in O(n2) time.

In this paper, we implement the recursive Grover search based quantum VMP by Ambainis et
[3]. The algorithm proceeds by ﬁrst partitioning B and C into submatrices Bi and Ci of size
al.
√
n ×
n respectively. It is easy to observe that AB = C iﬀ ABi = Ci ∀i. Now, perform amplitude
ampliﬁcation over the following subroutine: pick a random vector x, classically compute y = Bix
and z = Cix, and verify the product Ay = z. The veriﬁcation is done using a Grover search where
the search space is the set of row indices and the oracle veriﬁes if the inner product between the
row and the vector matches the output.

The veriﬁcation oracle takes O(n) time. Therefore, each Grover iteration runs in O(n
need to run

3
2 ) time. We
1
4 iterations of amplitude ampliﬁcation. Therefore, the overall running time

(cid:113) n√

n = n
of the algorithm is O(n

7
4 ).

The algorithm is summarized in Alg. 1.

Algorithm 1 Quantum VMP using Grover Search [8]
Input: n × n matrices A, B, C
Output: 1 if AB = C and 0 otherwise
Procedure:

1. Partition B and C into sub-matrices of size n ×
2. Perform amplitude ampliﬁcation for n
√
(a) Pick a random vector x of size
(b) Classically compute y = Bix and z = Cix
(c) Using Grover search with

√

√

n

1
4 iterations using this subroutine:
n

n iterations, ﬁnd a row of index j such that (Ay (cid:54)= z)j

3. XOR the sub-results

3.4 Implementation

We implement QVMP in Qiskit, a popular open-source quantum computing platform developed
by IBM. Qiskit uses Python as the host language and has a large libary of utilities that allow
developers to compose non-trivial circuits. It ships with a transpiler and several backends capable
of running circuits on simulators and quantum hardware.

5

0

1

diﬀuser

H

H

X

X

0

1

2

3

4

5

6

db

0

1

2

3

4

5

6

7

8

address0 :
address1 :
a0 :
a1 :
a2 :
a3 :
y0 :
y1 :
y2 :
y3 :

z :

data : /2

dot

0

1

2

3

4

5

6

0

1

2

3

4

5

6

7

8

Z

dot†

db†

0

1

Figure 2: QVMP circuit for a 4 × 4 matrix A performing one iteration

We restrict our implementation to only support binary matrices. Remaining details can be found
in § 4.

3.5 Experimental Setup

The experiments were run on an AMD EPYC 7502 32-Core Processor, 2.5 GHz, 128 CPUs. The
source code is available at https://github.com/1ntEgr8/qvmp.

4

Implementation

This section describes and analyzes the implementation of the quantum portion of the algorithm
(steps 2 and 2.3 of Alg. 1).

Fig. 2 shows an example circuit that performs one iteration of the Grover operator used in step 2.3.
The sub-circuits used are Quantum Read-Only Memory (QROM) [9] (denoted by db), out-of-place
inner product (denoted by dot), and diﬀuser.

Amplitude ampliﬁcation (step 2) is carried out by ﬁrst running Grover search (step 2.3) and then
appending a diﬀuser circuit. Describing it in terms of the notation developed in § 3.2, U would be
the Grover search circuit.

To perform Grover search, we need to implement an oracle. The QVMP oracle is a blackbox
that checks if (Ay − z)j (cid:54)= 0 where A, y, z, and j are as deﬁned in Alg. 1. Qiskit oﬀers the
classical_function decorator which allows you to describe Grover oracles classically. However,
the programs are restricted to using boolean operators and do not have support for higher-level
primitives like matrices, vectors, and related operations (which we need). This means that we
needed to hand-code the oracle from scratch.

6

(cid:11)
(cid:19)
(cid:11)
(cid:19)
A =







0 1 0 1
1 1 1 0
1 0 0 1
1 0 1 0







X •
X •

•
•

X •
•

•
•

•
X •

•
•

X •
•

•
•

addr0 :
addr1 :
data0 :
data1 :
data2 :
data3 :

Figure 3: QROM encoding of a 4 × 4 matrix A

The QVMP oracle needs to perform the following steps:

• Encode the inputs A, y, and z
• Calculate the inner product Ay and for each row index j compute (Ay (cid:54)= z)j
• Mark a qubit if the constraint is satisﬁed (thereby obtaining a marking oracle)
• Convert the marking oracle into a phase oracle
• Uncompute on the ancilla qubits

We encode A and z using QROM. y is encoded using a bit-to-qubit encoding. The inner product is
computed using an out-of-place inner product circuit. We use a Z gate to perform the phase-ﬂip on
the marked qubit, which correctly converts our oracle from marking to phase (see § 4.4). Finally,
we uncompute the inner-product and QROM circuits to return the ancilla qubits to their original
state.

4.1 QROM

QROM can encode an n×m binary matrix using m+log2(n) qubits. This is quadratic improvement
over a naive bit-to-qubit encoding where each binary value is assigned to a qubit (resulting in O(n2)
space-complexity).

QROM takes in a row index encoded as a binary value using log2(n) address qubits encodes the data
for the row in m data qubits. This is done by partitioning the circuit into log2(n) chunks, where
each chunk corresponds to an address. Using multi-controlled NOT gates it selectively updates the
data qubits corresponding to the input address with the corresponding values.

Since this is a quantum circuit, we can use superposition to pass in multiple row-indices through
the address qubits and read multiple rows. The caveat is, of course, that we can only measure
one of the rows. Nonetheless, we can still exploit this feature of QROMs to perform the same
computation on multiple rows and boost the probability of measure a particular row through
amplitude ampliﬁcation for example.

Fig. 3 shows a QROM circuit encoding a 4 × 4 matrix A.

7

•

•

•

•

a0 :

a1 :

b0 :

b1 :

out :

Figure 4: Inner product circuit for 2-D vectors

q0 :
q1 :
q2 :

H
H
H

X
X
X

• X
• X
H

H
H
X

H

H

Figure 5: Diﬀuser running on three qubits

4.1.1 QROM in QVMP

We use QROM to encode A and z (concatenated as an n × (m + 1) matrix. There is, however, the
question of why we can’t encode y using QROM as well. The answer is that we will not be able to
perform the inner product between Aj and y using such a scheme. This is because to perform the
inner product we need a single row of A but all the rows in the vector y because of the way matrix
multiplication works. z can be encoded using QROM since we only need the value of zj.

4.2 Inner Product (out-of-place)

The inner product circuit, as the name suggests, computes the inner product between two binary
vectors encoded using bit-to-qubit encoding. Addition and multiplication are as those typically de-
ﬁned for the ﬁeld F2. The circuit consists of a series of Tofolli gates controlled on the corresponding
inputs with a single target qubit diﬀerent from the input qubits (hence out-of-place).

Fig. 4 shows an inner-product circuit between 2-D vectors.

4.2.1 Inner Product in QVMP

We use the inner product circuit to compute (Ay)j. Note that we are using z as the target qubit.
This serves the purpose of both calculating (Ay)j and comparing it to z. The output of z will be
0 if they don’t match and 1 if they do. This is precisely why performing a Z gate on z is suﬃcient
to convert our oracle from marking to phase.

4.3 Diﬀuser

The diﬀuser is implemented exactly as described in § 3.1. Fig. 5 shows a diﬀuser running on three
qubits.

8

4.4 Oracle correctness

Claim. Given a superposition of row indices addr, an n × m binary matrix A, and m-dimensional
binary vectors y and z, the QVMP oracle will ﬂip the phase of the row indices j which satisfy
(Ay (cid:54)= z)j and leave the ancilla qubits unchanged.

Proof. Let a1, a2, . . . , ak be row indices selected from the set {0, . . . , n − 1} for some 0 ≤ k ≤ n.

The initial state of the circuit (after encoding y) is

ψ0 = (α1 |a1(cid:105) + α2 |a2(cid:105) + . . . + αk |ak(cid:105)) |0(cid:105)⊗m |y(cid:105) |0(cid:105)

where αi ∈ C are the amplitudes.

Applying the oracle (using the notation of Fig. 2),

ψ0

db−→ (α1 |a1(cid:105) |Aa1(cid:105) |za1(cid:105) + . . . + αk |ak(cid:105) |Aak (cid:105) |zak (cid:105)) |y(cid:105)
dot−−→ (α1 |a1(cid:105) |Aa1(cid:105) |za1 ⊕ (Ay)a1(cid:105) + . . . + αk |ak(cid:105) |Aak (cid:105) |zak ⊕ (Ay)ak (cid:105)) |y(cid:105)
Z−→ ((−1)za1 ⊕(Ay)a1 α1 |a1(cid:105) |Aa1(cid:105) |za1 ⊕ (Ay)a1(cid:105) + . . . + (−1)zak ⊕(Ay)ak αk |ak(cid:105) |Aak (cid:105) |zak ⊕ (Ay)ak (cid:105)) |y(cid:105)
dot†
−−→ ((−1)za1 ⊕(Ay)a1 α1 |a1(cid:105) |Aa1(cid:105) |za1(cid:105) + . . . + (−1)zak ⊕(Ay)ak αk |ak(cid:105) |Aak (cid:105) |zak (cid:105)) |y(cid:105)
db†
−−→ ((−1)za1 ⊕(Ay)a1 α1 |a1(cid:105) + . . . + (−1)zak ⊕(Ay)ak αk |ak(cid:105)) |0(cid:105)⊗m |y(cid:105) |0(cid:105)

(−1)zai ⊕(Ay)ak equals −1 if (Ay (cid:54)= z)ak . It is 1 otherwise.

This proves the claim.

5 Results

1
4 iterations of the Grover operator regardless of the number
QVMP speciﬁes that we run N = n
of solutions m. The optimal number of iterations Noptimal ≈ π
m ≤ N, ∀ n. We can use either
4
number of iterations to perform QVMP. The former requires performing amplitude ampliﬁcation
and while the latter doesn’t. We explicitly mention which one we are using when discussing our
results.

(cid:112) n

The simulations were carried out using the Aer backend provided by Qiskit. Aer supports diﬀerent
simulation methods, two of which are statevector and matrix product state (MPS). The statevector
method performs a dense statevector simulation of the quantum state. The memory requirements
for this method scale exponentially with the number of qubits. We were able to simulate circuits
containing up to 32 qubits with this method before hitting memory limits. The MPS method allows
for more eﬃcient operations on circuits with relatively low entanglement. We were able to simulate
the entirety of our desired input space using this method.

5.1 Functionality

Fig. 6 demonstrates that our implementation is able to ﬁnd the row indices under both N and
Noptimal iterations.

9

(a) Using Noptimal

(b) Using N

Figure 6: Histogram showing the probability distribution of measuring the address qubits of the
QVMP circuit for an 8 × 8 matrix with (Ay (cid:54)= z)j for j ∈ {2, 5, 7}

(a) Using Noptimal

(b) Using N

Figure 7: Histogram showing the probability distribution of measuring the address qubits of the
QVMP circuit for an 8 × 8 matrix with no j satisfying (Ay (cid:54)= z)j

Fig. 7 demonstrates the case when no solutions are present. There is an equal probability of
measuring any of the row indices.

As the number of iterations increases, the amplitudes start oscillating around the optimal value. We
deﬁne the period to be the number of oscillations between optimals. Fig. 8 and Fig. 9 demonstrate
cases when the algorithm fails to ﬁnd a solution even when one exists. The former occurs when N is
not equal to (cid:98)k ∗ period(cid:99) for some integer k. For example, in Fig. 8, the period ≈ 1.313, N = 4, and
the sequence of periods is 1, 2, 3, 5, . . .. We can handle this by hypertuning the number of iterations
to be close to the optimal. The latter occurs when the number of optimal Grover iterations rounds
down to zero. We can handle this by running the algorithm on the dual problem, i.e., ﬁnding j
where (Ay = z)j.

10

0000010100111001011101110.000.080.160.240.32Probabilities0.0260.0390.2700.0210.0400.2890.0290.2860000010100111001011101110.000.080.160.240.32Probabilities0.0270.0280.2650.0200.0280.2970.0290.3060000010100111001011101110.000.040.080.120.16Probabilities0.1100.1350.1460.1270.1160.1260.1290.1110000010100111001011101110.000.040.080.120.16Probabilities0.1180.1150.1370.1320.1270.1090.1380.124(a) Using Noptimal = 1

(b) Using N = 4

Figure 8: Failure case Histogram showing the probability distribution of measuring the address
qubits of the QVMP circuit for a 16 × 16 matrix with (Ay (cid:54)= z)j j ∈ {1, 4, 5}. N (cid:54)= (cid:98)k ∗ period(cid:99)

(a) Using Noptimal = 0

(b) Using N = 2

Figure 9: Failure case Histogram showing the probability distribution of measuring the address
qubits of the QVMP circuit for an 8 × 8 matrix with (Ay (cid:54)= z)j for j ∈ {2, 3, 5, 6, 7}. Noptimal = 0

5.2 Circuit Metrics

Table 1 reports circuit metrics (gate count, circuit depth, qubit count) measured when using the
MPS and statevector methods for the Grover search portion of QVMP (step 2.3 in Alg. 1. The
metrics are reported on circuits that used Noptimal iterations.

The qubit count is precisely m + log2(n) + n + 1 for an n × m matrix. In other words, it is linear in
the size of the input. Circuit depth is an important metric because it impacts both transpilation
time and ﬁdelity of the output.

Fig. 10 shows the circuit depths before and after transpilation. When using the statevector method
we see a small decrease in the circuit depth. Using MPS, on the other hand, results in two to
three orders of magnitude more gate count and circuit depth. The additional gates for MPS seem
to be mostly CNOTs. A cursory look at a function call proﬁle reveals that transpilation for MPS

11

0000000100100011010001010110011110001001101010111101111011110.000.080.160.240.32Probabilities00000001001000110101011110001001101010111100110111110.0000.0250.0500.0750.100Probabilities0.0630.0660.0840.0940.0820.0810.0830.0690.0640.0810.0870.0770.0670000010100111001011101110.000.040.080.120.16Probabilities0.1460.1140.1100.1210.1200.1390.1280.1220000010100111001011101110.000.080.160.240.32Probabilities0.3090.2820.0280.0210.2810.0230.0280.027Dimension Mismatches
(4, 4)
(16, 4)
(16, 8)
(32, 4)
(32, 8)
(32, 32)
(64, 8)
(64, 16)
(64, 64)

1
2
2
2
1
3
3
2
3

ccx
30
16
32
24
64
128
48
128
384

cx
1
6220
10108
42060
91408
185912
300324
786960
2329596

x
11
68
69
204
272
151
401
538
432

h
2
176
284
461
997
2025
1602
4190
12396

z
1
2
2
3
4
2
3
4
3

u1
2
5216
8460
42037
91377
185897
300315
786948
2329587

u2
2
1564
2536
504
1056
2052
1632
4232
12426

(a) MPS

u3 Grover iterations Depth Qubits Total gates
44
0
10585
3
16993
3
69510
6
150375
8
303901
4
497172
4
1300351
5
3843672
4

49
13265
21494
85299
185186
376171
604329
1583005
4684828

11
13
21
14
22
70
23
39
135

1
2
2
3
4
2
3
4
3

Dimension Mismatches
(4, 4)
(16, 4)
(16, 8)
(32, 4)
(64, 8)
(64, 8)

1
2
2
2
3
1

ccx
30
16
32
24
48
96

cx
1
0
0
0
0
0

x
11
75
76
208
405
801

h
2
4
4
5
6
6

z
1
2
2
3
3
6

u1 u2 u3 Grover iterations Depth Qubits Total gates
2
3
3
4
4
7

44
261
385
684
2040
4077

49
113
130
270
498
981

11
13
21
14
23
23

2
12
12
24
30
60

1
2
2
3
3
6

0
1
1
2
2
5

Table 1: Circuit metrics for MPS and statevector simulation methods on select dimensions. Depth
and total gates were measured after transpilation.

(b) Statevector

(a) MPS

(b) Statevector

Figure 10: Comparison of circuit depth before/after transpilation on select dimensions

spends most of its time performing SWAPs (which consist of CNOTs). Future work will look into
investigating why these SWAPs are performed even though the target architecture (which is Aer
in our case) is fully-connected.

From these Aer simulations, we conclude that it is possible to run QVMP on up to 32 qubits using
NISQ hardware.

5.3 Transpilation and Simulation

Fig. 11 showcases how transpilation time and simulation time change as the circuit depth increases.
We observe opposite trends. MPS seems to be spending more time on transpilation while its
simulation time remains mostly constant. Statevector, on the other hand, spends more time during

12

(16, 4, 2)(16, 4, 3)(16, 8, 2)(16, 8, 3)(#rows, #cols, #row mismatches)0200040006000800010000120001400016000Depth270138394200105855412169938616Before transpilationAfter transpilation(16, 4, 2)(16, 4, 3)(16, 8, 2)(16, 8, 3)(#rows, #cols, #row mismatches)050100150200250300350400Depth270138394200261134385196Before transpilationAfter transpilation(a) MPS

(b) Statevector

Figure 11: Circuit depth vs Transpilation/Simulation time

simulation with transpilation time growing at a slow rate. We observe this trend mainly due to the
gate explosion described in § 5.2.

5.4 Challenges

Implementing and debugging Grover oracles in Qiskit is error-prone. The library does not oﬀer
support for encoding matrices into quantum circuits and performing operations on them. The choice
of encoding scheme is left to the programmer. This can slow development time since programmers
are now forced to work at lower level of abstraction than desired. Debugging quantum circuits can
be tricky. Consider the following scenario. You’ve implemented a Grover oracle. After running the
simulation, however, you observe that your circuit is not amplifying the correct states. This error
could be due to a number of reasons: ancilla qubits may have become entangled with the input
qubits or diﬀusion might have been applied on the wrong set of qubits, to name a few. Debugging
this in Qiskit involves inserting statevector probes to view the state of the quantum system and
then identify any discrepancies. While not diﬃcult to do, it can eat up developer time. We believe
that Grover oracle synthesis should be automated to a high-degree. When possible, such a system
should be able to produce a proof of correctness.

There is also the challenge of scaling quantum circuit development. Transpilation and simulation
times can become bottlenecks in the iteration cycle.

6 Conclusion

In this study we present an implementation of QVMP in Qiskit. We reported circuit metrics (gate
count, depth, qubit count) as well as transpilation and simulation times. While QVMP can be
simulated (and even run) on moderately-sized inputs, it cannot, with current hardware, scale to
a degree where we can observe any quantum advantage. We demonstrate that the simulation
method selected can have a noticeable impact on depth of the circuit, the eﬀects of which trickle
into transpilation and simulation time.

Future work in this space involves extending existing reversible compilers (like REVS [7] and a

13

0500010000150002000025000Circuit depth (before transpilation)0100020003000400050006000Time (s)Transpilation timeSimulation time01000200030004000Circuit depth (before transpilation)010203040506070Time (s)Transpilation timeSimulation time1
2
3
4
5

(* Example program describing the QVMP oracle *)

[ @@oracle ]
let find_row_mismatch a y z =

find_idx ( fun idx value -> value <> z[ idx ]) ( a * y)

Figure 12: High-level description of QVMP in the ML dialect. @@oracle is an attribute specifying
that the expression that follows is an oracle that can be compiled to a reversible circuit

subset of Quipper [6]) to support higher-level programming constructs like lists, records, and multi-
dimensional arrays. This will allow programmers to specify oracles as high-level classical decision
functions without having to think about encoding schemes, thereby raising the level of abstraction
which can boost productivity. Fig. 12 demonstrates such a description for QVMP.

Another direction involves investigating the gate and circuit depth explosion observed when using
the MPS simulation method. Cursory investigation has revealed that the transpiler is inserting
multiple SWAP gates despite the target architecture being fully-connected.

Finally, we also wish to explore the space of more eﬃcient encodings of matrices and related
operations to cut down on qubit counts.

14

Bibliography

[1] R¯usi¸nˇs Freivalds. “Fast probabilistic algorithms”. In: International Symposium on Mathemat-

ical Foundations of Computer Science. Springer, 1979, pages 57–69.

[2] Michael A Nielsen and Isaac L Chuang. Quantum computing and quantum information. Cam-

bridge University Press, 2000.

[3] Andris Ambainis et al. “Quantum matrix veriﬁcation”. In: Unpublished manuscript (2002).
[4] Harry Buhrman and Robert Spalek. “Quantum Veriﬁcation of Matrix Products”. In: arXiv:quant-

ph/0409035 (July 6, 2005). arXiv: quant-ph/0409035.

[5] Andris Ambainis. “Quantum Walk Algorithm for Element Distinctness”. In: SIAM Journal

on Computing 37.1 (Jan. 2007), pages 210–239.

[6] Alexander S Green et al. “Quipper: a scalable quantum programming language”. In: Proceed-
ings of the 34th ACM SIGPLAN conference on Programming language design and implemen-
tation. 2013, pages 333–342.

[7] Matthew Amy, Martin Roetteler, and Krysta M Svore. “Veriﬁed compilation of space-eﬃcient
reversible circuits”. In: International Conference on Computer Aided Veriﬁcation. Springer.
2017, pages 3–21.

[8] Adetokunbo Adedoyin et al. “Quantum algorithm implementations for beginners”. In: arXiv

preprint arXiv:1804.03719 (2018).

[9] Ryan Babbush et al. “Encoding electronic spectra in quantum circuits with linear T com-

plexity”. In: Physical Review X 8.4 (2018), page 041015.

[10] Radhakrishnan Balu, Daniel Castillo, and George Siopsis. “Physical realization of topological
quantum walks on IBM-Q and beyond”. In: Quantum Science and Technology 3.3 (2018),
page 035001.

[11] Mark Fingerhuth, Tom´aˇs Babej, and Peter Wittek. “Open source software in quantum com-

puting”. In: PLOS ONE 13.12 (Dec. 20, 2018). Edited by Leonie Anna Mueck, e0208561.

[12] Aamir Mandviwalla, Keita Ohshiro, and Bo Ji. “Implementing Grover’s Algorithm on the
IBM Quantum Computers”. In: 2018 IEEE International Conference on Big Data (Big Data).
2018 IEEE International Conference on Big Data (Big Data). Seattle, WA, USA: IEEE, Dec.
2018, pages 2531–2537.

[13] Ryan LaRose. “Overview and Comparison of Gate Level Quantum Software Platforms”. In:

Quantum 3 (Mar. 25, 2019), page 130.

[14] Frank Acasiete et al. “Implementation of quantum walks on IBM quantum computers”. In:

Quantum Information Processing 19.12 (2020), pages 1–20.

[15] Samuel Jaques et al. “Implementing Grover Oracles for Quantum Key Search on AES and
LowMC”. In: Advances in Cryptology – EUROCRYPT 2020. Edited by Anne Canteaut and
Yuval Ishai. Volume 12106. Series Title: Lecture Notes in Computer Science. Cham: Springer
International Publishing, 2020, pages 280–310.

[16] Tiﬀany M. Mintz et al. “QCOR: A Language Extension Speciﬁcation for the Heterogeneous
Quantum-Classical Model of Computation”. In: ACM Journal on Emerging Technologies in
Computing Systems 16.2 (Apr. 30, 2020), pages 1–17.

[17] Marie Salm et al. “The NISQ Analyzer: Automating the Selection of Quantum Computers
for Quantum Algorithms”. In: Service-Oriented Computing. Edited by Schahram Dustdar.
Volume 1310. Series Title: Communications in Computer and Information Science. Cham:
Springer International Publishing, 2020, pages 66–85.

15

