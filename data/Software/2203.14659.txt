Injection testing backed refactoring

2
2
0
2

r
a

M
8
2

]
E
S
.
s
c
[

1
v
9
5
6
4
1
.
3
0
2
2
:
v
i
X
r
a

Thomas Mejstrik
University of Vienna
Vienna, Austria
thomas.mejstrik@gmx.at

ABSTRACT
Injection-based testing while refactoring is a pattern that mini-
mizes the need for manual editing when altering the behaviour of a
code base. Neither does it rely on a compilation or a linking process
nor does it make assumptions on the structure of the code. Thus, it
can be particularly useful for refactoring code that has been writ-
ten in scripting languages, and speciﬁcally targets the research and
engineering context. We describe the pattern and propose a set of
functions for its application. The applicability of code injection for
refactoring is highlighted via speciﬁc examples for deriving unit
and integration tests. Finally, we comment on the customizing of
the pattern and give practical advice for its implementation.

CCS CONCEPTS
• Software and its engineering → Software development tech-
niques; Software testing and debugging; Language features.

KEYWORDS
refactoring, code instrumentation, legacy code, unit testing, scien-
tiﬁc software, Matlab

ACM Reference Format:
Thomas Mejstrik and Clara Hollomey. 2018. Injection testing backed refac-
toring. In Proceedings of 25th European Conference on Pattern Languages
of Programs (EuroPLoP 2022) (EuroPLoP 2022). ACM, New York, NY, USA,
7 pages. https://doi.org/XXXXXXX.XXXXXXX

1 INTRODUCTION
We introduce a pattern for injecting test code to a code base to fa-
cilitate its refactoring, i. e. changing the internal structure of code
without aﬀecting its external behaviour [1]. The injection testing
pattern enlarges the set of code bases to which testing provisions
can be added retrospectively. The pattern allows inferring the inter-
nal behaviour of code by deﬁning designated interception points as
comments in the source code. No strong requirements are placed
on the programming style of the code, which is especially impor-
tant for refactoring legacy code.

Techniques for refactoring are well established, see e. g. [2–9],
and often rely on the existence of an accompanying test suite [10],
as depicted in Figure 1.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
EuroPLoP 2022, 6.-10. July 2022, Kloster Irsee, Germany
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-XXXX-X/18/06. . . $15.XX
https://doi.org/XXXXXXX.XXXXXXX

Clara Hollomey
Austrian Academy of Sciences
Vienna, Austria
clara.hollomey@oeaw.ac.at

Write a
succeeding
test

Refactor

Figure 1: Refactoring cycles: (1) In refactoring, one often has
to start with the Refactor step. (2) Using the injection testing
pattern one can start with the Write a succeeding test step,
and thus, make the refactoring step safe.

The refactoring step not only concerns the production

code, but also the accompanying test suite.

The idea is to start from a succeeding test suite, apply the desired
changes, and conﬁrm that the observable behaviour did not change
by running the test suite again.

For code without testing provisions, however, this classical refac-
toring cycle indicates a chicken-and-egg problem: It is unclear how
to write a test suite prior to touching the code when no such test
suite is already present. Consequently, in the absence of tests there
is always the risk of unwittingly changing the behaviour of the
code and introducing new bugs. Thus, the challenge is intercept-
ing a code‘s internal behaviour while at the same time minimizing
the amount of manual editing.

1.1 Existing solutions
Common interception points arise from the compiler toolchain and
have been summarized under the term “seams”, “. . . a place where
you can alter behaviour in your program without editing in that
place.” [10, Chapter 4].

Pre-processing seams can be accessed via a text replacement en-
gine that automatically changes the source code just before inter-
pretation or compilation. Besides the need for maintaining such an
engine in languages that do not feature a pre-processor, the usage
of such seams necessitates a new compilation/interpretation cycle
for every change that is applied to the code.

Link seams can be used in languages where the compiler/in-
terpreter produces an intermediate representation of the code. In-
tercepting calls to other intermediate representations allows for
the execution of arbitrary code. Similarly to the pre-processor ap-
proach, an additional linking step is required after each refactoring
iteration, impeding the practical applicability of the approach.

Object seams are not compilation-related and use overloading
and polymorphism for intercepting calls to class methods. This re-
quires that both, the programming language, and the programming

 
 
 
 
 
 
EuroPLoP 2022, 6.-10. July 2022, Kloster Irsee, Germany

Thomas Mejstrik and Clara Hollomey

Journal†

Matlab
submissions

unit
tests

automatic
unit tests

JOSS
ACM TOMS
JORS
J. Stat. Softw.
Softw. X
Softw. Imp.

25
19
22
18
78
13

9 (36%)
9 (47%)
8 (36%)
8 (44%)
11 (14%)
2 (16%)

3 (12%)
2 (11%)
2 (9%)
1 (6%)
5 (6%)
0 (0%)

Table 1: Number of publications of free Matlab software
whose source code is still available, in selected scientiﬁc
journals between 2015 and 2021, contrasted with the num-
ber of submissions additionally including unit tested code
and automatic unit testing provisions.
†JOSS: Journal of Open Source Software, ACM TOMS: ACM Transactions on Mathe-
matical Software, JORS: Journal of Open Research Software, J. Stat. Softw.: Journal of
Statistical Software, Softw. X: Software X, Softw. Imp.: Software Impacts.

style of the code at hand, support object orientation and depen-
dency injection at least to some degree.

All of the above approaches pose requirements on either the pro-
gramming language or the programming style in which the code
has been written. Not every code meets those requirements.

1.2 Our motivation
Scripting languages are commonly used for numerical computa-
tions in engineering, scientiﬁc, and educational contexts. Also in
those contexts, programs are often written incrementally and by
frequently changing authors. This can lead to large code bases with
insuﬃcient testing provisions [11].

In fact, an informal survey of software papers published between
2015 and 2021 for Matlab, one of the most common programming
languages in academia [12], indicates that only a small fraction of
submissions includes tests, let alone automated tests using some
specialized testing framework, as indicated in Table 1. This makes
it hard to verify the correctness of the published results.

Still, scientiﬁc code often needs to be refactored, and when such
code has been written in a scripting language, the absence of a pre-
processor, a compilation and a linking step limits the options for
intercepting the internal workings of the code.

1.3 Overview
In Section 2, we present our injection testing pattern and propose
a set of functions for its eﬃcient implementation

We show how the pattern can be applied to write unit tests in
Section 3.1. The code injection pattern is further exempliﬁed in
Section 3.2, where we discuss how the injection testing pattern
can be used to write integration tests.1

Finally, in Sections 4 and 5 we discuss some points regarding
the implementation of our pattern, including the presentation of
the Matlab/Octave2 unit test framework TTEST.

2 INJECTION TESTING PATTERN
2.1 Context
Given a function to which tests shall be added, in the following also
referred to as system under test, that has no or insuﬃcient testing
provisions, this pattern can be applied.

2.2 Problem
Refactoring without having tests in place bears the risk of break-
ing the code. Thus, the challenge is to add tests to existing code
while at the same time limiting the impact of any required manual
editing.

2.3 Forces
In situations where the requirements on the code and program-
ming language outlined in section 1.1 are not met, it can be hard to
infer the internal workings of code without a considerable amount
of manual editing. The manual editing of code, however, always
bears the risk of unwittingly altering its behaviour. Without prior
tests in place, it is hard to detect such unintended changes.

2.4 Solution
We add tests by injecting3 test code, executed at runtime, deﬁning
speciﬁc entry and exit points, and thus minimize the amount of
code changes. To minimize the risk that the injected code alters
the behaviour of the code base in an unintentional way we, ﬁrst,
propose the following pattern:

Inject arrange - Act - Assert,
optionally supplemented by an Inject setup stage at the very begin-
ning and a Tear down stage at the very end.

Second, we propose the following set of key functions:

• gotoat: Jumps to an arbitrary line of code
• assignat: Assigns values to variables
• captureat: Stores the current state for later use
• returnat: Returns from the function
• clearat: Removes all injected code

The correspondence between the key functions and the stages of
the injection testing pattern are depicted in Figure 2.

The injection testing pattern closely follows that of a classical
unit test [13, Chapter 3]. In the Arrange section, objects are initial-
ized and data is passed to the system under test. In the Act section,
the system under test is invoked with the arranged data. In the
Assert section, the actions and results of the system under test is
compared with the expected actions and results.

One key diﬀerence to the unit test pattern is that the Inject ar-
range section is in fact not executed before the system under test
is invoked. This section only arranges the code which shall be ex-
ecuted when the system under test is running.

It would be possible to also move the Assert section into the sys-
tem under test. However, this would couple the unit tests and the
system under test more strongly and increase the amount of in-
jected code into the system under test. Both aspects may increase

1Unit tests test well-deﬁned, self contained parts of code, whereas integration tests test
the code together with some of its dependencies with respect to speciﬁed functional
requirements.
2Octave is a free implementation of the Matlab language.

3We use the term code injection instead of code instrumentation, to stress the point that
we do not just add logging or similar functionality, but arbitrary code to an existing
code base.

Injection testing

EuroPLoP 2022, 6.-10. July 2022, Kloster Irsee, Germany

Inject Setup

2.5.1 Benefits.

• Inject jump to the section of interest via gotoat
• Inject retrieval of results after the section of

interest via captureat

• Inject return after the section of interest

via returnat

Inject Arrange

• Inject code to set the workspace via assignat

Act

• Start the system under test

Assert

• Retrieve the results via captureat
• Check the results (using an assertion framework)

Tear down

• Remove all code injections via clearat

Figure 2: Injection testing pattern: After an optional setup,
in the Inject Arrange stage, the code to set the desired
workspace is injected. After the execution of the system
under test in the Act stage, the results are retrieved and
checked in the Assert stage. The ﬁnal tear down concludes
the pattern.

the chance of unintentionally changing the behaviour of the sys-
tem under test at runtime.

If the same part of the code shall be tested multiple times, the
recurring parts of the Inject Arrange stage may be factored out to
the Inject Setup stage. Finally, if the unit test framework does not
automatically clear injected code after the tests are ﬁnished, then
all code injections need to be manually cleared in the Tear down
stage.

The only necessary modiﬁcation to the system under test is the
addition of comments to the code, indicating where to instrument
the code for the injection tests. Comments are unlikely to break
or alter the existing code4, particularly when some special style
(e. g. <!TEST1!>) is used, such that changes can be easily tracked
and the comment‘s special role is clearly indicated. If comments
were accidentally removed, the accompanying test suite would fail,
thus indicating the problem.

2.5 Consequences
The refactoring of legacy code becomes easier and less likely to
break existing code.

4An example where comments could break code are old BASIC dialects which used
hard coded line numbers to specify the control ﬂow.

+ Injection testing only poses some requirements on the program-
ming language, but nearly none on the coding style. Thus, the
pattern can be applicable in situations where other approaches
fail. This is especially important when refactoring legacy code.
+ Interception points can be placed at nearly arbitrary positions in
the code, thus enabling the testing of arbitrary parts of the code.
+ Using the injection seam can be faster than the pre-processor or
link seam. No additional compilation/linking cycles are needed,
but also code sections not relevant to the test can simply be
skipped.

2.5.2 Drawbacks.

− Without suﬃcient support from the programming language or
the development environment, injection testing may not be pos-
sible or only partly possible, e. g. whenever a correspondence
the set of key functions cannot be implemented fully.

− Injection tests are more strongly coupled to the system under
test than classical unit tests. In particular, variable names, line
numbers, and labels may have to be spelled out explicitly in
the injection test. Data prior private to functions (like local vari-
ables) become public to the injection test; In other terminology,
the injection test becomes a friend of the system under test.
− Code injection may degrade the system under test‘s performance,
as (𝑎) the code must be supervised by some means to allow code
injection, and (𝑏) the code can not be compiled with all possible
optimizations.

− Some manual editing of the code is still required, and thus, the
risk of unwittingly altering its behaviour is not fully mitigated.

3 EXAMPLES
In this section we give two examples on using our injection testing
pattern for deriving a unit test and an integration test. Apart from
the functions proposed in section 2.4, we use the following tools:

• A method to easily save snapshots of some state
• A unit test framework for automated unit tests
• An assertion framework to easily write assertions

3.1 Example 1: Unit test
We demonstrate the injection testing pattern on the dummy legacy
function foo given in Listing 1, using Matlab style code. The task
is to refactor parts of the body of foo out into a sub function while
touching the code as little as possible. We only present the relevant
lines of code.

Listing 1: Function foo

function foo ( a1 , a2 )

% lots of code
sum = 0
for i = 1: a1

% loop over i = 1 to a1 (both included)

sum = sum + i ; end

% lots of code

EuroPLoP 2022, 6.-10. July 2022, Kloster Irsee, Germany

Thomas Mejstrik and Clara Hollomey

Write a succeeding unit test. The function foo is not suited for
classical unit tests, since the lines of code to be tested are not ac-
cessible via standard means.

In the ﬁrst step we add the labels <FOO:1> and <FOO:2> which
indicate where to instrument the code with injection tests, see List-
ing 2.

Listing 2: Function foo augmented

function foo ( a1 , a2 )

% lots of code
% < FOO :1 >
sum = 0
for i = 1: a1

% comment for injection testing

sum = sum + i ; end

% < FOO :2 >
% lots of code

% comment for injection testing

In this form, the code is ready for injection testing and we can
write a unit test suite. An example unit test suite is given in List-
ing 3.

Listing 3: Unit test suite for foo

% setup

gotoat ( ' foo ' , ' goto ' , ' < FOO :1 > ' )
captureat ( 'foo ' , ' at ' , ' < FOO :2 > ' , 'var ' , ' sum ' )
returnat ( ' foo ' , ' at ' , ' < FOO :2 > ' )

%% test 1

% arrange
assignat ( ' foo ' , ' at ' , ' < FOO :1 > ' , ' a1 ' ,15 )

% act
foo ()
X = captureat ()

% obtain captured values

% assert
EXPECT_EQ ( X. FOO2 , 120 )

% compare result

%% test 2

% arrange
assignat ( ' foo ' , ' at ' , ' < FOO :1 > ' , ' a1 ' ,0 )

% act
foo ()
X = captureat ()

% assert
EXPECT_EQ ( X. FOO2 , 0 )

%% tear down

clearat ( ' foo ' )

What happens in Listing 3. In the %% setup part, we collect
the code which is shared among both unit tests, %% test 1 and
%% test 2. The function gotoat injects code such that, after en-
tering foo the control ﬂow immediately continues at the line with
the comment <FOO:1>. The function captureat injects code such

that the value of the variable sum at the line with comment <FOO:2>
is stored for later retrieval. The function returnat injects code so
that the function foo returns to the caller site whenever the control
ﬂow reaches line <FOO:2>.

In the %% test 1 part we arrange the data to be injected into
the function foo; at the line with comment <FOO:1> the variable a1
will be assigned the value 15. Afterwards we execute the system
under test by calling it and retrieve the stored data by captureat.
In the %% assert section we check whether the retrieved value
of sum equals our expected value 120. The second test %% test 2
follows the same pattern.

In the %% tear down part, after the injection tests have ﬁnished,
we clean up using clearat which removes all injected code from
the function foo.

Refactor. Having our unit tests in place we can safely refactor
the function foo, as given in Listing 4. Afterwards it is usually nec-
essary to also refactor the unit test suite, as indicated in Listing 5.

Listing 4: Refactored foo

function foo ( a1 , a2 )

% lots of code
% < FOO :1 >
sum = sum0 ( a1 )
% < FOO :2 >
% lots of code

function x = sum0 ( x )

x = x * ( x + 1 ) / 2

Listing 5: Refactored unit tests for foo

%% test 1
a0 = 15
sum = sum0 ( a0 )
EXPECT_EQ ( sum , 120 )

% arrange

% act

% assert

%% test 2
a0 = 0
sum = sum0 ( a0 )
EXPECT_EQ ( sum , 0 )

% arrange

% act

% assert

3.2 Example 2: Integration test
Another example for using the injection test pattern is the gradual
refactoring of the function bar, whose functionality is not appar-
ent to the programmer, see Listing 6.

Write a succeeding unit test. Using injection testing, we store
the full state of the program at various locations when run in its
initial form, i.e. before refactoring. After refactoring we compare
the saved state with the new state. If they coincide, we can assume
that the behaviour of the system under test did not change. An
exemplary unit test suite is given in 7.

Injection testing

EuroPLoP 2022, 6.-10. July 2022, Kloster Irsee, Germany

Listing 6: Function bar

function bar ( a )

% 1000 lines of code
% < BAR :0 >
% another 1000 lines of code
% < BAR :1 >

Listing 7: Integration tests for bar

%% test
% setup

captureat ( 'bar ' , ' at ' , ' < BAR :0 > ' )
captureat ( 'bar ' , ' at ' , ' < BAR :1 > ' )

%% test 10
% arange
a = 10

% act
sut ( a )
X = captureat ()

% obtain captured values

% assert
EXPECT_EQ ( CACHE ( ' BAR0_10 ' , X . BAR0 ) , X . BAR0 )
EXPECT_EQ ( CACHE ( ' BAR1_10 ' , X . BAR1 ) , X . BAR1 )

%% test 20
% arange
a = 20

% act
bar ( a )
X = captureat ()

% obtain captured values

% assert
EXPECT_EQ ( CACHE ( ' BAR0_20 ' , X . BAR0 ) , X . BAR0 )
EXPECT_EQ ( CACHE ( ' BAR1_20 ' , X . BAR1 ) , X . BAR1 )

%% tear down

clearat ( ' bar ' )

What happens in Listing 7. The only substantial diﬀerence to
our unit test suite for foo is the use of the helper function CACHE.
This is just a thin convenience wrapper for storing data to disk,
used as follows: When a ﬁle with name equal to its ﬁrst argument
does not exist, it stores the value of the second argument to disk.
Otherwise, it discards the second argument and loads the stored
data from disk.

This time we inject code such that the whole workspace of the
function bar is captured whenever the control ﬂow reaches the
lines with comments <BAR:0> and <BAR:1>. The call X = captureat()
in the % act section then retrieves the stored data and stores it
in X. The assert section now compares the two stored states with
the snapshot taken from before refactoring.

4 REMARKS ABOUT THE IMPLEMENTATION
Only some programming languages, e. g. Java, support code injec-
tion directly When there is no language support, it is often possi-
ble to use the debugger for implementing code injection. Similar
approaches are in use for tracing function calls in Matlab [14], and
for implementing Mutation testing in Java [15]. The relevant fea-
tures of the debugger are:

• Running a program step by step
• (Conditionally) stopping the program at a certain point
• Inspecting the current state
• Jumping to a certain point

Often, these features can be accessed from within the program-
ming language, e. g. in interpreted languages like Matlab, Python,
or R. In other languages or IDE‘s the debugger can be controlled us-
ing third party libraries, e. g. libgdb for gdb (discontinued 1993) [16],
lldb for the LLVM toolchain [17], Windows Debugger (WinDbg)
for Windows [18]. Failing that, one can usually still write macros in
some scripting language for the debugger, e. g. GDB\MI for gdb [19].

5 IMPLEMENTATION IN MATLAB
We implemented the set of key function using Matlab‘s debug-
ger and conditional breakpoints. Matlab‘s conditional breakpoints
evaluate a string at run-time. If the result is truthy5, the code run
is stopped at that location; but when it is falsy, the code run con-
tinues normally. Using conditional breakpoints for code injection
in Matlab has some restrictions:

(1) Conditional breakpoints only accept valid Matlab commands,

but not arbitrary anonymous functions.

(2) The injected code must always return a falsy value in order to

avoid the debugger stopping its execution.

(3) If the injected code throws an error, it is caught automatically
by Matlab and the program run stops, i.e. the debugger starts.
(4) Injected code is always executed before the code at the injected

line. Code cannot be injected between statements.

To execute anonymous functions, we store them in a persistent
variable in some function, and generate a string which then exe-
cutes that anonymous function. To ensure that the return value of
the injected code is false, it gets wrapped in a function return-
ing false and evaluated by evalin( 'caller', __ )6. Errors
thrown by the injected code are caught inside the function which
evaluates the string or anonymous function.

5.1 Example implementation of evalat
To illustrate the execution of anonymous functions in Matlab, and
thus execution of arbitrary code, a minimum implementation of a
function evalat is given in Listing 8. The key functions captureat,
assignat both can be derived from this one. Note, to avoid parsing
the inputs, the interface of evalat is diﬀerent from the interface
of the ...at functions in the listings above.

5A truthy value is a value which implicitly evaluates to true, for example in an if
condition; e. g. true, 1 or an array with only non-zero values. Contrary, a falsy value
implicitly evaluates to false; e. g. false, 0, or an array with at least one zero.
6The function evalin( 'caller', cmd ) executes a command cmd in the callers
workspace, and in particular has access to the callers workspace.

EuroPLoP 2022, 6.-10. July 2022, Kloster Irsee, Germany

Thomas Mejstrik and Clara Hollomey

Listing 8: evalat

Listing 10: Usage example of evalat

function ret = evalat ( fun , lne , h );

persistent cache;
if ( nargin ==0 );
ret = cache;
return ; end ;

cache = h ;
h = [ ' returnfalse ( ' ...

assign ( ' ' ttest_handle ' ' , evalat ()) ) || '...

'
' returnfalse ( ttest_handle () ); ' ];
dbstop ( ' in ', fun , ' at ' , num2str ( lne ) , ' if ' ,h );

function ret = returnfalse ( varargin );

ret = false ;

function ret = assign ( nme , val );

try ; ret = evalin ( ' caller ' , [ name '; '] );
catch ; ret = []; end ;
assignin ( ' caller ' , name , value );

>> evalat ( ' surf ', 1 , @() disp ( ' Hello World ! ') );
>> surf ( membrane );
Hello World!

% and the Matlab membrane is plotted

5.2 Example implementation of returnat
A more involved, but shorter example shows how to programmat-
ically return early from a function. The idea is to provoke an error
at a user deﬁned position in a function and catch the exception.
As already noted, simply throwing an error in some injected code
would not work, since, whenever injected code throws, the debug-
ger stops the program. Instead, we have to make sure that an error
is thrown after the injected code was executed. This we achieve
by some tough means; we clear the function‘s workspace, see List-
ing 11.

What happens in Listing 8. The function evalat accepts three
arguments, fun is the function where code shall be injected, lne is
the line number where code shall be injected, h is an anonymous
function to be executed at the speciﬁed position.

Upon calling with three arguments, the anonymous function h
is stored in the persistent variable cache. A persistent variable re-
tains its values between function calls. Then, the function dbstop
adds in the function fun at the speciﬁed position lne a conditional
breakpoint, which will execute the code listed in Listing 9; We put
those lines of code in its own listing for better readability.

Listing 9: Code of conditional breakpoint in evalat

returnfalse ( assign ( ' ttest_handle ' , evalat ()) ) ||...
returnfalse ( ttest_handle () );

Now, when the function fun is called and the program ﬂow
reaches line lne the function evalat is called without arguments.
Thus, evalat returns the value of the persistent variable cache,
this is exactly the anonymous function h we want to execute. The
anonymous function h is passed to the function assign, which cre-
ates a variable with name ’ttest_handle’ in the workspace of the
function fun. All of this code is wrapped inside a call to returnfalse,
which ensures that always false is returned.

A conditional breakpoint only stops when the injected code re-
turns true. Since the ﬁrst part of the injected code returns false
the second part is evaluated. Now the just assigned variable ttest_-
handle, which is our anonymous function h, is executed. The re-
sult of the anonymous function h is passed again to returnfalse
which again ensures that false is returned. Thus, the debugger
does not stop the program.

A usage example of evalat is given in Listing 10.

Listing 11: returnat

function ret = returnat ( fun , lne );

if ( nargin ==0 );

evalin ( ' caller ' , ' clear ' );
ret = false ;

else ;

dbstop ( ' in ' ,fun , ' at ' , num2str ( lne ) , ...

' if ' ,' returnat ' );

try ; eval ( fun );
catch me ; disp ( me ); end ; end ;

What happens in Listing 11. The function returnat accepts two
arguments, fun is the function which shall be executed, lne is the
line number at which we want to return. When called with two ar-
guments, dbstop adds a conditional breakpoint in the function fun
at the speciﬁed position lne, which executes a call to returnat
without arguments. Afterwards the function fun is called. When
program ﬂow reaches the speciﬁed location lne, returnat is called
without arguments. Thus, the workspace of fun is cleared by exe-
cuting evalin( ’caller’, ’clear’ ). Finally false is returned,
so that the debugger does not stop the program. The next time a
variable is accessed in the function fun, an error is thrown, there-
fore the fun returns. This error is caught in the catch block in the
function returnat. In our example implementation we display the
caught error, but any other code is equally possible. A usage exam-
ple is given in Listing 12.

Listing 12: Usage example of returnat

>> returnat ( ' spy ' , 42 );

MException with properties :
identifier : ' MATLAB : refClearedVar '

message : ' Reference to a cleared variable . '

file : ' spy . m ::42 '

Injection testing

EuroPLoP 2022, 6.-10. July 2022, Kloster Irsee, Germany

5.3 TTEST
Functionality for implementing the code injection pattern, specif-
ically the key functions assignat, captureat, evalat, returnat,
are contained in the unit test framework TTEST for Matlab and
Octave. TTEST has been written speciﬁcally with testing code in
a scientiﬁc context in mind. It supports the testing of scripts, local
and sub functions, has utilities for caching results for integration
tests, and adds support for injection testing and partly for design
by contract [20].

TTEST is published under a permissive open source license and
available at gitlab.com/tommsch/TTEST. The full documentation of
TTEST, together with a comparison of Matlab unit test frameworks,
can be found in [21].

The following projects use TTEST (list non exhaustive): • Audi-
tory Modelling Toolbox (Ver. 1.1) [22] • ttoolboxes [23] • Large Time
Frequency Analysis Toolbox (Ver. > 2.4) [24]

6 CONCLUSION
We presented a pattern for the injection-based refactoring as a
means for handling otherwise not testable code, along with a set
of functions suitable for its implementation. We gave examples on
its usage and practical advice for their implementation in script-
ing languages via making use of the debugger‘s functionalities. We
provide a free implementation of the pattern‘s key functionality in
our TTEST unit testing framework.

Further work comprises enhancements of the usability and cus-
tomizability of the pattern by improving on the underlying func-
tionality in the toolbox, e. g. by implementing a gotoat function,
allowing for the direct execution of arbitrary sections in the code.

ACKNOWLEDGMENTS
This work has been supported by the Austrian Science Foundation
(FWF) grant P33352-N, and by the European Union (EU) within the
project SONICOM grant 101017743, RIA action of Horizon 2020.

REFERENCES
[1] William Opdyke, Refactoring Object-Oriented Frameworks, Thesis, University of

Illinois, 1992.

[2] Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts, Refactor-

ing: Improving the Design of Existing Code, Addison-Wesley, 2018.

[3] Chris Karelis , Ioannis Megas, Apostolos V. Zarras, How to Test the Extract Method

Refactoring, EuroPLoP ’20, July 1–4, 2020, doi: 10.1145/3424771.3424793.

[4] Jehad Al Dallal, Constructing models for predicting extract subclass refactoring
opportunities using object-oriented quality metrics, Inf. Softw. Technol., 54 (2012)
10, doi: 10.1016/j.infsof.2012.04.004

[5] Bian Yixin, Su Xiaohong, Ma Peijun, Identifying Accurate Refactoring Opportuni-

ties Using Metrics, In: ICSCTEA 2013, 141–146, doi: 10.1007/978-81-322-1695-7.
[6] Apostolos Ampatzoglou, Paris Avgeriou, Soﬁa Charalampidou, Alexander
Chatzigeorgiou, Antonios Gkortzis, Identifying extract method refactoring op-
portunities based on functional relevance IEEE Trans. Softw. Eng., 43 (2017) July,
doi: 10.1109/TSE.2016.2645572.

[7] V. Krishna Nandivada, Jyothi Vedurada, Refactoring opportunities for re-
ICSE-C 2017, 305–307,

placing type code with state and subclass, Proc.
doi: 10.1109/ICSE-C.2017.97.

[8] Zeba Khanam, Sam A. M. Rizvi, A methodology for refactoring legacy code, 2011
3rd International Conference on Electronics Computer Technology, (2011) 198–
200, doi: 10.1109/ICECTECH.2011.5942080.

[9] Laurie J. Hendren, Soroush Radpour, Max Schäfer, Refactoring MATLAB, in: CC

2013, 224–243, doi: 10.1007/978-3-642-37051-9_12.

[10] Michael Feathers, Working Eﬀectively with Legacy Code, Prentice Hall PTR, USA,

2004.

[11] James M. Bieman, Upulee Kanewala, Testing scientiﬁc software: A sys-
tematic literature review Inf. Softw. Technol., 56 (2014) 10, 1219–1232,
doi: 10.1016/j.infsof.2014.05.006.

[12] Michelle Hirsch, The MathWorks, How common is MATLAB in academia?,

mathworks.com/matlabcentral/answers/176635, 21-9-15.

[13] Vladimir Khorikov, Unit Testing Principles, Practices, and Patterns, O’Reilly, 2020.
[14] Per Isakson, tracer4m, (2016), mathworks.com/matlabcentral/ﬁleexchange/28929,

2022-02-14.

[15] David Schuler, Andreas Zeller, Javalanche: Eﬃcient mutation testing for Java,

ACM SIGSOFT (2009), doi: 10.1145/1595696.1595750.

[16] Cygnus

Solutions,

libGDB

– A library

architecture

for GDB,

sourceware.org/gdb/papers/libgdb/libgdb.html, 2022-02-09.
[17] The LLDB Team, The LLDB Debugger lldb.llvm.org/, 2022-02-09.
10
[18] Microsoft,

Debugging

Windows

Tools

for

(WinDbg),

docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools,
2022-02-09.

[19] GDB/MI, sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI.html, 2022-02-09.
[20] Bertrand Meyer, Applying ’design by contract’ in Computer, 25 (1992) 10, 40–51.
[21] Clara Hollomey, Thomas Mejstrik, TTEST, (2021), gitlab.com/tommsch/TTEST.

22-02-08.

[22] Piotr Majdak, Clara Hollomey, Robert Baumgartner, AMT 1.0: the toolbox
for reproducible research in auditory modeling, submitted to Acta Acustica,
http://amtoolbox.org.

[23] Maria Charina, Costanza Conti, Thomas Mejstrik, Jean-Louis Merrien, Joint spec-
tral radius and ternary Hermite subdivision, Adv. Comput. Math., 47 (2021) 25,
doi: 10.1007/s10444-021-09854-x.

[24] Zdeněk Průša, Peter L. Søndergaard, Nicki Holighaus, Christoph Wiesmeyr, Pe-
ter Balazs, The Large Time-Frequency Analysis Toolbox 2.0, Sound, Music, and
Motion, Lecture Notes in Computer Science 2014, 419–442, http://ltfat.org.

