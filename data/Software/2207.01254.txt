2
2
0
2

l
u
J

4

]
E
S
.
s
c
[

1
v
4
5
2
1
0
.
7
0
2
2
:
v
i
X
r
a

–
–

The Present and Future of
Bots in Software Engineering

Emad Shihab
Concordia University, Canada

Stefan Wagner
University of Stuttgart, Germany

Marco A. Gerosa
Northern Arizona University, USA

Mairieli Wessel
Radboud University, The Netherlands

Jordi Cabot
ICREA, Spain

SOFTWARE ENGINEERING BOTS are appli-
cations able to react to external stimuli such as
events triggered by tools or messages posted by
users and run automated tasks in response, work-
ing as an interface between users and services.
Bots often include conversational capabilities to
interact with end-users through textual messages
(in chatbots) or speech (in voicebots) in the
same communication channels as their human
counterparts. Bots can support technical and so-
cial activities in software engineering, including
communication and decision-making.

We are witnessing a massive adoption of bots
in a variety of domains, including e-commerce,
customer service, and education. Software devel-
opment is no exception [1], [2]. Given the essen-
tial complexity of software projects and the large
community of people around them (stakehold-
ers, designers, developers and, let’s not forget,

end-users), there are plenty of opportunities for
bots to jump in and tame this complexity by
(semi)automating repetitive tasks. We often see
bots working on software repositories, e.g., to
manage pull requests, acting as Q&A bots, e.g.,
for information retrieval, or integrated in software
development environments, e.g., automating bug
repair [3].

Automation is even more relevant for open-
source projects, which typically face sustainabil-
ity issues. The adoption of bots may help free
some responsibilities of the open-source main-
tainers and allow them to focus on the most
critical tasks, beneﬁting the long-term health of
open source. In open-source (or inner-source)
projects, bots can leverage the public availability
of software assets, including source code, dis-
cussions, issues and comments, to target more
signiﬁcant contributions.

IEEE Software

This is the author’s version which has not been fully edited and content may change prior to ﬁnal publication.

© 2022 IEEE

1

 
 
 
 
 
 
This special issue offers a perspective on the

current role of bots in software engineering.

Overview of papers in this special issue
Zimmerman et al., in their paper “Extending
the team with a project-speciﬁc bot,” report their
experience developing and maintaining a custom
bot named Coq bot, which was built to support
the Coq team (circa 40 developers and hundreds
of contributors). The bot was initially developed
to automate the synchronization between pull
requests opened on a GitHub repository and
branches on a GitLab mirror. Based on user
feedback, the bot evolved to execute other tasks,
including merging a pull request, keeping track of
pull requests with merge conﬂicts, and backport-
ing pull requests. The authors note that relying
on familiar technology and straightforward and
extensible architecture choices can ease the main-
tenance of a bot by facilitating the onboarding of
new bot maintainers.

The adoption and characterization of bots in
open-source projects is the topic of the article
“From Specialized Mechanics to Project Butlers:
the Usage of Bots in Open Source Development”
by Wang and Redmiles. In this article, the authors
sampled the top 1000 most popular (using the
number of stars as a popularity metric) software
development repositories on GitHub and studied
whether the project employed software bots and,
if so, what types of tasks those bots were helping
with. As part of their conclusions, they highlight
that over 60% of open-source projects do use
bots, even though these bots often focus on au-
tomating simple tasks. The authors note that these
bots are typically rule-based reacting to certain
events they have subscribed to and show very
limited interactive capabilities.

Cogo and Hassan focus in their article “Un-
derstanding the Customization of Dependency
Bots: The Case of Dependabot” on a popular
bot used on GitHub named Dependabot. This
bot is used for checking and updating dependen-
cies to libraries used in a project. The authors
analyzed almost 500 projects that use Depend-
abot and have corresponding conﬁguration ﬁles.
The authors conclude that customizing a bot’s
behavior can help in reducing noise but might
also limit the bot’s usefulness as certain features
might stop working. Therefore, designers of bots

should be careful
in considering the trade-off
between allowing bot users to conﬁgure the bot
and the interaction with features that
the bot
offers. In general, conﬁgurations should be as
simple as possible since bot users interact with
many different bots and, therefore, are not able
to spend signiﬁcant effort on maintaining their
conﬁgurations. Cogo and Hassan even suggest
that there could be sharing platforms for distribut-
ing tailored conﬁguration ﬁles for certain project
characteristics.

Markusse et al. study the use of benchmarking
bots in their paper titled “Using Benchmarking
Bots for Continuous Performance Assessment”.
The authors show that bots are rarely used to
continuously benchmark performance but that the
situation is changing with the newly introduced
the
GitHub Actions. Based on their ﬁndings,
authors encourage developers of performance-
sensitive projects to consider adopting bot-based
benchmarking. Speciﬁcally, adopting such bots
can help with performance testing, the detection
of performance regressions, and providing conﬁ-
dence to maintainers about complex changes.

Golzadeh et al. make a call for better bot
identiﬁcation techniques in their paper entitled
“Recognizing bot activity in Collaborative Soft-
ware Development”. The authors show that bots
are among the most active accounts in open-
source GitHub projects, yet they are rarely well
identiﬁed. This large-spread presence of bots can
impact certain analysis techniques that give credit
based on activity. Hence, the authors argue that
although current manual techniques tend to be the
best option for maintainers, future work should
examine the use of machine learning and artiﬁcial
intelligence to detect bot activity.

Future challenges

The growth in popularity and contribution
of bots is undeniable. The number of libraries,
platforms, and reusable bots keeps mounting up.
Nevertheless, to fully unleash the potential of bots
in software engineering, we would like to draw
attention to several technical and socioeconomic
open challenges.

Regarding technical challenges, we need bet-
ter systems to facilitate the coordination and
collaboration of bots in the same project, as right
now, each bot behaves in an independent way, and

2

IEEE Software

they can have conﬂicting actions. This challenge
requires deﬁning bot-speciﬁc coordination and
integration policies.

Quality evaluation of bots is another key area.
Mainly when bots include conversational capa-
bilities, bot testing implies redeﬁning many of
the classical testing concepts as we need to test
the behavioral part of the bot, the conversational
component, and the combination of the two [4],
[5].

Finally, security and privacy also pose relevant
challenges. As we must be able to trust
the
bots we add to our projects, we need techniques
that assure that bots will not perform malicious
activities, leak data and request the bare minimum
permissions.

Beyond technical aspects, we need to better
understand users’ perception of bots and how
to optimize human-bot collaboration. Bots will
need to get better communication and cognitive
skills. For instance, when interacting with users,
bots should be able to show empathy and re-
act differently depending on the result of the
sentiment analysis of the conversation they are
having so far. Another example would be that
the learn and mimic the speciﬁc idiosyncrasy of
a project (including its vocabulary and natural
language use) to increase their chances of being
accepted. At the same time, bots could help in
promoting social diversity in the project. As an
example, they could identify and better support
contributions from community minorities in the
project. Finally, they should be able to explain
their behavior to improve their trustworthiness.

The economic impact of bots in a project
also deserves special attention. We do not have
good economic models to evaluate the return-on-
investment (ROI) of adopting a certain bot. If we
could estimate the value of a bot for a project, it
would be much easier to have rational discussions
with project owners considering the cost-beneﬁt
analysis of integrating it. Even if some bots are
released as open-source software,
this doesn’t
mean there is no cost to adopt them. For example,
developers often disregard the cost of learning
how to use a bot properly.

So far, we have mostly discussed the im-
pact of bots on software engineering. But as
bots are software components themselves, bot
development could and should beneﬁt from well-

grounded software engineering practices. What
the best practices are for this speciﬁc type of
software component remains to be seen. For
example, it is still unclear how bots, especially
collaborative and cognitive bots, will be tested.
Bots are becoming smarter, and we know that
the creation of smart software applications poses
a speciﬁc set of additional challenges [6]. We
hope the community can beneﬁt from this special
issue’s papers and keep working on innovating in
this increasingly important ﬁeld.

REFERENCES

1. M. D. Storey and A. Zagalsky, “Disrupting developer

productivity one bot at a time,”

in Proceedings of

the 24th ACM SIGSOFT International Symposium

on Foundations of Software Engineering, FSE 2016,

T. Zimmermann, J. Cleland-Huang, and Z. Su, Eds.

ACM, 2016, pp. 928–931.

[Online]. Available: https:

//doi.org/10.1145/2950290.2983989

2. L.

Erlenhov,

F. G.

de Oliveira Neto,

and

P. Leitner,

“An empirical study of bots in software

development: characteristics and challenges from a

practitioner’s perspective,”

in ESEC/FSE ’20: 28th

ACM Joint European Software Engineering Conference

and Symposium on the Foundations of Software

Engineering, Virtual Event, USA, November 8-13, 2020,

P. Devanbu, M. B. Cohen, and T. Zimmermann,

Eds. ACM, 2020, pp. 445–455.

[Online]. Available:

https://doi.org/10.1145/3368089.3409680

3. S. Santhanam, T. Hecking, A. Schreiber, and S. Wagner,

“Bots in software engineering: a systematic mapping

study,” PeerJ Computer Science, vol. 8, no. e866, 2022.

4. V. Riccio, G. Jahangirova, A. Stocco, N. Humbatova,

M. Weiss, and P. Tonella, “Testing machine learning

based systems: a systematic mapping,” Empir. Softw.

Eng., vol. 25, no. 6, pp. 5193–5254, 2020.

[Online].

Available: https://doi.org/10.1007/s10664-020-09881-0

5. J. Cabot, L. Burgue ˜no, R. Claris ´o, G. Daniel,

J. Perianez-Pascual, and R. Rodr´ıguez-Echeverr´ıa,

“Testing challenges for nlp-intensive bots,”

in 3rd

IEEE/ACM International Workshop on Bots in Software

Engineering, BotSE@ICSE 2021, Madrid, Spain, June

4, 2021.

IEEE, 2021, pp. 31–34. [Online]. Available:

https://doi.org/10.1109/BotSE52550.2021.00014

6.

I. Ozkaya,

“What

is really different

in engineering

ai-enabled systems?” IEEE Softw., vol. 37, no. 4, pp.

3–6, 2020.

[Online]. Available: https://doi.org/10.1109/

MS.2020.2993662

– 2022

3

is a Full
Emad Shihab,
Professor and Research
Chair at Concordia Uni-
versity where he leads
the Data-driven Analysis of
Software (DAS) lab. His re-
search expertise is in Min-
ing Software Repositories,
Software Ecosystems, and
Software Bots. He is a Senior Member of the IEEE.
You can learn more at https://das.encs.concordia.ca.

Netherlands. She obtained
her Ph.D.
in Computer
Science from the University
of S ˜ao Paulo, Brazil. Her
main research interest is in
software engineering (SE)
computer-supported
and
cooperative work (CSCW),
focused on software
bots and open-source development. Her research
goal
is to design intelligent support for developers
by leveraging bots’ capabilities. Contact her at
mairieli.wessel@ru.nl.

University

is a Full
Stefan Wagner
Professor
empirical
of
software engineering and
director of
the Institute
of Software Engineering
at
of
the
research
Stuttgart. His
interests
human
are
aspects, software quality,
software,
automotive
AI-based
systems,
studies.
and
He studied computer science in Augsburg and
Edinburgh and received a doctoral degree from
the Technical University of Munich. He is a
IEEE and ACM. Contact him
senior member of
at stefan.wagner@iste.uni-stuttgart.de.

empirical

is an ICREA
Jordi Cabot
Research Professor at the
Open University of Cat-
alonia, Barcelona, Spain,
E08035, where he leads
the Software and Systems
Modeling Lab. Contact him
at jordi.cabot@icrea.cat or
https://jordicabot.com.

He

Marco A. Gerosa is a Full
Professor at the Northern
Arizona University, USA,
and a Ph.D. advisor at the
University of S ˜ao Paulo,
Brazil.
researches
Software Engineering and
CSCW. Recent projects
include the development
tools and strategies
of
to
newcomers’
support
onboarding to open source
software communities and
the design of bots and
chatbots. He published more than 200 papers and
serves on the program committee (PC) of top-tier
conferences, such as FSE, MSR, and CSCW. For
more information, visit http://www.marcoagerosa.com

is an
Mairieli Wessel
Assistant Professor at the
the
Radboud University,

4

IEEE Software

