2
2
0
2

p
e
S
7

]

O
C
.
h
t
a
m

[

1
v
9
5
0
3
0
.
9
0
2
2
:
v
i
X
r
a

The art of algorithmic guessing in gfun

Sergey Yurkevich

September 8, 2022

Abstract

The technique of guessing can be very fruitful when dealing with se-
quences which arise in practice. This holds true especially when guessing
is performed algorithmically and eﬃciently. One highly useful tool for this
purpose is the package named gfun in the software Maple. In this text
we explore and explain some of gfun’s possibilities and illustrate them on
two examples from recent mathematical research by the author and his
collaborators.

1 Introduction

George Pólya described the mathematical scientiﬁc method by the short but pre-
cise premise “First guess, then prove” [Pó78, p. 27]. This mantra lies in the heart
of experimental mathematics, which, while having many facets and branches,
can be roughly described as a 3-step process: compute a high-order approxi-
mation of a problem, guess/conjecture a general pattern, prove the conjecture.
Many years passed since Pólya formulated his advice and modern mathemati-
cians can now proﬁt of better hardware and eﬃcient algorithms designed for
not only proving statements but also guessing them.

Nowadays, experimental mathematics is almost impossible to imagine with-
out the computational power provided to us by recent technology and theoretical
algorithmic breakthroughs. Many principles in “guessing” and “proving” were
adapted and can be run completely automatized taking just fractions of seconds
in time, while ﬁnding and justifying highly non-trivial theorems. However, ex-
perience also shows that still many techniques which are self-evident to some
scientists are inaccessible or unknown to others, even though these methods
could often extensively aid their research.

One class of objects which is ideal for the algorithmic “guess and prove”
strategy turns out to be the class of holonomic sequences (to be deﬁned below
in §1.1). This type of sequences is not only very common throughout mathe-
matics and other sciences, but also provides a good algorithmic data structure
and is very well studied from the theoretical point of view. Moreover, in Maple
users can proﬁt of an excellent package called gfun designed for manipulating
and guessing holonomic sequences eﬃciently. Similar packages exist for other

1

 
 
 
 
 
 
computer algebra systems like, for example, in Mathematica (e.g. RATE, see
[Kra99], or Guess by Kauers) or in SageMath (e.g. Guess in FriCAS by Rubey).
The goal of this text is twofold. Our ﬁrst aim is to give a short introduction to
the practical use of Maple’s package gfun, its various functions and the resulting
possibilities. Secondly, we wish to explain the “art of algorithmic guessing” by
means of two recent and very diﬀerent results in mathematical research which
were deduced with gfun’s help. The ultimate target is to convince the reader
that algorithmic guessing is very powerful and at the same time easy to do
eﬃciently in Maple.

The structure of the paper is as follows: in the Introduction (§1) we explain
the preliminaries and at the same time provide motivation for the objects of
interest. We will describe very brieﬂy the theoretical parts of the “guess and
prove” technique in this context. In §2 we concentrate on illustrating the prac-
tical use of Maple’s package gfun by describing the most useful functions and
illustrating them on some “toy examples”. Finally, Section 3 is devoted to two
recent applications from mathematical research by the author and his collabo-
rators, which nicely demonstrate the power of guessing as well as the potential
of gfun.

1.1 P-recursive sequences and D-ﬁnite functions

In this text we will mostly work with the class of P-recursive sequences. This
notion became already quite classical in computer science and mathematics,
but we nevertheless recall that a sequence (un)n
0 is called P-recursive (or
holonomic) if it satisﬁes a linear recurrence with polynomial coeﬃcients:

≥

cr(j)uj+r +

· · ·

+ c0(j)uj = 0,

j

0,

cr(x)

= 0.

≥

(1)

P-recursive sequences are ubiquitous in mathematics and often also appear in
other disciplines like physics or biology. Some prominent examples are:

• The Fibonacci sequence (Fn)n

≥

0 = (0, 1, 1, 2, 3, 5, . . . ) which satisﬁes

Fn+2 −

Fn+1 −

Fn = 0.

• The sequence of Catalan numbers (Cn)n

≥

0 = (1, 1, 2, 5, 14, 42, . . . ):

(n + 2)Cn+1 −

2(2n + 1)Cn = 0.

• The factorial sequence (n!)n

≥

0 = (1, 1, 2, 6, 24, . . . ):

(n + 1)!

−

(n + 1)n! = 0.

• The Apéry numbers (An)n

0 = (1, 5, 73, 1445, . . . ) which played a crucial

role in the proof of the irrationality of ζ(3) [Apé79, vdP79]:

≥

(n + 2)3An+2 −

(2n + 3)(17n2 + 51n + 39)An+1 + (n + 1)3An = 0.

2

6
• The Yang-Zagier numbers (an)n

0 = (1,

48300, 7981725900, . . .) which

appeared ﬁrst in [Zag18, p. 768] and are investigated in §3.1.

≥

−

• The numbers (dn)n

0 = (72, 1932, 31248, 790101/2, . . .) which play an

important role in the study of Canham’s model in biology, see §3.2.

≥

Like in the examples above, for the sake of simplicity and explicitness we will
0. Of course, the deﬁnitions
assume that un ∈
and almost all properties addressed below translate to arbitrary ﬁelds (usually,
but not necessarily, of characteristic 0).

Q for a holonomic sequence (un)n

≥

One reason for the importance of P-recursive sequences is the equivalent
characterization on the level of generating functions. We recall that a formal
Q[[x]] is called D-ﬁnite (or holonomic) if it satisﬁes a linear
power series f (x)
diﬀerential equation with polynomial coeﬃcients:

∈

ps(x)f (s)(x) +

· · ·

+ p1(x)f ′(x) + p0(x)f (x) = 0,

ps(x)

= 0.

(2)

The proof of the following classical theorem connecting P-recursive sequences
and D-ﬁnite functions can be found in Stanley’s seminal article [Sta80] (The-
orem 1.5) where he mentions that Jungen [Jun31] was already using it almost
half a century before.

0 is P-recursive if and only if the generating

Theorem 1. A sequence (un)n
0 unxn is D-ﬁnite.
function

n

≥

≥

P

General interest for the notion of holonomicity mostly comes from two main
aspects:

1.1.1 Algorithmic and mathematical theory

From the algorithmic point of view, holonomic objects are useful because they
only require ﬁnitely many data to be stored uniquely: on the level of P-recursive
sequences it is clear that the polynomials c0(x), . . . , cr(x) together with the
initial terms u0, . . . , uN , where N is the maximum between r and the largest
integral root of cr(x), are enough to encode a given sequence. The general
fact that linear diﬀerential equations form an excellent data structure from the
computational point of view is propagated by Salvy, for example in [Sal19].

P-recursive sequences/D-ﬁnite functions enjoy nice and eﬀective closure prop-

erties. If (un)n

0, (vn)n

0, f (x) and g(x) are holonomic, then

≥
1. (un + vn)n

vn)n

2. (un ·
3. f ′(x) and

≥

≥

≥
0 and f (x)

0 and f (x) + g(x) are holonomic.

g(x) are holonomic.

·
f (x)dx are holonomic.

R

For the proofs of all these properties we refer to [Sta80, Thm. 2.3 & Thm. 2.10].
It essentially only uses linear algebra and the property that f is D-ﬁnite if and
only if f, f ′, f ′′, . . . span a ﬁnite-dimensional vector space over Q(x). Moreover,
a theorem sometimes attributed to Abel states that:

3

6
4. If a(x) is an algebraic function1 then a(x) is holonomic.

More generally, if a(x) is algebraic and f (x) D-ﬁnite then [Sta80, Thm. 2.7]

5. f (a(x)) is holonomic as well.

All these closure properties are eﬀective in the sense that there exist algorithms
for performing them on the level of diﬀerential equations and recursions. As we
will see, they are implemented eﬃciently in Maple’s package gfun.

We warn the reader that the quotient and composition of holonomic func-
1

tions is not necessarily holonomic. For example the functions tan(x) and ee
are not D-ﬁnite. Similarly, (1/Fn)n
is not P-recursive.

−
1, where Fn is the n-th Fibonacci number

≥

x

From the theoretical point of view, linear diﬀerential equations have been
studied by many outstanding mathematicians in the past two centuries. Since
giving a short and at the same time complete overview is impossible, we refer
the interested reader to some of the best introductory books on this topic for a
huge universe of amazing theorems and discoveries [Poo60, Gra00, vdPS03].

A linear diﬀerential equation like (2) is usually studied from the viewpoint

of the attached diﬀerential operator

∈

,
i

· · ·

ps(x)∂s +

Q[x]
∂
h

+ p1(x)∂ + p0(x)

Q[x]
∂
h
where the symbol ∂ stands for d
dx and we have the commutation rule ∂x =
x∂ + 1. The (non-commutative) polynomial ring Q[x]
is called the Weyl
∂
h
is deﬁned as the largest degree of
algebra. The order of an operator L
∈
∂. A classical result, usually attributed to Ore [Ore32], states that Q(x)
is a
∂
h
Euclidean domain. Therefore it makes sense to speak about the so-called GCRD
(greatest common right divisor) and LCLM (least common left multiple) of two
Q(x)
. Naturally, LCLM(A, B) is deﬁned as the least-order
operators A, B
∂
h
i
Q(x)
monic operator L
such that L = Q1A = Q2B for some non-zero
∂
h
, and G = GCRD(A, B) is the monic operator of largest order
Q1, Q2 ∈
i
. It can be proved
such that A = Q1G and B = Q2G for some Q1, Q2 ∈
i
that the solution spaces of Ay = 0 and By = 0 are vector spaces and that
the LCLM produces an operator whose solution space is the sum of the spaces,
while the solution space of GCRD(A, B) is their intersection.

Q(x)
∂
h

Q(x)
∂
h

∈

∈

i

i

i

i

Moreover, the LCLM and GCRD can be algorithmically computed using
the “skew version” of the Euclidean algorithm; in practice, for example, with
Maple’s package DEtools. Then some elementary reasoning implies that the
question of equality of two D-ﬁnite functions (and consequently two P-recursive
sequences) is decidable and usually easy to answer in practice, see [BLS17, §4.3].
We will elaborate on this in Section 3 on practical examples.

Still on the algorithmic side, we can rely on many relatively recent and out-
standing works by many still active scientists. For example, highly eﬃcient
algorithms for computing analytic continuation and evaluation of D-ﬁnite func-
tions, based on ideas of the Chudnovsky brothers [CC90] were created by van

1Recall that a(x) ∈ Q[[x]] is called algebraic if there exists a bivariate non-zero polynomial

P (x, y) in Q[x, y] such that P (x, a(x)) = 0. A non-algebraic series is called transcendental.

4

der Hoeven [vdH99, vdH01, vdH07] and Mezzarobba [Mez10]. Notably, as we
will see later, very useful in practice is the work by van Hoeij and collabora-
tors [KvH13, vHV15, IvH15] on explicit solutions of diﬀerential equations in
terms of known special functions. The famous method of creative telescoping
propagated by Zeilberger [Zei91], and constantly improved in the last decades,
allows for ﬁnding and proving linear recurrences/diﬀerential equations for se-
quences given as explicit sums or functions given as integrals; see for exam-
ple [Chy14] for a great exposition of many achievements in this ﬁeld and [CK17]
for open problems. We also mention very recent works by Bostan, Rivoal,
Salvy [BRS21] and by Barkatou, Cluzeau, Di Vizio, Weil [BCDVW20] which
allow for practical proofs of transcendence and algebraicity of given D-functions.
Finally, as already mentioned, P-recursive sequences and D-ﬁnite functions
happen to form a great class for eﬃcient guessing algorithms. We will elaborate
on this in §1.2.

1.1.2 Importance in practice

Interest in holonomic objects is also motivated by the fact that, as experience
shows, they often appear in practice. Their practical importance can already
be guessed from the huge amount of existing theory and algorithms. Closure
properties show how easy it is to build arbitrarily complicated examples of D-
ﬁnite functions and P-recursive sequences.

As a further example, we recall the notion of the Gaussian hypergeometric

function 2F1 deﬁned by

2F1(cid:20)

a b
c

:=

; x

(cid:21)

(a)n(b)n
(c)n

xn
n!

,

∞

Xn=0

(3)

−

· · ·

Q, c

(u+j

1) is the rising factorial and a, b

Z<0
where (u)j := u(u+1)
are parameters. It is not diﬃcult to see that the coeﬃcient sequence of such
a function satisﬁes a ﬁrst-order linear recurrence relation with polynomial co-
eﬃcients, whereas the function itself satisﬁes a linear diﬀerential equation of
order 2. These generating functions are ﬁrst non-trivial examples from the
holonomic viewpoint, however they already play an important role in enumer-
ative combinatorics, as well as in the study of elliptic functions and special
functions in general, modular forms, orthogonal polynomials, etc. We will see
them appearing in completely diﬀerent contexts in §3.1 and §3.2.

Q

∈

∈

\

There exist (informal) estimates that the proportion of sequences in the
The On-Line Encyclopedia of Integer Sequences [ST20] which are P-recursive is
around 25%; moreover, roughly 60% of functions are D-ﬁnite in the Handbook
of Mathematical Functions [AS64]2. These numbers, however, do not say much
without closer inspection towards applications. Therefore, in order to support
the thesis that holonomic objects appear in practical applications by means of an
example, we will brieﬂy recapitulate on the famous success story in enumerative

2These numbers were estimated by Salvy [Sal05] in 2005 and the magnitude of the ﬁrst

proportion was conﬁrmed by the author as of 2022.

5

combinatorics about the classiﬁcation of lattice walks with small steps in the
quarter plane.

pi ∈

A walk of length n in the plane is a sequence p0, . . . , pn of elements in Z2 such
S, where S is a ﬁnite subset of vectors in Z2. If all elements of
that pi+1 −
S have Euclidean length of at most √2 (i.e., S consists only of vectors directing
to the neighbours in Z2) one speaks of a small-step walk. The walk is said to
be conﬁned to the upper half-space or conﬁned to the quarter plane if moreover
N2 in the second
p0 = (0, 0) and each pi ∈
case. Given a set S, a natural question is: how many unrestricted walks, or
walks conﬁned to the upper half-space or conﬁned to the quarter plane of length
n exist? In particular, the nature of the generating functions is intriguing.

N in the ﬁrst case or each pi ∈

×

Z

It is easy to see that if there are no restrictions on the conﬁnement, the
generating function of the number of walks in the plane is rational. The case
of short-step walks restricted to the half-space is more interesting: a result
due to Bousquet-Mélou and Petkovšek says that the length generating func-
tion of such a walk is necessarily algebraic, see [BMP00, BMP03]. The case
it turns out that after
of walks conﬁned in a quarter plane is more diﬃcult:
disregarding uninteresting situations (e.g. S =
where the number
1)
1,
}
of walks is 0 for n > 0), and after taking into account symmetry, exactly 79
cases remain. A great classiﬁcation eﬀort by many researchers was undertaken
in the last decades. In particular, it is proved that exactly 23 of the 79 models
(roughly 29%) have a D-ﬁnite generating function and of those exactly 6 are
algebraic. We refer to Bostan’s habilitation thesis for an excellent summary on
this topic [Bos17], see also [Bos21] for a short but clear-cut exposition.

(
−

−

{

1.2 “Guess and prove” for holonomic objects

The guessing strategy for D-ﬁnite functions and P-recursive seqeunces is won-
derfully explained in [Bos17, §2] and eﬃciently implemented in Maple’s gfun.
We will brieﬂy summarize here the main theoretical ideas before we explain the
practical use in Maple in the next section.

Since our main object of interest are sequences, we will stick to the P-
recursive viewpoint; in the case of linear diﬀerential equations instead of re-
cursions, everything works analogously.

≥

The setting is the following: assume we are given some terms u0, . . . , uN of
a sequence (un)n
0. In general we have no reason to assume that this sequence
is P-recursive and we have no bounds on the order or degree of a possible
recurrence. Still, we would like to guess a linear recurrence relation for (un)n
0
≥
from the data we have; if we are “lucky”, we can prove afterwards that this
recursion is indeed correct. The idea is to look for some natural number r and
polynomials c0(n), . . . , cr(n) of some degree, say d, such that

cr(j)uj+r +

· · ·

+ c0(j)uj = 0

(4)

holds for j = 0, . . . , N
0 is P-recursive, then such an
equation exists for all, arbitrarily large, natural numbers N , and for some, but

r. Clearly, if (un)n

−

≥

6

∈

N. In general it is easy to see that the task boils down to solving a
ﬁxed, r, d
system of linear equations, where the unknowns are the (r +1)(d+1) coeﬃcients
of the polynomials, see Example 1 below. Then, if (r + 1)(d + 1) > N
r, a
linear algebra argument implies that a non-zero solution to this problem always
N , the system is clearly
exists. On the other hand, if (r + 1)(d + 1) + r
highly over-determined, and there is a priori no reason for this system to have
0 is P-recursive. Then it is
a solution, except, of course, if the sequence (un)n
also quite likely that the found solution is the true linear recurrence for (un)n
0.
Example 1. Assume we are given the numbers

≪

−

≥

≥

(un)0

≤

n

≤

6 = (1, 4, 36, 400, 4900, 63504, 853776)

and we wish to ﬁnd a linear recurrence of order one and degree at most two. In
other words, we look for a non-zero sextuple (a, b, c, d, e, f )

Q6 such that

∈

(f n2 + en + d)un+1 + (cn2 + bn + a)un = 0, n = 0, . . . , 5.

Writing down what this means shows that we need to solve

u0
u1
u2
u3
u4
u5











0
u1
2u2
3u3
4u4
5u5

u1
0
u2
u1
u3
4u2
9u3
u4
16u4 u5
25u5 u6

0
u2
2u3
3u4
4u5
5u6

0
u2
4u3
9u4
16u5
25u6











·



a
b
c

d


e


f













= 0.

Indeed, using Gaussian elimination, we can easily ﬁnd that the kernel of this
16, 1, 2, 1)t and therefore a valid candidate for
matrix is spanned by (
our recursion in this example would be

16,

4,

−

−

−

(n2 + 2n + 1)un+1 −

(16n2 + 16n + 4)un = 0.

In practice there are usually no bounds on the order or degree of the recur-
rence one wants to guess. Therefore, the algorithm will ﬁrst try r = 1 and then
N/r such that the linear
successively increase the order r, while keeping d
system is slightly over-determined. After a valid candidate for the recurrence
is found, it is usually checked on a few known, but previously unused, terms of
the sequence.

≈

A very similar approach can be carried out when guessing the diﬀerential
operator for a D-ﬁnite series or an annihilating polynomial for an algebraic func-
tion: in all these cases the problem reduces to linear algebra. In a speciﬁc but
quite common situation in practice, such a guessing procedure almost imme-
diately gives a proof. Let f (x) be given as the solution of a linear ODE with
enough initial conditions, and assume that we want to prove that f (x) is alge-
braic. Assume, moreover, that we have a guess for an annihilating polynomial

7

P (x, y). Then proving its correctness is not diﬃcult: using the eﬀective version
of the fact that algebraic functions are D-ﬁnite, we can convert P (x, y) into a
diﬀerential equation satisﬁed by all its roots and call ˜f (x) its solution which
coincides with f (x) up to enough precision, such that ˜f (x) is unique. Then the
problem reduces to deciding equality of two D-ﬁnite functions which is algorith-
mically easy, see §3.1 below for an example, or [BLS17, §4.3] for the complete
theoretical procedure. Exactly this strategy (in a slightly more general setting)
was employed by Bostan and Kauers in their proof of the algebraicity of the
generating function of Gessel walks [BK10].

An important and highly non-trivial question is: How to guess eﬃciently?
In practice, as well as in the recent version of gfun, two clever ideas are applied
in combination:

1. Instead of solving the system over Q it is faster to solve several systems
over the ﬁnite ﬁelds Fp for various prime numbers p and then combine the
solutions using the Chinese remainder theorem. In practice this method
gives a huge speed-up.

2. The linear systems one obtains from holonomic or algebraic guessing have
structure that can exploited algorithmically. In fact, the problem can be
viewed as a variant of Hermite-Padé approximation, for all types of which
very eﬃcient algorithms were invented by Beckermann and Labahn [BL97].

2 Working with gfun

Before we explain and show the most useful functions of gfun, let us mention a
bit of history about this package and credit the developers.

The Maple package gfun was written in 1992 by Salvy and Zimmermann.
In the same year the authors submitted the article [SZ94] which was intended to
be an introduction to the package and the reference manual at the same time.
Since then gfun has been constantly improved by Salvy and got signiﬁcantly
better. Currently the newest version is 3.84 and can be downloaded from his
web page3. The package also comes pre-installed with Maple, however with the
version 3.20 which is heavily outdated. One of the biggest improvements of the
newest version compared to 3.20 is the eﬃciency boosts brieﬂy explained on the
theoretical level at the end of the previous section. Below we will indicate some
more diﬀerences based on which we strongly recommend to download and use
the newest version. Finally, we also mention the existence of the more recent
Maple package NumGfun by Mezzarobba [Mez10] which deals with rigorous and
eﬃcient numerical computations with D-ﬁnite functions, since for some appli-
cations the two packages complement each other well.

Almost all functions of gfun can roughly be divided into three categories:

3www.perso.ens-lyon.fr/bruno.salvy/software/the-gfun-package/

8

• Functions allowing interplay between the holonomic objects.

• Eﬀective closure properties for P-recursive sequences/D-ﬁnite functions.

• Guessing algorithms for linear recurrences, ODEs and algebraic functions.

We will brieﬂy summarize the most useful functions and showcase them on some
“toy examples”. We note that this section is quite similar to the original tech-
nical report on gfun [SZ94]. However, as explained, in the last 30 years some
things have changed and got signiﬁcantly improved so we will highlight on them.

listtoseries and seriestolist: These useful commands are trivial from
the mathematical viewpoint: they transform a list of elements into a generating
function (represented by a series) and vice versa. For example

> listtoseries([1, 1, 2, 4, 9],x);
1 + x2 + 2x3 + 4x4 + 9x5 + O(x6)
> seriestolist(1 +xˆ2 + 2xˆ3 + 4xˆ4 + 9xˆ5 + O(xˆ6));

[1, 1, 2, 4, 9]

rectodiffeq and diffeqtorec are the eﬀective versions of Theorem 1: they
(eﬃciently and rigorously) convert a linear recurrence into a linear diﬀerential
equation and vice versa:

> rec := {(n + 1)ˆ2 * u(n + 1) - 4*(2*n + 1)ˆ2 * u(n), u(0) = 1}:

> deq := rectodiffeq(rec,u(n),y(x));

4y(x) + (

32x + 1)

y(x) + (

(cid:26)−
−
> diffeqtorec(deq,y(x),u(n));

−

d
dx

16x2 + x)

d2
dx2 y(x), y(0) = 1

(cid:27)

16n2

(
−

−

−

16n

4)u(n) + (n2 + 2n + 1)u(n + 1), u(0) = 1

(cid:8)
‘rec+rec‘, ‘rec*rec‘, ‘diffeq+diffeq‘ and ‘diffeq*diffeq‘: These are
implementations of the sum and product closure properties for P-recursive se-
quences and D-ﬁnite functions. For example, a linear recurrence relation for
(n! + 1/(n + 1))n

0 can be found using

(cid:9)

≥

> rec1 := {u(n + 1) = u(n)*(n + 1), u(0) = 1}:
> rec2 := {(n + 2)*u(n + 1) = (n + 1)*u(n), u(0) = 1}:

> ‘rec+rec‘(rec1, rec2, u(n));
(n + 1)(n + 3)un+2 −

(n + 2)(n2 + 5n + 5)un+1 + (n + 1)(n + 2)2un = 0.

More general and in the same spirit are the commands poltorec and poltodiffeq.

algeqtodiffeq is an eﬀective implementation of Abel’s theorem that every alge-
braic function is D-ﬁnite, see §1.1. It uses algorithmic ideas by Comtet [Com64]

9

and the Chudnovsky brothers [CC86], and is very eﬃcient in practice. Clearly,
together with listtoalgeq it is the central function for the algebraic guess-
and-prove strategy, see §1.2.

holexprtodiffeq uses closure properties and known linear diﬀerential equa-
tions of special functions to output an ODE satisﬁed by the input function. For
example:

> holexprtodiffeq(exp(sqrt(1 + x) - 1),y(x));

proves that e√1+x

−

1 satisﬁes the diﬀerential equation

y(x) + 2

−

d
dx

y(x) + (4x + 4)

d2
dx2 y(x) = 0.

We warn the user that the output is not necessarily the minimal-order diﬀeren-
tial equation. For example the output of

> holexprtodiffeq(sin(x)cos(x),y(x));

is a third-order equation, whereas sin(x) cos(x) = sin(2x)/2 clearly satisﬁes a
linear second-order diﬀerential equation with polynomial coeﬃcients as well.

rectohomrec and diffeqtohomdiffeq: Holonomic objects are deﬁned as so-
lutions to linear and homogeneous equations with polynomial coeﬃcients like
(1) and (2).
It is not diﬃcult to see that omitting the condition on homo-
geneity gives rise to the same class. These gfun procedures allow to convert
non-homogeneous equations to homogeneous ones.

listtorec and seriestorec are the implementations of holonomic guessing
for P-recursive sequences, which was brieﬂy explained in §1.2. As already elab-
orated, the eﬃciency of these algorithms has been signiﬁcantly improved in the
current version 3.84 compared to Maple’s pre-installed gfun 3.20. Moreover,
thanks to the improved eﬃciency we can also proﬁt of another signiﬁcant up-
grade: by default the old version guessed only linear recursions of order less or
equal than 3 and whose coeﬃcients have degree not larger than 4. While this
is enough for the ﬁrst four examples given in §1.1, many sequences in practice
have larger deﬁning equations. Admittedly, in the old version both of these
ﬁgures could be changed by the user by specifying gfun[’maxordereqn’] and
gfun[’maxdegcoeff’]. The version 3.84 dynamically adjusts these numbers
ensuring maximal eﬃciency while maintaining the conﬁdence in the guess.

With six terms we can guess the correct recurrence for the Catalan numbers.
The input for seriestorec is a series, while for listtorec it should be a list
of the elements.

> ser := series((1 - sqrt(1 - 4*x))/(2*x),x,6);
1 + x + 2x2 + 5x3 + 14x4 + 42x5 + O(x6)
> seriestorec(ser, C(n));

10

ﬁnds (
Almkvist-Zudilin sequence to ﬁnd the correct recursion:

2)Cn + (n + 2)Cn+1 = 0. We need at least 15 terms of the

4n

−

−

> l := [1,-3,9,-3,-279,2997,-19431,65853,292329,-7202523,

69363009,-407637387,702049401,17222388453,-261933431751]:

> listtorec(l, u(n));

ﬁnds (n + 2)3un+2 + (2n + 3)(7n2 + 21n + 17)un+1 + 81(n + 1)3un = 0.

Note that if the guessing algorithm succeeded, the output of listtorec and
seriestorec will actually be a list of two elements. The ﬁrst is the guessed
recurrence and the second is a ﬂag variable: either ’ogf’ or ’egf’ depending on
whether the algorithm could ﬁnd a candidate for the ordinary sequence (un)n
0
≥
0. By indicating the typelist variable as
or for the exponential one (un/n!)n
a third input to the gfun functions the user can force the algorithm to stick to
one sequence type.

≥

We note that in the newest version of Maple 2021 great improvement on
the package LREtools has been done by van Hoeij. One of the new available
functions is GuessRecurrence which works essentially like listtorec.

listtodiffeq and seriestodiffeq are commands analogous to the P-recursive
guessing but in the D-ﬁnite case. Consequently, the above remarks on gfun im-
provements also hold for these functions. The usage is the same, except that
now the output is the guessed diﬀerential equation satisﬁed by the generating
function of the input sequence. For example, the generating function of the
squares of the central binomial coeﬃcients satisﬁes:

> l := [seq(binomial(2n,n)ˆ2,n=0..10)]:
> listtodiffeq(l, y(x));

4y(x) + (32x

1)

d
dx

−

y(x) + (16x2

d2
dx2 y(x) = 0.

x)

−

listtoalgeq and seriestoalgeq: These two functions are implementations
of algebraic guessing. They guess an annihilating polynomial for the generating
function of the input sequence. Similarly to the algorithms above, in gfun 3.84
these functions are coded eﬃciently, i.e. they use modular arithmetic and fast
algorithms for the resulting problems in linear algebra. For example, we ﬁnd
the minimal polynomial for the Motzkin numbers from the ﬁrst 9 terms:

> listtoalgeq([1, 1, 2, 4, 9, 21, 51, 127, 323], y(x)):

1 + (x

−

1)y(x) + x2y(x)2 = 0.

rectoproc is a very useful gfun function which is quite diﬀerent from all the
It translates a recurrence relation into a Maple procedure and
above ones.
allows to compute sequence elements conveniently and eﬃciently. If only the
0 is needed, rectoproc uses binary
N -th term of a P-recursive sequence (un)n
splitting and fast integer multiplication which allows to ﬁnd uN in quasi-optimal

≥

11

complexity. For example, let us compute the N = 105-th Apéry number AN =

N
k=0

n+k
k

2

2

:

n
k

P

(cid:0)

(cid:1)

(cid:0)

(cid:1)

> rec := {(n+2)ˆ3*A(n+2) - (2*n + 3)*(17nˆ2 + 51*n + 39)*A(n+1)

+ (n+1)ˆ3 A(n), A(0)=1, A(1)=5}:

> pro := rectoproc(rec, A(n)):

> pro(10ˆ5):

On a regular laptop this ﬁnds AN in under 3 seconds. This is quite impressive
as AN has more than 153 thousand digits.

In practice one is often interested in the list of the ﬁrst N values of a sequence
and not just in the N -th term. In this case rectoproc(rec, u(n), list) may
be used.

3 Two examples: recent applications

In this section we will focus on two examples from recent mathematical research
which nicely demonstrate the usage of gfun in a practical sense. We will brieﬂy
introduce the problems, then present and explain the algorithmic solutions. At
the end of this section there is a short summary and conclusion containing the
main takeaways of these examples.

Our ﬁrst example comes from a recent survey article by Don Zagier [Zag18]
in which he investigates the structure of the generating function assigned to a
particular integer sequence. The study of it and similar sequences is current
work in progress by A. Bostan, J.-A. Weil and the author.

The second example originates in a biological model describing the shape
of biomembranes, the examination of which in a particular case culminates in
the investigation of a speciﬁc function given by the quotient of two D-ﬁnite
functions. The necessary study of it was ﬁrst performed by Melczer and Mez-
zarobba [MM20] using rigorous asymptotics and then by Bostan and the au-
thor [BY22] from a completely diﬀerent perspective.

3.1 The Yang-Zagier numbers (an)n≥0
In [Zag18, p. 768] Zagier introduces the integer sequence (an)n
0, which he
describes as a “very mysterious example of numbers”. Following Zagier, we ﬁrst
0 by
deﬁne the P-recursive sequence (cn)n

≥

≥

25

2592000n4
(cid:0)

−

16588800n3 + 39118320n2
4500n2
(cid:0)

20

−

80352000n(5n

1)(5n

2)(5n

−

−
39189168n + 14092603

−

4)cn+

cn

1+

−

18900n + 19739

cn

−
35) and c2 = 26605753/(223

(cid:1)

−

−
312

(cid:1)
2 + cn

3 = 0,

52).
with initial terms c0 = 1, c1 =
Note that this recursion comes from a topological ODE in the sense of [BDY18].

161/(210

−

·

·

·

12

Zagier mentions that cn decay like 1/n!2, therefore one may hope to ﬁnd rational
numbers u, v and a non-zero integer w such that4
(v)n ·

cn = cn ·
0. Indeed, Zagier claims that using a formula by him
e

(u)n ·

is an integer for every n
and Yang, it can be shown that

wn

≥

an := cn ·

(4/5)n ·
however he also mentions that they did not succeed in ﬁnding a closed expres-
0 anxn, nor proving that it is an algebraic
sion for the generating function
function [Zag18, p. 769].

(3/5)n ·

∈

≥

n

·

·

Z,

35

54)n

(210

P

As we will see, this is a perfect example for the power of gfun, using which
we can easily answer questions about the sequence (an)n
0 and its generat-
ing function. Moreover, this example demonstrates well the “guess and prove”
strategy for P-recursive sequences.

≥

We start by deﬁning

> p0 := 80352000*n*(5*n - 1)*(5*n - 2)*(5*n - 4):

> p1 := 25*(2592000*nˆ4 - 16588800*nˆ3 + 39118320*nˆ2

- 39189168*n + 14092603):

> p2 := 20*(4500*nˆ2 - 18900*n + 19739):

such that the sequence (cn)n

≥

0 is simply given by

> rec_c := {p0*c(n) + p1*c(n - 1) + p2*c(n - 2) + c(n - 3),
c(0) = 1, c(1) = -161/(2ˆ10*3ˆ5), c(2) = 26605753/(2ˆ23*3ˆ12*5ˆ2)} :

Using the gfun function rectoproc we can convert the recurrent deﬁnition into
a Maple procedure:

pro_c := rectoproc(rec_c, c(n)):

Hence the ﬁrst few terms of the sequence (an)n

≥

0 can be computed easily:

> w := 2ˆ10*3ˆ5*5ˆ4:
> seq(pro_c(n)*pochhammer(3/5, n)*pochhammer(4/5, n)*wˆn, n=0..3);

48300, 7981725900,

1,

−

−

1469166887370000

1. Use eﬀective closure properties of P-recursive sequences.

2. First guess and then prove the recursion.

3. Use the recurrence from 1. and ﬁnd an equivalent one of minimal-order.

4. Guess and prove the diﬀerential equation for the generating function.

Then convert it into a recurrence.

We will now show that all four methods can be easily performed using Maple’s
gfun. We will see that they yield diﬀerent (but correct) recursions/diﬀerential
equations – a fact which might look surprising at ﬁrst glance.

4Recall that (x)n denotes the rising factorial: (x)n := x · (x + 1) · · · (x + n − 1).

13

3.1.1 Eﬀective closure properties

First we will ﬁnd the recursion for (an)n
mented in gfun. We deﬁne the recurrences for the rising factorials:

0 using the closure properties imple-

≥

> rec_ph3 := {(n + 3/5)*c(n) = c(n + 1), c(0) = 1}:
> rec_ph4 := {(n + 4/5)*c(n) = c(n + 1), c(0) = 1}:

Now we compute the recurrences for cn ·
wn:
ﬁnally for an = cn ·

(3/5)n ·
> ‘rec*rec‘(rec_c, rec_ph3, c(n)):

(4/5)n ·

(3/5)n, then for cn ·

(3/5)n ·

(4/5)n and

> ‘rec*rec‘(%, rec_ph4, c(n)):
> rec_a := ‘rec*rec‘(%, c(0) = 1, c(n + 1) = c(n)*w, c(n)):

This gives a proof that the sequence (an)n

≥

0 satisﬁes the recursion

p3(n)an+3 + p2(n)an+2 + p1(n)an+1 + p0(n)an = 0, where
p3(n) = 31(n + 3)(5n + 11),
p2(n) = 60(2592000n4 + 14515200n3 + 29787120n2 + 27559152n + 10644379),
52(5n + 8)(5n + 9)(4500n2 + 8100n + 3539),
p1(n) = 214
53(5n + 8)(5n + 3)(5n + 9)(5n + 4).
p0(n) = 222

36
·
311

·

(5)

·

·

3.1.2 Guessing the recursion

A diﬀerent way to ﬁnd a recurrence relation for an is to guess it ﬁrst and then
prove the guess. We ﬁrst compute 51 terms of the recursion:

> a := [seq(pro_c(n)*pochhammer(3/5,n)*pochhammer(4/5,n)*wˆn,

n = 0..50)]:

Then we use the function listtorec in order to guess a linear relation with
polynomial coeﬃcients:

> rec_a_guess := listtorec(a,u(n))[1]:

We ﬁnd a much smaller recurrence of order 2 (compared to the one proven above
of order 3):

p1(n)un+1 +

p0(n)un = 0, where

p2(n)un+2 +
p2(n) = (5n + 6)(n + 2)(60n + 43),
e
e
p1(n) = 300(216000n3 + 759600n2 + 836940n + 290603)
e
p0(n) = 212
e

52(5n + 4)(5n + 3)(60n + 103).

36

e

·

·

(6)

e

14

n

≤

≤

This recursion is found in a fraction of a second, however is not yet proven.
Because we guessed it using 51 terms, we can only be certain that it gives
50. One can easily check by computing and
correct terms an for 0
1000.
comparing terms that this recurrence also holds true for n
There are several possibilities for proving the guess. Arguably the shortest
one is explained in §3.1.3. However, for pedagogical reasons, we will ﬁrst argue
on the level of diﬀerential operators, since this is exactly the procedure one
would follow if trying to prove equality of two D-ﬁnite functions. First deﬁne
0 as being the unique sequence satisfying equation (6) with initial terms
an)n
(
≥
a1 = a1. Note that in order to guarantee uniqueness, we use
a0 = a0 and
e
0. Now we rigorously compute the diﬀerential
that
e
e
0 using the
equations satisﬁed by the generating functions of (an)n
gfun function rectodiffeq:

p2(n) is non-zero for n

100 or n

0 and (

an)n

≤

≤

≥

e

≥

≥

e

> deq_a := rectodiffeq(rec_a,c(n),y(x)):

> deq_a_guess := rectodiffeq(rec_a_guess,u(n),y(x)):

We ﬁnd diﬀerent diﬀerential equations of order 4 and 3 respectively. Now
we translate both equations to diﬀerential operators using the Maple package
DEtools.

> L_a := de2diffop(deq_a[1],y(x),[Dx,x]):

> L_a_guess := de2diffop(deq_a_guess,y(x),[Dx,x]):

We can compute the LCLM L of the two operators, rewrite it as a diﬀeren-
tial equation and transform it back to a recurrence for the coeﬃcients of the
solutions:

> L := LCLM(L_a, L_a_guess, [Dx,x]):

> deq := diffop2de(L, y(x), [Dx,x]):
> diffeqtorec(deq, y(x), u(n)):

We ﬁnd exactly the same recurrence relation as in equation (5). Notice that the
leading coeﬃcient p3(n) does not vanish for positive n. Therefore, if the initial
terms are prescribed to be (a0, a1, a2), the diﬀerential equation corresponding to
0 anxn. But since L is deﬁned as the
the operator L has the unique solution
LCLM of the operators corresponding to the sequences (an)n
0,
≥
N and
it also annihilates
consequently that our guessed recursion (6) is correct.
e

P
anxn. This proves that an =

≥
an for all n

0 and (

an)n

∈
e

P

e

≥

≥

n

n

0

3.1.3 Minimal-order recursion

With the newest Maple version of 2021 we have a great shortcut thanks to
van Hoeij’s improvement in the package LREtools. We can namely directly

15

algorithmically ﬁnd the minimal-order linear recurrence after obtaining the one
in §3.1.1 by just calling

> LREtools[‘MinimalRecurrence‘](rec_a,u(n)):

We ﬁnd exactly (6). This not only yields another proof of the correctness of the
guessed (and then proven) recurrence, but also proves its minimality. Note that
this method does not rely on guessing.

3.1.4 Guessing the ODE

0 anxn, prove its
Finally, we can also guess the diﬀerential equation for
correctness and transform it to a recursion. This method has the advantage
that we might discover a diﬀerential equation of smaller order than we would
obtain by converting the recurrences above. We simply call the gfun function

P

≥

n

> deq_a_ODEguess := listtodiffeq(a, y(x))[1]:

where a is the list of the ﬁrst 51 terms of the sequence (an)n
0 we computed
in §3.1.2. We ﬁnd a small diﬀerential equation of order 2 (compared to the
diﬀerential equations above deq_a and deq_a_guess of orders 4 and 3).

≥

q2(x)y′′(x) + q1(x)y′(x) + q0(x)y(x) = 0, where

(7)

31)(373248000x2 + 216000x + 1),

q2(x) = 5x(302400x
q1(x) = 1354442342400000x3 + 64571904000x2
q0(x) = 300(902961561600x2

240974784x

−

−
4991).

−

−

61473600x

31,

−

The proof of the correctness of this guess is similar to the proof in §3.1.2. In
this case we actually found a (right) factor of L_a as we can see by computing
the GCRD (L_a_guess2 is the corresponding diﬀerential operator to (7)):

> GCRD(L_a, L_a_guess2, [Dx,x]):

This gives exactly L_a_guess2. Since our solutions to (5) and (7) agree up to
precision 3, they must be equal. Therefore the guess must be correct.
Transforming this diﬀerential equation into a recursion for (an)n

0 yields
yet another recurrence, this time of order 3. This means that we found two
0 and three diﬀerent diﬀerential equations
diﬀerent recurrences describing (an)n
describing the generating function. The orders of these objects are displayed in
Table 1.

≥

≥

3.1.5 The generating function of (an)n

≥

0 is algebraic

In this part we will prove that

Theorem 2. The generating function of the sequence (an)n

≥

0 is algebraic.

16

Order of recurrence Order of ODE

Closure properties (§3.1.1)
Guessing the recurrence (§3.1.2)
Computing the minimal one (§3.1.3)
Guessing the ODE (§3.1.4)

3

2

3

4

3

2

Table 1: Orders of diﬀerent recurrences and ODEs for the sequence (an)n
its generating function.

≥

0 and

Using Maple we can actually solve the diﬀerential equation of order two for
0 anxn we found and proved in §3.1.4. Simply calling

n
P

≥

> dsolve(deq_a_ODEguess[1]):

shows that every solution of (7) is a linear combination of

A1(x) := u1(x)

A2(x) := u2(x)

· 2F1(cid:20)

· 2F1(cid:20)

;

−

1/60 11/60
2/3
19/60 31/60
4/3

;

p1(x)
p2(x) (cid:21)
p1(x)
p2(x) (cid:21)

,

and

where u1(x), u2(x) are explicit algebraic functions and p1(x), p2(x) are known
is the Gaussian hypergeometric function deﬁned
polynomials and 2F1
in (3).

a b
c ; x
i

h

Now we can proceed in two diﬀerent ways. First, a classical work [Sch73]
by Schwarz from 1873, classiﬁes all Gaussian hypergeometric functions that are
algebraic. Applying this classiﬁcation, known as Schwarz’s list, we can convince
ourselves that both 2F1’s above are algebraic.

Lemma 1. The functions

f1(x) := 2F1(cid:20)

−

1/60 11/60
2/3

; x

(cid:21)

and f2(x) := 2F1(cid:20)

19/60 31/60
4/3

; x

(cid:21)

are algebraic.

Another solution which is completely diﬀerent in spirit, but useful also for
more general problems of deciding algebraicity, is to use the “guess and prove”
method explained in §1.2. We can ﬁrst try to guess and then to prove minimal
polynomials for f1(x) and f2(x). This will not only provide a proof for alge-
braicity of the functions, but also give explicit minimal polynomials. In order
to make the computations easier we will actually work with twelfth powers of
f1(x) and f2(x). Moreover, here we only explain the computations for f1(x),
because the exact same code works for f2(x) as well.

First we compute 100 terms of the series expansion for f1(x)12:

> f12 := hypergeom([-1/60, 11/60], [2/3], x)ˆ12:
> ser1 := series(f12,x,100):

17

Then we guess an annihilating polynomial for this series using gfun:

> P := seriestoalgeq(ser1,y(x)):

Z[x, y] of degree 20 in y
After a few seconds, this ﬁnds a polynomial P (x, y)
= 0, therefore there exists only one power
and 4 in x. We note that ∂yP (0, 1)
series solution f (x) to P (x, y) = 0 such that f (0) = 1. Now we will conﬁrm our
guess. First we use the eﬀective property that any algebraic function is D-ﬁnite:

∈

> deq := algeqtodiffeq(P, y(x)):

Here we ﬁnd an inhomogeneous diﬀerential equation, which we convert into a
homogeneous one using gfun’s diffeqtohomdiffeq. Let us call the resulting
equation deqh. It holds that any solution in y(x) to P (x, y) = 0 satisﬁes the dif-
ferential equation deqh. Moreover, we can ﬁnd the diﬀerential equation satisﬁed
by f1(x)12 by simply calling

> deqf12 := holexprtodiffeq(f12,y(x)):

We ﬁnd exactly the same diﬀerential equation as deqh. By uniqueness and after
checking enough terms, we can conclude that P (x, y) indeed annihilates f1(x)12.
Hence, f1(x) is algebraic. Moreover, the irreducible polynomial P (x, y12) is then
clearly the minimal polynomial for f1(x). This concludes the proof of Lemma 1
for the ﬁrst function, while the second one can be done completely analogously.

Coming back to the generating function

0 anxn, Lemma 1 implies that
both A1(x) and A2(x) are algebraic. Then any linear combination of them must
be an algebraic function as well. This proves Theorem 2.

P

≥

n

3.2 Monotonicity of Iso

Our second example originates in biology, more speciﬁcally in the so-called Can-
ham model which predicts the shape of biomembranes such as blood cells [Can70].
Roughly speaking, the model asks to minimize the Willmore energy

W (S) =

H 2dA,

ZS

over orientable closed surfaces S with prescribed genus, area and volume. The
existence of a solution to Canham’s model was investigated most notably by
Schygulla [Sch12] and Keller, Mondino, Rivière [KMR14]. We are rather in-
terested in the uniqueness of the solution, studied by Seifert [Sei97], Chen et
al. [CYB+21] and most recently in the article by Yu and Chen [YC22].

Yu and Chen observed that the solution to this model is unique in the

genus-one case if a certain function, called Iso(z), is strictly increasing for z
[0, √2

1). One way [YC22, §4.1] to deﬁne Iso(z) is

∈

−

Iso(z) := 3

23/4π−

1/2

·

¯V (z2)
¯A3/2(z2)

,

·

(8)

18

6
where ¯A(z) =

0 anzn

Q[[z]] and ¯V (z) =

∈

0 vnzn

n

≥

∈

Q[[z]] are given by

≥

n
P
¯A(z) =

P

2π

2π

Z
0
2π

1

1
√2π2 Z
0
1
√2π2 Z

0 Z
0

Z
0

√2 + sin(v)
Q(u, v, 1 ; √z)2 dudv, and
r√2 + r2 sin(v)
Q(u, v, r ; √z)3 dudvdr,

2π

¯V (z) =

where

Q(u, v, r ; z) = 1 + 2(√2 + r sin(v)) cos(u)z + (2 + r2 + 2√2r sin(v))z2.

Less than one year later, Iso(z) was proven [MM20] to be increasing:

Theorem 3. The function Iso(z) is strictly increasing on [0, √2

1).

−

Let us brieﬂy explain the ideas that led to the proof of this theorem. Using
the paradigm of creative telescoping, Yu and Chen found and proved linear
recurrences of order 3 with polynomial coeﬃcients of degree 4 for the sequences
0. We refer to Proposition 4.1 in [YC22] for the explicit
(an)n
formulas. The same authors observed that Iso(z) is increasing if ¯D(z)
0 on
z

0 and (vn)n

1), where

[0, √2

≥

≥

≥

∈

−

¯D(z) := 2 ¯V ′(z) ¯A(z)

¯V (z) ¯A′(z).

−

n

Clearly, the function ¯D(z) =
0 dnzn is D-ﬁnite, hence the sequence (dn)n
0
≥
0 for all n.
is P-recursive. The positivity of the function obviously follows if dn ≥
This is the central conjecture of the work by Yu and Chen and the main theorem
in [MM20] by Melczer and Mezzarobba. The latter authors used rigorous and
eﬀective analysis of the asymptotics of (dn)n
0 to show the positivity of this
sequence and consequently settle Theorem 3.

P

≥

≥

Another proof of Theorem 3, which is completely diﬀerent in spirit, was re-
cently proposed by Bostan and the author in [BY22]. Even though one strength
of the ﬁnal version of this proof is that it is completely elementary and may
be veriﬁed without a computer, one should admit that ﬁnding this solution re-
quired algorithms from gfun and Maple in general. Exploring the discovery of
this proof of monotonicity of Iso(z) will be our second example.

The ﬁrst natural idea to show that Iso(z) is strictly increasing is to ﬁnd an
explicit closed formula for it. Note that the function is not D-ﬁnite, but given
as the ratio of two holonomic functions. Therefore we will try to ﬁnd explicit
formulas for the numerator and denominator separately.

Converting the recurrence relations for (an)n

0 into diﬀerential
equations for ¯A(z) and ¯V (z) using gfun’s rectodiffeq, we ﬁnd two linear
diﬀerential equations of order 4 and degree 5. First, it seems that working with
these diﬀerential operators is hopeless, however it turns out that they are not
minimal for our functions of interest.
In fact, we can easily guess and then
prove the much smaller minimal diﬀerential equations for ¯A(z) and ¯V (z): we

0 and (vn)n

≥

≥

19

ﬁrst compute two lists of 100 terms of (an)n
lv. Then in less than one second we can execute

≥

0 and (vn)n

0, call them la and

≥

> deqA := listtodiffeq(la,y(x));

> deqV := listtodiffeq(lv,y(x));

This ﬁnds two second-order diﬀerential equations for ¯A(z) and ¯V (z). Similarly
to the example in §3.1.4, it is not diﬃcult to prove the correctness of both
guesses by computing the GCRD of the known operators with the new ones and
arguing by uniqueness of solutions.

Now it turns out that we can actually solve the new smaller diﬀerential

equations using Maple’s dsolve. We ﬁnd that

and

¯A(z) =

¯V (z) =

(1

(1

4(z + 1)
6z + z2)3/2 · 2F1(cid:20)

−

2

6z + z2)3/2 · 2F1(cid:20)

−

−

−

1
2
1

3
2
1

3
2

;

1

−

4z

−
6z + z2 (cid:21)

,

5
2

;

1

4z

.
−
6z + z2 (cid:21)

−

(9)

(10)

As soon as these formulas for ¯A(z) and ¯V (z) are discovered, they can be veriﬁed
“by hand” without sophisticated algorithms. In other words, [BY22, Thm. 1]
has a human proof, but admittedly it had a computer-assisted discovery.

¯V (z2)

The example, however, does not end here: we still need to prove that Iso(z) =
3/2(z2) is monotonic, and here we will again use “guess-
23/4π−
3
and-prove” and gfun. After a few simple manipulations [BY22, p. 3] of the
deﬁnition of Iso(z), equations (9) and (10), and Gauss’ summation theorem,
one ﬁnds

¯A−

1/2

·

·

·

Iso(z) =

3
25/4

·

w1/2(x)−

3/2

w3/2(x),

·

√π ·

z2)2 and wa(x) := 2F1

where x = 4z2/(1
a. The monotonic-
ity of Iso follows if we can show that wa is decreasing on [0, 1] for 0 < a < 1 and
increasing on this interval if a > 1. After calculating the derivative of wa(x),
clearing the denominator and normalizing for unit constant coeﬃcient, we ﬁnd

(1+x)−

; x
(cid:3)

−

−

−

(cid:2)

1

·

a

a

w′a(x)
a(a

1) ·

−

(1 + x)a+1 = 1 +

1
2

(a

−

3)ax +

1
12

(a

−

5)(a

−

1)(a

−

2)ax2 + O(x3).

The denominator above is a(a
1) and therefore conveniently takes care of the
case distinction in 0 < a < 1 and a > 1. Now we just need to argue that
w′a(x)
1)) is positive on [0, 1]. This would be obvious if all
Taylor coeﬃcients of the function were positive. Unfortunately, this does not
hold. However, after a few tries we ﬁnd that

(x + 1)a+1/(a(a

−

−

·

h(x) :=

w′a(x)
a(a

1) ·

−

(1 + x)a+1
(1

x)2a = 1 +

−

1
2

(a + 1)ax +

1
12

(a + 2)(a + 1)2ax2 + O(x3)

20

seems to have positive Taylor coeﬃcients. If we calculate the series expansion
of h(x) to degree 10 and use seriestorec, we can guess an easy ﬁrst-order
recurrence relation for the coeﬃcients of h(x):

(n + 2)(n + 1)un+1 −

(a + n + 1)(a + n)un = 0.

Together with the initial term u0 = 1 this (guessed) recurrence implies that

w′a(x)
a(a

1) ·

−

(1 + x)a+1
(1

x)2a = 2F1(cid:20)

−

a a + 1
2

.

; x

(cid:21)

(11)

The right-hand side obviously has positive Taylor coeﬃcients, hence the left-
hand side is also positive on [0, 1). Therefore, modulo the proof of equation (11),
this proves Theorem 3.

A “human” proof of identity (11) is the content of Lemma 1 in [BY22] which
relies on Gauss’ contiguous relations. Here we will present another algorithmic
proof, which exploits the fact that both sides of the identity are D-ﬁnite.

For the left-hand side of (11) (stored as h in Maple) we ﬁnd a diﬀerential

equation and the corresponding operator by simply calling

> deq := holexprtodiffeq(h,y(x)):
> L := de2diffop(deq[1],y(x),[Dx,x]):

This gives a diﬀerential equation of order 4. The right-hand side of (11) satisﬁes
the second-order diﬀerential equation

a(a + 1)y(x) + 2(ax + x

1)y′(x) + x(x

1)y′′(x) = 0,

−

−

and we will call the corresponding operator L_guess. The output of

> GCRD(L,L_guess,[Dx,x]);

is exactly L_guess. Therefore, L_guess (right-)divides L. Moreover, since the
leading term of the recursion corresponding to deq is (n+5)(n+3)(n+4)2(a+3),
the equation Ly = 0 has a unique solution if the ﬁrst four Taylor coeﬃcients of
y are prescribed. This is easily checked and hence (11) is proved.

The two examples demonstrate several things at the same time. First, we
saw that guessing a minimal-order operator is quite simple with gfun and that
the proof is always an easy argument on the level of diﬀerential operators.
Moreover, both examples show in diﬀerent ways that having explicit solutions
in terms of Gaussian hypergeometric functions can be very useful in practice.
The example §3.1 also demonstrates the “guess and prove” strategy for proving
algebraicity of a generating function. In the second example §3.2 we saw that
guessing can be used not only to predict identities like (11) but also to simplify
expressions like h(x). Finally, the second application also demonstrates that

21

both gfun and DEtools work if parameters are involved as well.

Acknowledgments: The author is deeply indebted to Alin Bostan who was not
only a great source of motivation for this article, but is also a dedicated teacher
and enthusiast of most techniques and ideas explained in it. Moreover, the
author is also grateful to Bruno Salvy for the clariﬁcations of several questions
regarding the new version of gfun. We also wish to thank Alin Bostan, Giancarlo
Castellano and the anonymous referees for careful reading of the manuscript and
constructive comments. Finally, we thank Robert Corless for pointing out some
mistakes in the almost ﬁnal version of the manuscript.

This work was ﬁnancially supported by the DOC fellowship of the ÖAW
(26101), the WTZ collaboration project of the OeAD (FR 09/2021) and the
DeRerumNatura project ANR-19-CE40-0018.

References

[Apé79]

[AS64]

R. Apéry.
1979.

Irrationalité de ζ(2) et ζ(3). Astérisque, (61):11–13,

M. Abramowitz and I. A. Stegun. Handbook of Mathemati-
cal Functions with Formulas, Graphs, and Mathematical Tables.
Dover, New York, ninth dover printing, tenth gpo printing edition,
1964.

[BCDVW20] M. Barkatou, T. Cluzeau, L. Di Vizio, and J.-A. Weil. Reduced
forms of linear diﬀerential systems and the intrinsic Galois-Lie
algebra of Katz. SIGMA Symmetry Integrability Geom. Methods
Appl., 16:Paper No. 054, 13, 2020.

[BDY18]

[BK10]

[BL97]

[BLS17]

[BMP00]

M. Bertola, B. Dubrovin, and D. Yang. Simple Lie algebras and
Int. Math. Res. Not. IMRN, (5):1368–1410,
topological ODEs.
2018.

A. Bostan and M. Kauers. The complete generating function for
Gessel walks is algebraic. Proc. Amer. Math. Soc., 138(9):3063–
3078, 2010. With an appendix by Mark van Hoeij.

B. Beckermann and G. Labahn. Recursiveness in matrix rational
interpolation problems. volume 77, pages 5–34. 1997. ROLLS
Symposium (Leipzig, 1996).

A. Bostan, P. Lairez, and B. Salvy. Multiple binomial sums. J.
Symbolic Comput., 80(part 2):351–386, 2017.

M. Bousquet-Mélou and M. Petkovšek. Linear recurrences with
constant coeﬃcients: the multivariate case. volume 225, pages
51–75. 2000. Formal power series and algebraic combinatorics
(Toronto, ON, 1998).

22

[BMP03]

M. Bousquet-Mélou and M. Petkovšek. Walks conﬁned in
a quadrant are not always D-Finite. Theor. Comput. Sci.,
307(2):257–276, October 2003.

[Bos17]

[Bos21]

[BRS21]

[BY22]

[Can70]

[CC86]

[CC90]

[Chy14]

[CK17]

[Com64]

[CYB+21]

A. Bostan. Computer algebra for lattice path combinatorics. HDR
(accreditation to supervise research), Univ. Paris 13, 2017. 79
pages.

A. Bostan. Computer algebra in the service of enumerative com-
binatorics. In ISSAC ’21—Proceedings of the 2021 International
Symposium on Symbolic and Algebraic Computation, pages 1–8.
ACM, New York, [2021] ©2021.

A. Bostan, T. Rivoal, and B. Salvy. Explicit degree bounds for
right factors of linear diﬀerential operators. Bull. Lond. Math.
Soc., 53(1):53–62, 2021.

A. Bostan and S. Yurkevich. A hypergeometric proof that Iso is
bijective. Proc. Amer. Math. Soc., 150(5):2131–2136, 2022.

P. Canham. The minimum energy of bending as a possible expla-
nation of the biconcave shape of the human red blood cell. Journal
of Theoretical Biology, 26(1):61–81, 1970.

D. V. Chudnovsky and G. V. Chudnovsky. On expansion of al-
gebraic functions in power and Puiseux series. I. J. Complexity,
2(4):271–294, 1986.

D. V. Chudnovsky and G. V. Chudnovsky. Computer algebra
in the service of mathematical physics and number theory.
In
Computers in mathematics (Stanford, CA, 1986), volume 125 of
Lecture Notes in Pure and Appl. Math., pages 109–232. Dekker,
New York, 1990.

F. Chyzak. The ABC of Creative Telescoping: Algorithms,
Bounds, Complexity. HDR (accreditation to supervise research),
University Paris-Sud 11, April 2014. 64 pages.

S. Chen and M. Kauers. Some open problems related to creative
telescoping. J. Syst. Sci. Complex., 30(1):154–172, 2017.

L. Comtet. Calcul pratique des coeﬃcients de Taylor d’une fonc-
tion algébrique. Enseign. Math. (2), 10:267–270, 1964.

J. Chen, T. Yu, P. Brogan, R. Kusner, Y. Yang, and A. Zigerelli.
Numerical methods for biomembranes: conforming subdivision
methods versus non-conforming PL methods. Math. Comp.,
90(328):471–516, 2021.

23

[Gra00]

[IvH15]

[Jun31]

[KMR14]

[Kra99]

[KvH13]

[Mez10]

[MM20]

[Ore32]

[Poo60]

[Pó78]

J. J. Gray. Linear diﬀerential equations and group theory from
Riemann to Poincaré. Birkhäuser Boston, Inc., Boston, MA, sec-
ond edition, 2000.

E. Imamoglu and M. van Hoeij. Computing Hypergeometric So-
lutions of Second Order Linear Diﬀerential Equations Using Quo-
tients of Formal Solutions. In Proceedings of the 2015 ACM on In-
ternational Symposium on Symbolic and Algebraic Computation,
ISSAC ’15, page 235–242, New York, NY, USA, 2015. Association
for Computing Machinery.

R. Jungen. Sur les séries de Taylor n’ayant que des singularités
algébrico-logarithmiques sur leur cercle de convergence. Comment.
Math. Helv., 3(1):266–306, 1931.

L. G. A. Keller, A. Mondino, and T. Rivière. Embedded surfaces
of arbitrary genus minimizing the Willmore energy under isoperi-
metric constraint. Arch. Ration. Mech. Anal., 212(2):645–682,
2014.

C. Krattenthaler. Advanced determinant calculus. volume 42,
pages Art. B42q, 67. 1999. The Andrews Festschrift (Maratea,
1998).

V. J. Kunwar and M. van Hoeij. Second order diﬀerential equa-
tions with hypergeometric solutions of degree three.
In ISSAC
2013—Proceedings of the 38th International Symposium on Sym-
bolic and Algebraic Computation, pages 235–242. ACM, New York,
2013.

M. Mezzarobba. NumGfun: a package for numerical and analytic
computation and D-ﬁnite functions. In ISSAC 2010—Proceedings
of the 2010 International Symposium on Symbolic and Algebraic
Computation, pages 139–146. ACM, New York, 2010.

S. Melczer and M. Mezzarobba. Sequence Positivity Through Nu-
meric Analytic Continuation: Uniqueness of the Canham Model
for Biomembranes, 2020. Technical Report arXiv:2011.08155
[math.CO].

O. Ore. Formale Theorie der linearen Diﬀerentialgleichungen. (Er-
ster Teil). J. Reine Angew. Math., 167:221–234, 1932.

E. G. C. Poole. Introduction to the theory of linear diﬀerential
equations. Dover Publications, Inc., New York, 1960.

G. Pólya. Guessing and Proving. The Two-Year College Mathe-
matics Journal, 9(1):21–27, 1978.

24

[Sal05]

[Sal19]

[Sch73]

[Sch12]

[Sei97]

[ST20]

[Sta80]

[SZ94]

[vdH99]

[vdH01]

[vdH07]

[vdP79]

B. Salvy. D-ﬁniteness: algorithms and applications, 2005. Invited
talk in Proceedings of ISSAC’05.

B. Salvy. Linear diﬀerential equations as a data structure. Found.
Comput. Math., 19(5):1071–1112, 2019.

H. A. Schwarz. Über diejenigen Fälle, in welchen die Gaußische
hypergeometrische Reihe einer algebraische Funktion ihres vierten
Elementes darstellt. J. Reine Angew. Math., 75:292–335, 1873.

J. Schygulla. Willmore minimizers with prescribed isoperimetric
ratio. Arch. Ration. Mech. Anal., 203(3):901–941, 2012.

U. Seifert. Conﬁgurations of ﬂuid membranes and vesicles. Ad-
vances in Physics, 46(1):13–137, 1997.

N. J. A. Sloane and The OEIS Foundation Inc. The on-line ency-
clopedia of integer sequences. http://oeis.org/, 2020.

R. P. Stanley. Diﬀerentiably ﬁnite power series. European J. Com-
bin., 1(2):175–188, 1980.

B. Salvy and P. Zimmermann. GFUN: A Maple Package for
the Manipulation of Generating and Holonomic Functions in One
Variable. ACM Trans. Math. Softw., 20(2):163–177, June 1994.

J. van der Hoeven. Fast evaluation of holonomic functions. The-
oret. Comput. Sci., 210(1):199–215, 1999.

J. van der Hoeven. Fast evaluation of holonomic functions near
and in regular singularities. J. Symbolic Comput., 31(6):717–743,
2001.

J. van der Hoeven. Eﬃcient accelero-summation of holonomic
functions. J. Symbolic Comput., 42(4):389–428, 2007.

A. van der Poorten. A proof that Euler missed. . .Apéry’s proof
of the irrationality of ζ(3). Math. Intelligencer, 1(4):195–203,
1978/79. An informal report.

[vdPS03]

M. van der Put and M. F. Singer. Galois theory of linear dif-
ferential equations, volume 328 of Grundlehren der mathema-
tischen Wissenschaften [Fundamental Principles of Mathematical
Sciences]. Springer-Verlag, Berlin, 2003.

[vHV15]

M. van Hoeij and R. Vid¯unas. Belyi functions for hyperbolic
hypergeometric-to-Heun transformations. J. Algebra, 441:609–
659, 2015.

25

[YC22]

[Zag18]

T. Yu and J. Chen. Uniqueness of Cliﬀord torus with prescribed
isoperimetric ratio. Proc. Amer. Math. Soc., 150(4):1749–1765,
2022.

D. Zagier. The arithmetic and topology of diﬀerential equations.
In European Congress of Mathematics, pages 717–776. Eur. Math.
Soc., Zürich, 2018.

[Zei91]

D. Zeilberger. The method of creative telescoping. J. Symbolic
Comput., 11(3):195–204, 1991.

26

