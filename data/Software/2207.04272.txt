Efﬁcient Backward Reachability Using the
Minkowski Difference of Constrained Zonotopes

Liren Yang

Hang Zhang

Jean-Baptiste Jeannin

Necmiye Ozay

2
2
0
2

g
u
A
6
2

]

Y
S
.
s
s
e
e
[

4
v
2
7
2
4
0
.
7
0
2
2
:
v
i
X
r
a

is

essential

Abstract—Backward reachability analysis

to
synthesizing controllers that ensure the correctness of closed-
loop systems. This paper is concerned with developing scalable
algorithms that under-approximate the backward reachable
sets, for discrete-time uncertain linear and nonlinear systems.
Our algorithm sequentially linearizes the dynamics, and uses
constrained zonotopes for set representation and computation.
The main technical ingredient of our algorithm is an efﬁcient
way to under-approximate the Minkowski difference between
a constrained zonotopic minuend and a zonotopic subtrahend,
which consists of all possible values of the uncertainties and
the linearization error. This Minkowski difference needs to be
represented as a constrained zonotope to enable subsequent
to ﬁnd
computation, but, as we
is
show,
a polynomial-size representation for it
time.
Our algorithm ﬁnds a polynomial-size under-approximation in
polynomial time. We further analyze the conservatism of this
under-approximation technique, and show that it is exact under
some conditions. Based on the developed Minkowski difference
technique, we detail two backward reachable set computation
algorithms to control the linearization error and incorporate
nonconvex state constraints. Several examples illustrate the
effectiveness of our algorithms.

impossible
in polynomial

it

I.

INTRODUCTION
1) Backward Reachability Analysis: Backward reachability
analysis is concerned with ﬁnding a set of states (called
the backward reachable set, BRS for short), from where a
proper control strategy can steer the system’s trajectories into
a prescribed target region in ﬁnite time. The computation
to many control synthesis problems
of BRSs is central
with reachability [1],
[4] or even more
complex temporal logic requirements [5], and can be used
to seek critical
test cases for closed-loop systems with
complex controllers in the loop [6], [7]. Whenever the exact
computation is hard, an under-approximation can still be

[2], safety [3],

This article will be presented at the International Conference on Embedded
Software (EMSOFT) 2022 and will appear as part of the ESWEEK-TCAD
special issue. This work is supported by the NSF grants ECCS-1553873 and
CCF-1918123, and the ONR grant N000141812501.

L. Yang is with the School of Artiﬁcial Intelligence and Automation,
Huazhong University of Science and Technology, Wuhan 430074, China. (e-
mail: lirenyang@hust.edu.cn)

is with

H. Zhang

of Mechanical Engineering,
University of Wisconsin-Madison, Madison, WI 53706, USA (e-mail:
hang.zhang@wisc.edu).

the Department

J. B.
University
jeannin@umich.edu).

Jeannin is with the Department of Aerospace Engineering,
48105, USA (e-mail:

of Michigan, Ann Arbor, MI

N. Ozay is with the Department of Electrical Engineering and Computer
Science, University of Michigan, Ann Arbor, MI 48105, USA (e-mail:
necmiye@umich.edu).

used to deﬁne a conservative strategy that accomplishes the
reachability task. For systems that exhibit modeling error or
are affected by environmental uncertainties, the target region
should be reached in a guaranteed manner, regardless of these
uncertainties. This leads to a conservative analysis and hence
smaller BRSs. For linear systems with additive disturbances,
this amounts to a Minkowski difference step in the sequential
computation of BRSs (e.g., see [1]). For nonlinear systems,
this is achieved by shrinking the target set [8], [9], which
can be implemented by Minkowski subtracting a set
that
over-approximates the impact of the linearization error and
in the forward
disturbances. This shrinking step is absent
reachability analysis, for which there is a sizable literature
focusing on over-approximation (see [10] and the references
therein). However,
if one wants to under-approximate the
BRSs under uncertain inputs by employing those techniques
developed for the forward computation (e.g., [11], [12]), the
shrinking step is necessary.

2) Minkowski Difference: Since the late 60s, a simple
approach using support functions is known to compute the
exact Minkowski difference (in halfspace representation, H-
Rep for short) between a polyhedral minuend (in H-Rep)
and a compact subtrahend [13]. For a thorough discussion
on this subject, see [14]. For high-dimensional polyhedra,
unfortunately, H-Reps are not suitable for other operations
such as afﬁne transformation and Minkowski addition. This is
because an H-Rep’s complexity may grow exponentially after
these operations [15]. For example, the off-the-shelf tool MPT3
[16] may return an error when computing the Minkowski
addition between two 4-D polytopes. For applications like
reachability analysis that extensively involve such operations,
algorithms can be made more scalable at the cost of generality,
by considering a special class of polyhedra called zonotopes. A
zonotope can be expressed by its generator representation (G-
Rep for short), which is more suitable for afﬁne transformation
and Minkowski addition. The Minkowski difference, however,
is not as easy to compute when the minuend is in G-Rep.
Compared to other operations, the problem of Minkowski-
from a zonotopic minuend (in G-Rep)
subtracting a set
receives less attention, and is ﬁrst studied in [17], where
the subtrahend is also assumed to be a zonotope (in G-
Rep). The exact Minkowski difference is not necessarily a
zonotope, but a zonotopic under-approximation can still be
found efﬁciently [18], [19] using the encoding techniques
developed in [20]. Based on these developments, a scalable
backward reachability algorithm is obtained for linear systems
with additive disturbances in [19].

3) Constrained

computational

Zonotopes:
as

advantages

To

enjoy

zonotopes

the

same
(and their G-

 
 
 
 
 
 
Reps) while achieving the generality of polyhedra, a new
set representation called constrained generator representation
(CG-Rep for short) is proposed in [21]. A set expressible
by CG-Rep is called a constrained zonotope. Not only can
afﬁne transformation and Minkowski addition of constrained
zonotopes be done easily via CG-Rep manipulation, so
can intersection, under which zonotopes are not even
closed. Moreover, all polytopes (i.e., bounded polyhedra) are
expressible by CG-Rep. Therefore, constrained zonotopes (in
CG-Reps) serve as an efﬁcient tool for set-based control and
estimation. They are more general than zonotopes and are
particularly suitable to deal with state constraints. However,
the Minkowski difference operation, which is necessary for
BRS computation, is difﬁcult for constrained zonotopes. In
fact, we show that no polynomial-time algorithm can ﬁnd
a polynomial-size CG-Rep of
the Minkowski difference
between a constrained zonotopic minuend (in CG-Rep) and a
zontopic subtrahend (in G-Rep), unless P = NP. Neither there
is, to the best of our knowledge, an efﬁcient way to compute
a polynomial-size under-approximation. This prohibits the
use of constrained zonotopes for BRS computation under
uncertainties because a compact representation of the BRS is
essential for its efﬁcient end uses (e.g., checking if a state
belongs to the BRS and deriving the control law accordingly).

algorithms

4) Contributions:

to develop scalable

In this paper, we use

constrained
zonotopes
that under-
approximate the BRSs for discrete-time nonlinear systems.
Our approach is based on sequential linearization, and the
linearization error is incorporated with a Minkowski difference
step. Our technical contributions are summarized as follows.
i) We propose an efﬁcient way to under-approximate
the Minkowski difference between a constrained zonotopic
minuend (in CG-Rep) and a zonotopic subtrahend (in G-Rep).
Our approach is optimization-based. We show that a naïve use
of the encoding from [20] leads to a bilinear program, but by
extending the two-step approach proposed in [19], an under-
approximation can be found via a linear program. The size of
this linear program is polynomial in that of the minuend’s and
the subtrahend’s representations. Our approach hence gives a
polynomial-sized under-approximation in polynomial time.

ii) We further analyze the conservatism of this extended
two-step approach. In particular, we show that any constrained
zonotopic minuend has a “rich” enough CG-Rep, for which
our two-step approach is exact. While it may be impractical
to always assume such a rich CG-Rep, this result opens the
direction of incrementally enriching the given CG-Rep of the
minuend to improve the two-step approach’s accuracy.

iii) Using the developed Minkowski difference technique,
we propose two methods: scaling method and splitting method
for BRS computation. The scaling method can compute BRSs
with convex constraints for a longer time horizon than the
splitting method. In contrast, the splitting method can give
larger BRSs than those obtained by scaling method for a
short time horizon but have difﬁculties in computing BRSs
for a long time horizon. However, the splitting method can
deal with nonconvex constraints and expand the BRSs into
different homotopy classes. Experiments show the advantages

of these constrained-zonotope-based methods: they give less
conservative BRSs under-approximation than those using
zonotopes [19], especially in the presence of state constraints,
and scales better than the Hamilton-Jacobi (HJB) method [22].

II. NOTATIONS & PRELIMINARIES
We use 1 (0, resp.) to represent a matrix of proper size
whose entries are all ones (zeros, resp.). We will not make the
size of such a matrix explicit unless it is not clear from context.
Let M be a matrix and M 1 (M 2, resp.) be another matrix
of the same height (width, resp.) as M , [M , M 1] ([M ; M 2],
resp.) denotes the matrix obtained by concatenating M and
M 1 horizontally (concatenating M and M 2 vertically, resp.).
Further, N (M ) is the null space of M and |M | is the matrix
that consists of the element-wise absolute values of M .

Let a, a ∈ Rn such that a ≤ a (≤ is element-wise), a
hyper-box [[a, a]] is the set {x ∈ Rn | a ≤ x ≤ a}. Let
G ∈ Rn×N and c ∈ Rn, a zonotope Z = (cid:104)G, c(cid:105) is deﬁned
to be the set (cid:8)Gθ + c | θ ∈ [[−1, 1]]}. The tuple (cid:104)G, c(cid:105)
is called the generator-representation (or G-Rep) of Z. The
matrix G is the generator matrix and c is the center of Z.
A set CZ is a constrained zonotope if it can be expressed as
{Gθ + c | θ ∈ [[−1, 1]], Aθ = b}, where A ∈ Rm×N and
b ∈ Rm. The tuple (cid:104)G, c, A, b(cid:105) is a constrained generator
representation (or CG-Rep) of CZ, A is the constraint matrix
and b is the constraint vector of this CG-Rep. A zonotope
(cid:104)G, c(cid:105) is a constrained zonotope whose CG-Rep has the same
G, c and empty A, b. Further, let H ∈ R(cid:96)×N and a ∈ R(cid:96), a
set is an AH-polytope if it can be expressed as {Gθ+c | Hθ ≤
a}. Zonotopes and constrained zonotopes are AH-polytopes,
i.e., (cid:104)G, c(cid:105) = {Gθ + c | [I; −I]θ ≤ 1} and (cid:104)G, c, A, b(cid:105) =
{Gθ + c | [A; −A; I; −I]θ ≤ [b; −b; 1]}.

Let S, R ⊆ Rn be two sets, x ∈ Rn be a vector and
M ∈ Rm×n be a matrix, we deﬁne M S := {M s | s ∈ S}
and x + S := {x + s | s ∈ S}. Further, S ⊕ R := {s + r | s ∈
S, r ∈ R} is the Minkowski sum of S and R, and S (cid:9) R :=
{x ∈ Rn | x + R ⊆ S} is the Minkowski difference between
S and R. Let P ⊆ Rp, S × P := {[s; p] | s ∈ S, p ∈ P} is
the product of S and P.

The following set operations can be performed by CG-Rep

manipulation for constrained zonotopes.
Lemma 1. [From [18], [21]] Let CZ = (cid:104)G, c, A, b(cid:105) ⊆ Rn,
CZ i = (cid:104)Gi, ci, Ai, bi(cid:105) ⊆ Rp for i ∈ {1, 2} be constrained
zonotopes, M ∈ Rm×n be a matrix and H = {x ∈ Rn |
h(cid:62)x ≤ a} be a halfspace, then

i) M CZ = (cid:104)M G, M c, A, b(cid:105),
ii) CZ 1⊕CZ 2 = (cid:104)[G1, G2], c1+c2, diag(A1, A2), [b1; b2](cid:105),
iii) CZ 1 ∩ CZ 2 = (cid:104)[G1, 0], c1, [diag(A1, A2); [G1, −G2]],

[b1; b2; c2 − c1](cid:105),

iv) if CZ ∩H (cid:54)= ∅, then CZ ∩H = (cid:104)[G, 0], c, [A, 0; h(cid:62)G, d

[b; a − h(cid:62)c − d

2 ](cid:105) where d = a − h(cid:62)c + (cid:107)h(cid:62)G(cid:107)1,

v) CZ × CZ 1 = (cid:104)diag(G, G1), [c; c1], diag(A, A1), [b; b1](cid:105).

2 ],

The following lemma follows from the deﬁnitions.

Lemma 2. Let A, B, C ⊆ RN and M ∈ Rn×N

i) M (A ⊕ B) = M A ⊕ M B.
ii) M (A (cid:9) B) ⊆ M A (cid:9) M B.

iii) (A (cid:9) C) ∪ (B (cid:9) C) ⊆ (A ∪ B) (cid:9) C.
iv) A (cid:9) B ⊕ C ⊆ A ⊕ C (cid:9) B.
For ii), iii) and iv), equality does not hold in general.

Lemma 3. [[20], Theorem 1] Let Si := ci + Gi{θi | H iθi ≤
ai} ⊆ Rn for i ∈ {1, 2} be two AH-polytopes. Suppose that
S1 has nonempty interior. Then a sufﬁcient condition for S1 ⊆
S2 is that there exist matrices Γ, β, Λ of proper sizes such that

G1 = G2Γ, c2 − c1 = G2β, ΛH 1 = H 2Γ,
Λa1 ≤ a2 + H 2β, Λ ≥ 0.

(1)

The condition in Eq. (1) is known as the encoding of
AH-polytope containment. The numbers of variables and
constraints in Eq. (1) are polynomial in the sizes of ci, Gi,
H i, ai. Since the zonotope containment problem, which is a
special instance of the AH-polytope containment problem, is
known to be co-NP hard [23], the linear condition in Eq. (1)
cannot possibly be necessary in general unless P = NP.
Lemma 4. [[14], Theorem 2.3] Let S ⊆ Rn be compact, then
{x | Hx ≤ a} (cid:9) S = {x | Hx ≤ a − a}, where ai =
max h(cid:62)
is the ith row of
H.

i S is the ith element of a and h(cid:62)
i

III. PROBLEM DESCRIPTION
Consider the following discrete-time nonlinear system:

xt+1 = f (xt, ut) + wt,
(2)
where x ∈ Rn is the state, u ∈ U ⊆ Rq is the control input,
and w ∈ W ⊆ Rn is the additive disturbance input. Given a
set Xsafe of safe states and a set X0 of target states, the kth
backward reachable set Xk is deﬁned recursively as follows:

Xk = P re(Xk−1) :=

k = 1, 2, 3 . . .

(cid:26) x ∈
Xsafe

(cid:12)
(cid:12)
(cid:12)

∃u ∈ U : ∀w ∈ W :
f (x, u) + w ∈ Xk−1

(cid:27)

,

(3)

Our goal is to compute X k, represented by constrained

zonotopes, s.t. X k ⊆ Xk under the following assumptions.
Assumption 1. The sets X0, U are constrained zonotopes (CG-
Reps given). The disturbance set W is a zonotope (G-Rep
given). The safe set Xsafe = (cid:83)
p{x | H px ≤ ap} is the union
of ﬁnitely many polytopes in their H-Reps.

Our solution approach uses sequential linearization. If the
system is linear, i.e., f (x, u) = Ax + Bu for some invertible
matrix A 1, then

Xk = Xsafe ∩ A−1(Xk−1 (cid:9) W ⊕ −BU).

(4)

For nonlinear systems, in each step, we linearize f at some
[x∗; u∗] and compute a under-approximation X k of Xk by
applying Eq. (4) to the previously obtained X k−1 and the linear
dynamics. Particularly, to ensure that X k−1 can be reached
from X k under the nonlinear dynamics, we conservatively
approximate the linearization error by an additive term that

1The matrix A here is not to be confused with the constraint matrix in the

CG-Rep of a constrained zonotope.

takes value from a zonotopic set L, and require X k−1 (cid:9) L to
be reachable from X k under the linear dynamics (i.e., replace
W in Eq. (4) by L ⊕ W).

The main challenge in the above approach is twofold:

C1) To implement Eq.

(4) under Assumption 1, while
the afﬁne transformation,
intersection and Minkowski
addition can be done via CG-Rep manipulation (Lemma
1), there still lacks an efﬁcient way to compute (or to
under-approximate) the Minkowski difference between a
constrained zonotopic minuend Xk−1 and a zonotopic
subtrahend W (or L ⊕ W). Subsequent computations
require this Minkowski difference to be in CG-Rep.
C2) To compute X k, one needs to make a guess of L
that encompasses all possible values of the additive
linearization error over X k, without knowing X k a priori.
is devoted to tackling these two
The rest of
challenges. In Sec. IV, we develop an efﬁcient algorithm for
Minkowski difference under-approximation. We further show
that our algorithm is exact for the problem instances whose
minuend set has sufﬁciently rich CG-Reps (Sec. V). In Sec. VI,
we explore two strategies to tackle challenge C2) and present
two detailed algorithms that combine all ingredients together
for BRS under-approximation.

the paper

IV. UNDER-APPROXIMATING CZ (cid:9) Z

This section is concerned with under-approximating CZ (cid:9)Z,
where CZ = (cid:104)G, c, A, b(cid:105) ⊆ Rn is a constrained zonotope
and Z = (cid:104)G(cid:48), c(cid:48)(cid:105) ⊆ Rn is a zonotope. We will show
that computing a compact CG-rep of the exact Minkowski
difference is hard (Sec. IV-A). Hence we restrict our under-
approximation to be a constrained zonotope CZ d that shares
the same “template” as the minuend CZ,
i.e., CZ d =
(cid:104)G diag(δ), cd, A diag(δ), bd(cid:105) for some δ ∈ [[0, 1]], cd ∈ Rn
and bd ∈ Rm. Under such restrictions, one can enforce
CZ d ⊕ Z ⊆ CZ using the constraints given by Lemma 3
and ﬁnd CZ d by solving an optimization problem. However,
this optimization problem, as will be shown in Sec. IV-B, is
a bilinear program. We refer to the above approach as the
“naïve approach”. To ﬁnd a CZ d more efﬁciently, in Sec.
IV-C, we propose a two-step approach that amounts to solving
a linear program. We further show how to reduce the size of
this linear program and present some results to understand how
conservative our under-approximation is.

A. Complexity Analysis

We show that, given the CG-Reps of CZ and Z, it is
impossible to ﬁnd a polynomial-size CG-Rep of CZ (cid:9) Z in
polynomial time, unless P = NP. This motivates us to ﬁnd an
under-approximation that admits a polynomial-size CG-Rep
computable in polynomial time.

Proposition 1. No algorithm satisﬁes the following two
conditions simultaneously unless P = NP.

a) It ﬁnds (cid:104)G(cid:48)(cid:48), c(cid:48)(cid:48), A(cid:48)(cid:48), b(cid:48)(cid:48)(cid:105) = CZ (cid:9) Z in poly(n, N, N (cid:48))
time, where N (N (cid:48), resp.) is the width of G (G(cid:48), resp.).
b) The widths and heights of matrices G(cid:48)(cid:48), c(cid:48)(cid:48), A(cid:48)(cid:48), b(cid:48)(cid:48) are

poly(n, N, N (cid:48)).

Proof: Assume that an algorithm A satisﬁes conditions a)
and b) simultaneously. Since Z ⊆ CZ iff 0 ∈ CZ (cid:9)Z, whether
Z ⊆ CZ can be determined via the following procedure:

1) ﬁnd (cid:104)G(cid:48)(cid:48), c(cid:48)(cid:48), A(cid:48)(cid:48), b(cid:48)(cid:48)(cid:105) by algorithm A,
2) claim Z ⊆ CZ iff 0 ∈ (cid:104)G(cid:48)(cid:48), c(cid:48)(cid:48), A(cid:48)(cid:48), b(cid:48)(cid:48)(cid:105).

By bullet a), step 1) takes poly(n, N, N (cid:48)) time to run. Further,
step 2) amounts to solving the following linear program:

ﬁnd θ
s.t. G(cid:48)(cid:48)θ + c(cid:48)(cid:48) = 0, A(cid:48)(cid:48)θ = b(cid:48)(cid:48), −1 ≤ θ ≤ 1

(LP)

Let N (cid:48)(cid:48) (m(cid:48)(cid:48), resp.) be the width (height, resp.) of A(cid:48)(cid:48), there
are N (cid:48)(cid:48) variables and 2N (cid:48)(cid:48) +m(cid:48)(cid:48) +n constraints in (LP). These
two numbers are poly(n, N, N (cid:48)) by bullet b). Therefore, the
above two-step procedure takes poly(n, N, N (cid:48)) time to run.
However, it is co-NP hard [23] to decide if Z ⊆ CZ given
the CG-Reps of Z and CZ as the inputs, which consist of
n(N +N (cid:48) +2) reals. Hence the existence of such an algorithm
A that satisﬁes a) and b) implies P = NP.

Since Z ⊆ CZ s by construction, CZ (cid:9) CZ s is an under-
approximation of CZ (cid:9) Z. The signiﬁcance of Step I) is
that, since the variable σ is related to the outer set CZ s, the
encoding of Z ⊆ CZ s by Lemma 3 is linear. Further, since
the generator matrix G and the constraint matrix A of the
minuend CZ are used as “templates” when constructing CZ s,
it follows that CZ (cid:9) CZ s ⊇ CZ d = (cid:104)G diag(1 − σ), c −
cs, A diag(1 − σ), b − bs(cid:105). Hence CZ (cid:9) CZ s can be further
under-approximated via a simple CG-Rep manipulation. The
above two-step approach extends the one in [19] for under-
approximating the Minkowski difference of two zonotopes.

In what follows, we ﬁrst show in details how to implement
Step I) by solving a linear program. We further simplify this
linear program by showing that it is optimal to choose cs = c(cid:48)
and bs = 0 in Step I). Then we prove that CZ (cid:9) CZ s ⊇ CZ d.
As a step to understand the conservatism of our under-
approximation, we will also give a sufﬁcient condition for
CZ (cid:9) CZ s = CZ d to hold.

B. Naïve Approach with Bilinear Constraints

D. Step I: Over-approximating Z by CZ s

With the aforementioned naïve approach, we need to solve

Our goal is to solve

the following optimization problem:

maxδ,cd,bd
s.t.

(cid:107)δ(cid:107)1
CZ d ⊕ Z ⊆ CZ

.

(5)

The objective function (cid:107)δ(cid:107)1 is used as a heuristic to maximize
the set CZ d. To apply Lemma 3, we write CZ as an AH-
polytope, i.e.,

CZ = c + G{θ | [A; −A; I; −I]θ ≤ [b; −b; 1]},

(6)

and write CZ d ⊕ Z either as

or as

cd + c(cid:48) + [G diag(δ), G(cid:48)]{ξ | [A diag(δ), 0;
− A diag(δ), 0; I; −I]ξ ≤ [bd; −bd; 1]},

cd + c(cid:48) + [G, G(cid:48)]{ξ | [A, 0; −A, 0; I; −I]ξ

≤ [bd; −bd; δ; 1; δ; 1]}.

(7)

(8)

Unfortunately, Lemma 3 gives bilinear constraints when
applied to Eqs. (6),(7) or to Eqs. (6),(8). If (7) is used, “H 1” in
(1) depends on the variable δ and the term “ΛH 1" is bilinear;
if (8) is used, “a1” in (1) depends on δ and “Λa1” is bilinear.
The key observation here is that the encoding in Lemma 3
is more favorable (i.e., tends to be linear) if the variables are
related to the outer set. On the contrary, the above encoding
is bilinear because the variable δ is related to the inner set.

C. Two-Step Approach: Overview

minσ,cs,bs

(cid:107)σ(cid:107)1
s.t. Z ⊆ CZ s

,

(9)

where Z = (cid:104)G(cid:48), c(cid:48)(cid:105)
and CZ s = (cid:104)G diag(σ), cs,
A diag(σ), bs(cid:105). In (9), we minimize (cid:107)σ(cid:107)1. This can be seen
as a heuristic to minimize the enclosing constrained zonotope
CZ s. Note that CZ s can be rewritten as cs + GSbs where
Sbs = {σ ∈ [[−σ, σ]] | Aσ = bs}.

The following result shows that, to solve the optimization
problem in (9), one can choose cs = c(cid:48) and bs = 0 without
loss of optimality.

Proposition 2. Let Sbs := {σ ∈ [[−σ, σ]] | Aσ = bs} and Z
be a zonotope centering at c(cid:48). We have

min{(cid:107)σ(cid:107)1 | Z ⊆ c(cid:48) + GS0}

≤ min{(cid:107)σ(cid:107)1 | ∃cs, bs : Z ⊆ cs + GSbs}.

(10)

Proof: We ﬁrst prove that Z ⊆ cs + G Sbs implies Z ⊆
c(cid:48) + GS0. Note that Z is symmetric w.r.t its center c(cid:48), i.e.,
−Z + c(cid:48) = Z − c(cid:48). By Z ⊆ cs + G Sbs, we have

Z − c(cid:48)

⊆ (cs − c(cid:48)) + G Sbs ∩ −(cs − c(cid:48)) − G Sbs

(cid:26) Gθ+
(cs − c(cid:48))

Gθ − G
(cid:16) θ−µ
2

G

(cid:17) (cid:12)
(cid:12)
(cid:12)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:16) µ+θ
2

θ, µ ∈ [[−σ, σ]], Aθ = Aµ = bs,
Gθ + (cs − c(cid:48)) = −Gµ − (cs − c(cid:48))
(cid:17) (cid:12)
(cid:111)
(cid:12)
(cid:12)θ, µ ∈ [[−σ, σ]], A(θ − µ) = 0
(cid:16) θ−µ
2

θ−µ
2 ∈ [[−σ, σ]], A

= 0

(cid:111)

(cid:17)

(cid:27)

=

⊆

=

(cid:110)

(cid:110)

We propose an alternative approach that ﬁnds an under-
approximation CZ d of CZ (cid:9) Z with the following two steps.
I) Compute a vector σ ∈ [[0, 1]] such that CZ s =

(cid:104)G diag(σ), cs, A diag(σ), bs(cid:105) encloses Z.

II) Compute CZ d = (cid:104)G diag(1 − σ), c − cs, A diag(1 −

σ), b − bs(cid:105).

= {Gσ | σ ∈ [[−σ, σ]], Aσ = 0} = GS0

(11)

Therefore, we have Z ⊆ c(cid:48) + GS0. Since Sbs and S0 are
deﬁned by the same σ, Eq. (10) follows readily.

Remark 1. Proposition 2 holds for any set Z that is symmetric
w.r.t. c(cid:48) and any other cost function of σ than (cid:107)σ(cid:107)1.

Next, we show that, with the sufﬁcient condition for Z ⊆
CZ s given in Lemma 3, how to ﬁnd a suboptimal solution of
(9) by solving a linear program.
Proposition 3. Suppose that Z = (cid:104)G(cid:48), c(cid:48)(cid:105) has nonempty
interior. Let σ be part of a minimizer of the following linear
program:

min
σ,cs,bs,Γ,β,Λ

(cid:107)σ(cid:107)1

s.t. G(cid:48) = GΓ, Gβ = cs − c(cid:48),

Λ[I; −I] = [A; −A; I; −I]Γ,
Λ1 ≤ [bs; −bs; σ; σ] + [A; −A; I; −I]β,
0 ≤ σ ≤ 1, Λ ≥ 0

(min-out)

then Z ⊆ CZ s = (cid:104)G diag(σ), cs, A diag(σ), bs(cid:105).

Proof: Note that the constrained zonotope CZ s and the

zonotope Z can be written as

CZ s = cs + G{σ | [A; −A; I; −I]σ ≤ [bs; −bs; σ; σ]}, (12)
(13)

Z = c(cid:48) + G(cid:48){σ | [I; −I]σ ≤ 1}.

Therefore CZ s ⊇ Z can be enforced by a set of linear
constraints using Lemma 3, which leads to (min-out).

In spite of Proposition 2, we keep cs, bs as free variables
in (min-out). In what follows, we show that one can also set
cs = c(cid:48) and bs = 0 in (min-out) without loss of optimality.
This result leads to a linear program equivalent to (min-out)
with fewer variables and constraints. Note that
this result
does not follow immediately from Proposition 2 because the
condition in Lemma 3 is only sufﬁcient but not necessary in
general (in fact, if that condition were also necessary, it would
be straightforward that cs = c(cid:48) and bs = 0 is optimal for
(min-out)). The proof is based on the following observations.

Proposition 4. Let (σ, cs, bs, Γ, β, Λ) be a feasible solution
of (min-out), then i) cs = Gβ − c(cid:48), ii) bs = −Aβ and iii)
AΓ = 0, and iv) (σ, c(cid:48), 0, Γ, 0, Λ) is feasible for some Λ.

Proof: Bullet i) follows from the constraint Gβ = cs −c(cid:48).
By Λ ≥ 0 (hence Λ1 ≥ 0) and Λ1 ≤ [bs; −bs; σ; σ] +
[A; −A; I; −I]β, we have

0 ≤ Λ1 ≤ [bs; −bs; σ; σ] + [A; −A; I; −I]β.

(14)

This implies that 0 ≤ bs + Aβ and 0 ≤ −bs − Aβ, i.e.,
bs + Aβ = 0. Hence bullet ii) holds. Also, Λ1 = [02m; σ +
β; σ − β] and hence the upper part of matrix Λ must be all
zeros, i.e., Λ = [02m×2N (cid:48); (cid:101)Λ] for some (cid:101)Λ ≥ 0, where m is the
height of A and N (cid:48) is the width of G(cid:48). This further implies
that AΓ = 0 because Λ[I; −I] = [A; −A; I; −I]Γ.

To prove bullet iv), deﬁne Λ as follows. The topmost 2m
rows of Λ are all zeros. For i = 1, 2 . . . N , where N is the
width of G,

i) if the ith element of β is non-positive, we deﬁne the
2m + ith row of Λ to be the same as that of Λ, i.e.,
[Λ2m+i,1:N (cid:48), Λ2m+i,N (cid:48)+1:2N (cid:48)], and the 2m+N +ith row
of Λ to be [Λ2m+i,N (cid:48)+1:2N (cid:48), Λ2m+i,1:N (cid:48)];

ii) if the ith element of β is positive, we deﬁne the 2m +
N + ith row of Λ to be the same as that of Λ, i.e.,

[Λ2m+N +i,1:N (cid:48), Λ2m+N +i,N (cid:48)+1:2N (cid:48)], and the 2m + ith
row of Λ to be [Λ2m+N +i,N (cid:48)+1:2N (cid:48), Λ2m+N +i,1:N (cid:48)].
construction, Λ has
a

i.e.,
By
Λ = [02m×2N (cid:48); Λ1, Λ2; Λ2, Λ1]. Moreover, Λ[I; −I] =
[02m; Γ; −Γ] and Λ1 ≤ [02m; σ −|β|; σ −|β|] ≤ [02m; σ; σ].
Together with bullet i) ii) and iii), it is straightforward to
check that (σ, c(cid:48), 0, Γ, 0, Λ) is feasible.

structure,

special

Proposition 4 leads to a simpliﬁcation of (min-out).

Theorem 1. The linear program (min-out) is equivalent to

minΓ (cid:107)|Γ|1(cid:107)1

s.t.

[G; A]Γ = [G(cid:48); 0], |Γ|1 ≤ 1

.

(simple)

(simple),

If Γ minimizes

(σ, c(cid:48), 0, Γ, 0, Λ)
Proof:
feasible to (min-out), where σ = |Γ|1, Λ =
is
[02m×2N (cid:48); Λ1, Λ2; Λ2, Λ1], Λ1 = Γ+ := (|Γ| + Γ)/2 and
Λ2 = Γ− := (|Γ| − Γ)/2. Moreover, the cost given by
this feasible solution is (cid:107)σ(cid:107)1 = (cid:107)|Γ|1(cid:107)1, i.e., the same as
the minimum of (simple). Suppose that (σ, cs, bs, Γ, β, Λ)
minimizes (min-out). Construct Λ from Λ as in the proof of
Proposition 4, and let [Λ1, Λ2] consist of the 2m + 1st to
2m+N th rows of Λ. Then Γ = Λ1−Λ2 is feasible to (simple).
Further, the cost associated with Γ is (cid:107)|Γ|1(cid:107)1 ≤ (cid:107)σ(cid:107)1. This
is because, by Proposition 4, (σ, c(cid:48), 0, Γ, 0, Λ) is also feasible
to (min-out) and hence σ ≥ Λ11 + Λ21 = |Γ|1 must hold.

By Theorem 1, we can ﬁnd the minimizer Γ of (simple),
deﬁne σ = |Γ|1 and (cid:104)G diag(σ), c(cid:48), A diag(σ), 0(cid:105) is
guaranteed to enclose Z. From now no, we will use CZ s to
denote the constrained zonotope (cid:104)G diag(σ), c(cid:48), A diag(σ), 0(cid:105)
and omit the subscript “0” of the set S0 = {σ ∈ [[−σ, σ]] |
Aσ = 0}.

The simpliﬁed optimization problem (simple) has a
geometric interpretation. Its decision variable Γ can be viewed
as the generator matrix of a zonotope (cid:104)Γ, 0(cid:105) ⊆ RN , where N
is the width of G. The inner zonotope Z is the image of (cid:104)Γ, 0(cid:105)
under linear map G and translation c(cid:48). Moreover, (cid:104)Γ, 0(cid:105) is in
the null space of A, and [[−σ, σ]] is the smallest hyper-box
that encloses (cid:104)Γ, 0(cid:105) as σ = |Γ|1. With this interpretation, it
is easy to see Z ⊆ CZ s. To be precise,

Z = (cid:104)G(cid:48), c(cid:48)(cid:105)

= {GΓθ + c(cid:48) | θ ∈ [[−1, 1]]}
= {Gσ + c(cid:48) | σ ∈ (cid:104)Γ, 0(cid:105)}
= {Gσ + c(cid:48) | σ ∈ (cid:104)Γ, 0(cid:105), Aσ = 0}
⊆ {Gσ + c(cid:48) | σ ∈ [[−σ, σ]], Aσ = 0}
= c(cid:48) + GS = CZ s.

(GΓ = G(cid:48))

(AΓ = 0)
(σ = |Γ|1)

(15)

Remark 2. For arbitrary constrained zonotope (cid:104)G, c, A, b(cid:105),
the unit hyper-box [[−1, 1]] may not necessarily be tight, i.e.,
it is not the smallest hyper-box that encloses {θ ∈ [[−1, 1]] |
Aθ = b}. Such a tight hyper-box can be founded by solving
2N linear programs, where N is the width of matrix G, or can
be outer-approximated more efﬁciently by an iterative method
proposed in [21]. However, for (cid:104)G diag(σ), c(cid:48), A diag(σ), 0(cid:105)
obtained by solving (simple), [[−1, 1]] is tight. This is because,
by the above interpretation, [[−σ, σ]] is the smallest hyper-box
that contains (cid:104)Γ, 0(cid:105) ⊆ {σ ∈ [[−σ, σ]] | Aσ = 0} = S. Hence

[[−σ, σ]] is also the smallest hyper-box containing S. As we
will see, the tightness of [[−σ, σ]] plays an important role in
the conservatism analysis of Step II.

Remark 3. The cost function (cid:107)|Γ|1(cid:107)1 of (simple) is the
absolute element sum of the matrix Γ. One may ask whether
minimizing this cost would achieve |Γ|1 ≤ 1 whenever
possible, even after removing the constraint |Γ|1 ≤ 1. This
is not the case in general though it happens often times. If we
ignore |Γ|1 ≤ 1 in (simple) and minimize the Frobenius norm
of Γ instead, it is equivalent to ﬁnding the minimum norm
solution of the least square problem deﬁned by [G; A]Γ =
[G(cid:48); 0]. If this minimum norm solution also satisﬁes |Γ|1 ≤ 1,
then it is a good estimate of the minimizer of (min-out) and
can be found more efﬁciently.

E. Step II: CZ (cid:9) CZ s by CG-Rep Manipulation

We further under-approximate CZ (cid:9) CZ s by CZ d =
(cid:104)G diag(1 − σ), c − c(cid:48), A diag(1 − σ), b(cid:105). It is tempting to
conclude that CZ d = CZ (cid:9)CZ s, but this is not true in general.
In what follows, we show CZ d ⊆ CZ (cid:9) CZ s and give a
sufﬁcient condition for this under-approximation to be exact.

The following two propositions will be useful later.

Proposition 5. Deﬁne

M = {µ ∈ [[−δ, δ]] ⊕ [[−σ, σ]] | Aµ = b},

S = {σ ∈ [[−σ, σ]] | Aσ = 0},
D = {δ ∈ [[−δ, δ]] | Aδ = b}.

(16)
(17)
(18)

Assume that [[−σ, σ]] is the smallest hyper-box that contains
S. Then M (cid:9) S = D.

Proof: This is a direct result of Lemma 4. Particularly,
is the smallest hyper-box that contains S,
i S = ±σi, where ei is the ith natural basis vector

since [[−σ, σ]]
max ±e(cid:62)
and σi is the ith element of σ.
Proposition 6. Deﬁne M, S ⊆ RN the same as in Proposition
5, let G ∈ Rn×N and N := N (A) ∩ N (G). Then G M (cid:9)
G S = G (M ⊕ N (cid:9) S).

Proof: By Lemma 2, bullets i) and ii)

G (M ⊕ N (cid:9) S) ⊆ G (M ⊕ N ) (cid:9) G S

= G M (cid:9) G S.

(19)

It remains to prove that G M(cid:9)G S ⊆ G (M⊕N (cid:9)S). To this
end, let x ∈ G M (cid:9) G S be arbitrary. Since x ⊕ G S ⊆ G M,
we have

∀σ ∈ S : ∃µσ ∈ M : x + Gσ = Gµσ.

(20)

Now let σ, σ(cid:48) ∈ S be arbitrary, Eq. (20) tells us

Aµσ = Aµσ(cid:48) = b,
) = G(µσ(cid:48) − σ(cid:48)
) = x.
(cid:125)
(cid:124)

(cid:123)(cid:122)
=:δσ(cid:48)

G(µσ − σ
(cid:124) (cid:123)(cid:122) (cid:125)
=:δσ

(21)
(22)

Clearly, δσ − δσ(cid:48) ∈ N by Eqs. (21), (22) and the fact that σ,
σ(cid:48) ∈ N (A). This further implies that

δσ + σ(cid:48) = δσ(cid:48) − δσ(cid:48) + δσ + σ(cid:48)

= µσ(cid:48) + (δσ − δσ(cid:48))
(cid:125)
(cid:124)

(cid:123)(cid:122)
∈N

∈ M ⊕ N .

(23)

Since σ(cid:48) ∈ S is arbitrary, Eq. (23) implies that

δσ ⊕ S ⊆ M ⊕ N ⇐⇒ δσ ∈ M ⊕ N (cid:9) S.

(24)

Note that, by Eq. (20), x = G(µσ − σ) = Gδσ. Combining
this with Eq. (24) yields x ∈ G (M ⊕ N (cid:9) S).
Now we state the main result of this part.

Theorem 2. Let CZ = (cid:104)G, c, A, b(cid:105)
and CZ s =
(cid:104)Gdiag(σ), c(cid:48), Adiag(σ), 0(cid:105), then CZ d = (cid:104)G diag(1−σ), c−
c(cid:48), A diag(1 − σ), b(cid:105) ⊆ CZ (cid:9) CZ s. Further, if N := N (G) ∩
N (A) = {0}, we have CZ d = CZ (cid:9) CZ s.

Proof: Note that CZ s = c(cid:48) + G S where S = {σ ∈
[[−σ, σ]] | Aσ = 0} (see Remark 2). Also note that CZ =
c + G M where M = {µ ∈ [[−1, 1]] | Aµ = b} = {µ ∈
[[−1 + σ, 1 − σ]] ⊕ [[−σ, σ]] | Aµ = b}. Deﬁne D = {δ ∈
[[−1 + σ, 1 − σ]] | Aδ = b}. We have D = M (cid:9) S by Remark
2 and Proposition 5. Also note that

CZ (cid:9) CZ s

= (c − c(cid:48)) + G M (cid:9) G S
= (c − c(cid:48)) + G(M ⊕ N (cid:9) S)
⊇ (c − c(cid:48)) + G(M (cid:9) S ⊕ N )
= (c − c(cid:48)) + G(M (cid:9) S) ⊕ G N
= (c − c(cid:48)) + G(M (cid:9) S)
= (c − c(cid:48)) + G D = CZ d.

(Proposition 6)
(Lemma 2)
(Lemma 2)
(N ⊆ N (G))
(Proposition 5)

(25)

Note that “⊇” in Eq. (25) holds as “=” if N = {0}.

Fig. 1: Example 1.
Example 1. With an example, we illustrate that CZ (cid:9) CZ s (cid:54)=
CZ d in general. Deﬁne

G =

(cid:20) 1
0
A = [ −1

0
1

0
0

0.1
0.8

(cid:21)

,

c =

(cid:20) 0
0

(cid:21)

,

1

0.3

1 ] ,

b = 1,

(26)

(27)

and σ = [0.2, 0.2, 0.2, 0.2](cid:62). Let CZ = (cid:104)G, c, A, b(cid:105) and CZ s
be deﬁned as in Proposition 3. Fig. 1 shows that there is a gap
between CZ (cid:9) CZ s and its under-approximation CZ d.
Remark 4. Since CZ (cid:9) CZ s (cid:41) CZ d in general, it is possible
that CZ (cid:9) CZ s (cid:54)= ∅ but CZ d = ∅. This issue can be mitigated
by enforcing the following constraint in (min-out): θ ∈ [[−1 +
σ, 1 − σ]], Aθ = b, where θ is a decision variable. This extra
constraint will ensure that CZ d (cid:54)= ∅ whenever possible.

V. EXACTNESS UNDER A RICH CG-REP OF CZ

The CG-Rep of a constrained zonotope is not unique. A
notable feature of our two-step approach is: the obtained under-
approximated difference CZ d varies with the CG-Rep of the
minuend CZ. In fact, if the CG-Rep of CZ is “rich” enough,
the two-step approach is exact when CZ (cid:9) Z (cid:54)= ∅. Such a rich
CG-Rep of CZ can be constructed as follows. Let

(if h(cid:62)

1) H ∈ R(cid:96)×n, a ∈ R(cid:96) be s.t. {x ∈ Rn | Hx ≤ a} = CZ;
2) h(cid:62)
i (cid:54)= 0 be the ith row of H and ai the ith element of a
i = 0, then ai = 0 and this row can be removed);
3) r > 0 be a sufﬁciently large real number s.t. CZ 0 :=
(cid:104)r I n, c(cid:105) encloses CZ for some c ∈ c(cid:48) + (CZ (cid:9) Z) (cid:54)= ∅,
where c(cid:48) is the center of Z;

4) (cid:104)G, c, A, b(cid:105) be the CG-Rep of CZ (cid:96) obtained via
to the following
c

iteratively applying Lemma 1 iv)
intersection operation, which leaves
unchanged:
CZ i = CZ i−1 ∩ {x | h(cid:62)

i = 1, 2, . . . , (cid:96).

i x ≤ ai},

center

(28)

the

Clearly,
(cid:104)G, c, A, b(cid:105) = CZ (cid:96) = {x | Hx ≤ a} = CZ. To be precise,

is a CG-Rep of

set CZ because

(cid:104)G, c, A, b(cid:105)

G = [r I n, 0n×(cid:96)],
A = [r H, diag( 1
di = ai − h(cid:62)
bi = ai−h(cid:62)

2 d)],
i c + r(cid:107)h(cid:62)
i (cid:107)1

i c−r(cid:107)h(cid:62)

2

i (cid:107)1, i = 1, 2, . . . , (cid:96),
, i = 1, 2, . . . , (cid:96),

(29)
(30)

(31)

(32)

where di (bi, resp.) is the ith element of vector d (b, resp.).
In the rest of this section, we use (cid:104)G, c, A, b(cid:105) as the CG-
Rep of the minuend CZ and show that Step I and Step II are
exact when CZ (cid:9) Z (cid:54)= ∅.

The following lemma will be useful.

Lemma 5. Assume that CZ (cid:9) Z (cid:54)= ∅, then di > 0 and [G; A]
is invertible.

Proof: Recall that CZ = {x | Hx ≤ a}, Z = (cid:104)c(cid:48), G(cid:48)(cid:105).

Since c ∈ c(cid:48) + (CZ (cid:9) Z), i.e., c − c(cid:48) + Z ⊆ CZ, we have

ai ≥ max h(cid:62)

i (c − c(cid:48) + Z) = h(cid:62)

i c + (cid:107)h(cid:62)

i G(cid:48)(cid:107)1.

(33)

By Eqs. (31), (33), di ≥ (cid:107)h(cid:62)
and r > 0 (see bullets 2), 3)), di > 0.

i G(cid:48)(cid:107)1 + r(cid:107)h(cid:62)

i (cid:107)1. Since hi (cid:54)= 0

By Eqs. (29), (30), [G; A] = [r I n, 0; r H, diag( d
2 )] ∈
R(n+(cid:96))×(n+(cid:96)). Since r > 0 and di > 0 for i = 1, 2, . . . , (cid:96),
[G; A] is a triangular matrix with non-zero diagonal entries.
Therefore [G; A] is invertible.

Proposition 7. Suppose that CZ (cid:9) Z (cid:54)= ∅, then (simple) is
feasible. Moreover, let Γ be the minimizer of (simple), deﬁne
σ = |Γ|1 and CZ s = (cid:104)G diag(σ), c(cid:48), A diag(σ), 0(cid:105), then
CZ (cid:9) CZ s = CZ (cid:9) Z.

Proof: By Lemma 5, there is a unique Γ satisfying the

equality constraint [G; A]Γ = [G(cid:48); 0], i.e.,

Γ = (cid:2) 1

r G(cid:48); −diag( d

2 )−1HG(cid:48)(cid:3),

(34)

In what follows, we show that, assuming that (cid:104)r I n, c(cid:105) ⊇ CZ,
the constraint |Γ|1 ≤ 1 holds automatically. Note that
(cid:104) 1
r |G(cid:48)|1; (cid:12)
i) For j = 1, 2 . . . , n, σj = 1

j G(cid:48)(cid:107)1 where ej is the jth
r (cid:107)e(cid:62)
natural basis. Since (cid:104)r I n, c(cid:105) ⊇ CZ ⊇ c − c(cid:48) + Z =
(cid:104)G(cid:48), c(cid:48)(cid:105), we have

2 )−1HG(cid:48)(cid:12)
(cid:12)1

σ = |Γ|1 =

(cid:12)diag( d

(35)

(cid:105)
.

j c(cid:48) + (cid:107)e(cid:62)
e(cid:62)

j G(cid:48)(cid:107)1 = max e(cid:62)
j c(cid:48) + r.

≤ max e(cid:62)

j (cid:104)r I n, c(cid:105) = e(cid:62)
j G(cid:48)(cid:107)1 ≤ r and σj ≤ 1.
i = 1, 2, . . . , (cid:96), σn+i = 2
di

Therefore (cid:107)e(cid:62)

ii) For

j (c − c(cid:48) + Z)

(36)

i G(cid:48)(cid:107)1 =
. Again, since (cid:104)r I n, c(cid:105) ⊇ c − c(cid:48) + Z =

(cid:107)h(cid:62)

2(cid:107)h(cid:62)

i G(cid:48)(cid:107)1

(cid:107)h(cid:62)
i G(cid:48)(cid:107)1+r(cid:107)h(cid:62)
i (cid:107)1
(cid:104)G(cid:48), c(cid:48)(cid:105), we have

i c + (cid:107)h(cid:62)
h(cid:62)

i G(cid:48)(cid:107)1 = max h(cid:62)

≤ max h(cid:62)

i (cid:104)r I n, c(cid:105) = h(cid:62)

i c + r(cid:107)h(cid:62)

i (c − c(cid:48) + Z)
i (cid:107)1.

(37)

Therefore (cid:107)h(cid:62)

i G(cid:48)(cid:107)1 ≤ r(cid:107)h(cid:62)

i (cid:107)1 and σn+i ≤ 1.

So far we have proved that Γ is the unique feasible solution
(hence the minimizer) of (simple).

It is known from Lemma 4 that CZ (cid:9) Z = CZ (cid:9) {x |
i c(cid:48) +

Hx ≤ as}, where as ∈ R(cid:96) and its ith element as,i = h(cid:62)
(cid:107)h(cid:62)

i G(cid:48)(cid:107)1. Note that, for i = 1, 2, . . . , (cid:96),
max h(cid:62)
= max h(cid:62)

i CZ s
i {Gσ + c(cid:48) | σ ∈ [[−σ, σ]], Aσ = 0}
(cid:12)
(cid:12)
(cid:12)
(cid:12)

i c(cid:48) + max

i σ1:n

= h(cid:62)

r h(cid:62)

(cid:26)

σ ∈ [[−σ, σ]], rHσ1:n =
−diag( d
2 )σn+1:n+(cid:96)

2 σn+i | σ ∈ [[−σ, σ]]}

≤ h(cid:62)
= h(cid:62)
= h(cid:62)

i c(cid:48) + max{− di
i c(cid:48) + di
i c(cid:48) + (cid:107)h(cid:62)

2 σn+i

i G(cid:48)(cid:107)1 = as,i,

(cid:27)

(38)

where σ1:n (and σn+1:n+(cid:96), resp.) is a vector that consists of
the ﬁrst n elements (and the last (cid:96) elements, resp.) of σ. By
Eq. (38), CZ s ⊆ {x | Hx ≤ as}. Together with the fact that
Z ⊆ CZ s, we have CZ (cid:9) CZ s = CZ (cid:9) Z.

The following result says that Step II is exact.

Proposition 8. Let CZ s = (cid:104)G diag(σ), c(cid:48), A diag(σ), 0(cid:105) and
CZ d = (cid:104)G diag(1 − σ), c − c(cid:48), A diag(1 − σ), b(cid:105), where σ is
deﬁned the same as in Proposition 7, then CZ (cid:9) CZ s = CZ d.

Proof: By Lemma 5, N (G) ∩ N (A) = N ([G; A]) =

The following result says that Step I is exact.

{0}. By Theorem 2, CZ (cid:9) CZ s = CZ d.

Although CZ (cid:9) Z (cid:54)= ∅ is assumed in Propositions 7, 8, the
result CZ d returned by the two-step approach is exact in the
following sense, regardless of this assumption.

Theorem 3. For any constrained zonotope CZ, if we construct
its CG-Rep following steps 1)-4), then the followings hold:

i) if CZ (cid:9) Z = ∅, either CZ d = ∅ or (simple) is infeasible;
ii) if CZ (cid:9) Z (cid:54)= ∅, CZ d = CZ (cid:9) Z.

Proof: Bullet

ii)

Proposition 8. For bullet
if (simple) is feasible,
CZ d = ∅ because CZ d ⊆ CZ (cid:9) Z = ∅ by Theorem 2.

follows
i),

from Proposition 7 and
then

Remark 5. The run time of our
two-step approach is
polynomial in the input size. Thus, by Proposition 1, this
approach cannot be exact in general unless P = NP. However,
as stated by Theorem 3, the two-step approach still achieves
exactness in special cases where CZ’s CG-Rep is not the
most “compact” one. Note that, such non-compact CG-Rep is
constructed from the H-Rep of CZ, whose complexity may, in
the worst case, be exponential in that of CZ’s most compact
CG-Rep. Therefore, the exactness results are not surprising
because in this case,
the two-step approach bypasses the
high-complexity step of computing CZ’s H-Rep. This is also
consistent with the fact that Minkowski-subtracting a zonotope
from a polytope in its H-Rep is easy [14]. However, our results
in Sec. V may open the direction of incrementally enriching the
minuend’s CG-Rep to achieve exact results quickly whenever
possible.

VI. BACKWARD REACHABLE SET COMPUTATION FOR
NONLINEAR SYSTEMS
In this section, we use our two-step approach from Sec. IV
to develop BRS under-approximation algorithms for system
(2), as promised in Sec. III. In particular,
to incorporate
the error introduced by sequential linearization, we require
X k−1 (cid:9) L to be reachable from X k under the linearized
dynamics, where X k−1 ( X k, resp.) are the k − 1st (kth,
resp.) under-approximated BRS and L contains all values of
the linearization error over X k. As mentioned at the end of
Sec. III, the challenge is to approximate L without knowing
X k a priori. To resolve this issue, we explore the following
two strategies.
A) Scaling method: we incrementally enlarge L by a scaling
factor until i) X k−1 (cid:9) L is reachable from X k under the
linear dynamics, and ii) L encompasses all the values
of the linearization error in X k. Here, each X k is a
constrained zonotope.

B) Splitting method: we ﬁx L and split X k−1 into ﬁnitely
many smaller sets, i.e., X k−1 = (cid:83)
i X i
k−1. The nonlinear
system is linearized for each X i
k−1, and the splitting
procedure terminates when the linearization error in each
X i
k−1 (cid:9) L is reachable under the ith
linear dynamics, are contained by L. In this case, X k =
(cid:83)
k and is represented by the collection of the CG-
Reps of constrained zonotopic sets X i
k.

k, from where X i

i X i

from [25], where a similar splitting procedure is developed
for zonotopes to control the linearization error in forward
reachability analysis. Unique to our implementation is the use
of our efﬁcient Minkowski-difference computation techniques
tailored to constrained zonotopes. While the scaling method is
more suitable for computation with more steps (i.e., larger k) in
a convex safe set Xsafe, the splitting method can better capture
the shape of a nonconvex set Xk and is more suitable when the
safe set Xsafe is also nonconvex, because X k is represented as
a collection of constrained zonotopes in the latter method. In
what follows, we present the detailed algorithms for the two
methods above.

A. Scaling Method

Algorithm 1 X k = ScalingBRS(X k−1, f , U, W, Xsafe)
Input: Constrained zonotope X k−1; System’s vector ﬁeld f ;
Control input set U; Disturbance set W; Safe set Xsafe

Output: Constrained zonotope X k ⊆ P re(X k−1)
1: (cid:101)z ← center(X k−1 × U)
2: [ (cid:101)A, (cid:101)B] ← linearize((cid:101)z, f ); (cid:101)L ← {f ((cid:101)z) − [ (cid:101)A, (cid:101)B](cid:101)z}
3: (cid:101)Zk ← P rex,u(X k−1, (cid:101)A, (cid:101)B, U, W, (cid:101)L, Xsafe)
4: z∗ ← center( (cid:101)Zk)
5: [A, B] ← linearize(z∗, f ); L ← LE(z∗, f , (cid:101)Zk)
6: Zk ← P rex,u(X k−1, A, B, U, W, L, Xsafe)
7: while LE(z∗, f , Zk) (cid:54)⊆ L do
Enlarge L by a factor α
8:
Zk ← P rex,u(X k−1, A, B, U, W, L, Xsafe)
9:
10: return X k ← P rojx(Zk)

Algorithm 1 details the scaling method. In this algorithm,
we ﬁrst linearize the system at the geometric center (cid:101)z of the
interval closure of X k−1 × U. The function center(Z) returns
1
2 (z + z), where z and z are the lower and upper limits of
the smallest hyper-box that contains set Z. That is,

zi = min e(cid:62)

i Z,

zi = max e(cid:62)

i Z.

(39)

where zi and zi are the ith elements of z and z, respectively.
Suppose that Z is a constrained zonotope, executing the
function center amounts to solving 2n linear programs. On
line 2, the function linearize(z, f ) linearizes the vector ﬁeld
f at point z and returns the matrices that deﬁne the obtained
linear system, i.e.,

A =

∂f (x, u)
∂x

(cid:12)
(cid:12)
(cid:12)
(cid:12)[x;u]=z

, B =

∂f (x, u)
∂u

(cid:12)
(cid:12)
(cid:12)
(cid:12)[x;u]=z

.

(40)

On line 3, we compute a set (cid:101)Zk of state-input vectors
is reached from state x under
[x; u] such that X k−1
control u and the obtained linear dynamics. To be precise,
P rex,u(X , A, B, U, W, L, Xsafe) is deﬁned to be:

{[x; u] ∈ Xsafe × U |Ax + Bu ∈ X (cid:9) (L ⊕ W)}.

(41)

The scaling method is in principle similar to the approach
proposed in [24], and the splitting method borrows the idea

Suppose that Xsafe is a polytope, then P rex,u is a constrained
zonotope whose CG-Rep can be obtained using Lemma 1 and

our two-step approach for Minkowski-difference computation.
in line 3, (cid:101)Zk is computed without considering
Note that,
any linearization error (i.e., (cid:101)L = {f ((cid:101)z) − [ (cid:101)A, (cid:101)B](cid:101)z} is a
singleton set). The purpose of this step is to ﬁnd a better point
z∗ = center( (cid:101)Zk) to linearize the system at (line 4). Then on
lines 5-6, we linearize the system at z∗ and recompute a set
Zk with the latest linear system and a set L = LE(z∗, f , (cid:101)Zk)
that contains all possible values of the linearization error.
Particularly, LE(z∗, f , Z) is a zonotope that encloses the
following set of Lagrange remainders over set Z:

f (z∗) − [A, B]z∗+
(cid:12)
(cid:26)
(cid:12)
(cid:12)
(cid:12)

L ∈ Rn

2 (z − z∗)(cid:62) ∂2fi

Li = 1
ξi = λiz∗ + (1 − λi)z, λi ∈ [[0, 1]]

(cid:27)
∂z2 (ξi)(z − z∗), z ∈ Z

(42)

where A, B are given by Eq. (40) evaluated at z∗, and
Li, fi are the ith elements of L and f , respectively. The
set LE(z∗, f , Z) can be computed as a hyper-box using
interval analysis techniques (e.g., see [25]). If L encloses
all possible values of the linearization error in set Zk, then
[x; u] ∈
Xk−1 can be reached from P rojx(Zk) := {x |
Zk} under the nonlinear dynamics2. In that case, we return
X k = P rojx(Zk). Otherwise we incrementally enlarge L by
a factor α and recompute Zk until the linearization error set
LE(z∗, f , Zk) is enclosed by L.

B. Splitting Method

The real backward reachable set Xk may not be convex
due to the nonlinearity of the system’s vector ﬁeld f or the
nonconvexity of the safe set Xsafe. Therefore,
the scaling
method can be conservative because we under-approximate
a potentially nonconvex set Xk with a constrained zonotope
X k, which is a convex set. In this part, we present another
approach called the splitting method, where the linearization
error set L is deﬁned to have a prescribed (i.e., ﬁxed) size,
and X k is represented as the union of a ﬁnite collection {X i
k}
of constrained zonotopes, so that the linearization error in
each X i
k is over-approximated by the prescribed L. Since
X k = (cid:83)
k is not necessarily convex in the splitting
method, it serves as a less conservative (i.e., larger) under-
approximation of Xk.

i X i

The following proposition provides a rigorous way to split
one constrained zonotope into two, so that the linearization
error can be evaluated over the two smaller sets separately.

Proposition 9. Assume that CZ = (cid:104)G, c, A, b(cid:105), where
G = [g1, g2, · · · , gN ], A = [a1, a2, · · · , aN ]. Then set
CZ can be split into CZ i
2 =
(cid:104)G2, c2, A2, b2(cid:105) along gi, i.e., CZ = CZ i

1 = (cid:104)G1, c1, A1, b1(cid:105) and CZ i
2 where

G1 = G2 = [g1, g2, · · · , 1
A1 = A2 = [a1, a2, · · · , 1
b1 = b − 1
b2 = b + 1

2 ai
2 ai
2The projection step amounts to a linear transformation and is easy for

c1 = c + 1
c2 = c − 1

2 gi
2 gi

(43)
(44)
(45)
(46)

1 ∪ CZ i
2 gi, · · · , gN ]
2 ai, · · · , aN ]

CG-Reps by Lemma 1, bullet i).

Proof: The set CZ can be written as

CZ = {Gθ + c | |θj| ≤ 1, j = 1, 2, · · · , N, Aθ = b}.

(47)

where θ = [θ1; θ2; · · · ; θN ] ∈ RN . Deﬁne
CZ i
CZ i

1 = {Gθ + c | θi ∈ [[0, 1]], |θj| ≤ 1, j (cid:54)= i, Aθ = b},
(48)
2 = {Gθ + c | θi ∈ [[−1, 0]], |θj| ≤ 1, j (cid:54)= i, Aθ = b}. (49)

Apparently, CZ = CZ i
1 ∪ CZ i
1 =
(cid:104)G1, c1, A1, b1(cid:105), let θ be such that θi ∈ [[0, 1]], |θj| ≤ 1
for all j (cid:54)= i and Aθ = b. Deﬁne µi = 2θi − 1 and
ˆθ = [θ1; θ2; · · · ; θi−1; µi; θi+1; · · · ; θN ], then

2. To show that CZ i

Gθ + c = c + (cid:80)N

j=1,j(cid:54)=i gjθj + gi( 1
2 gi) + (cid:80)N

2 µi + 1
2 )
j=1,j(cid:54)=i gjθj + 1
2 giµi

= (c + 1
= G1 ˆθ + c1

In addition,

Aθ = b ⇐⇒ (cid:80)N
⇐⇒ (cid:80)N
⇐⇒ A1 ˆθ = b1

j=1 ajθj = b
j=1,j(cid:54)=i ajθj + ai( 1

2 µi + 1

2 ) = b

(50)

(51)

Since |µi| = |2θi − 1| ≤ 1, we have ˆθ ∈ [[−1, 1]]. Therefore,

CZ i

1 = {G1 ˆθ + c1 | ˆθ ∈ [[−1, 1]], A1 ˆθ = b1}
= (cid:104)G1, c1, A1, b1(cid:105)

(52)

Similarly, to show that CZ i
2 = (cid:104)G2, c2, A2, b2(cid:105), let θ be such
that θi ∈ [[−1, 0]], |θj| ≤ 1 for all j (cid:54)= i and Aθ = b. The
above argument follows by setting µi = 2θi + 1.

Fig. 2 shows the two sets CZ 1 (green) and CZ 2 (red)
obtained by splitting CZ (black contour) using Proposition 9.
Note that CZ 1 overlaps with CZ 2. As we will see, this overlap
helps to reduce the conservatism in the BRS computation.

Fig. 2: Result for Proposition 9: CZ = CZ 1 ∪ CZ 2

Based on Proposition 9,

a detailed algorithm that
implements the splitting method is given in Algorithm 2. The
output {X (cid:96)
k−1} are ﬁnite collections of
constrained zonotopes s.t. X k−1 = (cid:83)
k−1 and X k = (cid:83)
(cid:96) X (cid:96)
k
are the under-approximation of the k − 1st and the kth
linearize
BRSs, respectively. The sub-procedures center,

k} and the input {X i

i X i

and LE are the same as in the scaling method. However,
P rex,u(X , A, B, U, W, L), which computes the extended
constrained zonotope Z, has a slightly different deﬁnition, i.e.,

Z = {[x; u] | Ax + Bu ∈ X (cid:9) (L ⊕ W), u ∈ U}.

(53)

Note that, in Eq. (53), x ∈ Xsafe is not enforced as in the
scaling method.

k) ∩ Xsafe ⊆ P re(X i

k, we compute a set Z i

Algorithm 2 is brieﬂy explained below. For each X i

k−1 from
the input collection, we construct a collection Ci
k of constrained
zonotopes, the union of which is contained by P re(X i
k−1). To
obtain Ci
k of the state-input pairs [x; u]
using linearization (lines 2-5). These steps are the same as
those in the scaling method except that the linearization error
set L is now deﬁned by a prescribed error bound ¯L. If all
possible values of the linearization error over Z i
k are contained
k−1) and Ci
by L, it follows that P rojx(Z i
k
is given as in line 7. Otherwise we split X i
k−1 into two smaller
constrained zonotopes X i,j∗
k−1,1, X i,j∗
k−1,2 and compute the BRSs
for them by calling SplittingBRS recursively. Note that, for the
ﬁrst case (i.e., line 7), each Ci
k may still contain multiple sets
when Xsafe is nonconvex. For example, if Xsafe = (cid:83)
p Hp is
the union of ﬁnitely many polytopes Hp, the collection Ci
k will
consist of P rojx(Z i
k) ∩ Hp
is a constrained zonotope, whose CG-Rep can be obtained
by Lemma 1. For details, see [18]. Finally, if f is twice
continuously differentiable, LE(z∗, f , Z) will converge to a
singleton set as Z does. This ensures that the recursion will
terminate after sufﬁciently many splittings.

k) ∩ Hp for all p. Each P rojx(Z i

Algorithm 2 {X (cid:96)

Input: A collection {X i

k} = SplittingBRS({X i

k−1}, f , U, W, ¯L, Xsafe)
k−1} of constrained zonotopes;
System’s vector ﬁeld f ; Control input set U; Disturbance
set W; Safe set Xsafe; Admissible linearization error
¯L ∈ Rn

k} of constrained zonotopes s.t.

(cid:83)

i X i

k−1 × U)

Output: A collection {X (cid:96)
k ⊆ P re((cid:83)
k−1)
k−1 do
z∗ ← center(X i
[A, B] ← linearize(z∗, f )
L ← (cid:104)diag( ¯L), f (z∗) − [A, B]z∗(cid:105)
Z i
if LE(z∗, f , Z i

k ← P rex,u(X i

(cid:96) X (cid:96)
1: for each X i
2:
3:
4:
5:
6:
7:
8:
9:
10:

Ci
k ← {P rojx(Z i
break

k) ⊆ L then

k) ∩ Xsafe}

else

k−1, A, B, U, W, L)

11:

12:

Select a generator gi,j∗
k−1 into X i,j∗
Split X i
k−1,1, X i,j∗
k−1 ← {X i,j∗
Ci
k ← SplittingBRS(Ci
Ci
k} ← (cid:83)

i Ci
k

13:
14: return {X (cid:96)

k−1 of X i
k−1,1 and X i,j∗

k−1
k−1,2 {Proposition 9}

k−1,2}
k−1, f , U, W, ¯L, Xsafe)

In line 10, the generator gi,j∗

to [25], for the jth generator of the set X i

k−1 is selected as follows. Similar
k−1 to split, we

compute a performance index ρj as follows:

ρj = max(Lj

1/ ¯L) · max(Lj

2/ ¯L),

(54)

iii),

k,1 and X i,j

1, Lj
where Lj
2 ∈ Rn are vectors that deﬁne the linearization
error bound for sets X i,j
k,2, respectively. The operations
max and / in Eq. (54) are element-wise. In line 10, the
generator gi,j∗
k−1 with the lowest performance index will be
chosen, i.e., j∗ = arg minj ρj.
Remark 6. Note that, while executing SplittingBRS in line
the set L ⊕ W will be subtracted from the two sets
13,
X i,j∗
k−1,1 and X i,j∗
k−1,2, which are obtained via splitting. By
Lemma 2, bullet
the union of these two Minkowski
differences is only a subset of (but not necessarily equal to)
X i
k−1 (cid:9) (L ⊕ W). This means that the splitting procedure
introduces more conservatism. However, the overlapping area
generated by Proposition 9 can ease the conservatism. This is
because the larger X i,j∗

k−1,2 are, the larger Ci
the number of the obtained
constrained zonotopes may grow exponentially. Therefore, a
sampling algorithm is required to restrict their number. In order
to evenly cover the union of these sets, we implement the
farthest point sampling algorithm [26] based on the geometric
centers of the constrained zonotopes’ interval closures.

When doing the splitting,

k−1,1 and X i,j∗

k is.

VII. EXAMPLES

In this section we illustrate our algorithms with several
examples. TABLE I summarizes our results with, for each
example and method, the system dimension n, the iteration
steps k and the computing time. These examples were run on
a laptop with a 12th generation Intel CPU and 16 GB of RAM.
Our implementation is in MATLAB R2019a. The zonotope-
based method and the HJB method that we use as benchmarks
are also in MATLAB. Note that the splitting method does not

Example 2
Example 3
Example 4:
Convex constraints
Example 4:
Nonconvex constraints
Example 5

n
2
10

k
100
10

3 −

Splitting
N/A
226.7s
478.9s
(k = 25)

3

20

1564.1s

10 340

951.6s

Scaling
56.1s
N/A
2821.3s
(k = 400)

HJB
45.2s
Memory error

Memory error

N/A

N/A

4521.6s

Memory error

TABLE I: Computation time for the examples

apply to Example 2 because the system is linear and Xsafe
is convex (hence no reason for splitting). We also do not
apply the scaling methods to examples with nonconvex Xsafe
(Examples 4 and 5), because its implementation only generates
one homotopy class.

While Algorithm 1, 2 are developed for nonlinear systems,
they both reduce to Eq. (4) for linear systems (i.e., when
f (x, u) = Ax + Bu). The following linear system examples
show that
less conservative under-approximations can be
obtained using constrained zonotopes instead of zonotopes,
because the former has a stronger expressive power.

Exact

Volume 37.079

Constrained
zonotope
28.343

Zonotope HJB

7.810

2.817

TABLE II: Example 2, the volume of the
BRSs.

Constrained
zonotope
0.1608

HJB

Intersection

0.3422

0.1504

0.7070

0.7326

0.6674

Volume
Projection
Volume

TABLE III: Example 4, the volume of the
BRSs and their projections.

Fig. 3: Example 2, exact BRSs and their
under-approximations.

Fig. 4: Example 3, BRSs using the
constrained-
zonotope-based & the
zonotope-based methods.

Fig. 5: Example 4, BRSs of the Dubins
car system with obstacles by the splitting
method.

Fig. 6: Example 4, BRSs of the Dubins car
system with convex constraints using the
scaling method and the splitting method.

Fig. 7: Example 5, BRSs for the 10-D tank
system.

Example 2. Consider a linear system with the following
system matrices and sets:
(cid:20) 0.9962
−0.1496

(cid:20) −0.004034
0.08025

0.02394
0.9962

, B =

A =

(55)

(cid:21)

(cid:21)

,

U = [[−1.5, 1.5]], W = (cid:104)[0.1997, 0.002396; −0.01498,
0.1997], 0(cid:105), X0 = (cid:104)diag([0.5, 0.5]), [1.5; 0](cid:105) and Xsafe = {x ∈
R2 | [−1, 0; 2, 1]x ≤ [2; 5]}. Fig. 3 shows the exact BRSs Xk
(gray) for k = 1, 2 . . . , 100 and their under-approximations.
The constrained zonotopic under-approximations X k are in
blue. As a comparison, we used the method in [19] to
compute zonotopic under-approximations (red) and scaled the
generators of these zonotopes to satisfy the linear safety
constraints. The latter approach is clearly more conservative
(i.e. gives smaller sets). In fact, due to the wrapping effect
after hitting the unsafe set {x | [2, 1]x > 5}, the red sets
vanish before k = 100 is reached. The main reason of
this conservatism is that the true backward reachable set Xk
becomes asymmetric due to the state constraints. Therefore it is
more accurate to approximate Xk with a constrained zonotope
than with a zonotope. The former is as expressive as polytopes
while the latter is restricted to be a centrally symmetric set.

In addition, we use the HJB method to compute the BRSs
(cyan contour) with the same constraints. The result using HJB
is more conservative and stops expanding after k = 20. The
volumes of the BRSs obtained using different methods are
approximated using a sample-based method and are shown in
TABLE II.

Example 3. Consider the 10-D system from [19], discretized

with a sampling period of dt = 0.1s. Let the disturbance set
W be so that w{1,3,5} ∈ [[−0.12, 0.12]], w{2,4,6} ∈ [[−0.2, 0.2]],
w{7,8,9,10} ∈ [[−0.1, 0.1]] and the control set U ∈ [[−0.5, 0.5]]3.
Deﬁne the target set such that xi ∈ [[9.5, 10.5]] for i ∈
{1, 2, 3, 4, 5, 6} and xi ∈ [[8, 12]] for i ∈ {7, 8, 9, 10}.

To avoid potential numerical

issues when visualizing
10-D zonotopes or constrained zonotopes, bounding boxes
are used to visualize the results. Fig. 4 shows the 3-D
projection of the boxes including the constrained zonotopic
under-approximation of BRSs (blue) and zonotopic under-
approximation of BRSs (green) for k = 1, 2 · · · , 10. Since
the system dimension is large, Hamilton-Jacobi method
encountered memory error, whereas both zonotope and
constrained zonotope-based methods can obtain a result. Here
we used the approach in Sec. VI-B to avoid obstacles. In this
example, the zonotopic representation is more conservative
than that based on constrained zonotopes, while the latter being
as scalable as the former. That is, constrained zonotopes can
also handle high dimensional linear systems, as zonotopes do.

Example 4. Consider the following Dubins Car system:

t cos(x3
t )
t sin(x3
t )

x1
t+1 = x1
t+1 = x2
x2
t+1 = x3
x3
t ; x2

t + u1
t + u1
t + u2
t
Assume that xt = [x1
t ] and ut = [u1
t ; x3
t ] ∈
[[0.04, 0.08]] × [[0, 0.04]] is the control input. We use the scaling
method and the splitting method to compute the BRSs with
convex and nonconvex state constraints, respectively.

(56)
(57)
(58)

t ; u2

Fig. 5 shows the [x1; x2]-projection of the constrained
zonotopic under-approximation X k (cyan) of
the BRSs,
obtained by the splitting method. As a comparison, we also use
the HJB method [22] to approximate the BRSs (blue contour).
To this end, a uniform grid (201×201×101) of the state space
is used. The BRSs obtained via these two methods both contain
states from different homotopy classes in an environment with
obstacles. Further, the two methods give BRSs that are similar
in sizes but not comparable in the set inclusion sense (Fig
5 & TABLE III). In particular, when expanding into the free
state space, the HJB method tends to give larger BRSs than
the splitting method. However, the splitting method is faster
(TABLE I). The volumes of the BRSs (and their projections)
obtained using both methods are approximated using a sample-
based method and are shown in TABLE III.

Fig. 6 shows X k obtained by the scaling method (blue) and
the splitting method (cyan). Here the safe set is a single half-
space (speciﬁed by the red plane). For small k’s, the splitting
method ﬁnds larger BRSs than the scaling method. However,
the splitting method has difﬁculties to proceed for k ≥ 25.
This is because, in the splitting method, X k is represented as
a collection of small sets, whose number grows fast without
an obstacle “pruning” these sets in a convex domain. It is
also conservative to Minkowski subtract L ⊕ W from each
small set in the collection, and uses the union of the obtained
Minkowski-differences to compute X k+1 (see Remark 6). On
the contrary, the scaling method, which computes one set at
each step, does not suffer from these issues and can compute
the BRSs in a convex domain for a longer time horizon.

Example 5. Consider a 10-D water tank system with the
following dynamics derived from the Torricelli’s law:

t+1 = x1
x1

t + dt · (u − k2x10

t − k1

t+1 = xi
xi

t + dt · (k1(

(cid:113)

2gxi−1

t −

(cid:113)

2gx1
t )

(cid:113)

2gxi

t)), ∀i (cid:54)= 1

(59)

(60)

where xi are the water level of the ith tank, u ∈ [[0.135, 0.145]]
is the inﬂow, dt = 0.01, k1 = 0.015, k2 = 0.01, and g = 9.81.
The target set is X0 = [[3.9, 4.1]]10

We apply the splitting method to this example. Figure 7
shows the 2-D projections of the target set (green), the obstacle
(red), and the bounding boxes (blue) that include the obtained
constrained zonotopic under-approximations of the BRSs. For
this example, the HJB toolbox reports a memory error due to
the large grid size, which is necessary for this 10-D system.
We manage to compute the BRSs (with two homotopy classes)
in reasonable time (TABLE I). This example shows that our
method can deal with high-dimensional nonlinear systems with
nonconvex state constraints.

VIII. CONCLUSION & FUTURE WORK
In this paper, we developed constrained-zonotope-based
methods to under-approximate the BRSs for discrete-time
nonlinear systems. Our main technical contribution was
twofold. First, we developed an efﬁcient way to under-
approximate the Minkowski difference between a constrained
zonotopic minuend and a zonotopic subtrahend, which is a

necessary step in the sequential BRS computation. Our under-
approximation was shown to be exact for minuends with rich
enough CG-Reps. Secondly, using the developed Minkowski
difference computation technique, we proposed two methods,
i.e., the scaling method and the splitting method, for BRS
computation. Experiments showed that
these constrained-
zonotope-based methods were less conservative than those
using zonotopes, and were more scalable than the HJB method.
The exactness result in Sec. V suggests that, for constrained
zonotopes,
there is a trade-off between the computational
complexity and the accuracy of set operations. This trade-
off may be better understood via a systematic conversion
between the different CG-Reps of a constrained zonotope. This
conversion may be used, e.g., to incrementally enrich the CG-
Rep of a constrained zonotopic minuend and improve our two-
step approach’s accuracy. We will explore this in the future.

REFERENCES

[1] D. Bertsekas and I. Rhodes, “On the minimax reachability of target sets
and target tubes,” Automatica, vol. 7, no. 2, pp. 233–247, 1971.
J. Lygeros, C. Tomlin, and S. Sastry, “Controllers for reachability
speciﬁcations for hybrid systems,” Automatica, vol. 35, no. 3, pp. 349–
370, 1999.

[2]

[3] D. Bertsekas, “Inﬁnite time reachability of state-space regions by using
feedback control,” IEEE TAC, vol. 17, no. 5, pp. 604–613, 1972.
I. M. Mitchell, “Comparing forward and backward reachability as tools
for safety analysis,” in Intl. Workshop on HSCC. Springer, 2007, pp.
428–443.

[4]

[5] M. Chen, Q. Tam, S. C. Livingston, and M. Pavone, “Signal temporal
logic meets reachability: Connections and applications,” in Intl. WAFR.
Springer, 2018, pp. 581–601.

[6] G. Chou, Y. E. Sahin, L. Yang, K. J. Rutledge, P. Nilsson, and N. Ozay,
“Using control synthesis to generate corner cases: A case study on
autonomous driving,” IEEE TCAD, vol. 37, no. 11, pp. 2906–2917,
2018.

[7] L. Yang and N. Ozay, “Synthesis-guided adversarial scenario generation
for gray-box feedback control systems with sensing imperfections,”
ACM TECS, vol. 20, no. 5s, pp. 1–25, 2021.

[8] E. Goubault and S. Putot, “Inner and outer reachability for the
veriﬁcation of control systems,” in Proc. of the 22nd HSCC, 2019, pp.
11–22.

[9] B. Schurmann, M. Klischat, N. Kochdumper, and M. Althoff, “Formal
safety net control using backward reachability analysis,” IEEE TAC,
2021.

[10] M. Althoff, G. Frehse, and A. Girard, “Set propagation techniques
for reachability analysis,” Annual Review of Control, Robotics, and
Autonomous Systems, vol. 4, pp. 369–395, 2021.

[11] N. Kochdumper and M. Althoff, “Computing non-convex inner-
approximations of reachable sets for nonlinear continuous systems,”
in Proc. of the 59th CDC.

IEEE, 2020, pp. 2130–2137.

[12] X. Chen, S. Sankaranarayanan, and E. Ábrahám, “Under-approximate
ﬂowpipes for non-linear continuous systems,” in 2014 FMCAD.
IEEE,
2014, pp. 59–66.

[13] E. Hnyilicza, “A set-theoretic approach to state estimation,” Master’s

[14]

thesis, Massachusetts Institute of Technology, 1969.
I. Kolmanovsky and E. G. Gilbert, “Theory and computation
of disturbance invariant
systems,”
Mathematical Problems in Engineering, vol. 4, no. 4, pp. 317–367,
1998.

for discrete-time linear

sets

[15] H. R. Tiwary, “On the hardness of computing intersection, union and
minkowski sum of polytopes,” Discrete & Computational Geometry,
vol. 40, no. 3, pp. 469–479, 2008.

[16] M. Herceg, M. Kvasnica, C. Jones, and M. Morari, “Multi-Parametric

Toolbox 3.0,” in Proc. of the 12th ECC, 2013, pp. 502–510.

[17] M. Althoff, “On computing the minkowski difference of zonotopes,”

arXiv preprint arXiv:1512.02794, 2015.

[18] V. Raghuraman and J. P. Koeln, “Set operations and order reductions

for constrained zonotopes,” Automatica, vol. 139, p. 110204, 2022.

[19] L. Yang and N. Ozay, “Scalable zonotopic under-approximation of
backward reachable sets for uncertain linear systems,” IEEE LCSS,
vol. 6, pp. 1555–1560, 2021.

[20] S. Sadraddini and R. Tedrake, “Linear encodings
containment problems,” in Proc. of the 58th CDC.
4367–4372.
J. K. Scott, D. M. Raimondo, G. R. Marseglia, and R. D. Braatz,
“Constrained zonotopes: A new tool for set-based estimation and fault
detection,” Automatica, vol. 69, pp. 126–136, 2016.

for polytope
IEEE, 2019, pp.

[21]

[22] S. Bansal, M. Chen, S. Herbert, and C. J. Tomlin, “Hamilton-jacobi
reachability: A brief overview and recent advances,” in Proc. of the
56th CDC.

IEEE, 2017, pp. 2242–2253.

[23] A. Kulmburg and M. Althoff, “On the co-np-completeness of the
zonotope containment problem,” Eur. J. Control, vol. 62, pp. 84–91,
2021.

[24] M. Althoff, “Reachability analysis of nonlinear

systems using
conservative polynomialization and non-convex sets,” in Proc. of the
16th HSCC, 2013, pp. 173–182.

[25] M. Althoff, O. Stursberg, and M. Buss, “Reachability analysis
of nonlinear systems with uncertain parameters using conservative
linearization,” in Proc. of the 47th CDC.
IEEE, 2008, pp. 4042–4048.
[26] T. F. Gonzalez, “Clustering to minimize the maximum intercluster

distance,” Theoretical computer science, vol. 38, pp. 293–306, 1985.

