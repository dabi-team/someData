Towards an Architecture-centric Methodology
for Migrating to Microservices

Jonas Fritzsch1, Justus Bogner1, Markus Haug1, Stefan Wagner1, and Alfred
Zimmermann2

1 University of Stuttgart, Stuttgart, Germany
{firstname.lastname}@iste.uni-stuttgart.de
2 University of Applied Sciences Reutlingen, Reutlingen, Germany
alfred.zimmermann@reutlingen-university.de

Abstract. The euphoria around microservices has decreased over the
years, but the trend of modernizing legacy systems to this novel archi-
tectural style is unbroken to date. A variety of approaches have been
proposed in academia and industry, aiming to structure and automate
the often long-lasting and cost-intensive migration journey. However, our
research shows that there is still a need for more systematic guidance.
While grey literature is dominant for knowledge exchange among practi-
tioners, academia has contributed a signiﬁcant body of knowledge as well,
catching up on its initial neglect. A vast number of studies on the topic
yielded novel techniques, often backed by industry evaluations. However,
practitioners hardly leverage these resources. In this paper, we report on
our eﬀorts to design an architecture-centric methodology for migrating to
microservices. As its main contribution, a framework provides guidance
for architects during the three phases of a migration. We refer to meth-
ods, techniques, and approaches based on a variety of scientiﬁc studies
that have not been made available in a similarly comprehensible manner
before. Through an accompanying tool to be developed, architects will
be in a position to systematically plan their migration, make better in-
formed decisions, and use the most appropriate techniques and tools to
transition their systems to microservices.

Key words: microservices, refactoring, software architecture

1 The Challenge of Moving to Microservices

In times of cloud-based software solutions, the microservices architectural style
has become the de facto standard for large-scale and cloud-native commercial
applications [15]. Technological advancements like containerization and automa-
tion have paved the way for eﬃciently operating almost any number of inde-
pendent functional units. However, existing legacy systems are often designed
as monoliths and can therefore barely beneﬁt from advantages such as improved
scalability, maintainability, and agility through independent deployment units
[11]. Hence, many companies try to migrate their systems towards microservices.

2
2
0
2

l
u
J

1

]
E
S
.
s
c
[

1
v
7
0
5
0
0
.
7
0
2
2
:
v
i
X
r
a

 
 
 
 
 
 
2

Jonas Fritzsch et al.

While a rewrite of the entire application is expensive and often infeasible, archi-
tects are looking for less resource-intensive approaches to modernize a system.
Architectural refactorings that are (partly) automated may reduce eﬀort and
risk of a migration tremendously. Unfortunately, there is no general approach
that ﬁts for arbitrary systems [10]. A thorough analysis is required to choose the
appropriate strategy and refactoring technique.

Early adopters of microservices had to deal with manifold challenges, such
as a lack of technical guidance and best practices, immature tooling, or orga-
nizational aspects. While pioneers like Amazon, Netﬂix, Spotify, and even the
German retailer Otto published on their journeys of microservices adoption, such
exemplary cases do not necessarily qualify as a blueprint. The average enterprise
system has often more sophisticated tasks to fulﬁll than the well-studied retail
domain, and moreover, IT budgets are often tight. Strict compliance and high-
quality requirements do not leave much room for experimentation and failed in-
vestments. Hence, architects often struggle to ﬁnd suitable guidance on planning
and conducting such an architecture change systematically. In the following two
subsections, we brieﬂy summarize our view on the typical progress of a system
migration and describe the gap between academia and industry.

1.1 Three Phases of a Migration

The initiation of a migration is commonly associated with the deﬁnition of strate-
gic goals. Subsequently, quality requirements are determined by all stakeholders
of the systems. They serve as a measure for assessing the legacy system and po-
tential alternatives. Hence, the outcome of this ﬁrst phase should be a grounded
decision for or against a modernization, based on speciﬁc quality attributes and
metrics. While monolith and microservices are not the only possible architectural
styles, we exclusively focus on the contraposition of these two patterns.

Given that the ﬁrst phase resulted in favor of a migration, phase two aims at
deﬁning an adequate migration strategy. One of the two major tasks in this phase
is the deﬁnition of a development process based on diﬀerent types of software
modernization [3]. Distinguishing greenﬁeld and brownﬁeld developments, we
further split up the second in a re-build or re-factor development type. Again,
our focus in this paper is on brownﬁeld developments. Further distinctions can
be made that aﬀect the timeframe and consumption of resources in a migration
process. While a big bang migration aims to minimize the duration, a continuous
evolution approach tries to minimize the needed resources. The other major task
in phase two is the selection of a service identiﬁcation approach. Applied to
the existing system, it will yield a suitable service cut and thereby determine
the granularity of services. Our previous research has shown that deciding on
the decomposition is often a manual task [9] guided by methods like Domain-
Driven Design (DDD). However, a variety of existing artifacts from the legacy
system can be beneﬁcial for automating this task to some extent, e.g., code bases,
databases, version control system data, logs and traces, and various other design
documents or models. They provide valuable input for generating alternative
decompositions in a more eﬃcient way.

Microservices Migrations

3

After the migration has passed system comprehension and planning phases,
the actual implementation phase starts. The elaborated strategy implies bound-
aries for duration, required resources, as well as needed organizational changes.
The latter are in particular relevant as a consequence of altering a system’s ar-
chitecture [7]. Microservices candidates and target architecture are deﬁned ﬁrst,
based on the approach and techniques chosen in phase two. The following imple-
mentation of services commonly iterates through several cycles. A cycle is char-
acterized by the implementation of one or more microservices and a subsequent
quality assessment of the emerging target system. The organizational changes,
infrastructure build-up, and establishment of DevOps processes go hand in hand
with the growing size of the system. That way, inadequacies of the architecture
deﬁnition or even an unsuitable service identiﬁcation approach can be corrected
early with reasonable eﬀort.

1.2 The Academia-industry Gap

A rapidly growing number of scientiﬁc publications deal with the topic of mi-
croservices migrations, as the meta studies by Schroer et al. [13] and Ponce et
al. [12] show. Existing research covers a variety of topics, starting from decision-
making over process strategies [3] to quality assurance [6] and organizational
aspects [9]. The challenging question of service identiﬁcation techniques in gen-
eral [1] and for microservices speciﬁcally is targeted by several dozen studies
[10, 12]. However, our empirical research has shown that this extensive body
of scientiﬁc literature is mostly unknown to practitioners and therefore rarely
leveraged [9]. We found that even specialized consultancy companies do rarely
consider such knowledge. There may be several aspects to this barrier, e.g., reser-
vations regarding scientiﬁc databases, access limitations, or concerns regarding
the practical applicability and relevance of scientiﬁc research. Hence, a key mo-
tivation of our work is in ﬁltering, pre-processing, and presenting the relevant
works to practitioners based on their speciﬁc systems and migration scenarios.

2 Research Design

Figure 1 illustrates our overall research method. The research objective is framed
by the following questions:

1. How can a process framework represent a holistic view on microservice mi-

gration activities with a focus on architectural refactoring techniques?

2. How can tool support based on such a framework provide guidance for ar-

chitects in a speciﬁc migration scenario?

As a foundation, we analyzed existing literature on the microservice migration
process. In an interview study among 16 practitioners from 10 companies, we
analyzed 14 systems from various domains regarding intentions, practices, and

4

Jonas Fritzsch et al.

challenges [9]. In addition, we contributed an early meta study classifying archi-
tectural refactoring approaches for migrations to microservices [10]. Our result-
ing methodology serves as a basis for three longitudinal case studies that are
currently conducted in cooperation DATEV eG and Siemens AG. In an itera-
tive process, the framework and accompanying tool support will be evaluated
and reﬁned. As a ﬁnal step, we plan a large-scale survey among practitioners to
assess the accompanying tools’ applicability in certain contexts, its usefulness,
and usability.

Fig. 1. Research Method

In the following section, we outline additional research foundations that we build
upon and refer to related works.

3 Related Work

According to the outlined research method, we split up the discussion of related
studies into three clusters: 1) migration process, 2) architectural refactoring, and
3) associated aspects like quality assurance and re-organization.

1) Migration Process In their survey among 18 practitioners, Di Francesco et
al. collected the various activities carried out in a migration to microservices [8].
The work provides an empirically collected, bottom-up classiﬁcation of common
activities.

Taibi et al. followed a similar survey-based approach when querying 21 prac-
titioners [14]. They reconstructed a migration process framework that reﬂects
the interviewees’ procedures and best practices. In addition to Di Francesco
et al., they also distinguish between re-development and continuous evolution,
applying the popular Strangler pattern.

Literature Analysis Microservice Migration ProcessMigration Framework DraftLiterature AnalysisArchitectural RefactoringIndustry Expert InterviewsMicroservice MigrationsTool SupportC1C2C3Industry Survey(Framework & Tool Support)C1, C2, C3:Longitudinal Case StudiesRefinementdonein progressplannedMicroservices Migrations

5

Wolfart et al. approach the migration topic more holistically in their work-
in-progress paper [17]. They analyzed six primary studies to come up with a
uniﬁed process. In a related paper, Wolfart et al. propose a migration roadmap
that builds upon this groundwork [16]. To this end, they conduct a more compre-
hensive systematic mapping of 62 primary studies dealing with the moderniza-
tion of legacy systems to microservices. Their resulting framework depicts eight
activities grouped into four phases, namely Initiation, Planning, Execution, and
Monitoring.

In the same way, we can regard the roadmap by Bozan et al. [5] on incre-
mentally transitioning to a microservices architectures, which was distilled from
interviews with 31 software experts. In contrast to the above-mentioned studies,
the authors also reﬂect on the organizational and business-related impacts.

2) Architectural Refactoring The secondary studies by Abdellatif et al.[1],
Bajaj et al. [3], Schroer et al. [13], Ponce et al. [12], and Fritzsch et al. [10]
provide a holistic overview of this major technical challenge in a migration.
Our earlier study [10] attempted a classiﬁcation of approaches based on their
underlying techniques. Abdellatif et al. [1] developed a more elaborate taxonomy
that provides a solid foundation for use in our framework. The majority of studies
can be ascribed to at least one of the three basic categories of techniques: model-
driven, static analysis, and dynamic analysis [12]. In addition, organizational
structures or metadata like version control history [10] can also provide valuable
input.

3) Associated Aspects As initially set strategic goals and subsequently iden-
tiﬁed quality attributes largely steer the architecture transformation, quality
assurance needs a strong focus, as outlined by Shahin et al. [13]. This aspect
is reﬂected in some of the above suggested frameworks during the initial phase
(requirements and strategic goals) or in the form of veriﬁcation and validation
activities. As a basis for assessing the relevance of diﬀerent quality attributes
for microservices in general [4] and in the context of a migration [9], we build
upon our earlier empirical research. It also revealed that organizational changes
and social aspects such as a mindset change can have considerable impact on
the migration process.

Signiﬁcant advances have been made in detailing the process of a migration,
as well as in elaborating techniques for decomposing monolithic systems. How-
ever, there is no holistic methodology available that combines both aspects. In
addition, our research revealed the lack of a vehicle for knowledge transfer into
practice. We aim to address this issue by suggesting a methodology that presents
a holistic view on microservice migration activities, with a focus on architectural
refactoring. It is enriched with a systematic quality assessment and a high de-
gree of process automation. Furthermore, we seek to develop tool support that
guides architects in a migration scenario, thereby allowing them to leverage the
comprehensive body of scientiﬁc knowledge.

6

Jonas Fritzsch et al.

4 Proposed Migration Framework

Figure 2 shows our proposed architecture-centric framework for migrating to mi-
croservices. It incorporates ideas and groundwork of existing research, especially
the works by Wolfart et al. [17, 16]. Aspects of the works by Taibi et al. [14] and
Bozan et al. [5] have inﬂuenced the design as well. According to the discussion in
1.1, we split a migration into three phases. The reﬂected process may be applied
separately for single subsystems as required.

Phase 1 starts with a set of activities aiming to comprehend the existing system
and assess alternatives as described by Wolfart et al. [17, 16]. We depicted the
common activities and involved personas. The activities in this phase are com-
monly performed as part of an architecture review using methods like ATAM,
SAAM, or a more lightweight method, e.g., the one suggested by Auer et al. [2].
The resulting quality assessment links the decision for or against a migration
to microservices to distinct scenarios and associated quality requirements which
the architectural styles in question are favorable for.
Phase 2 entails the two activities described in Section 1.1 to deﬁne the migration
strategy. Depending on the system’s technological state, organizational aspects,
or other boundary conditions, diﬀerent strategies may be chosen. The selection
of a suitable approach and technique for service identiﬁcation depends on several
factors like targeted quality attributes, the available input artifacts, automation
potential and maturity of available tool support.
Phase 3 starts with the identiﬁcation of services and a preliminary deﬁnition of
the target architecture. The incremental implementation of the identiﬁed services
is preceded by a prioritization step. The framework puts a major focus on qual-
ity assurance aspects to ensure that initially deﬁned measures are applied and
satisﬁed. Hence, the implementation activities are accompanied by a scenario-
based analysis and followed by a veriﬁcation & validation step. Deviations from
the targets will consequently lead to altering the deﬁned target architecture or
even considering an alternative service identiﬁcation approach by stepping back
into phase 2.

As an overview of the migration progress, the activities’ result artifacts are
displayed in a ﬂowchart on the right side next to each phase or group of activities.

5 Current Status of Tool Support

We recently conducted an interview study among software professionals on the
framework’s structure and automation capabilities. The methodology is cur-
rently being reﬁned and evaluated within longitudinal industry case studies. In
parallel, we develop tool support in the form of a web-based application to pro-
vide guidance for architects. In phase 1, the tool collects system speciﬁcations
and guides through the architecture assessment. This information serves as a
documentation of the decision-making process and provides input for phase 2,
which represents the tools’ core functionality. Based on an extensible repository

Microservices Migrations

7

Fig. 2. Proposed Framework for Microservices Migrations

of existing approaches for service identiﬁcation and architectural refactoring, the
tool will assist in ﬁnding the appropriate technique for a speciﬁc system. The
maintainable repository serves as a container for a growing list of approaches
that have been published as peer-reviewed research papers. For their classiﬁca-
tion, we build upon the taxonomy proposed by Abdellatif et al. [1] and our own
preparatory work [10]. The guidance provided by the tool in phase 3 will be
realized as a selection of studies supporting the speciﬁc activities.

We see potential for hosting the developed tool publicly and expanding it
by functionality to incorporate user feedback or a rating system. In that regard,
the framework and tool support could facilitate knowledge transfer not just from
academia to industry but also vice versa, thereby contributing to close the gap
highlighted in 1.2.

Phase 3a: Architecture Definition          Phase 3b: Service Implementation Phase 2: Strategy DefinitionPhase 1: System ComprehensionIdentify Quality  Attributes & Scenarios Stakeholders      QualityAssessment  Scenario-basedAnalysisIdentify Microservice  CandidatesDefine Microservices ArchitectureSelect Service  Identification ApproachOrganize Development TeamsDefine Development Strategy and Process Prioritize ServicesImplement ServicesVerification &ValidationUnderstand  Legacy System Result Artifact  System Comprehension Activitiy StrategyDefinition  Activity ArchitectureDesign Activity ServiceImplementationActivity LegendArchitectsAssess ArchitectureAlternatives Set Strategic Goals (Business, Organization) Define Infrastructure      MigrationStrategy      ServiceComposition     Microservices System AssociatedActivities 8

Jonas Fritzsch et al.

References

1. Abdellatif, M., Shatnawi, A., Mili, H., Moha, N., Boussaidi, G.E., Hecht, G., Privat,
J., Gu´eh´eneuc, Y.G.: A taxonomy of service identiﬁcation approaches for legacy
software systems modernization. Journal of Systems and Software 173 (mar 2021)
2. Auer, F., Lenarduzzi, V., Felderer, M., Taibi, D.: From monolithic systems to

Microservices: An assessment framework (apr 2021)

3. Bajaj, D., Bharti, U., Goel, A., Gupta, S.C.: A Prescriptive Model for Migration
to Microservices Based on SDLC Artifacts. Journal of Web Engineering (jun 2021)
4. Bogner, J., Fritzsch, J., Wagner, S., Zimmermann, A.: Microservices in Industry:
Insights into Technologies, Characteristics, and Software Quality. In: 2019 IEEE
International Conference on Software Architecture Companion (ICSA-C). pp. 187–
195. IEEE (mar 2019)

5. Bozan, K., Lyytinen, K., Rose, G.M.: How to transition incrementally to microser-

vice architecture. Communications of the ACM 64(1), 79–85 (jan 2021)

6. Cojocaru, M.D., Oprescu, A., Uta, A.: Attributes assessing the quality of microser-
vices automatically decomposed from monolithic applications. 18th International
Symposium on Parallel and Distributed Computing, ISPDC 2019 (1), 84–93 (2019)

7. Conway, M.: Conway’s Law, http://melconway.com/Home/Conways Law.html
8. Di Francesco, P., Lago, P., Malavolta, I.: Migrating Towards Microservice Archi-
tectures: An Industrial Survey. In: Proceedings - 2018 IEEE 15th International
Conference on Software Architecture, ICSA 2018. pp. 29–38 (2018)

9. Fritzsch, J., Bogner, J., Wagner, S., Zimmermann, A.: Microservices Migration in
Industry: Intentions, Strategies, and Challenges. In: IEEE International Conference
on Software Maintenance and Evolution (ICSME). pp. 481–490. IEEE (sep 2019)
10. Fritzsch, J., Bogner, J., Zimmermann, A., Wagner, S.: From Monolith to Microser-
vices: A Classiﬁcation of Refactoring Approaches. Lecture Notes in Computer Sci-
ence, vol. 11350, pp. 128–141. Springer International Publishing, Cham (2019)
11. Jamshidi, P., Pahl, C., Mendonca, N.C., Lewis, J., Tilkov, S.: Microservices: The

journey so far and challenges ahead. IEEE Software 35(3), 24–35 (2018)

12. Ponce, F., M´arquez, G., Astudillo, H.: Migrating from Monolithic architecture to
microservices: A Rapid Review. In: Proceedings of 38th International Conference
of the Chilean Computer Science Society (SCCC 2019), Chile (2019)

13. Schr¨oer, C., Kruse, F., Marx G´omez, J.: A Qualitative Literature Review on Mi-
croservices Identiﬁcation Approaches. In: Communications in Computer and In-
formation Science, vol. 1310, pp. 151–168 (2020)

14. Taibi, D., Lenarduzzi, V., Pahl, C.: Processes, Motivations, and Issues for Mi-
grating to Microservices Architectures: An Empirical Investigation. IEEE Cloud
Computing 4(5), 22–32 (sep 2017)

15. Vale, G., Correia, F.F., Guerra, E.M., Rosa, T.d.O., Fritzsch, J., Bogner, J.: Design-
ing Microservice Systems Using Patterns: An Empirical Study on Quality Trade-
Oﬀs (jan 2022)

16. Wolfart, D., Assun¸c˜ao, W.K.G., da Silva, I.F., Domingos, D.C.P., Schmeing, E.,
Villaca, G.L.D., Paza, D.d.N.: Modernizing Legacy Systems with Microservices: A
Roadmap. In: Evaluation and Assessment in Software Engineering. pp. 149–159.
ACM, New York, NY, USA (jun 2021)

17. Wolfart, D., Schmeing, E., Geraldino, G., Villaca, G., Paza, D., Paganini, D.,
Assun¸c˜ao, W.K.G., Da Silva, I.F., Santander, V.F.A.: Towards a Process for Mi-
grating Legacy Systems into Microservice Architectural Style. In: Anais da IV
Escola Regional de Engenharia de Software (ERES 2020). pp. 255–264. Sociedade
Brasileira de Computa¸c˜ao (nov 2020)

