2
2
0
2

p
e
S
1
1

]
E
S
.
s
c
[

1
v
0
6
8
4
0
.
9
0
2
2
:
v
i
X
r
a

Using Quantum Computers to Speed Up
Dynamic Testing of Software

Andriy Miranskyy

Department of Computer Science, Toronto Metropolitan University
(formerly Ryerson University), Toronto, ON M5B2K3 Canada
avm@ryerson.ca

Abstract

Software under test can be analyzed dynamically, while it is being executed, to ﬁnd defects.
However, as the number and possible values of input parameters increase, the cost of dynamic
testing rises.

This paper examines whether quantum computers (QCs) can help speed up the dynamic
testing of programs written for classical computers (CCs). To accomplish this, an approach is
devised involving the following three steps: (1) converting a classical program to a quantum
program; (2) computing the number of inputs causing errors, denoted by K, using a quantum
counting algorithm; and (3) obtaining the actual values of these inputs using Grover’s search
algorithm.

This approach can accelerate exhaustive and non-exhaustive dynamic testing techniques. On
the CC, the computational complexity of these techniques is O(N ), where N represents the
count of combinations of input parameter values passed to the software under test. In contrast,
on the QC, the complexity is O(ε−1(cid:112)N/K), where ε is a relative error of measuring K.

The paper illustrates how the approach can be applied and discusses its limitations. Moreover,
it provides a toy example executed on a simulator and an actual QC. This paper may be of
interest to academics and practitioners as the approach presented in the paper may serve as a
starting point for exploring the use of QC for dynamic testing of CC code.

1

Introduction

Dynamic testing is an essential part of the software development process. It helps to uncover
and eliminate the software’s defects by executing the software and comparing actual and expected
outputs.

The ideal scenario would be to test all possible execution paths in a software program using
all possible inputs in order to detect defects. This approach is referred to as exhaustive testing.
While such testing will not eliminate all defects, it will improve our chances of ﬁnding less obvious
failure-inducing bugs (which is crucial for mission-critical software [16]). For a suﬃciently large
program, this approach is not feasible on a classical computer (CC), as the number of execution
paths grows exponentially.

To reduce the number of paths we must execute, we use various testing techniques (e.g.,
equivalence partitioning, boundary value analysis, and orthogonal array testing [26]). We will refer
to these techniques collectively as non-exhaustive testing. Although these techniques can help us
detect some defects in a reasonable amount of time, they may miss some defects that would be
found through exhaustive testing.

1

 
 
 
 
 
 
The contribution of this paper is to demonstrate that a quantum computer (QC) can accelerate
dynamic testing1, both exhaustive and non-exhaustive. We will explore how Grover’s algorithm [14, 9]
combined with a quantum counting algorithm [9, 10, 3] can help us accomplish this goal.

The rest of the paper is organized as follows. Section 2 introduces quantum algorithms required
to ﬁnd defects in CC software. Section 3 provides an overview of dynamic testing on a QC and
illustrates it with examples. Section 4 discusses the limitations of this testing approach. Finally,
Section 5 concludes the paper.

2 Required algorithms and tools

Let us explore algorithms and tools that enable dynamic software testing using QC.

2.1 Grover’s algorithm

Grover’s algorithm [14] is often described as a quantum algorithm for searching an unsorted database
with N entries for a single item. An unsorted database search on a CC requires O(N ) computations.
Grover’s algorithm requires only O(
N ) computations on a QC; it is known that Grover’s algorithm
is optimal up to a sub-constant factor [7]. This algorithm can be generalized to search for K items
requiring O((cid:112)N/K) calculations [9].

√

However, Grover’s algorithm is designed to solve a more generic problem. Instead of searching
for an index of an element in a database, it ﬁnds (with a high probability) an input to function f
that produces a particular output value.

Grover’s algorithm requires a speciﬁc form for function f . It is a boolean function with bit
string input x = {0, 1}n and a return value of 0 or 1. It is important to note that input x can be
interpreted as an integer (by mapping the bit string to an integer): x = {0, 1, . . . , N − 1}, where
N = 2n.

By convention, the search criterion is satisﬁed when f (x) = 1. We are interested in ﬁnding
speciﬁc values of x that yield f (x) = 1. We denote these values as ω. We can think of the search as
an inversion of f (x) = 1, i.e., ω = f −1(1).

Then, we need to deﬁne a subroutine Uω (often called an oracle) that acts as follows:

Uω|x(cid:105) =

(cid:40)

|x(cid:105)
−|x(cid:105)

if x (cid:54)= ω, i.e., f (x) = 0,
if x = ω, i.e., f (x) = 1,

where Uω is a diagonal unitary matrix:


Uω = (−1)f (x) =

(−1)f (0)
0
...
0






0
(−1)f (1)

0
0

· · ·
· · ·
. . .
· · ·

0
0
...
(−1)f (N −1)








.

To represent the oracle on a QC, we need only n = (cid:100)log2 N (cid:101) qubits, where (cid:100)·(cid:101) is the ceiling function.
From here on, for simplicity’s sake, we will refer to f (x), rather than Uω, as an oracle.

Algorithm 1 shows the steps in Grover’s algorithm once the Uω is deﬁned. Grover’s iteration

count r(N, K) is given by

r(N, K) =

(cid:38)

π
4

(cid:114)

(cid:39)

,

N
K

1It was shown that various phases of the software development lifecycle, including testing, can be accelerated by

QCs [21]. However, testing of execution paths was not addressed in [21].

2

where K is the number of ω values yielding f (x) = 1. The computation of r(N, K) is trivial if K is
known. The next step is to ﬁgure out how to calculate K without knowing it beforehand.

Algorithm 1: Grover’s algorithm.
1 Initialize the QC to the uniform superposition over all states: |s(cid:105) = 1√
N
2 for i ← 1 to r(N, K) do

(cid:80)N −1

x=0 |x(cid:105);

/* Compute "Grover iteration"
Apply Uω;
Apply the Grover diﬀusion operator Us = 2|s(cid:105)(cid:104)s| − I, where I denotes an identity matrix;

*/

3

4

5 Measure the resulting quantum state.

2.2 Quantum counting algorithm

If the value of K is unknown, it can be estimated on a QC to within relative error ε using the
quantum counting algorithm [9, 10], which combines ideas from Grover’s and Shor’s [30] algorithms.
Quantum counting has a computational complexity of O(ε−1(cid:112)N/K). Quantum counting takes the
oracle as input. Another user-supplied input, which controls output quality, is ε. The algorithm
returns a value of K, which is ≤ N .

There exist several simpliﬁed versions of the counting algorithm (see [3] for a review). For
example, [3] improved the algorithm by removing Shor’s-speciﬁc parts. Computational complexity
of [3] changes to O(ε−1 log(δ−1)(cid:112)N/K), where δ is another input parameter2.

2.3 Reduce software program to an f (x)

Now let us take a look at converting CC software into QC software. Assume that a classical function
g((cid:126)z) represents an arbitrary CC software program. In order to integrate g((cid:126)z) into Grover’s algorithm,
we must reduce it to f (x). Below, we will discuss how to alter the g((cid:126)z) body, inputs, and outputs.

2.3.1 Body of g((cid:126)z)

It is theoretically possible to convert any CC program into a QC program (because QC implements a
quantum Turing machine [6, 2]), but there are limitations and practical considerations (see Section 4).
Essentially, a classical algorithm is converted into reversible circuits [19], which are then converted
into quantum circuits [8]. These conversions can be done automatically.

Several nascent tools for converting classical to quantum circuits already exist. Qiskit, for
example, allows compiling a classical function to a quantum circuit transparently (by adding the
decorator @classical function). Qiskit converts classical circuits to quantum circuits using the
Tweedledum library [27]. Currently, the compilation is limited to binary inputs/outputs and logical
operators (see Section 3.1.1 for an example). Another example is the staq toolkit, which can convert
classical Verilog circuits to a quantum assembly language (QASM) [5]. Finally, StaﬀCC compiler [17]
extension RKQC [15] is also capable of compiling classical circuits to QASM (including integer
addition and multiplication operations [33]).

Hopefully, the abovementioned tools will evolve in the future to enable the conversion of any

classical program.

2Algorithm [3] returns ˆK, which “satisﬁes K(1 − ε) < ˆK < K(1 + ε) with probability at least 1 − δ” [3].

3

Algorithm 2: Using a QC to dynamically test software for a CC. Only Steps 2 and 8 are
computed (mainly) on a QC; the rest are executed on a CC.

Input
Output : A list of values of (cid:126)z causing g((cid:126)z) to return errors denoted by v

: CC software g((cid:126)z)

1 Convert CC software g((cid:126)z) to f (x) as discussed in Sec. 2.3;
2 Compute K using a quantum counting algorithm described in Sec. 2.2;
3 if K = 0 then
v ← empty list ;
4
5 else if K = N then
6
7 else

v ← all possible values of (cid:126)z ;

// all tests pass

// all tests fail

/* some tests fail, i.e., 0 < K < N
*/
Find all ω (values of x causing bugs, i.e., those where f (x) = 1) using Grover’s algorithm
shown in Sec. 2.1;
v ← convert ω to (cid:126)z format (see example in Eq. 1).

8

9

2.3.2 Input to g((cid:126)z)

Section 2.1 discussed the possibility of interpreting input x into f as a bit string. Furthermore, bit
strings can represent arbitrary complex data structures. Thus, to convert (cid:126)z into x, we must convert
(cid:126)z into a bit string.

For example, imagine that (cid:126)z has two elements: an integer z1 and a 3-character string z2, i.e.,
g((cid:126)z) = g(z1, z2). Furthermore, suppose that storing an integer and a string character requires 64
and 8 bits, respectively. We will need 88 = 64 + 3 × 8 bits to represent the input, i.e., N = 288.

2.3.3 Output of g((cid:126)z)

Software programs may produce any output (or no output at all), whereas f (x) should return either
zero or one. We can satisfy this requirement by wrapping3 g((cid:126)z) in code that returns an exit code of
0 on success and 1 on error (similar to operating system exit status codes).

3 Dynamic testing

Algorithm 2 shows how QC can be used to test a software product dynamically. The algorithm
leverages the “building blocks” covered in Section 2. We will discuss two cases of how to use the
algorithm for exhaustive and non-exhaustive testing below.

3.1 Exhaustive testing

Suppose we need to implement a function g((cid:126)z). We want to ensure that none of the possible values
of (cid:126)z result in an error in our implementation of this function. We will follow the steps described in
Algorithm 2 to accomplish this. Here is a toy example of using the algorithm.

3We can also leverage try-catch blocks in high-level programming languages.

4

Algorithm 3: Sample CC pseudocode under test.

Input
Output : y

: z1, z2

(z1 = 3 and z2 = false) or (z1 = 2 and z2 = true) then
/* Error-prone business logic goes here
y ← 1

1 if

2
3 else

/* Correct business logic goes here
y ← 0

4

*/

*/

3.1.1 Example

Suppose we implement a function g(z1, z2), where z1 is a 2-bit integer and z2 is a boolean variable.
The next step is to test our implementation of g(z1, z2).

Suppose we inject two defects, e.g., g(z1, z2) returns incorrect results when z1 = 3 and z2 = false
or when z1 = 2 and z2 = true. Algorithm 3 gives a trivial example of such code. Code review of
Algorithm 3 immediately reveals the problem. Of course, in real-world scenarios, we would not
know these values of (cid:126)z upfront; this simpliﬁcation is for demonstration purposes only.

Step 1 of Algorithm 2 converts g(z1, z2) into f (x). As z1 and z2 can be represented by 3-bit
strings, N = 23 = 8. The ﬁrst two bits of the bit string store an integer z1, while the last bit stores
a boolean variable z2.

We will implement our example using Qiskit; code listing can be found on Zenodo [20].
As was described in Section 2.3, converters from a classical to a quantum circuit are still in
their infancy, and Qiskit operates only on binary variables. Thus, we must manually reduce the
code in Algorithm 3 to the format understood by Qiskit (eventually, converters and compilers
will do this automatically). Listing 1 shows the result of the conversion to f (x). Once in this
form, Qiskit’s @classical function decorator automatically converts f (x) to the quantum circuit
(so-called bit-ﬂip oracle [24]) shown in Figure 1.

1 @classical_function
2 # Int1 is Qiskit's bit-level type
3 def oracle(z1_high_bit: Int1, z1_low_bit: Int1, z2: Int1) -> Int1:
4

return (z1_high_bit and z1_low_bit and not z2) or \

5

(z1_high_bit and not z1_low_bit and z2)

Listing 1: A bit-ﬂip oracle obtained by converting g(z1, z2) to f (x).

Using Grover’s algorithm requires a phase-ﬂip oracle [24]. Bit-ﬂip oracles are converted to
phase-ﬂip oracles by placing their return values between NOT and Hadamard gates as shown in
Listing 2. The phase-ﬂip oracle circuit, which we pass to the search algorithm, is shown in Figure 2.
In Step 2 of Algorithm 2, we pass the oracle’s circuit to the quantum counting algorithm4, which
returns K, the number of inputs causing defects. In our case, K = 2. As K (cid:54)= 0 and K (cid:54)= N , we go
to Step 8.

Step 8 of Algorithm 2 involves passing oracle’s circuit to Grover’s algorithm to ﬁnd speciﬁc
input values that cause failures. Using the K value from Step 2, we can calculate the number of
iterations of Grovers’ algorithm: r(N, K) = r(8, 2) = 2.

4Qiskit’s implementation of the quantum counting algorithm [10] is illustrated in [4, Sec. 3.9].

5

3

4

1 def get_phase_flip_oracle(bitflip_oracle, n):
phase_oracle = QuantumCircuit(n+1)
2
phase_oracle.x(n)
phase_oracle.h(n)
phase_oracle.compose(bitflip_oracle.synth(), inplace=True)
phase_oracle.h(n)
phase_oracle.x(n)
return phase_oracle

7

6

5

8
9 input_qubits_count = 3
10 phase_flip_oracle = get_phase_flip_oracle(oracle, input_qubits_count)

Listing 2: Conversion of the bit-ﬂip oracle from Listing 1 to a phase-ﬂip oracle.

1 OPENQASM 2.0;
2 include "qelib1.inc";
3 qreg q[4];
4 ccx q[0],q[1],q[3];
5 ccx q[0],q[2],q[3];

(a) Circuit

(b) Assembly code

Figure 1: The quantum circuit obtained by converting the bit-ﬂip oracle in Listing 1. In OpenQASM,
ccx denotes controlled-controlled-not (Toﬀoli) gate. q0 corresponds to high bit of z1, q1 — to low
bit of z1, and q2 — to z2. Oracle’s return value is stored in q3.

Execution is performed on the Qiskit v.0.37.0 Aer simulator v.0.10.4 (providing an ideal noise-free
QC) as well as on the IBM Quantum r4T Processor v.1.0.38 with ﬁve qubits, namely, ibmq lima [1].
With ibmq lima, we compare the output based on Qiskit’s simulator of ibmq lima as well as the
output from the actual QC.

The output of Grover’s algorithm can be seen in Figure 3. According to the simulators and the
real QC, 110 and 101 are the top-two returned values of ω. However, due to noise, the p-values on
the real QC are lower than those on the simulators.

Step 9 of Algorithm 2 converts ω back to (cid:126)z values:

110
(cid:124)(cid:123)(cid:122)(cid:125)ω

split
−−→ 11
(cid:124)(cid:123)(cid:122)(cid:125)z1

0
(cid:124)(cid:123)(cid:122)(cid:125)z2

from binary
−−−−−−−→ 3
(cid:124)(cid:123)(cid:122)(cid:125)z1

,
false
(cid:124)(cid:123)(cid:122)(cid:125)z2

101
(cid:124)(cid:123)(cid:122)(cid:125)ω

split
−−→ 10
(cid:124)(cid:123)(cid:122)(cid:125)z1

1
(cid:124)(cid:123)(cid:122)(cid:125)z2

from binary
−−−−−−−→ 2
(cid:124)(cid:123)(cid:122)(cid:125)z1

.

true
(cid:124)(cid:123)(cid:122)(cid:125)z2

(1)

These are the values we expected. In other words, Algorithm 2 correctly identiﬁed two inputs that
caused errors in software under test.

3.1.2 Computational complexity

How laborious is Algorithm 2?

In Step 1, code written in a high-level language (e.g., C/C++ or Python) is compiled into a
quantum circuit. Depending on the compiler, the complexity of this process may vary, but compiler

6

q0q1q2q31 OPENQASM 2.0;
2 include "qelib1.inc";
3 qreg q[4];
4 x q[3];
5 h q[3];
6 ccx q[0],q[1],q[3];
7 ccx q[0],q[2],q[3];
8 h q[3];
9 x q[3];

(a) Circuit

(b) Assembly code

Figure 2: The quantum circuit obtained by converting the bit-ﬂip oracle in Figure 1 to phase-ﬂip
oracle. In OpenQASM, x denotes NOT gate, h – Hadamard gate.

(a) Qiskit Aer simulator

(b) Qiskit simulator of ibmq lima

(c) Actual ibmq lima

Figure 3: Results of Grover search. The expected outputs are 101 and 110. Probabilities are
computed based on 1024 shots for simulators and 4000 shots for a real QC ibmq lima (the term
shot refers to a single experiment run). As expected, simulator of an ideal QC (Figure 3a) yields
the most accurate results. Simulated ibmq lima results (Figure 3b) are more optimistic than actual
ibmq lima results (Figure 3c). This can be explained by the actual QC’s performance ﬂuctuating
due to environmental factors.

designers are aiming for O(α2), where α is the size of the input [12]. In practice, even for large code
bases with millions of lines of code, compilation on modern CC is relatively fast.

The computation complexity of Steps 2 and 8 is O(ε−1(cid:112)N/K) and O((cid:112)N/K), respectively [9,
10]. Complexity of Step 9 is proportional to the number of bits required to represent x, i.e.,
O(log2 N ). Therefore, we estimate that the majority of time will be spent on Steps 2 and 8, with
the dominant term O(ε−1(cid:112)N/K).

When comparing exhaustive testing on CC and QC, QC is faster because exhaustive search on a
CC requires O(N ) = O(2n) computations, while on a QC — only O(ε−1(cid:112)N/K) = O(ε−12n/2K−1/2)
computations.

2n/2 grows much slower5 than 2n, but it still increases exponentially. Thus, if our software has
input parameters requiring many bits, the search will become prohibitively expensive, even on a
QC. Therefore, let us explore non-exhaustive testing methods.

5For example, suppose n = 64 bits. Then 2n = 264 ≈ 2 × 1019, while 2n/2 = 232 ≈ 4 × 109.

7

q0q1q2q3XHHX0000010100111001011101110.000.150.300.45Probabilities0.0100.0080.0030.0090.0090.4970.4580.0070000010100111001011101110.000.060.120.180.24Probabilities0.0920.1010.0930.0730.1210.2130.2220.0860000010100111001011101110.000.040.080.120.16Probabilities0.0920.1010.1250.1140.1420.1510.1510.1233.2 Non-exhaustive testing

As discussed in Section 1, in the non-exhaustive case, we test a subset of input parameters N .
Essentially, we want to reduce N and speed up testing.

An example of such an approach is the use of a t-way combinatorial testing to explore diﬀerent
combinations of parameters [18]. A 1-way or 2-way test can catch most defects, but t > 2 is needed
to expose some [18]. As t increases, testing costs quickly rise. Nevertheless, it may be necessary to
ﬁnd these defects (e.g., in mission-critical software [16]).

When t is large, we can use Algorithm 2 to accelerate t-way testing. Step 1 of Algorithm 2 needs
to be modiﬁed to map the values of (cid:126)z to x. For example, a mapping function can be created by
automatically generating a simple lookup table that will be encoded in the circuit.

3.2.1 Example

Let us consider the function g(z3), where z3 is a 64-bit integer, i.e., n = 64). There are only three
input values we want to test, e.g., z3 = {7, 200, 1005}.

We will refer to the number of inputs in a subset as Ns. In our example Ns = 3. To represent
the input, we only need (cid:100)log2 Ns(cid:101) = (cid:100)log2 3(cid:101) = 2 qubits rather than 64 qubits. During compilation,
we would add a data structure that mapped each of these three values to their 64-bit representations
(note that we will still need 64 auxiliary qubits to build oracle’s circuit, but we will only be measuring
the two input qubits).

3.2.2 Computational complexity
We will get O(ε−1(cid:112)Ns/K) = O(ε−12ns/2K−1/2) computations, where Ns = 2ns, if we apply the
complexity analysis logic discussed in Section 3.1.2. Therefore, as long as N (cid:29) Ns, the non-
exhaustive test will be signiﬁcantly faster than the exhaustive test. Moreover, non-exhaustive testing
on a CC would require O(Ns) = O(2ns) computations, so QC will outperform CC.

As we need to add the code to map (cid:126)z to x, the cost of executing the oracle increases compared to
the exhaustive testing case. Nevertheless, such look-up tables can be constructed eﬃciently; e.g., a
hash table’s search complexity is O(1). As a result, the computation time increase will be minimal.

4 Discussion

According to Section 3, dynamic testing might be faster on QC than on CC. Does this approach
have any drawbacks? Section 4.1 discusses blocking issues that prevent the algorithm from becoming
practical. Section 4.2 describes the limitations of this approach, including the types of programs
that can be tested. Section 4.3 concludes with notes on tuning implementation of Algorithm 2.

4.1 Blocking issues

Creation of the oracle f (x) The conversion of classical circuits to quantum circuits has been
an active research area for at least two decades (see [28] for a review). Yet, more work must be done
before practitioners can use them to convert arbitrary CC programs. Speciﬁcally, it will be diﬃcult
for practitioners to use our dynamic testing method without an eﬃcient universal compiler. This
goal can be accomplished with the help of academics and practitioners in the compiler community.
What if the time it takes to generate and compute Grover’s algorithm negates the savings from
the search itself? This may happen if we simply load a database into a QC [31]. The testing

8

method presented in this paper, however, does not explicitly search for database elements but
instead computes the inverse of f (x) = 1, thereby reducing the possibility of such an outcome [31].

Number of shots A noisy intermediate-scale quantum (NISQ) computer requires a high number
of shots to combat noise. Figure 3 illustrates the detrimental eﬀects of noise (compare p-values of
correct answers on simulators and a real QC).

A fault-tolerant QC (FTQC) [24], which employs error-correcting schemes to operate on log-
ical/ideal qubits (constructed from groups of physical qubits [11]), will require fewer shots than
NISQ device. For example, theoretically, if K = 1, the correct answer will likely be obtained with
one shot.

However, as K increases, so does the number of shots (as every shot yields a single value of ω).
The number of shots on FTQC can be estimated by converting our problem to a classical Coupon
Collector problem [13], which tries to determine how many coupons S one needs to buy to collect
K distinct coupons (see [13] for review). In our case, to capture K distinct inputs causing errors,
we need to take, on average, S shots. Assuming that the probability of observing a particular
error-inducing input is 1/K, the expected value of S is given by

E[S] = K

K
(cid:88)

i=1

1
i

= K ln(K) + Kγ +

1
2

+ O

(cid:19)

(cid:18) 1
K

, K → +∞,

(2)

where γ ≈ 0.5772 is the Euler-Mascheroni constant (see [13, p. 5] for details).

In order for the oracle f (x) to be executed quickly, the QC
Speed of quantum computers
should be able to run the circuit eﬃciently. Modern QCs are still relatively slow: e.g., currently,
top IBM’s QC can process 1419 Circuit Layer Operations Per Second (CLOPS) [32]. A future
generation of QCs will resolve this engineering problem.

Timeline Section 3.1.1 demonstrates that dynamic testing of QC may be possible even on a NISQ
device. As with many other quantum algorithms applicable to software engineering tasks, we will
need to wait for a device with a large number of qubits (preferably with good interconnectivity),
high coherence, and high ﬁdelity before the algorithms can be used in practice [21]. Small FTQCs
with such characteristics may appear within ten years [29].

4.2 Limiting issues

CC program types
It is theoretically possible to convert any CC program into a QC program, as
we discussed in Section 2.3.1. For single-threaded, single-process software, this should be relatively
straightforward.

A multi-threaded, multi-process program, however, would be more challenging to convert since
it would require implementation and conversion of the thread and process manager. One would
need to load the code to be tested into a virtual machine and then load this combined codebase
into the quantum circuit.

A similar problem will arise with programs implemented using the async/await pattern, as we

need to convert the supporting libraries.

CC program structure Estimates of computational complexity in Sections 3.1.2 and 3.2.2 are
based on a critical assumption made by Grover: oracle f (x) “can be evaluated in unit time” for

9

any value of x [14]. This assumption governs the computational complexity of Steps 2 and 8 of
Algorithm 2.

However, this assumption is not always valid. For example, f (x) may have a for-loop with x
iterations. Based on max(x) = N = 2n, the execution time of the Oracle, on both CC and QC, will
grow exponentially with n. Although exhaustive testing on the QC will still be faster than on CC,
the execution time may be prohibitive6. Thus, we may have to create a static analyzer that checks
the code of the CC program g((cid:126)z) before conversion and warns the user if such pathological cases are
found.

Note that this pathological code may be less problematic for non-exhaustive testing, because we

can limit the number of parameter values passed to f (x).

In many programs, external services (e.g., a database or a web
Calls to external services
service) must be called. We would not be able to call these services from a QC unless such services
are implemented within the QC (and that is not going to happen soon [22, 23]). As an alternative,
we can simulate the calls to external services using mock and stub objects (see [25, Ch. 4] for
review). The mocked and stubbed code can easily be converted to quantum circuit as part of the
oracle generation process.

4.3 Tuning of Algorithm 2

Count of inputs causing defects Algorithm 2 can potentially be stopped at Step 2 and simply
return K (i.e., the count of inputs causing errors). As a result, the developer can see how many
inputs resulted in errors. However, with this information alone, the developer cannot reproduce
the failures (unless K = 0 or K = N , indicating that all tests pass or fail, respectively). Thus, we
conjecture that a practitioner would usually want to run all the steps of Algorithm 2 and obtain the
actual values of inputs that cause errors.

Parallelism Grover’s search in Step 8 of Algorithm 2 will need to be repeated multiple times
(especially for large values of K, see Eq. 2), since each call will return only one ω value (error-
generating input). We can parallelize Step 8 (since each shot is independent) by compiling Grover’s
circuit and running it on multiple QCs.

5 Summary

This paper showed that dynamic testing of programs written for a CC can be sped up on a QC.
Speciﬁcally, computational complexity decreases from O(N ) to O(ε−1(cid:112)N/K). Simulated and real
QC outputs from a toy example were used to illustrate this approach. A discussion on the limitations
of dynamically testing CC programs on a QC was conducted.

Two key issues must be solved to make the approach practical: (1) converters from classical
to quantum circuits need to be improved, and (2) QCs need to become faster, larger, and more
“robust.” These two issues can be resolved, but a signiﬁcant eﬀort will be required from the academic
and industrial communities.

This work may serve as a starting point for exploring the use of QC for dynamic testing of CC

code. Academics and practitioners are invited to explore this promising ﬁeld of research further.

6Hypothetically, some for-loops may be parallelized on a QC, see [34, Sec. 3.5] for review.

10

Acknowledgement

I would like to thank anonymous reviewers for their thoughtful comments and suggestions! This
research is funded in part by NSERC Discovery Grant No. RGPIN-2022-03886.

References

[1] 2022. IBM Quantum. https://quantum-computing.ibm.com

[2] Scott Aaronson. 2005. Quantum computing, postselection, and probabilistic polynomial-time.
Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences 461, 2063
(2005), 3473–3482.

[3] Scott Aaronson and Patrick Rall. 2020. Quantum approximate counting, simpliﬁed. In Sympo-

sium on Simplicity in Algorithms. SIAM, 24–32.

[4] Amira Abbas, Stina Andersson, Abraham Asfaw, Antonio Corcoles, Luciano Bello, Yael Ben-
Haim, Mehdi Bozzo-Rey, Sergey Bravyi, Nicholas Bronn, Lauren Capelluto, Almudena Carrera
Vazquez, Jack Ceroni, Richard Chen, Albert Frisch, Jay Gambetta, Shelly Garion, Leron
Gil, Salvador De La Puente Gonzalez, Francis Harkins, Takashi Imamichi, Pavan Jayasinha,
Hwajung Kang, Amir h. Karamlou, Robert Loredo, David McKay, Alberto Maldonado, Antonio
Macaluso, Antonio Mezzacapo, Zlatko Minev, Ramis Movassagh, Giacomo Nannicini, Paul
Nation, Anna Phan, Marco Pistoia, Arthur Rattew, Joachim Schaefer, Javad Shabani, John
Smolin, John Stenger, Kristan Temme, Madeleine Tod, Ellinor Wanzambi, Stephen Wood,
and James Wootton. 2020. Learn Quantum Computation Using Qiskit. http://community.
qiskit.org/textbook

[5] Matthew Amy and Vlad Gheorghiu. 2020. staq—A full-stack quantum processing toolkit.

Quantum Science and Technology 5, 3 (2020), 034016.

[6] Paul Benioﬀ. 1980. The computer as a physical system: A microscopic quantum mechanical
Hamiltonian model of computers as represented by Turing machines. Journal of statistical
physics 22, 5 (1980), 563–591.

[7] Charles H Bennett, Ethan Bernstein, Gilles Brassard, and Umesh Vazirani. 1997. Strengths
and weaknesses of quantum computing. SIAM journal on Computing 26, 5 (1997), 1510–1523.

[8] Alan Boji´c. 2014. An approach to source code conversion of classical programming languages into
source code of quantum programming languages. Journal of Information and Organizational
Sciences 38, 2 (2014), 75–82.

[9] Michel Boyer, Gilles Brassard, Peter Høyer, and Alain Tapp. 1998. Tight bounds on quantum

searching. Fortschritte der Physik: Progress of Physics 46, 4-5 (1998), 493–505.

[10] Gilles Brassard, Peter Høyer, and Alain Tapp. 1998. Quantum counting. In International

Colloquium on Automata, Languages, and Programming. Springer, 820–831.

[11] Rui Chao and Ben W Reichardt. 2018. Fault-tolerant quantum computation with few qubits.

npj Quantum Information 4, 1 (2018), 1–8.

[12] Keith D Cooper and Linda Torczon. 2011. Engineering a compiler (2 ed.). Elsevier.

11

[13] Marco Ferrante and Monica Saltalamacchia. 2014. The coupon collector’s problem. Materials

matem`atics (2014), 1–35.

[14] Lov K Grover. 1996. A fast quantum mechanical algorithm for database search. In 28th annual

ACM symposium on theory of computing. ACM, 212–219.

[15] Adam Holmes. 2016. epiqc/RKQC: RKQC is a compiler for reversible logic circuitry. https:

//github.com/epiqc/RKQC

[16] Timo Hynninen, Jussi Kasurinen, Antti Knutas, and Ossi Taipale. 2018. Software testing: Survey
of the industry practices. In 41st International Convention on Information and Communication
Technology, Electronics and Microelectronics (MIPRO). IEEE, 1449–1454.

[17] Ali JavadiAbhari, Shruti Patil, Daniel Kudrow, Jeﬀ Heckey, Alexey Lvov, Frederic T Chong,
and Margaret Martonosi. 2014. ScaﬀCC: A framework for compilation and analysis of quantum
computing programs. In 11th ACM Conference on Computing Frontiers. ACM, 1–10.

[18] D Richard Kuhn, Dolores R Wallace, and Albert M Gallo. 2004. Software fault interactions
and implications for software testing. IEEE trans. on softw. eng. 30, 6 (2004), 418–421.

[19] D Michael Miller, Dmitri Maslov, and Gerhard W Dueck. 2003. A transformation based
algorithm for reversible logic synthesis. In Design automation conference. IEEE, 318–323.

[20] Andriy Miranskyy. 2022. Supplementary material: code listing. https://doi.org/10.5281/

zenodo.7065888

[21] Andriy Miranskyy, Mushahid Khan, Jean Paul Latyr Faye, and Udson C Mendes. 2022.
Quantum Computing for Software Engineering: Prospects. arXiv preprint arXiv:2203.03575
(2022). To appear in Proceedings of the 1st International Workshop on Quantum Programming
for Software Engineering.

[22] Andriy Miranskyy and Lei Zhang. 2019. On testing quantum programs. In 41st Int. Conf. on

Softw. Eng.: New Ideas and Emerging Results (ICSE-NIER). IEEE, 57–60.

[23] Andriy Miranskyy, Lei Zhang, and Javad Doliskani. 2021. On testing and debugging quantum

software. arXiv preprint arXiv:2103.09172 (2021).

[24] Michael A. Nielsen and Isaac L. Chuang. 2010. Quantum Computation and Quantum Informa-

tion: 10th Anniversary Edition. Cambridge Univ. Press.

[25] Roy Osherove. 2013. The Art of Unit Testing: with examples in C# (2 ed.). Manning.

[26] Roger S Pressman and Bruce R. Maxim. 2015. Software engineering: a practitioner’s approach

(8 ed.). McGraw Hill.

[27] Bruno Schmitt and Giovanni De Micheli. 2022. tweedledum: a compiler companion for quantum
computing. In 2022 Design, Automation & Test in Europe Conference & Exhibition (DATE).
IEEE, 7–12.

[28] Raphael Seidel, Colin Kai-Uwe Becker, Sebastian Bock, Nikolay Tcholtchev, Ilie-Daniel Gheorge-
Pop, and Manfred Hauswirth. 2021. Automatic Generation of Grover Quantum Oracles for
Arbitrary Data Structures. arXiv preprint arXiv:2110.07545 (2021).

12

[29] Jaime Sevilla and C Jess Riedel. 2020. Forecasting timelines of quantum computing. arXiv

preprint arXiv:2009.05045 (2020).

[30] Peter W Shor. 1994. Algorithms for quantum computation: discrete logarithms and factoring.

In 35th annual symp. on foundations of comp. sci. IEEE, 124–134.

[31] George F Viamontes, Igor L Markov, and John P Hayes. 2005. Is quantum search practical?

Computing in science & engineering 7, 3 (2005), 62–70.

[32] Andrew Wack, Hanhee Paik, Ali Javadi-Abhari, Petar Jurcevic, Ismael Faro, Jay M. Gambetta,
and Blake R. Johnson. 2021. Scale, Quality, and Speed: three key attributes to measure the
performance of near-term quantum computers. arXiv preprint arXiv:2110.14108 (2021).

[33] Feng Wang, Mingxing Luo, Huiran Li, Zhiguo Qu, and Xiaojun Wang. 2016. Improved quantum

ripple-carry addition circuit. Science China Information Sciences 59, 4 (2016), 1–8.

[34] Mariam Zomorodi-Moghadam, Mohammad-Amin Taherkhani, and Keivan Navi. 2014. Synthesis
and optimization by quantum circuit description language. In Transactions on Computational
Science XXIV. Springer, 74–91.

13

