Quantum Image Representation Methods Using Qutrits

Ankit Khandelwal1,2 and M Girish Chandra2
1Centre for High Energy Physics, Indian Institute of Science, Bengaluru, India
2TCS Research, India
e-mail: ankit27.kh@gmail.com, m.gchandra@tcs.com

Abstract – Quantum Image Processing (QIP)

is a
recent highlight in the Quantum Computing ﬁeld. All
previous methods for representing the images as quantum
states were deﬁned using qubits. One Quantum Image
Representation (QIR) method using qutrits is present
in the literature.
Inspired by the qubit methods and
the higher state-space available for qutrits, multiple
QIR methods using qutrits are deﬁned.
the
ternary quantum gates required for the representations
are described and then the implementation details for ﬁve
qutrit-based QIR methods are given. All the methods
have been simulated in software, and example circuits are
provided.

First,

Keywords – Qutrits, Quantum Image Representation,

Quantum Computation

I. Introduction
QIP research is in a nascent stage. Several qubit QIR
methods are available in the literature. A review summarising
many of them is also available [1]. In particular, FRQI [2],
FRQCI [3], MCQI [4] and QRCI [5] methods are considered
to provide their qutrit extensions in this paper. An approach
to extend the NEQR [6] method was previously followed to
deﬁne the QTRQ [7] method.

it

It

is well known from a long time that

is in
principle possible to use qudits with more than two states
simultaneously [8].
Compared to qubit, qudit systems
provides a larger state space to store and process information,
and can provide certain advantages, for example, reduction of
the circuit complexity [9–11].
In the present work, we are
restricting our focus to qutrit-based computing. It is useful to
note that, there have been physical implementations of qutrit
systems [12, 13]. Rigetti1 has also announced experimental
access to qutrits. While Cirq [14] already provides qudit
simulation functionality,
is also under development at
PennyLane [15].

it

2
2
0
2

l
u
J

9
1

]
h
p
-
t
n
a
u
q
[

1
v
6
9
0
9
0
.
7
0
2
2
:
v
i
X
r
a

A. Single Qutrit Ternary Gates

A corresponding qutrit gate A(i j) can be deﬁned for any
qubit gate A by deﬁning A(i j) such that the action of A is on
(i, j) basis states only (i, j ∈ {0, 1, 2}, i (cid:54)= j) [16]. This allows
us to deﬁne three X gates for qutrits:

X (01) =

X (02) =

X (12) =


0
1

0

0
0

1

1
0

0

1
0
0

0
1
0

0
0
1


0
0

1

1
0

0

0
1

0

(1)

(2)

(3)

By combining the action of these gates, two more single qutrit
gates can be constructed:

1) Single-Shift Gate

The action of this gate on a basis state is given by:

[+1] |x(cid:105) = |(x + 1) mod 3(cid:105)

The gate is deﬁned as:

[+1] = X (01)X (12)

2) Double-Shift Gate

The action of this gate on a basis state is given by:

[+2] |x(cid:105) = |(x + 2) mod 3(cid:105)

The gate is deﬁned as:

[+2] = X (12)X (01)

(4)

(5)

(6)

(7)

The paper is organised as follows. The qutrit quantum
gates used in implementing the representations are deﬁned in
Section II. The steps to implement the new qutrit-based QIR
methods are deﬁned and described in Section III. Conclusion
and pointers for future work are provided in Section IV.

II. Qutrit Gates
The qutrit gates used in the implementations are described

in this section.

1https://medium.com/rigetti/beyond-qubits-unlocking-the-third-state-in-

quantum-processors-12d2f84133c4

This construction can be used to deﬁne Hadamard (H(i j))
gates too.
these versions do not create an equal
But,
superposition state.

3) Ternary Hadamard Gate

The qutrit extension of the qubit Hadamard gate as deﬁned

in [7] is considered in this paper.

H =


1

1

1

1
√
3

1
2πi
3
4πi
3

e
e






1
4πi
3
8πi
3

e
e

(8)

1

 
 
 
 
 
 
The action of the Hadamard gate on the basis states is given
by:

H |0(cid:105) =

H |1(cid:105) =

H |2(cid:105) =

1
√
3
1
√
3
1
√
3

(|0(cid:105) + |1(cid:105) + |2(cid:105)) ,

(cid:16)

|0(cid:105) + e

2πi
3 |1(cid:105) + e

(cid:17)

4πi
3 |2(cid:105)

(cid:16)

|0(cid:105) + e

4πi
3 |1(cid:105) + e

(cid:17)

8πi
3 |2(cid:105)

,

,

(9)

(10)

(11)

This version of the qutrit Hadamard gate can thus be used on
the |0(cid:105) state to get to an equal superposition of the three basis
states without any phase.

III. Qutrit Quantum Image Representation

Methods
Some QIR methods using qutrits are described in this
section. Cirq has been used to simulate these methods. Cirq
provides basic functionality to use qudits by allowing use of
custom quantum gates that can be deﬁned for any dimension
qudit. The gates used in the paper are not natively available
and were deﬁned with the deﬁnitions given in the previous
section before use. The images considered for encoding are of
dimension 3n × 3n.

4) Ternary Rotation Gates

The deﬁnition of elementary one-qutrit gates as given in

[16] is considered.

R(i j)
α (θ ) = exp

(cid:18) −i
2

θ σ ( j k)
α

(cid:19)

, j < k, α ∈ {x, y, z}

(12)

σ ( j k)
z = | j(cid:105) (cid:104) j| − |k(cid:105) (cid:104)k|
σ ( j k)
x = | j(cid:105) (cid:104)k| + |k(cid:105) (cid:104) j|
σ ( j k)
y = −i | j(cid:105) (cid:104)k| + i |k(cid:105) (cid:104) j|

(13)

(14)

(15)

Note that these rotation gates can also be obtained by using the
previous construction.

The construction can also be used to get extensions of

general single-qubit rotation gate U(θ , φ , δ ). For example:

U (12)(θ , φ , δ ) =


1
0

0

0
cos θ
2
eiφ sin θ
2





0
−eiδ sin θ
2
ei(δ +φ ) cos θ
2

(16)

5) Ternary Identity Gate

The identity gate for qutrits is the 3D identity matrix.

I =





1 0
0 1
0 0


0
0

1

Its action on a state |ψ(cid:105) is given as:

I |ψ(cid:105) = |ψ(cid:105)

B. Controlled Qutrit Gates

(17)

(18)

Control qutrits for ternary gates can be in any of the
three basis states. Thus, for each single-qutrit gate, three
different controlled variations of two-qutrit gates (the control
qutrit can be in any of |0(cid:105) , |1(cid:105) or |2(cid:105) state), nine different
three qutrit gates (the control qutrits can be in any of
|00(cid:105) , |01(cid:105) , |02(cid:105) , |10(cid:105) , |11(cid:105) , |12(cid:105) , |20(cid:105) , |21(cid:105) or |22(cid:105) state) and
so on are possible. The decomposition of any such gate can
be assured using the universality of qudit logic [10].

2

(a) Grayscale Image

(b) RGB Image

Fig. 1. Grayscale and RGB images considered for example in the
paper.

TABLE I
The pixel values for the RGB image in Figure 1b. The R
values taken alone make the pixel values for the grayscale
image in Figure 1a.

Y

0
1
2

37
72
203

0

R

235
255
133

1

140
137
79

2

192
204
252

0

129
237
25

2

178
101
139

0

B

20
146
252

1

254
212
234

2

G

144
71
134

1

X

A. FQRI
Inspired by the qubit FRQI method, the Flexible Qutrit
Representation of Quantum Images (FQRI) is proposed. The
image information is encoded in a quantum state given by the
formula:

|I(θ )(cid:105) =

1
3n

32n−1
∑
i=0

(cos θi |0(cid:105) + sin θi |1(cid:105) + 0 |2(cid:105)) ⊗ |i(cid:105)

(19)

2n + 1 qutrits are required to encode a 3n × 3n image with
2n qutrits used to encode the location information, and the
remaining qutrit is used to encode the pixel values. The pixel
values are encoded in the θi values where θi ∈ [0, π/2]. For an
8-bit grayscale image, the pixel values are in the range [0, 255],
which are then scaled to be in θ ’s range.

The state can be prepared in two steps. First, the qutrit
Hadamard gate (H) is applied on the 2n qutrits to create a
superposition state. Then R(01)
(2θi) gates controlled on the 2n
location qutrits are applied. Formally:
1. Begin with |0(cid:105)⊗(2n+1) state.
2. Apply transform H = I ⊗ H⊗2n:

y

012X012Y012X012YH |0(cid:105)⊗(2n+1) =

1
3n |0(cid:105) ⊗

32n−1
∑
i=0

|i(cid:105) = |H(cid:105)

(20)

3. Apply 2n controlled R(01)

y

(2θi) gates (Ri) for each pixel

state |i(cid:105):

(cid:32)

Ri =

I ⊗

(cid:33)

| j(cid:105) (cid:104) j|

32n−1
∑
j=0, j(cid:54)=i

+ R(01)
y

(2θi) ⊗ |i(cid:105) (cid:104)i|

(21)

(cid:32)32n−1
∏
i=0

(cid:33)

Ri

|H(cid:105) = |I(θ )(cid:105)

(22)

The decoding of the encoded image is probabilistic and
depends on the number of shots used. The ﬁnal state can be
measured in the computational basis to get the probabilities of
all different basis states. The θi values can be calculated from
the probabilities.

This encoding works well for grayscale images. As only
two of the three possible states of the pixel value qutrit
this encoding can be hypothesised to be
are being used,
implemented with a qubit-qutrit hybrid model where 2n qutrits
are used for encoding the pixel location and a qubit is used for
pixel values.

As mentioned earlier, all three states of the pixel value qutrit
can be utilised to encode RGB information of colour images.
This method is described in the following encoding.

[0, 255]. The image is encoded in the quantum state given by:

|I(θ )(cid:105) =

1
3n

(cid:18)

32n−1
∑
i=0

cos θ gb

i cos θ gr

i

|0(cid:105) + sin θ gb
i

|1(cid:105)

+ cos θ gb
i

sin θ gr
i

|2(cid:105)

(cid:19)

⊗ |i(cid:105)

(23)

and θ gr
i

Here, θ gb
encode the pixel values of G, B and G, R
i
channels respectively of the ith pixel. The three values are
encoded in two angles using the equations:

θ gb
i =

(Gi mod 16) × 256 + Bi
4095

θ gr
i =

(Gi//16) × 256 + Ri
4095

×

×

π
2
π
2

(24)

(25)

The // symbol
represents the ﬂoor division operation.
Because of the particular structure of these equations, all three
pixel values for all pixels can be obtained.

The decoding is probabilistic and depends on the number
of shots used. The state is measured in the computational
basis to get counts of all basis states. Each measurement will
provide us with a ternary string. From this string, the last 2n
values gives us the pixel location and from the ﬁrst value the
probability of getting |0(cid:105) , |1(cid:105) and |2(cid:105) states can be calculated.
2 for the ith pixel,
Let’s call these probabilities pi
then,

1 and pi

0, pi

θ gb
i = sin−1

(cid:18)

3n ×

(cid:113)

(cid:19)

pi
1

θ gr
i = tan−1

(cid:115)

pi
2
pi
0

(a) Shots = 10000

(b) Shots = 100000

This gives,

Bi =

Ri =

(cid:20)(cid:18)

Gi =

(cid:18)

θ gb
i × 4095 ×

(cid:18)

θ gr
i × 4095 ×

θ gb
i × 4095 ×

2
π
2
π

(cid:19)

(cid:19)

(cid:19)

mod 256

mod 256

(cid:21)

//256

(cid:20)(cid:18)

+

θ gr
i × 4095 ×

(cid:19)

(cid:21)

mod 256

× 16

2
π
2
π

To create the state in Eq. 23, the steps to be followed are:
1. Begin with |0(cid:105)⊗(2n+1) state.

(c) Shots = 1000000

2. Apply transform H = I ⊗ H⊗2n:

Fig. 2. Decoded images using FQRI using different number of shots.

B. FQRRI

The Flexible Qutrit Representation of RGB Quantum
Images (FQRRI) is proposed here.. In this encoding, 2n + 1
qutrits are used to encode RGB images. Again assuming 8-
bit images, all R, G and B pixel values will be in the range

H |0(cid:105)⊗(2n+1) =

1
3n |0(cid:105) ⊗

32n−1
∑
i=0

|i(cid:105) = |H(cid:105)

(31)

3. Apply 2n controlled R(01)

y

(2θ gb
i ) gates (Rgr

i ) gates (Rgb
i ) and 2n
i ) for each pixel state

(2θ gr

controlled R(02)

y

3

(26)

(27)

(28)

(29)

(30)

012X012Y012X012Y012X012Y|i(cid:105):

where,

(cid:32)

Rgb

i =

I ⊗

(cid:32)

Rgr

i =

I ⊗

(cid:33)

| j(cid:105) (cid:104) j|

(cid:33)

| j(cid:105) (cid:104) j|

32n−1
∑
j=0, j(cid:54)=i

32n−1
∑
j=0, j(cid:54)=i

+ R(01)
y

(2θ gb

i ) ⊗ |i(cid:105) (cid:104)i| (32)

+ R(02)
y

(2θ gr

i ) ⊗ |i(cid:105) (cid:104)i| (33)

θ r

j =

θ g
j =

θ b

j =

R j
255
G j
255
B j
255

×

×

×

π
2
π
2
π
2

(36)

(37)

(38)

(cid:32)32n−1
∏
i=0

(cid:33)

Rgr
i

Rgb
i

|H(cid:105) = |I(θ )(cid:105)

(34)

To create the state in Eq. 35, the steps to be followed are:
1. Begin with |0(cid:105)⊗(2n+1) state.
2. Apply transform H = I ⊗ H⊗2n:

H |0(cid:105)⊗(2n+1) =

1
3n |0(cid:105) ⊗

32n−1
∑
j=0

| j(cid:105) = |H(cid:105)

(39)

3. Apply 2n controlled R(01)
controlled U (12)(2θ g
state | j(cid:105):

j , θ b

y

j ) gates (Rr

(2θ r
j , 0) gates (U gb

j ) and 2n
j ) for each pixel

(cid:32)

Rr

j =

I ⊗

(cid:33)

|k(cid:105) (cid:104)k|

32n−1
∑
k=0,k(cid:54)= j

+ R(01)
y

(2θ r

j ) ⊗ | j(cid:105) (cid:104) j|

(40)

(a) Shots = 10000

(b) Shots = 100000

(cid:32)

U gb

j =

I ⊗

32n−1
∑
k=0,k(cid:54)= j

(cid:32)32n−1
∏
j=0

(cid:33)

|k(cid:105) (cid:104)k|

+U (12)(2θ g

j , θ b

j , 0) ⊗ | j(cid:105) (cid:104) j|

(cid:33)

U gb
j

Rr
j

|H(cid:105) = |I(θ )(cid:105)

(41)

(42)

(c) Shots = 1000000

Fig. 3. Decoded images using FQRRI using different number of
shots.

C. FQRQCI

(a) Shots = 10000

(b) Shots = 100000

The qubit FRQCI method uses the phase to encode an extra
value in the quantum state. This still leaves two angles to
encode three values. This, like FQRRI, needs more shots
to decode the image accurately. The extra state available
in qutrits can be used to encode the three pixel values in
three different angles.
This inspires the Flexible Qutrit
Representation of Quantam Color Images (FQRQCI).

As before, 2n + 1 qutrits are required to encode an RGB
image. The quantum state of the image using this encoding is
given by the formula:

|I(θ )(cid:105) =

1
3n

(cid:18)

32n−1
∑
j=0

cos θ r

j |0(cid:105) + sin θ r

j cos θ g

j |1(cid:105)

+eiθ b

j sin θ r

j sin θ g

j |2(cid:105)

(cid:19)

⊗ | j(cid:105)

(c) Shots = 1000000

Fig. 4. Decoded images using FQRQCI using different number of
shots.

(35)

The decoding is probabilistic. To get back the pixel values,

the following steps need to be performed:
1. Measure the ﬁnal state in the computational basis to get

4

012X012Y012X012Y012X012Y012X012Y012X012Y012X012Yprobabilities of |0(cid:105) and |1(cid:105) (1 p j
1) state of the pixel
value qutrit, while the other qutrits provide information
about the pixel location. Now,

0,1 p j

θ r
j = cos−1

(cid:18)

3n ×

(cid:19)

(cid:113)

1 p j
0

θ g
j = cos−1


3n

(cid:118)
(cid:117)
(cid:117)
(cid:116)





1 p j
1
sin2 θ r
j

(43)

(44)

pixel state |i(cid:105):

(cid:32)

Ri

r =

I ⊗

(cid:32)

Ri

g =

I ⊗

(cid:32)

Ri

b =

I ⊗

(cid:33)

| j(cid:105) (cid:104) j|

(cid:33)

| j(cid:105) (cid:104) j|

2
∑
j=0, j(cid:54)=0

2
∑
j=0, j(cid:54)=1

+ R(01)
y

(2θ i

r) ⊗ |0(cid:105) (cid:104)0|

(48)

+ R(01)
y

(2θ i

g) ⊗ |1(cid:105) (cid:104)1|

(49)

(cid:33)

| j(cid:105) (cid:104) j|

+ R(01)
y

(2θ i

b) ⊗ |2(cid:105) (cid:104)2|

(50)

2. Apply the operation U (02)( π

2 , −π, −π) on the pixel
value qutrit and again measure the ﬁnal state in the
computational basis to get (2 p j

0,2 p j
1).

3.

Separately, apply the operation U (02)( π
2 ) on the
pixel value qutrit and again measure the ﬁnal state in the
computational basis to get (3 p j

2 , − π

2 , π

0,3 p j
1).

4. Get the θ b

j value as:

θ b
j = tan−1

(cid:32) 3 p j
2 p j

0 −3 p j
0 −2 p j

1

1

(cid:33)

(45)

2
∑
j=0, j(cid:54)=2
Ri
r
32n−1
∑
j=0, j(cid:54)=i

Ri = Ri
b
(cid:32)

Ri
g

Ri =

I⊗2 ⊗

(cid:33)

| j(cid:105) (cid:104) j|

+ Ri ⊗ |i(cid:105) (cid:104)i|

(cid:32)32n−1
∏
i=0

(cid:33)

Ri

|H(cid:105) = |I(θ )(cid:105)

(51)

(52)

(53)

j gates are controlled R(01)

The Ri
applied on the ﬁrst
controlled by the last 2n qutrits.

y

j) gates that are
two qutrits, which are in turn

(2θ i

D. MCQRI

The qubit MCQI method uses 2n + 3 qubits to encode
colour images with 2n qubits used to encode pixel location,
two qubits used to specify which colour to encode and the last
qubit to encode the pixel value. The extra third state in qutrits
can be used to specify which colour to use in a single qutrit.
Thus, only 2n + 2 qutrits can be used to encode RGB images.
Inspired by this, the Multi-Channel Qutrit Representation for
Quantum Images (MCQRI) is proposed.

The quantum state of the image is given by the formula:

(a) Shots = 10000

(b) Shots = 100000

|I(θ )(cid:105) =

1
√
3

3n

(cid:18)

32n−1
∑
i=0

cos θ i

r |00(cid:105) + cos θ i

g |01(cid:105) + cos θ i

b |02(cid:105)

sin θ i

r |10(cid:105) + sin θ i

g |11(cid:105) + sin θ i

b |12(cid:105)

(cid:19)

⊗ |i(cid:105)

(46)

The pixel values are encoded in the θ i
j ∈
[0, π/2] by scaling. The following steps are followed to get
to this state:
1. Begin with |0(cid:105)⊗(2n+2) state.

j values where θ i

2. Apply transform H = I ⊗ H⊗2n+1:

H |0(cid:105)⊗(2n+2) =

1
√
3

3n

|0(cid:105) ⊗

32n−1
∑
j=0

| j(cid:105) = |H(cid:105)

(47)

3. Apply three controlled R(01)

y

(2θ i

j) gates (Ri

j) for each

(c) Shots = 1000000

Fig. 5. Decoded images using MCQRI using different number of
shots.

The decoding is probabilistic and depends on number of
shots used. The original image can be obtained by measuring
the state in the computational basis. Let ppp denote the array
of probabilities obtained after measuring the state. Assuming
that the array is ordered in ascending order of the states, the
size of the array will be 32n+2. It can be divided into three
equal parts. The ﬁrst 32n+1 values correspond to cos values
and the next 32n+1 values correspond to sin values. Let these
be denoted by ppp111 and ppp222 respectively. The last 32n+1 values

5

012X012Y012X012Y012X012Ywill be zero. Now,

ccciii =

1
2

cos−1 (cid:16)

32n+1 × (pppiii

(cid:17)
111 − pppiii
222)

(54)

These ccciii values are the θ i
j values from Eq. 46. Again, this
array can be divided into three equal parts. The ﬁrst part
corresponds to R values, next to G values and the last to B
values which can then be scaled back to the range [0, 255] to
obtain the original image.

One can also think of implementing this as a qubit-qutrit

hybrid model with 2n + 1 qutrits and one qubit.

E. QRCIQ
All the previous encodings had probabilistic decoding. The
encoding considered here provides a deterministic decoding
process. The QTRQ method is the qutrit extension of the qubit
NEQR method. The Quantum Representation model of Color
Digital Images using Qutrits (QRCIQ), the qutrit extension of
the qubit QRCI method is proposed.

The encoding requires 2n + 2 + 3 qutrits to encode RGB
images. Here, 2n qutrits are required to encode pixel location,
next two qutrits are used to encode the bit plane number
and the remaining three qutrits encode the bit plane value.
Assuming 8-bit images, the quantum state is given by the
formula:

|I(cid:105) =

1
3n+1

5
∑
b=0

32n−1
∑
i=0

(cid:12)
(cid:12)Ri

bGi

bBi
b

(cid:11) ⊗ |i(cid:105)

(55)

Here, b represents the bit plane number and Ri
b is the
RGB bit value of the ith pixel of bth plane. The bit plane values
are ∈ {0, 1, 2}. The state is prepared using the following steps:
1. Begin with |0(cid:105)⊗(2n+2+3) state.
2. Apply transform H = I ⊗ I ⊗ I ⊗ H⊗2n+2:

bGi

bBi

H |0(cid:105)⊗(2n+2) =

1
3n+1 |000(cid:105) ⊗

32n−1
∑
j=0

| j(cid:105) = |H(cid:105)

(56)

3.
4.

5.

b = 0, where C ∈ {R, G, B}, do nothing.
b = 1, apply [+1] gate on the C qutrit controlled by

If Ci
If Ci
2n + 2 qutrits with control state |b(cid:105) ⊗ |i(cid:105).
If Ci
2n + 2 qutrits with control state |b(cid:105) ⊗ |i(cid:105).

b = 2, apply [+2] gate on the C qutrit controlled by

The decoding is deterministic as after measuring the state in
the computational basis, the mere presence of a basis state
provides all information it encodes. The bit string of the
basis state can be decoded to give the pixel location, bit
plane number and the bit plane pixel value.
It is important
to note here that extra states will be present in the ﬁnal state
corresponding to unused bit planes. As two qutrits can encode
32 = 9 bit planes and only six are required for an 8-bit image
using ternary strings, three bit planes are empty, corresponding
to b = 6, 7 or 8. Thus, while decoding, these states need to
be discarded.
It’s possible to envision that these available
"slots" can be populated to provide extra information about
the images or facilitate processing or error correction.

(a) Shots = 50

(b) Shots = 500

Fig. 6. Decoded images using QRCIQ using different number of
shots.

2 , π

Remark
The encodings that have a probabilistic decoding, use
inverse trigonometric functions to calculate the encoded pixel
values. These functions have a ﬁnite domain, for example,
sin−1 : [−1, 1] → [− π
2 ]. The values calculated using a
ﬁnite number of shots may fall outside the domain of these
functions. Thus, the values need to be clipped to stay in the
domain to get a valid result. The accuracy of the calculated
values can be improved by increasing the number of shots.
While QRCIQ does not have a probabilistic decoding and does
not depend on the number of shots used, it still requires a
minimum number of shots to observe all basis states at least
once. Once all states have been observed, increasing the
number of shots will have no effect on the decoding.

IV. Conclusion and Future Work
A few implementations to represent images as quantum
states using qutrits have been described. All of these were
validated using simulations with Cirq; the circuit diagrams of
which are shown in Figures 7 to 11 and the decoded images are
shown in Figures 2 to 6. While the decoding is probabilistic
for most of them and depends on the number of shots used,
it is also important to note that decoding the image is not
the only use case for these representations. Different image
processing tasks can be performed on the ﬁnal quantum state
[17–20]. Machine Learning tasks like classiﬁcation can also
be performed on the qutrit quantum representation of the
images as performed with qubit QIRs [21, 22].
from the universality of qudit

the
decomposition of the multi-qutrit gates used can be assured,
the decompositions have not been looked at in this paper.
Research can be done to ﬁnd optimal decompositions of the
gates. More representations can be studied to utilise the extra
state available in qutrits. Appropriate use of the empty slots
can also be studied. Comparison of different representations
on their effectiveness in various image processing tasks can
also be explored.

While

logic,

References
1. Su, J., Guo, X., Liu, C. & Li, L. A New Trend
of Quantum Image Representations. IEEE Access 8,
214520–214537 (2020).

2. Le, P. Q., Dong, F. & Hirota, K. A ﬂexible representation
of quantum images for polynomial preparation, image

6

012X012Y012X012Y12. Yurtalan, M. A., Shi, J., Kononenko, M., Lupascu, A.
& Ashhab, S. Implementation of a Walsh-Hadamard
Gate in a Superconducting Qutrit. Phys. Rev. Lett. 125,
180504. https : / / link . aps . org / doi / 10 . 1103 /
PhysRevLett.125.180504 (18 Oct. 2020).

13. Blok, M. S. et al. Quantum Information Scrambling on
a Superconducting Qutrit Processor. Phys. Rev. X 11,
021010. https : / / link . aps . org / doi / 10 . 1103 /
PhysRevX.11.021010 (2 Apr. 2021).

of

C.

list

Cirq

authors

v0.14.1.

14. Developers,

version
on Github:

See
full
https://github
.com/quantumlib/Cirq/graphs/contributors. Apr. 2022.
https://doi.org/10.5281/zenodo.6599601.
15. Bergholm, V. et al. PennyLane: Automatic differentiation
of hybrid quantum-classical computations 2018. https:
//arxiv.org/abs/1811.04968.

16. Di, Y.-M. & Wei, H.-R. Elementary gates for ternary
quantum logic circuit 2011. https : / / arxiv . org /
abs/1105.5485.

17. Anand, A., Lyu, M., Baweja, P. S. & Patil, V. Quantum
Image Processing 2022. https://arxiv.org/abs/
2203.01831.

18. Ruan, Y., Xue, X. & Shen, Y. Quantum Image
Processing:
Challenges.
Mathematical Problems in Engineering 2021, 6671613.
ISSN: 1024-123X. https : / / doi . org / 10 . 1155 /
2021/6671613 (Jan. 2021).

Opportunities

and

19. Yan, F. & Venegas-Andraca, S. E. Quantum Image
Processing http : / / dx . doi . org / 10 . 1007 / 978 -
981-32-9331-1 (Springer Singapore, 2020).

20. Caraiman, S. & Manta, V. Image processing using
quantum computing in 2012 16th International
Conference on System Theory, Control and Computing
(ICSTCC) (2012), 1–6.

21. Khandelwal, A., Chandra, M. G. & Pramanik, S.
On Classifying
using Quantum Image
Representation 2022. arXiv: 2206.11509 [quant-ph].

Images

22. Mohsen, A. & Tiwari, M. Image Compression and
Classiﬁcation Using Qubits and Quantum Deep
Learning 2021. https : / / arxiv . org / abs / 2110 .
05476.

compression, and processing operations. Quantum
Information Processing 10, 63–84. ISSN: 1573-1332.
https://doi.org/10.1007/s11128-010-0177-y
(Feb. 2011).

3. Li, P. & Liu, X. Color image representation model and its
application based on an improved FRQI. International
Journal of Quantum Information 16, 1850005. https:
//doi.org/10.1142/S0219749918500053 (2018).

4. Sun, B., Iliyasu, A. M., Yan, F., Dong, F. & Hirota, K.
An RGB Multi-Channel Representation for Images on
Quantum Computers. J. Adv. Comput. Intell. Intell.
Informatics 17, 404–417 (2013).

5. Wang, L., Ran, Q., Ma, J., Yu, S. & Tan, L. QRCI: A new
quantum representation model of color digital images.
Optics Communications 438, 147–158.
ISSN: 0030-
4018. https://www.sciencedirect.com/science/
article/pii/S003040181930015X (2019).

6. Zhang, Y., Lu, K., Gao, Y. & Wang, M. NEQR: a novel
enhanced quantum representation of digital
images.
Quantum Information Processing 12, 2833–2860. ISSN:
1573-1332. https://doi.org/10.1007/s11128-
013-0567-z (Aug. 2013).

7. Dong, H., Lu, D. & Li, C. A novel qutrit representation
of quantum image. Quantum Information Processing 21,
108. ISSN: 1573-1332. https://doi.org/10.1007/
s11128-022-03450-8 (Mar. 2022).

8. Kues, M. et al. On-chip generation of high-dimensional
entangled quantum states and their coherent control.
Nature 546, 622–626. ISSN: 1476-4687. https://doi.
org/10.1038/nature22986 (June 2017).

9. Lanyon, B. P. et al. Simplifying quantum logic using
higher-dimensional Hilbert spaces. Nature Physics 5,
134–140. ISSN: 1745-2481. https : / / doi . org / 10 .
1038/nphys1150 (Feb. 2009).

10. Wang, Y., Hu, Z., Sanders, B. C. & Kais, S. Qudits
and High-Dimensional Quantum Computing. Frontiers
in Physics 8.
ISSN: 2296-424X. https : / / www .
frontiersin . org / articles / 10 . 3389 / fphy .
2020.589504 (2020).

11. Ralph, T. C., Resch, K. J. & Gilchrist, A. Efﬁcient Toffoli
gates using qudits. Phys. Rev. A 75, 022313. https :
/ / link . aps . org / doi / 10 . 1103 / PhysRevA . 75 .
022313 (2 Feb. 2007).

7

|0(cid:105)

|0(cid:105)

|0(cid:105)

R(01)
y

(0.45)

R(01)
y

(2.88)

R(01)
y

(1.72)

R(01)
y

(0.88)

R(01)
y

(3.13)

R(01)
y

(1.68)

R(01)
y

(2.49)

R(01)
y

(1.63)

R(01)
y

(0.97)

H

H

0

0

0

1

0

2

1

0

1

1

1

2

2

0

2

1

2

2

Fig. 7. The circuit diagram for the FQRI representation for the image in Figure 1a.

|0(cid:105)

|0(cid:105)

|0(cid:105)

R(01)
y

(0.14)

R(02)
y

(2.39)

R(01)
y

(0.02)

R(02)
y

(1.95)

R(01)
y

(0.39)

R(02)
y

(1.68)

R(01)
y

(2.43)

R(02)
y

(2.41)

R(01)
y

(1.49)

R(02)
y

(0.98)

R(01)
y

(2.72)

R(02)
y

(2.85)

R(01)
y

(2.46)

R(02)
y

(3.1)

R(01)
y

(1.37)

R(02)
y

(1.67)

R(01)
y

(1.95)

R(02)
y

(0.26)

H

H

0

0

0

0

0

1

0

1

0

2

0

2

1

0

1

0

1

1

1

1

1

2

1

2

2

0

2

0

2

1

2

1

2

2

2

2

Fig. 8. The circuit diagram for the FQRRI representation for the image in Figure 1b.

|0(cid:105)

|0(cid:105)

|0(cid:105)

R(01)
y

(0.46) U (12)(2.37, 2.19, 0)

R(01)
y

(2.9) U (12)(1.77, 0.25, 0)

R(01)
y

(1.72) U (12)(1.59, 3.13, 0)

R(01)
y

(0.89) U (12)(2.51, 1.24, 0)

R(01)
y

(3.14) U (12)(0.87, 1.8, 0)

R(01)
y

(1.69) U (12)(2.92, 2.61, 0)

R(01)
y

(2.5) U (12)(3.1, 1.71, 0)

R(01)
y

(1.64) U (12)(1.65, 3.1, 0)

R(01)
y

(0.97) U (12)(0.31, 2.88, 0)

H

H

0

0

0

0

0

1

0

1

0

2

0

2

1

0

1

0

1

1

1

1

1

2

1

2

2

0

2

0

2

1

2

1

2

2

2

2

Fig. 9. The circuit diagram for the FQRQCI representation for the image in Figure 1b.

|0(cid:105)

|0(cid:105)

|0(cid:105)

|0(cid:105)

8

R(01)
y

(0.46)

R(01)
y

(0.89)

R(01)
y

(2.5)

R(01)
y

(2.9)

R(01)
y

(3.14)

R(01)
y

(1.64)

R(01)
y

(1.72)

R(01)
y

(1.69)

R(01)
y

(0.97)

R(01)
y

(2.37)

R(01)
y

(2.51)

R(01)
y

(3.1)

R(01)
y

(1.77)

R(01)
y

(0.87)

R(01)
y

(1.65)

R(01)
y

(1.59)

R(01)
y

(2.92)

R(01)
y

(0.31)

R(01)
y

(2.19)

R(01)
y

(1.24)

R(01)
y

(1.71)

R(01)
y

(0.25)

R(01)
y

(1.8)

R(01)
y

(3.1)

R(01)
y

(3.13)

R(01)
y

(2.61)

R(01)
y

(2.88)

H

H

H

0

0

0

1

0

0

2

0

0

0

1

0

1

1

0

2

1

0

0

2

0

1

2

0

2

2

0

0

0

1

1

0

1

2

0

1

0

1

1

1

1

1

2

1

1

0

2

1

1

2

1

2

2

1

0

0

2

1

0

2

2

0

2

0

1

2

1

1

2

2

1

2

0

2

2

1

2

2

2

2

2

Fig. 10. The circuit diagram for the MCQRI representation for the image in Figure 1b.

|0(cid:105)

|0(cid:105)

|0(cid:105)

|0(cid:105)

|0(cid:105)

|0(cid:105)

|0(cid:105)

· · ·

· · ·

· · ·

· · ·

· · ·

· · ·

· · ·

+1

1

0

0

2

+1

+2

+2

+2

+2

+1

+1

+1

+2

+1

+1

+1

+2

+1

+2

+1

+1

+2

+1

+1

+1

+1

+2

+1

+2

+2

+1

+2

+2

+1

+1

0

0

2

0

H

H

H

H

0

0

0

1

0

0

1

2

+1

+1

+1

+2

+2

+2

+2

+2

0

0

2

2

0

1

0

0

0

1

0

0

0

1

0

1

0

1

0

2

0

1

0

2

0

1

1

0

0

1

1

0

0

1

1

0

0

1

1

1

0

1

1

1

0

1

1

2

0

1

2

0

0

1

2

1

0

1

2

1

0

1

2

1

0

1

2

2

0

1

2

2

0

2

0

0

0

2

0

0

0

2

0

0

0

2

0

1

0

2

0

1

0

2

0

2

0

2

0

2

+2

0

2

0

2

+1

0

2

1

0

0

2

1

0

0

2

1

0

+2

0

2

1

1

0

2

1

1

0

2

1

1

+1

+2

0

2

1

2

0

2

2

1

0

2

2

1

0

2

2

2

0

2

2

2

1

0

0

0

1

0

0

0

1

0

0

1

1

0

0

1

· · ·

· · ·

· · ·

· · ·

· · ·

· · ·

· · ·

+1

+1

+1

+2

+1

+1

+2

+2

+1

+1

+2

+1

+2

+1

+2

+1

+1

+2

+2

+1

+1

+1

+2

+2

+2

+2

+2

1

0

0

2

1

0

0

2

1

0

1

0

1

0

1

0

+2

1

0

1

1

1

0

1

1

1

0

1

1

+2

1

0

1

2

+1

1

0

2

0

1

0

2

0

1

0

2

0

1

0

1

2

1

0

1

2

+2

+2

+1

+2

+1

+1

+2

+1

1

0

2

1

1

0

2

1

1

0

2

1

1

0

2

2

1

0

2

2

1

1

0

0

1

1

0

1

1

1

0

2

1

1

0

2

1

1

0

2

1

1

1

0

1

1

1

0

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

2

1

1

1

2

1

1

2

0

1

1

2

1

1

1

2

2

1

2

0

0

+1

1

2

0

0

+1

+2

+2

+2

+2

+2

+2

1

2

0

0

1

2

0

1

1

2

0

2

1

2

0

2

+1

1

2

0

2

+1

1

2

1

2

+2

1

2

2

0

1

2

2

0

1

2

2

0

1

2

2

1

1

2

2

1

+2

1

2

2

1

1

2

2

2

1

2

1

1

1

2

1

2

Fig. 11. The circuit diagram for the QRCIQ representation for the image in Figure 1b.

(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
(cid:47)
