2
2
0
2

n
u
J

3
1

]
E
S
.
s
c
[

1
v
3
8
0
6
0
.
6
0
2
2
:
v
i
X
r
a

Dataset: Dependency Networks of Open Source Libraries
Available Through CocoaPods, Carthage and Swift PM

Kristiina Rahkema
University of Tartu
Tartu, Estonia
kristiina.rahkema@ut.ee

Dietmar Pfahl
University of Tartu
Tartu, Estonia
dietmar.pfahl@ut.ee

ABSTRACT
Third party libraries are used to integrate existing solutions for
common problems and help speed up development. The use of
third party libraries, however, can carry risks, for example through
vulnerabilities in these libraries. Studying the dependency networks
of package managers lets us better understand and mitigate these
risks. So far, the dependency networks of the three most important
package managers of the Apple ecosystem, CocoaPods, Carthage
and Swift PM, have not been studied. We analysed the dependen-
cies for all publicly available open source libraries up to December
2021 and compiled a dataset containing the dependency networks
of all three package managers. The dependency networks can be
used to analyse how vulnerabilities are propagated through tran-
sitive dependencies. In order to ease the tracing of vulnerable li-
braries we also queried the NVD database and included publicly
reported vulnerabilities for these libraries in the dataset.

CCS CONCEPTS
• Software and its engineering → Empirical software valida-
tion.

KEYWORDS
datasets, iOS, dependency network, package manager, mobile apps

ACM Reference Format:
Kristiina Rahkema and Dietmar Pfahl. 2022. Dataset: Dependency Networks
of Open Source Libraries Available Through CocoaPods, Carthage and Swift
PM. In 19th International Conference on Mining Software Repositories (MSR
’22), May 23–24, 2022, Pittsburgh, PA, USA. ACM, New York, NY, USA, 5 pages.
https://doi.org/10.1145/3524842.3528016

1 INTRODUCTION
Third party libraries allow developers to use existing solutions for
common tasks and speed up development. For almost every popu-
lar programming language there is at least one package manager
that can be used to manage these dependencies.

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA
© 2022 Association for Computing Machinery.
ACM ISBN 978-1-4503-9303-4/22/05. . . $15.00
https://doi.org/10.1145/3524842.3528016

A recent vulnerability in the popular log4j java logging library
aﬀected around four percent of all projects in the Maven reposi-
tory [11]. In 2015, a vulnerability in the popular iOS third party li-
brary AFNetworking was found. The vulnerability aﬀected around
1000 iOS applications with millions of users [1]. Apps can not only
be aﬀected when they directly depend on these libraries, but also
when their dependencies or dependencies of dependencies depend
on these vulnerable library version.

The dependency network of a package manager contains all li-
braries distributed through this package manager and their depen-
dency relationships with other libraries. Dependency networks,
including their growth and vulnerability, have been studied thor-
oughly for many package managers such as, among others, npm,
RubyGems and Cargo [3, 6].

Both Decan et al. [3] and Kikas et al. [6] highlighted diﬀerences
between package managers and how policies and quality of the
standard library of a language can aﬀect the dependency network
structure. So far the dependency networks for the package man-
agers used in iOS development (CocoaPods, Carthage and Swift
Package Manager) have not been studied.

We start closing this gap by creating a dataset1 containing the
dependency networks for libraries provided through CocoaPods,
Carthage and Swift Package Manager. The dataset contains infor-
mation on open source library versions provided through CocoaPods,
Carthage and Swift Package Manager, dependency relationships
between these versions and information on publicly disclosed vul-
nerabilities in the NVD database.

2 RELATED WORK
There are diﬀerent ways to construct the dependency network of
a package manger. Li et al. [7] created a project dependency graph
for Java Maven projects where each node represents a project and
edges between nodes denote the inter-dependency requirements,
for example "> 5.0.0" if all versions starting with the major version
5 are allowed.

Kikas et al. [6] created a dependency graph for JavaScript, Ruby
and Rust ecosystems and analysed their evolution. They discussed
diﬀerent approaches for the dependency network construction and
highlighted the importance of storing the dependencies between
actual versions of libraries as opposed to an aggregated approach
where dependencies are connections between library nodes with-
out version information. Dependencies between versions were found
by analysing the package manager manifest ﬁles. Dependency con-
straints that allowed the use of multiple library versions were han-
dled by observing which library versions would have been the best
match at the time when the current library version was released.

1https://zenodo.org/record/6376009 [9]

 
 
 
 
 
 
MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

Kristiina Rahkema and Dietmar Pfahl

The biggest dataset containing information on library depen-
dencies is the newest (2020) version of the open dataset provided
by libraries.io [5]. The dataset contains data on 32 package man-
agers and three source code repositories. For many pacakge man-
agers the data includes dependency data between all versions of
libraries. Data on the corresponding software repositories also con-
tains information on the dependency constraints used, this data is
however based on the last snapshot of the project repository. In
2019 Decan et al. [3] studied the evolution of dependency networks
for seven diﬀerent package managers using the 2017 libraries.io
dataset. The package managers CocoaPods, Carthage and Swift
Package Manager were not included in the study as the dataset
only included data on dependencies between software repositories
and there was no data on dependencies between library versions.

The data on dependencies between library versions for CocoaPods,

Carthage and SwiftPM is also missing from the newest version of
the libraries.io dataset. Data on library versions and dependencies
between library versions is however necessary for the analysis of
dependency network evolution.

To ﬁll this gap we compiled a database containing library depen-
dency information on version level for CocoaPods, Carthage and
SwiftPM package managers. For a more complete picture we also
included data on dependency constraints that can be used similarly
to [7]. Additionally we queried publicly reported vulnerabilities
from the NVD database and matched them to the library versions
in our dataset.

3 DATA COLLECTION METHODOLOGY
For data collation it was necessary to identify libraries that are
available through each package manager, to collect dependency
data for each library and to collect vulnerability data for each li-
brary.

3.1 Package Managers
Developers can include third party libraries into projects in multi-
ple ways. Libraries can be either directly downloaded and imported
manually or developers can use package managers. Use of a pack-
age manager makes it easier to include a new library and foremost
it makes it easier to keep the library up to date. The package man-
agers used in Swift development (i.e. for iOS, Mac OS and Watch
OS applications) are CocoaPods, Carthage and Swift Package Man-
ager. These package managers are fundamentally diﬀerent.

CocoaPods is a package manager with a central database of li-
braries. If a developer wants to distribute their library through Co-
coaPods they need to create a Podspec ﬁle and add it to the Co-
coaPods Spec repository. This repository is public and can be ac-
cessed by anyone.

Swift Package Manager (Swift PM) is the oﬃcial package man-
ager for Swift. It is however not the most popular package manager
and compatibility with iOS projects was not added until 2019[4].
Swift PM does not have a central list of libraries. Any library that
includes a Package.swift manifest ﬁle can be included through Swift
PM by providing its repository address.

Carthage, similarly to Swift PM, is a decentralized package man-
ager. A library can be included by providing its repository address,
binary location or path on the local ﬁle system.

3.2 Identifying Libraries
Due to the diﬀerences in the package managers, we identiﬁed li-
braries for CocoaPods diﬀerently than for Carthage and Swift PM.
For CocoaPods we cloned the Spec repository2 and extracted all
repository URLs from the Podspec ﬁles. The extracted list included
79557 repository URLs. Among these URL were incorrect values,
such as "./", ".git", "someone@gmail.com". Some URLs were correct
URLs, but they were links to private repositories on company do-
mains.

We discarded all URLs that did not contain github.com or bit-
bucket.org and 73243 URLs (92%) remained. We looked trough these
values and noticed that some of the URLs contained references to
passwords of the form username:password@github.com. We de-
cided to strip these values before the analysis. This leads to us not
being able to access some of the repositories. Nevertheless we as-
sumed that it might have been developers intention to not make
the library code accessible to everyone, although the password and
username combination would be accessible to anyone through the
public Spec repository.

For Carthage and Swift PM we used the libraries.io dataset [5] to
get a list of library names. The set of library names is not complete
since the dataset was compiled in 2020 and new libraries may have
been created after that. We extracted 3880 names for Carthage li-
braries and 4207 names for Swift PM libraries.

We ran our analysis on these three sets of libraries. The anal-
ysis was successful for 56822 CocoaPods libraries, 2118 Swift PM
libraries and 3094 Carthage libraries. We then merged the three
databases. The merged database contained 60084 successfully anal-
ysed libraries.

We then queried libraries that are referenced as dependencies
but that are not analysed. There were a total of 4728 library depen-
dencies of which 1047 were not analysed. We gathered the names
of these libraries and performed a second round of analysis. We
refer to this as library snowballing. There may still exist libraries,
that are available through one of the three package managers, that
are missed by our approach. These libraries however will not have
any dependents and would not be essential to dependency network
analysis.

3.3 Collecting Dependency Data
Dependency data was collected by parsing the manifest ﬁles Pack-
age.swift, Podﬁle and Cartﬁle and package manager resolution ﬁles
Package.resolved, Podﬁle.lock and Cartﬁle.resolved. We extracted
Library names, versions and version constraints from the mainifest
ﬁles and stored the data as library deﬁnitions. We parsed package
manager resolution ﬁles and extracted library dependencies with
names and versions. Package resolution ﬁles contain the exact ver-
sion of each library that the package manager deemed to be the
best match at the time when the developer last updated the depen-
dencies. Package resolution ﬁles also contain information on all
transitive dependencies. Information on both direct and transitive
dependencies were stored in the database.

To match library names extracted from the three package man-
agers it is necessary to "translate" library names. The translation
was done by ﬁnding information on the library repository URL

2https://github.com/CocoaPods/Specs

Dataset: Dependency Networks of Open Source Libraries Available Through CocoaPods, Carthage and Swift PM

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

from the CocoaPods Spec repository. We used the repository user-
name/projectname combination as the library name.

3.4 Library Snowballing
We queried libraries that are referenced as dependencies from other
libraries but were not yet analysed. These libraries included open
source libraries that had not been analysed yet and closed sourced
or local libraries that were not accessible to us.

For each library name that is a dependency through CocoaPods
we were able to extract the repository URL from the Spec reposi-
tory. These libraries should have been already analysed. If some of
these URLs were discarded previously but the repository is acces-
sible to us the project was included in the analysis.

For each library name that was not a dependency through Co-
coaPods, the name was of the form username/projectname. For
each name we tried to query the repository. If we were able to
access the repository the library was analysed. If we were not able
to access the repository the library was ignored.

The snowballing process added 451 additional libraries to the

database.

3.5 Collecting Vulnerability Data
For vulnerability data we used the NVD database3. For each project
that has publicly reported vulnerabilities there is a unique CPE
(Common Product Enumeration) value. We downloaded the CPE
dictionary4. We then went through the dictionary and extracted all
repository URLs and their corresponding CPEs. We are analysing
open source libraries, therefore we decided to extract repository
URLs and ignore all entries that did not include a source reference.
We found 5885 CPE values.

Next, for each library name, we checked if it matched with the
entries in the CPE list. We found 51 matching values. For each CPE
value we queried the NVD database to ﬁnd vulnerabilities related
to each CPE. We checked each library that was matched to a CPE
value to determine if the library was indeed part of the CocoaPods,
Carthage and Swift PM ecosystem. We removed two libraries that
were included through libraries.io, but were not relevant to the
ecosystem. We then matched library versions from the vulnerabil-
ity data with library versions in our database. We found 159 vulner-
abilities in total that aﬀected 41 libraries and 1339 library versions.

4 DATA COLLECTION TOOLS
We developed and used the following open source tools for data
collection: GraphifyEvolution5, SwiftDependencyChecker6 and Li-
braryDependencyAnalysis7 .

4.1 GraphifyEvolution
We developed GraphifyEvolution [8] for bulk analysis of applica-
tions written in Swift. The tool is built in a modular manner and

is designed so that it is easy to include analysis results from ex-
ternal analysers. GraphifyEvolution is able to take a list of appli-
cations and analyse their evolution based on git commits or tags.
For commits the git commit tree is used to determine the evolu-
tion between versions. For git tags the evolution between versions
is determined by the commit timestamp. Our analysis used the git
tag option since tags are normally connected to library versions.
All data is entered into a neo4j database.

4.2 SwiftDependencyChecker
SwiftDependencyChecker [10] was developed to detect if an app
uses dependencies with publicly reported vulnerabilities. Its in-
tended use is as part of the build process inside Xcode to warn
developers about vulnerable dependencies, but it can also be used
to detect dependencies declared though CocoaPods, Carthage and
Swift Package Manager. We integrated SwiftDependencyChecker
into GraphifyEvolution as an external analyser. The external anal-
yser implementation ﬁnds dependencies declared for each project
version and enters libraries and library deﬁnitions into the neo4j
as nodes. Relationships are created between project version and its
direct and indirect dependencies.

4.3 LibraryDependencyAnalysis
We wrote a shell script that ﬁrst ﬁnds libraries that are accessi-
ble from CocoaPods, Carthage and Swift PM. It splits the library
data into batches and runs GraphﬁyEvolution on each batch. The
LibraryDependencyAnalysis script can query library data either
from libraries.io API8, a postgresql database containing the projects
table from the libraries.io data archive[5] or the CocoaPods Spec
repository9. We compiled this database by running the LibraryDe-
pendencyAnalysis script with the postgresql option for Carthage
and Swift PM and the CocoaPods spec repository option for Co-
coaPods project.

5 DATASET DESCRIPTION
The dataset is provided as a neo4j10 database and can be down-
loaded from the database repository11. The database dump can be
loaded with the following command, where –from points to the
database dump ﬁle and –to speciﬁes the name of an empty data-
base:

neo4j-admin load --from=<db-dump> --to=<db-name>

The database can be used with either the free community ver-
sion of the neo4j server or the enterprise version. We also provide
the data in json format, which makes it accessible without using
neo4j.

Neo4j is a graph database where data is represented as nodes
and relationships. Our database contains the following types of
nodes:

• Project: reference to a repository (75323)
• App: released version of a project (572131)
• Library: resolved dependency with exact version (576144)

3https://nvd.nist.gov
4https://nvd.nist.gov/products/cpe
5https://github.com/kristiinara/GraphifyEvolution
6https://github.com/kristiinara/SwiftDependencyChecker
7https://github.com/kristiinara/LibraryDependencyAnalysis

8https://libraries.io/api
9https://github.com/CocoaPods/Specs
10https://neo4j.com/product/neo4j-graph-database/
11https://zenodo.org/record/6376009 [9]

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

Kristiina Rahkema and Dietmar Pfahl

• LibraryDeﬁnition: dependency deﬁnition from manifest ﬁle

with dependency constraints (19390)

• Vulnerability: publicly reported vulnerability from the NVD

database (159)

Nodes are connected through the following six relationships:

• Project - HAS_APP -> App (572286)
• App - IS -> Library (572122)
• App - DEPENDS_ON -> Library (312454)
• App - DEPENDS_ON_INDIRECTLY -> Library (267453)
• App - DEPENDS_ON -> LibraryDeﬁnition (383020)
• Library - HAS_VULNERABILITY -> Vulnerability (3761)

Detailed descriptions on node and relationship properties is given
on the database repository page12. It is possible to generate addi-
tional relationships if needed to ease further analyses. For example,
adding a DEPENDS_ON relationship between Library nodes could
speed up analysing the length of transitive dependency chains.

6 IMPACT AND RESEARCH DIRECTIONS
The database contains the combined dependency networks for Co-
coaPods, Carthage and Swift PM. Compared to other dependency
networks we also added data on openly reported vulnerabilities for
these libraries from the NVD database.

The database can be used to analyse the dependency network
evolution for CocoaPods, Carthage and Swift PM. Dependency net-
work evolution has been studied for many diﬀerent languages [3,
6], but these three package managers have not been analysed be-
fore. This data can be used to analyse the growth and vulnerability
of the Swift dependency ecosystem (including libraries written in
C, C++, and Objective-C, if so requested).

The additional data on publicly reported vulnerabilities allows
the analysis of how vulnerabilities spread through these depen-
dency networks. There is extensive analysis on vulnerabilities in
the npm [2, 12] dependency network. However these results might
not be generalizable to CocoaPods, Carthage and Swift PM. JavaScript
is very diﬀerent from Swift. JavaScript has a very small standard
library, whereas the standard library in Swift and the additional
system libraries for iOS and Mac OS are very extensive. Swift de-
velopers are more wary of including third party libraries in their
projects and might be more inclined to update library versions due
to limited backwards compatibility of Swift.

7 LIMITATIONS AND CHALLENGES
There were certain limitations on which libraries we were able to
analyse and on how exact the vulnerability matching is.

For SwiftPM and Carthage we relied on the data from the li-
braries.io dataset. The list of SwiftPM libraries included many li-
braries where its repository did not include any tags. These libraries
could not be included through the package managers by specifying
a version and were therefore not analysed. In total 50% of the Swift
PM libraries in the libraries.io dataset were discarded. We checked
how many of these libraries were referenced by other libraries and
found that 19 referenced libraries had no tags and were therefore
not analysed.

12https://github.com/kristiinara/LibraryDependencyAnalysis/#readme

CocoaPods libraries that were not available through GitHub or
Bitbucket were discarded. Additionally we ignored any credentials
embedded in the repository URL, as we could not be certain that
this was intentional. In total, we were not able to analyse 29% of
libraries from the CocoaPods spec repository. If there were any de-
pendencies to these libraries, then they still appear in the database
as libraries, but without any additional analysis on their dependen-
cies.

We only included open source libraries in our analysis. Depen-
dencies to closed sourced libraries are included if they are refer-
enced in the package manager resolution or manifest ﬁles, but de-
pendencies of these dependencies are not analysed. A total of 14%
of libraries with dependents are not analysed.

For some library versions package manager manifest ﬁles ex-
isted, but there were no package manager resolution ﬁles. We did
not try to resolve dependencies for these libraries ourselves (13% of
libraries with manifest ﬁles). We did however include information
on dependencies from the manifest ﬁles as library deﬁnitions. As
a future improvement for these versions the dependency informa-
tion from the manifest ﬁles could be used to calculate the resolved
versions at the time when the version was released, as was done
in [6].

Aﬀected CPEs in the vulnerability database were not listed di-
rectly, but as a tree that included operators (such as AND, OR) de-
scribing how the product is aﬀected. We ignored the operator val-
ues and recorded every CPE value that was speciﬁed as vulnerable
to be vulnerable. Vulnerability data on these libraries did not seem
to include any complex rules on which CPEs are really aﬀected by
each vulnerability.

Due to the amount of libraries, ﬁnishing the analysis was chal-
lenging. In total it took 11 days to run the dependency analysis on
all libraries. Fortunately updating this database will take less time,
as it is possible to query last commits that were analysed and start
the new analysis from that point.

8 CONCLUSIONS
We compiled a database containing the library dependency net-
work for CocoaPods, Carthage and Swift PM. So far, the depen-
dency networks of these package managers have not been studied
yet. There are distinctive diﬀerences between Swift and other lan-
guages (for example JavaScript) that could have an eﬀect on its
third party library dependency network.

It is necessary to better understand these diﬀerences to help de-
velopers in protecting their apps against possible vulnerabilities in
third party dependencies as eﬀectively as possible. The inclusion
of vulnerability data allows us to analyse the real world risks that
stem from using outdated dependencies on this platform.

One of our goals was to make this database as easily accessi-
ble as possible. Therefore after the data and neo4j has been down-
loaded the dataset can be imported with a single command. Addi-
tionally all tools used to compile this dataset are open source and
available on GitHub.

The database contains dependency information on 60533 libraries.

There are 312454 dependencies between library versions and a to-
tal of 159 vulnerabilities. It took our script 11 days to analyse all
libraries.

Dataset: Dependency Networks of Open Source Libraries Available Through CocoaPods, Carthage and Swift PM

MSR 2022, May 23–24, 2022, Pittsburgh, PA, USA

ACKNOWLEDGMENTS
Funding of this research came from the Estonian Center of Excel-
lence in ICT research (EXCITE), the European Social Fund via IT
Academy program, the Estonia Research Council grant (PRG 1226),
the Austrian ministries BMVIT and BMDW, and the Province of
Upper Austria under the COMET (Competence Centers for Excel-
lent Technologies) Programme managed by FFG.

[6] Riivo Kikas, Georgios Gousios, Marlon Dumas, and Dietmar Pfahl. 2017. Struc-
ture and evolution of package dependency networks. In 2017 IEEE/ACM 14th
International Conference on Mining Software Repositories (MSR). IEEE, 102–112.
https://doi.org/10.1109/MSR.2017.55

Jinke Song, Dawei Tan, Haining Wang, and Jiqiang Liu.
[7] Qiang Li,
PDGraph: A Large-Scale Empirical Study on Project Depen-
2021.
dency of Security Vulnerabilities.
IEEE/IFIP Interna-
tional Conference on Dependable Systems and Networks (DSN). 161–173.
https://doi.org/10.1109/DSN48987.2021.00031

In 2021 51st Annual

[8] Kristiina Rahkema and Dietmar Pfahl. 2021. GraphifyEvolution-A Modular Ap-
proach to Analysing Source Code Histories. In Proceedings of the IEEE/ACM
8th International Conference on Mobile Software Engineering and Systems. 24–27.
https://doi.org/10.1109/MobileSoft52590.2021.00009

REFERENCES
[1] Lucian Constantin. 2015.

HTTPS snooping ﬂaw in third-party library af-
fected 1,000 iOS apps with millions of users. Retrieved January 11, 2022 from
https://www.computerworld.com/article/2912402/https-snooping-ﬂaw-in-third-party-library-aﬀected-1000-ios-apps-with-millions-of-users.html

Dependency Networks of
Open Source Libraries Available Through CocoaPods, Carthage and Swift PM.
https://doi.org/10.5281/zenodo.6376009

[9] Kristiina Rahkema and Dietmar Pfahl. 2022.

[2] Alexandre Decan, Tom Mens, and Eleni Constantinou. 2018. On the impact of
security vulnerabilities in the npm package dependency network. In Proceed-
ings of the 15th International Conference on Mining Software Repositories. 181–191.
https://doi.org/10.1145/3196398.3196401

[3] Alexandre Decan, Tom Mens, and Philippe Grosjean. 2019.

An empiri-
cal comparison of dependency network evolution in seven software pack-
aging ecosystems.
Empirical Software Engineering 24, 1 (2019), 381–416.
https://doi.org/10.1007/s10664-017-9589-y

[4] Tom

Elliott.

2020.

iOS.

Retrieved
for
https://www.raywenderlich.com/7242045-swift-package-manager-for-ios
[5] Jeremy Katz. 2020. Libraries.io Open Source Repository and Dependency Metadata.

2022

Swift
January

Package
21,

Manager
from

https://doi.org/10.5281/zenodo.3626071

[10] Kristiina Rahkema and Dietmar Pfahl. 2022. SwiftDependencyChecker: Detect-
ing Vulnerable Dependencies Declared Through CocoaPods, Carthage and Swift
PM. In Proceedings of the IEEE/ACM 9th International Conference on Mobile Soft-
ware Engineering and Systems. https://doi.org/10.1145/3524613.3527806

[11] James Wetter and Nicky Ringland. 2021.

of Apache Log4j Vulnerability.
https://security.googleblog.com/2021/12/understanding-impact-of-apache-log4j.html

Understanding the Impact
Retrieved January 11, 2022 from

[12] Markus Zimmermann, Cristian-Alexandru

and
Small World with High Risks: A Study of Secu-
Michael Pradel. 2019.
rity Threats in the npm Ecosystem. In 28th USENIX Security Symposium
(USENIX Security 19). USENIX Association, Santa Clara, CA, 995–1010.
https://www.usenix.org/conference/usenixsecurity19/presentation/zimmerman

Staicu, Cam Tenny,

This figure "libraries2.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/2206.06083v1

This figure "sample-franklin.png" is available in "png"(cid:10) format from:

http://arxiv.org/ps/2206.06083v1

