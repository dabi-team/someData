Towards Comparing Performance of Algorithms in
Hardware and Software

Maja H. Kirkeby
Dept. of People and Technology
Roskilde University,
Roskilde, Denmark
kirkebym@acm.org

Martin Schoeberl
DTU Compute
Technical University of Denmark
Lyngby, Denmark
masca@dtu.dk

2
2
0
2

y
a
M
5
2

]
F
P
.
s
c
[

2
v
4
9
3
3
0
.
4
0
2
2
:
v
i
X
r
a

Abstract—In this paper, we report on a preliminary investiga-
tion of the potential performance gain of programs implemented
in ﬁeld-programmable gate arrays (FPGAs) using a high-level
language Chisel compared to ordinary high-level software im-
plementations executed on general-purpose computers and small
and cheap computers. FPGAs inherently support parallel evalu-
ations, while sequential computers do not. For this preliminary
investigation, we have chosen a highly parallelizable program as
a case study to show an upper bound of performance gain. The
purpose is to demonstrate whether or not programming FPGAs
has the potential for performance optimizations of ordinary
programs.

We have developed and evaluated Conway’s Game of Life for
an FPGA, a small and cheap computer Raspberry Pi 4, and
a MacBook Pro Laptop. We have compared the performance of
programs over different input sizes to decide the relative increase
in runtime.

Index Terms—Time consumption, FPGA, Raspberry Pi,

General-purpose computers

I. INTRODUCTION

Using FPGAs is known to improve the performance when
programmed in the hardware specifying languages such as
Verilog or VHDL [5]. However, these languages are oriented
toward engineers and require highly specialised knowledge.
Therefore, alternative approaches are interesting, such as using
FPGAs as accelerators for C/C++ programs [2] or, as in this
study, where we use the programming language Chisel, which
is oriented toward software developers.

This paper intends to indicate an upper bound for how
much Chisel implementations could improve typical imple-
mentations of software programs. Investigating how accessible
these approaches are for software developers is beyond the
scope of this paper. Instead, to emulate the level of language
familiarity will use a naive solution written in Chisel and
compare it to a naive solution written in Java; according to
Stack overﬂows yearly reports, it has been in the top 5 most
popular programming languages at least since 2017 1.

This work is supported by the Innovation Fund Denmark for the project

DIREC (9142-00001B) and by CERCIRAS Cost Action CA19135.

1https://insights.stackoverﬂow.com/survey/2017

https://insights.stackoverﬂow.com/survey/2020,

https://insights.
https://insights.stackoverﬂow.com/
https:

stackoverﬂow.com/survey/2018,
survey/2019,
//insights.stackoverﬂow.com/survey/2021

FPGA units can support or replace different devices depend-
ing on the algorithm. Therefore we have chosen to compare
the performance of the same algorithm running on an FPGA
with different kinds of computers: a typical general-purpose
computer in the form of a MacBook Pro and a small and cheap
computer, exempliﬁed by a Raspberry Pi.

Because we look for upper bounds, we choose a highly
parallelizable software algorithm, and we limit the size of the
problems it solves to ﬁt into the FPGA without having to
read and write to memory. An example of such an algorithm
program is Conway’s Game of Life [?]. The Game of Life is
an algorithm which exempliﬁes how complex behaviour can
arise from simple rules, e.g., it has been used for constructing
a Turing machine [3].

In the following, we introduce the speciﬁcations of Con-
way’s Game of Life and the different implementations that
we use for comparison. Section III describes our experimental
setup. Section IV evaluates the performance, and Section V
discusses the setup, the resource utilization, and a conservative
estimation of the energy consumption of our experiment.
Section VI concludes the paper and provides an outlook for
future work.

II. CONWAY’S GAME OF LIFE
There are many variations2 of Conway’s Game of Life [?],
which is a zero-player game deﬁned on cellular automata.
In this report, we deﬁne Game of Life as follows. Cellular
automata are 2D-grids, called worlds, where each grid-cell has
eight neighbours, and each cell can have one of two states:
dead or alive. For each time step, the cell states are updated
according to their own and their neighbouring cells’ states
from the previous time step.
Rule 1: Any live cell with two or three live neighbours

survives.

Rule 2: Any dead cell with three live neighbours becomes a

live cell.

Rule 3: All other live cells die in the next generation. Simi-

larly, all other dead cells stay dead.

The initial state is given as input to the program. Because each
cell depends only on nearby cells, Game of Life is highly

2See http://conwaylife.com/.

 
 
 
 
 
 
......
.OO...
.O....
....O.
...OO.
......

......
.OO...
.OO...
...OO.
...OO.
......

......
.OO...
.O....
....O.
...OO.
......

(a)

(b)

(c)

Fig. 1: Beacon: Oscilator

parallelizable. An example with two time steps in Game of
Life can be seen in Figure 1; the ﬁgure displays three 6x6
worlds where ”O” are live cells and ”.” are dead cells. The
left-most grid (1a) is the initial world at time step 0, the middle
grid (1b) is the updated world at time step 1 and the right-
most (1c) is the world at time step 2. The world at timestep
0 and 2 are equal, and patterns with this particular type of
behaviour are oscillators.

A. Software Implementation in Java

We have implemented the Game of Life in Java using 2D
arrays to represent a world. As on optimization, we copy the
initial array that contains the starting world into an array that
is two rows and two columns larger, where the border cells are
dead; this avoids testing for boundary cases when counting live
neighbours. For comparison of the implementations, we have
included the code for computing the next state for a single cell
at position (i,j); the array ”curr” contains the cell’s value at
the current time step and the array ”next” contains the cell’s
value at the next time step.

cnt += curr[i-1][j+k];
cnt += curr[i+1][j+k];

L01 int cnt = 0;
L02 for (int k = -1; k <= 1; ++ k) {
L03
L04
L05 }
L06 cnt += curr[i][j-1];
L07 cnt += curr[i][j+1];
L08 if ((curr[i][j] == 1 && cnt == 2) ||
L09
L10
L11 } else {
L12
L13 }

(cnt == 3)) {
next[i][j] = 1;

next[i][j] = 0;

for the given world size. The registers are reset according to
the starting pattern of the world.

The inputs of the boundary cells are connected to 0 at
hardware construction time. Therefore, those conditions do not
need to be evaluated at run time. This is a similar optimization
to increasing the array size for the software implementation.
The Game of Life hardware is embarrassingly parallel, as
all cells execute in parallel. Each execution is a very simple
function. Therefore, we expect that this circuit can operate at
a high frequency. The whole world is updated with each clock
cycle.

To demonstrate the conciseness of hardware described in

Chisel, we show the full code for a single cell:

L01
L02
L03
L04
L05
L06
L07
L08
L09

val regCell = RegInit(init.B)
val cnt = PopCount(io.in)

when((regCell && cnt === 2.U) ||

cnt === 3.U) {
regCell := true.B

} .otherwise {

regCell := false.B

}

RegInit(init.B) deﬁnes a hardware register for saving
the cell’s value between time steps, i.e., it has the cell’s value
time step (line L01). PopCount(io.in)
from the last
which is given the neighbouring cells’ bit values from the
previous time step as input and returns the number of bit values
that are 1 (line L02). Afterwards, it implements the rules of
Game of Life similarly to the software implementation ((line
L04-L09). Chisel is embedded in Scala, and the ‘.B’ and
‘.U’ are constructors that cast Scala values into Chisel types
Bool and Unsigned integers deciding a suitable number of bits.

III. EXPERIMENTAL SETUP

In the previous section, we described the algorithm and the
implementations, and in this section, we describe the setup for
measuring their performance on different devices. FPGA units
can support or replace various types of devices depending on
the algorithm, and the systems may have different computation
power. Thus, for comparison, we have chosen to evaluate the
performance of both a typical general-purpose computer and
a small and cheap computer.

First, it counts the number of neighbouring cells alive in
the previous step and saves it into the cnt (line L01-L07).
Afterwards, the rules of Game of Life are applied using a
single if-expression (line L08-L13).

B. Hardware Implementation in Chisel

We have implemented the Game of Life in hardware, using
the hardware construction language Chisel [1], [4]. Each cell
consists of a single D ﬂip-ﬂop, a population counter of the
neighbours, and the conditions for staying alive, dying, or
generating a live cell. This simple cell structure is replicated

A. Hardware

In the following experiments, we have compared the execu-
tion times for the implementations described in the previous
section when executed on three devices. The Java imple-
mentation is executed on a general-purpose computer and a
small and cheap computer, and the hardware implementation is
executed on an FPGA board with the following speciﬁcations:

• Typical general-purpose computer: MacBook Pro with
a 2,6 GHz 6-Core Intel Core i7 processor and 16 GB
memory.

Fig. 2: The trend lines (linear regression) of time pr step (in us and ns) over increasing world sizes: 10x10, 20x20, . . ., 100x100.

• Small and cheap computer: Raspberry Pi 4 Model B 4GB
RAM with 1.5GHz with a Broadcom BCM2711, Quad
core Cortex-A72 (ARM v8) 64-bit SoC.

• Hardware: a Altera/Intel Cyclone IV FPGA found on the

DE2-115 evaluation board.

compared to the Java software implementation executed on a
MacBook Pro and the Raspberry Pi. From these results, we
see that the gain in performance increase with the measured
world sizes; in Section V we comment on the limits of these
results.

B. Inputs

To answer how the data input size inﬂuences execution
time, we evaluate the execution time for random worlds with
different world sizes: 10x10, 20x20, . . ., 100x100. For easy
comparison, we consider the average execution time per time
step, and we execute at least 1000000 time steps to obtain
robust results.

IV. PERFORMANCE

We report the average execution times for a single Game
of Life iteration for increasing world sizes, i.e., the average
execution time for computing the next world in the Game of
Life. The Figure 2 depicts -for each of the three devices- the
execution time and their trend lines (linear regression). For
all types of devices, the trend lines show an increase over the
world sizes; however, their growth rates are very different, as
shown in Figure 3.

Table I shows the average execution time for a single time
step and the speedup provided by the FPGA implementation

TABLE I: The execution time in us and speed-up of FPGA
over software executions.

World

10x10
20x20
30x30
40x40
50x50
60x60
70x70
80x80
90x90
100x100

Cells Mac

Execution time pr step (us)
Raspberry

FPGA Mac

FPGA Speedup

100
400
900
1600
2500
3600
4900
6400
8100
10000

0.10
0.33
0.70
1.21
1.81
2.76
3.54
4.81
6.50
7.51

1.783
5.137
9.965
17.212
25.204
37.822
57.665
64.396
81.309
109.964

0.0040
0.0040
0.0041
0.0040
0.0044
0.0045
0.0040
0.0047
0.0045
0.0048

25
82
170
302
411
613
884
1023
1444
1564

Raspberry

445
1284
2430
4302
5728
8404
14416
13701
18068
22909

V. DISCUSSION

The presented results show that the FPGA implementation
of a 40x40 Game of Life world is around 630 times faster than
the software implementation in Java when running on a ten
times higher clocked general purpose processor. Note that the
Altera/Intel Cyclone IV FPGA we are using in this experiment
is a relatively old FPGA. With a newer FPGA, we expect to be
able to implement larger worlds and execute them at a higher
clock frequency.

When increasing the problem size to 100 x 100, the per-
formance difference between the hardware solution and the
software implementation increases linearly. However, this will
not continue when the hardware implementation cannot be
expressed within the number of logic elements available on
the FPGA board. If we were to handle larger world sizes,
the hardware implementation must be redesigned, whereas the
software implementations do not encounter this issue.

its
While the Game of Life is an artiﬁcial workload,
parallelizable nature made it an ideal candidate for indicating
an upper bound for speedups when moving algorithms from
software into an FPGA.

A. Resource Utilization

In the following, we consider the hardware implementa-
tion’s resource utilization and estimate the impact on energy
consumption for running Game of Life on the small computer
and the hardware.

We have implemented the Game of Life of different sizes
in an Altera/Intel Cyclone IV FPGA found on the DE2-115
evaluation board. We report the size of the design in logic
elements (LEs) and registers. An LE represents one 4-bit
lookup table. For synthesize, we used the Quartus 19.1.0 Lite
Edition.

200040006000800010000World Sizes (number of cells)020406080100Time per step (s)Small and cheap computer - Rasperry Pi200040006000800010000World Sizes (number of cells)012345678Time per step (s)General-purpose Computer - MacBook Pro200040006000800010000World Sizes (number of cells)4.04.24.44.64.85.0Time per step (ns)Hardware - Altera/Intel Cyclone IV FPGATABLE II: The resource utilization and minimum iteration
time of different sized Game of Life worlds in an FPGA.

Size

LEs

Registers min. Clock Period

10 x 10
20 x 20
30 x 30
40 x 40
50 x 50
60 x 60
70 x 70
80 x 80
90 x 90
100 x 100

804
3539
7995
14463
23439
34414
45119
59136
75102
97871

104
404
904
1604
2504
3604
4904
6404
8104
10004

4.0 ns
4.0 ns
4.1 ns
4.0 ns
4.4 ns
4.5 ns
4.0 ns
4.7 ns
4.5 ns
4.8 ns

Table II shows the FPGA implementation’s resource con-
sumption for different world sizes. We can see that the size
grows linear. The maximum frequency of the circuit is reported
between 209 MHz and 250 MHz. Therefore, when we assume
running it at 200 MHz, we can compute one iteration in 5 ns.
As expected, we use one register per cell. However, the
number of LEs per cell is surprisingly high, an average of
around 9 LEs per cell. We assume that the Chisel PopCount
method has some room for improvement. However, as we aim
for a method that enables software developers to describe their
algorithms in hardware, we are avoiding optimization tricks.

B. Estimated Energy Consumption

In this experiment, we did not measure the power or energy
consumption of the FPGA implementation. However, the DE2-
115 FPGA board comes with a power supply of 24 W.
Therefore, this is the upper bound of power consumption of the
whole FPGA board, including peripheral devices and external
memories.

For a conservative estimate, we assume those 24 W as
an upper bound on the power consumption and an operating

frequency of 200 MHz; then, one iteration of a 100 x 100
Game of Life world consumes 96 nJ.

In comparison,

the Raspberry Pi has been reported to
consume average 6.4 W when all four cores are busy3 and
one iteration of a 100x100 world takes 0.109964 ms. Thus,
a conservative estimate of the energy consumption for one
iteration of a 100x100 world is 0.703769 mJ.

From this conservative comparison, it seems that the hard-
ware implementation can considerably improve energy con-
sumption compared to the Raspberry Pi 4.

VI. CONCLUSION AND FUTURE WORK

In this paper, we have demonstrated that a hardware imple-
mentation using Chisel compared to software implementations
using Java can provide severe performance optimizations for
highly parallelizable problems and where the hardware im-
plementation can avoid reading and writing from memory.
Therefore, we have established an upper bound of performance
gain and energy reduction when using an FPGA compared to
a general-purpose computer or a small and cheap computer.

In the future, we will extend this research to: (i) Comparing
the parallel hardware implementations’ energy consumption
and performance with parallel programs running on GPUs,
(ii) Studying also often used algorithms, such as path-ﬁnding
algorithms or sorting algorithms, and (iii) Measuring the
energy consumption of the different implementations of the
algorithms in order to study the changes in energy consump-
tion and execution time.

REFERENCES

[1] Jonathan Bachrach, Huy Vo, Brian C. Richards, Yunsup Lee, Andrew
Waterman, Rimas Avizienis, John Wawrzynek, and Krste Asanovic.
Chisel: constructing hardware in a scala embedded language. In Patrick
Groeneveld, Donatella Sciuto, and Soha Hassoun, editors, The 49th
Annual Design Automation Conference 2012, DAC ’12, San Francisco,
CA, USA, June 3-7, 2012, pages 1216–1225. ACM, 2012.

[2] Yomna Ben Jmaa, Rabie Ben Atitallah, David Duvivier, and Maher Ben
Jemaa. A comparative study of sorting algorithms with FPGA acceleration
by high level synthesis. Computaci´on y Sistemas, 23(1):213, 2019.
Turing Machine Universality of

the Game of Life,
volume 18 of Emergence, Complexity and Computation. Springer In-
ternational Publishing, Cham, 2016.

[3] Paul Rendell.

[4] Martin Schoeberl. Digital Design with Chisel. Kindle Direct Publishing,

2019. available at https://github.com/schoeberl/chisel-book.

[5] Yuzhi Zhou, Xi Jin, and Tianqi Wang. FPGA implementation of a∗
Int. J. Reconﬁgurable Comput.,

algorithm for real-time path planning.
2020:8896386:1–8896386:11, 2020.

Fig. 3: Comparison of time pr step (us) over increasing world
sizes: 10x10, 20x20, . . ., 100x100 for the small computer, typ-
ical general-purpose computer and hardware implementation.

3https://www.pidramble.com/wiki/benchmarks/power-consumption

200040006000800010000World Sizes (number of cells)020406080100Time per step (s)All DevicesRasperry PiMacBook ProCyclone IV FPGA