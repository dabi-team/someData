2
2
0
2

y
a
M
9
1

]
h
p
-
t
n
a
u
q
[

1
v
6
7
7
9
0
.
5
0
2
2
:
v
i
X
r
a

mat2qubit: A lightweight pythonic package for qubit encodings of vibrational,
bosonic, graph coloring, routing, scheduling, and general matrix problems

Nicolas P. D. Sawaya
∗
Intel Labs, Santa Clara, California
(Dated: May 23, 2022)

Preparing problems for execution on quantum computers can require many compilation steps.
Automated compilation software is useful not only for easier and faster problem execution, but also
for facilitating the comparison between diﬀerent algorithmic choices. Here we describe mat2qubit,
a Python package for encoding several classes of classical and quantum problems into qubit repre-
sentations. It is intended for use especially on Hamiltonians and functions deﬁned over variables
(e.g. particles) with cardinality larger than 2. More speciﬁcally, mat2qubit may be used to compile
bosonic, phononic/vibrational, and spin-s problems, as well as classical problems such as graph
coloring, routing, scheduling, and classical linear algebra more generally. In order to facilitate nu-
merical analyses and ease of programmability, a built-in computer algebra system (CAS) allows
for fully symbolic preparation and manipulation of problems (with symbolic operators, symbolic
coeﬃcients, and symbolic particle labels) before the ﬁnal compilation into qubits is performed. We
expect this code to be useful in the preparation and analysis of various classes of physics, chemistry,
materials, and optimization problems for execution on digital quantum computers.

I.

INTRODUCTION

When using a qubit-based quantum computer, it is necessary to map problem instances and other primitives to a
Pauli representation. This is true for both quantum Hamiltonians and classical cost functions. Some problems classes
are trivial to map to qubits, for example quantum spin models (since distinguishable spin-half particles are the same
as qubits), and classical optimization problems deﬁned over binary variables (e.g. MaxCut). Other problems require
more sophisticated encoding procedures; for instance, fermionic problems such as the electronic structure problem in
chemistry require the Jordan-Wigner or other encodings [1–5].

Notably, there are many scientiﬁcally and industrially relevant problems that are not most naturally deﬁned over
qubit, fermionic, or classical binary degrees of freedom. Such problems, for which the subsystems often have cardinality
greater than 2, include bosonic [6, 7], vibrational/phononic [8–10], spin-s [11], graph coloring [12–15], routing [16, 17],
and scheduling [18–23] problems, as well as more general classical linear algebra problems. mat2qubit is a Pythonic
software package for encoding these Hamiltonians and cost functions into qubit operators; previously, software had
been developed mainly for compiling fermionic problems [24–26] and classical problems over binary variables [25–28].

The task of interest is to perform mappings of the following class:

X
i

biM (i)

0 ⊗ M (i)

1 ⊗ · · · → X
j

cj O{I, σx, σy, σz}

(1)

where M (i)
α are square matrix operators of arbitrary size, I is the identity, and {σx, σy, σz} are the Pauli matrices.
Each subsystem on the left-hand side maps to a disjoint set of qubits; the compilation procedure is described in
detail in previous work [29, 30]. The current version of mat2qubit allows only for trivial (equivalent to bosonic)
commutation relations, i.e. [M (i)
β ] = 0. This requirement is obeyed by the wide range of quantum and classical
problems discussed in this work, but excludes problems such as many-body Hamiltonians over fermions [1], anyons
[31], or parafermions [32].

α , M (i)

The mapping of equation (1) is not unique; for each subsystem one may in principle choose any integer-to-bitstring
mapping, some of which require more space (qubits) than others. One purpose of this code is to simplify and automate
the implementation of a wide range of encodings. Several previous works have studied the resource tradeoﬀs (for
example depth-space tradeoﬀs) between diﬀerent encodings [8, 16, 29, 30, 33–36]. mat2qubit was developed primarily
for the speciﬁc task of preparing and compiling various problems into qubit representations; for other aspects of the
compilation pipeline and for running the resulting qubit-based problems on quantum computers, we suggest the use
of one of the many actively maintained quantum simulators [25, 26, 28, 37–47] and compilers [26, 28, 37, 45, 47–51].

∗ nicolas.sawaya@intel.com

 
 
 
 
 
 
II. PROGRAM FLOW

2

Here we provide an overview of the mat2qubit program ﬂow, focusing primarily on the most useful front-end
classes and subroutines. The code’s dependencies are scipy, sympy, and openfermion; the main component used
from the latter package is the convenient QubitOperator class. Our primary goal was usability, and as such there are
several potential improvements in terms of computational performance. For instance, the encoding procedure could
be sped up by using linear algebra subroutines related to the Walsh-Hadamard transform [52]; further, the code could
be parallelized using common pythonic packages [53, 54]. Notably, despite the omission of such optimizations, we
have used the code to compile problems up to thousands of qubits and published results up to hundreds of qubits [55],
meaning that the current version may be used for analyses well beyond what existing quantum hardware is capable
of simulating.

A. Operators over d-level subsystems.

Three of the fundamental

front-end classes of mat2qubit

are dLevelSubsystem, compositeDLevels, and
composite Operator (the fourth, qSymbOp, is discussed below). The ﬁrst of these is used to deﬁne a quantum
particle (i.e. “subsystem”). For an operator to be eventually converted into a qubit representation, the parameters d
(cardinality of the variable) and enc (the chosen encoding) must be speciﬁed. The following code deﬁnes a subsystem
with a truncation of 8 levels.

1 import mat2qubit as m2q
2 b o s o n i c _ m o d e _ 1 = m2q . d L e v e l S u b s y s t e m ( d =8 , enc = " stdbinary " )
3 b m 1 _ p a u l i _ o p e r a t o r = b o s o n i c _ m o d e _ 1 . opToPauli ( " ad " )

The third line converts the creation operator (a† ≡ ad) to a qubit representation.

Collections of subsystems are organized using the compositeDLevels class. However, the user will most often
interact with its child class compositeOperator. Subsystems are added using appendSubystem(), and terms are
added using addHamTerm(). The following example implements a two-site Hamiltonian using creation (ad) and
annihilation (a) operators.

1 ss1 = m2q . d L e v e l S u b s y s t e m (4 , " unary " )
2 t w o S i t e O p e r a t o r = m2q . c o m p o s i t e O p e r a t o r ()
3 t w o S i t e O p e r a t o r . a p p e n d S u b s y s t e m ( ss1 ) # Site 1
4 t w o S i t e O p e r a t o r . a p p e n d S u b s y s t e m ( ss1 ) # Site 2
5 t w o S i t e O p e r a t o r . addHamTerm (4.2 , [(1 , " ad " ) ,(0 , " a " ) ] )
6 t w o S i t e O p e r a t o r . addHamTerm (4.2 , [(0 , " a " ) ,(1 , " ad " ) ] )
7 t w o S i t e O p e r a t o r . addHamTerm (0.5 , " ident " ) # Identity
8 p a u l i _ o p e r a t o r = t w o S i t e O p e r a t o r . opToPauli ()

The ﬁnal line converts the operator to a qubit (Pauli) representation. There is no requirement that subsystems have
the same size d; hence heterogeneous quantum systems are allowed. For instance, one may implement a spin-boson
model using a collection of two-level particles and bosonic particles [56]. Nor do subsystems need to use same encoding;
indeed, there may be cases when using diﬀerent encodings for diﬀerent subsystems leads to a compiled operator with
fewer Pauli terms [29].

B. Compiling into qubit operators

Once an operator has been deﬁned, the goal is to implement the mapping of Equation (1). mat2qubit has built-in
options to compile the higher-level multi-particle operator into a qubit operator. The ﬁnal step of this procedure is
to run the opToPauli() method in the last line of the previous section. The built-in encodings are unary (also called
one-hot), standard binary (SB), Gray code, and block unary. The latter is in fact a class of encodings, for which one
must specify the local encoding and the block size g [29, 30, 33]. For a d-level particle, unary requires d qubits, Gray
and SB require ⌈log2 d⌉ qubits, and block unary requires ⌈ d

g ⌉⌈log2(g + 1)⌉, where ⌈·⌉ is the ceiling function.

Note that each particle in the original space is mapped to its own disjoint set of qubits. In principle, more complex
mappings are possible, for example diﬀerent d-level particles could map to the same subset of qubits (perhaps in order
to reduce space requirements), though the current code is not capable of such embeddings.

Novel encodings beyond those mentioned above may be added. To do so, the user must deﬁne functions for both
the integer-to-bit mapping and the bitmask subset, which determines the set of qubits over which a particular matrix
element operates. Previous work discusses this concept more thoroughly [29, 30]. Once these functions are deﬁned
they may be introduced by directly modifying integer2bit.py. Note that the current infrastructure is built to handle

3

encoding parameters as well—for instance, parameters are required in order to fully deﬁne a block unary encoding,
and other user-deﬁned parametrized encodings are allowed.

C.

mat2qubit’s symbolic computer algebra system

For ease of programmability, we have included a computer algebra system (CAS) that simpliﬁes operator algebra.
Our qSymbOp class allows for construction and algebraic manipulation of fully symbolic operators, where local opera-
tors, subsystem (particle) labels, and coeﬃcients may all be deﬁned symbolically. Allowing all three of these entities
to be labelled symbolically allows for improved programmability and readability. For example, one may use symbolic
coeﬃcients and then pass the symbolic object to various functions that implement diﬀerent numerical parameters.
Further, the ability to label subspaces with arbitrary character strings can prevent confusion, for example clarifying
when diﬀerent particles are of diﬀerent types; if one were to model a chain of spins each coupled to a bosonic bath,
one might label spin subsystems with sp0, sp1, etc. and bosonic modes with b0, b1, etc.

The following is an example of the use of qSymbOp, with operators deﬁned over subystems A, B, and C.

1 s y m b o l i c _ o p 1 = m2q . qSymbOp ( " k [ n_A ] ++ j [ p_B ] ++ r [] " )
2 s y m b o l i c _ o p 2 = m2q . qSymbOp ( " k [ q_A ] ++ - r [ p_C ] " )
3 # Product of operators
4 s y m b _ p r o d u c t = s y m b o l i c _ o p 1 * s y m b o l i c _ o p 2
5 # Subsitute numbers in for variables
6 s y m b _ p r o d u c t . scalar_su bs ({ ’k ’ :2.1 , ’j ’: np . pi , ’r ’ :3.})

Multiplication and addition operations may be implemented directly; the background data structures are appropri-
ately updated to ensure there are no duplicate terms. Local operators are stored in order of multiplication as they
may not commute. The ﬁnal line of the above code fragment is used to convert the symbolic coeﬃcients to numerical
values, a step that must be done before the operator is compiled into a qubit representation. The ﬁnal mapping is
performed as follows, where three inputs must be given: the subsystem labels, d values, and encodings.

1 ssid_orde r = [ ’A ’ , ’ B ’ , ’C ’ ]
2 ssid_to_d = [4 ,4 ,6]
3 ssid_to_ en c = [ ’ stdbinary ’ , ’ gray ’ , ’ stdbinary ’] # Mixed mappings
4 dlev_obj = m2q . s y m b o p _ t o _ d l e v c o m p o s i t e o p ( symb_product ,
5 p a u l i _ o p e r a t o r = dlev_obj . opToPauli ()

# H e t e r o g e n e o u s d values

ssid_order , ssid_to_d , ssid_to_e nc )

D. Built-in and user-deﬁned local operators

There are many built-in operators, which are enumerated in the builtInOps list of dLevelSystemEncodings.py.
Some are duplicate; for instance both qhoPos and q may be used for standard bosonic position operator, while qhoMom
and p are both for the momentum operator. Also notable are q2, q3, etc., which denote powers q2, q3, etc. of the
position operator, used especially in molecular vibrational Hamiltonians [8–10]. Sx, Sy, and Sz are the standard spin-s
operators for the three Cartesian directions.

Further, there are built-in operators that can eﬀectively be used to implement the discrete quantum intermediate
representation (DQIR) [30]. The DQIR is an intermediate representation that was previously introduced in order to
facilitate compilation and analysis of classical optimization problems deﬁned over discrete variables. Two “primitives”
of the DQIR are the indicator primitive P (k)
≡ |kihl|α. They are
implemented in mat2qubit as Pr{i} {a} and k{i}b{j} {a} , respectively. For instance,

α ≡ |kihk|α, and the transfer primitive T (k←l)

α

1 Pr3_ss

denotes the projector (indicator primitive) |3ih3| and

1 k2b3_ss

denotes the ket-bra (transfer primitive) |kihl|, both operating on subspace ss. The examples/ directory of the source
shows examples of these indicator primitives being used in problem instances of graph coloring, traveling salesperson,
and machine scheduling. The transfer primitives may be used for example to deﬁne QAOA mixers within the DQIR
[30].

The user is not required to use built-in operator deﬁnitions; arbitrary local d-level operators may be used with
either qSymbOp or compositeOperator objects, in the following manner. For the latter, one may directly insert an
operator string that uses numpy arrays instead of character strings:

1 import numpy as np
2 locop1 = np . random . rand ( d , d )
3 locop2 = np . random . rand ( d , d )
4 t w o S i t e O p e r a t o r . addHamTerm (4.2 , [(1 , locop1 ) ,(0 , locop2 ) ] )

For user-deﬁned local matrix operators in qSymbOp, one may use any alphanumeric character string as long as the
inpOpChars argument is speciﬁed when converting to a qubit operator. In the following example the local opererators
W and V are deﬁned by the user.

4

1 s y m b o l i c _ o p 3 = m2q . qSymbOp ( " 2.0 [ W_A ] ++ 3.0 [ V_B ] ++ r [] " )
2 ssids = ( ’A ’ , ’ B ’) ; ds = dict ( zip ( ssid_order ,[4 ,6]) ) ; encs = ( ’ stdbinary ’ , ’ gray ’)
3 Wrepr = np . random . rand (4 ,4)
4 Vrepr = np . random . rand (6 ,6)
5 dlev_obj = m2q . s y m b o p _ t o _ d l e v c o m p o s i t e o p (
symb_product , ssids , ds , encs ,
6
inpOpChars ={ ’ W ’ : Wrepr , ’V ’: Vrepr }
)

7

8
9 p a u l i _ o p e r a t o r = dlev_obj . opToPauli ()

E. Distribution and examples

The source code and installation instructions are available at github.com/IntelLabs/mat2qubit. The package is
distributed under the Apache 2.0 license. Many examples are available in the repository, where we have implemented
simple instances of the following problem types: Bose-Hubbard models, anharmonic molecular vibrations, interacting
spin- 3
2 models, random tensor trains from classical linear algebra, graph coloring, the traveling salesperson
problem, and machine scheduling.

2 and spin- 5

III. CONCLUDING REMARKS

We have introduced mat2qubit, a lightweight python package for compiling quantum and classical problems into
qubit representations. Speciﬁcally, it is intended for non-fermionic problems like bosonic, phononic, and spin-s
problems, as well as discrete optimization problems like scheduling, routing, and coloring. It may also be used to
encode general matrix problems using various embeddings, as long as the matrix is ﬁrst expressed as a sum of tensor
trains. Theoretical details related to the code have been discussed previously [29, 30]. Before being open sourced,
early versions of this package were used in numerical studies of several classes of Hamiltonian [9, 29, 30, 33, 55, 57, 58].
The current release includes a computer algebra system for deﬁning and manipulating quantum operators for which
coeﬃcients, local operators, and subsystem labels are all symbolic; this is intended to improve programmability,
usability, and interpretability when constructing complex Hamiltonians. One main purpose of the code is to easily
and rapidly implement many encodings for a given problem, in order to compare resource requirements. As quantum
computers become more ubiquitous and their hardware characteristics more varied, such resource comparisons will
be needed in order to determine the most eﬃcient encodings for a given problem and a given set of hardware. In
conclusion, we expect mat2qubit to be useful for compiling a wide variety of problems for quantum computers.

I am grateful for useful discussions with Tim Menke, Stuart Hadﬁeld, Gian Guerreschi, Shavindra Premaratne,

Al´an Aspuru-Guzik, Thi-Ha Kyaw, and Albert Schmitz.

ACKNOWLEDGEMENTS

[1] G. Ortiz,

J. E. Gubernatis, E. Knill, and R. Laﬂamme, Quantum algorithms

for

fermionic

simulations,

Physical Review A 64, 022319 (2001).

[2] S. B. Bravyi and A. Y. Kitaev, Fermionic quantum computation, Annals of Physics 298, 210 (2002).
[3] J. T. Seeley, M. J. Richard, and P. J. Love, The Bravyi-Kitaev transformation for quantum computation of electronic

structure, The Journal of Chemical Physics 137, 224109 (2012).

[4] Y. Cao, J. Romero, J. P. Olson, M. Degroote, P. D. Johnson, M. Kieferov´a, I. D. Kivlichan, T. Menke, B. Peropadre, N. P.

Sawaya, et al., Quantum chemistry in the age of quantum computing, Chemical Reviews 119, 10856 (2019).

5

[5] S. McArdle, S. Endo, A. Aspuru-Guzik, S. C. Benjamin, and X. Yuan, Quantum computational chemistry,

Reviews of Modern Physics 92, 015003 (2020).

[6] R. D. Somma, Quantum computation, complexity, and many-body physics, arXiv preprint quant-ph/0512209 (2005).
[7] J. Liu, J. Sun, and X. Yuan, Towards a variational jordan-lee-preskill quantum algorithm, arXiv preprint arXiv:2109.05547

(2021).

[8] S. McArdle, A. Mayorov, X. Shan, S. Benjamin, and X. Yuan, Digital quantum simulation of molecular vibrations, Chemical

Science 10, 5725 (2019).

[9] N. P. Sawaya, F. Paesani, and D. P. Tabor, Near-and long-term quantum algorithmic approaches for vibrational spec-

troscopy, Physical Review A 104, 062419 (2021).

[10] P. J. Ollitrault, A. Baiardi, M. Reiher, and I. Tavernelli, Hardware eﬃcient quantum algorithms for vibrational structure

calculations, Chemical Science 11, 6842 (2020).

[11] R. Lora-Serrano, D. J. Garcia, D. Betancourth, R. Amaral, N. Camilo, E. Est´evez-Rams, L. O. GZ, and P. Pagliuso, Dilution
eﬀects in spin 7/2 systems. the case of the antiferromagnet GdRhIn5, Journal of Magnetism and Magnetic Materials 405,
304 (2016).

[12] Y.-H. Oh, H. Mohammadbagherpoor, P. Dreher, A. Singh, X. Yu, and A. J. Rindos, Solving multi-coloring combinatorial

optimization problems using hybrid quantum algorithms, arXiv preprint arXiv:1911.00595 (2019).

[13] Z. Wang, N. C. Rubin, J. M. Dominy, and E. G. Rieﬀel, XY mixers: Analytical and numerical results for the quantum

alternating operator ansatz, Physical Review A 101, 012320 (2020).

[14] Z.

Tabi,

K. H.

A. Glos,
ras, Quantum optimization
space-eﬃcient
graph
2020 IEEE International Conference on Quantum Computing and Engineering (QCE) (IEEE, 2020).

T. Kozsik,
problem with

P. Haga,
coloring

Z. Kallus,

El-Safty,

the

for

and

Z.
embedding,

Zimbo-
in

[15] F. G. Fuchs, H. O. Kolden, N. H. Aase, and G. Sartor, Eﬃcient encoding of the weighted MAX k-cut on a quantum

computer using QAOA, arXiv preprint arXiv:2009.01095 (2020).

[16] A. Glos, A. Krawiec, and Z. Zimbor´as, Space-eﬃcient binary optimization for variational quantum computing, npj Quantum

Information 8, 1 (2022).

[17] O. Salehi, A. Glos, and J. A. Miszczak, Unconstrained binary models of the travelling salesman problem variants for

quantum optimization, arXiv preprint arXiv:2106.09056 (2021).

[18] A.

Crispin

and

A.

Syrichas,

Quantum

annealing

algorithm

for

vehicle

scheduling,

in

2013 IEEE International Conference on Systems, Man, and Cybernetics (IEEE, 2013).

[19] D. Venturelli, D. J. J. Marchand, and G. Rojo, Quantum annealing implementation of job-shop scheduling, arXiv preprint

arXiv:1506.08479 (2015).

[20] T. T. Tran, M. Do, E. G. Rieﬀel, J. Frank, Z. Wang, B. O’Gorman, D. Venturelli, and J. C. Beck, A hybrid quantum-

classical approach to solving scheduling problems, in Ninth Annual Symposium on Combinatorial Search (AAAI, 2016).

[21] K. Domino, M. Koniorczyk, K. Krawiec, K. Ja lowiecki, and B. Gardas, Quantum computing approach to railway dispatch-

ing and conﬂict management optimization on single-track railway lines, arXiv preprint arXiv:2010.08227 (2020).

[22] C. Dalyac, L. Henriet, E. Jeandel, W. Lechner, S. Perdrix, M. Porcheron, and M. Veshchezerova, Qualifying quantum
approaches for hard industrial optimization problems. a case study in the ﬁeld of smart-charging of electric vehicles, EPJ
Quantum Technology 8, 10.1140/epjqt/s40507-021-00100-3 (2021).

[23] D. Amaro, M. Rosenkranz, N. Fitzpatrick, K. Hirano, and M. Fiorentini, A case study of variational quantum algorithms

for a job shop scheduling problem, arXiv preprint arXiv:2109.03745 (2021), arXiv:2109.03745.

[24] J. R. McClean, N. C. Rubin, K. J. Sung, I. D. Kivlichan, X. Bonet-Monroig, Y. Cao, C. Dai, E. S. Fried, C. Gidney,
B. Gimby, et al., Openfermion: the electronic structure package for quantum computers, Quantum Science and Technology
5, 034014 (2020).

[25] V. Bergholm, J. Izaac, M. Schuld, C. Gogolin, M. S. Alam, S. Ahmed, J. M. Arrazola, C. Blank, A. Delgado, S. Jahangiri,
et al., Pennylane: Automatic diﬀerentiation of hybrid quantum-classical computations, arXiv preprint arXiv:1811.04968
(2018).

[26] G. Aleksandrowicz, T. Alexander, P. Barkoutsos, L. Bello, Y. Ben-Haim, D. Bucher, F. J. Cabrera-Hern´andez, J. Carballo-
Franquis, A. Chen, C.-F. Chen, J. M. Chow, A. D. C´orcoles-Gonzales, A. J. Cross, A. Cross, J. Cruz-Benito, C. Culver,
S. D. L. P. Gonz´alez, E. D. L. Torre, D. Ding, E. Dumitrescu, I. Duran, P. Eendebak, M. Everitt, I. F. Sertage, A. Frisch,
A. Fuhrer, J. Gambetta, B. G. Gago, J. Gomez-Mosquera, D. Greenberg, I. Hamamura, V. Havlicek, J. Hellmers,  Lukasz
Herok, H. Horii, S. Hu, T. Imamichi, T. Itoko, A. Javadi-Abhari, N. Kanazawa, A. Karazeev, K. Krsulich, P. Liu, Y. Luh,
Y. Maeng, M. Marques, F. J. Mart´ın-Fern´andez, D. T. McClure, D. McKay, S. Meesala, A. Mezzacapo, N. Moll, D. M.
Rodr´ıguez, G. Nannicini, P. Nation, P. Ollitrault, L. J. O’Riordan, H. Paik, J. P´erez, A. Phan, M. Pistoia, V. Prutyanov,
M. Reuter, J. Rice, A. R. Davila, R. H. P. Rudy, M. Ryu, N. Sathaye, C. Schnabel, E. Schoute, K. Setia, Y. Shi,
A. Silva, Y. Siraichi, S. Sivarajah, J. A. Smolin, M. Soeken, H. Takahashi, I. Tavernelli, C. Taylor, P. Taylour, K. Trabing,
M. Treinish, W. Turner, D. Vogt-Lee, C. Vuillot, J. A. Wildstrom, J. Wilson, E. Winston, C. Wood, S. Wood, S. W¨orner,
I. Y. Akhalwaya, and C. Zoufal, Qiskit: An Open-source Framework for Quantum Computing (2019).

[27] R. Shaydulin, K. Marwaha, J. Wurtz, and P. C. Lotshaw, Qaoakit: A toolkit for reproducible study, application, and
veriﬁcation of the qaoa, in 2021 IEEE/ACM Second International Workshop on Quantum Computing Software (QCS)
(IEEE, 2021) pp. 64–71.

[28] C. Developers, Cirq (2021), See full list of authors on Github: https://github.com/quantumlib/Cirq/graphs/contributors.
[29] N. P. Sawaya, T. Menke, T. H. Kyaw, S. Johri, A. Aspuru-Guzik, and G. G. Guerreschi, Resource-eﬃcient digital quantum
simulation of d-level systems for photonic, vibrational, and spin-s hamiltonians, npj Quantum Information 6, 1 (2020).

6

[30] N. P. Sawaya, A. T. Schmitz, and S. Hadﬁeld, Encoding trade-oﬀs and design toolkits in quantum algorithms for discrete

optimization: coloring, routing, scheduling, and other problems, arXiv preprint arXiv:2203.14432 (2022).

[31] C. Nayak, S. H. Simon, A. Stern, M. Freedman, and S. Das Sarma, Non-abelian anyons and topological quantum compu-

tation, Reviews of Modern Physics 80, 1083 (2008).

[32] P. Fendley, Parafermionic edge zero modes in zn-invariant spin chains, Journal of Statistical Mechanics: Theory and

Experiment 2012, P11020 (2012).

[33] N. P. Sawaya, G. G. Guerreschi, and A. Holmes, On connectivity-dependent resource requirements for digital quantum
simulation of d-level particles, in 2020 IEEE International Conference on Quantum Computing and Engineering (QCE)
(IEEE, 2020) pp. 180–190.

[34] S. Hadﬁeld, Z. Wang, B. O’gorman, E. G. Rieﬀel, D. Venturelli, and R. Biswas, From the quantum approximate optimization

algorithm to a quantum alternating operator ansatz, Algorithms 12, 34 (2019).

[35] N. Chancellor, Domain wall encoding of discrete variables for quantum annealing and qaoa, Quantum Science and Tech-

nology 4, 045004 (2019).

[36] Z. Tabi, K. H. El-Safty, Z. Kallus, P. H´aga, T. Kozsik, A. Glos, and Z. Zimbor´as, Quantum optimization for the graph
coloring problem with space-eﬃcient embedding, in 2020 IEEE International Conference on Quantum Computing and
Engineering (QCE) (IEEE, 2020) pp. 56–62.

[37] K. Svore, A. Geller, M. Troyer, J. Azariah, C. Granade, B. Heim, V. Kliuchnikov, M. Mykhailova, A. Paz, and M. Roetteler,
Q# enabling scalable quantum computing and development with a high-level dsl, in Proceedings of the real world domain
speciﬁc languages workshop 2018 (2018) pp. 1–10.

[38] G. G. Guerreschi, J. Hogaboam, F. Baruﬀa, and N. P. Sawaya, Intel quantum simulator: A cloud-ready high-performance

simulator of quantum circuits, Quantum Science and Technology 5, 034007 (2020).

[39] T. Jones, A. Brown, I. Bush, and S. C. Benjamin, Quest and high performance simulation of quantum computers, Scientiﬁc

Reports 9, 1 (2019).

[40] E. S. Fried, N. P. Sawaya, Y. Cao, I. D. Kivlichan, J. Romero, and A. Aspuru-Guzik, qtorch: The quantum tensor

contraction handler, PloS one 13, e0208510 (2018).

[41] A. McCaskey, E. Dumitrescu, M. Chen, D. Lyakh, and T. Humble, Validating quantum-classical programming models

with tensor network simulations, PloS one 13, e0206704 (2018).

[42] T. Vincent, L. J. O’Riordan, M. Andrenkov, J. Brown, N. Killoran, H. Qi, and I. Dhand, Jet: Fast quantum circuit

simulations with parallel task-based tensor-network contraction, Quantum 6, 709 (2022).

[43] J. Gray, quimb: A python package for quantum information and many-body calculations, Journal of Open Source Software

3, 819 (2018).

[44] J. S. Kottmann, S. Alperin-Lea, T. Tamayo-Mendoza, A. Cervera-Lierta, C. Lavigne, T.-C. Yen, V. Verteletskyi, P. Schleich,
A. Anand, M. Degroote, et al., Tequila: A platform for rapid development of quantum algorithms, Quantum Science and
Technology 6, 024009 (2021).

[45] D. S. Steiger, T. H¨aner, and M. Troyer, ProjectQ: an open source software framework for quantum computing, Quantum

2, 49 (2018).

[46] Y. Suzuki, Y. Kawase, Y. Masumura, Y. Hiraga, M. Nakadai, J. Chen, K. M. Nakanishi, K. Mitarai, R. Imai, S. Tamiya,

et al., Qulacs: a fast and versatile quantum circuit simulator for research purpose, Quantum 5, 559 (2021).

[47] A. J. McCaskey, D. I. Lyakh, E. F. Dumitrescu, S. S. Powers, and T. S. Humble, Xacc: a system-level software infrastructure

for heterogeneous quantum–classical computing, Quantum Science and Technology 5, 024002 (2020).

[48] T. M. Mintz, A. J. Mccaskey, E. F. Dumitrescu, S. V. Moore, S. Powers, and P. Lougovski, Qcor: A language extension
speciﬁcation for the heterogeneous quantum-classical model of computation, ACM Journal on Emerging Technologies in
Computing Systems (JETC) 16, 1 (2020).

[49] A. JavadiAbhari, S. Patil, D. Kudrow, J. Heckey, A. Lvov, F. T. Chong, and M. Martonosi, Scaﬀcc: A framework for
compilation and analysis of quantum computing programs, in Proceedings of the 11th ACM Conference on Computing
Frontiers (2014) pp. 1–10.

[50] A. Kissinger and J. van de Wetering, PyZX: Large scale automated diagrammatic reasoning, arXiv preprint

arXiv:1904.04735 (2019).

[51] N. Khammassi, I. Ashraf, J. Someren, R. Nane, A. Krol, M. A. Rol, L. Lao, K. Bertels, and C. G. Almudever, Openql:
A portable quantum programming framework for quantum accelerators, ACM Journal on Emerging Technologies in Com-
puting Systems (JETC) 18, 1 (2021).

[52] B. J. Fino and V. R. Algazi, Uniﬁed matrix treatment of the fast walsh-hadamard transform, IEEE Transactions on

Computers 25, 1142 (1976).

[53] S. K. Lam, A. Pitrou, and S. Seibert, Numba: A llvm-based python jit compiler, in Proceedings of the Second Workshop

on the LLVM Compiler Infrastructure in HPC (2015) pp. 1–6.

[54] L. Dalcin and Y.-L. L. Fang, Mpi4py: Status update after 12 years of development, Computing in Science & Engineering

23, 47 (2021).

[55] A. T. Schmitz, N. P. Sawaya, S. Johri, and A. Matsuura, Graph optimization perspective for low-depth trotter-suzuki

decomposition, arXiv preprint arXiv:2103.08602 (2021).

[56] M. L. Wall, A. Safavi-Naini, and A. M. Rey, Simulating generic spin-boson models with matrix product states, Physical

Review A 94, 053637 (2016).

[57] N. P. Sawaya and J. Huh, Quantum algorithm for calculating molecular vibronic spectra, The Journal of Physical Chemistry

Letters 10, 3586 (2019).

[58] T. H. Kyaw, T. Menke, S. Sim, A. Anand, N. P. Sawaya, W. D. Oliver, G. G. Guerreschi, and A. Aspuru-Guzik, Quantum

computer-aided design: digital quantum simulation of quantum processors, Physical Review Applied 16, 044042 (2021).

7

