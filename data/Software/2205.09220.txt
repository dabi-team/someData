2
2
0
2

y
a
M
8
1

]
E
S
.
s
c
[

1
v
0
2
2
9
0
.
5
0
2
2
:
v
i
X
r
a

A Case Study of Building Shared Understanding of
Non-Functional Requirements in a Remote Software
Organization

Laura Okpara, Colin Werner, Adam Murray, Daniela Damian
Department of Computer Science
University of Victoria, Victoria, Canada
{lauraokpara, colinwerner, adammurray, danielad}@uvic.ca

Abstract—Building a shared understanding of non-functional
requirements (NFRs) is a known but understudied challenge
in requirements engineering, especially in organizations that
adopt continuous software engineering (CSE) practices. During
the peak of the COVID-19 pandemic, many CSE organizations
complied with working remotely due to the imposed health re-
strictions; some continued to work remotely while implementing
business processes to facilitate team communication and produc-
tivity. In remote CSE organizations, managing NFRs becomes
more challenging due to the limitations to team communication
coupled with the incentive to deliver products quickly. While
previous research has identiﬁed the factors that lead to a lack of
shared understanding of NFRs in CSE, we still have a signiﬁcant
gap in understanding how CSE organizations, particularly in
remote work, build a shared understanding of NFRs in their
software development. We conduct a three-month ethnography-
informed case study of a remote CSE organization. Through
thematic analysis of our qualitative data from interviews and
observations, we identify a number of practices in developing
a shared understanding of NFRs. The collaborative workspace
the organization uses for remote interaction is Gather, which
simulates physical workspaces, and which our ﬁndings suggest
allows for informal communications instrumental for building
shared understanding. As actionable insights, we discuss our
ﬁndings in light of proactive practices that represent opportu-
nities for software organizations to invest in building a shared
understanding of NFRs in their development.

Index Terms—shared understanding, continuous software

engineering, non-functional requirements, remote

I. INTRODUCTION

Many software organizations are adopting continuous soft-
ware engineering (CSE) practices, such as continuous integra-
tion and delivery [29], to support the release of working soft-
ware through automation and shorter cycle times between re-
leases [16]. CSE has implications for requirements engineering
practices as it combines activities from agile methodologies
that emphasize individuals and interactions, working software,
customer collaboration, and response to rapid changes [17].

However, previous research has identiﬁed the lack of shared
understanding as a signiﬁcant challenge in managing non-
functional requirements (NFRs) in CSE [49]. Shared under-
standing of NFRs is essential due to the complex, cross-
cutting nature of NFRs [2] and the importance of NFRs to
the success of software projects. For example, consider NFRs
such as security [47] [43]; e.g. if data encryption is poorly

implemented, a data breach can expose user information.
Werner et al. describe the factors that contribute to the lack of
shared understanding of NFRs, such as the fast pace of change
and lack of domain knowledge [48]. However, there is still a
lack of empirical evidence regarding how a CSE organization
builds and manages a shared understanding of NFRs.

Working remotely creates further challenges in managing
NFRs, along with their understanding, due to geographic
distance, differences in context, and heavy reliance on com-
munication technologies [19]. There are barriers to building
a shared understanding, as conveying information through
non-verbal communication is difﬁcult in remote environments
[32]. During the COVID-19 pandemic, there was a global
shift from in-person activities to working remotely [5]. Many
organizations had to adapt processes and systems to support
team productivity, through virtual communication tools, social
engagements, and peer support [39].

With the signiﬁcant shift of software organizations working
remotely, the motivation for this study stems from the need
to explore how remote CSE software organizations build a
shared understanding of NFRs to potentially minimize rework
[48] and other costs that may result from a lack of shared
understanding of NFRs. The primary goal of this study is to
investigate how remote CSE software organizations build and
maintain a shared understanding of NFRs. The secondary goal
of this study is to provide additional insight into the limitations
or challenges to a shared understanding of NFRs in CSE. Two
main research questions guided our study:

RQ1: How does a remote software organization that adopts

CSE practices reach a shared understanding of NFRs?

RQ2: What are the limitations to the shared understanding
of NFRs in a remote software organization that adopts CSE
practices?

Our work brings two signiﬁcant contributions to the ﬁeld

of requirements engineering:

1) We add to the growing knowledge of shared understand-
ing of NFRs in requirements engineering by explicitly
describing practices for building a shared understanding
of NFRs in remote organizations that adopt CSE prac-
tices.

2) We discuss practical ways for remote CSE organizations
to proactively build a shared understanding of NFRs.

 
 
 
 
 
 
II. BACKGROUND AND RELATED WORK

A. Non-functional requirements

there is still some conﬂict

Previous empirical studies suggest that managing NFRs can
be challenging to software organizations for varying reasons,
such as sparse documentation of NFRs or when documentation
may be imprecise [2], along with the lack of consensus on how
to sufﬁciently document and communicate NFRs [21]. NFRs
are important to the success of software projects; however,
research suggests that
in how
software organizations manage NFRs [36]. NFRs are often
neglected in requirements engineering due to the difﬁculties
in eliciting NFRs, as NFRs have cross-cutting concerns with
FRs [47]. Research suggests that NFRs have a representation
problem and when NFRs are not described or represented
properly, they can be misinterpreted as FRs [21]. NFRs such
as security and privacy are important to software projects, but
often neglected [47] and may be speciﬁed too late resulting
in system vulnerabilities [43]. The main challenge is to un-
derstand the complex nature of NFRs and to create practices
to manage the shared understanding of NFRs [37]. This is the
gap that we intend to ﬁll in this study by exploring practices
to build a shared understanding of NFRs.

B. Shared Understanding and CSE

CSE increases the need for an effective ﬂow between
customer needs and the rapid delivery of a product or service
[16] through the automated release of working software in
short release cycles. While this concept is already established
through the agile manifesto [17], CSE is a more holistic
approach as it includes activities to extend these practices such
as continuous veriﬁcation, improvement, and innovation [16].
Previous research suggests that shared understanding among
people exists in two forms: implicit and explicit [22]. There
is implicit shared understanding when people have a mutual
understanding of unspeciﬁed facts or assumptions; whereas
there is explicit shared understanding when people have a mu-
tual understanding of speciﬁcations such as documents. Shared
understanding is beneﬁcial to CSE projects as it can promote
successful collaboration [10]; when shared understanding ex-
ists, a team member is able to predict other’s behaviours, there
is an increase in team motivation and less conﬂict or mistrust
among the team. Continuous integration, as CSE emphasizes,
provides quick feedback to support the frequent release of
working software, ensuring that potentially failure-inducing
problems are identiﬁed and resolved as quickly as possible
[16]. We bring further evidence from this study toward how
shared understanding is built in CSE.

Werner et al. studied shared understanding of NFRs in CSE
within three organizations [48]. They traced the effects of the
lack of shared understanding in the form of rework in software
projects, and they found that managing NFRs in CSE comes at
a cost, such as fast pace of change, inadequate communication,
and a lack of domain knowledge. They recommend practices
for building a shared understanding of NFRs: communication
and shared standards. Similarly, previous research reports

the difﬁculties with automating NFRs and the problem of
prioritizing functional requirements (FR) over NFRs [49].
However, these studies do not address how a CSE organization
builds a shared understanding of NFRs.

C. Shared Understanding and Informal Communication

Shared understanding cuts across several ﬁelds, disciplines,
and contexts, such as education [41], medical science [24],
design science [7], or engineering [22]. Several deﬁnitions of
shared understanding exist in literature, one study describes
shared understanding as “the ability of multiple agents to
coordinate their behaviours with respect
to each other to
support the realization of common goals or objectives” [6].
Hinds conceptualizes shared understanding as a collective
way of organizing relevant knowledge and a means for team
members to anticipate and predict the behaviors of their peers
or group [26]. These deﬁnitions focus on people and how
they communicate to reach a common goal or objective.
Research evidence suggests that in software organizations,
informal communication is essential for understanding and
communicating about stakeholder values and needs [4]. In-
formal communication is interactive and includes unplanned
interactions that occur in the midst of daily activities [46] [13].
Kraut et al. discuss informal communication as based on the
degree of preplanning, therefore, informal communication can
be scheduled, intended, opportunistic, or spontaneous [33].

Research evidence in requirements engineering suggests that
inadequate communication contributes to a lack of shared un-
derstanding [48]. Furthermore, daily informal communication
allows team members to develop working relationships and
encourages a better ﬂow of information [1]. Having a virtual
shared space in remote software organizations is important for
collaboration on software projects [3]. In this study, we bring
empirical evidence on how a remote software organization
manages communication of NFRs in the absence of traditional
in-person informal communication.

III. METHODOLOGY

Our case study used ethnography-informed methods to
study how a remote software organization, Alpha (ﬁctitious
name to protect conﬁdentiality), attempts shared understanding
in their product development. We ﬁrst outline the study setting
in terms of the organization studied, its processes and working
environment. We then follow with a description of the data
collection and analysis methods.

A. Study Setting

We identiﬁed a remote organization, Alpha, that practices
CSE. Alpha is a Canadian based software organization that de-
velops loyalty, rewards, and referral programs for businesses,
as their primary revenue source. Alpha has operated for 9 years
with 29 global employees. Alpha is primarily client-focused,
with most of its products having heavy visual components,
including third-party platforms and storing client information.
Alpha prioritizes NFRs such as performance, usability, secu-
rity, and maintainability to meet their stakeholders’ needs.

The software engineering team at Alpha includes project
leads (manager or developer), solutions architects, front-end
and back-end software developers, user experience (UI/UX)
designers/developers, and software integration engineers.

During the COVID-19 pandemic, Alpha shifted to remote
work to comply with the health restrictions imposed on busi-
nesses within the region and country and, having adapted its
business operations and approach, stayed fully remote for over
two years. Alpha used Gather, a video chat platform designed
to make virtual interactions more human.

Alpha’s communication methods and tools. Similar to many
other organizations during the COVID-19 pandemic, Alpha
had to pivot to work remotely. Alpha initially used video
conferencing tools such as Zoom; however, it soon discovered
that it did not create connectedness within the software team,
e.g. “we started out like that when the pandemic ﬁrst hit, we
all went remote. Initially, it was so disconnected. No one felt
connected to anyone else. It was so difﬁcult to engage people
in random conversation” (Manager). Alpha then switched to
using Gather [18], a virtual interaction tool that creates a work
environment similar to a physical workspace, including desk
spaces, meeting rooms, and avatars that represent the team
members. Gather is fully customizable and allows Alpha to
interact virtually as much as they would do in a physical space:
whenever an avatar (team member) ”walk” near another team
member’s avatar, a video call would be initiated in an easy and
ubiquitous way, to simulate informal communication available
in physical co-location, e.g “Gather has made it possible for
us as a remote team to have informal conversations. You
literally just walk your little character up to someone else’s
little character, and you’re talking to them.” (Manager) During
meetings, Alpha’s employees ”walk” their avatar to the virtual
meeting room in Gather and can choose to sit at the table. A
group video call on Gather would begin as soon as they are
near each other. Alpha’s employees can also create private
spaces (bubbles) with each other while in group meetings for
one-on-one conversations when necessary, creating the feeling
of being in the same space with each other. Alpha uses Gather
to host social events, such as Christmas parties, encouraging
team members to interact with each other beyond their daily
work.

Alpha also uses Slack [44] to provide and receive frequent
updates relevant to daily activities, and web documentation
tools to communicate and document requirements such as
Coda [9] to review backlogs, view the status of previous or
ongoing tasks, and update tasks seamlessly throughout the life
cycle of projects.

Alpha’s software and requirements engineering processes.
Alpha adopted CSE practices such as frequent feedback loops,
continuous veriﬁcation, and continuous testing based on stake-
holder needs. Empirical evidence suggests an organization
that adopts CSE may focus on certain CSE practices such as
continuous integration for several reasons to suit their business
and stakeholder needs [14]. The software engineering team at
Alpha uses continuous delivery to frequently deliver working
software in short cycles, welcoming changing requirements to

meet the stakeholders’ needs. In addition, Alpha implements
a people-driven, autonomous approach incorporating tribes
and guilds [45]. A tribe describes a group of people who
work on similar feature areas of the software products; they
coordinate and align themselves through the tribe leader,
usually a senior member of the tribe. Tribe members have
the necessary software engineering skills to come together
and engineer working software features from ”end-to-end.” A
guild describes a group of people with similar interests who
have similar roles or perform similar tasks. Guild members
come together to share knowledge, support each other and
share processes to create a community that fosters learning
and growth in speciﬁc areas.

Before starting a new project, a project kick-off meet-
ing ﬁrst occurs that includes stakeholders, such as success
representatives, customers, or upper-level management. The
meeting deﬁnes some of the high-level software requirements,
including NFRs, and the project scope through user/data ﬂows,
product designs, and demos to understand the software product
to be built. The project evolves with the delivery of working
usable software in short cycles by continuously verifying
project requirements with stakeholders throughout the software
development process “to ensure that the right thing has been
built and it has been built right” (Developer). The project
lead initiates frequent feedback cycles such as weekly or bi-
weekly meetings with the stakeholders involved in the project,
the feedback from these meetings can be change requests, new
requirements or software bugs discovered. The rapid feedback
cycles continue and the project continues to evolve until all
requirement requests have been implemented or all of the
stakeholders are satisﬁed with the product built.

At Alpha, software developers have some freedom and
ﬂexibility to implement the software requirements, especially
the NFRs. However, an engineer must collaborate with the
project lead to remove ambiguity and to create an architecture
allowing all components to work together.

B. Data Collection

For three months, one of the authors was embedded at Alpha
to learn about the products, processes, and business. Through
many informal conversations with the software engineering
team, an intention was to understand how the team shared un-
derstanding, knowledge and how they communicate and docu-
ment requirements. Alpha onboarded the on-site researcher by
providing a work email, providing a dedicated computer, and
granting access (through invitation) to their collaboration tools
and platforms such as Gather, Slack, Coda, Google Drive [8]
and GitHub [20]. Our data collection techniques were through
observations and interviews.

Participant Observation: The on-site researcher observed
the participants and their interactions during regular work ac-
tivities and meetings with the software team and stakeholders,
including customers and upper-level management. By engag-
ing in informal conversations with employees, the researcher
learned about their roles and experience and developed a

TABLE I
INTERVIEWEES

Role

Work Area

Exp. in Org. Overall Exp.

Developer
Developer
Developer
Developer
Developer
Developer
Developer
Manager
Manager
Manager
Manager

<1 yr
Visual Dev
<1 yr
Visual Dev
<1 yr
Project Engr
<1 yr
Visual Dev
<1 yr
Infrastructure
<3 yr
Infrastructure
<3 yr
Visual Dev
<5 yr
Product
Project/Product <5 yr
<5 yr
Infrastructure
<10 yr
Executive

<1 yr
<1 yr
<1 yr
<1 yr
<3 yr
<3 yr
<3 yr
<5 yr
<10 yr
<20 yr
<10 yr

TABLE II
SAMPLE INTERVIEW QUESTIONS

Q# Question

Q1
Q2

Q3

Q4

Q5

How would you describe your role and the work you do at Alpha?
Do you recognize the difference between functional and non-
functional requirements in software projects?
Based on your role and experience, which non-functional require-
ments are vital to the success of your projects at Alpha?
Have you heard of the term shared understanding? what does a
mutual or shared understanding mean to you?
How would you describe the process of reaching a shared/mutual
understanding of non-functional requirements for any project?

Q6 When can you say that everyone on your team understands the
non-functional requirements sufﬁciently to produce substantial
work?
How would you describe the factors that hinder or limit your
understanding of non-functional requirements when working with
other people?

Q7

working relationship with the team to help design the interview
questions and interpretation of interview responses.

Interviews: Eleven semi-structured interviews were con-
ducted via Zoom during the third month of the study. Each
interview time varied between 30 and 45 minutes and was fully
transcribed. The interviewees had various roles with varying
years of experience, from a couple of months to ﬁfteen years
of experience. To protect the anonymity of our participants,
we label developer/designer roles and team leads as developers
and other remaining management roles as managers, as seen in
Table I. Following a grounded theory approach, we iteratively
developed the interview questions based on emerging patterns
that helped us to establish an area of focus or interest [27]. The
interviews focused on highlighting how shared understanding
of NFRs is established and what challenges may limit the
shared understanding of NFRs. We used open-ended ques-
tions to allow participants to describe their experiences. We
sought each participant’s view on shared understanding and
how Alpha may reach a shared understanding of NFRs. The
interviews were audio-recorded with consent. A sample of the
interview questions can be found in Table II.

C. Data Analysis

Data analysis involved fully transcribing audio recordings
from interview sessions and creating insights using the back-

ground information obtained through observations. The obser-
vation data collected was analyzed by noting patterns and data
relevant to our study. We used this data to describe our study
setting and design the research questions for the interviews.
We also used the data from our observations to interpret the
interview ﬁndings by understanding and describing Alpha’s
context and discussing our study’s implications. We used
the open and axial coding methods from grounded theory
[27] to identify themes [31] across several codes from the
interviews, while creating memos to describe the relationships
and patterns observed in the data and any additional questions
that may be explored. We also identiﬁed the triggers that led
Alpha to build a shared understanding of NFRs, as suggested
by Werner et al. [48], further discussed in Section V. Two
independent coders were involved in the thematic coding
process [31]. Agreement sessions were used to consolidate
coding strategies, and to establish the reliability of the codes.
We calculated the inter-rater reliability agreement until we
inter-rater reliability >0.60, using the
reached substantial
Cohen Kappa’s coefﬁcient for measuring observer agreement
for categorical data [34].

IV. FINDINGS
A. RQ1: How does a remote software organization that adopts
CSE practices reach a shared understanding of NFRs?

First, to understand how the software team views NFRs,
we asked participants to tell us which NFRs were vital to
the success of the projects that they work on. In our data
analysis, we recognized three major NFRs that were mentioned
repeatedly: usability, performance and maintainability. We also
recognized a pattern where the NFRs mentioned during the
interview sessions differed depending on the role and level
of experience of the participant. Front-end developers and
designers mainly describe usability and performance when
referring to NFRs e.g. “Well, usually the biggest NFRs that we
get are everything to do with how it looks. When you’re dealing
with visual specs, the most important thing is usually how it
behaves in different environments” (Developer). Similarly, en-
gineering leads and managers made reference to performance
and understandability e.g. “But you could deﬁnitely consider
there to be NFRs for our public APIs. And the things that
you want to consider in those cases are, does the API make
sense? Is it familiar for other developers? Is it something that
they could easily discover?” (Manager). In another instance,
a manager mentions security as an important NFR for their
clients. e.g. “They want to know that the data that they are
providing us ... is secure, it’s deleted when they need it to be
deleted, and that the transmission is secure as well, that it’s
encrypted, and that there is no way to intercept the data as
they’re sending it to us or retrieving it” (Manager).

We then asked participants how they reach an understanding
of NFRs for any project they have worked on. From our data
analysis, we identiﬁed ﬁve practices (themes from our data) at
Alpha, outlined in Table III, and described below. In addition
to the codes from which we developed these themes, Table III
also provides information as to whether our data indicates that

TABLE III
SUMMARY OF PRACTICES FOR BUILDING A SHARED UNDERSTANDING OF NFRS (RQ1)

Practices

Description / Key Phrases

Implicit / Explicit [22]

Triggers [48]

Proactive / Reactive

Validating NFRs
through feedback

Validating NFRs through code review
Eliciting NFRs during feedback
Capturing NFRs from demos

Deepening the understanding
of NFRs through experience

Learning how the organization values NFRs
Learning about NFRs over time
Limitations due to lack of experience

Wireframing interface
designs

Discussing problems
and solutions

Asking questions

Sketching solutions
Designing solutions using visual aids

Meetings for implementing NFRs
Informal conversations about problems

Asking questions about NFRs
Asking questions formally or informally

Implicit

Rework

Proactive and Reactive

Implicit/Explicit

Change in scope
Rework

Reactive

Explicit

Implicit

Implicit

N/A

Proactive

Change in Scope
New requirements

Change in scope
New requirements

Proactive and Reactive

Proactive and Reactive

the shared understanding was implicit or explicit [22], whether
it was the result of triggers, as found in the work of Werner
and colleagues [48] and correspondingly whether they were
proactive rather than reactive, i.e. no associated trigger:

you create a pull request, there’s a template that you have to
ﬁll out when you do a product launch ... And then obviously,
there’s things like code review, review and feedback from the
managers that sort of catches the NFRs” (Developer).

• Validating NFRs through feedback
• Deepening the understanding of NFRs through experi-

ence

• Wireframing interface designs
• Discussing problems and solutions
• Asking questions
1) Validating NFRs through feedback: At Alpha, feedback
is provided and received during the software development
process, as enabled by their use of standardized communi-
cation tools such as Slack and Gather. A manager describes
a scenario where during a demo meeting, performance was
captured as a valuable NFR. e.g. “I think we’ve actually seen
this quite recently, with the demo project that’s been happening
here, where the engineering team was tasked with actually
implementing the program. And by simply implementing it,
you run up against all these NFRs that should exist. Because
now you’re going like, hey, I went to use it, it was really hard,
I went to use it, it’s taking forever to load” (Manager).

Alpha beneﬁts from the quick feedback loops of CSE in the
form of daily meetings, other scheduled meetings and informal
conversations that happen during the software development
process. These meetings mostly happen through Gather, the
virtual ofﬁce, e.g “We Slack or meet in Gather with screen-
share and also every day, we have a morning meeting where
we check-in and show what we’re working on. And there can
be opportunities for feedback there as well” (Developer). In
another instance, a software developer describes the project
kick-off meeting that helps with discovering NFRs like ex-
tensibility “Because when the ’shaping’ is happening, we’re
starting to think about those NFRs about how it might work
for other use cases” (Developer). Similarly, our participants
express that there are processes that encourage the validation
and capturing of NFRs such as code review and other feedback
methods. e.g “Whereas the NFRs happen more passively.
They’re things that are built into processes, for example, when

2) Deepening the understanding of NFRs through experi-
ence: Four of our participants expressed to us that they deepen
their understanding of NFRs over time through the projects
that they work on within Alpha. These NFRs are sometimes
not explicitly deﬁned but incorporated into already existing
processes and the developer learns how to implement them
through those processes over a period of time. e.g “There’s
just a process that isn’t formally presented, it’s just picked
up over time through training. I think that’s the majority of
NFRs are, for me anyways have been picked up that way”
(Developer). Developers told us that a helpful way to deepen
their understanding of NFRs is through learning how NFRs
are handled in previous similar projects. e.g. “I think the
biggest tool that has helped me learn NFRs has really just been
reviewing previous work, reviewing previous specs, reviewing
previous integrations, things like that, because it’s the best
way to get a sense of the expected code quality and expected
way of doing things” (Developer).

A developer describes how Alpha keeps people connected
even while working remotely and how that helps with deep-
ening the understanding of NFRs “I did mention earlier that
Alpha is remote ﬁrst but I do ﬁnd that they do a good job
of keeping people connected. And I think Gather town has
really helped with that, it’s just a place where you can feel
like you’re next to the people that you’re working with. And
they’re, a few button clicks away from a call to talk about
things and screenshare” (Developer). However, we observed
that some of our participants expressed some difﬁculties in
understanding NFRs due to a lack of experience. e.g “I still
think I’m learning what the requirements are for spec writing,
because it’s just it’s a nuanced aspect of the requirements ....
So it’s something that I’m still learning, but deﬁnitely have a
better understanding of than when I ﬁrst started.” (Developer).
Nevertheless, a software developer describes learning Alpha’s
values as an important factor to gaining a shared understanding

of NFRs e.g. “I guess the tricky thing is that a lot of getting
shared understanding, I think is almost kind of unwritten, it’s
like, you have to get a sense for how your organization values
those NFRs to be able to kind of work with others around
you” (Developer).

3) Wireframing interface designs: We observed that another
way Alpha reaches a shared understanding of NFRs was
through wireframing. Our participants express that they mostly
used Figma, sketches or minimal designs to describe some of
the NFRs during project meetings or informal conversations.
e.g. “And that usually involves using something like ﬁgma,
or ﬁg jam to quickly visualize what we’re talking about. So
really basic forms, like shapes, and just text, and blocks of
lines that connect different screens” (Developer). To mitigate
the challenges that could occur when working with visual
components remotely, developers describe the use of screen-
share on Gather, as a way that makes it easier to reach a shared
understanding of NFRs. e.g “A kind of advantage of Gather
is that you get to share your screen and [person] likes to
write diagrams and stuff like that or just mock-up code on the
screen, which deﬁnitely makes things easier to understand”
(Developer). A manager further describes the effectiveness of
wireframing interface designs by stating “I think that’s where
things like ’shaping’, wire-frames, starting to try to think
through that user experience really helps. Design drawings, I
ﬁnd are really helpful. Early mock-ups help people because I
ﬁnd that a lot of the team does well with actually experiencing
something. They quickly start to see ... this does the thing,
but it’s totally unusable for other reasons” (Manager). For
NFRs such as usability, visualizing what needs to be built and
receiving feedback on those designs from other developers and
clients ensures that there is a shared understanding of those
NFRs. e.g. “If we take the NFRs that are typically involved
in something like visual design, in terms of user experience,
obviously we have our designer who will design something,
but we do try to obtain as much feedback on that design as
possible. If possible, we actually like to communicate that or
publicize it with the client, if there is something that’s client-
speciﬁc” (Manager).

4) Discussing problems and solutions: Developers express
that they sometimes gain more understanding about NFRs
through discussions during regularly scheduled meetings on
Gather, such as bi-weekly guild meetings. e.g “ It’s really just
a time to talk about how we work on things, which is a great
idea. And it’s been helpful for talking about how we build
things and non-functional requirements in speciﬁc areas of our
jobs” (Developer). In another instance, a developer describes
an experience of how he ensures that everyone who works on a
project understands the NFRs when there is a change in scope.
e.g “I’ll set a meeting with everybody involved in the project.
And if something changes, I’ll make sure that everybody who is
involved is together, and then we can actually hash it out and
talk and then I’ll usually take some kind of notes” (Developer).
In addition, participants also describe their communication
through Gather, as being key to facilitating several feedback
cycles and meetings where it feels like they are working face-

to-face. e.g. “I can think of one software that we use, which is
Gather. And Gather is really obviously a video communication
tool. I think it does foster the ability for individuals to kind
of interact more. And by interacting more, and by kind of
stopping by somebody’s desk that you may not have talked
to in a while, you can kind of ensure that communication of
different departments is kind of happening, and it’s happening
more organically” (Manager).

5) Asking Questions: Through several feedback methods,
we observed participants using question asking to reach a
shared understanding of NFRs. A manager describes asking
questions to clients to elicit the NFRs that are important to
them during the early stages of discussing the project. e.g.
“you want to ask a lot of questions, you want to poke a lot of
holes and things and, really go to the very edge of, you know,
when you’re sketching it out. So yeah, I would say that initially,
it’s a lot of questions” (Manager). In a separate instance, a
developer uses question asking to clarify an NFR and ensure
that all members of the team have a good understanding of
what the goal is. e.g Concerning usability, “And you have to
ask questions and make sure that the person fully understands
what the goal is. Sometimes things can be unclear, but so
long as you’re constantly asking questions, then the person is
conﬁdent that they know what they’re doing” (Developer).

Furthermore, we asked participants about what methods
of communication have been effective for reaching a shared
understanding of NFRs. All of our participants mentioned
Gather i.e, “And then we also have a virtual ofﬁce environment
called Gather, which is what we mainly use. I think Gather is
good because it’s more multimedia because you can talk and
have video and share screens” (Developer).

Finally, we asked participants when they know team mem-
bers,
inclusive of themselves, have a common or shared
understanding of the NFRs. Developers describe this as when
there is minimal feedback or questions during project meetings
or conversations. e.g. “Like when we go into the ’deep-dive’
we know when the non-functional requirements have been met,
when we as a group meet, and there aren’t gaps in our shared
understanding. We come out of a review meeting and there’s
not a lot of feedback” (Developer). A manager describes this
as when the team members are able to discuss the problems
and solutions with each other and describe the behaviour of
the software product e.g. “I’m kind of sufﬁciently satisﬁed with
two conditions, what I think is a little bit more subjective,
which is when the team members are starting to be able
to explain the problem and understand the detailed nuance
explain that problem to others. The other one is when you
start to see like acceptance criteria that’s really starting to
look like one of our actual user acceptance tests. And by
that point, you get a sense of if someone really understood
the non-functional” (Manager). However, our participants ac-
knowledge that shared understanding of NFRs should continue
to evolve and there may not be a way to guarantee that there is
a complete shared understanding of NFRs within the team at
one time. A manager expresses this by saying “I don’t actually
think you can have [guarantee], honestly, until it’s actually

TABLE IV
LIMITATIONS TO BUILDING A SHARED UNDERSTANDING OF NFRS (RQ2)

Limitations

Description / Key Phrases

Triggers

Gaps in Communication

Making assumptions about a project/process
Unclear communication of expectations

Redesign/Reshape of projects
Scope creep
Change in scope

Limited understanding of customer context

Learning about customers
Insufﬁcient understanding of customer needs

Scope Creep

Individual differences

Unspeciﬁed NFRs

Differences in ideas and background
Differences in skills and knowledge
Differences in approach to work

Rework

Uncommunicated NFRs
Unwritten NFRs
Unclear NFRs

Difﬁculty implementing NFRs
New requirements

in a client’s hands being used or users hands. Because, I
mean, there’s a chance we got the NFRs wrong, you know,
every single person did” (Manager). In a different instance,
a manager states that “I don’t think it’s possible to reach
100% shared understanding, there’s always going to be areas
where people are running on assumptions, or people might
have different interpretations” (Manager).

B. RQ2: What are the limitations to a shared understanding
of NFRs in a remote CSE software organization?

We asked participants if they experienced any challenges
with understanding NFRs when working collaboratively. From
our data analysis, we found ﬁve main themes that describe
the limitations to a shared understanding of NFRs: gaps in
communication, limited understanding of customer context,
individual differences and unspeciﬁed NFRs. Additionally,
we identiﬁed the main triggers across these limitations. The
themes, triggers, and associated codes are in Table IV.

1) Gaps in communication: In several instances, our par-
ticipants describe gaps in communication within the software
team and gaps in communication between the software team
and the stakeholders due to unclear expectations for projects
or assumptions about projects, which may lead to some
rework or a change in the scope of a project. A manager
describes a scenario in which the software team made in-
accurate assumptions about what the stakeholders expected
for a project regarding usability, which led to discussing
additional requirements that were not within the scope of the
project, “They had made the assumption that they would be
able to go in and update these prints after launch. And we
had made the interpretation that everything was just sort of
hard-coded, write once and forget it. And so, in the end, it
was something that we actually had to push back on the
client and say that, making that something that’s editable,
would signiﬁcantly increase the scope” (Manager). Another
member of the software team describes a situation where
there was some unclear communication regarding the project
expectations for usability requirements which resulted in the
developer working with inaccurate speciﬁcations. “There have
been times where I’ve had a conversation with [person] about

what a product needs to do and how he has envisioned it. And I
guess some things just maybe got lost in translation. And I end
up working on something that is different or works differently
than what he had imagined. And vice versa” (Developer).

2) Limited understanding of customer context: A major
challenge with reaching a shared understanding of NFRs when
working with external customers is the limited understanding
of the customer’s business, products or needs. The lack of
contextual knowledge about the customers can sometimes lead
to misunderstandings or assumptions concerning the NFRs that
are important to the customers, especially when an organi-
zation needs sufﬁcient information about their customers or
their customer’s products to deliver a product successfully, as
observed “if I’m unable to understand what the motivating
use cases are if I’m unable to see how this project actually
came to be, what the scope is even, I’m unable to go dive into
what those NFRs are” (Developer).

Similarly, a participant expressed having experienced dif-
ﬁculty when working on a project and not understanding
extensibility as an NFR. This difﬁculty was mainly due to
a limited understanding of the customer and their products.
e.g. “ I think a lot of the confusion probably also came from
it being my ﬁrst couple projects here. And so I was still
wrapping my head around what our customers actually are,
how we interact with them, the full range of our products,
and how they’re planning on implementing their programs”
(Developer).

3) Individual differences: Differences in the background,
skills, experience and ideas of team members can sometimes
lead to misunderstandings of NFRs, especially when there
is no common foundation of knowledge. Alpha recognizes
that having a diverse software team means that team mem-
bers would have a different level of knowledge, skills and
experience. e.g “the ﬁrst
thing that comes to mind when
working with other team members, especially in a leadership
position, is understanding that not every team member has the
same level of technical or work experience as any other team
member” (Manager). However, sometimes team members still
make assumptions about how other members of the team think
and how much they know and this may lead to a disparity in

ideas about the product and how to implement the NFRs of
the product. e.g. “But it just trickled down to things like the
language we’re using, just wasn’t aligned even, people didn’t
even have the same ideas about what the functionality was.
And that just like continued to trickle through the other non-
functional requirements because it wasn’t meeting some of the
use cases anymore” (Developer).

4) Unspeciﬁed NFRs: We observed that some of our par-
ticipants experienced difﬁculties with understanding or imple-
menting NFRs due to unclear or unspoken expectations around
these NFRs. Concerning maintainability, how a code-base can
be understood and built upon with well-written documentation,
a software developer describes difﬁculties. e.g “Deﬁnitely,
for the speciﬁcation writing for that project, it was pretty
difﬁcult for me, because I wasn’t really sure what they should
look like. And also there weren’t great examples that I could
base it off” (Developer). When NFRs are not clearly deﬁned,
communicated or documented, developers are often left with
their assumptions on what NFRs to include for a project and
how to implement the NFRs. Our participants expressed that
this could happen, however, due to the frequent feedback loops
within the software team, there are several opportunities to
communicate and re-elicit the NFRs relevant to the work being
done. e.g “The thing is non-functional requirements are not
always communicated as much... trying to ﬁgure out what
or not, understanding or communicating expectations around
some of those NFRs from stakeholders. The good thing about
developing at Alpha is that our loops are pretty quick, we
have a lot of communication, so becomes quite clear when
something isn’t being met. And when that comes up, just work
to try and elicit what those requirements are” (Developer).

V. DISCUSSION

CSE advocates for ongoing customer feedback and rapid
iteration cycles [16] [22], which should result in a higher level
of understanding of customer requirements. However, prior
research indicates that CSE may pose a detrimental effect
on the shared understanding of non-functional requirements
[48]. In remote organizations, building a shared understanding
becomes more challenging due to the additional recognized
barriers with remote work, such as challenges with information
sharing and team members having a reduced ability to build
trustworthy relationships [32].

Our work explores the delicate balance of achieving a shared
understanding of NFRs in a remote CSE organization (Alpha),
and in this section, we discuss the ﬁndings of our empirical
study. Through our research, we uncovered ﬁve practices from
Alpha to build a shared understanding of NFRs: validating
NFRs through feedback, deepening the understanding of NFRs
through experience, wireframing interface designs, discussing
problems and solutions, and asking questions. We found some
limitations within Alpha to building a shared understanding
of NFRs, such as gaps in communication that may occur
when team members make assumptions about each other’s
knowledge. We discuss how Alpha mitigates some challenges

with building a shared understanding in a remote setting
through multiple collaboration tools, particularly Gather.

We believe these ﬁndings have important research implica-
tions concerning the intersection of shared understanding of
NFRs and CSE in remote collaboration and how an organiza-
tion could use practices that are proactive, rather than reactive,
to build a shared understanding of NFRs.

A. Shared Understanding of NFRs in CSE

Glinz describes implicit shared understanding as the mutual
understanding of non-speciﬁed facts or assumptions [22]. Our
study suggests that Alpha relies on implicit shared under-
standing of NFRs, partly due to CSE practices that encourage
frequent feedback [16] through formal, informal or face-to-
face communication[11] [13], as observed “a lot of getting
to shared understanding is almost kind of unwritten” (Devel-
oper).

Our ﬁndings corroborate and bring additional, empirical
detail about the amount of implicit shared understanding, as
four of the ﬁve practices used to develop a shared under-
standing of NFRs were in fact implicit, namely validating
NFRs through feedback, deepening the understanding of NFRs
through experience, discussing problems and solutions, and
asking questions. Only a single practice, wireframing interface
designs, was explicit in nature.

Werner et al. describe the importance of the shared un-
derstanding of conﬁguration management as conﬁgurability
is an NFR that also encompasses process quality [49], and
supports the rapid development, conﬁguration and deployment
of software products. Prior research has described comprehen-
sive conﬁguration management [28] for continuous integration
and continuous delivery as a key component of CSE. Many
organizations use more than a single conﬁguration tool, such
as Docker, to create a software environment and applications,
as observed by Werner et al. [49] within the three organizations
in their study. An organization would beneﬁt from continuous
integration and delivery incorporated in CSE practices when
they invest in building a shared understanding of NFRs such as
conﬁgurability. Shared understanding is enhanced through the
practices recommended by Werner et al. [48], such as creating
shared standards for conﬁguration management and effective
communication. At Alpha, developers use an in-house conﬁg-
uration tool for setting up their environment and application.
Developers also use Process Street [40], Coda, and GitHub
for documenting conﬁguration standards and collaboration, as
these tools allow the developers to coordinate their activities
around conﬁguration management.

B. Mitigating the effects of remote interaction on shared
understanding in CSE

Previous research analyzing surveys during the COVID-
19 pandemic has suggested that effective communication is
essential for a software team’s productivity. Communication
is often affected by changes in a team’s culture and inefﬁcient
communication could pose a challenge to reaching milestones
[39]. As CSE organizations rely on frequent feedback cycles,

the quality of communication within software teams may
suffer when team members work from a distance, i.e. work
remotely [12]. However, our ﬁndings suggest that Alpha was
able to mitigate some of the challenges in remote communi-
cation by using Gather, a virtual video conferencing tool that
tries to simulate the face-to-face physical workspace “Gather
has made it possible for us as a remote team to have informal
conversations. You literally just walk your little character up
to someone else’s little character, and you’re talking to them”.
Gather, a collaboration tool, has not been heavily researched
on collaborative work and, to the best of our knowledge,
in collaboration in software development. Our ﬁndings bring
evidence about Gather’s value in creating spaces that approach
in-person interaction that is conducive to shared understanding
in software engineering. A 2020 study of a distributed design
team working during COVID-19 lockdowns [35] extensively
used Zoom, Slack, and Google docs, identiﬁed difﬁculties
with establishing a team spirit in a distributed setting due to
the limited one-view per participant experience with Zoom
meetings during group sketching and the difﬁculties with
understanding the team member’s progress. At Alpha, we
believe that Gather has allowed Alpha to achieve the prac-
tices suggested by this study for mitigating the challenge of
simulating a co-located design space and encouraging screen-
sharing for remote collaboration.

A key enabler for shared understanding is the ability to
ask questions and receive feedback, regardless of background
experience, education, or other demographic factors [7], that
we identiﬁed as asking question in our practices for build-
ing a shared understanding. Previous research suggests other
enablers of shared understanding in remote teams such as
visualizing information, online updates and trustworthiness
[32]. We further discuss our insights about these enablers at
Alpha. First, we observed that Alpha uses wireframing for
interface designs and screen-sharing to enable the team to
set and understand the expectations for NFRs. This observa-
tion supports prior research on building shared understanding
for supporting remote teams through building shared mental
models with visual representations [23]. Second, frequent
communication ensures that there is a shared understanding
of how team members feel and how the project progresses
[32]. Online updates like daily check-ins on Slack or formal
or informal communication on Gather shows the importance
of multiple forms of communication media [30] [26] and tools
such as Gather, Slack, and ﬁle sharing. Third, mutual trust en-
ables team members to collaborate and share feedback openly,
thus improving shared understanding within remote teams
[32]. Previous research suggests that regular communication,
including formal and informal communication, plays a vital
role in creating relationships within remote teams and thus in
building trust within the team, regardless of the difference in
background, location or culture [25]. Alpha built trust within
the team mainly through informal communication on Gather
or Slack, where team members are open to seeking help from
each other, as observed “If someone sends me a quick Slack
message, and I look at it ... I will go straight to their desk and

start to engage them in conversation so that we can whiteboard
it or work through the problem”.

C. How can organizations be proactive in building a shared
understanding of NFRs?

Through observations and the practices we identiﬁed in our
study, we bring empirical evidence that further adds to and
enhances the work by Werner et al.[48] on the recommended
practices for building shared understanding i.e., how team
communication and shared development standards form the
fundamental base for building a shared understanding. In addi-
tion, we have identiﬁed a new practice of building a shared un-
derstanding through experience. Our ﬁrst practice, discussing
problems and solutions, is part of utilizing communication to
develop a shared understanding. Developers can also initiate
the creation of a shared understanding by asking questions,
which is another form of communication. Validating NFRs
through feedback is a form of communication that can happen
through the continuous pipeline or in a meeting; regardless
of how that communication takes place, the emphasis is on
the continuous validation of NFRs that can build a shared
understanding. An organization can leverage wireframes for
interface designs, a form of shared development standards,
that may enhance the proliferation of a shared understanding.
Finally, developers can deepen their understanding of NFRs
through experience at their organization and how that partic-
ular organization values NFRs.

Werner et al. [48] observed that an organization builds a
shared understanding of NFRs primarily due to a reactive
response to accidental lack of shared understanding, related
to various reasons – triggers – such as scope creep, rework,
regulatory requirements, accumulating technical debt, needs of
an important customer, or a disruption of service. In Table III,
we show the triggers that emerged from our data analysis and
how they correspond to the identiﬁed practices. In the practices
we observed at Alpha, the deepening the understanding of
NFRs through experience is an example of such a reactive
response, or where our data does not indicate that the response
was the result of any of these or other triggers.

However, we categorized four of the ﬁve practices we
identiﬁed at Alpha as being proactive in many instances, even
though they were reactive in a few instances. One practice
in particular sheds more light on how Alpha adapted to
working and building shared understanding in remote settings:
wireframing interface designs. Prior research suggests that
using virtual shared spaces that enable the team to visualize
solutions and interact with visualizations encourages better
communication and enables shared understanding [3]. Through
Gather’s virtual shared space and screen-sharing feature, Alpha
used tools such as Figma, an online whiteboard for visual rep-
resentations with elements like blocks and shapes, to support
collaboration with team members, thereby enabling the team
to develop a shared understanding more quickly, as observed
in prior research [3].

We observed that a proactive effort to build a shared under-
standing may not require a formal process or documentation.

At Alpha, “There’s a [guild name] guild and we meet once
every two weeks to sort of check-in on NFRs. It’s what
practices are we going to try and use? What’s working, what’s
not working? It’s been helpful for talking about how we build
things and NFRs in speciﬁc areas of our jobs.” The loose
agenda of these meetings is rather informal and lends to
the creative discussions around NFRs. Our ﬁndings indicate
that tools such as Gather offer a medium for these informal,
yet important, conversations to occur. Developers at Alpha
unanimously describe Gather as a method that has created a
sense of being connected to each other, despite their remote
setting. “I think Gather town has really helped with that, it’s
just a place where you can feel like you’re next to the people
that you’re working with”.

Our ﬁndings have practical implications to software orga-
nizations as they show that while there is still a considerable
amount of shared understanding built through reactive mea-
sures, there is also a sizable amount that is a direct result
of some proactive practices. One developer indicated that he
found some NFRs as follows: “as you’re going down into more
details, during something like a journey map, that’s where you
start bumping into the non-functional requirements that may
not have been clearly identiﬁed”. However, when it comes to
such NFRs, discussions did not happen until much later, as one
participant noted, “that’s when you really start the back and
forth communication on how you’re going to address them...So
I think it’s during that process of drilling down into the details
on how a project is going to be run, that you start hitting
them, and the NFRs”. Despite the complexity and importance
of NFRs [47] [2], previous research observes that software
developers discover NFRs during or after the software product
implementation [38]. Eliciting NFRs at this stage may pose a
challenge that could affect the entire software development
process or lead to delays in software [38] [47]; therefore,
it is prudent for an organization to ensure the conversations
about NFRs are occurring early enough to facilitate building a
shared understanding. The deﬁnition of when is left for future
work; however, given the effects of architectural decisions on
NFRs (or lack thereof), a shared understanding should be
continually built throughout the development cycle, perhaps
allotting enough time for “just-in-time” engineering [15].

VI. THREATS TO VALIDITY

We acknowledge the limitations of our qualitative study
through four components of the total quality framework [42]:
credibility, analyzability, transparency and usefulness.

For the credibility, the selection of Alpha may suffer from
sampling bias as we focused on an organization willing to
partner with us; however, we veriﬁed that their practices align
with CSE through observation by one of our researchers. In
addition, we interviewed participants with various roles and
levels of experience. To limit conscious or unconscious bias
during data collection, we explained that study participation
was completely anonymous and would not cause any conse-
quence or risk to the participants. We started each interview
session by exploring the deﬁnition of shared understanding.

Afterwards, we explained shared understanding in the context
of our research with examples to ensure that each participant
had the same level of knowledge about shared understanding.
For analyzability, we used a transcription tool on the
recorded audio from the interviews and one of the authors
listened and veriﬁed each transcript. We used thematic analysis
through the open, axial, and selective coding process from
grounded theory [27]; we describe this process in Section III.
We used the inter-rater agreement process [34] to align our
codes and categories within our coding scheme. We used re-
ﬂective memos during the coding process to describe patterns
observed in the data collected for reference.

For

transparency, we provide a replication package
(https://doi.org/10.5281/zenodo.6273497) with our codebook,
interview questions, and data about our inter-rater agreement
sessions; however conﬁdential data are excluded due to our
non-disclosure agreement. Although we believe we reached
saturation of codes in our data analysis, one limitation to our
coding process may be the subjectivity of the exhaustiveness
of our codes which may inﬂuence research results.

For usefulness, we do not propose that our results and
ﬁndings hold true for all remote CSE organizations. We ac-
knowledge that our single case study research provides results
limited to our partner organization. However, to increase the
usefulness of our ﬁndings, more case studies like ours would
be helpful with a focus on how remote software organizations
can proactively build and maintain a shared understanding of
NFRs, and how to evaluate a shared understanding of NFRs.

VII. CONCLUSIONS AND FUTURE WORK

A shared understanding of NFRs is important for the success
of many software projects. However, managing NFRs can pose
a signiﬁcant challenge to software organizations due to factors
such as the conﬂicting nature of NFRs and the lack of shared
understanding of NFRs. In addition, shared understanding of
NFRs in CSE is still understudied and there is insufﬁcient
literature to show how organizations can effectively build a
shared understanding.

there is still

While prior research has explored how NFRs are managed
in CSE, considering the challenges and best practices for
the question of how CSE
managing NFRs,
organizations can build a shared understanding of NFRs. This
paper describes the practices for building a shared under-
standing of NFRs, through a case study of a remote CSE
organization. Through discussing the practices for building a
shared understanding of NFRs in CSE, we observe that CSE
organizations are proactively building a shared understanding,
although still reactively building a shared understanding in
several instances. Furthermore, we discuss the limitations to
a shared understanding of NFRs in CSE, highlighting the
similarities and differences between the limitations described
in our study and prior research.

With respect to the practical implications of our study, we
acknowledge the limitations to our research as a single-case
study, however, we believe that our research adds valuable
empirical evidence to this research area and is a useful starting

point to further explore how CSE organizations can build a
shared understanding of NFRs. In future research, we seek to
evaluate the effectiveness of proactive practices for building a
shared understanding of NFRs in CSE.

ACKNOWLEDGMENTS

We thank our partner organization and employees for their
time and collaboration. We acknowledge Nowshin Nawar
Arony and Neha Koulecar (University of Victoria) for their
assistance in our study. Our research was supported by the
Natural Sciences and Engineering Research Council of Canada
(NSERC).

[14] Omar Elazhary, Colin Werner, Ze Shi Li, Derek Lowlind,
Neil A Ernst, and Margaret-Anne Storey. “Uncovering the
beneﬁts and challenges of continuous integration practices”.
In: IEEE Transactions on Software Engineering (2021). DOI:
10.1109/TSE.2021.3064953.

[15] Neil A. Ernst and Gail C. Murphy. “Case studies in just-
in-time requirements analysis”. In: 2012 Second IEEE Inter-
national Workshop on Empirical Requirements Engineering
(EmpiRE). ISSN: 2329-6356. Sept. 2012, pp. 25–32. DOI:
10.1109/EmpiRE.2012.6347678.

[16] Brian Fitzgerald and Klaas-Jan Stol. “Continuous software
engineering: A roadmap and agenda”. In: Journal of Systems
and Software 123 (2017), pp. 176–189.

[17] Martin Fowler, Jim Highsmith, et al. “The agile manifesto”.

REFERENCES

[1]

Par J Agerfalk, Brian Fitzgerald, Helena Holmstrom Olsson,
Brian Lings, Bjorn Lundell, and Eoin ´O Conch´uir. “A frame-
work for considering opportunities and threats in distributed
software development”. In: Proceedings of the International
Workshop on Distributed Software Development, Paris 29
(2005), pp. 47–61.

[2] David Ameller, Claudia Ayala, Jordi Cabot, and Xavier
Franch. “How do software architects consider non-functional
requirements: An exploratory study”. In: 2012 20th IEEE
International Requirements Engineering Conference (RE).
IEEE. 2012, pp. 41–50.

[3] Aruna D Balakrishnan, Susan R Fussell, and Sara Kiesler. “Do
visualizations improve synchronous remote collaboration?”
In: Proceedings of the SIGCHI Conference on Human Factors
in Computing Systems. 2008, pp. 1227–1236.
[4] Kent Beck. Extreme programming explained:
change. Addison-Wesley Professional, 2000.

embrace

[5] Alexander Bick, Adam Blandin, Karel Mertens, et al. Work

from home after the COVID-19 Outbreak. 2020.

[6] Eva Alice Christiane Bittner and Jan Marco Leimeister. “Why
shared understanding matters–Engineering a collaboration
process for shared understanding to improve collaboration
effectiveness in heterogeneous teams”. In: 2013 46th Hawaii
International Conference on System Sciences. IEEE. 2013,
pp. 106–114.
Philip Cash, Elies A Dekoninck, and Saeema Ahmed-
Kristensen. “Supporting the development of shared under-
standing in distributed design teams”. In: Journal of engi-
neering design 28.3 (2017), pp. 147–170.

[7]

[8] Cloud storage for work and home - Google Drive. URL:

https://www.google.com/intl/en ca/drive/.

[9] Coda — The doc that brings

it all

together. URL:

[10]

https://coda.io/.
Peter Darch, Annamaria Carusi, and Marina Jirotka. “Shared
understanding of
in e-Science
projects”. In: 2009 5th IEEE International Conference on E-
Science Workshops. IEEE. 2009, pp. 125–128.

requirements

end-users’

[11] Adam Debbiche, Mikael Dien´er, and Richard Berntsson
Svensson. “Challenges when adopting continuous integration:
A case study”. In: International Conference on Product-
Focused Software Process Improvement. Springer. 2014,
pp. 17–32.

[12] Advait Deshpande, Helen Sharp, Leonor Barroca, and Peggy
Gregory. “Remote working and collaboration in agile teams”.
In: International Conference on Information Systems, ICIS
(2016).
Siva Dorairaj, James Noble, and Petra Malik. “Effective com-
munication in distributed Agile software development teams”.
In: International Conference on Agile Software Development.
Springer. 2011, pp. 102–116.

[13]

In: Software development 9.8 (2001), pp. 28–35.
better way

to meet

A

-

[18] Gather

online.

URL:

https://www.gather.town/.

[19] Cristina B Gibson and Susan G Cohen. Virtual teams that
work: Creating conditions for virtual team effectiveness. John
Wiley & Sons, 2003.

[20] GitHub: Where the world builds software . GitHub. URL:

https://github.com/.

[21] Martin Glinz. “On non-functional requirements”. In: 15th
IEEE International Requirements Engineering Conference
(RE 2007). IEEE. 2007, pp. 21–26.

[22] Martin Glinz and Samuel A Fricker. “On shared understanding
in software engineering: an essay”. In: Computer Science-
Research and Development 30.3 (2015), pp. 363–376.
[23] Gabriela Goldschmidt. “To see eye to eye: the role of visual
representations in building shared mental models in design
teams”. In: CoDesign 3.1 (2007), pp. 43–50.

[24] Brett Heasman and Alex Gillespie. “Neurodivergent intersub-
jectivity: Distinctive features of how autistic people create
shared understanding”. In: Autism 23.4 (2019), pp. 910–921.
[25] Kaisa Henttonen and Kirsimarja Blomqvist. “Managing dis-
tance in a global virtual team: the evolution of trust through
technology-mediated relational communication”. In: Strategic
Change 14.2 (2005), pp. 107–119.
Pamela J Hinds and Suzanne P Weisband. “Knowledge shar-
ing and shared understanding in virtual teams”. In: Virtual
teams that work: Creating conditions for virtual team effec-
tiveness (2003), pp. 21–36.

[26]

[29]

[28]

[30]

[27] Rashina Hoda, James Noble, and Stuart Marshall. “Grounded
theory for geeks”. In: Proceedings of the 18th Conference on
Pattern Languages of Programs. 2011, pp. 1–17.
Jez Humble. “Continuous delivery sounds great, but will it
work here?” In: Communications of the ACM 61.4 (2018),
pp. 34–39.
Jan Ole Johanssen, Anja Kleebaum, Barbara Paech, and
Bernd Bruegge. “Practitioners’ eye on continuous software
engineering: An interview study”. In: Proceedings of the 2018
International Conference on Software and System Process.
2018, pp. 41–50.
Shawn Jordan and Robin Adams. “Perceptions of success in
virtual cross-disciplinary design teams in large multinational
corporations”. In: CoDesign 12.3 (2016), pp. 185–203.
[31] Michelle E Kiger and Lara Varpio. “Thematic analysis of
qualitative data: AMEE Guide No. 131”. In: Medical teacher
42.8 (2020), pp. 846–854.
Jonas Kniel and Alice Comi. “Riding the Same Wavelength:
Designers’ Perceptions of Shared Understanding in Remote
Teams”. In: SAGE Open 11.3 (2021), p. 21582440211040129.
[33] Robert E Kraut, Robert S Fish, Robert W Root, and Barbara L
Chalfonte. “Informal communication in organizations: Form,
function, and technology”. In: Human reactions to technology:
Claremont symposium on applied social psychology. 1990,
pp. 145–199.

[32]

[34]

J Richard Landis and Gary G Koch. “The measurement
of observer agreement for categorical data”. In: Biometrics
(1977), pp. 159–174.

[35] Tatiana Losev, Sarah Storteboom, Sheelagh Carpendale, and
Søren Knudsen. “Distributed synchronous visualization de-
sign: Challenges and strategies”. In: 2020 IEEE Workshop
on Evaluation and Beyond-Methodological Approaches to
Visualization (BELIV). IEEE. 2020, pp. 1–10.

[36] Dewi Mairiza, Didar Zowghi, and Nurie Nurmuliani. “An
investigation into the notion of non-functional requirements”.
In: Proceedings of the 2010 ACM Symposium on Applied
Computing. 2010, pp. 311–317.

[37] Dewi Mairiza, Didar Zowghi, and Nurie Nurmuliani. “Man-
aging conﬂicts among non-functional requirements”. In: Aus-
tralian Workshop on Requirements Engineering. University of
Technology, Sydney. 2009.

[38] Abderrahman Matoussi and R´egine Laleau. “A survey of non-
functional requirements in software development process”.
In: Technical report TR-LACL-2008-7, University of Paris-Est
(Paris 12). LACL (Laboratory of Algorithms, Complexity and
Logic). 2008.

[39] Courtney Miller, Paige Rodeghero, Margaret-Anne Storey,
Denae Ford, and Thomas Zimmermann. ““How Was Your
Weekend?” Software Development Teams Working From
Home During COVID-19”. In: 2021 IEEE/ACM 43rd Inter-
national Conference on Software Engineering (ICSE). IEEE.
2021, pp. 624–636.

[40] Process Street — Checklist, Workﬂow and SOP Software. URL:

[41]

https://www.process.st/.
Sadhana Puntambekar. “Analyzing collaborative interactions:
Divergence, shared understanding and construction of knowl-
edge”. In: Computers & education 47.3 (2006), pp. 332–351.
[42] Margaret R Roller and Paul J Lavrakas. Applied qualitative
research design: A total quality framework approach. Guilford
Publications, 2015.

[43] Ravi Sen and Sharad Borle. “Estimating the contextual risk
of data breach: An empirical approach”. In: Journal of Man-
agement Information Systems 32.2 (2015), pp. 314–341.
Slack is where the future works. URL: https://slack.com/.
[44]
[45] Darja Smite, Nils Brede Moe, Georgiana Levinta, and Marcin
Floryan. “Spotify guilds: how to succeed with knowledge
sharing in large-scale agile organizations”. In: IEEE Software
36.2 (2019), pp. 51–57.
Peter T¨orlind and Andreas Larsson. “Supporting Infor-
mal Communication in Distributed Engineering Design
Teams”. In: International CIRP Design Seminar: 16/05/2002-
18/05/2002. 2002.
Saeed Ullah, Muzaffar Iqbal, and Aamir Mehmood Khan. “A
survey on issues in non-functional requirements elicitation”.
In: International Conference on Computer Networks and
Information Technology. IEEE. 2011, pp. 333–340.

[46]

[47]

[48] Colin Werner, Ze Shi Li, Neil Ernst, and Daniela Damian.
“The Lack of Shared Understanding of Non-Functional Re-
quirements in Continuous Software Engineering: Accidental
or Essential?” In: 2020 IEEE 28th International Requirements
Engineering Conference (RE). IEEE. 2020, pp. 90–101. DOI:
10.1109/RE48521.2020.00021.

[49] Colin Werner, Ze Shi Li, Derek Lowlind, Omar Elazhary,
Neil A Ernst, and Daniela Damian. “Continuously managing
NFRs: Opportunities and challenges in practice”. In: IEEE
Transactions on Software Engineering (2021).

