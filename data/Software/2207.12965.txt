2
2
0
2

l
u
J

6
2

]
t
e
d
-
s
n
i
.
s
c
i
s
y
h
p
[

1
v
5
6
9
2
1
.
7
0
2
2
:
v
i
X
r
a

LHCb-PROC-2022-009
July 22, 2022

LHCb’s Forward Tracking algorithm for the Run 3 CPU-based online
track-reconstruction sequence

Paul Andr´e G¨unther

On behalf of the LHCb collaboration,
Physikalisches Institut
Heidelberg University, Germany

ABSTRACT

In Run 3 of the LHC the LHCb experiment faces very high data rates containing
beauty and charm hadron decays. Thus the task of the trigger is not to select any
beauty and charm events, but to select those containing decays interesting for the
LHCb physics programme. LHCb has therefore implemented a real-time data
processing strategy to trigger directly on reconstructed events. The ﬁrst stage of
the purely software-based trigger is implemented on GPUs performing a partial
event reconstruction. In the second stage of the software trigger, the full,
oﬄine-quality event reconstruction is performed on CPUs, with a crucial part
being track reconstruction, balancing track ﬁnding eﬃciency, fake track rate and
event throughput. In these proceedings, LHCb’s CPU-based track reconstruction
sequence for Run 3 is presented, highlighting the ”Forward Tracking”, which is the
algorithm that reconstructs trajectories of charged particles traversing all of
LHCb’s tracking detectors. To meet event throughput requirements, the ”Forward
Tracking” uses SIMD instructions in several core parts of the algorithm, such as
the Hough transform and the cluster search. These changes led to an improvement
of the algorithm’s event throughput by 60%.

PRESENTED AT

Connecting the Dots Workshop (CTD 2022)
May 31 - June 2, 2022

© 2022 CERN for the beneﬁt of the LHCb collaboration. CC BY 4.0 licence.

 
 
 
 
 
 
Connecting the Dots. May 31 - June 2, 2022

1

Introduction

During Run 3 of the LHC, LHCb will take data with new tracking detectors, new readout electronics
and a new, purely software-based trigger [1, 2]. These upgrades to the LHCb experiment are necessary to
eﬃciently process the data from 30 MHz of non-empty pp bunch crossings at the LHCb design luminosity of
L = 2 × 1033 cm−2 s−1 producing millions of beauty and charm hadrons per second. At these signal rates
a hardware trigger is not anymore able to eﬃciently reduce the amount of data recorded as its bandwidth
is already fully saturated by hadronic B decays [2, 3]. This problem is solved by a purely software-based
trigger system that analyses and selects events in real time, i.e. performing the full, oﬄine-quality event
reconstruction. The most crucial part of the reconstruction sequence is the charged track reconstruction. The
Run 3 LHCb detector employs three tracking detector technologies, a hybrid pixel detector (VELO, Vertex
Locator) surrounding the pp interaction region [4], a silicon microstrip detector (UT, Upstream Tracker) [5]
placed upstream of a dipole magnet and three stations of large-area scintillating ﬁbre detectors (SciFi) [5]
located downstream of the magnet. The whole LHCb detector is a single-arm forward spectrometer covering
the pseudorapidity range 2 < η < 5. The software trigger is split into two parts, the ﬁrst stage is the High
Level Trigger 1 that performs a partial event reconstruction on GPUs [6–9], the second stage, called High
Level Trigger 2 (HLT2), reconstructs the full event using CPUs and selects decay candidates which are then
sent to permanent storage for further analysis [10]. The full HLT2 event reconstruction includes charged track
reconstruction, track parameter estimation using a Kalman ﬁlter, hadron, electron and muon identiﬁcation
and photon reconstruction. The HLT2 charged track reconstruction sequence is outlined in Sec. 2. One of
the algorithms in this sequence is the Forward Tracking, highlighted in Sec. 3.

2 CPU-based charged track reconstruction in HLT2

LHCb deﬁnes ﬁve diﬀerent track types described in Ref. [11]. Among these are VELO, T and Long tracks.
VELO and T tracks have hits only in the VELO and SciFi detector, respectively, while Long tracks traverse
the whole tracking system and are required to have hits in the VELO and SciFi detector, and can optionally
have hits in the UT detector. Because they use all tracking detectors, Long tracks have the best momentum
resolution and are therefore most used for physics analysis.

In HLT2 there are two independent algorithms reconstructing Long tracks, the Forward Tracking and the
Matching, employing diﬀerent track reconstruction methods. The Forward Tracking and Matching both take
VELO tracks as input, the reconstruction of which is done by the VELO Tracking described in Ref. [12]. The
Matching further takes T tracks, reconstructed by the Hybrid Seeding algorithm described in Ref. [13], and
matches them to VELO tracks which consequently become Long tracks. To ﬁnd the correct combinations
of VELO and T tracks, the Matching evaluates a multilayer perceptron trained on simulation and decides
whether there is a match depending on the response of the neural network. The Forward Tracking is described
in Sec. 3. Both algorithms are designed to ﬁnd as many Long tracks as possible, which leads to a large
overlap between the two sets of found Long tracks. In Run 2, this redundancy was accepted and resolved by
selecting Long tracks according to their quality after applying a Kalman ﬁlter. This proceedure increased
the reconstruction eﬃciency [14]. In Run 3, however, the timing constraints posed by the real-time analysis
trigger strategy favour avoiding the redundancy. This is achieved by the reconstruction sequence shown in
Fig. 1a. First the VELO tracking and Hybrid Seeding are run. The Matching then combines VELO tracks
with T tracks. Residual VELO tracks, that could not be matched, are given to the Forward Tracking as
input, which tries to create a Long Track using only SciFi hits that are not already taken into account by a
Long Track found by the Matching.

The event throughput of the HLT2 reconstruction sequence is shown in Fig. 1b, including contributions
from the Kalman ﬁlter and particle identiﬁcation. Avoiding the aforementioned redundancy in the Long Track
reconstruction, the HLT2 reconstruction sequence reaches more than 500 events per second and computing
node, with the Forward Tracking not being a throughput-dominating component. More performance metrics
such as reconstruction eﬃciencies of the HLT2 charged track reconstruction can be found in Ref. [15].

1

Connecting the Dots. May 31 - June 2, 2022

VELO Tracking

Hybrid Seeding

VELO Tracks

T Tracks

residual VELO Tracks

Matching

Forward Tracking

Long Tracks

(a)

(b)

Figure 1: The Run 3 Long Track reconstruction sequence is shown in (a). Colours indicate that objects
belong together. The throughput contribution of diﬀerent components in the HLT2 reconstruction sequence
is shown in (b) [16]. RICH, Calorimeter and Protoparticles refer to particle identiﬁcation, the Track Fit is a
Kalman ﬁlter. The Hybrid Seeding algorithm is called Seed Tracking here.

3 HLT2 Forward Tracking

The goal of the Forward Tracking is to ﬁnd a forward extension of a given VELO track in the SciFi tracker
and to estimate a preliminary∗ momentum of this Long Track. The SciFi detector consists of three stations,
each with four layers of scintillating ﬁbre modules. Therefore, the forward extension is a set of ten to twelve
SciFi hits, with each hit belonging to a diﬀerent layer of the SciFi detector. The hits the Forward Tracking
algorithm searches for form a slightly curved trajectory that is compatible with originating from a VELO
track. The line is curved in the xz- and yz-projection† because of fringe magnetic ﬁelds within the SciFi
stations. The central problem to solve is ﬁnding the single correct combination of a VELO track with SciFi
hits among the many possible extensions, or ﬁnding that no such combination is present, while keeping the
reconstruction eﬃciency and event throughput high and the fake track fraction low. The complexity scales
with the number of input tracks and the total number of hits recorded by the SciFi detector. Typical events
with inelastic pp collisions lead to O(102) VELO tracks and O(103) SciFi hits. The Forward Tracking uses
a method similar to a Hough transform [17] to eﬃciently and robustly spot hits forming the line pattern
matching a VELO track. The following Sections 3.1-3.3 describe important components of the algorithm
performed on individual input tracks.

3.1 SciFi hit selection

∂z , ∂y

∂z , q

∂z , ∂y

Starting from a state vector (x, y, ∂x
p ) containing the position, slopes and so far unknown charge q
and momentum p at the end of the VELO, i.e. a VELO track, the Forward Tracking deﬁnes a polynomial
P ( ∂x
∂z , p) parameterising the propagation of the track in the xz-plane through the magnetic ﬁeld down to
the SciFi layers. As the momentum and charge are not known yet, this parameterisation is used to calculate
xmin and xmax positions for each layer assuming a minimum reconstructible track momentum pmin, e.g.
pmin = 1.5 GeV, and both possible charges. Only SciFi hits with x ∈ [xmin, xmax] are selected for further
processing, reducing the complexity of the problem. The determination of this hit search window by a
polynomial is computationally cheap and therefore preferred over numerically solving the equations of motion

∗The best momentum estimate is obtained by applying a Kalman ﬁlter to the track found bound by the Forward Tracking,

using the preliminary momentum estimate as input.

†The LHCb coordinate system is a right handed system with positive z running along the beamline from the interaction

point into the detector and positive y pointing upward.

2

HLT12.3%Downstream4.1%Converters5.3%Forward 5.6%Calorimeter8.5%Protoparticles13.0%Seed Tracking13.1%Track Fit23.6%RICH22.6%LHCb Simulation                                        Throughput = 505.0 events/s/nodeConnecting the Dots. May 31 - June 2, 2022

in the magnetic ﬁeld in a real-time application.

3.2 Simpliﬁed particle trajectory

Similarly to the parameterisation used to deﬁne the hit search window (Sec. 3.1), the Forward Tracking
deﬁnes a simpliﬁed particle trajectory by treating the magnet as an optical lens as described in Ref. [18].
Just like the model of light rays refracted by a thin lens, the particle’s movement in the xz-plane through
the magnetic ﬁeld is modelled by a straight line that gets a kick at the center of the magnetic ﬁeld and
propagates further as a straight line with a diﬀerent slope. Once a single hit (x, z) downstream of the magnet
is taken into account, predicting the x coordinate at a given z position is a simple straight line extrapolation
within the model. Deviations from this model occur because of fringe magnetic ﬁelds that reach into the
SciFi detector and are corrected for by parameterising the eﬀect using polynomials as described in Ref. [19].

3.3 Hough-like transform

The main component of the Forward Tracking applies a map-reduce pattern inspired by the Hough transform
to sieve out sets of SciFi hits that do not form a matching extension to the VELO track.

The x positions of SciFi hits selected by the search window described in Sec. 3.1 are mapped to a reference
plane at a ﬁxed z position. All hits’ x positions at the reference plane are calculated using the simpliﬁed
trajectory introduced in Sec. 3.2 and ﬁlled into a histogram. The histogram counts the number of unique SciFi
detector layers that are present among the hits in one bin. This way, hits that do not qualify as extension to
the VELO track form a ﬂat distribution, while hits that match the VELO track accumulate in a few bins as
depicted in Fig. 2. Subsequently, the histogram is scanned for small groups of neighbouring bins exceeding
a layer-count threshold, thus reducing the large set of hits from within the search window to none, one or
several small sets of hits, which become candidates for the VELO track extension. The found hit sets are
then cleaned from outliers, ﬁtted using a third-order polynomial function and further selected according to
the ﬁt result. The remaining candidates are promoted to Long tracks and their charge and momentum is
estimated.

z

x

smallest momentum
track window

SciFi Tracker

#Layers

T1

T2

T3

threshold

VELO track

Figure 2: Sketch of the key components of the Forward Tracking. Starting from a VELO track (blue), a
smallest-momentum hit search window is calculated (black dashed line). The x positions of hits in the twelve
SciFi detector layers (three stations T1, T2, T3 with four layers each in light blue) are projected to the
reference plane (orange) using a simpliﬁed track model (not shown here). The most right part of the ﬁgure
shows the histogram counting the number of unique SciFi detector layers depending on the projected x
positions. Hits belonging to the VELO track are shown in green, other hits in red.

Reference
Plane

xReference

3

Connecting the Dots. May 31 - June 2, 2022

3.4 Event throughput optimisation

Optimisation of tracking algorithms usually deals with a trade-oﬀ between event throughput, track recon-
struction eﬃciency and fake track fraction. However, capabilities of modern CPUs oﬀer new opportunities to
improve the throughput of an algorithm without compromising the other two metrics.

The throughput performance of the Forward Tracking is optimised by exploiting data level parallelism
using the vector registers of the CPU. These registers contain the operands for a single CPU instruction that
acts on multiple data points at once (SIMD, single instruction multiple data). For this to work eﬃciently, an
appropriate choice of data structures is crucial. Therefore, information about SciFi detector hits is stored
in a structure-of-arrays layout, i.e. all x positions are arranged successively in memory. This enables fast
data loading to SIMD registers as well as fast storing of the computed result. The Forward Tracking mostly
applies this form of parallelism in the computationally expensive map-reduce part explained in Sec. 3.3. The
mapping of hits’ x positions to the reference plane is done for multiple hits at once using single instructions
and likewise the threshold scan reducing the data is performed on several histogram bins in parallel. Using the
Advanced Vector Extensions 2 (AVX2), SIMD registers hold 256 bits equal to eight single precision ﬂoating
point or integer numbers that then can be processed in parallel. Adapting the Forward Tracking algorithm to
eﬃciently use AVX2 improves its event throughput by 60% without losses regarding reconstruction eﬃciency
or fake track fraction.

3.5 Reconstruction performance

The Long track reconstruction eﬃciency achieved by the Forward Tracking in dependence of momentum and
pseudorapidity is shown in Fig. 3. A high eﬃciency is particularly important for studies of charm and beauty
decays with many ﬁnal state particles in which track reconstruction ineﬃciencies have a large impact on
the total decay reconstruction eﬃciency. The integrated eﬃciency for reconstructing hadrons and muons
originating from a B meson is around 90%, while tracks with a momentum higher than 10 GeV reach more
than 95% eﬃciency. Electrons are in general harder to reconstruct with high eﬃciency as they loose energy
predominantly via bremsstrahlung when interacting with the detector material which unpredictably alters
their trajectory. This eﬀect is particularly visible in Fig. 3b in the high pseudorapidity region in which
particles traverse more material. It is also this region that exhibits the highest fake track fraction, as shown

(a)

(b)

Figure 3: Long track reconstruction eﬃciency of tracks reconstructed by the Forward Tracking algorithm
versus momentum (a) and pseudorapidity (b) for reconstructible electrons and non-electron particles from B
decays (empty blue and ﬁlled black circles, respectively) within 2 < η < 5 [16]. The underlying histograms
show the corresponding distributions of the reconstructible particles. Being reconstructible requires a minimum
number of hits in diﬀerent tracking detectors as described in Ref. [11].

in Fig. 4b, partly because of increased multiple scattering and hadronic interactions due to the material,

4

01000020000300004000050000p [MeV]00.20.40.60.81Efficiency of Long TracksLHCb Simulation- not eHLT2e- eHLT2e-p distribution, not e-p distribution, eLHCb Simulation- not eHLT2e- eHLT2e-p distribution, not e-p distribution, e < 5hLong from B, 2 <# Tracks p distribution [a.u.]22.533.544.55h00.20.40.60.81Efficiency of Long TracksLHCb Simulation- not eHLT2e- eHLT2e- distribution, not eh- distribution, ehLHCb Simulation- not eHLT2e- eHLT2e- distribution, not eh- distribution, eh < 5hLong from B, 2 < distribution [a.u.]h# Tracks Connecting the Dots. May 31 - June 2, 2022

but even more because of the higher SciFi hit density in the very forward direction leading to more possible
random hit combinations. Fig. 4a shows the fake track fraction in dependence of the fake track momentum.
The integrated fake track fraction coming from the Forward Tracking amounts to 15%. It is afterwards
reduced by applying a Kalman Filter and evaluation of a fake track classiﬁer.

(a)

(b)

Figure 4: Fake track fraction of Long tracks reconstructed by the Forward Tracking algorithm as a function
of fake track momentum (a) and pseudorapidity (b) [16].

4 Conclusions

The Forward Tracking is one of the algorithms ﬁnding Long tracks in LHCb’s Run 3 HLT2 reconstruction
sequence. To avoid the redundancy in Long track ﬁnding with the Matching algorithm and hence to improve
the throughput of HLT2, the Forward Tracking is only run on residual VELO tracks and SciFi hits. Including
the Kalman ﬁlter and particle identiﬁcation algorithms, the HLT2 reconstruction sequence reaches its goal of
an event throughput of more than 500 events per second and computing node. The Forward Tracking uses a
method similar to the Hough transform to recognise the line patterns left by particles traversing the SciFi
detector. With this, it reaches more than 90% reconstruction eﬃciency for tracks originating from a B meson
decay and a fake track fraction of 15%. Hence, the HLT2 reconstruction sequence and the Forward Tracking
are well prepared for data taking during Run 3 of the LHC.

ACKNOWLEDGEMENTS

The author would like to acknowledge the support by the LHCb collaboration and in particular thank the
LHCb Computing, RTA and Simulation teams for their work that makes developing and benchmarking our
algorithms possible.

References

[1] I. Bediaga et al. [LHCb], “Framework TDR for the LHCb Upgrade: Technical Design Report,” CERN-

LHCC-2012-007.

[2] LHCb Collaboration, “LHCb Trigger and Online Upgrade Technical Design Report,” CERN-LHCC-

2014-016.

5

01000020000300004000050000p [MeV]0.050.10.150.20.250.3Fraction of fake tracksLHCb simulation22.533.544.55h00.050.10.150.20.250.30.350.4Fraction of fake tracksLHCb simulationConnecting the Dots. May 31 - June 2, 2022

[3] A. Piucci, “The LHCb Upgrade,” J. Phys. Conf. Ser. 878, no.1, 012012 (2017) doi:10.1088/1742-

6596/878/1/012012

[4] LHCb Collaboration, “LHCb VELO Upgrade Technical Design Report,” CERN-LHCC-2013-021.

[5] LHCb Collaboration, “LHCb Tracker Upgrade Technical Design Report,” CERN-LHCC-2014-001.

[6] R. Aaij et al. “Allen: A high level trigger on GPUs for LHCb,” Comput. Softw. Big Sci. 4, no.1, 7 (2020)

doi:10.1007/s41781-020-00039-7 [arXiv:1912.09161 [physics.ins-det]].

[7] R. Aaij et al. [LHCb], “A Comparison of CPU and GPU Implementations for the LHCb Experiment Run
3 Trigger,” Comput. Softw. Big Sci. 6, no.1, 1 (2022) doi:10.1007/s41781-021-00070-2 [arXiv:2105.04031
[physics.ins-det]].

[8] T. Boettcher, “Allen in the ﬁrst days of Run 3,” PROC-CTD2022-33.

[9] A. Scarabotto, “Tracking on GPU at LHCb’s fully software trigger,” PROC-CTD2022-28.

[10] LHCb Collaboration, “LHCb Upgrade Computing Model Technical Design Report,” CERN-LHCC-2018-

014.

[11] P. Li, E. Rodrigues and S. Stahl, “Tracking Deﬁnitions and Conventions for Run 3 and Beyond,”

LHCb-PUB-2021-005.

[12] A. Hennequin, B. Couturier, V. Gligorov, S. Ponce, R. Quagliani and L. Lacassagne, “A fast and eﬃcient
SIMD track reconstruction algorithm for the LHCb Upgrade 1 VELO-PIX detector,” JINST 15, no.06,
P06018 (2020) doi:10.1088/1748-0221/15/06/P06018 [arXiv:1912.09901 [physics.ins-det]].

[13] R. Quagliani, Y. S. Amhis, P. Billoir and F. Polci, “The Hybrid Seeding algorithm for a scintillating

ﬁbre tracker at LHCb upgrade: description and performance,” LHCb-PUB-2017-018.

[14] R. Aaij et al. [LHCb], “Design and performance of the LHCb trigger and full real-time reconstruc-
tion in Run 2 of the LHC,” JINST 14, no.04, P04013 (2019) doi:10.1088/1748-0221/14/04/P04013
[arXiv:1812.10790 [hep-ex]].

[15] LHCb Collaboration, “Selected HLT2 reconstruction performance for the LHCb upgrade,” LHCb-Figure-

2021-003.

[16] LHCb Collaboration, “HLT2 reconstruction throughput and Forward Tracking performance for Run 3 of

LHCb,” LHCb-Figure-2022-005.

[17] P. V. C. Hough, “Machine Analysis of Bubble Chamber Pictures,” Conf. Proc. C 590914, 554-558

(1959)

[18] M. Benayoun and O. Callot, “The forward tracking, an optical model method,” LHCb-2002-008.

[19] Y. Amhis, O. Callot, M. De Cian and T. Nikodem, “Description and performance studies of the Forward

Tracking for a scintilating ﬁbre detector at LHCb,” LHCb-PUB-2014-001.

6

