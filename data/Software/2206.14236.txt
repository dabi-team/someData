2
2
0
2

n
u
J

8
2

]
I

N
.
s
c
[

1
v
6
3
2
4
1
.
6
0
2
2
:
v
i
X
r
a

A SURVEY ON SDN & SDCN TRAFFIC MEASUREMENT:
EXISTING APPROACHES AND RESEARCH CHALLENGE

MD Samiul Islam
University of Alberta
Edmonton, Canada
mdsamiul@ualberta.ca

Mojammel Hossain
North South University
Dhaka, Bangladesh
mojammel.hossain@northsouth.edu

Mohammed AlMukhtar
University of Baghdad
Baghdad, Iraq
mohammed.abdul@cc.uobaghdad.edu.iq

ABSTRACT

Software Deﬁned Network (SDN) is the next generation network that decouples the control plane
from the data plane of forwarding devices by utilizing the OpenFlow protocol as a communication
link between the data plane and the control plane. However, there are some security issues might
be in actions on SDN that the attackers can take control over the SDN control plane. Thus, trafﬁc
measurement is a fundamental technique of protecting SDN against the high-security threats such
as DDoS, heavy hitter, superspreader as well as live video calling, QoS control, high bandwidth
requirement, resource management are also inevitable in SDN/Software Deﬁned Cellular Network
(SDCN). In such a scenario, we survey SDN trafﬁc measurement solutions, in order to assess how
these solutions can make a secured, efﬁcient and robust SDN/SDCN architecture. In this paper, various
types of SDN trafﬁc measurement solutions have been categorized based on network applications
behaviour. Furthermore, we ﬁnd out the challenges related to SDN/SDCN trafﬁc measurement and
future scope of research, which will guide to design and develop more advanced trafﬁc measurement
solutions for a scalable, heterogeneous, hierarchical and widely deployed SDN/SDCN in future
prospects. More in details, we list out kinds of practical machine learning (ML) approaches to analyze
how we can make improvement in the trafﬁc measurement performances. We conclude that using
ML in SDN trafﬁc measurement solutions will give beneﬁt to get secured SDN/SDCN network in
complementary ways.

Keywords SDN · SDN Trafﬁc Measurement · SDN Measurement · SDCN

1

Introduction

To solve the above problem, OpenFlow is proposed as an online communication protocol which is able to control
the forwarding plane of an online switch or router. Also, OpenFlow API and the stateful data plane[1] are very
widespread among the researchers as they are straightforward to collaborate with software controller. Introductory
vendors that upheld Open-Flow included HP, NEC, some others, and this rundown has since extended signiﬁcantly.
The combination of SDN [2] and OpenFlow [3] is currently the simplest way to perform Quality of Service (QoS)
estimation, whenever and wherever using self-guided, self-tuning components that persistently screen and measure
network execution and respond quickly to issues [4]. With the program based OpenFlow API, a wide range of controllers
stages has been developed [5] for programmers to make numerous applications such as dynamic access control [6],
network virtualization [7], energy efﬁcient networking [8], consistent virtual-machine relocation and client versatility.

In traditional network, devices such as switches, routers are inﬂexible and cannot deal with different types of network
trafﬁc due to the underlying hardwired implementation of routing rules and other obstacles. This programmable network

 
 
 
 
 
 
can be designed for the need of the network operator, which may deploy its own rule of bandwidth, latency, packet
missing and inactivity to help the decent variety necessities of cutting-edge network applications and administrations
[9]. Then, network administrators take advantage of SDN scalability to offer dynamic QoS that ensures beneﬁt quality
between endpoints, paying little concern on the way conveys that administration. Because the traditional networking
devices are closed without programmability, each vendor is developing the code for the network protocol. If there is an
error in their code and the fault occurred due to this error, then the network administrator/developer is unable to unfold
such a fault, which makes SDN unsecured and unreliable to the clients. Although the hybrid deployment of SDN[10]
has many advantages including adaptability to budget constraints, central programmability of the network, it is limited
by its structure. Thus, we need to ﬁnd out the optimal solutions to make the SDN more powerful with a lot of network
functionalists.

Therefore, SDN trafﬁc measurement [11] comes into consideration to break down the complexity of SDN unresolved
problems, which also supports different types of tasks to OpenFlow controllers to utilize programmable interfaces.
These software deﬁned measurement solutions help to support the diversity requirements of next generation network
applications and services by providing consistent trafﬁc measurement of ﬂow parameters such as bandwidth, packet
loss, and latency. Also, whether the path carries that service, the ﬂexibility of software deﬁned measurement still gives
the network operator the capability to offer dynamic QoS that guarantees service quality between endpoints. Moreover,
an indirect, non-intrusive, and statistical way, which in some cases cannot be measured in traditional large networks, are
allowed in SDN trafﬁc measurement to infer several characteristics. Although it is quite a mature technology in these
days, it is still challenging for programmers to analyze or predict the trafﬁc measurement in future to provide dynamic
QoS to guarantees service quality.

However, with the development of machine learning (ML) algorithms, we can make decisions on plenty of tasks using
previous knowledge. In general, statistical machine learning, deep learning (DL) and deep reinforcement learning
(DRL) are the main methods to deal with the challenge of future prediction. Here, ML is a widely used way to measure
the trafﬁc data and it can give the network administrator of future recommendation. Moreover, DL is a recent method
which performs more efﬁcient and accurate than the classic ML approaches and can crack out more represented features
to make a prediction. Besides, different from these two approaches, DRL concerns more on how to lead the agents to
take action for achieving the ﬁnal goals, and it will interact with the environment to make decisions. With the analysis
of the trafﬁc data, SDN trafﬁc measurement among the network can be predicted and then programmers can prevent
attackers to control the controller of the network, which provides satisfying service and guarantees the QoS.

In this paper, we present a survey of the research relating to solutions in SDN trafﬁc measurement that have been carried
out until 2018. We ﬁrst describe the current issues about the SDN, SDCN and trafﬁc measurement, and then analyze
the existing approaches about their aspects and contributions. To further improve the performance on the SDN trafﬁc
measurement, we summarize out the future scopes in ML-based optimization and networking deployment. The main
contribution of this paper is as follows:

• We ﬁnd out the basic requirements to design an SDN trafﬁc measurement framework, which can be used as a

standard design method in this area.

• We provide a brief literature review on the SDN & SDCN measurement and categorize them by the network
applications and learning behaviour, then we also summarize the future scopes of research with the existing
challenges.

• To further improve the measurement of trafﬁc data, we summarize the probability of how to apply machine
learning, deep learning or deep reinforcement learning to the trafﬁc measurement. More in details, we analyze
previous machine learning-based methods and then transfer the basic idea into the other applications with
different approaches.

• At last, we conclude that machine learning is the best choice to design a framework, where we can use a set
of algorithms as a measurement library for SDN trafﬁc measurement of the next generation heterogeneous,
complex, hierarchical network.

The remainder of this paper is organized as follows. In Section II, we ﬁrst give a short brief description of SDN and
OpenFlow about its development and some measurement issues and then describe the currently existed cellular network
in Section III and discuss how to solve the security issues to improve the quality of SDCN. After this, in Section IV,
we introduce the SDN trafﬁc measurement in details. In addition, we categorize the previous state-of-the-art trafﬁc
measurement solutions on SDN/SDCN into 4 different segments based on the network applications behaviour in Section
V. And we also categorize a few ML SDN trafﬁc measurement solutions based on the learning behaviour to show the
advantages of using ML in Section VI. After that, we list out future prospects of ML-based networking and 9-future
research directions opened in SDN/SDCN trafﬁc measurement in Section VII and Section VIII respectively. At last,
Section IX summarizes the conclusions.

2

Figure 1: A simple SDN Architecture

2 Software Deﬁned Network

This section represents basic description of SDN, including a momentary introduction and the proposed architectures of
SDN. In addition, we describe the widely accepted southbound interface of OpenFlow protocol and the corresponding
working ﬂow in SDN environment.

2.1 Baseline of the SDN Network

In short, SDN is a network, which separates the control logic from data plane to concentrate into a new control plane,
that all command is logically centralized in a controller and it can logically control all data plane equipment. Among
the data exchanging, ﬂow is a concept of a sequence of packets, which are sent to the destination from the source.
The pattern matching (which can have only destination address) is used for ﬂow rule installation at the switches, and
the switches forward the data packets based on pattern matching. Also, the arrangement of packet ﬁeld extensively
deﬁnes a ﬂow esteems going about as a matching model and an arrangement of activities, and all packets of a ﬂow get
indistinguishable administration approaches at the forwarding devices [12, 13].

On the other hand, the ﬂow reﬂection permits bringing together the conduct of various kinds of network devices,
including routers, switches, ﬁrewalls, middle-boxes [14], and ﬂow programming empowers remarkable adaptability,
constrained just to the capacities of the actualized ﬂow tables [15]. Beside, control plane is moved to an outside
substance as the SDN controller or NOS. The NOS is a software stage, which is aimed to keep running on control
server and to give the critical assets and deliberations to encourage the programming of forwarding devices in light
of a logically incorporated. This network is programmable through software applications running over the NOS that
interfaces with the primary data plane devices, as the traditional network depends on the data plane, where all logic are
associated with switches/routers. Also, a network administrator needs to program and monitor every data plane device
one after another, which is time-consuming and lengthy. Fig. 1, shows the simple SDN architecture of how control and
data plane are separated. There are some terminologies related to SDN and SDN trafﬁc measurement as following:

• Data plane is interconnected devices through wired or non-wired link, and it is designed by network adminis-
trator for each mechanism work. In network foundation, interconnected forwarding devices ask for request to
the data plane directly to exchange the information. Forwarding devices have certain direction sets used to
take activities. These devices take the task of sending ﬂow or packets to the destination in some logical way.
There are some particular types of guidelines which are deﬁned by southbound interfaces. The southbound

3

interface is responsible for connecting between control and data plane. There are different types of southbound
interface such as OpenFlow [15], ForCES [16], protocol oblivious forwarding (POF) [17], which is introduced
in the forwarding devices by the SDN controllers executing the southbound protocols.

• Southbound Interface is interconnected between control plane and data plane. The network foundation
includes the interconnected forwarding devices communicate with the data plane, which is the place where
network administrator designs every rules and mechanisms.

• Control plane controls forwarding devices. It can be viewed as the brain of the network, which works to
control each component of the whole network architecture. The control logic exists in the applications and
controllers which builds up the complete control plane.

• Northbound Interface is the communication between the management plane and control plane. The NOS
can offer an Application Programming Interface (API) communicate with an exemplary interface for creating
applications to network applications engineers. Usually, a northbound interface abstracts the low-level direction
sets utilized by southbound interfaces to program forwarding devices.

• Management plane is the administrative plane to utilize the use of the capacities offered by the northbound
interface to actualize network control and operation logic, where all routing, switching are being done here. In
addition, it can be automatically translated to the data plane through the control plane. Besides, northbound
and southbound interfaces are the communication link of SDN environment.

2.2 Overview of OpenFlow

There are the design of southbound API and some other components of SDN [18, 19, 20], where OpenFlow is the
main signiﬁcant progress. This protocol proposes the communication to interact the data plane with the control of the
controller. In [21], Jarraya et al. develops a scientiﬁc classiﬁcation for SDN, which allows to control switches, routers
remotely by using a network operating system. Usually, NOS is the one who controls the network, and OpenFlow gives
a simple stage to follow some rules for forwarding devices.

On the one hand, OpenFlow allows to the match-action page in each switch/router, where it will make command to
take the action if a new packet is matched to the router table. Otherwise, it sends the packet to the controller to check
whether the packets need to be forwarded or dropped. This action of the OpenFlow depends on the decision made by
the controller, which may set a default rule for the new packets. There are certain amounts of actions, which can be
taken such as forwarding, encapsulation, dropping, checking, and matching, and the centralized controller takes all
these actions.

As shown in Fig. 2, it is clearly visible that how OpenFlow makes the impact during the data processing in SDN
environment. Networking applications are implemented in the data plane by networking operating systems and
OpenFlow protocol. SDN trafﬁc measurement depends on such kind of protocol to evaluate the trafﬁc signals. A few
OpenFlow-empowered forwarding devices are accessible as business and open source items. With a vast number of ﬂow
entries, the vast majority of the switches accessible generally have little ternary content addressable memory (TCAM).
It is a reasonable sign that the measurement of the ﬂow tables is developing at a pace intending to address the issues of
future SDN trafﬁc measurements. In short, OpenFlow protocol makes the SDN network robust and reliable.

3 CELLULAR NETWORK

Even though there has been a consistently developing for constant accessible network [22, 23], the security, threats and
scalability in cellular networks still need to be researched. Currently existed networks have many security issues such
as interface ﬂooding, network element crashing, trafﬁc eavesdropping, unauthorized data access, trafﬁc modiﬁcation,
data modiﬁcation, compromised network element, malicious insider, theft of service [24]. These attacks are generally
occurred in the base station, radio station and evolved packet core, and it is possible to maximize the security and
adequately manage the networks by including SDN in the network. In this part, we discuss the structure of the currently
existing network and SDCN architecture respectively.

The tremendous development in the innovation and network is forming a connected universe of millions and billions
of devices associated and communicating with each other. The present remote advances in 3G/4G are sprouting
IP availability and points in giving quicker web association, sight and sound application and a large number of
administrations with expanded performance. In light of these lists of quick improvement in the network devices, the
network does not adequately take care of the demand of assorted variety and low latency, which is foreseen in the 5G
remote network. The 5G fundamentally gives a client-driven availability where various applications are gotten to a
speedier pace, at the higher limit and at 1ms latency. The 5G is viewed as an essential instrument for acknowledging

4

Figure 2: Impact of OpenFlow Protocol in SDN

Internet of Things (IoT) worldview interfacing billions of devices as it is equipped for supporting machine-to-machine
(M2M) correspondence and requiring little to no effort and low battery utilization.

3.1 Long Term Evolution

In this subsection, we will ﬁrst discuss about the LTE architecture, which is the mainly technology in communication
network especially in the SDN, consists of E-UTRAN and EPC [25] two parts. The client hardware (UE) interfaces
coordinates trafﬁc through a serving gateway (S-GW) over a GPRS Tunneling Protocol (GTP) with a base station. Here,
the S-GW must deal with mobility in a client’s area and store many states since clients hold their IP tends to when they
move. Also, the S-GW sends trafﬁc to the packet data network gateway (P-GW) to uphold nature of-beneﬁt approaches
and screens trafﬁc to perform charging for the clients. This part needs to be discussed with [26, 27] The P-GW likewise
interfaces with the Internet and other cellular data networks and goes about as a ﬁrewall that squares undesirable trafﬁc.

With the joint effort of Mobility Management Entity (MME), which has the handover and mobility functions, the P-GW
performs to deal with session setup, reconﬁguration and additionally portability. For instance, the P-GW sends QoS and
other session data to the S-GW in light of a UE’s ask for devoted session setup. Like this, the S-GW advances the data
to the MME which at that point requests the base station distribute radio resources and build up the association with the
UE. As for the hand-off of UE, the source base station sends the hand-off demand to the real base station and exchanges
the UE state to the external base station to an afﬁrmation. The real base station likewise tells the MME that the UE has
changed cells, and the former base station will discharge resources, which will create new GTP for a new radio base
station.

The Policy Control and Charging Function (PCRF) oversees ﬂow-based charging in the P-GW. Besides, the PCRF
likewise gives the QoS approval that chooses how to treat each trafﬁc ﬂow, in light of the client’s membership proﬁle.
Also, the Home Subscriber Server (HSS) contains membership data for every client and the related MME. To give a

5

Figure 3: LTE Architecture

more details of illustration, Fig. 3 shows the LTE architecture as evolved packet core (EPC) and Evolved Terrestrial
Radio Access Network (E-UTRAN).

In general, the design of present cellular network has a few noteworthy restrictions. All trafﬁc data in the network
must pass through P-GW, which makes it a more critical device in EPC AND makes exceptionally costly. Centralized
controller data-plane capacities at the mobile Internet limits trafﬁc through the P-GW, including trafﬁc between clients
on the same cell network, making it hard to host famous substance inside the cell network. Furthermore, the network
devices have vendor-particular design interfaces with no programmability options, impart through complex control-plane
protocols, but with a substantial and developing number of tunable parameters. Above all, the new types of architectures
are needed to solve these critical problems [25].

3.2 Software Deﬁned Cellular Network (SDCN)

Next in this part, we discuss the structure of SDCN in which Cellular networks are ready for the presentation of Software
wireless network [25], where the network hardware performs fundamental packet-preparing capacities at the command
of utilization running on a logically-incorporated controller. As the cellular network is a wireless network, it is not
easy to deploy itself to the SDN, which can disperse data-plane rules over various, less expensive network switches,
diminishing the scalability on the packet gateway and empowering adaptable treatment of trafﬁc that stays inside
the cellular network. Also, it supports ongoing updates to some ﬁne-grained packet handling rules raising enormous
scalability challenges. Besides, mobility is a big issue and to solve this problem SDN integration can make a signiﬁcant
impact. Otherwise, it can require forwarding state at the level of individual endorsers, also the state must change rapidly
to stay away from beneﬁt disturbances. However, the network state needs to be changed rapidly to perform the network
operation.

There are four main ideas mentioned in [25], and these ideas are ﬂexible policies using local switch agents, ﬂexible
switch patterns and remotely control over the virtual-based station. They were proposed to design the cellular network
on top of the LTE structure, which also can be used as a 5G network concept. Here, a simple SDCN architecture is
shown in Fig. 4. On the other hand, Network Functions Virtualization (NFV)[28, 29] is used for speciﬁc network
functions such as mobility, security, handover, which are stored in the data center, and it also can store user information,
billing, subscription. Thus, every logic component is separated from the data plane as different parts. As described in
earlier of this paper, the OpenFlow protocol is responsible for the connection between controllers to switches/routers.
However, OpenFlow is used to apply the rules directly to the base station from the controller in SDCN, and the controller
can be used for directing trafﬁc through middle-boxes, monitoring for network control, billing, mobility, QoS control,
virtual cellular operator or inter-cell interference management.

6

Figure 4: SDCN Architecture

3.3 Security Challenges and Trafﬁc Measurement

There are four groups of security issues are in the cellular network [24] of SDCN. Thus, the security challenges are
quite relatively with the trafﬁc measurement. SDN defeats the conﬁnement of the heterogeneous network by decoupling
control plane from the forwarding plane by including programmable capacities, which underscores the way that its
division thought furnishes administrators easily of resource provisioning and programmability to change and control the
qualities of the entire network [30].Inspired by this, SDN needs to take care of current network issues and to enhance
network security with exceptionally compelling and productive arrangement.

Although OpenFlow improvement is at the peak, there are still many challenges to be taken into consideration.
Especially, the middleman attack is the big issue for SDCN that it is possible to take user information when the data
passes through the controller. Thus, an attacker can take network data, change ﬂow rules in the switches, or even embed
wrong ﬂow rules to take control of the entire network [31]

Moreover, OpenFlow itself creates some security issues and it will take SDCN into the next level of challenges to solve
security issues. The controller generally has a few modules for proﬁcient network administration and observing, that
can be viewed as outsider applications [32]. Once these modules have been endangered in the controller, it will cause
unfavorable issue and actuate weakness unexpectedly to the entire framework.

By this way, to overcome these security challenges in SDCN and to set up a superior and shrewder network guard
system, we have to apply current developed SDN to recognize them in different tasks and then react it to malevolent
activities ahead of time. Here, we believe SDN trafﬁc measurement ought to be the prime decision for the accompanying
reasons:

• Trafﬁc measurement adopts favorable circumstances of some speciﬁc strategies to comprehend and evaluate

network practices, which can be extremely useful in identifying mysterious practices ahead of time.

• Trafﬁc measurement can likewise be exceptionally helpful in making safeguards and responses in a short time.

7

• Trafﬁc measurement is the way to understand the network status continuously, which can be connected to large

network, where these are altogether viable approaches to build up a superior secured environment.

4 SDN Trafﬁc Measurement

In this section, we introduce the trafﬁc measurement in SDN and describe two types of measurements. There are
different issues made by varies of the produced movements from current networks. New technology makes troublesome
for network administrators to measure the status and progression of the network in compelling and proﬁcient ways [33],
which is the basic requirement of capacity of clarifying kinds of networks activities at various time-scales. Congestion
control and guaranteed performance are essential to ensure application execution that makes network administrators in
extraordinary distressing circumstances to fulﬁll clients’ desires for conveying applications with ensured QoS. There
are some key points need to be considered before choosing the way of trafﬁc measurement as following.

• Congestion control is the crucial part in the video streaming [34], live video capture and live video chat. We
have to precisely identify and measure changes in bandwidth to decrease quality corruption of the video.
• Switches/routers are rigid, and it can not manage diverse kinds of network activity, because of the hidden
hardwired execution of routing rules [35] and various snags. Accurate measurement and correctly programmed
in networking will have a chance to mitigate this types of snags, where SDNs and new correspondence
protocols like OpenFlow are utilized to solve those issues.

• OpenFlow protocol is the key to design a centralized controller for SDN network. By this way, the Network
administrator can measure trafﬁc information and make response so that it can give a higher performance in
high trafﬁc load

So far, with the describe of its colossal scale and the assorted variety of the considerable trafﬁc, the SDN measurement
tasks need a different way to measure the data trafﬁc. In this way, there are two types of measurement existing in SDN
trafﬁc measurement. One is the active measurement, and another is passive measurement [36].

4.1 Active Measurement

In active measurement process, network ﬂows are ceaselessly checked for execution by sending unique test packets
over the network. Also, trafﬁc ﬂows are irritated by test trafﬁc ﬂows, and it may create huge overhead. Thus, active
measurement in SDN requires cautious intending to adapt to the necessities of uniﬁed control design. Besides, the
deployment of active measurement devices expands the data obtaining dramatically by different requests of size [37]. So
the ﬂows of data procured by the dispersed devices in the network cannot furnish the SDN controller with the essential
data, and it is essential to limit the effect of activity unsettling inﬂuence. Even though there are some design methods
included in this area like artiﬁcial intelligence, robotic nature, the controller faces correspondence bottlenecks, ﬁrm
control, enhancement issues, and performance optimization, it is necessary to know that this is a continuous process,
that the more we run the query and the more congestion will increase. This technique can be vulnerable to the controller
and it cannot respond as quickly as the increasing trafﬁc.

4.2 Passive Measurement

On the contrary, in passive measurement, genuine trafﬁc is captured and then running queries to it to get the trafﬁc
measurement. Passive measurement has no impact as it does not lead to any overhead in the network. However,
sometimes passive measurement is vital in substantial trafﬁc instances, as it does not create additional trafﬁc in the
network and depends on sampling and some statistical method to get the trafﬁc data. Thus, the primary challenge
of passive measurement is that small ﬂows might be missed along an SDN ﬂow way may test the very same packet
prompting measurement mistakes [38]. To get a real-time measurement, we need sophisticated hardware to implement
with the network so that the result comes out within a tight time. Presently, a few rising methodologies are endeavoring
to overcome some critical challenges by effectively and by utilizing the concept of scalability in SDNs to offer
programmable interfaces to accomplish ﬁne-grained estimation of network activity ﬂows. These existing investigations
are either proposing active measurement techniques or passive measurement strategies.

4.3 Requirement of SDN Trafﬁc Measurement

SDN trafﬁc measurement has some requirements that must be followed to design SDN network. Without accurate
measurement the network can not be scalable, adaptable and secured and quite impossible to design higher level network
policy [39]. The basic part of SDN is the software program, which is access to be tracked by the attacker. To avoid

8

Figure 5: Requirement of SDN trafﬁc measurement

monitoring what is happening inside the network every time, it is necessary to apply artiﬁcial intelligence into the
network with the meaningful use of big data. Thus, SDN trafﬁc measurement is the critical step to make it scalable and
adaptable for network operators. A robust network framework for SDN has several design goals which will impact the
network, and it needs to follow the issues given below.

• Accuracy: SDN trafﬁc measurement framework requires high measurement accuracy, which is the crucial part
for every network functions speciﬁcally in SDN. Besides, a measurement job would not create congestion and
performance degradation.

• Resource effectiveness: SDN trafﬁc measurement framework proﬁciently uses Central Processing Unit (CPU)
for packet handling and memory on which the measurement job would like to increase extra usage of the
resources. That is why CPU usage will be increased by the increasing number of measurement tasks. Thus,
the solutions of trafﬁc measurement need to decrease resource usage while maintaining higher accuracy.

• Generality: SDN trafﬁc measurement framework supports an extensive variety of measurement solutions. We
can not use a framework only for one network function, which is costly, complex, unreliable and unsuitable
for next generation heterogeneous network.

• Simplicity: SDN trafﬁc measurement framework naturally mitigates the handling weights under high trafﬁc
load, and it does not necessarily require conﬁguring every host. It needs to arrange the data and the results to
deploy an action immediately in the network.

Some of the papers related to SDN trafﬁc measurement framework are the review of outline such as OpenSketch [40],
Univmon [41], Dream [42], Scream [43], Trumpet [44], and online measurement of large trafﬁc data by Jose et al.
[45], where all of them supports these requirements above. It contains a separated data plane that keeps running on the
software switches in a network and a centralized control plane that collects data from all software switches for various
types of measurements. Fig. 5 shows balance of overhead, generality, real-time decision making, and proper resource
usage are the standards set for SDN accurate measurement.

9

4.4 Trafﬁc Measurement Activities

There are several measurement activities for trafﬁc measurement. Here, we have to ﬁnd out which in the network needs
to be measured. To answer this question, we summarize the measurement activities, which is inevitable for SDN/SDCN.

4.4.1 Link Latency

Link latency is the delay from input into a system to desired outcome; the term is understood slightly differently in
various contexts and latency issues also vary from one system to another. It greatly affects how usable and enjoyable
electronic and mechanical devices as well as communications are, and it is sensitive to network applications to
ﬁnd out the malfunctions of the network and then correct it [15]. For example, e-banking needs to communicate
without compromising the delay where link latency plays a crucial rule. By watching latency thresholds, the network
administrator can re-route the network path to maintain QoS [16].

There is an example of the link latency and how we can measure it as shown in Fig. 6a. In general, it can be described
as the latency in the communication between the user and the servers. Here, we need to calculate the latency between
them as one part from pulling request to receiving instruction, then we can make solution to guarantee the QoS.

4.4.2 Network Topology

Network topology is the arrangement of the elements like links or nodes of a communication network, which is the
complete overview of the whole network contains all the physical connections link among all network nodes [46, 47, 48].
Estimating and refreshing topology assume an essential job in giving capacities of essential network. What is more,
some network functions such as routing, troubleshooting, network management, malware detection need the information
of network topology.

Fig. 6b shows a distributed topology in a simple network, the nodes contact to each other and each of them links to
several users. To measure the trafﬁc in different kinds of topology networks, we need to ﬁrst clarify their architecture
and then collect the messages.

4.4.3 Bandwidth

Bandwidth [49, 50, 51] is the maximum throughput or capacity of the communication whether it is logical or physical
communication. Maximum capacity sustains on the shanon channel capacity theorem, which depends on signal to noise
ratio. An example is shown in Fig. 7a, that there is the limit capacity on the global branch at each second whether it will
dredge into several local branches.

(a) An Example of Link-Latency

(b) An Example of Network Topology

Figure 6: The example of Link-Latency and Network Topology in SDN Measurement Activities. (a) refers to the
connect latency to send requests between host and server, and (b) shows a distributed topology in a simple network.

10

(a) An Example of Bandwidth

(b) An Example of Heavy Hitter and Heavy Changer

Figure 7: An Example of Heavy Hitter and Heavy Changer

(a) An Example of DDoS Attack in SDN

(b) An Example of Superspreader in SDN

Figure 8: The example of DDoS and Superspreader Attack in SDN Measurement Activities. The main difference
between these two attacks is that whether the victim is used to receive amount of requests or used to send plenty of
packet ﬂows.

4.4.4 Heavy Hitters and Heavy Changer

Heavy hitters [52] are huge ﬂows, which cause network congestion, make link hard handle the data. Thus, we have to
set a threshold point to decide whether the trafﬁc is jammed, and then give out the solutions. On the other hand, heavy
changer is almost the same as a heavy hitter that also cause the congestion of the network. The difference between them
is that the heavy changer is a ﬂow whose difference in byte counts crosswise over two consecutive epochs exceeds
a threshold. Fig. 7b shows the example of these two measurement, where the huge ﬂows exceed the capacity of the
network and lead to the congestion.

4.4.5 DDoS

DDoS [53] stands for Distributed Denial of Service where a system gets a massive amount of trafﬁc measurement
more than a threshold point from various sources, that leads to break down the network; and we called this DDoS
attack. Thus, the server is attacked by amount of disturbing ﬂows, and then the link cannot handle the trafﬁc and stop
responding to all requests. DDos attack is one of the popular attacks which takes less time to attack and control over the
network.

As shown in Fig. 8a, the attacker uses the controller to control plenty of zombie services to send trafﬁc massages to the
victim, which produces the congestion and breaks down the victim system. In the real-time, our measurement needs to
ﬁlter out the attack packets to provide QoS.

4.4.6 Superspreader

Superspreader [54] is opposite to DDoS, that amount of ﬂows/data are sent by a source more than threshold point to
several destinations. Thus, an attacker can use one client’s computer as a superspreader to send much trafﬁc to other
destinations, which leads the client’s computer cannot handle the trafﬁc and even not stop responding. To avoid being
attacked by the superspreader, we must disconnect the internet of whole network. Different from the DDoS, the attacker

11

Figure 9: References of SDN Trafﬁc measurement

in Fig. 8b controls the victim computer to send amount of ﬂows to other places at each time, and victim cannot handle
this trafﬁc as well.

4.4.7 Entropy

Entropy [55] is the equilibrium state of the network. There are many links in the network, which can give the largest
number of ways to construct the network. Thus, a network needs to use all links properly with the real time scenario. It
is crucial to know the link ﬂow distribution so that the link can be at the equilibrium state.

There are some other crucial measurement activities such as, cardinality (number of particular ﬂows in an epoch), ﬂow
estimate distribution (ﬂows for ranges scopes of byte counts in an epoch), also are valuable to be measured in the trafﬁc
measurement task.

5 SDN Trafﬁc Measurement Solutions

In this section, we will discuss existing proposed SDN trafﬁc measurement solutions, which can be used for further
research to design secured SDCN architecture. We collect almost all the papers which proposed trafﬁc measurement
solutions until 2018, from where the initial stage network architecture was simple, less complex and easy to deploy.
Thus, in the research before, measurement requirement was based on overhead and most of the researchers concentrated
on balancing overhead. At the same time, resource usage policy played an crucial rule and some other solutions were
introduced to get high accuracy by using less resources. For the complex and heterogeneous of today’s network, we
need to instant video calling [56], online transaction, social networking, and we have to consider about real time trafﬁc
measurements for quick decision making. Furthermore, we need some speciﬁc network discovery such as latency
monitoring, topology discovery to ﬁnd out the current status of the network. Here, we make 4 groups of different trafﬁc
measurement solutions in Fig. 9, which will be given below in details.

5.1 Balance Overhead

Ceaselessly observing the network frequently presents overhead, should be taken into consideration as a trade-off with
trafﬁc measurement precision. With an end goal to locate a suitable zone amongst exactness and overhead ramiﬁcations,
Jose et al. [45] proposed a way to collect substantial trafﬁc data in commodity switches by measurement structure
where switches coordinate packets against a collection of wildcard case rules accessible in Ternary Content Addressable
Memory (TCAM). Here, TCAM is a type of RAM where data can be saved in boolean form, and it can save a good
amount of data by compression. This approach reduces overhead because the switch can take decisions based on some
wildcard rules. By using TCAM, it is possible to store data or packet processing rules in the switch/router. The structure
is assessed utilizing a Hierarchical Heavy Hitter (HHH) program to comprehend the trade-off amongst accuracy and

12

overhead. In these types of the category, we need to update regularly the matching rules, which are the primary concern
of this measurement solution [57].

To further improve the above method, iSTAMP [58] powerfully segments the TCAM entries to permit ﬁne-grained
measurement tasks of coming ﬂows. iSTAMP creates two partitions of TCAM, one is used for aggregation, and the
other is for deaggregation. Flows are stamped for active measurement on the off chance that they are considered to
be essential. The iSTAMP utilizes the algorithm which is based on calculation to process these two arrangements
of measurements, that are then mutually prepared to evaluate the extent of all network ﬂows utilizing distinctive
optimization strategies.

On the other hand, methods like OpenNetMon [59] used OpenFlow to quantify trafﬁc parameters. OpenNetMon
decides whether end-to-end QoS parameters are exists in each ﬂow, and it is a process of continuously monitored with
predeﬁned rules. Thus this active measurement fetches the data from switches, and the queries will vary by changing
the ﬂow rate. Also if ﬂow rate changes, the query will increase and vice-versa. Another OpenFlow based approach
is proposed by OpenTM [60]. Switches are simple forwarding devices here, and the controller can query trafﬁc data
by using OpenFlow ﬂow entries, of which the logic is to track every active ﬂow in the network. OpenTM is an active
far-reaching measurement approach that at last will present overhead during the time spent intermittently pulling factual
data from switches over the network. Besides, OpenTM is used to mix of determination strategies to choose switches
for pulling data; this may prompt some measurement mistake. Thus, OpenTM is not suitable for high trafﬁc congestion.

There are also many approaches in different method. Hash-based switches [61] are used to collect the trafﬁc ﬂows in the
SDN network, which helps distinctive measurement undertakings with the heavy hitter calculation for characterizing
vital trafﬁc. In any case, observing guidelines should be carefully designated over the network. Like in Y. Zhang
et al. [62], it utilizes a forecast based calculation for ﬂow checking to distinguish anomalies. The measurement
granularity along both the spatial and the worldly measurements changes progressively. As the same, abnormality
locators can educate the ﬂow-gathering module to give ﬁne-grained measurement data if there should arise an occurrence
of expecting an attack or it can gather ﬁne-grained ﬂow data generally. Furthermore, Payless [63] is an SDN based
active framework, which is also considered with its accuracy and overhead. The preferred fundamental standpoint
of Payless is that it utilizes versatile measurements gathering calculation to achieve exact data continuously without
bringing about noteworthy network overhead. The API of ﬂoodlight controller is used for actualization, which has low
overhead and makes higher precision. Table 1, shows that comparison of the trafﬁc measurement by considering the
balanced overhead.

From the approaches mentioned above, we can generalize their characteristics as following:

• These trafﬁc measurement solutions are almost concentrated on balancing overhead and the accuracy.
• TCAM is the vital component of all these solutions in this part, and ﬂow entries are stored in the different

segment of TCAM.

• A different approach of by collecting TCP sequence number in sampled ﬂow (sFlow) collector makes it robust

in hierarchical network and popular among the network operators.

5.2 Resource Usage Policy

As we mentioned before, resource usage was not a concerning trade-off for above solutions; so a proposed method
DREAM [42] is a dynamic resource allocation software-deﬁned measurement system that harmonies between accuracy
levels and resources are used for measurement activities. These resources are not allotted before the execution of the
measurement task in DREAM, which concerns resource usage and its impact on measurement accuracy, to get an
accurate measurement. Furthermore, DREAM system tries to utilize heavy hitter programs demonstrate that DREAM
can bolster more simultaneous undertakings with higher accuracy than a few different options. Also, alignment is
a necessary component between source and destination so that it can achieve a higher-level accuracy with reducing
overhead.

Also, another way is developed by Dusi et al. [64] that proposed a powerful proactive controller, which required a
certain amount of space for ﬂow entries in TCAM. However, sometimes trafﬁc ﬂow can exceed the limit of TCAM
entries. While furnishing SDN switches with all the more capable TCAMs is a possible alternative, this may come to
the detriment of expanding the operation and power utilization costs. The investigation recommends that controllers
ought to expend resources proﬁciently utilizing a reactive logic control approach. As in DREAM, the examination
recommends that resources must be dispensed and liberated relying upon the network stack, the viable conduct of the
ﬂows, their granularity and packet processing. Thus, it should be a way that can be manageable in the network correctly.
Besides, Baatdaat [65] is another proposal, which utilizes NetFPGA programmable switches with running OpenFlow,
and it allows continuous dynamic ﬂow. The proposed algorithm can adjust to immediate trafﬁc blasts and additionally

13

Table 1: SDN Trafﬁc Measurement Solutions Considering Balanced Overhead

Solutions

Drawbacks

Reference
Jose et al. [45]

• Coordinating switch packets against a

• Continuously observing network ﬂows

collection of wildcard rules

may lead overhead

• Taking decisions of switches by using
wildcard rules using Ternary Content
Addressable Memory (TCAM)

• Switch does not have a lot of memory

spaces

• Updating rules by matching with wild-
card entries is computationally costly

• Continuously monitoring of the net-

• Changing ﬂow rate can increase ﬂow

work ﬂows with predeﬁned rules

rate

• Fetching the data from switches using

• Increasing ﬂow rate may lead to over-

OpenFlow protocol

head

• Creating two partitions of TCAM using

OpenFlow control

• Flows are stamped when it is essential

• Segregating two arrangements of algo-
rithm, aggregation, and de-aggregation

• Introducing additional technique called
STAMP, which is computationally
costly

• It needs the crucial ﬂows to get higher

accuracy

• Used for gathering trafﬁc data

• Handling of monitoring rules

• Monitoring rules need to delegates
carefully across the network to get
higher accuracy

• Forecasting based algorithm for ﬂow

• Accurate only for identiﬁed trafﬁc

counting to detect anomalies

• Monitoring every active ﬂow and pulls

• May lead to high overhead after a cer-

data continuously from switches

tain limit

• Giving high accuracy by continuously

monitoring

• Measurement mistakes can be occurred
due to determine strategies to choose
switches for pulling data

• Polling ﬂow statistics with a regular

• Accuracy depends on based on the

interval

length of the polling interval

• Concentrating tradeoff between accu-

• Finding a suitable polling interval is

racy and overhead

difﬁcult

OpenNetMon [59]

iStamp [58]

Moshref et al. [61]

Zhang [62]

OpenTM [60]

Payless [63]

to standard connection stack by utilizing save DC network ability to moderate the performance corruption of intensely
used connections.

A platform named HONE where various types of measurement solutions can be gathered together is proposed in
[66]. Here, it presents a uniform stack for a various accumulation of measurements in SDN based frameworks. Since
consistently gathering measurable data about network ﬂows is costly, two strategies are proposed to solve this issue. The
ﬁrst strategy makes a table of statistical data collected from source, destination and network devices, which minimizes
the network overhead by allowing controller for querying from that statistical data table. The second strategy is known
as parallel streaming, where operators can use this data by aggregating among multiple hosts. If we want to apply
HONE to an SDN network, scalability will be the signiﬁcant challenges because each host needs to install a software
that synchronized to the statistical data so that meaningful queries can be achieved. Table 2, shows that comparison of
the trafﬁc measurement by considering the resource usage.

From the approaches mentioned above, we can generalize their characteristics as following:

• These all trafﬁc measurement solutions before concentrated on how to decrease resourse usage of CPU with

improving the perfomance of accuracy.

14

Reference
DREAM [42]

Dusi et al. [64]

Baadaat [65]

HONE [66]

Table 2: SDN Trafﬁc Measurement Solutions Considering Resource Usage

Solutions

Drawbacks

• Maintaining harmony between over-
head and resource usage as resources
are not allotted before measurement
tasks

• Deploying resources dynamically to

get desired level accuracy

• Alignment is necessary between source
and destination to get higher accuracy

• Intending to proactive using a Certain
amount of space for ﬂow entries in
TCAM

• More power usage and computationally

costly

• Accuracy increased by adding power-

• Controlling the TCAM space

ful TCAM

• Powerful TCAM is used for increasing

the capacity of ﬂow entries

• Utilizing OpenFlow, and NetFPGA

• Immediately trafﬁc bursts do not adapt

programmable switch

link load

• Allowing the switch continuously for

dynamic ﬂow scheduling

• Residing software agent on every host

• Continuously collecting data is costly

• Interacting module with network de-

• Serious scalability problem due to re-

vices

side software agents in every host

• Collecting statistical data periodically

• Following two strategies; one is to
make a table of statistical data collected
from source and second one is parallel
streaming

• Powerful proactive controller was used for getting more TCAM storage, but ﬂow entries exceeded the limit of
the table in high trafﬁc load. Thus, researchers utilized optimization techniques to manage resources more
efﬁciently.

• One of the accurate technique they applied that, different measurement solutions got different priority on

resource usage based on the measurement requirement.

5.3 Real-time Monitoring

Collecting statistical data of the large amount of ﬂows in real-time is the challenge in SDN trafﬁc measurement. Thus,
time-sensitive apps and real-time analysis can solve this issue. A proposed method, PLANCK [67] is a real-time
measurement framework which gathers signiﬁcant real-time data for statistical analysis, and it utilizes the typical
characteristics of the switches. The eminent advantage is that it can be deployed in an SDN environment without
changing network devices. Also, PLANCK gives a speedy network framework for comparing traditional network as
port mirroring, which is a typical way to deal with trafﬁc measurement going through the mirror utilizing an assortment
of network analyzers and security applications. Nevertheless, trafﬁc volume may surpass the limit of the ports to make
the switch begin dropping packets. To unravel this issue, the researchers proposed a way [68] to buffer the trafﬁc
measurements for advance examination. However, buffering does not give proper solutions because dropping packets
are dramatically increased in high network load.

Slightly different from the above OpenFlow approach, OpenSample [68] is a sampling based measurement method
proposed by IBM, a manufacturer company of hardware devices. It uses sFlow [69] packets to give near-continuous
measurements of both network load and individual ﬂows by catching packets from the network. OpenSample utilizes
TCP sequence number from the captured data, and sFlow collector collects the data to analyze accurate ﬂow statistics.
Floodlight OpenFlow controller is used for the testbed. One of the fundamental focal points of OpenSample is that
it considers any TCP ﬂow. Furthermore, it can negotiate colossal trafﬁc and continuous ﬂows and no requirement of

15

adjustment to switches. These advantages make exceptionally attractive and acceptable to global network operators.
However, this is expensive and vendor oriented to be deployed in SDN.

A new idea of using sketch-based measurement is started from Reversible Sketch [70], which utilizes ﬂow header and
hashing function to make it smaller subspace. It takes a less amount of memory space. In the ﬁrst stage, it records the
packet stream using FPGA board by operating it online. Also, it can detect the massive changes of the ﬂows in the
next stage. Thus, this framework is critical in heavy trafﬁc, which uses a little amount of memory. Furthermore, most
sketch-based arrangements are intended for the particular measurement task. To run various measurement tasks together,
we have to use a set of algorithm altogether to get the desired query. In addition, running every algorithm individually
on each packet turns out to be computationally demanding; so we need a framework for measurement solutions.

A complete framework, OpenSketch [40] requires to sketch the data with three stages of hashing, classiﬁcation, and
counting. The sketches used in it are just natives that cannot be straightforwardly utilized for network measurement
instead we should supplement them with extra segments and operations to ultimately support a measurement task.
Besides, the network administrator uses a measurement library to get the desired measurement tasks and it can use
a set of the algorithm from the library to get different types of measurement. OpenSketch can be utilized for a few
measurement exercises including Heavy Hitter measurement, trafﬁc ﬂows, DDoS. Speciﬁcally, keeping in mind that
to collect trafﬁc measurements, adding extensions is necessary. Sketch is a program that is reversible, implying that
sketches store trafﬁc statistics, as well as productively answer the queries on the measurements. After querying of
ﬂow, Count-Min sketch algorithm [40] can return a ﬂow size. Thus, we need to distinguish heavy hitters that surpass a
pre-determined threshold; a Count-Min sketch, which can instantly report a heavy hitter by checking a packet whether
it surpasses the limit. Nevertheless, the earlier threshold is inaccessible ahead of time, and we have to inquire for heavy
hitters subject to various thresholds. In addition, we should query all ﬂows in the whole ﬂow space and check if each of
them surpasses the threshold for the possibility of giving higher accuracy in measurement tasks. Above all OpenSketch
has many advantages, which almost overcome all other problems. Some of the essential beneﬁt of using this one as
follows:

• Using hashing and only count the ﬂows increases the accuracy with low overhead.
• Utilizing a very less amount of resources.
• Having a measurement library for measurement reduces computational cost and time.

Deltoid [71] updates every packet and adds counters in each bucket which is encoded in ﬂow headers. This updating
signiﬁcantly increases the query cost and time-consuming. However, it is not easy to get back the data from the
data plane. Another solution FlowRadar [72] solves this issue by mapping ﬂows to counters through exclusive or
(XOR) operations, where ﬂows can be constructed easily by repeatedly XOR-ing. However, query cost and heavy
computational overhead is still the basic challenge. Recently, proposed UnivMon [41] enables to sketch the data
simultaneously with distinctive sorts of trafﬁc measurements. Nonetheless, it needs to refresh different components
and remains computationally costly. After UnivMon there is another paper SketchVisor [73] proposed a new idea of
the faster path. Generally in colossal trafﬁc scenario measurement accuracy in other solutions are computationally
high costly and less accurate. SketchVisor framework introduces a faster pathway to bypass the normal path, when
network congestion is increased. It only counts faster path ﬂows and small ﬂows count can be achieved by subtracting
fast path ﬂows count from total ﬂows count. Although sketch based solutions are attractive in SDN trafﬁc measurement
or arrangement, it needs to be updated network nodes continuously. Table 3, shows that comparison of the trafﬁc
measurement by considering the balanced overhead.

From the above methods, we can make a summarize as following:

• All of these trafﬁc measurement solutions concentrated on real-time network ﬂows collection for quick decision

making.

• A single framework is being used with a library of different measurement algorithms, so that network

administrator can choose any combination of the algorithm to get desired trafﬁc measurement.

• Sketch-based framework is the best method though it needs a different protocol rather than OpenFlow. However,
OpenFlow is now broadly acknowledged as an industry standard in data center situations and it is progressively
being actualized.

5.4 Trafﬁc Measurement for Speciﬁcity

In this part, we will discuss some speciﬁc measurement framework of latency measurement, bandwidth measurement
and topology measurement. We already discussed about the basic idea behind these measurement activities in the early
part of the paper.

16

Table 3: SDN Trafﬁc Measurement Solutions Considering Real-time Monitoring

Reference
PLANCK [67]

OpenSample [68]

Reversible Sketch
[70]

OpenSketch [40]

Deltoid [71]

FlowRadar [72]

UnivMon [41]

SketchVisor [73]

Solutions

Drawbacks

• Utilizing port mirroring that exists all
commodity switches by deployed with-
out changing network devices

• Trafﬁc can exceeding trafﬁc limit the

capacity of the ports

• Packets continuously drop in high

• Collecting statistical data very fastly

buffering

• Sampling-based measurement

tech-

nique

• Utilizeing TCP sequence number from
captured data, and sFlow collector col-
lects the data

• Achieving a low latency with high ac-

curacy

• Handling huge trafﬁc without handling

the switches

• Expensive to deploy in the exist-
ing network without changing the
switch/router conﬁguration

• Speciﬁc vendor oriented

• Utilizing ﬂow header and hashing func-

• Running algorithm in each set of ﬂows

tion to compact the data

is difﬁcult and expensive

• Taking less memory and scalable for

• Not supporting various measurement

larger network scheme

tasks to get the desired query

• Having a measurement library in the

• lackings of generality and limited

control plane

query

• Automatically conﬁgures and manage

resources

• OpenFlow is globally accepted; deploy-
ing a new concept will be expensive

• Additional counters in each bucket are

• Dramatically increasing query cost by

encoded in ﬂow headers

continuous updating

• Updating in every packet with each

bucket

• Mapping ﬂows to counters through

• XOR-ing leads a high query cost and

XOR by repeatedly XOR-ing

heavy computational overhead

• Need to refresh components as contin-
uously sketch collection by the con-
troller

• Small ﬂows can be missed out from
the calculation as only large ﬂows are
taken into consideration

• Complex mathematical model is given

for retrieving small ﬂows

• Using XOR operations in network-

wide recovery stage

• Monitoring task to every node and data
plane nodes performs the monitoring
operations

• Collects sketch summaries by control
plane to calculate matric estimation

• Utilizing two paths for ﬂow statistics
in data plane; normal path and fast path

• Fast path is activated when normal path

buffer is full

• Control plane merges two path ﬂows
and uses trafﬁc matrices to get network-
wide recovery

• Bytes of small ﬂows can be achieved by
subtracting bytes of large ﬂows from
total bytes

17

5.4.1 Latency Measurement

A latency measurement framework SLAM [74] can quantify latency between any two-network switches along the way
by sending test packets from one switch to another. In addition, it estimates latency by checking arrival packets in
control plane, that is well suited to SDN engineering. Also, the accuracy of latency relies upon process time of the ﬁrst
and last switches along the way, which differs continuously with every occasion. The preface of estimating latency
is the timestamp extricated from the packet, which implies that increasing the packet header size can be very useful
for different SDN applications. There is another latency measurement framework DPTH [75], that estimates latency
between the two switches by sending timestamped packets from one switch to another and explicitly computes the time
contrast as long as these switches have synchronized. Some of the critical characteristics of DPTH are:

• Mitigating color bits by adding it in the header.

• Adding an extra header to all packets seems, by all accounts to be exorbitant in any. case.

• Different expense in light of particular application requests.

• Processing delay to measure latency accurately.

Besides, MCPL [76] introduced a far-reaching investigation of latency measurement, which has the efﬁcient points
such as inbound latency, outbound latency, and hardware performance inconsistency. Receiving the message, addition
or subtraction, update time and installation delay is the part of outbound latency. Additionally, packet timestamp can
procure the timing. We have already illustrated some latency measurement solutions which can be used for speciﬁc
network application condition. Table 4, shows trafﬁc measurement solutions for latency measurement.

5.4.2 Bandwidth Measurement

Accessible Bandwidth (ABW) [77] is the extreme packet-forwarding rate for another ﬂow to impart the different ﬂows.
Accuracy in bandwidth measurement in SDN can quicken network administration and enhance network QoS. At
the point, when controller is collecting data of the entire network, bandwidth can successfully analyze and wipe out
conceivable linkage issues, which ensures that the network capacities as well [78].

ABW measurement is a general method for normal conditions of the network. To further improve the ABW, SOMETIME
[79] is an active measurement, which is designed for wireless connectivity and applied in cellular broadband access
networks, to give an estimation of ABW in SDN environment. Because of various of devices in a cellular network,
the accurate ABW measurement approach is expected to represent sharing correspondence resources, and breaking

Reference
SLAM [74]

DPTH [75]

MCPL [76]

Table 4: SDN Trafﬁc Measurement Solutions for Latency

Solutions

Drawbacks

• Measuring the latency of any two packets
by sending packets continuously from one
switch to another

• Deﬁning the path which is preselected, and
at the end, the controller can measure the
latency by checking the control message

• Quick, accurate and easily deployable with-

out changing hardware modiﬁcation

• Timestamp all the packets attached with
DPTH, network connected to DPTH and
egress switch connected to DPTH

• Using a coloring based method by adding an
additional header, which can be diversiﬁed
in different applications

• Create network congestion by adding header

timestamp

• Need to send packets continuously

• Adding additional header is costly

• High processing delay

• Measuring inbound, outbound latency

• Need hardware updating time, installation

• After arriving the timestamp at the switch as
well as host is noted down and calculate the
time difference as inbound latency

delay

• Addition and deletion are to be counted

18

constraint. With exploiting the OpenFlow protocol to focus on ﬂows from other network trafﬁc effortlessly, the controller
is the busiest module here without affecting the much in network performance. However, presence of control message
may introduce overhead, which can slow down the network.

Thus, we need ABW to be more accurate and straightforward to apply in the network applications. A way to maintain
the QoS is developed by MAPLE-Scheduler [80], which is the ﬁrst one measures effective bandwidth and checks routing
condition. Edge and core part of the network has different effective bandwidth (EB) measurement. Also, it gives more
ﬂexibility and accuracy by deploying EB measurement in the edge part of the network. However, the disadvantage is
that the accuracy cannot always be the same. Table 5, shows trafﬁc measurement solutions for bandwidth measurement.

5.4.3 Topology Discovery

OpenFlow Discovery Protocol (OFDP) [81] discovers network linkage hop by hop, and the entire system can be
rearranged as in all switch nodes will build up TLS with the controller by handshake session in any case. At the initial
stage, the controller collects the packets of full network and establish TLS session. Then the controller sends packets to
the whole network with full information of data in the next stage. After all the switches getting the data, it will send
packets to the nearest switches with predeﬁned rules, and ﬁnally the controller gets the map of the full network. In
addition, the controller will get the information of new topology by synchronization if any link is broken. With much
efﬁcient way to actualize the resource consumption, it troubles in high overhead.

Also, OFDP v2 [82] has been enhanced by restricting controller to send amount of packet numbers.Also, The switch
can change the receiving packets, include MAC address and port numbers. Then these packets are sent to every single
access port through switches. Although the control overhead, and CPU resources usage reduce almost a half compared
to the previous version, the constraints of OFDP still exists is still not solved yet that When takes a large amount of
resources while refreshing the entire network structure. It takes advantage of quality performance in high trafﬁc.

SD-TDP [83] is a solution of measurement to ﬁnd the topology by mitigating controllers load with breaking the entire
networks into smaller parts. In the initial stage, each active node (AN) in the network keeps up deactivated state and
waiting for TDP request message from the controller. The node status will be changed once a TDP-Request message
is gotten with the progressive structure setting up. Then next discovery stage consists of the correspondence among
father node (FN) and AN. FN has all the message and communicate with the controller, which will recover the topology
structure of FN at last. When network topology changes, FN will naturally changes its state to AN. Additionally,
SD-TDP relieves controllers load and enhance its performance.

NetMagic [84] is another topology measurement platform, which can disocover actively complete network, and the
controller sends test packets to all NetMagic in whole network. When NetMagic gets packets from its neighbors, it
informs the controller, then the controller collects all the information from NetMagic and gets topology of the entire

Reference
ABW [77]

SOMETIME [79]

Table 5: SDN Trafﬁc Measurement Solutions for Bandwidth

Solutions

Drawbacks

• Measuring end to end maximum band-
width for controlling QoS of the whole
network

• Solving a linkage problem and other net-

work functions

• Query is dependent with the ﬂow rate

• Highly congested in the heavy trafﬁc

condition

• Active method and applicable for the

• Control message may lead overhead, and

wireless network

trafﬁc congestion

• Distinguishing the other network trafﬁc
ﬂow by OpenFlow, and send it to the
controller for recording

• Not generalized and straightforward

framework

MAPLE SCHED-
ULER [80]

• Concentrating on measuring effective

• Throughput is effected during measuring

bandwidth to maintain QoS

effective BW

• Selecting edge and core part are for ef-

fective bandwidth measurement

• Residual BW can be found by subtract-
ing link capacity from effective BW

19

network. NetMagic uses hash function, which is great advantage of less using on board RAM. Besides, intradomian
topology sometimes can be very complexed, which may lead overhead, and the administrator does not know what the
current scenario of the network is whereas controller manages the full network. Thus, controller can not take routing
decisions in intradomain topology.

W. Y. Huang et. al [85] utilizes an module called ENVI and supports a correspondence system among NOX and
ﬂoodlight controller. Here, NOX will send each host interface message to ENVI and save all the data by maintaining
a data structure. Also, the ﬂoodlight needs to make a correspondence with ENVI in any case and includes two data
structures in ﬂoodlight controller to support the correspondence, which is an intradomain map. Along these lines, the
new data structure can be put away and prepared among NOX, ﬂoodlight, and ENVI. NOX and ﬂoodlight assemble
correspondence component through ENVI. Nonetheless, the enormous intricacy, low correspondence productivity, and
absence of high recognizable proof accuracy of this technique still need change. Table 6, shows trafﬁc measurement
solutions for topology measurement.

In a word, we analyze the existing methods as following:

Reference
OFDP [81]

OFDP v2 [82]

SD-TDP [83]

NetMagic [84]

W. Y. Huang et al.
[85]

Table 6: SDN Trafﬁc Measurement Solutions for Topology

Solutions

Drawbacks

• Establishing switch nodes a connection

with the controller

• Sending LLDP packets by the controller
and returned to discovers the full net-
work topology

• Creating predeﬁned rules of LLDP pack-
ets and update continuously make it com-
plex to ﬁnd the perfect routing paths

• High resource consumption, time cost,

and overhead

• Reduces sending the number of packets

• Upgradation the full network, it takes a

lot of resources

• Time cost is also high

• QoS control is also difﬁcult to manage

• Performing no-action rule by FN, if the
topology changed or in linkage problem,
as it losts the communication with it’s
near AN neighbour

• Problem of taking routing decision

• Bringing much pressure on network scal-
ability, if the size of the network is in-
creased

• Complex framework and difﬁcult to de-

sign and deploy

• Highly complex solutions to deploy in

the congested network

• Relatively lower accuracy

by the controller

• Replicating these packets by adding the
information in the switches, and send
back to the controller

• Saving 45% overhead and 40% CPU re-
sources by comparing the previous ver-
sion of OFDP

• Dividing the full network into two types

of nodes (FN and AN)

• Sending TDP messages to all AN by
Controller and FN, and AN changes its
status to FN

• Collecting all message by FN and for-
ward to the controller to discover the
topology

• Sending a message to NetMagics in the
full network and NetMagics modify the
message

• Collecting all the message by the con-
troller and stored for discovering the
topology

• Using NetMagic RAM to store primary
data instead of using controller RAM

• Connecting NOX and ﬂoodlight con-
troller by a third-party module ENVI

• Saving the data structure by NOX and
periodically communicates with the
ﬂoodlight controller to draw an interdo-
main map

20

• For latency measurement, control message is sent by the controller which receives the message and calculates
the latency by receiving and transmitting time; so controller is the main part of whole measurement system.

• For bandwidth measurement, end to end connection is used in wired and wireless network to differentiate

trafﬁc ﬂows and send ﬂows to the controllers.

• For topology measurement, the entire network structure is partitioned into a few units, and every node in the

partitions is active to process forward the control message.

Clearly, it is visible to ﬁnd that trafﬁc measurement in SDN is not smooth enough to perform. Researchers are still
trying to solve the measurement problems to meet the minimum requirement of SDN trafﬁc measurement solutions.
Using statistic machine learning and deep learning, we can ﬁnd more accurate measurement with less resource usage,
low overhead, real-time and speciﬁc accurate SDN trafﬁc measurements by using ML in a complex, hierarchical,
heterogeneous next generation 5G network. In the next section, we discuss some ML based SDN trafﬁc measurements.

6 MACHINE LEARNING IN TRAFFIC MEASUREMENT

In recent year, ML is popular in many ﬁelds, and this technique has been widely used by researchers to solve
sophisticated problems for data science and networking. For example, it can be used in kinds of search engines
like google, bing, yahoo, or web page ranking, disease analysis, network management to dig out the interests of the
customers, then make decision and further analysis. Thus, ML not only can help to analyze the data but also can predict
the future pattern by itself. Besides, it is a new uprising concept that it can be used in trafﬁc measurement to learn the
pattern such as routing, congestion control, QoS control, resource management, network management, fault analysis,
security management, and then make future prediction of their trend. Specially in a wide area network, routing pattern
is complicated to be handled by the administrator. At that point, whether the traditional networking system can be
replaced by the SDN modern networking system where controllers are taking decisions for network management is
the main problem. However with the highly heterogeneous network using ML, controller will be more scalable and
responsive to make decisions to manage the network. A lot of survey papers [18, 86, 87, 88, 89, 90] have applied ML
to networking, and some part of them also described how we can use ML in SDN trafﬁc measurement. Fig. 10 gives the
overview of this section.

6.1 Process of ML in Trafﬁc Measurement

6.1.1 Data Preparation

Before using ML in the network, we need to collect and store the packets data ofﬂine or online [91] to be learned.
There are various types of substantial ofﬂine data can be collected such as Cyber Risk Trust Archive [92], Discovery in
Databases Archive [93], Waikato Internet Trafﬁc Storage [94], also the passive measurement or active measurement
framework [95] can help to further store more data. Besides, this dataset will help to build a decision model to ﬁnd out
an accurate predictive measurement. Then the gathered data is divided into train and test dataset, and the training set
is utilized to discover the perfect condition for a Neural Network (NN) as an ML model. At long last, the test set is
utilized to evaluate the unprejudiced performance of the chose to demonstrate.

6.1.2 Feature Extraction

During the training, we need to take the feature selection part, which is utilized to lessen dimensionality in voluminous
data and to distinguish segregating features that lessen computational overhead and increment accuracy of machine
learning models [96]. Here, feature selection and extraction can be performed utilizing different simulator, for example,
NetMate [97] ,WEKA [98], Python [99], MATLAB [100]. Nonetheless, the extraction and determination procedures
are constrained by the capacity of the device utilized. It is signiﬁcant to deliberately choose a perfect set of features that
strike a harmony between misusing connection and lessening of over-ﬁtting for higher accuracy and lower computational
overhead. Then ground truth is to be set up to relate the giving formal depiction to the classes of intrigue.

6.1.3 Training and Testing

After extracting features from the dataset, we train them with the machine learning methods like support vector machine
(SVM), decision tree (DT), naive bayes (NB) and so on. Also, we can use these models to evaluate on the trafﬁc
measurement, and update our models each time with the online data. There are different techniques for marking datasets
utilizing the features of a class. Essentially, it requires with help from deep packet inspection (DPI) [101], [102]. Once
ML model has been assembled and the ground truth has been discovered, it is critical to measure the performance of

21

Figure 10: Machine learning solutions in Trafﬁc Measurement

the model that will anticipate, or assess outcomes. There is no real way to recognize a learning algorithm as the best
model, and it is not reasonable to analyze mistake rates [14]. The performance measurements can be utilized to gauge
the distinctive parts of the model. In this paper, we discuss some ML techniques for trafﬁc classiﬁcation, prediction,
routing and resource management, which can be used in SDN environment. Fig. 11 shows that how ML can be used in
network trafﬁc measurement.

6.2 Trafﬁc Measurement Solutions using ML

In this part, we discuss ML based SDN trafﬁc measurement solutions and then categorize them.

6.2.1 Trafﬁc classiﬁcation

Today in the era of technology, where everyone is communicating through a network, and it is potential for the users to
communicate or send data with the probability of being hack or damage. Thus, there are many ML based applications
that are introduced to detect misused based attack. In these applications, ML classiﬁers were used to distinguish the data
into two groups; one is misused, and the other is anomaly based group [86]. ML classiﬁer has the power to recognize the
pattern of threatened attack in a large amount of data, which is coming in the network. Many studies has been conducted
on the bases of ML technology in the past, to detect the misuse detection [103, 104, 105, 106, 107, 108, 109, 110, 111].
Majority work has been done in the computer (ofﬂine) like researches collected the data from the network and they
process the data ofﬂine on a computer using different ML tool. Besides in the ofﬂine detection, people trained the
classiﬁers to classify the attack data from standard data.

Cannady et al. [104] introduced a very early virus detection system through NN which can achieve much success in
saving the SDN from viruses and especially work done efﬁciently regarding less complexity to detect misuse data. This
work has been done ofﬂine; ﬁve features were analyzed, i.e., TCP, ICMP, IP, header ﬁelds and payload. In NN, nine
(9) layers were utilized to classify two categories data. The number of neurons has been determined through trial and
error; the sigmoid function has been utilized as an activation function on the neurons. And It can achieve 89% to 91%
accuracy.

22

Figure 11: Machine learning process in Network Measurement

6.2.2 Trafﬁc routing

Besides the trafﬁc ﬂow classiﬁcation, the trafﬁc routing is also important in the trafﬁc measurement to manage the
trafﬁc ﬂows when the congestion happened. It requires challenging abilities for the ML models, such as the ability to
cope and scale with complex and dynamic network topologies, the ability to learn the correlation between the selected
path and the perceived QoS, and the ability to predict the consequences of routing decisions. Thus, researchers prefer
applying reinforcement learning (RL) to learn the control strategy instead of human management. There are several
existing papers related to the trafﬁc routing problem using the RL methods.

In [112], Forster et al. used a Q-learning approach in a multicast routing protocol, called FROMS (Feedback Routing
for Optimizing Multiple Sinks). The goal of FROMS is to route data efﬁciently, in terms of hop count, from one
source to many mobile sinks in a WSN by ﬁnding the optimal shared tree. And Hu and Fei [113] proposed QELAR,
a model-based variant of the Q-routing algorithm, to provide faster convergence, route cost reduction, and energy
preservation in underwater WSNs. More recently, a centralized SARSA with a softmax policy selection algorithm has
been applied by Lin et al. [114] to achieve QoS-aware adaptive routing (QAR) in SDN.

23

6.2.3 Resource management

Besides, resource management in networking entails controlling the vital resources of the network, and manage kinds
of resources to make the network stable. For programmer, it is easy to determine how to do to control the controller
to take order. However, it will be more artiﬁcially if we apply machine to dig out the relationship between resources
measurement and management. There are several methods using machine learning to deal with this problems.

Piamrat et al. [115] proposed an admission controlmechanism for wireless networks based on subjective quality of
experience (QoE) perceived by end-users. This is in contrast to leveraging quantitative parameters, such as bandwidth,
loss and latency. To do so, they ﬁrst choose conﬁguration parameters, such as codec, bandwidth, loss, delay, and jitter,
along with their value ranges. Then, the authors synthetically distort a number of video samples by varying the chosen
parameters. Also, Baldo et al. [116] proposed a ML based solution using MLP-NN to address the problem of user
driven admission control for VoIP communications in a WLAN. In their solution, a mobile device gathers measurements
on the link congestion and the service quality of past voice calls. Table 7 shows the comparison among all the SDN
trafﬁc measurement solutions in different categories.

Table 7: Summary of Machine learning based trafﬁc measurement.

Reference
Cannady et al. [104]

Algorithm
Supervised NN

Pan et al. [108]

Supervised NN and C4.5 DT

Fonseca et al. [117]

Supervised:Bayesian

Haffner et al. [118]

MaJ et al. [119]

Supervised NB, AdaBoost, Max-
Ent
Unsupervised ML

Schatzmann et al. [120]

Supervised SVM

Jiang et al. [121]

Supervised NBKE

Zhang et al. [122]

Supervised BoF-NB

Sun et al. [123]

Supervised PNN

Nguyen et al. [124]

Supervised NB, C4.5 DT

Dainotti [125] & Donato et al.
[126]

Random Tree, RIPPER, PL, etc.

Forster et al. [112]

Q-learning algorithm

Hu et al. [113]

Q-routing algorithm

Lin et al. [114]

SARSA algorithm

Piamrat et al. [115]

Baldo et al. [116]

admission controlmechanism al-
gorithm
Multilayer Perceptron

Solution
To classify two categories data, they saved the net-
work from viruses and especially work done efﬁ-
ciently regarding less complexity to detect misuse
data
To classify two categories data, they extracted all 41
features that were processed on multilayer perceptron
NN
They proposed ML approach which was used in PLC
to manage congestion control
To classify the payload and host behavior data, they
apply Ensemble learning to the task
To classify the payload and host behavior data, they
proved that payload based trafﬁc classiﬁcation could
be done without any class label
To identify the webmail and non-webmail data, they
explored the useful features and applied them to SVM
They reduced the complexity through correlation
measures and symmetric measures in the domain of
feature selection, which helps to make lightweight
trafﬁc classiﬁcation
They made a hybrid model of supervised and unsu-
pervised techniques to help classify the robust trafﬁc
To make robust trafﬁc classiﬁcation, they proposed
the model using probabilistic neural network model
To ﬁnd the most representation features, they used
NetMate [97] to compute features
To make trafﬁc classiﬁcation, they ﬁrst tested a sin-
gle classiﬁer alone, and then tested combination of
classiﬁers
They uses a Q-learning approach in a multicast rout-
ing protocol to route data efﬁciently
They proposed QELAR to provide faster convergence,
route cost reduction, and energy preservation in un-
derwater WSNs
They applied a centralized SARSA with a softmax
policy selection algorithm to achieve QAR
They synthetically distorted a number of video sam-
ples by varying the chosen parameters
They proposed a ML-based solution to address the
problem of user driven admission control for VoIP
communications in a WLAN

24

7 Future Prospects of ML in Trafﬁc Measurement

As the ML based methods mentioned above, the statistic machine learning algorithms can dig out the pattern of routing,
congestion control, QoS and resource management to make future predictions, and then help the controller manage the
network in advance. For further improvement of the performances and quality of the services, perhaps another method
like deep learning or deep reinforcement learning will help to ﬁnd deep features of the packets ﬂow. In this section,
we analyze the probability of different popular artiﬁcial intelligence approaches whether they can be used in trafﬁc
measurement tasks and give the future prospects of the trafﬁc measurement in SDN.

7.1 Statistic Machine Learning

Statistic machine learning is the typical methods to be used in the data analysis, and we have described many exists ML
based trafﬁc measurement in the last section. Here, we will discuss some other methods whether they can be utilized in
the SDN network.

7.1.1 SVM

SVM is one of the machine learning algorithm, which belongs to a generalized linear classiﬁer, can minimize
generalization error and maximize the geometric marginal. Generally in SDN trafﬁc measurement, classiﬁers like NB,
DT are used to recognize the features of packets data to detect attacks. However, SVM is a more useful and convenient
method to make predictions, and it is robustly to kinds of cases. [127] is the example that apply SVM to the SDN to
classify the application trafﬁc, and we can transfer it to other measurement as following:

• After receiving the packets data, SVM can be used to detect whether an attack exists.
• It can also spy on the resources, and predict the trend of the trafﬁc if there will be busy in the future to maintain

QoS.

• Also, SVM is a valuable algorithm to ﬁnd the potential congestion in the network.

7.1.2 Decision Tree

Decision tree (DT) is another statistic machine learning algorithm which mainly depends on the basic dataset. It ﬁlters
out the disturbing features and builds a tree to make classiﬁcation with different branches. Thus, DT can be used to
predict the trafﬁc trend base on the previous knowledge which is already applied to the trafﬁc classiﬁcation [124, 97].
Also with online ﬂow table, [128] utilized DT to solve the Flow Table Congestion Problem (FTCP) to guarantee the
quality of service. As the same as the usage of classiﬁcation or prior knowledge of congestion, Decision Tree has a
wide range of cases to be applied:

• As it generally relies on the previous data to build the decision tree, we can turn it on the resource management

to help the controller control the resources.

• Also, it can be used to classify the received ﬂow for better storing or understanding.

7.1.3 K-Nearest Neighbor

K-nearest neighbor (KNN) is a kind of unsupervised learning method, that has no label to use compared to the supervised
methods (like SVM and DT). It can be applied to the classiﬁcation or prediction tasks to divide the feature into clusters
without the class knowledge. [119] utilized k-means and KNN clustering to classify the data, here we can also apply
this clustering method to the task of resource management and attack detection.

7.1.4 Ensemble Learning

Ensemble learning is a strongly learnable method, that gather various of weakly learnable algorithms like NB, KNN, to
improve the ﬁnal prediction. Given several algorithms, they ﬁrstly dig out the features to analyse the data respectively,
and then we get the ﬁnal results among them by counting the highest voting. Kolomvatsos et al. [129] developed an
ensemble forecasting method to provide QoS in SDN network with its own prediction rule. However, it is worse than
the original machine learning algorithm. Thus in the future, we can apply ensemble learning to improve the results of
tasks although it may cost time and resources:

• First, we can gather SVM, DT, KNN or other methods to detect the attack among the ﬂow data to make the

ﬁnal prediction.

25

• Next, it can also be used to classify the trafﬁc application, and vote to get the most probably one.

• Also, it can learn the trend of the trafﬁc ﬂow, and then decides whether there will be congestion and sends

instruction to the controller.

There are various types of statistic ML algorithms have not been mentioned above, and they also can be used to deal
with different kinds of detection or classiﬁcation tasks in SDN trafﬁc measurement.

Despite of the statistic machine learning algorithm, DL is a new way to learn the features from the collected data to
make predictions [130]. With the deeper layers and more neural nodes, DL can dig out deeper representations, and ﬁnd
relationships corresponding to the ground truth. It can also build up kinds of neural network with different functions to
analyze various inputs, such as images, text or sounds. Here, we will take a look at the DL network about how we can
use it into the SDN trafﬁc measurement [131].

7.1.5 Multilayer Perceptron

Multilayer Perceptron (MLP) is the basic deep learning architecture, which consists of several layers with numbers
of neurons. Generally, besides input and output layer, the single hidden layer can ﬁt kinds of linear function, and it
is suitable to handle the classiﬁcation tasks on text data. Moreover, MLP performs better than the statistic machine
learning algorithms for its more ﬂexibility and adaptability as well as it can also build deep architecture to ﬁnd deep
features. To our best knowledge that there is no paper about MLP based SDN trafﬁc measurement, perhaps we can
utilize the MLP to evaluate the text data task.

• Like what the ML methods do before, we can apply MLP to the trafﬁc classiﬁcation and resources management.

• Also, MLP can be used to detect attack among the received data.

• And it can predict the congestion and trafﬁc trend in the future.

7.1.6 Recurrent Neural Network

Recurrent neural network (RNN) is an extension of a conventional feed forward neural network (like MLP), which
makes use of the sequential information. The output is depended on the previous computations in RNN and performs the
same job for every single element of a sequence. It can store the memory of prior knowledge and forget the disturbing
parts. [130] developed a gated recurrent units (GRU) approach to provide SDN network with an intrusion detection
system (IDS), which can detect attacks and achieve higher performance than the ML methods. Thus, we can apply
RNN with the big data analytic in SDN.

• With the short memory of the studied data, RNN can take charge of the resource management with the study

of the controller instructions.

• Long short term memory (LSTM), one of the RNN algorithms, can be taken to learn the long dependence on

the data ﬂow to classify the trafﬁc or detect the attacks.

7.1.7 Convolutional Neural Network

Different from the deep learning methods above, convolutional neural network (CNN) is highlighted in the convolution
layer, which can extract patterns from the graph. In general, CNN is mainly used to learn the classiﬁcation on the image
based dataset, and it can dig out the more in-depth representation with more convolution layers through the kernel
ﬁlters. SDN trafﬁc measurement in [132] applied CNN to controllers to choose the best path combination for packet
forwarding in switches, where the input image is composed by the switches in time intervals. Inspired by this, we can
use CNN to handle many graph based tasks.

• With the collected data at each speciﬁc time, we can gather the information in the spatial dimension and build
up an array data. Then we can utilize CNN to extract features from this array data to ﬁnd the relationship.

• Also we can create 2-dimension graph with encoded features in time step, and then CNN will learn the

temporal information with each column on the graph.

Thus, DL is an efﬁcient way to make classiﬁcation and prediction in trafﬁc measurement problem, and help the network
gain the prior knowledge.

26

Figure 12: Future scopes of artiﬁcial intelligence in Trafﬁc Measurement

7.2 Deep Reinforcement Learning

Different from the feature analysis with ML or DL, RL concerns more on how to lead software agents to take action
time by step in an environment to maximize some notion of cumulative reward. More in details is that RL forces the
agents to learn to choose the best action in each step, which will get the high scores at last. The learning process does
not need any feature rather than it needs to analyze the status in each step. To further improve the performance of RL
[133], DRL adopts deep learning architecture [134] and build a deeper neural network to dig out the deep representation
to ﬁnd the relationship between the actions and status. Here, we will think about whether DRL can be taken to use in
the trafﬁc measurement.

7.2.1 Deep Q Network

Q-learning is a model-free algorithm using delay rewards, that interacts with the environment by perceptions and
actions. It builds up a Q-table to store the reward for each action in the corresponding status. And there are many SDN
measurement tasks used to deal with the congestion and multiple control problem based on Q learning [135, 136, 137].
However, with the rapid increase of data dimension, it is challenging to build a large Q-Table to remember the experience.
Thus, Deep Q network (DQN) enables to ﬁnd the low-dimensional features of high-dimensional data by crafting weights
and biases in deep networks, that can replace the Q-table with the neural network. Recently [138] utilized DQN to
consider the features of blockchain nodes and controllers jointly, and we can transfer this method into other applications:

• Receiving attack ﬂows, DQN can enhance the network stably by limiting the attack ﬂows and remaining the

normal communication between the users.

• With the congestion problem, DQN can help to ﬁnd the best way to dredge ﬂows.

• Although DQN can not make classiﬁcation, it still can manage various of trafﬁc to enhance the interaction.

7.2.2 Deep Deterministic Policy Gradient

Policy gradient is another reinforcement learning algorithm, which aims to ﬁnd the best policy with each action by
time step. It has more signiﬁcant performance than Q-learning that it is robust to policy degradation. Besides, Deep
Deterministic Policy Gradient (DDPG) improves the ability of policy gradient by applying deep neural network to dig
out high dimensional features to decide the best action in each step. To our best knowledge that there is no one utilize
DDPN into the SDN trafﬁc measurement, it may improve the performance on the same tasks in DQN.

Thus, DRL is suitable to manage the SDN, and help the controller take the proper actions in different tasks. In short, the
above three artiﬁcial intelligence algorithms may make progress in the trafﬁc measurement and help to improve the
network performance, which is summarized in Fig. 12.

27

Figure 13: Future Research in nine areas

7.3 Deep Learning

8 FUTURE RESEARCH DIRECTION(need major revision)

As indicated by the above foundation and technical survey, we have summarized 9-areas for further research and
development. Even though SDN has proﬁts by the network security viewpoint, despite everything, a few detectable
feeble focuses have been located. The following parts ought to be the future research issues, which are summarized in
Fig. 13.

8.1 Single Controller Issues

First of all, because of the exorbitant size of the network, it is inconceivable for one controller to cover all the network
administrations and handle all upheavals of network glitches [139]. Thus, if a controller can not control the control
plane or if the controller breaks down, routers/switches will be disconnected from the network. This comes to the
coordination among controllers, which ought to be a fascinating and important research area. Once a network contains
different territories, the trouble of identifying network security by SDN trafﬁc measurement solutions will develop
exponentially. Along these lines, analysts should ﬁgure out new sharp methodologies appropriate for dealing with this
issue.

• Single controller can introduce overhead and congestion in high trafﬁc load. However, multi-controller can
solve this problem by improving fault tolerance of the network. If one controller loses the connection with the
network, the backup controller needs to take over the network without compromising the propagation delay.
• Multi-controllers need proper co-ordination with each other. We need speciﬁc metric to formulate survivability

and resource usage policy to recover the network failure under high trafﬁc load.

• Controller must consider about scalability of the heterogenous network. Thus, we need to create important

controller and backup controller location for considering the network failure recovery.

28

8.2 Powerful Controller Design

As all switches and routers are simple forwarding devices in SDN environment, the controller takes action for all network
functions. Thus, SDN controller must be powerful in sense of hardware and software because of its software-centric
functionality. SDN controller is the key element of the network as all the network devices are logically centralized by a
controller, and different network functions, control applications, virtualizations also are deployed in SDN environment
through the controller. Thus, controller must be strong enough to tackle the load of heterogeneous network [140].

• Controller needs to support various types of network functions, control applications, virtualization functions.

These types of applications may help the network controllable and scalable.

• Controller capacity is one of the prime concerns for hardware design, so that it can support the whole network
in high trafﬁc load. Also, QoS control, trafﬁc recovery, trafﬁc load balancing, and resource usage policy need
to be deployed by controller to the network. In such case, the capacity and performance of controller plays an
crucial role.

• ML and DL can be used for packet ﬂow control in a controller, and controller work load can be distributed to

some other switches and routers.

8.3 Measurement Framework

A comprehensive framework for SDCN security is necessary to establish for overcoming the challenges, and SDN trafﬁc
measurement plays a important role in this framework. As we discussed before, some recently proposed frameworks
are suggested to use the library for different measurement function. It will be fascinating if these functions can store in
virtual server and imply on the network with the help of controller. As trafﬁc management is the next stage of the trafﬁc
measurement, without a proper framework, measurement activities can make network dull and introduce overhead
[141].

• A single framework can be used for all measurement tasks. As we discussed, trafﬁc management is going to be
very difﬁcult without proper monitoring by trafﬁc measurement such as general framework, trafﬁc prediction
framework, parameter measurement framework.

• Library in the framework can be used for different combination of the algorithms to ﬁnd out the required
measurement jobs. Some pre-selected model algorithms will be saved in the library and later on, network
administrator can make some useful mix-up procedure from the library to get perfect measurement.

• Different measurement tasks with the combination of algorithms can be saved in cloud server, which is
very effective in a virtual environment. Even if the administrator are not with the physical environment,
measurement activities are going on ceaselessly from a virtual environment to monitor the network.

8.4 Network Resource Utilization

SDN trafﬁc measurement has a ﬂexible ﬂow measurement with different granularities and needs to satisfy several
types of applications. Designing a large scale network is complex because it needs trafﬁc forecasting, prediction,
and estimation. Thus as a result, because of network resources are not used properly sometimes, link utilization
becomes non-optimal[142]. In a scenario like a little bandwidth is being provisioned without thinking of future
administrations that may perhaps require more bandwidth. Afterward, when we need to arrangement high-bandwidth,
unavoidably less optimum ways will be utilized for them. In such cases, network devices are expected to give scalable
and dynamic measurement plots that would educate network administrators and enable them to boost their resource
usage. Considering the overhead issue, it requires looking into in deep learning in sampling systems to ﬁnd out about
ﬂows, assessing their size, proﬁcient capacity, and algorithmic methodologies for the controller. Here, we can use
network resource utilization as the following:

• ML and DL approach can be used for proper network resource distribution, which can be taken a powerful

sampling technique. Also, optimization techniques can be used for bandwidth provisioning.

• Network administrator needs the power to manipulate the network resources by considering the requirement of
scalability and granularity. Both CPU and memory based approaches can help load balancing, reliable network
connection and higher resource utilization [143].

• It needs efﬁcient storage for ﬂexible ﬂow measurement and different simple low overhead algorithmic
approaches for ﬂow accounting. Dedicated applications for measurement can manage bandwidth properly for
network resource utilization.

29

8.5 Trafﬁc Matrix Modelling

Trafﬁc matrix estimation and modeling are always a technical challenge for researchers. Recently, researchers are
struggled to ﬁnd out a way of getting an error-free model that can help to retrieve the data as well. OpenFlow has
a special feature of ﬂow table counters that allow other mechanisms to estimate trafﬁc matrix. Thus, OpenFlow
opens the door of research in this mathematical concepts. The logic of forwarding packets is set by the controller
for implementation in the OpenFlow ﬂow table, which is the key to trafﬁc matrix calculation. Therefore, we need a
statistical method to get trafﬁc matrices which can make SDN more scalable [144].

• Traditional trafﬁc matrix estimation has high errors to adapt the network characteristics in varying environments.

Thus, we need to use more accurate statistical methods to estimate the trafﬁc matrix.

• A simple and scalable algorithm for greater accuracy in high trafﬁc congestion can make network more robust.
The CPU usage will be lower and the response time will be fast enough to recover almost all the trafﬁc
accurately.

• ML and DL can be used as probabilistic approach in network wide recovery. These two models are robust to

get prediction with high accuracy.

8.6 Wireless SDN Integration

We have discussed so far about SDCN, which can be a signiﬁcant part of mobile network. SDN integration in wireless
cellular network is always challenging to deploy because it is really very difﬁcult to control in a wireless environment
[25]. It creates more vulnerabilities in the network. SDCN must be strongest enough to perform such anti-security
actions quickly in a wireless environment. Different types of wireless networks such as cellular, mesh, sensor and home
network are used nowadays and trafﬁc measurement in this area is inevitable.

• We can use network functions in a cloud as network functions virtualization instead of directly using in SDN

control plane. An efﬁcient virtualization strategy can control dynamic radio access with an interface.

• Network administrator needs to conﬁgure the network remotely to ﬁx out the network issues.
• The core network of cellular network can be controlled fully by high programmable controller. Programming
capability can be used to control user data, authentication and application plane. Thus, open source idea can
change the way of designing requirement of cellular network.

8.7 Real-time Trafﬁc Monitoring

The real-time applications are very sensitive and need to maintain QoS throughout the end to end network path. Video
chatting, wireless mobile applications, online learning applications are some of the examples of its applications, which
need real-time monitoring and trafﬁc measurement [145]. Though SDN provides a real-time centralized controller,
the network operator must deal with scalability issue, and it is quite difﬁcult to maintained ﬁne-grained measurement
[146].Network administrator also needs to manage this by constructing APIs that run on the controller to take actions
automatically by measuring trafﬁc data [147]. Researchers may focus on designing such kind of APIs in the future.

• As we need to use multi-controller in a huge network, synchronization of all the controllers’ real time trafﬁc

monitoring is a prime concern to overcome the network congestion.

• We can use statistical prediction method in real time trafﬁc measurement. Machine learning model can help to
forecast the trafﬁc ﬂow statistics in a high trafﬁc load, which helps the controller to make early decision.
• We can take dedicated applications in real time QoS and SLA monitoring. Some networks and control

applications can also make the network more secured and scalable.

8.8 Sketch-based Measurement

We have discussed different types of measurement solutions in the sections before. However, we ﬁnd that sketch-based
solution is one of the best solutions in SDN trafﬁc measurement, which takes less amount of resources even in high
trafﬁc condition. However, using less resource [148, 149] causes some problem in network recovery stage, and it is
quite difﬁcult to retrieve all data in control plane. Therefore, it is possible to make a new design idea in control plane so
that it can retrieve the data by running a simple query.

• As we discussed, sketch based measurement solutions have a problem in network recovery stage. Therefore,
we can use ML method to predict packet ﬂow statistics and then we can get high accuracy in measurement.

30

• This framework can be used in wide area network for ﬂow monitoring and network management. Sketch based
measurement needs to be deployed in a complex and heterogeneous network, so that it can perform in real life
scenerio.

• We need to deploy sketch visor with other framework with high packet forwarding performance to give more

efﬁciency in SDN measurement.

8.9 Trafﬁc Measurement in SDN Security

SDN has been widely utilized because of its simplicity to control over heterogeneous and complex network. At the same
time, different institutions such as bank, business organizations, ﬁnancial organizations are also starting to use SDN
into their core network. We all know that, this sophisticated network is connected with different servers with valuable,
crucial and private information, which is always in a risk of data theft. Currently, there are a few SDN measurement
approaches [150, 151] available to ensure the risk assurance, which we have already discussed before. Different types
of attacks such as DDoS, superspreader can take over the control of the network easily by pushing down the controller.
Thus, we need real-time ﬂow detection, and anomalies detection techniques to recover the affected controller.

• We need to develop applications to collect trafﬁc ﬂow statistics data and analyze packets that are not protocol

conformant.

• It is necessary to develop real time anomalies detection techniques at the ﬂow level because ﬂow level statistics

is crucial for sdn security.

• ML and DL is going to be the most essential part for predicting ﬂow level and take the decision with the

controller before being attacked by the attacker.

9 Conclusion

In this paper, we give a review of SDN and SDCN structures and OpenFlow network, then discuss about the trafﬁc
measurement task to identify network security, resources management, quality of service and so on. To compare
the existing works, we surveyed the state of the art of the methods for measuring the SDN trafﬁc and analysis their
advantages and disadvantages. Furthermore, we break down security challenges of SDN and SDN trafﬁc measurement
requirements to get highly secured SDCN, where network administration advancements must be a robust and proﬁcient
approach to manage those difﬁculties. Besides, we proposed to utilize ML algorithms to improve the measurement
performance, and we also investigate the existing ML based methods in SDN network. At last, we make a future
prospects about how we can apply artiﬁcial intelligence into the SDN trafﬁc measurement, and analyze the developing
trend of the SDN, SDCN network. As a result, trafﬁc measurement in SDN is still challenging and few difﬁculties
require to be handled. As SDCN will be next-generation mobile network, we have to consider the many issues and
perhaps the ML may plays an important role in it.

References

[1] Chen Sun, Jun Bi, Haoxian Chen, Hongxin Hu, Zhilong Zheng, Shuyong Zhu, and Chenghui Wu. Sdpa:
Toward a stateful data plane in software-deﬁned networking. IEEE/ACM Transactions on Networking (TON),
25(6):3294–3308, 2017.

[2] Software Deﬁned Networks: The New Norm of Networks. Open Networking Foundation, White paper, 2012.
[3] https://www.linuxfoundation.org/projects/case-studies/opendaylight/. Open DayLight, 2016.
[4] Anwar Dhyaa Majeed and Nadia Adnan Shiltagh Al-Jamali. Spike neural network as a controller in sdn network.

Journal of Engineering, 27(9):64–77, 2021.

[5] David Erickson. The beacon openﬂow controller. In ACM SIGCOMM workshop on Hot topics in software

deﬁned networking, page 13, 2013.

[6] Martin Casado, Michael J Freedman, Justin Pettit, Jianying Luo, Nick McKeown, and Scott Shenker. Ethane:

taking control of the enterprise. In ACM Sigcomm, pages 1–12, 2007.

[7] Andreas Blenk, Arsany Basta, Martin Reisslein, and Wolfgang Kellerer. Survey on network virtualization
hypervisors for software deﬁned networking. IEEE Communications Surveys and Tutorials, 18(1):655–685,
2016.

[8] Brandon Heller, Srinivasan Seetharaman, Priya Mahadevan, Yiannis Yiakoumis, Puneet Sharma, Sujata Banerjee,

and Nick McKeown. ElasticTree: Saving Energy in Data Center Networks. NSDI, 10:249–264, 2010.

31

[9] Tariq Emad Ali, Ameer Hussein Morad, and Mohammed A. Abdala. Efﬁcient private cloud resources platform.
In 2021 International Conference on Electrical, Communication, and Computer Engineering (ICECCE), pages
1–6, 2021.

[10] Rashid Amin, Martin Reisslein, and Nadir Shah. Hybrid sdn networks: A survey of existing approaches. IEEE

Communications Surveys & Tutorials, 20(4):3259–3306, 2018.

[11] Ian F Akyildiz, Ahyoung Lee, Pu Wang, Min Luo, and Wu Chou. Research challenges for trafﬁc engineering in

software deﬁned networks. IEEE Network, 30(3):52–58, 2016.

[12] Peter Newman, Greg Minshall, and Thomas L. Lyon. IP switching - ATM under IP. IEEE/ACM Transactions on

Networking, 6(2):117–129, 1998.

[13] Natasha Gude, Teemu Koponen, Justin Pettit, Ben Pfaff, Martin Casado, Nick McKeown, and Scott Shenker.
NOX: towards an operating system for networks. SIGCOMM Computer Communication Review, 38(3):105–110,
2008.

[14] Hani Jamjoom, Dan Williams, and Upendra Sharma. Don’t call them middleboxes, call them middlepipes. In

Proceedings of the third workshop on Hot topics in software deﬁned networking, pages 19–24, 2014.

[15] Nick McKeown, Tom Anderson, Hari Balakrishnan, Guru Parulkar, Larry Peterson, Jennifer Rexford, Scott
Shenker, and Jonathan Turner. OpenFlow: Enabling innovation in campus networks. ACM SIGCOMM Computer
Communication Review, 38(2), 2008.

[16] L. Yang, R. Dantu, T. Anderson, and R. Gopal. Forwarding and Control Element Separation (ForCES) Protocol

Speciﬁcation, 2010.

[17] Haoyu Song, Jun Gong, Hongfei Chen, and Justin Dustzadeh. Uniﬁed POF Programming for Diversiﬁed SDN

Data Plane. ICNS, 2015.

[18] Bruno Astuto A. Nunes, Marc Mendonca, Xuan Nam Nguyen, Katia Obraczka, and Thierry Turletti. A survey
of software-deﬁned networking: Past, present, and future of programmable networks. IEEE Communications
Surveys and Tutorials, 16(3):1617–1634, 2014.

[19] Adrian Lara, Anisha Kolasani, and Byrav Ramamurthy. Network innovation using open ﬂow: A survey. IEEE

Communications Surveys and Tutorials, 16(1):493–512, 2014.

[20] Syed Taha Ali, Vijay Sivaraman, Adam Radford, and Sanjay Jha. A Survey of Securing Networks Using Software

Deﬁned Networking. IEEE Transactions on Reliability, 64(3):1086–1097, 2015.

[21] Yosr Jarraya, Taous Madi, and Mourad Debbabi. A survey and a layered taxonomy of software-deﬁned

networking. IEEE Communications Surveys and Tutorials, 16(4):1955–1980, 2014.

[22] Christian Olsen. The Mobile Economy., 2008.
[23] Murat O˘gul and Selçuk Baktır. Practical Attacks on Mobile Cellular Networks and Possible Countermeasures.

OALib Journal of Future Internet, 5(4):474–489, 2013.

[24] Silvere Mavoungou, Georges Kaddoum, Mostafa Taha, and Georges Matar. Survey on threats and attacks on

mobile networks. IEEE Access, 4:4543–4572, 2016.

[25] I T Haque and N Abu-Ghazaleh. Wireless Software Deﬁned Networking: A Survey and Taxonomy. IEEE

Communications Surveys & Tutorials, 18(4):2713–2737, 2016.

[26] Rashid Amin, Nadir Shah, Babar Shah, and Omar Alfandi. Auto-conﬁguration of acl policy in case of topology

change in hybrid sdn. IEEE Access, 4:9437–9450, 2016.

[27] Yu-Wei Eric Sung, Xin Sun, Sanjay G Rao, Geoffrey G Xie, and David A Maltz. Towards systematic design of

enterprise networks. IEEE/ACM Transactions on Networking (TON), 19(3):695–708, 2011.

[28] Amina Gharsallah, Faouzi Zarai, and Mahmoud Neji. Sdn/nfv-based handover management approach for

ultradense 5g mobile networks. International Journal of Communication Systems, page e3831, 2019.

[29] Van-Giang Nguyen, Anna Brunstrom, Karl-Johan Grinnemo, and Javid Taheri. Sdn/nfv-based mobile packet
core network architectures: A survey. IEEE Communications Surveys & Tutorials, 19(3):1567–1602, 2017.
[30] Wenjuan Li, Weizhi Meng, and Lam For Kwok. A survey on OpenFlow-based Software Deﬁned Networks:
Security challenges and countermeasures. Journal of Network and Computer Applications, 68:126–139, 2016.
[31] Jiawei Tang, Anfeng Liu, Ming Zhao, and Tian Wang. An Aggregate Signature Based Trust Routing for Data

Gathering in Sensor Networks. Security and Communication Networks, pages 1–30, 2018.

[32] Chu Yu Hunag, Tseng Min Chi, Chen Yao Ting, Chou Yu Chieh, and Chen Yan Ren. A novel design for future
on-demand service and security. In International Conference on Communication Technology Proceedings, ICCT,
pages 385–388, 2010.

32

[33] Fung Po Tso and Dimitrios P. Pezaros. Improving data center network utilization using near-optimal trafﬁc

engineering. IEEE Transactions on Parallel and Distributed Systems, 24(6):1139–1148, 2013.

[34] Abbas Javadtalab, Mehdi Semsarzadeh, Aziz Khanchi, Shervin Shirmohammadi, and Abdulsalam Yassine.
Continuous one-way detection of available bandwidth changes for video streaming over best-effort networks.
IEEE Transactions on Instrumentation and Measurement, 64(1):190–203, 2015.

[35] Hyojoon Kim and Nick Feamster. Improving network management with software deﬁned networking. IEEE

Communications Magazine, 51(2):114–119, 2013.

[36] Venkat Mohan, Y R Janardhan Reddy, and K Kalpana. Active and Passive Network Measurements : A Survey.

Computer Science and Information Technologies, 2(4):1372–1385, 2011.

[37] Sakir Sezer, Sandra Scott-Hayward, Pushpinder Chouhan, Barbara Fraser, David Lake, Jim Finnegan, Niel
Viljoen, Marc Miller, and Navneet Rao. Are we ready for SDN? Implementation challenges for software-deﬁned
networks. IEEE Communications Magazine, 51(7):36–43, 2013.

[38] Michael Jarschel, Thomas Zinner, Thomas Hohn, and Phuoc Tran-Gia. On the accuracy of leveraging SDN for
passive network measurements. In Australasian Telecommunication Networks and Applications Conference
(ATNAC), pages 41–46, 2013.

[39] Tariq Emad Ali, Ameer Hussein Morad, and Mohammed A Abdala. Trafﬁc management inside software-deﬁned

data centre networking. Bulletin of Electrical Engineering and Informatics, 9(5):2045–2054, 2020.

[40] Minlan Yu, Lavanya Jose, and R Miao. Software deﬁned trafﬁc measurement with opensketch. 10th USENIX

Symposium on Networked Systems, pages 29–42, 2013.

[41] Zaoxing Liu, Antonis Manousis, Gregory Vorsanger, Vyas Sekar, and Vladimir Braverman. One Sketch to Rule
Them All: Rethinking Network Flow Monitoring with UnivMon. In Proceedings of the conference on ACM
SIGCOMM, pages 101–114, 2016.

[42] Masoud Moshref, Minlan Yu, Ramesh Govindan, and Amin Vahdat. Dream: Dynamic Resource Allocation for

Software-deﬁned Measurement. In ACM conference on SIGCOMM, pages 419–430, 2014.

[43] Masoud Moshref, Minlan Yu, Ramesh Govindan, and Amin Vahdat. Scream: Sketch Resource Allocation
for Software-deﬁned Measurement. In Proceedings of the 11th ACM Conference on Emerging Networking
Experiments and Technologies, pages 1–13, 2015.

[44] Masoud Moshref, Minlan Yu, Ramesh Govindan, and Amin Vahdat. Trumpet: Timely and Precise Triggers in

Data Centers. In Proceedings of the conference on ACM SIGCOMM, pages 129–143, 2016.

[45] Lavanya Jose, Minlan Yu, and Jennifer Rexford. Online measurement of large trafﬁc aggregates on commodity

switches. In Proc. of the USENIX HotICE workshop, page 13, 2011.

[46] Kapil Bakshi. Considerations for Software Deﬁned Networking (SDN): Approaches and use cases. In IEEE

Aerospace Conference Proceedings, pages 1–9, 2013.

[47] Rafat Ahmed Alhanani and Jaafar Abouchabaka. An overview of different techniques and algorithms for network

topology discovery. In Second World Conference on Complex Systems (WCCS), pages 530–535, 2014.

[48] Ajay Nehra, Meenakshi Tripathi, Manoj Singh Gaur, Ramesh Babu Battula, and Chhagan Lal. Tilak: A token-
based prevention approach for topology discovery threats in sdn. International Journal of Communication
Systems, page e3781, 2018.

[49] Zhiwen Wang and Hongtao Sun. Bandwidth Allocation Strategy of Networked Control System based on Multirate
Sampling Method. In International Journal of Digital Content Technology and its Applications, volume 6, pages
651–659, 2012.

[50] Anup Kumar Paul, Atsuo Tachibana, and Teruyuki Hasegawa. An enhanced available bandwidth estimation
technique for an end-to-end network path. IEEE Transactions on Network and Service Management, 13(4):768–
781, 2016.

[51] Péter Megyesi, Alessio Botta, Giuseppe Aceto, Antonio Pescapé, and Sándor Molnár. Challenges and solution
for measuring available bandwidth in software deﬁned networks. Computer Communications, 99:48–61, 2017.

[52] Ningbo Zhang, Fengyu Wang, Bin Gong, and Liangxiong Li. Identifying heavy-hitter ﬂows fast and accurately.
In 2nd International Conference on Future Computer and Communication, volume 3, pages 3–26, 2010.

[53] B Nagpal, P Sharma, N Chauhan, and A Panesar. DDoS tools: Classiﬁcation, analysis and comparison. In 2nd
International Conference on Computing for Sustainable Global Development (INDIACom), pages 342–346,
2015.

33

[54] Noriaki Kamiyama, Tatsuya Mori, and Ryoichi Kawahara. Simple and adaptive identiﬁcation of superspreaders

by ﬂow sampling. In Proceedings - IEEE INFOCOM, pages 2481–2485, 2007.

[55] H SHI, R V Prasad, E Onur, and I G M M Niemegeers. Fairness in Wireless Networks:Issues, Measures and

Challenges. IEEE Communications Surveys & Tutorials, 16(1):5–24, 2014.

[56] Mustafa Ismael Salman et al. Link failure recovery for a large-scale video surveillance system using a software-

deﬁned network. Journal of Engineering, 26(1):104–120, 2020.

[57] Tariq Emad Ali, Ameer Hussein Morad, and Mohammed A Abdala. Sdn implementation in data center network.

Journal of Communications, 14(3):223–228, 2019.

[58] Mehdi Malboubi, Liyuan Wang, Chen Nee Chuah, and Puneet Sharma.

Intelligent SDN based trafﬁc

(de)Aggregation and Measurement Paradigm (iSTAMP). In IEEE INFOCOM, pages 934–942, 2014.

[59] Niels L.M. Van Adrichem, Christian Doerr, and Fernando A. Kuipers. OpenNetMon: Network monitoring
in OpenFlow software-deﬁned networks. In IEEE/IFIP Network Operations and Management Symposium:
Management in a Software Deﬁned World, 2014.

[60] Amin Tootoonchian, Monia Ghobadi, and Yashar Ganjali. OpenTM: Trafﬁc Matrix Estimator for OpenFlow
Networks. In Passive and Active Measurement: 11th International Conference, Zurich, Switzerland, pages
201–210, 2010.

[61] Masoud Moshref, Minlan Yu, and Ramesh Govindan. Resource/accuracy tradeoffs in software-deﬁned measure-
ment. In Proceedings of the second ACM SIGCOMM workshop on Hot topics in software deﬁned networking,
2013.

[62] Ying Zhang. An adaptive ﬂow counting method for anomaly detection in SDN. In Proceedings of the ninth ACM

conference on Emerging networking experiments and technologies, pages 25–30, 2013.

[63] Shihabur Rahman Chowdhury, Md. Faizul Bari, Reaz Ahmed, and Raouf Boutaba. PayLess: A low cost
network monitoring framework for Software Deﬁned Networks. In IEEE Network Operations and Management
Symposium (NOMS), pages 1–9, 2014.

[64] Maurizio Dusi, Roberto Bifulco, Francesco Gringoli, and Fabian Schneider. Reactive logic in software-deﬁned
networking: Measuring ﬂow-table requirements. In 10th International Wireless Communications and Mobile
Computing Conference, pages 340–345, 2014.

[65] Fung Po Tso and Dimitrios P. Pezaros. Baatdaat: Measurement-based ﬂow scheduling for cloud data centers. In

Proceedings - International Symposium on Computers and Communications, pages 765–770, 2013.

[66] Peng Sun, Minlan Yu, Michael J. Freedman, Jennifer Rexford, and David Walker. HONE: Joint Host-Network
Trafﬁc Management in Software-Deﬁned Networks. Journal of Network and Systems Management, 23(2):374–
399, 2015.

[67] Jeff Rasley, Brent Stephens, Colin Dixon, Eric Rozner, Wes Felter, Kanak Agarwal, John Carter, and Rodrigo
Fonseca. Planck: Millisecond-scale Monitoring and Control for Commodity Networks. In ACM conference on
SIGCOMM, pages 407–418, 2014.

[68] Junho Suh, Ted Taekyoung Kwon, Colin Dixon, Wes Felter, and John Carter. OpenSample: A low-latency,
sampling-based measurement platform for commodity SDN. In IEEE International Conference on Distributed
Computing Systems, pages 228–237, 2014.

[69] SFlow. www.sﬂow.org.
[70] Robert Schweller, Zhichun Li, Yan Chen, Yan Gao, Ashish Gupta, Yin Zhang, Peter A. Dinda, Ming Yang
Kao, and Gokhan Memik. Reversible sketches: Enabling monitoring and analysis over high-speed data streams.
IEEE/ACM Transactions on Networking, 15(5):1059–1072, 2007.

[71] Graham Cormode and S. Muthukrishnan. What’s new: Finding signiﬁcant differences in network data streams.

IEEE/ACM Transactions on Networking, 13(6):1219–1232, 2005.

[72] Yuliang Li, Rui Miao, Changhoon Kim, and Minlan Yu. FlowRadar: A Better NetFlow for Data Centers. In

NSDI, pages 311–324, 2016.

[73] Qun Huang, Xin Jin, Patrick P. C. Lee, Runhui Li, Lu Tang, Yi-Chao Chen, and Gong Zhang. SketchVisor:
Robust Network Measurement for Software Packet Processing. In Proceedings of the Conference of the ACM
Special Interest Group on Data Communication, pages 113–126, 2017.

[74] Curtis Yu, Cristian Lumezanu, Abhishek Sharma, Qiang Xu, Guofei Jiang, and Harsha V. Madhyastha. Software-
Deﬁned Latency Monitoring in Data Center Networks: Passive and Active Measurement. In Computer Science
(including subseries Lecture Notes in Artiﬁcial Intelligence and Lecture Notes in Bioinformatics), pages 360–372,
2015.

34

[75] Tal Mizrahi and Yoram Moses. The case for Data Plane Timestamping in SDN. In IEEE INFOCOM, pages

856–861, 2016.

[76] Keqiang He, Junaid Khalid, Aaron Gember-Jacobson, Sourav Das, Chaithan Prakash, Aditya Akella, Li Erran Li,
and Marina Thottan. Measuring control plane latency in SDN-enabled switches. In ACM SIGCOMM Symposium
on Software Deﬁned Networking Research, pages 1–6, 2015.

[77] Péter Megyesi, Alessio Botta, Giuseppe Aceto, Antonio Pescapè, and Sándor Molnár. Available bandwidth
measurement in software deﬁned networks. In Proceedings of the 31st Annual ACM Symposium on Applied
Computing, pages 651–657, 2016.

[78] Lucian Popa, Praveen Yalagandula, Sujata Banerjee, Jeffrey C. Mogul, Yoshio Turner, and Jose Renato Santos.
ElasticSwitch: Practical Work-conserving Bandwidth Guarantees for Cloud Computing. ACM SIGCOMM
Computer Communication Review, 43(4):351–362, 2013.

[79] Giuseppe Aceto, Valerio Persico, Antonio Pescapé, and Giorgio Ventre. SOMETIME: Software deﬁned network-
basec Available Bandwidth measurement in MONROE. In Proceedings of the 1st Network Trafﬁc Measurement
and Analysis Conference, 2017.

[80] Runxin Wang, Simone Mangiante, Alan Davy, Lei Shi, and Brendan Jennings. QoS-aware multipathing in
datacenters using effective bandwidth estimation and SDN. In International Conference on Network and Service
Management, pages 342–347, 2017.

[81] Farzaneh Pakzad, Marius Portmann, Wee Lum Tan, and Jadwiga Indulska. Efﬁcient topology discovery in
software deﬁned networks. In 8th International Conference on Signal Processing and Communication Systems,
2014.

[82] Suleman Khan, Abdullah Gani, Ainuddin Wahid Abdul Wahab, Mohsen Guizani, and Muhammad Khurram
Khan. Topology Discovery in Software Deﬁned Networks: Threats, Taxonomy, and State-of-the-Art. IEEE
Communications Surveys and Tutorials, 19(1):303–324, 2017.

[83] Leonardo Ochoa-Aday, Cristina Cervelló-Pastor, and Adriana Fernández-Fernández. Discovering the Network
Topology: An Efﬁcient Approach for SDN. Adcaij: Advances in Distributed Computing and Artiﬁcial Intelligence
Journal, 5(2), 2016.

[84] Mian Dai, Guang Cheng, and Yuxiang Wang. Detecting Network Topology and Packet Trajectory with SDN-
enabled FPGA Platform. In Proceedings of the 11th International Conference on Future Internet Technologies,
volume 15, pages 7–13, 2016.

[85] Wun Yuan Huang, Ta Yuan Chou, Jen Wei Hu, and Te Lung Liu. Automatical end to end topology discovery
and ﬂow viewer on SDN. In IEEE 28th International Conference on Advanced Information Networking and
Applications Workshops, pages 910–915, 2014.

[86] Raouf Boutaba, Mohammad A. Salahuddin, Noura Limam, Sara Ayoubi, Nashid Shahriar, Felipe Estrada-Solano,
and Oscar M. Caicedo. A comprehensive survey on machine learning for networking: evolution, applications
and research opportunities. Journal of Internet Services and Applications, 9(1), 2018.

[87] M A Alsheikh, S Lin, D Niyato, and H Tan. Machine Learning in Wireless Sensor Networks: Algorithms,

Strategies, and Applications. IEEE Communications Surveys & Tutorials, 16(4):1996–2018, 2014.

[88] M Bkassiny, Y Li, and S K Jayaweera. A Survey on Machine-Learning Techniques in Cognitive Radios. IEEE

Communications Surveys & Tutorials, 15(3):1136–1159, 2013.

[89] A L Buczak and E Guven. A Survey of Data Mining and Machine Learning Methods for Cyber Security Intrusion

Detection. IEEE Communications Surveys & Tutorials, 18(2):1153–1176, 2016.

[90] Z M Fadlullah, F Tang, B Mao, N Kato, O Akashi, T Inoue, and K Mizutani. State-of-the-Art Deep Learn-
ing: Evolving Machine Intelligence Toward Tomorrow’s Intelligent Network Trafﬁc Control Systems. IEEE
Communications Surveys & Tutorials, 19(4):2432–2455, 2017.

[91] M Wang, Y Cui, X Wang, S Xiao, and J Jiang. Machine learning for networking: Workﬂow, advances and

opportunities. IEEE Netw, 32, 2018.

[92] Cyber Risk Trust Archive. https://www.impactcybertrust.org.

[93] UCI KDD Archive. https://kdd.ics.uci.edu/.

[94] WITS: Waikato Internet Trafﬁc Storage. https://wand.net.nz/wits.

[95] Chuck Fraleigh, Christophe Diot, Bryan Lyles, and Sue Moon. Design and deployment of a passive monitoring

infrastructure. In Evolutionary Trends of the Internet, pages 556–575, 2001.

35

[96] Andrew W. Moore and Denis Zuev. Internet trafﬁc classiﬁcation using bayesian analysis techniques. ACM

SIGMETRICS Performance Evaluation Review, 33(1), 2005.

[97] Y Yemini and O Wolfson. NETMATE: management of complex distributed networked systems. In Proceedings
of the First International Conference on Parallel and Distributed Information Systems, page 173, 1991.
[98] Eshwari Girish Kulkarni and Raj B. Kulkarni. Weka Powerful Tool in Data Mining. IJCA Proceedings on

National Seminar on Recent Trends in Data, RTDM 2016(2):10–15, 2016.

[99] Dimitrios Sisiaridis and Olivier Markowitch. Reducing data complexity in feature extraction and feature selection
for big data security analytics. In International Conference on Data Intelligence and Security, ICDIS, pages
43–48, 2018.

[100] V Shakya and R R S Makwana. Feature selection based intrusion detection system using the combination
of DBSCAN, K-Mean++ and SMO algorithms. In International Conference on Trends in Electronics and
Informatics, ICEI, pages 928–932, 2018.

[101] Pu Wang, Shih Chun Lin, and Min Luo. A framework for QoS-aware trafﬁc classiﬁcation using semi-supervised

machine learning in SDNs. In IEEE International Conference on Services Computing, pages 760–765, 2016.

[102] J Zhang, C Chen, Y Xiang, W Zhou, and Y Xiang. Internet trafﬁc classiﬁcation by aggregating correlated naive

bayes predictions. IEEE Trans Inf Forensic Secur, 8, 2013.

[103] Nahla Ben Amor, Salem Benferhat, and Zied Elouedi. Naive Bayes vs decision trees in intrusion detection

systems. In ACM symposium on Applied computing, 2004.

[104] James D. Cannady. Artiﬁcial neural networks for misuse detection. Proceedings of the 21st National information

systems security conference, 7:368–381, 1998.

[105] Srilatha Chebrolu, Ajith Abraham, and Johnson P. Thomas. Feature deduction and ensemble design of intrusion

detection systems. Computers and Security, 24(4):295–307, 2005.

[106] Christopher Kruegel and Thomas Toth. Using Decision Trees to Improve Signature-Based Intrusion Detection.

In Recent Advances in Intrusion Detection, pages 173–191, 2003.

[107] Basant Subba, Santosh Biswas, and Sushanta Karmakar. A Neural Network based system for Intrusion Detection
and attack classiﬁcation. In Twenty Second National Conference on Communication (NCC), pages 1–6, 2016.
[108] Z.S. Pan, SC Chen, G.B. Hu, and D.Q. Zhang. Hybrid neural network and C4. 5 for misuse detection. In

International Conference on Machine Learning and Cybernetics, volume 4, page 2463–2467, 2003.

[109] Sandhya Peddabachigari, Ajith Abraham, Crina Grosan, and Johnson Thomas. Modeling intrusion detection
system using hybrid intelligent systems. Journal of Network and Computer Applications, 30(1):114–132, 2007.
[110] Phurivit Sangkatsanee, Naruemon Wattanapongsakorn, and Chalermpol Charnsripinyo. Practical real-time
intrusion detection using machine learning approaches. Computer Communications, 34(18):2227–2235, 2011.
[111] Gary Stein, Bing Chen, Annie S. Wu, and Kien A. Hua. Decision tree classiﬁer for network intrusion detection
with GA-based feature selection. In Proceedings of the 43rd annual southeast regional conference, volume 2.
ACM, 2005.

[112] A Forster and A L Murphy. FROMS: Feedback Routing for Optimizing Multiple Sinks in WSN with Reinforce-
ment Learning. In 3rd International Conference on Intelligent Sensors, Sensor Networks and Information, pages
371–376, 2007.

[113] T Hu and Y Fei. Qelar: a machine-learning-based adaptive routing protocol for energy-efﬁcient and lifetime-

extended underwater sensor networks. IEEE Trans Mob Comput, 9(6):796–809, 2010.

[114] S Lin, I F Akyildiz, P Wang, and M Luo. QoS-Aware Adaptive Routing in Multi-layer Hierarchical Software
In IEEE International Conference on Services

Deﬁned Networks: A Reinforcement Learning Approach.
Computing (SCC), pages 25–33, 2016.

[115] K Piamrat, A Ksentini, C Viho, and J Bonnin. QoE-Aware Admission Control for Multimedia Applications in

IEEE 802.11 Wireless Networks. In IEEE 68th Vehicular Technology Conference, pages 1–5, 2008.

[116] N Baldo, P Dini, and J Nin-Guerrero. User-driven Call Admission Control for VoIP over WLAN with a Neural
Network based cognitive engine. In 2nd International Workshop on Cognitive Information Processing, pages
52–56, 2010.

[117] N. Fonseca and M. Crovella. Bayesian packet loss detection for TCP. In Proceedings IEEE 24th Annual Joint
Conference of the IEEE Computer and Communications Societies., volume 3, pages 1826–1837, 2005.
[118] Patrick Haffner, Subhabrata Sen, Oliver Spatscheck, and D Wang. Acas. Automated construction of application

signatures, 2005.

36

[119] Justin Ma, Kirill Levchenko, Christian Kreibich, Stefan Savage, and Geoffrey M. Voelker. Unexpected means of

protocol inference. In ACM SIGCOMM on Internet measurement, 2006.

[120] Dominik Schatzmann, Wolfgang Mühlbauer, Thrasyvoulos Spyropoulos, and Xenofontas Dimitropoulos. Digging
into HTTPS: Flow-Based classiﬁcation of webmail trafﬁc. In Proceedings of the 10th annual conference on
Internet measurement, pages 322–326. ACM, 2010.

[121] Hongbo Jiang, Andrew W. Moore, Zihui Ge, Shudong Jin, and Jia Wang. Lightweight application classiﬁcation
for network management. In Proceedings of the SIGCOMM workshop on Internet network management, 2007.

[122] Jun Zhang, Xiao Chen, Yang Xiang, Wanlei Zhou, and Jie Wu. Robust Network Trafﬁc Classiﬁcation. IEEE/ACM

Transactions on Networking, 23(4):1257–1270, 2015.

[123] Runyuan Sun, Lizhi Peng, Zhenxiang Chen, Lei Zhang, and Shan Jing. Trafﬁc classiﬁcation using probabilistic
neural networks. In International Conference on Natural Computation, volume 4, pages 299–304, 2007.

[124] Thuy T. T. Nguyen, Grenville Armitage, Philip Branch, and Sebastian Zander. Timely and Continuous Machine-
Learning-Based Classiﬁcation for Interactive IP Trafﬁc. IEEE/ACM Transactions on Networking, 20(6):1880–
1894, 2012.

[125] Alberto Dainotti, Antonio Pescap, and Carlo Sansone. Early Classiﬁcation of Network Trafﬁc through Multi-

classiﬁcation. In Trafﬁc Monitoring and Analysis, pages 122–135, 2011.

[126] Walter Donato, Antonio Pescapé, and Alberto Dainotti. Trafﬁc identiﬁcation engine: An open platform for trafﬁc

classiﬁcation. IEEE Network, 28(2):56–64, 2014.

[127] C Liu, Y Chang, C Tseng, Y Yang, M Lai, and L Chou. SVM-based Classiﬁcation Mechanism and Its Application
in SDN Networks. In International Conference on Communication Software and Networks (ICCSN), pages
45–49, 2018.

[128] B Leng, L Huang, Chunming Qiao, and H Xu. A decision-tree-based on-line ﬂow table compressing method in
Software Deﬁned Networks. In IEEE/ACM 24th International Symposium on Quality of Service (IWQoS), pages
1–2, 2016.

[129] K Kolomvatsos, C Anagnostopoulos, A K Marnerides, Q Ni, S Hadjiefthymiades, and D P Pezaros. Uncertainty-
driven ensemble forecasting of QoS in Software Deﬁned Networks. In 2017 IEEE Symposium on Computers
and Communications (ISCC), pages 1284–1289, 2017.

[130] T A Tang, L Mhamdi, D McLernon, S A R Zaidi, and M Ghogho. Deep Recurrent Neural Network for Intrusion
Detection in SDN-based Networks. In IEEE Conference on Network Softwarization and Workshops (NetSoft),
pages 202–206, 2018.

[131] Abdulhakeem Qusay Al-Bayati, Ahmed S Al-Araji, and Saman Hameed Ameen. Arabic sentiment analysis (asa)

using deep learning approach. Journal of Engineering, 26(6):85–93, 2020.

[132] Bomin Mao, Fengxiao Tang, Zubair Md Fadlullah, Nei Kato, Osamu Akashi, Takeru Inoue, and Kimihiro
Mizutani. A Novel Non-Supervised Deep-Learning-Based Network Trafﬁc Control Method for Software Deﬁned
Wireless Networks. IEEE Wireless Communications, 25(4):74–81, 2018.

[133] J Chavula, M Densmore, and H Suleman. Using SDN and reinforcement learning for trafﬁc engineering in
UbuntuNet Alliance. In International Conference on Advances in Computing and Communication Engineering
(ICACCE), pages 349–355, 2016.

[134] Y Liu, M Dong, K Ota, J Li, and J Wu. Deep Reinforcement Learning based Smart Mitigation of DDoS Flooding
in Software-Deﬁned Networks. In IEEE 23rd International Workshop on Computer Aided Modeling and Design
of Communication Links and Networks (CAMAD), pages 1–6, 2018.

[135] Z Zhang, L Ma, K K Leung, L Tassiulas, and J Tucker. Q-Placement: Reinforcement-Learning-Based Service
Placement in Software-Deﬁned Networks. In IEEE 38th International Conference on Distributed Computing
Systems (ICDCS), pages 1527–1532, 2018.

[136] S Kim, J Son, A Talukder, and C S Hong. Congestion prevention mechanism based on Q-leaning for efﬁcient
routing in SDN. In International Conference on Information Networking (ICOIN), pages 124–128, 2016.

[137] Z Min, Q Hua, and Z Jihong. Dynamic switch migration algorithm with Q-learning towards scalable SDN
control plane. In 9th International Conference on Wireless Communications and Signal Processing (WCSP),
pages 1–4, 2017.

[138] C Qiu, F R Yu, H Yao, C Jiang, F Xu, and C Zhao. Blockchain-Based Software-Deﬁned Industrial Internet of

Things: A Dueling Deep Q-Learning Approach. IEEE Internet of Things Journal, 2018.

37

[139] L Zhang, Y Wang, X Zhong, W Li, and S Guo. Resource-saving replication for controllers in multi controller
SDN against network failures. In IEEE/IFIP Network Operations and Management Symposium, pages 1–7,
2018.

[140] D Adami, S Giordano, M Pagano, and G Portaluri. A novel SDN controller for trafﬁc recovery and load
balancing in data centers. In IEEE 21st International Workshop on Computer Aided Modelling and Design of
Communication Links and Networks (CAMAD), pages 77–82, 2016.

[141] Z Shu, J Wan, J Lin, S Wang, D Li, S Rho, and C Yang. Trafﬁc engineering in software-deﬁned networking:

Measurement and management. IEEE Access, 4:3246–3256, 2016.

[142] Tariq Emad Ali, Ameer Hussein Morad, and Mohammed A Abdala. Load balance in data center sdn networks.

International Journal of Electrical and Computer Engineering (IJECE), 8(5):3086–3092, 2018.

[143] M I Hamed, B M ElHalawany, M M Fouda, and A S T Eldien. A novel approach for resource utilization and

management in SDN. In International Computer Engineering Conference (ICENCO), pages 337–342, 2017.

[144] D Li, N Dai, F Li, C Xing, and F Dai. Estimating SDN Trafﬁc Matrix Based on Online Informative Flow
Measurement Method. In International Conference on Advanced Cloud and Big Data (CBD), pages 75–80,
2017.

[145] Simon Tse and Gagan Choudhury. Real-Time Trafﬁc Management in AT&amp;T’s SDN-Enabled Core IP/Optical

Network. In Optical Fiber Communications Conference and Exposition (OFC), pages 1–3, 2018.

[146] H Zhou, C Wu, C Yang, P Wang, Q Yang, Z Lu, and Q Cheng. SDN-RDCD: A Real-Time and Reliable Method
for Detecting Compromised SDN Devices. IEEE/ACM Transactions on Networking, 26(5):2048–2061, 2018.
[147] Tariq Ali, Ameer Morad, and Mohammed Abdala. Trafﬁc management inside software-deﬁned data centre

networking. Bulletin of Electrical Engineering and Informatics, 9(5):2045–2054, 2020.

[148] Z Su, T Wang, and M Hamd. COSTA: Cross-layer optimization for sketch-based software deﬁned measurement
task assignment. In IEEE 23rd International Symposium on Quality of Service (IWQoS), pages 183–188, 2015.
[149] L Kaplan and T Halagan. Development sketch-based tool for creation and scaling of virtualized SDN infrastruc-
ture. In International Conference on Emerging eLearning Technologies and Applications (ICETA), pages 1–5,
2015.

[150] M Monshizadeh, V Khatri, and R Kantola. An adaptive detection and prevention architecture for unsafe trafﬁc in
SDN enabled mobile networks. In IFIP/IEEE Symposium on Integrated Network and Service Management (IM),
pages 883–884, 2017.

[151] F Rebecchi, J Boite, P Nardin, M Bouet, and V Conan. Trafﬁc monitoring and DDoS detection using stateful

SDN. In IEEE Conference on Network Softwarization (NetSoft), pages 1–2, 2017.

38

