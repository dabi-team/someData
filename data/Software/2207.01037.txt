ACM Communications in Computer Algebra, Vol.xx, No.xx, Issue xxx, month 202x

ISSAC’22

Guessing With Quadratic Diﬀerential Equations

Bertrand Teguia Tabuguia
Nonlinear Algebra Group
Max Planck Institute for Mathematics in the Sciences
04103 Leipzig, Germany
bertrand.teguia@mis.mpg.de

2
2
0
2

l
u
J

3

]

C
S
.
s
c
[

1
v
7
3
0
1
0
.
7
0
2
2
:
v
i
X
r
a

Abstract

By holonomic guessing, we denote the process of ﬁnding a linear diﬀerential equation with polynomial
coeﬃcients satisﬁed by the generating function of a sequence, for which only a few ﬁrst terms are known.
Holonomic guessing has been used in computer algebra for over three decades to demonstrate the value
of the guess-and-prove paradigm in intuition processes preceding proofs, as propagated in The Art of
Solving (Polya, 1978). Among the prominent packages used to perform guessing, one can cite the Maple
Gfun package of Salvy and Zimmermann; the Mathematica GeneratingFunctions package of Mallinger;
and the Sage ore algebra package of Kauers, Jaroschek, and Johansson.

We propose an approach that extends holonomic guessing by allowing the targeted diﬀerential equa-
tions to be of degree at most two. Consequently, it enables us to capture more generating functions than
just holonomic functions. The corresponding recurrence equations are similar to known equations for
the Bernoulli, Euler, and Bell numbers. As a result, our software ﬁnds the correct recurrence and diﬀer-
ential equations for the generating functions of the up/down numbers (https://oeis.org/A000111),
the evaluations of the zeta function at positive even integers, the Taylor coeﬃcients of the Lambert W
function, and many more. Our Maple implementation (delta2guess) is part of the FPS package which
can be downloaded at http://www.mathematik.uni-kassel.de/~bteguia/FPS_webpage/FPS.htm.

Keywords Non-holonomic function, Recurrence equation, Cauchy product formula, Bernoulli numbers,
Euler numbers, Bell numbers.

1 Introduction

Roughly speaking, guessing is ﬁnding the solution to a given problem by over-constraining the shape of
a hypothetical solution from ﬁnite data. By its nice closure properties, univariate D-ﬁnite functions, or
simply holonomic functions, stayed at the center of this method (see [5, 2, 6, 14, 10]). However, there are
sequences and functions for which the holonomic system cannot help (see [1]). For instance, the reciprocal of
a holonomic function is generally not holonomic (see [3]). Therefore sequences whose generating functions
are reciprocals of holonomic functions are out of reach with the commonly used guessing. In [12, 13], the
class of δ2-ﬁnite functions was introduced. We recall the deﬁnition below.
Deﬁnition 1 (δ2-ﬁnite functions). Assume d−1
deﬁned as:

dz−1 f = 1 for any function f := f (z). Let δ2,z be the operator

δk
2,z(f ) =

ν(k) = (i, j) =

di−2
dzi−2 f ·
(cid:40)

dj−2
dzj−2 f = f (z)(i−2) · f (z)(j−2), where (i, j) = ν(k).
(l, l)
if N = k
(l + 1, k − N ) otherwise

,

(1)

(2)

1

 
 
 
 
 
 
Guessing With Quadratic Diﬀerential Equations

(cid:36)(cid:114)

where l =

2k +

(cid:37)

1
4

−

1
2

, and N =

l(l + 1)
2

.

ISSAC’22

(3)

A function f (z) is called δ2-ﬁnite if there exist polynomials P0(z), · · · , Pd(z) over a ﬁeld K of characteristic
zero, not all zero, such that

Pd(z)δd+2

2,z (f (z)) + · · · + P2(z)δ4

2,z (f (z)) + P1(z)δ3

2,z (f (z)) + P0(z)f (z) = 0.

(4)

The derivative operator δ2,z in Deﬁnition 1 computes quadratic (degree 2) terms according to the lexi-
cographic ordering in the diﬀerential polynomial ring Kf := K[z][f (z), f (z)(cid:48), f (z)(cid:48)(cid:48), f (z)(3), . . .]. In [11],
ﬁniteness relates to the ﬁnite-dimensional vector space that spans the derivatives. In our case, this relates
to the ﬁnitely many variables of Kf for a given δ2-ﬁnite function f . The author is currently working on more
elaborations in this regard, including particular closure properties. The class of δ2-ﬁnite functions contains
holonomic functions.
It also contains reciprocals of those satisfying second-order holonomic diﬀerential
equations (see [13]). Functions satisfying ﬁrst-order holonomic diﬀerential equations are holonomic by the
arguments in [3], hence also δ2-ﬁnite. Some interesting δ2-ﬁnite functions are the Lambert W function,
the reciprocals of the Bessel functions, and many generating functions involving numbers like the Bell,
Bernoulli, and Euler numbers. The algorithm in [13] outputs power series representations in the form

f (z) =

∞
(cid:88)

n=0

anzn,




an+p = Φ(n, a0, .., an+p−1),



a0, a1.., ap−1 taken from the series truncation of order p

,

(5)

where Φ : Z × Kn+p −→ K is a recursive relation deduced from the recurrence equation associated to a
quadratic (or δ2-ﬁnite since it can be holonomic) diﬀerential equation of the form (4) satisﬁed by f (z).
It is customary to ﬁnd many applications of the study of sequences in enumerative combinatorics. These
Bernoulli, Euler, and Bell numbers often occur in combinatorial problems. Thus, one thinks of an algorithm
that will take a few terms a0, a1, . . . , aN of a given sequence whose explicit formula might be unknown and
ﬁnd the corresponding Φ and its associated diﬀerential equation.
Previously, Hebisch and Rubey (see [4]) investigated guessing with the whole family of algebraic diﬀerential
equations, which of course, includes the δ2-ﬁnite one. However, we are not aware of a theoretical reason
stipulating why one should investigate more arbitrary-degree diﬀerential polynomials than second-degree
ones. We think that a systematic study of the relation between degree-k and degree-(k+1) diﬀerential
polynomials will provide more insight into the use of algebraic diﬀerential equations. A simple reason to
work on δ2-ﬁnite equations is that most of the algebraic diﬀerential equations in [4] have their δ2-ﬁnite
analog – tempting to illustrate that δ2-ﬁnite diﬀerential equations might suﬃce in many cases. Note,
moreover, that lower-degree algebraic diﬀerential equations are usually desired when it comes to solving
them using algebraic geometry techniques (see [8],[7, Chapter 3],[9]) or writing recursive formulas for power
series solutions.

2 Sketch of the algorithm
We are given N + 1 terms a0, . . . , aN of an “unknown” sequence (an)n(cid:62)0 over a ﬁeld K of characteristic
zero. We want to ﬁnd a δ2-ﬁnite diﬀerential equation

d
(cid:88)

Pk(z)δk+2

2,z (f (z)) = 0,

(6)

such that f (z) = (cid:80)∞

k=0
n=0 anzn. The algorithm proceeds as follows:

2

B. Teguia Tabuguia

1. Fix a degree bound m ∈ N for the polynomial coeﬃcients Pk(z), 0 ≤ k ≤ d. We use the default value
m = 2 since this suﬃces to correctly guess the equations for the Bernoulli, Euler, and Bell numbers.

2. For 3 ≤ d ≤ (cid:100)(N + 1) /(m + 1)(cid:101)

(a) Compute the recurrence relation of the power series solutions of the ansatz

d
(cid:88)

k=0

(ck,0 + · · · + ck,mzm) δk+2

2,z (f (z)),

(7)

where ck,i, k = 0 . . . d, i = 0 . . . m are unknown coeﬃcients.

(b) Evaluate the recurrence equation for n = 0, . . . , (m + 1)(d + 1) − 1, assuming an = 0 for n ≤ −1,
and using the given ﬁrst terms. This yields a linear system for the unknowns ck,i’s that we
solve using Maple linear system solver (SolveTools:-Linear) which implements many eﬃcient
algorithms for linear systems solving. Denote by S the set of solutions.

(c) If S is not empty and (m+1)(d+1) < N +1, then use the N +1−(m+1)(d+1) remaining initial
terms to verify the solution found. Set S to the empty set if the veriﬁcation fails. Interrupt the
loop (of step 2 as a whole) if the veriﬁcation succeeds.

3. Return the diﬀerential equation and the recurrence equation corresponding to the solution in S if

S (cid:54)= ∅; otherwise return FAIL (not successful).

3 Examples

We implemented our algorithm in Maple with the name delta2guess (or FPS:-delta2guess) as a proce-
dure of the FPS package available at http://www.mathematik.uni-kassel.de/~bteguia/FPS_webpage/
FPS.htm. The procedure takes a list of ﬁnitely many numbers as input and returns a list of two elements
in the successful case. These are a generic diﬀerential equation for the generating function and a generic
recurrence equation for the input numbers, understood as the corresponding power series coeﬃcients.

Example 2. Maple does not, by default, compute ζ(50), where ζ denotes the Riemann Zeta function.
Therefore this example is more interesting to test our implementation. Using our guessed recurrence
equation, we can compute more terms of the sequence by no means of the Zeta function. The veriﬁcation
of the correctness is easier since (ζ(2n))n(cid:62)1 has a well-known explicit formula in terms of the Bernoulli
numbers.

> L : = [ s e q ( Z e t a ( 2 ∗ j ) , j = 1 . . 2 4 ) ] : L [ 1 . . 5 ]

(cid:20) π2
6

,

π4
90

,

π6
945

,

π8
9450

,

π10
93555

(cid:21)

> FPS:− d e l t a 2 g u e s s (L)

(cid:34)

Cn (n + 1) a(n + 1) + C0 (n − 1) na(n) − 2 C

(cid:32)n−1
(cid:88)

(k + 1) a(k + 1) a(n − 1 − k)

(cid:33)

(cid:32)n−2
(cid:88)

− 2 C0

(k + 1) a(k + 1) a(n − 2 − k)

− C

(cid:33)

k=0
(cid:32) n
(cid:88)

(cid:33)

a(k) a(n − k)

k=0

k=0
(cid:32)n−1
(cid:88)

a(k) a(n − 1 − k)

− C0

k=0

(cid:33)

+

5n C0a(n)
2

+

5 C (n + 1) a(n + 1)
2

= 0,

(− C0z − C) y(z)2 + (cid:0)−2 C0 z2 − 2 Cz(cid:1) y(z)

+ (cid:0) C0 z2 + Cz(cid:1)

(cid:18) d2

(cid:19)
dz2 y(z)

+

(cid:18) 5 C
2

+

3

(cid:19)

y(z)

(cid:18) d
dz
(cid:19) (cid:18) d
dz

5 C0z
2

(cid:19)

(cid:35)

y(z)

= 0

(8 )

(9 )

Guessing With Quadratic Diﬀerential Equations

ISSAC’22

Substituting C = 2 and C0 = 0 gives the expected guess. That is equivalent to taking an element of the
(cid:4)
basis of the K-module of all solutions.

Therefore we obtain the following theorem.

Theorem 3. The generating function of the sequence deﬁned by

a(n) := ζ(2n + 2) = (−1)n(2π)2n+2 B2n+2

2 (2n + 2)!

, n ≥ 0

where Bn is the nth Bernoulli number, satisﬁes the recurrence equation

(cid:32) n
(cid:88)

(2n + 5) (n + 1) a(n + 1) −2

2(k + 1) a(k + 1) a(n − 1 − k) +a(k) a(n − k)

k=0

and, equivalently, its generating function is a solution of the diﬀerential equation

2z

(cid:18) d2

(cid:19)
dz2 y(z)

+ 5

d
dz

y(z) − 4zy(z)

(cid:19)

y(z)

(cid:18) d
dz

− 2y(z)2 = 0.

Proof. The generating function of (a(n))n(cid:62)0 can be deduced from the well-known relation

−

π z
2

cot(π z) +

1
2

=

∞
(cid:88)

n=1

ζ(2n)z2n.

Therefore we get the generating function

√

√

z)

z

1−π cot (π
2z

which satisﬁes (11).

(cid:33)

= 0,

(10)

(11)

(12)

Example 4. The up/down or “zig-zag” numbers from https: // oeis. org/ A000111 have the exponential
generating function tan (cid:0) z
(cid:1). This can be recovered by our implementation. Indeed, the values from
OEIS, each divided by the factorial of their index (starting from zero), lead to the following guess.

2 + π

4

(cid:34)

(n + 1) (n + 2) a(n + 2) −

(cid:32) n
(cid:88)

k=0

(k + 1) a(k + 1) a(n − k)

= 0,

(cid:33)

d2
dz2 y(z) − y(z)

(cid:18) d
dz

(cid:19)

(cid:35)

y(z)

= 0

(13 )

Solving the diﬀerential equation and matching the ﬁrst two Taylor coeﬃcients with the ﬁrst two terms of
the sequence give exactly the desired generating function. Note that using FPS:-FindQRE and FPS:-QDE,
(cid:1), respectively.
one can also compute the same recurrence equation and diﬀerential equation from tan (cid:0) z
(cid:4)

2 + π

4

References

[1] Jason P Bell, Stefan Gerhold, Martin Klazar, and Florian Luca. 2008. Non-holonomicity of sequences

deﬁned via elementary functions. Annals of Combinatorics 12, 1 (2008), 1–16.

[2] J´er´emy Berthomieu and Jean-Charles Faug`ere. 2016. Guessing linear recurrence relations of sequence
tuples and p-recursive sequences with linear algebra. In Proceedings of the ACM on International
Symposium on Symbolic and Algebraic Computation. 95–102.

[3] William A Harris Jr and Yasutaka Sibuya. 1985. The reciprocals of solutions of linear ordinary

diﬀerential equations. Advances in Mathematics 58, 2 (1985), 119–132.

4

B. Teguia Tabuguia

[4] Waldemar Hebisch and Martin Rubey. 2011. Extended rate, more GFUN. Journal of Symbolic

Computation 46, 8 (2011), 889–903.

[5] Manuel Kauers and Christoph Koutschan. 2022. Guessing with Little Data.

arXiv preprint

arXiv:2202.07966 (2022).

[6] Christian Mallinger. 1996. Algorithmic manipulations and transformations of univariate holonomic

functions and sequences. Master’s thesis. Kepler University, Linz.

[7] Mateusz Micha(cid:32)lek and Bernd Sturmfels. 2021. Invitation to Nonlinear Algebra. Vol. 211. American

Mathematical Soc.

[8] LX Chˆau Ngˆo and Franz Winkler. 2011. Rational general solutions of parametrizable AODEs. Publi-

cationes Mathematicae Debrecen 79, 3-4 (2011), 573–587.

[9] Mutsumi Saito, Bernd Sturmfels, and Nobuki Takayama. 2013. Gr¨obner Deformations of Hypergeo-

metric Diﬀerential Equations. Vol. 6. Springer Science & Business Media.

[10] Bruno Salvy and Paul Zimmermann. 1994. GFUN: a Maple package for the manipulation of generating

and Holonomic functions in one variable. ACM Trans. Math. Software 20, 2 (1994), 163–177.

[11] Richard P Stanley. 1980. Diﬀerentiably ﬁnite power series. European journal of combinatorics 1, 2

(1980), 175–188.

[12] Bertrand Teguia Tabuguia. 2020. Power Series Representations of Hypergeometric Types and Non-
Holonomic Functions in Computer Algebra. Ph. D. Dissertation. University of Kassel, https://kobra.
uni-kassel.de/handle/123456789/11598.

[13] Bertrand Teguia Tabuguia and Wolfram Koepf. 2021. On the representation of non-holonomic power

series. arXiv preprint arXiv:2109.09574 (2021).

[14] Doron Zeilberger. 2007. The Holonomic Ansatz II. Automatic Discovery (!) And Proof (!!) of

Holonomic Determinant Evaluations. Annals of Combinatorics 11, 2 (2007).

5

