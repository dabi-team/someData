Noname manuscript No.
(will be inserted by the editor)

Understanding and Supporting the Design Systems
Practice

Yassine Lamine · Jinghui Cheng

2
2
0
2

y
a
M
2
2

]
E
S
.
s
c
[

1
v
3
1
7
0
1
.
5
0
2
2
:
v
i
X
r
a

Received: date / Accepted: date

Abstract Design systems represent a user interaction design and development ap-
proach that is currently of avid interest in the industry. However, little research
work has been done to synthesize knowledge related to design systems in order
to inform the design of tools to support their creation, maintenance, and usage
practices. This paper represents an important step in which we explored the issues
that design system projects usually deal with and the perceptions and values of
design system project leaders. Through this exploration, we aim to investigate the
needs for tools that support the design system approach. We found that the open
source communities around design systems focused on discussing issues related
to behaviors of user interface components of design systems. At the same time,
leaders of design system projects faced considerable challenges when evolving their
design systems to make them both capable of capturing stable design knowledge
and ﬂexible to the needs of the various concrete products. They valued a bottom-
up approach for design system creation and maintenance, in which components
are elevated and merged from the evolving products. Our ﬁndings synthesize the
knowledge and lay foundations for designing techniques and tools aimed at sup-
porting the design system practice and related modern user interaction design and
development approaches.

Keywords Design system, design tools, front-end development, practitioners’
perspectives

1 Introduction

Design system is a concept that emerged during recent years in the industry that
focuses on the design and development of information and communication tech-

Yassine Lamine
HCDLab, Polytechnique Montr´eal, Montr´eal, QC, Canada
E-mail: yassine.lamine@polymtl.ca

Jinghui Cheng
HCDLab, Polytechnique Montr´eal, Montr´eal, QC, Canada
E-mail: jinghui.cheng@polymtl.ca

 
 
 
 
 
 
2

Yassine Lamine, Jinghui Cheng

nologies. They can be understood as “a collection of reusable components, guided
by clear standards, that can be assembled together to build applications” (Mounter
et al., 2019). The prominent examples of design systems include Google’s Material
Design and Microsoft’s Fluent Design System. Motivations of adopting a design
system are usually originated from the various design challenges that the compa-
nies and organizations experience, which are associated with the consistency of the
UI design, maintainability of the design work along with its code, and collaboration
among the design and development teams (Mounter et al., 2019). Take Google’s
Material Design as an example, it is a design system that is currently used across
multiple Google products (e.g Gmail, Youtube, Google drive, etc). It includes a
variety of reusable UI components such as inputs, alerts, navigation, and layout.
It has a large open-source community and is used by developers and companies
other than Google to build their products after customizing and adapting it for
their needs.

Design systems help standardize user interaction design within an organization
by creating guidelines and reusable components that can be adopted across multi-
ple products and/or product versions. They ensure that the desired system char-
acteristics concerning usability (such as eﬃciency, accessibility, and performance)
are consistently met while helping designers and developers eﬃciently build cross-
platform user interfaces. Many industrial practitioners have discussed the beneﬁts
of this approach and provided information and suggestions for creating design sys-
tems (Fessenden, 2021; Fanguy, 2019). However, in our preliminary conversations
with UI/UX practitioners, the adoption of the design systems approach in real-
world organizations is often not a smooth process. This is despite the recently
available tools such as the InVision Design System Manager1 and Zeplin2.

On the other hand, there is very little research work on the design system
practice until very recently (Churchill, 2019). The few recent studies on this topic
have mostly focused on demonstrating the beneﬁts, values, and impacts of this
practice (Yew et al., 2020; Vendramini et al., 2021). Little knowledge has been
synthesized across diﬀerent companies and organizations about the challenges and
best practices that can inform a tool design. There is not even a consensus on
the deﬁnition of design systems. To make the problem more complicated, mature
design systems are often surrounded by large communities comprised of members
beyond the organizations that own the design systems and the associated projects.
The interests and concerns of these broader communities are important factors
that aﬀect the evolution of the design system projects, factors that should also be
considered in design system tools.

In this paper, we aim to synthesize the knowledge about issues often raised
by design system communities and the concerns and perceptions of design sys-
tem project leaders. This knowledge will be able to provide recommendations and
guidelines to inform the design and the evolution of tools to support this new ap-
proach. Particularly, we address these aspects by targeting the following research
questions:

RQ1: What types of issues do the design system projects usually deal
with? Many design systems are surrounded by large communities that have di-
verse concerns and interests. The design system creators and maintainers need to

1 https://www.invisionapp.com/design-system-manager
2 https://zeplin.io

Understanding and Supporting the Design Systems Practice

3

consider and address issues raised by these communities in order to make their
projects successful. Understanding the type of these issues and their frequencies
would be able to help assess the major burdens in design system practitioners’
work and inform features that can be included in tools for design system creation
and maintenance. Thus in this RQ, we aim to create a quantiﬁed taxonomy of
issues raised by communities surrounding design system projects.

To answer RQ1, we used discussions in issue tracking systems (ITSs) of open-
source design systems as a proxy to understand the communities’ concerns and the
issues to be addressed by design system projects. In our preliminary exploration
of design system projects, we found that although usually considered as private
property, there is a trend of putting design systems as open source projects. Many
of these projects are already attracting large communities beyond the companies
and organizations that own the design systems. We conducted a content analysis of
the data collected from issue discussions in 41 open-source design systems hosted
on GitHub. Through analysis of 4714 issues about these design systems, we found
that open source design system communities used the ITSs to mainly discuss issues
around the user interface components included in design systems; they seemed to
be focused more on the behaviors of these components rather than their visual
design. Documentation issues were also an interest in the community but were less
represented than we expected. The issue tracking systems were also used to discuss
community-related topics, such as ways to attract external contributors, as well
as software development issues, such as deployment strategies and dependency-
related bugs.

RQ2: How do leaders of design system projects currently perceive and
approach this new practice? Tools for design system creation and maintenance
should be focused on addressing the challenges faced by the practitioners and
incorporate the best practices currently adopted in design system projects. Addi-
tionally, an accurate deﬁnition of the design system should be derived from how
practitioners perceive and approach this practice. Thus in this RQ, we aim to
synthesize information about the deﬁnition, major challenges, and eﬀective strate-
gies around design systems from the perspective of design system project leaders;
this sample represent the most inﬂuential individuals that initiated and drive the
design system approach.

To answer RQ2, we conducted in-depth interviews with nine design system
project leaders who played crucial roles in the creation and maintenance of nine
diﬀerent well-known design systems. These participants collectively deﬁned a de-
sign system as an all-in-one design and development environment that includes both UI
components and guidelines and serves as a common language for unifying design. Par-
ticipants discussed challenges involved in the creation and use of design systems in-
cluding balancing customizability and standardization, managing their evolution,
and addressing unfavorable culture or mindset of the organization. To overcome
these challenges, our participants emphasized the importance of a bottom-up pro-
cess that distills the design systems from existing products and evolves the design
systems with those concrete products.

Put together, this study represents an important step towards understanding
the practice of creating, maintaining, and using design systems, as well as synthe-
sizing knowledge to inform tools that support this practice. Our results will inspire
more research in this direction and pave the road for future tools and methods
focused on this and other important design-related practices.

4

Yassine Lamine, Jinghui Cheng

2 Background and Related Work

Our work is situated in (1) the literature on design patterns and frameworks,
(2) the recent exploration and the gray literature on design systems, (3) studies
focused on understanding user interaction designers, (4) previous work on collab-
oration between designers and developers, and (5) the literature on open source
development.

2.1 Design Patterns and Frameworks

The concept of design systems has a intimate link to the extensive previous work
on design patterns and frameworks. Design patterns originated from Christopher
Alexander’s work in the ﬁeld of architecture to describe a collection of com-
mon solutions that have solved recurring problems in corresponding design con-
texts (Alexander et al., 1977). It has been then adopted in many ﬁelds, including
user interaction design. For example, Erickson (2000) conceptualized the interac-
tion design pattern language as a lingua franca, a common language that supports
communication among various kinds of stakeholders (including users) in a design
process. Tidwell et al. (2020) has summarized more than 100 interactive design
patterns, put into 11 categories; this pattern library has covered a wide range
of aspects in user interaction design, such as content organization, navigation,
form design, and data visualization. Many researchers have also focused on iden-
tifying design patterns in a speciﬁc domain, including web apps (Duyne et al.,
2002; Scott and Neil, 2009), mobile apps (Neil, 2014), information retrieval sys-
tems (Morville and Callender, 2010), ubiquitous computing (Chung et al., 2004),
video games (Cheng et al., 2017b; Bjork and Holopainen, 2004), and, most re-
cently, intelligent systems (Gutzwiller et al., 2018; Ma and Cao, 2019). In general,
user interaction design patterns suggest high-level design solutions based on spe-
ciﬁc problems that the designers face. They are usually descriptive and include
elements such as a name (for shortcut communication), a problem statement, a
solution description, and examples that realized the solution. Research has identi-
ﬁed that design patterns are useful tools in participatory design and stakeholder
communication (Cheng et al., 2017b); however, communication breakdowns can
still appear when design pattern is an unfamiliar concept (Dearden et al., 2002).
Diﬀerent from design patterns, front-end development frameworks focused on
supporting the implementation of user interface elements (Saxena, 2019). Popular
frameworks include Bootstrap3, Foundation4, Pure5, and Siimple6. They usually
include reusable and customizable code to support the construction of UI layout
(e.g. many include a grid system for easy layout) and the creation of UI components
(e.g. buttons, lists, navigation bars, etc.). The development of these frameworks is
often managed by an organization or company. However, they are aimed to serve
the purpose of general UI design and implementation.

While design patterns and frameworks are related concepts, design systems fo-
cused on diﬀerent aspects of design support. Diﬀerent from patterns, which usually

3 https://getbootstrap.com
4 https://foundation.zurb.com
5 https://purecss.io/
6 https://www.siimple.xyz/

Understanding and Supporting the Design Systems Practice

5

discuss high-level design solutions, design systems incorporate speciﬁc guidelines
and components to create concrete support for both design and implementation.
For example, the Google Material design system does not only provide a set of
design guidelines and principles, but it also includes the code for concrete UI com-
ponents or component groups for fast prototyping and development. Diﬀerent from
frameworks, which often aimed to support general UI design and implementation,
design systems are more organization-speciﬁc, incorporating branding-related ele-
ments and artifacts. For example, in the Shopify Polaris design system, the Shopify
brand is built into various elements from color schemes, component styles, and
workﬂows that the components enable, in order to support a coherent user expe-
rience on the various apps of the platform. Our study builds on top of the work
on the related areas of design patterns and frameworks to explore design systems
as a less represented but highly impactful topic.

2.2 Design Systems

The concept and practice of design systems have recently gained considerable at-
tention in industrial settings. Practitioners have shared experiences and knowledge
of creating, managing, and using design systems in websites and blog posts. We
brieﬂy review these documents as gray literature. For example, Kholmatova (2017)
compared design systems with design patterns and advocated design systems for
going beyond patterns to provide “techniques and practices for creating, captur-
ing, sharing and evolving those patterns.” The author recognized that there was
not a commonly accepted deﬁnition of “design systems” and recommended a pro-
cess for creating design systems based on a conceptual separation of functional
patterns and perceptual, or visual, patterns. Hacq (2018) emphasized that the
design systems contain a set of deliverables that include a style guide that de-
scribes “graphic styles and their usage” and a pattern library that integrates the
functional components. Fanguy (2019) synthesized the resources about building
a design system and recommended a four-step process that includes: (1) a visual
audit of the current design, (2) design language creation, (3) UI pattern library
creation, and (4) documentation. Fessenden (2021) also summarized the principles
of the design systems approach and deﬁned a design system as “a complete set of
standards intended to manage design at scale using reusable components and pat-
terns.” They also recognized that design systems contain two important elements:
(1) the design repository that includes all the related artifacts and (2) the team
that manages the design system. There were also yearly eﬀorts to conduct surveys
with the design system community (Yew, 2019; Hamilton, 2020) to understand
the current trend in the practice and tooling.

Along with the practical interests, research on the topic of design systems
emerged during the past a few years, initially done by researchers in industry.
Churchill (2019) wrote a column article to reﬂect on the design system practice at
Google and described it as having value for reducing eﬀort, scaﬀolding learning,
increasing collaboration, and aligning process and product. Based on these values,
the author called for more research work on this topic. Google researchers (Yew
et al., 2020) also conducted a survey study with the design systems community
and found that UI consistency and brand are factors that contributed to both the
motivations and the values of the design systems. Beyond the traditional graphical

6

Yassine Lamine, Jinghui Cheng

user interfaces, researchers from IBM (Moore et al., 2020) also explored design
systems in the context of conversational UI.

It is only until very recently that academic studies started to discuss the design
system practice. We only found two peer-reviewed studies in this area that we
summarize below. Vendramini et al. (2021) conducted a review of both white and
gray literature and identiﬁed 23 sources discussing the design system practice. The
authors identiﬁed that this literature usually described design systems as including
three key elements: component libraries, design guidelines, and style guides. They
also summarized a set of beneﬁts and impacts of adopting this practice. Handal
et al. (2022) described a case study, at a very high level, in which a large company
adopted the design system approach. The authors brieﬂy described the adoption
process and the impacts after adoption.

Despite these industrial and academic research eﬀorts, there is still a lack of
consensus on the concept of design systems and taxonomy to characterize com-
munity concerns. There is also limited investigation of challenges and strategies
related to the creation and maintenance of design systems. Our study aims to ﬁll
these gaps.

2.3 Understanding User Interaction Designers

User interaction designers are a special group of practitioners who links the users’
needs and desires to the technical abilities provided in software systems. On one
hand, they share many characteristics of all professional practitioners, considering,
as Sch¨on identiﬁed, the speciﬁc practical problem through “reﬂection-in-action”
(i.e., constant assessing and adjusting actions in an unfolding situation) (Sch¨on,
1984). On the other hand, UI designers tackle the unique design task, which Cross
argued to be “ill-deﬁned” and requires solution-focused strategies (Cross, 2001).
In a seminal paper, Gould and Lewis (1985) outlined three principles that deﬁned
a “user-centered” approach: (a) early focus on the user, (b) empirical measure-
ment, and (c) iterative design. Since then, much work has been put to understand
user interaction designers and their design practices. For example, Stolterman and
Pierce (2012) advocated the concept of Designerly Tools aimed at exploring “meth-
ods, tools, techniques, and approaches that support design activity in a way that
is appreciated by practicing designers”. They have found that the designers used
various tools to support two diﬀerent types of activities: (1) design thinking and
ideation and (2) the creation of design artifacts. Leveraging these concepts, Gray
(2016) has identiﬁed that interaction designers rely on a user-centered mindset to
guide their adoption of design methods and tools. Zhang and Wakkary (2014) have
also pointed out that the personal experience of interaction designers can have a
major impact on their practice.

The methods adopted in our study were informed by the insights gained from
this previous literature. Particularly, we consider design systems a type of “design-
erly tools” to support both (1) ideating consistent and high-quality design through
consideration of the design guidelines and (2) eﬃciently constructing mockups and
working user interfaces with reusable components. We investigate how designers
and the broader communities work with such a tool.

Understanding and Supporting the Design Systems Practice

7

2.4 Collaboration Between Designers and Developers

Collaboration between designers and developers is an essential aspect of the devel-
opment of user-facing software. Ferreira et al. (2007) investigated the integration of
UI/UX design into agile development. They reported on a case in which embracing
the iterative development process of agile had in fact led to the improvement in the
developer-designer relationship. Brown et al. (2012) have conducted a grounded
theory ﬁeld study with software teams and found that collaborative events be-
tween designers and developers happen frequently and often go beyond planned
activities. Their results also revealed that the majority of the designer-developer
collaborations “implicitly aligned”; in other words, “designers and developers share
an implicit understanding of how collaborative work should be carried out” and
engage in collaborative activities that are not directly targeting work alignment.
While important, the multi-disciplinary nature of the designer-developer col-
laboration in software organizations can be challenging. For example, Chamberlain
et al. (2006) described the existence of “a culture of defensiveness” issue between
designers and developers that can result in communication barriers; based on char-
acteristics of such issue, they proposed a framework to alleviate the tension when
integrating development and design. Furthermore, Lundstr¨om et al. (2015) inves-
tigated designers’ perception of the developers’ empathy towards designers and
design work; they identiﬁed that the developers’ misunderstandings of the nature
of design work have resulted in miscommunications and impacted the quality of the
end product. Leiva et al. (2019) also found that breakdown during the designer-
developer collaboration tended to occur when (1) a speciﬁc design detail is not
communicated by designers, (2) a particular case is not covered in the design,
and/or (3) the design failed to consider developers’ technical constraints.

Our work builds on these previous studies to explore the way design systems
serve as a medium for facilitating the collaboration between designers and de-
velopers. We also explore the challenges design system practitioners face while
collaboratively creating and maintaining design systems.

2.5 Open Source Development

Interestingly, although usually considered as private property, many design sys-
tems have become open source projects that are accessible by other designers and
the general public. Open source is a software development model in which the
source code of the software product is open for access under a certain license. This
development model has gained popularity over the past decades and becomes a
common practice in many software-intensive application domains (Crowston et al.,
2008; Schrape, 2019). Open source software projects are usually hosted on a public
repository management platform (e.g. GitHub) and rely on various tools for tasks
such as version control, project management, community engagement, and com-
munication. Through these tools, geographically dispersed community members
make diverse contributions to the project (Cheng and Guo, 2019).

Previous works have suggested that individuals were motivated to join an open
source project because of both internal factors (such as socialization (Gharehyazie
et al., 2015; Casalnuovo et al., 2015), learning opportunities (Ye and Kishida,
2003), and self-perceived identity with respect to the project (Hertel et al., 2003))

8

Yassine Lamine, Jinghui Cheng

and external factors (such as human capital and monetary rewards (Alexander Hars,
2002)). Many researchers and practitioners have pointed out that the development
of open source software relies on a healthy community. A traditional view of a typ-
ical open source community resembles an “onion model” (Nakakoji et al., 2002; Ye
and Kishida, 2003). This model suggests a hierarchical structure of responsibilities
among community members that included a small number of core members and
an increasingly larger number of various types of peripheral developers (Nakakoji
et al., 2002). However, recent studies suggested that this structure is not stable and
constantly evolving. While the size of the community increases, the boundaries of
the hierarchical layers among the peripheral members tend to be blurred (Joblin
et al., 2017). Additionally, several factors, such as the developer’s motivation in
participating in diﬀerent projects and the social structure around the developer,
can inﬂuence their evolution from a peripheral member to a core member (Cheng
et al., 2017a).

One important tool that open source projects often use to engage the commu-
nity and manage the various tasks is the issue tracking systems (ITSs) (Bertram
et al., 2010). They often provide a forum-like functionality for posting and com-
menting on issues. Research has established that ITSs contain rich information
about the software project (Arya et al., 2019) that may include new feature re-
quests, enhancements, bug reports, general tasks to be completed, questions about
the software project or product, or even posts that solicit feedback on rough ideas.
ITSs play an important role in supporting various software engineering activi-
ties such as requirements elicitation and management (Heck and Zaidman, 2017;
Merten et al., 2016), task and job distribution (Xia et al., 2017), and traceability
management (Huang et al., 2017), to just name a few. Open course software com-
munities have also often used the ITSs to manage usability-related topics (Cheng
and Guo, 2018; Iivari, 2011). In recent work, Wang et al. (2020a) have investigated
an argumentation model to help the open source community members eﬀectively
understand and consolidate usability-related opinions posted on ITSs.

Our project builds on these previous studies and uses issue tracking systems
as a proxy to investigate the issues that need to be addressed by design system
projects.

3 Characterizing the Issues to be Addressed by Design System Projects

To explore the interests and concerns of design system communities and create a
quantiﬁed taxonomy of issues that need to be addressed in design system projects
(i.e. answer RQ1), we used the ITSs of open-source design systems as a proxy
and conducted a content analysis on 4714 issues collected from a wide range of
open-source design system projects. These issues reﬂect the focal points of the
broad open source communities towards the design systems and represent factors
that need to be addressed by the companies and organizations that own the design
system projects.

Understanding and Supporting the Design Systems Practice

9

3.1 Methods

3.1.1 Design system project selection

To identify a wide range of open source design systems, we referred to the Adele
repository7, a curated list of publicly available design systems, style guides, and
pattern libraries. We acknowledge that the deﬁnition of design systems is not fully
established. However, a clear characteristic that diﬀerentiates design systems from
style guides and pattern libraries is that design systems usually incorporate the
identity of a company or an organization. We compared the design systems’ visual
design with the products of their owners using such criteria and selected 52 design
systems among the 90 projects listed in the Adele repository. We then only included
design system projects that have a public repository on GitHub; we focused on
GitHub because of its increasing popularity over the past years among the open
source communities as an integrated platform for open source project hosting and
management. Finally, we excluded projects that have less than 10 issues and 10
commits. This strategy allowed us to focus on active design system projects and
resulted in 41 projects in our dataset. On average, the analyzed projects had 403.0
issues and 42.3 contributors. Table 1 summarizes the selected projects.

Design system repository
alfa-laboratory/arui-feather
alphagov/govuk-design-system
Altinn/DesignSystem
audi/audi-ui
auth0/cosmos
auth0/styleguide
brainly/style-guide
bring/hedwig
buzzfeed/solid
cfpb/capital-framework
Dropbox
Financial-Times/ft-origami
FirefoxUX/photon
fs-webdev/fs-styles
gctools-outilsgc/aurora-website
govau/design-system-components
instacart/Snacks
JetBrains/ring-ui
liferay/lexicon-site
lonelyplanet/rizzo
mesosphere/cnvs
mineral-ui/mineral-ui
mozilla/protocol
OﬃceDev/oﬃce-ui-fabric-react
pinterest/gestalt
pivotal-cf/pivotal-ui
pluralsight/design-system
pricelinelabs/design-system
primer/css
rei/rei-cedar
salesforce-ux/design-system
seek-oss/seek-style-guide
Shopify/polaris-react
SpareBank1/designsystem
sparkdesignsystem/spark-design-system
USAJOBS/design-system
uswds/uswds
uswitch/ustyle
vmware/clarity
vtex/styleguide
wework/plasma
Averages

Open issues Closed issues Total issues Contributors

Stars Forks

12
52
5
15
144
12
52
13
2
64
14
4
58
2
43
43
18
2
5
6
20
72
70
404
22
2
43
58
75
4
19
2
184
55
197
34
33
22
309
50
36
55.5

41
199
8
3
500
46
551
95
245
255
14
306
217
49
87
307
34
874
22
55
19
315
160
3294
75
261
285
148
195
25
521
33
691
189
448
119
1480
113
1820
123
23
347.4

53
251
13
18
644
58
603
108
247
319
28
310
275
51
130
350
52
876
27
61
39
387
230
3698
97
263
328
206
270
29
540
35
875
244
645
153
1513
135
2129
173
59
403.0

64
46
28
5
21
20
21
21
27
17
12
31
31
17
11
20
19
31
15
57
12
13
11
388
44
72
20
34
67
20
48
42
126
47
17
8
98
31
51
47
23
42.3

411
74
31
155
395
143
114
21
108
50
794
81
186
34
13
584
50
2216
21
728
27
424
50
4625
3093
605
115
399
8215
40
2530
256
2433
71
40
27
5016
16
4743
45
17
951.1

83
65
11
25
85
51
17
1
20
35
46
12
49
17
6
59
35
107
25
86
3
42
26
1016
181
82
23
76
604
11
560
37
385
40
25
15
691
3
458
7
4
125.0

Table 1 List of the studied design systems (all counts were conducted in June 2019)

7 http://adele.uxpin.com

10

Yassine Lamine, Jinghui Cheng

3.1.2 Data collection

The data collection was conducted in June 2019. We used the GitHub REST API8
to collect the issue data from our list of design system repositories. Particularly, for
each issue, we extracted the title, the description, the comments, the state (open or
closed), and other identifying information such as the creator and timestamp. We
then selected a random set of 5000 issues from the 16635 issues we extracted from
the 41 design system repositories. In a preliminary analysis of these issues, 286
issues were removed due to insuﬃcient or incomprehensible information, resulting
in 4714 issues in our ﬁnal dataset.

3.1.3 Analysis method

We conducted a qualitative content analysis on the collected data (Vaismoradi
et al., 2013; Elo and Kyngas, 2008). We started our analysis by conducting an
inductive coding (Saldana, 2015) on a random sample of 200 issues from the col-
lected data to identify the common themes. We particularly focused on (1) the
aspects of the design system projects that the issues address and (2) the nature of
the issues themselves. This step was ﬁrst done independently by two researchers
and was then followed by a thorough discussion and codes comparison to establish
the themes. We then used these themes to code the remaining 4514 issue reports.

3.2 Results: Project Aspects

The communities around open source design systems have raised issues for various
aspects of the projects. We categorized the project aspects into the following ﬁve
prominent groups.

3.2.1 Behavior of UI components (N = 2015)

Many issues were focused on the behavior and functionalities of the UI components.
Some issues mentioned more than one behavior aspect. The common UI behavior
aspects that the design system communities focused on included:

– State change behaviors (245 issues) of UI components to provide appropriate
user feedback, for example, when the component is hovered, focused, or dis-
abled.

– UI animation behavior (153 issues) for improving user experience and attrac-

tiveness.

– Accessibility (124 issues) that elevates the support to people with disabilities
to the design system level; many issues are focused on supporting users with
visual impairments, considering screen readers and keyboard shortcuts.

– Navigational behaviors (101 issues) such as pagination and scrolling.
– Input veriﬁcation (112 issues) in forms, such as password format or email ad-

dress veriﬁcation.

– Keyboard shortcuts (93 issues) that could enable more eﬃcient user interaction.
– Responsiveness (47 issues) that allows UI components and the page structure

to adjust to the screen size.

8 https://developer.github.com/v3/

Understanding and Supporting the Design Systems Practice

11

3.2.2 Visual design of UI component (N = 480)

Some issues discussed by the design systems communities also addressed the visual
design of UI components including color scheme, spacing, and typography.

3.2.3 Documentation (N = 321)

The documentations are essential in any design system; they do not only describe
how the design system should be used, but also discuss important principles and
guidelines behind the design system. In most issues about this aspect, contributors
usually reported missing documentation, pointed out errors or inaccuracies, and
requested to improve documentation of a certain component. For example, in Issue
1647 of the OﬃceDev/oﬃce-ui-fabric-react project, the issue creator reports an
error in the design system version documentation: “On the website’s home page, we
show the version of Fabric Core and Fabric React that the website documents. These
are showing as a version range when we want to show the latest version only.”

3.2.4 Software development aspects (N = 310)

Many issues were also focused on the aspects related to the software development
process, tooling, infrastructure, programming, and the use of frameworks. The
most frequently discussed topics in this category included (1) testing issues (e.g
in Issue 183, cfpb/capital-framework, “The node-wcag tests seem to be failing for
many (if not all) cf components...”), (2) deployment and release issues (e.g in Issue
624, mineral-ui/mineral-ui, “improve the release script to make it easier to use...”),
(3) issues related to the design system’s code (e.g in issue 4478, OﬃceDev/oﬃce-
ui-fabric-react, “Component Classes should not deﬁne their methods with lamb-
das...”), and (4) dependency related issues (e.g issue 569, Shopify/polaris-react,
“Move ‘app-bridge’ to peer dependency.”). Additionally, some contributors also
discussed the problems of relying on third-party libraries and proposed to reduce
such reliance.

3.2.5 Community (N = 135)

The issue tracking systems are also used as a communication tool for addressing
community-level tasks and processes. Many issues are aimed at discussing ways for
attracting external contributions to the design system repository. For example in
Issue 725 of the govuk-design-system repository, a community member reported
that “We want to enable more people to contribute, and to make it easier to make
smaller contributions to the design system”. Some issues discussed tasks to help
better communicate with the design system users. For example, the reporter of
Issue 361 of the auth0/cosmos project suggested a e.g “need to publish a changelog
(as a documentation) to inform users of changes that we make...” Issue discussions
also revolved around how to better satisfy the needs of the design system users. For
example, the reporter of Issue 223 of govau/design-system-components indicated
that “the team needs a method for tracking what technology our users have access to
and currently use.”. Some have also discussed the process and practical issues to
support the growth of the community. For example, the reporter of Issue 2301

12

Yassine Lamine, Jinghui Cheng

of the uswds/uswds repository initiated the discussion about the importance to
“assure long-term growth with a small core team.”

3.3 Results: Issue Nature

In this dimension, we aimed to identify the categories of why the issue is reported.
Figure 1 shows the intersection of these categories with the project aspect groups.

Fig. 1 Frequency of project aspects according to issue nature categories

3.3.1 Bugs or problems in the existing components (N = 2808)

About half of the issues we analyzed are reported because of a bug or problem in
the existing components (i.e. parts of the existing system that do not appear or
behave as expected). While the majority of the bugs or problems were related to
UI components, the rest were associated with documentation and peripheral code
related to the software development aspects (e.g. deployment code, test code, etc.).
These issues usually described the steps or the process to reproduce the bug. For
example, Issue 4936 of the OﬃceDev/oﬃce-ui-fabric-react project reported a color
scheme issue that “Close button for the Message Bar is not visible properly in the High
Contrast Black mode.”

3.3.2 Requests for new components (N = 1370)

About one-third of the design system issues are also requests for adding new com-
ponents. The frequently requested components included: (1) content containers
such as panel, card, and dialogue; (2) navigational components such as side-
bar, breadcrumb, and link; (3) informational components such as banner and
progress indicator; and (4) page components such as header, footer, and 404
error content. These requests focused on both unique, complex components (e.g.
dialogue, avatar system) and basic, universal ones (e.g. banner, header). This phe-
nomenon indicated that the design system projects are not created as a static

BugsRequests for new componentsSuggestions for improvementsQuestionsTotalBehavior of UI component175116565342015Visual design of UI component396521913480Documentation158130276321Software development aspects179882122310Community0137844135Other324922168391453Total280813703781584714Understanding and Supporting the Design Systems Practice

13

library, but are constantly evolving. It also shows that the components in the de-
sign systems are carefully selected, may only include the most relevant ones, and
are enriched while the projects around it evolve.

3.3.3 Suggestions for improvements (N = 378)

Some issues have also focused on requesting or suggesting improvements to an
existing component, the overall functionality of the design system, or in aspects
of community engagement and organization. For example, in brainly/styleguide,
Issue 365, a contributor is proposing to change the implementation of a certain
component: “ I’d propose to use content-box as a mixin, could be used in places where
we use it already, but would require us to create less generic components (i.e mint-
ranking, mint-panel etc)).”.

3.3.4 Questions (N = 158)

Some of the issues posted in design system projects did not report a problem of
the system, but instead focused on asking questions and requesting information
about design system components, functionalities, and the development process.
For example, in Issue 154 of the cfpb/capital-framework repository, the contributor
wondered whether they should stop using the auto-generated docs.

4 Understanding the Perspectives of Design System Project Leaders

The issue analysis study allowed us to highlight the types of issues open source
communities raise about design systems. In order to understand the values and
practices of the core contributors of design systems (i.e. to answer RQ2), we con-
ducted an interview study with nine highly experienced design system practitioners
who are leaders of their design system projects.

4.1 Methods

We conducted the interviews from August to October 2019. In this section, we
describe our participants, the interview procedure, and the data analysis approach.

4.1.1 Participants

We aimed to recruit practitioners who are highly experienced with design systems
creation. In order to identify the qualiﬁed participants, we ﬁrst identiﬁed the most
active contributors in each of the design system projects we analyzed in our issue
analysis study. We deﬁned “contribution” broadly to include both committing con-
tributions and issue discussion contributions. Because design system repositories
often manage both the code of the component libraries and the documents related
to the design pattern and guidelines, major contributors committing to design sys-
tem repositories would include both developers and designers. Additionally, major
contributors to the issue discussions can play the role of core developer, lead de-
signer, and/or project manager, depending on the project. Thus we adopted this

14

Yassine Lamine, Jinghui Cheng

recruitment strategy in order to capture the concerns of a wide range of roles that
lead design system projects. We contacted the contributors who included a public
email address on their GitHub proﬁle in descending order of their contribution. Re-
cruitment was terminated at nine participants based on data saturation (Faulkner
and Trotter, 2017). Our participants are from nine diﬀerent companies that own a
design system (e.g., Shopify Polaris, Dropbox Scooter, Financial Times Origami,
etc.); all have occupied high-level positions related to the design, development, and
management of design system projects. In other words, they’re directly involved
with the most important decisions related to their design systems. All participants
are male. Table 2 summarizes the characteristics of our participants.

ID Country Design system experience (years)

Job Title

P1 UK
P2 US
P3 Russia
P4
Spain
P5 UK
P6 Canada
P7
P8
P9 Canada

Spain
Spain

7
5
3
3
6
4
2
4
4

Business owner/developer
Design lead
Senior product designer
Product design manager
Head of engineering
UX development manager
Software engineer
UX design lead
Design system manager

Table 2 Interview participants information

4.1.2 Interview procedure

We conducted semi-structural remote interviews using Zoom. Interviews were
recorded and each took about 40 minutes to complete. During the interview ses-
sions, we focused on the participants’ knowledge and experience in developing or
contributing to design systems. Particularly, we started by asking about their def-
inition of a design system considering the fact that the concept is relatively new
and unclear. We followed by questions about the beneﬁts of design systems in or-
der to explain their increasing popularity. Finally, we asked about the challenges
the participants experienced during the development, maintenance, and usage of
design systems; we also asked about the best practices our participants follow to
mitigate the challenges.

4.1.3 Analysis

To analyze our interview data, we fully transcribed the recordings and performed
an inductive thematic analysis (Vaismoradi et al., 2013). The coding was focused
on the following four topics that reﬂected the main categories of interview ques-
tions we asked the participants: (1) concepts used for deﬁning design systems, (2)
beneﬁts of design systems, (3) challenges in creating, maintaining and using design
systems, and (4) strategies and best practices for mitigating the challenges. Once
the inductive coding process is concluded, we created a codebook for describing
the themes identiﬁed in the categories. Then another researcher (i.e. the blind
coder) is involved to use the codebook to code the interview transcripts. We used

Understanding and Supporting the Design Systems Practice

15

Cohen’s kappa (McHugh, 2012) to evaluate the inter-rater reliability between the
codebook creator and the blind coder for the codes generated. Among all codes
included in the codebook, the average kappa is 0.88, indicating almost perfect
agreements between the coders about the identiﬁed themes.

4.2 Results

In this section, we report the themes identiﬁed regarding the participants’ discus-
sions around concepts, beneﬁts, challenges, and best practices in the design system
approach. Figure 2 provides an overview of our results representing the themes in
those four categories and the relationships among them.

Fig. 2 Overview of themes identiﬁed in the interviews with design system project leaders.

4.2.1 Concepts

Participants described various concepts when asked to deﬁne design systems. We
grouped these concepts into the following categories.

Four participants described the design system approach as an all-in-one design
and development environment. In their opinion, design systems provide all the
necessary tools and resources with which all the front-end design and development
activities are carried out. As P5 described: “A design system includes more than just
a simple component library or a color palette. It would include the brand guidelines.
It also includes fully interactive and shareable components that you can reuse across
applications and the web, and whatever other pieces of technology you choose to use
there.”

From the prototyping and development perspective, three participants also
considered design systems as a tool for facilitating crafting of prototypes and
digital products. Essentially, a design system provides the required components
and artifacts for developers to implement design ideas and for designers to quickly
produce prototypes. It widely eases their work and serves as a mediating layer

StrategiesandBest PracticesChallengesBenefitsThe Concept ofDesign SystemsAll-in-oneDesign + DevFacilitate craftingGuidelines and rulesCommon language for unifying designEfficiency and reduced costConsistency and coherenceImprove communication and collaborationBalancing customizability and standardizationEvolve with the productsUnfavorable culture or mindsetA dedicated teamBottom-up approachProactive in communicationHigh-quality documentation16

Yassine Lamine, Jinghui Cheng

for them to focus on more important and/or demanding tasks. For example, P8
mentioned: “it’s the system that includes everything that the designers and the devel-
opers need to craft their products”. P7 also described the design systems as “a set
of components that help us build our product more easily and that help us not having
to focus on design and just having to focus on structure. Is more like a helper tool for
us.”

Meanwhile, three participants considered the design system as guidelines and
rules for creating UI components. In their minds, the guidelines and rules embed-
ded in the design systems are more important than the reusable UI components.
These elements were considered to be a mind-set changing tool to standardize the
product design process. They do not only allow multiple teams to work together
consistently, but also promote the best practices, according to the needs of the
company, in the design and development process. For example, P4 mentioned: “...
the design system adds another layer on top of the implementation. ... It tells you like,
‘These are the best practices. These are the limitations that we want you to know. These
are the rules.’ ” These practices in turn result in the consistency and coherence of
UI components across all the products the company owns, which facilitates the
integration of the brand and reinforcement of the identity in the products.

A common language for unifying design is another key concept, mentioned
by three participants. They described design systems as tools for communicating
the system functionalities to users in a consistent way, using the same components
across multiple products, as described by P4: “basically design system is a language,
that allows your product to talk in the same way”. As a uniﬁed design language,
design systems communicate the UI functionalities consistently to users, helping
users to form mental models of the UI components used. This was highlighted by
P1: “I would say a design system is something that allows a user to get the information
more easily. ... For example, if we have buttons that are inconsistently colored then a
user goes and uses a feature of one of our websites and presses the button that’s blue,
and then they start to have a mental model of what blue buttons do...”

4.2.2 Beneﬁts

Our participants have discussed various beneﬁts that design systems oﬀer to their
companies and teams. We categorized them into the following three high-level
themes.

First, seven participants commented on how the use of a design system results
in eﬃciency and reduced cost. With a consistent and centralized design and
implementation environment, both developers and designers can follow predeﬁned
patterns to accomplish their tasks more eﬃciently. For example, P2 mentioned:
“You can very quickly go from a nascent idea to a full-ﬂedged prototype or product
using a designed system in a way that would be much more diﬃcult without one.”. P4
highlighted this aspect from the perspective of how the centralized approach of the
design system reduces development eﬀort and time. : “There is a reduction in the
eﬀort since there is a centralized point of reference that everyone can follow.”. P3 also
stated: “It’s a great economy when we make design and when we develop a product –
we don’t have to reinvent the wheel every time.”

Consistency and coherence is another main beneﬁt of design systems, ac-
cording to ﬁve participants. According to them, using a design system ensures

Understanding and Supporting the Design Systems Practice

17

that all the components have a consistent design and implementation across mul-
tiple products. With the support of design systems, the UI follows a clear pattern
that is centered around the company’s brand, which results in consistent products
with similarly looking and behaving components. For example, P5 mentioned: “I
think the biggest beneﬁts from a design system are re-usability and consistency. ... For
us, the biggest beneﬁts were that shared consistency and understanding of how to best
build the components.”.

Finally, four participants considered that design systems improve commu-
nication and collaboration inside IT organizations. They provide a common
language not only for the products, but also for the diﬀerent teams involved in the
project development, which results in better collaboration inside the organization.
For example, P8 discussed the power of design system as a common language: “It’s
easier for a designer to communicate something to a developer, like, I need this button
and this is a primary button and both are thinking the same thing.” Participants also
valued the design system as a tool for optimizing the onboarding process. New
hired developers or designers can easily understand how UI design activities are
carried out inside the company. For example, P3 mentioned that, with the support
of the design system, “when the team changes and it happens every time, newcomers
can easily join the work and understand how it works.”

4.2.3 Challenges

Despite the beneﬁts, the design systems’ centralized approach to creating and
maintaining UI design components, patterns, and guidelines posed challenges to
practitioners. We summarized three high-level challenges that our participants
mentioned.

Ideally, design systems should both reinforce standardized guidelines and com-
ponents and at the same time allow customization of components based on the
needs of individual projects or teams. In reality, however, balancing customiz-
ability and standardization in design systems is a challenging task, mentioned
by six participants. The simple question about which components to be included
in the design system and which to be customizable in individual projects can be
complicated. For example, P2, responsible for their design system project, men-
tioned: “Sometimes those teams will tell us that they need a new component or pattern
in the design system... So, we have to have this debate about whether it is suitable for
us to work on that thing, or can we say no and that can mean in a year’s time, the
team may decide to build something themselves. That’s always challenging.”.

Related, making sure that the design systems appropriately evolve with the
products they facilitate is also diﬃcult, mentioned by six participants. Maintain-
ing consistency and relevance, as well as preventing scope creeping is a tricky
process that proves to be much more challenging than the creation of the design
system. For example, P6 clariﬁed: “Developing it, it’s not too complicated. It’s get-
ting adoption, maintaining it, making sure it’s still relevant even after a few years,
making sure it stays nimble so you can still update it easily, and it doesn’t become
crystallized...”

While design systems can improve designer-developer communication and col-
laboration, ﬁve participants mentioned that the initial unfavorable culture or
mindset about communication and collaboration can be an obstacle for the cre-
ation, maintenance, and adoption of design systems. For example, P3 discussed:

18

Yassine Lamine, Jinghui Cheng

“If you don’t have the right mindset at both designers and developers, ... if the designer
turns his design and then developer takes it and they don’t talk before, there’s a huge
chance that you can’t create a design system.” Indeed, the design system approach
poses major changes in the way people used to work and can be perceived neg-
atively, as described by P4: “I get complaints because people used to think that the
design system was limiting them somehow. it took a huge eﬀort on communication to
tell people that, ‘Hey, you can do whatever you want. Here is the design system that
oﬀers you some rules, some help to build upon from that.’ ”.

4.2.4 Strategies and best practices

To overcome the challenges, our participants collectively recommended several
strategies for facilitating the creation, maintenance, and use of design systems.

First, having a dedicated team that is responsible for developing and main-
taining the design system is essential. This practice will help maintain the con-
sistency of the design, facilitate communication, and provide adequate support in
maintaining and adopting design systems. The simple fact that a dedicated team
is created will actually help the design system approach to be better integrated
into the company’s culture. For example, P5 described: “I think that you have to
have kind of ambassadors of a design system within a company to actually get that to
be continuously used.”

Many participants also emphasized the importance to follow a bottom-up
approach in which components and guidelines in design systems are emerged
and elevated from existing digital products in the company. This will allow more
ﬂexibility and facilitate the adoption of the design system, in contrast to a top-
down approach in which the design system is created out of new design ideas and
impose signiﬁcant changes to existing products. For example, P1 had extensively
discussed this issue: “It’s sort of a push and pull thing. Sometimes you get a new piece
of user experience that is created for speciﬁc products. Then the design system team
might go and look at that and say, ”Actually, that is quite a useful widget. We’re going
to make a generic version of that.” Then that generic version can get pushed back down
into other products so that everyone is using a consistent version. ... So you don’t want
to say, ”All the designers now work in a design system team. And if you need anything
in your products that require design then you have to get from the design system.””

Participants also emphasized that the design system teams need to be proac-
tive in communication in order to eﬀectively incorporate feedback from users
of the design system and facilitate its adoption. For example, P5 described: “You
have to set in place processes that allow teams that are not working on, but using, the
design system to feedback into the design system.” P1 also mentioned: “The people
who feel like they put a page on the Wiki somewhere and therefore everyone in the
organization knows what’s going on – that’s a complete travesty. ... It doesn’t matter
how much you’re communicating, it’s not enough, communicate more. ... Then you will
start to approach levels of ease of use and organizational knowledge which are actually
where you want to be.”

Finally, having high-quality documentation was also regarded by partici-
pants as an essential element for any design system project to succeed. Overall
speaking, good documentation increases development speed, resolves communica-
tion challenges, and facilitates the use of design systems. For example, P4, who
focuses on the design system in a relatively small organization, mentioned: “We

Understanding and Supporting the Design Systems Practice

19

don’t have the same number of users Material Design has, but somehow we need to
serve them the same way. If we didn’t have the right documentation we would have
failed in the ﬁrst year probably.” P9 also considered the development experience
and adoption when discussing this aspect: “You have to spend so much time on
documentation because it goes all the way to the developer experience.”

5 Discussion

Our study is aimed at understanding the current design system practice and dis-
covering opportunities for tools and methods that can potentially support this
practice. Based on the insights gained from our studies, we could provide a living
deﬁnition of design systems, from the point of view of the practitioners who create
and maintain the design systems. Our living deﬁnition deﬁnes a design system as
an all-in-one design and development environment that includes both UI com-
ponents and guidelines and serves as a common language for unifying design.
We encourage the research community to continue to reﬁne and improve this def-
inition. Additionally, we have made several important contributions that we will
discuss in this section. First, our analysis of issues discussed by open source de-
sign system communities revealed that the communities had diverse concerns and
focuses, reﬂected in the various project aspects these issues touched. Second, our
interviews with leaders of the design system projects uncovered prominent chal-
lenges and successful strategies that need to be considered when creating tools for
supporting the design system practice. And ﬁnally, our study provided important
implications towards the design of techniques and tools for supporting the design
system practice.

5.1 Issues Raised by Design System Communities

The design system communities in the open source platform seemed to have sim-
ilar concerns with other open source communities in terms of the nature of their
issues. For example, Bissyand´e et al. (2013) found that open source communities,
in general, tend to mostly discuss bugs and request new features in issue tracking
systems (ITSs). The majority of issues discussed by design system communities
are also of these types.

In terms of the project aspects, issues discussed by the design system commu-
nities exhibited some interesting characteristics. Particularly, communities tended
to focus on discussing the behavior of the UI components in their design systems
(in 42.7% of the analyzed issues) more than their visual design (in 10.2% of the
analyzed issues). One explanation of the focus of discussion on UI behavior is that
the visual design (e.g. color scheme and typography) is more bound to the brand-
ing of the products that the design systems facilitate, and thus tend to be centrally
managed and more stable. The behavior of the UI components, on the other hand,
needs to adapt to the user interaction needs of speciﬁc products and thus more
subject to change and prone to errors. In fact, the communities have focused on
several important aspects of UI behaviors such as accessibility and safety. These
aspects often require special expertise to address. Elevating their discussion at the

20

Yassine Lamine, Jinghui Cheng

design system level would promote the consistent adoption of the best practices
of these aspects across all products.

Overall, the design system communities used the issue tracking systems to
discuss various aspects of the design system projects. In addition to the main
concern of UI components, these issues included topics related to documentation,
software development, and community engagement. These characteristics reﬂected
the fact that design systems are composed of various deliverables, including pat-
tern libraries as UI components and design guidelines and style guides as docu-
mentation (Hacq, 2018; Vendramini et al., 2021). Naturally, design system issue
discussions tend to put emphasis on the design aspects of the project. However,
during our analysis we noticed that, even for UI components, both design and
development aspects were touched in the discussions.

Because of the nature of design systems as both component libraries and de-
sign guidelines (Hacq, 2018; Fessenden, 2021; Vendramini et al., 2021), we have
speculated that documentation issues would also be a frequent topic. To our sur-
prise, however, they only comprised about 10% of the analyzed issues. Possible
explanations of this phenomenon could be that (1) documentation aspects were
well-maintained internally that limited the issues exposed to the community out-
side of the organization and/or (2) the design system open source communities
were still not mature enough to break through the common pitfalls of open source
development (i.e., focus on system-related aspects rather than user-related as-
pects (Wang et al., 2020b)). Future studies need to be conducted to examine these
explanations.

5.2 Concerns of Design System Project Leaders

Through our interviews with leaders of prominent design system projects, we have
revealed their considerations with regard to the concepts, beneﬁts, challenges,
and best practices of design systems. While our participants discussed various
beneﬁts the design system approach could oﬀer, all these beneﬁts are connected
around the aim of the design systems in creating an all-in-one, centralized environ-
ment for user interaction design and development. Such an environment promotes
consistency and coherence and facilitates designer-developer collaboration. These
advantages in turn result in eﬃciency and reduced cost in both the design and
development work, and thus potentially streamline the designer-developer collabo-
ration. These beneﬁts are in fact presented frequently in the literature that include
practitioner-oriented websites and blog posts (Fanguy, 2019; Fessenden, 2021) as
well as researcher-oriented articles (Churchill, 2019).

Results from this interview study have also extended our ﬁndings of the com-
munity interests, revealing concerns and challenges from the internal of the organi-
zation that manages the design systems. These challenges are often not discussed in
the existing gray or white literature of design systems. First, the leaders’ challenge
of balancing customizability and standardization corresponds to the numerous is-
sues community members discussed on the behaviors of the UI components. In
these issues, users of the design system often requested behaviors that emerged
from the needs of their speciﬁc products, and the design system team had to
make diﬃcult decisions about whether to satisfy these needs at the design system
level. Second, our interview participants have discussed extensive concentration

Understanding and Supporting the Design Systems Practice

21

and centralized control on the documentation of design systems within the orga-
nization. This practice partially explains the fact that documentation issues were
less discussed by the broader community; i.e., documentation about design sys-
tems is typically well-maintained internally. Finally, evolving design systems is
considered to be a prominent challenge by our participants; this problem is often
aggravated by ineﬀective communication and collaboration among stakeholders
(particularly among designers and developers). Our participants recommended
having a bottom-up approach to create and maintain the design systems in order
to keep them relevant and useful to the product teams while the concrete products
that use the design system evolve themselves.

5.3 Needs of Tools to Support the Design System Practice

The most notable aspect of the design system practice that has emerged from our
studies is the intricate balance that this practice has to address between the stable
design knowledge within the organization and the ever-changing needs of users and
products. On one hand, practitioners have deﬁned design systems as centralized
environments that accumulate and preserve the design knowledge that is ready to
be used. This knowledge needs to be stable enough to achieve consistency in prod-
ucts and facilitate communication. On the other hand, based on their immediate
projects, the community using the design system constantly had diverse needs and
requests that create diﬃcult decision points for the design system maintainers. In
order to be successful, the design system approach thus needs to be both rigid
and ﬂexible, both stable and open to change. This characteristic of design sys-
tems creates an intricate challenge for tools and techniques that can support this
approach. Our ﬁndings indicated several opportunities and considerations for the
design of such tools and techniques.

First, the design system is still a new concept for many organizations and it
implies a new mindset and process towards software design and development. It is
thus important to investigate tools and techniques that ﬂatten the learning curve
and support organizations to kick-start the design system practice. For example,
tools can provide templates including the core elements of a design system (e.g., UI
components, design guidelines, development documentation, etc.) to support the
creation process; alternatively, an initial design system can be created automati-
cally from one or more products to be customized by design system maintainers.
Second, maintaining and evolving the design systems are considered a big chal-
lenge. The number and the diversity of the issues raised by communities of open
source design systems also highlighted this complexity. Our participants recom-
mended a bottom-up approach that focuses on iteratively extracting, combining,
and incorporating UI elements in concrete products into the design system. Tools
that could streamline the evolution of design systems through this bottom-up ap-
proach can thus ease the eﬀort of design system maintainers. Particularly, it would
be useful to explore semi-automated tools that detect similar UI elements in the
products to be elevated and merged into design system components. In such tools,
design system maintainers should have the ability to consolidate diﬀerent styles
from diﬀerent products in a centralized way to ensure consistency in the design
system. Additionally we identiﬁed that, comparing to other aspects of design sys-
tem projects, behaviors of UI components tend to receive more issues and requests,

22

Yassine Lamine, Jinghui Cheng

thus might undergo more frequent changes. So tools and techniques that support
maintaining and evolving the design systems may prioritize this project aspect.

Third, related to the previous point, design system components should be cus-
tomizable in order to meet the speciﬁc needs of the products. In open source de-
sign system projects, these needs are often presented in issues that are requests for
new components and suggestions for improvements; these issues constituted 37.1%
of those we analyzed. Our participants also indicated that the required level of
customizability can be diﬀerent in diﬀerent components; e.g., a button component
may require a lower level of customizability than a calendar component. Moreover,
the variability of a certain type of UI element in the products created in an organi-
zation can indicate its required level of customizability in the design system. Thus,
design systems tools can be created to help determine the level of customizability,
as well as the customizable parameters, by analyzing existing products.

Fourth, documentation such as design patterns, design guidelines, and com-
ponent development guides are integral elements in a design system. Tools that
support the creation and maintenance of the documentation along with the design
system components would be useful. Automatic techniques can also be explored to
generate the documentation while the components are elevated from UI elements.
Additionally, we found that documentation issues are not discussed extensively
in open source communities although the community feedback is valued by the
design system project leaders during our interviews. Thus, tools that encourage
consideration and feedback towards documentation, especially the design patterns
and guidelines, would be helpful.

Finally, design system is considered as a catalyst for facilitating the collabo-
ration between designers and developers. As a result, any tools designed for sup-
porting design system creation and maintenance should consider the needs and
expertise of both designers and developers. For example, for customizing design
system components, the tools should allow designers to perform the customization
through a graphic UI and at the same time provide the ﬂexibility for developers to
directly edit the code; both approaches need to be synchronized and streamlined.
Additionally, design system tools could provide a user interface that is consistent
with the existing tools that designers and developers are familiar with.

We are currently working on incorporating some of these considerations in a
design system tool through a user-centered design approach. So far, we have cre-
ated several prototypes and received feedback from six design system experts. Our
latest prototype is a web application that supports merging styles from multiple
websites to customize the design system components. Our preliminary user studies
considered that these features are suitable to ﬁt in the workﬂow of evolving design
systems; many of our participants also commented on the ability of a centralized
tool in helping address the collaboration gap between designers and developers.

6 Threats to Validity

There are several threats to the validity of our study. First, to understand the
issues to be addressed by the design system projects, we used the issue tracking
systems of open source design systems as a proxy. This approach acknowledges the
trend of open sourcing design system projects and the fact that many important

Understanding and Supporting the Design Systems Practice

23

projects are already put open source. However, we were not able to include pro-
prietary design systems or community discussions that happened outside of issue
tracking systems (e.g. in forums, conferences, or internal discussion channels). A
broader study with other types of design systems and communication platforms
would be able to address this limitation. Second, we performed a random sampling
of the issue discussion data. While it allows us to have a sample that represents our
population as a whole, our analysis results may be biased towards larger projects
with more issues. A project-based analysis may be used to address this limitation.
Third, in our interviews, we used a developer-oriented platform (i.e., GitHub) as
our main recruitment venue. This recruitment strategy has the risk of missing im-
portant contributor roles such as designers and managers. However, we found that
these roles are often also active on GitHub repositories of design system projects,
as guideline/documentation maintainers and issue organizers/discussants. In fact,
our participant sample has a balanced distribution among the three roles (i.e.,
three designers, three developers, and three managers). Finally, our interviews are
only focused on the highly experienced contributors and decision-makers of design
systems. While they covered diverse roles and have provided important insights
into the whole life cycle of design systems, perspectives from inexperienced prac-
titioners and users can extend these insights in particularly challenging directions
such as kick-starting and adopting the design system approach. We encourage the
research community to explore these areas in the future.

7 Conclusion

In this paper, we reported on an exploratory study that focused on understanding
and supporting the now widely-discussed but understudied design system practice.
Particularly, we identiﬁed the aspects in issues that design system projects often
deal with, investigated the perception and practice of design system experts, and
explored the needs of tools that support the design system creation and main-
tenance process. Our studies serve as an important step towards understanding
this important user interaction design and development practice, as well as syn-
thesizing knowledge to inform tools to better support this practice. Our ﬁndings
will inspire more studies to investigate the design system and related modern user
interaction design and development approaches.

Acknowledgements We thank our participants for their time and valuable feedback. This
work was partially supported by the Discovery Grant of the Natural Sciences and Engineering
Research Council of Canada [RGPIN-2018-04470].

Declarations

Conﬂicts of interests/Competing interests: There is no conﬂict of interest or
competing interests involved in this project.

Ethics approval: All studies that involve human participants in this project were
approved by the ethics review board of Polytechnique Montreal.

24

References

Yassine Lamine, Jinghui Cheng

Alexander C, Ishikawa S, Silverstein M (1977) A Pattern Language: Towns, Build-

ings, Construction. Oxford University Press, New York

Alexander Hars SO (2002) Working for free? motivations for participating in open-
source projects. International Journal of Electronic Commerce 6(3):25–39, DOI
10.1080/10864415.2002.11044241

Arya D, Wang W, Guo JLC, Cheng J (2019) Analysis and detection of infor-
mation types of open source software issue discussions. In: Proceedings of the
41st International Conference on Software Engineering, IEEE Press, Piscat-
away, NJ, USA, ICSE ’19, pp 454–464, DOI 10.1109/ICSE.2019.00058, URL
https://doi.org/10.1109/ICSE.2019.00058

Bertram D, Voida A, Greenberg S, Walker R (2010) Communication, collabora-
tion, and bugs: The social nature of issue tracking in small, collocated teams.
In: Proceedings of the 2010 ACM Conference on Computer Supported Coopera-
tive Work, Association for Computing Machinery, New York, NY, USA, CSCW
’10, p 291–300, DOI 10.1145/1718918.1718972, URL https://doi.org/10.1145/
1718918.1718972

Bissyand´e TF, Lo D, Jiang L, R´eveill`ere L, Klein J, Traon YL (2013) Got issues?
who cares about it? a large scale investigation of issue trackers from github. In:
2013 IEEE 24th International Symposium on Software Reliability Engineering
(ISSRE), IEEE, pp 188–197

Bjork S, Holopainen J (2004) Patterns in Game Design (Game Development Se-

ries). Charles River Media, Inc., Rockland, MA, USA

Brown JM, Lindgaard G, Biddle R (2012) Joint implicit alignment work of in-
teraction designers and software developers. In: Proceedings of the 7th Nordic
Conference on Human-Computer Interaction: Making Sense Through Design,
Association for Computing Machinery, New York, NY, USA, NordiCHI ’12,
p 693–702, DOI 10.1145/2399016.2399121, URL https://doi.org/10.1145/
2399016.2399121

Casalnuovo C, Vasilescu B, Devanbu P, Filkov V (2015) Developer onboarding in
github: The role of prior social links and language experience. In: Proceedings of
the 2015 10th Joint Meeting on Foundations of Software Engineering, ACM, New
York, NY, USA, ESEC/FSE 2015, pp 817–828, DOI 10.1145/2786805.2786854,
URL http://doi.acm.org/10.1145/2786805.2786854

Chamberlain S, Sharp H, Maiden N (2006) Towards a framework for integrating
agile development and user-centred design. In: Abrahamsson P, Marchesi M,
Succi G (eds) Extreme Programming and Agile Processes in Software Engineer-
ing, Springer Berlin Heidelberg, Berlin, Heidelberg, pp 143–153

Cheng C, Li B, Li ZY, Zhao YQ, Liao FL (2017a) Developer Role Evolution
in Open Source Software Ecosystem: An Explanatory Study on GNOME. J
Comput Sci Technol 32(2):396–414

Cheng J, Guo JLC (2018) How do the open source communities address usability
and ux issues?: An exploratory study. In: Extended Abstracts of the 2018 CHI
Conference on Human Factors in Computing Systems, ACM, New York, NY,
USA, CHI EA ’18, pp LBW523:1–LBW523:6, DOI 10.1145/3170427.3188467,
URL http://doi.acm.org/10.1145/3170427.3188467

Cheng J, Guo JLC (2019) Activity-based analysis of open source software contrib-
utors: Roles and dynamics. In: Proceedings of the 12th International Workshop

Understanding and Supporting the Design Systems Practice

25

on Cooperative and Human Aspects of Software Engineering, IEEE Press, Pis-
cataway, NJ, USA, CHASE ’19, pp 11–18, DOI 10.1109/CHASE.2019.00011,
URL https://doi.org/10.1109/CHASE.2019.00011

Cheng J, Anderson D, Putnam C, Guo J (2017b) Leveraging design patterns
to support designer-therapist collaboration when ideating brain injury therapy
games. In: Proceedings of the Annual Symposium on Computer-Human Inter-
action in Play, ACM, New York, NY, USA, CHI PLAY ’17, pp 291–303, DOI
10.1145/3116595.3116600, URL http://doi.acm.org/10.1145/3116595.3116600
Chung ES, Hong JI, Lin J, Prabaker MK, Landay JA, Liu AL (2004) Devel-
opment and evaluation of emerging design patterns for ubiquitous computing.
In: Proceedings of the 5th Conference on Designing Interactive Systems: Pro-
cesses, Practices, Methods, and Techniques, ACM, New York, NY, USA, DIS
’04, pp 233–242, DOI 10.1145/1013115.1013148, URL http://doi.acm.org/10.
1145/1013115.1013148

Churchill EF (2019) Scaling ux with design systems. Interactions 26(5):22–23,

DOI 10.1145/3352681, URL https://doi.org/10.1145/3352681

Cross N (2001) Designerly ways of knowing: Design discipline versus design science.

Design Issues 17(3):49–55, DOI 10.1162/074793601750357196

Crowston K, Wei K, Howison J, Wiggins A (2008) Free/libre open-source soft-
ware development: What we know and what we do not know. ACM Comput
Surv 44(2):7:1–7:35, DOI 10.1145/2089125.2089127, URL http://doi.acm.org/
10.1145/2089125.2089127

Dearden A, Finlay J, Allgar E, McManus B (2002) Using pattern languages in par-
ticipatory design. In: BINDER T, GREGORY J, WAGNER I (eds) Proceedings
of the Participatory Design Conference (PDC 2002), CPSR, Palo Alto, CA, pp
104–113

Duyne DKV, Landay J, Hong JI (2002) The Design of Sites: Patterns, Princi-
ples, and Processes for Crafting a Customer-Centered Web Experience. Addison-
Wesley Longman Publishing Co., Inc., Boston, MA, USA

Elo S, Kyngas H (2008) The qualitative content analysis process. Journal of Ad-

vanced Nursing 62(1):107–115, DOI 10.1111/j.1365-2648.2007.04569.x

Erickson T (2000) Lingua francas for design: Sacred places and pattern languages.
In: Proceedings of the 3rd Conference on Designing Interactive Systems: Pro-
cesses, Practices, Methods, and Techniques, ACM, New York, NY, USA, DIS ’00,
pp 357–368, DOI 10.1145/347642.347794, URL http://doi.acm.org/10.1145/
347642.347794

Fanguy W (2019) A comprehensive guide to design systems. https://www.
invisionapp.com/inside-design/guide-to-design-systems/, (Accessed on Mar
23 2022)

Faulkner SL, Trotter SP (2017) Data Saturation, American Cancer So-
ciety, pp 1–2. DOI
10.1002/9781118901731.iecrm0060, URL https://
onlinelibrary.wiley.com/doi/abs/10.1002/9781118901731.iecrm0060, https:
//onlinelibrary.wiley.com/doi/pdf/10.1002/9781118901731.iecrm0060

Ferreira J, Noble J, Biddle R (2007) Agile development iterations and ui design.

In: Agile 2007 (AGILE 2007), IEEE, pp 50–58

Fessenden T (2021) Design systems 101. https://www.nngroup.com/articles/

design-systems-101/, (Accessed on Mar 23 2022)

Gharehyazie M, Posnett D, Vasilescu B, Filkov V (2015) Developer initiation and
social interactions in oss: A case study of the apache software foundation. Em-

26

Yassine Lamine, Jinghui Cheng

pirical Software Engineering 20(5):1318–1353, DOI 10.1007/s10664-014-9332-x,
URL https://doi.org/10.1007/s10664-014-9332-x

Gould JD, Lewis C (1985) Designing for usability: Key principles and what design-
ers think. Communications of the ACM 28(3):300–311, DOI 10.1145/3166.3170,
URL http://doi.acm.org/10.1145/3166.3170

Gray CM (2016) ”it’s more of a mindset than a method”: Ux practitioners’ con-
ception of design methods. In: Proceedings of the 2016 CHI Conference on Hu-
man Factors in Computing Systems, ACM, New York, NY, USA, CHI ’16, pp
4044–4055, DOI 10.1145/2858036.2858410, URL http://doi.acm.org/10.1145/
2858036.2858410

Gutzwiller RS, Espinosa SH, Kenny C, Lange DS (2018) A design pattern for work-
ing agreements in human-autonomy teaming. In: Cassenti DN (ed) Advances in
Human Factors in Simulation and Modeling, Springer International Publishing,
Cham, pp 12–24

Hacq

A

(2018)

Everything

you

about
everything-you-need-to-know-about-design-systems-54b109851969,
cessed on Mar 23 2022)

systems.

design

need

to

know
https://uxdesign.cc/
(Ac-

Hamilton A (2020) The state of design systems: 2020. https://material.io/blog/

research-state-of-design-systems-2020, (Accessed on Mar 23 2022)

Handal S, Koo C, Adelakun O (2022) Design systems implementation for dig-
ital transformation: A case study. In: Rocha ´A, Ferr´as C, M´endez Porras A,
Jimenez Delgado E (eds) Information Technology and Systems, Springer Inter-
national Publishing, Cham, pp 42–51

Heck P, Zaidman A (2017) A framework for quality assessment of just-in-time re-
quirements: the case of open source feature requests. Requirements Engineering
22(4):453–473, DOI 10.1007/s00766-016-0247-5, URL http://link.springer.
com/10.1007/s00766-016-0247-5

Hertel G, Niedner S, Herrmann S (2003) Motivation of software developers
in open source projects: an internet-based survey of contributors to the
linux kernel. Research Policy 32(7):1159 – 1177, DOI https://doi.org/10.
1016/S0048-7333(03)00047-7, URL http://www.sciencedirect.com/science/
article/pii/S0048733303000477, open Source Software Development

Huang Q, Lo D, Xia X, Wang Q, Li S (2017) Which packages would be aﬀected
by this bug report? In: 2017 IEEE 28th International Symposium on Software
Reliability Engineering (ISSRE), pp 124–135, DOI 10.1109/ISSRE.2017.24
Iivari N (2011) Participatory design in OSS development: interpretive case studies
in company and community OSS development contexts. Behaviour & Informa-
tion Technology 30(3):309–323, DOI 10.1080/0144929X.2010.503351

Joblin M, Apel S, Mauerer W (2017) Evolutionary trends of devel-
oper coordination: a network approach. Empirical Software Engineering
22(4):2050–2094, DOI 10.1007/s10664-016-9478-9, URL https://doi.org/10.
1007/s10664-016-9478-9

Kholmatova A (2017) Design Systems: A practical guide to creating design lan-

guages for digital products. Smashing Magazine

Leiva G, Maudet N, Mackay W, Beaudouin-Lafon M (2019) Enact: Reducing
designer–developer breakdowns when prototyping custom interactions. ACM
Trans Comput-Hum Interact 26(3), DOI 10.1145/3310276, URL https://doi.
org/10.1145/3310276

Understanding and Supporting the Design Systems Practice

27

Lundstr¨om M, ˚Aberg J, Blomkvist J (2015) Perceptions of software develop-
ers’ empathy with designers. In: Proceedings of the 2015 British HCI Confer-
ence, Association for Computing Machinery, New York, NY, USA, British HCI
’15, p 239–246, DOI 10.1145/2783446.2783563, URL https://doi.org/10.1145/
2783446.2783563

Ma K, Cao J (2019) Design pattern as a practical tool for designing adaptive inter-
actions connecting human and social robots. In: Karwowski W, Ahram T (eds)
Intelligent Human Systems Integration 2019, Springer International Publishing,
Cham, pp 613–617

McHugh ML (2012) Interrater reliability: the kappa statistic. Biochem Med (Za-

greb) 22(3):276–282

Merten T, Falis M, H¨ubner P, Quirchmayr T, B¨ursner S, Paech B (2016) Soft-
ware feature request detection in issue tracking systems. In: 2016 IEEE 24th
International Requirements Engineering Conference (RE), IEEE, pp 166–175
Moore RJ, Liu EY, Mishra S, Ren GJ (2020) Design systems for conversational
ux. In: Proceedings of the 2nd Conference on Conversational User Interfaces,
Association for Computing Machinery, New York, NY, USA, CUI ’20, DOI
10.1145/3405755.3406150, URL https://doi.org/10.1145/3405755.3406150
Morville P, Callender J (2010) Search Patterns: Design for Discovery. O’Reilly

Media, Inc.

Mounter D, Suarez M, Stanﬁeld R, Sylor-Miller K, Anne J (2019) Design Systems

Handbook. InVision

Nakakoji K, Yamamoto Y, Nishinaka Y, Kishida K, Ye Y (2002) Evolution pat-
terns of open-source software systems and communities. In: Proceedings of the
International Workshop on Principles of Software Evolution, ACM Press, New
York, New York, USA, p 76

Neil T (2014) Mobile Design Pattern Gallery: UI Patterns for Smartphone Apps.

O’Reilly Media, Inc.

Saldana J (2015) The coding manual for qualitative researchers, 3rd edn. Sage
Saxena R (2019) A beginner’s guide to css front-end frameworks. URL https:

//dzone.com/articles/a-beginners-guide-to-css-front-end-frameworks

Sch¨on DA (1984) The reﬂective practitioner: How professionals think in action.

Basic Books

Schrape JF (2019) Open-source projects as incubators of innovation: From niche
phenomenon to integral part of the industry. Convergence 25(3):409–427, DOI
10.1177/1354856517735795

Scott B, Neil T (2009) Designing Web Interfaces: Principles and Patterns for Rich

Interactions, 1st edn. O’Reilly Media, Inc.

Stolterman E, Pierce J (2012) Design tools in practice: Studying the designer-tool
relationship in interaction design. In: Proceedings of the Designing Interactive
Systems Conference, ACM, New York, NY, USA, DIS ’12, pp 25–28, DOI
10.1145/2317956.2317961, URL http://doi.acm.org/10.1145/2317956.2317961
Tidwell J, Brewer C, Valencia A (2020) Designing Interfaces: Patterns for Eﬀective

Interaction Design. O’Reilly Media, Inc.

Vaismoradi M, Turunen H, Bondas T (2013) Content analysis and thematic
analysis: Implications for conducting a qualitative descriptive study. Nurs-
ing & Health Sciences 15(3):398–405, DOI https://doi.org/10.1111/nhs.12048,
URL https://onlinelibrary.wiley.com/doi/abs/10.1111/nhs.12048, https://
onlinelibrary.wiley.com/doi/pdf/10.1111/nhs.12048

28

Yassine Lamine, Jinghui Cheng

Vendramini S, Belusso L, Souza FC, Souza A (2021) Towards comprise the design
system applicability: A multivocal literature mapping. In: Brazilian Symposium
on Software Quality, Association for Computing Machinery, New York, NY,
USA, URL https://doi.org/10.1145/3493244.3493260

Wang W, Arya D, Novielli N, Cheng J, Guo JLC (2020a) Argulens: Anatomy of
community opinions on usability issues using argumentation models. In: Pro-
ceedings of the 2020 CHI Conference on Human Factors in Computing Sys-
tems, Association for Computing Machinery, New York, NY, USA, CHI ’20, p
1–14, DOI 10.1145/3313831.3376218, URL https://doi.org/10.1145/3313831.
3376218

Wang W, Cheng J, Guo JC (2020b) How do open source software contributors
perceive and address usability? valued factors, practices, and challenges. IEEE
Software x(x), DOI 10.1109/MS.2020.3009514

Xia X, Lo D, Ding Y, Al-Kofahi JM, Nguyen TN, Wang X (2017) Improving
Automated Bug Triaging with Specialized Topic Model. IEEE Trans Softw Eng
43(3):272–297, DOI 10.1109/TSE.2016.2576454, URL http://ieeexplore.ieee.
org/document/7484672/

Ye Y, Kishida K (2003) Toward an understanding of the motivation open source
software developers. In: Proceedings of the 25th International Conference on
Software Engineering, IEEE Computer Society, Washington, DC, USA, ICSE
’03, pp 419–429, URL http://dl.acm.org/citation.cfm?id=776816.776867
Yew J (2019) State of design systems 2019. https://medium.com/google-design/

state-of-design-systems-2019-ff5f26ada71, (Accessed on Mar 23 2022)

Yew J, Convertino G, Hamilton A, Churchill E (2020) Design systems: A com-
munity case study. In: Extended Abstracts of the 2020 CHI Conference on
Human Factors in Computing Systems, Association for Computing Machinery,
New York, NY, USA, CHI EA ’20, p 1–8, DOI 10.1145/3334480.3375204, URL
https://doi-org.proxy3.library.mcgill.ca/10.1145/3334480.3375204

Zhang X, Wakkary R (2014) Understanding the role of designers’ personal ex-
periences in interaction design practice. In: Proceedings of the 2014 Confer-
ence on Designing Interactive Systems, ACM, New York, NY, USA, DIS ’14,
pp 895–904, DOI 10.1145/2598510.2598556, URL http://doi.acm.org/10.1145/
2598510.2598556

