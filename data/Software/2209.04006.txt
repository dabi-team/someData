What is Software Supply Chain Security?

Marcela S. Melara
Intel Labs
Hillsboro, OR
marcela.melara@intel.com

Mic Bowman
Intel Labs
Hillsboro, OR
mic.bowman@intel.com

2
2
0
2

p
e
S
8

]

R
C
.
s
c
[

1
v
6
0
0
4
0
.
9
0
2
2
:
v
i
X
r
a

ABSTRACT
The software supply chain involves a multitude of tools and pro-
cesses that enable software developers to write, build, and ship
applications. Recently, security compromises of tools or processes
has led to a surge in proposals to address these issues. However,
these proposals commonly overemphasize speciﬁc solutions or con-
ﬂate goals, resulting in unexpected consequences, or unclear posi-
tioning and usage.

In this paper, we make the case that developing practical solu-
tions is not possible until the community has a holistic view of
the security problem; this view must include both the technical
and procedural aspects. To this end, we examine three use cases to
identify common security goals, and present a goal-oriented tax-
onomy of existing solutions demonstrating a holistic overview of
software supply chain security.

CCS CONCEPTS
• Software and its engineering → Risk management.

KEYWORDS
software supply chain security; goals; tooling; process

1 INTRODUCTION
Applications today are built through a complex software supply
chain that involves a multitude of technical and procedural aspects:
ﬁrst-party source code, third-party dependencies, source control
processes, build and packaging tools, package management ser-
vices. Amid high-proﬁle attacks [5, 7, 8, 12, 23] that take advan-
tage of weaknesses and user error in the software supply chain,
software developers are now focusing on addressing security.

As diﬀerent parties rely on various components and processes,
their domain-speciﬁc security requirements give rise to a plethora
of security use cases. For instance, a software engineer may want
to know that an open source library they downloaded from a pack-
age management service, such as apt or the Python Package Index
(PyPI), to integrate into their product was created by the expected
developer from the source ﬁles and dependencies listed in the li-
brary’s code repository.

Status Quo. We observe two key challenges as diﬀerent communi-
ties seek to address this problem. First, inconsistent or incomplete
threat modeling leads to overemphasizing one particular approach
to software supply chain security without considering compound-
ing factors that impact risk.

For example, the recent push by PyPI to require two-factor au-
thentication for updates to popular python packages [21] was in-
tended to protect developers and users against malicious software
updates due to account compromise. However, this emphasis on

hardening user authentication did not take into account the pro-
cedural onus on developers and possible consequences: one devel-
oper’s decision to bypass the requirements [15] impacted hundreds
of dependent packages [33].

Second, despite the vast range of security requirements, busi-
ness processes and existing tooling, many projects attempt to pro-
vide a single solution that conﬂates multiple objectives. One exam-
ple is the Security Levels for Software Artifacts (SLSA) [25] frame-
work for quantiﬁable metrics that indicate diﬀerent levels of soft-
ware artifact integrity.

To enable users to achieve these metrics, SLSA provides a data
format for capturing information about the build process of a soft-
ware package. However, in doing so, SLSA shares similarities with
software bill of materials (SBOM) proposals (e.g., [28]) that aim to
capture information about the constituents of a software package.
Thus, this approach has led to uncertainty about the positioning,
functionality and usage of SLSA [14, 17].

Our position. Developing practical solutions for software supply
chain security is not possible until security experts and software
developers take a holistic view of the security problem space. This
view must include both the technical and procedural aspects, al-
lowing them to articulate concrete security goals.

We refer to any software- or hardware-based tools, online ser-
vices, and data used in the creation of a software artifact as techni-
cal aspects. By procedural aspects, we mean the manner in which
an individual or organization performs all the tasks necessary to
create a software artifact. These tasks may be automated through
the use of technology, such as a CI/CD service for unit testing, or
manual, such as writing a conﬁguration ﬁle for the CI/CD service.
Prior work [6] provides a set of high-level common categories
and abstractions used in many software supply chain security projects
today. However, this work focuses primarily on categorizing a list
of existing tools, and does not disentangle the programmer or busi-
ness practices aﬀected by the usage of these tools.

Our contributions. We demonstrate a holistic view of software
supply chain security by studying three representative use cases
and deriving a set of common security goals in three main prob-
lem areas: trust establishment, the development of resilient tools,
and resilient processes. These goals then allow us to build a goal-
oriented taxonomy for a sample of existing solutions that provides
a ﬁrst overview of overlap and gaps in current eﬀorts.

2 IDENTIFYING HOLISTIC SECURITY GOALS
To derive a set of holistic software supply chain security goals, we
study three use cases that highlight diﬀerent security concerns,
processes, and technical requirements.

1

 
 
 
 
 
 
2.1 Case Studies

Use Case 1. A software engineer is writing a Python package,
which in turn includes a few open-source native and Python li-
braries. She knows that the source code for these libraries is hosted
on repositories on GitHub. However, because she downloads the
built libraries from package manager services apt and PyPI, she
wants to be sure that these libraries were created by the expected
developers from the source ﬁles and dependencies listed in the
packages’ corresponding code repositories.

In this scenario, the software engineer has two primary secu-
rity concerns regarding the libraries she downloads: an attacker
uploaded a malicious version of a library replacing the version cre-
ated by the legitimate author, and unexpected code was included
in a library possibly introducing security vulnerabilities.

As such, the concrete security goals are:

(1) Verify that the downloaded library was indeed uploaded by

the expected developer.

(2) Verify that the open-source code repository was not tam-

pered with by an untrusted entity.

(3) Verify that the expected source materials were used to cre-

ate the downloaded library.

We observe a number of technical and procedural aspects of the
software supply chain within these security goals. The identity of
a software developer and software components of an artifact in
goals (1) and (3) are technical aspects, whereas source control, code
contribution and build in goals (2) and (3) are procedural aspects.
What these three security goals have in common is that they
seek to establish trust in the software supply chain by verifying in-
formation about the participants or processes involved in the cre-
ation of an artifact.

Use Case 2. A sysadmin for a bank is set to deploy the new cloud-
based banking application. Even though this banking application
was developed in-house, the application was built and tested using
a third-party CI/CD service, such as Travis CI. Before deployment,
the sysadmin needs to ensure that the application was built using
the expected build process, and does not contain code vulnerabili-
ties that may reveal sensitive customer data.

The sysadmin in this use case is concerned with the threat of a
vulnerable build process that may output insecure code, as well as
vulnerable code that could leak data, either through programmer
error or compromised dependencies.

Thus, we identify ﬁve security goals:

(1) Verify that the build process followed the expected steps.
(2) Ensure that the build tools do not contain vulnerabilities.
(3) Ensure that the ﬁrst-party application does not contain data

leak vulnerabilities.

(4) Identify all third-party dependencies.
(5) Ensure that the third-party dependencies do not contain vul-

nerabilities.

Marcela S. Melara and Mic Bowman

At their core, these security goals are concerned with establish-
ing the trustworthiness of processes and software artifacts, and the
use of resilient tools and hardened processes.

Use Case 3. Three hospitals seek to collaborate using federated
machine learning to train a shared model for medical imaging clas-
siﬁcation. They do so by aggregating results from a locally-run
learning algorithm based on conﬁdential patient data, which is
shipped to them as a self-contained Docker image. Before joining
the collaborative eﬀort, the participants want to ensure they will
all be running the same container for the agreed-upon algorithm.
In this use case, the participants are concerned that the machine
learning model will be corrupted, or that conﬁdential data will be
leaked, as a result of a container that has been tampered with.

As such, the participants have three security goals:

(1) Verify that the build process was not tampered with.
(2) Verify that the container includes the expected code.
(3) Ensure that the algorithm code behaves as expected.

Goal (1) in this scenario touches on a procedural aspect of the
software supply chain, the container packaging process; the in-
tegrity of an artifact and ensuring correct code behavior in goals
(2) and (3) constitute technical aspects.

Although the speciﬁc procedural and technical aspects in this
use case are diﬀerent than in the previous use cases, ultimately,
these security goals aim to establish trust in a process and the re-
sulting software artifacts.

2.2 Security Goals
Our analysis in §2.1 reveals three overarching areas that software
supply chain seeks to address: (1) trust establishment, (2) resilient
tools, and (3) resilient processes. Based on the concrete goals for
each use case, we derive common software supply chain security
goals within each area.

(1) Trust Establishment Goals:

• Verify the identity of a participant
• Verify the components of an artifact
• Verify properties or behavior of an artifact
• Verify properties of a process

(2) Resilient Tools Goals:

• Identify vulnerabilities in an existing tool
• Deploy high-assurance tools

(3) Resilient Process Goals:

• Implement a process that reduces an attack surface
• Automate an error-prone manual process

3 CURRENT SOLUTIONS: A GOAL-ORIENTED

TAXONOMY

Goals (1) and (4) have procedural aspects related to the build
process as a whole and dependency tracking. The technical aspects
in these goals include the tools and services used throughout the
build process, as well as the properties of ﬁrst- and third-party bi-
nary artifacts in goals (2), (3) and (5).

The goals articulated in 2.2 allow us to identify speciﬁc require-
ments and tools needed to achieve these goals. Speciﬁcally, achiev-
ing the resilient tool goals requires techniques that aid software
supply chain tool developers in detecting vulnerabilities, or enable
the creation of creation of high-assurance tools, such as formal

2

What is Software Supply Chain Security?

Table 1: Solution requirements to achieve software supply chain security trust establishment goals.

Example

Trust Data Capture

Policy Deﬁnition

Data
Distribution

Data Veriﬁcation

Identity

Artifact
Components

Artifact
Behavior

Process
Properties

Policy
Format

Policy
Generation

Trust Data
Authentication

Trust Data
Validation

SPIFFE/SPIRE [32]
SPDX [28]
in-toto [34]
CDI [16]
SLSA [25, 26]
OPA [19]
Nuclei [20]
Sigstore [24]

veriﬁcation, language-based techniques, or hardware-based hard-
ening.

Addressing the resilient process goals requires instituting pro-
cesses that reduce speciﬁc risks either through new dedicated pro-
cesses or security features provided by software supply chain ser-
vices. To automate error-prone manual processes, dedicated tool-
ing that handles a speciﬁc process on behalf of the developer is
needed.

Accomplishing all trust establishment goals requires capturing
information about identities, artifacts and software supply chain
processes in a veriﬁable representation, as well as enabling veri-
ﬁers to express and generate trust policies, and building tools that
can disseminate or evaluate this information based on a given pol-
icy.

Given these speciﬁc requirements, we provide a holistic, goal-
oriented classiﬁcation of well-known examples in today’s solution
space. As such, our taxonomy does not cover an exhaustive list
of existing software supply chain tools and processes. Tables 1, 2,
and 3 summarize our goal-oriented taxonomy for the trust estab-
lishment, resilient tools, and resilient process goals, respectively.

Taxonomy Insights. Our taxonomy reveals opportunities for growth
to address tool and process resilience. Within the high-assurance
tools space in particular, we believe that building more formally
veriﬁed tools, as well as language-based and hardware-based tech-
niques (e.g., trusted execution [3, 13]), can have signiﬁcant impact.
For process resilience, we see a need for developing both new pro-
cesses that reduce risk, such as code security reviews, and tools to
automate these processes to ease adoption.

We also observe a trend towards conﬂation in the trust establish-
ment solution space regarding trust data capture and veriﬁcation.
This trend may be due to disparate data formats that capture dif-
ferent trust data. To address this conﬂation, we see a potential for
more interoperable data formats and general veriﬁcation solutions.

4 CONCLUSION
Understanding the complex set of software development technolo-
gies as well as engineering practices that impact the security of
a software supply chain, will enable the community to more ef-
fectively address classes of use cases and identify the gaps not ad-
dressed by current proposals. Ultimately, our goal is to spur deeper
analysis of real use cases and existing proposals, and to encourage

Table 2: Solution requirements to achieve software
supply chain security resilient tool goals.

Example

Tool
Vulnerability
Detection

High-Assurance Tools

Formal
Veriﬁcation

Language-
Based
Hardening

Hardware-
Based
Hardening

IFuzzer [36]
Prog-Fuzz [35]
GWChecker [2]
CompCert [27, 29]
rustc [31]
VM isolation [11]
TEE [16]

Table 3: Solution requirements to achieve software
supply chain security resilient process goals.

Example

Risk Reduction Processes

Process
Automation

Dedicated
Processes

Service
Security
Features

SDL practices [18]
Reproducible Builds [1, 22]
GitHub roles [9]
PyPI 2FA [21]
dependabot [10]
DataFlowSanitizer [30]
CodeGuru [4]

consensus and collaboration within the software supply chain se-
curity community.

REFERENCES
[1] 2021. Reproducible Builds. https://reproducible-builds.org/, retrieved Jan 2020.
[2] 2022. Characterizing the Security of Github CI Workﬂows. In 31st USENIX
Security Symposium (USENIX Security 22). USENIX Association, Boston, MA.
https://www.usenix.org/conference/usenixsecurity22/presentation/koishybayev
[3] Advanced Micro Devices, Inc. [n.d.]. AMD Secure Encrypted Virtualization

(SEV). https://developer.amd.com/sev/.

[4] Amazon Web

Services,

Inc.

[n.d.].

Amazon

CodeGuru.

https://aws.amazon.com/codeguru/, retrieved Jul 2022.

[5] Apache

Software

Foundation.

[n.d.].

CVE-2021-44832.

https://nvd.nist.gov/vuln/detail/CVE-2021-44832, retrieved Jul. 2022.
Analysis

[6] Aeva Black.

supply

[n.d.].

the

of

chain landscape.

https://github.com/AevaOnline/supply-chain-synthesis, retrieved Jul 2022.

3

Denbraver.

2019.
in

typo-squatting

to
[7] Hayley
be
SynkBlog.
https://snyk.io/blog/malicious-packages-found-to-be-typo-squatting-in-pypi/
Solar-
to Compromise Multiple Global Victims
- Threat Research.

Evasive Attacker

Leverages

Malicious

packages

Package

Python

Index.

Chain

found

Highly

2020.
Supply

[8] FireEye.
Winds
With SUNBURST Backdoor.
https://www.ﬁreeye.com/blog/threat-research/2020/12/evasive-attacker-leverages-solarwinds-supply-chain-compromises-with-sunburst-backdoor.html
GitHub.

https://github.com/kpcyrd/rebuilderd, retrieved Jul 2022.
left-pad, and npm.

https://pypi.org/security-key-giveaway/, retrieved Jul 2022.

https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm

[23] Isaac Z. Schlueter. 2016.

[22] rebuilderd

FireEye Blogs

contributors.

[9] GitHub,

Permissions

Access

[n.d.].

[n.d.].

kik,

Inc.

on

rebuilderd(1).

The npm Blog.

Marcela S. Melara and Mic Bowman

[20] Project Discovery. [n.d.]. Nuclei - Community Powered Vulnerability Scanner.

https://nuclei.projectdiscovery.io/, retrieved Jul 2022.

[21] Python Software Foundation. 2022.

PyPI 2FA Security Key Giveaway.

https://docs.github.com/en/get-started/learning-about-github/access-permissions-on-github,
retrieved Jul 2022.
[10] GitHub, Inc. [n.d.].

Identifying vulnerabilities in your project’s dependencies
with Dependabot alerts. https://docs.github.com/en/code-security/dependabot,
retrieved Jul 2022.

2022.

[11] Volker Gruhn, Christoph Hannebauer, and Christian John. 2013. Security of
Public Continuous Integration Services. In Proceedings of the 9th International
Symposium on Open Collaboration (Hong Kong, China) (WikiSym ’13). Asso-
ciation for Computing Machinery, New York, NY, USA, Article 15, 10 pages.
https://doi.org/10.1145/2491055.2491070
2022.

How We Discovered Vulnerabilities

[12] Alex

Ilgayev.

in
Cycode Blog.

CI/CD Pipelines of Popular Open-Source Projects.
https://cycode.com/blog/github-actions-vulnerabilities/

[24] Sigstore contributors. [n.d.]. Sigstore. https://docs.sigstore.dev/, retrieved Jul

[25] SLSA contributors. [n.d.]. SLSA Provenance. https://slsa.dev/provenance/v0.2,

retrieved Jul 2022.

[26] SLSA contributors. [n.d.].

SLSA Veriﬁcation Summary Attestation (VSA).

https://slsa.dev/veriﬁcation_summary/v0.1, retrieved Jul 2022.

[27] Youngju Song, Minki Cho, Dongjoo Kim, Yonghyun Kim, Jeehoon Kang, and
Chung-Kil Hur. 2019. CompCertM: CompCert with C-Assembly Linking and
Lightweight Modular Veriﬁcation. Proc. ACM Program. Lang. (dec 2019).
[28] SPDX contributors. [n.d.]. SPDX Overview. https://spdx.dev/about/, retrieved

Jul 2022.

[29] Gordon Stewart, Lennart Beringer, Santiago Cuellar, and Andrew W. Appel. 2015.

Compositional CompCert (POPL ’15).

[13] Intel Corporation. [n.d.].

Intel® Software Guard Extensions (Intel® SGX).

[30] The

Clang

Team.

[n.d.].

DataFlowSanitizer.

https://software.intel.com/en-us/sgx.

https://clang.llvm.org/docs/DataFlowSanitizer.html, retrieved Jul 2022.

[31] The

[n.d.].
https://doc.rust-lang.org/rustc/what-is-rustc.html, retrieved Jul 2022.

Team.

What

Rust

is

rustc?

[32] The

SPIFFE

authors.

[n.d.].

SIFFE

Overview.

https://spiﬀe.io/docs/latest/spiﬀe-about/overview/, retrieved Jul 2022.

[33] Tidelift,

Inc.

2022.

atomicwrites

-

project

statistics.

https://libraries.io/pypi/atomicwrites, retrieved Aug 2022.

[34] Santiago Torres-Arias, Hammad Afzali, Trishank Karthik Kuppusamy, Reza
Curtmola, and Justin Cappos. 2019. in-toto: Providing farm-to-table guarantees
for bits and bytes. In USENIX Security ’19.

[35] Vegard Nossum. 2018. Program fuzzer. https://github.com/vegard/prog-fuzz,

retrieved Jul 2022.

[36] Spandan Veggalam, Sanjay Rawat, Istvan Haller, and Herbert Bos. 2016. IFuzzer:
An Evolutionary Interpreter Fuzzer Using Genetic Programming. In Computer
Security – ESORICS 2016.

[14] Mark Lodato. 2022. How does SLSA ﬁt into broader supply chain security?

https://github.com/slsa-framework/slsa/issues/276, retrieved Aug 2022.

[15] Markus Unterwaditzer. 2022. atomicwrites’ old versions have been purged from
https://github.com/untitaker/python-atomicwrites/issues/61, retrieved

pypi.
Aug 2022.

[16] Marcela S. Melara and Mic Bowman. 2021. Hardware-Enforced Integrity and
Provenance for Distributed Code Deployments. In NIST Workshop on Enhancing
Software Supply Chain Security.

[17] Melba Lopez. 2022. Positioning SIG: Assess additional frameworks in relation to

[18] Microsoft.

SLSA. https://github.com/slsa-framework/slsa/issues/452, retrieved Aug 2022.
practices?
are
https://www.microsoft.com/en-us/securityengineering/sdl/practices, retrieved
Sep 2020.

the Microsoft

[n.d.].

What

SDL

[19] Open

Policy

Agent

contributors.

[n.d.].

Introduction.

https://www.openpolicyagent.org/docs/latest/, retrieved Jul 2022.

4

