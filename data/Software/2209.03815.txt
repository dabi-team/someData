2
2
0
2

p
e
S
8

]
E
S
.
s
c
[

1
v
5
1
8
3
0
.
9
0
2
2
:
v
i
X
r
a

Presentation: SymDefFix - Sound Automatic Repair Using
Symbolic Execution
Tareq Mohammed Nazir and Martin Pinzger
Universit√§t Klagenfurt
Klagenfurt, Carinthia, Austria
{tareq.nazir,martin.pinzger}@aau.at

ABSTRACT
In this presentation, we introduce our constraint-based repair ap-
proach, called SymDefFix. SymDefFix is based on ExtractFix [3]
and replaces the dynamic analysis steps of ExtractFix to detect
the error and find the potential fix locations in an input program
with symbolic execution. We first briefly motivate and introduce
our modifications of ExtractFix, and then demonstrate it with an
example.

1 INTRODUCTION
Fixing software bugs and vulnerabilities in programs is a time con-
suming task that researchers try to automate. During the last decade
they proposed several approaches to address this issue. Most of
them are based on executing a test suite to detect a bug or vulner-
ability and synthesize a patch for it [4, 4‚Äì12]. These approaches
suffer from the problem of generating low-quality patches that
over-fit the given test suite. ExtractFix [3] is an approach that ad-
dresses the over-fitting problem via symbolic reasoning. It uses
sanitizers to extract the underlying cause of a vulnerability and
uses that information to first find potential fix locations and then to
generate a patch at each location. However, ExtractFix relies on the
information from executing one test case that triggers the bug. In a
first manual evaluation, we found that this limits the capabilities of
ExtractFix and led us to the following research hypothesis:

We can use symbolic execution to obtain more complete
information ‚ÅÄabout the bug and use that information to find
more accurate ‚ÅÄfix locations and generate more accurate
patches.

In the following sections, we briefly present our modifications
of ExtractFix and showcase our approach, that we call SymDefFix,
with an example.

2 SYMBOLICALLY DEFINED FIX (SYMDEFFIX)
ExtractFix reads a C program, instruments it with a sanitizer, and
then executes the given test case to generate a crash. When a crash
occurs, the sanitizer outputs the crash location and the constraint
that was found by the sanitizer to be violated, called the crash-free
constraint (CFC). In addition, it records a call trace to the function in
which the crash occurs. Next, using the CFC and the trace recorded
for the failing test case, it identifies potential fix locations using
control and data flow analysis. Then, it propagates the CFC to each
fix location and, finally, it generates a patch that complies with the
CFC at each fix location. For more information on ExtractFix, we
refer the reader to [3].

We tried ExtractFix on several examples, provided with the Ex-
tractFix tool, and adapted from the SV-COMP1 benchmark with a
focus on samples from the memsafety category. Through that, we
found two main limitations of ExtractFix: first, developers need to
provide a test case that triggers the error; second, only the trace
that leads to the error is considered for finding the fix locations.
The latter ignores cases in which multiple traces (i.e paths) might
lead to the error.

In our approach, called SymDefFix, we address both shortcom-
ings by using a static formal verification tool to detect the error(s)
considering all potential program paths. Figure 1 presents our ap-
proach highlighting our modifications of the original ExtractFix. In
particular, we replace ExtractFix‚Äôs step to extract the CFC and the
execution trace with Symbiotic [2]. Symbiotic is a framework for
static program analysis and verification that uses KLEE. As shown
on the left side of Figure 1 Symbiotic first instruments and slices the
code and then it symbolically executes the remaining code using
KLEE to detect any errors that exist in the code. The usage of KLEE
as part of Symbiotic is illustrated in detail in [2].

We modified the KLEE implementation inside Symbiotic to out-
put three types of information: a) crash free constraints (CFC); b)
trace information, and c) path to the source file instrumented by
Symbiotic. The CFC and the trace information are the same as
output by ExtractFix, but this time determined using symbolic exe-
cution. In contrast to ExtractFix, our approach explores all possible
paths and consequently finds all paths that can lead to the error
plus the corresponding CFC. All three outputs are then provided to
the original ExtractFix to find the candidate fix locations and the
weak preconditions. These two inputs then are provided to program
synthesis tool EUSolver [1] that, for each fix location, generates a
valid patch that satisfies the CFC under all inputs.

3 EXAMPLE
We demonstrate the feasibility of our approach with the heap-
overflow example shown in Figure 2. Note, instead of reading the
command line argument, which is used by ExtractFix‚Äôs test case,
we hard coded the size of content variable to be 10. Furthermore
note, in the current version of SymDefFix, we are using Extract-
Fix‚Äôs Global Malloc size instrumentor (GSInserter) that introduces
a global variable to represent the size of the memory allocated
with malloc.Analyzing this example with SymDefFix, Symbiotic
correctly detects an error at line 19 and outputs:

CFC: ùëéùëêùëêùëíùë†ùë† (ùëèùë¢ ùëì ùëì ùëíùëü ) < ùëèùëéùë†ùëí (ùëèùë¢ ùëì ùëì ùëíùëü ) + ùë†ùëñùëßùëí (ùëèùë¢ ùëì ùëì ùëíùëü )
Trace: ["IN, "main"]
Path: ../tmp/output.txt

1https://sv-comp.sosy-lab.org/2021/results/results-verified/

 
 
 
 
 
 
KLEE 2022, Sept 15‚Äì16, 2022, London, UK

Tareq Mohammed Nazir and Martin Pinzger

Figure 1: Overview of the SymDefFix approach.

4 FUTURE DIRECTION AND GOALS
Currently, we only consider the information from one symbolically
executed path to determine the fix locations and generate patches.
As a next step, we want to consider all paths explored by KLEE
(inside Symbiotic) for this step to further investigate our hypoth-
esis stated in the introduction. Furthermore, we will extend our
approach to consider more error types, such as divide-by-zero.

REFERENCES
[1] Rajeev Alur, Arjun Radhakrishna, and Abhishek Udupa. 2017. Scaling enumer-
ative program synthesis via divide and conquer. In International Conference on
Tools and Algorithms for the Construction and Analysis of Systems. Springer, Berlin,
Heidelberg, 319‚Äì336.

[2] Marek Chalupa, Martin Jon√°≈°, Jiri Slaby, Jan Strejƒçek, and Martina Vitovsk√°. 2016.
Symbiotic 3: New slicer and error-witness generation. In International Conference
on Tools and Algorithms for the Construction and Analysis of Systems. Springer,
Springer, Eindhoven, The Netherlands, 946‚Äì949.

[3] Xiang Gao, Bo Wang, Gregory J Duck, Ruyi Ji, Yingfei Xiong, and Abhik Roy-
choudhury. 2021. Beyond tests: Program vulnerability repair via crash constraint
extraction. ACM Transactions on Software Engineering and Methodology (TOSEM)
30, 2 (2021), 1‚Äì27.

[4] Xuan-Bach D Le, Duc-Hiep Chu, David Lo, Claire Le Goues, and Willem Visser.
2017. JFIX: semantics-based repair of Java programs via symbolic PathFinder.
In Proceedings of the International Symposium on Software Testing and Analysis
(ISSTA). ACM, New York,United States, 376‚Äì379.

[5] Claire Le Goues, ThanhVu Nguyen, Stephanie Forrest, and Westley Weimer. 2011.
Genprog: A generic method for automatic software repair. IEEE Transactions on
Software Engineering (TSE) 38, 1 (2011), 54‚Äì72.

[6] Fan Long and Martin Rinard. 2016. Automatic patch generation by learning
correct code. In Proceedings of the ACM SIGPLAN-SIGACT Symposium on Principles
of Programming Languages. ACM, Mumbai India, 298‚Äì312.

[7] Sergey Mechtaev, Xiang Gao, Shin Hwei Tan, and Abhik Roychoudhury. 2018.
Test-equivalence analysis for automatic patch generation. ACM Transactions on
Software Engineering and Methodology (TOSEM) 27, 4 (2018), 1‚Äì37.

[8] Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. 2015. Directfix: Looking
for simple program repairs. In Proceedings of the International Conference on
Software Engineering (ICSE), Vol. 1. IEEE, Florence, Italy, 448‚Äì458.

[9] Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. 2016. Angelix: Scalable
multiline program patch synthesis via symbolic analysis. In Proceedings of the
International Conference on Software Engineering (ICSE). ACM, Austin Texas,
691‚Äì701.

[10] Hoang Duong Thien Nguyen, Dawei Qi, Abhik Roychoudhury, and Satish Chan-
dra. 2013. Semfix: Program repair via semantic analysis. In Proceedings of the
International Conference on Software Engineering (ICSE). IEEE, San Francisco, CA,
USA, 772‚Äì781.

[11] Yuhua Qi, Xiaoguang Mao, Yan Lei, Ziying Dai, and Chengsong Wang. 2014. The
strength of random search on automated program repair. In Proceedings of the
International Conference on Software Engineering. ACM, Hyderabad, 254‚Äì265.
[12] Jifeng Xuan, Matias Martinez, Favio Demarco, Maxime Clement, Sebastian Lame-
las Marcote, Thomas Durieux, Daniel Le Berre, and Martin Monperrus. 2016.
Nopol: Automatic repair of conditional statement bugs in java programs. IEEE
Transactions on Software Engineering (TSE) 43, 1 (2016), 34‚Äì55.

Figure 2: Heap-Overflow example highlighting the crash
and candidate fix location.

The example violates the CFC in line 19 when it assigns the sixth
element of content to buffer, because the size of the buffer is
only five bytes. This information is then provided to ExtractFix that
determines the potential fix locations and uses the EUSolver[1] to
generate the patch(es). The patch for this example is presented in
Listing 1. It modifies the condition in the for loop at line 19 adding
the boundary condition of the heap size that is stored in the variable
"GLOBAL_MS__heap_overflow__malloc_7".

Listing 1: Generated Patch

( i ;

i < s i z e o f ( c o n t e n t ) ;

‚àí f o r
‚àí‚àí‚àí
( i ; ( ( ( i ) < s i z e o f ( c o n t e n t ) ) & & ( ( i ) <
+ f o r
( GLOBAL_MS__heap_overflow__malloc_7 ) ) ) ;
i + +)

i ++ )

Bug-Heap-overflow.cSymbiotic  1) CFC2) TraceInformation  3) Path tosource code GeneratedPatch KLEEEngine InstrumentationProgramSlicerExtract Fix Fixlocation(LLVMPass)KLEE  EngineProgramSynthesis tool(EUSovler)Global MallocsizeinstrumentorGS Inserter makes the malloc sizeglobal for generating the patchFix locationCrashLocation