helyOS: A customized off-the-shelf solution for autonomous driving
applications in delimited areas

Carlos Viol Barbosa∗, Nikolay Belov, Felix Keppler, Julius Kolb, Gunter Nitzsche and Sebastian Wagner

Fraunhofer Institute for Transportation and Infrastructure Systems IVI, Zeunerstraße 38, 01069 Dresden, Germany

2
2
0
2

n
u
J

1

]
E
S
.
s
c
[

1
v
4
0
5
0
0
.
6
0
2
2
:
v
i
X
r
a

Abstract—Microservice Architectures (MSA), known to suc-
cessfully handle complex software systems, are emerging as the
new paradigm for automotive software. The design of an MSA
requires correct subdivision of the software system and imple-
mentation of the communication between components. These
tasks demand both software expertise and domain knowledge.
In this context, we developed an MSA framework pre-tailored
to meet the requirements of autonomous driving applications in
delimited areas - the helyOS framework. The framework decom-
poses complex applications in predeﬁned microservice domains
and provides a communication backbone for event messages
and data. This paper demonstrates how such a tailored MSA
framework can accelerate the development by prompting a quick
start for the integration of motion planning algorithms, device
controllers, vehicles simulators and web-browser interfaces.

Index Terms—Yard automation, autonomous driving, helyOS,

microservices

I. INTRODUCTION

Autonomous driving and ﬂeet management are complex
applications at the intersection of multiple technologies. These
ﬁelds have become important within the last years and
prompted many researches focused on motion planners
[1,
2], cooperative driving [3], platoon formation control [4], 3D
mapping [5] and artiﬁcial intelligence [6]. A promising sub-
ﬁeld of autonomous driving, which can already lead to func-
tional implementations today, is the automation of vehicles
(AV) in delimited areas. By delimited area we refer to areas
closed for general trafﬁc where an automated vehicle can only
meet other automated vehicles or vehicles operated by in-
structed personnel. This concept can be applied in sea harbors,
airports, factories, logistics centers, agricultural ﬁelds [7], etc.
A common feature in those applications is the existence of
tasks or missions to be executed by automated vehicles.

Combining different technologies to enable automatons to
perform missions is challenging [8]. Most frequently, such
projects deal with numerous partners from different domains;
decisions about how to interface and coordinate different
software and hardware systems consume a great deal of time.
Microservice architecture (MSA) has been suggested [9, 10]
as a strategy to overcome such integration hassles. MSA has
been successfully applied to create ﬂexible, maintainable, and
scalable information systems. Regarding automotive software
systems, MSA has several advantages [10]: (i) reuse of func-
tionality, (ii) encapsulated and independent service behavior,
(iii) continuous service integration, (iv) hierarchical in-vehicle

∗violbarbosa@ivi.fraunhofer.de

Fig. 1. Logistics yard in the AutoTruck project.

function and software architecture, (v) ﬂexible service distri-
bution to electronic control units (ECUs) or cloud servers,
(vi) modular software design is easier to understand than big
opaque monoliths.

The use of microservices, however, has the potential risks
of adding too much granularity to the application and overlaps
between domain boundaries, which hinder system mainte-
nance. Avoiding these pitfalls demands knowledge and ex-
perience from the developers. In this context, we developed
helyOS (highly efﬁcient online yard Operating System) as an
MSA framework designed for autonomous driving in delimited
areas. Our approach mitigates the MSA risks by providing a
framework with pre-deﬁned data ﬂow rules and boundaries
between common domains in AV: mission data processing,
task assignment control, mission execution, geo-map process-
ing and user interface.

In association with rabbitMQ [11], helyOS also provides a
communication backbone for exchanging data and events. The
registration of the system entities (microservices, automatons,
maps and mission descriptions) is performed via a graphic
admin interface. The system is therefore easy tailored to a
desired application and most of the development efforts can
be focused on the automatons and end-user features.

In the present paper, we ﬁrstly give some background
information and an overview of the helyOS architecture
(Sec. II and III), then describe how helyOS handles different
microservices to compose and distribute the assignments to
the robots (Sec. IV). Finally, we present several scenarios of
yard automation covered by helyOS (Sec. V). Furthermore,
in our conclusion (Sec. VI), we list ongoing projects that are
already making use of the helyOS architecture.

 
 
 
 
 
 
Fig. 2. helyOS system overview. The helyOS Control Tower (HCT) is simultaneously used as backend for User Apps, as microservice controller to coordinate
external services, and as a mission dispatcher to cast assignments to Agents. The helyOS Agent Core (HAC) handles the execution of the mission assignments
by the automated tool. helyOS is an event-driven architecture using HTTP, WebSocket and AMQP protocols.

II. BACKGROUND

The employment of modular monolithic systems is a com-
mon practice in automotive software. Modular systems are
certainly able to comply with domain-driven-design (DDD)
concepts [12], however, the ﬁnal integration is strongly condi-
tioned by the linking or compiling of each code package into
the application deployment. In large projects, where profes-
sionals of different technical backgrounds and organizations
must collaborate,
the solely use of a modular monolithic
approaches will impose restrictions on the development.

Microservices, on the other hand, allow software integration
independent of programming language or hardware. Since
gateways for web applications and cloud computation can
be easily deﬁned, MSA provides outsourcing opportunities
not present in monolithic modular systems. Indeed, helyOS
originated from the necessity of employing computationally
demanding motion planning algorithms running in the cloud
for the automation of a logistics yard (Fig. 1) within the
AutoTruck project [13]. In combination with Docker con-
tainerization, the microservice approach has improved the de-
velopment workﬂow thanks to a clearer separation of concerns
and the interoperability of software components independent
of computer platforms. Since then, the helyOS framework has
been shaped throughout several projects to be applicable to a
broader class of automation problems in which mobile robots
perform actions assigned by a central control tower.

III. HELYOS ARCHITECTURE

An application built on helyOS architecture is composed
of two main parts: helyOS Control Tower (HCT) and helyOS
Agent Core (HAC). The HCT is stationary, whereas the HAC
is installed in the tools or moving actors: robots, vehicles or
other machines. In this manuscript, these tools are referred

to as ”agents”. Both the HCT and the HAC have a general-
purpose architecture and project speciﬁcities are supplied by
microservices and operation modules. The microservices are
used for motion planning, cooperative driving, map updates,
etc. The operation modules are responsible for the vehicle
automation tasks.

helyOS Control Tower (HCT), shown on the center panel
of Fig. 2, performs the high-level logic for yard automation.
The data ﬂow is driven by the message broker (rabbitMQ)
and database events;
these events are used to orchestrate
the microservices and dispatch assignments. A request for
a mission, initiated either by the user app or an automaton,
triggers calls of microservices of different functionalities. The
response from the microservices will compose the assignment
data that will be delivered to the targeted agent via rabbitMQ.
HCT consists of an internal database and backend. The
database is implemented in Postgres [14], an open source
object-relational database management system. The backend
gives access to the database by employing Postgraphile [15],
an implementation of GraphQL [16] that dynamically adapts to
changes in the Postgres schema. This means that new columns
and tables included in the database are automatically available
to the application frontend without extra code in the backend.
The HCT backend is implemented in NodeJs and run from a
Docker container.

The HCT backend is responsible for the agent registration,
agent monitoring, sensor logging, microservices orchestration,
assignment dispatching and the storage of the yard state data.
It supplies a gateway for user interfaces for sending commands
and retrieving data via HTTP and WebSocket. The HCT also
provides a convenient graphical interface served locally for
conﬁguration purposes; the helyOS dashboard. This means that
the system developer/administrator can use a web browser to
conﬁgure the backend.

Fig. 3. Microservices in the helyOS framework: The upper panel shows the helyOS dashboard, where the microservices are registered. Note that each
microservice is registered under a speciﬁc software domains (see column Domain). The bottom panel illustrates the connection of the microservices of
different domains and the HCT. The Assignment planners microservices process the request data to create assignments. The microservices in Map servers are
used to updated the geo-map information in the helyOS database. In Storage servers, the microservices are employed to export/backup the yard data. Finally,
the Automaton domain includes all microservices directly accessible by the agents and independent from the helyOS control tower.

helyOS Agent Core (HAC), shown on the right panel of
Fig. 2, handles the execution of the assignments by the
automated tool, which can be a vehicle, a camera, an external
sensor or any other actor on the yard. The HAC subscribes
to rabbitMQ to receive assignments and to publish its sensor
data and status. The sensor data may contain information
about geo-position, battery and other diagnosis data, which
are stored in the HCT database and broadcast to connected
user interfaces. The HAC status deﬁnes the current state of

the device, and it is continuously published to enable the
management and distribution of assignments by the HCT.

Fig. 2 describes helyOS in an application context. User
apps, on the left panel, communicate with helyOS via HTTP
requests using the GraphQL query language, while helyOS
broadcasts agent sensor data and status notiﬁcations by using
Web-Socket. In a typical scenario, the user app dispatches
a mission by creating a work process instance in the HCT
database, this event triggers a number of process requests.

After clearing the HAC status, each process request is dis-
patched to its speciﬁc microservice. helyOS organizes the
microservice calls and saves the responses in the database.
Once all microservice requests are processed, the resulting
data is rendered as assignments and delivered to the agents,
shown on the right panel, by using the rabbitMQ message
broker. It is worthy to mention that the employment of one
or several microservices in a mission is preconﬁgured by the
administrator using the helyOS dashboard.

On the ”Agent” side, the HAC receives the assignment from
the HCT and splits it up into a set of operation requests.
These requests are consumed by dedicated operation modules;
each module is responsible for the execution of a speciﬁc
task. While these task modules may vary across projects
and machines, the data ﬂow and the process hierarchy are
suggested to be standard in our framework.

for retrieving the results from the microservice by JOB-ID.
This means that
to
be requested, which keeps their implementation simple. For
microservices connected via rabbitMQ, the response ingestion
is triggered by event.

the microservices will passively wait

Except for those in the automaton domains, the microser-
vices are triggered by mission requests. A mission does not
necessarily have to involve agents; e.g., a mission request to
update the yard map will only set an interaction between a
microservice and the HCT database. When a mission is being
processed, the choice of which microservices are employed
must be previously encoded by the administrator/developer as
a ”mission recipe”. Mission recipes can be created and edited
in helyOS dashboard, and each new mission recipe translates
to a new feature available for the end-user (see right panel
Fig. 4).

IV. MICROSERVICE DOMAINS

To be accessible to the HCT, a microservice must be
registered and ascribed to a domain in the helyOS dashboard,
see Fig.
3. The helyOS framework deﬁnes four domains
for microservices: assignment planners, map servers, storage
servers and the automaton domain. Each domain has a spe-
ciﬁc set of permissions for data ﬂow, which guarantees the
consistence of the yard state and guides the overall design of
the application. Developers are free to create subdomains if
required.

The assignment planners include all microservices intended
to process the requests of tasks and operations. Microservices
registered in this domain have permission to send data to a tar-
geted agent. These services can be used to create assignments
or to simply feed context data to an agent.

Map server microservices have the permission to write map
data into the helyOS database. They are used when changes
of the map objects are triggered by missions. The map data
is saved as a list of JSON objects (user-deﬁned schema) and
is part of the yard state data. This data is relevant for motion
algorithms and it is shared with all other microservices.

The storage servers are microservices used to passively out-
put data. Since the yard state data is automatically appended
to any request to a microservice, this data can be forwarded to
a storage service. Microservices in this domain cannot modify
the yard state or send data to agents. Finally, the microservices
in the automatons domain work in conjunction with the agents
and are independent from helyOS. The autonomous domain
is suitable, for example, for the implementation of real-time
features such as data streaming between microservices and
agents.

All microservices accessible to HCT must comply with
a minimalist REST API for CRUD operations (create, read,
update and delete). A microservice can either synchronously
return the results, in case of fast processing, or return a job-
identiﬁer token (JOB-ID), in case of time-demanding pro-
cesses. The latter is the typical scenario for motion planning
algorithms, which can take several tens of seconds. In the
HCT, an HTTP periodic polling mechanism is employed

V. EXAMPLES OF SCENARIOS SUPPORTED BY HELYOS

In this section,

the following examples of autonomous
driving applications make use of motion algorithms from the
TruckTrix® family: (i) TruckTrix®-Path [2] – path planner
for a single vehicle. (ii) TruckTrix®-Coop [3] – timestamps
trajectories calculated by TruckTrix®-Path to avoid collisions.
(iii) TruckTrix®-Agriculture [17] – path planner for efﬁcient
weed and pest control using agricultural robots in smart
farming.

A. Logistics hub/yard with autonomous vehicles

Autonomous vehicles in logistics hubs are the ﬂagship
application for helyOS. For demonstration purposes, let us
consider the following use case:

(i) A truck, carrying goods, arrives at the entrance of the

logistics yard.

(ii) The driver sets the truck to autonomous mode, checks

it into helyOS and leaves the vehicle.

(iii) The yard personnel use a web app to send the truck
to a certain gate to unload the goods, and then to drive to
a parking slot, where the truck will be waiting for its next
mission.

The AutoTruck project (see Ref. [13] ) was a practical
realization of this scenario using the helyOS framework. Fig. 4
describes how helyOS handles this use case. In short, the mis-
sion request is sent from the web app to the HCT (1) creating
a database event (2). This event triggers map updates from a
map service (3). The updated map data and truck geometries
are then sent to TruckTrix®-Path (4) for the calculation of a
collision-free trajectory from the yard entrance to the gate. The
result is then forwarded to TruckTrix®-Coop (5) that updates
the trajectory taking into account all other vehicle paths to
avoid collision and deadlocks. Finally, helyOS dispatches the
mission data to the truck for execution (7). This sequence of
events is predeﬁned in the helyOS dashboard under a mission
recipe named ”unload goods”, as seen on the right panel of
Fig. 4. This speciﬁc sequence is triggered whenever the end-
user creates a missions of the ”unload goods” type.

Fig. 4. The ”unload goods” mission diagram (left panel) and its deﬁnition in the helyOS dashboard (right panel). Numbers on the diagram are for:

Note that TruckTrix®-Path and TruckTrix®-Coop are served
from the cloud. Other kinds of missions would be easily
integrated just by adding or rearranging the microservices.

B. Automation of agriculture operations

The automation of agricultural processes, known as smart
farming,
is an important area of yard automation. Smart
farming is a challenging concept; it deals with missions that
simultaneously employ several entities of different natures:
tractors, drones monitoring ﬁeld state, weather stations or an
external database containing plant data.

helyOS simpliﬁes the development and implementation
of these systems as has been demonstrated in the Feld-
schwarm [18] project, which makes use of the TruckTrix®-
Agriculture motion algorithm. In Fig. 5 one can see a corre-
sponding mission example for the Feldschwarm [18] project,
where one mission assignment consists of several tasks. In
this project, the helyOS administrator can decide whether the
mission data should be calculated for all tasks at once using a
complex path planner, or whether the data processing will be
distributed over several microservices and the results collected
at the end of all calculations. Moreover, a single mission
can derive multiple assignments that are addressed to several
tractors.

Another example of agriculture automation will be re-
alized as a part of the Cognitive Agriculture (COGNAC)
project [19, 20]. Here, relevant information from an external
public database is collected with the help of a connector mi-
croservice. This information is used for the creation of tractors
missions on the ﬁeld. For example, one of the assignment
planner microservices can use the collected data to estimate
the tractor battery consumption before performing a mission.
If necessary, it will create intermediate assignments to drive
the tractor to a charging station.

Fig. 5. Mission example in the Feldschwarm project. In the blue parts of the
mission the vehicle just drives, in the yellow parts it drives and simultaneously
performs agricultural tasks, in the red parts it performs agricultural tasks
only. The parameters for each task can be calculated by one or several
microservices.

VI. CONCLUSION: APPLICATIONS OF HELYOS

In this paper we presented potential use cases of helyOS and
mentioned some demonstrations of applications. The following
list summarizes these demonstrations:

• In the AutoTruck project [13], a fully automated truck

was controlled in a logistics yard.

• In the SAFE-20 project [21], we are applying helyOS to a
multiple-vehicle logistics yard. The TruckTrix®-Path and
-Coop microservices are used to guarantee a collision-
free trajectory.

• The Feldschwarm project [18] presents the work of
helyOS in agriculture operations. In this case we created
common missions for multiple tractors. These missions
include both driving and agriculture operations.

• The COGNAC project [19] for the automation of different
ﬁeld operations needs helyOS to plan single vehicle

Jannik Lotz et al. “Microservice Architectures for Ad-
vanced Driver Assistance Systems: A Case-Study”. In:
2019 IEEE International Conference on Software Ar-
chitecture Companion (ICSA-C). 2019, pp. 45–52. DOI:
10.1109/ICSA-C.2019.00016.

[11] RabbitMQ - documentation. https://www.rabbitmq.org/.

Accessed: 17.05.2022.

[12] Eric Evans. Domain-Driven Design: Tackling Complex-

ity in the Heart of Software. Addison-Wesley, 2004.

[13] Gunter Nitzsche et al. “AutoTruck and helyOS: En-
abling highly efﬁcient yard operation by automation”.
In: Transport Research Arena TRA2020. Apr. 2020.

[14] PostgreSQL Global Development Group. PostgreSQL.
https://www.postgresql.org. Accessed: 17.05.2022.
[15] Benjie Gillam et al. PostGraphile. https://www.graphile.

org/. Accessed: 17.05.2022.

[16] GraphQL Foundation. GraphQL. https://graphql.org/.

Accessed: 17.05.2022.

[17] Nils Dunkelberg et al. Efﬁcient Multi-Robot Path Plan-
ning for Autonomous Weed Control on Complex-Shaped
Fields. Manuscript Submitted for Publication. 2022.

[18] Fraunhofer Field-Swarm project

for autonomy ﬁeld
modules for agriculture. http://www.feldschwarm.de/.
Accessed: 17.05.2022.

[19] Fraunhofer lighthouse project “Cognitive Agriculture”
(short: “COGNAC”). https : / / www . iese . fraunhofer .
de / en / innovation trends / SmartFarming / cognitive -
agriculture.html.
Julia Osten et al. “Modular and scalable automation
for ﬁeld robots”. In: at - Automatisierungstechnik 69.4
(2021), pp. 307–315.

[20]

[21] SAFE-20: Sicheres autonomes Fahren in Automa-
tisierungszonen mit mindestens 20 km/h. https://www.
safe20.de/. Accessed: 17.05.2022.

missions that incorporates the results of different path
planners.

[10]

The helyOS architecture proves to be ﬂexible and can be
applied to many other use cases by employing appropriated
microservices to the HCT and operation modules to the HAC.
The development of user interfaces is accelerated by using
the HCT as an entry point for web applications. Database
customization schemes are promptly available to the front-end
by using the GraphQL query language. The current deﬁnitions
of domains and data ﬂows provide an efﬁcient development
guideline for several situations in autonomous driving in
delimited areas.

REFERENCES
[1] S. M. LaValle. Planning Algorithms. Available at
http://planning.cs.uiuc.edu/. Cambridge, U.K.: Cam-
bridge University Press, 2006.

[2] Nikolay Belov et al. TruckTrix® Path-Planning in the
helyOS Operating System for Yard Automation. techrxiv.
org:14518041/1. May 2021.

[3] Felix Keppler and Sebastian Wagner. “Prioritized Multi-
Robot Velocity Planning for Trajectory Coordination
of Arbitrarily Complex Vehicle Structures”. In: 2020
IEEE/SICE International Symposium on System Inte-
gration (SII). 2020, pp. 1075–1080.

[4] Aakash Soni and Huosheng Hu. “Formation Control for
a Fleet of Autonomous Ground Vehicles: A Survey”. In:
Robotics 7.4 (2018).

[5] You Li and Javier Ibanez-Guzman. “Lidar for Au-
tonomous Driving: The Principles, Challenges, and
Trends for Automotive Lidar and Perception Systems”.
In: IEEE Signal Processing Magazine 37.4 (2020),
pp. 50–61. DOI: 10.1109/MSP.2020.2973615.

[6] Niko S¨underhauf et al. “The limits and potentials of
deep learning for robotics”. In: The International Jour-
nal of Robotics Research 37.4-5 (2018), pp. 405–420.
[7] Angela Ribeiro et al. “A ﬂeet of aerial and ground
robots: a scalable approach for autonomous site-speciﬁc
herbicide application”. In: July 2015, pp. 167–173.
[8] Luis Emmi, Mariano Gonzalez-de-Soto, and Pablo
Gonzalez-de-Santos. “Conﬁguring a Fleet of Ground
Robots for Agricultural Tasks”. In: ROBOT2013: First
Iberian Robotics Conference: Advances in Robotics,
Vol. 1. Ed. by Manuel A. Armada, Alberto Sanfeliu, and
Manuel Ferre. Cham: Springer International Publishing,
2014, pp. 505–517.
Ilko Hoffmann, Julien Ostermann, and Kavivarman
Sivarasah. Microservice-architecture - a practical ap-
proach to developing a distributed heterogeneous-ﬂeet-
management-platform. 2017. URL: https://publica-stage.
fraunhofer.de/handle/publica/399280.

[9]

