2
2
0
2

n
u
J

8
2

]
L
P
.
s
c
[

1
v
0
7
2
4
1
.
6
0
2
2
:
v
i
X
r
a

Exporting Ada Software to Python and Julia∗

Jan Verschelde†

28 June 2022

Abstract

The objective is to demonstrate the making of Ada software available to Python and Julia
programmers using GPRbuild. GPRbuild is the project manager of the GNAT toolchain.
With GPRbuild the making of shared object ﬁles is fully automated and the software can
be readily used in Python and Julia. The application is the build process of PHCpack, a
free and open source software package to solve polynomial systems by homotopy continu-
ation methods, written mainly in Ada, with components in C++, available at github at
https://github.com/janverschelde/PHCpack.

1 Language Agnostic Computing

This paper describes interface development from the perspective of an Ada programmer, aimed
to export the functionality of a software package to Python [8] and Julia [1] computational
environments, available through Jupyter notebooks [5]. The Jupyter notebook is the interface
to SageMath [9], a free open source system for mathematical computing.

In order to export all functionality the interface passes through C, which may be regarded
as a least common multiple of programming languages, as Ada, Python, and Julia share enough
common ground to enable language agnostic computing, as Jupyter stands for Julia, Python,
R, and many others.

Python
❅❘

Julia
(cid:0)✠

C interface

❄

Ada Code

Figure 1: C as the least common multiple language.

The main point is to automate building with GPRbuild.

∗Supported by the National Science Foundation under grant DMS 1854513.
†University of Illinois at Chicago, Department of Mathematics, Statistics, and Computer Science, 851 S.

Morgan St. (m/c 249), Chicago, IL 60607-7045 Email: janv@uic.edu, URL: http://www.math.uic.edu/∼jan.

1

 
 
 
 
 
 
2 GPRbuild and Interface Development

The mixed language development is supported by GPRbuild, the project manager of the gnu-
ada compiler GNAT. The build process, deﬁned via library projects, results in shared object
ﬁles (with the extension .so on Linux, .dll on Windows, and .dylib on Mac OS X). These
shared object ﬁles can be called directly from a Python script or a Julia program.

In the C interface layer, the control is passed to a C program. The C program passes input
data to some Ada procedure, calls an exported procedure, and extracts the output data via
another call to an Ada procedure. The most basic and versatile manner to pass data is via a
plain sequence of characters of 32-bit integers. As the hello world for this interface, consider the
swapping of characters in a string.

"hello"

✲ swap

✲ "olleh"

Figure 2: Swapping characters via an interface package.

The interface package as shown in Figure 3 exports a procedure to pass the input data, the

DoIt procedure to compute the output data, and then a third function to return the output.

swap

✐ Initialize(s)

✐ DoIt

✐ s := Retrieve

Figure 3: An interface package to swap characters in a string.

Then the C program calls the function call swap, declared in Ada as below.

with C_Integer_Arrays; use C_Integer_Arrays;

function call_swap

( jobnbr : integer; sizedata : integer;

swapdata : C_intarrs.Pointer; verbose : integer ) return integer;

where the package C Integer Arrays deﬁnes C Integer Array as an array of C integers, of type Interfaces.C.int.
The package contains

package C_intarrs is

new Interfaces.C.Pointers (Interfaces.C.size_T, Interfaces.C.int, C_Integer_Array,0);

Observe that the void idiom of C is avoided. The details of this introductory project are

posted at github.com/janverschelde/ExportAdaGPRbuild.

2

The C code to test takes a string word, converts the string into an array of 32-bit integers,

and then calls the Ada code:

sizeword = strlen(word);

for(int idx = 0; idx < sizeword; idx++)
dataword[idx] = (int) word[idx];

adainit();
fail = _ada_call_swap(0,sizeword,dataword,1);
fail = _ada_call_swap(1,sizeword,dataword,1);
fail = _ada_call_swap(2,sizeword,dataword,1);
adafinal();

for(int idx = 0; idx < sizeword; idx++) word[idx] = (char) dataword[idx];

The contents of the ﬁle demo.gpr deﬁnes the build of the C test program.

project Demo is

for Languages use ("Ada", "C");
for Source_Dirs use ("src");
for Main use
(

"hello_world.adb", "main.adb", "test_call_swap.c"

);
for Object_Dir use "obj";
for Exec_Dir use "bin";

end Demo;

To make a shared object ﬁle, a library project is deﬁned. Below are the essentials of the

instructions to make the libdemo as a shared object.

for Library_Dir use "lib";
for Library_Name use "demo";
for Library_Kind use "dynamic";
for Library_Auto_Init use "true";
for Library_Interface use
(

"hello_world", "main", "swap", "call_swap", "c_integer_arrays"

);
for Library_Standalone use "encapsulated";

package Compiler is

for Switches ("call_swap.adb") use ("-c");

end Compiler;

package Binder is

-- use "-Lada" for adainit and adafinal
for Default_Switches ("Ada") use ("-n", "-Lada");

end Binder;

3

Julia has the function ccall() to execute compiled C code. The Julia code below calls the

call swap procedure.

LIBRARY = "../Ada/lib/libdemo"

word = [Cint(’h’), Cint(’e’), Cint(’l’), Cint(’l’), Cint(’o’)]
println(word)
ptr2word = pointer(word, 1)
p = ccall((:_ada_call_swap, LIBRARY), Cint,

(Cint, Cint, Ref{Cint}, Cint), 0, 5, ptr2word, 1)

p = ccall((:_ada_call_swap, LIBRARY), Cint,

(Cint, Cint, Ref{Cint}, Cint), 1, 5, ptr2word, 1)

p = ccall((:_ada_call_swap, LIBRARY), Cint,

(Cint, Cint, Ref{Cint}, Cint), 2, 5, ptr2word, 1)

println(word)

The string "hello" is represented by Int32[104, 101, 108, 108, 111]. The last state-

ment, println(word) shows Int32[111, 108, 108, 101, 104].

To extend Python code, an extension module must be deﬁned in C or C++. The setup.py
script has the list extra objects to deﬁne the location of the compiled Ada code and the location
of the Ada runtime libraries. The shared object made running python setup.py build ext
can then be directly imported in a Python session. The making of this extension can be done
without makeﬁles.

3 Building PHCpack

As a demonstration to a large scale project, GPRbuild is applied to make share objects for
PHCpack, a free and open source software package to solve polynomial systems with homotopy
continuation. The python interface to PHCpack is phcpy [7]. Written mainly in Ada, PHCpack
contains MixedVol [2] and DEMiCs [6] to count bounds on the number of isolated solutions fast.
For MixedVol, a translation into Ada was made. The package DEMiCs is written in C++ and
incorporated into PHCpack as such. As described in [10], the code for multiple double precision
is provided by QDlib [3] and CAMPARY [4].

A Julia interface is under development. From the Julia folder of the PHCpack source

distribution, running the Julia program version.jl at the command prompt:

$ julia version.jl
-> in use_c2phc4c.Handle_Jobs ...
PHCv2.4.85 released 2021-06-30
$

The ccall() uses the libPHCpack shared object, made with GPRbuild.

Acknowledgment. The author thanks Dirk Craeynest and Fernando Oleo Blanco for the
organization of the Ada Devroom at FOSDEM 2022.

4

References

[1] J. Bezanson, A. Edelman, S. Karpinski, and V. B. Shah. Julia: A fresh approach to

numerical computing. SIAM Review, 59(1):65–98, 2017.

[2] T. Gao, T. Y. Li, and M. Wu. Algorithm 846: MixedVol: a software package for mixed-

volume computation. ACM Trans. Math. Softw., 31(4):555–560, 2005.

[3] Y. Hida, X. S. Li, and D. H. Bailey. Algorithms for quad-double precision ﬂoating point
In 15th IEEE Symposium on Computer Arithmetic (Arith-15 2001), pages

arithmetic.
155–162. IEEE Computer Society, 2001.

[4] M. Joldes, J.-M. Muller, V. Popescu, and Tucker. W. CAMPARY: Cuda Multiple preci-
sion arithmetic library and applications. In Mathematical Software – ICMS 2016, the 5th
International Conference on Mathematical Software, pages 232–240. Springer-Verlag, 2016.

[5] T. Kluyver, B. Ragan-Kelley, F. P´erez, B. Granger, M. Bussonnier, J. Frederic, K. Kelley,
J. Hamrick, J. Grout, S. Corlay, P. Ivanov, D. Avila, S. Abdalla, C. Willing, and Jupyter De-
velopment Team. Jupyter Notebooks—a publishing format for reproducible computational
In F. Loizides and B. Schmidt, editors, Positioning and Power in Academic
workﬂows.
Publishing: Players, Agents, and Agendas, pages 87–90. IOS Press, 2016.

[6] T. Mizutani and A. Takeda. DEMiCs: A software package for computing the mixed vol-
In M.E. Stillman, N. Takayama, and
ume via dynamic enumeration of all mixed cells.
J. Verschelde, editors, Software for Algebraic Geometry, volume 148 of The IMA Volumes
in Mathematics and its Applications, pages 59–79. Springer-Verlag, 2008.

[7] J. Otto, A. Forbes, and J. Verschelde. Solving polynomial systems with phcpy. In Proceed-

ings of the 18th Python in Science Conference, pages 563–582, 2019.

[8] F. P´erez, B.E. Granger, and J.D. Hunter. Python: An ecosystem for scientiﬁc computing.

Computing in Science & Engineering, 13(2):12–21, 2011.

[9] W. Stein. Sage: Creating a viable free open source alternative to Magma, Maple, Mathemat-
ica, and MATLAB. In F. Cucker, T. Krick, A. Pinkus, and A. Szanto, editors, Foundations
of Computational Mathematics, Budapest 2011, volume 403 of London Mathematical Society
Lecture Note Series, pages 230–238. Cambridge University Press, 2012.

[10] J. Verschelde. Parallel software to oﬀset the cost of higher precision. ACM SIGAda Ada

Letters, 40(2):59–64, 2020.

5

