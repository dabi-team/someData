2
2
0
2

r
a

M
0
3

]
E
S
.
s
c
[

1
v
0
9
9
5
1
.
3
0
2
2
:
v
i
X
r
a

pycefr: Python Competency Level through Code Analysis
Raula Gaikovina Kula
Chaiyong Ragkhitwetsagul
raula-k@is.naist.jp
chaiyong.rag@mahidol.edu
NAIST
Faculty of ICT, Mahidol University
Nara, Japan
Nakhon Pathom, Thailand

Gregorio Robles
grex@gsyc.urjc.es
Universidad Rey Juan Carlos
Madrid, Spain

Tattiya Sakulniwat
tattiya.sakul@gmail.com
NAIST
Nara, Japan

Kenichi Matsumoto
matumoto@is.naist.jp
NAIST
Nara, Japan

Jesus M. Gonzalez-Barahona
jgb@gsyc.urjc.es
Universidad Rey Juan Carlos
Madrid, Spain

ABSTRACT
Python is known to be a versatile language, well suited both for
beginners and advanced users. Some elements of the language are
easier to understand than others: some are found in any kind of
code, while some others are used only by experienced programmers.
The use of these elements lead to different ways to code, depend-
ing on the experience with the language and the knowledge of its
elements, the general programming competence and programming
skills, etc. In this paper, we present pycefr, a tool that detects the
use of the different elements of the Python language, effectively
measuring the level of Python proficiency required to comprehend
and deal with a fragment of Python code. Following the well-known
Common European Framework of Reference for Languages (CEFR),
widely used for natural languages, pycefr categorizes Python code
in six levels, depending on the proficiency required to create and
understand it. We also discuss different use cases for pycefr: iden-
tifying code snippets that can be understood by developers with
a certain proficiency, labeling code examples in online resources
such as Stackoverflow and GitHub to suit them to a certain level of
competency, helping in the onboarding process of new developers
in Open Source Software projects, etc. A video shows availability
and usage of the tool: https://tinyurl.com/ypdt3fwe.

ACM Reference Format:
Gregorio Robles, Raula Gaikovina Kula, Chaiyong Ragkhitwetsagul, Tattiya
Sakulniwat, Kenichi Matsumoto, and Jesus M. Gonzalez-Barahona. 2021.
pycefr: Python Competency Level through Code Analysis. In ICPC ’22:
The 30th IEEE/ACM International Conference on Program Comprehension,
May 16–17, 2022, Pittsburgh, US. ACM, New York, NY, USA, 5 pages. https:
//doi.org/10.1145/1122445.1122456

1 INTRODUCTION
Python is one of the most used languages nowadays, consistently
ranked among the top programming languages during the past
decade [26, 28], with many top-tier IT companies using it. Python
is known to be versatile, suitable for a wide range of people, from

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
ICPC ’22, May 16–17, 2022, Pittsburgh, USA
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-XXXX-X/18/06. . . $15.00
https://doi.org/10.1145/1122445.1122456

beginners who want to create small scripts to professional pro-
grammers. It is also used by many developers not having a formal
computer science education, as is for example the case of the BioPy-
thon collection [6]. Much of science-related software is developed
in Python, and much of it by non-IT professionals.

A live community, with its own culture, has formed around
Python. An important part of this culture is about how to con-
ceive solutions for certain problems, as is portrayed in the “The
Zen of Python”1. One of its rules says: “There should be one –and
preferably only one– obvious way to do it.” As a result, some solutions
are considered more elegant than others, the most elegant being
the most Pythonic [2].

Our hypothesis, however, is that this is not completely true.
There are many different ways to program Python, and our experi-
ence is that the proficiency of the developer is key to understand
certain ways (i.e., idioms) found in the Python language. So, while
we agree that creating more Pythonic code should be the goal when
learning Python, less proficient developers could use other elements
that do not require a deep knowledge of the language.

To validate our hypothesis, we have built pycefr, a tool that
analyzes a given piece of code, reports the different Python ele-
ments found in it, and estimates the proficiency level required by a
developer to understand it. Following the design of the Common
European Framework of Reference for Languages (CEFR) [19], we
characterize Python code in a scale of six proficiency levels. Mim-
icking the process of learning natural languages, we postulate that
we start off with a few elements and easy structures, which with
experience and learning we extend, acquiring more complex and
advanced elements.

We envision that our tool could be helpful in several scenarios: i)
in Open Source Software (OSS) projects, to select proper reviewers
and bug fixers, making onboarding of new developers [25] eas-
ier; ii) in educational environments, to set an upper bound of the
programming skills required, in particular where programming is
secondary (e.g., in computer networks class, where students have
to create simple Python clients and servers, the important concepts
are about networks and protocols, requiring just the minimum nec-
essary Python skills); iii) in social Q&A sites, such as Stackoverflow,
to understand the competency needed to comprehend a proposed
answer (although simply copying code from Stackoverflow might
work, if it is not understood by the developer it may work in an
unexpected way [1, 22, 32]).

1https://www.python.org/dev/peps/pep-0020/

 
 
 
 
 
 
ICPC ’22, May 16–17, 2022, Pittsburgh, USA

Robles, Kula, Ragkhitwetsagul, et al.

Level group

A
Basic user

B
Independent user

C
Proficient user

Level
A1: Breakthrough or beginner

A2: Waystage or elementary

B1: Threshold or intermediate

B2: Vantage or upper intermediate

C1: Effective operational proficiency or advanced

C2: Mastery or proficiency

Table 1: Reference levels in the Common European Frame-
work of Reference for Languages (CEFR)

2 A FRAMEWORK FOR LANGUAGE

PROFICIENCY

The “Common European Framework of Reference for Languages:
Learning, Teaching, Assessment”, popularly known as CEFR in Eng-
lish [19], is a guide created by the Council of Europe to describe
the performance of foreign natural language learners, mainly in
Europe but it has also been increasingly adopted in other countries.
Its main objective is to provide a method of learning, teaching and
assessment that applies to all the natural languages of Europe. The
CEFR intends as well to make it easier for educational institutions
and employers to assess the language skills of applicants for ad-
mission to training or employment. CEFR defines the skills that
citizens must have for each level, and offers thus a standardized and
widely adopted way of expressing the proficiency in a language.

CEFR has six reference levels (A1, A2, B1, B2, C1, C2) that are
widely accepted as the European standard for classifying individual
language skills, as can be seen from Table 1. Levels in CEFR are
incremental, in the sense that the abilities required for the B2 level
implicitly require proficiency at lower levels (in this case, A1, A2
and B1) [18]. Several organizations have been created to serve as
an umbrella for language schools and certification companies that
claim to comply with the CEFR [17]. For example, the European
Association for Language Testing and Assessment (EALTA) is an
initiative funded by the European Community that promotes the
CEFR and best practices in the provision of professional language
training [9]. Initiatives at national level exist, too [7, 10, 14].

3 RELATED RESEARCH & TOOLS
There are a few studies on Pythonicity and its adoption in OSS
projects. Alexandru et al. [2] study how the developers perceive the
term Pythonic and also propose a catalog of Pythonic idioms and
their usage in real-world projects. The study found that writing
Pythonic code can be an indicating factor of expertise of Python
developers. Sakulniwat et al. [23] study the usage of the with open
Pythonic idiom over time in four Python projects. They found that
the adoption of the with open increases over time in two projects,
along with removals of its non-Pythonic counterpart. Phan-udom
et al. [20] propose an automated tool, called Teddy, that can recom-
mend adoptions of Pythonic idioms based on the code changes in
GitHub pull requests of Python projects.

Previous studies have proposed several approaches to measure
developers’ expertise or proficiency, for instance h-index for de-
velopers based on the data in OSS projects [4], assessing candi-
dates from their activities on social network [3], or the Visual

Table 2: Level Assigned to an excerpt of Python elements.

No

Python Element

Level

Print
If statement
List
Open function (files)
Nested list
List with a dictionary
Nested dictionary

1
2
3
4
5
6
7
8 with
9
10
11
12 Generator function
13 Meta-class
14 Decorator class

List comprehension
__dict__ attribute
__slots__

A1
A1
A1
A2
A2
B1
B1
B1
B2
B2
C1
C1
C2
C2

Resume from past history and expertise from GitHub and Stack
Overflow [24]. It has been shown that developers’ programming
proficiency can affect their involvement in OSS communities. When
sharing knowledge in social Q&A sites such as Stack Overflow, that
has become widely used for OSS communities [29], asking a well-
formulated question is beneficial for receiving useful answers [31].
Moreover, one of the challenges newcomers face when joining OSS
projects is lack of technical expertise. Moreover, they also found
difficulties in finding tasks that match with their programming pro-
ficiency [25]. Along the same line as our work, Vasilescu et al. [30]
have applied the concept of linguistic diversity drawn from the field
of social science to programming languages. They study the risks of
programming languages to disappear or to become unmaintainable.

4 BUILDING A COMPETENCY FRAMEWORK
Our design assumes that, given a piece of code, the highest level of
a Python element2 found will signal the proficiency that a Python
developer has to have in order to master (i.e., understand, modify,
fix, refactor) it. In other words, given a code snippet where there
are elements belonging to A1, A2 and B1, a developer should at
least have a B1 level in order to completely understand and work
with it.

We have taken common Python elements and have assigned
them to levels. Table 2 shows an excerpt of the assignment table,
where we show some elements for each level. At this point, the
complete list of identified elements is over 100 (which can be found
in the replication package3). To create the list, we have studied
several Python books [5, 8, 15, 16, 21, 27], have identified Python
elements that are explained in them, and have written down the
order in which they appear. Two of the authors have taken this
ordered list as input and have created a first version of the assign-
ment matrix, for which given a Python element/construct returns
its level. This has been shared with the rest of the authors, and after
discussion a certain agreement has been obtained.

2Throughout this paper, we refer to a Python element both as a Python element (e.g., a
print statement, or as a construct (e.g., a list comprehension).
3https://doi.org/10.5281/zenodo.5577363

pycefr: Python Competency Level through Code Analysis

ICPC ’22, May 16–17, 2022, Pittsburgh, USA

Figure 2: Output of the analysis of the Requests GitHub
repository as provided by pycefr.

1 {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19 }

" tools ": {

" clang_format_utils . py ": [

{

" Class ": " Simple Dictionary ",
" Start Line ": " 16 ",
" End Line ": "19",
" Displacement ": "21",
" Level ": "A2"

},
{

" Class ": " Print ",
" Start Line ": " 70 ",
" End Line ": "70",
" Displacement ": "4",
" Level ": "A1"

},
...

Figure 3: JSON output of a pycefr analysis (excerpt).

6 APPLICATION
We have tested pycefr in a computer networks subject that two of
the authors of the paper teach at university level (with 33 students
in the 2019/2020 academic year). Students who enroll in this subject
have previous knowledge of programming (in Pascal, Ada and some
of them in Java), but no Python knowledge. That is why a crash
course on Python is given for 8 hours. We decided to teach Python
up to level B1 (included), and removed Python elements that had
been taught in previous years such as list comprehensions, which
we have considered as B2.

During the course, students have to submit 5 small assignments
(from p2 to p6) and a large final assignment. All the assignments are
submitted to a git repository. Figure 4 is the result on analyzing the
repositories of the assignments by a student, which is representative
of what we have found when analyzing them with pycefr. As it
can be seen, most of the Python elements used by the student are
in the A levels. There are as well some elements with B1 level and
even some of them B2 (14 in total). No elements of the C levels were
found. Inspecting which B2 elements showed up, we found two of
them: a) the if __name__ == ’__main__’: is used to execute some
code only if the file was run directly, and not imported, i.e., when
a Python program runs as a main program, and b) dictionaries of
lists of dictionaries, which is a complex data element. In the first
case, we noted that we had not presented it in our Python crash
course, but that we introduced it later in our lessons. This points
out to an incorrect level assignment, as probably it should belong

Figure 1: Schematic view of pycefr’s components and the
flow of information.

We are still scientifically evaluating the assignments of Python
constructs and elements to competency levels. Further research is
required for this. We have noticed that the level might depend on
the context, and even minor disagreements (i.e., small differences
in the order and in the assignment, e.g., assigning B2 instead of B1)
may exist. In any case, it should be noticed that assignments can be
easily changed in the configuration file of pycefr, without having
to modify a line of source code of the tool.

5 DETECTING PYTHON PROFICIENCY LEVEL
Given a piece of code, pycefr will create the AST graph of the
program, using Python3’s ast standard library. The program will
then detect the individual Python elements according to the list (as
explained in Section 4) and sum the number of times they appear.
Figure 1 offers a schematic view of how pycefr works. As it can
be seen, the main Python program receives the source (a GitHub
username, a git repository, a folder or a file) as a parameter. In the
case of getting a GitHub username, the tool uses the GitHub API to
retrieve the list of repositories of that user where Python is the main
language and stores their git URL in a list. Then it traverses this
list, cloning those git repositories. For each repository, its filetree
is iterated, and all files with a .py extension are analyzed, which
means that its AST tree is generated. The Python elements found
are then stored together with the information of where they have
been found (file and line) in the database.

Figure 2 shows a screenshot example of the user interface of
pycefr. In addition to the command-line output, pycefr will return
the results in CSV and JSON format. The output can be in either CSV
or JSON file that contains following information: (i) Python element,
line of code of the occurrence, and (ii) the level of proficiency.

Figure 3 shows the output of pycefr on the clang_format_utils.py

file, taken from the PyTorch project. Furthermore, pycefr can sum-
marize the analysis as an aggregation of all proficiency levels for
that given code. The JSON output is used as well as a simple data-
base for creating of a set of web pages using HTML, JavaScript and
CSS to offer results in a more visual manner to the user.

ICPC ’22, May 16–17, 2022, Pittsburgh, USA

Robles, Kula, Ragkhitwetsagul, et al.

code as-is, but also understanding the code that they reuse. In ad-
dition, it has been found that a number of Stack Overflow code
snippets are problematic [1, 22, 32]. This may also help developers
to spot issues in such code since they can fully understand them
and make informed decisions whether to reuse it or not.

Onboarding OSS Projects. The pycefr tool can be used to
encourage contributions to OSS projects. For example, newcomers
can work on the components that have an average proficiency
level lower than or equal to their proficiency level. Moreover, if
the proficiency level is applied to the code review process in OSS
projects, newcomers can choose which reviews they are capable of
participating in. By knowing the level of Python proficiency that
is required to fix a bug, software projects could attract newcomers
more easily, as bug fixes that correspond to lower levels of Python
proficiency could be taken by them.

Application to other programming languages. Beyond the
impact on Python, we think that if our tool shows to have promis-
ing uses, these ideas could be transferred to other programming
languages and platforms. So, we argue that assigning levels for
programming elements can be done in many (if not all) other lan-
guages, and that similar strategies as the ones presented above
could be used in projects implemented in those languages, too.

8 ROADMAP AND FUTURE OUTLOOK
We now present limitations and the future plans for improvement.
Limitations. At current writing, pycefr currently supports
only Python 3. Although a large number of Python 2 programs
are available [12], we focus on Python 3, which is fully-supported
version and future-proof and aruge that Python 2 has a decreased
adoption [13]. pycefr is mainly suited for software comprehension
purposes, e.g., to identify the level of competency that a developer
requires to perform a task, and is not intended, as an assessment
tool because it can be easily circumvented. A simple example would
be creating a function that is never called and that contains C1 and
C2 elements. CEFR has been created to evaluate the competence
with a foreign natural language. Although it has been shown that
programming languages share similar characteristics with natural
languages [11], they may not be always equivalent.

Future Work. Since competency is a sliding scale, we envision
incremental re-calibration for improve pycefr proficiency accuracy.
From the software comprehension perspective, pycefr offers the
possibility to ensure that the code shown or given to developers is
within their level of Python competency. This should also open up
to new methodologies on how developer comprehend of the skill
of programming, and how it can be applied in practical scenarios
as mentioned in the paper.

ACKNOWLEDGEMENTS
GR acknowledges the support of the Madrid Regional Government
through the e-Madrid-CM Project under Grant S2018/TCS-4307,
co-funded by the European Structural Funds (FSE and FEDER).
RK, TS, and KM are supported by the Japanese Society for the
Promotion of Science (JSPS) KAKENHI Grant Numbers JP20K19774
and JP20H05706.

Figure 4: Number of elements per level found in student as-
signments.

to Levels A2 or B1, but we had put it as B2. The reason is because in
the text books this element, even if used before, is really explained
much later. In the second case, we have shown dictionaries and lists,
and their combination in our crash course, but not such a complex
element. However, the student herself realized that this is possible
and introduced it in her code.

When analyzing other student’s projects, we found other B2 (list
comprehensions and lambda functions) and even C1 (decorators)
elements in their code. We asked the authoring students about them
and they told us that they had copied it after doing an Internet
search (most of them from Stack Overflow although others did not
remember). All in all, our preliminary experience shows that we
achieved to design assignments that students could do with the
Python level they had, which was our goal. Since the course is
about computer networks, our objective was not about teaching
students to learn more Python during the course but to ascertain
that the Python of the crash course is enough for the whole course.

7 OTHER POTENTIAL APPLICATIONS
Choosing Example Code Snippets. In books, tutorials and lessons,
code snippets are often shown. These example code snippets may
also be used as a starting point to extend the implementation. To
make sure developers can fully understand the examples being
shown, appropriate code snippets based on the reported level of
proficiency can be chosen with the pycefr tool. For example, in a
fundamentals of programming class using Python, educators can
limit the level of code examples to only A2 or B1. On the other hand,
for a more advanced course like data science or machine learning,
code examples could include functional programming fragments
(mostly labeled as B2).

Increase the Understanding of Stack Overflow Code Snip-
pets. The pycefr could be used to evaluate the level of code snip-
pets in a Stack Overflow post including the question and the an-
swers and add a label of Python proficiency level of the answers.
This could enable developers with limited knowledge in Python
code, such as the ones with B1 or below, to browse through the an-
swers and focus on the ones that match best with their proficiency
level. This may help developers to not only copying and using the

pycefr: Python Competency Level through Code Analysis

ICPC ’22, May 16–17, 2022, Pittsburgh, USA

[29] Bogdan Vasilescu, Alexander Serebrenik, Prem Devanbu, and Vladimir Filkov.
2014. How social Q&A sites are changing knowledge sharing in open source
software communities. In Proceedings of the 17th ACM Conference on Computer
Supported Cooperative Work & Social Computing. 342–354.

[30] Bogdan Vasilescu, Alexander Serebrenik, and Mark GJ van den Brand. 2013. The
Babel of software development: Linguistic diversity in open source. In Interna-
tional Conference on Social Informatics. Springer, 391–404.

[31] Jie Yang, Claudia Hauff, Alessandro Bozzon, and Geert-Jan Houben. 2014. Asking
the right question in collaborative q&a systems. In Proceedings of the 25th ACM
conference on Hypertext and social media. 179–189.

[32] Tianyi Zhang, Ganesha Upadhyaya, Anastasia Reinhardt, Hridesh Rajan, and
Miryung Kim. 2018. Are Code Examples on an Online Q&A Forum Reliable? A
Study of API Misuse on Stack Overflow. In Proceedings of the 40th International
Conference on Software Engineering - ICSE ’18. 886–896.

REFERENCES
[1] Yasemin Acar, Michael Backes, Sascha Fahl, Doowon Kim, Michelle L Mazurek,
and Christian Stransky. 2016. You Get Where You’re Looking for: The Impact of
Information Sources on Code Security. In Proceedings of the IEEE Symposium on
Security and Privacy (SP ’16). IEEE, 289–305.

[2] Carol V Alexandru, José J Merchante, Sebastiano Panichella, Sebastian Proksch,
Harald C Gall, and Gregorio Robles. 2018. On the usage of pythonic idioms. In
Proceedings of the 2018 ACM SIGPLAN International Symposium on New Ideas,
New Paradigms, and Reflections on Programming and Software. 1–11.

[3] Andrea Capiluppi, Alexander Serebrenik, and Leif Singer. 2012. Assessing tech-

nical candidates on the social web. IEEE software 30, 1 (2012), 45–51.

[4] Andrea Capiluppi, Alexander Serebrenik, and Ahmmad Youssef. 2012. Developing
an h-index for OSS developers. In 2012 9th IEEE Working Conference on Mining
Software Repositories (MSR). IEEE, 251–254.

[5] Wesley Chun. 2001. Core python programming. Vol. 1. Prentice Hall Professional.
[6] Peter JA Cock, Tiago Antao, Jeffrey T Chang, Brad A Chapman, Cymon J Cox, An-
drew Dalke, Iddo Friedberg, Thomas Hamelryck, Frank Kauff, Bartek Wilczynski,
et al. 2009. Biopython: freely available Python tools for computational molecular
biology and bioinformatics. Bioinformatics 25, 11 (2009), 1422–1423.

[7] Bart Deygers, Beate Zeidler, Dina Vilcu, and Cecilie Hamnes Carlsen. 2018. One
framework to unite them all? Use of the CEFR in European university entrance
policies. Language Assessment Quarterly 15, 1 (2018), 3–15.
[8] Allen Downey. 2012. Think python. " O’Reilly Media, Inc.".
[9] Neus Figueras. 2007. The CEFR, a lever for the improvement of language profes-

sionals in Europe. Modern Language Journal (2007), 673–675.

[10] Julia Hancke and Detmar Meurers. 2013. Exploring CEFR classification for
German based on rich linguistic modeling. Learner Corpus Research (2013), 54–
56.

[11] Abram Hindle, Earl T Barr, Zhendong Su, Mark Gabel, and Premkumar Devanbu.
2012. On the Naturalness of Software. In Proceedings of the 34th International
Conference on Software Engineering (ICSE ’12). 837–847.

[12] Hugo. 2020. Python version share over time, 6. https://dev.to/hugovk/python-

version-share-over-time-6-1jb8. Online; accessed 21 June 2021.

[13] JetBrains. 2020. Python Developers Survey 2020 Results. https://www.jetbrains.
com/lp/python-developers-survey-2020/. Online; accessed 21 June 2021.
[14] Nurdan Kavakli and Sezen Arslan. 2017. Applying EALTA guidelines as baseline
for the foreign language proficiency test in Turkey: The case of YDS. International
Journal of Curriculum and Instruction 9, 1 (2017), 104–118.

[15] Dave Kuhlman. 2009. A python book: Beginning python, advanced python, and

python exercises. Dave Kuhlman Lutz.

[16] Mark Lutz. 2001. Programming python. " O’Reilly Media, Inc.".
[17] Waldemar Martyniuk. 2011. Aligning Tests with the CEFR. Ernst Klett Sprachen.
[18] Brian North. 2007. The CEFR illustrative descriptor scales. The Modern Language

Journal 91, 4 (2007), 656–659.

[19] Council of Europe. 2021.

https://www.coe.int/en/web/common-european-

framework-reference-languages

[20] Purit Phan-udom, Naruedon Wattanakul, Tattiya Sakulniwat, Chaiyong
Ragkhitwetsagul, Thanwadee Sunetnanta, Morakot Choetkiertikul, and
Raula Gaikovina Kula. 2020. Teddy: Automatic Recommendation of Pythonic Id-
iom Usage For Pull-Based Software Projects. In 2020 IEEE International Conference
on Software Maintenance and Evolution (ICSME). IEEE, 806–809.

[21] Mark Pilgrim and Simon Willison. 2009. Dive Into Python 3. Vol. 2. Springer.
[22] Chaiyong Ragkhitwetsagul, Jens Krinke, Matheus Paixao, Giuseppe Bianco, and
Rocco Oliveto. 2021. Toxic Code Snippets on Stack Overflow. IEEE Transactions
on Software Engineering 47, 3 (2021), 560–581. https://doi.org/10.1109/TSE.2019.
2900307

[23] Tattiya Sakulniwat, Raula Gaikovina Kula, Chaiyong Ragkhitwetsagul, Morakot
Choetkiertikul, Thanwadee Sunetnanta, Dong Wang, Takashi Ishio, and Kenichi
Matsumoto. 2019. Visualizing the Usage of Pythonic Idioms over Time: A Case
Study of the with open Idiom. In 2019 10th International Workshop on Empirical
Software Engineering in Practice (IWESEP). IEEE, 43–435.

[24] Anita Sarma, Xiaofan Chen, Sandeep Kuttal, Laura Dabbish, and Zhendong Wang.
2016. Hiring in the global stage: Profiles of online contributions. In 2016 IEEE
11th International Conference on Global Software Engineering (ICGSE). IEEE, 1–10.
[25] Igor Steinmacher, Marco Aurelio Graciotto Silva, Marco Aurelio Gerosa, and
David F Redmiles. 2015. A systematic literature review on the barriers faced by
newcomers to open source software projects. Information and Software Technology
59 (2015), 67–85.

[26] Stephen Cass. 2021. Top Programming Languages 2021: Python dominates as
the de facto platform for new technologies. https://spectrum-ieee-org.ejournal.
mahidol.ac.th/top-programming-languages-2021. Online; accessed 21 October
2021.

[27] Mark Summerfield. 2010. Programming in Python 3: a complete introduction to

the Python language. Addison-Wesley Professional.

[28] TIOBE. 2021. TIOBE Index for October 2021. https://www.tiobe.com/tiobe-index/.

Online; accessed 21 October 2021.

