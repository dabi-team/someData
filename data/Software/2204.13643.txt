Interaction of Autonomous and Manually-Controlled Vehicles:
Implementation of a Road User Communication Service

Nikita Smirnov, Sebastian Tschernuth, Walter Morales-Alvarez Student Member, IEEE,
and Cristina Olaverri-Monreal Senior Member, IEEE

2
2
0
2

r
p
A
8
2

]

O
R
.
s
c
[

1
v
3
4
6
3
1
.
4
0
2
2
:
v
i
X
r
a

Abstract— Communication between vehicles with varying
degrees of automation is increasingly challenging as highly
automated vehicles are unable to interpret the non-verbal
signs of other road users. The lack of understanding on roads
leads to lower trust in automated vehicles and impairs trafﬁc
safety. To address these problems, we propose the Road User
Communication Service, a software as a service platform,
which provides information exchange and cloud computing
services for vehicles with varying degrees of automation. To
inspect the operability of the proposed solution, ﬁeld tests were
carried out on a test track, where the autonomous JKU-ITS
research vehicle requested the state of a driver in a manually-
controlled vehicle through the implemented service. The test
results validated the approach showing its feasibility to be used
as a communication platform. A link to the source code is
available.

I. INTRODUCTION

As the level of automation for new vehicles increases, the
interaction between vehicles of lower and higher levels of
autonomy could become more difﬁcult, because driverless
vehicles are not capable of acknowledging eye contact as
a non-verbal sign from other drivers in the vicinity. This
has been shown to affect the conﬁdence in self-driving cars
[1] and it is still unclear how the interaction between fully
autonomous vehicles and other road users will be [2] [3].
In this context, other ways of communicating might increase
the chances of gaining cooperation.

Connected vehicles could leverage inter-vehicular com-
munication to enlarge the data acquired from the sensors
with data received from the network for a more robust
and complete perception of the environment. In this line
of research, the purpose of the internet of vehicles (IoV) is
to enable seamless communication between road users. The
IoV utilizes Vehicle to Everything (V2X) as the technol-
ogy enabling wireless communication on roads. It includes
smart road infrastructure, connected vehicles, technologies
for sharing data, and real-time data computation. V2X
communication, in turn, provides connected vehicles with
the necessary tools to interact with the road environment,
namely road infrastructure (V2I), pedestrians (V2P), and
other vehicles (V2V). V2X communication also includes a
vehicle-to-network (V2N) connection. Currently, the most
common V2X technologies are dedicated short-range com-
munication (DSRC) and cellular V2X (C-V2X) [2]. As a
crucial component of the IoV, car cloud computing can

Johannes

Kepler
Transport

University
tainable
Logistics
sebastian.tschernuth, walter.morales alvarez,
cristina.olaverri-monreal}@jku.at

Linz,
4.0.

Austria;

Sus-
Chair
{nikita.smirnov,

augment communication capabilities through a low-latency
information transfer between vehicles. The communication
technologies described above set
the foundation for the
method implemented in this paper to facilitate the coexis-
tence of manually-controlled and highly automated vehicles.
We contribute to the body of research in the ﬁeld of
automated vehicles and propose an approach that, to the
best of our knowledge has not been explored previously in
the literature. We implement a Road User Communication
Service (RUCS) as a software as a service (SaaS) platform
designed to enable the communication between vehicles with
any levels of automation and also other road users that are
equipped with a smart device. We validate our framework
through a ﬁeld test in which an autonomous vehicle utilizes
RUCS for requesting information about a vehicle in the
adjacent lane before making the pertinent decision regarding
a lane-change manoeuver. The proposed platform attempts
to make non-verbal communication unambiguous and inter-
pretable to all road users.

The remainder of this paper is organized as follows. Sec-
tion II describes related work in the ﬁeld of communication
and human-machine interaction. In Section III, we describe
the RUCS platform in detail. Section IV describes the imple-
mented ﬁeld test scenario and the data collection procedure.
Section V presents the results of the experiment. The last
section discusses limitations and potential improvements of
the platform, concludes the paper, and outlines future steps.

II. RELATED WORK

In recent literature, several technologies have been pre-
sented to enhance driving perception and help increase
road safety through approaches that augment the drivers’
awareness of the surrounding environment. For example, the
DSRC-based See-Through System [4] enhanced the driver’s
visibility in case of a leading vision-obstructing vehicle,
thus supporting the drivers overtaking decision. Efﬁcient
communication has the potential to promote trust in AVs
as stated in [1]. The effects of external vehicle interfaces for
autonomous vehicles (AVs) on the perceived safety, trust and
acceptance of other road users have been mostly investigated
by focusing on pedestrians (e.g. [5]–[8]) and only a few
works studied interaction with conventional vehicles. In this
context, for example, the results of a series of workshops and
interviews involving truck drivers with platooning experience
as well as passenger vehicle drivers, original equipment
manufacturers (OEMs) and other experts in the ﬁeld were
presented in [2]. The results indicated that the most relevant

 
 
 
 
 
 
situations for external signaling for platoons were highways
at on-ramps, off-ramps, during overtaking, and lane changes.
The same study refers to the work in [9] that states that trafﬁc
safety and efﬁciency, as well as trust in AVs may be enhanced
if AVs are able to communicate information on their state
and information. To this end, a potential communication
paradigm could be the one presented in [10], [11], a display-
based system that was used to convey information regarding
a potentially unsafe road situation between two following
vehicles independently of their communication capabilities
or equipment. In this context, various driving behavioral
patterns from the following vehicle were observed depending
on whether the system was located in the following vehicle
or the rear part of the leading vehicle.
the
Regarding the development of V2X communication,
authors of [12] reviewed several communication protocols,
including the 802.11p IEEE standard. They also investigated
the development of cloud-based IoV (C-IoV) applications,
which could, for instance, enable big data analysis, and
described several architectures.
Further, a vehicular ad-hoc network (VANET)-based cloud
model, which sought
to integrate cloud computing into
VANETs, was discussed in [13] at a theoretical level. In-
teroperability was regarded to be one key challenge.
To address data privacy, the study presented in [14] proposed
a smart security framework for VANETs, using edge com-
puting nodes and the global wireless standard 5th generation
mobile network 5G. The implemented solution demonstrated
that latency, privacy, and security issues of cloud computing
in VANETs can be improved by incorporating edge nodes.
In [15] a further study described a vehicular cloud net-
working (VCN) system combining information-centric net-
working (ICN) and vehicular cloud computing (VCC). VCC
allows users to form a vehicle-cloud, on which they can share
information. ICN is responsible for the efﬁcient distribution
of the data among the users.
A model
that establishes secure and efﬁcient computing
resource allocation between heterogeneous vehicles and road
side units (RSUs) was presented in [16]. Based on semi-
Markov decision processes, this model considered the het-
erogeneity of vehicles and RSUs.
Although all these studies present relevant results for mod-
eling communication networks or transferring information
between road users, they either focus only on pedestrians,
or lack cross-validation in real environments. Therefore,
the main contribution of this work encompasses the design
and implementation of a SaaS platform to enable the com-
munication between vehicles with any level of automation
and other road users equipped with a smart device. We
additionally validate our RUCS framework through a ﬁeld
test as described in Section IV.

III. DESCRIPTION OF THE IMPLEMENTED ROAD USER
COMMUNICATION SERVICE

Fig. 1. A simpliﬁed illustration of the interaction between RUCS and
clients

Fig. 2. Architecture of the proposed service

driven vehicles. For that purpose, the service provides a
reliable way of information exchange between connected
vehicles and smart devices via representational state transfer
(REST) application programming interface (API), Hypertext
Transfer Protocol Secure (HTTPS) and Advanced Message
Queuing Protocol (AMQP) [17], which are well-established
protocols in high-load projects.
It additionally provides

to compute resource-
intensive tasks in the cloud. Figure 1 illustrates the inter-
action process between the service and the clients.

tools

To separate the service from the client application, which
may be written in a different language and run on various
platforms, RUCS relies on the REST API protocol, which
is independent of the speciﬁc client application. Since the
application layer uses the service to transfer the data, the
RUCS does not depend on the communication layer, there-
fore working with any V2N technology.

The service contains two types of interactions:

• Properties: They can be requested via the service by
the client. When a property is requested from a nearby
vehicle, the service returns the correspondent value to
the client. A property, therefore, is data computed based
on a speciﬁc road user’s state.

• Actions: They include forwarding a message from the
client to a vehicle that made a request so that it can
react accordingly. In other words, requesting an action
is an explicit way of asking for something from another
road user.

The main target of the implemented RUCS platform is to
enable interactions between autonomous vehicles and other
road users, including vulnerable road users and manually-

The following subsections describe the stack of technolo-
gies, the basic requests, the relationships between tables and
the server-side algorithms of properties and actions.

Fig. 3. UML sequence diagram of a RUCS service and a client vehicle

A. Stack of technologies

In Figure 2, we present a simpliﬁed scheme of the tech-
nologies on which we relied to implement the proposed
service. The service worked on Python 3, Django framework
[18], and the Django-rest-framework [19] extension to signif-
icantly simplify the prototype development. PostgreSQL [20]
was selected as the database management system, as it is a
highly reliable solution that is well-integrated within Django.
To work with distributed data, we installed the PostGIS [21]
extension on top of PostgreSQL. We also used the key-
value database Redis [22] as a cache to reduce the load
from the PostgreSQL database. We utilized RabbitMQ [23]
as a message broker to transfer messages between clients.
RabbitMQ adopts the AMQP protocol, for message transmis-
sion of high-load applications. Afterwards, we implemented
the Celery [24] technology to compute resource-intensive
properties on third-party services. Celery relies on RabbitMQ
and Redis technologies. We then relied on Docker [25] as
a tool for containerization and virtualization to deploy the
service prototype. Finally, we selected Gunicorn [22] as a
web server gateway interface (WSGI) [26] and NGNIX [27]
as a web service.

Fig. 4. UML data model diagram of RUCS service

Vehicle states transferring. GPS data of the vehicle’s
user as well as other vehicle states can also be transmitted.
This information includes the state of the control system, the
engine, and the driver’s state (e.g. drowsiness) within a ﬁxed
interval. The service handles and logs the data for subsequent
properties calculation.

Neighbors request. A client application requests a list of
neighbors within a speciﬁed radius with a ﬁxed interval. For
each neighbor, the list includes information about their trip
ID, vehicle description, GPS data, and a set of properties and
actions, which the user can request from a neighbor.

Property or action request. The user can request a
property or an action of a speciﬁc neighbor. For that purpose,
the user sends a request with the neighbor’s trip id and
property or action of interest. If a property is requested, the
service computes its content based on previously stored states
from vehicles in the vicinity that are part of the request. In the
case of an action request, the service will send the requested
command to the listening topic of a requested neighbor. The
neighbor’s answer is then forwarded back to the user.

Trip completion. After having arrived at the destination,

the user sends a request to close the trip.
It is noteworthy that connected vehicles can eliminate the
need for the driver to interact with the service. A connected
automobile can take full responsibility for vehicle-service
communication and provide the driver with only high-level
information.

B. General data ﬂow

C. Database structure

Figure 3 shows the process for the data transmission after
a request has been performed. The request types are detailed
as follows:

User registration. It requires information about users’
credentials and vehicles. Users complete a web form, in
which they specify their vehicle model, year, plate number,
color, etc. To enhance data protection,
they also select
properties and actions, which other users can request from
the neighboring vehicles. After registration, the users get
access to the functionality of the RUCS.

Trip activation. The service operates with the trip id
instead of the user’s id to increase data privacy. The client
application sends a trip creation request when a user starts
to drive. The service returns two topics in response to the
trip creation request. One topic is for listening to messages
from the service and another one for sending events to it.

Figure 4 illustrates the RUCS data structure through a data
model diagram. The components are arranged as follows. A
user can have several vehicles. Each of them has a model,
year of manufacture, plate number, and a set of properties
and actions that the user selects from the list provided by
the service. The initially-selected properties and actions can
be requested by other users and will appear in the neighbors
request (see III-B). The user also has an unlimited number of
trips, which they create requesting a trip activation. All the
states the service receives from users are associated with their
activated trips, thus ensuring the data privacy of each user. It
is mandatory to provide the LocationState when updating the
VehicleState due to the fact that the RUCS service uses these
data for computing neighbors near the user’s vehicle. Other
states, such as the ControlState, are used only for property
computation. Therefore providing these states is optional,

Algorithm 2: Action Request Handler
Input: request, **kwargs # request properties
Output: response status code

1 property ← Property(∗ ∗ kwargs);
2 user key ← get user key(request);
3 if cache.exists(user key) then
4
5 else
6
7 end

topic ← Trip.get topic(user key);

topic ← cache.get topic(user key);

Fig. 5. UML class diagram of the property handler

and they are only transmitted if the client application has
access to the vehicle data.

D. Property and Actions

Algorithm 1: Property Request Handler
Input: **kwargs # request properties
Output: response in a JSON format
1 property ← Property(∗ ∗ kwargs);
2 handler ← get handler();
3 p value ← handler.run handler(property);
4 serializer ← get serializer();
5 if not serializer.is valid() then
return Response(serializer.error);
6
7 end
8 return Response(serializer.data);

To process a property request, we used the chain-of-
responsibility design pattern as described in Figure 5, which
allows the usage of several property handlers. Furthermore,
the handler can use composition with Celery task classes
to calculate resource-intensive tasks on third-party services.
This architecture makes it possible to balance the service load
and encapsulate the logic of handling properties from a client
as Algorithm 1 shows. It also deﬁnes an interface for third-
party companies to design particular properties and integrate
them into our service. The service uses RabbitMQ to forward
actions (see the action request handler in Algorithm 2). All
action requests pass through the service to hide the logic
implementation and the process validation. When the service
receives an action request, it retrieves a listening topic of the
requested vehicle from Redis and sends the action into the
retrieved topic. The requested vehicle receives the action,
executes it, and then responds, sending an action response
back to the requesting user via the service. This architecture
adds extra delays in the transmission of messages. However,
it allows us to encapsulate the logic of the transactions on
the service side and have a complete understanding of the
communications on the road.

8 if not topic then
return 400;
9
10 end
11 action ← get action(property)
rabbit.send(topic, action)

12 return 200;

Fig. 6.
represent the autonomous and manually-driven vehicle respectively.

Illustration of the scenario to conduct the ﬁeld text. A and B

IV. SYSTEM EVALUATION

The main goal of the RUCS platform is to enable commu-
nication between road users with different levels of automa-
tion. We evaluated the system to ﬁnd out potential delays
between requests and responses.

A. Field test scenario and conditions

To validate the proposed system we implemented a use
case in which a low-cost, smartphone-based Driver State
Monitoring System (DSMS) located in the manual-controlled
vehicle had gathered information regarding drowsiness [28]
and sent it to the cloud. We tested the message transfer
by conducting several ﬁeld tests in the ¨OAMTC Driving
Technology Centre in Marchtrenk, Upper Austria. Figure 7
shows the test track. Realistic urban trafﬁc conditions were
achieved by driving at approximately 50 km/h. The source
code of the RUCS platform is available. 1

The autonomous vehicle A drove in the left lane. Vehicle
B drove in the right lane and behind vehicle A (Figure 6).
Vehicle A had to turn right to exit the road and needed
therefore to perform a lane change. The driver in vehicle
B was controlled by a driver that presented signs of drowsy
driving. The autonomy of vehicle A was guaranteed by using
the research vehicle from the Chair for Sustainable Transport
the Johannes Kepler University in Linz
Logistics 4.0 at

1https://gitlab.com/intelligent-transportation-systems/

iamcv/communication_service

Fig. 7. Satellite view on the test track in ¨OAMTC Marchtrenk

Fig. 9. Screenshot of the two vehicles during the experiment

Fig. 8. Test client application for android cellphones used during the ﬁeld
test

(JKU-ITS) [29]. Figure 9 shows the two vehicles during the
ﬁeld test. The autonomous vehicle A (monitored constantly
by a team member) used the communication service to
request the state of the driver (drowsy/non-drowsy) in vehicle
B and perform the lane change accordingly. If the driver’s
state in vehicle B was drowsy, vehicle A would decelerate
or wait until vehicle B was in front to then change the
lane behind it. For the experiments, the service prototype
was deployed in the amazon web services cloud using the
Amazon Elastic Compute Cloud product for hosting and the
“t3a.large” virtual machine. The data center was located in
Frankfurt as it was the nearest location to the test track.

B. Client description

We used the “kivy” framework for android phones to
develop the client application. The application consisted
of two screens (Figure 8). The ﬁrst was a log-in page,
the second was implemented for interacting and visualizing
data from the server. After logging in and starting a trip,
the application simultaneously measured GPS coordinates,
transmitted them to RUCS, and requested neighbors from
the service. Neighbors were then displayed as red markers on
the user’s map. The drowsiness of a driver in a neighboring
vehicle could be requested simply by pressing the “request
drowsiness” button.
We additionally built an application for the JKU-ITS vehicle
by relying on The Robot Operating System (ROS). The ROS
node was implemented in python to allow reusability of the
code written for the android client application.
Each request to the server was logged into the applications’
local memory to evaluate the results of the experiment.
During the experiment, a connection to the server was
provided via 4G cellular networks. 4527 messages were
transferred to get a list of neighbors, 19776 messages were
to indicate the vehicles states and 93 “drowsiness”
sent

Fig. 10. GPS data from vehicles during the experiment. The square, round
and triangular signs represent the position of the vehicle A (in red) and
B (in blue) before, during and after the drowsiness driver’s state request
respectively. As and Ps show the speeds for the vehicle A and vehicle B,
respectively

Fig. 11. Distribution of the delays between the request and responds actions
from the service

Fig. 12. Distances traveled at a speed of 50 km/h. between the time a
request is sent and the response is received from the service

parameter requests were made. The time between request
and response was measured for each message, being all data
logged in the system.

V. RESULTS

The driven path for both vehicles is presented in Figure 10.
Initially, the autonomous vehicle A was slightly ahead of

the manually-driven vehicle B (square signs). After a few
seconds, the autonomous vehicle requested the drowsiness
state from the vehicle B (round signs), and the server returned
the correspondent value, in this case, low-level drowsiness.
Finally, the vehicle A changed the lane in front of the vehicle
B. The average time for a response from the service did not
exceed 0.25 seconds during the tests (Figure 11). Because
the vehicles had an approximate speed of 50 km/h, a delay
of 0.25 seconds equates to less than 3.5 meters of distance
travelled between request and response from the server
(Figure 12). A delay of 0.25 seconds was quick enough
for the service to be used comfortably as a communication
platform in the use case investigated. Since the difference
in the distribution of delays between the three requests was
small, it can be concluded that most of the delay was due to
the inherent delays in 4G cellular communication. Thus, it is
reasonable to assume that the response delay will decrease
in an environment with dense cellular coverage.

VI. CONCLUSION AND FUTURE WORK

The coexistence of self-driving and manually-controlled
vehicles is challenging and could negatively impact road
safety. To facilitate their interaction, we presented in this
paper a SaaS platform to enable communication between
non-automated vehicles and vehicles with any level of au-
tomation.

The validation results showed that

the time delays of
the service are low enough to not affect road situations in
which time is not a critical safety factor. With the increasing
improvement of cellular communication through 5G, these
delays will be reduced. Delays can be further reduced by
using a micro-service architecture in the application, which
would enable the service to handle large amounts of data.
Another improvement could be done by performing major
calculations in advance based on the state transfer event and
storing the results in a cache. Future work will target these
improvements and the validation of the performance of the
system under high load information.

ACKNOWLEDGMENT

This work was supported by the Austrian Science Fund
(FWF), within the project ”Interaction of autonomous and
manually-controlled vehicles (IAMCV)”, number P 34485-
N.

REFERENCES

[1] C. Olaverri-Monreal, “Promoting trust in self-driving vehicles,” Nature

Electronics, vol. 3, no. 6, pp. 292–294, 2020.

[2] A. Habibovic, J. Andersson, V. Malmsten Lundgren, M. Klingeg˚ard,
C. Englund, and S. Larsson, External Vehicle Interfaces for Commu-
nication with Other Road Users? Springer International Publishing,
2019.

[3] W. Moralez-Alvarez, M. ´Angel de Miguel, F. Garc´ıa, and C. Olaverri-
Monreal, “Response of vulnerable road users to visual information
from autonomous vehicles in shared spaces,” in 2019 IEEE Intelligent
Transportation Systems Conference (ITSC), 2019, pp. 3714–3719.
[4] C. Olaverri-Monreal, P. Gomes, R. Fernandes, F. Vieira, and M. Fer-
reira, “The see-through system: A vanet-enabled assistant for overtak-
ing maneuvers,” in 2010 IEEE Intelligent Vehicles Symposium, 2010,
pp. 123–128.

[5] W. Morales-Alvarez and C. Olaverri-Monreal, Autonomous Vehicles:
Vulnerable Road User Response to Visual Information Using an
Analysis Framework for Shared Spaces. River Publishers, 2020, pp.
83–108.

[6] W. Morales-Alvarez, F. Moreno, O. Sipele, N. Smirnov, and
C. Olaverri-Monreal, “Autonomous driving: Framework for pedestrian
intention estimation in a real world scenario,” in 2020 IEEE Intelligent
Vehicles Symposium (IV).

IEEE, 2020, pp. 39–44.

[7] M. ´A. de Miguel, D. Fuchshuber, A. Hussein, and C. Olaverri-Monreal,
“Perceived pedestrian safety: Public interaction with driverless vehi-
cles,” in 2019 IEEE Intelligent Vehicles Symposium (IV).
IEEE, 2019,
pp. 90–95.

[8] C. G. Burns, L. Oliveira, P. Thomas, S. Iyer, and S. Birrell, “Pedes-
trian decision-making responses to external human-machine interface
designs for autonomous vehicles,” in 2019 IEEE Intelligent Vehicles
Symposium (IV).

IEEE, 2019, pp. 70–75.

[9] S. Kitazaki and M. J. Myhre, “Effects of non-verbal communication
cues on decisions and conﬁdence of drivers at an uncontrolled inter-
section,” 2015.

[10] C. Olaverri-Monreal, M. Gvozdic, and B. Muthurajan, “Effect on
driving performance of two visualization paradigms for rear-end
collision avoidance,” in 2017 IEEE 20th International Conference on
Intelligent Transportation Systems (ITSC).
IEEE, 2017, pp. 77–82.
[11] C. Olaverri-Monreal, R. Lorenz, F. Michaeler, G. C. Krizek, and
M. Pichler, “Tailigator: Cooperative system for safety distance ob-
servance,” in 2016 International Conference on Collaboration Tech-
nologies and Systems (CTS).

IEEE, 2016, pp. 392–397.

[12] H. Zhou, W. Xu, J. Chen, and W. Wang, “Evolutionary V2X Technolo-
gies Toward the Internet of Vehicles: Challenges and Opportunities,”
Proceedings of the IEEE, vol. 108, no. 2, pp. 308–323, 2020.
[13] S. Bitam, A. Mellouk, and S. Zeadally, “VANET-cloud: A generic
cloud computing model for vehicular Ad Hoc networks,” IEEE Wire-
less Communications, vol. 22, no. 1, pp. 96–102, 2015.

[14] S. Garg, A. Singh, K. Kaur, G. S. Aujla, S. Batra, N. Kumar, and
M. S. Obaidat, “Edge Computing-Based Security Framework for Big
Data Analytics in VANETs,” IEEE Network, vol. 33, no. 2, pp. 72–81,
2019.

[15] E. Lee, E. K. Lee, M. Gerla, and S. Y. Oh, “Vehicular cloud net-
working: Architecture and design principles,” IEEE Communications
Magazine, vol. 52, no. 2, pp. 148–155, 2014.

[16] C. C. Lin, D. J. Deng, and C. C. Yao, “Resource Allocation in
Vehicular Cloud Computing Systems with Heterogeneous Vehicles and
Roadside Units,” IEEE Internet of Things Journal, vol. 5, no. 5, pp.
3692–3700, 2018.

[17] AMQP Working Group, “Advanced Message Queueing Protocol:

Protocol Speciﬁcation, version 0-9-1,” no. November, p. 39, 2008.

[18] W. S. Vincent, Django for professionals : production websites with

Python & Django.

Independently Published, 2019.

[19] Vincent, William S., Django for APIs Build web APIs with Python

and Django (2.2).

Independently Published, 2019.

[20] S. Riggs, G. Ciolli, and S. K. Meesala, PostgreSQL 11 Administration

enterprise databases. Packt Publishing Ltd., 2019.

[21] R. O. Obe and L. S. Hsu, PostGIS in Action. Simon and Schuster,

2011.

[22] J. L. Carlson, Redis in Action. Simon and Schuster, 2013.
[23] A. Videla and J. J. Williams, RabbitMQ in action: distributed mes-

saging for everyone. Manning, 2012.

[24] A.

Solem,

“Celery:

Distributed

task

queue,”

URL

http://docs.celeryproject.org/en/latest/index.html, 2013.

[25] D. Merkel, “Docker: lightweight linux containers for consistent de-
velopment and deployment,” Linux journal, vol. 2014, no. 239, p. 2,
2014.

[26] J. Gardner, The Web Server Gateway Interface (WSGI). Berkeley,

CA: Apress, 2009, pp. 369–388.

[27] D. Dejonghe, NGINX Unit Cookbook. O’Reilly Media, Inc, 2020.
[28] A. Allamehzadeh, J. U. de la Parra, A. Hussein, F. Garcia, and
C. Olaverri-Monreal, “Cost-efﬁcient driver state and road conditions
monitoring system for conditional automation,” in 2017 IEEE Intelli-
gent Vehicles Symposium (IV).

IEEE, 2017, pp. 1497–1502.

[29] N. Certad, W. Morales-Alvarez, G. Novotny, and C. Olaverri-Monreal,
“JKU-ITS automobile for research on autonomous vehicles”, Artiﬁcial
Intelligence and Data Mining for Intelligent Transportation Systems
and Smart Mobility workshop, EUROCAST 2022, Las Palmas de Gran
Canaria, Canary Islands, Spain,” 2022.

