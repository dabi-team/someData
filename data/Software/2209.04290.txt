2
2
0
2

g
u
A
5
1

]
E
S
.
s
c
[

1
v
0
9
2
4
0
.
9
0
2
2
:
v
i
X
r
a

Conformance Checking for Trace Fragments
Using Inﬁx and Postﬁx Alignments

Daniel Schuster1,2[0000−0002−6512−9580], Niklas F¨ocking1, Sebastiaan J. van
Zelst1,2[0000−0003−0415−1036], and Wil M. P. van der Aalst1,2[0000−0002−0955−6940]

1 Fraunhofer Institute for Applied Information Technology FIT, Germany
{daniel.schuster,niklas.foecking,sebastiaan.van.zelst}@fit.fraunhofer.de
2 RWTH Aachen University, Aachen, Germany
wvdaalst@pads.rwth-aachen.de

Abstract. Conformance checking deals with collating modeled process
behavior with observed process behavior recorded in event data. Align-
ments are a state-of-the-art technique to detect, localize, and quantify
deviations in process executions, i.e., traces, compared to reference pro-
cess models. Alignments, however, assume complete process executions
covering the entire process from start to ﬁnish or preﬁxes of process exe-
cutions. This paper deﬁnes inﬁx/postﬁx alignments, proposes approaches
to their computation, and evaluates them using real-life event data.

Keywords: Process mining · Conformance checking · Alignments.

1

Introduction

Information systems track the execution of organizations’ operational processes
in detail. The generated event data describe process executions, i.e., traces. Con-
formance checking [2] compares traces from event data with process models.
Alignments [8], a state-of-the-art conformance checking technique, are widely
used, e.g., for quantifying process compliance and evaluating process models.

Most conformance checking techniques relate complete traces, covering the
process from start to ﬁnish, to reference process models. Processes are often
divided into stages representing diﬀerent logical/temporal phases; thus, confor-
mance requirements can vary by stage. Conformance checking for trace fragments
covering conformance-critical phases is therefore useful. Also, event data often
needs to be combined from various data sources to analyze a process holistically.
Thus, conformance checking for trace fragments is valuable as complete traces
are not required. While there is the notion of preﬁx alignments [1], deﬁnitions
and calculation methods for inﬁx/postﬁx alignments do not yet exist.

This paper deﬁnes inﬁx/postﬁx alignments and presents their computation.
Fig. 1 outlines our contributions. The computation of inﬁx/postﬁx alignments
builds on existing work on calculating (preﬁx) alignments [1]. For (preﬁx) align-
ment computation, the synchronous product net (SPN) [1] is created that deﬁnes
the search space of the corresponding alignment computation, i.e., a shortest
path search. In this paper, we modify the SPN to adapt it for inﬁx/postﬁx

 
 
 
 
 
 
2

D. Schuster et al.

Fig. 1: Overview of our approach regarding inﬁx/postﬁx alignment computation

alignment computation by using an auxiliary process model (cf. Fig. 1) as input
instead of the reference process model. The actual search for the shortest path
in the state space of the SPN remains unchanged compared to (preﬁx) align-
ments apart from diﬀerent goal states. We propose two approaches to derive an
auxiliary process model. One assumes sound workﬂow nets [7], i.e., a subclass
of Petri nets often used to model business processes, and the second assumes
block-structured workﬂow nets, i.e., process trees, a subclass of sound WF-nets.
In the remainder of this paper, we present related work (Sect. 2), preliminar-
ies (Sect. 3), deﬁne inﬁx/postﬁx alignments (Sect. 4), present their computation
(Sect. 5), and evaluate the proposed computation (Sect. 6).

2 Related Work

We refer to [2,3] for overviews on conformance checking. Subsequently, we focus
on alignments [1,8], which provide a closest match between a trace and a valid ex-
ecution of a given process model. In [1,2] it is shown that alignment computation
can be reduced to a shortest path problem. Further improvements by using alter-
native heuristics during the search are proposed in [11]. However, the state space
of the shortest path problem can grow exponentially depending on the model
and the trace [2]. Therefore, approaches for approximating alignments exist, for
example, divide-and-conquer [6] and search space reduction approaches [10].

Alignments [1,8] are deﬁned for complete traces that are aligned to a complete
execution of a given process model. Additionally, preﬁx alignments exist [1],
which are, for example, utilized for online conformance checking [5]. In this
paper, we deﬁne inﬁx/postﬁx alignments and demonstrate their computation.
To the best of our knowledge, no related work exists on inﬁx/postﬁx alignments.

3 Background

Given a set X, a multiset B over X can contain elements of X multiple times.
For X={x, y, z}, the multiset [x5, y] contains 5 times x, once y and no z. The set

Paper‘sscopeCompleteTraceorTraceprefixCompletealignmentorPrefixalignmentTraceinfixorTracepostfixInfix alignmentorPostfix alignmentSynchronousproductnet(SPN)ExistingworkSynchronousproductnet(SPN)Auxiliary process model Alignment computation(i.e., shortestpathserachon thestatespaceoftheSPN1)1 Note that the goal states differ depending on whether complete, prefix, infix, or postfix alignments are calculated.(Reference)processmodelConformance Checking for Trace Fragments

3

p1

t1 p2
a

p3

t2
b

t3
c

t4
d

p4

p5

t5 p7
τ

p6

p8

t6
e

t7
f
t8
g

t10
h

p12

p11

p9

t9
τ

p10

Fig. 2: Example Petri net, i.e., a sound WF-net, modeling a process consisting of
activities a, . . . , h. The initial marking mi=[p1], and the ﬁnal marking mf =[p12].

of all possible multisets over a base set X is denoted by B(X). We write x∈B if
x is contained at least once in multiset B. Given two multisets b1, b2∈B(X), we
denote their union by B1 (cid:93) B2. Finally, given two sets containing multisets, i.e.,
B1, B2 ⊆ B(X), we deﬁne the Cartesian by B1×B2 = {b1(cid:93)b2 | b1∈B1 ∧ b2∈B2}.
For example, (cid:8)[a2, b], [c](cid:9)×(cid:8)[d3](cid:9) = (cid:8)[a2, b, d3], [c, d3](cid:9).

A sequence σ of length |σ|=n over a set X assigns an element to each index,
i.e., σ : {1, . . . , n}→X. We write a sequence σ as (cid:104)σ(1), σ(2), ..., σ(|σ|)(cid:105). The set
of all potential sequences over set X is denoted by X ∗. Given σ∈X ∗ and x∈X,
(cid:0)σ(i)=x(cid:1), e.g., b∈(cid:104)a, b(cid:105). Let σ∈X ∗ and let X (cid:48)⊆X. We
we write x∈σ if ∃1≤i≤|σ|
if x∈X (cid:48) and
recursively deﬁne σ↓X(cid:48) ∈X (cid:48)∗ with: (cid:104)(cid:105)↓X(cid:48) =(cid:104)(cid:105), ((cid:104)x(cid:105)·σ)↓X(cid:48) =(cid:104)x(cid:105)·σ↓X(cid:48)
1 , . . . , xm
((cid:104)x(cid:105)·σ)↓X(cid:48) =σ↓X(cid:48) if x /∈X (cid:48). For a sequence σ=(cid:104)(x1
n )(cid:105) ∈
(X1× . . . ×Xn)∗ containing n-tuples, we deﬁne projection functions π∗
1(σ)=(cid:104)x1
1,
. . . , xm
n (cid:105). For instance, π∗
2((cid:104)(a, b), (c, d), (c, b)(cid:105))=(cid:104)b, d, b(cid:105).
Event data describe the execution of business processes. An event log can be
seen as a multiset of process executions, i.e., traces, of a single business process.
We denote the universe of process activity labels by A. Further, we deﬁne a
complete/inﬁx/postﬁx trace as a sequence of executed activities, i.e., σ∈A∗.

n), . . . , (xm

1 (cid:105), . . . , π∗

n(σ)=(cid:104)x1

n, . . . , xm

1, . . . , x1

3.1 Process Models

Next, we introduce formalisms to model processes: Petri nets [7] and process
trees. Fig. 2 shows an example Petri net. Next, we deﬁne accepting Petri nets.

Deﬁnition 1 (Accepting Petri net). An accepting Petri net N = (P, T, F, mi,
mf , λ) consists of a ﬁnite set of places P , a ﬁnite set of transitions T , a ﬁnite set
of arcs F ⊆ (P ×T )∪(T ×P ), and a labeling function λ : T → A∪{τ }. We denote
the initial marking with mi ∈ B(P ) and the ﬁnal marking with mf ∈ B(P ).

In the remainder of this paper, we say Petri nets when referring to accepting
Petri nets. Given a Petri net N =(P, T, F, mi, mf , λ) and markings m, m(cid:48)∈B(P ),
if a transition sequence σ∈T ∗ leads from m to m(cid:48), we write (N, m) σ−→(N, m(cid:48)). If
m(cid:48) is reachable from m, we write (N, m)(cid:32)(N, m(cid:48)). Further, we write (N, m)[t(cid:105)
if t∈T is enabled in m. We let R(N, mi)={m(cid:48)∈B(P ) | (N, mi)(cid:32)(N, m(cid:48))} denote
the state space of N , i.e., all markings reachable from mi. In this paper, we
assume that process models are sound workﬂow nets (WF-nets) [7].

4

D. Schuster et al.

∧

×

→

n0

n1.4

n1.2

n2.3

d
n1.3

a
n1.1

Process trees represent block-structured
WF-nets, a subclass of sound WF-nets [4].
Fig. 3 shows an example tree modeling the
same behavior as the WF-net in Fig. 2.
Inner nodes represent control ﬂow oper-
ators, and leaf nodes represent activities.
Four operators exist: sequence (→), par-
allel (∧), loop ((cid:9)), and exclusive-choice
Fig. 3: Process tree T modeling the
(×). Next, we deﬁne process trees.
same process as the WF-net in Fig. 2
Deﬁnition 2 (Process Tree). Let (cid:76) ={→, ×, ∧, (cid:9)} be the set of operators. A
process tree T =(V, E, λ, r) consists of a totally ordered set of nodes V , a set of
edges E⊆V ×V , a labeling function λ:V →A∪{τ }∪ (cid:76), and a root node r∈V .
– (cid:0){n}, {}, λ, n(cid:1) with dom(λ)={n} and λ(n)∈A∪{τ } is a process tree
– given k>1 trees T1=(V1, E1, λ1, r1), . . . , Tk=(Vk, Ek, λk, rk) with r /∈V1∪ . . . ∪Vk

c
n2.2

e
n3.1

f
n3.2

b
n2.1

h
n1.5

n2.4

∧

g

and ∀i, j∈{1, . . . , k}(i(cid:54)=j ⇒ Vi∩Vj=∅) then T =(V, E, λ, r) is a tree s.t.:

• V =V1∪ . . . ∪Vk∪{r}
• E=E1∪ . . . ∪Ek∪(cid:8)(r, r1), . . . , (r, rk)(cid:9)
• dom(λ)=V with λ(x)=λj(x) for all j∈{1, . . . , k}, x∈Vj,

λ(r)∈ (cid:76), and λ(r)=(cid:9) ⇒ k=2

T denotes the universe of process trees. We refer to [4] for a deﬁnition of process
tree semantics. Given T =(V, E, λ, r)∈T , the child function cT :V →V ∗ returns
a sequence of child nodes, e.g., cT (n0)=(cid:104)n1.1, . . . , n1.5(cid:105), cf. Fig. 3. The parent
function pT :V (cid:57)V returns a node’s parent; e.g., p(n2.4)=n1.4. For n∈V , T (n)∈T
denotes the subtree with root n; e.g., T (n2.3) denotes the subtree rooted at node
n2.3 (cf. Fig. 3). For T ∈T , we denote its language-equivalent WF-net by N T .

3.2 Alignments

This section introduces alignments [1,2]. Fig. 4 shows an example for the WF-net
shown in Fig. 2 and trace σ=(cid:104)d, a, e, h(cid:105). An alignment’s ﬁrst row, i.e., the trace
part, equals the given trace if the skip symbol (cid:29) is ignored. The second row, i.e.,
the model part, equals a sequence of transitions (ignoring (cid:29)) leading from the
initial to the ﬁnal marking. An alignment is composed of moves, for instance,
each column in Fig. 4 represents a move; we distinguish four:

– synchronous moves indicate a match between the model and the trace,

– log moves indicate a mismatch, i.e., the current activity in the trace is

not replayed in the model,

– visible model moves indicate a mismatch, i.e., the model executes an

activity not observed in the trace at this stage, and

– invisible model moves indicate no real mismatch, i.e., a model move on

a transition labeled with τ .

Since we are interested in an alignment ﬁnding the closest execution of the model
to a given trace, the notion of optimality exists. An alignment for a model and
trace is optimal if no other alignment exist with less visible model and log moves.

Conformance Checking for Trace Fragments

5

d

(cid:29)

a
t1
(λ(t1)=a)

(cid:29)
t3
(λ(t3)=c)

(cid:29)
t2
(λ(t2)=b)

(cid:29)
t4
(λ(t4)=d)

(cid:29)

t5

e
t6
(λ(t6)=e)

(cid:29)
t7
(λ(t7)=f )

(cid:29)

t9

h
t10
(λ(t10)=h)

Fig. 4: Optimal alignment for the WF-net shown in Fig. 2 and σ=(cid:104)d, a, e, h(cid:105)

d
t4
(λ(t4)=d)

(cid:29)

t5

g
t8
(λ(t8)=g)

b
t2
(λ(t2)=b)

d
t4
(λ(t4)=d)

(cid:29)

t5

f
t7
(λ(t7)=f )

(a) Inﬁx alignment for σ=(cid:104)d, g(cid:105)
g
t8
(λ(t8)=g)

(cid:29)
t10
(λ(t10)=h)

d
t4
(λ(t4)=d)

a

(b) Inﬁx alignment for σ=(cid:104)b, d, f (cid:105)
g
t8
(λ(t8)=g)

(cid:29)
t10
(λ(t10)=h)

d
t4
(λ(t4)=d)

(cid:29)

(c) Postﬁx alignment for σ=(cid:104)d, g(cid:105)

(d) Postﬁx alignment for σ=(cid:104)a, d, g(cid:105)

Fig. 5: Optimal inﬁx and postﬁx alignments for the WF-net shown in Fig. 2

4

Inﬁx and Postﬁx Alignments

This section deﬁnes inﬁx and postﬁx alignments. Inﬁx alignments align a given
trace inﬁx against an inﬁx of the WF-net’s language. Thus, the model part of an
inﬁx alignment starts at some reachable marking from the given WF-net’s initial
marking and ends at an arbitrary marking. Fig. 5 depicts two inﬁx alignments for
the WF-net shown in Fig. 2. As for alignments, the ﬁrst row of an inﬁx alignment
corresponds to the given trace inﬁx (ignoring (cid:29)). The second row corresponds
to a ﬁring sequence (ignoring (cid:29)) starting from a WF-net’s reachable marking.
Postﬁx alignments follow the same concept as inﬁx alignments. A postﬁx
alignment’s model part starts at a reachable marking but ends at the WF-net’s
ﬁnal marking. Fig. 5 shows examples of postﬁx alignments for the WF-net shown
in Fig. 2. As for alignments, the notion of optimality applies equally to inﬁx and
postﬁx alignments. Next, we deﬁne complete, inﬁx, and postﬁx alignments.

Deﬁnition 3 (Complete/inﬁx/postﬁx alignment). Let σ∈A∗ be a com-
plete/inﬁx/postﬁx trace, N =(P, T, F, mi, mf , λ) be a WF-net, and (cid:29) /∈A∪T . A
sequence γ∈(cid:0)(A∪{(cid:29)}) × (T ∪{(cid:29)})(cid:1)∗
is an complete/inﬁx/postﬁx alignment if:
1. σ=π∗

1(γ)↓A

2. – Complete alignment: (N, mi)

π∗
2 (γ)↓T
−−−−−→ (N, mf )

– Inﬁx alignment:
(N, mi) (cid:32) (N, m1)
– Postﬁx alignment:
π∗
2 (γ)↓T
(N, mi) (cid:32) (N, m1)
−−−−−→ (N, mf ) for m1∈R(N, mi)
(cid:0)λ(t)(cid:54)=a ⇒ (a, t) /∈γ(cid:1)
3. ((cid:29), (cid:29)) /∈γ ∧ ∀a∈A,t∈T

π∗
2 (γ)↓T
−−−−−→ (N, m2) (cid:32) (N, mf ) for m1, m2∈R(N, mi)

6

D. Schuster et al.

5 Computing inﬁx/postﬁx alignments

The given reference process model cannot be immediately used to compute in-
ﬁx/postﬁx alignments because it requires starting in the initial marking mi.
Thus, our approach (cf. Fig. 1) constructs an auxiliary process model.

Reconsider the second requirement of the inﬁx/postﬁx alignments deﬁnition.
For both inﬁx/postﬁx alignments, the model part starts with a transition enabled
in marking m1 that is reachable from the initial marking mi. Hereinafter, we
refer to candidate markings for m1 (cf. Def. 3) as relevant markings. The central
question is how to eﬃciently calculate relevant markings that might represent
the start of an inﬁx/postﬁx alignment in its model part. Below, we summarize
our overall approach for inﬁx/postﬁx alignment computation.
1. Calculate relevant markings in the given WF-net that may represent the
start of the inﬁx/postﬁx alignment in the model part, cf. m1 in Def. 3.

2. Create the auxiliary WF-net using the relevant markings (cf. Def. 4).
3. Create the SPN using the auxiliary WF-net and the given trace inﬁx/postﬁx.
4. Perform a shortest path search on the SPN’s state space with corresponding

goal markings, i.e., goal states regarding the shortest path search.

– Inﬁx alignment: goal markings contain the last place of the SPN’s

trace net part

– Postﬁx alignment: standard ﬁnal marking of the SPN [1,2]

5. Inﬁx/postﬁx alignment post-processing: removal of the invisible model move
that results from using the auxiliary WF-net instead of the original WF-net.
The ﬁrst two steps are essential, i.e., the generation of the auxiliary WF-net. The
subsequent SPN generation remains unchanged compared to alignments [1,2].
Likewise, the shortest path search on the SPN’s state space is unchanged com-
pared to alignments; however, the goal marking(s) diﬀer, see above. Subse-
quently, we present two approaches for constructing the auxiliary WF-net.

5.1 Baseline Approach for Auxiliary WF-net Construction

This section presents a baseline approach for constructing the auxiliary WF-net.
This approach assumes a sound WF-net N =(P, T, F, mi, mf , λ) as reference pro-
cess model. As sound WF-nets are bounded [9], their state space is ﬁnite. Thus,
we can list all reachable markings R(N, mi)={m1, . . . , mn}; the baseline ap-
proach considers all reachable markings as relevant markings. Given N , the
baseline approach adds a new place p0, representing also the new initial marking
[p0], and n silent transitions allowing to reach one of the markings {m1, . . . , mn}
from [p0]. Thus, when constructing the corresponding SPN using the auxiliary
WF-net, it is possible from the SPN’s initial marking to execute a transition
representing an invisible model move that marks the model part at some reach-
able marking m1 (cf. Def. 3). Fig. 6 shows the auxiliary WF-net of the WF-net
shown in Fig. 2. Below we generally deﬁne the auxiliary WF-net for a given set
of relevant markings. Note that for the auxiliary WF-net constructed by the
baseline approach, the set of relevant markings {m1, . . . , mn} = R(N, mi).

Conformance Checking for Trace Fragments

7

t(cid:48)
7
τ

t5 p7
τ

p6

p8

t(cid:48)
9
τ
t(cid:48)
8
τ
t6
e

t7
f

g
t8

p9

t9
τ

p10

t(cid:48)
10
τ

t(cid:48)
11
τ

p11

t10
h

t(cid:48)
12
τ

p12

t(cid:48)
2
τ
t1 p2
a
t(cid:48)
3
τ

p3

t(cid:48)
4
τ
t2
b

t3
c
t(cid:48)
5
τ

p4

p5

t4
d

t(cid:48)
6
τ

p(cid:48)
0

t(cid:48)
1
τ

p1

Fig. 6: Auxiliary WF-net constructed using the baseline approach (Sect. 5.1) of
the WF-net shown in Fig. 2. Red elements are not contained if the baseline
approach with subsequent ﬁltering is used (for the example inﬁx σ=(cid:104)b, d, f (cid:105)).

Deﬁnition 4 (Auxiliary WF-net). Let N =(P, T, F, mi, mf , λ) be a WF-net
and {m1, . . . , mn}⊆R(N, mi) be the given set of relevant markings. We deﬁne
the auxiliary WF-net N (cid:48) = (P (cid:48), T (cid:48), F (cid:48), m(cid:48)

i, m(cid:48)

f , λ(cid:48)) with:

0 /∈ P )

– P (cid:48) = P ∪ {p(cid:48)
– T (cid:48) = T ∪ {t(cid:48)
– F (cid:48) = F ∪ {(p(cid:48)
– m(cid:48)
i = [p(cid:48)
– λ(cid:48)(tj)=λ(tj) for all tj∈T and λ(cid:48)(t(cid:48)

0} (assuming p(cid:48)
j | 1≤j≤n}
0, t(cid:48)
0] and m(cid:48)

j) | 1≤j≤n} ∪ {(t(cid:48)
f = mf

j, p) | 1≤j≤n ∧ p∈mj}

j)=τ for all t(cid:48)

j∈T (cid:48)\T

When creating the SPN using the auxiliary WF-net and a given trace in-
ﬁx/postﬁx, the added transitions in the auxiliary WF-net correspond to invisible
model moves. For example, reconsider the inﬁx alignment in Fig. 5a. The inﬁx
alignment for σ=(cid:104)d, g(cid:105) and auxiliary WF-net shown in Fig. 6 returned after step
5. As this invisible model move on t(cid:48)
4 contains an invisible model move on t(cid:48)
5
is the result of using the auxiliary WF-net instead of the original WF-net for
which we calculate an inﬁx/postﬁx alignment, we must remove it, i.e., Step 5.

Improved Baseline by Subsequent Filtering Instead of considering all
reachable markings as relevant markings, we ﬁlter markings not enabling tran-
sitions whose labels are contained in the given inﬁx/postﬁx σ. Reconsider the
auxiliary WF-net shown Fig. 6; red elements are not included if subsequent ﬁl-
tering is used for the example inﬁx σ=(cid:104)b, d, f (cid:105). For instance, t(cid:48)
1 is not included,
as the marking reached [p1] only enables t1 with λ(t1)=a /∈σ. Below, we deﬁne
the relevant markings for a WF-net N =(P, T, F, mi, mf , λ) and inﬁx/postﬁx σ.

(cid:8)m∈R(N, mi) | ∃t∈T

(cid:0)(N, m)[t(cid:105) ∧ λ(t)∈σ(cid:1)(cid:9) ∪ (cid:8)mf

(cid:9)

Note that the auxiliary WF-net constructed by the baseline approach without
ﬁltering is independent of the provided trace inﬁx/postﬁx. However, the auxiliary

8

D. Schuster et al.

p(cid:48)
0

p1

t1 p2
a
t(cid:48)
3
τ

p3

t5 p7
τ

p6

p8

t2
b

t3
c
t(cid:48)
5
τ

t4
d

p4

p5

t(cid:48)
8
τ
t6
e

t7
f

g
t8

t(cid:48)
12
τ

p12

t10
h

p11

p9

t9
τ

p10

Fig. 7: Auxiliary WF-net constructed using the advanced approach (cf. Sect. 5.2)
for the block-structured WF-net shown in Fig. 2 and the inﬁx σ=(cid:104)b, d, f (cid:105)

WF-net constructed by the baseline plus subsequent ﬁltering depends on the
provided model and the trace inﬁx/postﬁx.

5.2 Advanced Auxiliary WF-net Construction for Process Trees

This section introduces an advanced approach for constructing an auxiliary WF-
net from a given block-structured WF-net, i.e., a process tree. Compared to the
baseline, the advanced approach aims to reduce the number of relevant markings.
Further, the advanced approach determines relevant markings directly instead
of computing all reachable markings and subsequently ﬁltering (cf. Sect. 5.1).

Assume the WF-net from Fig. 2 and the inﬁx/postﬁx σ=(cid:104)b, d, f (cid:105). Reconsider
the auxiliary WF-net shown in Fig. 6; jumping to marking [p2, p3] within the
model using the transition t(cid:48)
2 does not make sense if we can also jump to marking
[p2, p5]. From [p2, p3] we can replay b and c. However, we need to replay b accord-
ing to σ. Thus, we would always favor the marking [p2, p5] over [p2, p3] since in
the latter one we have to eventually execute c after executing the b to proceed.
Hence, transition t(cid:48)
2 allowing to jump to [p2, p3] is not needed when computing
an optimal inﬁx/postﬁx alignment for (cid:104)b, d, f (cid:105). The proposed auxiliary WF-net
construction in this section is exploiting such conclusions.

Fig. 7 shows the auxiliary WF-net that is generated by the advanced ap-
proach. The shown auxiliary WF-net is speciﬁc for the WF-net shown in Fig. 2
and the inﬁx/postﬁx σ = (cid:104)b, d, f (cid:105). Compared to the auxiliary WF-net generated
by the baseline approach (cf. Fig. 6), the one shown in Fig. 7 contains less silent
transitions; leading to a reduced state space of the corresponding SPN. To com-
pute the relevant markings, the advanced approach systematically traverses the
given process tree as speciﬁed in Alg. 1, which internally calls Alg. 2 and Alg. 3.

Restriction to Submodel In addition to the described approach, we can
further reduce the size of the auxiliary WF-net if we compute inﬁx alignments.
For a process tree T , we determine the minimal subtree that contains all leaf
nodes whose labels are contained in the given trace inﬁx. Since the other subtrees

Conformance Checking for Trace Fragments

9

Algorithm 1: Calculating relevant markings for process trees

input : T =(V, E, λ, r)∈T , σ∈A∗
output: M ⊆ B(P T )
begin

M ← {};
let N T = (P T , T T , F T , mT
A ← {a | a∈A ∧ a∈σ};
forall n ∈ {n | n∈V ∧ λ(n)∈A} do

M ← M ∪ BuMG(cid:0)T, n, null, N T , ∅, A(cid:1);

// initialize the set of markings for the auxiliary WF-net
i , mT

f , λT ) be the corresponding WF-net of T ;

// store all activity labels from σ in the set A
// iterate over leaves whose label is in σ
// call BuMG for each leaf n

return M ∪ {mT

f };

// mT

f is needed for postfix alignments to ensure that the

entire model is skippable (i.e., postfix alignment contains log moves only)

Algorithm 2: Bottom-up marking generation (BuMG)
input : T =(V, E, λ, r)∈T , n∈V, n(cid:48)∈V, N T =(P T , T T , F T , mT
i , mT

f , λT )∈N ,

M ⊆B(P T ), A⊆A

output: M ⊆B(P T )
begin

if λ(n) ∈ A then

// n is a leaf node of T

let t ∈ T T be the transition representing n ∈ V ;
M ← {[p ∈ •t]};

else if λ(n) = ∧ then

S ← (cid:104)s1, . . . , sk(cid:105) = cT (n)↓
forall sj ∈ S do

V \{n(cid:48) }

;

Msj ← TdMG(cid:0)T (sj ), N T (sj ), A, true(cid:1);

// initialize M with a marking enabling t
// n represents a parallel operator
// S ∈ V ∗ contains the siblings of n(cid:48)

M ← M × Ms1 × · · · × Msk ;

// Cartesian product because λ(n) = ∧

if r = n then

return M ;

// node n is the root node of T

M ← BuMG(cid:0)T , pT (n), n, N T , M , A(cid:1);

// call BuMG on n’s parent

Algorithm 3: Top-down marking generation (TdMG)

input : T =(V, E, λ, r)∈T , N T =(P T , T T , F T , mT
addFinalMarking∈{true, false}

i , mT

f , λT )∈N , A⊆A,

output: M ⊆B(P T )
begin

if λ(r) ∈ A then

let t ∈ T T be the transition representing r;
M ← ∅;
if λ(r) ∈ A then

// r is a leaf node

M ← M ∪ {[p ∈ •t]};

// t’s label is in the given trace infix/postfix

if addFinalMarking = true then

M ← M ∪ {[p ∈ t•]};

return M ;

else

S ← (cid:104)s1, . . . , sk(cid:105) = cT (r);
if λ(r) =→ then

// r represents an operator
// S contains all children of the root node r

return TdMG(cid:0)T (s1), N T (s1), A, false(cid:1) ∪ · · · ∪ TdMG(cid:0)T (sk−1), N T (sk−1),
A, false(cid:1) ∪ TdMG(cid:0)T (sk), N T (sk ), A, addFinalMarking(cid:1);

if λ(r) = ∧ then

return TdMG(cid:0)T (s1), A, N T (s1 ), true(cid:1) × · · · × TdMG(cid:0)T (sk), N T (sk ), A,
true(cid:1);

if λ(r) ∈ {(cid:9), ×} then

return TdMG(cid:0)T (s1), N T (s1), A, addFinalMarking(cid:1) ∪ TdMG(cid:0)T (s2), N T (s2 ),
A, false(cid:1) ∪ · · · ∪ TdMG(cid:0)T (sk), N T (sk ), A, false(cid:1);

1

2

3

4

5

1

2

3

4

5

6

7

8

9

10

11

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

10

D. Schuster et al.

(a) BPI Ch. 2019 event log

(b) BPI Ch. 2020 event log

Fig. 8: Time spent for computing inﬁx alignments, i.e., Step 1-5 (cf. Sect. 5)

do not contain leaf nodes relevant for the given inﬁx, we can ignore them3. Next,
we call Alg. 1 for the determined subtree and execute the auxiliary WF-net for
the determined subtree and the corresponding relevant markings.

6 Evaluation

This section presents an evaluation of the inﬁx alignment computation. We use
real-life, publicly available event logs. We sampled 10,000 inﬁxes per log. Further,
we discovered a process model using the entire log with the inductive miner
infrequent [4]. The implementation and further results can be found online4.

Regarding the correctness of the proposed approaches: Baseline, Baseline +
subsequent ﬁltering and the Advanced approach, we compare the cost of the
computed inﬁx alignments. As the baseline approach considers all reachable
markings as relevant, it is guaranteed that no other relevant markings exist. Per
trace inﬁx, we ﬁnd that all approaches yield inﬁx alignments with identical costs.
Fig. 8 shows the overall time spent for the alignment computation, i.e., Step 1
to 5 (cf. Sect. 5). We ﬁnd that using the advanced approach signiﬁcantly shortens
the overall alignment calculation time compared to the baseline approaches be-
cause the auxiliary WF-net produced by the advanced approach contains fewer
silent transitions than the one created by the baseline approach.

7 Conclusion

This paper extended the widely used conformance checking technique alignments
by deﬁning inﬁx and postﬁx alignments. We presented two approaches for com-
puting them, i.e., a baseline approach and an advanced approach assuming pro-
cess trees as a reference model. Our results indicate that the advanced approach
outperforms the baseline if the reference process model is block-structured.

3 Note that if the determined subtree is placed within a loop, the subtree containing

the highest loop and the initial determined subtree has to be considered

4 https://github.com/ﬁt-daniel-schuster/conformance checking for trace fragments

                                       , Q I L [  / H Q J W K     & R Q V X P H G  7 L P H   L Q  V H F R Q G V  % D V H O L Q H % D V H O L Q H    V X E V H T X H Q W  I L O W H U L Q J $ G Y D Q F H G                        , Q I L [  / H Q J W K          & R Q V X P H G  7 L P H   L Q  V H F R Q G V  % D V H O L Q H % D V H O L Q H    V X E V H T X H Q W  I L O W H U L Q J $ G Y D Q F H GConformance Checking for Trace Fragments

11

References

1. Adriansyah, A.A.: Aligning observed and modeled behavior. Ph.D. thesis (2014)
2. Carmona, J., van Dongen, B., Solti, A., Weidlich, M.: Conformance Checking.

Springer (2018)

3. Dunzer, S., Stierle, M., Matzner, M., Baier, S.: Conformance checking: A state-of-
the-art literature review. In: Proceedings of the 11th International Conference on
Subject-Oriented Business Process Management. ACM Press (2019)

4. Leemans, S.J.J.: Robust Process Mining with Guarantees. Springer (2022)
5. Schuster, D., van Zelst, S.J.: Online Process Monitoring Using Incremental State-
Space Expansion: An Exact Algorithm. In: Business Process Management. Springer
(2020)

6. Taymouri, F., Carmona, J.: A Recursive Paradigm for Aligning Observed Behavior
of Large Structured Process Models. In: Business Process Management. Springer
(2016)

7. van der Aalst, W.M.P.: The Application of Petri Nets to Workﬂow Management.

Journal of Circuits, Systems and Computers (1998)

8. van der Aalst, W.M.P., Adriansyah, A., van Dongen, B.: Replaying history on
process models for conformance checking and performance analysis. WIREs Data
Mining and Knowledge Discovery (2012)

9. van der Aalst, W.M.P., van Hee, K.M., ter Hofstede, A.H.M., Sidorova, N., Verbeek,
H.M.W., Voorhoeve, M., Wynn, M.T.: Soundness of workﬂow nets: classiﬁcation,
decidability, and analysis. Formal Aspects of Computing (2011)

10. van Dongen, B., Carmona, J., Chatain, T., Taymouri, F.: Aligning Modeled and
Observed Behavior: A Compromise Between Computation Complexity and Qual-
ity. In: Advanced Information Systems Engineering. Springer (2017)

11. van Dongen, B.F.: Eﬃciently Computing Alignments. In: Business Process Man-

agement. Springer (2018)

