9
1
0
2

n
u
J

7
2

]

V
C
.
s
c
[

1
v
3
1
2
2
1
.
6
0
9
1
:
v
i
X
r
a

On the notion of number in humans and
machines

Norbert Bátfai1,*, Dávid Papp2, Gergő Bogacsovics1, Máté Szabó1,
Viktor Szilárd Simkó1, Márió Bersenszki1, Gergely Szabó1, Lajos
Kovács1, Ferencz Kovács1, and Erik Szilveszter Varga1

1Department of Information Technology, University of Debrecen,
Hungary
2Department of Psychology, University of Debrecen, Hungary
*Corresponding author: Norbert Bátfai,
batfai.norbert@inf.unideb.hu

July 1, 2019

Abstract

In this paper, we performed two types of software experiments to study
the numerosity classiﬁcation (subitizing) in humans and machines. Ex-
periments focus on a particular kind of task is referred to as Semantic
MNIST or simply SMNIST where the numerosity of objects placed in an
image must be determined. The experiments called SMNIST for Humans
are intended to measure the capacity of the Object File System in humans.
In this type of experiment the measurement result is in well agreement
with the value known from the cognitive psychology literature. The ex-
periments called SMNIST for Machines serve similar purposes but they
investigate existing, well known (but originally developed for other pur-
pose) and under development deep learning computer programs. These
measurement results can be interpreted similar to the results from SM-
NIST for Humans. The main thesis of this paper can be formulated as
follows: in machines the image classiﬁcation artiﬁcial neural networks can
learn to distinguish numerosities with better accuracy when these nu-
merosities are smaller than the capacity of OFS in humans. Finally, we
outline a conceptual framework to investigate the notion of number in
humans and machines.

Keywords: numerosity classiﬁcation, object ﬁle system, machine learning,

MNIST, esport.

1

Introduction

In the movie Rain Man, there is a scene in which Dustin Hoﬀman as the autistic
Raymond Babbitt can count the exact number of toothpicks on the ﬂoor in the
blink of an eye. This scene gave the idea to implement it as a machine learning
example. However to simplify this task we do not count toothpicks but dots

1

 
 
 
 
 
 
in images. Let us compare this with the classical machine learning problem
of recognizing MNIST handwritten digit of numbers [LBBH98], [LCB]. In the
classical MNIST task, a typical classiﬁer program takes images of handwritten
digits and recognizes them. An own image of the digit 8 can be seen in Fig. 1a.
The semantic MNIST, or shortly called SMNIST, program does not take
images of digits but images that contain less than 10 dots. An image of 8 dots
is shown in Fig 1b.

(a) If the MNIST classiﬁer takes
this image of the digit 8 then it
will say it’s 8.

(b) Provided the SMNIST classi-
ﬁer takes this image of 8 dots then
it should say it’s 8.

Figure 1: Two typical input images for MNIST and SMNIST.

1.1 Cognitive Neuropsychological and Computer Science

Background and Aims

The research of the biological and psychological factors behind the numerical
abilities originate from the 1930-s. This extraordinary ability was studied from
many angles. In insects, like the honeybee for example, there was found, that
they can identify, and by that, count up to four diﬀerent landmarks, for food re-
ward [DVS08]. In the neuropsychological literature there are two main topics of
this type of research, which are the OFS (Object File System or its synonyms like
Subitizing, Object Tracking System or Parallel Individuation System) and the
ANS (Analogue Number System, Approximate Number System or also known as
Analog Magnitude System) [DN16], [Nie16], [Gea00], [Gea95], [Hyd11], [FDS04],
[FCH02]. The OFS includes the so-called “numerosity”, which is an ability, when
someone just by looking at an object, without counting, can tell exactly how
much of that given object is present. The maximum length of this ability in
humans is up to four diﬀerent objects, for a lifetime [Gea00], [Gea95]. There-
fore the OFS is a system, that helps us to determine the numerosity for a small
quantity of items (maximum four), by using diﬀerent markers for each object
[DN16]. There were many research made with vertebrates (like, for example,
cats [RKRC70], [DP88] chimpanzees [BB89], [DM82] or parrots [Pep10]), in
which researchers studied the biological and evolutionary features for this par-
ticular ability. There are many research, that studied this ability in infants
[SD83], [Sta92], [SSSG83], [SSSG90], [Tri92], [VLS90]) and proved the early, in-
nate presence of numerosity [Gea95]. The ANS is a system that is present in a
large scale of animals, and humans alike; this helps us to determine the numeros-
ity of a small group of monitored objects, without using, or needing any kind of
symbol- or language system. In the course of the biological development, this
system is able to advance, and it can be looked at as a main foundation-stone
for the progression of the numerical thinking [PIP+04], [PPLBD07], [Pia10]. In

2

many cases mathematical simulation models have proven fruitful in cognitive
neuropsychology research, for example [DC93] planned a simulation of a natu-
ral neural architecture, where the distance [MDM80] and size eﬀect [FBAH66]
can be measured. But pure mathematical models are not really rare either.
For example [vOGV82] can explain the measured capacity of OFS. The systems
OFS and ANS of processing numbers clearly have evolutionary roots [DDLC98],
[VF04].
In this light, it should be noticed that while they have presumably
evolved over many hundreds of millions of years [Nie16], the mathematics has
been developed over just a few thousand years. Of course it is still possible that
mathematics has evolutionary roots, see the example about Newton’s second
law of [Sza00, 1674] or Darwinian neurodynamics [SZF+17].

From the viewpoint of computer science, the numerical abilities of comput-
In today’s digital computers,
ers are of analogue or digital nature [Neu58].
numbers are represented in either ﬁxed point or ﬂoating point format [Knu97].
Obviously, in contrast with previously cited neuropsychological systems, the
numerical fundamentals of computers are fully known because they have been
developed as results of targeted research and engineering processes as it has
also been mentioned by McCulloch in [vN63, 319]. But it should be noticed
that it will not be necessarily true for systems that include some deep learning
black box AI [Cas16] elements. With this paper we would like to try to extend
the above non-exhaustive listing of the cited works from vertebrates through
human infants to include such items as that study numerosity classiﬁcation in
machine learning computer programs. In another context, this process has al-
ready begun. For example, see https://rodrigob.github.io/are_we_there_
yet/build/classification_datasets_results.html that presents the cur-
rent state of the art in several standard machine learning tasks. The listed
models and their implementations are typically based on artiﬁcial neural net-
works (ANNs) like convolutional neural network (ConvNet or CNN) [LBD+89],
[ZF13] or multilayer perceptron (MLP). We will run some of these well known,
for example MNIST [LBBH98] or CIFAR-10 [Kri09], programs in the second
part of this paper. Nowadays, deep learning and artiﬁcial neural networks have
already surpassed the human performance in several areas like, for example,
playing old computer games [MKS+15], playing GO [SSS+17], playing Quake
III Arena Capture the Flag [JCD+18] or playing Starcraft [VEB+17]. These
three cited milestone works use reinforcement learning. There are many early
roots of the success of these projects and deep machine learning in general.
Such as the dataﬂow programming paradigm [Kah74], the mathematical model
of a neuron [MP43] or the concept of the perceptron [Ros58]. By now all key
players in AI industry have their own frameworks for researching AGI (Ar-
tiﬁcial General Intelligence), for example, Microsoft uses MALMO-Minecraft
[MKTD16], Google uses DeepMind Lab-Quake III Arena [BLT+16] and so on,
see [HOBB+17]. The games serve as basis of these artiﬁcial environments are
(or were) typically famous and popular computer games. Finally it should be
noted that the Lamarckian evolutionary approach has already been arisen in
this ﬁeld as well [JDO+17], [ACT19].

The research experiments undertaken in this paper are divided into two main
sections. The ﬁrst one is the Semantic MNIST for Humans and the second one is
the Semantic MNIST for Machines. While the aim of the experiment Semantic
MNIST for Humans is clearly to investigate the capacity of OFS, the purpose
of the experiment Semantic MNIST for Machines is less clear: we introduce a

3

standard benchmark and several datasets of images for it. We would like to
investigate the numerosity classiﬁcation abilities of deep learning programs that
originally developed for other purpose. A similar work can be found in [WZS18]
where the notion of number in machines is investigated. If we compare it to our
research we can see that our subitizing problem is simpler than theirs. Our more
distant and utopian goal is to create a computer program that would be able
to simulate the cognitive evolution of numbers, in the sense of Merlin Donald
[Don91], and would be able to develop some kind of notion of number.

2 Semantic MNIST for Humans

The Android mobile application called “SMNIST for Humans” is a benchmark
program intended to investigate the capacity of the parallel individuation system
in humans. It is available in source code form from the GitLab project [Bát19b]
under the directory forHumans/SMNISTforHumansExp3. But as a built APK ﬁle
it can also be downloaded and installed directly on Android devices from http:
//smartcity.inf.unideb.hu/~norbi/SMNIST/SMNISTforHUMANS/Exp3/.

(b) This ﬁgure shows a screenshot of “SMNIST
for Humans, Experiment 3” edition in action.
The program displays (below in the second row)
the changing of levels and the mean of numerosi-
ties of dots in addition (in the ﬁrst row) the mil-
lisecond values corresponded to the changing of
levels. Further precise details can be found in
text.

(a) A ﬁrst
rapid
prototype for test-
ing “gaming experi-
ence” with SMNIST
for Humans.
At
each step of running
the program, a ran-
dom number of dots
are drawn into the
central circle which
numerosity must be
detected by touch-
ing the appropriate
smaller circle of nu-
merical digits.

Figure 2: SMNIST for Humans screenshots.

As it can be seen in Fig. 2a, the program draws a given number of dots

4

on the screen then the user must touch the appropriate numerical digit within
a certain time window. The players start at level 3 where 0, 1 or 2 dots can
appear randomly on the screen. If players can detect the right number of dots
for 10 consecutive times then they will move to the next level of the benchmark
program. The achieved levels are indicated in the second row of numbers shown
in Fig. 2b. Here the (9) 4/0 5/1 6/2 7/2 8/2 9/2 0/0 <0.14078243> row tells
that the actual level (between round brackets) is 9. The 4/0 indicates that at
the event of changing level from 3 to 4, the integer part of the mean of the
randomly picked 10 (consecutive successfully detected) integers (numerosities
of dots) was 0. This is possible, for example, if the ten consecutive successfully
detected numerosities are the following respectively 0, 0, 2, 1, 1, 1, 0, 1, 2, 1
where the integer part of the mean (0+0+2+1+1+1+0+1+2+1)/10 is equal to
0. At changing from level 4 to 5 it was 1, from level 5 to 6 it was 2 and so on.
Finally, the 0/0 shows that the player has not unlocked the level 10 yet. The
last value between angle brackets is equal to the heuristic value (cid:80)level
(li+1)(i+1)
i=3
si
where li denotes the mean of numerosities of dots of i-th level changing and si
is the millisecond value corresponded to the level changing. These millisecond
values are displayed in the ﬁrst row of numbers. The computed heuristic value
serves only as a simple gamiﬁcation element of the benchmark program. The
greater this value the greater the performance of the player.

Fig. 3 shows our measurement results. These results are in accordance with
the well known observations from the cognitive psychology literature [Gea00],
[Hyd11], [FDS04], [FCH02] that the capacity of the parallel individuation system
in humans is smaller than 4.
It is demonstrated well by Fig. 3 where the
measured average of the integer parts of means of randomly picked (and of
course consecutive successfully detected) 10 integers is lagging far behind the
theoretical expected value of the mean of randomly picked 10 integers from 0
to level-2, inclusive, that simply grows linearly with level, namely it is equal to
(level − 2)/2 (where level starts from 4) because we use uniform distribution
i=1 ri/10) = (cid:80)10
that is ri ∈ [0, level−2], E((cid:80)10
i=1(level−2)/20.
In this interpretation of levels the level n denotes the event of changing level
from n-1 to n. For example level 4 means that 0, 1 or 2 dots had already
been successfully detected (and now the 0, 1, 2 and 3 values are being selected
randomly).

i=1 E(ri)/10 = (cid:80)10

Data were collected in the closed Facebook group of 680+ actual and former
students of the BSc course “High Level Programming Languages” at the Uni-
versity of Debrecen called UDPROG where the students posted their results as
screenshots. A total of 104 Android device screenshots were received. One such
screenshot can be seen in Fig. 2b.

3 Semantic MNIST for Machines

The SMINST for Machines is an attemption to develop a standardized task
for assessing the ability of computer programs to recognize the numerosity of
dots in an image. In the case of SMNIST for Humans, it is obvious that we
do not need training dataset, but only test data (the random dots) that can be
generated online during the running of the “game”. In contrast, in the case of
SMNIST for Machines, we need both training and test datasets.

5

Figure 3: This ﬁgure shows the relationship between the theoretical and mea-
sured mean of number of dots. The label lvl{n} denotes the event of changing
level from n-1 to n. For example level 4 means that 0, 1 or 2 dots had al-
ready been successfully detected (and now the player is playing with 0, 1, 2
and 3 number of dots). The theoretical value denotes the expected value of
the mean of randomly picked 10 integers from 0 to level-2, inclusive, that is
ri ∈ [0, level − 2] For example, it is equal to (1 + 2)/3 at level 4 or at level 10, it
is equal to (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8)/9, and in general it equals (level − 2)/2.
The measured value denotes the mean of the integer parts of means of the 10
consecutive successfully detected integers.

3.0.1 The Generator Program

The SMNIST datasets used in this study are generated by own generator pro-
gram. It and its variants generate images that contain less than 10 dots. Their
output are fully binary compatible with the format of the original MNIST train-
ing and test data [LCB] so we can immediately start the ﬁrst experiments using
the former MNIST programs.

3.0.2 SMNIST datasets

The datasets are organized into two releases (namely SMNIST for Machines and
SMNIST for Anyone) and two series per release according to their development.
The ﬁrst series of SMNIST for Machines contains six pairs of train and test sets
of 28x28 images with the following properties

• Naive: this is a set of 60.000 training and 10.000 test 28x28 pixels images
that contain less than 10 randomly placed then centered dots. Dots are

6

01234lvl4lvl5lvl6lvl7lvl8lvl9lvl10lvlsvaluesvaluesmeasuredtheoretical3x3 pixels. The histograms of the generated train and test images are 0:
6025, 1: 5977, 2: 5965, 3: 5928, 4: 6075, 5: 6067, 6: 6004, 7: 5930, 8:
6051, 9: 5978 and 0: 986, 1: 1008, 2: 980, 3: 963, 4: 1064, 5: 970, 6: 996,
7: 1010, 8: 1036, 9: 987.

• No-centering: this set is generated by the same method as the previous

one, but the randomly placed dots on the images are no centered.

• Disjunct: in this set all generated random images are unique images. It
follows that training images are excluded from the test images. (Except
the special case of 0 dots because there is just only one such image. It
occurs several times in both sets.) The histograms of the generated train
and test images are 0: 436, 1: 436, 2: 7390, 3: 7166, 4: 7482, 5: 7491,
6: 7299, 7: 7352, 8: 7498, 9: 7450 and 0: 49, 1: 48, 2: 1215, 3: 1213, 4:
1227, 5: 1263, 6: 1282, 7: 1210, 8: 1209, 9: 1284.

• Disjunct 1PX: in the previous sets dots are 3x3 pixels, here they are 1x1

pixel of size.

• Hard:

in this case, the set of all possible coordinate pairs of pixels is
divided into two disjoint sets. Then the training images are generated
from one set and the test images are generated from the other set. The
histograms of the generated train and test images are 0: 6751, 1: 425, 2:
6651, 3: 6656, 4: 6531, 5: 6646, 6: 6678, 7: 6482, 8: 6715, 9: 6465 and 0:
1107, 1: 59, 2: 1146, 3: 1089, 4: 1045, 5: 1101, 6: 1113, 7: 1118, 8: 1141,
9: 1081 where the 22*22=484 pixels are divided into two disjoint sets of
sizes 425 and 59.

• Hard 1PX: this set is generated by the same method as the previous one,

but dots are 1x1 pixel.

The second series contains training and test images only of size 10x10 pixels

with dots of 1x1 pixel described precisely by the following:

• Disjunct: the same as above but there is exactly one training and exactly
one test image that contain no dots. The histograms of the generated
train and test images are 0: 1, 1: 90, 2: 4455, 3: 7926, 4: 7806, 5: 8008, 6:
7940, 7: 8069, 8: 7872, 9: 7833 and 0: 1, 1: 10, 2: 438, 3: 1382, 4: 1315,
5: 1352, 6: 1347, 7: 1441, 8: 1379, 9: 1335.

• Hard: as in the previous case and here also the 0 dots are handled stan-
dalone. The histograms of the generated train and test images are 0: 1,
1: 84, 2: 3486, 3: 8126, 4: 7943, 5: 8034, 6: 8061, 7: 8115, 8: 8003, 9:
8147 and 0: 1, 1: 16, 2: 120, 3: 560, 4: 1567, 5: 1571, 6: 1518, 7: 1501, 8:
1534, 9: 1612, where the 10*10=100 pixels are divided into two disjoint
sets of sizes 84 and 16.

• Disjunct pow 102x+, Hard pow 102x+: as in the previous ones but the
probability distribution function of generating n ∈ {1, . . . , m} dots in train
images is the following

F (x) =




0
for x ≤ 1
102x
102m for 1 < x ≤ m

for x ≥ m
1

7

n

where m denotes the maximum digit. In cases of these training and test
sets, m is equal to 9. The reason of choosing this distribution is that there
are 100!/(100−n)! possible 10x10 images that contain exactly n (diﬀerent,
order matters) dots (variations without repetition). To be more precise, in
(cid:1) because all n pixels are the same color (order
our case it is equal to (cid:0)100
does not matter, combinations without repetition)1. It should be noticed
that number of dots in the test images still follows uniform distribution.
In addition, due to using the above distribution produces histograms for
example like this 0: 1, 7: 5, 8: 600, 9: 59394 where the numbers of dots 2,
3, 4, 5, and 6 are missing, therefore the ten percent of generation of training
images follows uniform distribution. In the case labelled by “Disjunct pow
102x+” the histograms of the generated train and test images are 0: 1, 1:
71, 2: 719, 3: 717, 4: 720, 5: 770, 6: 763, 7: 792, 8: 1302, 9: 54145 and
0: 1, 1: 29, 2: 1246, 3: 1234, 4: 1222, 5: 1275, 6: 1260, 7: 1248, 8: 1204,
9: 1281. In the other (“Hard pow 102x+”) case the histograms are 0: 1,
1: 84, 2: 732, 3: 751, 4: 711, 5: 724, 6: 773, 7: 766, 8: 1199, 9: 54259 and
0: 1, 1: 16, 2: 120, 3: 560, 4: 1525, 5: 1617, 6: 1523, 7: 1574, 8: 1512,
9: 1552, where the 10*10=100 pixels are divided into two disjoint sets of
sizes 84 and 16.

• From 4H-102x+ to 8H-102x+ the sets are the same as Hard pow 102x+
but m = 4, 5, 6, 7, 8 respectively. The histograms of one of these cases
labelled by “4H-102x+” can be seen in Table. 1.

Table 1: The histogram of the dataset SMNIST for Humans Series 2/4H-102x+.
The total 100 pixels of an image of size 10x10 are divided into two disjoint sets
where the size of one is 72 and the size of the other one is 28. The column labelled
“theoretical” shows the possible number of images that contain n = 0, 1, 2, 3, 4
dots placed on diﬀerent places, while the column labelled “statistics” contains
the number of generated images.

72/28

dots

theoretical

statistics

train

test

train

test

0

1

2

3

4

1

72

2556

59640

1

28

378

3276

1

72

1925

2574

1.02879e+06

20475

55428

1

28

378

3276

6317

All data used in this paper can be found at http://smartcity.inf.unideb.
hu/~norbi/SMNIST/. The same data can also be found at GitLab [Bát19b]
under the directory Datasets/SMNIST.

3.1 Running results

For measurements we have used the following well known programs and models
with default or diﬀerent settings and with minor modiﬁcations in some certain
cases.

1In practice, histograms of the generated images follow the case of combination without

repetition due to the uniqueness condition of the Disjunct (and all further) datasets.

8

• Tensorﬂow [AAB+16], [Tan19] 0.9.0, mnist_softmax.py (softmax regres-
sion), https://github.com/tensorflow/tensorflow/releases/tag/v0.
9.0 (running with TF version 1.13.1)

• Tensorﬂow 0.9.0, mnist_softmax.py UDPROG is the same as the previous
one but it contains extensions for printing out debug messages (for example
it draws the well-known visualizations of MNIST tutorials2 shown in Fig
4a, 4b and 4c).

• Tensorﬂow 1.4, mnist_deep.py (convnet), https://github.com/tensorflow/
tensorflow/blob/r1.4/tensorflow/examples/tutorials/mnist/mnist_
deep.py (running with TF version 1.13.1).

• Keras [C+19], mnist_cnn.py (convnet), https://github.com/keras-team/
keras/blob/master/examples/mnist_cnn.py (running with TF version
1.13.1).

• PyTorch [PGC+17], [CBM+19], cifar10_tutorial.py (convnet), https://

github.com/pytorch/tutorials/blob/master/beginner_source/blitz/
cifar10_tutorial.py.

• deeplearning4j [Sky19], based on the LeNet [LBBH98] MNIST example of

https://github.com/deeplearning4j/dl4j-examples/blob/master/dl4j-
examples/src/main/java/org/deeplearning4j/examples/convolution/
LenetMnistExample.java.

• Swift [swi19], Swift TF 2 layer MLP with softmax, https://colab.research.
google.com/drive/1NYzgkQAc8OZHVrr-6GOVFaYVT7WjW574 partially based
on https://github.com/tensorflow/swift-models.

• Swift TF MNIST (convnet), https://github.com/tensorflow/swift-

models/blob/master/MNIST.

• Swift TF CIFAR Keras (convnet), https://github.com/tensorflow/

swift-models/blob/master/CIFAR/Models.swift.

• Swift TF CIFAR PyTorch (convnet), https://github.com/tensorflow/

swift-models/blob/master/CIFAR/Models.swift.

• Keras/Hierarchical RNN [LLJ15], [DWW15], mnist_hierarchical_rnn.py,

https://github.com/keras-team/keras/blob/master/examples/mnist_
hierarchical_rnn.py.

• MXNet 1.2.1 [Apa19], https://github.com/kovacsferencz98/SMNIST_
proto/blob/master/smnist_mxnet.py, based on a CNN MNIST exam-
ple of ttps://www.tensorflow.org/tutorials/estimators/cnn and Apache
MXNet https://mxnet.incubator.apache.org/versions/master/tutorials/
python/mnist.html.

• Lasagne [DSR+15], https://github.com/Lasagne/Lasagne/blob/master/

examples/mnist.py, (convnet).

2See,

for example, https://tensorflow.rstudio.com/tensorflow/articles/tutorial_

mnist_beginners.html.

9

Table 2, 3 and 4 contain the test accuracies of runs of the these investigated
programs. All datasets shown is these tables in addition shown in Table 5 and
6 contain 60.000 train and 10.000 test images. Finally, it should be noted that
some investigated programs are very similar to each other that also plays a
validating role.

3.2 Measurements with SMNIST for Machines Series 1

It is quite obvious that all programs produces good performance on the original
MNIST dataset as it can be seen in the ﬁrst column of Table 2. The running
results for Series 1 of our datasets are shown in further columns. In ﬁrst two
rows, it can be seen that softmax regression models do not perform well but it
is not surprising if we take a look to Fig 4a, 4b and 4c where we can compare for
example the visualizations of weights for classiﬁcation of the digit 3. In contrast
the more sophisticated models like the deep CNNs perform on the SMNIST for
Machines dataset signiﬁcantly better than the softmax regression.

Out of curiosity, we transferred the original PyTorch model into a DQN
[MKS+13] model and tested its performance. By transferring the model, we
guaranteed that the diﬀerence between them could only originate from the dif-
ferent approaches (supervised learning vs. reinforcement learning). We imple-
mented our own environment, where at every step, the model had to guess the
numbers on a speciﬁc amount of images. If the correct guesses were above a
certain threshold, we allowed it to continue playing, but at the same time, we
increased the threshold.
If the model’s performance dropped below this said
threshold, the episode ended. The images were all sampled randomly from the
original (Series 1/Naive) dataset. The model’s accuracy improved ﬁrmly over
time, however, despite our eﬀorts, in overall, the DQN model produced signif-
icantly worse results, such as accuracies around 0.4, 0.3 or even 0.2. We tried
changing the number of episodes, the sampling procedure, and other hyperpa-
rameters such as gamma, epsilon, memory size, etc. but all to no avail.

Table 2: Measurements with SMNIST for Machines Series 1.

Program

MNIST Naive No-Ctrg Disjunct D-1PX Hard H-1PX

Tensorﬂow
mnist_softmax.py

0.9.0,

Tensorﬂow
0.9.0,
mnist_softmax.py,
UDPROG

0.9166

0.6078

0.6233

0.5616

0.3888

0.5779

0.1107

0.9187

0.6249

0.6072

0.5959

0.4397

0.6025

0.1107

Tensorﬂow
mnist_deep.py

1.4,

0.9925

0.9787

0.9558

0.9608

0.9903

0.9592

0.9941

Keras
mnist_cnn.py

2.2.4,

0.9908

0.9415

0.9268

0.9446

0.9997

0.911

0.9997

Keras/Hierarchical
RNN

PyTorch,
far10_tutorial.py

ci-

deeplearning4j
LeNet MNIST

MXNet 1.2.1, sm-
nist_mxnet.py

0.9858

0.965

0.9828

0.9754

0.9974

0.9386

0.9655

0.9907

1.0

0.9932

0.8973

0.9957

0.8661

0.88

0.9848

0.9929

0.9842

0.9638

0.9886

0.9496

0.9957

0.991

0.9717

0.9763

0.9436

0.9842

0.8911

0.9843

Lasagne, mnist.py

0.9924

0.9362

0.9238

0.9235

0.9874

0.8970

0.9856

10

(a) The well known
for
typical weights
3
of
classiﬁcation
in Tensorﬂow 0.9.0,
mnist_softmax.py
(UDPROG)
using
the classical MNIST
It may
dataset.
be
that
noticed
the positive weight
values draw out the
silhouette of the digit
3.

of

for
(b) Weights
classiﬁcation
3
in Tensorﬂow 0.9.0,
mnist_softmax.py
(UDPROG)
using
the SMNIST Series
1/No-Ctrg
dataset.
The images of Series
1 datasets have a
rectangular border of
some pixels because
the
of
coordinates
dots are generated
from range [4, 24].

of

for
(c) Weights
classiﬁcation
3
in Tensorﬂow 0.9.0,
mnist_softmax.py
(UDPROG)
using
the SMNIST Series
1/H-1PX
dataset.
The 59 test pixels
(and the 300 pixels
of
the border) are
white.

Figure 4: The well-known visualizations of weights of regression MNIST tuto-
rials.

3.3 Measurements with SMNIST for Machines Series 2

In this series we have moved from investigation of images of 28x28 size to images
of 10x10 size. In addition, we manipulate the distribution of images in the train
datasets. The probability of generating an image that contains n dots is roughly
proportional to how many possibilities there are to place n pixels on an image
of 10x10 pixels. The precise details can be found in the previous description
of datasets. The performance of most of the tested programs has deteriorated
on the data H-102x+ (see the last column of Table 3). Therefore it has been
splitted into further ﬁve parts (from 4H-102x+ to 8H-102x+) for further in-
vestigation that can be found in Table 4. Based on the experiments SMNIST
for Humans, we would except intuitively that performance starts to deteriorate
with increasing number of dots. Actually in most tested cases this assumption
is met but there also are such models where it is not true, see for example the
row of Keras/Hierarchical RNN. It can intuitively be summarized that all tested
programs show good performance when the number of dots does not exceed the
limit of capacity of OFS measured in humans. That is the tested ANNs are
supposed to be able to learn to distinguish numerosities with better accuracy
when these numerosities are roughly smaller than 4. A direct experiment with
smaller number of dots (H3-102x+) can be found in next section.

4 Semantic MNIST for Anyone

The SMNIST for Anyone is a natural further development of SMNIST for Ma-
chines. Machines can perform this test so do humans. But at this moment we

11

051015202505101520250510152025051015202505101520250510152025Table 3: Measurements with SMNIST for Machines Series 2

Program

Disjunct Hard D-102x+ H-102x+

Tensorﬂow
0.9.0,
mnist_softmax.py,
UDPROG

0.6066

0.056

0.1281

0.1512

Keras
mnist_cnn.py

2.2.4,

0.8822

0.7648

0.8145

0.4625

Keras/Hierarchical
RNN

PyTorch,
far10_tutorial.py

ci-

deeplearning4j
LeNet MNIST

MXNet 1.2.1, sm-
nist_mxnet.py

0.9995

0.9999

0.9965

0.9897

0.9528

0.6243

0.8776

0.5365

0.8488

0.4895

0.2757

0.2388

0.653

0.4013

0.3668

0.3005

Table 4: Measurements with SMNIST for Machines Series 2 with particular
attention to the further breakdown of the set Hard pow 102x (H-102x+).

Program

4H-102x+ 5H-102x+ 6H-102x+ 7H-102x+ 8H-102x+

Tensorﬂow
mnist_softmax.py

0.9.0,

0.6317

0.3188

0.2334

0.1936

0.1658

Keras
mnist_cnn.py

2.2.4,

0.9099

0.7055

0.7599

0.7285

0.6568

Keras/Hierarchical
RNN

PyTorch,
far10_tutorial.py

ci-

deeplearning4j
LeNet MNIST

Swift TF MNIST

Swift TF CIFAR
PyTorch

0.9993

0.9996

0.9442

0.9996

0.9993

0.8758

0.8589

0.723

0.556

0.6733

0.7743

0.5329

0.4770

0.3671

0.2977

0.6432

0.6729

0.4906

0.6218

0.3102

0.4796

0.2896

0.4156

0.1819

0.4802

have no test ﬁlling program for humans (technically, it will be based on the
previously presented SMNIST for Humans Android application). The SMNIST
for Anyone datasets are organized into two series. They are the same as the
4H-102x+, . . . , 9H-102x+(=H-102x+) datasets of the previous section where
dots are replaced by 3x3 pixels patterns of the objects ’X’, ’O’, ’+’ and square
outline (’S’) as it can be seen in Fig. 5 and 6. It is important to highlight that
this test is not uniquely determined because in many cases it is not clear how
many objects have been placed on the images.

4.1 Measurements with SMNIST for Anyone Series 1

The images of Series 1 contain only 3x3 pixels binary patterns of ’X’s. In all
cases the performance has already been deteriorated with increasing number of
dots as it can be seen in Table 5.

12

(a) smnistg-train-6-7

(b) smnistg-train-6-8

Figure 5: SMNIST for Anyone, Series 1. Both images contain exactly 6 ’X’s.

Table 5: Measurements with SMNIST for Anyone Series 1.

Program

H4-102x+ H5-102x+ H6-102x+ H7-102x+ H8-102x+ H9-102x+

Tensorﬂow
mnist_softmax.py

0.9.0,

0.6317

0.3188

0.2334

0.1942

0.1671

0.1402

Keras
mnist_cnn.py

2.2.4,

0.836

0.7546

0.6914

0.6702

0.6233

0.5913

Keras/Hierarchical
RNN

deeplearning4j
LeNet MNIST

0.8498

0.7152

0.6896

0.6537

0.5144

0.5498

0.6862

0.6764

0.3845

0.3394

0.3008

0.2245

4.2 Measurements with SMNIST for Anyone Series 2

The images of Series 2 may contain any of the symbols ’X’, ’O’, ’+’ and square
outline (’S’). As shown in Table 6 we experience the same performance as ob-
served in the previous series of experiments.

(a) SSOS+O, S3O2+

(b) SXXO+X, X3SO+

(c) SSOOXXXSX, X4S3O2

(d) SXXO+X++S, X3+3S2O

Figure 6: SMNIST for Anyone, Series 2. Images contain exactly 6 or 9 symbols
of the following: ’X’, ’O’, ’+’ and square outline (’S’).

Finally, we have also made a direct experiment with maximum 3 number of
objects. The properties of its dataset called H3-102x+ can be seen in Table 7.
As we expected according to our thesis, the tested programs perform well in this
experiment, for example the “Keras 2.2.4, mnist_cnn.py” produces an accuracy
of 0.9436 or “Keras/Hierarchical RNN” produces an accuracy of 0.9522.

13

Table 6: Measurements with SMNIST for Anyone Series 2.

Program

H4-102x+ H5-102x+ H6-102x+ H7-102x+ H8-102x+ H9-102x+

Tensorﬂow
mnist_softmax.py

0.9.0,

0.6317

0.3217

0.2388

0.192

0.1638

0.1399

Keras
mnist_cnn.py

2.2.4,

0.7959

0.5627

0.6036

0.5504

0.516

0.4696

Keras/Hierarchical
RNN

deeplearning4j
LeNet MNIST

0.7366

0.595

0.5198

0.5014

0.5099

0.4406

0.6558

0.4166

0.3566

0.3203

0.2743

0.2304

Table 7: The histogram of the dataset Series 2/H3-102x+. This contains 10.000
test and only 30.000 train images. The 10*10=100 pixels are divided into two
disjoint sets of sizes 57 and 43. The column labelled “theoretical” shows the
possible number of images that contain n = 0, 1, 2, 3 diﬀerent dots, while the
column labelled “statistics” contains the number of generated images.

57/43

theoretical

statistics

dots

train

test

train

test

0

1

2

3

1

57

1

43

1

57

1

43

1596

903

1567

903

29260

12341

28375

9053

5 Conclusion and Further Work

In all software experiments of this study we investigate the numerosity of quan-
tities. The SMNIST for Humans experimental results are well in accordance
with observations from cognitive psychology literature. Based on our SMNIST
for Humans and SMNIST for Anyone experiences we can intuitively formulate
our thesis as follows: image classiﬁcation (such as MNIST or CIFAR-10) ANNs
can learn to distinguish numerosities with better accuracy when these numerosi-
ties are smaller than the capacity of OFS measured in humans (that is roughly
smaller than 4).

Fig. 7 outlines a conceptual framework for analyzing the notion of number
in humans and machines. The ﬁrst timeline of the ﬁgure tells that OFS may
have begun evolving 300 million years ago [Nie16]. This is followed by the “wolf
bone”, an assumed tally based external counting device [Kli85]. Then appears
√
the ﬁrst numerical digit [Kli85]. The
2 had already been approximated in
sexagesimal arithmetic by ancient Babylonians [FR98].
It stands for the ap-
pearance of the notion of numeral systems. The imaginary i simply denotes
the extension of the notion of number with the complex numbers. Turing’s
famous study [Tur36] of 1936 indicates the onset of digital computers. There
are numbers such as Ω [Cha04] simply would not exist without digital comput-
ers. Finally, the breakthrough machine learning application called AlphaStar
[VBC+19] represents today’s computer programs. It is important to emphasize
that all mentioned devices including software are based on Donaldian external
storage systems of theoretical culture as it is expressed by the second timeline of
the ﬁgure. Here we expand Donald’s three stages of mental evolution [Don91]

14

OFS

wolf bone

digit

√

2

0

i

machines

Ω

AlphaStar

300.000.000

BC 25.000

BC 5.000

1936

2019

episodic mimetic mythic

theoretic

esport

1.500.000

400.000

BC 40.000

prenatal newborn

nursery preschool

school age

university human+computer

SMNIST programs

Figure 7: This Haeckel-like ﬁgure contains four timelines. Intuitively, the ﬁrst
one tries to outline a mental evolutionary phylogeny of humans especially fo-
cusing to the notion of number [Kli85]. The second one shows Merlin Donald’s
distinguishment between stages of mental evolution [Don91]. The third one
presents the stages of ontogeny of the notion of number in humans. And ﬁ-
nally, the last timeline tries to introduce ontogeny of the notion of number in
machines. It should be noted that timelines are not linear: the concrete dates
do not matter, but their order does.

with an additional stage called “esport”. The expansion of stages is not rare
in the literature, see for example [JD02] where some timeline dates are little
bit diﬀerent from ours, but similarly, the additional stage is focused on com-
puter programs. The esport and computer gaming like the computer programs
in general have also been implemented in the Donaldian external memory of
theoretical culture. Our utopian goal is to create an open source esport game
that would be able to function as Leibniz’s “characteristica universalis” and as
such can express some notion of number [Bát19a].

The stages of ontogeny of the notion of number in humans is presented
on third timeline. By the time children reached school age they had acquired
the language. Preschool children have already played electronic games but the
minimum age limit of participation in esport tournaments is various in the range
from 12 to 18 years old. Moreover our utopian interpretation of the new stage
labelled by esport is shifted to university years because here we are thinking of
the aforementioned esport game to be developed.

The digital computers are products of pure theoretical culture. For example,
in this sense, the “AI winter” can be interpreted as the time required for ma-
chines of theoretical culture to learn to work on diﬀerent lower Donaldian layer
of culture [Bát19a]. In this interpretation, it may be a possible solution for the
Moravec’s paradox. And it is also clear that it does not work backwards, for ex-
ample just think of antinomies of naive set theory, where the source of problems
is that we have tried to handle entities of theoretical culture at a lower layer
of culture speciﬁcally with natural spoken (or written) language tools that are
speciﬁc for the Donaldian mythical culture. From this point of view, the SM-
NIST programs that are entities of theoretical culture for today seems can solve
the problem of subitizing that is part of the episodic culture. It is presented on
fourth timeline. Why, for example, the AlphaStar is not shown on right side of
this timeline? Due to computer programs of today are using the man’s notion
of number rather than their own one because it does not yet exist.

15

6 Acknowledgment

The authors thank the students of the BSc course titled “High Level Pro-
gramming Languages” at the University of Debrecen and the members of the
UDPROG Facebook community https://www.facebook.com/groups/udprog
for performing the SMNIST for Humans test. In addition, the authors thank
Krisztina Győri for the proofreading of the manuscript.

This work was supported by the construction EFOP-3.6.3-VEKOP-16-2017-
00002. The project was supported by the European Union, co-ﬁnanced by the
European Social Fund.

Author contributions were the following: N. B. conceived the idea of SM-
NIST for Machines, SMNIST for Humans and SMNIST for Anyone, developed
the generator and Android programs, collected the SMNIST for Humans data
from the UDPROG community and analyzed the measurements. D. P. provided
cognitive psychological background. N. B., G. B., M. Sz., M. B., G. Sz., F. K.,
E. Sz. V. performed SMNIST for Machines computations. V. Sz. S. and L. K.
performed some computations with a previous version of SMNIST for Machines
datasets. All authors wrote the paper and discussed the results.

References

[AAB+16] Martín Abadi, Ashish Agarwal, Paul Barham, Eugene Brevdo,
Zhifeng Chen, Craig Citro, Gregory S. Corrado, Andy Davis, Jef-
frey Dean, Matthieu Devin, Sanjay Ghemawat, Ian J. Goodfel-
low, Andrew Harp, Geoﬀrey Irving, Michael Isard, Yangqing Jia,
Rafal Józefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh Leven-
berg, Dan Mané, Rajat Monga, Sherry Moore, Derek Gordon Mur-
ray, Chris Olah, Mike Schuster, Jonathon Shlens, Benoit Steiner,
Ilya Sutskever, Kunal Talwar, Paul A. Tucker, Vincent Vanhoucke,
Vijay Vasudevan, Fernanda B. Viégas, Oriol Vinyals, Pete War-
den, Martin Wattenberg, Martin Wicke, Yuan Yu, and Xiaoqiang
Zheng. Tensorﬂow: Large-scale machine learning on heterogeneous
distributed systems. CoRR, abs/1603.04467, 2016.

[ACT19]

[Apa19]

[Bát19a]

[Bát19b]

[BB89]

Kai Arulkumaran, Antoine Cully, and Julian Togelius. Alphastar:
An evolutionary computation perspective. CoRR, abs/1902.01724,
2019.

MXNet: A Scalable Deep Learning Framework. https://mxnet.
apache.org/, 2019.

Norbert Bátfai. A cognitive evolutionary interpretation of arti-
ﬁcial intelligence (A mesterséges intelligencia kognitív evolúciós
értelmezése). Unpublished Manuscript, Original paper in Hun-
garian, 2019.

Norbert Bátfai. Smnist. https://gitlab.com/nbatfai/smnist,
2019.

Sarah Boysen and Gary Berntson. Numerical competence in a
chimpanzee (pan troglodytes ). Journal of comparative psychology,
103:23–31, 1989.

16

[BLT+16]

Charles Beattie, Joel Z. Leibo, Denis Teplyashin, Tom Ward, Mar-
cus Wainwright, Heinrich Küttler, Andrew Lefrancq, Simon Green,
Víctor Valdés, Amir Sadik, Julian Schrittwieser, Keith Ander-
son, Sarah York, Max Cant, Adam Cain, Adrian Bolton, Stephen
Gaﬀney, Helen King, Demis Hassabis, Shane Legg, and Stig Pe-
tersen. Deepmind lab. CoRR, abs/1612.03801, 2016.

[C+19]

[Cas16]

François Chollet et al. Github - keras-team/keras: Deep learning
for humans. https://github.com/keras-team/keras, 2019.

D. Castelvecchi. Can we open the black box of AI? Nature, 538:20–
23, 2016.

[CBM+19] Ronan Collobert, Samy Bengio, Johnny Mariethoz, Adam Paszke,
Soumith Chintala, Koray Kavukcuoglu, Clement Farabet, Leon
Bottou,
GitHub - py-
torch/pytorch: Tensors and Dynamic neural networks in Python
with strong GPU acceleration. https://github.com/pytorch/
pytorch, 2019.

Iain Melvin, Jason Weston, et al.

[Cha04]

[DC93]

G. J. Chaitin. Meta Math! The Quest for Omega. arXiv Mathe-
matics e-prints, 2004.

Stanislas Dehaene and Jean-Pierre Changeux. Development of el-
ementary numerical abilities: A neuronal model. Journal of cogni-
tive neuroscience, 5:390–407, 1993.

[DDLC98]

Stanislas Dehaene, Ghislaine Dehaene-Lambertz, and Laurent Co-
hen. Abstract representations numbers in the animal and human
brain. Trends in neurosciences, 21:355–61, 1998.

[DM82]

[DN16]

[Don91]

[DP88]

[DSR+15]

Hank Davis and John Memmott. Counting behavior in animals: A
critical evaluation. Psychological Bulletin, 92:547–571, 1982.

Helen M Ditz and Andreas Nieder. Numerosity representations in
crows obey the weber-fechner law. Proc. Biol. Sci., 283(1827):1–
9, 2016.

Merlin Donald. Origins of the modern mind : three stages in the
evolution of culture and cognition. Harvard University Press Cam-
bridge, Mass, 1991.

Hank Davis and Rachelle Pérusse. Numerical competence in an-
imals: Deﬁnitional issues, current evidence, and a new research
agenda. Behavioral and Brain Sciences, 11:561–579, 1988.

Sander Dieleman, Jan Schlüter, Colin Raﬀel, Eben Olson,
Søren Kaae Sønderby, Daniel Nouri, Daniel Maturana, Martin
Thoma, Eric Battenberg, Jack Kelly, Jeﬀrey De Fauw, Michael
Heilman, Diogo Moitinho de Almeida, Brian McFee, Hendrik Wei-
deman, Gábor Takács, Peter de Rivaz, Jon Crall, Gregory Sanders,
Kashif Rasul, Cong Liu, Geoﬀrey French, and Jonas Degrave.
Lasagne: First release., 2015.

17

[DVS08]

Marie Dacke and Mandyam V Srinivasan. Evidence for counting
in insects. Animal cognition, 11:683–9, 2008.

[DWW15] Yong Du, Wei Wang, and Liang Wang. Hierarchical recurrent
neural network for skeleton based action recognition. In CVPR,
pages 1110–1118. IEEE Computer Society, 2015.

[FBAH66] Gustav Theodor Fechner, 1886-1968 Boring, Edwin Garrigues, Hel-
mut E Adler, and Davis H Howes. Elements of psychophysics. New
York: Holt, Rinehart and Winston, 1966.

[FCH02]

[FDS04]

[FR98]

[Gea95]

[Gea00]

Lisa Feigenson, Susan Carey, and Marc Hauser. The representa-
tions underlying infants’ choice of more: Object ﬁles versus analog
magnitudes. Psychological Science, 13(2):150–156, 2002.

Lisa Feigenson, Stanislas Dehaene, and Elizabeth Spelke. Core
systems of number. Trends in Cognitive Sciences, 8(7):307 – 314,
2004.

David Fowler and Eleanor Robson. Square root approximations
in old babylonian mathematics: Ybc 7289 in context. Historia
Mathematica, 25(4):366–378, 1998.

David Geary. Reﬂections of evolution and culture in children’s
cognition: Implications for mathematical development and instruc-
tion. The American psychologist, 50:24–37, 1995.

D.C. Geary. From infancy to adulthood: the development of nu-
merical abilities. European Child & Adolescent Psychiatry, 9:11–16,
2000.

[HOBB+17] Jose Hernandez-Orallo, Marco Baroni, Jordi Bieger, Nader
Chmait, David L. Dowe, Katja Hofmann, Fernando Plumed, Claes
Strannegård, and Kristinn Thórisson. A new ai evaluation cosmos:
Ready to play the game? AI Magazine, 38:66, 2017.

[Hyd11]

Daniel Hyde. Two systems of non-symbolic numerical cognition.
Frontiers in human neuroscience, 5:150–158, 2011.

[JCD+18] Max Jaderberg, Wojciech M. Czarnecki, Iain Dunning, Luke Mar-
ris, Guy Lever, Antonio García Castañeda, Charles Beattie, Neil C.
Rabinowitz, Ari S. Morcos, Avraham Ruderman, Nicolas Sonnerat,
Tim Green, Louise Deason, Joel Z. Leibo, David Silver, Demis Has-
sabis, Koray Kavukcuoglu, and Thore Graepel. Human-level per-
formance in ﬁrst-person multiplayer games with population-based
deep reinforcement learning. CoRR, abs/1807.01281, 2018.

[JD02]

Kaput J.J. and Shaﬀer D.W. On the development of human rep-
resentational competence from an evolutionary point of view. In
Koeno Gravemeijer, Richard Lehrer, Bert Van Oers, and Lieven
Verschaﬀel, editors, Symbolizing, Modeling and Tool Use in Math-
ematics Education, volume 30 of Mathematics Education Library,
pages 277–293. Springer, 2002.

18

[JDO+17] Max Jaderberg, Valentin Dalibard, Simon Osindero, Wojciech M.
Czarnecki, Jeﬀ Donahue, Ali Razavi, Oriol Vinyals, Tim Green,
Iain Dunning, Karen Simonyan, Chrisantha Fernando, and Ko-
ray Kavukcuoglu. Population based training of neural networks.
CoRR, abs/1711.09846, 2017.

[Kah74]

Gilles Kahn. The semantics of simple language for parallel pro-
gramming. In IFIP Congress, pages 471–475, 1974.

[Kli85]

Friedhart Klix. Az ébredő gondolkodás. Gondolat, Budapest, 1985.

[Knu97]

Donald E. Knuth. The Art of Computer Programming, Volume 2
(3rd Ed.): Seminumerical Algorithms. Addison-Wesley Longman
Publishing Co., Inc., Boston, MA, USA, 1997.

[Kri09]

A. Krizhevsky. Learning Multiple Layers of Features from Tiny
Images. Technical report, University of Toronto, Toronto, 2009.

[LBBH98] Yann LeCun, Léon Bottou, Yoshua Bengio, and Patrick Haﬀner.
Gradient-based learning applied to document recognition. In Pro-
ceedings of the IEEE, volume 86, pages 2278–2324, 1998.

[LBD+89] Y. LeCun, B. Boser, J. S. Denker, D. Henderson, R. E. Howard,
W. Hubbard, and L. D. Jackel. Backpropagation applied to hand-
written zip code recognition. Neural Computation, 1(4):541–551,
1989.

[LCB]

[LLJ15]

[MDM80]

Yann LeCun, Corinna Cortes, and Christopher J. C. Burges. The
mnist database of handwritten digits. http://yann.lecun.com/
exdb/mnist/. Accessed: 2019-04-26.

Jiwei Li, Minh-Thang Luong, and Dan Jurafsky. A hierarchi-
cal neural autoencoder for paragraphs and documents. CoRR,
abs/1506.01057, 2015.

Edward M. Duncan and Carl Mcfarland. Isolating the eﬀects of
symbolic distance, and semantic congruity in comparative judg-
ments: An additive-factors analysis. Memory & cognition, 8:612–
22, 1980.

[MKS+13] Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves,
Ioannis Antonoglou, Daan Wierstra, and Martin Riedmiller. Play-
ing atari with deep reinforcement learning. eprint arXiv:1312.5602,
2013.

[MKS+15] Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Andrei A.
Rusu, Joel Veness, Marc G. Bellemare, Alex Graves, Martin A.
Riedmiller, Andreas Fidjeland, Georg Ostrovski, Stig Petersen,
Charles Beattie, Amir Sadik, Ioannis Antonoglou, Helen King,
Dharshan Kumaran, Daan Wierstra, Shane Legg, and Demis Has-
sabis. Human-level control through deep reinforcement learning.
Nature, 518(7540):529–533, 2015.

19

[MKTD16] Johnson M., Hofmann K., Hutton T., and Bignell D. The malmo
platform for artiﬁcial intelligence experimentation. In Proc. 25th
International Joint Conference on Artiﬁcial Intelligence, pages
4246–4247, 2016.

[MP43]

[Neu58]

[Nie16]

[Pep10]

W. S. McCulloch and W. Pitts. A logical calculus of the ideas
immanent in nervous activity. Bulletin of Mathematical Biophysics,
5:115–133, 1943.

John von Neumann. The Computer and the Brain. Yale University
Press, 1958.

Andreas Nieder. The neuronal code for number. Nature reviews.
Neuroscience, 17, 2016.

Irene Pepperberg. Evidence for conceptual quantitative abilities
in the african grey parrot: Labeling of cardinal sets. Ethology,
75:37–61, 2010.

[PGC+17] Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan, Ed-
ward Yang, Zachary DeVito, Zeming Lin, Alban Desmaison, Luca
Antiga, and Adam Lerer. Automatic diﬀerentiation in PyTorch.
In NIPS Autodiﬀ Workshop, 2017.

[Pia10]

Manuela Piazza. Neurocognitive start-up tools for symbolic num-
ber representations. Trends in cognitive sciences, 14:542–51, 11
2010.

[PIP+04] Manuela Piazza, Veronique Izard, Philippe Pinel, Denis Le Bihan,
and Stanislas Dehaene. Tuning curves for approximate numerosity
in the human intraparietal sulcus. Neuron, 44:547–55, 2004.

[PPLBD07] Manuela Piazza, Philippe Pinel, Denis Le Bihan, and Stanislas
Dehaene. A magnitude code common to numerosities and number
symbols in human intraparietal cortex. Neuron, 53:293–305, 2007.

[RKRC70] Thompson RF, Mayers KS, Robertson RT, and Patterson CJ.
Science,
Number coding in association cortex of the cat.
168(3928):271–273, 1970.

[Ros58]

[SD83]

[Sky19]

[SSS+17]

Frank Rosenblatt. The perceptron: A probabilistic model for infor-
mation storage and organization in the brain. Psychological Review,
65(6):386–408, 1958.

Antell SE and Keating DP. Perception of numerical invariance in
neonates. Child Dev., 54:695–701, 1983.

GitHub - deeplearning4j/dl4j-examples: Deeplearning4j Exam-
ples (DL4J, DL4J Spark, DataVec).
https://github.com/
deeplearning4j/dl4j-examples, 2019.

Ioannis
David Silver, Julian Schrittwieser, Karen Simonyan,
Antonoglou, Aja Huang, Arthur Guez, Thomas Hubert, Lucas
Baker, Matthew Lai, Adrian Bolton, Yutian Chen, Timothy Lil-
licrap, Fan Hui, Laurent Sifre, George van den Driessche, Thore

20

Graepel, and Demis Hassabis. Mastering the game of go without
human knowledge. Nature, 550:354–, 2017.

[SSSG83]

Prentice Starkey, E S Spelke, and Rochel Gelman. Detection of
intermodal numerical correspondences by human infants. Science
(New York, N.Y.), 222:179–81, 1983.

[SSSG90]

Prentice Starkey, Elizabeth S. Spelke, and Rochel Gelman. Nu-
merical abstraction by human infants. Cognition, 36:97–127, 1990.

[Sta92]

[swi19]

[Sza00]

Prentice Starkey. The early development of numerical reasoning.
Cognition, 43:93–126, 1992.

GitHub - tensorﬂow/swift-models: Models and examples built with
Swift for TensorFlow. https://github.com/tensorflow/swift-
models, 2019.

Eörs Szathmáry. Evolution of replicators. Philosophical transac-
tions of the Royal Society of London. Series B, Biological sciences,
355:1669–1676, 2000.

[SZF+17]

András Szilágyi, István Zachar, Anna Fedor, Harold de Vladar, and
Eörs Szathmáry. Breeding novel solutions in the brain: A model
of darwinian neurodynamics. F1000Research, 5(2416), 2017.

[Tan19]

[Tri92]

[Tur36]

Yuan Tang. Github - tensorﬂow/tensorﬂow: An open source ma-
chine learning framework for everyone.
https://github.com/
tensorflow/tensorflow, 2019.

Lana Trick. A theory of enumeration that grows out of a general
theory of vision: Subitizing, counting, and ﬁnsts. The Nature and
Origins of Mathematical Skills, 91:257–299, 1992.

Alan M. Turing. On computable numbers, with an application to
the Entscheidungsproblem. Proceedings of the London Mathemat-
ical Society, 2(42):230–265, 1936.

[VBC+19] Oriol Vinyals, Igor Babuschkin, Junyoung Chung, Michael Math-
ieu, Max Jaderberg, Wojciech M. Czarnecki, Andrew Dudzik,
Aja Huang, Petko Georgiev, Richard Powell, Timo Ewalds, Dan
Horgan, Manuel Kroiss, Ivo Danihelka, John Agapiou, Junhyuk
Oh, Valentin Dalibard, David Choi, Laurent Sifre, Yury Sul-
sky, Sasha Vezhnevets, James Molloy, Trevor Cai, David Bud-
den, Tom Paine, Caglar Gulcehre, Ziyu Wang, Tobias Pfaﬀ,
Toby Pohlen, Yuhuai Wu, Dani Yogatama, Julia Cohen, Katrina
McKinney, Oliver Smith, Tom Schaul, Timothy Lillicrap, Chris
Apps, Koray Kavukcuoglu, Demis Hassabis, and David Silver.
AlphaStar: Mastering the Real-Time Strategy Game StarCraft
II. https://deepmind.com/blog/alphastar-mastering-real-
time-strategy-game-starcraft-ii/, 2019.

[VEB+17] Oriol Vinyals, Timo Ewalds, Sergey Bartunov, Petko Georgiev,
Alexander Sasha Vezhnevets, Michelle Yeo, Alireza Makhzani,
Heinrich Küttler, John Agapiou, Julian Schrittwieser, John Quan,

21

Stephen Gaﬀney, Stig Petersen, Karen Simonyan, Tom Schaul,
Hado van Hasselt, David Silver, Timothy P. Lillicrap, Kevin
Calderone, Paul Keet, Anthony Brunasso, David Lawrence, An-
ders Ekermo, Jacob Repp, and Rodney Tsing. Starcraft II: A new
challenge for reinforcement learning. CoRR, abs/1708.04782, 2017.

Tom Verguts and Wim Fias. Representation of number in ani-
mals and humans: A neural model. J. Cognitive Neuroscience,
16(9):1493–1504, 2004.

Erik Van Loosbroek and Ad Smitsman. Visual perception of nu-
merosity in infancy. Developmental Psychology, 26:916–922, 1990.

John von Neumann. The general and logical theory of automata.
In A. H. Taub, editor, John von Neumann: Collected Works. Vol-
ume V: Design of Computers, Theory of Automata and Numerical
Analysis. Pergamon Press, 1963.

[VF04]

[VLS90]

[vN63]

[vOGV82] Michiel van Oeﬀelen and Peter G. Vos. A probabilistic model for
the discrimination of visual number. Perception & psychophysics,
32:163–70, 1982.

[WZS18]

Xiaolin Wu, Xi Zhang, and Xiao Shu. Cognitive deﬁcit of deep
learning in numerosity. CoRR, abs/1802.05160, 2018.

[ZF13]

Matthew D. Zeiler and Rob Fergus. Visualizing and understanding
convolutional networks. CoRR, abs/1311.2901, 2013.

22

