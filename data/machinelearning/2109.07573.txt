1
2
0
2

p
e
S
4
1

]

G
L
.
s
c
[

1
v
3
7
5
7
0
.
9
0
1
2
:
v
i
X
r
a

DIFFERENTIABLE PHYSICS

A POSITION PIECE

Bharath Ramsundar1, Dilip Krishnamurthy2, and Venkatasubramanian Viswanathan2

1Deep Forest Sciences Inc.
2Department of Mechanical Engineering, Carnegie Mellon University

September 17, 2021

ABSTRACT

Differentiable physics provides a new approach for modeling and understanding the physical systems
by pairing the new technology of differentiable programming with classical numerical methods for
physical simulation. We survey the rapidly growing literature of differentiable physics techniques
and highlight methods for parameter estimation, learning representations, solving differential equa-
tions, and developing what we call scientiﬁc foundation models using data and inductive priors.
We argue that differentiable physics offers a new paradigm for modeling physical phenomena by
combining classical analytic solutions with numerical methodology using the bridge of differentiable
programming.

Keywords Differentiable Physics · Scientiﬁc Machine Learning · Differentiable Programming · Automatic
Differentiation

1

Introduction

We deﬁne differentiable physics here as the use of differentiable programs to gain deeper understanding of physical
systems. The use of the terminology “differentiable physics” as deﬁned here was introduced by the author in the
Scientiﬁc Machine Learning webinar (SciML) series [1] and combines techniques from traditional numerical methods
[2] with new technology from the burgeoning ﬁelds of deep learning [3] and differentiable programming [4] to
construct predictive models of complex physical systems. In this perspective, we will introduce the basic techniques
of differentiable physics and summarize the rapidly growing literature on differentiable physics. We then discuss the
research frontier of differentiable physics and explore how differentiable physics can yield new approaches to modeling
physical phenomena.

2 Differentiable Programming

Automatic differentiation, which can compute the derivative of a function given a syntactic representation of the
function in question, is the foundational technology backing modern deep learning [5]. Automatic differentiation
makes it dramatically easier to compute the derivative of complex functions like neural networks and enables easy
implementation of optimization techniques on neural networks.

Differentiable programming applies automatic differentation to arbitrary programs. Empirical evidence reveals that
gradient based methods are capable of differentiating meaningfully through very large classes of programs, even those
traditionally considered to be combinatorial and not amenable to differentiation [6].

Differentiable programming is closely related to deep learning. Roughly, deep learning uses deep neural networks with
layers of transformations to approximate arbitrary functions. Deep learning depends crucially on internally learned
representations of the input data that are sematically meaningful. Differentiable programming extends deep learning
beyond simple chained transformations to include more complex control structures. The inclusion of these structures
enables classical numerical algorithms to be utilized in differentiable programming [7; 8].

 
 
 
 
 
 
Differentiable Physics

A POSITION PIECE

Differentiable programs hold different tradeoffs than classical algorithms. The universal approximation theorem
[9] means that neural networks have extraordinary representation capabilities. As a result, deep learning and dif-
ferentiable algorithms can sometimes approximately solve problems that no classical method can solve (image
classiﬁcation/recognition problems for example).

3 What is Differentiable Physics?

Differentiable physics applies the technology of differentiable programming to models of physical systems. In more
detail, differentiable physics techniques leverage the universal approximation system to obtain powerful efﬁcient
computational representations of complex physical systems. These representations can be used for inverse design for
engineering applications (for example, designing molecules or materials with desired physical properties), efﬁcient
solution of high dimensional differential equations, and accurate and efﬁcient physical simulations. Differentiable
physics methods have already had large impacts in drug discovery and are starting to change materials science and
other adjacent engineering ﬁelds [10].

Differentiable physics methods can also enable rapid solution of complex physical sytems, allowing for rapid ap-
proximate projection of the future state of physical systems. The description of differential physics and the unique
opportunities it enables have been largely synthesized by the talks given in SciML webinar series run by the authors
covering areas including ecology[11], drug discovery [12; 13; 14; 15; 16; 17], ﬂuid dynamics [18; 19; 20; 8], quan-
tum chemistry [21; 22; 23; 24], quantum computing[25; 26; 27], engineering [28; 29; 30; 31], statistical mechanics
[32; 33; 34; 35; 36; 37], molecular dynamics [38; 7; 39], machine learning potentials [40; 41; 42; 43], lattice ﬁeld
theory [44; 45], deep learning [46; 47], and differential equations [48; 49; 50; 51; 52; 53].

4 Capabilities Enabled by Differentiable Physics

4.1 Parameter Estimation

Mathematical models for physical systems typically involve solving underlying governing equations, paired with
requisite constitute models. These models have one or more unknown quantities, termed as parameters. Identifying the
parameters and the regime those parameters fall in govern the underlying physical phenomena.[54] Thus, estimating
parameters of a mathematical model of a physical system is a crucial task.

Parameter estimation methods aim to estimate the parameters of the mathematical model of a physical system from
observed data. These methods are closely related to the classical literature on system identiﬁcation [55]. Differen-
tiable physics techniques leverage automatic differentiation and gradient descent to provide a uniﬁed framework for
identiﬁcation of parameters in nonlinear systems [1; 56]. The ﬂexibility of differentiable programming has enabled
parameter estimation on complex models of physical systems that would have been challenging with traditional methods
[48; 57; 58].

4.2 Solving Differential Equations

Classical numerical methods for solving ordinary and partial differential equations have had tremendous impact in
physical sciences and engineering[59]. However, in several cases, solution methods are slow, requiring long cycles
for iteration and are not amenable to real-time operation. Solving simple geometries for multi-physics simulations
can take hours to days on top-tier supercomputers. Differentiable techniques offer the possibility of providing rich
approximation schemes that could enable rapid approximate solution of differential equations.

Neural ordinary differential equations [50] bring techniques from ordinary differential equation solvers to deep learning
by noticing that the iterations of a residual network resemble the solution of a differential equation system, implying
that a differential equation solver can be used to directly solve such a network. Universal differential equations [49]
allow for hybrid combinations of classical differential equations with neural approximations. Methods like SInDy
(sparse identiﬁcation of nonlinear dynamics) use sparse regression methods to extract governing equations for nonlinear
systems [60].

Lagrangian neural networks [61] and Hamiltonian neural networks [62] enforce known constraints from the Lagrangian
and Hamiltonian to facilitate neural network modeling of complex. In the absence of these constraints, neural models
can learn aphysical solutions which don’t respect basic physics such as energy conservation. The limitation of these
methods is that they require the Hamiltonian/Lagrangian of the system to be known which isn’t always possible for
complex systems.

2

Differentiable Physics

A POSITION PIECE

Figure 1: We roughly divide the differentiable physics literature into four categories: 1) Parameter estimation demon-
strates how differentiable physics can be used to estimate unknown parameters for physical systems. 2) Neural solution
algorithms for ordinary and partial differential equations. 3) Representation learning can be used to transform physical
systems into vectorial representations for use in downstream applications. 4) Scientiﬁc Foundation models distill masses
of experimental and computational data into succinct representations of complex physics.

3

Differentiable Physics

A POSITION PIECE

Physics inspired neural networks [63; 53] provide a new method to model arbitrary partial differential equations with
deep neural networks. One of the known failure modes of neural partial differential equation solvers is an inability
to handle high frequency information. Recent papers have explored solving partial differential equations in Fourier
space to overcome these limitations [51]. Other work has extended multipole methods to leverage graph convolutional
networks [51]. Neural differential equation technology has also been leveraged to solve stochastic differential equations
[64] and stochastic partial differential equations [65]. Recent work has introduced an algorithm for solving nonlinear
PDEs in very high dimensions wherein the proposed algorithm is shown to be very effective for a range of application
areas both in terms of accuracy and speed [66].

4.3 Learning Representations to Model Physical Phenomena

Molecular Systems: For complex physical systems we may lack a closed form (analytic) representation of the
behavior of a system. For example, molecular machine learning systems use differentiable programs to model complex
molecular properties (although we know how to compute these properties in principle with Schrödinger’s equation, in
practice property prediction required hand-tuned approximate heuristics) [67]. Differentiable physics methods have
yielded increasingly sophisticated methods for modeling molecular properties. Graph convolutional architectures have
proven capable of solving a wide variety of practical molecular property prediction tasks [68; 13; 14]. Differentiable
physics methods have been used to construct rich neural ansatzes for the solution of the many-electron Schrödinger’s
equation [69; 21]. Conversely, the Kohn-Sham equations have been used to form rich priors for neural networks [23].
Considerable work has gone into exploring suitable architectures for molecular data [70; 71].

Materials Science: A rich vein of work has explored the use of differentiable models for describing potential energy
surfaces of molecular systems. DeepPMD-Kit provides an efﬁcient framework to train a potential energy surface
representation[72]. Molecular systems obey physical symmetries and encoding those symmetries and constructing
appropriately equivariant representations enable data-efﬁcient potential energy functions [42]. Pairing these models
with differentiable molecular dynamics [73; 7] offers new possibilities for modeling meso-scale phenomena at quantum
accuracy. Machine learning potentials have seen success with their ability to produce phase-diagrams under extreme
conditions, e.g. supercritical hydrogen [43]. Taking this one step further, differentiable thermodynamic modeling offers
new possibilities for materials modeling and usher in a new era of differentiable CALPHAD (CALculation of PHAse
Diagrams)[74].

Differentiable physics techniques have also started to ﬁnd their footing in materials science with the advent of new
representational architectures like the crystal graph convolutional network [75] and materials property prediction
architectures like MEGNet [76]. Recent work has also added richer physical priors to create lattice convolutional
networks that model adsorption lattice [77] and explored lattice simulations for materials using neural potentials [78].

Fluid and Continuum Mechanics: A number of recent works have explored the application of differentiable physics
to ﬂuid dynamics systems. Jax-CFD implements a simple fully differentiable computational ﬂuid dynamics engine in
Jax [8]. Turbulence modeling is one of the classical challenges of computational ﬂuid dynamics. Methods like RANS
(Reynolds-Averaged Navier Stokes) provide numerical tools for modeling simple turbulent systems [79]. Recent work
has worked to adapt differentiable physics techniques to turbulence modeling, with one recent paper using convolutional
neural ODEs to model turbulent ﬂows [80] and another integrating RANS techniques with deep networks [19; 20].
Such differentiable techniques hold out the promise of more efﬁcient and accurate turbulence models. Computational
modeling has had a tremendous impact in continuum mechanics with frameworks like Moose [81] enabling easy use of
ﬁnite element methods on systems of interest. Recent work has adapted multi-scale graph neural networks to continuum
mechanics simulations [82].

Complex systems: Differentiable physics models of climate science are also starting to gain prominence. A recent
prominent review article [83] proposed a swathe of areas where machine learning could aid the ﬁght against climate
change. Many of these applications are more engineering focused (e.g. optimizing freight lines to minimize carbon
output), but there are also prospects for differentiable physics applications. For example, Veros is a differentiable
ocean simulator written in Jax [84]. Jax-cosmo is exploring the use of differentiable physics models in cosmology
[85]. Differentiable physics is also making its way into ﬁeld theory. Recent work has used normalizing ﬂows to sample
ﬁeld conﬁgurations for the lattice ﬁeld in question [44]. The basic methods have been extended to sample SU (N )
gauge-equivariant ﬂows [86].

4.4 Scientiﬁc Foundation Models

A foundation model (e.g BERT [87], DALL-E [88], CLIP [89], GPT-3 [90]) is deﬁned to be a model trained on broad
data at scale and adaptable to a wide range of downstream tasks despite its inherent incomplete character [91]. Natural
language processing has been profoundly altered in recent years by the advent of foundation models like BERT and

4

Differentiable Physics

A POSITION PIECE

GPT-3. Such models are pretrained on large corpuses of unlabeled text with masked language modeling [92] to learn
meaningful internal representations of language. These pretrained models are subsequently used as rich priors for
downstream tasks. Foundation models have enabled powerful advances such as coding assistants and effective low data
NLP models [90].

We deﬁne a scientiﬁc foundation model as a parameterized physical theory which is usually trained on data and
capable of being applied to a range of downstream tasks despite its physical incompleteness. Classical examples of
scientiﬁc foundation models include ﬂuids simulations using the RANS/LES approximations [93; 94], DFT simulations
with an exchange correlation functional[95; 96], and molecular dynamics simulations with a selected force ﬁeld [97].
Differentiable physics provides new opportunities for merging classical scientiﬁc foundation models with rich neural
representations to offer a framework to construct more physically complete models.

Some early work has explored the use of foundation models for physical systems. ChemBERTa [12] and Grover [98]
are chemical scientiﬁc foundation models for molecular modeling applications. Neural group-equivariant potentials
[99; 100; 101] are scientiﬁc foundation models for performing molecular property predictions. AlphaFold2 [102] is
a scientiﬁc foundation model for predicting protein structures. Geometric deep learning models [103] are scientiﬁc
foundation models for predicting RNA structures. These methods are approaching maturity to catalyze downstream
scientiﬁc applications. It remains an open question how to develop broadly applicable scientiﬁc foundation models. It
may be necessary to develop new pretraining procedures and richer physics informed inductive priors to train scientiﬁc
foundation models that could for example predict the structures and properties of proteins/RNA/DNA/crystals/molecules
all in one model.

5 Directions for future research

Differentiable physics is still in its infancy. In this section, we comment brieﬂy on some directions for future research.
Differentiable physics poses foundational questions in programming language theory and to the applications of physics
more broadly.

5.1 Programming Language Theory and Differentiable Physics

Differentiable programming has raised many hard questions in programming language design that are slowly being
worked out. Recent research has started to establish the formal foundations of differentiable programming languages [4].
Other work has explored the type theory of programming with arrays [104]. Recent work has explored differentiable
programming with higher order functions [105]. In parallel, there is a long history of programming languages which
are designed to model physical systems. Languages like Matlab [106] and Mathematica [107] in addition to NumPy
and Julia have made it dramatically easier to model physical systems in code.

The open question is how we can construct a programming language that can model physical reality. Ideally such a
programming language should be fully differentiable and have full array support. In a parallel line of work, proof
assistants based on dependent type theories have started to ﬁnd mainstream usage in modern mathematics [108]. While
pure mathematics and physics are different ﬁelds, there has been considerable cross pollination between them (e.g.
Navier-Stokes solutions and the Yang-Mills mass gap are both Clay millenium problems which are inspired by open
questions in mathematical physics [109]). Merging the powerful descriptive capabilities of dependent programming
languages with differentiable programming could create a new language suited to describe the frontier of modern
physics.

5.2 Physical Interpretation of Differentiable Physics Models

It is unclear the extent to which differentiable physics could improve understanding of physical systems. Are these
methods simply clever approximations or do they offer a more fundamental advance? We have reason to believe that
this could offer the possibility of a more fundamental advance.

For multiple types of physical systems, there often exist limit functions which have desired properties. For example, the
Hohenberg-Kohn theorems guarantee that the total energy of a system of electrons is a unique functional of the electron
density [110]. This led to the development of density functional theory, where all the complexity is handled within
the exchange-correlation functional. Great progress has been made in improving the quality of exchange-correlation
functional through new hand-coded functional forms.[111] Differentiable physics offers the promise using a richer
neural representation to approximate the exchange correlation functional and directly training it through gradient
descent on experimental data within the Kohn-Sham formalism. Similarly, closure problems arise in ﬂuid dynamics
where solving turbulent ﬂow requires computing higher and higher moments of the ﬂuid ﬂow. Classically, the moments

5

Differentiable Physics

A POSITION PIECE

are often truncated at some approximation order n , for example, RANS truncates this at second order. Recent work in
differentiable physics explores the use of neural techniques to directly solve ﬂuid closure problems [112]. Differentiable
physics could hold out the promise of systematic (and one day rigorous) solutions to the ﬂuid closure problem.

5.3 Using Physics to Understand Differentiable Programs

We have discussed numerous examples of using differentiable programs to understand physical phenomena. There is a
promising line of work that aims to do the inverse: using techniques from statistical physics to develop a theory of deep
learning and differentiable programming. Building connections between thermodynamics and deep learning[35] enables
a richer understanding of the loss functions in machine learning. A rich body of work is building deep connections
between methods of statistical mechanics and deep learning.[113; 32; 37] Other approaches have attempted to build
systematic perturbation-theoretic models of deep networks [114].

5.4 Multiscale Modeling through Modularity

Differentiable physics bring the powerful capability that different differentiable physics models can be fed into one
another. This opens out the possibility of chaining models across multiple physical scales (including length and time).
For example, a differentiable quantum chemistry model could be chained into a differentiable molecular dynamics
model[7] which can then be chained into a device physics model.[115] The composability of differentiable physics
systems hold out the promise of jointly optimizing the total model to get a comprehensive model of a macroscale
physical system. Such comprehensive models enable the computation of sensitivities of macroscale behavior to
properties at the microscopic scales.

6 Languages for Differentiable Physics

At the time of writing, there are two leading programming languages/frameworks for differentiable physics: Julia and
Jax. Julia [116] is a programming language designed for efﬁcient high-level numerical codes which enables efﬁcient
high level code to be written for scientiﬁc applications and has been widely used by the scientiﬁc computing community.
Recently Julia has embraced differentiable programming and has added top-level support for differentiable primitives
[117].

Python is used very widely in machine learning research but has not been used as widely for scientiﬁc computing
applications. Traditionally Python has been too inefﬁcient for scientiﬁc codes. Library authors have had to implement
core methods in a more efﬁcient language like C++ and develop bindings in Python. In recent years, the advent
of NumPy [118] has enabled Python to be used for smaller scale scientiﬁc applications due to NumPy’s automatic
vectorization. Frameworks like Numba [119] and CuPy [120] have made it easier to write high performance numerical
codes directly in Python. More recently, frameworks like TensorFlow [6], PyTorch [121], and Jax [122] have enabled
easy implementation of machine learning methods in Python and have found considerable community traction.

The Jax community notably has been working to extend support beyond machine learning to scientiﬁc machine learning
and differentiable physics applications. Jax-MD [7] extends Jax to molecular dynamics simulations Jax-CFD [8]
extends Jax to ﬂuid dynamics, and Jax-cosmo [85] extends Jax to cosmology . At time of writing, these programs are
still considerably slower than classical numerical codes but continued compiler research may change this state of affairs
and enable differentiable scientiﬁc codes to be written directly in Python.

7 Discussion

Differentiable Physics methods have already made a considerable impact on the numerical modeling of complex
physical systems. We anticipate that this impact will only continue to mature over the coming years with differentiable
physics systems slowly replacing established numerical codes for multi-physics simulations.

Past reviews have highlighted the importance of applying AI to physics applications [123], and a recently released book
[124] on physics-based deep learning uses the term "differentiable physics" in a slightly more narrow context, deﬁning
it as the use of discretized physical model equations within a deep learning architecture.

We belive that differentiable physics offers a new opportunity into modeling physical systems. Differentiable physics
may offer an effective recipe to compute prevalent limiting quantities in physical theories which have until now been
approximated using hand-crafted representations. Differentiable physics is a subject in its infancy, and we anticipate
that many more fundamental innovations are yet to come.

6

Differentiable Physics

A POSITION PIECE

References

[1] Bharath Ramsundar. Physical theories and differentiable programs. https://www.cmu.edu/aced/sciML.

html, 2020. Talk on 2020-10-22.

[2] Eugene Isaacson and Herbert Bishop Keller. Analysis of numerical methods. Courier Corporation, 2012.
[3] Ian Goodfellow, Yoshua Bengio, and Aaron Courville. Deep learning. MIT press, 2016.
[4] Martín Abadi and Gordon D Plotkin. A simple differentiable programming language. Proceedings of the ACM

on Programming Languages, 4(POPL):1–28, 2019.

[5] Atilim Gunes Baydin, Barak A Pearlmutter, Alexey Andreyevich Radul, and Jeffrey Mark Siskind. Automatic

differentiation in machine learning: a survey. Journal of machine learning research, 18, 2018.

[6] Martín Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay
Ghemawat, Geoffrey Irving, Michael Isard, et al. Tensorﬂow: A system for large-scale machine learning. In 12th
{USENIX} symposium on operating systems design and implementation ({OSDI} 16), pages 265–283, 2016.
[7] Samuel Schoenholz and Ekin Dogus Cubuk. Jax md: a framework for differentiable physics. Advances in Neural

Information Processing Systems, 33, 2020.

[8] Dmitrii Kochkov, Jamie A Smith, Ayya Alieva, Qing Wang, Michael P Brenner, and Stephan Hoyer. Machine
learning–accelerated computational ﬂuid dynamics. Proceedings of the National Academy of Sciences, 118(21),
2021.

[9] Kurt Hornik, Maxwell Stinchcombe, and Halbert White. Multilayer feedforward networks are universal

approximators. Neural networks, 2(5):359–366, 1989.

[10] Hongming Chen, Ola Engkvist, Yinhai Wang, Marcus Olivecrona, and Thomas Blaschke. The rise of deep

learning in drug discovery. Drug discovery today, 23(6):1241–1250, 2018.

[11] Xiaowei Jia, Jared Willard, Anuj Karpatne, Jordan Read, Jacob Zwart, Michael Steinbach, and Vipin Kumar.
Physics guided rnns for modeling dynamical systems: A case study in simulating lake temperature proﬁles. In
Proceedings of the 2019 SIAM International Conference on Data Mining, pages 558–566. SIAM, 2019.
[12] Seyone Chithrananda, Gabriel Grand, and Bharath Ramsundar. Chemberta: Large-scale self-supervised pretrain-

ing for molecular property prediction. arXiv preprint arXiv:2010.09885, 2020.

[13] Evan N Feinberg, Debnil Sur, Zhenqin Wu, Brooke E Husic, Huanghao Mai, Yang Li, Saisai Sun, Jianyi Yang,
Bharath Ramsundar, and Vijay S Pande. Potentialnet for molecular property prediction. ACS central science, 4
(11):1520–1530, 2018.

[14] Jonathan M Stokes, Kevin Yang, Kyle Swanson, Wengong Jin, Andres Cubillos-Ruiz, Nina M Donghia, Craig R
MacNair, Shawn French, Lindsey A Carfrae, Zohar Bloom-Ackermann, et al. A deep learning approach to
antibiotic discovery. Cell, 180(4):688–702, 2020.

[15] Dominik Lemm, Guido Falk von Rudorff, and O Anatole von Lilienfeld. Machine learning based energy-free
structure predictions of molecules, transition states, and solids. Nature Communications, 12(1):1–10, 2021.
[16] Mario Krenn, Florian Häse, AkshatKumar Nigam, Pascal Friederich, and Alan Aspuru-Guzik. Self-referencing
embedded strings (selﬁes): A 100% robust molecular string representation. Machine Learning: Science and
Technology, 1(4):045024, 2020.

[17] Payel Das, Tom Sercu, Kahini Wadhawan, Inkit Padhi, Sebastian Gehrmann, Flaviu Cipcigan, Vijil Chenthama-
rakshan, Hendrik Strobelt, Cicero Dos Santos, Pin-Yu Chen, et al. Accelerated antimicrobial discovery via deep
generative models and molecular dynamics simulations. Nature Biomedical Engineering, 5(6):613–623, 2021.
[18] Filipe de Avila Belbute-Peres, Thomas Economon, and Zico Kolter. Combining differentiable pde solvers
and graph neural networks for ﬂuid ﬂow prediction. In International Conference on Machine Learning, pages
2402–2411. PMLR, 2020.

[19] Pedro M Milani, Julia Ling, and John K Eaton. Generalization of machine-learned turbulent heat ﬂux models

applied to ﬁlm cooling ﬂows. Journal of Turbomachinery, 142(1), 2020.

[20] Pedro M Milani, Julia Ling, and John K Eaton. Turbulent scalar ﬂux in inclined jets in crossﬂow: counter

gradient transport and deep learning modelling. Journal of Fluid Mechanics, 906, 2021.

[21] Jan Hermann, Zeno Schätzle, and Frank Noé. Deep-neural-network solution of the electronic schrödinger

equation. Nature Chemistry, 12(10):891–897, 2020.

[22] WMC Foulkes, Lubos Mitas, RJ Needs, and Guna Rajagopal. Quantum monte carlo simulations of solids.

Reviews of Modern Physics, 73(1):33, 2001.

7

Differentiable Physics

A POSITION PIECE

[23] Li Li, Stephan Hoyer, Ryan Pederson, Ruoxi Sun, Ekin D Cubuk, Patrick Riley, Kieron Burke, et al. Kohn-sham
equations as regularizer: Building prior knowledge into machine-learned physics. Physical review letters, 126
(3):036401, 2021.

[24] Hsin-Yuan Huang, Michael Broughton, Masoud Mohseni, Ryan Babbush, Sergio Boixo, Hartmut Neven, and
Jarrod R McClean. Power of data in quantum machine learning. Nature communications, 12(1):1–9, 2021.
[25] E Miles Stoudenmire and David J Schwab. Supervised learning with quantum-inspired tensor networks. arXiv

preprint arXiv:1605.05775, 2016.

[26] Alba Cervera-Lierta, Jakob S Kottmann, and Alán Aspuru-Guzik. The meta-variational quantum eigensolver
(meta-vqe): Learning energy proﬁles of parameterized hamiltonians for quantum simulation. arXiv preprint
arXiv:2009.13545, 2020.

[27] Guillaume Verdon, Michael Broughton, Jarrod R McClean, Kevin J Sung, Ryan Babbush, Zhang Jiang, Hartmut
Neven, and Masoud Mohseni. Learning to learn with quantum neural networks via classical neural networks.
arXiv preprint arXiv:1907.05415, 2019.

[28] Alexander Bills, Shashank Sripad, William L Fredericks, Matthew Guttenberg, Devin Charles, Evan Frank, and
Venkatasubramanian Viswanathan. Universal battery performance and degradation model for electric aircraft.
arXiv preprint arXiv:2008.01527, 2020.

[29] Alok Warey, Shailendra Kaushik, Bahram Khalighi, Michael Cruse, and Ganesh Venkatesan. Data-driven
prediction of vehicle cabin thermal comfort: using machine learning and high-ﬁdelity simulation results.
International Journal of Heat and Mass Transfer, 148:119083, 2020.

[30] Kristen A Severson, Peter M Attia, Norman Jin, Nicholas Perkins, Benben Jiang, Zi Yang, Michael H Chen,
Muratahan Aykol, Patrick K Herring, Dimitrios Fraggedakis, et al. Data-driven prediction of battery cycle life
before capacity degradation. Nature Energy, 4(5):383–391, 2019.

[31] Raphaël Pestourie, Youssef Mroueh, Thanh V Nguyen, Payel Das, and Steven G Johnson. Active learning of
deep surrogates for pdes: application to metasurface design. npj Computational Materials, 6(1):1–7, 2020.
[32] Aitor Lewkowycz, Yasaman Bahri, Ethan Dyer, Jascha Sohl-Dickstein, and Guy Gur-Ari. The large learning rate

phase of deep learning: the catapult mechanism. arXiv preprint arXiv:2003.02218, 2020.

[33] Dedi Wang and Pratyush Tiwary. State predictive information bottleneck. The Journal of Chemical Physics, 154

(13):134111, 2021.

[34] Carl P Goodrich, Ella M King, Samuel S Schoenholz, Ekin D Cubuk, and Michael P Brenner. Designing
self-assembling kinetics with differentiable statistical physics models. Proceedings of the National Academy of
Sciences, 118(10), 2021.

[35] Alexander A Alemi and Ian Fischer. Therml: Thermodynamics of machine learning.

arXiv preprint

arXiv:1807.04162, 2018.

[36] Alberto Fachechi, Elena Agliari, and Adriano Barra. Dreaming neural networks: forgetting spurious memories

and reinforcing pure ones. Neural Networks, 112:24–40, 2019.

[37] Elena Agliari, Francesco Alemanno, Adriano Barra, Martino Centonze, and Alberto Fachechi. Neural networks
with a redundant representation: detecting the undetectable. Physical review letters, 124(2):028301, 2020.
[38] Sun-Ting Tsai, En-Jui Kuo, and Pratyush Tiwary. Learning molecular dynamics with simple language model

built upon long short-term memory neural network. Nature communications, 11(1):1–11, 2020.

[39] Weile Jia, Han Wang, Mohan Chen, Denghui Lu, Lin Lin, Roberto Car, E Weinan, and Linfeng Zhang. Pushing
the limit of molecular dynamics with ab initio accuracy to 100 million atoms with machine learning. In SC20:
International Conference for High Performance Computing, Networking, Storage and Analysis, pages 1–14.
IEEE, 2020.

[40] Linfeng Zhang, Jiequn Han, Han Wang, Wissam A Saidi, Roberto Car, et al. End-to-end symmetry preserving

inter-atomic potential energy model for ﬁnite and extended systems. arXiv preprint arXiv:1805.09003, 2018.

[41] Yixiao Chen, Linfeng Zhang, Han Wang, and Weinan E. Deepks: A comprehensive data-driven approach toward
chemically accurate density functional theory. Journal of Chemical Theory and Computation, 17(1):170–181,
2020.

[42] Simon Batzner, Tess E Smidt, Lixin Sun, Jonathan P Mailoa, Mordechai Kornbluth, Nicola Molinari, and Boris
Kozinsky. Se (3)-equivariant graph neural networks for data-efﬁcient and accurate interatomic potentials. arXiv
preprint arXiv:2101.03164, 2021.

[43] Bingqing Cheng, Guglielmo Mazzola, Chris J Pickard, and Michele Ceriotti. Evidence for supercritical behaviour

of high-pressure liquid hydrogen. Nature, 585(7824):217–220, 2020.

8

Differentiable Physics

A POSITION PIECE

[44] MS Albergo, G Kanwar, and PE Shanahan. Flow-based generative models for markov chain monte carlo in

lattice ﬁeld theory. Physical Review D, 100(3):034515, 2019.

[45] Gurtej Kanwar, Michael S Albergo, Denis Boyda, Kyle Cranmer, Daniel C Hackett, Sébastien Racaniere,
Danilo Jimenez Rezende, and Phiala E Shanahan. Equivariant ﬂow-based sampling for lattice gauge theory.
Physical Review Letters, 125(12):121601, 2020.

[46] Shaojie Bai, J Zico Kolter, and Vladlen Koltun. arXiv preprint arXiv:1909.01377, 2019.

[47] Shaojie Bai, Vladlen Koltun, and J Zico Kolter. Multiscale deep equilibrium models. arXiv preprint

arXiv:2006.08656, 2020.

[48] Joseph Bakarji and Daniel M Tartakovsky. Data-driven discovery of coarse-grained equations. Journal of

Computational Physics, 434:110219, 2021.

[49] Christopher Rackauckas, Yingbo Ma, Julius Martensen, Collin Warner, Kirill Zubov, Rohit Supekar, Dominic
Skinner, Ali Ramadhan, and Alan Edelman. Universal differential equations for scientiﬁc machine learning.
arXiv preprint arXiv:2001.04385, 2020.

[50] Ricky TQ Chen, Yulia Rubanova, Jesse Bettencourt, and David Duvenaud. Neural ordinary differential equations.

arXiv preprint arXiv:1806.07366, 2018.

[51] Zongyi Li, Nikola Kovachki, Kamyar Azizzadenesheli, Burigede Liu, Kaushik Bhattacharya, Andrew Stuart,
and Anima Anandkumar. Fourier neural operator for parametric partial differential equations. arXiv preprint
arXiv:2010.08895, 2020.

[52] Zongyi Li, Nikola Kovachki, Kamyar Azizzadenesheli, Burigede Liu, Kaushik Bhattacharya, Andrew Stuart,
and Anima Anandkumar. Multipole graph neural operator for parametric partial differential equations. arXiv
preprint arXiv:2006.09535, 2020.

[53] Ameya D Jagtap and George Em Karniadakis. Extended physics-informed neural networks (xpinns): A
generalized space-time domain decomposition based deep learning framework for nonlinear partial differential
equations. Communications in Computational Physics, 28(5):2002–2041, 2020.

[54] James Vere Beck and Kenneth J Arnold. Parameter estimation in engineering and science. James Beck, 1977.

[55] Lennart Ljung. System identiﬁcation. In Signal analysis and prediction, pages 163–173. Springer, 1998.

[56] Lennart Ljung, Carl Andersson, Koen Tiels, and Thomas B Schön. Deep learning and system identiﬁcation.

IFAC-PapersOnLine, 53(2):1175–1181, 2020.

[57] Ali Punjani and Pieter Abbeel. Deep learning helicopter dynamics models.
Conference on Robotics and Automation (ICRA), pages 3223–3230. IEEE, 2015.

In 2015 IEEE International

[58] Yuanming Hu, Luke Anderson, Tzu-Mao Li, Qi Sun, Nathan Carr, Jonathan Ragan-Kelley, and Frédo Durand.
Difftaichi: Differentiable programming for physical simulation. arXiv preprint arXiv:1910.00935, 2019.

[59] John Charles Butcher. Numerical methods for ordinary differential equations. John Wiley & Sons, 2016.

[60] Steven L Brunton, Joshua L Proctor, and J Nathan Kutz. Discovering governing equations from data by sparse
identiﬁcation of nonlinear dynamical systems. Proceedings of the national academy of sciences, 113(15):
3932–3937, 2016.

[61] Miles Cranmer, Sam Greydanus, Stephan Hoyer, Peter Battaglia, David Spergel, and Shirley Ho. Lagrangian

neural networks. arXiv preprint arXiv:2003.04630, 2020.

[62] Samuel J Greydanus, Misko Dzumba, and Jason Yosinski. Hamiltonian neural networks. 2019.

[63] Maziar Raissi, Paris Perdikaris, and George E Karniadakis. Physics-informed neural networks: A deep learning
framework for solving forward and inverse problems involving nonlinear partial differential equations. Journal
of Computational Physics, 378:686–707, 2019.

[64] Belinda Tzen and Maxim Raginsky. Neural stochastic differential equations: Deep latent gaussian models in the

diffusion limit. arXiv preprint arXiv:1905.09883, 2019.

[65] Christian Beck, Sebastian Becker, Patrick Cheridito, Arnulf Jentzen, and Ariel Neufeld. Deep learning based
numerical approximation algorithms for stochastic partial differential equations and high-dimensional nonlinear
ﬁltering problems. arXiv preprint arXiv:2012.01194, 2020.

[66] Jiequn Han, Arnulf Jentzen, and E Weinan. Solving high-dimensional partial differential equations using deep

learning. Proceedings of the National Academy of Sciences, 115(34):8505–8510, 2018.

[67] Bharath Ramsundar. Molecular machine learning with DeepChem. PhD thesis, Stanford University, 2018.

9

Differentiable Physics

A POSITION PIECE

[68] Kevin McCloskey, Eric A Sigel, Steven Kearnes, Ling Xue, Xia Tian, Dennis Moccia, Diana Gikunju, Sana
Bazzaz, Betty Chan, Matthew A Clark, et al. Machine learning on dna-encoded libraries: a new paradigm for hit
ﬁnding. Journal of Medicinal Chemistry, 63(16):8857–8866, 2020.

[69] David Pfau, James S Spencer, Alexander GDG Matthews, and W Matthew C Foulkes. Ab initio solution of the
many-electron schrödinger equation with deep neural networks. Physical Review Research, 2(3):033429, 2020.

[70] Kristof T Schütt, Pieter-Jan Kindermans, Huziel E Sauceda, Stefan Chmiela, Alexandre Tkatchenko, and Klaus-
Robert Müller. Schnet: A continuous-ﬁlter convolutional neural network for modeling quantum interactions.
arXiv preprint arXiv:1706.08566, 2017.

[71] Johannes Klicpera, Janek Groß, and Stephan Günnemann. Directional message passing for molecular graphs.

arXiv preprint arXiv:2003.03123, 2020.

[72] Han Wang, Linfeng Zhang, Jiequn Han, and E Weinan. Deepmd-kit: A deep learning package for many-body
potential energy representation and molecular dynamics. Computer Physics Communications, 228:178–184,
2018.

[73] Frank Noé, Alexandre Tkatchenko, Klaus-Robert Müller, and Cecilia Clementi. Machine learning for molecular

simulation. Annual review of physical chemistry, 71:361–390, 2020.

[74] Pin-Wen Guan. Differentiable thermodynamic modeling. arXiv preprint arXiv:2102.10705, 2021.

[75] Tian Xie and Jeffrey C Grossman. Crystal graph convolutional neural networks for an accurate and interpretable

prediction of material properties. Physical review letters, 120(14):145301, 2018.

[76] Chi Chen, Weike Ye, Yunxing Zuo, Chen Zheng, and Shyue Ping Ong. Graph networks as a universal machine

learning framework for molecules and crystals. Chemistry of Materials, 31(9):3564–3572, 2019.

[77] Jonathan Lym, Geun Ho Gu, Yousung Jung, and Dionisios G Vlachos. Lattice convolutional neural network

modeling of adsorbate coverage effects. The Journal of Physical Chemistry C, 123(31):18951–18959, 2019.

[78] VV Ladygin, P Yu Korotaev, AV Yanilkin, and AV Shapeev. Lattice dynamics simulation using machine learning

interatomic potentials. Computational Materials Science, 172:109333, 2020.

[79] Siti Nurul Akmal Yusuf, Yutaka Asako, Nor Azwadi Che Sidik, Saiful Bahri Mohamed, and Wan Mohd Arif Aziz

Japar. A short review on rans turbulence models. CFD Letters, 12(11):83–96, 2020.

[80] Varun Shankar, Gavin Portwood, Arvind Mohan, Peetak Mitra, Venkat Viswanathan, and David Schmidt. Rapid
spatiotemporal turbulence modeling with convolutional neural odes. In APS Division of Fluid Dynamics Meeting
Abstracts, pages X11–004, 2020.

[81] Moose contributors. Moose: The Multiphysics Object-Oriented Simulation Environment. https://github.

com/idaholab/moose, 2021. [Online; accessed 29-August-2021].

[82] Mario Lino, Chris Cantwell, Anil A Bharath, and Stathi Fotiadis. Simulating continuum mechanics with

multi-scale graph neural networks. arXiv preprint arXiv:2106.04900, 2021.

[83] David Rolnick, Priya L Donti, Lynn H Kaack, Kelly Kochanski, Alexandre Lacoste, Kris Sankaran, An-
drew Slavin Ross, Nikola Milojevic-Dupont, Natasha Jaques, Anna Waldman-Brown, et al. Tackling climate
change with machine learning. arXiv preprint arXiv:1906.05433, 2019.

[84] Veros contributors. Veros is the versatile ocean simulator. https://github.com/team-ocean/veros, 2021.

[Online; accessed 29-August-2021].

[85] Jax cosmo contributors. jax-cosmo. https://github.com/DifferentiableUniverseInitiative/jax_

cosmo, 2021. [Online; accessed 29-August-2021].

[86] Denis Boyda, Gurtej Kanwar, Sébastien Racanière, Danilo Jimenez Rezende, Michael S Albergo, Kyle Cranmer,
Daniel C Hackett, and Phiala E Shanahan. Sampling using su (n) gauge equivariant ﬂows. Physical Review D,
103(7):074504, 2021.

[87] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional

transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018.

[88] Aditya Ramesh, Mikhail Pavlov, Gabriel Goh, Scott Gray, Chelsea Voss, Alec Radford, Mark Chen, and Ilya

Sutskever. Zero-shot text-to-image generation. arXiv preprint arXiv:2102.12092, 2021.

[89] Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry,
Amanda Askell, Pamela Mishkin, Jack Clark, et al. Learning transferable visual models from natural language
supervision. arXiv preprint arXiv:2103.00020, 2021.

10

Differentiable Physics

A POSITION PIECE

[90] Tom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind
Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are few-shot learners. arXiv
preprint arXiv:2005.14165, 2020.

[91] Rishi Bommasani, Drew A Hudson, Ehsan Adeli, Russ Altman, Simran Arora, Sydney von Arx, Michael S
Bernstein, Jeannette Bohg, Antoine Bosselut, Emma Brunskill, et al. On the opportunities and risks of foundation
models. arXiv preprint arXiv:2108.07258, 2021.

[92] Elena Voita, Rico Sennrich, and Ivan Titov. The bottom-up evolution of representations in the transformer: A
study with machine translation and language modeling objectives. arXiv preprint arXiv:1909.01380, 2019.

[93] D. C. Wilcox. Turbulence modelling for CFD. DCW Industries, La Cañada, 1993.
[94] Stephen B. Pope. Turbulent Flows. Cambridge University Press, 2000.
[95] John P Perdew, Kieron Burke, and Matthias Ernzerhof. Generalized gradient approximation made simple.

Physical review letters, 77(18):3865, 1996.

[96] Jess Wellendorff, Keld T Lundgaard, Andreas Møgelhøj, Vivien Petzold, David D Landis, Jens K Nørskov,
Thomas Bligaard, and Karsten W Jacobsen. Density functionals for surface science: Exchange-correlation model
development with bayesian error estimation. Physical Review B, 85(23):235149, 2012.

[97] Steve Plimpton. Fast parallel algorithms for short-range molecular dynamics. Journal of computational physics,

117(1):1–19, 1995.

[98] Yu Rong, Yatao Bian, Tingyang Xu, Weiyang Xie, Ying Wei, Wenbing Huang, and Junzhou Huang. Self-

supervised graph transformer on large-scale molecular data. arXiv preprint arXiv:2007.02835, 2020.

[99] Taco Cohen and Max Welling. Group equivariant convolutional networks. In International conference on

machine learning, pages 2990–2999. PMLR, 2016.

[100] Risi Kondor, Zhen Lin, and Shubhendu Trivedi. Clebsch–gordan nets: a fully fourier space spherical convolutional

neural network. Advances in Neural Information Processing Systems, 31:10117–10126, 2018.

[101] Brandon Anderson, Truong-Son Hy, and Risi Kondor. Cormorant: Covariant molecular neural networks. arXiv

preprint arXiv:1906.04015, 2019.

[102] John Jumper, Richard Evans, Alexander Pritzel, Tim Green, Michael Figurnov, Olaf Ronneberger, Kathryn
Tunyasuvunakool, Russ Bates, Augustin Žídek, Anna Potapenko, et al. Highly accurate protein structure
prediction with alphafold. Nature, 596(7873):583–589, 2021.

[103] Raphael JL Townshend, Stephan Eismann, Andrew M Watkins, Ramya Rangan, Maria Karelina, Rhiju Das, and

Ron O Dror. Geometric deep learning of rna structure. Science, 373(6558):1047–1051, 2021.

[104] Dougal Maclaurin, Alexey Radul, Matthew J Johnson, and Dimitrios Vytiniotis. Dex: array programming with

typed indices. 2019.

[105] Benjamin Sherman, Jesse Michel, and Michael Carbin. Lambda-s: computable semantics for differentiable
programming with higher-order functions and datatypes. Proceedings of the ACM on Programming Languages,
5(POPL):1–31, 2021.

[106] Desmond J Higham and Nicholas J Higham. MATLAB guide. SIAM, 2016.
[107] Stephen Wolfram et al. The MATHEMATICA® book, version 4. Cambridge university press, 1999.
[108] Leonardo de Moura, Soonho Kong, Jeremy Avigad, Floris Van Doorn, and Jakob von Raumer. The lean theorem
prover (system description). In International Conference on Automated Deduction, pages 378–388. Springer,
2015.

[109] James A Carlson, Arthur Jaffe, and Andrew Wiles. The millennium prize problems. Citeseer, 2006.
[110] ST Epstein and CM Rosenthal. The hohenberg–kohn theorem. The Journal of Chemical Physics, 64(1):247–249,

1976.

[111] Ann E Mattsson. In pursuit of the" divine" functional. Science, 298(5594):759–760, 2002.
[112] Chenhao Ma, Ben Zhu, Xue-Qiao Xu, and Weixing Wang. Machine learning surrogate models for landau ﬂuid

closure. Physics of Plasmas, 27(4):042502, 2020.

[113] Yasaman Bahri, Jonathan Kadmon, Jeffrey Pennington, Sam S Schoenholz, Jascha Sohl-Dickstein, and Surya
Ganguli. Statistical mechanics of deep learning. Annual Review of Condensed Matter Physics, 11:501–528,
2020.

[114] Daniel A Roberts, Sho Yaida, and Boris Hanin. The principles of deep learning theory. arXiv preprint

arXiv:2106.10165, 2021.

11

Differentiable Physics

A POSITION PIECE

[115] Sean Mann, Eric Fadel, Samuel S Schoenholz, Ekin D Cubuk, Steven G Johnson, and Giuseppe Romano. dpv:

An end-to-end differentiable solar-cell simulator. arXiv preprint arXiv:2105.06305, 2021.

[116] Jeff Bezanson, Alan Edelman, Stefan Karpinski, and Viral B Shah. Julia: A fresh approach to numerical

computing. SIAM review, 59(1):65–98, 2017.

[117] Zygote contributors. Zygote. https://github.com/FluxML/Zygote.jl, 2021. [Online; accessed 29-August-

2021].

[118] Travis E Oliphant. A guide to NumPy, volume 1. Trelgol Publishing USA, 2006.
[119] Siu Kwan Lam, Antoine Pitrou, and Stanley Seibert. Numba: A llvm-based python jit compiler. In Proceedings

of the Second Workshop on the LLVM Compiler Infrastructure in HPC, pages 1–6, 2015.

[120] ROYUD Nishino and Shohei Hido Crissman Loomis. Cupy: A numpy-compatible library for nvidia gpu

calculations. 31st confernce on neural information processing systems, 151, 2017.

[121] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen,
Zeming Lin, Natalia Gimelshein, Luca Antiga, et al. Pytorch: An imperative style, high-performance deep
learning library. Advances in neural information processing systems, 32:8026–8037, 2019.

[122] James Bradbury, Roy Frostig, Peter Hawkins, Matthew James Johnson, Chris Leary, Dougal Maclaurin, George
Necula, Adam Paszke, Jake VanderPlas, Skye Wanderman-Milne, and Qiao Zhang. JAX: composable transfor-
mations of Python+NumPy programs, 2018. URL http://github.com/google/jax.

[123] Karen E Willcox, Omar Ghattas, and Patrick Heimbach. The imperative of physics-based modeling and inverse

theory in computational science. Nature Computational Science, 1(3):166–168, 2021.

[124] Nils Thuerey, Philipp Holl, Maximilian Mueller, Patrick Schnell, Felix Trost, and Kiwon Um. Physics-based

Deep Learning. WWW, 2021. URL https://physicsbaseddeeplearning.org.

12

