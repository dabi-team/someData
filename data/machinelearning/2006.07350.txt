0
2
0
2

l
u
J

0
3

]

R
C
.
s
c
[

2
v
0
5
3
7
0
.
6
0
0
2
:
v
i
X
r
a

Exploiting ML algorithms for Efﬁcient Detection and Prevention of
JavaScript-XSS Attacks in Android Based Hybrid Applications

Usama Khalid
Department of Computer Science, COMSATS University Islamabad, Wah Campus, Pakistan

Muhammad Abdullah
Department of Computer Science, University of Engineering and Technology Taxila, Pakistan

Kashif Inayat
Department of Electronics Engineering, Incheon National University, South Korea∗

July 31, 2020

Abstract The development and analysis of mo-
bile applications in term of security have become
an active research area from many years as many
apps are vulnerable to different attacks. Especially
the concept of hybrid applications has emerged in
the last three years where applications are developed
in both native and web languages because the use
of web languages raises certain security risks in hy-
brid mobile applications as it creates possible chan-
nels where malicious code can be injected inside the
application. WebView is an important component
in hybrid mobile applications which used to imple-
ments a sandbox mechanism to protect the local re-
sources of smartphone devices from un-authorized
access of JavaScript. However, the WebView appli-
cation program interfaces (APIs) also have security
issues. For example, an attacker can attack the hy-
brid application via JavaScript code by bypassing the
sandbox security through accessing the public meth-
ods of the applications. Cross-site scripting (XSS)

∗Corresponding
kashif.inayat@inu.ac.kr).

author:

Kashif

Inayat

(email:

is one of the most popular malicious code injection
technique for accessing the public methods of the ap-
plication through JavaScript. This research proposes
a framework for detection and prevention of XSS
attacks in hybrid applications using state-of-the-art
machine learning (ML) algorithms. The detection
of the attacks have been perform by exploiting the
registered Java object features. The dataset and the
sample hybrid applications have been developed us-
ing the android studio. Then the widely used toolkit,
RapidMiner, has been used for empirical analysis.
The results reveal that the ensemble based Random
Forest algorithm outperforms other algorithms and
achieves both the accuracy and F-measures as high
as of 99%.

1

Introduction

In the past few years, the rate of using smart phones
and android applications has increased tremen-
dously. Different new techniques in development
of android applications, have been used, some of

1

 
 
 
 
 
 
information is sent

them make smart pones vulnerable for different
attacks (especially XSS attacks). There are two
main types of XSS attacks: persistent XSS attack
and non-persistent attack [1]. In persistent attacks,
an attacker stores malicious script in a server and
when a victim accesses that server, the malicious
script starts working in the victim’s browser and
to the attacker in
important
return. In non-persistent attacks, an attacker sends
malicious script to a victim’s browser, and when the
victim runs that script, the web application opens,
where the attacker steals important
information.
According to the report of WhiteHat Security [2],
almost 432 million Android smartphones have been
sold in year 2017. This study also reports that
almost 30% attacks are involved in web applications
(asynchronous JavaScript and extensible markup
language (AJAX) intrusion [3], phishing attacks
etc.), 62% attacks are based on feature hacking
to exploit vulnerabilities, 81% attacks are hacking
related breaches that
leveraged weak or stolen
passwords and 32% attacks are exploiting structured
query language (SQL) injection errors in dynamic
web applications [2]. Another report by Gartner
indicates that more than 50% mobile applications
are using hybrid technology [4]. Hybrid applications
are developed using both Java and web languages
such as hypertext markup language (HTML), cas-
cading style sheets (CSS) and JavaScript [5, 6]. The
structure of hybrid applications is similar to web ap-
plications. However, the main component in hybrid
applications is WebView [4, 7–9], which is provided
by the browser engine named WebKit. WebView
provides the basic browser functionality to load
and display web pages within Android applications
without switching to the default browser.
This
WeView based facility decreases the loading time of
web pages. More importantly, Android applications
can interact with JavaScript code embedded in web
pages directly [4]. WebView is placed inside a

native container. Therefore,
it can easily access
mobile hardware resources such as mobile libraries,
messages, contacts with the help of APIs. Since
WebView uses different APIs to access resources
and there exist potential loopholes in these APIs,
most hackers use XSS attacks to hack different
types of smart phone devices [2, 10]. Although
the XSS attack mechanisms in hybrid applications
are a little bit different from those in normal web
attacks, the main concept behind the attacks is the
same. Most common attacks in hybrid applications
are invoking native Java from JavaScript (through
WebView) and invoking JavaScript from native Java
(through WebView) [9]. In hybrid applications while
invoking Java from JavaScript, an attacker stores
the malicious JavaScript code in an web page, when
the web page opens in the application and then an
object is registered in the WebView. First of all, the
attacker accesses that object through JavaScript and
through that object the attacker accesses the native
method of that application, from where the attacker
can easily get different smartphone resources by
triggering important built-in functions inside the
native method.

1.1 General Idea

To address the aforementioned research issues, we
propose an XSS detection and prevention frame-
work. The steps of the proposed approach are as fol-
lows. First of all, when a Java object is registered
in WebView, threat prevention unit in our prevention
system extracts those features of the object and sends
these feature information to the detection unit. Then
the detection unit applies machine learning based al-
gorithm on these features and detects whether the in-
coming object is accessing important native methods
or not, and sends the resulting decision to the threat
prevention unit. In the case of detection of the at-

2

tack, the threat prevention unit becomes active and
the alert application asks the user if this object is al-
lowed to get registered and access the application or
not. If the user response is yes, then the threat pre-
vention unit allows this object to access phone re-
sources. Otherwise, the threat prevention unit blocks
that object and records it as an attack for future attack
detection.

WebView component and describes how WebView
bypasses the sandbox mechanism. Section 4 propose
our framework which consists of detection and pre-
vention of XSS. Tools in use and evaluation dataset
are explained in Section 5. Our analysis results are
presented in Section 6. Section 7 describes which al-
gorithm is better for our detection system. concludes
this paper.

1.2 Contributions

The major contributions of this paper can be summa-
rized as follows:

• We generated dataset by analyzing records be-
havior of 500 different applications and then ex-
tracted 7 different features from the dataset.

• To detect all threats that come from web pages,
we hooked the addJavascriptInterface API and
detection framework. Therefore, every Java ob-
ject that is intended to be registered into Web-
View can be inspected.

• We used 7 ML algorithms (Evolutionary-
Support Vector Machine (E-SVM), Neural Net-
work, Naive Bayes, Support Vector Machine
(SVM), Bagging, Random Forest and J48) for
the malicious APIs classiﬁcation in the detec-
tion unit, algorithms learn and efﬁciency in-
crease with time.

• We made the analysis on all algorithms based
on accuracy, F-measure and execution time and
conclude the Random Forest is the best among
detecting XSS attacks.

1.3 Organization

The organization of this paper is as follows: Section
2 reviews related work. Section 3 describes the pre-
liminaries, which includes sandbox mechanism, the

2 Related Work

The relevant literature presents a number of research
studies to detect and prevent the security attacks on
the hybrid applications. We have differentiate sev-
eral examined approaches into three categories: a)
classiﬁcation based techniques b) simple techniques,
and c) soft computing based techniques.

2.1 Classiﬁcation based techniques

There are a lot of mobile frameworks which are
used in development. Most android hybrid applica-
tions are developed with the PhoneGap framework,
through which attackers can easily bypass the sand-
box mechanism. That is why hybrid applications
provide a way to bypass access control policies of
both WebView and WebKit, and run malicious code
in users application. In the PhoneGap plugins, mali-
cious code can access and steal a users private infor-
mation and destroy the users ﬁle system. In hybrid
application, JavaScript is also used in development.
Therefore, attackers can launch their attack through
encoded JavaScript in human-unreadable form on
rendering web pages in users application. On clas-
sifying different types of applications result came up
with 95.3% precision. That means most of the ap-
plications are suffering from this issue [4, 11]. As
different type of web sites render in WebView in hy-
brid applications, attackers can also launch attack

3

through malicious URLs and then by applying im-
proved semisupervised algorithm to construct URL
multi-classiﬁcation model. Hybrid applications can
detect and blacklist URLs through efﬁcient URL
classiﬁcation in [12]. Different web sites rendered
in WebView consist of HTML tags, script functions,
hyperlinks and advanced features. However, these
features increase the security risk. Features extracted
by Angelo et al. in [13] improve the accuracy of au-
tomatic XSS classiﬁcation by 98.5%.

2.2 Simple techniques

Inyong et al.

WebView is an essential component in hybrid appli-
cations which provide different APIs through which
application can interact with web pages. This inter-
action allows to access resources using Java Object.
Access control on security-sensitive APIs on the Java
object level uses static analysis to detect these sensi-
tive APIs at runtime and notiﬁes a user if it detects
any threat [7, 9]. Attackers can launch attacks us-
ing different strategies, one of which is SQL injec-
removes the value of an SQL
tion.
query attribute of web pages when parameters are
submitted and then compares it with the predeter-
mined one. This method shows an effective results
[17, 21]. SQL injections can also be prevented by
using a technique called Sania during development
and debugging.
It intercepts SQL query between
application and database, and generates attacks ac-
cording to the syntax of vulnerable spots in SQL. It
also compares parse trees of SQL with parse trees
after attacks to evaluate the safety of those spots.
Another way to block SQL injection is by applying
AMNESIA, which is based on combination of static
and dynamic analysis. In static phase, model of all
query strings is extracted from web application code
using existing string analysis.
In dynamic phase,
it monitors dynamically-created queries for confor-
mance with statically-build model. Quires which are

not complaint are identiﬁed as SQL Injection At-
tacks (SQLIA’s) [18, 19]. Another emerged strategy
is the ADSandbox system which detects malicious
web sites attacks through JavaScript by logging ev-
ery critical action of web site. Using these logs, AD-
Sandbox decides whether the web site is malicious or
not [14]. Android application (AA) sandbox is also
an efﬁcient strategy which performs both static and
dynamic testing in Android programs to automati-
cally detect suspicious applications [15]. Different
hybrid applications are developed in multiple lan-
guages with different semantics which may be vul-
nerable. HybriDroid, a static analysis framework, in-
vestigates semantics especially for the interoperation
mechanism of Android Java and JavaScript. This
framework analyzes inter-communication between
Android Java and JavaScript. [8] Another frame-
work called Crowdroid is for collection of traces. It
works on two types of datasets: artiﬁcial malware
created for test purposes and real malware found
in the wild.
In [22], a simple technique has been
proposed to detect the XSS attack in an efﬁcient
way. Another framework called Cordonove com-
bines HTML5, JavaScript (JS) and native application
code to develop hybrid application. However, com-
bining languages increases security threats. Achim
et al. method constructs a uniform call graph for hy-
brid applications through which the system can de-
tect malicious calls [24]. On the other hand, there
is an insufﬁciency of access control in HTML5 ap-
plications. To overcome this insufﬁciency, the ﬁne-
grained access control mechanism separate subjects
within the same application by deﬁning frame-based
and origin-based policy [25]. There are a lot of hid-
den injection points in HTML5 based web applica-
tions through which attackers can attack and steal
important information. Context-Sensitive sanitiza-
tion based XSS framework can detect those injec-
tion points, sanitize them and remove XSS attacks
[33]. With the exploding number of android applica-

4

tions attackers can launch XSS attack through mal-
ware calls. Therefore Its very important to analyze
and detect malicious behaviors of applications which
launch these calls for analysts. Mobile-Sandbox cov-
ers this whole perspective in two ways: by combin-
ing static and dynamic analysis; and by using spe-
ciﬁc techniques to log these malicious calls which
trigger native API’s. We run 36,000 applications
through this system and results came up with 24%
applications use native calls in [16]. In hybrid appli-
cations, permissions are not enough to ensure the se-
curity of private information. SCANDAL is a sound
automatic static analyzer which detects privacy leaks
in Android applications and alerts users if threats are
It analyzed real-time applications and de-
found.
tected privacy leaks in 11 applications and 8 known
malicious applications [23]. Malicious applications
can be third party applications which can access and
steal sensitive data. TaintDroid provides real-time
analysis of third-party applications with 68 instances
of potential misuse detected [31].

2.3 Soft computing based techniques

Artiﬁcial intelligence plays a vital role in detection
and prevention of XSS attacks in hybrid applica-
tions. A search based approach for security testing
of web applications by using static analysis to detect
XSS attack is presented in [27]. Genetic Algorithm
(GA) pass inputs automatically which expose those
vulnerabilities. By using search results test cases
are presented to developers to understand and ﬁx
these issues.In [28], another approach to expose
XSS attacks using genetic algorithm is by creating
XSS attack patterns is proposed. By using test data,
if it uncovers any path, then it records as malicious.
Therefore, genetic algorithm-based test data gen-
erator uses a database of XSS attack patterns to
generate possible attacks and assesses whether the
attack is successful or not. In [29], classiﬁcation of

Androids application ﬁles have been done through
machine learning techniques, static features are
extracted from Androids Java byte-code and other
ﬁle types such as XML-ﬁles. They performed eval-
uation on 2850 applications and gained an accuracy
level of 91.8%. One of the popular machine learning
technique is data mining which can also detect
XSS attacks. The combination of data mining and
taint analysis techniques to detect false positives
generated 5% better results than PhpMinerII’s and
45% better results than Pixy’s [30]. We can also
improve our XSS detection results by combining
genetic algorithm and static analysis. Pixy is used
to detect vulnerabilities and uncover existing XSS
attack by removing infeasible paths and using test
data. Then genetic algorithm is applied to only
those paths to detect XSS Attacks [34]. Finally XSS
attacks can also be detected by combining model
Inference
of inference and evolutionary fuzzing.
model is used to obtain knowledge. Based on this
knowledge, a genetic algorithm generate inputs with
better ﬁtness values [35].

3 Preliminaries

To understand that how XSS attacks are launched
through WebView component, ﬁrst of all we have to
understand the following two main concepts: sand-
box mechanism (WebView security) and WebView
component (working of WebView).

3.1 WebView

The WebView is mainly powered by a browser en-
gine which is named as WebKit. WebView provides
a basic browser functionality to load and display web
pages within Android applications without switching

5

sandbox mainly used for the following two objec-
tives:

• Isolate web pages from the system and isolate
web pages of one origin from those of another.

• Enforce the same-origin-policy (SOP).

3.3 Bypassing sandbox mechanism

The WebView provide fast browsing services An-
droid applications but opens Pandora box of secu-
In Figure 2, it can be seen that
rity vulnerability.

to the default browser. In simple words, Whenever a
user clicks on any type of link in the application, in
convention methods the application closes and opens
that link in a mobile browser. Application takes time
this to perform this whole process. To remove this
time delay, Android companies introduced a built -
in mini browser called WebView. It is a custom and
powerful browser inside the application. The main
thing to notice here is, Android application can in-
terplay with JavaScript code embedded in web pages
by using the WebView APIs. APIs are basically used
in the interaction between the Android application
and web pages. Those APIs include setJavaScriptEn-
abled API, addJavascriptInterface API, and loadUrl
API [7]. Where, SetJavaScriptEnabled API enables
the JavaScript, addJavascriptInterface API registers
the Java object, and loadURL API loads web pages.

3.2 Sandbox

Sandbox is a tool which manage the access con-
trol of the web browsers (e.g., WebVew or Android
browser). It isolates the web pages which are run-
ning inside the WebView, [4, 7, 9, 14]. Therefore, if

Figure 2: An illustration of the bypassing sandbox
mechanism.

despite the presence of sandbox security mechanism
in WebView to protects the local resources of mobile
from JavaScript attacks, WebView itself bypasses the
sandbox mechanism with the help of WebView affor-
mentioned APIs. This creates a path through which
JavaScript can easily communicate with native Java.
And an attacker can trigger different class methods
of Java to launch XSS attack to access the important
functions of mobile including local resources trough
native Java code. In simple words, the attacker can

Figure 1: Sandbox mechanism.

there is a malicious JavaScript running inside Web-
View through a web page, sandbox will isolate that
JavaScript and block it to invoke the access to the
mobile local resources, as shown in Figure 1 . Then

6

JavaScriptSandboxWebviewResources / LibrariesBlock JSWebviewResources / LibrariesBlock JSJavaScriptSandboxNative CodeClass MethodsJavaScriptWebview API’seasily launch this kind of attack by running mali-
cious web site inside WebView with the help of ma-
licious JavaScript.

4 The Proposed Framework

The proposed framework is organized as follows: 1)
Steps to detect attacks on sensitive API’s. 2) Detec-
tion framework which detects attacks on API’s. 3)
Prevention framework which will prevent an attack.

4.1 Steps and Challenges

is due to use of different

As discussed in the Section 3, in WebView main
types of Web-
threat
View APIs. The most vulnerable and important
APIs is addJavaScriptInterface (), which registers
the Java object. Therefor, we proposed the con-
trol of thosse Java object which is necessary to pre-
vent such vulnerabilities, which lead us the following
contrivances:

1. Need to impose a framework at the Java object

level to conﬁne java object activities.

2. Need to detect if Java object is accessing im-
portant API which can cause harm to the user
information.

To perform the above two control schemes, we had
to understand and address the following terms and
challenges:

a) We need to understand that how WebView APIs

can be executed by Java objects?

b) What type of vulnerable APIs can be triggered

through Java objects?

c) How to detect and What to do if a threat is de-

tected at Java object level?

To address the challenge (a), we need to under-
stand Java object registration, JavaScript, enabling
and loading of the website. By default JavaScript
is disabled in WebView, the API named as add-
JavascriptInterface() helps the Java object to be reg-
istered in WebView. To make JavaScript enable,
APIsetJavascriptEnabled() is set to true. Then API
LoadURL() loads the web site inside WebView con-
tainer. Once, a JavaScript object is registered with
loaded URL and JavaScript is enabled, JavaScript in-
side the web site can easily access the registered ob-
ject which subsequently can access native methods
from where JavaScript will trigger/execute WebView
APIs [9].

To address the challenge (b), we have to identify
all those APIs through which an attacker can steal
information. Most vulnerable APIs have been en-
listed in Table 1. To address the challenge (c), we

Table 1: A list of vulnerable APIs which provide ac-
cess to the sensitive information.

Vulnerable API’s

getCellLocation
getDeviceId
getPhoneType
getSubscriberId
getLine1Number
getSimSerialNumber
getVoiceMailAlphaTag
getVoiceMailNumber
SendTextMessage
sendMultipleTextMessage
sendDataMessage
getAllProvider
getBestProvider
getGpsStatus
getLastKnownLocation
clearPassword
editProperties
semdMultipartTextMessage

getAccounts
getAuthToken
getUserDate
peekAuthToken
removeAccount
setPassword
getName
getProﬁleConnectionState
getProﬁleProxy
getParams
getUnzippedContent
getCertiﬁcate
clearHistory
clearSearches
getAllBookMarks
getAllVisitedUrls
getNetworkOperator

proposed the feature extraction and ML techniques
have been considered to use to detect these types of
attacks through extracted features. Main concept of

7

threat detection is same as explained in [7]1 at run-
time to detect whether threats exist in Java object or
not and the permission request to the user accord-
ingly. As ML algorithm used for the classiﬁcation
which will detect the attack in detection unit and
sends the result to prevention framework. Then pre-
vention framework will ask the user to allow it or not.
If the user gives a permission, it will go on or block
that attack.

4.2 Detection Framework

Detection framework is divided into 4 levels.
In
level 1, collection of dataset and pre-processing
Then
is performed and saved in the database.
in level 2, we apply 10-fold cross validation us-

SVM), Neural Network2, Naive Bayes, Support Vec-
tor Machine (SVM), Bagging, Random Forest, and
a classical probability based algorithm, J48) to per-
form the classiﬁcation. The main reason to use
ML algorithms is that after providing samples, al-
gorithms learn and detection efﬁciency improve ac-
cordingly. Moreover, based on different performance
measures, best algorithm have been identiﬁed. Per-
formance evaluation have been performed in third
level 3 and also at the same time provided the clas-
In level
siﬁcation result to prevention framework.
4, selection algorithms (Information Gain (IG), Gain
Ratio (GR) and Relief-F (RF)) have been used to
identify the importance of features. This help to
identify which features play an important role in de-
tecting the XSS attacks.

4.3 Prevention Framework

Prevention framework is shown in Figure 4. It con-
sist of three parts: applications layer, framework and
libraries. The following steps explain the whole pro-
cess and ﬂow of prevention framework:

1. At ﬁrst Android application open a malicious
web site inside WebView, and call the add-
JavaScriptInterface() API.

2. Before completing registration, information re-
garding Java object go to threat prevention unit.

3. Then features extractor extracts the features of
the Java object from Threat Prevention Unit and
provide features information to detection unit.

4. Detection Unit gets all of the features and ap-
plies classiﬁcation on that features using ML al-
gorithm, as explained earlier. After that it sends
ﬁnal result (attack or not [Yes / No]) to Threat

Figure 3: An architecture of the detection framework
for attack detection.

ing ML algorithms. We use different 7 ML al-
gorithms (Evolutionary-Support Vector Machine (E-

1The only difference is authors in this article used statistical

model for the detection.

2Artiﬁcial Neural Network (ANN)

8

ClassifyIGRelife-FGRFeature ImportantDataset XSSDatabaseE-SVMRandom ForestBaggingBaggingSVMNaïve BayesNeural NetworkTestingTraingingAlgorithmsYesResultAttackPerformance EvaluationNoLevel 1Level 2Level 3Level 410-fold Cross ValidationEndPrevention Unit, so in this way detection unit in-
tercepts the call to the addJavaScriptInterface()
API.

5. If Threat Prevention Unit receives ’Yes’ from
Detection Unit, the proposed method calls the
alert application: otherwise it proceeds to step
(9), to allow automatically and then proceeds to
step (10) to complete the Jave object registra-
tion.

6. Alert Application warns the user about

the
threat, which shows information about attack-
ing web page Name, Object Name, Security
Sensitive API calls by the object.

7. The user replies to Alert Application to decide

whether to disable the Java Object or not.

Figure 4: An architecture of the prevention frame-
work for attack prevention.

8. Alert Application forwards the user’s decision

to Threat Prevention Unit.

algorithms also have been performed in subsequent
section.

9. Threat Prevention Unit proceed further whether
to disable the object or not on the basis of the
users’ decision.

5.1 Tool

10. If Threat Prevention Unit’s decision is ’Yes’,
then it allows the object to register and object
get access methods of Java class from which it
can access different mobile libraries.

11. If Threat Prevention Unit takes a decision ’No’,
then it disables the Java object and block that
web site.

We used the mainly RapidMiner software platform,
it unites data preparation, machine learning, and pre-
dictive model deployment. Organizations can build
machine learning models and put them into produc-
tion faster than ever.Rapid Miners also lightning fast
visual work-ﬂow designer and have automated mod-
eling capabilities.

5.2 Dataset

5 Experimental Setup

In the whole experiments, we used different tools,
dataset and machine learning algorithms (we omit
the details about ML algorithms to keep the main fo-
cus on detection and prevention). Evaluation of ML

9

our

named

dataset

created

as
own
We
APK XSS ATTACK, where APK is Android
Package Kit. To collect benchmark data, demo
victim application have been created and launched a
live attack on it, and then recorded those live attacks
at run time. We took 17 live attacks entries and
recorded the patterns for XSS attacks, in this way

ApplicationUser LayerApplication LayerFramework LayerRegistration of Java ObjectBlock ObjectUser PermissionAlert ApplicationLibraries LayerGalleryMessagesCreditsEmailSim NumberEMI NumberContacts(1)(2)(3)(5)(9)(8)(7)(6)(10)(11)(12)(13)Object featuresextractionThreat PreventionUnitDetectionUnitUser ResponseUserWebview APINoYes(4)we generate 444 raw XSS attacks to meet standard
dataset requirements. In this dataset, the attack ratio
is 50%. We have gathered 460 samples on 20 APKs.
As Table 2 shows the characteristics of dataset, we

Table 2: Characteristics of attacks.

Categories

Total

Total XSS Attacks
XSS Attacks
Non XSS Attacks

460
230
230

recorded total 460 attacks. From these, we recorded
total 230 XSS attacks (accessing sensitive APIs) and
230 non-XSS attacks (not accessing sensitive APIs).
In total, 6 main features have been extracted which

Table 3: List of features of dataset.

Feature Name

Description

App Names
Permissions
API Name
Website Name
IP

Location

Label

Name of victim applications
Include all webview permissions
Name of all sensitive API.
Name of malicious websites.
IP of website.
Country Location of website. (From which
country attack is launched)
Class of attack ( Yes / No)

are described in Table 3. One of the most important
feature is API Name, which records the name of
that sensitive API which gives access to sensitive
information.

5.3 Dataset Conversion:

To apply ML algorithm, we converted our nominal
data to numerical form by using component (Nomi-
nal to Numerical) in Rapidminer.

10

5.4 Algorithms Evaluation

To check how efﬁciency of ML classiﬁers we ex-
ploited on the XSS training set, classiﬁcation accu-
racy and F-measure (It further use precision and re-
call) are taken as the measure parameters. Accuracy,
F-measure (with recall and precision) are deﬁned as
follows, respectively.

1. Accuracy: Accuracy is used as a performance
measure in the domains of information retrieval
and data mining. It depicts the fraction of the
results that have been successfully retrieved as

Accuracy =

T P + T N
T P + T N + FP + FN

.

(1)

Here, FP, FN, TN, and TP, stand for False Pos-
itive, False Negative, True Negative, and True
Positive, respectively.

2. F-Measure: F-measure takes precision and ac-
curacy. It may be considered as the weighted
average of both values as

F =

2 × precision × Recall
precision + Recall

.

(2)

Where precision and recall explained here:

• Precision: Precision is the performance
evaluation measure that may be known as
the ratio of retrieved documents that are
related to the search as

Precision =

T P
T P + FP

.

(3)

• Recall: Recall, known as sensitivity, is the
ratio of related instances that have been re-
trieved over the total amount of retrieved
instances as

Recall =

T P
T P + FN

.

(4)

Table 4: Feature ranking by IG, GR and Relief-F.

Information Gain

Gain Ratio

Relief-F

Features

Values

Features

Values

Featues

Values

API Name
Permissions
Location
App Names
Website Name
IP

API Name
App Names
Permissions

0.860
0.021
0.006
0.005 Website Name
0.005
0.005

IP
Location

API Name
Permissions
Location
IP

0.861
0.108
0.108
0.108
0.108 Website Name
0.097

App Names

2.875
0.116
0.018
0.007
0.007
0.006

6 Results

In this experiment, three dimension reduction tech-
niques are applied to the aforementioned 6 features
of the dataset: Information Gain (IG), Gain Ratio
(GR), and Relief-F. Based on these tecniques fea-
tures have been ranked to identify which feature is
playing important role in the detection of XSS at-
tacks, ranking have been shown in Table 4. More-
over, we utilized this information to improve the al-
gorithms accuracy.

API Name is the most important feature as it
ranked at ﬁrst by IG, GR and Relief-F. Permissions
feature is ranked at second by IG, third by GR and
second by Relief-F. Location feature is ranked at
third by IG, 6th by GR and third by Relief-F. App
Names is ranked at fourth by IG, second by GR and
6th by Relief-F. Website Name is ranked at 5th by IG,
4th by GR and 5th by Relief-F. Lastly, IP is ranked
at 6th by IG, 5th by GR and 4th by Relief-F.

6.1 Results of
Validation

classiﬁers using Cross-

As mentioned before, E-SVM, Neural Network,
Naive Bayes, SVM, Bagging, Random Forest, and
J48 are applied to the selected features set. 10-fold
cross validation is used to train the test dataset. The
accuracy and f-measure parameters are used to eval-
uate the performance of these algorithms. The graph

Figure 5: Accuracy and F-Measure analysis of ML
algorithms.

in Figure 5 clearly shows that Random Forest per-
formed well in accuracy and f-measure. Moreover,
E-SVM took secod place and others Nave Bayes and
Neural Network also showed good results in the clas-
siﬁcation process as shown in Figure 5. Therefore,
we can conclude that Random Forest is the best al-
gorithm to detects XSS attacks.

6.2 Comparison of Execution Time

We also have calculated the average execution time
of all classiﬁers tested on selected dataset shown in
Figure 6. The execution time of E-SVM is too high
as compared to other algorithms. However, in this
graph RF (Random Forest) and J48 lead the all algo-
rithms with just 1 second execution time.

6.3 ROC based Comparison

ROC curve, which shows the classiﬁcation ability of
classiﬁer (algorithms) is shown in Figure 7. The abil-

11

99.1197.2998.9496.4393.9299.5798.7099.1397.1797.1096.3093.4899.5798.70E-SVMNeural NetworkNaive BayesSVMBaggingRandom ForestJ48020406080100F-measure (%)E-SVMNeural NetworkNaive BayesSVMBaggingRandom ForestJ48020406080100Accuracy (%)7 Conclusion

In this research paper, we proposed a detection and
prevention framework for XSS attacks in hybrid ap-
plications, where an attacker launches his attack on
mobile resources through WebView and bypasses the
sandbox mechanism using WebView APIs. To pre-
vent these types of attacks, we propose our own de-
tection system on Java object level, which have both
detection and prevention functions through classiﬁ-
cation.

Our approach is based on ML algorithms. This
article shows that ML algorithms approach to detect
and prevent XSS attacks is quite efﬁcient as com-
pared to previous proposed systems, such as statis-
tic approach for detection proposed in [7]. We took
a variety of top machine learning classiﬁcation al-
gorithms such as Evolutionary E-SVM, Neural Net-
work, Naive Bayes, SVM, Bagging, Random Forest,
and J48. To the best of our knowledge, there is no
existing system which detects XSS attacks using ML
algorithms. Moreover, to assess the classiﬁcation ca-
pability of these different classiﬁers, we extracted
new features and created our own dataset which is
named as APK XSS ATTACKS, where we record
460 attacks. Based on detailed comparison, this ar-
ticle conclude that Random Forest outperformed all
classiﬁers in term of accuracy and F-measure.

References

[1] Shashank Gupta, B.B.G. Cross Site Scripting
(XSS) attacks and defense mechanisms: classiﬁ-
cation and state-of-the-art.
International Jour-
nal of System Assurance Engineering and Man-
agement 2015, 8, 19.

[2] Security, W. WhiteHat Security Application Se-
curity Statistics Report WhiteHat Company:
California CA, 2017; pp 1-60.

Figure 6: Execution time analysis of ML algorithms.

Figure 7: ROC curve analysis for ML algorithms
classiﬁcation ability.

ity of classiﬁers is predicted by a threshold value in
ROC curve graphs. ROC is measured by the TP3
rate and FP4 rate. As shown in Figure 7, the perfor-
mance of Naive Bayed and Random Forest is clearly
much better as compared to other classiﬁers. In nut-
shell, Random Forest lead all the algoritms in XSS
Attacj detection, we conclude that Random Forest is
the suitable algorithm based on accuracy, f-measure,
speed and ROC analysis.

3 True Positive is use for XYZ
4 False Positive for ABC

12

28.004.002.004.008.001.001.00E-SVMNeural NetworkNaive BayesSVMBaggingRandom ForestJ480102030Execution Time (Sec)E-SVMNeural NetworkNaive BayesSVMBaggingRandom ForestJ480.000.050.100.150.200.250.300.350.400.450.500.550.600.650.700.750.800.850.900.951.001.05-0.10.00.10.20.30.40.50.60.70.80.91.01.11.2[3] Arjun Guha, S.K., Trevor Jim Using Static Anal-
ysis for Ajax Intrusion Detection. ACM 2009,
1-10.

[4] Bao, W.; Yao, W.; Zong, M.; Wang, D. Cross-
site Scripting Attacks on Android Hybrid Appli-
cations.
ICCSP ’17 Proceedings of the 2017
International Conference on Cryptography, Se-
curity and Privacy 2017, 56-61.

[5] Jian Mao, M., IEEE, Jingdong Bian, Guangdong
Bai, Ruilong Wang, Yue Chen, Yinhao Xiao,
and Zhenkai Liang, Member, IEEE Detecting
Malicious Behaviors in JavaScript Applications.
IEEE Access 2018, 6, 12284-12294.

[6] Rita H Wouhaybi, D.S. HYBRID MOBILE IN-
TERACTIONS FOR NATIVE APPS AND WEB
APPS. Google 2017, 20.

[7] Jing Yu, T.Y. Access Control to Prevent At-
tacks Exploiting Vulnerabilities of WebView in
Android OS. High Performance Computing and
Communications.
IEEE International Con-
ference on Embedded and Ubiquitous Comput-
ing (HPCC EUC), 2013 IEEE 10th International
Conference on 2014, 1-6.

[8] Sungho Lee, J.D., Sukyoung Ryu HybriDroid:
Static Analysis Framework for Android Hybrid
Applications. ACM 2016, 1-12.

[9] Tongbo Luo, H.H., Wenliang Du, Yifei Wang,
and Heng Yin Attacks on WebView in the An-
droid System.
ICPS: ACM International Con-
ference Proceeding Series 2011, 343-352.

[10] William Enck; Machigar; Ongtang; Patrick,
a. McDaniel Understanding Android Security.
IEEE Computer Society 2009.

[11] Xi Xiaoa, R.Y., Runguo Yeb, Qing Lia,
Sancheng Pengc,Yong Jianga Detection and

Prevention of Code
Injection Attacks on
HTML5-based Apps. Advanced Cloud and Big
Data. Third International Conference on 2015,
1-8.

[12] Jun Yang, P.Y., Xiaohui Jin, Qian Ma, Multi-
Classiﬁcation for Malicious URL Based on Im-
proved Semi-supervised Algorithm.
Interna-
tional Conference on Computational Science
and Engineering (CSE) and IEEE International
Conference on Embedded and Ubiquitous Com-
puting (EUC) 2017, 1-8.

[13] Nunan, A.E.; Souto, E.; dos Santos, E.M.;
Feitosa, E., Automatic classiﬁcation of cross-
site scripting in web pages using document-
based and URL-based features.
Computers
and Communications (ISCC), 2012 IEEE Sym-
posium on 2012, 000702-000707.

[14] Andreas Dewald, T.H., Felix C. Freiling, AD-
Sandbox: Sandboxing JavaScript to ﬁght Mali-
cious Websites.
SAC ’10 Proceedings of the
2010 ACM Symposium on Applied Computing
2010, 1859-1864.

[15] Thomas Blasing,

L.B., Aubrey-Derrick
Schmidt, Seyit Ahmet Camtepe, and Sahin
An Android Application Sandbox
Albayrak,
System for Suspicious Software Detection. Ma-
licious and Unwanted Software (MALWARE),
2010 5th International Conference on 2010, 1-8.

[16] Michael Spreitzenbarth; Felix Freiling, F.E.;
Thomas Schreck, J.H., Mobile-Sandbox: Hav-
ing a Deeper Look into Android Applications.
ACM 2013, 1-8.

[17] Lee, I.; Jeong, S.; Yeo, S.; Moon, J., A novel
method for SQL injection attack detection based
on removing SQL query attribute values. Math-

13

ematical and Computer Modelling 2012, 55, 58-
68.

applications in android. In Information Security
(pp. 309-318). Springer, Cham.

[18] Kosuga, Y., Kono, K., Hanaoka, M.,
Hishiyama, M., Takahama, Y. (2007, Decem-
ber). Sania: Syntactic and semantic analysis
for automated testing against sql
injection.
In Twenty-Third Annual Computer Security
Applications Conference (ACSAC 2007) (pp.
107-117). IEEE.

[19] Halfond, W. G., Orso, A. (2005, November).
AMNESIA: analysis and monitoring for NEu-
tralizing SQL-injection attacks. In Proceedings
of the 20th IEEE/ACM international Conference
on Automated software engineering (pp. 174-
183).

[20] Artzi, S.; Dolby, J.; Tip, F.; Pistoia, M.,
Fault Localization for Dynamic Web Applica-
tions.
IEEE Transactions on Software Engi-
neering 2012, 38, 314-335.

[21] Johari2, S.S.a.R., Survey of Cross-site Script-

ing Attack in Android Apps.

1-6.

[26] Korel, B., Automated software test data gener-
IEEE Transactions on Software Engi-

ation.
neering 1990, 16, 870-879.

[27] Andrea Avancini, M.C., Security Testing of
Web Applications: a Search Based Approach
for Cross-Site Scripting Vulnerabilities.
Inter-
national Working Conference on Source Code
Analysis and Manipulation 2011, 1-10.

[28] Moataz A. Ahmed, F.A., Multiple-path testing
for cross site scripting using genetic algorithms.
Journal of Systems Architecture 2015, 64, 50-
62.

[29] Elovici, A.S.Y.F.Y., Automated Static Code
Analysis for Classifying Android Applications
Using Machine Learning.
International Confer-
ence on Computational Intelligence and Security
2010, 1-5

[22] Iker Burguera and Urko Zurutuza, S.N.-T.
Crowdroid, Behavior-Based Malware Detection
System for Android. SPSM ’11 Proceedings of
the 1st ACM workshop on Security and privacy
in smartphones and mobile devices, 15-26

[30] Ibria Medeiros INESC-ID, N.N.L., Miguel
INESC-ID Detecting and Removing
Correia,
Web Application Vulnerabilities with Static
Analysis and Data Mining.
IEEE Transactions
on Reliability 2015, 65, 54-69.

[23] Jinyung Kim, Y.Y., and Kwangkeun Yi, Jun-
bum Shin, SCANDAL: Static Analyzer for De-
tecting Privacy Leaks in Android Applications.
1-10.

[24] Herzberg2, A.D.B.B.a.M., On the Static Anal-
ysis of Hybrid Mobile Apps. A Report on the
State of Apache Cordova Nation. 2016, 72-88.

[25] Jin, X., Wang, L., Luo, T., Du, W. (2015). Fine-
grained access control for html5-based mobile

[31] William Enck, P.G., Byung-Gon Chun, Taint-
Droid: An Information-Flow Tracking System
for Realtime Privacy Monitoring on Smart-
phones. ACM Transactions on Computer Sys-
tems (TOCS) 2014, 32, 1 - 15.

[32] CARSTEN; WILLEMS; THORSTEN; HOLZ
, F.F., Florian Echtler, Toward Automated Dy-
namic Malware Analysis Using CWSandbox.
IEEE Computer Society 2007, 5, 1 - 8.

14

[33] Shashank Gupta, B.B.G., CSSXC: Context-
Sensitive Sanitization Framework for Web Appli-
cations against XSS Vulnerabilities in Cloud En-
vironments. Procedia Computer Science 2016,
85, 198-205.

[34] Abdalla Wasef Marashdih, Z.F.Z.H.K.O., Web
Security: Detection of Cross Site Scripting in
PHP Web Application using Genetic Algorithm.
(IJACSA) International Journal of Advanced
Computer Science and Applications, 2017, 8, 1
- 12.

[35] Fabien Duchene, R.G., Sanjay Rawat, Jean-
Luc Richier, XSS Vulnerability Detection Using
Model Inference Assisted Evolutionary Fuzzing.
Fifth International Conference on Software Test-
ing, Veriﬁcation and Validation 2012, 1 - 3.

[36] Rapidminer,

Data

form for Analytics.
https://rapidminer.com/

Science

Plat-
Available online:

[37] H. Kopka and P. W. Daly, A Guide to LATEX,
Harlow, England: Addison-Wesley,

3rd ed.
1999.

15

