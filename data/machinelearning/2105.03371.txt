1
2
0
2

y
a
M
4

]

C
D
.
s
c
[

1
v
1
7
3
3
0
.
5
0
1
2
:
v
i
X
r
a

The Synergy of Complex Event Processing and Tiny Machine
Learning in Industrial IoT

Haoyu Ren
Siemens AG
Technical University of Munich
Munich, Germany
haoyu.ren@siemens.com

Darko Anicic
Siemens AG
Munich, Germany
darko.anicic@siemens.com

Thomas Runkler
Siemens AG
Technical University of Munich
Munich, Germany
thomas.runkler@siemens.com

ABSTRACT
Focusing on comprehensive networking, big data, and artificial
intelligence, the Industrial Internet-of-Things (IIoT) facilitates effi-
ciency and robustness in factory operations. Various sensors and
field devices play a central role, as they generate a vast amount of
real-time data that can provide insights into manufacturing. The
synergy of complex event processing (CEP) and machine learn-
ing (ML) has been developed actively in the last years in IIoT to
identify patterns in heterogeneous data streams and fuse raw data
into tangible facts. In a traditional compute-centric paradigm, the
raw field data are continuously sent to the cloud and processed
centrally. As IIoT devices become increasingly pervasive and ubiq-
uitous, concerns are raised since transmitting such amount of data
is energy-intensive, vulnerable to be intercepted, and subjected to
high latency. The data-centric paradigm can essentially solve these
problems by empowering IIoT to perform decentralized on-device
ML and CEP, keeping data primarily on edge devices and minimiz-
ing communications. However, this is no mean feat because most
IIoT edge devices are designed to be computationally constrained
with low power consumption. This paper proposes a framework
that exploits ML and CEP’s synergy at the edge in distributed sen-
sor networks. By leveraging tiny ML and micro CEP, we shift the
computation from the cloud to the power-constrained IIoT devices
and allow users to adapt the on-device ML model and the CEP
reasoning logic flexibly on the fly without requiring to reupload
the whole program. Lastly, we evaluate the proposed solution and
show its effectiveness and feasibility using an industrial use case of
machine safety monitoring.

CCS CONCEPTS
• Computing methodologies → Machine learning approaches;
• Computer systems organization → Real-time systems; Sensor
networks; • Information systems → Data streaming.

KEYWORDS
Tiny Machine Learning, Complex Event Processing, Industrial IoT

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
DEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy
© 2021 Association for Computing Machinery.
ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

ACM Reference Format:
Haoyu Ren, Darko Anicic, and Thomas Runkler. 2021. The Synergy of
Complex Event Processing and Tiny Machine Learning in Industrial IoT.
In Proceedings of DEBS ’21: The 15th ACM International Conference on Dis-
tributed and Event-based Systems (DEBS ’21). ACM, New York, NY, USA,
10 pages. https://doi.org/10.1145/nnnnnnn.nnnnnnn

1 INTRODUCTION
The Industrial Internet of Things (IIoT) refers to a system where
hundreds of millions of industrial machinery, whether it is an engine
on an airplane or a motor in a factory, are connected to the network.
Sensors are installed on equipment to collect and share data over
the network, monitoring and analyzing factory operation. The
whole IIoT network generates a large amount of data in real-time,
denoted as big data [28]. The importance of big data depends not
only on how much data are available but also on how the data are
handled. The information needs to be analyzed and combined with
background knowledge in a continuous, real-time manner to make
quick decisions.

Complex event processing (CEP) is a widely deployed technique
to process events and detect patterns from multiple heterogeneous
streaming sources. The user can define logic rules to describe the
desired sequence and pattern of primitive events. The CEP system
then runs reasoning on low-level arriving events against the rules
and produces complex (derived) events upon matching. However,
with the growing size and complexity of IIoT networks, sequence
matching in raw stream data becomes inefficient. It is bound to
high cost since every CEP rule must be defined and examined by
human experts. Moreover, not every pattern is rule-describable.
For example, it is almost impossible to define rules for diagnosing
machines’ wear from pictures in visual inspection, although it is
easy for a trained worker.

Furthermore, many IoT applications require a higher level of
awareness and reasoning over the current situation instead of sim-
ple combinations of primitive events. Machine learning (ML), espe-
cially deep learning, is one of the most innovative paradigms that
can alleviate CEP’s problem by learning data representations and
identifying hidden information from transient raw events. While
neural network (NN) models have been proved to deliver excellent
inference results on instantaneous temporal data, they cannot in-
fer the spatial and temporal contexts between atomic events that
evolve over a long time, denoted as complex events. For example, it
is hardly possible to use NN to describe a scenario that a machine’s
abnormal behavior will cause another machine’s breakdown within
one minute.

 
 
 
 
 
 
DEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy

Haoyu Ren, Darko Anicic, and Thomas Runkler

Therefore, there is a need to combine CEP and ML to fully
open up their potential. Currently, most ML and CEP solutions are
specialized for platforms with considerable computing resources,
e.g., powerful computing units, server and cloud-based services
[1][22][15][9], where the data are first sent to the data warehouse
by edge devices and then processed centralized, which is referred
to as the compute-centric paradigm. With such infrastructure, a
tremendous amount of data from heterogeneously distributed IoT
devices needs to be transmitted continuously over the network,
which can saturate the bandwidth quickly and provide hackers
with vulnerable attack vectors.

As sensors and microcontrollers (MCUs) become cheaper, more
powerful, and pervasive, more and more manufacturing profession-
als see edge computing as the next opportunity for the IIoT. With
edge computing, the data processing is shifted and distributed to
the sources where the data are generated, directly on edge IIoT
devices, which is denoted as the data-centric paradigm. By edge
IIoT devices, we mean MCUs with limited resources, e.g., less than
0.1W power consumption, 64MHz CPU frequency, and 256KB RAM.
By enabling ML and CEP’s synergy in a distributed manner, directly
at sources, we can keep data mainly on edge devices, which saves
communication costs, improve security, reduce latency, and pre-
serve data privacy without letting sensitive raw data leave devices.
It offers the benefit of real-time distributed data analysis for faster
decision-making and more intelligence in the complex production
environment, thereby creating countless opportunities for indus-
trial applications. However, edge IIoT devices are designed to live
long with limited resources and low power consumption. Most of
them are bare metal and do not even have an operating system.
This poses difficulties for applying ML and CEP on them to realize
decentralized sensor networks.

To tackle the challenges mentioned above, we designed a frame-
work that combines NN with CEP to perform inference and reason-
ing on distributed IoT devices with limited computing resources:

• Several light-weight inference libraries [19][18][37] have al-
ready been developed for NN inference on bare-metal MCUs.
However, none of them supports on-device post-training,
which impedes the flexibility of IIoT as the actual deployment
environment may change constantly, and the performance of
the pre-trained model may decrease. Thus, we built a TinyOL
system [34] based on Tensorflow Lite Micro [18] which can
run NN inference on MCUs and improve the pre-trained
model using field streaming data under an incremental on-
line learning setting.

• We introduced the micro CEP engine derived from the rea-
soning system ETALIS [2], which can continuously match
incoming events against user-defined patterns directly at the
edge with low latency and high throughput. The instanta-
neous inference results made by the TinyOL, together with
other atomic events, can be fed into the on-device micro
CEP engine for searching a candidate complex event. Vice
versa, the output of the engine can be used as pre-processed
data for the NN model. Once the engine recognizes events in
the matching sequence, the results are emitted immediately.
Moreover, the reasoning topology can be easily changed by
injecting CEP rules into the system at runtime.

The framework is evaluated in an industrial scenario of machine
safety monitoring. We demonstrate its flexibility and versatility by
incorporating convolutional NN, autoencoder NN [34], and CEP
on two Arduino Nano 33 BLE boards [3]. Besides, the system’s sta-
tistical performance is reported concerning memory consumption,
processing speed, and throughput. We show that the framework is
light-weighted to be fit into constrained MCUs. More importantly,
it is capable of handling streaming data with high inference speed,
which proves its usability in most IIoT applications.

The remaining work is structured as follows. The next section,
Section 2, discusses the requirement of system development from
the industrial perspective. Section 3 summarizes the literature re-
views regarding CEP, TinyML [21], and some industrial applications.
This is followed by Section 4, which includes the system design
of our proposed solution. In Section 5, the framework is evaluated
using an industrial safety monitoring use case, and its performance
on an Arduino board is reported. Lastly, Section 6 provides the
conclusion and potential areas for future works.

2 REQUIREMENT ANALYSIS
This section describes the motivation for building the proposed
system and the requirements that need to be satisfied against the
industrial background.

2.1 Requirement
The Local Device Intelligence. Data, especially shop floor data, pro-
duced and consumed by industrial sensors and actuators are local
by its nature. It is a requirement to compute data closer to the lo-
cation where it is produced (e.g., on-device) to improve response
times and save bandwidth. So far, CEP and ML have been applied on
non-constrained computers or in the cloud. We are now pushing the
intelligence provided by these technologies to the field. However,
industrial field devices are constrained. It is a challenge to enable a
synergy of CEP and ML to work on constrained IoT devices.

The Distributed Computation. As the network expands and the num-
ber of devices increases, the overall decision-making process in IIoT
becomes a distributed computation problem. The decisions derived
by one sensor node may be influenced by the data and the contex-
tual information from other nodes. Thus, it is our goal to consider
the synergy of CEP and ML in a decentralized environment.

The Energy Consumption. Most IoT devices are power-constrained
objects, as they are designed to live long with minimal energy
consumption. It is essential to consider their hardware limitation
while constructing applications for the IIoT system.

The Flexibility. Nevertheless, to keep pace with changing customer
demands, it is important to provide IIoT networks with flexible
configuration features. In the current solution, static ML models
[18] or complex event processors with predefined rules [32][12]
are flashed to the device before the runtime. To change the under-
lying program behaviors, e.g., configuring the reasoning logics or
updating the on-device ML models, a heavy firmware update is
unavoidable, which makes the deployment of IIoT in the industry
environment a challenging task:

• Different working conditions have different characteristics.
A predefined factory setting does not work for all. Often, the

The Synergy of Complex Event Processing and Tiny Machine Learning in Industrial IoT

DEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy

fine-tuning of rules and models is a necessary step before
deployment.

• Some customers want to update the program more frequently
in response to the developing requirements. To perform the
firmware update, the current production activity has to be
suspended. Considering the enormous amount of IoT devices,
updating the firmware in each of them is costly.

2.2 Motivation
By shifting the cloud processing to the field devices, we can enable
edge computing and turn centralized IIoT into decentralized sensor
networks. The data are processed at the source locally, which re-
duces latency. More importantly, data analysis can be performed
directly in the field without relying on an external connection,
which guarantees data privacy because storing data in a distributed
manner is safer than storing it in a single location (such as the
cloud). Only necessary information is sent to the cloud, saving en-
ergy and bandwidth. Combined with the widespread and low-cost
of edge IIoT devices, this opens up countless industrial applications
opportunities because they can provide customized and flexible
solutions in the complex production environment.

This work presents a light-weight framework combining on-
device ML and CEP reasoning targeted at constrained IIoT devices
with maximized flexibility and minimized power consumption in
mind. Using the TinyOL system in the framework, the user can
adapt the pre-trained NN on the device by learning from the field
data and running inference afterward. Another building block of
the framework, the micro CEP engine, can analyze streaming events
among sensor networks, including the NN’s inference results, and
match them against the rules in real-time. The reasoning patterns
can be changed at any time by pushing rules into the engine without
rewriting the device’s whole firmware. The system enables the user
with little programming experience to flexibly manage and control
an IIoT system.

3 RELATED WORK
Complex event processing is a well-established field applied across
various domains. A CEP system addresses sensor networks’ ubiq-
uity by efficiently matching input streaming events against a pat-
tern, where irrelevant incoming data can be discarded immediately.
The survey [13] discussed the early works of research, implemen-
tation, terminology, applications, and open issues in CEP. Several
commercial and open-source event processing tools have been de-
veloped in recent years [22][38][1]. The work [7] studied state
of the art on CEP mechanisms and presented their drawbacks in
heterogeneous IoT environment. The survey [23] discussed the
techniques, the opportunities, and the challenges of CEP in the big
data era.

While most CEP tools are designed for centralized cloud analysis,
works like [17] try to extend the CEP to mobile devices to leverage
decentralized architectures. In [25], a by-partitioning CEP pipeline
is proposed to use both edge and cloud resources for stream process-
ing. A micro-service-based method is introduced in [39] to handle
CEP in IoT systems. A few works [14][5] focus on a hierarchical
complex event model to adapt CEP engine in distributed sensing en-
vironment. Although these solutions proved to work in IoT systems,

they do not work on the sensor networks composed of constrained
MCUs. In their works, the IoT devices are usually Raspberry Pi-class
with far more available resources. This class of devices does not fit
into the scope of constrained IoT devices. Besides this, they assume
the logical predicates do not need to be updated after deployment
and are thus flashed to the devices prior to the runtime as static
rules, which restrict the CEP engine’s versatility in the context of
IIoT applications.

With the rise of AI, engineers are paying more and more atten-
tion to applying ML in the industrial field, especially in IIoT. As
an emerging AI sub-field, TinyML is dedicated to providing neural
network-based solutions at the edge. Impressive results have been
achieved recently, such as tinyML algorithm [33][26], hardware
[11][10], and application [35][6]. Several libraries are developed
to support NN inference at the edge, including Google’s TFLite
Micro [18], Arm’s CMSIS-NN [27], Apache’s TVM [19], and STM’s
X-CUBE-STM AI [37]. However, these libraries assume that the NN
is first trained on a powerful machine then flashed to the MCU with-
out supporting on-device training and fine-tuning, which might
lead to the deterioration of NN’s performance in the field after
deployment[34].

Combining ML with CEP is a promising solution to circumvent
some technical limitations in the IIoT. In work [41], the author
surveyed the synthesis of both paradigms and their transferability
to intelligent factory use cases. Some researchers tried to derive
CEP reasoning rules using ML methods [16][29][4]. A Bayesian
network is used to predict incoming online events in work [40].
Many CEP and ML-based solutions have been applied in the real
world. A CEP and ML-based approach to support fault-tolerance of
IoT systems is proposed in work [31]. In [20], a framework based
on CEP and deep learning is implemented, and an unattended bag
computer vision task is illustrated to evaluate its feasibility. Unlike
other works, CEP is used to schedule distributed ML training on
Raspberry Pi in [36]. Nevertheless, many implementation designs
depend on the usage of the cloud for communication. None of those
touch the area of constrained devices and test their approaches
under industry settings.

To sum up, although many advances have been achieved in
CEP and ML, there exists a gap in constrained devices. Several
questions remain unanswered: How to realize CEP and ML on
tiny IIoT devices? How to maximize their potential and flexibility?
How to process the ubiquitous events stream against the indus-
trial background? We now introduce our framework that combines
the TinyOL system and the micro CEP engine to achieve flexible,
decentralized IIoT on constrained field devices.

4 APPROACH
Our proposed framework consists of two building blocks: the TinyOL
system for powering NN inference and the micro CEP engine for
event processing and stream reasoning. Such a framework can be
installed as an embedded application in every tiny device inside the
IIoT network to achieve NN and CEP’s synergy at the field level.
The system design is depicted in Figure 1.

Inside the TinyOL system, depending on the available resources
of MCUs and onboard sensors, a certain number of prebuilt NN
models are at the user’s disposal. For instance, the framework can

DEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy

Haoyu Ren, Darko Anicic, and Thomas Runkler

Figure 2: Overview of the TinyOL System

Algorithm 1: Workflow of the TinyOL System

1: for x in StreamingData do
2:

Choose the corresponding TinyML model
x' = TinyML.PreProcess(x);
y' = TinyOL.Inference(x');
if label y is available then

TinyOL.UpdateMetrics(y', y);
TinyOL.UpdateWeights(y', y);

3:

4:

5:

6:

7:

Figure 1: System Overview of the Framework

support up to three NN models on a MCU with 256 KB RAM and
1MB Flash. The raw data are fed into the associated NN, and the cor-
responding inference results are instantaneously produced toward
the specific task.

Simultaneously, measurements from other sources (log data, out-
side information, and sensors) are generated. These data, including
the NN’s inference results, are identified as raw measurements that
can be formatted and enriched into simple atomic events using their
related information (e.g., the context, the timestamp of emitting,
and the timespan that the measurement takes place, and various
numerical values). The formed events then enter the micro CEP
engine in the order in which they appear. The micro CEP engine
automatically checks the temporal and spatial constellations be-
tween the events upon their arrival. Once the engine sees incoming
events for a matching pattern, a result (complex event) is generated
immediately. The emitted complex event can again be sent into the
micro CEP engine as a "simple event" of a new type for composing
more complex events against user-defined rules. During the run-
time, the logical rules can be updated and injected into the engine
via communication protocols, e.g., Bluetooth Low Energy (BLE),
WiFi.

The whole system performs in real-time as the measurements
take place, which effectively improves the flexibility and analysis
capability. In the following, we introduce the system design of the
TinyOL system and the micro CEP engine.

end if
8:
9: end for

4.1 The TinyOL System
The TinyOL system supports neural network inference on con-
strained MCUs with Tensorflow Lite for Microcontroller [18] under
the hood. The system design is shown in Figure 2. Here, only the
conceptual idea behind the building block is introduced. For greater
detail, please refer to work [34].

Current market solutions for powering NN on MCU do not sup-
port on-device training [24] due to the lack of available resources.
This results in difficulties in the industrial environments, e.g., model
performance degeneration, rigid deployment, and high mainte-
nance cost. TinyOL system enables the on-chip post-training by
leveraging the idea of incremental online learning. While data are
streaming in, the TinyOL can not only run inference but also update
the corresponding NN model by learning from the data one at a
time. To limit the computational complexity, the first part of the
pre-trained NN is frozen and stored in flash as a C array, and the
fine-tuning of the last few layers takes place in RAM, which works
similarly to transfer learning. The trainable layers are marked in
grey in Figure 2, which can be initialized, updated, and customized.
The pseudo algorithm of TinyOL is illustrated in Algorithm 1. For
each incoming sample, the system first runs a prediction against a
NN model from the hosting model pool. Subsequently, the trainable
layers’ weights in the model get updated using online gradient
descent if a label is provided. As the prediction and training are in-
terleaved, the data can be discarded after each round. Thus only one
sample remains in the system, whereas all the historical data need
to be saved in the traditional offline/batch training architecture.

The TinyOL system can help the user to adapt the prebuilt NN
models to their specific working environment. The prediction out-
puts from TinyOL are wrapped with other semantic information

MCUMCU.............micro CEP EngineTinyOLFrameworkCEP RulesOutside DataSensor ReadingsLog     Data......Wireless CommunicationAtomicEventsMCUMCUIIoT NetworkComplex EventFrameworkOther ApplicationsMiddlewareOSOther Layers ...Device DriversMake a predictionStreaming  Raw DataStreaming LabelUpdate metricUpdate layerTinyOLHosted TinyML ModelsAtomicEventThe Synergy of Complex Event Processing and Tiny Machine Learning in Industrial IoT

DEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy

where a 𝑐𝑜𝑚𝑝𝑙𝑒𝑥_𝑒𝑣𝑒𝑛𝑡 is generated whenever an 𝑎𝑡𝑜𝑚𝑖𝑐_𝑒𝑣𝑒𝑛𝑡
is pushed into the engine, the timestamp and measurement infor-
mation can be inherited from atomic to the complex event.

Filter conditions can be integrated into the rules by using 𝑤ℎ𝑒𝑟𝑒
clauses. For instance, the following rule can filter out the tempera-
ture events with a value below 20 degrees Celsius:

filtered_temperature[_,_](X) :-
temperature_event[_,_](X, Celsius) where(X>20),
where the variable 𝑋 is used to capture numerical values from
the atomic to the complex event, and _ is a placeholder (unnamed
variables as in Prolog-like languages) for timestamps.

Once a rule is triggered, a complex event is formed and ejected by
the engine, which summarizes the correlations between triggering
events and the underlying rules. For example, if we use the filtering
rule mentioned above and push the previous temperature event
into the engine, the following complex event will be triggered:
filtered_temperature[2000, 2200](24, Celsius).

We can see that the complex event has the same form as the
atomic event, which can be again pushed into the engine to form
more complex events.

Several operators are supported to compose and express more

complicated event patterns:

• 𝑎𝑛𝑑 : Conjunction operator.
• 𝑠𝑒𝑞 : Sequence operator.
• 𝑜𝑟 : Disjunction operator.
• 𝑛𝑠𝑒𝑞 : Negation operator.
• 𝑘𝑠𝑒𝑞 : Kleene closure operator.
• 𝑙𝑎𝑚𝑏𝑑𝑎 : Aggregation operator.

We focus on 𝑎𝑛𝑑 and 𝑙𝑎𝑚𝑏𝑑𝑎 operators in this paper since other
operators share similar patterns. For details about the other event
operators from the 𝐸𝑇 𝐴𝐿𝐼𝑆 language, an interested reader is re-
ferred to [2]. The conjunction operator 𝑎𝑛𝑑 is used to detect the
occurrence of events regardless of the order. Additionally, we can
impose temporal constraints by assigning a specifier 𝑐𝑜𝑢𝑛𝑡 or 𝑟𝑎𝑛𝑔𝑒
in the square bracket after the rules, which states the type and the
length of the valid sliding window. For example, we can use the
following rule to match the pattern that event 𝐴 and event 𝐵 happen
within 5 seconds, no matter in which order they appear. Addition-
ally, the 𝑤ℎ𝑒𝑟𝑒 condition constrains an occurrence of event 𝐴’s to
have a value smaller than the one from an occurrence of the event
𝐵:

complex_sequence[_,_](X, Y) :- eventA[_,_](X)
and eventB[_,_](Y) where(X<Y) [range 5 s].
The aggregation operator 𝑙𝑎𝑚𝑏𝑑𝑎 can be used to apply aggrega-
tion functions over event streams. These functions are currently
supported in the aggregation operator:

• 𝑎𝑏𝑠 () : Absolute value
• 𝑠𝑢𝑚() : Summation function
• 𝑎𝑣𝑔() : Average function
• 𝑚𝑖𝑛() : Minimal function
• 𝑚𝑎𝑥 () : Maximal function

For example, the following rule is used to produce the average

temperature over last five measurements:

Figure 3: System Overview of the micro CEP Engine

(e.g., name, inference time, scores) into atomic events and sent to
the micro CEP engine for further processing.

4.2 The Micro CEP Engine
The micro CEP engine is a light-weight system designed for power-
constrained IIoT devices to deal with sensor networks’ ubiquity. As
the IIoT network gets more complex and distributed, the ability to
quickly respond to increasing streaming data and changing trends
becomes a decisive factor in a company’s success. The system design
of the micro CEP engine is shown in Figure 3. The event engine
consists of three parts, a rule receiver accepting and managing the
CEP rules provided by the user on the fly, a parser used to interpret
the rules, a processing core to process incoming events against the
rules and return the results.

The language that powers the engine is derived from ETALIS
[2]. Before the streaming raw data are fed into the engine, it is
converted into atomic events. An atomic event is the most simple
data representation in the language where the raw data is assigned
with a set of attributes that refine its semantic meaning, such as the
name, the time, the measurement value, and the unit. An atomic
event is defined as follows:

event_name[start_time, end_time](arguments),
where the 𝑒𝑣𝑒𝑛𝑡_𝑛𝑎𝑚𝑒 is a string to identify the event, the
𝑠𝑡𝑎𝑟𝑡_𝑡𝑖𝑚𝑒 and the 𝑒𝑛𝑑_𝑡𝑖𝑚𝑒 indicate the timestamp of the start
and the end of the event in milliseconds, and the 𝑎𝑟𝑔𝑢𝑚𝑒𝑛𝑡𝑠 contain
the comma-separated information of the event. As an example, a
measurement taken from a temperature sensor can be written as:

temperature_event[2000, 2200](24, Celsius),

where 2000 and 2200 indicate that the measurement starts at
timestamp 2000 𝑚𝑠 and ends at timestamp 2200 𝑚𝑠, and 24 is the
temperature value. 𝐶𝑒𝑙𝑠𝑖𝑢𝑠 is the unit of the measurement, which
is optional information for enriching the event with semantic in-
formation, e.g., from a Knowledge Graph [8].

Given the notation of event, we can formalize the definition of
the rules for the micro CEP engine. The most straightforward rule
can be defined as follows:

complex_event[start_time, end_time](arguments) :-
atomic_event[start_time, end_time](arguments),

temp_avg[_,_](Y) :- lambda { temperature_event
(X, Celsius), *, Y := avg(X) } [count 5].

Rule ReceiverParserProcessing CoreEvent   Rule BaseAtomic EventsComplex Eventsmicro CEP EngineCEP RulesDEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy

Haoyu Ren, Darko Anicic, and Thomas Runkler

The CEP engine provides a running buffer to store relevant
events against the rule. Once an event turns out of the scope, it
will be discarded efficiently. Besides the functionalities introduced
above, another key feature of the micro CEP engine is the config-
urable reasoning rules at runtime. The user can update the rules
towards the desired information and reasoning topology at any
time by injecting them via wireless communication protocol like
WiFi and BLE.

5 EVALUATION
This section first explains our approach’s practical usability through-
out a case study of safety monitoring in a factory. Later on, we vali-
date the system and the use case with a simplified setting using two
Arduino boards [3], one camera sensor [30], and a ventilator. Finally,
we report the framework’s performance, including processing time,
memory consumption, and throughput.

5.1 Use Case - Concept
Assume a rotating machine running in a factory. To keep it operat-
ing under the best condition, in this case, we refer to under optimal
environment temperature, we monitor the cooling system’s behav-
ior, the temperature in the plant, and the worker’s occupancy, as
depicted in 4. These activities compose of a series of atomic events,
which can be easily ingested using our framework. For this case
study, we use two tiny IoT devices with the framework embedded,
as marked as the small rectangles in the figure.

The first IoT device is attached to the cooling system’s motor
to detect its abnormality in real-time. We choose a general pre-
trained autoencoder NN from the NN pool hosted on the device
to detect the machine’s anomaly in the vibration data collected by
the onboard accelerometer. Before the deployment, we first fine-
tune the autoencoder towards the new working environment using
the TinyOL system. By learning from the field data, we adapt the
general anomaly detection model to fit the specific machine and
enhance its prediction performance. During the regular operation,
the autoencoder generates an anomaly score event at each inference
to indicate if the cooling system is working normally. Whenever the
anomaly score exceeds the threshold, a warning event is generated
and forwarded to the second IoT device.

The second IoT device is responsible for checking if a worker is
on-site using computer vision when a warning event from the first
device is received. Each time, a picture is captured by the camera
and processed by the on-device convolutional NN (CNN) model,
and an occupancy event based on the inference results is generated.
If a worker is detected in the camera field, the second IoT device
lights up the warning LED without further action. If no worker is
currently near the machine, the IoT device establishes a connection
with the cloud and sends an alarm event to the backend.

We can also update the monitoring strategy by altering the rules
in the micro CEP engine at runtime. Assume the indoor temperature
increases when the cooling system breaks down, which dangers the
machine’s operation. We want to improve the intelligence of the
system by integrating temperature monitoring. A rule can be added
to start a backup cooling system if (1) the cooling fan operates in
an anomalistic manner, (2) no on-site worker event is presenting,
and (3) the temperature event exceeds the threshold,

Figure 4: Scenario: Safety Monitoring in Factory

Now, we can use our framework to elaborate on how the scenario
above can be solved efficiently. For the first IoT device, we define
an incoming event to be monitored as follows:

1.1 anomaly_score[t1, t2](x),

where every anomaly event contains the timestamp of the infer-
ence as well as the anomaly score from the NN, and the number 1
before the rules and events means that this action takes place in
the 𝑓 𝑖𝑟𝑠𝑡 device.

Now, an average aggregation rule is created to calculate and
smooth the anomaly score over the measurements from the last 10
seconds for filtering out some outliers, e.g., vibration intervention
from outside.

1.2 smoothed_anoamaly_score[_,_](Y) :- lambda

{ anomaly_score(X), *, Y := avg(X) } [range 10 s].

We set another rule with a threshold of 1 for creating warning

events:

1.3 warning[_,_](X) :-

smoothed_anomaly_score[_,_](X) where(X>1).

If a warning event is presented, it will be forwarded to the second

IoT device for activating person detection:

1.4 if warning[_,_](Y) do

sending a request for occupancy detection.

Since running a computer vision task is power consuming, we
only activate person detection if it is confident that something
is wrong in the cooling system. In this case, that is the second
device receives a warning event. This mechanism is also known
as a cascade system. We again define the following atomic event
in the second device to represent the results of CNN’s occupancy
detection.

2.1 if warning[_,_](Y) do

occupancy_score[t1, t2](x),

The number 2 before the rules and events means that this action
occurs in the 𝑠𝑒𝑐𝑜𝑛𝑑 device. The decision boundary of the CNN’s
output is chosen to be 0, where a positive value means a worker

Anomaly DetectionOccupancyDetectionWorkerCoolingSystemTemperatureMonitoringThe Synergy of Complex Event Processing and Tiny Machine Learning in Industrial IoT

DEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy

is detected in the camera field and vice versa. Based on this, We
construct two complex event patterns to indicate whether a person
is near the machine:

2.2 not_occupied[_,_](X) :-

occupancy_score[_,_](X) where(X<0),

2.3 occupied[_,_](X) :-

occupancy_score[_,_](X) where(X>0).

If a 𝑛𝑜𝑡_𝑜𝑐𝑐𝑢𝑝𝑖𝑒𝑑 event shows up, an alarm message should be
sent to the monitoring center via the cloud. Otherwise, only the
onboard LED will be light up to warn the on-site worker.

2.4 if occupied[_,_](X) do

lighting up the warning lamp,
else if not_occupied[_,_](X) do:
sending an alarm to the cloud.

After the experts in the monitoring center received the alarm,
they want to proactively integrate the temperature monitoring and
a backup cooling system into the IIoT system in case there is no
on-site worker available. The following reasoning rule can be added
to the second device on the fly, where the backup cooling system is
turned on if the environment temperature becomes too high (higher
than 30 °C) and no worker is presented:

2.5 backup[_,_](Y) :- temperature[_,_](Y) and

not_occupied[_,_](X) where (Y>30) [range 1 s].
The 𝑟𝑎𝑛𝑔𝑒 clause is used to constrain the occurring interval

between the two events.

5.2 Use Case - Experiment
Next, we examine the use case using two Arduino Nano 33 BLE
boards [3], an OV7675 image sensor [30], and a cooling fan under
a simplified setting.

The board is featured with 256KB SRAM, 1MB flash, and powered
by a Cortex™-M4 CPU running at 64 MHz, which has a similar
computational capability as the industrial IoT devices (industry-
level of reliability and durability is not considered in this paper).
The low-voltage image sensor OV7675 supports up to VAG image
resolution (640*480), which can operate at up to 30 fps in a small
footprint package. The hardware used in the experiment is depicted
in Figure 6.

The first board is placed on the cooling fan, which emulates
monitoring the cooling system. The second board is equipped with
a camera for person detection.

Before we put the system online, we first fine-tune the autoen-
coder in the first board using the TinyOL system. No labels need
to be provided as it is an unsupervised anomaly detection NN. For
more implementation detail of the autoencoder, please refer to [34].
Subsequently, we activate the framework on both boards to
start the experiment. Upon starting, several parameters are under
monitoring over time, as shown in Figure 5.

The first subplot in the figure illustrates the inference score of
the anomaly detection and its smoothed outcome from the first
device, which are the value of the event 1.1 and the result of rule
1.2. With rules 1.3 and 1.4, the first IoT device sends a warning
to notify the second IoT device when the smoothed score exceeds
the pre-defined threshold 1.0. As shown in the second subplot, the
value 1 of the warning event means the warning is sending, whereas

the value 0 implies the cooling system works normally. One can
observe in the plot that the cooling system experienced anomaly
activity twice in the experiment. However, only the first anomaly
gets fixed.

With rule 2.1, the person detection CNN on the second device
will be activated to check workers’ presence once a warning is
received. By combining rules 2.2, 2.3, and 2.4, the person occupancy
status is monitored. As depicted in the third subplot, the value 1
refers to a worker is detected. Hence, the warning light is turned
up. Otherwise, an alarm should be sent to the monitoring center.
That is, no worker is on-site with the occupancy status of value 0.
We can see in the plot that there are on-site workers during the first
incident, but no person is detected at the second anomaly. That is
the reason why the second incident did not get fixed quickly.

In the fourth subplot, we draw the changing temperature in the
plant influenced by the cooling system’s working condition. During
the cooling system’s anomaly, the environment temperature rises,
which puts the factory operation at risk. Therefore, the engineers
in the monitoring center add a new rule 2.5 remotely to the second
IoT device for turning on the backup cooling system when the
temperature is higher than the threshold of 30 °C, and no worker is
nearby. After the rule injection, one can see that the backup cooling
system is started and the temperature decreases.

The use case illustrated above demonstrates the versatility and
the flexibility of the framework in a decentralized network with
a simplified setup. Depending on the type of sensors, actuators,
and the concrete use cases, we can easily customize the reasoning
topology of the whole IIoT, thanks to the framework.

5.3 Performance Evaluation
Our framework is implemented in C/C++. We show its performance
regarding memory usage, inference time, and processing ability
in this section. The test is conducted on an Arduino Nano 33 BLE
board.

Table 1 shows the memory usage of the core runtime of the
systems. Both parts of the system (CEP and ML inference) are
designed to run on power-constrained microcontrollers. As the
results show, their runtime can easily fit in devices with limited
resources.

Table 2 compares how much resources different TinyML models
need and how fast the inferences rum under the TinyOL system.

Table 1: Core Runtime of the Systems.

System

RAM [byte]

Flash [byte]

TinyOL System
micro CEP Engine

~7K
~17K

~135K
~34K

Table 2: Average Memory Consumption and Inference Speed
of the NN Models Used in the Case Study.

TinyML Model

RAM [byte]

Flash [byte]

Inference Speed [ms]

Anomaly Detection
Person Detection

21120
45776

53616
271664

1.7
1242.0

DEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy

Haoyu Ren, Darko Anicic, and Thomas Runkler

Figure 5: Process Monitoring of the Use Case.

Figure 6: The Arduino boards and the OV7675 Camera.

The results do not count the hardware libraries, e.g., the library
to support sensor reading. One can notice that the CNN/person
detection model requires far more computing resources than the
autoencoder/anomaly detection model. Therefore, a cascade system
may be helpful in the application to reduce energy consumption:
a light-weight ML model runs most of the time, not very accurate

Figure 7: Throughput Test of the micro CEP Engine
(Throughput vs Number of Rules).

but fast reacting to the sensor readings, and a powerful yet heavy
model can be activated when we need more precise and confident
results.

Figure 7 presents the result of the throughput test. We evalu-
ated the average throughput for each setting by measuring how
much time the engine needs for processing a stream of 10000 sensor
events. By varying the number of rules in the engine, we estimated
the relationship between the throughput and the number of rules.
We constructed events intentionally so that each event fires each
rule exactly once. After the event gets processed by all the rules,
it is effectively discarded by the engine. We ran a detailed inves-
tigation of the number of rules from one to five. Usually, only a

AnomalyInferenceWarningEventOccupancyStatusTemperatureAnomalyStartAnomalyFixedAnomalyStartExceedThresholdRule forBackup Cooling System AddedSend WarningTemperatureThresholdTimeWorkerDetected,WarningLight OnSend WarningDismissWarningNoWorkerDetected,Send Alarm12345101520Number of Rules025050075010001250150017502000Throughput (Events/Sec)The Synergy of Complex Event Processing and Tiny Machine Learning in Industrial IoT

DEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy

we can run NNs on constrained tiny IIoT devices and improve ex-
isting pre-built models by learning from the field data. The micro
CEP engine is able to capture the temporal and spatial relationship
between primitive events directly at the edge. In particular, the
user-friendly CEP grammar supports users with no programming
knowledge to configure the reasoning patterns at any time. The
TinyML and the CEP’s synergy play an important role in enabling
versatile and flexible IIoT where they compensate one’s drawback
by acquiring other’s strengths. Moreover, we construct an industrial
use case of machine safety monitoring to illustrate the framework’s
functionality and evaluate its performance statistically. By validat-
ing the concept on two Arduino boards with a cooling ventilator,
we proved the feasibility, flexibility, and effectiveness of the pro-
posed solution. At last, we evaluated the framework’s performance
regarding runtime, memory consumption, inference speed, and
throughput.

The future work involves the following: (1) The current solution
processes all the data with a deterministic model. However, the
uncertainty is the nature of the NN model. Thus, we will include
probability in the reasoning progress of our system. (2) We will
provide a more user-friendly interface to manage program topol-
ogy. Ideally, the user might "drag and drop" rules and models to
configure the system. (3) We will realize the mass management of
devices in IIoT networks. (4) We will improve the performance of
the framework.

REFERENCES
[1] Amazon. 2021. Amazon Kinesis Data Analytics. Retrieved Feb 27, 2021 from

https://aws.amazon.com/kinesis/data-analytics

[2] Darko Anicic, Sebastian Rudolph, Paul Fodor, and Nenad Stojanovic. 2012. Stream
Reasoning and Complex Event Processing in ETALIS. Semantic Web 3, 4 (2012),
397–407. https://doi.org/10.3233/sw-2011-0053
[3] Arduino. 2021. Arduino Nano 33 BLE Sense.

Retrieved Feb 27, 2021 from

https://store.arduino.cc/arduino-nano-33-ble-sense

[4] Ralf Bruns, Jürgen Dunkel, and Norman Offel. 2019. Learning of Complex Event
Processing Rules with Genetic Programming. Expert Systems with Applications
129 (2019), 186–199. https://doi.org/10.1016/j.eswa.2019.04.007

[5] Chingyu Chen, JuiHsi Fu, Today Sung, and Ping-Feng Wang. 2014. Complex
Event Processing for the Internet of Things and Its Applications. In 2014 IEEE
International Conference on Automation Science and Engineering (CASE). IEEE,
New Taipei, Taiwan, 1144–1149. https://doi.org/10.1109/CoASE.2014.6899470

[6] Miguel de Prado et al. 2020. Robust Navigation with tinyML for Autonomous

Mini-Vehicles. arXiv:2007.00302 [cs.LG]

[7] Marcos Dias de Assunção, Alexandre da Silva Veith, and Rajkumar Buyya. 2018.
Distributed Data Stream Processing and Edge Computing: A Survey on Resource
Elasticity and Future Directions. Journal of Network and Computer Applications
103 (2018), 1–17. https://doi.org/10.1016/j.jnca.2017.12.001

[8] Aidan Hogan et al. 2021. Knowledge Graphs. arXiv:2003.02320 [cs.AI]
[9] Adam Paszke et al. 2019. PyTorch: An Imperative Style, High-Performance Deep
Learning Library. In Advances in Neural Information Processing Systems, Vol. 32.
Curran Associates, Inc., Canada. https://proceedings.neurips.cc/paper/2019/file/
bdbca288fee7f92f2bfa9f7012727740-Paper.pdf

[10] Bert Moons et al. 2018. BinarEye: An Always-on Energy-Accuracy-Scalable
Binary CNN Processor with All Memory on Chip in 28nm CMOS. In 2018 IEEE
Custom Integrated Circuits Conference (CICC). IEEE, IEEE, San Diego, CA, USA,
1–4. https://doi.org/10.1109/cicc.2018.8357071

[11] Jinook Song et al. 2019. 7.1 an 11.5 tops/w 1024-mac butterfly structure dual-core
sparsity-aware neural processing unit in 8nm flagship mobile soc. In 2019 IEEE
International Solid-State Circuits Conference (ISSCC). IEEE, IEEE, San Francisco,
CA, USA, 130–132. https://doi.org/10.1109/isscc.2019.8662476

[12] Lars Brenna et al. 2007. Cayuga: A High-Performance Event Processing Engine.
In Proceedings of the 2007 ACM SIGMOD International Conference on Management
of Data (Beijing, China) (SIGMOD ’07). Association for Computing Machinery,
New York, NY, USA, 1100–1102. https://doi.org/10.1145/1247480.1247620
[13] Lajos Jenő Fülöp et al. 2010. Survey on Complex Event Processing and Predictive
Analytics. In Proceedings of the Fifth Balkan Conference in Informatics. Citeseer,
Association for Computing Machinery, New York, NY, USA, 26–31.

Figure 8: Throughput Test of the micro CEP Engine
(Throughput vs Rule Type).

few rules are implemented on one constrained tiny IoT device due
to low energy consumption and limited computational resources.
We also observed that many industrial use cases (including the one
from the last section) could be achieved with a load of up to five
rules per sensor node. Nevertheless, we extended the test for more
demanding industrial applications where the number of rules are
increased up to twenty. The result shows that the more rules we
add, the less throughput we obtain. The throughput is not linearly
correlated to the number of rules as not each rule added requires
the same computational resources.

As shown in Figure 8, we tested the throughput performance of
several frequently used operators. We obtained a throughput of over
1450 events/s for every operator, which is a result that fulfills the
requirements of most distributed IIoT applications. In the majority
of our IIoT applications with a decentralized setting, the sensor node
produces events with a frequency from 1 to 200 events/second. The
lower frequency is desired with slower changing quantities such as
temperature (~1 event/second), whereas higher frequency is needed
when we measure, e.g., vibration (~200 events/second). This test
shows that the micro CEP engine running on a constrained MCU
could easily handle such a workload. It is worth noting that the
micro CEP engine can also run on non-constrained devices (not bare
metal devices), such as Siemens SIMATIC IOT20501 or Raspberry
Pi, if higher throughputs are demanded.

6 CONCLUSION AND FUTURE WORK
In this work, we propose a novel framework targeted for con-
strained field devices, which incorporates the inference ability of
TinyML and the power of micro CEP to detect diversified complex
events in distributed sensor networks.

The core building blocks of the framework are the TinyOL sys-
tem and the micro CEP engine. By leveraging the TinyOL system,

1https://new.siemens.com/global/en/products/automation/pc-based/iot-
gateways/simatic-iot2050.html

filterandseqorlambda+sumlambda+avglambda+maxlambda+minRule Type025050075010001250150017502000Throughput (Events/Sec)DEBS ’21, June 28–Juli 02, 2021, Virtual Event, Milan, Italy

Haoyu Ren, Darko Anicic, and Thomas Runkler

[37] STMicroelectronics. 2021. AI expansion pack for STM32CubeMX. Retrieved

Feb 27, 2021 from https://www.st.com/en/embedded-software/x-cube-ai.html

[38] TIBCO. 2021. TIBCO. Retrieved Feb 27, 2021 from https://www.tibco.com
[39] Mira Vrbaski, Miodrag Bolic, and Shikharesh Majumdar. 2018. Complex Event
Recognition Notification Methodology for Uncertain IoT Systems Based on Micro-
Service Architecture. In 2018 IEEE 6th International Conference on Future Internet
of Things and Cloud (FiCloud). IEEE, Barcelona, Spain, 184–191. https://doi.org/
10.1109/FiCloud.2018.00034

[40] Yongheng Wang, Hui Gao, and Guidan Chen. 2018. Predictive Complex Event
Processing Based on Evolving Bayesian Networks. Pattern Recognition Letters
105 (2018), 207–216. https://doi.org/10.1016/j.patrec.2017.05.008

[41] Jonas Wanner, Christopher Wissuchek, and Christian Janiesch. 2019. Machine
Learning and Complex Event Processing. A Review of Real-time Data Analytics
for the Industrial Internet of Things. Enterprise Modelling and Information Systems
Architectures (EMISAJ) – International Journal of Conceptual Modeling 15, 1 (2019),
1–27. https://doi.org/10.18417/emisa.15.1

[14] Lina Lan et al. 2019. A Universal Complex Event Processing Mechanism Based
on Edge Computing for Internet of Things Real-Time Monitoring. IEEE Access 7
(2019), 101865–101878. https://doi.org/10.1109/ACCESS.2019.2930313

[15] Martín Abadi et al. 2015. TensorFlow: Large-Scale Machine Learning on Het-
https://www.tensorflow.org/ Software available from

erogeneous Systems.
tensorflow.org.

[16] Nijat Mehdiyev et al. 2015. Determination of Rule Patterns in Complex Event
Processing Using Machine Learning Techniques. Procedia Computer Science 61
(2015), 395–401. https://doi.org/10.1016/j.procs.2015.09.168

[17] Pablo Graubner et al. 2018. Multimodal Complex Event Processing on Mobile
Devices. In Proceedings of the 12th ACM International Conference on Distributed
and Event-Based Systems (Hamilton, New Zealand) (DEBS ’18). Association for
Computing Machinery, New York, NY, USA, 112–123. https://doi.org/10.1145/
3210284.3210289

[18] Robert David et al. 2020. Tensorflow Lite Micro: Embedded Machine Learning

on tinyML Systems. arXiv:1801.06601 [cs.LG]

[19] Tianqi Chen et al. 2018. TVM: An Automated End-to-End Optimizing Compiler
for Deep Learning. In 13th USENIX Symposium on Operating Systems Design and
Implementation (OSDI 18). USENIX Association, USA, 578–594.

[20] Tianwei Xing et al. 2019. Deepcep: Deep Complex Event Processing Using
Distributed Multimodal Information. In 2019 IEEE International Conference on
Smart Computing (SMARTCOMP). IEEE, Washington, DC, USA, 87–92. https:
//doi.org/10.1109/smartcomp.2019.00034
[21] TinyML Foundation. 2021. tinyML.org.

Retrieved Feb 27, 2021 from https:

//www.tinyml.org

[22] The Apache Software Fundation. 2021. Apache Flink. Retrieved Feb 27, 2021

from https://ci.apache.org/projects/flink/flink-docs-release-1.12

[23] Nikos Giatrakos, Elias Alevizos, Alexander Artikis, Antonios Deligiannakis, and
Minos Garofalakis. 2020. Complex Event Recognition in the Big Data Era: A
Survey. The VLDB Journal 29 (01 2020). https://doi.org/10.1007/s00778-019-
00557-w

[24] Google. 2021. Tensorflow Lite Micro Guide.

Retrieved Feb 27, 2021 from

https://www.tensorflow.org/lite/microcontrollers

[25] Nithyashri Govindarajan, Yogesh Simmhan, Nitin Jamadagni, and Prasant Misra.
2014. Event Processing Across Edge and the Cloud for Internet of Things Ap-
plications. In Proceedings of the 20th International Conference on Management
of Data (Hyderabad, India) (COMAD ’14). Computer Society of India, Mumbai,
Maharashtra, IND, 101–104.

[26] Son Han, Huizi Mao, and William J. Dally. 2015. Deep Compression: Compressing
Deep Neural Networks with Pruning, Trained Quantization and Huffman Coding.
arXiv:1510.00149 [cs.LG]

[27] Liangzhen Lai, Naveen Suda, and Vikas Chandra. 2018. Cmsis-nn: Efficient Neural

Network Kernels for Arm Cortex-M CPUs. arXiv:1801.06601 [cs.LG]

[28] Nader Mohamed and Jameela Al-Jaroodi. 2014. Real-time big data analytics:
Applications and challenges. In 2014 International Conference on High Performance
Computing Simulation (HPCS). IEEE, Bologna, Italy, 305–310. https://doi.org/10.
1109/HPCSim.2014.6903700

[29] Raef Mousheimish, Yehia Taher, and Karine Zeitouni. 2017. Automatic Learning
of Predictive CEP Rules: Bridging the Gap Between Data Mining and Complex
Event Processing. In Proceedings of the 11th ACM International Conference on
Distributed and Event-based Systems. Association for Computing Machinery, New
York, NY, USA, 158–169. https://doi.org/10.1145/3093742.3093917

[30] OmniVision. 2021. OV7675 Image Sensor. Retrieved Feb 27, 2021 from https:

//www.ovt.com/sensors/OV7675

[31] Alexander Power and Gerald Kotonya. 2019. Providing Fault Tolerance via
Complex Event Processing and Machine Learning for IoT Systems. In Proceedings
of the 9th International Conference on the Internet of Things. Association for
Computing Machinery, New York, NY, USA, 1–7. https://doi.org/10.1145/3365871.
3365872

[32] Mark Proctor. 2012. Drools: A Rule Engine for Complex Event Processing. In
Applications of Graph Transformations with Industrial Relevance, Andy Schürr
and Dániel Varró (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 2–2.
https://doi.org/10.1007/978-3-642-34176-2_2

[33] Mohammad Rastegari, Vicente Ordonez, Joseph Redmon, and Ali Farhadi. 2016.
Xnor-Net: Imagenet Classification Using Binary Convolutional Neural Networks.
In European Conference on Computer Vision. Springer, Springer, Cham, Amsterdam,
The Netherlands, 525–542. https://doi.org/10.1007/978-3-319-46493-0_32
[34] Haoyu Ren, Darko Anicic, and Thomas Runkler. 2021. TinyOL: TinyML with

Online-Learning on Microcontrollers. arXiv:2103.08295 [cs.LG]

[35] Ramon Sanchez-Iborra and Antonio F. Skarmeta. 2020. TinyML-Enabled Frugal
Smart Objects: Challenges and Opportunities. IEEE Circuits and Systems Magazine
20, 3 (2020), 4–18. https://doi.org/10.1109/mcas.2020.3005467

[36] José Angel Carvajal Soto, Marc Jentsch, Davy Preuveneers, and Elisabeth Ilie-
Zudor. 2016. CEML: Mixing and Moving Complex Event Processing and Machine
Learning to the Edge of the Network for IoT Applications. In Proceedings of the 6th
International Conference on the Internet of Things. Association for Computing Ma-
chinery, New York, NY, USA, 103–110. https://doi.org/10.1145/2991561.2991575

