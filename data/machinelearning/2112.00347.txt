An Open Source Software Stack for Tuning the
Dynamical Behavior of Complex Power Systems

Anna Büttner∗†, Hans Würfel∗†, Anton Plietzsch†, Michael Lindner†‡ and Frank Hellmann†
† Potsdam Institute for Climate Impact Research
Telegrafenberg A31, 14473 Potsdam, Germany
Email: buettner@pik-potsdam.de, wuerfel@pik-potsdam.de
‡ Institute of Theoretical Physics, Technische Universität Berlin
Hardenbergstr. 36, D-10623 Berlin, Germany

1
2
0
2

c
e
D
1

]

Y
S
.
s
s
e
e
[

1
v
7
4
3
0
0
.
2
1
1
2
:
v
i
X
r
a

Abstract—BlockSystems.jl and NetworkDynamics.jl
are two novel software packages which facilitate highly
eﬃcient transient stability simulations of power net-
works. Users may specify inputs and power system
design in a convenient modular and equation-based
manner without compromising on speed or model de-
tail. Written in the high-level, high-performance pro-
gramming language Julia [1] a rich open-source package
ecosystem is available, which provides state-of-the-art
solvers and machine learning algorithms [2].

Motivated by the recent interest in the Nordic inertia
challenge [3] we have implemented the Nordic5 test
case [4] and tuned its control parameters by making use
of the machine learning and automatic diﬀerentiation
capabilities of our software stack.

Index Terms—dynamic optimization, equation-based

modeling, Julia, open-source, power systems

I. Introduction

One of the main challenges in designing a simulation
software for power system dynamics is the large amount
of possible modeling choices at several levels of the power
system. At the bus level, the models range from algebraic
constraints and simple swing equations up to high order
machine models with complex governors and control loops.
At the grid level the systems of interest range from small
toy models containing of a handful buses up to huge,
nation-scale systems with complex topology and tens of
thousands of buses with heterogeneous dynamics. Finally,
many diﬀerent scenarios can be considered, e.g. voltage
drops, line failures or power perturbations, to name just a
few.

To handle this complexity it is often helpful to build
models from the ground up, starting with simple compo-
nent models and topologies and gradually increasing the
complexity of the system. The hierarchical structure of
power systems is beneﬁcial for this kind of component-
based modeling: both at the grid, as well as at the bus
level, subsystems often have clearly deﬁned interfaces.

In this paper, we present a Julia software stack for
modular, equation-based modeling of sub-nodal dynamics
all the way up to machine learning-enabled parameter
selection for controllers (see Fig. 1). Julia [1] is a high-level,

high-performance programming language with a rich open-
source package ecosystem. In particular, the Julia libraries
for diﬀerential equation solving [5],
[6] and "scientiﬁc
machine learning" [2], [7] have been shown to outperform
competing solutions in other languages, both regarding
speed and available features.

The two language problem for simulation software,
says that easy-to-use interfaces are commonly written in
high-level programming languages, whereas computational
backends are implemented in eﬃcient, but hard(er) to
maintain low-level languages. Julia was designed to cir-
cumvent this problem by being both high-level and fast
[1] (among other things due to just-in-time compilation).
Since our whole software stack is written in Julia there
is no two language problem: Users can look through each
step of modeling and computation without hitting obscure
calls to underlying libraries written in low-level languages.
Commercially available software is mostly closed source
which is a problem in science. Those programs come with
huge libraries of predeﬁned building blocks and function-
ality which are hard to extend and have to be treated
as black boxes in many cases. Since the full stack is
open source, the used models are exposed to the users
and can be inspected, altered and extended to match the
requirements.

In the next sections, we present a typical workﬂow for
modeling and simulating a power system with the help of
our software packages. We start with BlockSystems.jl1,
a frontend to model dynamics of power system compo-
nents and control structures based on block diagrams and
generate optimized Julia functions from the user input.
These function are passed on to NetworkDynamics.jl
[8], which combines user-supplied, modular node and
edge dynamics, as well as a graph topology,
into an
eﬃcient right hand side describing the whole system dy-
namics. The resulting diﬀerential equation can be solved
with the state-of-the-art solver algorithms available in
the DifferentialEquations.jl ecosystem. Finally, we
demonstrate the machine learning and automatic diﬀeren-
tiation capabilities of the SciML ecosystem, by tuning the

∗ These authors contributed equally.

1https://github.com/hexaeder/BlockSystems.jl

 
 
 
 
 
 
Nordic5 simulation

BlockSystems.jl

PowerDynamics.jl

ProBeTune.jl

ModelingToolkit.jl

NetworkDynamics.jl

DiffEqFlux.jl

Symbolics.jl

DifferentialEquations.jl

Flux.jl

Fig. 1. A diagram showing the relationships among the main
packages in our software stack.

parameters of the system such that its dynamics match
those of a given speciﬁcation, according to the recently
proposed probabilistic tuning framework [9]2.

II. Software Packages

A. BlockSystems.jl

BlockSystems.jl is a Julia package for modeling dy-
namical systems built from several subsystems (blocks)
connected via an input-output relationship. Each block
consists of a set of algebraic and diﬀerential equations as
well as some meta information. The equations are symbolic
representations based on the computer algebra system
Symbolics.jl [10].

The equations deﬁne the dynamics for all states x of the
block based on some parameters. We deﬁne two types of
states:

• outputs o(t): time-dependent states, which are ex-

posed to other blocks and

• internal states s(t): which are needed in order to
calculate the outputs but are not exposed to other
blocks.

The parameters also fall in two categories:

• time dependent inputs i(t) whose values are set ex-

ternally and

• time independent internal parameters p.
Using those symbols one can deﬁne three types of
equations: First-order ordinary diﬀerential equations for
states x ∈ x

This equation can be directly used to create an IOBlock
with the inputs Pm and Pe, the output ω and the internal
parameters M and D.

@parameters t M D P_m(t) P_e(t)
@variables ω(t)
dt = Differential(t)

swing = IOBlock([dt(ω) ~ 1/M * (P_m - D*ω - P_e)],

[P_m, P_e], # inputs
[ω])

# outputs

If there is a change in the electrical power demand Pe
the power diﬀerence has to be absorbed by the damping
term. If Pm is ﬁxed the swing node will reach a new steady-
state at a diﬀerent frequency. With BlockSystems.jl we
can easily combine blocks to create bigger systems. We
will deﬁne a PID-controller to adapt Pm after the change of
demand in Pe in order to restore the initial frequency. The
value of the controller signal equals the sum of the input,
the integral of the input, and the derivative of the input.
For the output of the whole block, the controller signal
gets subtracted from the ﬁxed initial value of Pm = 1.

@parameters input(t)
@variables int(t) out(t) pid(t)
pid = IOBlock([dt(int) ~ input,

pid ~ input + int + dt(input),
out ~ 1 - pid],

[input],
[out])

We deﬁne a new IOSystem by providing multiple blocks
and deﬁning their input-output-relationship. In this ex-
ample, we plug the frequency ω of the swing node into
the input of the PID controller. The output of the PID
controller gets plugged into the Pm input of the swing
equation. The resulting closed-loop system is shown in the
upper pane of Fig. 2.

w_pid = IOSystem([pid.out => swing.P_m,

swing.ω => pid.input],

[swing, pid])

d
dt

x(t) = f (x, i, p, t) ,

(1)

w_pid = connect_system(w_pid)

where i is the set of all inputs and p is the set of all internal
parameters; explicit algebraic equations for state x where
the right hand side must not depend on x

x(t) = f (x \ {x}, i, p, t) ;

or implicit constraint equations

0 = f (x, i, p, t) .

(2)

(3)

An example of such a block is the frequency dynamics
of a simple swing node. In this model, the change of
frequency ω depends on the balance between electrical
power Pe and mechanical power Pm. The equation is
further parameterized by the inertia M and the damping
D:

ω(t) =

(cid:0)Pm(t) − D ω(t) − Pe(t)(cid:1)

(4)

d
dt

1
M

2https://github.com/PIK-ICoNe/ProBeTune.jl

By calling connect_system the composite system of
several building blocks is transformed into a single block
with a single set of equations, inputs and outputs. There
are several important steps in this process:

• Substitution of input variables with the connected
outputs, i. e. Pm in the swing equation gets replaced
by 1 − pid.

• Substitution of diﬀerentials in the right-hand side of
the equation by repeated substitution of known terms
inside the diﬀerential, symbolic expansion of known
diﬀerentials and substitution of known diﬀerentials,
dt i inside the controller gets replaced by d
i. e. d
dt ω gets
replaced by 1

M (Pm − D ω − Pe).

• Reduction of explicit algebraic states which are not
marked as outputs of the system. This is done by sub-
stituting each occurrence with their right-hand side.
The algebraic equation can be removed afterwards.

Besides those transformations, there are some additional
steps regarding namespacing and namespace promotions
of subsystems.

Once the complex system is reduced to a single block
the next important step is function building. Up to this
point, all expressions have been symbolic representations
of equations rather than Julia functions. Using the excel-
lent transformation tools from ModelingToolkit.jl [11]
and Symbolics.jl, we can generate high performant Julia
functions from those equations. Each output and internal
state is represented by a state xi in the state vector x. The
generated function takes an input vector i and parameter
vector p and represent the dynamical system in mass
matrix form

M ·

x = f (x, i, p, t)

(5)

d
dt

where the (diagonal) mass matrix M is also generated
by BlockSystems.jl. Here, implicit algebraic constraints
(3) correspond to zero diagonal entries in the mass ma-
trix. The system can be solved using the solvers from
DifferentialEquations.jl. The resulting time series in
response to a sudden drop of requested electrical power
is shown in Fig. 2. The full code for the example can be
found in our GitHub repository [12].

Pe

Pm

−

Pﬁx

Swing Equation

d
dt

ω(t) =

1
M

(cid:0)Pm(t) − D ω − Pe(t)(cid:1)

ω

PID Controller
Z

o(t) = i(t) +

dt i(t) +

d
dt

i(t)

Fig. 2. Block diagram and frequency response of the swing node
to a sudden drop in electrical power demand with and without PID
controller.

B. NetworkDynamics.jl

While equation-based modeling with block diagrams is
very convenient for the various subcomponents connected
to the buses, there are some drawbacks to this technique.
Working with symbolic representations of equations is very
ﬂexible but does not scale well for very big systems with
potentially thousands of buses.

At the network level, we do not need this kind of ﬂexibil-
ity because all connections between the components follow
strict rules: each node dynamic sees the sum of incoming
complex currents on the connected lines as input and
deﬁnes diﬀerential or algebraic equations for the complex

node voltage. Lines on the other hand see the voltages
of connected nodes as input and calculate the complex
currents for both ends. This kind of modeling is based on
the assumption, that the nodal voltage and currents are
balanced at all times and the short-term voltage dynamics
only react to the currents on the transmission lines. Thus
our modeling approach is based on assumptions 1-3 (but
not 4 and 5, that restrict the machine models) of [13].

We can use BlockSystems.jl to generate high per-
formant right-hand side functions for the subcompo-
nents of the system. Those functions are consumed
by NetworkDynamics.jl [8] which constructs right-hand
side functions for dynamical systems on networks with
heterogeneous components. It automatically constructs
an optimized Julia function, ready to be solved with
DifferentialEquations.jl.

C. PowerDynamics.jl

While not being used for modeling the example system
in this paper, we also need to mention PowerDynamics.jl
as part of our software stack. PowerDynamics.jl [14] is a
library of widely used line and generator models as well
as fault scenarios from power system theory. Built on top
of NetworkDynamics.jl it guarantees eﬃcient implemen-
tation and provides a range of convenience functions for
plotting and evaluation of the solution, thus leveraging Ju-
lia’s capabilities for highly eﬃcient numerical simulations.
Due to its computational eﬃciency, it enables probabilistic
analyses of power systems, which require a large number of
dynamical simulations [15]. The new block-based modeling
we present here will become part of the PowerDynamics.jl
in the foreseeable future.

D. ProBeTune.jl

Probabilistic Behavioral Tuning (ProBeTune) is one
among many possible complex optimization problems
which can be realized using our software stack. In this
publication, we will only use ProBeTune to demonstrate
the capabilities of our approach. Hence we refer the inter-
ested reader to the original publication [9], which contains
the full mathematical background, and only give a short
introduction here.

To deal with the varying layers of complexities in power
grids it would often be desirable to tune complex systems
to behave like a simpler system, a so-called speciﬁcation.
In practical applications, however, it is usually not nec-
essary that such a speciﬁcation is met precisely. Instead,
it is suﬃcient that the system behaves as close to the
speciﬁcation as possible. With ProBeTune Hellmann et.
al. [9] introduced a method that is used to optimize the
internal parameters of a system p such that its dynamics
will behave close to a speciﬁcation. For this purpose, a
distance measure between the system and speciﬁcation is
introduced. This so-called behavioral distance d is the ex-
pected distance between the system and the speciﬁcation
output. In [9] it is shown that d can be approximated

eﬃciently by solving a joint optimization problem in p and
several copies of the speciﬁcation parametrized by qi. We
refer the reader to [9] for details. The key idea here is
that it is not necessary to tune the system towards a par-
ticular parametrization of the speciﬁcation but rather to
achieve a certain dynamic behavior. Julia’s diﬀerentiable
programming capabilities, which enable the use of gradient
descent-based optimization methods in combination with
diﬀerential equations solvers, and the machine learning
algorithms of DiffEqFlux.jl [16] allow problems like
this to be smoothly solved. A simple interface for the
ProBeTune method is implemented in the ProBeTune.jl
package.

III. Example: Nordic 5-Bus Test Case

Transient stability issues of the Nordic electricity grid,
due to low inertia, are a well-known problem especially
in the summer months when the share of renewable
energy sources (RES) is high [3]. As this problem will
become more dominant the Nordic Transmission System
Operators (TSOs) have introduced a new grid service,
the Fast Frequency Reserve (FFR). FFR is designed to
assist the already existing Frequency Containment Reserve
for Disturbances (FCR-D) in the ﬁrst 30s after a fault
occurred. Markets for FFR have been introduced by all
Nordic TSOs in 2020 as promised in [3].

Recently, the concept of the "Dynamic Virtual Power
Plant" (DVPP) has been proposed in [17] as an extension
to the "Virtual Power Plant" (VPP). The VPP only coor-
dinates power balance at the minute scale in contrast to
the DVPP which includes dynamic phenomena and aids in
the dynamical stability of the grid. The main idea of the
paper is that RES have to participate in all grid services,
including FFR and FCR-D. As in the case of static VPPs,
small suppliers of RES are aggregated to aid in ancillary
grid services which they would not have been able to
supply by themselves. In a companion publication [4],
the authors presented a method that combines hydro and
wind power, allowing their DVPP to fulﬁll the demands
for FCR-D. Their approach solves the instabilities which
are related to the "minimum phase zero" of the hydro
governors by utilizing the wind turbines as a source for
FFR on very short time scales to facilitate the undershoot
period of the hydro plants.

However, much research is needed to make this approach
more general, since the authors of [4] have only explored a
single scenario, the disconnection of a 1400 MW importing
DC link. In addition, it is not possible to include other
energy sources into their DVPP. Yet their approach and
test case are exciting and ProBeTune oﬀers the perfect
framework to handle these types of tasks. The FCR-D
guidelines, or any other deﬁnition for a DVPP, can be
used to deﬁne the speciﬁcation. The system parameters
are optimized to behave closest to the speciﬁcation for a
large number of possible scenarios.

The Nordic 5-bus test system (Nordic5), designed by the
authors of [4], was implemented using BlockSystems.jl
and NetworkDynamics.jl. The nodal dynamics were im-
plemented using BlockSystems.jl by following the Block
Diagrams given in the original publication [4] and adapting
them accordingly to our problem. The Nordic5 setup in-
cludes governors, exciters, machines, wind turbines, loads
and diﬀerent types of controllers and therefore already
shows many relevant layers of complexity that are needed
in realistic power system modeling and are realizable
using our software stack. The network structure is shown
in Fig. 3. Each node consists of a load, a proportional
controller and additional energy sources for each node as
indicated in Fig. 3. The complete modeling of the Nordic5
system can be found in our GitHub repository [12].

Fig. 3. Network structure of the Nordic 5-Bus system. Each Bus
consist of a load, a proportional controller and the additional energy
sources as indicated.

A. Experimental Setup

For the tuning process, we have ﬁxed the parameters
which were given in the publication [4] while we have
assumed that the controllers at the machines, as well as
their parameters are adaptable.

Each node in the Nordic5 system contains a machine,
whose shaft sets the frequency dynamics. We have added
a proportional controller Diωi to each shaft, resulting in
the following frequency dynamics ωi for node i:

dωi
dt

=

1
2Hi

(Pm,i − Pe,i − Diωi)

(6)

where Hi is the inertia constant. Pm,i, and Pe,i are the
mechanical and electrical power respectively and are given
by the corresponding diﬀerential equations of the machine
models, governors and exciters. For example, the thermal
machine at bus 5 in Fig. 3 is modeled using a ﬁfth-order
machine model, an exciter and a power system stabilizer.
As a ﬁrst proof of concept, we will optimize the pro-
portional gain Di at each machine in the system using
ProBeTune.jl. The speciﬁcation is given by a network
of swing equations as the nodal dynamics and with the
same topology as the Nordic5 system (Fig. 3), including
a proportional controller and loads at all buses. The

WindHydroThermalreduction of complex nodal dynamics to a swing equa-
tion with a damping term Di is motivated by the fact
that many processes, such as the damper winding eﬀects,
constant excitation and damping by loads can as a good
approximation be absorbed in the damping term of the
swing equation [18], [19]. Tuning a complex system such
that it behaves like a network of simple swing equations
can be useful, since the latter are far better understood
and also allow for analytical statements, as for example in
[20], that are no longer applicable to much more detailed
engineering models.

The output metric ∆o of system and speciﬁcation, given
in equation (7), is based on a frequency metric that com-
pares the diﬀerence between the frequency trajectories of
the system and speciﬁcation after a perturbation, divided
by the number of all perturbations N :

∆o =

1
N

N
X

i=1
X

X

(cid:16)

j=1

5

t

i,sys(t) − ωj
ωj

i,spec(t)

(cid:17)2

,

(7)

where j and t run over all perturbation scenarios and
100 uniformly distributed time points in the time series
respectively. The frequency trajectory at bus i of either
the system or the speciﬁcation are given by ωi(t). The
output metric is used to calculate the behavioral distance
as deﬁned in [9].

The diﬀerent perturbation scenarios j are given by
randomly choosing a bus i to be perturbed and sampling
a normally distributed power perturbation ∆Pi which
changes the demand on the load of bus i. The frequency
metric (7) is minimized by adapting the proportional gains
Di at all nodes.

The initial gains of the system have been uniformly
drawn from an interval of [0, 1] while the gains of the
speciﬁcation were drawn from [0, 5]. As the ﬁrst step,
we calculate the behavioral distance d of the system and
speciﬁcation as deﬁned in [9] to get a measure of how
similar system and speciﬁcation are already. Then we
tune the parameters of the system and speciﬁcation until
the frequency metric converges. Finally, we calculate the
behavioral distance again with the tuned parameters. Our
optimization is performed on 10 diﬀerent perturbation
scenarios using the ADAM optimizer [21].

B. Results

The initial behavioral distance between system and
speciﬁcation is 13.36 which indicates that the dynamical
behavior of the both is not very similar.

After the joint optimization of the system and speciﬁca-
tion parameters has converged we calculate the behavioral
distance again. The ﬁnal behavioral distance is 0.005 and
a reduction of the behavioral distance of a factor ∼ 2684
can be reported. This means that the frequency dynamics
of the complex Nordic5 system can be described by swing
equations and shows that our approach was successful.

Fig. 4. Frequency transients of the initial system and speciﬁcation
after a power perturbation on bus 4. The system and speciﬁcation
do not inherit the same ﬁxed point.

Fig. 4 and Fig. 5 show the frequency transients of the
system and speciﬁcation after the same power perturba-
tion on bus 4. Fig. 4 shows the initial system with random
proportional gains while Fig. 5 shows the transients after
the tuning process. The frequency transients of the nodes
in the Nordic5 system overlap so well that they become
indistinguishable in Fig. 4 and 5.

In Fig. 4 the system and speciﬁcation run oﬀ to diﬀerent
ﬁxed points after the perturbation. The speciﬁcation set-
tles on a ﬁxed point closer to the synchronous frequency
and does so quicker, which is to be expected since the spec-
iﬁcation was initialized with higher proportional gains.

Fig. 5 shows the tuned system and speciﬁcation after
the same perturbation as in the previous Fig. 4. After the
training both, system and speciﬁcation, settle on the same
ﬁxed point, within the same time frame. The systems are
only distinguishable by the higher harmonic oscillations of
the speciﬁcation.

While the speciﬁcation allows for more oscillations, as
the nodes in the Nordic5 system contain various controllers
to prevent this, the results are still meaningful as they
show that we can reduce very complex dynamics onto a
simpler model. These results should be treated as a proof
of concept to demonstrate the software stack, to apply
ProBeTune properly we have to use more sophisticated
speciﬁcations and tuning processes.

The next step is to use controllers which can restore the
synchronous frequency, like a PID controller, or to reduce
the Nordic5 system onto a single swing equation. Finally,
the ultimate goal is to use the design target for the power
output, given in [4], as the speciﬁcation to deﬁne a proper
DVPP.

IV. Outlook

We have presented our purely Julia-based software
stack, which allows us
to build modular equation-
based networks by using NetworkDynamics.jl and
BlockSystems.jl. We have shown that we can use this

References

[1] J. Bezanson, A. Edelman, S. Karpinski, and V. B. Shah, “Ju-
lia: A fresh approach to numerical computing,” SIAM Review,
vol. 59, no. 1, pp. 65–98, 2017.

[2] Sciml open source

scientiﬁc machine

learning.

[Online].

Available: https://github.com/SciML

[3] ENTSO-E, “Fast frequency reserve – solution to the nordic

inertia challenge,” Technical Report, 2019.

[4] J. Björk, K. H. Johansson, and F. Dörﬂer, “Dynamic virtual
power plant design for fast frequency reserves: Coordinating
hydro and wind,” 2021.

[5] C. Rackauckas and Q. Nie, “Diﬀerentialequations. jl–a perfor-
mant and feature-rich ecosystem for solving diﬀerential equa-
tions in julia,” Journal of Open Research Software, vol. 5, no. 1,
2017.

[6] C. Rackauckas. A comparison
in matlab,
and

equation solver
mathematica, maple,
http://www.stochasticlifestyle.com/comparison-diﬀerential-
equation-solver-suites-matlab-r-julia-python-c-fortran/

diﬀerential
julia, python,
c,
[Online]. Available:

between
r,

fortran.

suites

[7] ——, “The essential tools of scientiﬁc machine learning (scien-

tiﬁc ml),” The Winnower, 08 2019.

[8] M. Lindner, L. Lincoln, F. Drauschke, J. M. Koulen,
H. Würfel, A. Plietzsch, and F. Hellmann, “Networkdynam-
ics.jl—composing and simulating complex networks in julia,”
Chaos: An Interdisciplinary Journal of Nonlinear Science,
vol. 31, no. 6, p. 063133, 2021.

[9] F. Hellmann, E. Zolotarevskaia, J. Kurths, and J. Raisch,
“Probabilistic behavioural distance and tuning - reducing
and aggregating controlled complex systems,” arXiv preprint
arXiv:2111.12521, 2021.

[10] S. Gowda, Y. Ma, A. Cheli, M. Gwozdz, V. B. Shah,
A. Edelman,
“High-performance
and C. Rackauckas,
symbolic-numerics via multiple dispatch,” arXiv preprint
arXiv:2105.03949, 2021.

[11] Y. Ma, S. Gowda, R. Anantharaman, C. Laughman, V. Shah,
and C. Rackauckas, “Modelingtoolkit: A composable graph
transformation system for equation-based modeling,” arXiv
preprint arXiv:2103.05244, 2021.

[12] A. Büttner and H. Würfel. (2021, Nov.) PIK-ICoNe/Open-
Power-Simulation- Conference-2021-Paper:. [Online]. Available:
https://doi.org/10.5281/zenodo.5744264

[13] R. Kogler, A. Plietzsch, P. Schultz, and F. Hellmann, “A normal

form for grid forming power grid components,” 2021.

[14] A. Plietzsch, R. Kogler, S. Auer, J. Merino, A. Gil-de Muro,
J. Liße, C. Vogel, and F. Hellmann, “Powerdynamics. jl–an
experimentally validated open-source package for the dynamical
analysis of power grids,” arXiv preprint arXiv:2101.02103, 2021.
[15] S. Liemann, L. Strenge, P. Schultz, H. Hinners, J. Porst,
M. Sarstedt, and F. Hellmann, “Probabilistic stability assess-
ment for dynamic active distribution grids,” IEEE Madrid Pow-
erTech 2021, 2020.

[16] C. Rackauckas, M. Innes, Y. Ma, J. Bettencourt, L. White,
and V. Dixit, “Diﬀeqﬂux. jl-a julia library for neural diﬀerential
equations,” arXiv preprint arXiv:1902.02376, 2019.

[17] B. Marinescu, O. Gomis-Bellmunt, F. Dörﬂer, H. Schulte, and
L. Sigrist, “Dynamic virtual power plant: A new concept for grid
integration of renewable energy sources,” 2021.

[18] P. W. Sauer and M. A. Pai, Power System Dynamics and

Stability. Prentice-Hall, Englewood, Cliﬀs, NJ, 1998.

[19] P. M. Anderson and A. A. Fouad, Power System Control and
Stability, ser. IEEE Press Power Engineering Series. John Wiley
& Sons, 2003.

[20] F. Dörﬂer and F. Bullo, “Synchronization and transient stability
in power networks and nonuniform kuramoto oscilators,” Siam
J. Control Optim, 2012.

[21] D. P. Kingma and J. Ba, “Adam: A method for stochastic

optimization,” arXiv preprint arXiv:1412.6980, 2014.

Fig. 5. Frequency transients of the tuned system and speciﬁcation
after a power perturbation on bus 4. The system and speciﬁcation
inherit the same ﬁxed point.

stack to implement and simulate a highly relevant test
case, presented in Sec. III, with complicated, heteroge-
neous dynamics on the buses. Finally, using Julia’s capa-
bilities for automatic diﬀerentiation and machine learning
we have tuned the control parameters of this complex
system to behave like a network of swing equations using
ProBeTune.jl. This complex example showed the capa-
bilities of our software and may serve as a starting point
for more elaborate tuning processes and control schemes,
such as the implementation of a “Dynamical Virtual Power
Plant“ [17]. Future work on our software stack will include
the implementation of GPU acceleration and Jacobian-
free solver methods to further reduce simulation times
and enable Monte Carlo simulations of fault scenarios for
realistically sized power grids.

Code availability

code
of

reproduce
is

to
this paper

and
All
the DOI
ﬁgures
https://zenodo.org/record/5744264 or at
the GitHub
repository https://github.com/PIK-ICoNe/Open-Power-
Simulation-Conference-2021-Paper.

the
available

results
at

Acknowledgment

The authors acknowledge the support of BMBF, CoN-
DyNet2 FK. 03EK3055A and the Deutsche Forschungs-
gemeinschaft (DFG, German Research Foundation) – KU
837/39-1 / RA 516/13-1 & HE 6698/4-1. A. Büttner ac-
knowledges support by the German Academic Scholarship
Foundation. Mr. Lindner greatly acknowledges support by
the Berlin International Graduate School in Model and
Simulation based Research (BIMoS) of the TU Berlin.
All authors gratefully acknowledge the European Regional
Development Fund (ERDF), the German Federal Ministry
of Education and Research and the Land Brandenburg for
supporting this project by providing resources on the high-
performance computer system at the Potsdam Institute for
Climate Impact Research.

