Generating explanations for answer set programming
applications

Ly Ly Trieua, Tran Cao Sona, Enrico Pontellia, and Marcello Balduccinib

aNew Mexico State University, MSC CS, PO Box 30001, Las Cruces, New Mexico, USA
bSaint Joseph’s University, 5600 City Avenue, Philadelphia, PA, USA

ABSTRACT

We present an explanation system for applications that leverage Answer Set Programming (ASP). Given a
program P , an answer set A of P , and an atom a in the program P , our system generates all explanation graphs
of a which help explain why a is true (or false) given the program P and the answer set A. We illustrate the
functionality of the system using some examples from the literature.

Keywords: Explainable AI, Answer Set Programming, Artiﬁcial Intelligence

1. INTRODUCTION

In recent years, explainable AI has been introduced to help users gain conﬁdence in the AI’s decisions and
conclusions. We aim at developing AI systems capable of explaining their responses to a request from a user until
the user ﬁnds that the answers are acceptable as illustrated
in Fig. 1. It starts with the user sending a request (Step 1).
The system responds with an initial answer (2). Thereafter,
a dialog between the two ensues with user sending questions
and information—that the user believes might be diﬀerent
than those owned by the system—to the system (3), and
the system responds with explanations and information—
that the system believes the user might not have or have
in incorrect form (4). This process continues until the user
agrees with the AI system. During this process, the AI will
need to take into consideration the human model of the Figure 1: Interactions between AI System and Human User
situation and the information sent by the user, diﬀerentiate it from its own, and inform the user about missing
or false information. In addition, the AI’s model of the human will need to be learned and updated as exchanges
between the two sides occur. Most current AI systems lack components for dealing with the steps (3)-(4).

In this paper, we focus on a key component needed in steps (3)-(4) in the above architecture. We propose
an explainable Answer Set Programming (ASP) system. ASP is a programming paradigm that has been applied
in several applications such as planning, diagnosis, robotics, etc. ASP is attractive as it is declarative, non-
monotonic, and elaboration tolerant, and has free and scalable solvers. Thus far, only limited attention has been
paid to explaining the output of an ASP execution. The proposed system will take a program P and a model A
of P and explain “why an atom is true/false in A.” In addition, the system will also produce explanation graphs
for atoms in an ASP program.

The paper is organized as follows. We will start with a short illustration of answer set programming with focus
on why ASP is an appropriate paradigm for the development of AI applications and when is it most appropriate
for using ASP. Afterwards, we will deﬁne the notion of a justiﬁcation (explanation graph) of an atom in a given
answer set. We will then describe a system for generating explanations for answer set programming and present
some initial applications.

1
2
0
2

r
p
A
8
1

]
I

A
.
s
c
[

1
v
3
6
9
8
0
.
4
0
1
2
:
v
i
X
r
a

1. request2. answer3. why/what/info4. explanations/info 
 
 
 
 
 
2. PRELIMINARIES

2.1 Answer Set Programming (ASP)
(ASP)1, 2 is a declarative programming paradigm based on logic programming under the answer set semantics.
A logic program P is a set of rules of the form

c ← a1, . . . , am, not b1, . . . , not bn

(1)

where c, ai’s, and bj’s are atoms of a propositional language∗ and not represents (default) negation. Intuitively,
a rule states that if all ai are believed to be true and none of the bj is believed to be true then c will be true. For
a rule r, r+ and r− denote the sets {a1, . . . , am} and {b1, . . . , bn}, respectively. We write head(r) and body(r)
to denote c and the right side of a rule r. Both the head and the body or a rule r can be empty; when the body
is empty, the rule is called a fact; when the head is empty, it is a constraint. We use H to denote the Herbrand
base of a logic program P , which is the set of all ground atoms in P .

Let P be a program. An interpretation I of P is a subset of H. I satisﬁes an atom a (I |= a) if a ∈ I. The
body of a rule r is satisﬁed by I if r+ ⊆ I and r− ∩ I = ∅. A rule r is satisﬁed by I if I |= head(r) or I (cid:54)|= body(r).
I is a model of P if it satisﬁes all rules in P .

For an interpretation I and a program P , the reduct of P w.r.t. I (denoted by P I ) is the program obtained
from P by deleting (i) each rule r such that r− ∩ I (cid:54)= ∅, and (ii) all elements of the form not a in the bodies of
the remaining rules. Given an interpretation I, observe that the program P I is a program with no occurrences
of not a. An interpretation I is an answer set of P if I is the least model (w.r.t. ⊆) of P I .3 Answer sets of logic
programs can be computed using eﬃcient and scalable answer set solvers, such as clingo.4

We illustrate the concepts of answer set programming by showing how the 3-coloring problem of a undirected
graph G can be solved using ASP. Let the three colors be red (r), blue (b), and green (g), and the vertices of G
be 0, 1, . . . , n. Let P (G) be the program consisting of

• the set of atoms edge(u, v) and edge(v, u) for every pair of connected vertices u, v in G,

• for each vertex u of G, three rules stating that u must be assigned one of the colors red, blue, or green

(colored(x, c) denotes that the node x is colored with the color c):

colored(u, g) ← not colored(u, b), not colored(u, r)

colored(u, r) ← not colored(u, b), not colored(u, g)

colored(u, b) ← not colored(u, r), not colored(u, g)

and

• for each edge (u, v) of G, three rules representing the constraint that u and v must have diﬀerent color:

← colored(u, r), colored(v, r), edge(u, v)

← colored(u, b), colored(v, b), edge(u, v)

← colored(u, g), colored(v, g), edge(u, v)

It can be shown that for each graph G, (i) P (G) does not have answer sets iﬀ the 3-coloring problem of G does
not have a solution; and (ii) if P (G) has solutions, then each answer set of P (G) corresponds to a solution of
the 3-coloring problem of G and vice versa.

∗For simplicity, we often use ﬁrst order logic atoms, as a representation of all of their ground instantiations.

2.2 Properties of ASP

Given a program P and an answer set A, the following properties hold:

1. If c ∈ A, there exists a rule r in P such that

• head(r) = c;
• r+ ⊆ A; and,
• r− ∩ A = ∅

For such a rule r, we deﬁne support(c, r) = {p | p ∈ A ∧ p ∈ r+} ∪ {∼ n | n /∈ A ∧ n ∈ r−} and refer to this
set as a supported set of c for rule r.

2. If c /∈ A, for every rules r such that head(r) = c, then

• r+ \ A (cid:54)= ∅; or,
• r− ∩ A (cid:54)= ∅

For such a rule r, we deﬁne support(∼ c, r) ∈ {{p} | p ∈ A ∧ p ∈ r−} ∪ {{∼ n} | n /∈ A ∧ n ∈ r+} and refer
to it as a supported set of ∼ c for rule r.

2.3 Explanation Graph
We rely on the notion of an oﬀ-line justiﬁcation introduced by5 as an explanation of an atom a given an answer
set A of a program P . N AN T (P ) = {a | a ∈ r− ∧ r ∈ P } is the set of all negation atoms in P . Let C(P ) denote
the set of cautious consequences of P , i.e., C(P ) = C + ∪ C − where C + is the set of atoms belonging to all answer
sets of P and C − is the set of atoms which do not belong to any answer set of P . A set of atoms U such that
U ⊆ N AN T (P )\(A∪C(P )) is called a set of assumptions with respect to A if A = C(P \{r ∈ P | head(r) ∈ U }).

Intuitively, given an answer set A of a program P , an atom a ∈ A (a (cid:54)∈ A) is considered to be true (false)
given A. An oﬀ-line justiﬁcation for an atom a presents a possible reason for the truth value of a, i.e., it answers
the question “why a ∈ A (or (cid:54)∈ A)? ”. If a is true in A, an oﬀ-line justiﬁcation of a represents a derivation of a
from the set of assumptions U and the set of facts in P . If a is false in A, an oﬀ-line justiﬁcation encodes the
reason why it is not supported by A, which can be that it is assumed to be false (being an assumption in U )
or there exists no possible derivation of it given A. An oﬀ-line justiﬁcation of a is analogous to the well-known
SLDNF tree in that it represents the derivation for a. The key diﬀerence between these two notions is that an
oﬀ-line justiﬁcation might contain a cycle consisting of negative atoms, i.e., atoms not belonging to A. For this
reason, a justiﬁcation is represented as an explanation graph, deﬁned as follows.

Definition 2.1 (Explanation Graph). Let us consider a program P , an answer set A, and a set of
assumptions U with respect to A. Let N = {x | x ∈ A} ∪ {∼ x | x (cid:54)∈ A} ∪ {(cid:62), ⊥, assume} where (cid:62) and ⊥
represent true and false, respectively. An explanation graph of an atom a occurring in P is a ﬁnite labeled and
directed graph DGa = (Na, Ea) with Na ⊆ N and Ea ⊆ Na × Na × {+, −, ◦}, where (x, y, z) ∈ Ea represents a
link from x to y with the label z, and satisﬁes the following conditions:

• if a ∈ A then a ∈ Na and every node in Na must be reachable from a;

• if a (cid:54)∈ A then ∼ a ∈ Na and every node in Na must be reachable from ∼ a;

• if (x, (cid:62), +) ∈ Ea then x is a fact in P ;

• if (∼ x, assume, ◦) ∈ Ea then x ∈ U ;

• if (∼ x, ⊥, +) ∈ Ea then there exists no rule in P whose head is x;

• there exists no x, y such that ((cid:62), x, y) ∈ Ea, (⊥, x, y) ∈ Ea, or (assume, x, y) ∈ Ea;

• for every x ∈ Na ∩ A and x is not a fact in P ,

– there exists no y ∈ Na ∩ A such that (x, y, −) or (x, y, ◦) belong to Ea;
– there exists no ∼ y ∈ Na ∩ {∼ u | u (cid:54)∈ A} such that (x, ∼ y, +) or (x, ∼ y, ◦) belong to Ea;
– if X + = {a | (x, a, +) ∈ Ea} and X − = {a | (x, ∼ a, −) ∈ Ea} then X + ⊆ A, X − ∩ A = ∅, and there

is a rule r ∈ P whose head is x such that r+ = X + and r− = X −; and

– DGa contains no cycle containing x.

• for every ∼ x ∈ Na ∩ {∼ u | u (cid:54)∈ A} and x (cid:54)∈ U ,

– there exists no y ∈ Na ∩ A such that (∼ x, y, +) or (∼ x, y, ◦) belong to Ea;
– there exists no ∼ y ∈ Na ∩ {∼ u | u (cid:54)∈ A} such that (∼ x, ∼ y, −) or (∼ x, ∼ y, ◦) belong to Ea;
– if X + = {a | (∼ x, a, −) ∈ Ea} and X − = {a | (∼ x, ∼ a, +) ∈ Ea} then X + ⊆ A, X − ∩ A = ∅, and

for every rule r ∈ P whose head is x we have that r+ ∩ X − (cid:54)= ∅ or r− ∩ X + (cid:54)= ∅; and

– any cycle containing ∼ x in DGa contains only nodes in Na ∩ {∼ u | u (cid:54)∈ A}.

Given an explanation graph G and a node x in G, if x is an atom a then the nodes directly connected to
a—the nodes y such that (x, y, ) is an edge in G—represent a rule whose head is x and whose body is satisﬁed by
A. If x is ∼ x for some atom x, then the set of nodes directly connected to ∼ x represents a set of atoms who truth
values in A are such to make each rule whose head is x unsatisﬁed by A. In other words, the direct connections
with a node represent the support for the node being in (or not in) the answer set under consideration. We refer
the readers to the paper by Pontelli et al.5 for an in-depth discussion of properties of oﬀ-line justiﬁcations and
the proof of existence of such justiﬁcations for every atom in the program.

Given a program P , an answer set A of P , and an atom a occurring in P , explanation graphs for a can be
generated by (i ) determining the set of assumptions U with respect to A; (ii ) generating explanation graphs for
a using P , A, and U following its deﬁnition.

Fig. 2 illustrates the above deﬁnitions for the graph coloring program, given the graph G = ({1, 2, 3, 4}, {(1, 2),
(1, 3), (2, 3), (2, 4), (3, 4)}) and a solution on the left, represented by the answer set containing {colored(1, red),
colored(2, blue), colored(3, green), colored(4, red)}.

Figure 2. A solution to the 3-coloring problem for a graph on the (left), an explanation for positive atom colored(1, red)
(middle), and an explanation for negative atom colored(1, blue) (middle)

For our computation in the next section, we deﬁne a derivation path of an atom a as follows.

Definition 2.2 (Derivation Path). Given a program P , an answer set A, a derivation path of an atom a
is a directed graph Da = (Na, Ea) where Na ⊆ {x | x ∈ A} ∪ {∼ x | x (cid:54)∈ A} ∪ {(cid:62), ⊥} and Ea ⊆ Na × Na × {+, −},
where (x, y, z) ∈ Ea represents a link from x to y with the label z, and satisﬁes the following conditions:

• if {(∼ x, ⊥, +) ∈ Ea} then there exists no rule in P whose head is x;

1234+colored(1,red)~colored(1,blue)~colored(1,green)--~colored(1,blue)assumeoassumeoo• there exists no x, y such that ((cid:62), x, y) ∈ Ea and (⊥, x, y) ∈ Ea;
• for every x ∈ Na ∩ A and x is not a fact in P ,

– there exists no y ∈ Na ∩ A such that (x, y, −);
– there exists no ∼ y ∈ Na ∩ {∼ u | u (cid:54)∈ A} such that (x, ∼ y, +) belongs to Ea;
– if X + = {a(cid:48) | (x, a(cid:48), +) ∈ Ea} and X − = {a(cid:48) | (x, ∼ a(cid:48), −) ∈ Ea} then X + ⊆ A and X − ∩ A = ∅ and

there is a rule r whose head is x in P such that r+ = X + and r− = X −;

– Da contains no cycle containing x.

• for every ∼ x ∈ Na ∩ {∼ u | u (cid:54)∈ A},

– there exists no y ∈ Na ∩ A such that (∼ x, y, +) belongs to Ea;
– there exists no ∼ y ∈ Na ∩ {∼ u | u (cid:54)∈ A} such that (∼ x, ∼ y, −) belongs to Ea;
– if X + = {a(cid:48) | (∼ x, a(cid:48), −) ∈ Ea} and X − = {a(cid:48) | (∼ x, ∼ a(cid:48), +) ∈ Ea} then X + ⊆ A and X − ∩ A = ∅

and for every rule r whose head is x in P we have that r+ ∩ X − (cid:54)= ∅ or r− ∩ X + (cid:54)= ∅;

– any cycle containing ∼ x in Da contains only node in Na ∩ {∼ u | u (cid:54)∈ A}.

Note that derivation path is diﬀerent from the explanation graph. The purpose of derivation graph is to compute
U in Section 3.2, in order to develop the explanation graphs in Section 3.3.

3. exp(ASP): A SYSTEM FOR GENERATING EXPLANATIONS FOR
ASP-PROGRAMS

In this section, we describe the algorithm implemented in the system exp(ASP) that generates explanations for
ASP-programs (Section 3.1, 3.2, and 3.3). Given a program P , the preprocessing steps in Section 3.1 are used to
obtain simpliﬁed ground rules from the answer set solver clingo and compute support sets for each rule. Given
an answer set A of program P , the algorithms in Section 3.2 compute minimal assumption sets with respect to
A. Algorithms in Section 3.3 use a minimal assumption set obtained from Section 3.2 to provide the explanation
graphs for an atom in P . For simplicity of the presentation, the discussion in this section assumes an arbitrary
but ﬁxed program P , unless otherwise speciﬁed.

3.1 Preprocessing

In this development, clingo is utilized as an oﬀ-the-shelf tool. Given a program P , simpliﬁed ground rules of P
are computed via the combination of the --text and --keep-facts options and an intermediate language aspif .6
First, by directly utilizing the --text and --keep-facts options, plain text format are obtained. Then, a set of
facts F is extracted from such plain text. Next, each fact f ∈ F is modiﬁed to become an external statement
(#external f ) of the program. Facts in P are replaced by the external statements, creating a modiﬁed program
P (cid:48). By doing this, we prevent clingo from simplifying rules when computing the aspif representation of P (cid:48) via
its grounder, gringo.7 Let us illustrate this process using Example 1. The aspif statements are given in Listing
1.
Example 1. Let us consider the program P1 containing the rules:

(r1) a
(r2) k
(r3) c

:− k, not b.
:− e, not b.
:− a, b.

The program P (cid:48)

1 is as follows:

(r1) a
(r2) k
(r3) c

:− k, not b.
:− e, not b.
:− a, b.

(r4) b
(r5) c

not a.

:−
:− k.

(r6) f
(r7) e.

:− e, not k, not c.

(r4) b
(r5) c

not a.

:−
:− k.

(r6) f
(r7) #external

:− e, not k, not c.
e.

A rule of the form (1) in Sec. 2.1, in aspif format, is of the form:

where H describes the head of the rule, starting with 0, and has the form:

1 H B

0 n ic

where n = {0, 1} is the number of head atoms and ic is an integer identifying the atom c. If the head is empty,
n = 0 and ic = 0.

The body of the rule is described by B and has the form:

0 k ia1 ... iam − ib1 ... − ibn

where iai’s and ibi’s are the integer identiﬁers of atoms ai’s and bi’s, respectively, and k = n + m. For instance,
in Listing 1, line 3 represents rule r4.

The lines starting with 4 represent the mapping of atoms to their unique integer identiﬁers and have the

form:

4 m a 1 i

where m is the length in bytes of atom a and i is a’s identiﬁer. For instance, line 9 in Listing 1 shows that 2 is
an integer identifying atom b.

Because we had changed facts to external statements in the modiﬁed program, facts are represented in lines

starting with 5 and have the form:

where i is an integer identiﬁer of a fact. For instance, Line 2 in Listing 1 (and Line 12) shows that atom e is
associated with the integer identifying 1 is a fact.

Listing 1. Representing P (cid:48)

1 in aspif format

5 i 2

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

asp 1 0 0
5 1 2
1 0 1 2 0 1 -3
1 0 1 4 0 2 -2 1
1 0 1 3 0 2 -2 4
1 0 1 5 0 2 2 3
1 0 1 5 0 1 4
1 0 1 6 0 3 -5 -4 1
4 1 b 1 2
4 1 k 1 4
4 1 a 1 3
4 1 e 1 1
4 1 c 1 5
4 1 f 1 6
0

We implement exp(ASP) using Python. Thus, from now on, whenever we mention a dictionary, we refer to
a Python data structure dictionary. For a dictionary D, we use D.keys() and D[k] to the set of keys in D and
the value associated with k in D, respectively.

We use the aspif representation of the modiﬁed program P (cid:48) to create a dictionary DP = {h (cid:55)→ B | h ∈
H, B = {body(r) | r ∈ P, head(r) = h}}. For each rule r, body(r) consists of r+ and r−. DP is then used as
an input in Algorithm 1 to compute the dictionary EP = {k (cid:55)→ V | k ∈ {a | a ∈ A} ∪ {∼ a | a /∈ A}, V =
{support(k, r) | r ∈ P }}. Algorithm 1 ﬁrst checks the truth value of atom a ∈ H (recall that H is the Herbrand
base of the given program). If a is true w.r.t A (Line 4), the function true atom processing is used to compute

Algorithm 1: preprocessing(D, F, A)

Input: D - dictionary of rules (this is DP ), F - facts of the program, A - an answer set

1 E ← {∅ (cid:55)→ ∅}
2 for a ∈ H do
3

bodies ← D[a]
if a ∈ A then
E[a] = []
for body ∈ bodies do

// Initialize an empty dictionary E: E.key() = ∅

// Initialize an empty list for the value stored with a in E

E ← true atoms processing(a, r+, r−, E, A, F )

else

E[∼ a] = []
for body ∈ bodies do

// Initialize an empty list for the value stored with ∼ a in E

E ← f alse atoms processing(a, r+, r−, E, A)

4

5

6

7

8

9

10

11

17

18

19

28

29

30

31

32

12 return E
13
14 function true atoms processing(a, r+, r−, E, A, F )
15 if r+ ⊆ A ∧ r− ∩ A = ∅ then
16

S ← {p | p ∈ r+} ∪ {∼ n | n ∈ r−}
if a ∈ F ∧ r+ = ∅ ∧ r− = ∅ then

S ← {“T”}

Append S to E[a]

20 return E
21
22 function f alse atoms processing(a, r+, r−, E, A)
23 L ← [{{∼ p} | p ∈ r+ ∧ p /∈ A} ∪ {{n} | n ∈ r− ∧ n ∈ A}]
24 if ∼ a /∈ E.keys() then
E[∼ a] ← L
25

26 else
27

T = []
for s ∈ L do

for e ∈ E[∼ a] do
t ← s ∪ e
Append t to a list T

E[∼ a] ← T

// Initialize an empty list T

33 return E

the supported set for a, following the ﬁrst property in Sect. 2.2. Otherwise, the function false atom processing
is used to compute the supported set for a, following the second property in Sect. 2.2.
Example 2. Let us reconsider the program P1 of Example 1 which has an answer set A = {b, f, e}. The output
of Algorithm 1, dictionary EP1, is as follows:

E = {

f : [{∼k, ∼c, e }]
b : [{∼a }]

∼c : [{∼k, ∼a }]
∼k : [{ b }]
∼a : [{∼k } , { b }]

e : [{ T }]

}

As can be seen from Example 2, EP1 contains supported sets for the keys in EP1. For instance, atom e in rule
r2 is not in any supported set for atom b, so e does not appear in EP1[b]’s value.

We will also use the aspif representation to compute N AN T (P ) (Section 2.3). Note that each negative atom
is represented by a negative integer whose absolute value is in the symbol table. For instance, Line 3 in Listing
1 shows that the atom associated with integer 3 is a negative atom, and Line 11 in Listing 1 shows that 3 is
integer identifying atom a; thus, for P1, we have a ∈ N AN T (P1), and N AN T (P1) = {a, b, c, k}.

3.2 Minimal Assumption Set
In this section, we compute all minimal assumption sets U w.r.t A that satisfy conditions of an assumption set
in Sect. 2.3. For every u ∈ U , u is false in A and does not belong to the well-founded model and it must be
assumed to be false to guarantee that cycles in the explanation graphs are acceptable.5

Algorithm 2 shows the pseudo-code for computing T U which consists of all minimal assumption sets U .
The cautious consequence C(P ) is computed using clingo. N AN T (P ) and E are obtained in Sec. 3.1. First,
T AP (A), called the tentative assumption set, is computed in Line 2. It is the set of negative atoms that are false
in A and do not belong to C(P ).

T and DA are computed by the function derivation path (Line 3) where T = T AP (A) \ T (cid:48). T is the set
of atoms from T AP (A) and do not belong to T (cid:48) which is computed by the for-loop (Line 12–26). For each
x ∈ T (cid:48), there exists one derivation path of x that either depends on other atoms in T AP (A) or satisﬁes the cycle
conditions in the deﬁnition of explanation graph. Intuitively, the atoms in T must be assumed to be false and
DA contains the dependencies among atoms in T AP (A).

D(cid:48) is computed in Algorithm 3. It checks whether a derivation path of an atom a is acceptable and updates
the set of dependency atoms in the tentative assumption set for a. A derivation path is unacceptable if it has a
cycle containing true atoms. This is veriﬁed by Algorithm 4.

The computation of sets of minimal atoms that break all cycles in the tentative assumption set is then done

by the function dependency assumption(DA) (Lines 30–33).
Example 3. Let use reconsider the Examples 1 and 2.

• For the program P1, we have:

T AP (A) = {c, a, k}
• As can be seen from E in Example 2, c, a and k derive from other atoms in {k, a}, {k} and {a}, respectively.

Also, there is a cycle associated to k and a. Thus, we have

T = ∅
D = {{a}}, {k}}

• Two minimal assumption sets are as follows:

U1 = {a}
U2 = {k}

3.3 ASP-based explanation graph
In this section, we utilize the dictionary EP and a minimal assumption set U to provide the explanation graphs
of an atom a in the program P . Algorithm 5 shows the pseudo-code for computing the explanation graphs for
a. Elements in u ∈ U is {“assume”} (Lines 1–2). Supported sets of a are then computed and assigned to L
(Line 4). Lines 5–9 create M , a collection of dictionaries of derivation paths for a. It is then used for computing
explanation graphs for a via the function get graph (Lines 17–40).
If the derivation graph is an explanation
graph, it will be displayed as a graph on the screen.
Example 4. For program P1 in Example 1, the explanation graphs of f w.r.t U1 and U2 are shown on the left
and right of Fig. 3, respectively.

As can be seen from Fig. 3, a justiﬁcation for f depends negatively on c and k, and positively on e. Based on
the minimal assumption set we choose, we receive two diﬀerent explanation graphs for f . The left ﬁgure contains
b in its graph while the right ﬁgure does not.

Algorithm 2: assumption f unc(C(P ), N AN T (P ), E)

Input: C(P) - A cautious consequence of a program P , NANT(P) - A set of negative atoms in P , E - A

dictionary computed in Algorithm 1.

1 T U = ∅
2 T AP (A) = {a | a ∈ N AN T (P ) ∧ a /∈ A ∧ a /∈ C(P )}
3 (T, DA) = derivation path(T AP (A), E)
4 D = dependency assumption(DA)
5 for M ∈ D do
U ← M ∪ T
6
T U ← T U ∪ {U }

7

// Initialize an empty set T U

8 return T U
9
10 function derivation path(T A, E)
11 DA ← {∅ (cid:55)→ ∅} and T (cid:48) ← ∅
12 for a ∈ T A do
13

O ← T A \ {a}
L ← E[∼ a]
for S ∈ L do

// Initialize an empty dictionary DA and an empty set T (cid:48)

14

15

16

17

18

19

20

21

22

23

24

25

26

Ea ← {∅ (cid:55)→ ∅}
Ea[∼ a] ← [S]
Ea ← get connection(S, E, Ea)
M ← {Ni | Ni = k (cid:55)→ V | V ∈ Ea[k] ∧ ∀k ∈ Ea.keys(), k ∈ Ni.keys() ∧ (k (cid:55)→ V1 ∈ Ni ∧ k (cid:55)→ V2 ∈
Ni) ⇒ V1 = V2}
for Ni ∈ M do

// Initialize an empty dictionary Ea

V ← [], R ← ∅, C = {∅ (cid:55)→ ∅} and D = ∅
(saf e, D(cid:48)) ← check derivation path(∼ a, Ni, O, V, R, C, D)
if saf e = T rue then
T (cid:48) ← T (cid:48) ∪ {a}
DA[a] ← D(cid:48)
goto line 12

27 T ← T A \ T (cid:48)
28 return (T, DA)
29
30 function dependency assumption(DA)
31 DC ← {J | J = {u1, u2, ..., un | ui ∈ DA.keys() ∧ ui+1 ∈ DA[ui<n]} ∧ u1 ∈ D[un]}
(cid:12) DC (cid:12)
32 B ← {{j1, ..., jn} | (j1, ..., jn) ∈ J1 × .. × Jn ∧ n =(cid:12)
(cid:12) C (cid:12)
33 min(B) ← {M | ∀C ∈ B, C (cid:54)= M =⇒ (cid:12)
(cid:12)}
34 return min(B)
35
36 function get connection(S, E, Ea)
37 for e ∈ S do
38

if e /∈ Ea.keys() ∧ e ∈ E.keys() then

(cid:12) ∧Ji ∈ DC}

(cid:12) M (cid:12)

(cid:12)≤(cid:12)

39

40

41

Ea[e] ← E[e]
for Se ∈ E[e] do

Ea ← get connection(Se, E, Ea)

42 return Ea

Algorithm 3: check derivation path(k, N, O, V, R, C, Da)

1 I ← ∅
2 if k ∈ N.keys() then
3

I ← N [k]

// Initialize an empty set I

4 V ← V ∪ {k}
5 Append k to list R
6 for i ∈ I do
C[k] ← i
7
j ← i.remove(i.index(0))
if i.index(0) = “ ∼ ” ∧ j ∈ O then

8

9

10

11

12

13

14

15

16

17

18

19

20

21

Da ← Da ∪ {j}

else

if i /∈ V then

if check derivation path(i, N, O, V, R, C, Da)[0] = F alse then

return (False,Da)

else

if i ∈ R then

if i.index(0) = “ ∼ ” then

if cycle identif ication(C, i, i) = F alse then

return (False,Da)

else

return (False,Da)

22 l = R.pop()
23 if l ∈ C.keys() then
C.pop(l)
24

25 return (True,Da)

Algorithm 4: cycle identif ication(C, s, e)

1 v ← C[s]
2 if v (cid:54)= e ∧ s.index(0) = “ ∼ ” ∧ v.index(0) = “ ∼ ” then
3

return cycle identif ication(C, v, e)

4 if v = e ∧ s.index(0) = “ ∼ ” ∧ v.index(0) = “ ∼ ” then
5

return True

6 return False

4. ILLUSTRATION

We have validated a prototype implementation of this system on a number of ASP programs, ranging from
simple benchmarks to complex ASP applications (e.g., we used it to interpret the responses produced by a
diagnosis system modeling the Three Mile Island disaster8). In this paper, we illustrate the use of exp(ASP) in
two examples from the literature.
Example 5. Consider the following problem, which represents a variant of the agent problem described by Garcia
et al.9 An agent, named Bob, wants to make plan for the upcoming week. Bob has two choices: stay home or go
to the opera. Bob will stay at home on Monday. He will also stay at home with his best friend because she has a

7

8

9

10

11

12

13

14

15

25

26

27

28

29

30

31

32

33

34

35

36

Algorithm 5: explanation graph(a, E, U )

E[∼ u] ← [“assume”]

1 for u ∈ U do
2
3 a(cid:48) ← a if a ∈ A and a(cid:48) ←∼ a if a /∈ A
4 L ← E[a(cid:48)]
5 for S ∈ L do
6

Ea ← {∅ (cid:55)→ ∅}
Ea[a(cid:48)] ← [S]
Ea ← get connection(S, E, Ea)
M ← {Ni | Ni = k (cid:55)→ V | V ∈ Ea[k] ∧ ∀k ∈ Ea.keys(), k ∈ Ni.keys() ∧ (k (cid:55)→ V1 ∈ Ni ∧ k (cid:55)→ V2 ∈
Ni) =⇒ V1 = V2}
for Ni ∈ M do

// Initialize an empty dictionary Ea

V ← [], R ← ∅, C ← {∅ (cid:55)→ ∅}, and an empty graph G ← (∅, ∅)
Add node a(cid:48) to G
graph ← get graph(a(cid:48), G, Ni, V, R, C)
if graph (cid:54)= F alse then

Draw graph

16
17 function get graph(k, G, N, V, R, C)
18 I ← ∅
19 if k ∈ N.keys() then
I ← N [k]
20

// Initialize an empty set I

21 V ← V ∪ {k}
22 Append k to list R
23 for i ∈ I do
24

Add node i to G
e ← (k, i, sign)
Add edge e to G
if i /∈ V then

if get graph(i, G, N, V, R, C) = F alse then

return False

else

if i ∈ R then

if i.index(0) = “ ∼ ” then

if cycle identif ication(C, i, i) = F alse then

return False

else

return False

37 l = R.pop()
38 if l ∈ C.keys() then
C.pop(l)
39

40 return G

baby, and the friend comes this Tuesday. The situation can be encoded as follows:

day(monday).
day(thursday).
day(sunday).
opera(D)
home(D)
home(D)

day(tuesday).
day(friday).
home(monday).

day(wednesday).
day(saturday).
baby(tuesday).

:− day(D), not home(D).
:− day(D), not opera(D).
:− day(D), baby(D).

Figure 3. Explanation graph of a w.r.t U1 (left) and U2 (right)

The above program has 32 answer sets, i.e., Bob has 32 possible plans. Let us consider the answer set

A = {day(monday), day(tuesday), day(wednesday), day(thursday), day(f riday), day(saturday), day(sunday),
home(monday), home(tuesday), baby(tuesday), opera(wednesday), opera(thursday), opera(f riday),
opera(saturday), opera(sunday)}.

Some explanation graphs w.r.t A are displayed below:

Figure 4. Explanation of home(monday) (left), home(tuesday) (middle) and opera(f riday) (right)

• Fig. 4 (left) shows that Bob will stay at home on Monday because of the provided information in the

situation that home(monday) is a fact.

• Fig. 4 (middle) shows that Bob will stay at home on Tuesday because his best friend and her baby will come

to his house on Tuesday (baby(tuesday) is a fact).

• Fig. 4 (right) shows that Bob will go to opera on Friday because it is assumed to be false that he will not

stay at home on Friday.

Example 6. Consider the problem of decision making in an ophthalmologist diagnostic system.10 We need to
provide a suggestion to Peter. Peter is short-sighted. He is afraid to touch his eyes. He is a student and likes
sport. The information about Peter is encoded by the following facts.

Other information about Peter is given by the following program:

shortSighted.
student.

afraidToTouchEyes.
likesSports.

tightOnMoney
caresPracticality
correctiveLens
laserSurgery
glasses

:− student, not richParents.
:− likesSports.
:− shortSighted, not laserSurgery.
:− shortSighted, not tightOnMoney, not correctiveLens.
:− correctiveLens, not caresPracticality,

not contactLens.

contactLens

:− correctiveLens, not afraidToTouchEyes,

not longSighted, not glasses.

intraocularLens

:− correctiveLens, not glasses, not contactLens.

This program, together with the facts, has an answer set

A = {tightOnM oney, shortSighted, caresP racticality, af raidT oT ouchEyes, student, likesSports,

correctiveLens, intraocularLens}.

Therefore, intraocularLens is suggested to Peter. The explanation graph for this recommendation is depicted in
Fig. 5.

Figure 5. Explanation of intraocularLens

As can be seen from Fig. 5, intraocularLens is in the answer set because:

• The truth value of correctiveLens is True, because

– It has information that Peter is short-sighted (shortSighted is a fact).
– Negatively it depends on the truth value of laserSurgery which is False. This latter truth value derives
from the fact that laserSurgery depends negatively on the truth value of tightOnM oney which is True.
This is because it has information that Peter is student (student is a fact).

• The truth value of contactLens is False, because

– Negatively it depends on the truth value of af raidT oT ouchEyes which is a fact.

• The truth value of glasses is False, because

– Negatively it depends on the truth value of caresP racticality which is True, because

∗ It has information that Peter likes sports (likeSports is a fact).

5. CONCLUSION

In this paper, we described an explanation generation system for ASP programs, exp(ASP), and illustrate its
use in some examples. Our future goal is to use the proposed system in explainable planning with the full cycle
of four steps (1)-(4) in Fig. 1.

ACKNOWLEDGMENTS

This research is partially supported by NSF grants 1757207, 1914635, and 1812619/26. Portions of this publi-
cation and research eﬀort are made possible through the help and support of NIST via cooperative agreement
70NANB19H102. The views and conclusions contained in this document are those of the authors and should not
be interpreted as representing the oﬃcial policies, either expressed or implied, of the sponsoring organizations,
agencies, or the U.S. government.

REFERENCES
[1] Marek, V. and Truszczy´nski, M., “Stable models and an alternative logic programming paradigm,” in [The

Logic Programming Paradigm: a 25-year Perspective], 375–398 (1999).

[2] Niemel¨a, I., “Logic programming with stable model semantics as a constraint programming paradigm,”

Annals of Mathematics and Artiﬁcial Intelligence 25(3,4), 241–273 (1999).

[3] Gelfond, M. and Lifschitz, V., “Logic programs with classical negation,” in [Logic Programming: Proceed-

ings of the Seventh International Conference], Warren, D. and Szeredi, P., eds., 579–597 (1990).

[4] Gebser, M., Kaufmann, B., Neumann, A., and Schaub, T., “clasp: A conﬂict-driven answer set solver,” in
[Proceedings of the Ninth International Conference on Logic Programming and Nonmonotonic Reasoning
(LPNMR’07) ], Baral, C., Brewka, G., and Schlipf, J., eds., Lecture Notes in Artiﬁcial Intelligence 4483,
260–265, Springer-Verlag (2007).

[5] Pontelli, E., Son, T., and El-Khatib, O., “Justiﬁcations for logic programs under answer set semantics,”

TPLP 9(1), 1–56 (2009).

[6] Kaminski, R., Schaub, T., and Wanko, P., “A tutorial on hybrid answer set solving with clingo,” in [Rea-

soning Web International Summer School], 167–203, Springer (2017).

[7] Gebser, M., Schaub, T., and Thiele, S., “Gringo: A new grounder for answer set programming,” in [Inter-
national Conference on Logic Programming and Nonmonotonic Reasoning ], 266–271, Springer (2007).
[8] Hanna, B. N., T Trieu, L. L., Son, T. C., and Dinh, N. T., “An application of asp in nuclear engineering: Ex-
plaining the three mile island nuclear accident scenario,” Theory and Practice of Logic Programming 20(6),
926–941 (2020).

[9] Garc´ıa, A. J., Ches˜nevar, C. I., Rotstein, N. D., and Simari, G. R., “Formalizing dialectical explanation
support for argument-based reasoning in knowledge-based systems,” Expert Systems with Applications 40(8),
3233–3247 (2013).

[10] Schulz, C. and Toni, F., “Justifying answer sets using argumentation,” Theory and Practice of Logic Pro-

gramming 16(1), 59–110 (2016).

