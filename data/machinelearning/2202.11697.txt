Stochastic Coded Ofﬂoading Scheme for Unmanned
Aerial Vehicle-Assisted Edge Computing

Wei Chong Ng, Wei Yang Bryan Lim, Zehui Xiong, Dusit Niyato, IEEE Fellow, Chunyan Miao,

Zhu Han, IEEE Fellow, and Dong In Kim, IEEE Fellow

1

2
2
0
2

b
e
F
1
1

]
T
I
.
s
c
[

1
v
7
9
6
1
1
.
2
0
2
2
:
v
i
X
r
a

Abstract—Unmanned aerial vehicles (UAVs) have gained wide
research interests due to their technological advancement and
high mobility. The UAVs are equipped with increasingly advanced
capabilities to run computationally intensive applications enabled
by machine learning techniques. However, because of both energy
and computation constraints, the UAVs face issues hovering in the
sky while performing computation due to weather uncertainty.
To overcome the computation constraints, the UAVs can partially
or fully ofﬂoad their computation tasks to the edge servers.
In ordinary computation ofﬂoading operations, the UAVs can
retrieve the result from the returned output. Nevertheless,
if
the UAVs are unable to retrieve the entire result from the
edge servers,
i.e., straggling edge servers, this operation will
fail. In this paper, we propose a coded distributed computing
approach for computation ofﬂoading to mitigate straggling edge
servers. The UAVs can retrieve the returned result when the
number of returned copies is greater than or equal to the
recovery threshold. There is a shortfall if the returned copies
are less than the recovery threshold. To minimize the cost of
the network, energy consumption by the UAVs, and prevent over
and under subscription of the resources, we devise a two-phase
Stochastic Coded Ofﬂoading Scheme (SCOS). In the ﬁrst phase,
the appropriate UAVs are allocated to the charging stations
amid weather uncertainty. In the second phase, we use the
z-stage Stochastic Integer Programming (SIP) to optimize the
number of computation subtasks ofﬂoaded and computed locally,
while taking into account the computation shortfall and demand
uncertainty. By using a real dataset, the simulation results show
that our proposed scheme is fully dynamic, and minimizes the
cost of the network and UAV energy consumption amid stochastic
uncertainties.

Index Terms—Unmanned Aerial Vehicles, Coded Distributed
Computing, Stochastic Integer Programming, Task Allocation,
Internet-of-Things

I. INTRODUCTION

Due to the rapid advancement of Internet of Things (IoT)
the number of wirelessly connected
enabled technologies,
devices is increasing exponentially [1] and generating huge

WC. Ng and WYB. Lim are with Alibaba Group and Alibaba-NTU Joint

Research Institute, Nanyang Technological University, Singapore

ZH. Xiong is with Singapore University of Technology and Design,

Singapore

D. Niyato is with School of Computer Science and Engineering, Nanyang

Technological University, Singapore.

C. Miao is with Joint NTU-UBC Research Centre of Excellence in
Active Living for the Elderly (LILY) and School of Computer Science and
Engineering, Nanyang Technological University, Singapore

Z. Han is with the Department of Electrical and Computer Engineering
in the University of Houston, Houston, TX 77004 USA, and also with the
Department of Computer Science and Engineering, Kyung Hee University,
Seoul, South Korea, 446-701.

D. I. Kim is with the Department of Electrical and Computer Engineering,

Sungkyunkwan University (SKKU), Suwon 16419, South Korea

amounts of data [2]. There are many new real-time appli-
cations enabled by wirelessly connected devices, such as
augmented/virtual reality [3] and smart cities [4] that are
delay-sensitive. For example, it is important to know the real-
time trafﬁc [5]/parking [6] information to regulate trafﬁc ﬂow.
The increase in wirelessly connected devices exerts a tremen-
dous burden on the wireless communication infrastructure.
For example, in many urban areas that are covered by dense
skyscrapers or when the end-users are in congested regions
or at high-speed vehicular network [7], the content in the
static roadside units (RSUs)/base stations (BSs) cannot be
successfully delivered to the end-users.

One solution is to deploy Unmanned Aerial Vehicles
(UAVs), also known as drones, to act as an airborne BS to
collect and process data from the terrestrial nodes [8, 9]. UAVs
are in different shapes and sizes, such as ﬁxed wings or multi-
rotors, and they can maintain a line-of-sight communication
with the end-users to provide a better quality of service (QoS).
Furthermore, UAVs can be ﬂexibly deployed to inaccessible
terrains or disaster relief operations, e.g., due to their size
and mobility. Moreover, wireless connections can be estab-
lished without a ﬁxed infrastructure to extend communication
coverage. However, apart from all those beneﬁts, UAVs are
faced with energy constraints [10], and thus,
they cannot
complete their computation tasks if the energy utilization is
not scheduled correctly.

In this paper, we consider a network contains various
UAVs, mobile charging stations, and edge servers that are
attached to the BSs to run applications such as trafﬁc monitor-
ing [11, 12]. The UAVs are required to perform computation,
e.g., distributed matrix multiplication, as it is central to many
modern computing applications, including machine learning
and scientiﬁc computing [13, 14] in applications such as
post-disaster relief assistance [15] and crowd detection [16].
To alleviate some of the battery constraints of the UAVs,
the matrix multiplication can be ofﬂoaded to ground-based
edge servers for processing. The matrix multiplication in
the UAVs can be accelerated by scaling the multiplication
out across many distributed computing nodes in BSs or
edge servers [17] known as the workers. However, there is
a signiﬁcant performance bottleneck that is the latency in
waiting for the slowest workers, or “stragglers” to ﬁnish their
tasks [17]. Coded distributed computing (CDC) is introduced
to deal with stragglers in distributed high-dimensional matrix
multiplication. In CDC, the computation strategy for each
worker is carefully designed so that the UAV only needs to
wait for the fastest subset of workers before recovering the

 
 
 
 
 
 
output [17]. The minimum number of workers that the UAV
has to wait for to recover their results is known as the recovery
threshold.

Apart from using the CDC technique to mitigate stragglers,
there are three challenges in this network. The ﬁrst challenge is
the weather uncertainty. If the UAV is not properly allocated,
it may not withstand the strong wind if its engines are not
sufﬁciently powerful and the battery capacity is small. The
second challenge is demand uncertainty. Typically, the edge
servers in the BSs require the users to pay a subscription fee
in advance, e.g., monthly subscription, so that the users, i.e.,
UAVs, can use the ofﬂoading service. For instance, in matrix
multiplication, the size of the matrices, which is the demand,
is not always the same. If the actual matrix size is very small,
it will be cheaper to perform the local computation within the
UAV. Therefore, an uncertainty of actual demand can result in
an over-and under-subscription problem. The third challenge
is the shortfall uncertainty. Once after the UAVs are allocated,
they can perform full local computation, full ofﬂoad or partial
ofﬂoading. If the UAV decides to ofﬂoad the computation to
the edge servers in BSs, there is shortfall uncertainty that the
copies cannot be returned by any edge servers on time to the
UAV due to delays and link failure [18]. It means that the total
copies that the UAV has is less than the recovery threshold,
where each copy is a sub-portion of matrices involved in the
matrix multiplication operation. Therefore, the UAV has to
pay a correction cost to re-compute the number of shortfalls
locally or re-ofﬂoad them to match the recovery threshold.
This correction cost also involves a hovering cost as the UAVs
have to hover in the sky throughout the re-computation.

To overcome the three challenges mentioned above, we
introduce the Stochastic Coded Ofﬂoading Scheme (SCOS).
SCOS is a two-phase optimization scheme that adopts a CDC
technique to reduce the total cost of the network:

• Phase one (UAV type allocation): The application owner
will ﬁrst allocate the appropriate UAV to each mobile
charging station by considering the weather condition in
each time slot. This weather uncertainty is modeled by a
two-stage Stochastic Integer Programming (SIP) [19].
• Phase two (task allocation): There are a different num-
ber of time-frames/periods within the same time slot.
For example, when the morning is the ﬁrst time slot,
each hour is treated as one period, and task allocation
occurs in each period. Demand and shortfall are the two
uncertainties in task allocation. Instead of performing
local computation as the correction action to correct the
shortfalls, the same decision options are provided to the
UAVs until the z stage. Therefore, z-stage SIP is used
to model the demand and shortfall uncertainty in various
stages.

2

such as road trafﬁc prediction for autonomous vehicles in
which traditional approaches are ineffective due to their
rigid and ﬁxed deployment.

• Our SCOS is able to provide strategic scenario-based
decision that adapts well with the weather condition in
which the current solutions for UAVs are limited.

• The proposed SCOS can minimize the UAVs’ overall
costs by optimizing the task allocation. At the same time,
it can also minimize all the UAVs’ energy consumption.
The optimal solution is achieved by considering both the
demand and shortfall uncertainty.

• From the performance evaluation, we use the real data
to validate that SCOS is the optimal scheme when the
performance is compared with the Expected-Value For-
mulation (EVF) and random scheme.

The remainder of the paper is organized as follows: In
Section II, we review the related works. In Section III, we
present the system model. In Sections IV and V we formulate
the problem. We discuss and analyze the simulation result in
Section VI. Section VII concludes the paper.

II. RELATED WORK

A. UAV-enabled Mobile Edge Computing

Mobile edge computing (MEC) is regarded as a promising
solution to break through the computation limitation [20]. Due
to the ﬂexibility of the UAVs, the UAV is an ideal mobile
edge computing (MEC) platform for performing computing-
intensive tasks for ground users. Furthermore,
the UAV-
enabled MEC platform can be quickly deployed in emergency
response scenarios such as major trafﬁc accidents [21]. There
have been several works investigating the performance of
UAV-enabled MEC. In [22], the authors studied the UAV-
enabled MEC wireless powered system by considering both
partial and binary computation ofﬂoading modes. Instead of
using only the UAVs to act as the BSs, the authors in [23]
installed the MEC servers on both UAVs and stationary BSs
and presented a novel game-theoretic framework to serve
their users more efﬁciently. In [24], the authors consider both
computation bits and energy consumption to optimize the
computation efﬁciency in a multi-UAV MEC system. The
authors in [25] maximize the computation efﬁciency in partial
computation ofﬂoading mode.

However, different from the work mentioned above, in this
paper, we reduce energy consumption by adopting a CDC
technique to mitigate stragglers in the network. The UAVs
can recover the computed task if the returned tasks are greater
than or equal to the recovery threshold.

B. Stochastic Integer Programming

Extensive simulations are performed to evaluate the effective-
ness of SCOS. The results show that SCOS can minimize
the total cost and the UAVs’ energy consumption, especially
compared with the traditional deterministic baseline scheme.
The contributions of this paper are summarized as follows.

• The combination/integration yields fully dynamic on-
demand computing solutions for emerging applications

Stochastic integer programming is one of the important tools
to incorporate uncertainty in optimization problems [26]. SIP
can be applied to various ﬁelds to solve the optimization prob-
lem, e.g., production planning [27]. SIP assumes uncertain data
as random variables with known probability distributions, and
uses sampled values from this distribution to build a scenario
tree and optimize over the expectation [28]. SIP models can

correct the decisions using the concept of recourse. In this idea,
some decisions have to be made before realizing uncertain
parameters and some decisions after their realization [19].
SIP models can be formulated as the two-stage and multi-
stage problems. For the two-stage SIP, stage one decisions are
made ‘here and now’ at the beginning of the period without
the uncertainty realization. Stage two decisions are taken ‘wait
and see’ as the recourse action at the end of the period [29].
For example, in [30], the authors applied the two-stage SIP to
optimize the resource provisioning cost in cloud computing.
In the courier delivery serves, the authors in [31] uses the
two-stage SIP to plan an optimal vehicle delivery route. A
multi-stage SIP is a generalization of the two-stage SIP to
the sequential realization of uncertainties. For example, the
authors in [32] use a multi-stage SIP to optimize electricity
generation, storage, and transmission investments over a long
planning horizon. The recourse is the key concept behind SIP.
In this problem, weather, demand, and shortfall uncertainties
are constantly changing. Therefore, it is not possible to obtain
one decision that is suitable for all scenarios. With the idea of
recourse, corrective action can be made after a random event
has taken place. To the best of our knowledge, the application
of stochastic programming to coded distributed computing has
been less studied.

C. Coded Distributed Computing

Distributed computing has been widely adopted to perform
various computation tasks in different computing systems [33,
34]. Nevertheless, there are many design problems, i.e., com-
puting frameworks are vulnerable to uncertain disturbances,
such as node failures, communication congestion, and strag-
gler nodes [18]. Only in recent years, coding techniques gained
great success in improving the resilience of communication,
storage, and cache systems to uncertain system noises [35].
The authors have [36] ﬁrst presented the used of CDC to
speed up matrix multiplication and data shufﬂing. As a result,
a lot of the focus has been shifted to CDC. Followed by this
study, CDC has been explored in many different computation
problems, such as the gradients [37],
large matrix-matrix
multiplication [38], and multivariate polynomials [39].

There have been many other works to reduce the com-
munication load [40, 41] that are capable of improving the
overall communication time. The authors in [40] introduced
a Coded MapReduce framework to reduce the inter-server
communication load by a multiplicative factor that grows
linearly with the number of servers in the system. The authors
in [41] presented a technique known as Short-Dot to reduces
the cost of computation, storage, and communication. Besides
reducing the communication load, Short-Dot also tackles the
straggler issue. It completes the computation successfully by
ignoring the stragglers. More relevant to our study, the authors
in [13] proposed PolyDot codes, which is a uniﬁed view of
Matdot [13] and Polynomial codes [17] and leads to a trade-off
between recovery threshold and communication costs.

However, the works mentioned above mainly focus on the
designing of different CDC schemes. Therefore, in this paper,
we adopt PolyDot codes in the UAV network to alleviate the
straggler problem and improve network reliability.

3

Fig. 1. An illustrative example of the network with X = {1 : small, 2 :
medium, 3 : large}, 1 mobile charging station Y = 1, 20 edge servers
q1 = 20 attached to 1 BS F = 1.

III. SYSTEM MODEL

The overall system model is shown in Fig. 1. We model
the phase one (UAV type allocation) and phase two (task
allocation) to complete applications deﬁned by an application
owner, e.g., road trafﬁc monitoring [11] while considering
various uncertainties. Since each edge server has limited
computation capability, by deploy many edge servers at the
BS, we can use constraints (53) and (54) from Appendix A
to ensure that there will be enough computation resources to
support the computation required by each UAV. The following
sets are used to denote time slots, UAV types, mobile charging
stations, and BSs.

• T = {1, . . . , ¯t, . . . , ¯T } represents the different time slot.
• ¯P ¯t = {1, . . . , ¯p¯t, . . . , ¯P ¯t} represents the period in time

slot ¯t.

• The available UAVs are clustered into |X | types denoted
by set X , where X = {1, . . . , x, . . . , X}. Speciﬁcally,
the type refers to the battery capacity of the UAV in
ascending order. For example, X is the largest type UAV
that has the most battery and therefore leads to a longer
ﬂight time. The UAVs are owned by service provider ¯A1.
We use x¯t to denote when type x UAV is used in time
slot ¯t.

• Y = {1, . . . , y, . . . , Y } represents the UAV mobile
charging stations, owned by service provider ¯A1. All the
mobile charging stations are deployed at pre-speciﬁed
locations deﬁned by application owner ¯A3.

• Each of BS f is attached with qf number of edge servers.
F = {1, . . . , f, . . . , F } represents BSs with the height

Phase one UAV type allocationPhase two task allocationTake-off and landing pathORORSmall UAVMedium UAVLarge UAVUAVLocal computationOffloadBase StationContainsEdge server 1Edge server 20Mobile charging stationMobile charging stationWhen there is strong wind and the largest type UAV is not usedRedeployLarge UAVIn phase one,

of Hf . Edge servers are owned by service provider ¯A2.
the application owner ﬁrst considers the
weather uncertainty to pre-allocate the UAV types to each
mobile charging station, also known as a UAV depot. Once
the phase one optimization is done, all the UAVs will take
off from their respective mobile charging stations which are
located at (ay, by). (ay, by) are the x-y coordinates of mobile
charging station y. At time slot ¯t, type x UAV will take
off vertically to the height of Hy,x¯t and hover in the sky
for purposes such as trafﬁc monitoring. (ay, by, Hy,x¯t) and
(af , bf , Hf ) are the three-dimensional coordinates of the type
x UAV associated with mobile charging station y and edge
servers in BS f , respectively, where Hy,x¯t > Hf to maintain
a line-of-sight (LoS) communication link between type x UAV
and edge servers in BS f . For simplicity, we assume that UAV
maintain a LoS link with the edge servers in the RSUs. Due
to the hovering capability, we consider only the rotary-wing
UAVs [42].

After the UAVs reach their respective heights, they can
receive and process computation tasks. In this paper, we
consider the task that the type x UAV computes is the matrix-
matrix product AB involving the two matrices A and B.
However, the UAV has limited computing and storage capabil-
ity [43]. Therefore, the UAV can choose to ofﬂoad a portion
or the whole matrix multiplication to the edge servers [43]. In
phase two, it derives the ofﬂoading decision to minimize the
overall operation cost by considering the demand and shortfall
uncertainties. Note that the key notations used in the paper
are listed in Table I. In the following, we discuss the coded
distributed computing model and UAV energy consumption
model.

A. Coded Distributed Computing

Massive parallelization can speed up matrix multiplication.
However, it has a computational bottleneck due to stragglers
or faults. Coded computation is introduced to make matrix
multiplications resilient
i.e., PolyDot
codes [13]. In PolyDot codes, the system model typically
consists of the followings [13]:

to faults and delays,

• Master node receives computation inputs, encodes and

distributes them to the worker nodes.

• Worker nodes perform pre-determined computations on

their respective inputs in parallel.

• Fusion node receives outputs from successful worker
nodes and decodes them to recover the ﬁnal output.
We consider that the type x UAV is our proposed network’s
master and fusion node. Each edge server in BS f is the worker
and has the computation capability of τf,q, where τf,q denotes
the CPU computation capability of the edge server q in BS f
(in CPU cycles per second).

The deﬁnitions of copy, successful workers, recovery thresh-

old, shortfall, and demand are given as follows.
Deﬁnition 1. [Copy] a fraction of matrices A and B [13].
Deﬁnition 2. [Successful workers] Workers that ﬁnish their
computation task and the task is received successfully by the
UAV.

4

Deﬁnition 3. [Recovery threshold] The recovery threshold
is the worst-case minimum number of successful workers
required by the UAV to complete the computation [13].
Deﬁnition 4. [Shortfall] There exists a shortfall when the
total returned copies from the local computation and from the
workers are less than the recovery threshold.
Deﬁnition 5. [Demand] The demand is size of the matrix
input Ny. It is always different as the input of the matrix
multiplication is not always the same.

Following [13], two Ny × Ny square matrices Ay and By
are considered. Note that our model can be applied to other
matrices, e.g., non square matrices. Each of matrices Ay and
By is sliced both horizontally and vertically. For example, Ay
s × Ny
is sliced into Ny
t .
We choose s and t such that they satisfy st = m [13] and
a copy is the m-th fractions of matrices A and B. Each edge
server has a storage constraint that limits the edge server to
store only m fractions of matrices A and B [13]. The recovery
threshold k is deﬁned [13] as:

s matrices and By is sliced into Ny

t × Ny

k = t2(2s − 1).

(1)

The processing by the workers may take a longer time when
it is currently occupied with some other tasks. Therefore, the
processing in the ofﬂoaded tasks is perceived to have failed if
the duration exceeds the threshold time limit [44]. To recover
the computed task, the sum of returned ofﬂoaded copies and
locally computed copies must be greater than or equal to
recovery threshold k.

The decision scenario of phase one and phase two are
explained using recovery threshold k. In phase one,
|X |
scenarios may occur. Mobile charging station y chooses the
UAV type to be used. In phase two, three scenarios may occur.
y,x¯t ≥ k,
where M (L)
y,x¯t indicates the number of copies that type x
UAV from mobile charging station y computes locally at
time slot ¯t and k is deﬁned in (1).

• The UAV can compute all copies locally, M (L)

• The UAV can ofﬂoad all copies to BS f , M (O)

y,x¯t,f ≥ k,
where M (O)
y,x¯t,f denotes the number of copies that are
ofﬂoaded to the edge servers in BS f at time slot t by
the type x UAV from mobile charging station y.

• The UAV can compute some copies locally and ofﬂoad
some copies to the edge servers in BS f , M (L)
y,x¯t +
M (O)

y,x¯t,f ≥ k

y,x¯t,f .

y (M (L)

The ﬁnal output can be decoded from all the return copies
M (L)

y,x¯t + M (O)
Similar to [13], the type x UAV associated with mobile
charging station y uses denc = N 2
y,x¯t,f )
symbols for encoding of matrices and ddec = N 2
y t2(2s −
1) log2 t2(2s − 1) to decode the returned matrices. Each
copy contains m-th fractions of matrices A and B. UAV will
N 2
transmit dto
y
comm =
m symbols to each of the edge servers.
N 3
y
Each copy requires dcmp =
mt symbols for computation.
After computation is completed, the edge server will send
df r
comm =

N 2
y
t2 symbols back to the UAV.

y,x¯t + M (O)

TABLE I
LIST OF KEY NOTATION

5

Deﬁnition
Set of time slots while ¯t ∈ T denotes the time slot index
Set of periods in ¯t while ¯p¯t ∈ ¯P ¯t denotes the period index
Set of UAV types while x ∈ X denotes the UAV type index
Set of mobile charging stations while y ∈ Y denotes the mobile charging station index
Set of BSs while f ∈ F denotes the BS index
Recovery threshold
The number of stages in multi-stage SIP
Set of weather condition scenarios in ¯t while µ¯t
i ∈ Θ¯t denotes the demand scenario index
Set of demand scenarios in ¯t while λ¯t
Set of shortfall scenarios in stage ¯z − 1, where 2 < ¯z ≤ z, and ¯t while ω(¯z,¯t)
scenario index
Binary variable at time slot ¯t for mobile charging station y indicates whether type x UAV is used.
Binary variable at time slot ¯t for mobile charging station y indicates whether a correction on-demand type-X
UAV is used in scenario µ¯t
Binary variable to indicate whether the edge servers in BS f will be used or not
Decision variable represents the number of copies computed locally by the type x UAV that is associated with
mobile charging station y in stage 2, time slot ¯t and scenario λ¯t
i
Decision variable represents the number of copies ofﬂoaded to the edge servers in BS f by the type x UAV that is
associated with mobile charging station y in stage 2, time slot ¯t and scenario λ¯t
i

i ∈ γ ¯t denotes the weather condition scenario index

i, and X represents the largest UAV type.

∈ Ω(¯z,¯t) denotes the shortfall

i

...

Decision variable represents the number of copies computed locally by the type x UAV that is associated with
mobile charging station y in time slot ¯t, scenario λ¯t
Decision variable represents the number of copies ofﬂoaded to the edge servers in BS f by the type x UAV that is
associated with mobile charging station y in time slot ¯t, scenario λ¯t

i, . . . , scenario ω(¯z,¯t)

and stage ˆz, where 1 < ˆz ≤ z

and stage ˆz

i, . . . , scenario ω(¯z,¯t)

i

i

Symbol
T
¯P ¯t
X
Y
F
k
z
γ ¯t
Θ¯t
Ω(¯z,¯t)

¯t

T x
y
T (¯t,X)
y

(µ¯t
i)

M (s)
f
M (L,2)
y,x¯t (λ¯t
i)
(λ¯t
i)

M (O,2)
y,x¯t,f
...
i, . . . , ω(¯z,¯t)

i

)

i, . . . , ω(¯z,¯t)

i

)

M (L,ˆz)

y,x¯t (λ¯t
(λ¯t

M (O,ˆz)
y,x¯t,f

B. UAV Hovering Energy

C. Local Computing Model

The propulsion energy consumption is needed to provide
the UAV with sufﬁcient thrust to support its movement. Note
that we drop the time notation for ease of presentation. The
propulsion power of a rotary-wing UAV with speed V can be
modeled as follows [42]:

(cid:18)

Px(V ) = Px,0

1 +

(cid:18)(cid:115)

(cid:19)

+

3V 2
U 2
tip

Px,1

1 +

where

V 4
4v4
0

−

V 2
2v2
0

(cid:19) 1

2

+

1
2

d0ρ¯tAV 3,

(2)

Px,0 =

δ
8

ρsA(cid:52)3

Px,1 = (1 + r)

xR3,
W 3/2
x√
2Aρ

(3)

(4)

.

Px,0 and Px,1 are two constants related to UAV’s weight,
rotor radius, air density, etc. Utip denotes the tip speed of the
rotor blade, v0 is known as the mean rotor induced velocity in
hover, d0 and s are the fuselage drag ratio and rotor solidity,
respectively. ρ and A are the air density and rotor disc area,
respectively. r is the incremental correction factor to induced
power. Wx is the type x UAV weight, δ is the proﬁle drag
coefﬁcient, and (cid:52)x denotes blade angular velocity of the type
x UAV. By substituting V = 0 into (2) [42], we obtain the
power consumption for hovering status as follows:

When one copy is processed locally, the local computation

execution time of the type x UAV is expressed as [45]:

tlocal
y,x (Ny) =

N 3
y
mt )

Cxd(
τx

,

(6)

where Cx is the number CPU cycles needed to process a bit, τx
denotes the total CPU computing capability of the type x UAV,
and d(·) is a function to translate the number of symbols to
the number of bits for computation, i.e., if the 16 Quadrature
Amplitude Modulation (QAM) is used, each symbol carries 4
bits [46]. The type x UAV takes tenc
y,x seconds to encode one
copy of the matrices, and it is expressed as follows:

tenc
y,x (Ny) =

Cxd(N 2
y )
τx

.

(7)

After the type x UAV obtains at least k copies, it will take
y,x seconds to decode. tdec
tdec
Cxd(N 2

y,x is deﬁned as follows:
y t2(2s − 1) log2 t2(2s − 1))

.

(8)

tdec
y,x(Ny) =

τx

D. UAV Communication Model

We assume that each UAV is allocated with an orthogonal
spectrum resource block to avoid the co-interference among
the UAVs [47]. The transmission rate from the type x UAV
which is associated with mobile charging station y to the edge
servers in BS f can be represented as [48]:

ry,x,f = Bx log2(1 + P C

x hy,x,f /No),

(9)

Px,h = Px,0 + Px,1.

where the wireless transmission power of the type x UAV at
time slot ¯t is expressed as P C
x and Bx is the bandwidth. hy,x,f

(5)

is the channel gains, and N0 is the variance of complex white
Gaussian noise. The UAV to edge server communication is
most likely to be dominated by LoS links. Therefore, the air-
to-ground channel power gain from the type x UAV to the
edge servers in BS f can be modeled as follows [49]:

hy,x,f =

β0

D2

y,x,f

,

(10)

where

D2

(11)

y,x,f = (ay − af )2 + (by − bf )2 + (Hy,x − Hf )2.
Dy,x,f denotes the distance between the type x UAV that is
associated with mobile charging station y and the edge servers
in BS f , and β0 represents the reference channel gain at
distance d0 = 1m in an urban area [49]. We assume that for
all the edge servers in the same BS f , they will have the same
D2
y,x,f . The transmission time to ofﬂoad one copy of matrix
from the type x UAV to a edge server in BS f can be given
as follows:

tto
y,x,f (Ny) =

.

(12)

N 2
y
m )
d(
ry,x,f

The energy ey,x required by the type x UAV to receive data
from the edge server in BS f is deﬁned as follows [50]:

ey,x(Ny) = P re
x

N 2
y
t2 )
d(
rf,y,x

,

(13)

where P re
x is the receiving power of type x UAV. rf,y,x is the
transmission rate from edge servers in BS f to type x UAV
which is associated with mobile charging station y. It is deﬁne
similar to (9).

E. Problem Formulation

As an illustration, Fig. 2 depicts the decision process of
the system across all the time slots. UAV type allocation
is performed in each time slot ¯t. Throughout ¯t, the mobile
charging stations will use the same UAV type to perform
the task allocation in each period. Fig. 3 shows a detailed
diagram that zooms into one-period in one-time slot, and it is
explained in details in both Sections IV and V. In Section IV,
the application owner ¯A3 pays a reservation cost to make
an advance booking for a different time slot for the use of
the UAVs. The application owner can observe the weather
condition via weather forecast as it may affect the status of
the UAV. If the wind is too strong and the UAV used is not
large type, the UAV may crash as it has insufﬁcient energy to
hover against the wind [51]. For example, a strong wind has
high kinetic energy, kinetic energy leads to a higher density of
the air, and it increases the UAV hovering power consumption.
Low wind speed is referred to as wind speed that is less than
11m/s and turbulence level < 5 [52]. As a result, ¯A3 has to
request an on-demand X type UAV to perform the job. In order
for SCOS to model the weather uncertainty, we formulate the
two-stage SIP to optimize the UAV type allocation.

To achieve cost minimization, phase two (task allocation)
in Section V has to consider two sources of uncertainty,
i.e., the demand uncertainty and shortfall uncertainty. Demand

6

y,x¯t and ofﬂoad M (O)

uncertainty refers to the task required by the applications, such
as trafﬁc monitoring can be of different sizes, i.e., the task’s
size depends on the image resolution. Shortfall uncertainty
refers to if the UAV ofﬂoads the copies to the edge servers,
the computed copies may not return, or the number of copies
returned is less than the recovery threshold due to delays
and link failure. Therefore, we use multi-stage SIP to model
the demand uncertainty to optimize the number of copies
to compute locally M (L)
y,x¯t,f . For example,
when the recovery threshold is k = 4 and the UAV decide
to ofﬂoad two copies of the task for the edge servers in BS
f to compute, i.e., M (O)
y,x¯t,f = 2. Therefore, the UAV has
to compute at least two more copies locally to match the
recovery threshold M (L)
y,x¯t = 2. In time slot ¯t, type x UAV
will hover in the sky for a threshold time limit tthresh
to wait
for the ofﬂoaded copies to return. Without loss of generality,
tthresh
is set as the worst-case scenario, i.e., the time required
y,x¯t
to compute all copies locally by the UAV, i.e., M L
y,x¯t = k.
However, there is a probability that the edge servers in BSs
may fail, i.e., the computed task is not returned to the UAV
before tthresh
. As a result, the UAV cannot complete the full
task if the total returned copies are less than 4. When the
UAV fails to receive sufﬁcient number of copies, there are
shortfalls, and hence, the UAV has to re-compute the shortfalls
locally or re-ofﬂoad to the edge servers. Since the UAV has
limited computation capabilities, it can choose to re-compute
the shortfall locally or re-ofﬂoad to the edge servers until z
stages, where z is the number of times of re-computations. In
the meantime, the UAV has to continue hover in the sky when
performing the re-computation. In order to model the shortfall
uncertainty, we formulate z-stage SIP to optimize the numbers
of copies to compute locally and to ofﬂoad, and we can also
optimize the number of stages required. Hence, this scheme
will minimize the overall network cost, and the system model
of this network is formulated as follows:

y,x¯t

y,x¯t

y ,T x¯t
T x¯t

y (µ¯t

i),M (s)

min
f ,...,M (O,ˆz)
y,x¯t,f

(λ¯t

i,...,ω(¯z,¯t)

i

:
)

OU AV

allocation(¯t) +

(cid:88)

¯t∈ ¯T

(cid:88)

(cid:88)

¯t∈ ¯T

¯p¯t∈ ¯P ¯t

OT ask

allocation(¯p¯t),

(14)

subject to: (19)-(22), (44)-(56)
allocation(¯t) is the UAV type allocation cost in time
where OU AV
allocation(¯p¯t)
slot ¯t and it is deﬁned in (17) in Section IV. OT ask
is the task allocation cost within period ¯p and period ¯p is in
time slot ¯t. The task allocation is deﬁned in (35) in Section
V-B.

IV. PHASE ONE: UAV TYPE ALLOCATION

This section introduces the SIP to optimize phase one (UAV
type allocation) in SCOS by minimizing the total allocation.
As described in Section III, the application owner ¯A3 needs
to make a reservation in advance to secure certain types of
UAVs, which are own by ¯A1. However, the weather condition
is unknown and may vary at a different time slot ¯t. If the wind
is too strong, the UAV is required to use more energy to hover
at a ﬁxed location [51]. As a result, the UAV will crash with
insufﬁcient energy, and the application owner has to make an

7

Fig. 2. The decision process of the system across all the time slots ¯T .

Fig. 3. Decision making process of the system in one time slot with the using of three different types of UAV, X = {1 : small, 2 : medium, 3 : large}.

on-demand request with a X type UAV. Fig. 3 illustrates the
decision-making process of the system with the use of three
UAV types, 1, 2 and 3, which represents small, medium and
large, respectively.

Hence, we formulate this scheme as the two-stage SIP

model.

• First stage: The application owner makes a reservation
on the types of UAVs to be used. The decision will be
made based on the available cost information and the
probability distribution of the weather condition.

• Second stage: After knowing the exact weather condi-
tion, the application owner decides the correction action,
which is the on-demand request to use the largest type
X UAV.

Let µ¯t

y(µ¯t
i)} denote weather condition
scenarios i of all mobile charging stations at time slot ¯t. The

i = {G¯t

¯t)
i , . . . , G¯t

1(µ

y(µ¯t

set of all weather scenarios is denoted by γ ¯t, i.e., µ¯t
i ∈ γ ¯t [53].
G¯t
i) represents a binary parameter of the weather condition
at time slot ¯t. For tractability, we only consider that each
mobile charging station experiences only two types of weather
condition. As shown in Table II, G¯t
i) = 1 means that at
time slot ¯t, the wind is strong in mobile charging station y and
the UAV has crashed, and G¯t
y(µ¯t
i) = 0 means otherwise. P(µ¯t)
denotes the probability if scenario µ¯t ∈ γ ¯t is realized. All
of the scenarios can be obtained from historical records [31]
or weather forecast. The cost function is proportional to the
resources used. In total, there are |X | + 2 types of payments.
Note that we drop the time notation.

y(µ¯t

• C x

r is the reservation cost for the type x UAV. It is deﬁned

as follows:

C x

r = α1Bx,

(15)

12Time slotTask allocationUAV type allocationUAV type allocationUAV type allocation123Period123123Task allocationTask allocationSmall UAVLarge UAVMedium UAVLarge UAVThe actual weather  condition is observed1st Stage2nd Stage- Allocate UAV type in each mobile charging station- Decide the use of on-demand large UAVPhase one (UAV type allocations) Section IVPhase two (Task allocations) Section V- Decide the subscription  of the BSsThe actual demand  is observed- Each of the UAV decide  the number of copies  to compute locally- Each of the UAV decide  the number of copies  to offloadThe actual shortfall in stage 2 is observed1st Stage2nd StageThe actual shortfall in stage 3 is observed3rd StageThe actual shortfall in stage z-1 is observedzth Stage- Each of the UAV decide  the number of copies  to compute locally- Each of the UAV decide  the number of copies  to offload- Each of the UAV decide  the number of copies  to compute locally- Each of the UAV decide  the number of copies  to offloadOnce UAV type allocation is done for each of  the mobile charging station- Each BS contains edge servers8

TABLE II
WEATHER UNCERTAINTY

Deﬁnition
At time slot ¯t, the wind is weak or there is no wind
at mobile charging station y. Low wind speed is
referring to wind speed that is less than 11 m/s
and turbulence level < 5 [52]
At time slot ¯t, the wind is strong at mobile charging
station y. High wind speed is referring to wind
speed that is greater than 11 m/s and
turbulence level > 5 [52]

Symbol

G¯t

y(µ¯t

i) = 0

G¯t

y(µ¯t

i) = 1

where Bx is the battery capacity of the type x UAV and
α1 is the cost coefﬁcient.

• C X
o

is the on-demand cost for the type X UAV, which
represents the largest UAV type. It is deﬁned as follows:

Fig. 4. A scenario tree structure for z-stage SIP in task allocation.

C X

o = α2BX ,

(16)

x∈X \{X}

(cid:88)

T x¯t
y (1 − Gy(µ¯t

i)) + T X ¯t

y + T (¯t,X)

y

(µ¯t

i) = 1,

where α2 is the cost coefﬁcient with a similar role to α1
and α2 > α1. BX is the battery capacity of the type X
UAV.

• Cp is the penalty cost. This penalty cost is the repair cost

for the crashed UAV.

• T x¯t
y

We formulate the UAV type allocation as a two-stage SIP
model. There are |T |(|X |+1) decision variables in this model.
is a binary variable at time slot ¯t for mobile charging
station y indicates whether type x UAV is used. When
T x¯t
y = 1, at time slot ¯t, mobile charging station y uses
type x UAV and T x¯t

y = 0 means otherwise.
i) is a binary variable at time slot ¯t for mobile
charging station y indicates whether a correction on-
demand type X UAV is used in scenario µ¯t
i, and X
represents the largest UAV type. When T (¯t,X)
(µ¯t
i) = 1,
time slot ¯t, mobile charging station y performs a
at
correction action by using the largest type-X UAV in
scenario µ¯t

i) = 0 means otherwise.

i and T (¯t,X)

• T (¯t,X)

(µ¯t

(µ¯t

y

y

y

The objective function given in (17) and (18) is to minimize
the cost of the UAV type allocation. The expressions in (17)
and (18) represent the ﬁrst- and second-stage SIP, respectively.
The SIP formulation can be expressed as follows:

min
y ,T (¯t,X)
T x¯t
y

(µ¯t
i)

:

OU AV

allocation(¯t) =

(cid:88)

¯t∈T

(cid:88)

(cid:88)

(cid:88)

¯t∈T

y∈Y

x∈X

where

T x¯t
y C x

(cid:20)
Q(T x¯t
r + E

y (µ¯t
i))

(cid:21)
,

(17)

Q(T x¯t

y (µ¯t

i)) =

(cid:88)

(cid:88)

¯t∈T

µ¯t
i∈γ ¯t

P(µ¯t
i)

(cid:88)

y∈Y

T (¯t,X)
y

(µ¯t

i)(C X

o + Cp),

subject to:

T x¯t
y = 1,

(cid:88)

x∈X

(18)

∀¯t ∈ T , ∀y ∈ Y,

(19)

∀¯t ∈ T , ∀µ¯t

i ∈ γ ¯t, ∀y ∈ Y,

(20)

T x¯t
y ∈ {0, 1},
(µ¯t
T (¯t,X)
y

i) ∈ {0, 1},

∀¯t ∈ T , ∀y ∈ Y, ∀x ∈ X ,
i ∈ γ ¯t.
∀¯t ∈ T , ∀y ∈ Y, ∀µ¯t

(21)

(22)

in (19) ensures that

The constraint
the application owner
makes a reservation on the types of UAV. On the other hand,
(20) ensures that the UAV crashes because of strong wind if
the application owner previously reserves a UAV that is not
largest type X. Then, the application owner has to perform
a correction action by using the largest type X on-demand
UAV. (21) and (22) are boundary constraints for the decision
variables.

V. PHASE TWO: TASK ALLOCATION

Once the types of the UAVs are optimized from phase one
in SCOS, we introduce the Deterministic Integer Programming
(DIP) and SIP to optimize phase two (the number of copies
to compute locally and to ofﬂoad) by minimizing the UAV
network cost. Note that for simplicity, we drop notation ¯p¯t
from phase two task allocation.

A. Deterministic Integer Programming System Model

In an ideal case, when the actual demand, which is the
actual matrix size and the number of shortfalls, are precisely
known ex-ante, the UAVs can choose the exact number of
copies to compute locally or ofﬂoad. Therefore, the correction
for the shortfall is not needed, and the correction cost is zero.
Similar to [54], the cost function is proportional to the UAVs
ofﬂoaded data and to their demand for consuming computation
resources. Choosing different sizes of UAVs will affect the
payment value. In total, ﬁve types of payments are considered
in DIP.

• ¯Cf is the subscription cost for the edge servers in BS f .
• ¯Cy,x denotes the UAV local computation cost and encod-

ing cost for computing of one copy, i.e.,

¯Cy,x(D) = α3(tlocal

y,x (D) + tenc

y,x (D)),

(23)

Stage 1Stage 2Stage 3Stage z  where α3 is the cost coefﬁcient associated to the energy
consumption and D is the actual demand.

• Cy,x¯t,f denotes the ofﬂoading cost and it consists of three
parts. The ﬁrst part is related to the transmission tto
y,x¯t,f
and encoding delay tenc
y,x . The second part is the type x
UAV energy consumption cost and the last part Cf is the
service cost for edge servers in BS f . It is modeled as
follows:

Cy,x¯t,f (D) = α3(tto

y,x¯t,f (D) + tenc
y,x (D))
+α4ey,x¯t(D) + Cf ,

(24)

where α4 is the cost coefﬁcient with a similar role to α3.
denotes the hovering cost for tthresh
seconds.

• Cthresh
y,x¯t

y,x¯t

They are deﬁned as follows:

Cthresh
y,x¯t = tthresh

y,x¯t kα5Px¯t,h,

(25)

where α5 is the cost coefﬁcient with a similar role to α3.
• ˆCy,x denotes the type x UAV decoding cost for the

returned matrices as follows:

ˆCy,x(D) = α3tdec

y,x(D).

(26)

A DIP can be formulated and minimize the total cost of the

UAVs as follows:

min
f ,...,M (O)

M (s)

y,x¯t,f

:

(cid:88)

OT ask

allocation(¯t) =

¯t∈T
(cid:88)

(cid:18)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

¯t∈T

f ∈F

M (s)
f

¯Cf +

M (L)
y,x¯t

¯Cy,x(D) + M (T H)

y,x¯t,f Cthresh

y,x +

¯t∈T

y∈Y

f ∈F

M (O)

y,x¯t,f Cy,x,f (D) + ˆCy,x(D)

(cid:19)
,

(27)

subject to:
(cid:88)

M (O)

y,x¯t,f ≤ σM (s)
f ,

y∈Y

(cid:88)

y∈Y

M (O)

y,x¯t,f ≤ qf ,

∀¯t ∈ T , ∀f ∈ F,

(28)

∀¯t ∈ T , ∀f ∈ F,

(29)

M (O)

y,x¯t,f ≤ σM (T H)
y,x¯t,f ,

∀y ∈ Y, ∀¯t ∈ T , ∀f ∈ F,

(cid:88)

f ∈F

M (O)

y,x¯t,f ≥ S ¯t

y − M (L)
y,x¯t,

(30)

∀¯t ∈ T , ∀y ∈ Y,

(31)

M (L)

y,x¯t +

(cid:88)

f ∈F

M (O)

y,x¯t,f − (S ¯t

y − M (L)

y,x¯t) ≥ k,

M (s)

f , M (T H)

y,x¯t,f ∈ {0, 1},

∀y ∈ Y, ∀¯t ∈ T , ∀f ∈ F,

(32)

∀y ∈ Y, ∀f ∈ F,

(33)

M (L)

y,x¯t, M (O)

y,x¯t,f ∈ {0, 1, . . .}, ∀¯t ∈ T , ∀y ∈ Y, ∀f ∈ F.

(34)

9

M (s)
is a binary variable to indicate whether the edge servers
f
in BS f will be used or not. M (T H)
y,x¯t,f is a binary variable
to indicate in time slot ¯t whether the type x UAV which
is associated with mobile charging station y will choose to
ofﬂoad or not. When M (T H)
y,x¯t,f = 1, in time slot ¯t the UAV
associated with mobile charging station y choose to ofﬂoad
some of the copies to BS f and M (T H)
y,x¯t,f = 0 means otherwise.
The objective function in (27) is to minimize UAVs’ total
cost
involving the UAVs’ local computation cost and the
UAVs’ ofﬂoading cost. The constraint in (28) ensures that the
subscription cost of the edge servers in the BS will be paid if
they are used in any of the stages, where σ is a sufﬁciently
large number. (29) ensures that the total number of copies
ofﬂoaded to the edge servers must not exceed the total number
of edge servers in BSs. (30) ensures that the threshold cost will
be paid if the UAV perform ofﬂoading action. (31) ensures
that the shortfalls should only exist if the number of copies
ofﬂoaded is more than or equal to the shortfalls. (32) ensures
that the number of copies computed locally and ofﬂoaded have
to be at least equal to or larger than recovery threshold k. (33)
indicates M (s)
y,x¯t,f are binary variables. (34) indicates
that M (L)

y,x¯t,f are positive decision variables.

y,x¯t and M (O)

and M (T H)

f

B. Stochastic Integer Programming System Model

This section introduces the SIP to minimize the total cost of
the network by optimizing the number of copies to compute
locally and to ofﬂoad to the edge servers in BSs. The ﬁrst stage
consists of all decisions that have to be selected before the
demand and shortfall are realized and observed. In the second
stage and onwards, decisions are allowed to adapt to this
information. In each stage, decisions are limited by constraints
that may depend on previous decisions and observations.

As described in Section III, there is a subscription cost when
the service provider ¯A3 wants to use the edge servers in BSs
for computation. Then, without knowing the demand, the type
x UAV can decides the number of copies to compute locally
M (L)

y,x¯t and the number of copies to ofﬂoad M (O)
The computation process in the edge servers are not very
reliable, as the edge servers might be processing some other
task or congested. As a result, the computation time is much
longer than the threshold limit tthresh
. Therefore, if a copy
is ofﬂoaded, there is a probability that the computation might
fail, and it will require the type x UAV to re-ofﬂoad again or
compute it locally.

y,x¯t,f .

y,x¯t

Hence, we formulate this framework as a z-stage SIP model.
• First stage: The application owner ¯A3 decides to use the
edge servers in BS f or not. The decision will be made
based on the available cost information, the probability
distribution of the demand, and the shortfall.

• Second stage: After knowing the exact demand,

the
application owner ¯A3 decides the number of copies that
are computed locally and the number of copies to be
ofﬂoaded to the edge servers in BS f .

• Third stage: After knowing the exact shortfall in the
previous stage, the ¯A3 performs a correction action to
re-decide the number of copies that is computed locally

and the number of copies to be ofﬂoaded to the edge
servers in BS f .

...
• z stage: After knowing the exact shortfall in the z-1 stage,
¯A3 performs a correction action to re-decide the number
of copies that is computed locally and the number of
copies to be ofﬂoaded to the edge servers in BS f . To
promote the UAV to complete the task, a huge penalty
will occur if there is still a shortfall in stage z.

i

y

Let λ¯t

i = {D¯t

1, . . . , D¯t

, . . . , F(¯z,¯t)

y} denote the UAV demand scenario i
across all mobile charging station y in time slot ¯t and the set
i ∈ Θ¯t [53]. D¯t
of demand scenarios is denoted by Θ¯t, i.e., λ¯t
y
contains a discrete value from a ﬁnite set W = {1, . . . , W }, it
represents the size of the task in UAV that is associated with
mobile charging station y. Speciﬁcally, D¯t
y = 1000 means that
in time slot ¯t the matrix that UAV receives is in the size of
1000 × 1000. Let ω(¯z,¯t)
= {F(¯z,¯t)
} denote the i-th
1
shortfall scenario of the UAV in time slot ¯t that is associated
with its individual mobile charging station in stage ¯z−1, where
2 < ¯z ≤ z. The set of shortfall scenarios is denoted by Ω(¯z,¯t),
i.e., ω(¯z,¯t)
represents a binary parameter of the
shortfall in time slot ¯t from the type x associated with mobile
charging station y in stage ¯z − 1. For example, F(¯z,¯t)
= 1
means that, in time slot ¯t from the copies that the UAV has
ofﬂoaded, at least A(¯z,¯t)
copy did not return. As a result, the
total number of copies that the UAV currently has is less than
y = 0 means otherwise. In stage z, F(¯z,¯t)
k, and F(¯z,¯t)
y = 0 when
F(¯z−1,¯t)
= 0. When there is no shortfall in the previous stage
then, there will not be any shortfall in the next stage. Fig. 4
illustrates the stages with four scenarios at each stage. All of
the scenarios can be obtained from the historical records.

∈ Ω(¯z,¯t). F(¯z,¯t)

y

y

y

y

i

The cost function used in SIP is similar to DIP with an
additional penalty cost ˜C. ˜C occurs when the UAV still has
to perform a corrective action. In total, six types of payments
are considered in z-stage SIP.

• M (s)
f

We formulate the task allocation as the z-stage SIP model.
There are | ¯T |(z(f + 2) − 1) decision variables in this model.
is a binary variable to indicate whether the edge
f = 1,
f = 0 means

servers in BS f will be used or not. When M (s)
edge servers in BS f will be used and M (s)
otherwise.
y,x¯t,f (λ¯t

i) indicates in time slot ¯t the number of copies
to be ofﬂoaded to the edge servers in BS f by type x
UAV which is associated with mobile charging station y
in stage 2.
y,x¯t (λ¯t

i) indicates in time slot ¯t the number of copies
computed locally by the type x UAV which is associated
with mobile charging station y in stage 2.

• M (O,2)

• M (L,2)

• M (T H,3)

y,x¯t,f (λ¯t

i) is a binary variable to indicate in time slot ¯t
whether the type x UAV which is associated with mobile
charging station y choose to ofﬂoad or not in stage 3.
When M (T H,3)
i) = 1, the type x UAV associated with
mobile charging station y chooses to ofﬂoad some of the
copies to the edge servers in BS f and M (T H,3)
i) = 0
means otherwise.

y,x¯t,f (λ¯t

y,x¯t,f (λ¯t

...

10

• M (L,ˆz)

• M (O,ˆz)

i

i, . . . , ω(¯z,¯t)

y,x¯t,f (λ¯t

) indicates in time slot ¯t the num-
ber of copies to be ofﬂoaded by type x UAV which is
associated with mobile charging station y to the edge
servers in BS f in stage ˆz, where 1 < ˆz ≤ z.

i, . . . , ω(¯z,¯t)

y,x¯t (λ¯t

) indicates in time slot ¯t the number
of copies that the type x UAV which is associated with
mobile charging station y is computing locally in stage
ˆz.

i

• M (T H,ˆz)

y,x¯t,f (λ¯t

i, . . . , ω(¯z,¯t)

i

) indicates is a binary variable to
indicate in time slot ¯t whether the type x UAV which
is associated with mobile charging station y choose to
ofﬂoad or not in stage ˆz.

The objective function given in (35) - (38) is to minimize
the total cost of the network. The expressions in (35),
(36),
(37) and (38) represent the ﬁrst, second, third and up till
z stage objectives, respectively. P(λ¯t
) denote
i
∈ Ω(¯z,¯t) are
the probabilities if scenarios λ¯t
realized, respectively. The SIP formulation can be expressed
as follows:

i ∈ Θ¯t and ω(¯z,¯t)

i) and P(ω(¯z,¯t)

i

min
f ,...,M (O,ˆz)
y,x¯t,f

M (s)

(λ¯t

i,...,ω(¯z,¯t)

i

:
)

OT ask

allocation(¯t) =

(cid:88)

¯t∈T

(cid:88)

(cid:88)

¯t∈T

f ∈F

(cid:20)
Q(M (s)
¯Cf + E

f (λ¯t
i))

(cid:21)
,

M (s)
f

(35)

where

Q(M (s)

f (λ¯t

i)) =

(cid:88)

(cid:88)

P(λ¯t
i)

¯t∈T
¯Cy,x(Dy(λ¯t

λ¯t
i∈Θ¯t
i)) + M (O,2)

(cid:88)

(cid:88)

(cid:18)

y∈Y

f ∈F

M (L,2)

y,x¯t (λ¯t
i)

i)Cy,x,f (Dy(λ¯t
y,x¯t,f (λ¯t
y,x + ˆCy,x(Dy(λ¯t
Cthresh
(cid:20)
Q(M (O,2)

i, ω(3,¯t)

y,x¯t,f (λ¯t

))

i

i))+
i))+
(cid:21)(cid:19)

E

, (36)

Q(M (O,2)

y,x¯t,f (λ¯t

i, ω(3,¯t)

i

(cid:88)

(cid:88)

)) =

¯t∈T

ω(3,¯t)
i

∈Ω(3,¯t)

P(ω(3,¯t)

i

)

(cid:88)

(cid:88)

y∈Y

f ∈F

(cid:18)

M (L,3)

y,x¯t (λ¯t

i, ω(3,¯t)

i

) ¯Cy,x(Dy(λ¯t

i, ω(3,¯t)

i

)

i)) + M (O,3)
y,x¯t,f (λ¯t

y,x¯t,f (λ¯t
i, ω(3,¯t)

i

Cy,x,f (Dy(λ¯t

i) + M (T H,3)
y,x¯t,f )(λ¯t

(cid:20)
Q(M (O,3)
+E

i, ω(3,¯t)

i

)Cthresh
y,x
(cid:21)(cid:19)
)

,

, ω(4,¯t)

i

...

(37)

Q(M (O,ˆz)

y,x¯t,f )(λ¯t

i, ω(3,¯t)

i

, . . . , ω(¯z,¯t)

i

) =

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:18)

P(ω(¯z,¯t)

i

)

M (L,ˆz)

y,x¯t (λ¯t

i, . . . , ω(¯z,¯t)

i

¯t∈T

ω(¯z,¯t)
i

∈Ω(¯z,¯t)

) ¯Cy,x(Dy(λ¯t

i))+

y∈Y

f ∈F
M (T H,¯z)

y,x¯t,f (λ¯t

i)Cthresh

y,x + M (O,ˆz)

Cy,x,f (Dy(λ¯t

i)) + F¯z

i, . . . , ω(¯z,¯t)

i

) ˜C

i, . . . , ω(¯z,¯t)
)
(cid:19)

i

y,x¯t,f (λ¯t
y(λ¯t

,

(38)

subject to: Please see Appendix A
The constraints in (44) and (45) are the same as the con-
straint (28). (46) and (47) are the same as (30). (48) and (49)
ensure that if the previous stage does not have a shortfall,
and then the shortfall for the next stage should be zero. The
shortfalls should only exist if the number of copies ofﬂoaded
in the previous stage is more than or equal to the shortfall.
They also ensure that the number of shortfalls can be reduced
when the UAV performs local computations. (50) ensures that
the number of copies computed locally and ofﬂoaded should
be at least k. (51) and (52) ensure that if the UAV has a
shortfall in the previous stage, the UAV has to compute the
shortfall locally or re-ofﬂoad to the edge servers in the BS to
match k, i.e., the recovery threshold for task completion. (53)
and (54) ensure that the total number of copies ofﬂoaded to the
edge servers in each stage must not exceed the total number of
i, ω(3,¯t)
edge servers in BSs. (55) indicates M (s)
f , M (T H,3)
),
i, . . . , ω(¯z,¯t)
. . . , M (T H,¯z)
) are binary variables. (56) indi-
i, . . . , ω(¯z,¯t)
i), M (L,2)
cates M (O,2)
y,x¯t,f (λ¯t
M (L,ˆz)
y,x¯t (λ¯t
To solve SIP, we assume that the probability distribution of
all scenarios in set γ ¯t, Θ¯t, Ω(3,¯t), . . . , Ω(¯z,¯t) are known [55],
then, the complexity of the problem increases exponentially
when the total number of scenarios across all the stages in-
creases [55, 56]. For phase one in Section IV, the total number
of decision variables can be calculated from (39), where t(cid:48), y(cid:48),
and x(cid:48) denote the total number of time slots, mobile charging
stations, and UAV types in the set, respectively. µ(cid:48) is the total
number of weather scenarios. The total number of constraints
can be calculated from (40). For example, with six time slots,
six mobile charging stations, three UAV types, and ten weather
scenarios, phase one will have 468 decision variables and 864
constraints.

i), . . . , M (O,ˆz)
y,x¯t (λ¯t
) are positive decision variables.

y,x¯t,f (λ¯t
y,x¯t,f (λ¯t
i, . . . , ω(¯z,¯t)

y,x¯t,f (λ¯t

),

i

i

i

i

decisionV ariables1 = t(cid:48)y(cid:48)x(cid:48) + µ(cid:48)t(cid:48)y(cid:48)

constraints1 = t(cid:48)y(cid:48) + 2µ(cid:48)t(cid:48)y(cid:48) + t(cid:48)y(cid:48)x(cid:48)

(39)

(40)

For phase two in Section V-B, the total number of decision
variables can be calculated from (41), where f (cid:48) denotes the
total number of BSs in the set. λ(cid:48), ω3(cid:48)
are the
total number of demand, shortfall in stage 2, . . . , shortfall
in stage ¯z − 1 scenarios. The total number of constraints can
be calculated from (42).

. . . , ω ¯z(cid:48)

,

decisionV ariables2 = t(cid:48)f (cid:48) + t(cid:48)λ(cid:48)y(cid:48)f (cid:48) + t(cid:48)ω3(cid:48)

y(cid:48)f (cid:48) + . . .

(41)

+t(cid:48)ω ¯z(cid:48)

y(cid:48)f (cid:48)

constraints2 = 2(t(cid:48)f (cid:48)λ(cid:48)ω3(cid:48)
t(cid:48)f (cid:48)λ(cid:48)) + 2(t(cid:48)y(cid:48)f (cid:48)λ(cid:48)ω3(cid:48)

+ . . . + t(cid:48)f (cid:48)λ(cid:48)ω3(cid:48)
+ . . . + t(cid:48)y(cid:48)f (cid:48)λ(cid:48)ω3(cid:48)
+ . . . + t(cid:48)y(cid:48)λ(cid:48)ω3(cid:48)
+t(cid:48)y(cid:48)f (cid:48)λ(cid:48) + 2(t(cid:48)y(cid:48)f (cid:48)λ(cid:48)ω3(cid:48)

+t(cid:48)y(cid:48)λ(cid:48)ω3(cid:48)

. . . ω ¯z(cid:48)
. . . ω ¯z(cid:48)
)
. . . ω ¯z(cid:48)
. . . ω ¯z(cid:48)
)

(42)

11

C. Stochastic Coded Ofﬂoading Scheme Flowchart

In Fig. 5, the ﬂowchart of SCOS algorithm is shown. The
algorithm for solving SCOS is presented in four steps (i.e.,
Step-1 to Step-4) as follows.

In Step-1, we obtain the weather probability for the ﬁrst time
slot, and it can be obtained from the historical records [31]
or weather forecast. The weather uncertainty is then modeled
using SIP from (17).

In Step-2, we save the solution from Step-1.
In Step-3, we obtain the demand probability from the
road trafﬁc data set released by Land Transport Authority
Singapore [57].

In Step-4, we obtain the shortfall probability from the
historical records. Using the allocated UAV type from Step-
2, we modeled the demand probability from Step-3 and the
shortfall probability using SIP from (35). After solving this
problem, if the next period has task allocation, the solution is
saved, and the algorithm will proceed to Step-3. Otherwise, the
algorithm proceeds to the next decision box. If the timeslot is
the last time slot for the next decision box, the algorithm will
end and output the SIP decision variables solution. Otherwise,
the algorithm will proceed to Step-1.

Fig. 5. Flowchart of SCOS algorithm.

VI. SIMULATION RESULT AND ANALYSIS

In this simulation, we consider the system model with one
time slot |T | = 1, six mobile charging stations, two BSs,
sixty edge servers and thirty UAVs equally split into three
UAV types. X = {1 : small, 2 : medium, 3 : large}. The
battery capacities B1, B2 and B3 are 2375mAh, 3500mAh
and 5200mAh, respectively [58]. A conceptual illustration of
the system model is shown in Fig. 6. Fig. 6 is an x-y plane
that shows the locations of the UAVs and the BSs. All the
UAVs associated with their respective mobile charging stations
are hovering at 100m, and the height of all edge servers in
the BSs is 20m. They are randomly allocated in the area of
1000 × 1000 m2. Each small grid is 25 × 25 m2. We consider

Step-1 Obtain historical weatherprobability and model theweather uncertainty using SIPStep-2 Obtain SIP solutionStep-3 Obtain historical demandprobabilityStep-4 Obtain historical shortfallprobability model the shortfalluncertainty using SIPNoStartNoYesStopYesThe next period has  task allocation?Is the timeslot the  last timeslot?12

Fig. 6. x-y coordinates of all the UAVs and BSs.

Fig. 7. Singapore trafﬁc camera location.

TABLE III
EXPERIMENT PARAMETERS

Parameter
UAV weight in kg, Wx
Air density in kg/m3, ρ
Rotor radius in meter, R
Rotor disc area in m2, A
Blade angular velocity in radians/second, (cid:52)x
Tip speed of the rotor blade, Utip
Number of blades, b
Blade or aerofoil chord length, c
Rotor solidity, deﬁned as the ratio of the
total blade area bcR to the disc area A, s
Fuselage drag ratio, d0
Mean rotor induced velocity in hover, v0
Proﬁle drag coefﬁcient, δ
Incremental correction factor
to induced power, r
UAV hover height in meter, Hy,x
Height of edge servers in BS, Hf
UAV bandwidth in M Hz, Bx
UAV transmit power in mW , P C
x
UAV receiving power in mW , P re
x
White Gaussian noise in dBm, N0
UAV computation power in GHz, τx
Number of CPU cycles needed
to process a bit, Cx
Channel gains, β0
Cf in $
α1
α2
α3
α4
α5

Values
[8-12]
1.225
0.5
0.79
[380-420]
200
4
0.0196

0.05

0.3
7.2
0.012

0.1

[80-100]
20
2
32
32
-100
[0.6-1]

20

-60dB
0.05
0.001
0.0015
0.5
0.5
0.0001

uncertainty, W is represented by its corresponding values 240,
260, 480, and 1080. As shown in Fig. 9, weather, demand, and
shortfall uncertainties can be injected into the GAMS script
using their corresponding values.

A. Allocation of UAV

We ﬁrst evaluate the UAV type allocation for each mobile
charging station. We consider a two-stage SIP, where the ﬁrst
stage is (17) and the second stage is (18). In this UAV type
allocation, we consider two scenarios of weather condition,
i.e., strong wind and weak wind, which are |γ1| = 2 [30].
The two scenarios are that all locations have strong wind µ1
1

Fig. 8. The probability distribution of the demand size.

the case with m = 2 [13]. Therefore, we can substitute s = 2
t
into (1), and we obtain the following:

k = 4t − t2,

(43)

to the variable t and
by differentiating (43) with respect
equating the result
to zero. Then, we are able to obtain
t = 2, s = 1, and k = 4. The simulation parameters are
summarized in Table III and their values are from [48, 42].
For the presented experiments, we implement the SIP model
using GAMS script [59, 60].

We obtain the ﬁnite set W from the road trafﬁc data set
released by Land Transport Authority Singapore [57]. As
there are 72 cameras in Singapore to
depicted in Fig. 7,
monitor the trafﬁc ﬂow. We generate 1 set of the data in
real-time to obtain Y. The data are in the dimension of
row×column. Following [13] we are only considering square
therefore, W = row = column. The probability
matrices,
distribution of the demand size is shown in Fig. 8 and
W = {240, 260, 480, 1080}. We use scenarios to represent the
weather, demand, and shortfall uncertainties. In each scenario,
each uncertainty will have a corresponding value. For example,
when G¯t
i) = 1. It means that the weather uncertainty
in scenario i in mobile charging station y at time slot ¯t is
represented by the value of 1. For the road trafﬁc data set, we
obtain the dimension of the data, and we post-process the data
to obtain W which is the demand size. We use the demand size
to represent the actual demand uncertainty. Similar to weather

y(µ¯t

BS 1BS 2xy(0,0)(50, 350)(350,450)(250,250)(-350,50)(-50,-150)(-200,-300)(-150,-450)(350,-250)Mobile charging station 1Mobile charging station 2Mobile charging station 3Mobile charging station 4Mobile charging station 5Mobile charging station 66/2/2021Traffic Images-Data.gov.sghttps://data.gov.sg/dataset/traffic-images?view_id=39ba8de0-6242-40d3-8664-793316c47b09&resource_id=e127e29a-bd48-47e2-a0a7-e89ce31…1/3Tra c ImagesViews for this resource:MapADDITIONAL INFORMATIONLast updatedApril 8, 2016CreatedApril 8, 2016FormatAPICoverageFrom March 1, 2016LicenceSingapore Open Data Licence (/open-data-licence)About this datasetReturns links to images of live tra c conditions along expressways and Woodlands & Tuas Checkpoints.Managed ByLand Transport Authority (/dataset?organization=land-transport-authority)Last UpdatedFebruary 13, 2018, 14:49 (SGT)CreatedApril 8, 2016, 15:55 (SGT)CoverageFrom March 1, 2016FrequencyReal-timeSource(s)Land Transport AuthorityLicenceSingapore Open Data Licence (/open-data-licence)Similar DatasetsLTA Tra c Signal Aspect (/dataset/lta-tra c-signal-aspect)Land Transport Authority (/dataset?organization=land-transport-authority) / 17 Jul 2020Tra c lights consisting of signal aspects such as ground, overhead, green  lter arrow, beacons, etc to control tra c  ow.(/)Topics (.topic-collapse)Blog (https://blog.data.gov.sg)Developers (/developer)Data Request (https://github.com/datagovsg/datagovsg-datasets/issueMap data ©2021 Google(https://maps.google.com/maps?ll=1.381407,103.810024&z=11&t=m&hl=en-GB&gl=US&mapclient=apiv3)SOURCE: DATA.GOV.SG (/DATASET/TRAFFIC-IMAGES?VIEW_ID=39BA8DE0-6242-40D3-8664-793316C47B09&RESOURCE_ID=E127E29A-BD48-47E2-A0A7-E89CE31F10C7)2403604801080demand size y0.00.10.20.30.40.5Probability13

Fig. 10. The cost of UAV type allocation when
varying the penalty cost.

Fig. 11. The cost of the network by varying the
penalty cost and the weather probability.

Fig. 9. The value of uncertainties are inserted into
GAMS script.

and no location has strong wind µ1
2. We consider a stochastic
system with P(µ1
2) = 0.7. We perform
the sensitivity analysis by varying the incurred cost and the
weather condition probability.

1) = 0.3 and P(µ1

1) Penalty cost Cp: We evaluate the UAV type allocation
by varying the penalty cost Cp, and the result is presented in
Fig. 10. When the penalty cost is low, the application owner
still prefers to reserve the small UAV even though there is a
crashing probability. However, the decision changed when the
Cp ≥ 1.5. The cost of the correction action, which is the on-
demand cost of using a type 3 UAV, becomes much higher.
¯A3 has to make a reservation on the type 3 UAV in the initial
phase.

2) Probability of the weather condition: Next, we consider
the same setting as that in Section VI-A1. We investigate the
impact on the network by varying both the weather probability
P (µ1
1) and Cp. The result is shown in Fig. 11. When the
weather is good P (µ1
1) = 0, all the charging stations will
choose to use a type 1 UAV in stage 1 since there is no strong
wind. When the probability of bad weather increases, e.g.,
P (µ2
1) ≥ 0.5 all the charging stations tend to choose type
3 UAVs even when the penalty cost is low due to a high
probability of UAV crashes.

B. Allocation of Task

We now perform the sensitivity analysis on task allocation
using the UAV type allocation derived when Cp = 2. We
perform the sensitivity analysis by varying the number of
stages z, hovering cost C thresh
, the probability of shortfalls,
recovery threshold k as well as the types of UAV use, and we
discuss the results in this subsection.

y,x¯t

y,x = 0, M L,3

1) Cost structure: We ﬁrst study the cost structure of
the network. As an illustration, a primitive UAV network is
considered with zero local computation M L,2
y,x = 0,
and we consider a three-stage SIP, where the ﬁrst stage is
(35), the second stage is (36) and the third stage is (38).
Furthermore, we ﬁrst consider six mobile charging stations,
one BS, one demand scenario |Θ1| = 1 and |Ω(3,1))| = 1.
The demand is 1080. The shortfall scenario is that there are
shortfalls from the copies that the UAV has ofﬂoaded. Since
the number of copies that are ofﬂoaded M (O,2)
k = 4,
y,x,f
begins with 4. In Fig. 12, the costs in the ﬁrst, second, third
stages and the total cost under the different number of the

ofﬂoaded copies are presented. Since ofﬂoading is the only
decision, the edge servers subscription cost in stage one should
always paid. In the second stage, the cost is expected to
increase as the number of copies that are ofﬂoaded increases.
However, the cost in the third stage after knowing the actual
shortfall decreases as the number of ofﬂoaded copies increases
since the UAV needs to perform fewer re-computation to
match the shortfall. Fig. 12 shows the optimal solution in this
simple network. It can be identiﬁed that even in this simple
network, the optimal solution is not trivial to obtain due to
the uncertainty of shortfall. For example, the optimal cost is
not the point where the cost in the second stage is the lowest
of the cost in the third stage is the lowest. Therefore, SIP
formulation is required to guarantee the minimum cost to the
UAVs.

1 = 480, λ1

2 = 240, λ1

3 = 1080 and λ1

2) Number of stages z: We consider the case with four
demand scenario |Θ1| = 4, one shortfall scenario |Ω(¯z,1)| = 1
for each SIP stage, and there is a shortfall in each stage.
The four demand scenarios are made up of 4 demand size
each, λ1
4 = 360. We
vary the value of z from 3 to 6. The cost of the network
is shown in Fig. 13 and Table IV indicates the value of the
variables. The number of variables in the six-stage SIP is large.
Therefore, for illustration, we only indicate the value for all
the variables in mobile charging station 1 when z = 3. Then,
We use the result from z = 3 to explain the ﬁndings. When
the data size is 240, the ofﬂoading cost is more expensive
than the local computation cost. Therefore,
the UAV will
perform local computation in stage 2 when the data size is
2) = 4, M (O,2)
240. M (L,2)
1,31,f (λ1
2) = 0
and M (O,3)
2) = 0. However, for the rest of the data size,
the ofﬂoading action is chosen. The UAV will ofﬂoad more
in stage 2 to overcome the shortfall, and this ofﬂoading cost
is cheaper than the local computation cost. The total number
of copies ofﬂoaded to the edge servers in BSs 1 and 2 is 24
each. The UAVs will always ofﬂoad to the edge servers that
is closer to it as the cost is lower. To support the ofﬂoading
process, 24 edge servers have to be placed in both BSs 1 and
2. Since the shortfalls exist in every stage, as the number of
stages increases, the UAV will perform more local computation
in stage 2. When z ≥ 5, the UAV will only consider local
computation regardless of the demand, and the overall cost
will remain the same. Since there is no ofﬂoading process,

1,31 (λ1
1,31,f (λ1

2) = 0, M (L,3)

1,31,f (λ1

GAMS ScrpitWeather uncertaintyDemand uncertaintyShortfall uncertainties0.51.01.52.02.5Penalty cost Cp020406080100CostReservation cost for small UAVReservation cost for medium UAVReservation cost for large UAVOn-deman cost for large UAVTotal cost0.51.01.52.02.5Penalty cost Cp020406080100120costP(11)=0, P(12)=1P(11)=0.25, P(12)=0.75P(11)=0.5, P(12)=0.5P(11)=0.75, P(12)=0.25P(11)=1, P(12)=014

Fig. 12. The optimal solution in a simple three-
stage SIP UAV network.

Fig. 13. The cost of the network by varying the
number of stages in SIP. Considered only UAV 1,
BS 1 and BS 2.

Fig. 14. The cost of the network by varying the
hovering cost Cthresh

.

y,x¯t

Fig. 15. The cost of the network by varying the
probability of shortfall in each stage.

Fig. 16. The cost of the network by varying the
variable s to change the recovery threshold.

Fig. 17. The overall network cost when the UAV
type x is varied.

edge servers’ locations are no longer necessary as they are no
longer needed.

y,x

3) Hovering cost C thresh

: We consider the case with
mobile charging station 1 and BS 1. We vary both the hovering
cost and the number of stages z to observe the impact on
the network. We keep the rest of the parameters the same
as Section VI-B2. Fig. 14 shows the cost of the network. It
can be identiﬁed that when the hovering cost increases, it will
also increase the re-ofﬂoading cost, therefore increasing the
network cost. Since there is a shortfall scenario in every stage,
the increase of hovering costs in every stage will affect the
decision of the UAV. For example, when stage 4 has 2.5 times
hovering cost, the UAV will perform full local computation
regardless of the data size. Full local computation is also
performed when z ≥ 5.

1

), P (ω(¯z,1)

4) Probability of the shortfalls: We consider the setting
similar to Section VI-B3. There are two shortfall scenarios
in each stage |Ω(¯z,1)| = 2. The two shortfall scenarios are i)
all the UAVs have shortfalls ω(¯z,1)
in stage ¯z and ii) all the
UAVs do not have shortfall ω(¯z,1)
. We observe the impact
2
on the network by varying both the shortfall probabilities
P (ω(¯z,1)
) and the number of stages z. The result
1
is shown in Fig. 15. Since there is no shortfall P (ω(¯z,1)
) = 0,
when z increases, the decision made by the UAV remains the
same. The UAV can choose the cheapest decision, which is
the ofﬂoading action. When P (ω(¯z,1)
) increases, the number
of copies that are computed locally and ofﬂoaded in the earlier
stage also increases to reduce the penalty cost by the shortfalls.
However, the number of scenarios increases exponentially with
z [61], and this is the reason that it leads to a sharp increase

1

2

1

in cost from stages 5 to 6. For example, in a 6-stage SIP with
two scenarios per stage, this results in a total of 56 = 15, 625
64 scenarios [61]. When z = 6 and P (ω(¯z,1)
) = 1, with the
high re-ofﬂoading cost, full local computation is perform in
the earlier stage.

1

5) Recovery threshold k: Similar to Section VI-B3, we
consider three-stage SIP with four demand scenarios |Θ1| = 4,
one shortfall scenario |ω(3,1)| = 1 and there is shortfalls in
each ofﬂoading process. We monitor the impact of the network
by varying the recovery threshold. We set m = 4 and we vary
recovery threshold k by changing s from 1 to 5. Since k is
controlled by (1), as s increases, k varies from 16 to 6. When
s = 1, the recovery threshold is the highest k = 16. The
result is shown in Fig. 16. The stage 1 cost remains constant
as the BS is always subscribed. The cost of the network is
also the highest as the UAV has to compute the most number
of copies. When the data size is 240, 360, and 480, in stage
2, the UAV prefers to compute most of the copies locally as
the local computation cost is much lower than the ofﬂoading
cost plus the re-ofﬂoading cost in stage 3. The reason is that
when k is high, the number of shortfalls is also high, which
increases the re-ofﬂoading cost. This is why the stage 3 cost
is zero. As s increases, the value of k decreases, the cost
in local computation increases. Therefore, instead of local
computation, some of the UAVs perform ofﬂoading process
in stage 2. Throughout the simulations, the cost in stage 3 is
zero. With the additional penalty and hovering cost, no UAVs
prefer to compute the shortfalls in stage 3.

6) UAV types: Similar to Section VI-A1 and Section VI-B5,
we consider 1 UAV and Cp = 2 and investigate the differences

45678The number of offloaded copies M(O,2)y,x1,f020406080100120140160CostOptimal solutionstage 1stage 2stage 3overall3456The number of stages in SIP z020406080100120140160Coststage 1stage 2stage 3stage 4stage 5stage 6overall1x cost1.5x cost2x cost2.5x  costThe hovering cost Cthreshy,x01020304050Costz=3z=4z=5z=63456The number of stages in SIP z10152025303540CostP((z,1)1)=0, P((z,1)2)=1P((z,1)1)=0.25, P((z,1)2)=0.75P((z,1)1)=0.5, P((z,1)2)=0.5P((z,1)1)=0.75, P((z,1)2)=0.25P((z,1)1)=1, P((z,1)2)=012345The way the matrices is sliced s0500100015002000Coststage 1stage 2stage 3overallx=1x=2x=30246810121416Cost in UAV type allocationCost in task allocationTABLE IV
DECISION VARIABLE VALUE

15

Variable
M (s)
1
M (s)
2
M (L,2)
1,31 (λ1
1)
M (L,2)
1,31 (λ1
2)
M (L,2)
1,31 (λ1
3)
M (L,2)
1,31 (λ1
4)
M (O,2)
(λ1
1)
1,31,1
M (O,2)
(λ1
2)
1,31,1
M (O,2)
(λ1
3)
1,31,1
M (O,2)
(λ1
4)
1,31,1
1, ω(3,1))
1,31 (λ1
2, ω(3,1))
1,31 (λ1
3, ω(3,1))
1,31 (λ1
4, ω(3,1))
1,31 (λ1
1, ω(3,1))
(λ1
2, ω(3,1))
3, ω(3,1))
4, ω(3,1))

M (L,3)
M (L,3)
M (L,3)
M (L,3)
M (O,3)
1,31,1
M (O,3)
1,31,1
M (O,3)
1,31,1
M (O,3)
1,31,1

(λ1

(λ1

(λ1
Total number of edge server in BS 1
Total number of edge server in BS 2

z=3

z = 4

z = 5

z = 6

1
0
0

4

0

0

8

0

8

8

0

0

0

0

0

0

0

1
0
4

4

0

4

0

0

4

0

0

0

0

0

0

0

8

0
24
24

0
24
24

0
0
4

4

4

4

0

0

0

0

0

0

0

0

0

0

0

0
0
0

0
0
4

4

4

4

0

0

0

0

0

0

0

0

0

0

0

0
0
0

in cost when we change the UAV type. The overall network
cost is shown in Fig. 17. If the service provider initially uses
type 1 and 2 UAVs, and when the wind is strong, the UAV
cannot have sufﬁcient energy to withstand the strong wind
(weather uncertainty). As a result, the service provider has to
deploy another UAV (type 3) to perform the task. However,
if the service provider initially deploys a type 3 UAV, it will
have sufﬁcient energy to withstand the strong wind. There is no
additional correction cost. Therefore, the UAV type allocation
cost is cheaper if the service provider chooses to book type
3 UAV in advance. Furthermore, using type 3 UAV in task
allocation makes the computation capability stronger than the
other UAV types. As a result, it will have a shorter latency and
will lead to a lower computation cost. Hence, the computation
cost is also the lowest when a type 3 UAV is used. Therefore,
the overall network cost is the lowest when a type 3 UAV is
used.

C. Comparing between EVF, SIP and random scheme

We set z = 3 and compare the SIP with Expected-Value For-
mulation (EVF) [62] as well as the random scheme. Expected-
value formulation uses the average values of shortfall as
well as the demand and solves a DIP. For EVF, the total
number of copies (M (L)
y,x¯t,f ) is ﬁxed using the average
value of shortfall and demand, an approximation scheme. In
a random scheme, the values of the decision variables are
randomly generated. We vary the price of the ofﬂoading action
to compare the difference between EVF, SIP, and random
schemes. This cost is combined with the UAV type allocation
cost to observe the total cost of the network. Fig. 18 depicts the

y,x¯t + M (O)

Fig. 18. SIP comparing with EVF and random scheme.

comparison result. As shown in the result, EVF and random
scheme cannot adapt to the change in cost. On the other hand,
SIP can always achieve the best solution among the three to
reduce the shortfall cost.

VII. CONCLUSION
In this paper, we have proposed the Stochastic Coded
Ofﬂoading Scheme (SCOS) that employs a CDC technique to
combines with computation ofﬂoading to minimize the energy
consumption of the UAV network. We have ﬁrst formulated
the SCOS as the two-stage stochastic programming to optimize
the UAV type allocation to account for the weather uncertainty.
Then, we have formulated the z-stage stochastic programming
to account for data size and task completion uncertainty. We
have also conducted numerical experiments to verify that our
proposed SCOS can optimize the total cost and the UAVs’
energy consumption. Compared to the benchmark, SCOS
based on SIP can achieve the best solution as it can adapt
to changes in data size and task failure probability. We also
know that a three-stage SIP is enough to formulate the problem
through the simulations as it has the lowest cost.

ACKNOWLEDGEMENT
in part,

supported,

This

research is

the programme
DesCartes and is supported by the National Research Foun-
dation, Prime Minister’s Ofﬁce, Singapore under its Campus
for Research Excellence and Technological Enterprise (CRE-
ATE) programme, Alibaba Group through Alibaba Innova-
tive Research (AIR) Program and Alibaba-NTU Singapore
Joint Research Institute (JRI), the National Research Foun-
dation, Singapore under the AI Singapore Programme (AISG)
(AISG2-RP-2020-019), WASP/NTU grant M4082187 (4080),
Singapore Ministry of Education (MOE) Tier 1 (RG16/20),
in part by the SUTD SRG-ISTD-2021-165, the SUTD-ZJU
IDEA Grant (SUTD-ZJU (VP) 202102), and the SUTD-ZJU
IDEA Seed Grant (SUTD-ZJU (SD) 202101). This research is
also supported by, in part, the NSF CNS-2107216 and EARS-
1839818; in part by the National Research Foundation of
Korea (NRF) Grant funded by the Korean Government (MSIT)
under Grant 2021R1A2C2007638 and the MSIT under the ICT
Creative Consilience program (IITP-2020-0-01821) supervised
by the IITP.

1x cost1.5x cost2x cost2.5x  costOffloading cost708090100110120130140150Total costEVFSIPRandomAPPENDIX A
CONSTRAINTS OF z-STAGE SIP SYSTEM MODEL

M (L,2)

y,x¯t (λ¯t

i) +

(cid:88)

f ∈F

M (O,2)

y,x¯t,f (λ¯t

i) + F(3,¯t)

y

(λ¯t

i, ω(3,¯t)

i

16

)

M (O,2)

y,x¯t,f (λ¯t

i) ≤ σM (s)

f , ∀¯t ∈ T , ∀f ∈ F, ∀λ¯t

i ∈ Θ¯t,

−F(3,¯t)
y

(λ¯t

i, ω(3,¯t)

i

(cid:18)

¯A(3,¯t)
y

)

(λ¯t

i, ω(3,¯t)

i

) − M (L,2)

y,x¯t (λ¯t

i, ω(3,¯t)

i

(cid:19)
)

M (L,3)

y,x¯t (λ¯t

i, ω(3,¯t)

i

) +

(cid:88)

f ∈F

F(3,¯t)
y

(λ¯t

i, ω(3,¯t)

i

)M (O,3)

y,x¯t,f (λ¯t

i, ω(3,¯t)

i

)

(cid:88)

y∈Y

(cid:88)

y∈Y

(44)

...

) ≤ σM (s)
f ,

M (O,ˆz)

y,x¯t,f (λ¯t

i, . . . , ω(¯z,¯t)

i

∀¯t ∈ T , ∀f ∈ F, ∀λ¯t

i ∈ Θ¯t, ∀ω(3,¯t)

i

∈ Ω(3,¯t), . . . ,
∈ Ω(¯z,¯t),

∀ω(¯z,¯t)

i

M (O,3)

y,x¯t,f (λ¯t

i, ω(3,¯t)
i
∀¯t ∈ T , ∀y ∈ Y, ∀f ∈ F, ∀λ¯t

) ≤ σM (T H,3)

i, ω(3,¯t)
y,x¯t,f (λ¯t
i ∈ Θ¯t, ∀ω(3,¯t)

i

i

(45)

),
∈ Ω(3,¯t),

(46)

...

(cid:18)

M (O,ˆz)

y,x¯t,f (λ¯t

i, . . . , ω(¯z,¯t)

i

∀¯t ∈ T , ∀y ∈ Y, ∀f ∈ F, ∀λ¯t

) ≤ σM (T H,¯z)

y,x¯t,f (λ¯t
i ∈ Θ¯t, ∀ω(3,¯t)

i

i, . . . , ω(¯z,¯t)
),
i
∈ Ω(3,¯t), . . . ,
∈ Ω(¯z,¯t),

∀ω(¯z,¯t)

i

M (O,3)

y,x¯t,f (λ¯t

i, ω(3,¯t)

i

) ≥ F(3,¯t)
y

(λ¯t

i, ω(3,¯t)

i

)

(cid:88)

f ∈F

(cid:18)

¯A(3,¯t)
y

(λ¯t

i, ω(3,¯t)

i

∀¯t ∈ T , ∀y ∈ Y, ∀λ¯t

i, ω(3,¯t)

i

) − M (L,3)

y,x¯t (λ¯t
i ∈ Θ¯t, ∀ω(3,¯t)

i

(47)

(cid:88)

y∈Y

(cid:19)
,

)

∀¯t ∈ T , ∀y ∈ Y, ∀f ∈ F, ∀λ¯t

i ∈ Θ¯t, ∀ω(3,¯t)

i

≥ k,
∈ Ω(3,¯t),
(51)

...

M (L,2)

y,x¯t (λ¯t) +

(cid:88)

M (O,2)

y,x¯t,f (λ¯t

i) + . . . +

(cid:88)

F(3,¯t)
y

(λ¯t

i, ω(3,¯t)

i

)

f ∈F
. . . F(¯z,¯t)
y
) . . . F¯z
(cid:18)
)

i, ω(3,¯t)

i, ω(3,¯t)
(λ¯t

i

i

F(3,¯t)
y

(λ¯t

−F(3,¯t)
y

f ∈F
)M (O,ˆz)

¯A(3,¯t)
y

i, . . . , ω(¯z,¯t)
(λ¯t
y(λ¯t

i

y,x¯t,f (λ¯t
y,x¯t (λ¯t
)M (L,ˆz)
) − M (L,2)

i

i

i, . . . , ω(¯z,¯t)
)+
i, . . . , ω(¯z,¯t)
)
(cid:19)
i, ω(3,¯t)
i, . . . , ω(¯z,¯t)
(cid:19)

)

)

i

i

y,x¯t (λ¯t
(λ¯t
i, . . . , ω(¯z,¯t)

y

i

)

≥ k,

) . . . F(¯z,¯t)

i

i, . . . , ω(¯z,¯t)
i, ω(3,¯t)
(λ¯t
i, ω(3,¯t)
i
) − M (L,ˆz)

i

y,x¯t (λ¯t
i ∈ Θ¯t, ∀ω(3,¯t)

i

∈ Ω(3,¯t), . . . ,
∈ Ω(¯z,¯t),
(52)

∀ω(¯z,¯t)

i

y

(λ¯t
− . . . − F(3,¯t)
i, . . . , ω(¯z,¯t)

(λ¯t

i

¯A(¯z,¯t)
y

∀¯t ∈ T , ∀y ∈ Y, ∀f ∈ F, ∀λ¯t

M (O,2)

y,x¯t,f (λ¯t

i) ≤ qf , ∀¯t ∈ T , ∀f ∈ F, ∀λ¯t

i ∈ Θ¯t,

...

) ≤ qf ,

(53)

(54)

∈ Ω(3,¯t),

(48)

(cid:88)

y∈Y

M (O,ˆz)

y,x¯t,f (λ¯t

i, . . . , ω(¯z,¯t)

i

∀¯t ∈ T , ∀f ∈ F, ∀λ¯t

i ∈ Θ¯t, ∀ω(3,¯t)

i

∈ Ω(3,¯t), . . . ,
∈ Ω(¯z,¯t),

∀ω(¯z,¯t)

i

...

(cid:18)

¯A(¯z,¯t)
y

) ≥

(λ¯t

i, . . . , ω(¯z,¯t)

i

)−

M (s)

f , M (T H,3)

y,x¯t,f (λ¯t

i, ω(3,¯t)

i

M (O,ˆz)

y,x¯t,f (λ¯t

i, . . . , ω(¯z,¯t)

i

(cid:88)

f ∈F

(cid:19)

M (L,ˆz)

y,x¯t (λ¯t

i, . . . , ω(¯z,¯t)

i

)

y(λ¯t
F3

i, ω(3,¯t)

i, . . . , ω(¯z,¯t)

i

),

∀¯t ∈ T , ∀y ∈ Y, ∀λ¯t

i

) . . . F¯z

y(λ¯t
i ∈ Θ¯t, ∀ω(3,¯t)

i

∈ Ω(3,¯t), . . . ,
∈ Ω(¯z,¯t),
(49)

∀ω(¯z,¯t)

i

M (L,2)

y,x¯t (λ¯t

i) + M (O,2)

i) ≥ k,

y,x¯t,f (λ¯t
∀¯t ∈ T , ∀y ∈ Y, ∀f ∈ F, ∀λ¯t

i ∈ Θ¯t,

(50)

), . . . , M (T H,¯z)

y,x¯t,f (λ¯t

)

i, . . . , ω(¯z,¯t)
i
∈ {0, 1},
i ∈ Θ¯t,
∈ Ω(¯z,¯t),

∀¯t ∈ T , ∀y ∈ Y, ∀f ∈ F, ∀λ¯t
∈ Ω(3,¯t), . . . , ∀ω(¯z,¯t)
∀ω(3,¯t)

i

i

M (O,2)

y,x¯t,f (λ¯t

i), M (L,2)

y,x¯t (λ¯t

y,x¯t,f (λ¯t

y,x¯t (λ¯t
i), . . . , M (O,ˆz)
i, . . . , ω(¯z,¯t)
M (L,ˆz)
∀¯t ∈ T , ∀y ∈ Y, ∀f ∈ F, ∀λ¯t
∈ Ω(3,¯t), . . . , ∀ω(¯z,¯t)
∀ω(3,¯t)

i, . . . , ω(¯z,¯t)
) ∈ {0, 1, . . .},
i ∈ Θ¯t,
∈ Ω(¯z,¯t).

),

i

i

i

i

(55)

(56)

17

REFERENCES

2202–2217, 2018.

[1] J. Du, E. Gelenbe, C. Jiang, H. Zhang, and Y. Ren, “Con-
tract design for trafﬁc ofﬂoading and resource allocation
in heterogeneous ultra-dense networks,” IEEE Journal on
Selected Areas in Communications, vol. 35, no. 11, pp.
2457–2467, 2017.

[2] K. Peng, J. Nie, N. Kumar, C. Cai, J. Kang, Z. Xiong, and
Y. Zhang, “Joint optimization of service chain caching
and task ofﬂoading in mobile edge computing,” Applied
Soft Computing, vol. 103, p. 107142, 2021.

[3] T. von Sawitzky, P. Wintersberger, A. Riener, and J. L.
Gabbard, “Increasing trust in fully automated driving:
route indication on an augmented reality head-up dis-
the 8th ACM International
play,” in Proceedings of
Symposium on Pervasive Displays, Palermo Italy, June
2019.

[4] A. Zanella, N. Bui, A. Castellani, L. Vangelista, and
M. Zorzi, “Internet of things for smart cities,” IEEE
Internet of Things journal, vol. 1, no. 1, pp. 22–32,
February 2014.

[5] S. Djahel, M. Salehie, I. Tal, and P. Jamshidi, “Adaptive
trafﬁc management for secure and efﬁcient emergency
services in smart cities,” in 2013 IEEE International Con-
ference on Pervasive Computing and Communications
Workshops (PERCOM Workshops).
IEEE, 2013, pp.
340–343.

[6] E. I. Vlahogianni, K. Kepaptsoglou, V. Tsetsos, and
M. G. Karlaftis, “A real-time parking prediction system
for smart cities,” Journal of Intelligent Transportation
Systems, vol. 20, no. 2, pp. 192–204, 2016.

[7] M. Chen, M. Mozaffari, W. Saad, C. Yin, M. Debbah, and
C. S. Hong, “Caching in the sky: Proactive deployment
of cache-enabled unmanned aerial vehicles for optimized
quality-of-experience,” IEEE Journal on Selected Areas
in Communications, vol. 35, no. 5, pp. 1046–1061, March
2017.

[8] H. Wang, J. Wang, J. Chen, Y. Gong, and G. Ding,
“Network-connected uav communications: Potentials and
challenges,” China Communications, vol. 15, no. 12, pp.
111–121, December 2018.

[9] N. Cheng, W. Xu, W. Shi, Y. Zhou, N. Lu, H. Zhou, and
X. Shen, “Air-ground integrated mobile edge networks:
Architecture, challenges, and opportunities,” IEEE Com-
munications Magazine, vol. 56, no. 8, pp. 26–32, August
2018.

[10] S. Koulali, E. Sabir, T. Taleb, and M. Azizi, “A green
strategic activity scheduling for uav networks: A sub-
modular game perspective,” IEEE Communications Mag-
azine, vol. 54, no. 5, pp. 58–64, May 2016.

[11] K. Ro, J.-S. Oh, and L. Dong, “Lessons learned: Applica-
tion of small uav for urban highway trafﬁc monitoring,”
in 45th AIAA aerospace sciences meeting and exhibit,
Reno, June 2007.

[12] J. Du, C. Jiang, H. Zhang, Y. Ren, and M. Guizani, “Auc-
tion design and analysis for sdn-based trafﬁc ofﬂoading
in hybrid satellite-terrestrial networks,” IEEE Journal on
Selected Areas in Communications, vol. 36, no. 10, pp.

[13] S. Dutta, M. Fahim, F. Haddadpour, H.

Jeong,
V. Cadambe, and P. Grover, “On the optimal recovery
threshold of coded matrix multiplication,” IEEE Transac-
tions on Information Theory, vol. 66, no. 1, pp. 278–301,
July 2019.

[14] Y. Liu, J. Nie, X. Li, S. H. Ahmed, W. Y. B. Lim, and
C. Miao, “Federated learning in the sky: Aerial-ground
air quality sensing framework with uav swarms,” IEEE
Internet of Things Journal, 2020.

[15] C. Tang, C. Zhu, X. Wei, H. Peng, and Y. Wang, “Integra-
tion of uav and fog-enabled vehicle: application in post-
disaster relief,” in IEEE 25th International Conference
on Parallel and Distributed Systems (ICPADS), Tianjin,
China, January 2019, pp. 548–555.

[16] N. H. Motlagh, M. Bagaa, and T. Taleb, “Uav-based
iot platform: A crowd surveillance use case,” IEEE
Communications Magazine, vol. 55, no. 2, pp. 128–134,
February 2017.

[17] Q. Yu, M. Maddah-Ali, and S. Avestimehr, “Polynomial
codes: an optimal design for high-dimensional coded
matrix multiplication,” IEEE Transactions on Network
Science and Engineering, pp. 4403–4413, May 2017.

[18] B. Wang, J. Xie, K. Lu, Y. Wan, and S. Fu, “On
batch-processing based coded computing for heteroge-
neous distributed computing systems,” arXiv preprint
arXiv:1912.12559, December 2019.

[19] J. R. Birge and F. Louveaux, “Introduction to stochastic

programming,” 2011.

[20] Z. Li, M. Xu, J. Nie, J. Kang, W. Chen, and S. Xie,
“Noma-enabled cooperative computation ofﬂoading for
blockchain-empowered internet of things: A learning
approach,” IEEE Internet of Things Journal, vol. 8, no. 4,
pp. 2364–2378, 2020.

[21] Y. Zhou, C. Pan, P. L. Yeoh, K. Wang, M. Elkashlan,
B. Vucetic, and Y. Li, “Secure communications for uav-
enabled mobile edge computing systems,” IEEE Trans-
actions on Communications, vol. 68, no. 1, pp. 376–388,
2019.

[22] F. Zhou, Y. Wu, R. Q. Hu, and Y. Qian, “Computa-
tion rate maximization in uav-enabled wireless-powered
mobile-edge computing systems,” IEEE Journal on Se-
lected Areas in Communications, vol. 36, no. 9, pp.
1927–1941, 2018.

[23] A. Asheralieva and D. Niyato, “Hierarchical game-
theoretic and reinforcement learning framework for com-
putational ofﬂoading in uav-enabled mobile edge com-
puting networks with multiple service providers,” IEEE
Internet of Things Journal, vol. 6, no. 5, pp. 8753–8769,
2019.

[24] J. Zhang, L. Zhou, F. Zhou, B.-C. Seet, H. Zhang,
Z. Cai, and J. Wei, “Computation-efﬁcient ofﬂoading and
trajectory scheduling for multi-uav assisted mobile edge
computing,” IEEE Transactions on Vehicular Technology,
vol. 69, no. 2, pp. 2114–2125, 2020.

[25] X. Zhang, Y. Zhong, P. Liu, F. Zhou, and Y. Wang,
“Resource allocation for a uav-enabled mobile-edge com-
puting system: Computation efﬁciency maximization,”

IEEE Access, vol. 7, pp. 113 345–113 354, 2019.
[26] C. M. Wang, “Stochastic integer programming: Decom-
position methods and industrial applications,” June 2014.
[27] W. H. Fleming, S. Sethi, and H. M. Soner, “An optimal
stochastic production planning problem with randomly
ﬂuctuating demand,” SIAM Journal on Control and opti-
mization, vol. 25, no. 6, pp. 1494–1502, February 1987.
[28] C. L. Lara, J. D. Siirola, and I. E. Grossmann, “Elec-
tric power infrastructure planning under uncertainty:
stochastic dual dynamic integer programming (sddip) and
parallelization scheme,” Optimization and Engineering,
vol. 21, no. 4, pp. 1243–1281, October 2020.

[29] C. Li and I. E. Grossmann, “A review of stochastic pro-
gramming methods for optimization of process systems
under uncertainty,” Frontiers in Chemical Engineering,
vol. 2, p. 34, January 2021.

[30] S. Chaisiri, B.-S. Lee, and D. Niyato, “Optimization of
resource provisioning cost in cloud computing,” IEEE
transactions on services Computing, vol. 5, no. 2, pp.
164–177, February 2011.

[31] S. Sawadsitang, R. Kaewpuang, S. Jiang, D. Niyato, and
P. Wang, “Optimal stochastic delivery planning in full-
truckload and less-than-truckload delivery,” in 2017 IEEE
85th Vehicular Technology Conference (VTC Spring),
Sydney, NSW, Australia, June 2017.

[32] Y. Liu, R. Sioshansi, and A. J. Conejo, “Multistage
stochastic investment planning with multiscale represen-
tation of uncertainties and decisions,” IEEE Transactions
on Power Systems, vol. 33, no. 1, pp. 781–791, April
2017.

[33] S. Kartik and C. S. R. Murthy, “Task allocation algo-
rithms for maximizing reliability of distributed comput-
ing systems,” IEEE Transactions on computers, vol. 46,
no. 6, pp. 719–724, June 1997.

[34] K. Lu, J. Xie, Y. Wan, and S. Fu, “Toward uav-based
airborne computing,” IEEE Wireless Communications,
vol. 26, no. 6, pp. 172–179, August 2019.

[35] B. Wang, J. Xie, K. Lu, Y. Wan, and S. Fu, “Coding
for heterogeneous uav-based networked airborne com-
puting,” in IEEE Globecom Workshops (GC Wkshps),
Waikoloa, HI, March 2019.

[36] K. Lee, M. Lam, R. Pedarsani, D. Papailiopoulos, and
K. Ramchandran, “Speeding up distributed machine
learning using codes,” IEEE Transactions on Information
Theory, vol. 64, no. 3, pp. 1514–1529, August 2017.
[37] R. Tandon, Q. Lei, A. G. Dimakis, and N. Karam-
patziakis, “Gradient coding: Avoiding stragglers in dis-
tributed learning,” in International Conference on Ma-
chine Learning, Sydney, Australia, August 2017, pp.
3368–3376.

[38] K. Lee, C. Suh, and K. Ramchandran, “High-dimensional
coded matrix multiplication,” in IEEE International Sym-
posium on Information Theory (ISIT), Aachen, Germany,
August 2017, pp. 2418–2422.

[39] Q. Yu, S. Li, N. Raviv, S. M. M. Kalan,
M. Soltanolkotabi, and S. A. Avestimehr, “Lagrange
coded computing: Optimal design for resiliency, security,
and privacy,” in the 22nd International Conference on

18

Artiﬁcial Intelligence and Statistics, Naha, Okinawa,
Japan, April 2019, pp. 1215–1225.

[40] S. Li, M. A. Maddah-Ali, and A. S. Avestimehr,
“Coded mapreduce,” in 53rd Annual Allerton Conference
on Communication, Control, and Computing (Allerton),
Monticello, IL, April 2015, pp. 964–971.

[41] S. Dutta, V. Cadambe, and P. Grover, ““short-dot”: Com-
puting large linear transforms distributedly using coded
short dot products,” IEEE Transactions on Information
Theory, vol. 65, no. 10, pp. 6171–6193, July 2019.
[42] Y. Zeng, J. Xu, and R. Zhang, “Energy minimization
for wireless communication with rotary-wing uav,” IEEE
Transactions on Wireless Communications, vol. 18, no. 4,
pp. 2329–2345, March 2019.

[43] Q. Hu, Y. Cai, G. Yu, Z. Qin, M. Zhao, and G. Y.
Li, “Joint ofﬂoading and trajectory design for uav-
enabled mobile edge computing systems,” IEEE Internet
of Things Journal, vol. 6, no. 2, pp. 1879–1892, October
2018.

[44] S. Dutta, V. Cadambe, and P. Grover, “Coded convolution
for parallel and distributed computing within a deadline,”
in IEEE International Symposium on Information Theory
(ISIT), Aachen, Germany, August 2017, pp. 2403–2407.
[45] Q.-V. Pham, M. Zeng, R. Ruby, T. Huynh-The, and W.-J.
Hwang, “Uav communications for sustainable federated
learning,” arXiv preprint arXiv:2103.11073, March 2021.
16-
256-qam.”
128-qam,
https://www.electronics-

qam,
[Online].
notes.com/articles/radio/modulation/quadrature-
amplitude-modulation-types-8qam-16qam-32qam-
64qam-128qam-256qam.php

Available:

formats:

32-qam,

64-qam,

[46] E.

8-qam,

Notes,

“Qam

[47] Z. Zhou, J. Feng, Z. Chang, and X. Shen, “Energy-
efﬁcient edge computing service provisioning for ve-
hicular networks: A consensus admm approach,” IEEE
Transactions on Vehicular Technology, vol. 68, no. 5, pp.
5087–5099, March 2019.

[48] J. Chen, S. Chen, S. Luo, Q. Wang, B. Cao, and X. Li,
“An intelligent task ofﬂoading algorithm (itoa) for uav
edge computing network,” Digital Communications and
Networks, vol. 6, no. 4, pp. 433–443, November 2020.
[49] M. Hua, Y. Wang, Q. Wu, H. Dai, Y. Huang, and
L. Yang, “Energy-efﬁcient cooperative secure trans-
mission in multi-uav-enabled wireless networks,” IEEE
Transactions on Vehicular Technology, vol. 68, no. 8, pp.
7761–7775, June 2019.

[50] J. S. Ng, W. Y. B. Lim, H.-N. Dai, Z. Xiong,
J. Huang, D. Niyato, X.-S. Hua, C. Leung, and
C. Miao, “Joint auction-coalition formation framework
for communication-efﬁcient federated learning in uav-
enabled internet of vehicles,” IEEE Transactions on Intel-
ligent Transportation Systems, vol. 22, no. 4, December
2020.

[51] N. Bezzo, K. Mohta, C. Nowzari, I. Lee, V. Kumar,
and G. Pappas, “Online planning for energy-efﬁcient and
disturbance-aware uav operations,” in IEEE/RSJ Inter-
national Conference on Intelligent Robots and Systems
(IROS), Daejeon, Korea (South), December 2016, pp.

5027–5033.

[52] T. Chu, M. J. Starek, J. Berryhill, C. Quiroga, and
M. Pashaei, “Simulation and characterization of wind
impacts on suas ﬂight performance for crash scene re-
construction,” Drones, vol. 5, no. 3, p. 67, 2021.
[53] S. Sawadsitang, D. Niyato, P. Tan, and P. Wang, “Joint
ground and aerial package delivery services: A stochastic
optimization approach,” IEEE Transactions on Intelligent
Transportation Systems, vol. 20, no. 6, pp. 2241–2254,
October 2019.

[54] G. Mitsis, E. E. Tsiropoulou, and S. Papavassiliou, “Data
ofﬂoading in uav-assisted multi-access edge comput-
ing systems: A resource-based pricing and user risk-
awareness approach,” Sensors, vol. 20, no. 8, p. 2434,
April 2020.

[55] M. Dyer and L. Stougie, “Computational complexity of
stochastic programming problems,” Mathematical Pro-
gramming, vol. 106, no. 3, pp. 423–432, December 2006.
[56] S. Rajendran and A. R. Ravindran, “Platelet ordering
policies at hospitals using stochastic integer program-
ming model and heuristic approaches to reduce wastage,”
Computers & Industrial Engineering, vol. 110, pp. 151–
164, 2017.

[57] L.

T.

Authority,
1,

“Singapore
2021.

data,”
[Online]. Available:

trafﬁc

Accessed Aug.
https://data.gov.sg/dataset/trafﬁc-images

[58] DJI, “Dji,” Accessed Aug. 1, 2021. [Online]. Available:

https://www.dji.com/sg

[59] D. Chattopadhyay, “Application of general algebraic
modeling system to power system optimization,” IEEE
Transactions on Power Systems, vol. 14, no. 1, pp. 15–
22, February 1999.

[60] G. D. Corporation, “General Algebraic Modeling System
(GAMS) Release 24.2.1,” Washington, DC, USA, 2013.
[Online]. Available: http://www.gams.com/

19

Wei Yang Bryan Lim is currently an Alibaba Talent
Programme PhD candidate with the Alibaba-NTU
Joint Research Institute (JRI), Nanyang Technolog-
ical University (NTU), Singapore. Prior to joining
the JRI in 2019, he graduated with two First-Class
Honors in Economics and Business Administration
(Finance) from the National University of Singapore
(NUS). During his PhD candidature, he has won
5 Best Paper Awards including in the IEEE Wire-
less Communications and Networking Conference
(WCNC) and the IEEE ComSoc SPCC Best Paper
Award. He regularly serves as a reviewer in leading journals and ﬂagship
conferences and is currently a review board member of the IEEE Transactions
on Parallel and Distributed Systems and the assistant to the Editor-in-Chief
of the IEEE Communications Surveys & Tutorials.

Zehui Xiong is currently an Assistant Professor in
the Pillar of Information Systems Technology and
Design, Singapore University of Technology and De-
sign. Prior to that, he was a researcher with Alibaba-
NTU Joint Research Institute, Singapore. He re-
ceived the PhD degree in Nanyang Technological
University, Singapore. He was the visiting scholar
at Princeton University and University of Waterloo.
His research interests include wireless communica-
tions, network games and economics, blockchain,
and edge intelligence. He has published more than
140 research papers in leading journals and ﬂagship conferences and many of
them are ESI Highly Cited Papers. He has won over 10 Best Paper Awards
in international conferences and is listed in the World’s Top 2% Scientists
identiﬁed by Stanford University. He is now serving as the editor or guest
editor for many leading journals including IEEE JSAC, TVT, IoTJ, TCCN,
TNSE, ISJ. He is the recipient of IEEE TCSC Early Career Researcher Award
for Excellence in Scalable Computing, IEEE CSIM Technical Committee Best
Journal Paper Award, IEEE SPCC Technical Committee Best Paper Award,
IEEE VTS Singapore Best Paper Award, Chinese Government Award for
Outstanding Students Abroad, and NTU SCSE Best PhD Thesis Runner-Up
Award. He is the Founding Vice Chair of Special Interest Group on Wireless
Blockchain Networks in IEEE Cognitive Networks Technical Committee.

-

A User’s Guide, GAMS

[61] GAMS
24.2.1,
GAMS
Washington, DC, USA, 2013.
http://www.gams.com/dd/docs/bigdocs/GAMSUsersGuide.pdf

Release
Corporation,
[Online]. Available:

Development

[62] S. Chaisiri, B.-S. Lee, and D. Niyato, “Optimal virtual
machine placement across multiple cloud providers,”
in IEEE Asia-Paciﬁc Services Computing Conference
(APSCC), Singapore, January 2009, pp. 103–110.

Dusit Niyato (M’09-SM’15-F’17) is currently a
professor in the School of Computer Science and
Engineering, at Nanyang Technological University,
Singapore. He received B.Eng. from King Mongkuts
Institute of Technology Ladkrabang (KMITL), Thai-
in Electrical and Com-
land in 1999 and Ph.D.
puter Engineering from the University of Manitoba,
Canada in 2008. His research interests are in the
areas of Internet of Things (IoT), machine learning,
and incentive mechanism design.

Wei Chong Ng received B.Eng. degree in electri-
cal and electronic engineering (Highest Distinction)
from Nanyang Technological University, Singapore
in 2020. He is currently pursuing the Ph.D. degree
with Alibaba Group and Alibaba-NTU Joint Re-
search Institute, Nanyang Technological University,
Singapore. His research interests include the Meta-
verse, stochastic integer programming, and edge
computing.

Chunyan Miao received the BS degree from Shan-
dong University, Jinan, China,
in 1988, and the
MS and PhD degrees from Nanyang Technological
University, Singapore, in 1998 and 2003, respec-
tively. She is currently a professor in the School
of Computer Science and Engineering, Nanyang
Technological University (NTU), and the director of
the Joint NTU-UBC Research Centre of Excellence
in Active Living for the Elderly (LILY). Her research
focus on infusing intelligent agents into interactive
new media (virtual, mixed, mobile, and pervasive
media) to create novel experiences and dimensions in game design, interactive
narrative, and other real world agent systems.

20

Zhu Han (S’01–M’04-SM’09-F’14) received the
B.S. degree in electronic engineering from Tsinghua
University, in 1997, and the M.S. and Ph.D. degrees
in electrical and computer engineering from the
University of Maryland, College Park, in 1999 and
2003, respectively.

From 2000 to 2002, he was an R&D Engineer of
JDSU, Germantown, Maryland. From 2003 to 2006,
he was a Research Associate at the University of
Maryland. From 2006 to 2008, he was an assistant
professor at Boise State University, Idaho. Currently,
he is a John and Rebecca Moores Professor in the Electrical and Computer
Engineering Department as well as in the Computer Science Department at the
University of Houston, Texas. His research interests include wireless resource
allocation and management, wireless communications and networking, game
theory, big data analysis, security, and smart grid. Dr. Han received an
NSF Career Award in 2010,
the Fred W. Ellersick Prize of the IEEE
Communication Society in 2011, the EURASIP Best Paper Award for the
Journal on Advances in Signal Processing in 2015, IEEE Leonard G. Abraham
Prize in the ﬁeld of Communications Systems (best paper award in IEEE
JSAC) in 2016, and several best paper awards in IEEE conferences. Dr. Han
was an IEEE Communications Society Distinguished Lecturer from 2015-
2018, AAAS fellow since 2019, and ACM distinguished Member since 2019.
Dr. Han is a 1% highly cited researcher since 2017 according to Web of
Science. Dr. Han is also the winner of the 2021 IEEE Kiyo Tomiyasu
Award, for outstanding early to mid-career contributions to technologies
holding the promise of innovative applications, with the following citation:
“for contributions to game theory and distributed management of autonomous
communication networks.”

Dong In Kim (Fellow, IEEE) received the Ph.D.
degree in electrical engineering from the University
of Southern California, Los Angeles, CA, USA, in
1990. He was a Tenured Professor with the School
of Engineering Science, Simon Fraser University,
Burnaby, BC, Canada. Since 2007, he has been
an SKKU-Fellowship Professor with the College
of Information and Communication Engineering,
Sungkyunkwan University (SKKU), Suwon, South
Korea. He is a Fellow of the Korean Academy
of Science and Technology and a Member of the
National Academy of Engineering of Korea. He has been a ﬁrst recipient of the
NRF of Korea Engineering Research Center in Wireless Communications for
RF Energy Harvesting since 2014. He has been listed as a 2020 Highly Cited
Researcher by Clarivate Analytics. From 2001 to 2020, he served as an editor
and an editor at large of Wireless Communications I for the IEEE Transactions
on Communications. From 2002 to 2011, he also served as an editor and a
Founding Area Editor of Cross-Layer Design and Optimization for the IEEE
Transactions on Wireless Communications. From 2008 to 2011, he served as
the Co-Editor-in-Chief for the IEEE/KICS Journal of Communications and
Networks. He served as the Founding Editor-in-Chief for the IEEE Wireless
Communications Letters, from 2012 to 2015. He was selected the 2019
recipient of the IEEE Communications Society Joseph LoCicero Award for
Exemplary Service to Publications. He is the General Chair for IEEE ICC
2022 in Seoul.

