Imitation Learning for Autonomous Trajectory Learning of Robot
Arms in Space

RB Ashith Shyam1

Zhou Hao1

Umberto Montanaro1

Gerhard Neumann2

0
2
0
2

g
u
A
0
1

]

O
R
.
s
c
[

1
v
7
0
0
4
0
.
8
0
0
2
:
v
i
X
r
a

Abstract— This work adds on to the on-going efforts to
provide more autonomy to space robots. Here the concept of
programming by demonstration or imitation learning is used
for trajectory planning of manipulators mounted on small
spacecraft. For greater autonomy in future space missions
and minimal human intervention through ground control, a
robot arm having 7-Degrees of Freedom (DoF) is envisaged
for carrying out multiple tasks like debris removal, on-orbit
servicing and assembly. Since actual hardware implementation
of microgravity environment is extremely expensive, the demon-
stration data for trajectory learning is generated using a model
predictive controller (MPC) in a physics based simulator. The
data is then encoded compactly by Probabilistic Movement
Primitives (ProMPs). This ofﬂine trajectory learning allows
faster reproductions and also avoids any computationally ex-
pensive optimizations after deployment in a space environment.
It is shown that the probabilistic distribution can be used
to generate trajectories to previously unseen situations by
conditioning the distribution. The motion of the robot (or
manipulator) arm induces reaction forces on the spacecraft and
hence its attitude changes prompting the Attitude Determina-
tion and Control System (ADCS) to take large corrective action
that drains energy out of the system. By having a robot arm with
redundant DoF helps in ﬁnding several possible trajectories
from the same start to the same target. This allows the ProMP
trajectory generator to sample out the trajectory which is
obstacle free as well as having minimal attitudinal disturbances
thereby reducing the load on ADCS.

Keywords: motion planning, probabilistic movement primi-

tives, robot manipulation, learning from demonstrations

I. INTRODUCTION

Robots that operate in space are very much limited due
to the unique challenges encountered like communication
latency, lack of power sources and extreme safety require-
ments. Current robots operating in space are either controlled
from ground stations or tele-operated. As a result, there is
large scale research going on to make space robots more
autonomous.

One of the critical issues that require immediate attention
is the ever increasing space junk, especially in the past
decade as it poses a huge threat to the functioning spacecraft
(satellites, International Space Station etc.). There are more
than half a million debris in Lower Earth Orbit (LEO)[1] and
it is estimated that the space environment can be stabilised
when on the order of 5â ˘A ¸S10 objects are removed from
LEO per year [2]. Although several methods for space debris
removal has been proposed like harpoons, nets, tentacles [3],
using robotic arms to capture still remain the preferred choice
as it can be extended to various other application areas like

University of Surrey, a.rajendrababu@surrey.ac.uk
Karlshule Institute of Technology

Fig. 1. Left: Home position of the Future Debris Removal Orbital Manip-
ulator (SDROM) (a 7-DoF redundant robot arm attached to the spacecraft);
Right: Position of the Future Debris Removal Orbital Manipulator (SDROM)
with Manipulator capturing an orbital debris.

on-orbit servicing & assembly and autonomous rendezvous
& docking.

Spacecraft require ﬂying at a nominal attitude to charge
battery, communicate with the ground station and determine
its attitude and position. However orbital environment be-
ing micro-gravitational poses a difﬁcult challenge since the
spacecraft bus to which the robot-arm is attached is ﬂoating
and any motion of the robot-arm would induce an attitudinal
disturbance to the spacecraft. For free-ﬂying spacecraft, the
attitude determination and control system (ADCS) contin-
uously compensate for the disturbances from the operation
of the manipulator to maintain the nominal attitude of the
spacecraft and hence a lot of energy is consumed.

Free-ﬂoating is a conceptual operating state of the space-
craft (when ADCS is switched off) installed with robotic
arm. This type of spacecraft leave the attitude uncontrolled
during the operation of the robotic arm. However, leaving
the attitude of the spacecraft tumbled is unsafe and not ideal
for the power system and the sensors used for determining
its attitude. For both cases, we want the trajectory planner
of the robotic arm to consider two important aspects, viz.,

1) minimal attitudinal disturbances of the spacecraft bus

due to manipulator operation

2) computationally inexpensive for minimal power con-

sumption.

 
 
 
 
 
 
In this work, we demonstrate how programming by
demonstrations or imitation learning [4], [5] can be used
to plan trajectory of a 7-DoF robot arm attached to small
spacecraft. The learned trajectories are efﬁciently encoded
as a probabilistic distribution (PD) from which we can
sample out
trajectories for reproduction. This method is
computationally efﬁcient and is capable of minimizing the
attitude disturbances (as shown in section V-C).

Optimal control methods [6], [7], [8] are well developed
but it often get stuck at local minima due to poor initial
guess and if successful, produces only a single trajectory .
However, modeling as a PD captures the mean as well as the
variance of the trajectories. The variance information could
be used for sampling initial guess values form the PD for
optimization based local planners to perturb the trajectory to
avoid obstacles. It is known that the quality of initial guess
determines the computational load and avoidance of local
minima [4].

Future space robots is expected to have human arm like
dexterity. Hence it is proposed to use a 7-DoF redundant
robot arm. This has the added advantage that the planning
and control can still be carried out effectively even if a joint
encoder or sensor fails.

II. RELATED WORK

The analysis of the kinematic and dynamic of spacecraft
with manipulator is well established. Exploiting the non-
holonomic behavior of the orbital manipulator system for
spacecraft attitude and end-effector trajectory control have
been studied extensively. It usually involves joint space
techniques to control both the motion of the arm and some-
times the spacecraft attitude [9], [10]. Early research used
mapping methods to correlate the end-effector position with
the induced disturbances on the spacecraft to minimize the
attitude disturbances [11], [12]. However, the mapping meth-
ods are computationally inefﬁcient and furthermore, higher
DoF manipulators will signiﬁcantly increase the mapping
difﬁculty and are challenging to ﬁnd optimised paths.

The work by Nenchev et.al. [13] proves that for certain
manipulator motions, no reaction forces are induced on
the spacecraft. As mentioned in their work, such solutions
exists only for some special cases where integrability of the
reaction null space velocity exists. This work then inspired
many following research to exploit and optimise the control
method for spacecraft with manipulator [14], [15], [16].

More recently, researchers have attempted to solve the
problem of trajectory planning by minimizing a cost func-
tional which satisﬁes certain criteria. For example [6], [17]
minimizes the power consumption. Non-linear Model Pre-
dictive Control (NMPC) have been used for control of
free-ﬂoating spacecraft [7] but it remains to be seen how
such heavy computations can be carried out by an on-
board spacecraft computer. The other focus is post-panning
impedance control of the orbital manipulator to free-motion
targets. These researches aim to solve the kinodynamics in
order to ﬁnely control the impact force for safe and accurate
manipulation in the micro-gravity environment [18].

A. Contributions

The main contributions of this work are
1) Imitation learning based trajectory planning:

• First the trajectories are learned from demonstra-
tions and encoded as a probabilistic distribution
(PD). Planning to an unseen target only requires
sampling and conditioning of the PD. This avoids
computationally expensive optimization methods
(which usually have a cost function to minimize)
to run on on-board space computer.
2) Minimize attitude disturbances during capture:

• Sampling from a PD for our redundant manipula-
tor arm can produce inﬁnite possible trajectories
theoretically. Attitude disturbances for each trajec-
tory can be easily computed and is possible to
choose the trajectory with the least disturbance.

This paper is organized as follows. Section III gives
brieﬂy kinematic and dynamic formulations of the spacecraft
manipulator system. In section IV, we discuss the method
used for generating trajectory data for learning. Section V
provides the equations by which trajectories can be com-
pactly encoded as a probabilistic distribution which can be
used further for reproduction to unseen situations. Section VI
presents the simulation results and section VII gives the
conclusions and future directions.

III. DYNAMIC FORMULATION

formulation makes

The kinematic and dynamic formulation of free-ﬂoating
spacecraft have been studied previously [19], [20], [21]. Here
we give a abridged version of the same for completeness.
to compute various
This
matrices especially the coriolis and centrifugal which
requires symbolic differentiation of the mass matrix. The
whole formulation is carried out using Python’s symbolic
’C’ code
library called ’sympy’
generation as well for faster execution.

[22] which supports

it easier

A. Nomenclature

• mi : mass of the ith link, the ﬁrst being the spacecraft
• ri : position vector of the centre of mass of ith link

with respect to the inertial co-ordinate system

• ˙ri : linear velocity of the centre of mass of ith link with

respect to the inertial co-ordinate system

• Ii : moment of inertia of ith link with respect to the

inertial co-ordinate system

• ωi : angular velocity of the ith link with respect to the

inertial co-ordinate system

• ai : vector pointing from the joint i to the centre of

mass of link i

• bi : vector pointing from the centre of mass of link i to

joint i + 1

• li : length of ith link
• φs : vector of attitude angles (yaw, pitch and roll) of

the spacecraft

• φm : vector of manipulator joint angles

B. Assumptions

1) Momenta is conserved and is zero at the beginning
2) Gravity is negligible
3) The Centre of Mass of the system coincides with the

origin of the inertial co-ordinate system

4) The motion planning is carried out when the satellite-
manipulator system at a safe state and is sufﬁciently
close to the target.

The mass centre of the spacecraft-manipulator arm can be
described as

n
(cid:88)

i=0

miri = 0

(1)

The linear and angular momentum conservation equations
become

given by eq. (4). The differential kinematics of the satellite-
manipulator arm system gives the jacobian matrix of the
system which consists of the manipulator part (Jm) and the
satellite part (Js). Thus the end-effector velocity, veef , and
the momentum conservation can be expressed as in [19]

veef = Js
0 = Is

˙φs + Jm
˙φs + Im

˙φm
˙φm

(7a)

(7b)

From eq. (7), the end-effector velocity can be solved as
a function of the manipulator joint rates and generalized
jacobian, J ∗ given by (Jm − JsI −1

s Im)
s Im) ˙φm

veef = (Jm − JsI −1
= J ∗ ˙φm

(8)

n
(cid:88)

mi ˙ri = 0

i=0
n
(cid:88)

i=0

Iiωi = 0

From Fig 2, the geometrical relationship between the various

(2)

(3)

where Is and Im are respectively the satellite and manipula-
tor inertia matrices expressed in inertial co-ordinate system
[19].

The Kinetic energy, T, can then be expressed as

T =

n
(cid:88)

i=0

mi(vi . vi) =

1
2

˙φT M (φ) ˙φ

(9)

where M (φ) is the mass matrix and φ = [φT
centripetal and coriolis vector, C, is given by

s φT

m]T . The

C(φ, ˙φ) = ˙M (φ) ˙φ −

1
2










˙φT ∂M (φ)
∂φ1
˙φT ∂M (φ)
∂φ2
.
.
˙φT ∂M (φ)
∂φn










˙φ
˙φ

˙φ

(10)

Fig. 2. Schematic diagram of a spacecraft-manipulator arm

vectors can be written as

ri = ri−1 + ai + bi−1

(4)

Eq. (1) and eq. (4) can be solved simultaneously to obtain
the centre of mass of the spacecraft and can be expressed as
in eq. (5)

rs = r0 = −

n−1
(cid:88)

Kij(bi + ai+1)

(5)

i=0
i
(cid:88)

Kij = 1 −

j=0

vs =

d
dt

rs

mj
W

(6)

where W is the total mass of the system, rs and vs are
the position vector and linear velocity of the spacecraft
with all vectors expressed with respect to the inertial co-
ordinate system. The position vector and velocity of the
rest of the links can be found using the recursive relation

The equation of motion of the free-ﬂoating spacecraft ma-
nipulator system can be written as

M (φ) ¨φ + C(φ, ˙φ) =

(cid:21)

(cid:20)0
τ

(11)

where τ is the control torque to be applied at the manipulator
joints.

IV. DATA GENERATION FOR TRAJECTORY
LEARNING

The method introduced here requires data samples for
trajectory learning. A trajectory, ζ,
is a mapping of all
the robot conﬁguration (x) from start to goal with time.
Mathematically it can be represented as ζ : [0, 1] −→ x
where x ∈ Rd and d corresponds to the number of joints
with ζ(0) and ζ(1) being the start and goal conﬁgurations
respectively. These trajectories could be generated by a
human expert by demonstrations [23], [24]. As real hardware
orbital simulation of micro-gravity environment being ex-
tremely expensive, we demonstrate the concept by generating
trajectories using an optimal control algorithm [25]. We make
use of the redundancy of the chosen 7-DoF manipulator
arm to generate several trajectories which starts at the home
position (Fig 1) and go to a particular goal state given by
the vision system. Once enough trajectories are generated,

the goal state is changed and the process is repeated until
the entire workspace is covered.

The cost function for trajectory generation is given as

J = xT

T PT xT +

t Qtxt + uT
xT

t Rtut dt

(12)

(cid:90) T −1

t0
subject to the constraints

˙xt = Atxt + Btut

xt(0) = x0

where xt represents the state (position & velocity in joint
space) of the manipulator joints at time t. For a space-
manipulator, once the manipulator states have been found
out, the satellite states can be determined from eq. (7) and
integration. Here Qt and Rt are respectively the time varying
state and control cost matrices, PT is the stabilizing matrix
obtained by the solution of algebraic Ricatti equation at
every time instant [26], t0, T are the initial and ﬁnal time
respectively. The trajectory data samples in simulation are
obtained by the following methods.

1) varying the cost matrices thus encouraging certain joint
motions and discouraging certain other joint motions.
2) introducing artiﬁcial obstacles (elastic bands [27]) be-
tween the start and goal point so as to force the
redundant robot to follow a different trajectory to the
same goal point

3) introduction of noise into the constraint equation of the

system given by eq. (12).

V. TRAJECTORY ENCODING & REPRODUCTION

The generated trajectory data samples need to be repre-
sented in an efﬁcient manner for future planning and control.
It has to be mentioned that the trajectory planning is carried
out when the spacecraft-robot arm is sufﬁciently close to the
target and is safe to operate. Here we demonstrate the core
idea of this work by representing the generated trajectories
as a probabilistic distribution. We ﬁnd that Gaussian distri-
butions ﬁt all the essential criteria for efﬁciently representing
trajectories as it depends only on two parameters i.e. mean
and covariance. For reproduction of trajectories to unseen
situations, we use the conditioning property of the Gaussian
as explained in section V-B.

A. Gaussian trajectory encoding

The encoding of the trajectories can be expressed as a lin-
˙ψt]T is
ear basis function model as in eq. (13) where ψt = [ψt
the basis function (see APPENDIX I), w a parameter vector,
plus some error (cid:15). Such a representation reduces the number
of parameters and facilitates learning. Assuming trajectories
to be independent and identically distributed, the probability
of observing a trajectory, ζ, given the parameter vector w
can be written as in eq. (14) [5]

xt =

p(ζ|w) =

(cid:20)qt
˙qt
(cid:89)

t

(cid:21)

(cid:21)

=

w + (cid:15)x

(cid:20)ψt
˙ψt
N (xt|ψtψtψtw, Σx)

(13)

(14)

where (cid:15)x ∼ N (0, Σx) represents the zero-mean Gaussian
noise associated with each observation and xt is the state.
There are several possible choices for the basis function.
Here we use a Gaussian radial basis function representing
stroke based movements which is ideal for motion planning
[5]. The parameter vector w is modeled as another Gaussian
distribution with parameter θ = {µw, Σw} to capture the
variance of the trajectories. (Here µw and Σw are respectively
the mean and variance of the Gaussian). Using the linear
transformation property of the Gaussian distribution (see
APPENDIX II), the state can be represented as

(cid:90)

p(xt; θ) =

N (xt|ψtψtψtw, Σx)N (w|µw, Σw)dw

= N (xt|µw, ψtψtψtΣwψtψtψt

T + Σx)

(15)

For the generated trajectory samples, the parameter vector w
can be estimated as a ridge regression and is given in eq. (16)
wi = (ΨT Ψ + λI)−1 ΨT Xi

(16)

where Xi is a 1-D concatenated vector (see APPENDIX III)
of all joint values during all time steps from the ith trajectory
sample and Ψ is a block diagonal matrix with each block
diagonal being ψtψtψt. The mean and variance of the parameter
vector, w, are estimated as in eq. (17)

µw =

Σw =

1
N

1
N

N
(cid:88)

i=1
N
(cid:88)

i=1

wi

(wi − µw)(wi − µw)T

(17)

where N is the number of demonstrations.

All the above computations could be carried out once the
spacecraft manipulator design is complete and the whole
trajectory planning problem could then be stated as taking
the robot from ζ(0) (home position) to ζ(1) which is the
pose of the target estimated by the vision system.

B. Trajectory planning to unseen situations

The data generation described in section IV needs several
trajectory samples to accurately represent the workspace of
the spacecraft-manipulator. However, workspace can have
inﬁnite possible locations of the target theoretically and it
is impossible to do data generation for all possible goal
poses. The Gaussian distribution introduced above can solve
this problem by using the conditional distribution property.
A probabilistic trajectory distribution can be conditioned to
follow not only the desired start and goal state but also the
via-points [5]. For example, if our trajectory has to pass
through a desired state x∗
the new mean and variance of
t
the conditioned trajectory will be
= µw + L(x∗
= Σw − Lψtψtψt

t − ψtψtψt
T Σw

µ[new]
w
Σ[new]
w

T µw)

(18)

where L is

L = Σwψtψtψt(Σ∗

x + ψtψtψt

T Σwψtψtψt)−1

(19)

x is the desired accuracy to which the the state (x∗
t )

and Σ∗
is to be reached

C. Cost of a trajectory

The cost of a trajectory is a scalar which estimates how
much the attitude of the spacecraft changes when the robot
arm follows a particular trajectory. It is deﬁned as follows.

Q = c2 Σ ˙φT
s

˙φs + Σ vT

s vs

(20)

where ˙φs (from eq. (7b)) and vs (from eq. (6)) are re-
spectively the angular and linear velocities of the spacecraft
calculated at each discrete time step from initial to ﬁnal pose,
c is a angular to linear conversion coefﬁcient which allows
to combine an angular value with a linear value and Σ is the
summation symbol. The minimum cost corresponds to the
trajectory having minimal disturbances.

D. Algorithm

TABLE I
DH PARAMETERS OF THE ROBOT ARM

Joint

α (rad)

a (m)

d (m)

θ (rad)

1

2

3

4

5

6

7

-

-

-

π
2
π
2
π
2
π
2
π
2
π
2
π
2

0.0

0.0

0.9

0.9

0.8

0.8

0.0

0.5

0.0

0.0

0.0

0.0

0.0

0.8

θ1

θ2

θ3

θ4

θ5

θ6

θ7

TABLE II
SIMULATION PARAMETERS

The algorithm can be summarised as given below

• Given:

– Start, ζ(0)
– Trajectory data from the optimal control (joint

Satellite
L 0
200.0
1400.0
1400.0
2040.0

Mass (kg)
Ix
Iy
Iz

L 1

20.0
0.10
0.10
0.10

L 2

30.0
0.25
25.0
25.0

L 3

30.0
0.25
25.0
25.0

L 4

20.0
0.25
25.0
25.0

L 5

20.0
0.25
25.0
25.0

L 6

20.0
0.25
25.0
25.0

L 7

20.0
0.25
25.0
25.0

parameters)

– DH table of the robot

• Precompute:

– Compute the basis function, Ψ
– Compute the mean, µw and covariance, Σw of the

parameter vector from trajectory data.

• Repeat for multiple debris removal:

– Estimate target pose from vision system, ζ(1)
and Σnew
– Compute µnew
– Sample trajectories (say 100) from the conditioned

w

w

distribution using µnew

and Σnew
w
– For each trajectory, ﬁnd the cost
– Select the trajectory having minimum cost

w

VI. SIMULATION RESULTS

The Denavit-Hartenberg [28] parameters of the robot
arm is shown in Table I and the parameters used for the
simulation are shown in Table II.

π
4

π
2

, −

, 0.0, 0.0,

Fig 3 shows the home position of the robot arm at-
tached to the spacecraft corresponding to the joint values,
π
, 0.0). Twenty trajectories in
(0.0, 5
2
joint space are sampled out from the conditioned distribution.
For the twenty joint space trajectories, the corresponding
end-effector trajectories in task space are found out and
are shown in Fig 3. Fig 4 shows the cost of each of the
trajectories and the trajectory which has the minimum cost.
For this trajectory, the induced motion on the spacecraft is
shown in Fig 5

VII. CONCLUSION

To the authors’ knowledge, this is the ﬁrst time imitation
learning is used in space robot arm trajectory planning for
free ﬂoating spacecraft. This work addresses the issue of
minimizing attitude disturbance spacecraft bus when the arm
reaches out to capture a debris. The learning is carried out
ofﬂine and is computationally very efﬁcient for ﬁnding new
trajectories after deployment.

The trajectory learning algorithm presented in this paper
will be potentially tested on a Future Space Debris Removal
Orbital Manipulator (SDROM) which has a similar micro-
satellite spacecraft bus as RemoveDEBRIS [29] but with a 7-
DoF redundant robot arm attached, as shown in Fig 1. This is
the next step towards space autonomy for on-orbit operations
that will be demonstrated by a potential mission concept
that goes beyond RemoveDEBRIS spacecraft. The overall
mission objectives would be to execute pose estimation,
trajectory and motion planning of the robotic arm, and
capture a sample debris in order.

One of the possible extensions is to use the variance
information to ﬁnd out obstacle free trajectories when the
operating space is cluttered. Another way forward is devising
a control strategy from the learned distribution and simulate
in a physics engine

ACKNOWLEDGEMENT

This work has received funding from UKRI under the con-
sortium named as FAIRSPACE (www.fairspacehub.
org)

(a) Spacecraft rotation

(b) Spacecraft translation

Fig. 5. Pose variation of the spacecraft CG during trajectory tracking

Fig. 3.
Probabilistic Distribution

Conditioned trajectories of the end-effector sampled from the

Fig. 4. Cost associated with each of the sampled trajectory

APPENDIX I
BASIS FUNCTION

The basis function used in this work is given by

(cid:16)

ψi(z) = exp

(cid:17)

(z − ci)2
h2

−

Fig. 6. Radial basis function

APPENDIX II
LINEAR TRANSFORMATION PROPERTY OF GAUSSIAN
DISTRIBUTION

If a random variable x is normally distributed (N (µ, Σ)),

the linear transformation Ax + c follows the distribution

Ax + c ∼ N (Aµ + c, AΣAT )

APPENDIX III
EXPLANATION OF THE LEARNING SCHEME

To illustrate the learning process, a simple example of 2-
DoF planar robot is considered here. Let θ1 and θ2 represent
the joint angles. The complete trajectory for a single demon-
stration, ζ, concatenated as a 1-D vector is represented as

where zt is the phase, ci is the center and h is the bandwidth
factor. Interested readers can refer to [5] for details. Fig 6
gives a plot of ten basis function centered at [-0.142, 0.,
0.142, 0.285, 0.428, 0.571, 0.714, 0.857, 1., 1.142]

λ1 = [θ1t1, θ1t2, ..., θ1tn ]
λ2 = [θ2t1, θ2t2, ..., θ2tn ]
ζ = [λ1λ2, ˙λ1, ˙λ2]T

tn×2nDoF

jan 2010.

[15] P. Piersigilli, I. Sharf, and A. Misra, “Reactionless capture of a
satellite by a two degree-of-freedom manipulator,” Acta Astronautica,
vol. 66, no. 1-2, pp. 183–192,
[Online]. Available:
https://linkinghub.elsevier.com/retrieve/pii/S0094576509003361
[16] T. C. Nguyen-Huynh and I. Sharf, “Adaptive Reactionless Motion
and Parameter Identiﬁcation in Postcapture of Space Debris,” Journal
of Guidance, Control, and Dynamics, vol. 36, no. 2, pp. 404–414,
mar 2013. [Online]. Available: http://arc.aiaa.org/doi/10.2514/1.57856
[17] K. Seweryn and M. Banaszkiewicz, “Optimization of the trajectory of
a general free-ﬂying manipulator during the rendezvous maneuver,”
in AIAA Guidance, Navigation and Control Conference and Exhibit,
2008, p. 7273.

[18] E.

“Path

Planning

Papadopoulos,

Space Manipulators
the
Exhibiting Nonholonomic Behavior,”
IEEE/RSJ International Conference on Intelligent Robots and
Systems,
[Online]. Available:
http://ieeexplore.ieee.org/document/587419/

in Proceedings

669–675.

IEEE,

vol.

For

pp.

of

1.

[19] Y. Umetani, K. Yoshida, et al., “Resolved motion rate control of space
manipulators with generalized jacobian matrix,” IEEE Transactions on
robotics and automation, vol. 5, no. 3, pp. 303–314, 1989.

[20] M. Wilde, S. Kwok Choon, A. Grompone, and M. Romano, “Equa-
tions of motion of free-ﬂoating spacecraft-manipulator systems: An
engineer’s tutorial,” Frontiers in Robotics and AI, vol. 5, p. 41, 2018.
[21] K. Nanos and E. G. Papadopoulos, “On the dynamics and control
of free-ﬂoating space manipulator systems in the presence of angular
momentum,” Frontiers in Robotics and AI, vol. 4, p. 26, 2017.

[22] A. Meurer, C. P. Smith, M. Paprocki, O.

Ivanov,

ˇCertík, S. B. Kirpichev,
M. Rocklin, A. Kumar, S.
J. K. Moore, S. Singh,
T. Rathnayake, S. Vig, B. E. Granger, R. P. Muller, F. Bonazzi,
H. Gupta, S. Vats, F. Johansson, F. Pedregosa, M. J. Curry, A. R.
Terrel, v. Rouˇcka, A. Saboo, I. Fernando, S. Kulal, R. Cimrman,
and A. Scopatz, “Sympy: symbolic computing in python,” PeerJ
Computer Science, vol. 3, p. e103, Jan. 2017. [Online]. Available:
https://doi.org/10.7717/peerj-cs.103

[23] Z. Zhu and H. Hu, “Robot learning from demonstration in robotic

assembly: A survey,” Robotics, vol. 7, no. 2, p. 17, 2018.

[24] I. Havoutis and S. Calinon, “Learning from demonstration for semi-
autonomous teleoperation,” Autonomous Robots, vol. 43, no. 3, pp.
713–726, 2019.

[25] D. E. Kirk, Optimal control

theory: an introduction.

Courier

Corporation, 2004.

[26] A. Bemporad, M. Morari, V. Dua, and E. N. Pistikopoulos, “The ex-
plicit linear quadratic regulator for constrained systems,” Automatica,
vol. 38, no. 1, pp. 3–20, 2002.

[27] S. Quinlan and O. Khatib, “Elastic bands: Connecting path planning
and control,” in [1993] Proceedings IEEE International Conference
on Robotics and Automation.

IEEE, 1993, pp. 802–807.

[28] R. S. Hartenberg and J. Denavit, “A kinematic notation for lower pair
mechanisms based on matrices,” Journal of applied mechanics, vol. 77,
no. 2, pp. 215–221, 1955.

[29] J. L. Forshaw, G. S. Aglietti, T. Salmon,

I. Retat, M. Roe,
C. Burgess, T. Chabot, A. Pisseloup, A. Phipps, C. Bernal,
F. Chaumette, A. Pollini, and W. H. Steyn, “Final payload test
results for the RemoveDebris active debris removal mission,” Acta
Astronautica, vol. 138, pp. 326–342, sep 2017. [Online]. Available:
https://linkinghub.elsevier.com/retrieve/pii/S0094576516310840

Here ti are the time points, tn and nDoF are the total time
points and number of degrees of freedom respectively. Let
the number of basis functions be nBf . The matrices ψt and
˙ψt are of dimension 2nDoF × (nBf × 2nDoF ) each and
the matrix Ψ is of dimension (tn × 2nDoF ) × (nBf ×
2nDoF ). The learning parameter, wi for one demonstration
is then calculated by formulating as a regression problem
and reducing the loss, (ζ − Ψw)2

REFERENCES

[1] NASA, “Space debris and human spacecraft,” https://www.nasa.gov/

mission_pages/station/news/orbital_debris.html, 2013.

[2] Active space debris removal. [Online]. Available: https://www.esa.int/

Safety_Security/Space_Debris/Active_debris_removal

[3] https://www.space.com/24895-space-junk-wild-clean-up-concepts.

html, 2018.

[4] R. A. Shyam, P. Lightbody, G. Das, P. Liu, S. Gomez-Gonzalez,
and G. Neumann, “Improving local
trajectory optimisation using
probabilistic movement primitives,” in 2019 IEEE/RSJ International
Conference on Intelligent Robots and Systems (IROS), 2019, pp. 2666–
2671.

[5] A. Paraschos, C. Daniel, J. Peters, and G. Neumann, “Using proba-
bilistic movement primitives in robotics,” Autonomous Robots, vol. 42,
no. 3, pp. 529–551, 2018.

[6] T. Rybus, K. Seweryn, and J. Z. Sasiadek, “Trajectory optimization
of space manipulator with non-zero angular momentum during orbital
capture maneuver,” in AIAA Guidance, Navigation, and Control Con-
ference, 2016, p. 0885.

[7] ——, “Control system for free-ﬂoating space manipulator based on
nonlinear model predictive control (nmpc),” Journal of Intelligent &
Robotic Systems, vol. 85, no. 3-4, pp. 491–509, 2017.

[8] E. F. Camacho and C. B. Alba, Model predictive control. Springer

Science & Business Media, 2013.

[9] K. Yoshida and H. Nakanishi, “Impedance matching in capturing
a satellite by a space robot,” in Proceedings 2003 IEEE/RSJ
International Conference on Intelligent Robots and Systems (IROS
2003) (Cat. No.03CH37453), vol. 3.
IEEE, pp. 3059–3064. [Online].
Available: http://ieeexplore.ieee.org/document/1249626/

[10] D. Hirano, H. Kato, and T. Saito, “Online Path Planning and
Compliance Control of Space Robot for Capturing Tumbling Large
Object,” in 2018 IEEE/RSJ International Conference on Intelligent
Robots and Systems (IROS).
IEEE, oct 2018, pp. 2909–2916.
[Online]. Available: https://ieeexplore.ieee.org/document/8594099/
[11] M. A. Torres and S. Dubowsky, “Minimizing spacecraft attitude
disturbances in space manipulator systems,” Journal of Guidance,
Control, and Dynamics, vol. 15, no. 4, pp. 1010–1017, jul 1992.
[Online]. Available: https://arc.aiaa.org/doi/10.2514/3.20936

[12] Z. Vafa and S. Dubowsky, “On the Dynamics of Space Manipulators
Using the Virtual Manipulator, with Applications to Path Planning,”
1993, pp. 45–76.
[Online]. Available: http://link.springer.com/10.
1007/978-1-4615-3588-1{_}3

[13] D. Nenchev, K. Yoshida, P. Vichitkulsawat, and M. Uchiyama,
“Reaction null-space control of ﬂexible structure mounted manipulator
systems,” IEEE Transactions on Robotics and Automation, vol. 15,
no. 6, pp. 1011–1023, 1999. [Online]. Available: http://ieeexplore.
ieee.org/document/817666/

for Reactionless Path Planning,”

[14] D. Dimitrov and K. Yoshida, “Utilization of Holonomic Distribution
in 2006 IEEE/RSJ
Control
International Conference on Intelligent Robots and Systems.
IEEE,
oct 2006, pp. 3387–3392. [Online]. Available: http://ieeexplore.ieee.
org/document/4058924/

