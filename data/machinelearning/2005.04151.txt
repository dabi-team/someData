Noname manuscript No.
(will be inserted by the editor)

Swarm Programming Using Moth-Flame
Optimization and Whale Optimization Algorithms

Tapas Si

Received: date / Accepted: date

0
2
0
2

r
p
A
5
2

]
E
N
.
s
c
[

1
v
1
5
1
4
0
.
5
0
0
2
:
v
i
X
r
a

Abstract Automatic programming (AP) is an important area of Machine
Learning (ML) where computer programs are generated automatically. Swarm
Programming (SP), a newly emerging research area in AP, automatically gen-
erates the computer programs using Swarm Intelligence (SI) algorithms. This
paper presents two grammar-based SP methods named as Grammatical Moth-
Flame Optimizer (GMFO) and Grammatical Whale Optimizer (GWO). The
Moth-Flame Optimizer and Whale Optimization algorithm are used as search
engines or learning algorithms in GMFO and GWO respectively. The proposed
methods are tested on Santa Fe Ant Trail, quartic symbolic regression, and
3-input multiplexer problems. The results are compared with Grammatical
Bee Colony (GBC) and Grammatical Fireworks algorithm (GFWA). The ex-
perimental results demonstrate that the proposed SP methods can be used in
automatic computer program generation.

Keywords Automatic Programming · Swarm Programming · Moth-Flame
Optimizer · Whale Optimization Algorithm

1 Introduction

Automatic programming [1] is a machine learning technique by which com-
puter programs are generated automatically in any arbitrary language. SP [3]
is an automatic programming technique which uses SI algorithms as search en-
gine or learning algorithms. The grammar-based SP is a type of SP in which
Context-free Grammar (CFG) is used to generate computer programs in a
target language. Genetic Programming (GP) [2] is a evolutionary algorithm

T. Si
Department of Computer Science & Engineering
Bankura Unnayani Institute of Engineering
Bankura-722146, West Bengal, India
E-mail: c2.tapas@gmail.com.com

 
 
 
 
 
 
2

Tapas Si

in which tree-structured genome is used to represent a computer program
and Genetic algorithm (GA) is used as a learning algorithm. Grammatical
Evolution (GE) [4],[5] is a variant of grammar-based GP (GGP) [6] in which
linear genome i.e., array of integer codons is used to represent a genotype
and Backus-Naur Form (BNF) of CFG is used to generate the computer pro-
grams (i.e., phenotype) from the genotype. Generally, variable-length GA is
used as a learning algorithm in GE. SP uses GP-like tree-structure genome
which represents a computer program and SI algorithms are used as learning
algorithms. O. Roux and C. Fonlupt [7] proposed ant programming in which
ant colony optimizer (ACO) [8] was used to generate the computer programs.
D. Karaboga et al. [9] proposed artiﬁcial bee colony programming (ABCP)
for symbolic regression and artiﬁcial bee colony (ABC) algorithm [10] was
used as learning algorithm. A. Mahanipour and H. Nezamabadi-pour [11] pro-
posed Gravitation Search Programming (GSP) in which Gravitation Search
Algorithm (GSA) [12] was used as a learning algorithm. The grammar-based
SP are the variants of GE where SI algorithms are used as search engines
or learning algorithms through genotype-to-phenotype mapping using BNF
of CFG. Grammatical Swarm (GS) [13],[14],[15], Grammatical Bee Colony
(GBC) [17], and Grammatical Fireworks algorithm (GFWA) [18] are grammar-
based SP. Particle Swarm Optimizer (PSO) [16] was used as search engine in
GS. ABC algorithm was used as search engine in GBC and Fireworks al-
gorithm (FWA) [19] was used as search engine in GFWA. Till date, as per
author’s best knowledge, Moth-Flame Optimization (MFO) [20] and Whale
Optimization algorithm (WOA) [21] are not used in automatic programming.
Therefore, in the current work, two grammar-based SP algorithms GMFO
and GWO are proposed. In GMFO algorithm, MFO is used as a search engine
to generate computer programs automatically through genotype-to-phenotype
mapping using BNF of CFG. Similar to GMFO, WOA is used as a search en-
gine in GWO for automatic computer program generation. The proposed two
methods are applied to Santa Fe Ant Trail, symbolic regression and 3-input
multiplexer problem. The results of GMFO and GWO are compared to the
results of GFWA and GBC. The experimental results demonstrates that the
proposed two methods can be used in automatic computer program generation
in any arbitrary language.

2 Materials & Methods

In this work, two grammar-based SP such as GMFO and GWO are proposed.
In GMFO, MFO algorithm is used as a search engine or learning algorithm
to generate computer programs automatically through genotype-to-phenotype
mapping. In GMFO, each individual is an array of integer codons in the range
[0, 255] and it represents the genotype and derived computer program from
genotype using BNF of CFG is known as phenotype. First of all, it is primary
concern to deﬁne problem speciﬁc CFG in BNF. An example of CFG in BNF
is given below:

Swarm Programming Using MFO and WOA

3

1. <expr> := (<expr><op><expr>) (0) | <var> (1)
2. <op> := + (0) | - (1) | * (2) | / (3)
3. <var> := x1 (0) | x2 (1)

The ith individual of the search engine, i.e., set of d integer codons Xi(x1, x2, . . . , xd)
are initialized as follows:

xj = round(255 × rand(0, 1))

(1)

A mapping process maps the rule numbers from the codons in the derivation
process of computer programs in the following way: rule=(codon integer value)
MOD (number of rules for the current non-terminal)

The representation of genotype, phenotype and genotype-to-phenotype
mapping are given in Figure 1. Similar to GFMO, the positions of whale are the
set of integer codons in the range [0, 255]. The same genotype-to-phenotype
mapping process as in GMFO is used to generate the computer programs.
During the derivation process, if the derivation is run out of codons, then the
process restarts from the beginning. This process is called as wrapping. After
a certain number of wrapping, if there is any non-terminal remain in the de-
rived program, then the corresponding individual is denoted as invalid. The
invalid individual is replaced by the valid individual later on during the search
process.

Search engine or learning algorithms are another important part of GMFO
and GWO. As already mentioned before, MFO and WOA are used as search
engines in GMFO and GWO respectively. MFO algorithm is based on the
transverse orientation, i.e., the navigation method of moths in nature. Moths
ﬂy in the night by maintaining a ﬁxed angle with respect to the moon for
travelling in a straight line for long distance. But they are trapped in a useless
or deadly spiral around the artiﬁcial light source. This phenomena is modelled
in MFO algorithm. The detail description of MFO algorithm can be obtained
from [20]. WOA is another nature-inspired meta-heuristic algorithm which
mimics the social behaviour of humpback whales. The humpback whales live
alone or in group and their favourite prey is krill and small ﬁsh herds. Their
foraging behaviour, i.e., bubble-net feeding method is done by creating bubbles
along a circle. The Bubble-net attacking method (i.e., exploitation phase) has
two steps namely shrinking encircling mechanism and spiral updating position.
The searching mechanism for prey is used to create exploration of the search
space. The detail of WOA can be obtained from [21].

3 Experimental Setup

3.1 Benchmark Problems

Three benchmark problems such as Santa Fe Ant Trail (SFAT), symbolic re-
gression, and 3-input multiplexer are chosen for the experiment. The objective

4

Tapas Si

Fig. 1 Genotype-to-phenotype mapping process

of the SFAT problem is to ﬁnd out the program by which an ant can eat 89
piece of food placed in 32 × 32 grid in 600 time steps. The target function for
symbolic regression problem is f (x) = x + x2 + x3 + x4 and 100 ﬁtness cases
are generated randomly in the range [-1,1]. 3-input multiplexer problem has
8 ﬁtness cases. The detail descriptions and problem speciﬁc deﬁned grammar
can be obtained from [17],[18].

3.2 Parameters Settings

The parameters of GMFO are set as the following: number of search agents
(N ) = 30, dimension = 100. The parameters of GWO are set as the following:

204 105 127 246 151 140  <expr> <expr><op><expr> 204 mod 2 = 0 <var><op><expr> 105 mod 2 = 1 127 mod 2 = 1 X2<op><expr> 246 mod 4 = 2  X2*<expr> 151 mod 2 = 1  X2*<var> 140 mod 2 = 0 X2*X1 Genotype Phenotype Swarm Programming Using MFO and WOA

5

number of search agents (N ) = 30, dimension = 100. The other parameters in
GMFO and GWO are dynamically controlled as in [20],[21] As the functions
are not evaluated for invalid individual in the above algorithms, the maxi-
mum number generations or iterations are not ﬁxed for the comparative study.
Therefore, each of GFW, GBC, GMFO, and GWO algorithms is allowed to
run for maximum 30, 000 number of function evaluations (FEs) in a single run.
All algorithms are terminated when they reach the maximum FEs or target
error. The target errors are set to 0, 0.01 and 0 for ant trail, symbolic regres-
sion and 3-multiplexer problems respectively. The numbers of wrapping are
set to 3, 2 and 1 for ant trail, symbolic regression and 3-multiplexer problems
respectively.

3.3 PC Conﬁguration

– Operating System: Windows 10 Pro
– CPU: Intel(R) Core(TM) i7-9700K @3.6GHz
– RAM: 64 GB
– Software: Matlab 2018a

4 Results & Discussion

The proposed GMFO and GWO algorithms are applied to Santa Fe Ant Trail
(SFAT), symbolic regression, and 3-input multiplexer problems. The experi-
ments are repeated for 30 times independently for each algorithms. The mean
and standard deviation of best-run-errors over 30 independent runs are given
in Table 1. The number of successful runs and success rates (in %) over 30
independent runs are given in Table 2. The success rate (SR) is calculated as
follows:

SR =

number of achieving the target
number of total runs

The number of successful runs and success rates (in %) over 30 independent
runs are given in Table 3. The results of GFWA and GBC are obtained from
study [18] as the current work is the part of the same project.

Table 1 Mean and standard deviation of best-run-errors over 30 independent runs.

Algorithms

Santa Fe Ant Trail

Symbolic Regression

3-Multiplexer

GFWA
GBC
GMFO
GWO

24.57(16.9516)
32.57(17.8609)
35.53(22.8212)
23.57(17.2880)

6.65 (7.246)
10.35(7.1404)
10.35(7.814)
10.15(7.4338)

0.93(0.2537)
0.7(0.4661)
0.8(0.407)
1.00(0.00)

From Table 1, it is observed that the GWO performs better than other al-
gorithms for SFAT problem. GFWA performs better than other algorithms

6

Tapas Si

Table 2 Number of successful runs and success rates (in %) over 30 independent runs.

Algorithms

Santa Fe Ant Trail

Symbolic Regression

3-Multiplexer

GFWA
GBC
GMFO
GWO

1(3.33%)
0(0.00%)
2(6.67%)
1(3.33%)

15(50.00%)
7(23.33%)
9(30.00%)
9(30.00%)

2(6.67%)
9(30.00%)
6(20.00%)
0(0.00%)

Table 3 Mean and standard deviation of FEs over 30 independent runs

Algorithms

Santa Fe Ant Trail

Symbolic Regression

3-Multiplexer

GFWA
GBC
GMFO
GWO

29917(453.88)
30000(0.00)
28224.9(6812.3395)
29553.8(2524.6001)

23943(8657.80)
27076(6935.20)
21586.9(13097.6074)
22432.07(12023.5602)

29062(4415.30)
23549(10420.00)
26200(9020)
30000(0.00)

for symbolic regression problem. GBC performs better than others for 3-
multiplexer problem. If the results of GMFO are compared with GWO, it
can be observed that GWO provides a higher accuracy than GMFO for SFAT
and symbolic regression problems whereas GMFO provides higher accuracy
than GWO only for 3-multiplexer problem.

From Table 2, it is observed that the success rate of GMFO is higher
than all others algorithms for SFAT problem. GFWA provides higher success
rate than others for regression problem whereas GBC provides higher success
rate than others for multiplexer problem. If the success rates of GMFO and
GWO are compared, then it can be observed that GMFO has higher success
rate than GWO for SFAT and multiplexer problems and there is a tie for
regression problem.

From Table 3, it is observed that the mean FEs taken by GMFO is lower
than other algorithms for SFAT and regression problems whereas the mean
FEs taken by GBC is lower than others for multiplexer problem. The computer
programs evolved by GMFO and GWO are given below:
The successful ant program evolved by GMFO (ant eats all 89 pieces of food):

left();

if(foodahead()) move(); else
else

if(foodahead()) if(foodahead()) if(foodahead())
if(foodahead())
if(foodahead()) if(foodahead())
if(foodahead()) if(foodahead()) left(); else
left(); end; else
if(foodahead()) right();
else if(foodahead())
left(); else left(); end;
move(); end; end; end; end;
if(foodahead()) if(foodahead()) if(foodahead())
if(foodahead()) right(); else left(); end; else left();
end; else
end; end; end; else
move(); else move(); end; end; else left(); end; else

if(foodahead()) if(foodahead())

move(); end; else left(); end; else move();

else move(); end; else

right(); end; else

if(foodahead())

else

if(foodahead())

Swarm Programming Using MFO and WOA

7

left();
end; move(); left(); if(foodahead()) move();
else if(foodahead()) right(); else right(); end; end; right();

The ant program evolved by GWO (ant eats 88 out of 89 pieces of food):

if(foodahead()) left(); else right(); end; right();
if(foodahead()) move(); else left(); end; move(); left();

A successful program evolved by GMFO for symbolic regression problem (ab-
solute error = 1.7837e − 15):
plus(times(x,plus(times(x,plus(x,times(x,times(pdivide(x,x),x)))),
x)),x)

A successful program evolved by GWO for symbolic regression problem (ab-
solute error = 4.6668e − 15):
times(plus(plus(times(minus(times(x,x),pdivide(x,x)),x),x),x),
plus(x,pdivide(x,x)))

A successful program evolved by GMFO for 3-multiplexer problem (abso-

lute error = 0):
nor(nor(nor(x3,x1),nor(nor(x1,nor(x1,x1)),x2)),nor(nand(nor(x2,x1),
nor(x1,x1)),x3))

A program evolved by GWO for 3-multiplexer problem (absolute error =

1):
nand(or(x3,x1),x2)

From the discussion of the results, it is found that no single algorithm
performs better than all other algorithms for all problems in this study. The
above presented results are the experimental evidence of the fact that the
proposed GMFO and GWO algorithms can be used in automatic computer
program generation in any arbitrary language.

5 Conclusion

This paper presents two grammar-based swarm programming methods namely
GMFO and GWO. The proposed methods are applied to solve SFAT, sym-
bolic regression, and 3-input multiplexer problems. The experimental results
demonstrate that the proposed methods can be used to generate computer
programs automatically in any arbitrary language. In this study, the basic ver-
sion of MFO and WOA are utilized as search engines or learning algorithms
in genotype-to-phenotype mapping. The update version of these algorithms
can be used to obtain better performance in automatic computer program
generation. In the future, the GMFO and GWO can be applied to real-world
problems such as data classiﬁcation and regression analysis.

8

References

Tapas Si

1. Rich C, Waters R.C (1998) Automatic Programming: Myths and Prospects, IEEE Com-

puter, 21(8): 4051

2. Koza J.R (1992) Genetic Programming: On the Programming of Computers by Means

of Natural Selection, MIT Press.

3. Olmo J.L, Romero J.R, Ventura S.(2014) Swarm-based metaheuristics in automatic pro-
gramming: a survey, WIREs Data Mining Knowl Discov 2014. doi: 10.1002/widm.1138
4. Ryan C, Collins J.J, ONeill M (1998) Grammatical Evolution: Evolving Programs for an
Arbitrary Language, In: BanzhafW, Poli R, Schoenauer M, Fogarty T.C. (eds.) EuroGP
1998. LNCS, vol. 1391, Springer, Heidelberg, 1998 :8395

5. ONeill M, Ryan C (2001) Grammatical Evolution, IEEE Transactions on Evolutionary

Computation 5(4):349358

6. 6. Mckay R.I, Hoai N.X, Whigham P.A, Shan Y, ONeill M (2010) Grammar-based genetic

programming: a survey, Genetic Programming and Evolvable Machines, 11: 365396.

7. Roux O, Fonlupt C (2000) Ant programming: or how to use ants for automatic program-

ming. In: International Conference on Swarm Intelligence (ANTS); 121129.

8. Dorigo M, Maniezzo V, Colorni A (1996) Ant system: optimization by a colony of cooper-
ating agents. IEEE Trans Syst Man Cybern B Cybern, 26:2941. doi:10.1109/3477.484436.
9. Karaboga D, Ozturk C, Karaboga N, Gorkemli B (2012) Artiﬁcial bee colony program-

ming for symbolic regression. Inform Sci, 209:115. doi: 10.1016/j.ins.2012.05.002.

10. Karaboga D (2005) An Idea Based On Honey Bee Swarm For Numerical Optimization,
In: Technical Report-TR06, Erciyes University, Engineeing Faculty, Computer Engineering
Department

11. Mahanipour, A, Nezamabadi-pour, H (2019) GSP: an automatic programming tech-
nique with gravitational search algorithm. Appl Intell 49, 15021516 doi:10.1007/s10489-
018-1327-7

12. Rashedi E, Nezamabadi-Pour H, Saryazdi S (2009) GSA: a gravitational search algo-

rithm. Inf Sci 179:22322248

13. ONeill M, Brabazon A (2004) Grammatical swarm, In: Genetic and Evolutionary Com-

putation Conference (GECCO) :163174.

14. ONeill M, Brabazon A (2006) Grammatical Swarm: The Generation of Programs by

Social Programming, Natural Computing 5(4): 443462

15. ONeill M, Leahy F, Brabazon A (2006) Grammatical swarm: a variable-length parti-
cle swarm algorithm, Swarm Intelligent Systems, Studies in Computational Intelligence.
Springer: 5974.

16. Kennedy J, Eberhart R (1995) Particle Swarm Optimization, In: IEEE International

Conference on Neural Networks, Perth, Australia

17. Si T, De A, Bhattacharjee A.K (2013) Grammatical Bee Colony, In: B.K. Panigrahi et

al. (Eds.): SEMCCO 2013, Part I, LNCS 8297:436445.

18. Si T (2016) Grammatical Evolution Using Fireworks Algorithm, In: M. Pant et al. (eds.),
Proceedings of Fifth International Conference on Soft Computing for Problem Solving,
Advances in Intelligent Systems and Computing 436, DOI 10.1007/978-981-10-0448-3 4.
19. Tan Y, Zhu Y (2010) Firework Algorithm for Optimization, In: Y. Tan et al.(Eds): ICSI

2010, Part I, LNCS 6145: 355364, Springer-Verlag Berlin Heidelberg.

20. Mirjalili S (2015) Moth-Flame Optimization Algorithm: A Novel Nature-
doi:

Knowledge-Based

Paradigm,

Heuristic

Systems

(2015),

inspired
http://dx.doi.org/10.1016/j.knosys.2015.07.006

21. Mirjalili S, Lewis A (2016) The Whale Optimization Algorithm, Advances in Engineer-

ing Software, 95, pp. 51–67.

