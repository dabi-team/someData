Mixed-Integer Nonlinear Programming for
State-based Non-Intrusive Load Monitoring

Marco Balletti, Veronica Piccialli, and Antonio M. Sudoso

1

2
2
0
2

b
e
F
2
2

]

C
O
.
h
t
a
m

[

2
v
8
5
1
9
0
.
6
0
1
2
:
v
i
X
r
a

Abstract—Energy disaggregation, known in the literature as
Non-Intrusive Load Monitoring (NILM), is the task of inferring
the energy consumption of each appliance given the aggregate
signal recorded by a single smart meter. In this paper, we propose
a novel two-stage optimization-based approach for energy disag-
gregation. In the ﬁrst phase, a small training set consisting of
disaggregated power proﬁles is used to estimate the parameters
and the power states by solving a mixed integer programming
problem. Once the model parameters are estimated, the energy
disaggregation problem is formulated as a constrained binary
quadratic optimization problem. We incorporate penalty terms
that exploit prior knowledge on how the disaggregated traces
are generated, and appliance-speciﬁc constraints characterizing
the signature of different types of appliances operating simulta-
neously. Our approach is compared with existing optimization-
based algorithms both on a synthetic dataset and on three real-
world datasets. The proposed formulation is computationally
efﬁcient, able to disambiguate loads with similar consumption
patterns, and successfully reconstruct the signatures of known
appliances despite the presence of unmetered devices, thus over-
coming the main drawbacks of the optimization-based methods
available in the literature.

Index Terms—Automatic State Detection, Energy Disaggrega-
tion, Mathematical Programming, Non-Intrusive Load Monitor-
ing.

NOTATION

Number of appliances.
Number of power states of the appliance i.

Throughout the paper, we denote vectors by boldface low-
ercase letters and matrices by boldface uppercase letters. We
also denote by 1n ∈ Rn the vector of all ones of size n.
Inputs:
N
Si
M Number of training time periods.
V
T
H
yi(t) Active power of the appliance i at time t.
ˆyi(t) Estimated active power of the appliance i at time t.
y(t) Total active power of the time t.
zi(t) Historical observations of the appliance i up to time

Number of validation time periods.
Number of test time periods.
Number of time intervals in T .

t.

Sets:

N = {1, . . . N } Set of all appliances.
O ⊆ N
F ⊆ N
Si = {1, . . . Si} Set of states of the appliance i.
M = {1, . . . M } Set of training indices.
V = {1, . . . V }

Set of Type-IV appliances.
Set of Type-II appliances.

Set of validation indices.

©2022 IEEE. https://doi.org/10.1109/TSG.2022.3152147

T = {1, . . . T }
H = {1, . . . , H} Set of interval indices.
Th

Set of test indices.

Set of indices t ∈ T related to the
interval h ∈ H.

Model Parameters:

pi
λ1

wi

λ2
li

for

penalty

temporal

parameter

Power levels of the appliance i.
Non-negative
smoothness.
Non-negative weight for the piece-wise constant
consumption proﬁle of the appliance i.
Non-negative penalty parameter for device sparsity.
Non-negative weights inversely proportional to the
ON time of the appliance i.
Probability that the appliance i is ON at time t.

si(t)
aij , bij Minimum and maximum active time for state j of

the appliance i.

U i, Di Indicator matrices deﬁning the transition order be-

oi

tween the states of the appliance i.
Maximum number of upward transitions for the
appliance i.

mih Maximum consumption allowed in the h-th time

interval for the appliance i.

State indicator variable of the appliance i.

Variables:
xi(t)
ui(t), di(t) Indicator variables for upward and downward
transitions of the appliance i at time t.
Autoregressive coefﬁcients for state j of the
appliance i.
Assignment of zi(t) to the j-th submodel of the
appliance i.

δij(t)

φij

I. INTRODUCTION

Non-Intrusive Load Monitoring (NILM), or energy disag-
gregation, is the task of estimating the energy consumption
of each appliance starting from the aggregate power signal
recorded by a single meter [1]. Given the aggregate power
consumption and a set of target appliances, a NILM system
aims to identify at each time step the active appliances and
their relative contribution to the power consumption. NILM
is recognized as an important Smart Grid technology that
provides energy breakdown information without the need of
installing multiple monitoring devices at the appliance level.
Energy saving is arguably the most popular application of the
NILM service [2], [3]. It can be useful for increasing energy
savings for both providers and residential users. Regarding the
providers, detailed appliance usage information allow them to
predict the energy demand, apply personalized management
policies and service recommendations, as well as to promote

 
 
 
 
 
 
future economic and environmental objectives. Residential
users, on the other hand, can obtain more awareness of how
much energy being spent on their appliances and can exploit
this information to take the proper actions for reducing their
bills.

Since Hart’s seminal paper [1], numerous energy disag-
gregation algorithms have been proposed in the literature to
improve his results. NILM approaches can be divided into
event-based or state-based methods. Depending on whether
the ground truth is available or not, NILM algorithms can be
supervised or unsupervised [4]. Event-based approaches use
edge detection techniques to capture statistically signiﬁcant
variations of the signal. Most common event-based approaches
involve an unsupervised event detection of the aggregate
signal and a supervised classiﬁcation to assign the known
appliances to the detected events. The classiﬁcation tools that
can be found in the literature are based on Support Vector
Machines (SVM) [5], Decision Trees [6] and a combination
of various classiﬁcation methods [7]. In addition, clustering
techniques based on Dynamic Time Warping (DTW) are used
to identify windows with similar consumption patterns and
to extract representative load signatures [8], [9]. Recent re-
search on event-based NILM involves Graph Signal Processing
(GSP) algorithms [4], [10], both supervised and unsupervised,
where the spatio-temporal correlation of the data is found
by embedding the signals onto a graph. Recently, multi-label
classiﬁcation algorithms employing time-domain and wavelet-
domain features have been suggested (see [11] and reference
therein).

State-based approaches, instead, consider each appliance
as a ﬁnite-state machine and disaggregate the total power
signal based on the appliance load distribution models. In
order to explore all
the possible combinations among the
different appliances’ state sequences, Combinatorial Optimiza-
tion (CO) and Hidden Markov Models (HMM) [12], [13],
[14] are commonly used among the state-based approaches.
However, as the number of appliances increases, the number of
combinations of states increases exponentially, increasing the
problem complexity. Another limitation of these approaches is
that they tend to produce unsatisfactory results in presence of
unknown loads. In [15] differential HMMs are used with the
expectation-maximization algorithm to generate state transi-
tion models in an unsupervised manner. In [16] sub-metering
measurements are used to build super-state HMMs and the
inference is performed through a sparse Viterbi algorithm
resulting in an efﬁcient estimation of the energy consumption.
In [17] a non-negative matrix factorization technique is used
to decompose the aggregated signal into appliance signatures.
Among the supervised methods, in the last few years, state-
of-the-art performance has been achieved by using end-to-
end Deep Neural Networks (DNN) [18], [19], [20], [21].
The main drawback of DNNs, it that they strongly rely on
extended training samples of both aggregated and disaggre-
gated data. To obtain good performance it is recommended
to use measurements at
the granularity of seconds which
may be not available since data points at the resolution of
minutes are more practical to be recorded by commercial
smart meters [22]. Furthermore, they focus on training one

2

model per appliance (one-to-one mapping), resulting that a
complete NILM system should integrate as many models as
the number of devices the target environment contains. Thus,
these types of solutions are not directly applicable in real-time
situations. On the other hand, by training one model for each
target appliance, DNNs are able to identify the activations
and estimate the consumption of the associated appliances
regardless of the number of appliances or the proportion of
power consumption from non-target appliances [20], [21].

A. Related Work on Optimization

NILM can be treated as a blind source separation problem,
which tries to estimate the composition of the input from
the output (one-to-many mapping). In this light, optimization-
based approaches are state-based, so the studied appliances
are assumed to have discrete states in their signatures [23].
Unlike machine learning research on NILM which mostly
focuses on training one model per appliance, state-based
optimization approaches can disaggregate multiple loads at the
same time. In [1], Hart formulates the energy disaggregation
problem as a combinatorial optimization (CO) problem. In his
formulation, the disaggregated energy consumption is obtained
by combining all the possible appliances’ states so that the
difference between the aggregated power and the sum of the
appliance-level power is minimized. In addition to the high
computational cost, the drawbacks of Hart’s formulation are
the possible confusion derived from loads with similar power
levels, and the inability to correctly disaggregate the target
appliances in presence of unknown appliances. In fact,
if
the measurement noise or the contribution of the unknown
appliances is signiﬁcant, the CO problem generates a poor
solution where all the appliances are set to an active state
most of the time.

Recently, various integer programming approaches have
been proposed in the literature, but very few of them have
attempted to deal with the challenges of Hart’s formulation.
Suzuki et al. [24] formulated the NILM problem as an Integer
Linear Programming (ILP) problem where they used current
waveforms from multiple loads. Egarter and Elmenreich [25]
investigated the CO approach from a theoretical point of view
and discussed the equivalency with the knapsack problem.
They concluded that it is hard to disaggregate loads with
similar consumption patterns and proposed as future work
a multi-objective optimization approach. Bhotto et al. [26]
proposed several enhancements to the ILP model in [24],
such as always-on appliances and median ﬁltering. Most of
the enhancements in [26] were included as a pre-processing
step rather than constraints. They also proposed a linear pro-
gramming reﬁnement to deal with the minimum and maximum
transient spans of the power states. In [27], Piga et al. proposed
instead a convex formulation with continuous variables and
enforced sparsity by means of the Lasso penalty. In [28],
Wittmann et al. proposed a mixed-integer programming model
that exploits both active and reactive power. They added basic
state machine constraints but their method is window-based
and does not work on every instance of data. More recently,
Zeinal-Kheiri et. al [29] enriched the integer programming

model by enforcing the power proﬁles of the appliances to be
piece-wise constant over time. The state transitions of each
appliance are modeled with non-linear constraints. Clearly,
their proposed model is an integer non-linear programming
problem that is difﬁcult to solve to global optimality as the
number of appliances or the scheduling horizon increase. In
addition to deterministic optimization approaches, derivative-
free search strategies such as ant colony optimization [30],
differential evolution [31] and genetic algorithms [32] have
also been employed.

B. Our Contribution

According to [3], household appliances can be categorized
on the basis of their operational states: Type-I (ON/OFF),
Type-II (Finite State Machines), Type-III (Continuously Vari-
able), or Type-IV (Always-On). In this paper, we are con-
cerned about expanding the CO problem for energy disag-
gregation in order to disambiguate the signatures of different
types of appliances and handle the major challenges that arise
due to the presence of unknown loads. Results presented in
most of the optimization-based literature are obtained on an
artiﬁcial signal, created by summing up the plug level power
measurements of the target appliances and by subtracting
the contribution of unknown appliances. This makes results
not suitable for real-world applications unless nearly all the
devices connected to the household main meter are known.
Therefore, in this paper, special emphasis is placed on load
disaggregation in an environment where the unmetered part is
typically plenty and highly variable.

We formulate the energy disaggregation problem as a least-
square error minimization problem with regularization terms
that promote sparsity and exploit prior knowledge on the
disaggregated traces. In order to further reduce the compu-
tational complexity, we narrow down the feasible region by
adding appliance-speciﬁc and signal aggregate constraints that
characterize the signature of different
types of appliances
operating simultaneously.

The contributions of our paper are the following:
1) A novel penalty-based binary quadratic programming
formulation with appliance-speciﬁc constraints is pro-
posed to better disambiguate the load of similar appli-
ances in presence of unknown loads.

2) A novel optimization-based automatic state detection
algorithm is developed to estimate the power levels of
the appliances and their respective transient behavior.
3) An automatic procedure is proposed for inferring the
parameters of the optimization problem by using a small
training set of disaggregated data.

4) The superiority of the approach with respect to previous
works in the ﬁeld of optimization-based methods for
NILM is validated by extensive testing on different
publicly available datasets.

5) The deployment of the proposed algorithm in a real-
world environment is discussed and evaluated experi-
mentally.

3

optimization problem by using a very small training set of
power consumption signatures from different devices. More
in detail, the power states and their dynamics are obtained
by efﬁciently ﬁnding a good locally optimal solution of a
non-convex mixed-integer optimization problem that jointly
clusters and estimates an autoregressive model for each power
state. Then, taking as input the aggregated signal, we solve the
binary quadratic disaggregation problem which incorporates
different
types of constraints and prior knowledge on the
estimated consumptions. Finally, we post-process the output
of the optimization problem to keep into account the tran-
sient spans of each appliance. Our method is computationally
efﬁcient for low-frequency data, i.e. 1 minute to 10 minutes
granularity, which is a realistic solution for many commer-
cially available smart meters. The remainder of this paper is
organized as follows. In Section II, NILM is formulated as a
binary quadratic optimization problem with linear constraints.
In Section III, a mixed-integer programming formulation is
described to ensure reliable automatic state detection. In
Section IV, the proposed method is experimentally evaluated
against the previous optimization-based methods on publicly
available datasets. Finally, Section V concludes the paper.

II. BQP DISAGGREGATION ALGORITHM
In this section, we formulate the energy disaggregation
problem as an error minimization problem. Speciﬁcally, we
start from Hart’s formulation in [1] and we propose several
enhancements aimed at improving the disaggregation accuracy.
For all t ∈ T , the energy disaggregation problem can be
formulated as the following integer problem:

min

N
(cid:88)

y(t) −

(cid:12)
(cid:12)
(cid:12)
(cid:12)

p(cid:62)

(cid:12)
(cid:12)
i xi(t)
(cid:12)
(cid:12)

i=1
s.t. xi(t) ∈ {0, 1}Si ∀i ∈ N ,

(1)

where pi ∈ RSi

is the vector of the non-zero Watt
consumption levels of the appliance i (i.e. the power states)
and xi(t) ∈ {0, 1}Si is the state variable of the appliance i.
The j-th component of xi(t) is set to 1 if the state j of the
appliance i is active, and 0 otherwise.

The solution of the Problem (1) is generally not unique
since there are many combinations of power levels resulting
in the same aggregate signal. Thus, we add regularization and
several constraints to better distinguish the contribution of all
the appliances.

A. Objective Function

The objective function we minimize is given by the sum of
three terms. The main term is the ﬁtting error calculated as
the sum of squared differences between the aggregated power
consumption and the sum of the disaggregated consumption
of each appliance:

f (x(t)) =

T
(cid:88)

(cid:18)

t=1

y(t) −

p(cid:62)

i xi(t)

(cid:19)2

.

N
(cid:88)

i=1

(2)

Our optimization-based load disaggregation algorithm con-
sists of three steps. First, we learn the parameters of the

We stress that the ﬁtting error takes into account the pres-
ence of unknown electrical loads since y(t) is the aggregate

power measured from the main meter. We add to the ﬁtting
error (2) a term to exploit the knowledge that the underlying
appliance signals are piece-wise constant over time. More in
detail, we enforce sparseness and temporal smoothness on the
state indicator vectors xi(t) by penalizing every change of
consumption level experienced by each appliance during the
optimization horizon. Penalizing the norm of the difference
between two consecutive parameters xi(t) and xi(t − 1) is
commonly referred in the literature as fused Lasso [33]. For
this purpose, we use the (cid:96)2 norm to directly penalizes large
changes with respect to the temporal structure:

g1(x(t)) = λ1

T
(cid:88)

N
(cid:88)

t=2

i=1

wi(cid:107)xi(t) − xi(t − 1)(cid:107)2
2,

(3)

where λ1 is a penalty parameter. The appliance-speciﬁc
weights wi are non-negative parameters used to modulate
the piece-wise constant behavior of the consumption proﬁle.
These weights are chosen depending on the appliance type
and should be inversely proportional to the number of state
transitions. Thus, for appliances that change state very rarely
(i.e. clothes dryer and dishwasher) the weight is higher than
the one of the appliances that frequently switch between
states. Finally, we add to the ﬁtting error (2) a second penalty
term that promotes robustness to noise and device sparsity by
preferring conﬁgurations that use a small number of operating
appliances. If the structured noise given by the contribution of
the unknown appliances to the aggregated energy consumption
is signiﬁcant, the minimization of the quadratic term in (2)
would lead appliances to be set to an active state most of the
time, producing unsatisfactory results. To avoid this drawback,
we impose a penalty on the number of active appliances at a
given time:

g2(x(t)) = λ2

T
(cid:88)

N
(cid:88)

t=1

i=1

(cid:0)1 − si(t)(cid:1)(cid:107)xi(t)(cid:107)2
2,

li

(4)

where λ2 is a penalty parameter. Since xi(t) is a binary
vector with at most one component equal to 1 (see constraint
(5)), the sum of squared (cid:96)2 norms counts the number of
devices that contribute to the aggregate power consumption.
The parameter si(t) is the probability, learned during a short
intrusive period, that the appliance i is active at time t of the
time horizon; for instance, during the night hours is unusual
that sparse appliances like the dishwasher are active, so an
activation during this period should be penalized much more
than an activation in the usual times. On the other hand, the
non-negative parameters li are inversely proportional to the
ON time of the appliance; in this way, the activation of an
appliance that is often ON is penalized less than the one of an
appliance that is OFF most of the time. The hyper-parameters
λ1 and λ2 are tuned by the user through cross-validation for
balancing the trade-off between minimizing the ﬁtting error
and maximizing the sparsity.

B. Constraints

We constrain the state variables to avoid multiple active
states from the same appliance. Speciﬁcally, for each appliance

4

we allow at most one active state at a given time:

1(cid:62)
Si

xi(t) ≤ 1 ∀t ∈ T , ∀i ∈ N \ O.

(5)

There are some appliances that operate the whole time, i.e.
are always-on. For these devices the above constraint must be
true at the equality:

1(cid:62)
Si

xi(t) = 1 ∀t ∈ T , ∀i ∈ O,

(6)

where O ⊆ N is the set that contains the indices of the Type-
IV appliances.

Many appliances operate as ﬁnite state machines and their
possible state transitions can be described by a state transition
diagram. In order to explicitly model
the behavior of an
appliance as a ﬁnite state machine, we introduce the variables
ui(t) ∈ {0, 1}Si and di(t) ∈ {0, 1}Si and we add the
following linear constraints:

xi(t) − xi(t − 1) = ui(t) − di(t) ∀t ∈ T , ∀i ∈ N ,

ui(t) + di(t) ≤ 1Si ∀t ∈ T , ∀i ∈ N ,

(7)

(8)

These additional variables model, respectively, an upward
transition (i.e. from the OFF state to an ON state) and the
downward transition (i.e. from an ON state to the OFF state).
In the equation (7), if the appliance i changes operating mode
at time t, the j-th component of the vector of the difference
xi(t)−xi(t−1) can be 1 or -1. In the ﬁrst case, the constraint
sets the j-th component of ui(t) to 1 representing an upward
transition, and in the latter the j-th component of di(t) to 1
representing a downward transition. Constraint (8) prevents the
j-th component of both ui(t) and di(t) to be simultaneously
1.

We expect an appliance to stay in a state for at least a few

instants:

t+aij −1
(cid:88)

τ =t

xij(τ ) ≥ aijuij(t) ∀t ∈ T , ∀i ∈ N , ∀j ∈ Si,

(9)

where aij ∈ R is a parameter representing the minimum active
time for each state j of the appliance i. Constraint (9) enforces
the variables xij(τ ) to be 1 for at least aij epochs when the
appliance i goes into state j at time t, i.e, uij(t) = 1. On the
other hand many appliances do not stay in the same state for
a long time so we add the following constraint to force the
appliances to change state before the maximum active time
for that state:

t+bij
(cid:88)

τ =t

xij(τ ) ≤ bij ∀t ∈ T , ∀i ∈ N , ∀j ∈ Si,

(10)

where bij ∈ R is a parameter representing the maximum
active time for state j of the appliance i. By constraining
the appliance usage with the minimum and the maximum
duration we can better disambiguate appliances with similar
consumption proﬁles. For Type-II appliances, we can easily
model a given state being active only if another state of the
same appliance has ﬁnished:

U iui(t) = Didi(t)

∀t ∈ T , i ∈ F,

(11)

where F ⊆ N is the set that contains the indices of the Type-
II appliances, U i ∈ {0, 1}Si×Si and Di ∈ {0, 1}Si×Si are
indicator matrices deﬁning the transition order between the
states of the appliance i. If there is a transition from state j1
to j2, then the j2-th component of ui(t) is set to 1 only if the
j1-th component of di(t) is set to 1, meaning that the previous
state of the appliance i is not active anymore.

Type-III appliances are the most challenging loads to dis-
aggregate, as they arbitrarily change their power consumption
[34]. Since we can not fully characterize Type-III appliances
through explicit constraints, we treat them as ON/OFF multi-
state appliances.

In order to limit the presence of spurious activations, we
impose an upper bound oi on the number of upward transitions
for each appliance:

T
(cid:88)

t=2

1(cid:62)
Si

ui(t) ≤ oi ∀i ∈ N .

(12)

We notice that constraint (12) could be enforced by either
using the upward transitions or the downward transitions. In
fact, from the constraint (7) follows that the number of upward
and downward transitions in the scheduled horizon differ at
most by 1 in absolute value.

The following signal-aggregate constraint imposes that the
sum of the disaggregated consumption proﬁles does not exceed
the total power measured by the main meter:

N
(cid:88)

i=1

p(cid:62)

i xi(t) ≤ y(t)

∀t ∈ T .

(13)

To better characterize the different consumption patterns in
a speciﬁc period (e.g., typically used appliances in the daytime
and are unlikely to be used in the nighttime and vice-versa), we
impose appliance-speciﬁc constraints on the maximum power
consumption allowed in the scheduled horizon. Rather than
making only one constraint for each appliance in the interval
[1, T ], a series of tighter constraints could be enforced by
partitioning the scheduling horizon into a ﬁxed number of time
intervals. As a result, the following constraint imposes that the
energy consumption in a time period is less or equal than the
maximum consumption mih allowed in that period:

p(cid:62)

i xi(t) ≤ mih

∀h ∈ H, ∀i ∈ N ,

(14)

(cid:88)

t∈Th

where H = {1, . . . , H} is the set of H time intervals, and Th
is the set of indices t ∈ T related to the h-th time interval.
Increasing H leads to tighter constraints but also implies a
large number of upper bounds to estimate. Furthermore, when
using limited historical observations, large H may lead to
mih estimates varying too much in time so that the resulting
accuracy may be compromised due to overﬁtting on the
training set. In the following, we simply consider two time
slots: from 1 AM to 5 AM for the nighttime and from 6 AM
to 12 PM for the daytime.

In order to reduce the computational cost of the algorithm,
we directly set
to zero some variables by analyzing the
aggregate consumption and the power levels. More in detail,
let Z = {t ∈ T , i ∈ N , j ∈ Si | y(t) (cid:28) pij} be the set of

5

indices of the appliances that are more likely to be turned off,
then we simply set xij(t) = 0, for all (t, i, j) ∈ Z.

The overall optimization-based algorithm can be expressed

as:

min

T
(cid:88)

(cid:18)

t=1

y(t) −

(cid:19)2

p(cid:62)

i xi(t)

N
(cid:88)

i=1

+ λ1

+ λ2

T
(cid:88)

N
(cid:88)

t=2
T
(cid:88)

i=1
N
(cid:88)

t=1

i=1

wi(cid:107)xi(t) − xi(t − 1)(cid:107)2
2

(cid:0)1 − si(t)(cid:1)(cid:107)xi(t)(cid:107)2

2

li

(15)

s.t. Constraints (5) - (14)

xi(t), ui(t), di(t) ∈ {0, 1}Si ∀t ∈ T , ∀i ∈ N .
Problem (15) is an optimization problem with binary vari-
ables, quadratic objective function and linear constraints. The
binary quadratic program with linear constraints (BQP) is
a general class of optimization problems that are known to
be very difﬁcult to solve due to the non-convexity and the
integrality of the variables. The number of variables and
constraints is O(T (cid:80)N
i=1 Si). Due to its combinatorial nature,
the problem becomes expensive to solve as the scheduling
horizon T and the number of appliances N increase. However,
this formulation is computationally efﬁcient for low-frequency
data where the resolution ranges from 1 minute to 10 minutes.
Smart meter data with this granularity are more common in
practical applications due to the relatively low hardware cost.
In this case, Problem (15) can be globally solved in order
of seconds by state-of-the-art integer programming solvers
without specialized hardware.

III. STATE DETECTION AND PARAMETER ESTIMATION

The optimization model

in (15) relies on several

input
parameters that need to be estimated. The most important ones
are the power states pi, representing the steady-state ratings.
Steady-state ratings are usually extracted from data sheets or
by means of a clustering algorithm on the ground truth data
[28], [29], and used to characterize the typical consumption
signatures by a constant value representing the average power.
In practice, the power states of household appliances ﬂuctuate
within a range, so that approximating them with a straight line
may affect the quality of the disaggregation. As observed in
[26], being able to capture appliances’ dynamics in addition
to the steady-state ratings could be effective to increase the
disaggregation accuracy. However, incorporating these dynam-
ics as additional states in the optimization problem would
dramatically increase the computational cost. For this reason,
we develop a novel clustering-based approach for steady-
state ratings and transient spans extraction using a very small
training set of disaggregated data. This is done by solving a
mixed-integer optimization problem that jointly classiﬁes the
power levels into Si clusters and estimates an autoregressive
(AR) submodel of order qi for each cluster. The autoregressive
coefﬁcient are incorporated in the post-processing phase to

reﬁne the ﬂat estimate of each appliance. Formally, for all
i ∈ N , we solve:

min

s.t.

Si(cid:88)

M
(cid:88)

δij(t)(cid:0)yi(t) − φ(cid:62)

ijzi(t)(cid:1)2

t=qi+1
δi(t) = 1

j=1
1(cid:62)
Si
δij(t) ∈ {0, 1} ∀j ∈ Si, ∀t ∈ M,
ij ∈ R
φh

∀t ∈ M,

∀j ∈ Si, ∀h ∈ {0, . . . , qi},

(16)

ij, φ1

where zi(t) = [1, yi(t − 1), . . . , yi(t − qi)](cid:62) is the
the historical observations and φij =
input vector of
ij, . . . , φqi
ij ](cid:62) is the vector of the autoregressive co-
[φ0
efﬁcients. Each binary variable δij(t) decides whether the
data point zi(t) is assigned to the j-th submodel of the
appliance i, under the constraint that each data point must
be assigned to only one submodel. Problem (16) is a mixed-
integer non-linear program that can be shown to be equivalent
to its continuous relaxation, where the binary constraint on
δij is replaced by δij ≥ 0. This equivalence derives from the
optimal solution of the relaxation being integer. The resulting
continuous problem is still non-convex. In order to efﬁciently
produce a good local optimum, we use an iterative two-block
Gauss-Seidel decomposition method [35]. In fact, the structure
of the objective function and the constraints imply that the
computation of the global minimum with respect to each block
can be done in a computationally efﬁcient way. More in detail,
by ﬁxing the variables δij(t), Problem (16) becomes the least-
squares estimation of Si autoregressive models of order qi:

φ∗

ij = arg min

φij

(cid:20) Si(cid:88)

M
(cid:88)

j=1

t=qi+1

δij(t)(cid:0)yi(t) − φ(cid:62)

ijzi(t)(cid:1)2(cid:21)

. (17)

Problem (17) is an unconstrained convex optimization prob-
lem that can be solved in closed form by setting the gradient
equal to zero. On the other hand, given φij, the problem
with respect to δij(t) is linear programming problem that is
separable into M − (qi + 1) subproblems. In particular, the
t-th subproblem has the form:

min

s.t.

Si(cid:88)

δij(t)(cid:0)yi(t) − φ

(cid:62)

ijzi(t)(cid:1)2

j=1
1(cid:62)
Si
δij(t) ≥ 0

δi(t) = 1,

∀j ∈ Si.

6

given assignment, there will exist a subsequence of iterations
where power levels and assignment variables do not change,
satisfying the stopping criterion (cid:107)pk

(cid:107)2 ≤ (cid:15).

i − pk−1
i

An initial estimate of the power levels can be automatically
obtained by a clustering algorithm, such as k-means [37], [38].
Since the number of power levels is unknown, k-means is
run with an increasing number of clusters. The number of
power levels is then validated with the elbow method and the
cluster centers, representing the average power consumption,
are selected as the initial guess p0
i of the operating modes. The
overall decomposition method for automatic state detection is
illustrated in Algorithm 1.

In the initialization phase, the parameters φij of the au-
toregressive subprocess are unknown, so the binary variables
δij(t) are chosen so that the squared distance between the
power demanded by the appliance i at time t and the power
levels p0
i is minimized. In the main loop, the AR coefﬁcients
are estimated and the variables δij(t) are adjusted on the basis
of the current parameters. Finally, for each appliance i we
reﬁne the estimate of the power level j by simply taking the
conditional expectation of the j-th autoregressive subprocess.
The algorithm terminates when the difference between the
power levels of two consecutive iterations is less or equal than
a small value ε and returns the estimated power levels pi and
the AR coefﬁcients φij.

Algorithm 1: Automatic State Detection
Data: The training set yi(t), and the tolerance ε = 10−5.
Result: The estimated power pi and the AR coefﬁcients φij .
p0
for t = qi + 1 . . . M do

i ← run the k-means algorithm on yi(t)

j∗ ← arg minj=1...Si
(cid:40)
δ0
i,j (t) =

1 if j = j∗
0 otherwise

(cid:0)yi(t) − p0

ij

(cid:1)2

(cid:80)M

t=qi+1 δk−1

i,j (t)(cid:0)yi(t) − φ(cid:62)

ij zi(t)(cid:1)2

(cid:0)yi(t) − φk(cid:62)

ij zi(t)(cid:1)2

end
k ← 1
do

ij ← arg min (cid:80)Si
φk
for t = qi + 1 . . . M do

j=1

j∗ ← arg minj=1...Si
(cid:40)
1 if j = j∗
δk
ij (t) =
0 otherwise

end
for j = 1 . . . Si do

(18)

pk
ij ←

φk,0
ij
1−(cid:80)qi
h=1 φk,h

ij

end
k ← k + 1

i − pk−1
while (cid:107)pk
return pi and φij

i

(cid:107)2 > (cid:15)

if yi(t) is close to the power level j∗,

The optimal solution of (18) can be constructed by ob-
serving that
then
δij∗ (t) is set to 1, whereas the variables with j (cid:54)= j∗ are
set to 0. The algorithm starts with an initial guess of the
power levels p0
i and minimizes over one block of variables
with the other ﬁxed, and vice versa until convergence. The
convergence of this alternating minimization procedure can
be proved by adapting the k-means convergence proof that
can be found in [36]. The main idea is that the variables
δij(t) can only assume a ﬁnite number of values (i.e., the
number of possible assignments is ﬁnite). Therefore, since the
algorithm ﬁnds the global minimum with respect to φij for a

i x∗

Given the optimal solution of (15) x∗
i (t), the disaggregated
time t is given
power consumption of the appliance i at
by ˆyi(t) = p(cid:62)
i (t). This estimate relies only on the static
power levels. In order to reﬁne the estimate we need to post-
process the output by including the transient spans through the
AR coefﬁcients. This is done by applying a moving horizon
forecasting procedure for t = q + 1, . . . , T :
Si(cid:88)

qi
(cid:88)

(cid:26)

(cid:27)

ij(t)(cid:0)φ0
x∗

ij +

ij ˆyi(t − k)(cid:1)
φk

.

(19)

ˆyi(t) = max

0,

j=1

k=1

Similarly to the power states, the remaining parameters in
(15) can be estimated from time series analysis and limited
historical information. The extraction of some of them may
be done by visual inspection. However, automatic extraction
becomes necessary when applying the model to a real-world
scenario. Furthermore, for practical NILM applications, the
training phase should be as short and simple as possible [39].
To this end, for oi, mih, aij, bij we compute the frequency
distribution over the training set and we obtain the estimate
by selecting a suitable percentile. In particular, the parameters
oi and mih are computed for each interval of length T over
the training set and estimated by taking the 95th percentile.
Likewise, the minimum and maximum time in state aij and
bij are estimated by looking at the left and the right tails of the
histogram and taking, respectively, the 5th and 95th percentile
of the time spent in state j in the interval T . The parameters wi
are inversely proportional to the frequency of state transitions
that characterize the device, therefore they are calculated as
follows:

wi =

M
ri

∀i ∈ N ,

(20)

where ri is the number of state transitions in the training set for
the appliance i. The parameters si(t) represent the probability
that the device i is active (with respect to a threshold of 10
Watt) at time t of the scheduling horizon. These probabilities
can be estimated as follows:
vi(t)
M/T

∀t ∈ T , i ∈ N ,

si(t) =

(21)

where vi(t) is the number of times that the appliance i is ON
at time t, whereas the denominator represents the number of
time horizons in the training set. Finally, the parameters li,
which are inversely proportional to how much the device is
typically used, are calculated as:

li =

M
t=1 vi(t)

(cid:80)M

∀i ∈ N .

(22)

The validation set is used only for selecting and tuning the
regularization parameters λ1 ∈ Λ and λ2 ∈ Λ in (15) by
means of a grid-search procedure over the grid Λ × Λ. Also
in the validation phase, the sub-metered power consumptions
are assumed to be available.

The overall NILM algorithm can be summarized by the

diagram reported in Figure 1.

IV. RESULTS

In this section we present the experiments carried out to
test the performance of the overall NILM algorithm and we
address several research questions:

1) How does the proposed algorithm compare to state-

based approaches available in the literature?

2) Is the approach robust to the presence of unmetered

appliances?

3) How reliable is the parameter estimation procedure and
how often does one need to update the parameters to
reﬂect changes in the system?

7

y(t), yi(t), i ∈ N , t ∈ T

y(t), t ∈ M

Stage 1: Ofﬂine

Stage 2: Online

Automatic State
Detection (16)

pi, φij

Parameter
Estimation

Θij (t)

Cross
Validation

λ1, λ2

Solve Problem (15)

x(cid:63)

ij (t)

Post Processing (19)

Grid Values Λ × Λ
y(t), yi(t), i ∈ N , t ∈ V

ˆyi(t), i ∈ N , t ∈ M

Figure 1. Overall disaggregation process: Stage 1 (Ofﬂine) and Stage 2 (On-
line). For all i, j, t we denote by Θij (t) = [wi, li, si(t), aij , bij , oi, mih](cid:62)
the vector of the parameters.

practice. We compare our NILM-BQP with NILM algorithms
proposed for low sampling rates and active power mea-
surements. Speciﬁcally, we compare with Hart’s formulation
(CO) [1], Aided Linear Programming (ALIP) [26], Sparse
Optimization (SO) [27], State Transition Integer Programming
(STIP) [29] and Super State HMM (SHMM) [16]. We ﬁrst
evaluate the robustness to noise on a synthetic dataset to assess
how the presence of unmetered appliances affects the quality
of the disaggregation, and then we evaluate our algorithm
on 5 houses coming from 3 real-world datasets. Finally, we
evaluate the reliability of the parameter estimation procedure
and how the freshness and staleness of the parameters impact
the accuracy of the disaggregation.

A. Performance Metrics

In order to evaluate the performance of our method, we
use regression and classiﬁcation metrics. Regression metrics
measure how closely the energy consumption of an appliance
matches the energy consumption predicted for that appliance,
whereas the classiﬁcation metrics measure how accurately
NILM algorithms can predict what appliance is running in
each state. Following [40], we use the Estimation Accuracy
(EA) for the appliance i ∈ N , and the Overall Estimation
Accuracy (OEA) for N appliances:

EAi = 1 −

OEA = 1 −

(cid:80)T

(cid:80)N

,

t=1 |yi(t) − ˆyi(t)|
2 (cid:80)T
t=1 yi(t)
(cid:80)T
t=1 |yi(t) − ˆyi(t)|
i=1
2 (cid:80)N
t=1 yi(t)
i=1

(cid:80)T

(23)

.

(24)

Overall, by answering these research questions we aim to
provide insights on how the proposed algorithm can be used in

In order to calculate the accuracies of non-binary classi-
ﬁcations, we use the Finite State F-score (F Si) that is the

harmonic mean of the adjusted precision (Pi) and recall (Ri)
for the appliance i:

Table I
OPTIMAL HYPER-PARAMETERS λ1 AND λ2

8

Pi =

, Ri =

T Pi − Ai
T Pi + F Pi
|ˆsi(t) − si(t)|
Si

Ai =

T
(cid:88)

t=1

T Pi − Ai
T Pi + F Ni
Pi · Ri
Pi + Ri

, F Si = 2

,

,

(25)

(26)

Dataset
AMPDS
UKDALE 1
UKDALE 2
REFIT 3
REFIT 9

λ1
1000
500
800
800
300

λ2
2000
1300
1500
1600
900

where T Pi, F Pi, and F Ni stand for true positives, false
positives, and false negatives for the appliance i, respectively.
In the NILM context, T Pi counts how many times the algo-
rithm correctly predicts that the appliance is ON, F Pi how
many times the appliance is OFF but predicted ON, and F Ni
how many times the appliance is ON but predicted OFF. The
quantity Ai is the inaccuracy portion of true positives which
converts them into a discrete measure from a binary one, ˆsi(t)
is the estimated state of the appliance i at time t, si(t) is
the ground truth state, and Si is the number of states for
the appliance i. The Overall FS-Fscore (OFS) is obtained by
summation over all the appliances for each T Pi, F Pi, F Ni,
and Ai.

To measure the contribution of unmetered loads, we report
the percentage of noise in each test. The percent-noisy measure
[40] (% − N M ) can be calculated on the ground truth data as
follows:

(cid:80)T

t=1 |y(t) − (cid:80)N
(cid:80)T
t=1 y(t)

i=1 yi(t)|

.

(27)

% − N M =

B. Experimental Setup

The proposed algorithm assumes low-sampling rate mea-
surements. We use observations at 60 seconds resolution,
and we downsample the data when needed to satisfy this
assumption. We use the same autoregressive order qi = 3 for
each appliance, even though the estimation of the transient
spans could be further improved by tuning this parameter. We
adopt the same experimental design for all the methods: we
use only two weeks for the estimation of the parameters, a
week to cross-validate the choice of the hyperparameters λ1
and λ2, and a week as test set. The scheduling horizon is set to
1 day (T = 1400) which is suitable for decision making using
low-frequency data [22]. Furthermore, in order to minimize
any bias effect, we run all the NILM algorithms one day at a
time to obtain the disaggregated traces for the test week (i.e.,
we solve 7 optimization problems and we average the results).
The values of λ1 and λ2 are determined ofﬂine through a grid-
search procedure by maximizing the sum of OEA and OFS on
the validation set. The grid values used in the experiments are
in Λ = {200, 300, . . . , 2200} and their optimal values for each
dataset are reported in Table I. BQP is implemented in AMPL
[41] and solved to global optimality with Gurobi optimizer
[42]. All the experiments have been performed on a laptop
with Intel Core i7-8565U CPU and 8 GB of RAM. The source
code and the parameters of all the considered case studies are
available at https://github.com/antoniosudoso/nilm-bqp.

C. Robustness to Noise

It is well known that the presence of unknown appliances
negatively affects the disaggregation accuracy of known ap-
pliances. Therefore a critical aspect for the deployment of the
NILM service in a real-world scenario is the robustness to
noise. In order to test the effectiveness of our formulation
when the noise increases, we use the artiﬁcial dataset SYND
[43]. It contains 180 days of data at the granularity of 200
milliseconds of a single household with 21 appliances. This
dataset has been generated using appliance-speciﬁc signatures
of real-world NILM datasets. We generate artiﬁcial aggregates
with an increasing number of appliances. Speciﬁcally, we dis-
aggregate the 4 top-consuming appliances that are dishwasher,
electric stove, washing machine, and iron. Starting from the
ideal case where no noise is present, i.e., the aggregate signal
is given by the sum of the 4 top-consuming appliances, we
add the traces of the remaining devices one at a time in
decreasing order of energy consumption, and we treat them
as unknown appliances. In this way, we generate 18 different
datasets, corresponding to artiﬁcial aggregates of increasing
noise scenarios, where the percentage of noise ranges from 0%
to around 30%. The noisiest dataset contains all the remaining
17 appliances treated as noise, resulting in the original artiﬁcial
aggregate signal.

In Figures 2 and 3, we report the average OEA and the
average OFS obtained by all the methods when the number
of appliances added to the aggregated signal increases. This
picture shows the well-known difﬁculty encountered by most
of the state-based approaches when the noise increases. Our
method, on the other hand, does not suffer from the increase
in noise, showing very high accuracy in all scenarios. This
behavior stays essentially the same when looking at the single
appliance. These results conﬁrm the robustness to noise of
our formulation, which allows overcoming the drawback of
the other optimization-based approaches. This behavior is also
conﬁrmed by the experiments on real-world datasets described
in the next section.

D. Real-world Datasets

We test our formulation on three real-world datasets: AM-
PDS [44], UKDALE [45] and REFIT [46], containing both
the aggregate and the appliance-wise active power. From each
dataset, we select at most two houses where the percentage
of noise is up to 40% and we use as target appliances the
top-consuming ones. From AMPDS we select 6 appliances:
clothes dryer (CD), dishwasher (DW), fan and thermostat (FT),
entertainment (EN), fridge (FR), and heat pump (HP). We
model FT and EN as always-on, whereas we model CD and

A
E

l
l
a
r
e
v
O

1

0.8

0.6

0.4

0.2

0

CO
SO
ALIP
STIP
SHMM
BQP

0

2

6

8

4
Number of Appliances

12

10

14

16

18

Figure 2. Overall Estimation Accuracy as the number of unmetered appliances
varies.

S
F

l
l
a
r
e
v
O

1

0.8

0.6

0.4

0.2

0

CO
SO
ALIP
STIP
SHMM
BQP

0

2

8

6

4
Number of Appliances

10

12

14

16

18

Figure 3. Overall FS as the number of unmetered appliances varies.

HP as state machines. From UKDALE we select house 1 and
2. For house 1 we disaggregate 5 appliances: boiler (BO),
washing machine (WM), dishwasher (DW), home theater
(HT), and fridge (FR). For this house, WM and DW are treated
as state machines, whereas BO and HT are treated as always-
on. From House 2 we select 5 appliances: server (SE), kettle
(KE), dishwasher (DW), fridge (FR), and modem (MO). Here,
SE and MO are always-on, whereas DW is a state machine.
Finally, for the REFIT dataset we choose house 3 and 9. For
house 3 we use 4 appliances: fridge (FR), tumble dryer (TD),
dishwasher (DW), and television (TV). We model TD and DW
are state machines. For house 9 we select 4 appliances: fridge
(FR), washing machine (WM), dishwasher (DW), and kettle
(KT). We treat WM and DW are state machine appliances. In
Table II we report the training, validation and test days and the
percent-noisy measure for each house, computed according to
(27).

In Tables III-V, we report for each method and for each
house the Estimation Accuracy (EA) and the Finite State F-
Score (FS) for each appliance averaged on the test week.
the average Overall EA and the
Furthermore, we report
the performance
average Overall FS. Note that we report

9

Table II
TRAINING, VALIDATION AND TEST DAYS.

Dataset
AMPDS
UKDALE1
UKDALE2
REFIT3
REFIT9

Training
10-23/04/12
09-22/06/14
01-14/06/13
20-02/10-11/13
18-01/11-12/14

Validation
24-30/04/12
23-29/06/14
15-21/06/13
03-09/11/13
02-08/12/14

Test
01-07/05/12
30-06/06-07/14
22-29/06/13
10-16/11/13
09-15/12/14

Noise
38%
39%
36%
35%
40%

of our disaggregation algorithm with (BQPP) and without
post-processing (BPQ), to evaluate the impact of the post-
processing phase.

Finally, we report the average execution time in seconds
for each method. All the compared approaches are based on a
two-stage procedure: an ofﬂine phase for parameter estimation
and an online phase for the actual disaggregation. In all the
cases, the reported time represents the computational time of
the online procedure only. Note that, anyway, the ofﬂine phase
of our approach is extremely cheap in terms of computational
time: the most expensive part is the grid search for λ1 and
λ2 that requires few minutes. Looking at the execution times,
the largest ones are required by CO, due to the larger feasible
region, and by STIP, due to the nonlinear constraints induced
by the state machine constraints. The solution of our BQP
problem only requires a few seconds, despite the large size:
indeed, we have thousands of binary variables and thousands
of constraints. Therefore, our approach could be used in a real-
time setting, at least for the considered data granularity, and
the considered scheduling horizon. This makes the proposed
method suitable for low-cost microcontrollers.

As for the performance metrics, it turns out that our method
is always the best in both metrics on all the appliances. To
get a better picture of the different methods’ behavior, we
extract from the tables the average Overall EA and the average
Overall FS on all the different houses, and plot them in Figures
4 and 5. The superiority of our method in both metrics is
evident, and in Figure 4 also emerges the advantage of the
post-processing phase, which has an impact only on the EA
since it does not inﬂuence the activations. Looking at the
detailed performance on the single appliances in Tables III-
V, it can be seen that most of the approaches are able to
correctly disaggregate always-on appliances (see for example
appliance FT of AMPDS), whereas the BQP is by far more
robust on appliances that have a variable number of activations
(see for example appliances DW of both house 1 and 2 of
UKDALE). The high performance on these appliances derives
from the ability of the proposed formulation to disambiguate
the appliances’ states, combined with the correct estimation of
the power states. The beneﬁcial effect of the post-processing is
conﬁrmed since the EA metric improves on all the appliances
in all the datasets. To better show the performance of the pro-
posed algorithm, in Figure 8 we show the 1-day disaggregation
results produced by the top three methods BQPP, SHMM and
STIP and we select appliances with different power signatures
and behaviours. We can see that the fridge typically shows a
peak at the beginning of its working cycle. Differently from
STIP that produces a ﬂat estimate, our approach manages
to capture this behaviour thanks to the AR coefﬁcients. On

10

Table III
AMPDS HOUSE 1

Method Metric

CO

SO

ALIP

STIP

SHMM

BQP

BQPP

EA
FS
EA
FS
EA
FS
EA
FS
EA
FS
EA
FS
EA
FS

Overall
0.493
0.583
0.569
0.607
0.587
0.675
0.681
0.683
0.754
0.786
0.889
0.942
0.902
0.942

CD
0.018
0.057
0.815
0.692
0.764
0.447
0.942
0.836
0.496
0.310
0.955
0.932
0.976
0.932

DW
-1.548
0.045
0.500
0.001
0.375
0.316
0.194
0.543
0.364
0.561
0.863
0.844
0.888
0.844

FT
0.611
0.718
0.978
1.000
0.978
1.000
0.978
1.000
0.851
0.841
0.978
1.000
0.978
1.000

EN
0.398
0.635
0.195
0.657
0.361
0.862
0.432
0.872
0.835
0.943
0.849
0.978
0.862
0.978

FR
0.189
0.398
0.490
0.056
0.195
0.324
0.249
0.513
0.686
0.662
0.721
0.760
0.736
0.760

HP
0.867
0.781
-0.141
0.809
0.629
0.307
0.842
0.653
0.834
0.757
0.907
0.919
0.923
0.919

Time

1133.5

1.8

3.40

1206.6

49.2

52.5

52.8

Table IV
UKDALE HOUSES 1 AND 2

Method Metric

CO

SO

ALIP

STIP

SHMM

BQP

BQPP

EA
FS
EA
FS
EA
FS
EA
FS
EA
FS
EA
FS
EA
FS

Overall
-0.192
0.421
0.305
0.677
0.174
0.561
0.157
0.579
0.629
0.782
0.869
0.951
0.894
0.951

BO
0.375
0.587
0.977
0.997
0.195
0.789
0.313
0.821
0.884
0.913
0.958
0.997
0.979
0.997

WM
-0.501
0.155
0.485
0.480
0.383
0.442
0.581
0.405
0.478
0.306
0.711
0.884
0.746
0.884

House 1
DW
-2.029
0.074
-3.221
0.105
-1.468
0.149
-0.506
0.178
0.346
0.779
0.903
0.802
0.932
0.802

HT
-1.421
0.598
0.559
0.829
-0.933
0.616
-0.651
0.843
0.184
0.818
0.699
0.967
0.702
0.967

FR
0.411
0.422
0.574
0.677
0.557
0.454
0.569
0.549
0.731
0.712
0.795
0.853
0.809
0.853

Time

1034.5

1.0

9.5

723.6

14.7

25.4

25.7

Overall
0.403
0.662
0.640
0.406
0.564
0.638
0.579
0.778
0.723
0.856
0.909
0.970
0.926
0.970

SE
0.754
0.710
0.990
1.000
0.990
1.000
0.990
1.000
0.966
0.982
0.990
1.000
0.991
1.000

House 2
DW
-0.030
0.101
0.589
0.003
0.325
0.209
0.387
0.236
0.571
0.382
0.907
0.868
0.933
0.868

KE
0.622
0.535
0.507
0.009
0.661
0.105
0.661
0.565
0.519
0.780
0.778
0.789
0.790
0.789

FR
0.584
0.786
0.620
0.012
0.659
0.597
0.496
0.857
0.802
0.876
0.921
0.975
0.938
0.975

MO
0.742
0.755
0.997
1.000
0.997
1.000
0.997
1.000
0.981
0.982
0.997
1.000
0.997
1.000

Time

755.7

0.9

3.2

957.1

4.8

5.9

6.1

Table V
REFIT HOUSES 3 AND 9

Method Metric

CO

SO

ALIP

STIP

SHMM

BQP

BQPP

EA
FS
EA
FS
EA
FS
EA
FS
EA
FS
EA
FS
EA
FS

House 3

House 9

Overall
0.264
0.501
0.375
0.630
0.538
0.673
0.553
0.526
0.676
0.744
0.828
0.862
0.847
0.862

FR
0.482
0.676
0.640
0.578
0.535
0.548
0.495
0.549
0.798
0.802
0.807
0.858
0.813
0.858

TD
0.344
0.441
0.281
0.409
0.554
0.465
0.669
0.637
0.494
0.103
0.841
0.855
0.878
0.855

DW
-0.092
0.160
-0.863
0.218
0.278
0.350
0.131
0.124
0.500
0.358
0.819
0.815
0.844
0.815

TV
0.589
0.426
0.763
0.805
0.874
0.872
0.752
0.740
0.889
0.782
0.881
0.892
0.894
0.892

Time

989.1

0.9

1.1

468.9

3.1

3.6

3.8

Overall
-0.262
0.164
0.166
0.603
0.226
0.490
0.556
0.525
0.695
0.637
0.806
0.801
0.823
0.801

FR
0.358
0.240
0.619
0.702
0.658
0.587
0.667
0.599
0.762
0.789
0.771
0.814
0.788
0.814

WM
-0.467
0.074
0.522
0.106
0.402
0.120
0.398
0.197
0.485
0.272
0.737
0.771
0.744
0.771

DW
-0.017
0.116
0.471
0.282
0.432
0.204
0.469
0.308
0.745
0.611
0.835
0.799
0.846
0.799

KE
-0.043
0.000
-1.007
0.332
0.486
0.000
0.581
0.416
0.500
0.005
0.762
0.643
0.772
0.643

Time

687.3

1.1

0.9

509.6

4.9

7.8

7.9

the entertainment

is a Type-III appliance
the other hand,
whose activations are successfully captured even though the
consumption is approximated by the average power. Looking
at the dishwasher, we can see that our method is successful
at capturing with very good accuracy the activations and the
kW-level power consumption. In general, our approach is able
to correctly disambiguate appliances with similar consumption
patterns and to correctly estimate the load of active appliances
in a real-world scenario. The competitors tend to produce
false positives for the appliance that are not active (see the

disaggregation results for television and boiler in Figure 8).
Furthermore, the combination of our post-processing phase
and of our parameter estimation procedure allows to capture
with great accuracy the scale of the active power states,
increasing the EA metric.

E. Parameters Stability

The proposed optimization model relies on several param-
eters that may need to be updated in order to reﬂect changes

1

0.8

0.6

0.4

0.2

0

−0.2

−0.4

A
E

l
l
a
r
e
v
O

CO
SO
ALIP
STIP
SHMM
BQP
BQPP

AMPDS UKDALE1 UKDALE2 REFIT3

REFIT9

Houses

Figure 4. Overall Estimation Accuracy for each house and method.

1

0.8

0.6

0.4

0.2

S
F

l
l
a
r
e
v
O

CO
SO
ALIP
STIP
SHMM
BQP

11

To conduct the experiments, we use the AMPDS dataset
since it has a larger number of appliances, and thus a larger
number of parameters. Results are reported in Figures 6 and
7. In Figure 6 we evaluate in both scenarios the overall EA
and FS scores obtained in the six test weeks placed at one
month interval. Interestingly enough the overall performance
do not differ too much in the two settings, with a slight
decrease in Scenario A starting from the fourth month. To
better understand the two performance, in Figure 7 the same
metrics are reported in both scenarios on the single appliances.
We can see that CD, DW, FT, and FR are not affected by the
parameter staleness, since the accuracy in the two scenarios is
almost identical. On the other hand, the only two appliances
that suffer from staleness are the HP starting from the ﬁfth
month and EN starting form the third one. According to the
data sheet in [44], the heat pump cools the house in summer
and heats the house in winter. The behavioural change of HP
is related to a seasonal change, and hence the need to use the
appliance more often in the heating setting. Looking at the
ground truth signature, this change implies the presence of
an additional state that is successfully captured in Scenario B
when the parameters are refreshed, but not in Scenario A. As
for the EN, in [44] is treated as a composite appliance having
multiple loads such as television set, personal video recorder
and external ampliﬁer. Looking at the active power signature
it seems that from the fourth month onwards, it continuously
changes its behaviour displaying a much bigger variability that
is better captured in Scenario B and hence justifying the need
for a new parameter estimation.

AMPDS UKDALE1 UKDALE2 REFIT3

REFIT9

Houses

Overall

Figure 5. Overall FS-Fscore for each house and method.

in the system. As long as there is no signiﬁcant change in the
power proﬁles, the estimated parameters should remain stable
over time. In the following, we conduct experiments to study
whether the freshness and staleness of the parameters impact
the accuracy of the disaggregation. We compare two different
scenarios:

a) Scenario A (Fixed): the parameters are estimated just
once, at the beginning of the experiment, using the training
and validation weeks reported in Table II. Then, we simulate
a periodic disaggregation once per month until six months after
the beginning of the experiment. Therefore, we perform Stage
2 of our disaggregation procedure on six different test weeks,
further and further away from the weeks used for parameter
estimation. In this setting, we evaluate what happens when the
parameters are not updated for a long time.

b) Scenario B (Updated): the overall disaggregation pro-
cedure is repeated at one month interval up to six months
ahead on the same test weeks of Scenario A. However, in
this case the parameters are re-estimated by using two weeks
for training and one for validation immediately before the test
week. This is an “ideal scenario” where Stage 1 is executed
right before Stage 2. We note that this could still be viable in
practice if historical observations were available.

A
E

0.9
0.85
0.8

S
F

0.9
0.85
0.8

Fixed

Updated

Fixed

Updated

1

2

3

4

5

6

Months Ahead

Figure 6. Overall accuracy of the proposed approach in Scenario A (Fixed
Parameters) and Scenario B (Updated Parameters).

V. CONCLUSIONS

In this paper, we have proposed a novel optimization-based
algorithm for NILM. Our approach can separate many appli-
ances almost perfectly using only the total aggregate signal.
It is computationally efﬁcient for low-frequency data which
are commonly installed in many smart homes. The additional
penalty terms promoting sparsity and the appliance-speciﬁc
constraints narrow down the feasible region, improve the algo-
rithm performance and reduce the computational burden. We
also have proposed a mixed-integer formulation for automatic
state detection, and a post-processing technique to include state

12

A
E

0.9
0.85
0.8

S
F

0.9
0.85
0.8

A
E

1
0.75
0.5

1

S
F

0.75

0.5

CD

Fixed

Updated

Fixed

Updated

DW

Fixed

Updated

Fixed

Updated

A
E

0.85
0.8
0.75

S
F

0.85
0.8
0.75

FT

Fixed

Updated

Fixed

Updated

A
E

1
0.95
0.9

S
F

1
0.95
0.9

1

2

3

4

5

6

1

2

3

4

5

6

1

2

3

4

5

6

Months Ahead
EN

Fixed

Updated

Fixed

Updated

Months Ahead
FR

Fixed

Updated

Fixed

Updated

A
E

0.8
0.75
0.7

S
F

0.85
0.8
0.75

A
E

0.95
0.85
0.75

S
F

0.95
0.85
0.75

Months Ahead
HP

Fixed

Updated

Fixed

Updated

1

2

3

4

5

6

1

2

3

4

5

6

1

2

3

4

5

6

Months Ahead

Months Ahead

Months Ahead

Figure 7. Appliance-wise accuracy of the proposed approach in Scenario A (Fixed Parameters) and Scenario B (Updated Parameters).

dynamics. Our algorithm effectively disambiguates appliances
with similar operating modes, ensures reliable parameters
estimation, and leads to accurate results, even when relatively
small training data at a low sampling rate are considered.
When considering very large samples with resolution in the
order of few seconds, specialized solvers are needed. One pos-
sible lead of research may be to relax the binary constraints in
the BQP formulation and solve the resulting convex relaxation
by using fast algorithms such as ADMM [47]. However, we
leave investigating convex relaxations of our NILM algorithm
for future work.

ACKNOWLEDGMENTS

We would like to thank the reviewers for their thoughtful

comments that greatly helped to improve the manuscript.

REFERENCES

[1] G. W. Hart, “Nonintrusive appliance load monitoring,” Proceedings of

the IEEE, vol. 80, no. 12, pp. 1870–1891, 1992.

[2] M. Zeifman and K. Roth, “Nonintrusive appliance load monitoring:
Review and outlook,” IEEE transactions on Consumer Electronics,
vol. 57, no. 1, pp. 76–84, 2011.

[3] A. Zoha, A. Gluhak, M. A. Imran, and S. Rajasegarar, “Non-intrusive
load monitoring approaches for disaggregated energy sensing: A survey,”
Sensors, vol. 12, no. 12, pp. 16 838–16 866, 2012.

[4] K. He, L. Stankovic, J. Liao, and V. Stankovic, “Non-intrusive load
disaggregation using graph signal processing,” IEEE Transactions on
Smart Grid, vol. 9, no. 3, pp. 1739–1747, 2016.

[5] T. Hassan, F. Javed, and N. Arshad, “An empirical investigation of vi
trajectory based load signatures for non-intrusive load monitoring,” IEEE
Transactions on Smart Grid, vol. 5, no. 2, pp. 870–878, 2013.

[6] D. Chowdhury and M. M. Hasan, “Non-intrusive load monitoring using
ensemble empirical mode decomposition and random forest classiﬁer,”
in Proceedings of the International Conference on Digital Image and
Signal Processing (DISP), Oxford, UK, 2019, pp. 29–30.

[7] Y.-H. Lin and M.-S. Tsai, “Non-intrusive load monitoring by novel
neuro-fuzzy classiﬁcation considering uncertainties,” IEEE Transactions
on Smart Grid, vol. 5, no. 5, pp. 2376–2384, 2014.

[8] G. Elafoudi, L. Stankovic, and V. Stankovic, “Power disaggregation of
domestic smart meter readings using dynamic time warping,” in 2014
6th International Symposium on Communications, Control and Signal
Processing (ISCCSP).
IEEE, 2014, pp. 36–39.

[9] B. Liu, W. Luan, and Y. Yu, “Dynamic time warping based non-intrusive
load transient identiﬁcation,” Applied energy, vol. 195, pp. 634–645,
2017.

[10] B. Zhao, K. He, L. Stankovic, and V. Stankovic, “Improving event-
based non-intrusive load monitoring using graph signal processing,”
IEEE Access, vol. 6, pp. 53 944–53 959, 2018.

[11] S. M. Tabatabaei, S. Dick, and W. Xu, “Toward non-intrusive load
monitoring via multi-label classiﬁcation,” IEEE Transactions on Smart
Grid, vol. 8, no. 1, pp. 26–40, 2016.

[12] J. Z. Kolter and T. Jaakkola, “Approximate inference in additive factorial
hmms with application to energy disaggregation,” in Artiﬁcial intelli-
gence and statistics. PMLR, 2012, pp. 1472–1482.

[13] W. Kong, Z. Y. Dong, D. J. Hill, J. Ma, J. Zhao, and F. Luo,
“A hierarchical hidden markov model framework for home appliance
modeling,” IEEE Transactions on Smart Grid, vol. 9, no. 4, pp. 3079–
3090, 2016.

[14] R. Bonﬁgli, E. Principi, M. Fagiani, M. Severini, S. Squartini, and
F. Piazza, “Non-intrusive load monitoring by using active and reactive
power in additive factorial hidden markov models,” Applied Energy, vol.
208, pp. 1590–1607, 2017.

[15] O. Parson, S. Ghosh, M. Weal, and A. Rogers, “Non-intrusive load mon-
itoring using prior models of general appliance types,” in Proceedings
of the AAAI Conference on Artiﬁcial Intelligence, vol. 26, no. 1, 2012.
[16] S. Makonin, F. Popowich, I. V. Baji´c, B. Gill, and L. Bartram, “Ex-
ploiting hmm sparsity to perform online real-time nonintrusive load
monitoring,” IEEE Transactions on Smart Grid, vol. 7, no. 6, pp. 2575–
2585, 2015.

13

Figure 8. Ground truth (GT) and estimated power consumption of different appliances.

14

of the 2011 SIAM international conference on data mining.
2011, pp. 747–758.

SIAM,

[40] S. Makonin and F. Popowich, “Nonintrusive load monitoring (nilm)
performance evaluation,” Energy Efﬁciency, vol. 8, no. 4, pp. 809–814,
2015.

[41] R. Fourer, D. M. Gay, and B. W. Kernighan, “A modeling language for
mathematical programming,” Management Science, vol. 36, no. 5, pp.
519–554, 1990.

[42] L. Gurobi Optimization, “Gurobi optimizer reference manual,” 2021.

[Online]. Available: http://www.gurobi.com

[43] C. Klemenjak, C. Kovatsch, M. Herold, and W. Elmenreich, “A syn-
thetic energy dataset for non-intrusive load monitoring in households,”
Scientiﬁc Data, vol. 7, no. 1, pp. 1–17, 2020.

[44] S. Makonin, F. Popowich, L. Bartram, B. Gill, and I. V. Baji´c, “Ampds:
A public dataset for load disaggregation and eco-feedback research,” in
2013 IEEE Electrical Power & Energy Conference.
IEEE, 2013, pp.
1–6.

[45] J. Kelly and W. Knottenbelt, “The uk-dale dataset, domestic appliance-
level electricity demand and whole-house demand from ﬁve uk homes,”
Scientiﬁc data, vol. 2, p. 150007, 2015.

[46] D. Murray, L. Stankovic, and V. Stankovic, “An electrical load mea-
surements dataset of united kingdom households from a two-year
longitudinal study,” Scientiﬁc data, vol. 4, no. 1, pp. 1–12, 2017.
[47] S. Boyd, N. Parikh, and E. Chu, Distributed optimization and statistical
Now

learning via the alternating direction method of multipliers.
Publishers Inc, 2011.

[17] A. Rahimpour, H. Qi, D. Fugate, and T. Kuruganti, “Non-intrusive
energy disaggregation using non-negative matrix factorization with sum-
to-k constraint,” IEEE Transactions on Power Systems, vol. 32, no. 6,
pp. 4430–4441, 2017.

[18] J. Kelly and W. Knottenbelt, “Neural nilm: Deep neural networks
applied to energy disaggregation,” in Proceedings of the 2nd ACM
International Conference on Embedded Systems for Energy-Efﬁcient
Built Environments, 2015, pp. 55–64.

[19] C. Zhang, M. Zhong, Z. Wang, N. Goddard, and C. Sutton, “Sequence-
to-point learning with neural networks for non-intrusive load monitor-
ing,” in Thirty-Second AAAI Conference on Artiﬁcial Intelligence, 2018.
[20] M. Kaselimi, N. Doulamis, A. Voulodimos, E. Protopapadakis, and
A. Doulamis, “Context aware energy disaggregation using adaptive
bidirectional lstm models,” IEEE Transactions on Smart Grid, vol. 11,
no. 4, pp. 3054–3067, 2020.

[21] V. Piccialli and A. M. Sudoso, “Improving non-intrusive load disag-
gregation through an attention-based deep neural network,” Energies,
vol. 14, no. 4, p. 847, 2021.

[22] C. Shin, S. Rho, H. Lee, and W. Rhee, “Data requirements for applying
machine learning to energy disaggregation,” Energies, vol. 12, no. 9, p.
1696, 2019.

[23] L. Mauch and B. Yang, “A new approach for supervised power disag-
gregation by using a deep recurrent lstm network,” in 2015 IEEE Global
Conference on Signal and Information Processing (GlobalSIP).
IEEE,
2015, pp. 63–67.

[24] K. Suzuki, S. Inagaki, T. Suzuki, H. Nakamura, and K. Ito, “Nonintrusive
appliance load monitoring based on integer programming,” in 2008 SICE
Annual Conference.
IEEE, 2008, pp. 2742–2747.

[25] D. Egarter and W. Elmenreich, “Load disaggregation with metaheuristic

optimization,” in Energieinformatik, 2015, pp. 1–12.

[26] M. Z. A. Bhotto, S. Makonin, and I. V. Baji´c, “Load disaggregation
based on aided linear integer programming,” IEEE Transactions on
Circuits and Systems II: Express Briefs, vol. 64, no. 7, pp. 792–796,
2016.

[27] D. Piga, A. Cominola, M. Giuliani, A. Castelletti, and A. E. Rizzoli,
“Sparse optimization for automated energy end use disaggregation,”
IEEE Transactions on Control Systems Technology, vol. 24, no. 3, pp.
1044–1051, 2015.

[28] F. M. Wittmann, J. C. L´opez, and M. J. Rider, “Nonintrusive load
monitoring algorithm using mixed-integer linear programming,” IEEE
Transactions on Consumer Electronics, vol. 64, no. 2, pp. 180–187,
2018.

[29] S. Zeinal-Kheiri, A. M. Shotorbani, and B. Mohammadi-Ivatloo, “Res-
idential load disaggregation considering state transitions,” IEEE Trans-
actions on Industrial Informatics, vol. 16, no. 2, pp. 743–753, 2019.

[30] Y.-H. Lin and M.-S. Tsai, “Development of an improved time–frequency
analysis-based nonintrusive load monitor for load demand identiﬁca-
tion,” IEEE Transactions on Instrumentation and Measurement, vol. 63,
no. 6, pp. 1470–1483, 2013.

[31] C. Lu, L. Ma, T. Xu, G. Ding, C. Wu, and X. Jiang, “Non-intrusive load
monitoring method based on improved differential evolution algorithm,”
in 2019 11th International Conference on Measuring Technology and
Mechatronics Automation (ICMTMA).

IEEE, 2019, pp. 279–283.

[32] D. Egarter, A. Sobe, and W. Elmenreich, “Evolving non-intrusive load
monitoring,” in European Conference on the Applications of Evolution-
ary Computation. Springer, 2013, pp. 182–191.

[33] R. Tibshirani, M. Saunders, S. Rosset, J. Zhu, and K. Knight, “Sparsity
and smoothness via the fused lasso,” Journal of the Royal Statistical
Society: Series B (Statistical Methodology), vol. 67, no. 1, pp. 91–108,
2005.

[34] W. Wichakool, Z. Remscrim, U. A. Orji, and S. B. Leeb, “Smart
metering of variable power loads,” IEEE Transactions on Smart Grid,
vol. 6, no. 1, pp. 189–198, 2014.

[35] L. Grippo and M. Sciandrone, “On the convergence of the block
nonlinear gauss–seidel method under convex constraints,” Operations
research letters, vol. 26, no. 3, pp. 127–136, 2000.

[36] S. Z. Selim and M. A. Ismail, “K-means-type algorithms: A generalized
convergence theorem and characterization of local optimality,” IEEE
Transactions on pattern analysis and machine intelligence, no. 1, pp.
81–87, 1984.

[37] S. Lloyd, “Least squares quantization in pcm,” IEEE transactions on

information theory, vol. 28, no. 2, pp. 129–137, 1982.

[38] V. Piccialli, A. M. Sudoso, and A. Wiegele, “Sos-sdp: an exact solver for
minimum sum-of-squares clustering,” arXiv preprint arXiv:2104.11542,
2021.

[39] H. Kim, M. Marwah, M. Arlitt, G. Lyon, and J. Han, “Unsupervised
disaggregation of low frequency power measurements,” in Proceedings

