Received <day> <Month>, <year>;

Revised <day> <Month>, <year>;

Accepted <day> <Month>, <year>

DOI: xxx/xxxx

RESEARCH ARTICLE

Open Source Variational Quantum Eigensolver Extension of the
Quantum Learning Machine (QLM) for Quantum Chemistry

Mohammad Haidar*1,2,3 | Marko J. Ranƒçiƒá3 | Thomas Ayral4 | Yvon Maday2,5 | Jean-Philip
Piquemal*1

1Sorbonne Universit√©, Laboratoire de
Chimie Th√©orique(UMR-7616-CNRS), 4
place Jussieu-75005 Paris, France
2Sorbonne Universit√©, CNRS, Universit√©
Paris Cit√©, Laboratoire Jacques Louis Lions
(LJLL), 4 place Jussieu-75005 Paris, France
3TotalEnergies, Tour Coupole La D√©fense, 2
Pl. Jean Millier, 92078 Paris, France
4Atos Quantum Laboratory, Les
Clayes-sous-Bois, France
5Institut Universitaire de France,Paris,
France

Correspondence
Mohammad Haidar, Sorbonne Universit√©,
Laboratoire de Chimie Th√©orique(UMR-
7616-CNRS) and Laboratoire Jacques Louis
Lions (UMR-7598-CNRS), 4 place Jussieu,
75005 Paris, France. Email:
mohammad.haidar@upmc.fr;
Marko J. Ranƒçiƒá, TotalEnergies, Tour
Coupole La D√©fense, 2 Pl. Jean Millier,
92078 Paris, France. Email:
marko.rancic@totalenergies.com;
Jean-Philip Piquemal, Sorbonne Universit√©,
Laboratoire de Chimie
Th√©orique(UMR-7616-CNRS). Email: jean-
philip.piquemal@sorbonne-universite.fr

2
2
0
2

n
u
J

3
2

]
h
p
-
t
n
a
u
q
[

3
v
8
9
7
8
0
.
6
0
2
2
:
v
i
X
r
a

Abstract

Quantum Chemistry (QC) is one of the most promising applications of Quantum

Computing. However, present quantum processing units (QPUs) are still subject

to large errors. Therefore, noisy intermediate-scale quantum (NISQ) hardware is

limited in terms of qubits counts and circuit depths. SpeciÔ¨Åc algorithms such as

Variational Quantum Eigensolvers (VQEs) can potentially overcome such issues.

Here, we introduce a novel open-source QC package, denoted OpenVQE, provid-

ing tools for using and developing chemically-inspired adaptive methods derived

from Unitary Coupled Cluster (UCC). It facilitates the development and testing of

VQE algorithms. It is able to use the Atos Quantum Learning Machine (QLM), a

general quantum programming framework enabling to write, optimize and simulate

quantum computing programs. The QLM comes with a speciÔ¨Åc, freely available and

open-source module, myQLM-fermion, that provides key tools to perform QC com-

putations on a quantum computer (fermionic second quantization tools, UCC ansatz,

etc). We give an extensive introduction to myQLM-fermion. Our package, Open-

VQE, largely extends the QC capabilities of the QLM by providing: (i) the functions

to generate the diÔ¨Äerent types of excitations beyond the commonly used UCCSD

ansatz; (ii) a new implementation of the "adaptive derivative assembled pseudo-

Trotter method" (ADAPT-VQE), written in simple class structure python codes.

Interoperability with other major quantum programming frameworks is ensured

thanks to myQLM, which allows users to easily build their own code and execute

it on existing QPUs such as IBM, Google, Rigetti or Microsoft, etc. The com-

bined OpenVQE/myQLM-fermion libraries facilitate the implementation, testing

and development of variational quantum algorithms, thus helping choose the best

compromise to run QC computations on present quantum computers while oÔ¨Äering

the possibility to test large molecules. We provide extensive benchmarks for sev-
eral molecules associated to qubit counts ranging from 4 up to 24 where we focus

our work on reaching chemical accuracy, reducing the number of circuit gates and

optimizing parameters and operators between "Ô¨Åxed-length" UCC and ADAPT-VQE

ansatze.

 
 
 
 
 
 
2

1

INTRODUCTION

HAIDAR ET AL

Solving the Schr√∂dinger equation to obtain the many-electron wavefunction is the central problem of modern quantum chem-
istry 1,2. In practice, it is possible to achieve full accuracy for systems that contain few electrons through methods like the Full
ConÔ¨Åguration Interaction (FCI) and the Full Coupled-Cluster (FCC), which include all the electron conÔ¨Ågurations. However,
the computational cost grows exponentially when the number of electrons increases, as the dimension of the FCI and FCC wave
functions. For example, the number of possible Slater determinants increases as a function of the number of electrons ùëõùëí
and of
orbitals ùëõùëú

3:

(

dimÓà¥ ‚âà

ùëõùëú!
(ùëõùëú ‚àí ùëõùëí‚àï2)!(ùëõùëí‚àï2)!

)2

(1)

Attempts to reach full accuracy on large systems clearly faces the so-called ‚Äúexponential wall‚Äù that limits the applicability of the
most accurate methods to more complex chemical systems. So far, the largest calculations performed with classical supercom-
puters have only included tens of billions of determinants (see 4) with (20 electrons, 20 orbitals) with hopes to solve problems
of a size close to a trillion determinants (24 electrons, 24 orbitals) in a near future thanks to the advances of massively parallel
supercomputer architectures. 5 Given such constraints, other classes of methods have to be used to approximate the ground state
wavefunctions for larger many electrons systems. They include: (i) Density-Functional Theory (DFT), which relies on the use
of a single Slater determinant, and has been shown to be extremely successful while failing to describe strongly correlated sys-
tems 6,7,8; (ii) post Hartree-Fock methodologies such as the truncated Coupled-Cluster (CC) and the ConÔ¨Åguration Interaction
(CI) approaches that, even though being still operational beyond the single Slater determinant, cannot be applied to large size
molecules, due to their extreme computational requirements in terms of Slater determinants 9,10,11,12,13,14,15,16. A good example
is provided by the ‚Äúgold standard‚Äù methods denoted coupled-cluster single-, double-, plus perturbative triple-excitations
CCSD(T). Indeed, CCSD(T) is able to handle a few thousands basis functions, but at the cost of an enormous operation counts
that is limited by the large requirements in term of data storage. 17 No matter the choice of chemical basis sets (STO-3G, 6-31G,
cc-pVDZ, and beyond...), these methods are insuÔ¨Écient to reach accurate enough results for large molecules.

A paradigm shift proposed by Feynman 18,19 is to use quantum computers for simulating quantum systems. This has prompted
the community to use quantum computers in order to solve the quantum chemistry wavefunction problems. Intuitively, the advan-
tage comes from the fact that quantum computers can process ‚Äúexponentially‚Äù more information than classical computers 20.
Recent reviews provide a background about strategies for developing quantum algorithms dedicated to Quantum Chemistry.
These approaches include techniques such as Quantum Phase Estimation (QPE), Variational Quantum Eigensolvers (VQEs)
or quantum Imaginary Time Evolution (QITE). 21,22,23,24. All methods generally include three key steps: (i) transforming the
wavefunction into qubits; (ii) constructing circuits with one and two-qubit quantum gates; (iii) using the circuits to measure the
expectation value of a given Hamiltonian. However, currently, available quantum computers remain in the Noisy Intermediate-
Scale Quantum (NISQ) era and are limited by two main resources: the number of qubits and the circuit depth (i.e. number of
quantum gates) 25,26,27,28. Among all available strategies, the VQE family of techniques is a very promising algorithm that can
be applied to NISQ hardware 21,29,30,21,31. Indeed, it is better suited to such devices than other algorithms such as QPE, thanks
to its more modest requirements in term of quantum processor coherence times and it has already been successfully executed
on real NISQ quantum computers based on various technologies including superconducting qubits 32,33, photons 29 and trapped
ions 34. It is known that the performance of VQE algorithms is highly dependent on the type of wavefunction ansatz. In practice,
several types of ansatze can be used including: unitary coupled-cluster (UCC) wavefunctions 35,36, hardware-eÔ¨Écient 33,37, qubit
coupled cluster (QCC) 38, deep multi-scale entanglement renormalization ansatz (DMERA) 39 and Hamiltonian variational 40.
Furthermore, there are recent hybrid approaches such as adaptive ansatz 41 and subspace expansion method 42, that also utilize
the basic VQE scheme to build the wavefunction of the system.

In this article, we provide a newly-designed software package named "OpenVQE" that extends the Atos Quantum Learning
Machine ("QLM"). QLM is a quantum computing platform that allows to write hardware-agnostic quantum programs, com-
pile them in compliance with hardware constraints, and either emulate them classically with realistic noise or execute them on
actual quantum hardware. QLM is a mix between commercial tools and non-commercial ones provided by the Atos company.
OpenVQE is fully compatible with the freely available (open source) component of QLM called "myQLM", which is available

HAIDAR ET AL

3

online 43. myQLM is a quantum software stack for writing, simulating, optimizing, and executing quantum programs. It pro-
vides within a python interface: (i) a powerful semantics for manipulating quantum circuits, with support for universal as well
as custom gate sets, abstract parameters, advanced linking options, etc; (ii) a versatile execution stack for running quantum jobs,
including an easy handling of observables, special plugins for carrying out NISQ-oriented variational methods (such as VQE
or QPE), and easy application programming interface for writing customized plugins (e.g., for compilation or error mitigation),
as well as for connecting to any Quantum Processing Unit (QPU); (iii) a seamless interface to available quantum processors and
major quantum programming frameworks 44. The capacity of QLM/myQLM to interoperate with other packages such Qiskit 45,
Cirq 46 and PyQuil 47 etc, allows researchers from diÔ¨Äerent horizons to communicate, interact, exchange, and work more eÔ¨É-
ciently and faster. Furthermore, myQLM acts as an intermediate for users who want to access quantum computers (IBM, Google
etc...), providing them simple keys to run directly their jobs. myQLM comes with fermionic second quantization tools, which are
helpful for solving quantum chemistry problems. These tools are now included in a new specialized open source module called
"myQLM-fermion" that is part of the present work and designed to work synergistically with OpenVQE. It includes the key
QLM ressources that are important for Quantum Chemistry developments. In particular, we use two important tools provided
by myQLM-fermion which are useful for quantum resource reductions 35: (i) an active space (AS) selection approach that is use-
ful for the reduction of the number of qubits; (ii) MP2 pre-screening approach that involves an implementation of second order
M√∏ller-Plesset perturbation (MP2) amplitudes as an input guess that is useful for faster parameter optimization. By using the
initial myQLM building blocks, we were able to design our OpenVQE package, which provides the community with advanced
VQE tools especially dedicated to quantum chemistry problems needed to be solved by quantum computers. OpenVQE mainly
includes simple modules dedicated to the UCC family and to adaptive ansatze algorithms. These modules comprise various
features including:

1. diÔ¨Äerent types of UCC generators (truncated to single and double excitations): (i) Unitary Coupled Cluster Singles and
Doubles (UCCSD 48) approaches; (ii) Unitary Pair CC with Generalized Singles and Doubles Product (k-UpCCGSD 49)
techniques; (iii) the possibility of including excitations that form spin-complemented pair interactions 41 and excitations
that conserve only singlet spin symmetry of UCCGSD (see appendix of 50); (iv) Qubit Unitary Coupled Cluster Singles
and Doubles QUCCSD 51;

2. adaptive VQE algorithms (namely Adaptive Derivative-Assembled Pseudo-Trotter-VQE (ADAPT-VQE)), with diÔ¨Äerent
operator pools including: (i) Unitary fermionic operators (fermionic ADAPT-VQE 41); (ii) Anti-Hermitian Pauli operators
(qubit ADAPT-VQE 50,52).

These modules are structured in simple python classes requiring to write only a few lines of code. Furthermore, they provide
examples for the facile and rapid implementation of additional algorithms on the basis of myQLM basic tools.
The goal of the paper is to showcase the novel OpenVQE/myQLM-fermion combined quantum simulator package that enables
researchers to test, develop and measure the computational requirements of VQE Ô¨Çavors towards their future potential imple-
mentation on real supercomputers. It allows to compare the accuracy of the total molecular energies obtained thanks to various
variants of the UCC method to popular quantum chemistry methods using classical computers. The GitHub websites of Open-
VQE 53 and myQLM-Fermion 54 are public, under "MIT" and "Apache-2.0" licenses, respectively.
The paper is organized as follows: we review the theory of UCC ansatze including the diÔ¨Äerent types of excitations, the ADAPT-
VQE approach and the diÔ¨Äerent steps needed to implement it (section 2). We then introduce the QLM library, speciÔ¨Åcally its
myQLM-fermion open source extension while focusing for the Ô¨Årst time on the quantum chemistry tools that can help us to
develop OpenVQE (see section 3). We then describe OpenVQE and its several implementations of the UCC and ADAPT-VQE
families of methods and show how myQLM-fermion components can be used to develop those modules through simple codes
(section4). Finally, applying OpenVQE to our in-house HPC architecture (QLM simulator server at Total energies), we simu-
late a full set of molecules ranging from 4 to 24 qubits. We Ô¨Årst show the properties of the simulator applied to a set of small
molecules. Second, we describe how OpenVQE/myQLM-fermion can use the active space selections and MP2 pre-screening
initial guesses through computations on diÔ¨Äerent test molecules. Then using the UCC methods module we compare the UCCSD
to QUCCSD ansatz in terms of quantum gates, and then compare the chemical accuracy achieved by these algorithms to those
obtained by robust computational methods using classical computers. Afterwards, using our ADAPT-VQE module we compare
the fermionic and qubit ADAPT-VQE results obtained on a set of molecules in terms of chemical accuracy, numbers of varia-
tional parameters, operators and quantum gates. We detail a speciÔ¨Åc analysis for each of the fermionic and qubit ADAPT-VQE.
Finally, we compare the group of "Ô¨Åxed-length" ansatze to the ADAPT-VQE (section5). We conclude with a Table compar-
ing the features of the OpenVQE/myQLM-fermion packages with those implemented in other software packages, while giving

4

HAIDAR ET AL

some perspectives towards the development of new types of UCC ansatze and/or new variational algorithms within OpenVQE
in order to eÔ¨Éciently solve quantum chemistry problems.

REVIEW: UNITARY COUPLED CLUSTER (UCC) AND ADAPTIVE

2
DERIVATIVE-ASSEMBLED PSEUDO-TROTTER (ADAPT) WITHIN THE VQE ALGORITHM

We will use the following notations in the article: the indices i and j refer to the occupied spin-orbitals in the Hartree-Fock (HF)
state; indices a and b refer to the unoccupied (or virtual) spin-orbitals in the HF state. Indices p,q,r and s are always related to
spin-orbitals unless mentioned otherwise. When the orbitals are associated to an ùõº-like symbol (ùëùùõº
. . . .) they refer to spin-
(as given in the introduction) represent
up electrons, and those with a ùõΩ-like (ùëùùõΩ
by the number of active electrons and number of
the number of electrons and orbitals, respectively. We also denote ùúÇ and ùëÅùê¥
by the ùëõ-qubit initial
active spin-orbitals, respectively, and by ùëõ the number of qubits. In qubit representation we assign
|ùúìùëüùëíùëì ‚ü©
state transformation represented by a ket-state
the trial wave function and ùúÉ its variational
parameter, ùëà (ùúÉ) a parameterized unitary operator.

. . . .) refer to spin-down electrons. ùëõùëí

|ùëû0, ùëû1, ùëû2, ùëû3, ...ùëûùëõ‚ü©

. We call

|ùúì(ùúÉ)‚ü©

and ùëõùëú

, ùëûùõº

, ùëûùõΩ

Variational Quantum Eigensolver (VQE)

2.1
The Variational Quantum Eigensolver (or VQE) has been Ô¨Årst developed by Peruzzo et al. 29 and has received signiÔ¨Åcant attention
of a given Hamiltonian ùêª either in
from the research community in recent years. It aims at Ô¨Ånding the ground state energy ùê∏0
quantum chemistry, condensed matter, or nuclear physics. In our work and since we mainly focus on the quantum chemistry
problems, our Hamiltonian model is written in the fermionic second quantization form as:

ùêª =

‚àë

ùëùùëû

‚Ñéùëùùëûùëê‚Ä†

ùëù ùëêùëû +

1
2

‚àë

ùëùùëûùëüùë†

‚Ñéùëùùëûùëüùë†ùëê‚Ä†

ùëù ùëê‚Ä†

ùëû ùëêùëüùëêùë†,

(2)

ùëù (ùëêùëû) are anti-commuting operators that create (annihilate) electrons in spin-orbital ùëù(ùëû), respectively. The symbols ‚Ñéùëùùëû
denote the one- and two-body integrals of the corresponding operators and spin-orbitals in Dirac notation, respectively.

where ùëê‚Ä†
and ‚Ñéùëùùëûùëüùë†
These integrals can be easily computed on a classical computer.
The VQE method is based on quantum variational theory, whose starting point is the Rayleigh-Ritz variational principle, which
states that

‚ü®ùúì(ùúÉ)|ùêª|ùúì(ùúÉ)‚ü©

‚â• ùê∏0,

(3)

. An iterative
, that,
|ùúì(ùúÉ)‚ü©

namely the energy of the normalized ‚Äútrial‚Äù function
process minimizes the expectation value ùê∏(ùúÉ) = ‚ü®ùúì(ùúÉ)|ùêª|ùúì(ùúÉ)‚ü©
eventually, converges and gives an approximation of ùê∏0

|ùúì(ùúÉ)‚ü©

at the end of the process.

provides an upper bound for the ground state energy ùê∏0
with respect to the parameterized trial state

VQE is an hybrid classical-quantum implementation of the above variational iterative method that beneÔ¨Åts from using both
classical and quantum computers. It uses the quantum computer for the state preparation and energy measurement evaluations
which are the costly part in the VQE process, and the classical computer for performing the optimization required to update
the quantum state of the system. In order to see how this process works, we outline below the steps needed to perform a single
iteration of the VQE algorithm (see for example Figure 1 in 29):

1. Preparation of the trial state

on the quantum computer (or Quantum Processing Unit, QPU) with a circuit which

includes a set of one- and two-qubit parameterized gates (or even multi-qubit gates used for example for trapped ion case 55) .

|ùúì(ùúÉ)‚ü©

2. Once the circuit is prepared, the energy of the Hamiltonian given in Eq. 2 is measured. This is done by transforming it from
a fermionic to a qubit representation (using e.g., the Jordan Wigner (JW) transformation 56). This allows to express it as a sum
of Pauli strings (i.e. tensor products of Pauli operators):

ùêª =

‚àë

ùëó

‚ÑéùëóùëÉùëó,

(4)

with ùëÉùëó = ‚àèùëõùëú‚àí1
is a Pauli matrix involving qubit ùëñ. Once the Hamiltonian is written in this basis, the energy is
computed by measuring the expectation value of each Pauli string over the qubit representation of the circuit, and summing over

, where ùúéùëñ

ùúéùëó
ùëñ

ùëñ=0

HAIDAR ET AL

the measurements. The results of multiple measurements are then averaged to obtain the energy

ùê∏(ùúÉ) =

‚àë

ùëó

‚Ñéùëó‚ü®ùúì(ùúÉ)|

ùëõùëú‚àí1
‚àè

ùëñ=0

ùúéùëó
ùëñ |ùúì(ùúÉ)‚ü©.

5

(5)

3. The energy and qubit rotation parameters are then fed into a classical computer that runs an optimisation algorithm (e.g.,
COBYLA, SLSQP or BFGS) 57, which returns a new set of parameters. In order to reach convergence faster, initial guesses of
ansatz parameters of cluster operators obtained from the second-order M√∏ller-Plesset perturbation theory can be used. 35

4. The new set of parameters then used to prepare a new parametrized circuit from which a new sum over Pauli strings

expectation values, and hence a new energy expectation value, is calculated.

5. The previous two steps are repeated until a convergence criterion, typically the diÔ¨Äerence in energy between VQE iterations,
is below some threshold value, controlled by the conditions of the chosen optimizer method. To get more information about VQE,
the interested reader could refer to a detailed analysis of the algorithm by Cao et al. 22 and to a review detailing its application to
quantum chemistry 21. An overview of VQE eÔ¨Éciency using NISQ devices has also been recently proposed by Bharti et al. 28.

Unitary Coupled Cluster (UCC) approach within VQE

2.2
The degree of accuracy with which VQE obtains an approximate minimum energy of an electronic structure Hamiltonian with a
very good approximation of the ground state depends on several keys features such as the choice of the quantum state prepared
on a quantum device (circuit), the iterative solver, the number of iterations, the number of CC excited levels.
The unitary coupled cluster (UCC) approach, which is inspired from the classical coupled cluster computational method 58,59,9,15,
has been shown to be a good choice for reaching accurate results. It was originally introduced to the area of quantum chemistry
computations 14 and was later successfully implemented using quantum computers 60,29 thanks to its inherent simplicity. A com-
prehensive review of the UCC method is given in 35,36. UCC yields variational states prepared by using unitary evolution under a
sum of fermionic terms associated with their variational parameters. These terms represent the fermionic excitations that occur
on the top of the initial Hartree Fock (HF) state. The UCC wavefunction can be then expressed as follows:

|ùúìUCC‚ü© = ùëíùëá ‚àíùëá ‚Ä†

|ùúìHF‚ü©

(6)

where ùëá is the cluster operator and ùëá ‚Ä† is its Hermitian conjugate. As ùëá is the sum of the excitations at diÔ¨Äerent levels ùëá = ùëá1
+ ùëá2

until ùë• excitations, then

+ . . . . . . +ùëáùë•

ùëõùëú‚àí1
‚àë

ùëá ‚àí ùëá ‚Ä† =

ùúÉùëéùëñ(ùëê‚Ä†

ùëéùëêùëñ ‚àí ùëê‚Ä†

ùëñ ùëêùëé) +

ùëõùëú‚àí1
‚àë

ùúÉùëéùëèùëñùëó(ùëê‚Ä†

ùëéùëê‚Ä†

ùëè ùëêùëñùëêùëó ‚àí ùëê‚Ä†

ùëó ùëê‚Ä†

ùëñ ùëêùëèùëêùëé) + ...

(7)

ùëé,ùëè,ùëñ,ùëó

and ùúÉùëéùëèùëñùëó

ùëé,ùëñ
where ùëé, ùëè ‚àà ùë£ùëñùëüùë°, ùëñ, ùëó ‚àà ùëúùëêùëê, ùúÉùëéùëñ
are variational parameters associated with their cluster operators. They ensure that UCC
applied within VQE can approximate the true ground eigenstate of the system, which is not guaranteed in the case for example
of the hardware eÔ¨Écient ansatz, whose parameters are not chemically inspired. Preparing UCC ansatz on a classical computer
cannot be easily performed even for low-ordered cluster operators due to the non-truncation of the Baker‚ÄìCampbell‚ÄìHausdorÔ¨Ä
(BCH) series 61. On the contrary, it can be prepared on a quantum device, and it has been shown that VQE can yield a Ô¨Ånal state
of right parametrization with a good overlap that preserves the Ô¨Ådelity close to one (e.g. with an overlap
close to
one, between the converged UCC solution and the FCI solution ùúì0

‚ü®ùúìùëà ùê∂ùê∂ |ùúì0‚ü©

).

Implementation of Unitary Coupled Cluster on quantum devices

2.2.1
In this subsection, we describe in detail the implementation of the UCC wavefunction on a quantum computer, which is an
important component in the VQE steps described above. The UCC wavefunction in Eq. (6) is implemented on a quantum
device by Ô¨Årst constructing a circuit corresponding to the qubit representation of the HF state state (by implicitly using JW
representation)

|ùúìùêªùêπ ‚ü©ùëÑ = |11110000...‚ü©

refers to a single qubit being in the state 0 or 1. In the multi-qubit register, we assign each qubit to a spin-orbital,
refers to an occupied
then by applying a set of (non-parametrized) gate

state refers to an unoccupied spin-orbital, while

|1‚ü©

|0‚àï1‚ü©

where
with orbital energies ranging from low to high. The
spin-orbital. The device qubit register is initialized to a zero state
operations (for example, X gates) to
After having
|ùúìùêªùêπ ‚ü©ùëÑ

|0000...‚ü©

|0‚ü©

prepared on the device, the unitary operator ùëà (ùúÉ) = ùëíùëá ‚àíùëá ‚Ä† has to be implemented as well. This is done

, the qubit representation of the HF state,

|ùúìùêªùêπ ‚ü©ùëÑ

, is created.

|0000000...‚ü©

6

HAIDAR ET AL

following these steps: ùëà (ùúÉ) has to be Ô¨Årst decomposed into operations that can be implemented into circuit compatible with
present available quantum computers. To do this, in practice, ùëà (ùúÉ) is approximated using the Trotter decomposition 62,63,64, which
breaks up the exponential of a sum to an ordered product of individual exponentials. Such transformation provides a reasonable
approximation to the full unitary operator which is disassembled into local unitary operators. Following Eqs. (1.3-1.6) in 65, the
formula of trotterized ùëà (ùúÉ) with ùëá ‚àí ùëá ‚Ä† (Eq. 7) truncated at ùë• = 2 excitations can be expressed as:

(

‚àè

)ùë°

ùúÉùúå
ùë°

ùëí

(ùëáùúå‚àíùëá ‚Ä†
ùúå )

ùëà (ùúÉ) ‚âà

ùúå

+ Óàª (

1
ùë°

)

(8)

where ùë° is the number of Trotter steps and ùúå corresponds to the elements of excitations introduced in Eq. 7. Orders of ùë° above
one can decrease the Trotterization error, however for the current available NISQ devices, it is not recommended since it would
involve additional gates induced by the UCC ansatz translation into a quantum-circuit 66,36. Nevertheless, as is shown in Figure
5 of reference 66, by using UCCSD method in H
molecule, increasing the trotter error does not aÔ¨Äect the convergence and the
2
UCCSD energy. In the present work, we use an UCC ansatz truncated at the single and double excitations levels while we employ
a single Trotter step. Once these approximations are performed, each exponential of a fermionic excitation operator (see Eq. (8))
can be directly implemented as a quantum circuit, i.e. as a series of parameterized gates ùëà (ùúÉ) = ùëà1(ùúÉ1)ùëà2(ùúÉ2)ùëà3(ùúÉ3)...ùëàùëò(ùúÉùëò)
applied to the qubits, where ùëàùëò(ùúÉùëò) is the ùëòùë°‚Ñé one- or two-qubit unitary gate, controlled by a ùúÉùëò
parameter. Having ùëà (ùúÉ) prepared
and applied into

, completes the circuit on the quantum computer that generates

.

|ùúìùêªùêπ ‚ü©ùëÑ

|ùúìùëà ùê∂ùê∂ ‚ü©

Exponential mappings

2.2.2
The CNOT staircase 21,25,34 is the standard method to map the exponential of the fermionic excitation evolution (after JW
transformation) into a sequence of gates. In theory, the JW transformation relates spin-1/2 operators to fermionic creation and
annihilation operators. JW is the basic transformation we used through the article. Mapping the UCC ansatz from this method
has been shown to provide accurate results associated to a smooth optimization convergence 21. However, the cost of using such
a method is linked to the increase in the number of CNOT gates, which scales linearly with the system size ùëÇ(ùëõùëú) when a JW
transformation is used 50. Consequently, it limits the size of molecule that can be tested on available NISQ devices. Nevertheless
this method has been extensively tested using diÔ¨Äerent types of fermionic excitation presented in the next section. They include:
UCCSD and UCCGSD, k-UpCCGSD ansatze. There are also other types of excitations that generate other versions of the UCC
ansatze (see 36 for example) but they are out of the scope of the present work. Additional work has been done towards optimizing
the number CNOT counts gates and circuit depth by constructing CNOT- eÔ¨Écient circuits 67,68,69 in order to implement unitary
evolutions of single and double qubit excitation operators, which obey to the qubit commutation relations. The resulting circuits
require up to 2 (8) times fewer CNOTs in the case of single (double) fermionic excitation evolutions than within the standard
method. This type of qubit evolution can be used to construct a new version of the UCC ansatz which is called QUCCSD (see
next section). Mappings of both exponentials corresponding to fermionic and qubit excitation evolutions through CNOT stair-
case and eÔ¨Écient circuit methods are explained in detail in chapter two of 70, as well as a brief explanation of the deÔ¨Ånitions of
CNOT gates and depth from the two circuit methods.

Unitary Coupled Cluster approaches truncated at single and double excitations levels
2.3
In this subsection we list the diÔ¨Äerent versions of UCC that are truncated at the single and double excitation levels, by deÔ¨Åning
the excitation generator in each UCC version. We review as well their recent use within variational algorithms. We Ô¨Årst focus
on the UCCSD and QUCCSD ansatze for comparison purposes on the scale of gate complexity and CNOT counts. We then
focus on a second group of methods that includes UCCGSD and k-UpUCCGSD, which as is shown in some reviews, it performs
better in term of chemical accuracy than the Ô¨Årst group of ansatze. However, it has been shown that such approaches require an
increased circuit depth than the Ô¨Årst group of techniques. These features have motivated us to implement these versions of UCC
together with ADAPT-VQE (presented in the next section) in our OpenVQE package (see sec 4).

UCCSD and QUCCSD ansatze

2.3.1
UCCSD:
Unitary Coupled Cluster Single and Double was the Ô¨Årst commonly used ansatz by the quantum chemistry community for
quantum computing, and it was successfully tested experimentally on quantum computers using VQE 60,34. Chemically, the

HAIDAR ET AL

7

UCCSD ansatz includes few excitations of fermionic single and double operators, which occur only from occupied to unoccupied
(virtual) spin-orbitals on the top of the HF state. These excitations are given by:
‚àë

‚àë

ùúÉùëéùëñ(ùëê‚Ä†

ùëéùëêùëñ ‚àí ùëê‚Ä†

ùëñ ùëêùëé) +

ùúÉùëéùëèùëñùëó(ùëê‚Ä†

ùëéùëê‚Ä†

ùëè ùëêùëñùëêùëó ‚àí ùëê‚Ä†

ùëó ùëê‚Ä†

ùëñ ùëêùëèùëêùëé)

(9)

where ùëé, ùëè ‚àà ùë£ùëñùëüùë°, ùëñ, ùëó ‚àà ùëúùëêùëê. By assuming a single-step Trotter approximation (Eq. (8)), UCCSD is given by the product of
single and double fermionic evolutions

ùëéùëñ

ùëéùëèùëñùëó

ùëà (ùõâ) =

‚àè

(

ùëí

ùëé,ùëñ

ùúÉùëéùëñ(ùëê‚Ä†

ùëé ùëêùëñ‚àíùëê‚Ä†

ùëñ ùëêùëé)

) ‚àè

(

ùëí

ùëé,ùëè,ùëñ,ùëó

ùúÉùëéùëèùëñùëó (ùëê‚Ä†

ùëé ùëê‚Ä†

ùëè ùëêùëñùëêùëó ‚àíùëê‚Ä†

ùëó ùëê‚Ä†

ùëñ ùëêùëèùëêùëé)

)

(10)

QUCCSD:
The Qubit Unitary Coupled Cluster Single and Double method is a simpliÔ¨Åed version of the UCCSD ansatz (Eq. (10)) in which
only single and double excitation are used to construct the trial wavefunction

ùëà (ùõâ) =

‚àè

(

ùëí

ùëé,ùëñ

ùúÉùëéùëñ(ùëû‚Ä†

ùëé ùëûùëñ‚àíùëû‚Ä†

ùëñ ùëûùëé)

) ‚àè

(

ùëí

ùëé,ùëè,ùëñ,ùëó

ùúÉùëéùëèùëñùëó (ùëû‚Ä†

ùëé ùëû‚Ä†

ùëè ùëûùëñùëûùëó ‚àíùëû‚Ä†

ùëó ùëû‚Ä†

ùëñ ùëûùëèùëûùëé)

)

,

(11)

ùëé(ùëûùëñ) are the qubit creation (annihilation) operators without the inclusion of Z-Pauli terms after JW transformation
where ùëû‚Ä†
(see their expressions in chapter two, section 2.2 (Eqs. 2.11 and 2.12) of 70). These excitations can be achieved by particle-
preserving exchange gate rotations in the qubit space. It diÔ¨Äers from UCCSD ansatz, which contains many Z-Pauli terms after
JW transformation. The actual role of ùëç-Pauli is to conserve the parity from fermionic creation (annihilation) ùëê‚Ä†(ùëê) operators,
while keeping the time-symmetry and particle conservation. By comparing QUCCSD to UCCSD ansatz VQE performance for
a few simple molecules, it has been shown 51 that the two ans√§tze could achieve a nearly identical accuracy in the estimation
of the ground state energies. Even though the parity property is missed in the qubit evolution excitations, it was found, as is
explained in previous section, that the advantage of using QUCCSD is to reduce the CNOT counts with respect to the CNOT
staircase circuit to implement fermionic evolutions. This demonstrates that QUCCSD is suÔ¨Écient to approximate the exact FCI
wavefunction with a smaller number of gates in the circuit and it might be more favorable for its use on current NISQ devices.
However it has been also shown that an unnecessarily large number of parameters and operators occur when the UCCSD and
QUCCSD ansatze were used especially when system size gets larger. The increase in parameter and operator counts deepens
the circuit which leads to decrease the chemical accuracy in ground state molecular energies. Morever, these operators may
not be ordered in practice and could further decrease the precision. Attempts for keeping ordered operators have been recently
proposed. 35,38,41,71

UCCGSD and k-UpCCGSD ansatze

2.3.2
UCCGSD:
Unitary Coupled Cluster Generalized Single and Double has been mentioned Ô¨Årst in Ref. 48, then latter described in Reference 49
for using it in quantum computing applications. It consists in excitations that occur from occupied to occupied, occupied to
unoccupied as is expressed in Eq .10, or unoccupied to unoccupied levels:

‚àë

ùëùùëû

ùúÉùëûùëùùëê‚Ä†

ùëû ùëêùëù +

‚àë

ùëùùëûùëüùë†

ùúÉùëüùë†ùëùùëûùëê‚Ä†

ùëü ùëê‚Ä†

ùë† ùëêùëûùëêùëù ‚àí ‚Ñé.ùëê

(12)

k-UpCCGSD:
ùëò-UpCCGSD denotes Unitary Pair Couple Cluster with Generalized Single and Double Product 49, where ùëò denotes the products
of unitary paired generalized double excitations, along with the full set of generalized single excitations. In other words, in
ùëò-UpCCGSD, single excitation operators are fully generalized without any speciÔ¨Åc constraint on the choice of occupied and
virtual orbitals, but the double excitation operators are generalized and restricted to transitions of pair electrons acting on the
same orbital:

ùëá2 ‚àí ùëá ‚Ä†

2 =

ùúÉùëûùõºùëûùõΩ ùëùùõºùëùùõΩ

ùëê‚Ä†
ùëûùõº

ùëê‚Ä†
ùëûùõΩ

ùëêùëùùõΩ

ùëêùëùùõº

‚àí ‚Ñé.ùëê

(13)

‚àë

ùëûùõºùëûùõΩ ùëùùõºùëùùõΩ

It was recently demonstrated 49,72 that the UCCGSD ansatz leads to more accurate results for ground state energies than the
simpler UCCSD. In the same work, it was shown that starting from ùëò = 3 (i.e 3-UpCCGSD) brings better accuracy than UCCSD
molecule using 6-31G basis set). Indeed, such approaches were also engineered not only
ansatz (see for example table 4 for H

4

8

HAIDAR ET AL

for ground states but also to tackle excited states without undesired spin symmetry crossing over to lower states during VQE
optimizations. They have been also used in connection with the variational Quantum DeÔ¨Çation algorithm (VQD), that is used
to determine the energies of the ground and excited states 73.

Adaptive Derivative-Assembled Pseudo-Trotter-VQE (ADAPT-VQE)

2.4
Instead of a Ô¨Åxed-length ansatze, other types of iterative variational algorithms have been proposed by the community 74,75,76,77,78
There are two reasons for that: (1) the Ô¨Åxed-length ansatze use unnecessarily excitations that can be considered as redundant
terms as they do not contribute to approximate the FCI wavefunction. This creates longer circuit depth and consumes a greater
number of variational parameters; (2) Ô¨Åxed-length ansatze such as UCCSD or QUCCSD cannot provide a good chemical accu-
racy for strongly correlated systems 51 (i.e. see for example the H
molecule in section 5). This problem occurs at long bond
lengths and could be solved by including higher-order excitations and/or using multiple-step Trotterization in the UCCSD or
QUCCSD ansatz. Yet, both of these suggestions are problematic since they would necessarily deepen the circuits and increase
the number of variational parameters. Fixed-length ansatze like 3-UpCCGSD (or k>3) and UCCGSD might also provide very
good accuracy at these bond lengths, because excitations considered are general. However, this yield many redundant terms dur-
ing optimization, and as the system size increases, the number of operators and parameters increase as well as the circuit depth.
The ADAPT-VQE approach is an important step toward solving these issues 41,50.

6

The ADAPT-VQE algorithm constructs the molecular system‚Äôs wavefunction dynamically and can in principle avoid redun-
dant terms. It is grown iteratively in the form of disentangled UCC ansatz as given in Eq. (14). At each step, an operator or a few
operators are chosen from a pool: the operator(s) contributing to the largest energy deviations is (are) chosen and added gradu-
ally to the ansatz until the exact FCI wavefunction has been reached (see below in subsubsection 2.4.1 steps of the algorithm).
This process allows reaching this goal faster than the UCC-family ansatze. For example, within the normal UCCSD-VQE, we
would need several trotterization steps to reach a certain chemical accuracy to Ô¨Ånd the exact FCI. Conversely, with the ADAPT-
VQE algorithm and to obtain the same level of accuracy, the ansatz requests fewer variational parameters, and a correspondingly
shallower circuit containing a smaller number of gates.

The FCI wave function approximated within arbitrary accuracy from ADAPT-VQE is given by

(

‚àû
‚àè

‚àè

ùëò=1

ùëùùëû

ùëíùúÉùëùùëû(ùëò) ÃÇùê¥ùëù,ùëû

‚àè

ùëüùë†

)

ùëíùúÉùëùùëûùëüùë†(ùëò) ÃÇùê¥ùëùùëû,ùëüùë†

|ùúìHF‚ü©,

(14)

6

, LIH and H

and two-body ÃÇùê¥ùëùùëû,ùëüùë†

which is in the form of a long product of one- ÃÇùê¥ùëù,ùëû
general operators generated from the pool of excitations,
where each of the variational parameters {ùúÉùëùùëû, ùúÉùëùùëûùëüùë†} is associated to an operator. Historically, fermionic ADAPT-VQE 41 was
the Ô¨Årst algorithm in the family of adaptive ansatze. The name ‚Äúfermionic‚Äù comes from the excitation pool operators formed as
spin-complement pairs of single and double fermionic evolutions (see Eqs. A1 and A2). The fermionic ADAPT-VQE has been
molecules (as shown in Ô¨Ågure 2 of 41
shown to bring accurate chemical results for several molecules such as for H
4
by using an ansatz constituted of fewer parameters and shorter circuit depth than for the corresponding UCCSD results.
Further work has been focused on proposing qubit ADAPT-VQE 50,52, as the motivation was toward reducing the circuit gates
more eÔ¨Éciently than with fermionic ADAPT-VQE. In the fermionic case, each fermionic operator transfers into eight-Pauli
strings (after JW transformation) including their Hermitian conjugates. When we want to map the exponential for each of these
Pauli-strings into circuits, using the CNOT staircase method, the Pauli strings correspond to "single" fermionic excitations will
request 4 CNOT staircase and those of double" fermionic excitations will request 16 CNOT staircase. In qubit ADAPT-VQE,
the pool used is a collection of anti-Hermitian operators where each operator consists of a string that contains a tensor product of
Pauli matrices. In qubit ADAPT-VQE each string is transpiled into a deÔ¨Åned number of CNOT gates using the CNOT staircase
method, but unlike the fermionic ADAPT-VQE, the qubit ADAPT-VQE produces a smaller number of gates at the end of the
process. Qubit ADAPT-VQE has been tested for several molecules 50, showing that the circuit is shallower- the number of gates
being reduced by one order of magnitude compared to fermionic ADAPT-VQE. However qubit ADAPT-VQE requests a higher
number of parameters and iterations in order to reach a certain level of chemical accuracy.
The cost of fermionic- and qubit-ADAPT-VQE is the number of measurements needed to compute the energy gradients. It scales
as ùëÇ(ùëõ8) 41,50 (where ùëõ represents the number of qubits). The choice of pool in qubit ADAPT-VQE has also been important
in the research to reach and approximate the FCI wavefunction, with a view to not only reduce the circuit depth compared to
fermionic ADAPT-VQE but also to minimize the number of operators in the pool without losing the completeness properties
of operators. Reducing the pool size from Óàª(ùëõ4) into 2ùëõ ‚àí 2 operators and maintaining the necessary and suÔ¨Écient conditions

HAIDAR ET AL

9

for completeness has been achieved in a recent work 52. This new scale of pool size reduces the number of measurements from
ùëÇ(ùëõ8) to ùëÇ(ùëõ5) for a given molecular system. In the same reference, it was shown that incorporating symmetries into the pool
solves the convergence problems caused by the lack of symmetries.

Implementing fermionic or qubit ADAPT-VQE algorithms

2.4.1
Here we describe the procedure to implement the fermionic or qubit-ADAPT-VQE. The Ô¨Årst three steps present the essential
components for implementing the algorithm and the rest of steps describes the iterative loop in ADAPT-VQE:

1) In the ADAPT-VQE, the computation of one-body and two-body integrals is performed with a chemistry package such as
pySCF. This allows one to write the Hamiltonian in the second-quantization form given by Eq. 2. This Hamiltonian is transformed
into a qubit representation by using a spin transformation (see section 2.1, Eq. 4).

2) One has to deÔ¨Åne a pool of operators of size ùëö. We can have two types of pools, the Ô¨Årst is of fermionic nature and the
second is related to qubits, depending on the ADAPT-VQE variant used. Within a fermionic ADAPT approach, the pool is
deÔ¨Åned as ùêπùëö = {ùêπùëö(ùëù, ùëû), ùêπùëö(ùëù, ùëû, ùëü, ùë†)} and consists of one- ùêπùëö(ùëù, ùëû) and two-ùêπùëö(ùëù, ùëû, ùëü, ùë†)- body unitary generalised fermionic
excitations. ùêπùëö
are considered as the set of all unique spin-complemented one- and two-body operators, as they are given in eqs.
A1 and A2. In the qubit ADAPT case, the pool is deÔ¨Åned as single and double qubit evolutions, ùëÑùëö = {ùëÑùëö(ùëù, ùëû), ùëÑùëö(ùëù, ùëû, ùëü, ùë†)}
(for more details about the nature of these operators, one can refer to subsubsection. 5.3.3).

3) A reference Hartree-Fock

state needs to be chosen in the qubit representation that preserves the number of electrons
of the system. At this stage, it is then possible to construct the ansatz by starting the ADAPT-VQE-iteration at ùëò = 1. The ansatz
is initialized by the identity ùëà (0)(ùúÉ) = ùêº and then it is actually represented by the HF state. Then the loop starts (by a "while
loop" until exit) of the ADAPTIVE wavefunction as follows.

|ùúìùêªùêπ ‚ü©

4) Then the trial state with the current ansatz on the quantum simulator

from the previous VQE-iteration, has to be prepared.

|ùúì (ùëò‚àí1)

‚ü© = ùëà ùëò‚àí1 (ùúÉùëò‚àí1

)

|ùúìùêªùêπ ‚ü©

, where ùúÉùëò‚àí1

comes

5) In order to obtain the energy gradient, the commutator has to be measured between the Hamiltonian ùêª and each of the
and the

operators in the pool. For the fermionic ADAPT-VQE case, the exponential for each of unitary fermionic operator in ùêπùëö
gradient is the derivative of energy over ùúÉùëò‚àí1

:

ùúïùê∏(ùëò‚àí1)
ùúïùúÉùëö
For the Qubit-ADAPT-VQE case, the exponential for each of unitary fermionic operator in ùëÑùëö
of energy over ùúÉùëò‚àí1

|[ùêª, ùêπùëö]|ùúì (ùúÉùëò‚àí1

= ‚ü®ùúì (ùúÉùëò‚àí1

‚ü©.

)

)

:

(15)

, and the gradient is the derivative

6) If the norm of the gradient vector

ùúïùê∏(ùëò‚àí1)
ùúïùúÉùëö

= ‚ü®ùúì (ùúÉùëò‚àí1

)

|[ùêª, ùëÑùëö]|ùúì (ùúÉùëò‚àí1

)

‚ü©

‚àö

(

||ùëî(ùëò‚àí1)

|| =

)2

ùúïùê∏(ùëò‚àí1)
ùúïùúÉ1

+ ... +

)2

(

ùúïùê∏(ùëö)
ùúïùúÉùëö

becomes smaller than a threshold, ùúñ, then there is an exit of the loop.
7) The operator with the largest gradient is then found

ùúïùê∏(1)
ùúïùúÉ1
and this single operator is added to the left end of the ansatz, with a new variational parameter ùúÉùëò = ùúÉùëñ
corresponding to fermionic and qubit ADAPT are given respectively by:

ùúïùê∏(ùëò‚àí1)
ùúïùúÉùëö

ùúïùê∏(2)
ùúïùúÉ2

, ‚Ä¶ , |
|
|

max
ùúÉùëñ

, |
|
|

|
|
|

|
|
|

|
|
|

|
|
|

(

)

|ùúì (ùëò)

‚ü© = ùëíùúÉùëòùêπùêæ |ùúì (ùëò‚àí1)

‚ü© = ùëíùúÉùëòùêπùëò ‚ãØ ùëíùúÉ3ùêπ3ùëíùúÉ2ùêπ2ùëíùúÉ1ùêπ1|ùúìùêªùêπ ‚ü©

‚ü© = ùëíùúÉùëòùëÑùëò|ùúì (ùëò‚àí1)
8) Perform a VQE experiment to re-optimize all parameters {ùúÉùëò, ùúÉùëò‚àí1, ‚Ä¶ , ùúÉ2, ùúÉ1} in the ansatz.
9) When this is over we go back to step 4.

‚ü© = ùëíùúÉùëòùëÑùëò ‚ãØ ùëíùúÉ3ùëÑ3ùëíùúÉ2ùëÑ2ùëíùúÉ1ùëÑ1|ùúìùêªùêπ ‚ü©

|ùúì (ùëò)

(16)

(17)

. The wavefunction

(18)

(19)

Detailed information about the fermionic- and qubit-ADAPT-VQE procedure can be also found in section "Results" of 41.

10

HAIDAR ET AL

ALGORITHMS FOR QUANTUM CHEMISTRY ON THE ATOS QUANTUM LEARNING

3
MACHINE

In this section, we brieÔ¨Çy review the tools of the Atos Quantum Learning Machine (QLM) that are relevant for quantum chemistry
computations. We will then, in the next section (sec. 4), describe how we build an advanced chemistry module upon these tools.

A quantum programming environment and a powerful simulator

3.1
QLM is a complete environment designed for quantum software programmers, engineers and researchers 79. It includes a wide
variety of low-level tools useful for writing, compiling and optimizing quantum circuits 80,81,82,83,84. These tools come in the
form of so-called "plugins" that can be combined or stacked upon another to construct a quantum compilation chain.

FIGURE 1 QLM workÔ¨Çow for quantum chemistry. Top row: Steps to prepare a variational quantum job containing a parame-
terized circuit and the Hamiltonian whose ground state energy one wants to approximate. The leftmost (grey) box uses standard
third-party quantum chemistry modules. Orange boxes stand for QLM libraries. Bottom row: QLM stack, with plugins (orange
boxes) that pre- and post-process the job and results, and a QPU (green box) that executes the quantum job and returns a result.

QLM can simulate quantum circuits in a noiseless or noisy fashion. The noiseless simulators come in diÔ¨Äerent Ô¨Çavors, with
"Schr√∂dinger style" simulators (storing the wavefunction either in a dense fashion or using Matrix Product States 85), a "Feynman-
style" simulator 86, a binary decision diagram simulator 87, a CliÔ¨Äord simulator, etc. The Schr√∂dinger-style dense simulator can
reach up to 41 qubits for any circuit, while the other simulators can reach much larger qubit counts depending on the circuit
properties (entanglement, gateset, etc). The noisy simulators enable the emulation of realistic quantum noise, a crucial tool in
the current NISQ era. Gate noise, State Preparation and Measurement (SPAM) noise and idling noise can be taken into account
via density-matrix (resp. stochastic) simulations that can handle circuit with up to 20 (resp. 40) qubits. Most importantly, the
interface of the simulators (also called "Quantum Processing Units" or QPUs) is such that they can easily be swapped for
actual experimental QPUs without modifying the quantum program. QLM provides an interface to various hardware processors
including those constructed by IBM and Rigetti. Its circuits are also interoperable 44 with other quantum circuit descriptions like
Qiskit 45, Cirq 46 and PyQuil 47, as described in more detail in Appendix B. Moreover, QLM comes with quantum application

The QLM stackQuantum chemistry. Basis set + Geometry. Hartree-Fock‚Üí1-and 2-body integrals‚Ñéùëùùëû, ‚Ñéùëùùëûùëüùë†, orbital energies. [Beyond HF: 1-RDM ùê∑]From fermions to qubits . Hamiltonianùêª. [Active spaceselectionbasedon ùê∑]. Conversion to qubit representationùêªsp(JW, BK, parity)Ansatz construction. Construction of cluster operatorùëá(‘¶ùúÉ). Initial guessvia MP2 ‘¶ùúÉ0. Trotterizationofùëíùëá(ùúÉ)‚Üícircuit ùê∂(‘¶ùúÉ)Quantum job definition. Variationalcircuit ùê∂(‘¶ùúÉ). Hamiltonianùêªsp=‡∑çùëñùúÜùëñùëÉùëñVariational pluginMinimizeùê∏(‘¶ùúÉ)=‚ü®ùúì(‘¶ùúÉ)|ùêªsp|ùúì‘¶ùúÉ‚ü©Update ùúΩùíå‚ÜíùúΩùíå+ùüèuntilconvergence to ùúΩ‚àóCompilation plugins. Connectivity. Gateset. Qubit ordering. Depthoptimization. etcObservable Splitter pluginGeneratejobs to computeœÉùëñùúÜùëñ‚ü®ùúì(‘¶ùúÉùëò)|‡∑©ùë∑ùëñ|ùúì‘¶ùúÉùëò‚ü©(Pauli operatorgrouping, ‚Ä¶)QPU. Perfectsimulators(Schr√∂dinger, MPS, stabilizer‚Ä¶). Noisy simulators(gate/SPAM/idlenoise). Interface to trueQPUs: IBMQ, Google, Rigetti, ‚Ä¶Job{ùë™(ùúΩ), ùëØùíîùíë} numberof shots{ùë™(ùúΩùíå), ùëØùíîùíë} {‡∑©ùë™(ùúΩùíå), ‡∑©ùëØùíîùíë} ‡∑©ùë™ùë¥ùúΩùíå,ùíÅùíäùüè‚Ä¶ùíÅùíäùë¥ùë¥‚ü®ùíÅùíäùüè‚Ä¶ùíÅùíäùë¥‚ü©‘¶ùúÉùëòùë¥ùë¨(ùúΩùíå)ùë¨ùúΩùíåùë¨ùúΩ‚àó[Gradients][ùùèùúΩùë¨ùúΩùíå]HAIDAR ET AL

11

libraries that enable the easy exploration of potential use cases of quantum computing. These libraries help generate quantum
programs in Ô¨Åelds ranging from combinatorial optimization to quantum chemistry and condensed-matter physics.

A summary of the QLM workÔ¨Çow for quantum chemistry is provided in Ô¨Ågure 1 . The top row represents the steps one has
to go through to handle a quantum chemistry problem using myQLM-fermion (bracketed terms represent optional steps). At the
end of these steps, one obtains a "job" comprising a parameterized quantum circuit (that implements a UCC ansatz) ùê∂( ‚ÉóùúÉ) and
a Hamiltonian ùêªsp
represented as a sum of Pauli terms. This job can then be fed to the QLM stack. This stack, represented in
the bottom row, can be constructed by the user at will depending on the QPU they want to execute the job on. A minimal stack
consists of a QPU (without plugins), which can handle minimal jobs containing native quantum circuits (with gates native to
the hardware and compliant with its connectivity) and ùëç-axis observables. To handle more sophisticated jobs, one can stack
"plugins" on top of the QPU. Each plugin has a well-deÔ¨Åned role, such as compiling the circuit to a given gateset, rewriting
it to comply with a given connectivity (see "Compilation plugins"), or generating all the elementary jobs required to compute
the expectation value of a general observable (see "Observable Splitter plugin"). Finally, some plugins can handle variational
jobs corresponding to the VQE algorithm. Such "variational plugins" handle the update of the variational parameters based
on the result of the previous steps. They can optionally generate jobs to compute the gradient of a given expectation value if
gradient-based optimization is asked for.

FIGURE 2 Overview of the QLM environment. Documentation of my-QLM/myQLM-fermion is given in 43,54.

In practice, the QLM environment is composed of software modules and a powerful classical HPC hardware appliance,
as described in Ô¨Ågure 2 . Among the software modules, some are available and downloadable for free as Python packages.
They come under the name of myQLM 43. myQLM includes modules for programming quantum circuits, with quantum libraries
(for performing e.g quantum arithmetic operations, etc), for describing quantum observables and analog quantum schedules. It
also comes with a basic noiseless simulator for quantum circuits, basic plugins (e.g for splitting observables depending on the
commutation relations of the Pauli operators), and modules for interacting with other quantum frameworks like Qiskit, Cirq, etc.
Finally, myQLM contains the aforementioned myQLM-fermion module. myQLM can be installed on a laptop or on a local cluster.
The size of the circuits that can be simulated with the QPU simulator of myQLM is limited by the available Random Access
Memory (RAM) (for a standard laptop, this corresponds to about 25 qubits). The Quantum Learning Machine is also a powerful
HPC appliance. It comes with extra software in addition to myQLM: advanced noiseless simulators, modules for describing
hardware models, noisy simulators (both gate-based and analog), advanced compilers, tomography and error mitigation modules,
among others. The appliance itself can simulate circuits with up to 41 qubits when using state vector simulators, and more when
using more speciÔ¨Åc representations of the wave function (like Matrix Product States or stabilizers). The software module we
present below, OpenVQE, relies only on myQLM modules, which means it can be used by simply downloading myQLM on one‚Äôs

The Quantum Learning MachineBasic noiselesssimulatorBasic pluginsInteroperabilitymodulesCircuit programmingQuantum libraries(QFT‚Ä¶)Observables and schedulesmyqlm-fermion. FermionicHamiltonians. Fermion-spin transforms. Trotterization‚Ä¶myQLM(free)QLM-specificsoftwareCompilersTomographyErrormitigationHigh-performance noiselesssimulatorsHardware modelsHigh-performance noisysimulatorsUp to 41 qubits in double precisionwithstate vectorsimulator Max 25 qubits (dependingon RAM)as a service (https) or SSH accessQLM applianceyourlaptopUp to 768 coresand 48 TB memory12

HAIDAR ET AL

personal machine. Therefore, the results shown for small qubit counts can be (up to the run times) reproduced on a personal
laptop. In practice, to execute the simulations, we used the QLM advanced noiseless statevector simulator so as to reach large
qubit counts and gain speed.

3.2 myQLM-fermion: An Open Source QLM module for fermionic many-body problems
The tools for quantum chemistry are collected into an open-source module called "myQLM-fermion", which is part of
myQLM. myQLM-fermion provides general tools for dealing with fermionic problems: representations of fermionic Hamiltoni-
ans (including usual Hamiltonians like the electronic structure Hamiltonian (Eq. (2)), the Hubbard and Anderson Hamiltonians),
transformations from fermion operators to qubit operators (Jordan-Wigner, Bravyi-Kitaev, parity), generation of quantum evo-
lution circuits via Trotterization, implementation of the quantum phase estimation algorithm, as well as various modules for
variational algorithms such as VQE (see subsection 2.1): libraries of variational ans√§tze (like hardware-eÔ¨Écient ans√§tze, match-
gate circuits, Low-Depth Circuit ansatz (LDCA) circuits), various optimization plugins (including the standard optimizers
implemented in scipy 57 (COBYLA, BFGS, etc) as well as the Simultaneous Perturbation Stochastic Algorithm (SPSA) and
Particle-Swarm Optimizer (PSO)).

A submodule of myQLM-fermion 54 is speciÔ¨Åcally devoted to quantum chemistry. It provides tools for selecting active spaces
(based on natural-orbital occupation numbers), generating cluster operators (and thus, via the aforementioned Trotterization
tools, UCC-type ans√§tze), and initial guesses for their variational parameters. The architecture of QLM and myQLM-fermion
allows for experts in a given Ô¨Åeld to construct their own advanced modules with the QLM building blocks.

The key building block of quantum chemistry computations is the Hamiltonian, Eq. 2. On QLM, it is described by an object

ElectronicStructureHamiltonian

1 from qat . fermion import E l e c t r o n i c S t r u c t u r e H a m i l t o n i a n
2 hamiltonian = E l e c t r o n i c S t r u c t u r e H a m i l t o n i a n (h , g )

where h and g are the tensors ‚Ñéùëùùëû
in Eq. (9). For instance, the following snippet

and ‚Ñéùëùùëûùëüùë†

of Eq. (2). Such an object also describes cluster operators such as the ones described

1 from qat . fermion import get_cluster_ops
2 cluster_ops = get_cluster_ops ( n_electrons , nqbits = nqbits )

creates the list containing the sets of single excitations {ùëê‚Ä†
ùëó ùëê‚Ä†
ùëê‚Ä†
ùëñ ùëêùëôùëêùëò, ùëò, ùëô ‚àà ùë£ùëñùëüùë°, ùëñ, ùëó ‚àà ùëúùëêùëê}.
These objects can be readily converted to a spin (or qubit) representation using various fermion-spin transforms:

ùëñ ùëêùëò, ùëò ‚àà ùë£ùëñùëüùë°, ùëñ ‚àà ùëúùëêùëê} and double excitations {ùëê‚Ä†

ùëòùëêùëñ ‚àí ùëê‚Ä†

ùëô ùëê‚Ä†

ùëòùëêùëóùëêùëñ ‚àí

1 # Jordan - Wigner
2 from qat . fermion . transforms import t r a n s f o r m _ t o _ j w _ b a s i s
3 hamiltonian_jw = t r a n s f o r m _ t o _ j w _ b a s i s ( hamiltonian )
4 cluster_ops_jw = [ t r a n s f o r m _ t o _ j w _ b a s i s ( t_o ) for t_o in cluster_ops ]
5

6 # Bravyi - Kitaev
7 from qat . fermion . transforms import t r a n s f o r m _ t o _ b k _ b a s i s
8 hamiltoni an_bk = t r a n s f o r m _ t o _ b k _ b a s i s ( hamiltonian )
9 clu ster_o ps_bk = [ t r a n s f o r m _ t o _ b k _ b a s i s ( t_o ) for t_o in cluster_ops ]

The transformed objects are now in the form of Eq. (4). With these qubit operators, one can then easily contruct a simple UCCSD
ansatz via trotterization of the exponential of the parametric cluster operator deÔ¨Åned in Eq. (9):

1 from qat . lang . AQASM import Program , X
2 from qat . fermion . trotterisation import m a k e _ t r o t t e r i s a t i o n _ r o u t i n e
3

4 prog = Program ()
5 reg = prog . qalloc ( nqbits )
6 # Create Hartree - Fock state ( assuming JW representation )
7 for qb in range ( n_electrons ) :
8

prog . apply (X , reg [ qb ])

9

10 # Define the full cluster operator with its parameters
11 theta_list = [ prog . new_var ( float , " \\ theta_ {% s } " % i ) for i in range ( len ( cluster_ops_jw ) ) ]
12 cluster_op = sum ([ theta * T for theta , T in zip ( theta_list , cluster_ops_jw ) ])
13

14 # Trotterize the Hamiltonian ( with 1 trotter step )
15 qrout = m a k e _ t r o t t e r i s a t i o n _ r o u t i n e ( cluster_op , n_trotter_steps =1 , final_time =1)
16 prog . apply ( qrout , reg )
17 circ = prog . to_circ ()

HAIDAR ET AL

13

The circuit we constructed, circ, is a variational circuit that creates a variational wavefunction
optimized to minimize the variational energy, Eq. (5). This is done by a simple VQE loop:

|ùúì(ùúÉ)‚ü©

. Its parameters can be

1 # create a quantum job containing the variational circuit and the Hamiltonian
2 job = circ . to_job ( observable = hamiltonian_jw , nbshots =0)
3

4 # import a plugin to perform the optimization
5 from qat . plugins import s c i p y M i n i m i z eP l u g i n
6 o pt i mize r _scip y = s c i p y M i n i m iz e P l u g i n ( method = " COBYLA " , tol =1 e -3 , options ={ " maxiter " : 1000} , x0 = theta_init )
7

8 # import a QPU to execute the quantum circuit
9 from qat . qpus import get_default_qpu
10

11 # define the quantum stack
12 stack = op ti mizer_scipy | get_default_qpu ()
13

14 # submit the job and read the result
15 result = stack . submit ( job )
16

17 print ( " Minimum energy = " , result . value )

The simulated QPU used in the previous code snippet can be readily replaced by an actual QPU by using the qat-interop

module. For instance, in the following snippet, we use a transmon QPU by IBM:

1 from qat . interop . qiskit import BackendToQPU
2 qpu = get_default_qpu ()
3 qpu = BackendToQPU ( token = MY_IBM_TOKEN , ibmq_backend = " ibmq_guadalupe " )

Conversely, circuits created using other quantum programming frameworks can be converted to the QLM format. For instance,
here we convert a circuit written in the Google Cirq format to a QLM circuit (that can then be fed to a QLM simulator):

1 from qat . interop . cirq import cirq_to_qlm
2 qlm_circ = cirq_to_qlm ( your_google_circ )

4

THE OPENVQE PACKAGE

OpenVQE facilitates the development of new algorithms on quantum computers. It consists in a couple of new modules
that extend the main myQLM/myQLM-fermion implementations (see section 3 above). Those modules allow to build normal
UCCSD algorithm, its variants and ADAPT-VQE‚Äôs algorithms as reviewed in section 2. To explain in another fashion, Open-
VQE allows to perform calculations using new types of UCC methods that are diÔ¨Äerent from the QLM predeÔ¨Åned ones such as
the regular UCCSD ansatz.

OpenVQE consists of two main modules which are inside "openvqe" folder given as follows:

‚Ä¢ UCC Family denoted in code by "ucc_family": this module includes diÔ¨Äerent classes and functions to generate the
fermionic cluster operators (fermionic pool) and the qubit pools, and to get the VQE optimized energies in the cases of
active and non-active orbital selections.

‚Ä¢ ADAPT denoted by "adapt": it includes two sub-modules which are:

‚Äì Fermionic-ADAPT: containing functions performing the fermionic ADAPT-VQE algorithmic steps in the active

and non-active space selections.

‚Äì Qubit-ADAPT: containing functions that perform the qubit ADAPT-VQE algorithmic steps calculation in the active

and non-active space orbital selections.

Additionally "openvqe" contains a subfolder named "common_Ô¨Åles" that stores all the internal functions needed to be imported
for executing the two modules. OpenVQE consists also a "notebooks" folder that allows the user to run and test the above two
modules which are theoretically described in the review section 2. In our GitHub website 53 we describe the package and the codes
allowing for performing these modules. The brief sketch of OpenVQE implementation is explained in the Ô¨Çow chart presented
in Ô¨Ågure 3 . We remind the reader that we will describe below the code of OpenVQE that studies the full space selections
and the codes which are related to active space selections can be found in the GitHub website 53 inside "notebooks" with preÔ¨Åx
"active_space" and the tools provided in documentation of 54 . In order to develop a new algorithm using our OpenVQE package,

14

HAIDAR ET AL

FIGURE 3 Flow chart of the OpenVQE package. The code is given in our Github repository and documentation 53.

it is important to list the diÔ¨Äerent parameters and return variables contained in its main functions. In what follows we describe
the snippets python codes which are written in the "notebooks" folder. Then, we describe the snippet codes related to some
internal functions related to "ucc_family" and "adapt", respectively.
The Ô¨Årst crucial parameters are the ones specifying the characteristics of the molecules such as symbol of the molecule; the
type of excitation generator, which are generators to produce the excitations that found in sec. 2.3: UCCSD (Eq. 9), QUCCSD
(Eq. 11), UCCGSD (Eq. 12), K-UpCCGSD (Eq. 13) and spin-complemented pair (Eq. A1 and Eq. A2); the spin transformation
mapping (JW, Bravi-Kitaev, parity basis), choice of active or non-active space selection, denoted respectively in our code as
molecule_symbol, type_of_generator, transform, and active.

1 # molecule examples : H2 , H4 , H6 , LiH , H2O , CO , CO2 , NH3 etc ...
2 molecule_symbol = ‚Äô H2O ‚Äô
3 # suppose user choose the spin - complemented generalized singlet and doublet
4 ty p e_ of_ gen era to r = ‚Äô s p i n _ c o m p le m e n t _ g s d ‚Äô
5 # user can type other type of generators , such as : uccsd , quccsd , uccgsd ,
6 # we type Jordan wigner ( JW ) ,
user can
7 transform = ‚Äô JW ‚Äô
8 # no active space selection , set :
9 active = False
10 # for active space ( AS ) , switch to

" active = True "

also type Bravyi - Kitaev or Parity basis

denoted as s p i n _ c o m p l e m e n t_ g s d

k - upccgsd , etc ...

The user speciÔ¨Åes these parameters in a class called MoleculeFactory. This class takes those parameters as input:

1 from openvqe . common_files . molecule_factory import MoleculeFactory
2 # returns the properties of a molecule :
3 r , geometry , charge , spin , basis = MoleculeFactory . get_parameters ( molecule_symbol = ‚Äô H2O ‚Äô)

deÔ¨Åne a function named as generate_hamiltonian that generates the electronic structure Hamiltonian (hamiltonian) and
other properties such as the spin hamiltonian (for example hamiltonian_jw), number of electrons (n_els), the list contains the
number of natural orbital occupation numbers (noons_full), the list of orbital energies (orb_energies_full)1 and info2:

1 # use myQLM - fermion tools to construct g e n e r a t e _ h a m i l t o n i a n () :
2 from qat . fermion import E l e c t r o n i c S t r u c t u r e H a m i l t o n i a n

1orbital energies are doubled due to spin degeneracy
2a dictionary that stores energies of some classical methods: Hartree-Fock, CCSD and FCI

HAIDAR ET AL

15

3 from qat . fermion . chemistry . pyscf_tools import p e r f o r m _ p y s c f _ c o m p u t a t i o n
4 from qat . fermion . chemistry . ucc import ( convert_to_h_integrals , t r a n s f o r m _ i n t e g r a l s _ t o _ n e w _ b a s i s )
5 from qat . fermion . transforms import ( get_jw_code , recode_integer , t r a n s f o r m _ t o _ j w _ b a s i s )
6

7 Hamiltonian , hamiltonian_jw , n_els , noons_full , orb_energies_full , info = MoleculeFactory . g e n e r a t e _ h a m i l t o n i a n (

m ol ecu le_sy mb ol = ‚Äô H2O ‚Äô , active = False , transform = ‚Äô JW ‚Äô)

In addition to that, we deÔ¨Åne another function named as generate_cluster_ops() that takes as input the name of excitation
generator user need (e.g., UCCSD, QUCCD, UCCGSD, etc.) and internally it calls the Ô¨Åle name generator_excitations.py which
allows generate_cluster_ops() to return as output the size of pool excitations, fermionic operators, and JW transformed
operators denoted in our code respectively as pool_size, cluster_ops and cluster_ops_jw:

1 # for normal uccsd case we use myQLM - fermion tool function :
2 from qat . fermion . chemistry . ucc_deprecated import g e t _ c l u s t e r _ o p s _ a n d _ i n i t _ g u e s s
3 # we put g e t _ c l u s t e r _ o p s _ a n d _ i n i t _ g u e s s in the g e n e r a t o r _ e x c i t a t i o n s . py together with the other types :
4 from . g e n e r a t o r _ e x c i t a t i o n s import ( uccsd , quccsd , singlet_gsd , singlet_sd , singlet_upccgsd , spin_complement_gsd ,

s p i n _ c o m p l e m e n t _ g s d _ t w i n )

5 pool_size , cluster_ops , cluster_ops_jw = MoleculeFactory . g e n e r a t e _ c l u s t e r _ o p s ( molecule_symbol = ‚Äô H2O ‚Äô ,

t y p e_ o f_ g e n er a to r = ‚Äô s p i n _ c o m p l e m e n t_ g s d ‚Äô , transform = ‚Äô JW ‚Äô , active = False )

6 # in our example ‚Äô s p i n _c o m p l e m e n t _ g s d ‚Äô:
7 def g e n e r a t e _ c l u s t e r _ o p s () :
8

pool_size , cluster_ops , cluster_ops_jw = None , None , None
if t ype _of _g ene rat or == ‚Äô s p i n_ c o m p l e m e n t _ g s d ‚Äô:

9

10

11 #
12 #
13

pool_size , cluster_ops , cluster_ops_jw

= s p i n _c o m p l e m e n t _ g s d ( n_el , n_orb , ‚Äô JW ‚Äô)

elif for other excitations ( uccsd , quccsd , singlet_upccgsd ...)

::::
return

pool_size , cluster_ops , cluster_ops_jw

Once these are generated, we import them as input to the UCC-family and ADAPT modules.
In the UCC module, we have two types of pools: fermionic pool and qubit pool. For the fermionic case, it is determined by
the generate_cluster_ops() function which is deÔ¨Åned before. For the qubit pool, we deÔ¨Åned a QubitPool class that deter-
mines the qubit cluster operators we name as returned_pool. Due to the variety of choices of qubit pools, we created two
functions in the QubitPool class. These functions are in the code deÔ¨Åned as follows: generate_pool_from_cluster() and
generate_pool_without_cluster(). The Ô¨Årst function takes as parameters the pool name and return the pool with its size.
The pools that are accessible for the user are as follows: full, full_without_Z and reduced_without_Z. However the function
generate_pool_without_cluster() takes as parameters the type of pool, pool generated from cluster operators and returns
the pool with its size. The type of pool that are considered as options for the user are as follows (subsubsection 5.3.3 describes
the nature of these pools): YXXX, XYXX, XXYX, XXXY, random, two, four, symmetry.

1 from openvqe . common_files . qubit_pool import QubitPool
2 # number of qubits :
3 nbqbits = hamiltonian_jw . nbqbits
4 # suppose user selects the pool_condition = ‚Äô full_without_Z ‚Äô then :
5 pool_size , returned_pool = QubitPool . g e n e r a t e _ p o o l _ f r o m _ c l u s t e r ( pool_condition , cluster_ops , nbqbits )
6 # Pools are related
7 pool_type = ‚Äô two ‚Äô
8 # for some pools such as pool_type = ‚Äô symmetry ‚Äô, we need to import the molecule_symbol in the function
9 pool_size , returned_pool = QubitPool . g e n e r a t e _ p o o l _ w i t h o u t _ c l u s t e r ( pool_type = pool_type ,

to qubit cluster operators suppose user selects pool_type = ‚Äô two ‚Äô then :

nbqbits = nbqbits ,

qubit_pool = cluster_ops_jw , molecule_symbol = ‚Äô H2O ‚Äô)

We also provide other functions that can be used by the user (e.g., qubit_excitations()) which could be used for performing
other type of VQE algorithms such as for QEB-VQE developed by Yordan et al. 69). Once the fermionic or qubit pool is generated,
we call the get_energies() from the EnergyUCC class in order to obtain the minimal energy calculated with the basic VQE
algorithm.

initial guesses theta_1 (2) can be MP2 guess , random intervals or fixed values

1 from openvqe . ucc_family . get_energy_ucc import EnergyUCC
2 #
3 # 1. from
4 # 2. from

UCC - family ( with returned pool = ansatz_ops and theta -1)
UCC - family but with qubit evolutions i . e from " Qubit Pool " ( with returned pool = ansatz_q_ops and

theta -2)

5 iterations , result = EnergyUCC . get_energies ( hamiltonian_jw , ansatz_ops , ansatz_q_ops , hf_init_sp , theta_1 , theta_2 , fci )

The EnergyUCC class performs the required steps to construct the VQE algorithm (see section 2.1) and allows to prepare the UCC
ansatz using standard or eÔ¨Écient circuits. These functions call the user-speciÔ¨Åed classical optimization algorithm (such as BFGS,
COBYLA), and returns iterations, results as dictionaries that would contain: (i) the number of classical parameters used,

16

HAIDAR ET AL

(ii) the number of CNOT gates used in the circuit3., (iii) the total number of Pauli-string evaluations, (iv) optimized energy (ùê∏0
)
and (v) energy substracted from the full conÔ¨Åguration interaction (FCI). As it is mentioned in previous section, plugins can be
used to perform optimization. We can also have another option for optimization use the classical library scipy.minimize:

1 from qat . lang . AQASM import Program
2 from qat . qpus import get_default_qpu
3 import scipy . optimize
4 # Example
5 t h e ta _o p tim i ze d _ 1 = []
6 # define tolerance : the precision goal for the value of energy in the stopping criterion .
7 tolerance =10**( -5)
8 method = " BFGS "
9 opt_result1 = scipy . optimize . minimize ( lambda theta : self . ucc_action ( theta_1 , hamiltonian_jw , ansatz_ops , hf_init_sp

) , x0 = theta_1 , method = method , tol = tolerance , options ={ ‚Äô maxiter ‚Äô: 50000 , ‚Äô disp ‚Äô: True })

10 # optimized parameters
11 xlist1 = opt_result1 . x
12 # explicit form of UCC_action function is to build the ucc ansatz and execute the circuit on QPU :
13 # from myQLM - fermion we need :
14 from qat . fermion . chemistry . ucc_deprecated import build_ucc_ansatz
15 # b u i ld_ u cc_ a nsatz function internally uses the m a k e _ s p i n _ h a m i l t o n i a n _ t r o t t e r _ s l i c e

function to build the HF

state in integer representation and to implement the UCC ansatz applied to HF state .

16 def ucc_action ( self , theta_1 , hamiltonian_jw , ansatz_ops , hf_init_sp ) :
17

qpu = get_d ef ault_qpu ()
prog = Program ()
reg = prog . qalloc ( hamiltonian_jw . nbqbits )
for n_term , ( term , theta_term ) in enumerate ( zip ( ansatz_ops , theta_1 ) ) :

init = hf_init_sp if n_term == 0 else 0
# n_steps is the trotter step
qprog = build_ucc_ansatz ([ term ] , init , n_steps =1)
prog . apply ( qprog ([ theta_term ]) , reg )

circ = prog . to_circ ()
job = circ . to_job ( job_type = ‚Äô OBS ‚Äô , observable = hamiltonian_jw )
res = qpu . submit ( job )
return res . value

18

19

20

21

22

23

24

25

26

27

28

In the fermionic ADAPT sub-module, we call the function fermionic_adapt_vqe() that takes as parameters the fermionic
cluster operators, spin Hamiltonian, maximum number of gradients to be taken per iteration, the type of optimizer, tolerance,
threshold of norm (ùúñ) and the maximum number of adaptive iterations:

1 from openvqe . adapt . f e r m io n i c _ a d a p t _ v q e import f e r m io n i c _ a d a p t _ v q e
2 # choose maximum number of gradients (1 ,2 ,3....)
3 n_max_grads = 1
4 # choose optimizer needed ( COBYLA , BFGS , SLSQP , Nelder - Mead etc ...)
5 optimizer = ‚Äô COBYLA ‚Äô
6 tolerance = 10**( -6)
7 # according to a given norm value we stop the ADAPT - VQE loop
8 type_conver = ‚Äô norm ‚Äô
9 thr eshold_needed = 1e -2
10 # the maximum external number of iterations to complete the ADAPT - VQE under a given threshold_needed
11 max_iterations = 35
12 fci = info [ ‚Äô FCI ‚Äô]
13 # sparse the Hamiltonian and cluster operators using myQLM - fermion tools obtained from MoleculeFactory , which

explicitly are :

14 h a m i l t o n i a n _ s p a r se = hamiltonian_jw . get_matrix ( sparse = True )
15 c l u s t e r _ o p s _ s p a r se = cluster_ops . get_matrix ( sparse = True )
16 # reference_ket
17 reference_ket , hf_init_sp = MoleculeFactory . get _re fer en ce_ ket ( hf_init , nbqbits , ‚Äô JW ‚Äô)
18 # when all these parameters are satisfied , then fermionic ADAPT - VQE function is :
19 f e r m i o n i c _ a d a p t _ v q e ( cluster_ops , hamiltonian_sparse , cluster_ops_sparse , reference_ket , h_sp , cluster_ops_jw ,

and hf_init_sp can be obtained from class MoleculeFactory () :

hf_init_sp , n_max_grads , fci , optimizer ,
threshold_needed , m a x _ e x t e r n a l _ i t e r a t i o n s = max_iterations )

tolerance , type_conver = type_conver , threshold_needed =

fermionic_adapt_vqe() calls internally other functions allowing the execution of the steps from 4th to 7th given in subsection
2.4: (1) prepare the trial state through prepare_state(); (2) compute analytically the commutator between the hamiltonian
and the fermionic operator through compute_gradient(); (3) collect and arrange the gradients in a list from maximum to
minimum (with avoiding the zeros) through sorted_gradient(); (4) if the norm is less than the (ùúñ), the program exits returning

3We use the function count() from OpenVQE to evaluate the gates from the Ô¨Ånal optimized circuit, among which are the CNOT gates. We count them with the following
based condition: If the optimized parameter associated with the full cluster operator cluster_ops_jw is less than a certain threshold equal to 10‚àí7, we omit it from the list,
which means that the suppressed operators will not be included in the mapping into circuit, and thus the CNOT gates coming from the suppressed operators are not counted.

HAIDAR ET AL

17

the generated values, else it will continue calculating the maximum gradient(s) of operator(s) depending on the number of
maximum gradient in the input, after that, we append the operator(s) associated with their parameter(s) to the left of the previous
trial state (step (1)) during which we apply VQE using function ucc_action(), which is described above in order to optimize
the parameter(s) until satisfying the threshold‚Äôs condition; This function returns: (i) the number of classical parameters for the
Ô¨Ånal ansatz, (ii) the number of CNOT gates in the ansatz circuit, (iii) number of other gates, (iv) list of optimized energies
corresponding to external iterations and (v) energy subtracted from the full conÔ¨Åguration interaction (FCI).
The qubit ADAPT sub-module is globally similar to the fermionic ADAPT in terms of the code structure, some key steps are
diÔ¨Äerent and makes it unique in its nature. Those steps can be summarized in the following sequence: (i) we use qubit pool
generators (using QubitPool) instead of fermionic ones; (ii) the preparation of the trial state is diÔ¨Äerent from the fermionic
Adapt one; (iii) the gradients calculation is not the same. It returns the same properties as that of fermionic ADAPT-VQE.

SYSTEMATIC BENCHMARKING OF THE PERFORMANCE OF THE VERSIONS OF
5
UCC AND ADAPT-VQE ON SEVERAL MOLECULES USING THE OPENVQE PACKAGE

In this section, we performed numerical estimations of ground state energies by means of OpenVQE, more speciÔ¨Åcally, by using
the VQE-UCC-family and ADAPT-VQE modules. This was done for a range of molecules which require from 4 to 24 qubits to
be treatable with quantum computing (see Figure 4 ). We perform only noiseless simulations in order to minimize computational
runtime and all simulations were performed on TotalEnergies in-house HPC architecture4. We validate our results by comparing
some of them with other works obtained with similar methodologies.

For each numerical simulation in the UCC-family or ADAPT-VQE modules, we use the following common functions imple-
mented in OpenVQE to calculate: (i) the molecular orbital integrals using the PYSCF package with the STO-3G, 6-31G and
cc-pVDZ basis sets; (ii) the molecular Hamiltonian mapping which is obtained by applying the Jordan-Wigner transformation;
(iii) the circuits simulated which are based on the CNOT staircase method, except for QUCCSD version for which we use the two
circuits which represent the single and double qubit evolutions (see Figure 1 and 2 in 69, respectively). We used the scipy.optimize
library for optimization.

We organize the presentation of our work on molecular simulations using OpenVQE into three main subsections: (i) subsection
5.1 that displays the timings of the QLM simulator for constructing the UCCSD ansatz on a simulator as well as for obtaining
the expectation value of the electronic structure Hamiltonian for a set of molecules (STO-3G basis set) ranging from 4 to 24
qubits. (ii) subsection 5.2, dedicated to the UCC-family module, it describes the performance of UCCSD-VQE for H
with the
6
STO-3G basis set and for LiH using 6-31G basis set with diÔ¨Äerent sizes of active spaces. Then we focus on H
at a single
6
geometrical arrangement to show how close do diÔ¨Äerent optimizers come to the chemical accuracy5 and how many CNOT gates
they require to achieve such an accuracy. We also discuss diÔ¨Äerent ways of choosing the initial wavefunction such as the random
guess and M√∏ller-Plesset wavefunction in second order. Secondly we extend our calculations to a larger set of molecules and all
considered using the STO-3G basis set. Some computations use a full space and some others include active space selections, in
order to compare the chemical accuracy obtained from three diÔ¨Äerent UCCSD: regular UCCSD, UCCSD without the Z-Pauli
terms and QUCCSD ansatze. We then compare the results with those obtained from CCSD, CCSD(T), CISD and CIPSI classical
methods. Since CIPSI is not a common known method unlike the other three methods, we brieÔ¨Çy introduce its deÔ¨Ånition as
follows: the ConÔ¨Åguration Interaction using a Perturbative Selection made Iteratively (CIPSI) wave-function is a truncation of
the Full ConÔ¨Åguration Interaction (FCI) wave-function where the determinant are selected regarding a perturbative selection.
The method has been developed since a few decades (see some references in the introduction of 88) and it is well described
in 89,90; (iii) subsection 5.3 that uses the ADAPT-VQE module. It describes the comparison between the fermionic and qubit
ADAPT-VQEs in terms of chemical accuracy by benchmarking the three molecules H
, in the STO-3G orbital
basis set by assuming a full space selection approximation in each molecule. All CNOT number estimations are obtained using
the CNOT staircase circuits. Then, using the fermionic ADAPT-VQE sub-module, we simulated several other molecules using
a larger number of qubits and diÔ¨Äerent basis sets assuming full space selection. Such computations were performed in order to
demonstrate the capacity of our sub-module code functions to perform larger calculations and to reach chemical accuracy despite

, LiH and H
6

4

4The server we used in our calculations has the following properties: linux machine named "skelling", with 162 cores, each core containing 2 threads. A total memory

is 3 094 000 MiB.

5For a given basis set, according to Wikipedia, the standard chemical accuracy is 1 kcal/mol which is around 1.59 √ó 10‚àí3 Hartree. This accuracy represents the error

diÔ¨Äerence between the predicted energy and FCI energy. We use this value as a standard reference in all our results.

18

HAIDAR ET AL

the increase of the molecule sizes. Using the same sub-module we also tested several molecules with active space selections to
compare the eÔ¨Éciency of fermionic ADAPT-VQE in the context of such active space approximations.

Next we describe how the Qubit-ADAPT-VQE sub-module works through choosing diÔ¨Äerent types of qubit pools, each with
a diÔ¨Äerent size. To do so, we study the H
molecule using STO-3G basis set. Finally we introduce a brief Table summarizing the
4
comparison of UCC-family methods involving the fermionic excitations (UCCSD and UCCGSD) and fermionic ADAPT-VQE
method in several molecules in terms of number of parameters, CNOT counts, chemical accuracy, and computational time.

Simple UCCSD ansatz: Representative computational performances with OpenVQE
5.1
To illustrate the performances of our OpenVQE package on CPUs, we chose to use a standard laptop6 to evaluate the time
to solution required to perform two operations that are common to most of the variational algorithms: (i) the application of
the ansatz; (ii) the computation of the expectation value of a molecular Hamiltonian or another observable. Examples of such
operations are: the implementing of a Hardware eÔ¨Écient circuit ansatz, or a unitary coupled cluster ansatz; Observables are for
example the electronic structure Hamiltonian, a commutator operator, Pauli string terms etc, which can be applied by either of
these ansatze to measure their expectation value. As a test, we chose here the UCCSD method to evaluate the timing associated
to various computations. It is important to note that, in practice, for the particular case of the simple UCCSD, OpenVQE and
the native QLM timings are identical, where QLM simulator used is from QLM version 1.2.1. To measure such timings, we
conducted benchmarks with a set of molecules using OpenVQE in the STO-3G basis set (H
, CO,
HCN, and C
). Figure 4 (a) displays the timings associated to the generation of a state-vector corresponding to the UCCSD
2
ansatz (see Eq. 10) from OpenVQE. The computational cost for this generation grows sub-exponentially with the number of
qubits. We observe that the package can compute the UCCSD wavefunction within less than a second for a molecule requiring 4
to 12 qubits, between a second and 10 seconds for molecules associated to a 14-20 qubits range and up to few minutes for larger
molecules (22-24 qubits). Figure 4 (b) represents the timing cost for measuring the expectation value of the JW tranformed
Hamiltonian (see Eq. 4) of each of these molecules using UCCSD ansatz. This measurement increases linearly with the number
of qubits and it is done by using the UCCSD circuit together with the "Job" class which will be submitted to QPU to obtain
the expectation value. The process is described by the code function called UCC_action() which can be found in section 4
We observe that the computational cost of performing the measurement increases exponentially with the number of qubits. In
particular, we notice that molecular systems up to 14 qubits like H
O (10 electrons) using OpenVQE, can be performed in a
2
second for a UCCSD circuit. This circuit involves 12,240 CNOT gates and 1,083 Pauli strings, as shown in Figure 4 (c). This
Figure also shows the details of the number of CNOT gates and Pauli strings associated to each molecule.

, LiH, H

O, NH

, CH

, H

H

4

2

2

4

3

2

UCCSD: active space selections, MP2 pre-screening, InÔ¨Çuence of the optimization method

5.2
and comparison with classical methods

Testing active space selections

5.2.1
linear geometry type within STO-3G basis set and LiH within
We test active space (AS) selection approach by simulating H
6
6-31g basis set, for a range of bond lengths for both molecules. For H
molecule, which has a Hilbert space spanned by 12
6
Hartree Fock orbitals, 6 occupied and 6 virtual (i.e., unoccupied) we choose two diÔ¨Äerent active spaces: (i) First 2 spin orbitals
where the lowest energies are always Ô¨Ålled and 2 spin orbitals where the highest energies are always empty, as these 4 spin-
orbitals are not considered in the active space selection, the system consists of 8 active spin orbitals with 4 active electrons
which means 8 qubits Hamiltonian; (ii) when we consider that only the Ô¨Årst two spin-orbitals are always Ô¨Ålled, the system has
then 4 active electrons and 10 spin-orbitals corresponding to 10 qubit Hamiltonian. Figure 5 (a) shows the error of ground state
energies of H
molecule at diÔ¨Äerent dissociation proÔ¨Åles, with diÔ¨Äerent sizes of the active spaces ranging from a minimum 8
6
qubits to the full space 12 qubits. This error corresponds to absolute value of VQE-UCCSD results substracted from FCI energy.
By increasing the active space from 8 to 10 qubits, we observe only few improvements of accuracy and both sizes are still far
from approaching the chemical accuracy (see the blue line which was set at 10‚àí3 Ha). However in the full space case, the VQE
results approach the chemical accuracy before a bond length equal to 1.5 √Ö. Interestingly, for bond length ‚â• 1.5 √Ö, even with
full space, the error deviates well beyond the chemical accuracy but it seems to be curving again toward the blue line beyond
can be seen
3.0 √Ö. This error means that triple excitations are probably required. A comparable results to our Ô¨Åndings for H
6

6laptop properties are: Intel(R) i5-10310U, Clock speed 2.21 GHz processor, OP windows 10.

HAIDAR ET AL

19

(a)

(b)

(c)

FIGURE 4 Panel(a): timings for the application of a UCCSD circuit by OpenVQE while increasing the number of qubits.
Panel (b): timings for the evaluation of increasing size molecular Hamiltonians (summed over Pauli strings and using using JW
transformation) for the following molecules: H
. Panel (c) shows the number of
CNOT gates required to complete the UCCSD circuit and the number of Pauli strings in the Hamiltonian. All cluster amplitudes
in the UCCSD circuits were initialized to 0.01.

, CO, HCN, C

, LiH, H
2

O, NH
3

, CH
4

, H
4

H

2

2

2

in Figure 7 of 51 but researchers only consider the non-active case there. Figure 5 (b), shows the same energy proÔ¨Åle but for
LiH molecule. Using the 6-31G basis set, LiH has a Hilbert space spanned by 22 HF orbitals, 4 occupied and 18 virtual (i.e.,
unoccupied). But Ô¨Åve active space selections are chosen, leading to 4, 6, 8, 10 and 12 qubit Hamiltonians. For all choices of
active spaces here, the error decreases steadily as the the bond length increased. The 10 and 12 qubit Hamiltonians are below
the chemical accuracy for bond length > 1.0√Ö, while the largest deviation measured is in the intermediate bond lengths range
between 1 and 2.4 √Ö. Interestingly, for the 8, 10 and 12 qubits results fall within a narrow range, at bond length before 1.0
and at bond length beyond 2.2√Ö. Surprisingly, we noticed some jumps in the accuracy for the three cases 6, 8 and 10 qubits at
some bond lengths, for example around 2.2√Ö. A similar analysis has been made in 66 for two diÔ¨Äerent molecules than ours, by

4812141618202224Number of qubits102101100101Time for evaluation of UCCSD/sH2H4LIHH2ONH3CH4COHCNC2H24812141618202224Number of qubits103102101100101102103104Time for evaluation of H/sH2H4LIHH2ONH3CH4COHCNC2H2H2H4LIHH2ONH3CH4COHCNC2H2Molecules101102103104105Properties64141312184697663012240108531760360863200689175040585014761687572514406400CNOT-gatesPauli-strings20

HAIDAR ET AL

changing the number of qubits in diÔ¨Äerent basis set: (6-31G) in H
jumps we also observed for H
so-called Coulson-Fisher point where spin-symmetry breaking can occur 91.

O. In particular they observed similar
and (STO-3G) in H
2
O at intermediate range, which as mentioned there it might correspond to geometries close to the

2

2

(a) Error ground state H6 moelcule

(b) Error ground state LiH molecule

molecule using the STO-3G basis set (a) and for LiH with the 6-31G basis (b). The dissoci-
FIGURE 5 VQE results for the H
ation proÔ¨Åle is showed, using diÔ¨Äerent active space selections and are calculated by using the Ô¨Årst order trotterization UCCSD
ansatz. The size of qubits represents the number of active spin-orbitals. The blue line indicates the chemical accuracy.

6

InÔ¨Çuence of the optimization method in the UCCSD-VQE performance for H6 at r=1.0 √Ö

5.2.2
After showing the performance of UCCSD-VQE in terms of active space selection and MP2 pre-screening approaches, we
show the beneÔ¨Åts that OpenVQE can bring through active space selection (see Figure 5 ). Indeed, such a technique allows to
approach a similar accuracy as those reached by using a full space at certain bond lengths, even with a smaller number of qubits.
Furthermore, in order to test for the usefulness of using MP2 guesses in VQE-UCC algorithm, we choose the H
molecule
6
associated to the STO-3G basis set at a bond length of ùëü = 1.0√Ö using a full space. We calculated UCCSD-VQE energies
using six diÔ¨Äerent optimizers, namely COBYLA, BFGS, SLSQP, CG, Powell and Nelder-Mead and with three diÔ¨Äerent initial
guesses: (i) random, where random values are chosen uniformly in the interval [0.0, 1.0]; (ii) Ô¨Åxed-value of 0.001; (iii) MP2
guesses. In Figure 6 we compare the eÔ¨Äects of these initial guesses on the VQE optimization based on three criteria: (i) the
number of function evaluations required for convergence in Figure 6 (a); (ii) the error of energy corresponding to VQE energy
subtracted from the FCI energy solution in Figure 6 (b); (iii) the number of CNOT gates needed for completing a circuit after
Ô¨Ånal optimization in Figure 6 (c). From Figure 6 (a) we observe that the CO YLA and Nelder-Mead methods require a high
number of function evaluation (> 30000) for VQE performance when the parameters are chosen randomly. Conversely, the other
optimizers (BFGS, SLSQP, CG and Powell) requirements appear smaller number with less function evaluations (about 3000 up
to 10000) until reaching convergence. In practice, Nelder-Mead is clearly not adapted to this case where it exhibits high energy
errors beyond 0.1 Ha, as shown in Figure 6 (b). The COBYLA method brings better accuracy than SLSQP, which nevertheless
needs a smaller number of function evaluations. COBYLA is known to have a better ability to explore the energy than SLSQP.
The other optimizers BFGS, CG and Powell bring comparable results between 10‚àí1 and 10‚àí2 Ha. On the other hand, for the
0.001 Ô¨Åxed-value and MP2 initial guesses methods- COBYLA, BFGS, SLSQP, CG and Powell converge well to almost the same
minimum of accuracy, which is under than 10‚àí3 Ha.

In general, the number of evaluation changes depending on the type of the optimizer: some optimizers require the estimation
of the gradients (BFGS, SLSQP and CG) and some belong to the class of gradient-free optimizers (COBYLA, Powell, Nealder-
Mead). From Figure 6 (a) it is clear that gradient-based optimizers (BFGS, SLSQP and CG) require less function evaluations
as compared to gradient-free ones (COBYLA, Powell, Nealder-Mead). This is true for every optimizer and choice of initial
parameters except for ‚Äùrandom" where the Powell optimizer requires less function evaluations as compared to SLSQP and

0.00.51.01.52.02.53.0H-H bond length (Angstrom)104103102101100Error (Hartee)8-qubits10-qubits12-qubits1.01.52.02.53.0Li-H bond length (angstrom)0.0010.0020.0030.004Error (Hartee)4-qubits6-qubits8-qubits10-qubits12-qubitsHAIDAR ET AL

21

BFGS. We hypothesise that this behaviour is due to the fact that the random guess of the initial parameters was closer to the
optimum in the case when Powell optimizer was used. However, this advantage in using gradient-based as opposed to gradient-
free optimizers might not remain when executing algorithms on actual hardware where shot noise, relaxation and dephasing
somewhat randomize the optimization landscape, making the estimation of gradients, especially Ô¨Åne ones, more challenging.
The energy error follows a somewhat similar trend (subÔ¨Ågure (b). Figure 6 (c) shows that by using count() function found in
OpenVQE package, MP2 guesses lead to reduce the CNOT gates in the Ô¨Ånal circuit when using BFGS, SLSQP, CG and Powell
methods. The CNOT gates are reduced by about a half compared to COBYLA or Nelder-Mead. Moreover MP2 guess shows
better reductions in CNOT gates when compared to random or 0.001 Ô¨Åxed-value guesses. Similar analysis and comparisons
between diÔ¨Äerent optimizers and initial guesses showing the importance of using MP2 guess is studied for H
molecule, there
4
not only linear geometry path has been tested but also rectangular and trapezoidal paths 35, showing that when MP2 guess is
used, a smaller number of function evaluations is required, regardless which path of geometry is considered.

(a) Function evaluations

(b) Error ground state

(c) CNOT counts after optimiza-
tion

FIGURE 6 Basic VQE-UCCSD performances applied to the H
linear system studied using six diÔ¨Äerent optimization meth-
6
ods (COBYLA, BFGS, SLSQP, CG, Powell and Nelder-Mead) and three distinct starting guesses for the parameters (chosen
randomly from interval [0.0, 1.0]). (Random), all parameters were Ô¨Åxed at 0.001 (0.001) and used MP2 amplitudes (MP2). We
compare the number of function evaluations required for convergence (Final accuracy in the optimization set as 10‚àí4) (panel (a)),
the error in the Ô¨Ånal energy with respect to the FCI energy (panel (b)), the number of CNOT gates after optimization (panel(c)).
The scale of function evaluations is truncated at 30000 to enable comparisons. We remind also that we choose a tolerance of
10‚àí7. In practice, if the parameters values appear below this condition then the operators associated to these parameters are
omitted from the Ô¨Ånal UCCSD wave function.

Estimation of UCCSD and QUCCSD accuracies compared to classical methods and of the

5.2.3
required quantum resources for a range of molecules in STO-3G basis set
Following our previous discussion, we used the UCCSD and QUCCSD methods to build ansatze and MP2 initial as guesses.
UCCSD and QUCCSD circuits are implemented in OpenVQE based on the CNOT staircase method and so are QUCCSD cir-
cuits while we are using the eÔ¨Écient circuits introduced in 69. The optimization is performed with the BFGS algorithm as the
maximum number of function evaluations was Ô¨Åxed at 50,000. To compare the resulting UCCSD and QUCCSD energies we cal-
culated the ground state energies of the same molecules using the following four classical methods: CCSD, CCSD(T), CISD and
CIPSI. The Ô¨Årst three methods were carried out by using the Gaussian software package 92, while CIPSI was carried out by using
the Quantum Package (QP) 93. We also computed the FCI (for STO-3G) energy using the functions implemented in the QLM
library based on PYSCF package. We choose the following set of molecules, H
O whose geometries
4
are near equilibrium and are detailed in the MoleculeFactory class in (ùë•, ùë¶, ùëß) format in OpenVQE. We choose other larger
size molecules CH
, which we also present in the same format in MoleculeFactory. We
took the geometries of these near equilibrium larger molecules from the NIST Diatomic Spectral Database 94,95,96,97. All these
molecules we consider have a singlet spin ground state. Moreover we consider all these molecules using full space selections
when we apply the three methods: CCSD, CCSD(T) and CISD. However, it is not the case when we calculate UCCSD- and

, HCN, CO, N
2

, LiH, H
6

and SO
2

, BeH

, C
2

, C
2

, H

, H

H

H

2

2

2

8

4

4

COBYLABFGSSLSQPCGPowellNelder-Mead050001000015000200002500030000Function evaluationsMP2guess=0.001RandomCOBYLABFGSSLSQPCGPowellNelder-Mead103102101Error(Hartee)MP2guess=0.001RandomCOBYLABFGSSLSQPCGPowellNelder-Mead02000400060008000CNOT countsMP2guess=0.001Random22

HAIDAR ET AL

6

2

4

H

(AS(4ùúÇ,14ùëÅùê¥

(AS(6ùúÇ,10ùëÅùê¥

(12 qubits),H
2

)) i.e (10 qubits), C
2

)) i.e (14 qubits), CO (AS(6ùúÇ,12ùëÅùê¥

O (14 qubits), BeH2 (14 qubits) and H
8

(AS(8ùúÇ,12ùëÅùê¥
)) i.e (12 qubits), N
2

QUCCSD-VQE:
(8 qubits), LiH (12 qubits),
(i) we consider full space selection for molecules ranging between 8 and 20 qubits, which are, H
4
H
(20 qubits); (ii) we consider (AS) selection for molecules which are
represented by more than 20 qubits due to the limitations of QLM simulator in our server (see section 3). So for the follow-
H
)) i.e (12), C
)) i.e (14
ing molecules we choose: CH
2
4
qubits), HCN (AS(6ùúÇ,14ùëÅùê¥
)) i.e (12 qubits), and SO
(AS(8ùúÇ,12ùëÅùê¥
2
(AS(8ùúÇ,12ùëÅùê¥
)) i.e (12 qubits). In Figure 7 (a), we present the results for the UCCSD and QUCCSD ansatze. These numerical
values are obtained taking the absolute values of the substraction of the UCCSD and QUCCSD estimated energy from the cor-
responding FCI energy. As is seen in Figure 7 (a) Comparing ansatz performance of UCCSD to QUCCSD, we observe diÔ¨Äerent
and LiH), the QUCCD achieves the same level of accu-
cases for molecules in case of full space selections: (i) in molecules (H
O) there is a diÔ¨Äerence in the error where QUCCSD performs
racy compared to the UCCSD; (ii) in molecules (H
and H
worse compared to UCCSD, moreover, QUCCSD is still around the chemical accuracy level on these three molecules. In H
,
8
the error increased by around one order of magnitude (i.e from 10‚àí3 up to 10‚àí2 Ha) and is above the chemical accuracy. The
reason for these error changes is that the QUCCSD ansatze fail to recover the correlation eÔ¨Äects that become stronger at certain
bond lengths especially when the system qubit size increases (i.e. like for the 20 qubits H
system). Now for molecules within
8
the active space selection, the QUCCSD ansatz performs as accurately as UCCSD. This means that within this size of qubits,
the removal of parity terms in excitation operators may not aÔ¨Äect accuracy of the QUCCSD method compared to UCCSD. This
is consistent with previous results obtained in reference 51 where the accuracy reached by QUCCSD was found comparable to
that obtained with UCCSD for a test set of molecules including H
at similar bond lengths. Such data
4
tend to show that despite the sole inclusion of single and double excitations, QUCCSD can approximate electronic wavefunc-
tion almost as accurately as UCCSD while not being as reliable. It can be particularly noticed in the cases of strongly correlated
systems within full space (H

O and N

, BeH

, BeH

, H

, H

).

4

2

6

6

2

2

2

2

4

6

, H
8

, LiH, H

, BeH
2

Figure 7 (b) displays a comparison between the CCSD, CCSD(T), CISD and CIPSI classical methods, it appears that CIPSI
results bring the most accurate results for all the molecules presented and by at least one order of magnitude from CCSD(T).
Comparing UCCSD-VQE Figure 7 (a) to the classical methods in Figure 7 (b), we Ô¨Ånd similar order of magnitude for CCSD
and better than CISD, for molecules (H
O). Within these molecules CCSD(T) is better. For molecules
and H
2
calculated within active space selection, we clearly Ô¨Ånd that classical methods, mainly CCSD(T) and CIPSI, bring better accu-
racy, due to the fact that core orbitals are not frozen in these cases. Interestingly, some molecules like C
as
2
is seen in Figure 7 (a) still approach the accuracy of classical methods mainly CISD and CCSD. However CISD and CCSD
are also far from the chemical accuracy which CCSD(T) does. This shows that apart from active space selection approach, the
triple excitations for large molecules is required to perform UCCSD(T) or even the UCCSDT(Q). These observed results show
that despite the fact that the unitary coupled cluster works very well within active space selection for some molecules, this is
not deÔ¨Ånitive. The results could probably be improved with more qubits/larger active space selection and/or adding triple exci-
tations. A future work will provide enhanced accuracy by improving the QLM simulator (increasing the number of qubits). It is
worth pointing out that an analysis for some molecules comparing the classical methods to UCCSD was previously studied in
references. 98,99

, CO and SO

H

2

4

8

HAIDAR ET AL

23

(a) UCCSD and QUCCSD methods.

(b) CCSD, CCSD(T), CISD and CIPSI methods.

FIGURE 7 Error, (ùê∏ ‚àí ùê∏ùêπ ùê∂ùêº
) in Hartree, from (a) UCCSD and QUCCSD, (b) CCSD, CCSD(T), CISD and CIPSI method
calculations for a range of molecules with near equilibrium geometries. The basis set is STO-3G and all molecules are within a
spin singlets state. (c) CNOT gates counts for UCCSD and QUCCSD after optimization (using MP2 Guess). Molecules CH
,
4
C
are within active space selections (see text above). The dashed blue line indicates the
H
, C
2
chemical accuracy.

, HCN, CO, N

and SO
2

H

2

2

2

4

In Figure 8 , we roughly estimate the number of CNOT gates from UCCSD and QUCCSD ansatz for all the molecules listed
above. We are interested in counting these gates because they are now the most critical required recodesources in the NISQ
devices. Using our code function to count CNOT gates, we obtained very good count reduction. For example, for LiH, the
number of CNOT gates went from 6976 to 4720 with UCCSD ansatz (before and after the initial MP2 guess and subsequent
molecule, from 18208 to 6368 with UCCSD (before and after the
optimization) and to (1112) with QUCCSD ansatz. For BeH
initial MP2 guess and subsequent optimization) and to (2592) with QUCCSD. We notice that in some molecules the CNOT
count is reduced by around one-half between UCCSD and QUCCSD ansatze.
Furthermore, for some other molecules within the active space selection approximation such as C
,
4
the Ô¨Ånal CNOT counts with UCCSD and QUCCSD are about the same. We can conclude that QUCCSD exhibits lower gate

, and C
2

, CH
4

, SO
2

H

H

2

2

2

H4LiHH6BeH2H8H2OCH4C2H2C2H4HCNCON2SO2Molecules105104103102101Error relative to FCIUCCSDQUCCSDH4LiHH6BeH2H8H2OCH4C2H2C2H4HCNCON2SO2Molecules109108107106105104103102Error relative to FCICCSDCCSD(T))CISDCIPSI24

HAIDAR ET AL

counts, as compared to QLM‚Äôs UCCSD, due to its qubit evolutions construction. These CNOT gates counts with UCCCSD and
QUCCSD have been previously studied for LiH, H
6

in 70(see Table 3.1 in Chapter 4).

and BeH
2

FIGURE 8 CNOT gates counts for UCCSD and QUCCSD after optimization (using MP2 Guess), such that optimized
parameters ‚â§ 10‚àí8 are not counted.

5.3

Performance of ADAPT-VQE module in OpenVQE

4

and H
6

Two implementations of fermionic ADAPT-VQE and qubit ADAPT-VQE

5.3.1
, obtained with the fermionic ADAPT-VQE and qubit
In Figure 9 , we represent the energy convergence for LiH, H
ADAPT-VQE approaches. The three molecules are at bond lengths ùëüLi-H= 1.45√Ö, ùëüH-H = 0.85√Ö, and H
at bond distance ùëüH-H =
6
1.0 √Ö, respectively. All convergence plots are terminated when the norm value is below the threshold ùúñ (see Eq. 17 in section 2.4),
which is between 10‚àí3 and 10‚àí4 for fermionic ADAPT-VQE, and between 10‚àí3 and 10‚àí6 for qubit ADAPT-VQE, depending on
the molecule. Since we Ô¨Ånd SLSQP and BFGS optimizers behave comparably for energy convergence (after using MP2 initial
guess) as is noticed in Figure 6 , we used SLSQP optimizer for fermionic ADAPT-VQE and the BFGS optimizer for qubit
ADAPT-VQE. The plots in Figure 9 present the two protocols in terms of two important conditions, required to construct an
ansatz and to achieve a speciÔ¨Åc chemical accuracy : (i) the number of iterations (or parameters); (ii) the number of CNOT gates.
Figures 9 (a,b,c)- show that the fermionic ADAPT-VQE converges faster than the qubit ADAPT-VQE, requiring systematically
fewer number of iterations and thus variational parameters. However as is shown in Figures 9 (d,e,f)- the CNOT counts from the
fermionic ADAPT-VQE to reach convergence, are higher by more than one-order of magnitude with respect to qubit-ADAPT-
VQE to complete a circuit at a certain level of accuracy for each molecule. Such results make sense with the fermionic ADAPT-
VQE approach since the type of operators is spin-complemented pairs (see eqs. A1 and A2). Indeed, the JW transformation
of single and double operators will lead to sets of two and eight Pauli strings, respectively, where each Pauli string is a tensor
product of Pauli matrices. According to theory, there are four CNOT staircases (for a single excitation) and sixteen (for a double
excitation) 68. The qubit ADAPT-VQE theory (see section 2.4) states that the pool consists of many individual Pauli strings. This
means the qubit ADAPT-VQE needs more ansatz elements i.e operators or parameters, to reach convergence. But at the same
time, the CNOT counts are much reduced with respect to fermionic ADAPT-VQE. Similar results of CNOT counts, number
molecules are presented in Figure 2
of parameters and chemical accuracy for fermionic ADAPT-VQE involving LiH and H
6
of 41. For LiH we match these results but for H
some diÔ¨Äerences occur since we have gone beyond the 10‚àí3 threshold. This has
6
added more parameters to the ansatz and therefore a better accuracy. In 50 (Figure 1) results of fermionic and qubit ADAPT-VQE
involving LiH (ùëü = 2.0√Ö), H
(ùëü = 2.0√Ö) are also comparable to our Ô¨Åndings but might be slightly diÔ¨Äerence
4
because of diÔ¨Äerent geometries in the three molecules, and threshold.

(ùëü = 1.5√Ö) and ùêª6

H4LIHH6BeH2H8H2OCH4C2H2C2H4HCNCON2SO2Molecules010002000300040005000600070008000CNOT countsUCCSDQUCCSDHAIDAR ET AL

25

using the STO-3G orbital basis
FIGURE 9 Energy convergence plots for the near equilibrium ground states of LiH, H
set, at bond distances ùëüLi-H = 1.45√Ö, ùëüH-H = 0.85√Ö, and ùëüH-H = 1.0√Ö. The red plots are obtained with a fermionic-ADAPT-VQE
approach and the blue plots are obtained with qubit ADAPT-VQE. Top panels (a,b,c) present the energy accuracy as a function
of the ansatz parameters (note that for both ADAPT-VQE, the number of parameters are the same as the number of operators
taken per iteration). Bottom panels (d,e,f) present the energy accuracy as a function of the CNOT count of the ansatz circuit.
The blue area corresponds to the chemical accuracy.

and H
6

4

8

(14 qubits), NH
3

(ùúñ ‚â§ 10‚àí1), (ii) BeH

O (14 qubits), BeH
2

(16 qubits) and LiH (22 qubits); (iii) in cc-pVDZ, H
2

Fermionic ADAPT-VQE: simulation several molecules up to 22 qubits, in diÔ¨Äerent basis

5.3.2
sets, comparing active and non-active selections
In this subsection, using the fermionic ADAPT-VQE sub-module from OpenVQE, we simulate a set of molecules (from 12
qubits up to 22 qubits) without active space selections with diÔ¨Äerent basis sets. These molecules are: (i) with the STO-3G basis
set: OH‚àí (12 qubits), HF (12 qubits), H
(20 qubits); (ii) with the
(16 qubits) and H
2
8
6-31G basis set: H
(20 qubits). The goal here is to compare both the
4
fermionic ADAPT-VQE energies of these molecules aÔ¨Äected by a ùúñ threshold value as well and the eÔ¨Éciency of our simulator.
Figure 10 (a) shows the energy error convergence plots for the set of molecules controlled by a given value of ùúñ: (i) NH
and
H
O ( ùúñ ‚â§ 10‚àí5). We also observe
in the Figure,that for example H
(cc-pVDZ) and OH‚àí or HF (STO-3G) exhibit a precision better than 10‚àí8 (Ha) which is not
2
and LiH (6-31G) since the ADAPT-VQE loop stops at the given threshold (i.e. ùúñ ‚â§ 10‚àí3). We also observe from
the case for H
the same Figure that even with H
O, with the highest number of qubits (14 qubits), stopped at a threshold of ùúñ ‚â§ 10‚àí5, we
2
obtained a very good accuracy, the error being less than 10‚àí6 Ha. It is known from the literature, that as the threshold decreases,
the chemical accuracy is improved regardless of the chosen basis set. To illustrate this point (see Figure C3 ), we represent the
molecule using the cc-pVDZ basis set, showing that controlling ùúñ at 10‚àí4 brings very
detailed ADAPT-VQE calculations in H
good accuracy (i.e. around 10‚àí9 Ha) with respect to FCI(cc-pVDZ). For some molecules, we realized that some convergence
problems might appear at certain levels of accuracy from fermionic ADAPT-VQE especially when the size of molecules gets
larger while including enough number of electrons. A similar study has been done for other sets of molecules in 100 where authors
used Qiskit‚Äôs state-vector simulator. They already mentioned the diÔ¨Éculty of fermionic ADAPT-VQE method in reaching certain

and LiH ( ùúñ ‚â§ 10‚àí3); (iv) OH‚àí, HF, H

(ùúñ ‚â§ 10‚àí2); (iii) H

and H
2

2

3

2

2

4

4

050100150200Iterations107106105104103Energies substracted from FCI (Ha)a)LiHFermionic ADAPTQubit ADAPT051015202530Iterations106105104103102b)H40100200300400Iterations106105104103102101c)H601234CNOTS (10^3)107106105104103Energies substracted from FCI (Ha)d)0.00.20.40.60.81.01.2CNOTS (10^3)106105104103102e)0246810121416CNOTS (10^3)106105104103102101f)26

HAIDAR ET AL

convergence especially when ùúñ gets too small i.e less than 10‚àí4, in this paper it is suggested that choosing several maximum
gradients (like 3 or 4) at each iteration instead of one maximum gradient can improve the convergence and reduce the number
of iterations. Following this hypothesis, we are currently testing some larger molecular sizes in order to investigate how could
the number of iterations, parameters and CNOTs could reduce instead of considering only one maximum gradient per external
iteration in the ADAPT algorithm. We also tested the OpenVQE fermionic ADAPT module on a number of molecules using
O (12
active space selection. The following molecules were simulated: (i) in STO-3G, OH‚àí (10 qubits), LiH (10 qubits), H
qubits), NH
(14 qubits; (ii) in 6-31G, LiH (20 qubits). When we Ô¨Åxed the threshold (ùúñ ‚â§ 10‚àí3), we observe in Figure 10 (b)
that even with the reduction of qubits by 2 in each molecule, the accuracy is still around and even a bit beyond the chemical
accuracy (which we assume to be 10‚àí3 Ha). Similarly to the non-active selection case, the threshold value of fermionic ADAPT-
VQE must decrease in order to obtain better chemical accuracy. However, a good sign is that with qubit reductions, the fermionic
ADAPT-VQE algorithm remains functional. This reduced the number of operators in the pool and thus the cost of gradient
measurements. In a near future, we want to test molecules which require high numbers of qubits and to go beyond the STO-3G
, benzene etc...) using the active space selection approximation. Such benchmarks are intended to check
basis set (CO
2
whether the performance of fermionic ADAPT-VQE from the QLM simulator is still working eÔ¨Éciently as the molecule size
gets larger, especially with maintaining the level of accuracy.

or C

H

2

4

3

2

(a) No active space selections

(b) Active space selections

FIGURE 10 Fermionic ADAPT VQE simulations for a set of molecules ranging between 12 and 22 qubits. Iterations were
stopped based on a given norm threshold condition. SubÔ¨Ågure (a) shows the error of energy for a set of molecules that are all
assumed with full space selections and the STO-3G basis set for OH‚àí, H
and LiH,
2
. SubÔ¨Ågure (b) shows the error of the energy for set a of molecules all assuming active space selections to
with cc-pVDZ for H
tapper-oÔ¨Ä 2 qubits for each of the following molecules: in STO-3G for OH‚àí, H
, with 6-31G for LiH. The dashed
2
blue lines indicate the chemical accuracy.

, with 6-31G for H

O, BeH
2

O, BeH
2

and H
8

, NH
3

, NH
3

4

2

5.3.3 Qubit-ADAPT: testing several qubit pools
We study here in detail the qubit ADAPT-VQE by providing an example of H
molecule at ùëü = 0.85√Ö. In this molecule we
make diÔ¨Äerent qubit pools choices applying diÔ¨Äerent sizes. We performed such simulations with diÔ¨Äerent pools to test which
pool could achieve a satisfying precision with fewest iterations and CNOTs counts, and a reduced computational cost in term of

4

020406080100120140Iterations1010108106104102Energies substracted from FCI (Ha)OHHFH2OBeH2NH3H8H4LiHH2020406080100Iterations104103102Energies substracted from FCI (Ha)LiH (10 qubits)OH (10 qubits)H2O (12 qubits)BeH2 (12 qubits)NH3 (14 qubits)LiH (20 qubits)HAIDAR ET AL

27

gradients evaluation. We choose the Ô¨Årst qubit pool by breaking down the spin-adapted fermionic operators7, obtained after JW
transformation and we choose the individual Pauli strings8 which constructs the pool. Each individual Pauli string has the form

ùëÑùëö

‚â° ùëñŒ†ùëñùëùùëñ, ùëùùëñ ‚àà ùëã, ùëå , ùëç

(20)

and we named this qubit pool collecting ùëÑùëö
as full. It is obvious this pool would yield larger sizes because it includes a large
number of Pauli strings which consequently lead to a large number of CNOTs. Possible ways to reduce the number of CNOTs
and the pool size is by omitting the ùëç Pauli terms from full, which we named as full_without_Z. We can further reduce the pool
by keeping the Ô¨Årst string acting on each combination of spin orbitals named as reduced_without_Z9. Another possibility to test
how pool size behaves is to choose one type of the following strings10 (YXXX, XYXX, XXYX, XXXY) and discarding their counter
parts11. It appears that reduced_without_Z pool is the same as ùëå ùëãùëãùëã pool operators at least for H
but not necessarily for
4
other molecules with larger number of qubits. Randomly selecting operators from (ùëå ùëãùëãùëã, ùëãùëå ùëãùëã, ùëãùëãùëå ùëãùëéùëõùëëùëãùëãùëãùëå ) and
creating a pool mix out of them is named Random. Further directions to check the chemical accuracy and the number of iterations
from qubit ADAPT-VQE ansatz is to group these Pauli strings into two or four qubit pools. We Ô¨Ånally introduce a pool related
named symmetry, introduced in 52 (given in Eq. (11) therein). Very interesting that this pool contains the smallest number
to H
4
of operators12, complete and minimal, preserving symmetry to avoid convergence problems. To do this test on our simulator,
we use OpenVQE13 to simulate the H
molecule by applying qubit ADAPT-VQE sub-module within the diÔ¨Äerent pool size
choices described above. For optimizing the search through the hyper-parameter space of rotations of quantum gates we choose
SLSQP algorithm with the energy convergence threshold of 10‚àí13 (Ha). Figure 11 (a) presents the energy convergence plots
with respect to FCI for each of the qubit pools. We observe that all these pools reach a chemical accuracy better than 10‚àí8 Ha.
We also observe that Qubit pool XXYX provides an accuracy above 10‚àí10 Ha then it loses accuracy due to convergence problems
we observed14. Other qubit pools yield an accuracy between 10‚àí10 and around 10‚àí12 Ha. Even though full and four pools reach
comparable accuracy as that of symmetry, we observe no convergence problems with the latter since the symmetry pool preserves
the parity symmetry, which is a property that other pools can miss. Our results are similar to that provided in 50 where some pool
reduction simulation studies are analyzed for H
and LiH molecules. Concerning the symmetry pool, a detailed analysis of this
4
molecule is given in Ref. 52, but researchers there have performed their calculations analytically (i.e
pool for the case of the H
the exponential matrix of ùëÑùëö
is calculated by using scipy.linalg.expm(ùëÑùëö) method). Here we use the CNOT staircase method
that map the exponential of Pauli strings found in the pool using QLM simulator. A comparison of our results in Figure 11 (a)
to Figure 3 (b) found in 52) illustrates that the QLM produces results similar as those of the analytical calculations. Figure 11
(b) shows the number of CNOT gates, the number of iterations needed to implement the ansatz and the size of each pool.

4

4

As is shown from Figure 11 (b), the symmetry pool requires higher number of CNOTs and iterations for completing an ansatz
compared with some other pools at this level of accuracy. The symmetry pool still exhibits the lowest pool size (11 operators)
which obviously helps a lot in reducing the cost of gradient energy measurements. Furthermore to construct the symmetry
pools we can follow a recent work (see 52). In this reference, H
(22 operators) are constructed by
, LiH (18 operators) and BeH
2
using the STO-3G basis set.
freezing one orbital per molecule which reduces the qubits counts: 10 for LiH and 12 for BeH
2

4

Comparison of Ô¨Åxed-length ansatze with ADAPT-VQE methods

5.3.4
In this subsection we want to determine how many parameters, CNOT-gates, and which energy accuracy is reached by the
"Ô¨Åxed-length ansatze" as opposed to the fermionic ADAPT-VQE. To do so, we choose the LiH (1.45√Ö) and H
(1.0√Ö) molecules
6
as benchmarks.
In Figures 7 (a and c) and 10 (a,b,d and f) the attempt to reach chemical accuracy is displayed alongside with the number of
CNOTs for both the UCCSD and fermionic ADAPT-VQE. The UCCGSD (see Eq. 12) method remains to be characterized. We

7The singlet generalized single and double excitation operators is considered which we already used in OpenVQE.
8the individual Pauli string in any qubit pool listed here has an important property: it contains an odd number of ùëå s because the fermionic operators are real. To make

the Ô¨Ånal string real, it is multiplied by an imaginary part (ùëñ), however strings of even numbers of ùëå s cannot be considered because they don‚Äôt aÔ¨Äect the energy gradient

9YXXX strings comes always the Ô¨Årst, because of internal organization from QLM/myQLM libray
10In the Jordan-Wigner transformation spin-up orbitals are mapped to even-numbered states and spin-down orbitals to odd-numbered states. This means that for the
case of the single excitations (acts on qubits ùëñ and ùëò) we only keep the excitations that satisfy ùëñ = ùëò (mod 2), where mod denotes the modulo operation. Similarly, for the
double excitations (acts on qubits ùëñ, ùëó, ùëò, ùëô) we only keep that ùëñ + ùëó = ùëò + ùëô(mod 2).

11there are pairs of operators that are related by a global rotation, e.g., ùëå0ùëã1ùëã2ùëã3
12it scales linearly with the number of qubits (i.e 2n-2) according to 52, this Ô¨Ånding reduces the measurement cost from ùëÇ(ùëõ8) to ùëÇ(ùëõ5) in case of any molecular problems
13all Qubit pools are coded in Qubit Pool python class as discussed in subsection 4 and for the symmetry pool we followed the rules mentioned in 52 to classify which

, so that we only need to keep one of them in the pool

and ùëã0ùëå1ùëå2ùëå3

pool must be choosen as starters when we perform the loop of iterations

14Horizontal straight lines corresponds to poor convergences

28

HAIDAR ET AL

(a) Error for the ground state energy of the H
4
qubits). The dashed blue line indicates the chemical accuracy.

molecule (non-frozen: 8

(b) Properties of qubit pools

molecule using the STO-3G basis set at
FIGURE 11 Qubit ADAPT-VQE: Graph (a) Energy error convergence of the H
ùëü = 0.85√Ö for several kinds of qubit pools according to their arrangement: full, full without Z, reduced without Z, XYXX,
XXYX, XXXY, Random with Ô¨Årst try (Random Try1), and second Try (Random Try2), two, four, and pool preserves symmetry
(symmetry), see text. Graph(b) shows for each pool type the following estimated three properties: the number of CNOT gates
(CNOT), the number of parameters/operators, the size of each pool (pool size).

4

do so using the BFGS optimizer in a similar VQE loop. Table 1 and Table 2 summarize the results obtained from calculations
with each of the methods for LiH and H
, respectively. We observe from Table 1 that fermionic ADAPT-VQE brings the most
6
accurate values for the calculated energy by around two order of magnitudes compared with that of UCCSD and UCCGSD. A
comparable accuracy between UCCSD and ADAPT-VQE occurs when a norm threshold 10‚àí2 is used in ADAPT-VQE (which
could be also noticed in Ô¨Ågure 2.b of 41). This means that as the norm threshold decreases the ADAPT-VQE would bring
better accuracy. Remarkably, the number of parameters/CNOTs (30/4624) is still small compared to UCCSD and UCCGSD
eventhough the threshold considered is 10‚àí3. Results shown in Table 2 demonstrate again that ADAPT-VQE yields the most
accurate energy for the H
molecule, by at least two orders of magnitude as compared to UCCGSD and UCCSD. Although
6
UCCSD requires fewer number of parameters and CNOTs than with ADAPT-VQE, the latter brings better accuracy. This is

0102030405060Iterations10121010108106104102Energies substracted from FCI (Ha)FullFull Without ZReduced Without ZXYXXXXYXXXXYRandom (Try 1)Random (Try 2)twofour SymmetricFullFullWithout ZReducedWithout ZXYXXXXYXXXXYRandom(Try 1)Random(Try 2)twofourSymmetricPool Types0100200300400500Properties2923247224044328262475021439502224150232425019236502043850356335052827543864511CNOTSnumber of operators/parameterspool sizeHAIDAR ET AL

29

6

again due to the fact that we controlled the norm threshold to 10‚àí4. A comparable accuracy between UCCSD and ADAPT-VQE
occurs when a norm threshold 10‚àí1 is used in ADAPT-VQE as noticed in Figure 2(h) of reference 41). It shows the fact
in H
that, at this level of threshold, ADAPT-VQE decrease the counts of CNOTs and parameters. UCCGSD energy appears in
between UCCSD and ADAPT-VQE, but the number of CNOTs and parameters remain very high.
With those results, one can deduce that ADAPT-VQE brings more accurate results than UCCSD by several order of magnitudes,
depending how the user can control the value of threshold, but the cost when using ADAPT-VQE with increased threshold is
linked to the required high number of iterations and CNOTs. These latter increase increases with the number of qubits, which
consequently leads to higher computational requirements in term of gradient computations. For UCCGSD (together with
were shown in reference 49, illustrating the fact that
, H
UCCSD), the analysis of numerical simulations applied to H
4
although the UCCGSD ansatz yields very accurate results, the problem in using this method is linked to its high circuit depth.
This is the opposite to the UCCSD case (or even k-UpCCGSD with at least k>2, see 49).

2ùëÇ and N

2

6

CONCLUSION AND FUTURE WORK

In this article, we discussed in detail our newly introduced open source package, OpenVQE. OpenVQE allows one to perform
quantum chemistry computations based on the Quantum Machine Learning (QML) thanks to the newly introduced myQLM-
fermion open source library that gather the key QLM resources that are important for quantum chemical developments. The
OpenVQE/myQLM-fermion combined quantum libraries facilitate the implementation, testing and overall development of vari-
ational quantum algorithms dedicated to quantum chemistry problems and provide state-of-the-art quantum computing methods
(see Table 3 which summarizes the GitHub links of the open-source quantum chemistry packages available to the community).
We have shown that OpenVQE enables users to construct modules in a few lines of python code using simple class structures
related to the adaptive UCC family ansatze that we reviewed in the article. We also presented how to easily implement eÔ¨Écient
circuits related to fermionic and qubit evolutions with the goal of reducing the number of CNOT gates. Using these modules,
we generated benchmarks on a range of molecular computations from 4 to 22 qubits and obtained reliable results that appeared
consistent with those previously obtained in reference literature (see 35,98,99,70 for the UCC and 41,70,50,52 for the ADAPT-VQE
approaches). It is worth noting that technically the QLM machine is designed to simulate up to 41 Qubits on a large mem-
ory classical computer systems. OpenVQE is thus designed to simplify the researchers‚Äô work, providing simple code modules
facilitating the construction of new algorithms and ansatze.

Furthermore, OpenVQE beneÔ¨Åts from the myQLM-fermion tools and allow to exchange/interact with other software, like
quantum chemistry-oriented quantum computing packages (see Appendix B and Figure B2 ), thus enhancing the community‚Äôs
capacity to work collectively and faster. We also intend to forge an eÔ¨Écient module that could merge the few keys tools required
to run jobs on quantum computers such as IBM ones (as described in Appendix B. For example, Figure B1 ) show examples of
simple code structure classes that involve the interoperability between diÔ¨Äerent open source packages and QPUs.

We plan to extend further OpenVQE/myQLM-fermion tools towards reducing the quantum resources by building new mod-
ules describing functions that enable: (i) to tapper-oÔ¨Ä the number of qubits in VQE (alongside active space selection) through
using penalty functions 101, using point-group symmetry in small molecules 102 and in large molecules 103 and studying new
functions that could preserve spatial symmetry of molecules (rotational and translational); (ii) to reduce the number of CNOT
gates (alongside with MP2 guesses, eÔ¨Écient circuits, fermionic and qubit ADAPT-VQE) through implementing other adaptive
algorithms such as permute qubit-VQE 104.

Concerning chemical accuracy, we want to implement further methods to go beyond the chemically inspired UCC ansatze
described in 36 (i.e. the implemented UCCSD, UCCGSD, spin-complement-gsd, k-UpCCGSD etc...). Equally we are interested in
other types of UCC ansatze which involve higher-order correlation eÔ¨Äects, such as MP3 or MP4, or triple excitation UCCSD(T)
which could be important for strongly correlated systems and could improve further the accuracy as mentioned earlier 49. We are
also motivated to implement additional algorithms going beyond VQE, such as VQD (ADAPT-VQD) and QITE(ADAPT-QITE)
that allow to determine excited state energies 105,72,73,106,107.

Concerning optimization eÔ¨Äects in the UCC family of methods, since we have demonstrated in the present work that some
convergence problems might appear in ADAPT-VQE when targeting certain levels of accuracy, we want to make use of more
eÔ¨Écient optimizer methods to overcome this problem. Of course, the practical use of VQE algorithms on present quantum
computers will require to make Darwinian choices in link with qubit/operator counts and circuits depths restrictions: not all

30

HAIDAR ET AL

algorithms will "make the cut" to the real quantum computing world. We believe that the present OpenVQE/myQLM-Fermion
approach will help the community to study and design new accurate VQE algorithmic "champions" able to eÔ¨Éciently run on
present and near-future NISQ quantum computers towards performing accurate quantum chemical computations on complex
molecular systems.

TABLE 1 LiH (ùëüLi-H) = 1.45√Ö in STO-3G basis set. Comparison between Ô¨Åxed-length ansatze: UCCSD and UCCGSD with
fermionic ADAPT-VQE. In terms of number of parameters, CNOT-gates, Energy and Accuracy which is the absolute value of
diÔ¨Äerence between Energy and FCI energy in Hartree (Ha).

Method
UCCSD
UCCGSD
Fermionic ADAPT-VQE

Parameters CNOT-gates

44
330
30

6080
97280
4624

Energy (Ha)
‚àí7.880973466
‚àí7.880973130
‚àí7.880982281

Error (Ha) Computational time
8.85 √ó 10‚àí6
9.18 √ó 10‚àí6
2.43 √ó 10‚àí8

1 hr, 11 min
1 day, 12 hr
2 hr, 43 min

TABLE 2 Linear H
(ùëüH-H) = 1.0√Ö in STO-3G basis set. Comparison between Ô¨Åxed-length ansatze: UCCSD and UCCGSD
6
with fermionic ADAPT-VQE. In terms of number of parameters, CNOT-gates, Energy and Accuracy the absolute value of
diÔ¨Äerence between Energy and FCI energy.

Method
UCCSD
UCCGSD
Fermionic ADAPT-VQE

Parameters CNOT-gates

54
330
130

8544
97280
21648

Energy (Ha)
‚àí3.235451570
‚àí3.2360518902
‚àí3.236065546

Error (Ha) Computational time
6.14 √ó 10‚àí4
1.43 √ó 10‚àí5
7.33 √ó 10‚àí7

3 hr, 10 min
5 days, 7hr
7 day, 7 hr

TABLE 3 Available implementations of individual approaches in a list of most recent open sources quantum chemistry sim-
ulation packages (Table referred from 36) including OpenVQE and myQLM-fermion packages. Note: PNO-UpCCGSD stands
for pair-natural orbitals-UpCCGSD and SPA for Separable Pair Approximation. The √ó notation means that the method is NOT
implemented in a given package.

package \ ansatz
adapt-vqe
TEQUILA
PennyLane
OpenFermion
QEBAB
QFORTE
Qiskit
XACC
QDK
InQuanto

UCCSD k-UpCCGSD ADAPT PNO-UpCCGSD

SPA

√ó
109

113,114

117

118

120

123

125

126

127

√ó
110

115

√ó
118

√ó
√ó
√ó
√ó
√ó

53

108

109

113,116

√ó
119,118

120,121

123

√ó
√ó
127

53

√ó
109,111

√ó
109,112

√ó
√ó
√ó
√ó
√ó
√ó
√ó
√ó

√ó

√ó
√ó
√ó
√ó
√ó
√ó
√ó
√ó

√ó

QPE

√ó
√ó
√ó
√ó
√ó
120,122

124

√ó
126

√ó

54

OpenVQE/myQLM-fermion

53,54

HAIDAR ET AL

ACKNOWLEDGEMENTS

31

MR is grateful to the European Union for the Horizon 2020 (H2020) research grant within the
project. This work
has also received funding from the European Research Council (ERC) under the European Union‚Äôs Horizon 2020 research and
innovation program (grant agreement No 810367), project EMC2 (JPP, YM).
In addition, we would like to acknowledge all those who made this work possible: the TotalEnergies company for providing
HPC ressources.
Special thanks also to Diata Traore (LCT) for discussions on the classical quantum chemistry computations; to Baptiste Anselme
Martin (TotalEnergies) and Cesar Feniou (LCT) for helpful quantum computing discussions.

NE|AS|QC

‚ü®

‚ü©

References

1. Aspuru-Guzik A, Dutoi AD, Love PJ, Head-Gordon M. Simulated quantum computation of molecular energies. Science

2005; 309(5741): 1704‚Äì1707.

2. Bassman L, Urbanek M, Metcalf M, Carter J, Kemper AF, Jong dWA. Simulating quantum materials with digital quantum

computers. Quantum Science and Technology 2021; 6(4): 043002.

3. Lehtola S, Tubman NM, Whaley KB, Head-Gordon M. Cluster decomposition of full conÔ¨Åguration interaction wave func-
tions: A tool for chemical interpretation of systems with strong correlation. The Journal of chemical physics 2017; 147(15):
154105.

4. Gan Z, Grant DJ, Harrison RJ, Dixon DA. The lowest energy states of the group-IIIA‚Äìgroup-VA heteronuclear diatomics:
BN, BP, AlN, and AlP from full conÔ¨Åguration interaction calculations. The Journal of chemical physics 2006; 125(12):
124311.

5. Vogiatzis KD, Ma D, Olsen J, Gagliardi L, De Jong WA. Pushing conÔ¨Åguration-interaction to the limit: Towards massively

parallel MCSCF calculations. The Journal of chemical physics 2017; 147(18): 184111.

6. Hohenberg P, Kohn W. Inhomogeneous electron gas. Physical review 1964; 136(3B): B864.

7. Kohn W, Sham LJ. Self-consistent equations including exchange and correlation eÔ¨Äects. Physical review 1965; 140(4A):

A1133.

8. Sch√ºtt O, VandeVondele J. Machine learning adaptive basis sets for eÔ¨Écient large scale density functional theory

simulation. Journal of chemical theory and computation 2018; 14(8): 4168‚Äì4175.

9. Bartlett RJ, Kucharski SA, Noga J. Alternative coupled-cluster ans√§tze II. The unitary coupled-cluster method. Chemical

physics letters 1989; 155(1): 133‚Äì140.

10. Kutzelnigg W. Error analysis and improvements of coupled-cluster theory. Theoretica chimica acta 1991; 80(4): 349‚Äì386.

11. Harrison RJ. Approximating full conÔ¨Åguration interaction with selected conÔ¨Åguration interaction and perturbation theory.

The Journal of chemical physics 1991; 94(7): 5021‚Äì5031.

12. Olsen J, Jo/rgensen P, Koch H, Balkova A, Bartlett RJ. Full conÔ¨Åguration‚Äìinteraction and state of the art correlation
calculations on water in a valence double-zeta basis with polarization functions. The Journal of chemical physics 1996;
104(20): 8007‚Äì8015.

13. Peris G, Planelles J, Malrieu JP, Paldus J. Perturbatively selected CI as an optimal source for externally corrected CCSD.

The Journal of chemical physics 1999; 110(24): 11708‚Äì11716.

14. Taube AG, Bartlett RJ. New perspectives on unitary coupled-cluster theory. International journal of quantum chemistry

2006; 106(15): 3393‚Äì3401.

15. Bartlett RJ, Musia≈Ç M. Coupled-cluster theory in quantum chemistry. Reviews of Modern Physics 2007; 79(1): 291.

32

HAIDAR ET AL

16. Schriber JB, Evangelista FA. Communication: An adaptive conÔ¨Åguration interaction approach for strongly correlated

electrons with tunable accuracy. The Journal of chemical physics 2016; 144(16): 161106.

17. Nagy PR, K√°llay M. Approaching the basis set limit of CCSD (T) energies for large molecules with local natural orbital

coupled-cluster methods. Journal of Chemical Theory and Computation 2019; 15(10): 5275‚Äì5298.

18. Feynman RP. Simulating physics with computers. In: CRC Press. 2018 (pp. 133‚Äì153).

19. BenioÔ¨Ä P. The computer as a physical system: A microscopic quantum mechanical Hamiltonian model of computers as

represented by Turing machines. Journal of statistical physics 1980; 22(5): 563‚Äì591.

20. Reiher M, Wiebe N, Svore KM, Wecker D, Troyer M. Elucidating reaction mechanisms on quantum computers.

Proceedings of the national academy of sciences 2017; 114(29): 7555‚Äì7560.

21. McArdle S, Endo S, Aspuru-Guzik A, Benjamin SC, Yuan X. Quantum computational chemistry. Reviews of Modern

Physics 2020; 92(1): 015003.

22. Cao Y, Romero J, Olson JP, et al. Quantum chemistry in the age of quantum computing. Chemical reviews 2019; 119(19):

10856‚Äì10915.

23. Bauer B, Bravyi S, Motta M, Chan GKL. Quantum algorithms for quantum chemistry and quantum materials science.

Chemical Reviews 2020; 120(22): 12685‚Äì12717.

24. Yeter-Aydeniz K, Gard BT, Jakowski J, et al. Benchmarking quantum chemistry computations with variational, imaginary

time evolution, and Krylov space solver algorithms. Advanced Quantum Technologies 2021; 4(7): 2100012.

25. WhitÔ¨Åeld JD, Biamonte J, Aspuru-Guzik A. Simulation of electronic structure Hamiltonians using quantum computers.

Molecular Physics 2011; 109(5): 735‚Äì750.

26. Preskill J. Quantum computing in the NISQ era and beyond. Quantum 2018; 2: 79.

27. Elfving VE, Broer BW, Webber M, et al. How will quantum computers provide an industrially relevant computational

advantage in quantum chemistry?. arXiv preprint arXiv:2009.12472 2020.

28. Bharti K, Cervera-Lierta A, Kyaw TH, et al. Noisy intermediate-scale quantum (NISQ) algorithms. arXiv preprint

arXiv:2101.08448 2021.

29. Peruzzo A, McClean J, Shadbolt P, et al. A variational eigenvalue solver on a photonic quantum processor. Nature

communications 2014; 5(1): 1‚Äì7.

30. McClean JR, Romero J, Babbush R, Aspuru-Guzik A. The theory of variational hybrid quantum-classical algorithms. New

Journal of Physics 2016; 18(2): 023023.

31. Cerezo M, Arrasmith A, Babbush R, et al. Variational quantum algorithms. Nature Reviews Physics 2021; 3(9): 625‚Äì644.

32. Quantum GA, Collaborators*‚Ä† , Arute F, et al. Hartree-Fock on a superconducting qubit quantum computer. Science 2020;

369(6507): 1084‚Äì1089.

33. Kandala A, Mezzacapo A, Temme K, et al. Hardware-eÔ¨Écient variational quantum eigensolver for small molecules and

quantum magnets. Nature 2017; 549(7671): 242‚Äì246.

34. Hempel C, Maier C, Romero J, et al. Quantum chemistry calculations on a trapped-ion quantum simulator. Physical Review

X 2018; 8(3): 031022.

35. Romero J, Babbush R, McClean JR, Hempel C, Love PJ, Aspuru-Guzik A. Strategies for quantum computing molecular

energies using the unitary coupled cluster ansatz. Quantum Science and Technology 2018; 4(1): 014008.

36. Anand A, Schleich P, Alperin-Lea S, et al. A quantum computing view on unitary coupled cluster theory. Chemical Society

Reviews 2022.

HAIDAR ET AL

33

37. Gard BT, Zhu L, Barron GS, Mayhall NJ, Economou SE, Barnes E. EÔ¨Écient symmetry-preserving state preparation circuits

for the variational quantum eigensolver algorithm. npj Quantum Information 2020; 6(1): 1‚Äì9.

38. Ryabinkin IG, Yen TC, Genin SN, Izmaylov AF. Qubit coupled cluster method: a systematic approach to quantum

chemistry on a quantum computer. Journal of chemical theory and computation 2018; 14(12): 6317‚Äì6326.

39. Kim IH, Swingle B. Robust entanglement renormalization on a noisy quantum computer. arXiv preprint arXiv:1711.07500

2017.

40. Wecker D, Hastings MB, Troyer M. Progress towards practical quantum variational algorithms. Physical Review A 2015;

92(4): 042303.

41. Grimsley HR, Economou SE, Barnes E, Mayhall NJ. An adaptive variational algorithm for exact molecular simulations

on a quantum computer. Nature communications 2019; 10(1): 1‚Äì9.

42. McClean JR, Kimchi-Schwartz ME, Carter J, De Jong WA. Hybrid quantum-classical hierarchy for mitigation of

decoherence and determination of excited states. Physical Review A 2017; 95(4): 042308.

43. myQLM package. https://myqlm.github.io/https://myqlm.github.io/; .

44. Interoperability

with

myQLM.

https://myqlm.github.io/myqlm_speciÔ¨Åc/interoperability.

htmlhttps://myqlm.github.io/myqlm_speciÔ¨Åc/interoperability.html; .

45. Wille R, Van Meter R, Naveh Y. IBM‚Äôs Qiskit tool chain: Working with and developing for real quantum computers. In:

IEEE. ; 2019: 1234‚Äì1240.

46. Developers C. Cirq. https://github.com/quantumlib/Cirq/graphs/contributors; 2021. See full list of authors on Github:

https://github.com/quantumlib/Cirq/graphs/contributors

47. Smith RS, Curtis MJ, Zeng WJ. A practical quantum instruction set architecture. arXiv preprint arXiv:1608.03355 2016.

48. Nooijen M. Can the eigenstates of a many-body hamiltonian be represented exactly using a general two-body cluster

expansion?. Physical review letters 2000; 84(10): 2108.

49. Lee J, Huggins WJ, Head-Gordon M, Whaley KB. Generalized unitary coupled cluster wave functions for quantum

computation. Journal of chemical theory and computation 2018; 15(1): 311‚Äì324.

50. Tang HL, Shkolnikov V, Barron GS, et al. qubit-adapt-vqe: An adaptive algorithm for constructing hardware-eÔ¨Écient

ans√§tze on a quantum processor. PRX Quantum 2021; 2(2): 020310.

51. Xia R, Kais S. Qubit coupled cluster singles and doubles variational quantum eigensolver ansatz for electronic structure

calculations. Quantum Science and Technology 2020; 6(1): 015001.

52. Shkolnikov V, Mayhall NJ, Economou SE, Barnes E. Avoiding symmetry roadblocks and minimizing the measurement

overhead of adaptive variational quantum eigensolvers. arXiv preprint arXiv:2109.05340 2021.

53. Open-VQE

package.

https://github.com/OpenVQE/OpenVQE.githttps://openvqe.github.io/OpenVQE/Repository:

https://github.com/OpenVQE/OpenVQE.git and documentation:https://openvqe.github.io/OpenVQE/; .

54. myqlm-fermion.

https://github.com/myQLM/myqlm-fermionhttps://myqlm.github.io/qat-fermion.htmlRepository:

https://github.com/myQLM/myqlm-fermion and documentation: https://myqlm.github.io/qat-fermion.html; .

55. Barreiro JT, M√ºller M, Schindler P, et al. An open-system quantum simulator with trapped ions. Nature 2011; 470(7335):

486‚Äì491.

56. Fradkin E. Jordan-Wigner transformation for quantum-spin systems in two dimensions and fractional statistics. Physical

review letters 1989; 63(3): 322.

57. Virtanen P, Gommers R, Oliphant TE, et al. SciPy 1.0: Fundamental Algorithms for ScientiÔ¨Åc Computing in Python.

Nature Methods 2020; 17: 261‚Äì272. doi: 10.1038/s41592-019-0686-2

34

HAIDAR ET AL

58. ƒå√≠≈æek J. On the correlation problem in atomic and molecular systems. Calculation of wavefunction components in Ursell-
type expansion using quantum-Ô¨Åeld theoretical methods. The Journal of Chemical Physics 1966; 45(11): 4256‚Äì4266.

59. Cizek J, Paldus J. Coupled cluster approach. Physica Scripta 1980; 21(3-4): 251.

60. Yung MH, Casanova J, Mezzacapo A, et al. From transistor to trapped-ion computers for quantum chemistry. ScientiÔ¨Åc

reports 2014; 4(1): 1‚Äì7.

61. Taube AG, Bartlett RJ. New perspectives on unitary coupled-cluster theory. International journal of quantum chemistry

2006; 106(15): 3393‚Äì3401.

62. Evangelista FA, Chan GKL, Scuseria GE. Exact parameterization of fermionic wave functions via unitary coupled cluster

theory. The Journal of chemical physics 2019; 151(24): 244112.

63. Grimsley HR, Claudino D, Economou SE, Barnes E, Mayhall NJ. Is the trotterized uccsd ansatz chemically well-deÔ¨Åned?.

Journal of chemical theory and computation 2019; 16(1): 1‚Äì6.

64. Hatano N, Suzuki M. Finding exponential product formulas of higher orders. In: Springer. 2005 (pp. 37‚Äì68).

65. G√∂bel T. On the physics of Trotterization. Leiden University Student Repository 2020.

66. Barkoutsos PK, Gonthier JF, Sokolov I, et al. Quantum algorithms for electronic structure calculations: Particle-hole

Hamiltonian and optimized wave-function expansions. Physical Review A 2018; 98(2): 022322.

67. Yordanov YS, Barnes CH. Implementation of a general single-qubit positive operator-valued measure on a circuit-based

quantum computer. Physical Review A 2019; 100(6): 062317.

68. Yordanov YS, Arvidsson-Shukur DR, Barnes CH. EÔ¨Écient quantum circuits for quantum computational chemistry.

Physical Review A 2020; 102(6): 062612.

69. Yordanov YS, Armaos V, Barnes CH, Arvidsson-Shukur DR. Qubit-excitation-based adaptive variational quantum

eigensolver. Communications Physics 2021; 4(1): 1‚Äì11.

70. Yordanov Y. Quantum computational chemistry methods for early-stage quantum computers. PhD thesis. University of

Cambridge, Cambridge, UK; 2021.

71. Huggins WJ, Lee J, Baek U, O‚ÄôGorman B, Whaley KB. A non-orthogonal variational quantum eigensolver. New Journal

of Physics 2020; 22(7): 073009.

72. Greene-Diniz G, Mu√±oz Ramo D. Generalized unitary coupled cluster excitations for multireference molecular states
optimized by the variational quantum eigensolver. International Journal of Quantum Chemistry 2021; 121(4): e26352.

73. Chan HHS, Fitzpatrick N, Segarra-Mart√≠ J, Bearpark MJ, Tew DP. Molecular excited state calculations with adaptive
wavefunctions on a quantum eigensolver emulation: reducing circuit depth and separating spin states. Physical Chemistry
Chemical Physics 2021; 23(46): 26438‚Äì26450.

74. Rattew AG, Hu S, Pistoia M, Chen CFR, Wood S. A domain-agnostic, noise-resistant evolutionary variational quantum

eigensolver for hardware-eÔ¨Écient optimization in the Hilbert space. DeepAI 2019.

75. Ryabinkin IG, Lang RA, Genin SN, Izmaylov AF. Iterative qubit coupled cluster approach with eÔ¨Écient screening of

generators. Journal of chemical theory and computation 2020; 16(2): 1055‚Äì1063.

76. Lang RA, Ryabinkin IG, Izmaylov AF. Unitary transformation of the electronic hamiltonian with an exact quadratic
truncation of the baker-campbell-hausdorÔ¨Ä expansion. Journal of Chemical Theory and Computation 2020; 17(1): 66‚Äì78.

77. Sim S, Romero J, Gonthier JF, Kunitsa AA. Adaptive pruning-based optimization of parameterized quantum circuits.

Quantum Science and Technology 2021; 6(2): 025019.

78. Liu J, Li Z, Yang J. An eÔ¨Écient adaptive variational quantum solver of the Schr√∂dinger equation based on reduced density

matrices. The Journal of chemical physics 2021; 154(24): 244112.

HAIDAR ET AL

35

79. Quantum Learning Machine. https://atos.net/en/solutions/quantum-learning-machineATOS Quantum Learning Machine;

.

80. Martiel S, Brugi√®re dTG. Architecture aware compilation of quantum circuits via lazy synthesis. Quantum 2020. doi:

10.48550/ARXIV.2012.09663

81. De Brugi√®re TG, Baboulin M, Valiron B, Martiel S, Allouche C. Gaussian Elimination versus Greedy Methods for the
Synthesis of Linear Reversible Circuits. ACM Transactions on Quantum Computing 2021; 2(3). doi: 10.1145/3474226

82. Vandaele V, Martiel S, Brugi√®re G. dT. Phase polynomials synthesis algorithms for NISQ architectures and beyond.

Quantum Science and Technology 2022.

83. Brugi√®re TGd, Baboulin M, Valiron B, Martiel S, Allouche C. Reducing the Depth of Linear Reversible Quantum Circuits.

IEEE Transactions on Quantum Engineering 2021; 2: 1-22. doi: 10.1109/TQE.2021.3091648

84. Brugi√®re dTG, Baboulin M, Valiron B, Martiel S, Allouche C. Decoding techniques applied to the compilation of CNOT
circuits for NISQ architectures. ScienceDirect 2022; 214(February 2022): 1‚Äì31. doi: 10.1016/j.scico.2021.102726

85. Vidal G. EÔ¨Écient Classical Simulation of Slightly Entangled Quantum Computations. Phys. Rev. Lett. 2003; 91: 147902.

doi: 10.1103/PhysRevLett.91.147902

86. Rudiak-Gould B. The sum-over-histories formulation of quantum computing. arXiv preprint quant-ph/0607151 2006.

87. Miller DM, Thornton MA. QMDD: A decision diagram structure for reversible and quantum circuits. In: IEEE. ; 2006:

30‚Äì30.

88. Loos PF, Damour Y, Scemama A. The performance of CIPSI on the ground state electronic energy of benzene. The Journal

of Chemical Physics 2020; 153(17): 176101.

89. Garniron Y. Development and parallel implementation of selected conÔ¨Åguration interaction methods. PhD thesis.

Universit√© de Toulouse, Toulouse, France; 2019

90. Quantum Package: a programming environment for wave function methods. https://github.com/QuantumPackage/qp2,

https://github.com/quantumlib/Cirq/graphs/contributors; .

91. Gunnarsson O, Lundqvist BI. Exchange and correlation in atoms, molecules, and solids by the spin-density-functional

formalism. Physical Review B 1976; 13(10): 4274.

92. Running Gaussian. https://gaussian.com/running/https://gaussian.com/running/; .

93. Garniron Y, Applencourt T, Gasperich K, et al. Quantum Package 2.0: An Open-Source Determinant-Driven Suite
PMID: 31082265doi:

of Programs. Journal of Chemical Theory and Computation 2019; 15(6): 3591-3609.
10.1021/acs.jctc.9b00176

94. Lovas

F,

Tiemann

E, Coursey

J,

et

al. Diatomic

Spectral Database.

https://www.nist.gov/pml/

diatomic-spectral-databaseDiatomic spectral database; 2003.

95. Herzberg G. Electronic spectra and electronic structure of polyatomic molecules. New York : Van Nostrand . 1966.

96. Huber KP. Molecular spectra and molecular structure: IV. Constants of diatomic molecules. Springer Science & Business

Media . 2013.

97. al. eRDJ. NIST computational chemistry comparison andbenchmark database, NIST standard reference database num-

ber101 release 21. https://cccbdb.nist.gov/; 2020.

98. Harsha G, Shiozaki T, Scuseria GE. On the diÔ¨Äerence between variational and unitary coupled cluster theories. The Journal

of chemical physics 2018; 148(4): 044107.

99. K√ºhn M, Zanker S, Deglmann P, Marthaler M, Wei√ü H. Accuracy and resource estimations for quantum chemistry on a

near-term quantum computer. Journal of chemical theory and computation 2019; 15(9): 4764‚Äì4780.

36

HAIDAR ET AL

100. Carrazza S, Efthymiou S, Lazzarin M, Pasquale A. An open-source modular framework for quantum computing. arXiv

preprint arXiv:2202.07017 2022.

101. Kuroiwa K, Nakagawa YO. Penalty methods for a variational quantum eigensolver. Physical Review Research 2021; 3(1):

013197.

102. Setia K, Chen R, Rice JE, Mezzacapo A, Pistoia M, WhitÔ¨Åeld JD. Reducing qubit requirements for quantum simulations
using molecular point group symmetries. Journal of Chemical Theory and Computation 2020; 16(10): 6091‚Äì6097.

103. Cao C, Hu J, Zhang W, et al. Towards a Larger Molecular Simulation on the Quantum Computer: Up to 28 Qubits Systems

Accelerated by Point Group Symmetry. arXiv preprint arXiv:2109.02110 2021.

104. Tkachenko NV, Sud J, Zhang Y, et al. Correlation-informed permutation of qubits for reducing ansatz depth in the

variational quantum eigensolver. PRX Quantum 2021; 2(2): 020337.

105. Ollitrault PJ, Kandala A, Chen CF, et al. Quantum equation of motion for computing molecular excitation energies on a

noisy quantum processor. Physical Review Research 2020; 2(4): 043140.

106. Ville JL, Morvan A, Hashim A, et al. Leveraging randomized compiling for the QITE algorithm. arXiv preprint

arXiv:2104.08785 2021.

107. Kamakari H, Sun SN, Motta M, Minnich AJ. Digital quantum simulation of open quantum systems using quantum

imaginary‚Äìtime evolution. PRX Quantum 2022; 3(1): 010320.

108. ADAPT package. https://github.com/mayhallgroup/adapt-vqe.githttps://github.com/mayhallgroup/adapt-vqe.git; .

109. Kottmann JS, Alperin-Lea S, Tamayo-Mendoza T, et al. Tequila: A platform for rapid development of quantum algorithms.

Quantum Science and Technology 2021; 6(2): 024009.

110. Pair-natural orbitals in tequila package. https://github.com/aspuru-guzik-group/tequilahttps://github.com/aspuru-guzik-

group/tequila; .

111. Kottmann JS, Schleich P, Tamayo-Mendoza T, Aspuru-Guzik A. Reducing qubit requirements while maintaining numeri-
cal precision for the variational quantum eigensolver: A basis-set-free approach. The Journal of Physical Chemistry Letters
2021; 12(1): 663‚Äì673.

112. Kottmann JS, Aspuru-Guzik A. Optimized low-depth quantum circuits for molecular electronic structure using a separable-

pair approximation. Physical Review A 2022; 105(3): 032449.

113. Bergholm V, Izaac J, Schuld M, et al. Pennylane: Automatic diÔ¨Äerentiation of hybrid quantum-classical computations.

arXiv preprint arXiv:1811.04968 2018.

114. Arrazola JM, Di Matteo O, Quesada N, Jahangiri S, Delgado A, Killoran N. Universal quantum circuits for quantum

chemistry. arXiv preprint arXiv:2106.13839 2021.

115. PennyLaneAI package. https://github.com/PennyLaneAI/pennylane.githttps://github.com/PennyLaneAI/pennylane.git; .

116. Delgado A, Arrazola JM, Jahangiri S, et al. Variational quantum algorithm for molecular geometry optimization. Physical

Review A 2021; 104(5): 052402.

117. McClean JR, Rubin NC, Sung KJ, et al. OpenFermion: the electronic structure package for quantum computers. Quantum

Science and Technology 2020; 5(3): 034014.

118. QEBAB package. https://github.com/hanschanhs/QEBAB.githttps://github.com/hanschanhs/QEBAB.git; .

119. Chan HHS, Fitzpatrick N, Segarra-Mart√≠ J, Bearpark MJ, Tew DP. Molecular excited state calculations with adaptive
wavefunctions on a quantum eigensolver emulation: reducing circuit depth and separating spin states. Physical Chemistry
Chemical Physics 2021; 23(46): 26438‚Äì26450.

HAIDAR ET AL

37

120. Stair NH, Evangelista FA. Qforte: an eÔ¨Écient state simulator and quantum algorithms library for molecular electronic

structure. arXiv preprint arXiv:2108.04413 2021.

121. Stair NH, Evangelista FA. Simulating many-body systems with a projective quantum eigensolver. PRX Quantum 2021;

2(3): 030301.

122. Stair NH, Huang R, Evangelista FA. A multireference quantum krylov algorithm for strongly correlated electrons. Journal

of chemical theory and computation 2020; 16(4): 2236‚Äì2245.

123. Aleksandrowicz G, Alexander T, Barkoutsos P, et al. Qiskit: An Open-source Framework for Quantum Computing. https:

//doi.org/10.5281/zenodo.2562111; 2019

124. Quantum

phase

estimation

algorithm

in

Qiskit

package.

https://qiskit.org/textbook/ch-algorithms/

quantum-phase-estimation.htmlhttps://qiskit.org/textbook/ch-algorithms/quantum-phase-estimation.html; .

125. McCaskey AJ, Lyakh DI, Dumitrescu EF, Powers SS, Humble TS. XACC: a system-level software infrastructure for

heterogeneous quantum‚Äìclassical computing. Quantum Science and Technology 2020; 5(2): 024002.

126. Quantum Development Kit. https://github.com/microsoft/quantum.githttps://github.com/microsoft/quantum.git; .

127. InQuanto package. https://medium.com/cambridge-quantum-computing/introduction-to-the-inquanto-computational-chemistry-platform-for-quantum-computershttps://medium.com/cambridge-

quantum-computing/introduction-to-the-inquanto-computational-chemistry-platform-for-quantum-computers;
.

How to cite this article: M. Haidar, M. J. Ranƒçiƒá, T. Ayral, Y. Maday, and J-P. Piquemal (2022), Open Source Variational
Quantum Eigensolver Extension of the Quantum Learning Machine (QLM) for Quantum Chemistry, , .

APPENDIX

A REVIEW: SPIN-COMPLEMENT GENERALZED SINGLET AND DOUBLET EXCITATIONS

Spin-complement pair:
is a method that involves excitations that can preserve spin-symmetry for neutral closed-shell molecules (i.e number of ùõº elec-
trons = number of ùõΩ electrons). These excitations restrict the spin-symmetry of the UCC wavefunction Hilbert space into a
smaller Hilbert space with the desired eigenstate. In order to satisfy such spin-symmetry, only the excitations that keep balance
between ùõº and ùõΩ electrons should be implemented as follows:

ùúè1 = ùëê‚Ä†
ùëùùõº

ùëêùëûùõº

+ ùëê‚Ä†
ùëùùõΩ

ùëêùëûùõΩ

‚àí ‚Ñé.ùëê.

ùúè2,ùê¥ = ùëê‚Ä†
ùëüùõº
ùúè2,ùêµ = ùëê‚Ä†
ùëüùõº
ùúè2,ùê∂ = ùëê‚Ä†
ùëüùõº

ùëêùë†ùõº
ùëêùë†ùõΩ
ùëêùë†ùõΩ

ùëê‚Ä†
ùëùùõº
ùëê‚Ä†
ùëùùõº
ùëê‚Ä†
ùëùùõΩ

ùëêùëûùõº
ùëêùëûùõΩ
ùëêùëûùõº

+ ùëê‚Ä†
ùëüùõΩ
+ ùëê‚Ä†
ùëüùõΩ
+ ùëê‚Ä†
ùëüùõΩ

ùëêùë†ùõΩ
ùëêùë†ùõº
ùëêùë†ùõº

ùëê‚Ä†
ùëùùõΩ
ùëê‚Ä†
ùëùùõΩ
ùëê‚Ä†
ùëùùõº

ùëêùëûùõΩ
ùëêùëûùõº
ùëêùëûùõΩ

‚àí ‚Ñé.ùëê.

‚àí ‚Ñé.ùëê.

‚àí ‚Ñé.ùëê.

(A1)

(A2)

This type of fermionic excitations is called spin-complemented pair: as is seen above in (Eqs. A1 and Eqs. A2), for each uni-
tary operator acting on some spin orbitals, there is an added parallel unitary operator that acts on the opposite-spin orbitals.
Spin-complemented pair excitations, have been used within the Fermionic ADAPT-VQE 41, which is used in this article when
fermionic ADAPT-VQE is implemented.

38

HAIDAR ET AL

B INTEROPERABILITY OF OPEN-SOURCE PACKAGES WITH MYQLM

One of the main advantages of myQLM library as mentioned in section 3 is to allow the developers and researchers to access
through it to other quantum programming environments such as Qiskit, projectQ, pyQuil, Cirq etc. We want to shed light in this
section about the interoperability of myQLM circuit to other circuits corresponding to those packages. myQLM library provides
binders to connect with the other Python-based quantum frameworks. The role of these binders is to: (i) translate myQLM
circuits into a format deÔ¨Åned in another quantum framework and vice-versa. (ii) execute a job using a QPU deÔ¨Åned in another
quantum framework directly in myQLM and vice-versa. This is helpful to any problem in quantum computing.
When it comes to our domain of treating quantum chemistry problems using variational quantum algorithms it is important to
use myQLM tools to translate a deÔ¨Åned wavefunction represented by a QLM circuit into Qiskit, Cirq, PyQuil etc. This bridges
the gap between the chemists who work in myQLM softwares and those who work on the other packages. This allows them to
validate their calculations and their codes. This exchange between packages works easliy for the user by just using few lines of
codes developed by myQLM package.
It is interesting to realize that as we develop our VQE algorithms basing them on myQLM-fermion tools, we will certainly
need the myQLM interoperability binders to interact with the other packages. This provides tests to our developed algorithms
to compare them with those implemented in other packages.
Additionally, using this interoperability, can facilitate for the user the execution of a circuit in a real quantum device as shown in
the Ô¨Ågure below For example to describe the QLM-Qiskit circuits switching using myQLM keys, we provide a simple example

FIGURE B1 myQLM keys: running on IBM quantum computer

related to an advanced VQE algorithm which we developed in OpenVQE described in section 4. This hopefully will make the
image of myQLM interoperability clearer to the reader. As explained in section 2.4, qubit ADAPT-VQE is based on pool of
excitations consisting of Pauli strings that can be added adaptively step by step to construct the Ô¨Ånal ansatz. Suppose our pool
consist of the YXYY strings. Then mapping the exponential of each of these strings associated with their parameters into a circuit

HAIDAR ET AL

39

can be done typically by using CNOTstair case method. myQLM-fermion tools can help to slice this exponential to construct
this circuit, which we name it here "YXYYQLM", this construction is shown in Figure B2 . By using the keys of myQLM listed
in the same Figure, the user can switch between YXYYQLM and YXYYQiskit immediately.
We can also use other myQLM tools not only to switch QLM and Qiskit circuits but also to connect between myQLM QPU and
Qiskit Backend when we want to execute a job and obtain an estimated energy. With myQLM 44 one can simply use a circuit to
test it in a real IBM computer by doing the following few steps presented in Figure B1 : (i) First to declare your IBM token, (ii)
second to wrap a Qiskit backend in a QPU, (iii) third to use job class in order to send the circuit to a QPU then just submit the
job to IBM to obtain the results. Further details about the code documentation of these tools and binders are found in myQLM
website 43.

FIGURE B2 Interoperability packages with myQLM. YXYYQLM (top circuit) and YXYY (bottom circuit). These circuits
consists of 4 qubits that represents ùëíùëå0‚äóùëã1‚äóùëå2‚äóùëå3|1100‚ü©

with ùúÉ is equal to 0.01.

40

HAIDAR ET AL

C FERMIONIC ADAPT-VQE-EXAMPLE: ENERGY VERSES THE NORM THRESHOLD IN H2
MOLECULE IN CC-PVDZ BASIS SET

(a) Energy (Ha), Norm thresholds (red) as a function of
CNOT gates

(b) Error for the ground state energy given in subÔ¨Ågure(a)
w.r.t
FCI(cc-pVDZ) basis set as a function of CNOT gates

FIGURE C3 Fermionic ADAPT VQE simulations in H
2
based on a given norm threshold condition (which stops here at 10‚àí4). The blue area represent the chemical accuracy.

molecule (20 qubits) in cc-pVDZ basis set. Iterations were stopped

050010001500200025003000CNOTS1.1701.1651.1601.1551.1501.1451.1401.1351.130Energies (Ha)105104103102101100101NormAdapt-VQE (H2): cc-pVDZ, spin_complement_gsd, JW0500100015002000250030003500CNOTS109108107106105104103102101Energies substracted from FCI (Ha)Adapt-VQE (H2): cc-pVDZ, spin_complement_gsd, JW