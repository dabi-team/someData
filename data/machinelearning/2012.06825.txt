Continuation of the research presented at the competition "ProjectX 2020" by UofT AI
Version 1.0 - 10th December 2020

0
2
0
2

c
e
D
2
1

]

G
L
.
s
c
[

1
v
5
2
8
6
0
.
2
1
0
2
:
v
i
X
r
a

Physics-Informed Machine Learning Simulator for
Wildﬁre Propagation

Luca Bottero*, Francesco Calisto*, Giovanni Graziano*, Valerio Pagliarino*,
Martina Scauda†, Sara Tiengo* and Simone Azeglio*

*Student, Department of Physics, University of Turin, †Student, Department of Mathematics, University of Turin
E-mails: luca.bottero192, francesco.calisto, giovanni.graziano136, valerio.pagliarino,
martina.scauda, sara.tiengo, simone.azeglio@edu.unito.it

ABSTRACT

The aim of this work is to evaluate the feasibility of re-
implementing some key parts of the widely used Weather Re-
search and Forecasting WRF-SFIRE simulator by replacing
its core differential equations numerical solvers with state-
of-the-art physics-informed machine learning techniques to
solve ODEs and PDEs, in order to transform it into a real-
time simulator for wildﬁre spread prediction. The main pro-
gramming language used is Julia, a compiled language which
offers better perfomance than interpreted ones, providing
Just in Time (JIT) compilation with different optimization
levels [1]. Moreover, Julia is particularly well suited for nu-
merical computation and for the solution of complex phys-
ical models, both considering the syntax and the presence
of some speciﬁc libraries such as DifferentialEquations.jl and
ModellingToolkit.jl.

beetles and other insects that survive at high temperatures are
responsible for killing millions of trees, according to the Fourth
National Climate Assessment [7], turning them into kindling for
wildﬁres. These two phenomena together produce an alarming
growth in wildﬁre frequency and intensity or, following the ter-
minology used in [4], the number of ﬁres (NB) and the extension
of the burnt area (BA). On the other hand, wildﬁres impact cli-
mate change in two ways: ﬁrstly, they emit massive amounts of
carbon dioxide and other pollutants that can affect regional and
even global climate. Secondly, vast lands laid bare by ﬁres are
soaked with rain, increasing the risk for devastating landslides.
On top of this, wildﬁres produce serious health risks due to the
emission of toxic chemical compounds [8].

In such a worrisome scenario, having the support of fast and
accurate wildﬁre spread simulators that can run iteratively in
order to evaluate several different containment strategies is of
unprecedented importance.

I

INTRODUCTION

A Real-time is revolutionary

In recent years wildﬁres have been increasingly growing in in-
tensity and frequency, becoming a serious threat to the health and
socio-economic stability of various countries all over the world.
In particular, Australia was devastated by the "Black Summer",
the bushﬁre season between 2019 and 2020, and California just
suffered from the most severe wildﬁre season recorded in its
modern history. According to the California Department of
Forestry and Fire Protection [2]: over 4 percent of its land was
burned by more than 8,600 ﬁres [3].

The interconnection between wildﬁres and climate change is
evident and has been studied by climate scientists over the years
[4][5]. On one hand, climate change favors the spread of wild-
ﬁres. One of the main factors in play is the rise in global tem-
peratures: the early beginning of spring leads to the rapid melt-
ing of snowpacks, causing land to dry out earlier and remain
dry for longer. In addition, the hotter the air, the more water it
soaks up from plants and soils; the "vapor pressure deﬁcit" is
used to measure the difference between how much water the air
holds and how much it could hold: the higher this coefﬁcient,
the more soil and vegetation will dry out [6]. Furthermore, bark

The current stable version of WRF is able to produce highly
accurate and validated predictions, but each simulation takes
several hours, which is acceptable for a single run. Neverthe-
less, if one wants to use the simulator for containment strategies,
time is a major obstacle. In order to use WRF for that purpose,
one should run the simulator iteratively with different initial sce-
narios, therefore predicting the outcome of various containment
strategies and choosing the best one according to the output of
the program. The revolutionary reach of such an approach is that
it would limit human error in situations where taking the right
decision quickly is extremely difﬁcult. To reach this goal it is
essential to signiﬁcantly increase the computational efﬁciency of
ﬁre spread models, which can be done thanks to Machine Learn-
ing techniques.

Furthermore, in our proposal we will show that such tech-
niques introduce a broad spectrum of other advantages, for ex-
the possibility to obtain a continuous solution for the
ample:
problem instead of a discretized one on a grid, the possibility to
forecast the evolution even outside the limits of the simulation
domain, and the possibility to reconstruct the evolution back in

 
 
 
 
 
 
time, with applications for forensic analysis. The main program-
ming language used in this work is Julia for reasons explained
below.

based approach with all the advantages disclosed above and dis-
cussed in paragraph IV.B.

2

B Physics-based or ML?

In the context of science, the well-known adage “a picture
is worth a thousand words” might well be “a model is worth a
thousand datasets.”, writes Christopher Rackauckas in his trade-
mark paper [9]. A single sentence couldn’t describe the true
power of Scientiﬁc Machine Learning better. Machine Learn-
ing’s utmost strength, i.e. universal ﬂexibility to approximate
any nonlinearity from data, as stated by the Universal Approx-
imation Theorem [10], is at the same time its main drawback:
the higher the complexity of the problem, the more data the al-
gorithm needs to train. While some ﬁelds can provide big data,
such as bioinformatics [11], many scientiﬁc disciplines are still
limited in the use of Deep Learning (DL) by a lack of data. An-
other reason for the ineffectiveness of Machine Learning (ML)
might be the apparent chaotic nature of a phenomenon. This
is the case of wildﬁres and weather-related phenomena, which
don’t depend solely on the initial and boundary conditions, but
evolve according to complex internal dynamics that cannot be
predicted from mere data. In order to make a neural network
learn such dynamics, one would need data with both high spa-
tial and temporal resolution, something not available in this ﬁeld
[12]. For this reason, we think that the growing ﬁeld of Sci-
entiﬁc Machine Learning is a good compromise where climate
and wildﬁre science could take advantage. The idea is to embed
physical information, generally in the form of partial differen-
tial equations, into the ML model, thus constructing a Physics
Informed Neural Network (PINN). A former physics-informed
approach consists in training the model on data and constrain-
ing the solution space to the physically admissible ones (e.g.
for incompressible ﬂuid dynamics, any ﬂow solution that breaks
the mass conservation principle would not be considered by the
model [13]). Another physics-informed architecture - the one
considered in our case - consists instead in training the neural
network directly on the physical model output data, employing
the feed-forward networks as an efﬁcient approximator of tra-
jectories in the solution space. This approach leads to various
advantages, such as avoiding the so-called curse of dimensional-
ity: as the dimensionality of an equation increases, the computa-
tional costs of a numerical equation solver grow exponentially,
while PINNs can be proven to have a polynomial bound [14].
This results in a signiﬁcant speed up with respect to numerical
solvers when solving high dimensional problems. We decided to
use the second technique since our goal is to evaluate the feasi-
bility of a high efﬁciency, ML-based, wildﬁre spread simulator
that uses the equations of the WRF-SFIRE model.

II RESEARCH QUESTION

We aim to investigate the possibility to implement some key
parts of the complex WRF-SFIRE physical model using an ML-

III METHODS

Firstly, we started by investigating the structure of the systems
of partial differential equations (PDEs) that constitute the core of
the physical model of WRF-SFIRE. In this way we detected the
modules where replacing the current structure has the greatest
impact and we found out how to re-implement them using our
architecture.

A WRF model exploration and proﬁling

In order to increase the computational efﬁciency of WRF-
SFIRE model, we needed to identify the most computationally-
intensive parts of WRF’s code. We performed a proﬁling us-
ing the Linux perf command [15].
In this way, we obtained
the CPU overhead of the subroutines measured running a variety
of notable example scenarios provided by the developers of the
WRF model. For comparison, we also ran a performance anal-
ysis for atmospheric simulations alone. The results we obtained
are consistent with our hypothesis about what slows down the
simulations: numerical solvers of the model’s main differential
equations are responsible for more than 20% of the total over-
head. The remaining machine time is due to I/O processes and
other equations that require less complex computations or that
are updated less frequently. The main difference between the
purely atmospheric simulations and those with a ﬁre simulation
was, as expected, due to calculations of the ﬁre spread rate and
the resolution of the level set equation, which determines the
ﬁre propagation. This analysis was followed by an in-depth ex-
amination of the WRF’s Fortran code, with particular attention
to the SFIRE module, in order to understand how the problem
of solving the governing equations is approached. We used this
information to decide which equations to re-implement in our
model. This is our verdict:
the level set equation, describing
the evolution of ﬁre area, is not only central from a conceptual
point of view, but its numerical resolution has a signiﬁcant im-
pact on the CPU load during ﬁre simulation. (Please see Fig.1
and Fig.1). We were also interested in evaluating the possibility
of applying PINNs to the resolution of the Euler system that is
a system of 7 PDEs governing the atmosphere behavior. That is
because even if the Euler system is not strictly linked to wildﬁre
simulation, it has the greatest impact on the computational load
and is physically coupled to the level set equation.

Therefore, in this paper we will present a detailed appli-
cation of the PINN architecture to the level set equation and
a convergence study of PINNs training applied to the Euler
system.

B A brief insight into the WRF-SFIRE model

Despite the focus of this project being on wildﬁre spread sim-
ulation, the current state-of-the-art ﬁre spread models can pro-
duce realistic results only because they are integrated with a

3

Grid and coordinates The atmospheric model operates on a
logically quadrilateral 3D grid on the Earth’s surface (Fig.2).
The vertical coordinate is the hybrid terrain-following mass
coordinate η; deﬁned as a combination between the terrain-
following coordinate and a pure pressure coordinate. Consider-
ing the hydrostatic pressure pd as an independent variable, ARW
integrates the compressible, non hydrostatic Euler equations cast
in the ﬂux form using the following prognostic variables that
have conservation properties ([17], pp. 8-10):

• vvv = (u, v, w), where vvv are the covariant velocities in the hor-
izontal and vertical directions, while ω = ∂t η is the con-
travariant vertical velocity;

• θm is the moist potential temperature;
• qm = (qv, qc, qr...) represents the mixing ratios of moisture

variables (water vapor, cloud water, rain water, ...).

Since equations are formulated in ﬂux form, the previous con-
served prognostic variables have to be deﬁned in ﬂux form as
well, leading to


VVV = µdvvv = (U,V,W )

Ω = µdω
Θm = µdθm

Qm = µdqm

(1)

where µd = ∂η pd is the vertical coordinate metric. On the other
hand, the geopotential φ = gz, despite being a prognostic vari-
able in the governing equations of the ARW, is not written in ﬂux
form because the quantity µdφ is not conserved.

Downscaling and nesting Even though the aim is to simulate
microscale and mesoscale events, the synoptic and global scales
cannot be neglected. However, a high resolution global model is
computationally expensive. Through a downscaling it is possi-
ble to enhance the resolution starting from large scale informa-
tion. WRF implementes dynamic downscaling through the nest-
ing method that introduces an additional grid (child grid) into the
simulation with different granularity. Prognostic variable ﬁelds
from the coarse-grid forecast are imposed as a boundary condi-
tion of the integration area.

Fig. 2: Coordinates system of model’s grid [17]

Fig. 1: Proﬁling of computation-expensive WRF modules

Module name (CPU, 4 threads)
01. sﬁre_phys_MOD_ﬁre_ros_cawfe
02. sﬁre_core_MOD_check_lfn_tign_ij
03. powf_fma_[Standard library for basic math]
04. small_step_em_MOD_advance
05. sﬁre_util_MOD_print_3d_stats
06. small_step_em_MOD_advance_uv
07. fs_sﬁre_phys_MOD_ﬁre_ros
08. small_step_em_MOD_advance_mu_t
09. sﬁre_core_MOD_tend_ls
10. advect_em_MOD_advect_scalar_pd
11. fr_sﬁre_phys_MOD_ﬁre_rate_of_spread

Overhead %
8.70
6.66
6.58
5.99
5.89
5.29
4.64
4.48
2.55
2.52
2.41

TABLE 1

more complete atmospheric simulator; therefore presenting the
structure of WRF-SFIRE is impossible without insight into the
atmospheric model that is interrogated continuously by the ﬁre
propagation module.

C Description of the physical model

The Weather Research and Forecasting (WRF) model is an
atmospheric modeling system designed for Numerical Weather
Prediction (NWP). The NWP procedure was designed by the
meteorologist Vilherlm Bjerknes in 1904, originating from the
assumption that weather forecasting is an initial value problem.
Therefore, once given the observed initial state of the atmo-
sphere, the integration of governing equations is feasible and is
assigned to the Advanced Research WRF (ARW), the dynamics
solver of the model. However, the equations cannot be solved
analytically, so they are described on a mesh and the computed
solutions are an approximation of exact ones. A good and com-
prehensive description of the model is accessible in the Users’
guide [16].

0123456789CPU Overhead %01. sﬁre_phys_MOD_ﬁre_ros_cawfe02. sﬁre_core_MOD_check_lfn_tign_ij03. powf_fma [Standard library for bas…04. small_step_em_MOD_advance05. sﬁre_util_MOD_print_3d_stats06. small_step_em_MOD_advance_uv07. fs_sﬁre_phys_MOD_ﬁre_ros08. small_step_em_MOD_advance_…09. sﬁre_core_MOD_tend_ls10. advect_em_MOD_advect_scalar_pd11. fr_sﬁre_phys_MOD_ﬁre_rate_of_s…Module468CPU Overhead %Firefoxﬁle:///Users/ValerioPagliarino/Desktop/proﬁlePlot.svg1 di 109/11/20, 20:14η y x μ,θ,qv,ql Ω ,W,φ Ω ,W,φ V V U U D Fire module

The coupling of a mesoscale weather model (WRF-ARW
model) with a 2D semi-empirical ﬁre spread model permits the
execution of a wildland ﬁre simulation [18]. SFIRE was devel-
oped based on the level set method i.e. an Eulerian approach.
The reason why the ﬁre model needs to be coupled with the at-
mospheric model is due to the signiﬁcant inﬂuence of weather
on ﬁre behavior. In particular, the wind affects ﬁre spread, while
the ﬁre causes changes in the atmosphere through the heat and
vapor ﬂuxes from burning fuel and evaporation of fuel moisture.
For every WRF time step, one time step of the ﬁre model is per-
formed. The called ﬁre model inputs the surface wind, which
drives the ﬁre, and outputs the heat ﬂux into the atmosphere.
The ﬁre model has a high resolution and operates on a reﬁned
ﬁre mesh contained in the inner grid of the atmospheric model.

E Mathematical structure
Atmospheric governing equations Using the variables de-
ﬁned in (1), the ﬂux-form Euler equations, representing the core
of the ARW, can be written as follows [17]
Conservation of momentum






∂tU + (∇ ·VVV u) + µdα∂x p + ( α
αd
∂tV + (∇ ·VVV v) + µdα∂y p + ( α
αd
∂tW + (∇ ·VVV w) − g[( α
αd

)∂η p − µd] = Fw

)∂η p∂xφ = FU
)∂η p∂yφ = FV

Conservation of heat

∂t Θm + (∇ ·VVV θm) = FΘm

Conservation of mass

∂t µd + (∇ ·VVV ) = 0

Geopotential Material Derivative

∂t φ + µ −1

d [(VVV · ∇φ ) − gW ] = 0

Scalar moisture equations

∂t Qm + (∇ ·VVV qm) = FQm

where

and

∇ ·VVV a = ∂x(Ua) + ∂y(Va) + ∂η (Ωa)

VVV · ∇a = U∂xa +V ∂ya + Ω∂η a,

(2)

(3)

(4)

(5)

(6)

for a generic variable a.

These equations are coupled with the diagnostic equation for

dry hydrostatic pressure

∂η φ = −αd µd

(7)

and the diagnostic relation for the full pressure (dry air com-
bined with water vapor)

p = p0

(cid:17)γ

(cid:16) Rdθm
p0αd

(8)

4

In Eq.

(2) - (6), αd = 1
pd

is the inverse density of dry air,
α = αd(1 + qv + qc + qr + ...)−1, while Rd is the gas constant
for dry hair and γ = cp
= 1.4 is the ratio of the heat capacities
cv
for dry air. The right hand side terms FU , FV , FW , FΘm contain
the Coriolis and curvature terms along with mixing terms and
physical forcings.

Since the ARW solver works on a grid, a projection from the
computational ﬂat space to the physical spherical space is needed
to interpret results: in particular, ARW implements the projec-
tion using map scale factors mx and my, deﬁned as the ratio of
the distance (∆x, ∆y) in computational space to the correspond-
ing distance on the earth’s surface:

(mx, my) =

(∆x, ∆y)
distance on the earth

.

In practice, the ARW actually solves a perturbative form ([17],
pp.12) of the previous governing equations, where the momen-
tum variables are redeﬁned as follows

U =

µdu
my

,V =

µdv
mx

,W =

µdw
my

, Ω =

µdω
my

.

To solve the governing equations, ARW adopts a time-split
integration scheme. In atmospheric model, however, slow and
fast processes coexist and they have to be integrated differently:
the former through a third-order Runge Kutta (RK3) time inte-
gration scheme; while the latter over a smaller RK3 time steps
to guarantee numerical stability.

Level set equation In SFIRE [18], the propagation of a ﬁre
burning in the area Ω = Ω(t) in the horizontal (x, y) plane on
which the Earth is projected, is implemented by the level set
method, which evolves a function ψ = ψ(x,t), called the level
set function, such that the burning area at a time t is

Ω(t) = {x : ψ(x,t) ≤ 0}

and the ﬁreline Γ(t), i.e.
Ω(t), is the level set

the boundary of the burning region

Γ(t) = {x : ψ(x,t) = 0}.

(9)

The model adopts a semi-empirical approach, where the ﬁre
spread rate S is computed from fuel properties, using the follow-
ing modiﬁed Rothermel formula [19]:

S = R0(1 + φW + φS).

(10)

Here, R0 represents the spread rate in the absence of wind,
whereas φW and φS are respectively the wind factor and the slope
factor. Given a point x ∈ Ω(t), the time of ignition ti is deﬁned
as the time when the point x ∈ Γ(ti(x)). The model assumes that
at each location on the grid the fuel fraction, at the beginning
F = 1, decreases exponentially from the time of ignition ti.

On the ﬁreline, from Eq. (9), the tangential component of the
gradient ∇ψ is zero, meaning that the ﬁre propagation speed is

the model postulates S is a function
normal to the ﬁreline Γ:
of the normal component of the wind factor U and the terrain
gradient ∇z [19].

The evolution of the level set function is governed by the par-

tial differential equation

∂t ψ + S||∇ψ|| = 0,

(11)

called the level set equation, which is solved numerically
through discretization on the reﬁned ﬁre grid, adopting Heun’s
method, a second-order Runge Kutta method ([18], p.596).

F The new architecture

Fig. 3: Physics-informed neural network architecture for solving PDEs

We have replaced the original numerical solvers with a
profoundly different approach, by taking advantage of the
recently developed Julia packages NeuralPDE.jl and DiffE-
qFlux.jl, which support Physics Informed Neural Networks
(PINNs) for automated PDE solving and Backwards Stochas-
tic Differential Equation (BSDE) methods to deal with parabolic
PDEs. We employed the former method: PINNs are feed for-
ward neural networks that are trained to solve supervised learn-
ing tasks while respecting any given law of physics described
by general nonlinear partial differential equations. The resulting
neural networks form a new class of universal function approx-
imators that naturally encode any underlying physical laws as
prior information [20].

The underlying architecture can be summarized by the follow-
ing steps, with reference to Fig.3. Let’s put ourselves in the most
general case, where we want to ﬁnd n target functions [u1, ..., un]
which satisfy a system of n PDEs. We ﬁrst construct a surrogate
solution to u(x) as a neural network û(x;θ ) with n inputs and
outputs and parameters θ ; since a neural network is mathemat-
ically a composite function, the derivatives of û with respect to
its input can be evaluated by applying the chain rule for differen-
tiating compositions of functions using automatic differentiation

5

(AD). Then we need to deﬁne a loss function (we used the L2
norm) in order to calculate the discrepancy between [u1, ..., un]
and the outputs of the neural network: this is where we force our
network to satisfy the physics imposed by the PDEs. Indeed, the
loss is deﬁned by substituting our neural network and its deriva-
tives back into the equations we want to solve (where we brought
all the terms on the left-hand side of the equal sign). The last step
is to train the neural network to ﬁnd the best parameters by mini-
mizing the loss function with gradient-based optimizers, such as
Adam or LBFGS. It is straightforward that minimizing the loss
function means solving the equations, since we are approximat-
ing our target functions with û better and better. The key point
is that it converts an integration problem into a mere mini-
mization task and it does not need data to train, because it is
trained on the PDEs themselves.

G Model selection process that led us to this choice

Our aim from the beginning has been ﬁnding an ML alter-
native to standard numerical methods. However, we have ex-
plored different architectures within the ﬁeld of Scientiﬁc Ma-
chine Learning. We started our investigations using the DiffE-
qFlux.jl library [21], which deﬁnes and solves neural ordinary
differential equations (i.e. ODEs where a neural network deﬁnes
its derivative function), which are implemented in the follow-
ing way. First we need to get data from the numerical ODE
solver, then deﬁne a neural network with a NeuralODE layer,
which constructs a continuous-time recurrent neural network: at
a high level this corresponds to solving the differential equation
during the forward pass and using a second differential equation
that propagates the derivatives of the loss function backwards
in time. Now it’s possible to train the model using an optimizer
(ADAM or LBFGS) which minimizes the loss function. We have
consulted the library documentation and the GitHub resources
to implement some toy models with this approach, such as the
Lotka-Volterra equation, the 2D reaction diffusion equation, the
1D Fisher-KPP and the linear Burgers equation. Furthermore
we tried to go beyond these implementations: we solved the
reaction-diffusion equation with a Convolutional Neural Net-
work (CNN) to investigate peculiarities of a CNN with respect to
a common feed forward network in approximations of diffusive
models. When solving the Fisher-KPP we ran into a problem:
since the neural ODE approximates the derivative of the solu-
tion, after it is trained we have not reached the desired solution
yet; we still have to use a numerical solver. Following our initial
purpose, we chose to add a Recurrent Neural Network on top of
the NN + CNN architecture used in the ﬁrst step. Clearly this
model showed some relevant disadvantages:

• The predicted slices were very noisy, because the integrator
would have required a greater amount of data for training;

• The integrator tended to overﬁt during the training, getting a
model not applicable on other time scales and too problem-
speciﬁc.

Optimization problemSystem of PDEsVariablesx0x1xn...Target functionsu0u1un...Initial conditionsBoundary conditionsu0...unNeural Network  u (x i , θ) x0x1xn...u0u1un...DiscretizationθθTRAINING (LOSS MINIMIZATION)Automatic differentiationSubstitutionSubstitutionSubstitutionLoss functionθPINN∂2x1u1 + ∂2x2u1 + … - F1 = 0...∂2x1um + ∂2x2um + … - Fm = 0∂2x1u (t = 0) … – A = 0 ...   ∂2x1u (x1 = 0) … – A = 0 ...  This kind of issue made us lean towards the NeuralPDE
PINNs approach, that is our ultimate architecture, clearly de-
scribed in paragraph IV-D where the NN directly approximates
the objective function, without needing further integrations. Be-
fore attempting to model the complex PDEs inside WRF, we
characterized the quality of the architecture by running it on the
linearized Burger equation, non linear Burger equation without
viscosity, non linear Burger equation in the general form and the
Poisson equation in 2 dimensions.

H Implementation of the Level set

The level-set differential equation is, as previously explained,
the mathematical core for calculating the spread of the ﬁre. The
level set equation (that is a 2D surface embedded in a 3D eu-
clidean space) is initially set as the distance of each point from
the ignition’s line. In our approach it is required that every quan-
tity is provided either as a constant or as a function. Therefore
we implemented the initial condition as a cone with elliptical
section, because we had to deal with circular and linear ignition
shapes (theoretically, any ignition shape can be given in input).
The cone is then shifted down in order to make the contour level
z = 0 resembling the desired initial ﬁre line. Multiple ignition
points are possible, but further reﬁnements are needed to make
this possibility fully functional. The algorithm contains all the
necessary expressions for the calculation of the ﬁre spread rate,
taking into account the values of the wind, the altimetric pro-
ﬁle, the fuel map etc. These variables should be given in input
as differentiable vector ﬁelds of space and time. This can be
considered both a limit and an advantage, in fact on one hand
the discretized measurements must be ﬁtted using approximat-
ing functions, but on the other hand this method is very compu-
tationally efﬁcient. The possibility to give in input ﬁnite matrix
of values is presented in "Future Work" and depends on the fact
that some key libraries we use are still under development. You
can see in the appendix an example of the altimetric proﬁle of
the Isom Creek ﬁre location ﬁtted using a 4th degree polyno-
mial. The last step before the training of the model is a propor-
tional scaling of the values to a domain with size in the order
of 101 and the deﬁnition of a discretization that is used only to
run the training algorithm. The outputs will be continuous func-
tions. The discretization to this interval prevents some numer-
ical instabilities and spikes that are linked to the early stage of
development of some Julia libraries in use. The loss function is
made of two parts: the former minimizing the L2 error referred
to the PDE deﬁnition and the latter minimizing the L2 distance
between the boundary conditions and the solution evaluated at
the boundaries. At this point the training algorithm is instanti-
ated and launched. The minimization of the loss functions is the
process that actually solves the PDE and constitutes the main
load for the CPU. It can be easily parallelized and thus acceler-
ated using GPUs. When the training is completed the prediction
undergoes a new proportional scaling that gives back the original
domain shape.

6

I

Implementation of the Euler system

Writing and solving the 7-equation Euler system in Julia was
really challenging, in fact at the moment we are not aware of
any publications where these techniques are yet applied to PDE
systems of such complexity. The ﬁrst problem was to ﬁgure out
which were the independent and dependent variables.: it might
seem rather simple, but climate models adopt different conven-
tions depending on the circumstances (e.g., they generally use
pressure coordinates instead of height coordinates). That is why
we presented various Julia ﬁles, both with six and seven tar-
get functions, for reasons we cannot explain here for brevity.
Since the chain rule for derivatives hasn’t been implemented into
ModelingToolkit.jl yet, one of the most demanding operations
was writing all the derivatives involved by symbolic calculation.
Then we had to choose the most suitable training strategy, which
turned out to be QuadratureTraining. We have used parabolic
initial conditions for a ﬁrst evaluation, but we want to investi-
gate them more in depth, since the study of boundary conditions
often deserves a paper on its own. Unfortunately, the NeuralPDE
library is still unable to treat this kind of problem with stability,
and often incurs errors due to internal divergence calculations.
Despite this, we have been able to obtain convergence of the
loss function, although it is not enough to present valid results.
We contacted the authors of these libraries, that are still under
development, and we are looking forward to contributing.

J Optimization and coding

For the implementation of the model, we chose to rely on the
Julia programming language. Julia, despite being a very young
language with a huge amount of bugs and improvements still to
be implemented, compared to the more diffused Python, offers
better performance since it is not an interpreted language pro-
viding Just in Time (JIT) compilation with different optimiza-
tion levels [1]. Moreover, Julia is particularly well suited for
numerical computation and for the solution of complex physical
models, both considering the syntax and the presence of some
speciﬁc libraries such as DifferentialEquations.jl and Modelling-
Toolkit.jl.

The model was implemented using the low-level interface
of the NeuralPDE.jl
library which contains the necessary
methods for the generation of the training datasets and of the
loss functions starting from the explicit form of the equations
and the boundary conditions. This library allows some very
high level macros for the declaration of derivatives, functions
and parameters and allows you to choose the differentiation
techniques (numerical or automatic) and the optimization
engine to be used at a later time. The library relies in turn on
GalacticOptim.jl, which provides the methods for minimizing
the loss, and on ModelingToolkit.jl, which provides the con-
structors for the derivatives and on Flux.jl, which is the library
that implements the constructors of neural networks with the
respective backpropagation and prediction functions.

K Synthetic datasets - ideal simulations

The WRF source code includes some idealized simulations
that are used as a playground for the model: these simulations
are composed of an namelist.input ﬁle and an input_sounding
ﬁle. The former contains both data about the physics models
that should be used, as well as terrain information, to generate
the surface height mesh; the other is a standard way of storing
weather information, containing potential temperature, water va-
por mixing ratio, and U and V wind speed components values at
various pressure values.

We decided that it was best to start with an ideal simulation
to be able to control the response of the model, so we modiﬁed
the already present two_ﬁres test to ﬁt our needs, reducing the
number of ﬁres to one and increasing the simulation time to 60
minutes.

The terrain generated is completely ﬂat, and the entire domain
is covered in tall grass (Anderson fuel category 3 [22]). Since
the wind is entirely along the V component, we expect the ﬁre to
expand upwards.

L Real datasets - real simulations

In order to run a real data wildﬁre simulation in the WRF
model, static terrestrial data, atmospheric data and a map of
the 13 Anderson’s fuel category of the desires domain are re-
quired. The geographic global static data containing the manda-
tory ﬁelds requested are provided by the National Center for
Atmospheric Research (NCAR) website [23]; whereas an An-
derson 13 fuel categories [22] map and a high-resolution to-
pographic data (about 5 meters resolution) are provided by the
Landﬁre [24] site. Lastly, for our simulation we adopted histor-
ical meteorological ﬁelds from a Global Forecast System (GFS)
reanalysis, with a resolution of 0.25 degree and provided with a
6-hour time step. The latter are accessible in Grib2 format on
the Research Data Archive RDA of NCAR website [25].

All the datasets were appropriately pre-processed by the WRF
Pre-Processing System (WPS), which allows to deﬁne the simu-
lation domain. In addition, through a horizontal interpolation of
datasets, WPS provides the initial and boundary conditions that
will be used by the WRF model. For this work we carried out a
simulation of the Isom Creek ﬁre, Alaska (USA), [26] where the
ignition happened on 05 June 2020 at 03:15 PM and the progres-
sion lasted until 13 June, reaching an extension area of 12,180
acres (Fig.4).

Therefore, the center of the simulation domain has been ﬁxed
at the coordinates of the Isom Creek ﬁre ignition point (65.854;
-149.579). The chosen atmospheric domain is a mesh of 97x97
grids, each with a side of 100 m, while the 2D mesh of the ﬁre
domain is 20 times ﬁner, therefore with a resolution of 5 meters.
The extrapolation of the domain from the land-surface datasets
takes place by means of the geogrid.exe program in WPS, and
at this point occurs also the appropriate overlap between all the
input geographical data Fig.6 and Fig.7

By brieﬂy analyzing these datasets we found a few interest-

7

Fig. 4: Isom Creek Fire progression map

Fig. 5: Altimetric proﬁle interpolation of the Isom Creek ﬁre region.

Fig. 6: Comparison between global topological data and high
resolution data after geogrid.exe program run

ing facts. The most noticeable aspect is the fuel distribution: the
most abundant fuel is timber (category 10), followed by brush
(category 5) and closed timber litter (category 8). This fuel com-
position is wide-spread in this area and due to the presence of
timber it can lead to potential ﬁre control difﬁculties [22]. The

6/13/20206/12/20206/10/20206/09/20206/07/20206/06/2020DALTONHIGHWAYTrans Alaska PipelineTransAlaskaPipeline46454443414947514842524050Copyright:© 2013 National Geographic Society, i-cubed65°53.99'N65°53'N65°52'N65°51'N65°50'N65°49'N65°48'N65°53.99'N65°53'N65°52'N65°51'N65°50'N65°49'N65°48'N149°21.01'W149°22'W149°23'W149°24'W149°25'W149°26'W149°27'W149°28'W149°29'W149°30'W149°31'W149°32'W149°33'W149°34'W149°35'W149°36.01'W149°37'W149°38'W149°39'W149°40'W149°41'W149°42'W149°21.01'W149°22'W149°23'W149°24'W149°25'W149°26'W149°27'W149°28'W149°29'W149°30'W149°31'W149°32'W149°33'W149°34'W149°35'W149°36.01'W149°37'W149°38'W149°39'W149°40'W149°41'W149°42'W/00.511.50.25MilesFire Origin - 6/05/2020 3:19 pmErin Novakovich6/14/2020 1325Acres from IR and GPSNorth American 1983 Datum. LatLong Grid12024 acres at 1100 June 13, 2020Isom CreekAK UYD 000187June 14, 2020Progression Map6/06/202058.658.66/07/20201,535.21,476.66/09/20207,574.46,039.26/10/202010,379.42,8056/12/202011,665.31,285.96/13/202012,023.6358.3DateAcresGrowthInterpolation of the altimetric profile of the Isom Creek fire location  using polynomial 2D curve fitting - [meters]Optimization Algorithm
Iterations
Final Objective Value
Training Strategy
Domains

Training Mesh Size

Boundary Condition

Fig. 7: Overlap of the 13 Anderson’s categories map on the domain of
simulation after the geogrid.exe program run

Neural Network dimensions
Training Time

8

ADAM
4800
6.39 e-8
QuadratureTraining()
t ∈ [0, 10], x ∈ [0, 10],
y ∈ [0, 10]
[dt, dx, dy]
[0.17, 0.02, 0.02]
u(0, x, y, θ )
=
((5(x − 0.3))2 +
1
(0.15y)2)
2 − 0.2
3 > 16 > 1
647 s

=

presence of a river in the top part of the domain suggests that the
ﬁre will not spread here.

The mountainous topography of the area will also affect the
spread of the ﬁre, as the terrain gradient is part of the calculation
for the ﬁre spread rate.

ungrib.exe deals with the pre-processing of global atmo-
spheric dynamical data. Finally, the metgrid.exe program is re-
sponsible of the combination of meteorological data to the sim-
ulation domain.

Some attempts of simulations with a second ﬁner domain, in-
ner to the domain described above, have been made. The side
of the inner domain is a third of the outer domain, and the num-
ber of cells is also 97, therefore we obtained a domain of about
3 km with a resolution three times higher. From these tests we
obtained relatively valuable simulations, bearing in mind that for
larger simulations researchers set the beginning of the simulation
at least 12 hours before of the period of interest. However, we
preferred to come back to a single domain simulation in order
to speed up the run, paying the price in terms of a meteorologi-
cal simulation affected by boundary effects. Our ultimate Isom
Creek ﬁre simulation ran for 18 hours, starting from the 5th June
at 12:00 PM.

M Ideal simulation: "One ﬁre"

For clarity, we renamed the Two Fires ideal simulation as One
Fire, after having removed one ignition point. It is a simple case
that demonstrates that our model works well in case of ﬁres that
spread in ﬂat areas where the fuel doesn’t change. It also evolves
according to the wind direction, represented by a vector with two
components. The results at different time frames are represented
in Fig.8. The details about the architecture employed and the
training are listed in TABLE 2.

In order to provide a quantitative measure of the error between

TABLE 2: TECHNICAL SPECS OF THE MODEL - ONE FIRE

Fig. 8: Comparison between the WRF and PINNs outputs at different
time frames

the outputs we decided to use the Hausdorff distance [27],

(cid:40)

(cid:41)

dH(X,Y ) = max

sup
x∈X

inf
y∈Y

d(x, y), sup
y∈Y

inf
x∈X

d(x, y)

,

where X and Y are the ﬁrelines to be compared. This distance
is further normalized on the area of the curves that represent the
ﬁreline, as Fig.9 shows. The fact that the error decreases tells us
that as the area grows with time, the difference between the two
regions doesn’t increase, meaning that they evolve in synchrony
and with the same shape.

N Simulation of a real wildﬁre:

Isom Creek, Alaska,

6/5/2020

We have been able to simulate the Isom Creek ﬁre both with
WRF and with our implementation. Although it is not possi-
ble to perform a precise quantitative comparison between WRF
and the real data, or between our result and the real data (due to
a lack of temporal precision of the available data at [28]), it is

WRF model                  PINNs model9

Fig. 10: Comparison between the WRF and PINNs outputs at different
time frames

Fig. 9: Hausdorff distance as a measure of the error - One Fire.

clear that the WRF output simulates the wildﬁre accurately, at
least visually (see Fig.4). The result obtained with the PINN ar-
chitecture is shown in Fig.10. It is clear that our implementation
hasn’t been able to capture the shape of the ﬁreline with the same
accuracy. This will be pointed out below as a temporary limita-
tion to our model: at the moment it is not possible to assign a
different fuel category to each mesh point (i.e. using a matrix to
build a function), so the ﬁreline will always have a symmetrical
and smooth perimeter. The speciﬁcs of the architecture follow.

Optimization Algorithm
Iterations
Final Objective Value
Training Strategy
Domains

Training Mesh Size

Boundary Condition

Neural Network dimensions
Training Time

ADAM
3000
2.14 e-6
QuadratureTraining()
t ∈ [0, 10], x ∈ [0, 10],
y ∈ [0, 10]
[dt, dx, dy]
[0.17, 0.02, 0.02]
u(0, x, y)
=
((x − 5)2 + (0.7(y −
5))2)
3 > 16 > 1
270 s

1
2 − 0.2

=

TABLE 3: TECHNICAL SPECS OF THE MODEL

Fig. 11: Hausdorff distance as a measure of the error - Isom Creek.

also obtained some preliminary but unstable results regarding the
atmospheric coupling of the model by attempting to solve the
Flux-Form Euler system equation. The outputs obtained with
our approach don’t strictly follow the jagged ﬁrelines of WRF:
that’s not an intrinsic limit of the architecture, which doesn’t lack
variance even if it is rather simple; the reason is, as explained
above, that the inputs (fuel and wind in particular) we gave to
the NN are not varied enough, due to limitations of the library.
In spite of this we have shown the ability of our implementation
to reproduce the desired time evolution of the ﬁreline as given
by WRF.

The error can be quantitatively measured with the Hausdorff

distance as before, with the outcome plotted in Fig.11.

B Advantages of this architecture

The considerations outlined in the previous paragraph remain

The various advantages of this approach are:

valid here (see X for additional comparison plots).

IV DISCUSSION

A Discussion of the experimental results

The results exposed above show the feasibility of utilizing the
Julia NeuralPDE library to model a wildﬁre related differential
equation, i.e. the level set equation. As disclosed above, we have

• We can get a rough estimate of the speed up our model pro-
vides - compared to numerical solvers - by noting that the
train time is of some hundreds of seconds, while the WRF
run time is more than an hour. This point has to be further
studied: on one hand, we used a simpler set of inputs for the
reasons we will explain later; on the other hand we worked
on one of the eight cores at our disposal.

0123456Timestep0.0750.1000.1250.1500.1750.2000.2250.2500.275A-Norm Hausdorff DistanceArea-Normalized Hausdorff DistanceWRF model                  PINNs model0.02.55.07.510.012.515.017.5Time0.060.080.100.120.140.160.18A-Norm Hausdorff DistanceArea-Normalized Hausdorff Distance• While numerical methods only solve on the initial domain
range, this architecture learns the neural network parame-
ters that can be used to extend the predicted solution out-
side of the training domains (with a decrease in accuracy
if the extrapolation is extended too much). This can be used
for "forensic investigations": it is possible to reconstruct the
ignition point and the evolution of the ﬁreline from the ﬁnal
state of the wildﬁre.

• It is possible to interpolate the solution on a continuous

mesh.

• Modifying the equations of the model is as easy as chang-
ing a few lines of code, instead of re-implementing the dis-
cretization and perturbative form of the equations, allowing
for faster investigation of new models.

• Given the possibility to use several CPU cores, the speed
could increase even more and this approach could be run it-
eratively in order to simulate the outcome of different con-
tainment scenarios and choose the best among them.

• This architecture doesn’t need neural networks with a high
number of degrees of freedom to be accurate, reducing the
overall computational cost and increasing performance. In
quantitative terms, this means not exceeding some tens of
neurons on a single hidden layer.

• As a consequence, the model is more interpretable (it is less
similar to a complete black-box) and its users can run the
resulting simulator on standard PCs without needing high
performance machines.

• PINNs can be used to extrapolate physical laws once they
have been interpolated, hence providing a tool to reﬁne the-
oretical models. However, this requires a greater amount of
input data.

C Limitations

Let’s now analyze the limits of our approach:
• At the moment, it cannot be run on GPUs nor multiple
CPUs because the library we used is not fully developed
yet. We contacted the developers and they are working on
it.

• The library doesn’t support the usage of matrices as func-
tions of their indices. This means it is not possible to use a
variable fuel map, fundamental in order to capture the evo-
lution of the ﬁre with higher accuracy. We opened an issue
about this [29].

• Our approach suffers from numerical instability depending
on the training strategy adopted and on the number of neu-
rons and layers.

• The model only works on relatively small domains and is
unstable for larger ones. Therefore we had to scale down
all the quantities involved and introduce scale factors on
the ﬁre spread rate in order to make it compatible to the
evolution of the output of WRF.

10

• We still have to ﬁgure out how to predict the spread of a

wildﬁre with more than one ignition point.

• The architecture has not yet been extended to Convolutional
Neural Networks, Recurrent Neural Networks or others.

V FUTURE WORK

This research is the ﬁrst step towards a concrete implemen-
tation of PINNs-based wildﬁre simulation. We have designed a
chart (Fig.12) that shows the next improvements to be made in
order to achieve such a ambitious goal.

Fig. 12: Future prospect of our work

VI HARDWARE SUPPORT AND CODE

The implementation described in the previous paragraph is
based on the ML framework Flux.jl that is agnostic with respect
to the array type. This allows to also pass to this engine GPU
arrays (CUDA arrays) that are allocated and computed on GPUs
(General Purpose GPUs). For the development we used a work-
station with the following technical speciﬁcations:

• CPU: Intel Core i7 10700K 8 cores / 16 threads

• RAM: 64 GB DDR4 unbuffered

• GPU: Nvidia 2080 Ti 11 GB GDDR6
Unfortunately, the GPU interface of NeuralPDE.jl is not ma-

ture yet.

90 d•ProjectX2020: EVALUATING THE FEASIBILITY OF APINNS-BASED ARCHITECTURE40 d•IMPLEMENTING INPUT OF DISCRETIZED DATA (ARRAYS) IN NEURALPDE.JL30 d•FIXING STABILITY FOR LARGE DOMAINS60 d•FIXING BUGS IN THE CURRENT INTERFACE FOR GPUS•UPGRADING MULTITHREADING15 d•ENABLING THE MACROS OF MODELINKTOOLKIT.JL FOR DEFINITION OF NUMERICAL PROBLEM200 d•IMPLEMENTATION OF COUPLED WRF + SFIRE PHYSICS USING THE NEW ARCHITECTURE60 d•TEST PHASE ‘A’45 d•IMPLEMENTATION / INTERFACING FOR NON-GLOBAL MODULES30 d•NESTING AND SUBDOMAINS40 d•TEST PHASE 'B'80 d•WRAPPING AND EMBEDDING INSIDE THE WRF ARCHITECTURE OR DESIGN OF A NEW FRONTEND180 d•TEST PHASE ‘C'𝛼•ALPHA RELEASEAll the code produced is published on a public repository

range (−1, 0). An example is portrayed in Fig.13.

11

available at this link:
https://github.com/MachineLearningJournalClub/
MLJC-UniTo-ProjectX-2020-public.
The output of the WRF simulations can be found in the follow-
ing Google Drive folder:
https://drive.google.com/drive/folders/
1wUCKUyVwC0Pf-e9WlLiqOxRLF0or2D0U?usp=sharing
or https://tinyurl.com/mljc-unito-px2020.

VII SOCIETAL CONSEQUENCES

A The impact of real time simulations for containment

As previously mentioned, one of the most important aspects of
implementing a fast simulator is the possibility of employing it
in wildﬁre containment, as ﬁreﬁghters could simulate the possi-
ble outcomes for different strategies, therefore applying the best
one. At the moment WRF-SFIRE is not fast enough to be used
this way, but the ML approach shows promising results for such
an application. As of now, ﬁreﬁghters still struggle to predict
changes in ﬁre spread, as we observed even in the Isom Creek
ﬁre reports [30], which lead to the destruction of over 12,000
acres of forest, a huge economic cost, and the damage done to
an entire ecosystem. The usage of simulators with the character-
istics we outlined would have the ethical value of saving lives, on
top of saving huge amounts of money by reducing the targeted
area.

B Simulation of ﬁre propagation and climate change

A fast and reliable wildﬁre simulation can also be used to
simulate how wildﬁres might develop and worsen in different
climatic conditions, for example by reproducing the same ﬁre
in various scenarios. This can be done by changing some of
the input meteorological data, such as the temperature and the
radiative forcing (RF). Using predictions of how climate might
change due to global warming, the model could prove the impact
that this crisis might have on wildﬁres.

C Forensic investigation

A consequence of how boundary conditions are handled in our
model is that, provided the ﬁre shape in a certain instant, it would
be possible to extrapolate the ﬁreline in both "directions" of time.
There is usually very little information about the temporal evo-
lution of the ﬁre (especially in remote areas), so the ability to
extrapolate the shape of the spread backwards in time is crucial
to understand where and how the ﬁre started. These "forensic"
investigations can provide insights that are valuable for ﬁre pre-
vention and protection. Our model is able to do so without any
addition. The only requirement is that a "reasonable" level set is
deﬁned: as for the initial value problem, the level set equation
must be set such that it does not have too big or too small val-
ues. We suggest to keep it in the range (−20, 20), however this
is not necessary and is situation-dependent. It is very frequent
that the negative part of the level set equation is indeed in the

Fig. 13: Example of backward time prediction

VIII CONCLUSIONS

The study we carried out had the goal to investigate the ap-
plicability of the recently developed ﬁeld of Scientiﬁc Machine
Learning on climate, wildﬁre in particular, models. We have
outlined some results that tell us that many improvements are
needed in order to transform this into a validated product, but
also show the big potential of our approach. We need to add
further reﬁnements to the implementation in order to carry out
a precise time comparison between the two approaches, but the
results obtained thus far show promising evidence. The encour-
aging outcome inspires us to continue our work by improving
the architectures and possibly employ them in different ﬁelds
of research. We hope that this line of research will be consid-
ered as a starting point for a more effective cohesiveness between
Machine Learning and Physical Models in Climate Science, and
thus further explored by other researchers.

IX ACKNOWLEDGEMENTS

This work was presented at the ProjectX 2020 competition
by UofT AI. We acknowledge University of Turin, Machine
Learning Journal Club for supporting us. We thank Professor
Enrico Ferrero (Università del Piemonte Orientale), Professor
Massimiliano Manfrin (University of Turin) and the whole At-
mospheric Physics and Metereology Group, PhD Christopher
Rackauckas (Massachussets Institute of Technology), PhD Kir-
ill Zubov (Saint-Petesburg State University), Vaibhav Dixit (Ju-
lia Computing), PhD Brian Wee (Founder at Massive Connec-
tions), Dr. Rustem Arif Albayrak (NASA), PhD David Mar-
vin (CEO at Salo Sciences), Professor Piero Fariselli (Univer-
sity of Turin) and Pietro Monticone M.Sc. student (University
of Turin), for their precious help and availability. We acknowl-
edge the company Molliﬁcio Astigiano (Belveglio, Asti, Italy)
for providing the computational power needed for this research
and the HPC4AI center of the University of Turin for their sup-
port.

f (t = 10 s, x, y)  < Boundary conditionPrediction:f(t = 0 s, x, y)Propagation back in time according to the levelset equation (possible coupling with the atmospheric  model) Space domain [arbitrary units]X APPENDIX

12

Fig. 14: Perimeter-normalized Hausdorff distance as a measure of the
error between outputs - One Fire

Fig. 17: Time evolution of the perimeters of the ﬁrelines - Isom Creek

Fig. 15: Perimeter-normalized Hausdorff distance as a measure of the
error between outputs - Isom Creek

Fig. 18: Time evolution of the areas of the ﬁrelines - One Fire

Fig. 16: Time evolution of the perimeters of the ﬁrelines - One Fire

Fig. 19: Time evolution of the areas of the ﬁrelines - Isom Creek

0123456Timestep1.21.41.61.8P-Norm Hausdorff DistancePerimeter-Normalized Hausdorff Distance0.02.55.07.510.012.515.017.5Time1.41.61.82.02.22.42.62.8P-Norm Hausdorff DistancePerimeter-Normalized Hausdorff Distance0123456Timestep200250300350400PerimeterPerimeter Time EvolutionPINNWRF0.02.55.07.510.012.515.017.5Time200250300350400PerimeterPerimeter Time EvolutionPINNWRF0123456Timestep10002000300040005000AreaArea Time EvolutionPINNWRF0.02.55.07.510.012.515.017.5Time4000600080001000012000AreaArea Time EvolutionPINNWRF13

Fig. 20: Boundary condition comparison and training - One Fire

Fig. 21: Boundary condition comparison and training - Isom Creek

REFERENCES

[1] Miles Lubin and Iain Dunning. “Computing in Operations
Research Using Julia”. In: INFORMS Journal on Com-
puting 27.2 (Apr. 2015), pp. 238–248. DOI: 10 . 1287 /
ijoc.2014.0623. URL: https://doi.org/10.1287%
2Fijoc.2014.0623.

[2] Topher Gauk-Roger et al. “California wildﬁres: Fire chief
says dozens of major blazes have state in ’dire situation’”.
In: CNN (2020).

[3] Fire statistics, CALFIRE. URL: https://www.fire.ca.

gov/incidents/2020/.

[4] Marco Turco et al. “Climate change impacts on wildﬁres
in a Mediterranean environment”. In: Climatic Change
125.3-4 (July 2014), pp. 369–380. DOI: 10 . 1007 /
s10584- 014- 1183- 3. URL: https://doi.org/10.
1007/s10584-014-1183-3.

[5] David M. Romps et al. “Projected increase in lightning
strikes in the United States due to global warming”. In:
Science 346.6211 (2014), pp. 851–854. ISSN: 0036-8075.
DOI: 10 . 1126 / science . 1259100. eprint: https : / /
science.sciencemag.org/content/346/6211/851.
full.pdf. URL: https://science.sciencemag.org/
content/346/6211/851.

[6] Alejandra Borunda. The science connecting wild-
ﬁres to climate change. URL: https : / / www .
nationalgeographic . com / science / 2020 / 09 /
climate-change-increases-risk-fires-western-
us/.

[7]

Impacts, Risks, and Adaptation in the United States: The
Fourth National Climate Assessment, Volume II. Tech.
rep. 2018. DOI: 10 . 7930 / nca4 . 2018. URL: https :
//doi.org/10.7930/nca4.2018.

the

[8] Bruce Lieberman. Wildﬁres and climate

change:
/
/
:
What’s
yaleclimateconnections . org / 2019 / 07 /
wildfires - and - climate - change - whats - the -
connection.

connection?

https

URL:

[9] Christopher Rackauckas et al. “Universal differential
equations for scientiﬁc machine learning”. In: arXiv
preprint arXiv:2001.04385 (2020).

[10] Vˇera K˚urková. “Kolmogorov’s theorem and multilayer
neural networks”. In: Neural Networks 5 (3 1992). DOI:
10.1016/0893-6080(92)90012-8. URL: http://gen.
lib.rus.ec/scimag/index.php?s=10.1016/0893-
6080(92)90012-8.

[11] Yu Li et al. “Deep learning in bioinformatics: Introduc-
tion, application, and perspective in the big data era”. In:
Methods 166 (2019), pp. 4–21.

14

[12] Luca Cenci et al. “Deﬁning a Trade-off Between Spatial
and Temporal Resolution of a Geosynchronous SAR Mis-
sion for Soil Moisture Monitoring”. In: Remote Sensing
10.12 (Dec. 2018), p. 1950. ISSN: 2072-4292. DOI: 10.
3390 / rs10121950. URL: http : / / dx . doi . org / 10 .
3390/rs10121950.

[13] Maziar Raissi, Paris Perdikaris, and George E Karni-
adakis. “Physics-informed neural networks: A deep learn-
ing framework for solving forward and inverse problems
involving nonlinear partial differential equations”. In:
Journal of Computational Physics 378 (2019), pp. 686–
707.

[14] Philipp Grohs, Arnulf Jentzen, and Diyora Salimova.
Deep neural network approximations for Monte Carlo al-
gorithms. 2019. arXiv: 1908.10828 [math.NA].

[15] T. Gleixner and I. Molnar. perf Wiki Homepage. https:

//perf.wiki.kernel.org/index.php/Main_Page.

[16] User’s Guides for the Advanced Research WRF (ARW)
Modeling System, Version 4. URL: https://www2.mmm.
ucar . edu / wrf / users / docs / user _ guide _ v4 /
contents.html.

[17] William C. Skamarock et al. A Description of the Ad-
vanced Research WRF Model Version 4. en. 2019. DOI:
10 . 5065 / 1DFH - 6P97. URL: http : / / n2t . net / ark :
/85065/d72r3vrp.

[18]

J. Mandel, J. D. Beezley, and A. K. Kochanski. “Coupled
atmosphere-wildland ﬁre modeling with WRF 3.3 and
SFIRE 2011”. In: Geoscientiﬁc Model Development 4.3
(2011), pp. 591–610. DOI: 10.5194/gmd-4-591-2011.
URL: https://gmd.copernicus.org/articles/4/
591/2011/.

[19] Richard C. Rothermel. “A Mathematical Model for Pre-
dicting Fire Spread in Wildland Fires”. In: USDA Forest
Service Research Paper INT-115 (1972). URL: http://
www.treesearch.fs.fed.us/pubs/%2032533.

[20] Kirill Zubov. Physics-informed neural networks (PINNs)
solver on Julia. GSoC 2020. First evaluation. 2020.
URL: https : / / nextjournal . com / kirill _
zubov / physics - informed - neural - networks -
pinns - solvers - on - julia - gsoc - 2020 - first -
evaluations.

[21] Christopher Rackauckas et al. “DiffEqFlux.jl - A Ju-
lia Library for Neural Differential Equations”. In: CoRR
abs/1902.02376 (2019). arXiv: 1902.02376. URL: http:
//arxiv.org/abs/1902.02376.

[22] Hal E. Anderson. Aids to determining fuel models for es-
timating ﬁre behavior. Tech. rep. 1982. DOI: 10.2737/
int-gtr-122. URL: https://doi.org/10.2737/int-
gtr-122.

15

[23] WPS V4 Geographical Static Data. URL: https://www2.
mmm.ucar.edu/wrf/users/download/get_sources_
wps_geog.html.

[24] Landscape Fire and Resource Management Planning

Tools (LANDFIRE). URL: https://landfire.gov/.

[25] NCEP GFS 0.25 Degree Global Forecast Grids Historical
Archive. URL: https : / / rda . ucar . edu / datasets /
ds084.1/.

[26]

Isom Creek Fire Information. URL: https://inciweb.
nwcg.gov/incident/6758.

[27] Christian Knauer et al. The directed Hausdorff distance
between imprecise point sets. 2009. arXiv: 0909 . 4642
[cs.CG].

[28]

Isom Creek Fire Progression Map. URL: https : / /
inciweb.nwcg.gov/incident/map/6758/7/98095.

[29] Embedding arrays into NeuralPDE differential equations.
URL: https://github.com/SciML/NeuralPDE.jl/
issues/177.

[30] AK Fire Info - Isom Creek Fire Reports. URL: https :
//akfireinfo.com/tag/isom-creek-fire/.

