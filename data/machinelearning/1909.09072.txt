Learning Optimal and Near-Optimal Lexicographic Preference Lists

Ahmed Moussa
School of Computing
University of North Florida
Jacksonville, FL
nagar@aucegypt.edu

Xudong Liu
School of Computing
University of North Florida
Jacksonville, FL
xudong.liu@unf.edu

9
1
0
2

p
e
S
9
1

]
I

A
.
s
c
[

1
v
2
7
0
9
0
.
9
0
9
1
:
v
i
X
r
a

Abstract

We consider learning problems of an intuitive and concise
preference model, called lexicographic preference lists (LP-
lists). Given a set of examples that are pairwise ordinal pref-
erences over a universe of objects built of attributes of dis-
crete values, we want to learn (1) an optimal LP-list that de-
cides the maximum number of these examples, or (2) a near-
optimal LP-list that decides as many examples as it can. To
this end, we introduce a dynamic programming based algo-
rithm and a genetic algorithm for these two learning prob-
lems, respectively. Furthermore, we empirically demonstrate
that the sub-optimal models computed by the genetic algo-
rithm very well approximate the de facto optimal models
computed by our dynamic programming based algorithm, and
that the genetic algorithm outperforms the baseline greedy
heuristic with higher accuracy predicting new preferences.

Introduction
Preferences are ubiquitous and important to research ﬁelds
such as recommender systems, decision making and social
sciences. In this work, we study preference relations of ob-
jects that are combinations of values in discrete attributes.
Preference relations vary and the research community has
seen promising preference models such as graphical mod-
els such as conditional preference networks (Boutilier et al.
2004), lexicographic preference trees (Booth et al. 2010;
Liu and Truszczynski 2013; Liu and Truszczynski 2015),
and lexicographic preference (Liu and Truszczynski 2016;
Liu and Truszczynski 2018), and logical models such as
penalty logic (De Saint-Cyr, Lang, and Schiex 1994), pos-
sibilistic logic (Dubois, Lang, and Prade 1994), and answer
set optimization (Brewka, Niemel¨a, and Truszczynski 2003).
We focus on a particular lexicographic preference model,
called lexicographic preference lists, or LP-lists for short, an
intuitive and concise model describing the importance order-
ing of the attributes and the preference orderings of the val-
ues in the attributes (Fishburn 1974). In particular, we exam-
ine the learning problem of LP-lists for a given description
of the set of objects and a given set of examples. This prob-
lem is considered in two settings: learning the LP-lists that
agree with the maximum, or close to the maximum, number
of examples.

Copyright © 2019, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

Learning optimal LP-lists with maximum number of sat-
isﬁed examples has been proven NP-hard (Schmitt and Mar-
tignon 2006; Liu and Truszczynski 2015). In this paper,
we introduce a dynamic programming based approach that
learns optimal LP-lists in exponential time in the number of
attributes and the size of attribute domains. Despite this ex-
ponentiality, it is a considerable reduction from the factorial
time complexity of the brute force algorithm that checks ev-
ery ordering of attributes and every preference order within
each attribute domain. We show the optimality of our al-
gorithm, and present experimental results demonstrating its
effectiveness for large domains of objects.

Algorithms to learning near-optimal LP-lists have been
proposed in the literature, including the greedy heuristic al-
gorithm (Liu and Truszczynski 2018). Local search algo-
rithms have been used to learn other preference models,
e.g., tree-structured conditional preference networks (Allen,
Siler, and Goldsmith 2017). To the best of our knowledge,
learning algorithms based on local search techniques have
not been applied to learning LP-lists. In this paper, we pro-
pose to learn near-optimal LP-lists using a genetic algo-
rithm (Mitchell 1998), one of the promising local search
algorithms, where LP-lists are straightforward represented
as chromosome strings. We conduct empirical evaluation of
our genetic algorithm and compare it with the greedy heuris-
tic and our optimal algorithm. Our results suggest that the
genetic algorithm performs very close to our optimal algo-
rithm and outperforms the greedy heuristic by a margin.

In the following, we ﬁrst formally deﬁne what LP-lists
are. We then present our optimal algorithm using dynamic
programming, as well as our near-optimal genetic algorithm.
We will discuss our experimental results before we conclude
and point to future work.

Lexicographic Preference Lists
Let us denote by A = {X1, . . . , Xn} a ﬁnite set of at-
tributes. Each attribute Xi ∈ A has a ﬁnite domain Di of
values such that Di = {xi,1, . . . , xi,m1}. The universe UA
deﬁned by A is the Cartesian product of the attribute do-
mains D1 × . . . × Dn. We call elements in UA objects. A
lexicographic preference list (LP-list) over A is a list of at-
tributes in A, each labeled by a total order over that attribute
domain. Attributes in a LP-list are distinct and a subset of
A.

 
 
 
 
 
 
Let L = Xi1 (cid:46) . . . (cid:46) Xip be an LP-list over A, and o and
o(cid:48) two objects in UA. We say that o is at least as good as o(cid:48)
in L, denoted o (cid:23)L o(cid:48), if (1) o(X) = o(cid:48)(X) for all X ∈ A,
or (2) there is ij ∈ [i1, ip] such that o(Xij ) (cid:31) o(cid:48)(Xij ) and
o(Xq) = o(cid:48)(Xq) for all q ∈ [i1, ij). Then, we say that o
is strictly preferred to o(cid:48), denoted o (cid:31)L o(cid:48), if o (cid:23)L o(cid:48) and
o(cid:48) (cid:54)(cid:23)L o, and that o is equivalent to o(cid:48), denoted o ≈L o(cid:48), if
o (cid:23)L o(cid:48) and o(cid:48) (cid:23)L o.

Accordingly, given two objects o and o, and an LP-list L,
objects can be compared by an LP-list as follows. For each
attribute Xij in L, starting from the ﬁrst one, we check if o
has a better (or worse) value on Xij than o(cid:48). If so, we stop
and report o (cid:31)L o(cid:48) (o(cid:48) (cid:31)L o, resp.). Otherwise, o and o(cid:48)
having same value on Xij , we continue to the next attribute.
If we ﬁnish having checked all attributes, we stop and report
o ≈L o(cid:48). Therefore, this task is done in linear time in the
size of the input.

Consider a universe of vehicles of four attributes: Body-
Type (B) with values sedan (s) and truck (t), Color (C) with
black (k), white (w) and blue (b), Make (M ) with Toyota (t)
and Chevrolet (c), and Price (P ) with low (l), medium (m)
and high (h). An LP-list can be B(cid:46)M (cid:46)C, where B is labeled
by s (cid:31) t, M by t (cid:31) c, and C by w (cid:31) b (cid:31) k. According to
this LP-list, we see that a medium-priced blue Toyota sedan
is preferred to a low-priced white Chevrolet sedan, and two
differently priced black Chevrolet trucks are equivalent.

Dynamic Programming Algorithm
Given a set E of examples and an attribute X ∈ A, we want
to compute the optimal local preference ordering of X, de-
noted LP O(X), that satisﬁes the maximum number of ex-
amples in E just by X alone.

From E we ﬁrst build a matrix M where Mi,j denotes the
number of examples in E that prefer i to j on attribute X.
Examples with same value of X in both are not counted
in M , so that Mi,j = 0 if i = j. This ﬁrst step takes
O(|Dom(X)|2) both space and time. Then, we use M to
compute the LP O(X) as follows.

Let S ⊆ Dom(X) be a subset of the domain of X, where
|S| > 1. We denote by C(S, E) the maximum number of
examples in E that can be satisﬁed by any total order on S.
Thus, we have the following.

C(S, E) =






max
i,j∈S
max
i∈S

{Mi,j, Mj,i}
{C(S − {i}, E) + (cid:80)

if |S| = 2

Mj,i}

if |S| > 2

j∈S−{i}

Therefore, LP O(X) is the total order on X that satisﬁes
C(Dom(X), E) examples in E. Both LP O(X) and E are
computed using the following procedure in Algorithm 1,
a dynamic programming based procedure recording calcu-
lated results in tables T and L.

We now analyze the space and time complexity of Algo-
rithm 1 as follows. The space complexity results from the
matrix M , and tables L and T . Let x = |Dom(X)| be the
number of values in X’s domain, and m the number of ex-
amples in E. Then, space complexity is O((2x) · x
2 + x2 +
2x) = O(x·2x). This asymptotic prohibitive space is accept-

Algorithm 1: computeLPO(E, X) % computes LPO
for an attribute for given examples
Input: E is the set of example, and X ∈ A is an

attribute in A

Output: LP O(X)

1 Procedure computeLPO(E, X):
2

Create an empty table L s.t. L[U ] is an empty list
for every U ⊂ Dom(X);
Create matrix M as described earlier;
Create an empty table T s.t. T [U ] = 0 for every
U ⊂ Dom(X);
Set T [U ] and L[U ] for |U | = 2 according to above
formula;
for i ← 3 to |Dom(X)| do

foreach S ⊂ Dom(X) s.t. |S| = i do
Mj,i};

{T (S − {i}) + (cid:80)

T [S] ← max
i∈S

j∈S−{i}

L[S] ←

arg max
(L[S−{i}],i):i∈S

{T (S − {i}) + (cid:80)

j∈S−{i}

Mj,i};

end

end
return L[Dom(X)];

3

4

5

6

7
8

9

10

11

12

able, if the size of the attribute’s domain is relatively small,
often the case in practice.

To calculate the time complexity, we examine the algo-
rithm closely. We assume structures M , T , and L are con-
stant time accessible. Lines 2 to 5 take time O(2x +m+2x +
(cid:1)), respectively. The loop from line 6 to line 11 considers
(cid:0)x
2
all subsets S ⊂ Dom(X) and |S| ≥ 3, for each of which
T [S] and L[S] are computed. Each takes time O(|S| · |S|).
|S|2). Then, we
So this loop takes time O(

(cid:80)

have

(cid:80)

S⊂Dom(X)∧|S|≥3

S⊂Dom(X)∧|S|≥3

|S|2 = (cid:0)x

(cid:1) · 32 + . . . + (cid:0)x

(cid:1) · x2 ≤

x

3

3

x

(cid:1) + . . . + (cid:0)x

((cid:0)x
(cid:1)) · x2 ≤ 2x · x2. Therefore, the time com-
plexity of Algorithm 1 is O(m + x2 · 2x). This is a clear
reduction from the factorial performance of the brute-force
approach that checks all permutations of Dom(X).

Let us denote by Attr(T ) the set of attributes in A labeling
the nodes in LPL T , by α|T the partial obtained from object
α restricted to attributes showing up in T . Then, we deﬁne
E|T = {(α|T , β|T ) : (α, β) ∈ E and α|T (cid:54)= β|T } to be the
multi-set of examples obtained from E restricted to attributes
showing up in T .

We say an LPL is optimal to E if it satisﬁes the maximum
number of examples in E. Inspired by the Held-Karp algo-
rithm (Held and Karp 1962), we see that, if an LPL T is
optimal to E, then every T ’s subtree T (cid:48) rooted at r is opti-
mal to E|T (cid:48). Clearly, this property is true because, were the
subtree T (cid:48) to be not optimal, T could be changed to satisfy
more examples by altering the order of Attr(T (cid:48)) in T (cid:48).

We devise the Algorithm 2 to learn optimal lexicographic
preference lists. It is brute-force enhanced by memorizing
the optimal subtrees for all subsets of A.

Let us consider the space and time complexities of Algo-
rithm 2. We let n = |A| be the number of attributes, and
¯x = max{|Dom(X)| : X ∈ A} the maximum attribute do-

Algorithm 2: computeLPL(E, A) % computes optimal
LPL for given examples
Input: E is the set of example, and A is the set of

attributes

Output: LP L

1 Procedure computeLPL(E, A):
2

Create an empty table T s.t. T [U ] = 0 for every
U ⊂ A;
Create an empty table L s.t. L[U ] is an empty list
for every U ⊂ A;
Set T [U ] and L[U ] for |U | = 1 using computeLPO
in Algorithm 1;
for i ← 2 to |A| do

foreach S ⊂ A s.t. |S| = i do

T [S] ← max
X∈S

{T (S − {X}) + C(Dom(X), {(α, β) ∈ E :

α(Y ) = β(Y ) for all Y ∈ S − {X}})};

L[S] ←

arg max
(L[S−{X}],computeLP O(X)):X∈S
{X}) + C(Dom(X), {(α, β) ∈ E : α(Y ) =
β(Y ) for all Y ∈ S − {X}})};

{T (S −

end

end
return L[A];

3

4

5

6
7

8

9

10

11

main size. As with the space complexity, the algorithm uses
tables T and L, and the space designated by the calls to Al-
(cid:1) · i · ¯x ≤
gorithm 1. The size of L is bounded by (cid:80)
(cid:1) = n· ¯x·2n. This gives us a space complexity

n· ¯x· (cid:80)

0≤i≤n

(cid:0)n
i

(cid:0)n
i

0≤i≤n

of O(2n + n · ¯x · 2n + ¯x · 2¯x), which is O(n · ¯x · 2n + ¯x · 2¯x).
Lines 2 to 4 take time O(2n + 2n + n · (m + ¯x2 · 2¯x))
respectively. The loop from line 5 to line 10 takes time
|S|·(m+ ¯x2 ·2¯x). Therefore, the time complexity

(cid:80)

S⊂A∧|S|≥2
of Algorithm 2 is O(2n + 2n + n · (m + ¯x2 · 2¯x) + (m + ¯x2 ·
2¯x) · 2n · n), which is O((m + ¯x2 · 2¯x) · 2n · n).

Genetic Algorithm
The idea of the genetic algorithm is inspired from the natural
selection theory in biology. Generally, the population’s ﬁt-
ness will increase until a steady state. In such steady state, no
improvement can be done once the population has reached
this stable state. This state could contain a global or local
optimal solution.

Each candidate solution or chromosome is composed of
many traits, features, attributes, or simply “genes” with each
gene being one value or “allele”. For our learning problem
of LP-lists, chromosomes are encoded as follows a string
of attributes and values in their domains, where upper-case
letters represent attributes and lower-case letters represent
values the attributes can be of. Taking the previous example
of the LP-list in the cars domain: B (cid:46) M (cid:46) C with the same
local preference orderings. Its chromosome representation
clearly is “Bst Mtc Cwbk”.

Using the ﬁtness function that returns the number of cor-
rectly classiﬁed examples by the LP-list, we devise the ge-
netic algorithm as follows. Step 1: create 100 random LP-

list as initial chromosomes. Step 2: select the top 50 chro-
mosomes overall according to the ﬁtness function and let
them produce two children by crossover and mutation re-
spectively. Step 2 is repeated for 100 generations before ter-
mination. In step 2, crossover is achieved by shufﬂing the
ordering of the attributes in the chromosomes, and mutation
by shufﬂing the ordering of values of a randomly chosen at-
tribute.

Results
In this section, we present our empirical analysis of our two
algorithm: the dynamic programming based algorithm, for
which we call DPA, and the genetic algorithm, which we
short-hand to GA.

To evaluate our algorithms DPA and GA, we take the
greedy algorithm as a baseline and perform empirical analy-
sis on sets of examples given by hidden randomly generated
LP-lists. The examples are produced with a noise percentage
of examples that are ﬂipped to create inconsistent examples
to simulate practical settings.

2

Domains of 10 attributes, each of 5 values, are used for
our experiments. Thus, the universe contains 510 objects,
giving (cid:0)510
(cid:1) ≈ 5×1013 possible examples. We ﬁrst generate
a random LP-list of these attributes with random orderings
as their local preferences, and a set D of random examples
for training and testing. Then, set D is processed based on a
noise percentage N : |D|·N examples are randomly selected
and ﬂipped. We reserve 80% of D to train an LP-list model
and the other 20% to test it. Our experiments are for N of
value 15%, and for D of size 103, 104, . . . , 106. The instance
for every D is repeated 5 times and the average accuracies
and computational time are reported as follows.

Figure 1: Testing accuracy

We see, in Figure 1, that DPA obtains the highest accuracy
on the testing examples. GA ﬁnishes as a very close second,
within 1% compared to DPA. Greedy ﬁnishes last. We at-
tribute this to the fact that our GA’s stochastic beaming start
with multiple LP-lists and generations of improvements of
them.

G.;
2003. Answer set

[Booth et al., 2010] Booth, R.; Chevaleyre, Y.; Lang, J.;
Mengin, J.; and Sombattheera, C. 2010. Learning condition-
ally lexicographic preference relations. In ECAI, 269–274.
[Boutilier et al., 2004] Boutilier, C.; Brafman, R.; Domsh-
lak, C.; Hoos, H.; and Poole, D. 2004. CP-nets: A tool for
representing and reasoning with conditional ceteris paribus
preference statements. Journal of Artiﬁcial Intelligence Re-
search 21:135–191.
[Brewka, Niemel¨a, and Truszczynski, 2003] Brewka,
Niemel¨a, I.; and Truszczynski, M.
optimization. In IJCAI, volume 3, 867–872.
[De Saint-Cyr, Lang, and Schiex, 1994] De Saint-Cyr, F. D.;
Lang, J.; and Schiex, T. 1994. Penalty logic and its link with
dempster-shafer theory. In Uncertainty Proceedings 1994.
Elsevier. 204–211.
[Dubois, Lang, and Prade, 1994] Dubois, D.; Lang, J.; and
Prade, H. 1994. Possibilistic logic 1.
[Fishburn, 1974] Fishburn, P. C. 1974. Exceptional paper-
lexicographic orders, utilities and decision rules: A survey.
Management science 20(11):1442–1471.
[Held and Karp, 1962] Held, M., and Karp, R. M. 1962. A
dynamic programming approach to sequencing problems.
Journal of the Society for Industrial and Applied Mathemat-
ics 10(1):196–210.
[Liu and Truszczynski, 2013] Liu, X., and Truszczynski, M.
Aggregating conditionally lexicographic prefer-
2013.
In Interna-
ences using answer set programming solvers.
tional Conference on Algorithmic Decision Theory, 244–
258. Springer.
[Liu and Truszczynski, 2015] Liu, X., and Truszczynski, M.
2015. Learning partial lexicographic preference trees over
In Proceedings of the 29th AAAI
combinatorial domains.
Conference on Artiﬁcial Intelligence (AAAI), 1539–1545.
AAAI Press.
[Liu and Truszczynski, 2016] Liu, X., and Truszczynski, M.
2016. Learning partial lexicographic preference trees and
forests over multi-valued attributes. In the 2nd Global Con-
ference on Artiﬁcial Intelligence, EPiC Series in Computing,
314–328. EasyChair.
[Liu and Truszczynski, 2018] Liu, X., and Truszczynski, M.
2018. Preference learning and optimization for partial lexi-
cographic preference forests over combinatorial domains. In
Proceedings of the 10th International Symposium on Foun-
dations of Information and Knowledge Systems (FoIKS).
Springer.
[Mitchell, 1998] Mitchell, M. 1998. An introduction to ge-
netic algorithms. MIT press.
[Schmitt and Martignon, 2006] Schmitt, M., and Martignon,
L. 2006. On the complexity of learning lexicographic strate-
gies. Journal of Machine Learning Research 7(Jan):55–83.

Figure 2: Computational time

Figure 2 shows the total computational time, including
both training and testing, for various training data sizes.
Clearly, DPA, despite of its exponential time complexity,
outperforms GA on all datasets. This is because the compu-
tational time of GA accumulates over generations. Greedy
takes the least amount of time until the size of the training
set picks up to very large. This is attributed to the larger con-
stant in the asymptotic notion of Greedy than that of DPA.
GA takes the most time as it goes through generations of the
selecting processes.

Conclusion and Future Work
We studied the learning problems of LP-lists, a preference
formalism that is intuitive and concise over objects consist-
ing of categorical attributes. We introduced an algorithm
DPA that computes optimal LP-lists that decide the most
number of given examples. DPA is based on dynamic pro-
gramming, and it reduces the factorial time complexity of
the pure brute force algorithm to exponential, at a cost of
exponential space. Besides, we introduced a genetic algo-
rithm GA for computing near-optimal LP-lists that satisfy
as many given examples as it can. To evaluate our algo-
rithms, we conducted substantial experiments showing that,
for large example sets of sizes up to 10 million over the uni-
verse of over 9 million objects, DPA outperforms GA and
baseline Greedy in both testing accuracy and computational
time, with GA being a very close second in accuracy. For
future work, we plan to perform experimental studies on
preferential data generated from real-world datasets such as
classiﬁcation and regression datasets in the machine learn-
ing community. We also intend to extend our algorithms to
allow learning more general lexicographic preference mod-
els (Liu and Truszczynski 2015).

References
[Allen, Siler, and Goldsmith, 2017] Allen, T. E.; Siler, C.;
2017. Learning tree-structured cp-
and Goldsmith, J.
nets with local search. In Proceedings of the International
Florida Artiﬁcial Intelligence Research Society Conference.

