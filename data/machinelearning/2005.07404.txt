0
2
0
2

y
a
M
5
1

]
I

A
.
s
c
[

1
v
4
0
4
7
0
.
5
0
0
2
:
v
i
X
r
a

Think Too Fast Nor Too Slow:
The Computational Trade-off Between Planning And Reinforcement Learning

Thomas M. Moerland1,2∗ , Anna Deichler1,4∗ , Simone Baldi3,4 , Joost Broekens2 and
Catholijn M. Jonker1,2
1Interactive Intelligence, TU Delft, The Netherlands
2Leiden Institute of Advanced Computer Science, Leiden University, The Netherlands
3School of Cyberscience and Engineering, Southeast University, China
4Delft Center for Systems and Control, TU Delft, The Netherlands
T.M.Moerland@tudelft.nl

Abstract

Planning and reinforcement learning are two key
approaches to sequential decision making. Multi-
step approximate real-time dynamic programming,
a recently successful algorithm class of which Al-
phaZero [Silver et al., 2018] is an example, com-
bines both by nesting planning within a learning
loop. However, the combination of planning and
learning introduces a new question: how should we
balance time spend on planning, learning and act-
ing? The importance of this trade-off has not been
explicitly studied before. We show that it is actu-
ally of key importance, with computational results
indicating that we should neither plan too long nor
too short. Conceptually, we identify a new spec-
trum of planning-learning algorithms which ranges
from exhaustive search (long planning) to model-
free RL (no planning), with optimal performance
achieved midway.

1 Introduction

commonly formalized as
Sequential decision-making,
Markov Decision Process (MDP) optimization,
is a key
challenge in artiﬁcial intelligence (AI) and machine learning
research.
Important solution approaches include planning
(or search) [Russell and Norvig, 2016] and reinforcement
learning [Sutton and Barto, 2018]. Recently, a class of
algorithms, known as multi-step approximate real-time
dynamic programming (MSA-RTDP),
combines both
ﬁelds. MSA-RTDP iterates planning, which uses a learned
value/policy function, and learning, which uses output from
the planning procedure. A successful example in this class
is the AlphaZero algorithm, which achieved super-human
performance in the game of Go, Chess, and Shogi [Silver et
al., 2017, 2018].

This iterated planning and learning procedure introduces a
crucial new question: how long should we plan at a given
state? We hypothesize that this is a crucial trade-off for
planning-learning integrations: when we plan too extensively,

∗Authors contributed equally.

we make too little progress in the domain and have less train-
ing targets for learning, while when we plan too brieﬂy, our
local decisions and training targets are likely to be less op-
timal. This trade-off was never present in online planning,
where the budget per real step is typically as high as the appli-
cation permits (in the order of milliseconds for a video game,
or in the order of seconds to minutes for a game of Chess
[Campbell et al., 2002]). It was neither present in model-free
reinforcement learning (RL), since those approaches do not
have access to a dynamics model and can therefore not plan.
Model-based RL, where we use observed data to approximate
the dynamics model, has mostly focused on dealing with en-
hancing data efﬁciency and dealing with uncertainty in the
learned models [Sutton, 1991; Chua et al., 2018]. Instead, we
focus on the situation with a known, perfect model without
uncertainty, to fully investigate the trade-off between plan-
ning and learning once a good model is available.

We therefore study the AlphaZero algorithm on several
known tasks, where we ﬁx the overall computational bud-
get, but vary the planning budget per real step and associated
training iteration. Our results show that, for a ﬁxed over-
all time budget, approaches with an intermediate planning
budget per time-step achieve the highest ﬁnal performance.
First, this is an important empirical insight for model-based
reinforcement learning and MSA-RTDP algorithms. More-
over, the fundamental mutual beneﬁt of planning and learn-
ing, which outperforms their isolated application, may also
provide an argument for the existence of fast prediction (Sys-
tem 1) and explicit planning (System 2) in human decision
making. This theory, better known as dual process theory
[Evans, 1984], was more recently popularized as ‘thinking
fast and slow’ [Kahneman, 2011]. A short summary of our
results could be: ‘think too fast nor too slow’.

The remainder of this paper is organized as follows. Sec-
tion 2 provides essential background on Markov Decision
Process optimization, while Section 3 introduces the algo-
rithm class of interest, multi-step approximate real-time dy-
namic programming. Section 4 and 5 detail methodology
and results, respectively. The ﬁnal sections cover Related
work (Sec. 6), Discussion (Sec. 7) and Conclusion (Sec.
8). Code to replicate experiments is available from https:
// github.com/ ratponto/ tree-rl-adaptive.

 
 
 
 
 
 
2 Preliminaries
We study the Markov Decision Process (MDP) [Puterman,
2014] optimization problem. An MDP is deﬁned by a state
space S, an action space A, a transition function T : S ×A →
p(S), a reward function R : S × A × S → R, an initial state
distribution p(s0) and a discount parameter γ ∈ [0, 1].

We can interact with the environment through a policy
π : S → p(A). After specifying an action at in state st,
the environment returns a next state st+1 ∼ T (·|st, at) and
associated reward rt = R(st, at, st+1). We are interested in
ﬁnding the policy that gives the highest cumulative pay-off.
Deﬁne the state-action value as:

Q(s, a) ˙=Eπ,T

(cid:34) K
(cid:88)

k=0

γkrt+k

(cid:12)
(cid:12)
(cid:12)st = s, at = a

(cid:35)

(1)

and V (s) = Ea∼π(·|s)[Q(s, a)]. There is only one optimal
value function Q(cid:63)(s, a) [Sutton and Barto, 2018], and our
goal is to ﬁnd an optimal policy π(cid:63) that achieves the optimal
value:

π(cid:63) = arg max

Q(s, a).

π

(2)

The possible approaches to this problem crucially rely on
our type of access to the environment dynamics T and reward
function R. In model-free reinforcement learning, the envi-
ronment cannot be reverted, and we therefore have to sam-
ple forward from the state that we reach. This property, also
referred to as an ‘unknown model’, is also part of the real
world. In contrast, in planning and model-based RL, we are
either given or have learned a reversible model, better known
as a ‘known model’, which we can query for a next state and
reward for any state-action pair that we impute.

A classic approach in the latter case (known model) is Dy-
namic Programming (DP) [Bellman, 1966]. For example, in
Q-value iteration we sweep through a state-action value table,
where at each location we update Q(s, a) according to:

Q(s, a) ← Es(cid:48)∼T (·|s,a)

(cid:104)
R(s, a, s(cid:48)) + γ max
a∈A

(cid:105)
Q(s, a)

(3)

Dynamic programming is guaranteed to converge to the op-
timal policy. However, due to the curse of dimensionality, it
can not be applied in high-dimensional problems. In the next
section we introduce a recently popularized extension of DP.

3 Multi-step Approximate Real-Time

Dynamic Programming

Multi-step approximate real-time dynamic programming
[Efroni et al., 2019] has recently shown impressive empirical
results, for example beating humans and achieving state-of-
the-art performance in the game of Go [Silver et al., 2017],
Chess and Shogi [Silver et al., 2018]. MSA-RTDP is based
on Dynamic Programming concepts, but adds three additional
concepts:

• ‘Real time’ [Barto et al., 1995] implies that we act on
traces through the environment that start from some ini-
tial state s0 ∼ p(s0). This property is assumed by

Figure 1: Multi-step Real-time Dynamic Programming. The three
key procedures are 1) Planning, 2) Learning, and 3) Real steps (act-
ing).

most RL and planning algorithms. Compared to the DP
sweeps, it avoids work on states that we will never reach.

• ‘Approximate’ implies that we will use function ap-
proximation to store a global parametrized solution, in
the form of a value Vθ(s)/Qθ(s, a) and/or policy func-
tion πθ(a|s), where θ ∈ Θ denote the parameters of
the approximation. Compared to a tabular representa-
tion, approximate representations can deal with high-
dimensional state spaces and beneﬁt from generalization
between similar states, although they do make approx-
imation errors. Approximate solutions are especially
popular in RL literature.

• ‘Multi step’ implies that for every Dynamic Program-
ming back-up, we are allowed to make a multi-step
lookahead, i.e., we can plan.

The resulting multi-step approximate RTDP algorithm
class has three key components, which are visualized in Fig-
ure 1:

1. Plan: At every state st in the trace, we get to ex-
pand some computational budget B of forward plan-
ning, which could for example be a depth-d full-breadth
search [Russell and Norvig, 2016], or a more compli-
cated planning procedure like Monte Carlo Tree Search
[Browne et al., 2012]. The planning procedure can use
learned value/policy functions to aid planning, for exam-
ple through bootstrapping [Sutton and Barto, 2018].

2. Learn: After planning, we use the output of planning
(our improved knowledge about the optimal value and
policy at st) to train our global value/policy approxima-
tion.

3. Real step: We ﬁnally use the planning output to de-
cide which action at we will commit to, and make a
‘real step’, transitioning to a sampled next state st+1 ∼
T (·|st, at). The next iteration of planning continues
from st+1.

MSA-RTDP has two special cases that depend on the com-
putation planning budget B per real step. One the one ex-
treme, B → ∞, we completely enumerate all possible fu-
ture traces, better known as exhaustive search [Russell and
Norvig, 2016]. On the other extreme, B = 0, we do not plan at

Figure 2: Image stills from the studied tasks. Left: CartPole, where we attempt to balance the pole. Middle: MountainCar, where we attempt
to reach the top-left ﬂag by swinging back and forth. Right: RaceCar, where we need to control a car to reach a goal, indicated by a ball.

all, but directly make a real step based on the global approx-
imations, better known as model-free reinforcement learning
[Sutton and Barto, 2018].

Anthony et al. [2017] already related this approach to cog-
nitive psychology research, in particular dual process theory
[Evans, 1984; Kahneman, 2011]. The global value/policy ap-
proximation, which makes fast predictions about the value
of actions, can be considered a System 1 (‘Thinking Fast’),
while explicit forward planning to improve over these fast ap-
proximations seems related to System 2 (‘Thinking slow’).

4 Methods
For this paper, we will follow the AlphaGo Zero [Silver et al.,
2017] variant of MSA-RTDP. AlphaGo Zero uses a variant of
MCTS [Browne et al., 2012] for planning, and deep neural
networks for leaning of a policy πθ(a|s) and value Vθ(s) ap-
proximation. A key aspect of iterated planning-learning is
their mutual inﬂuence, where planning improves the learned
function, and the learned function directs new planning iter-
ations. We will detail both these integrations, starting with
training target construction based on planning output.

To train the policy network, we normalize the action vis-
itation counts n(s, a) at the tree root state s to a probability
distribution, and train on a cross-entropy loss:

Lπ(θ) =

(cid:88)

a

n(s, a)
n(s)

log πθ(a|s).

(4)

For value network training, we use a target based on the

reweighted value estimates at the root of the MCTS,

ˆV (s) =

(cid:88)

a

n(s, a)
n(s)

¯Q(s, a),

(5)

where ¯Q(s, a) denotes the mean pay-off of all traces

through (s, a), and train on a squared error loss,

LV (θ) = (cid:0)Vθ(s) − ˆV (s)(cid:1)2
This is a slight variation of the original AlphaZero imple-
mentation, based on recent results of Efroni et al. [2018]. The
above equations deﬁne the planning to learning connection in
Fig. 1.

(6)

.

For the reverse connection, inﬂuencing planning based on
the learned functions, we i) replace the MCTS rollout by a

bootstrap estimate from the value network, and ii) modify the
MCTS selects step to

(cid:34)
¯Q(s, a) + c · πθ(a|s) ·

(cid:115)

(cid:35)
,

n(s, a)
1 + n(s)

(7)

arg max
a

where c ∈ R is a constant that scales exploration pressure.
We vary the planning budget per timestep through adjust-
ment of the number of traces per MCTS iteration, denoted
by nMCTS, while keeping the overall computational budget
(in the form of wall clock time) ﬁxed. We experiment with
two well-known control tasks, CartPole and MountainCar,
available from the OpenAI Gym [Brockman et al., 2016],
and with the RaceCar task, available in the PyBullet package
[Coumans and Bai, 2016]. For MountainCar, we use a reward
function variant with r = −0.005 on every step, and r = +1
when the Car reaches the top of the hill. Visualizations of the
tasks are shown in Figure 2.

The total computational budget (planning, training and act-
ing) was ﬁxed in advance on every environment: 500 seconds
for CartPole, 150 minutes for MountainCar, and 270 minutes
for RaceCar. These budgets were predetermined to allow for
convergence on each domain. Therefore, long planning per
timestep (higher nMCTS) also implies less real steps and less
new training targets over the entire training period.
Hyperparameters The effect of search budget may also in-
teract with the setting of other hyperparameters. We chose the
following approach. We quickly search for a general hyperpa-
rameter conﬁguration that shows increasing learning curves
on all domains. Crucially, the search budget was varied in
this quick search, but we were unaware of its actual values, to
not bias the other hyperparameter settings towards good per-
formance on a particular search budget. We will touch upon
alternative approaches in the Discussion.

We here report the ﬁxed values for the other hyperparame-
ters. For neural network training, we used batches of size 16
with a replay buffer of size 5e3 and learning rate of 1e-3 on
all domains, optimized with ADAM optimizer [Kingma and
Ba, 2014]. Policy and value network shared their hidden lay-
ers, with 256 hidden nodes per layer. Since the reward scales
between the task varied greatly, the c parameter (Eq. 7) did
require adjustment per domain: for CartPole we decayed it
from 0.8 to 0.05 in 500 steps, for MountainCar from 5 to 0.5
in 5000 steps, and for RaceCar from 1.0 to 0.05 in 1500 steps.
All results are averaged over 3 repetitions.

Figure 3: Learning curves on CartPole, MountainCar and RaceCar environments. The colour legend per plot displays the MCTS trace budget
before every real step (nMCTS). There is no clear normalization criterion for the return scales on each domain, so we report their absolute
values. We see that AlphaGo Zero learns on all tasks, with best performance on CartPole, MountainCar and RaceCar achieved for budgets
of, respectively, 8, 32 and 32 traces per timestep.

Figure 4: Trade-off between planning and learning. The horizontal axis shows the computational budget per MCTS search in the form of the
total number of traces. The vertical axis shows the cumulative reward achieved by the speciﬁc set-up. Data based on last 15% of the learning
curves in Fig. 3. Note that the total computation time for every repetition was ﬁxed, i.e., higher planning budget per timestep will yield less
real steps and less targets for training the neural networks. We observe a clear trade-off on all domains, with optimal results achieved for
intermediate search budgets.

5 Results

Figure 3 shows learning curves for the three environments.
We see that the AlphaZero algorithm manages to learn all
three tasks. The largest variation in performance is seen on
the CartPole task. Clearly, the most stable performance for
CartPole uses nMCTS = 8. Compared to CartPole, Mountain-
Car has a sparser reward. We therefore require longer total
budget and more traces per timestep to achieve best perfor-
mance, which is attained with nMCTS = 32. Finally, RaceCar
has a larger action space than both other domains, wich re-
quires longer training, and generally more traces per timestep.
The best performance is achieved for nMCTS = 32 traces.

The learning curves indicate that optimal performance is
achieved for an intermediate search budget. To better illus-
trate this observation, we aggregate the average pay-offs from
the last 15% of total time for every planning budget in each
environment. These results are visualized in Figure 4. The
horizontal axis now displays search budget, while the vertical
axis displays mean pay-off at the end of training. For all three

environments, we observe clear optimal performance for an
intermediate search budget per real step.

To further investigate what happens during training, we vi-
sualize the output of the policy network on RaceCar for dif-
ferent search budgets in Figure 5. The right, middle and left
progression refer to nMCTS settings of 16, 32 and 128, re-
spectively. Each subplot shows the two-dimensional RaceCar
state space, which describes the (x,y)-location of the ball in
ﬁrst person view. Each state in this state space is coloured
according to the entropy of the policy network. Red colour
implies high entropy and therefore an uncertain policy, while
blue colour implies low entropy and a near converged pol-
icy. The number above each subplots indicates the episode
number.

First of all, we may note that the entropy of the pol-
icy is high in the entire state space at the beginning of all
three search budgets, which is to be expected. Second, we
can clearly observe a difference in the number of completed
episodes. Looking at the bottom-right subplot of the left
(nMCTS = 16), middle (nMCTS = 32) and right (nMCTS =

Figure 5: Training progression of policy network on RaceCar, for a) n = 16 trace budget per MCTS iteration, b) n = 32 trace budget, and
c) n = 128 trace budget. Each plot (a-c) visualizes a progression over training, where the number above the subplot indicates the episode
number. A subplot within each plot visualizes the two-dimensional state space (x-y location of the ball in ﬁrst person view), where each state
is colour coded according to the entropy of the policy network at that state. High entropy (red colour) implies an uncertain policy, while low
entropy (blue) implies a converged policy network. We see that the right progression (nMCTS = 128) qualitatively seems to slow, as there are
too little training targets. The left progression (nMCTS = 16) seems to converge fast, but Fig. 4 shows that convergence is premature, as the
achieved return is worse than the middle progression (nMCTS = 128).

128) plot, we observe that we completed 750, 332 and 93 full
episodes for the search budgets of 16, 32 and 128 traces per
real step, respectively. Of course, a higher search budget im-
plies that we complete less episodes.

More interestingly, we can qualitatively compare the con-
vergence of the policy networks in all three scenarios. When
we compare the high search budget (right) with the interme-
diate one (middle), we see that the high search budget shows
a similar progression, but it progresses slower. For example,
the policy network at episode 93 for nMCTS = 128 shows sim-
ilarity with the situation after episode 170 for nMCTS = 32,
with near convergence (blue) at the border of the state space,
and demarcation of early convergence areas (white) in the
center of state space. Although we did require less episodes to
reach that situation for nMCTS = 128, it did take more compu-
tation due to the relatively high planning effort per real step.
Therefore, the high planning budget cannot beneﬁt enough
from generalization of information. The reverse situation is
visible when we compare the left plot (nMCTS = 16) with
the middle plot (nMCTS = 32).
In the left plot, the policy
network seems to converge faster, with a very certain policy
(blue) in most of the state space at the end of the total time
budget. However, if we look at the performance in Fig. 4, the
convergence was actually premature, as we probably trained
on planning targets that were too unstable. We will further
interpret these observations in the discussion.

6 Related Work
AlphaGo Zero [Silver et al., 2017] and Alpha Zero [Silver et
al., 2018], as used in this work as well, are examples of multi-
step approximate real-time dynamic programming. AlphaGo
Zero treats the trade-off between planning and learning as a
ﬁxed hyperparameter, where they use 1600 MCTS traces per
real step in the game of Go, and 800 MCTS traces per real
step for both Chess and Shogi. A very similar algorithm is
Expert Iteration (ExIt) [Anthony et al., 2017], which shows

state-of-the-art performance in the game Hex. The authors do
not report the MCTS budget per search used during training.
The earliest idea of iterated search and learning seems to
date back to Samuel’s checkers programme [Samuel, 1967].
In later work, Carmel and Markovitch [1999] explicitly stud-
ies lookahead-based exploration. The authors do mention
that ‘it is rational for the agent to invest in computation in
order to save interaction’, but do not further investigate this
trade-off. Chang et al. [2015] made a step towards multi-
step approximate real-time dynamic programming with Lo-
cally Optimal Learning to Search (LOLS). LOLS iterates i)
Monte Carlo search, which leverages the policy, and ii) pol-
icy training, which is based on the estimated values during
planning. Other algorithms that update a global value ap-
proximation based on nested search are Sheppard [2002] and
Veness et al. [2009].

A theoretical study of multi-step greedy real-time dynamic
programming was recently provided by Efroni et al. [2019].
One of their results shows that the sample complexity of
multi-step greedy RTDP scales as Ω(1/d), where d denotes
the depth of the lookahead, while the computational complex-
ity scales as Ω(d). We directly see the trade-off appearing
here, as deeper planning decreases the required number of
real steps at the expense of increased computation. Our work
provides an empirical investigation of the effect of this trade-
off. Our results also seem to indicate that the optimal, inter-
mediate planning budget also correlates with the dimension-
ality of the problem, where more complex problems require a
higher budget.

Our empirical results are also partly visible in the concur-
rent work of Wang et al. [2019]. These authors benchmark
several model-based RL algorithms. They do not focus on it-
erated search and RL algorithms, like multi-step approximate
real-time dynamic programming, but do include results of
standard RL methods that train on learned dynamics models.
Their results show a similar trade-off. However, their results

could also be caused by the uncertainty in a learned model,
which makes planning far ahead less reliable. In contrast, our
work shows a more fundamental trade-off exist, even in the
case of a converged/perfect model.

As mentioned before, from a psychological perspective,
our work can be related to dual process theory. Developed in
the 70’s and 80’s by Evans [1984], it describes the presence
of a System 1 and System 2 in human cognition. System
1 and 2 have more recently been popularized as ‘Thinking
Fast and Slow’ [Kahneman, 2011, 2003], respectively. Sys-
tem 1 includes fast, reactive, automatic behaviour, much like
a neural network prediction, while System 2 includes slow,
calculating, effortful decision-making, which bears similarity
to local planning. This paper identiﬁes the mutual beneﬁt of
both for optimal sequential decision making, and may as such
also provide a computational motivation for the presence of
both systems in humans.

7 Discussion

The computational experiments in this work clearly show a
trade-off between planning, learning and acting. We identify
planning budget per timestep as the major factor of impor-
tance: with a higher budget per timestep, we generate less
training targets (and therefore spend less time on training)
and make less real steps (complete less full episodes).

Figure 6 conceptually illustrates the observations from this
paper. On the left of this plot, we ﬁnd model-free RL, where
the planning budget per timestep B = 0, and we only make
real steps. Although model-free RL has shown impressive re-
sults [Mnih et al., 2015], it is known to be notoriously unsta-
ble, especially in combination with function approximation
[Sutton and Barto, 2018]. On the right of this plot we ﬁnd ex-
haustive search, where the computational budget per timestep
B → ∞, and we try to completely enumerate all futures from
the root before choosing an action. Exhaustive search has
high computational complexity that scales exponentially in
the depth of the problem, and is therefore generally not a
feasible approach. The problem is that it never generalizes
information between states it encounters (no learning), and
therefore repeats much work.

Given the above observations, the shape of Figure 6 may
come to no surprise, as it appears to keep the best of both
worlds. On the one hand, we use local planning to i) create
better training targets for our global value/policy approxima-
tion, and ii) correct for local errors in these approximations
by looking ahead to more clearly discriminable states. On the
other hand, learning adds to pure planning the ability to gen-
eralize and store global solutions in memory, which avoids
repeating much work, as for example present in exhaustive
search.

As mentioned in Sec. 4, the effect of planning budget per
timestep may interact with the value of other hyperparame-
ters. For this work we chose to quickly search for a gen-
eral hyperparameter setting on all domains, while being ag-
nostic to the search budget in that phase. There could be
two alternative approaches. First, we could separately op-
timize all other hyperparameters for every search budget on
every domain. This would squeeze out the optimal perfor-

Figure 6: Conceptual illustration of the trade-off between planning
and learning. The horizontal axis shows the computational budget of
planning before every real step. On the left extreme we ﬁnd model-
free RL, which samples only a single transition before every step.
On the far right, we ﬁnd exhaustive search, which completely enu-
merates the search tree before executing a step. The curve illustrates
the experimental results, which show a trade-off.

mance, but is very computationally demanding. Second, we
could specify an interval for every hyperparameter with rea-
sonable values, and test on a set of random samples from
these ranges, which would test robustness to hyperparameter
variation. These could be interesting extensions with slightly
different messages. Nevertheless, our approach is also unbi-
ased, shows consistent results over tasks, and complies with
empirical search budget decisions in other papers, for exam-
ple in AlphaGo Zero [Silver et al., 2017] (which used 1600
MCTS traces per real step, not 1 or 10 million).

Neuroscience has suggested that both systems in dual pro-
cess theory compete for control over the decision [Daw et al.,
2005]. Our work provides computational motivation that both
systems are complementary, and actually both necessary for
optimal decision making. This may also provide an evolu-
tionary motivation for their existence.

A clear direction of future work would be to adaptively ad-
just the planning budget per timestep in a data-driven way.
Cognitive science has for long investigated how humans de-
cide on planning duration, aiming to ﬁnd a ‘satisﬁcing’ (a
portmanteau of satisfy and sufﬁce) solution [Schwartz et al.,
2002]. Computational models of such data-dependent trade-
offs, possibly based on the remaining uncertainty in the plan,
may further improve performance of planning-learning inter-
grations.

8 Conclusion
This paper investigated the computational trade-off between
planning and learning. Our results indicate that high perfor-
mance requires both local planning and global function ap-
proximation, and that the planning budget per real time-step
should neither be too high nor too low. This is an important
insight for the empirical application of model-based RL algo-
rithms, but may also provide a computational motivation for
the existence of a dual system in human cognition. Moreover,
it opens up towards future research on this trade-off, for ex-
ample identifying whether the budget per time-step should be
a context-dependent function of the observed data.

References
Thomas Anthony, Zheng Tian, and David Barber. Thinking
fast and slow with deep learning and tree search. In Ad-
vances in Neural Information Processing Systems, pages
5360–5370, 2017.

Andrew G Barto, Steven J Bradtke, and Satinder P Singh.
Learning to act using real-time dynamic programming. Ar-
tiﬁcial intelligence, 72(1-2):81–138, 1995.

Richard Bellman.

Dynamic programming.

Science,

153(3731):34–37, 1966.

Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas
Schneider,
Jie Tang, and Wojciech
Zaremba. OpenAI Gym. arXiv preprint arXiv:1606.01540,
2016.

John Schulman,

Cameron B Browne, Edward Powley, Daniel Whitehouse,
Simon M Lucas, Peter I Cowling, Philipp Rohlfshagen,
Stephen Tavener, Diego Perez, Spyridon Samothrakis, and
Simon Colton. A survey of monte carlo tree search meth-
ods. IEEE Transactions on Computational Intelligence and
AI in games, 4(1):1–43, 2012.

Murray Campbell, A Joseph Hoane Jr, and Feng-hsiung Hsu.
Deep blue. Artiﬁcial intelligence, 134(1-2):57–83, 2002.

David Carmel and Shaul Markovitch. Exploration strategies
for model-based learning in multi-agent systems: Explo-
ration strategies. Autonomous Agents and Multi-agent sys-
tems, 2(2):141–172, 1999.

Kai-Wei Chang, Akshay Krishnamurthy, Alekh Agarwal, Hal
Daume, and John Langford. Learning to Search Better than
In International Conference on Machine
Your Teacher.
Learning, pages 2058–2066, 2015.

Kurtland Chua, Roberto Calandra, Rowan McAllister, and
Sergey Levine. Deep reinforcement learning in a hand-
ful of trials using probabilistic dynamics models. In Ad-
vances in Neural Information Processing Systems, pages
4754–4765, 2018.

Erwin Coumans and Yunfei Bai. Pybullet, a python mod-
ule for physics simulation for games, robotics and machine
learning. GitHub repository, 2016.

Nathaniel D Daw, Yael Niv, and Peter Dayan. Uncertainty-
based competition between prefrontal and dorsolateral stri-
atal systems for behavioral control. Nature Neuroscience,
8(12):1704–1711, 2005.

Yonathan Efroni, Gal Dalal, Bruno Scherrer, and Shie Man-
nor. Beyond the One-Step Greedy Approach in Reinforce-
ment Learning. In International Conference on Machine
Learning, pages 1386–1395, 2018.

Yonathan Efroni, Mohammad Ghavamzadeh, and Shie Man-
nor. Multi-Step Greedy and Approximate Real Time Dy-
namic Programming. arXiv preprint arXiv:1909.04236,
2019.

Jonathan St BT Evans. Heuristic and analytic processes in
reasoning. British Journal of Psychology, 75(4):451–468,
1984.

Daniel Kahneman. Maps of bounded rationality: Psychol-
ogy for behavioral economics. American economic review,
93(5):1449–1475, 2003.

Daniel Kahneman. Thinking, fast and slow. Macmillan, 2011.
Diederik Kingma and Jimmy Ba. Adam: A Method for
International Conference on

Stochastic Optimization.
Learning Representations, 12 2014.

Volodymyr Mnih, Koray Kavukcuoglu, David Silver, An-
drei A Rusu, Joel Veness, Marc G Bellemare, Alex Graves,
Martin Riedmiller, Andreas K Fidjeland, Georg Ostrovski,
et al. Human-level control through deep reinforcement
learning. Nature, 518(7540):529, 2015.

Martin L Puterman. Markov Decision Processes.: Discrete
Stochastic Dynamic Programming. John Wiley & Sons,
2014.

Stuart J Russell and Peter Norvig. Artiﬁcial intelligence: a
modern approach. Malaysia; Pearson Education Limited,,
2016.

Arthur L Samuel. Some studies in machine learning using
the game of checkers. II - Recent progress. IBM Journal of
research and development, 11(6):601–617, 1967.

Barry Schwartz, Andrew Ward, John Monterosso, Sonja
Lyubomirsky, Katherine White, and Darrin R Lehman.
Maximizing versus satisﬁcing: Happiness is a matter of
Journal of personality and social psychology,
choice.
83(5):1178, 2002.

Brian Sheppard. World-championship-caliber Scrabble. Ar-

tiﬁcial Intelligence, 134(1-2):241–275, 2002.

David Silver, Julian Schrittwieser, Karen Simonyan, Ioan-
nis Antonoglou, Aja Huang, Arthur Guez, Thomas Hubert,
Lucas Baker, Matthew Lai, Adrian Bolton, et al. Master-
ing the game of go without human knowledge. Nature,
550(7676):354, 2017.

David Silver, Thomas Hubert, Julian Schrittwieser, Ioan-
nis Antonoglou, Matthew Lai, Arthur Guez, Marc Lanc-
tot, Laurent Sifre, Dharshan Kumaran, Thore Graepel,
et al. A general reinforcement learning algorithm that
masters chess, shogi, and Go through self-play. Science,
362(6419):1140–1144, 2018.

Richard S Sutton and Andrew G Barto. Reinforcement learn-

ing: An introduction. MIT press, 2018.

Richard S Sutton. Dyna, an integrated architecture for
learning, planning, and reacting. ACM Sigart Bulletin,
2(4):160–163, 1991.

Joel Veness, David Silver, Alan Blair, and William Uther.
In Advances in
Bootstrapping from game tree search.
neural information processing systems, pages 1937–1945,
2009.

Tingwu Wang, Xuchan Bao, Ignasi Clavera, Jerrick Hoang,
Yeming Wen, Eric Langlois, Shunshi Zhang, Guodong
Benchmark-
Zhang, Pieter Abbeel, and Jimmy Ba.
CoRR,
ing Model-Based Reinforcement Learning.
abs/1907.02057, 2019.

