1
2
0
2

t
c
O
2
2

]
h
p
-
m
e
h
c
.
s
c
i
s
y
h
p
[

1
v
8
7
6
1
1
.
0
1
1
2
:
v
i
X
r
a

DQC: a Python program package for Diﬀerentiable Quantum Chemistry

M. F. Kasim,1, ∗ S. Lehtola,2 and S. M. Vinko1, 3, †
1Department of Physics, Clarendon Laboratory, University of Oxford, Parks Road, Oxford OX1 3PU, UK
2Molecular Sciences Software Institute, Blacksburg, Virginia 24061, United States
3Central Laser Facility, STFC Rutherford Appleton Laboratory, Didcot OX11 0QX, UK
(Dated: October 25, 2021)

Automatic diﬀerentiation represents a paradigm shift in scientiﬁc programming, where evaluating
both functions and their derivatives is required for most applications. By removing the need to
explicitly derive expressions for gradients, development times can be be shortened, and calculations
simpliﬁed. For these reasons, automatic diﬀerentiation has fueled the rapid growth of a variety of
sophisticated machine learning techniques over the past decade, but is now also increasingly showing
its value to support ab initio simulations of quantum systems, and enhance computational quan-
tum chemistry. Here we present an open-source diﬀerentiable quantum chemistry simulation code,
DQC, and explore applications facilitated by automatic diﬀerentiation: (1) calculating molecular
perturbation properties; (2) reoptimizing a basis set for hydrocarbons; (3) checking the stability of
self-consistent ﬁeld wave functions; and (4) predicting molecular properties via alchemical pertur-
bations.

I.

INTRODUCTION

Automatic diﬀerentiation is a collection of techniques
used to evaluate, up to machine precision, the deriva-
tive of a function speciﬁed by a computer program. It
allows software developers to focus solely on designing
the best model for a given problem, without having to
worry about implementing any derivatives of the model
with respect to its various mathematical parameters. It
has already had a transformative eﬀect in machine learn-
ing, enabling the development of many new techniques
over the past decade, such as batch normalization [1],
attention layers [2], and unique neural network architec-
tures [3, 4].

Automatic diﬀerentiation is still relatively new in the
context of computational sciences, but is already showing
promise across a diverse set of applications including ten-
sor networks [5], computational ﬂuid dynamics [6], and
molecular dynamics simulations [7]. Automatic diﬀeren-
tiation is also growing increasingly popular in quantum
chemistry, where it has been used to optimize molecular
basis sets [8], to calculate higher derivatives of various
exchange-correlation (xc) functionals [9] of density func-
tional theory (DFT) [10, 11], and to determine arbitrary-
order nuclear coordinate derivatives of electronic ener-
gies [12].

Automatic diﬀerentiation is also an essential stepping
stone to enable direct integration of quantum chemistry
methods with machine learning models and their train-
ing. In this context, a diﬀerentiable implementation of
DFT was recently used to learn the xc functional [13]
from accurate reference calculations within the density
matrix renormalization group approach, or from a mix-
ture of computational and experimental data [14], show-

∗ Present address: Machine Discovery Ltd, muhammad@machine-

discovery.com

† sam.vinko@physics.ox.ac.uk

ing a promising new approach to developing transferable
and robust xc functionals via deep learning.

Although diﬀerentiation in quantum chemistry can be
done via ﬁnite-diﬀerence schemes, calculating the gra-
dient of a parameter with respect to some other input
parameter can be time consuming as one has to run the
simulation as many times as the number of input param-
eters. Moreover, ﬁnite-diﬀerence methods are prone to
numerical instabilities and are very sensitive to the cho-
sen step-size. Automatic diﬀerentiation addresses these
challenges by calculating the analytical gradient via the
chain rule, eliminating both the need to run the simula-
tion many times, and the need for step-size tuning.

To address the growing need for automatic diﬀerenti-
ation in quantum chemistry, we introduce Diﬀerentiable
Quantum Chemistry (DQC), a DFT and Hartree–Fock
(HF) [15] simulation code. DQC is written in Python
using PyTorch [16] and xitorch [17]. While PyTorch
provides gradient calculations for elementary operations
such as matrix multiplication and explicit eigendecom-
position, xitorch provides gradient calculations for func-
tional operations such as root ﬁnding, optimization, and
implicit eigendecomposition. The use of PyTorch and xi-
torch in DQC enables various applications in quantum
chemistry that would otherwise be far more diﬃcult to
pursue. For example, the work by Kasim and Vinko [14]
on learning the xc functional directly from a set of het-
erogeneous experimental data and calculated density pro-
ﬁles within the constraints of Kohn–Sham DFT already
mentioned above was enabled by the use of DQC.

We begin this paper by outlining the basic theory be-
hind DQC in section II. The implementation is described
in section III. Applications that exemplify the present ap-
proach are given in section IV. We discuss the challenges
in the use of automatic diﬀerentiation techniques in com-
putational science in section V, and summarize our work
in section VI.

 
 
 
 
 
 
II. METHODS

Quantum chemical calculations of the electronic struc-
ture typically require the evaluation of abstract function-
als, such as root ﬁnding for self-consistent ﬁeld (SCF)
iterations, and minimization for geometry optimizations
and the direct minimization approach to the SCF prob-
lem. We discuss the handling of these functionals in the
context of DQC in this section.

A. SCF iterations

DQC is based on the use of a Gaussian basis set
within the linear combination of atomic orbitals ap-
proach (LCAO). For simplicity, we will only present the
theory for the spin-restricted formalism, as the spin-
unrestricted (and restricted open-shell) formalisms are
analogous. The SCF iterations proceed in the LCAO ap-
proach by solving Roothaan’s equation [18, 19]

F(D)C = SCE,

(1)

where F(D) is the Fock matrix which is a function of
the density matrix D, C is the orbital matrix, S is the
overlap matrix, and E is a diagonal matrix containing
the orbital energies. The generalized eigenvalue equa-
tion in equation (1) can be reduced to the normal form
by orthogonalizing the overlap matrix S [20], and oper-
ating in the linearly independent basis spanned by the
eigenvectors of S with large enough eigenvalues; any ill-
conditioning in the overlap matrix can be removed by
choosing a well-deﬁned sub basis with the help of a piv-
oted Cholesky decomposition [21]. The density matrix
D, required to construct the Fock matrix F, can be ob-
tained by

D = CNC†

(2)

with N a diagonal matrix containing the occupation
numbers of the orbitals. As discussed in ref. 19, the
SCF procedure requires repeatedly solving equations (1)
and (2) until self-consistency is achieved.

The Roothaan iteration in equation (1) can be written
mathematically as the process of ﬁnding a vector y such
that

y = f (y, θ),

(3)

where f is a function that takes the vector y and other
parameters θ, and returns the expected value of vector y.
In DQC, the parameter y is represented by the Fock ma-
trix F, so the function f is the procedure that solves equa-
tion (1), calculating the density matrix from equation (2)
and constructing back the Fock matrix from the density
matrix. The parameters θ represent the other variables
involved in the calculation, such as the overlap matrix
S and the occupation number matrix N. The algorithm
and gradient calculation for equations (1) and (3) are
already available in PyTorch and xitorch.

2

TABLE I. Execution speed comparison between DQC (SCF
iterations) and PySCF.

Cases

DQC

PySCF

H2O (HF/cc-pVDZ)
H2O (PW92/cc-pVDZ)
C4H5N (HF/cc-pVTZ)
C4H5N (PW92/cc-pVTZ)
C4H5N (density ﬁt PW92/cc-pVTZ)
C6H8O6 (density ﬁt PW92/cc-pVDZ)

96 ms
530 ms
108 s
101 s
30 s
87 s

245 ms
430 ms
17 s
25 s
22 s
57 s

B. Direct minimization

An alternative approach to solving the self-consistent
ﬁeld equations is to directly ﬁnd the orbitals that min-
imize the total energy E by the use of optimization al-
gorithms [22]. The energy E can be calculated from the
density matrix D which can be obtained in turn from
the orbital coeﬃcients C using equation (2). This rela-
tion makes the energy a function of the orbital matrix,
E(C). However, as the orbitals must remain orthonor-
mal, C†SC = I, we introduce a new variable Q, deﬁned
in terms of its relation with C as

Q = ˆQR
C = S−1/2 ˆQ.

(4)

(5)

Equation (4) is the QR decomposition of the matrix Q
into an orthogonal matrix ˆQ and an upper triangular
matrix R. Equation (5) involves the inverse square root
of the overlap matrix S, which can be computed using
the eigendecomposition of S. The energy can then be
parameterized by Q, reducing the direct minimization
problem to an unbounded optimization problem:

Q∗ = arg min
Q

E(Q).

(6)

The gradient of the energy with respect to Q, i.e. ∂E/∂Q,
is required for an eﬃcient solution. It is automatically
computed by PyTorch and xitorch.

Once the optimum Q∗ in equation (6) is found, Q∗ can
still be diﬀerentiated with respect to any other variables,
such as the nuclear coordinates or the occupation number
matrix N. This is made possible by the gradient of the
optimization functional provided by xitorch.

We note that our approach of using QR decomposi-
tion is slightly diﬀerent from common direct minimiza-
tion techniques that use the matrix exponential of a skew-
Hermitian matrix such as the geometric direct minimiza-
tion algorithm of ref. 23.

III.

IMPLEMENTATION

DQC implements restricted and unrestricted HF and
Kohn–Sham DFT calculations without periodic bound-

3

TABLE II. Lowest eigenvalue of the HF/pc-1 orbital Hessian
matrix. All of the calculations correspond to stationary points
of the HF energy.

Molecules

Distance
(Bohr)

Energy
(Eh)

Lowest eigenvalue
(Eh)

O2 (ground)
O2 (excited)
BeH (ground)
BeH (excited)
CH (ground)
CH (excited)

2.0
2.0
2.5
2.5
2.0
2.0

−149.54
−149.17
−15.14
−15.01
−38.259
−38.256

−6 × 10−14
−0.73
−4 × 10−14
−0.25
−5 × 10−8
−0.07

IV. APPLICATIONS

A. Direct minimization

The automatic availability of gradients makes it easy
to implement the direct minimization method in DQC.
Direct minimization is known to be more robust than
SCF iterations in ﬁnding a converged solution [19], and is
particularly useful in diﬃcult cases such as for molecules
near their dissociation limits. We illustrate this in ﬁg-
ure 1, where we show the PW92/cc-pVDZ [27, 28] total
energy of H+
2 as a function of the internuclear distance.
The SCF method does not converge for internuclear dis-
In contrast, the
tances greater than around 17 Bohr.
direct minimization method continues to converge even
for substantially larger distances in excess of 40 Bohr.

B. Checking SCF stability

One diﬃculty in SCF calculations is that the calcula-
tion can converge onto a saddle point, which corresponds
to an excited state [19]. If the calculation has converged
onto a local minimum, the Hessian of the energy with
respect to orbital rotations must be positive semideﬁ-
nite. Saddle point solutions, instead, correspond to one
or more negative eigenvalues of the orbital Hessian. To
maintain the orthonormality of the orbitals, the Hessian
is calculated based on the Q variable. Conveniently, we
do not need to derive the expression for the Hessian ma-
trix ∂2E/∂Q2 as it is automatically obtained by PyTorch.
Moreover, only the lowest eigenvalue needs to be cal-
culated for the stability check, so the full Hessian matrix
does not need to be constructed. We obtain the lowest
eigenvalue using Davidson’s iterative algorithm [29], as
implemented in xitorch. Note that the gradients of the
lowest energy eigenvalue with respect to all other param-
eters in the calculation are automatically available, which
may prove useful in further future applications.

We show some examples of SCF stability checks for
HF/pc-1 [30] calculations on diatomic molecules in ta-
ble II. As can be seen from the data, the lowest eigenval-
ues of the orbital Hessian are very close to zero for the

FIG. 1. Unrestricted PW92/cc-pVDZ [27, 28] energy for
the hydrogen molecule cation H+
2 as a function of the in-
ternuclear distance calculated via the SCF (using Broyden’s
method [24]) and direct minimization approaches. Note that
the SCF iterations do not converge for internuclear distances
larger than 17 Bohr.

ary conditions. The energy can be minimized using ei-
ther SCF iterations with Broyden’s good method [24] for
Fock matrix updates, or with direct minimization using
gradient descent with momentum [25]; more elaborate
SCF convergence accelerators will be implemented at a
later stage of the project. All parameters are diﬀeren-
tiable with respect to any other parameter present in the
calculation, including nuclear coordinates, atomic num-
bers, electron occupation numbers, as well as the basis
set exponents and contraction coeﬃcients. The diﬀeren-
tiability of these parameters allows for the exploration of
new applications with DQC, a few of which are presented
in what follows.

Although execution speed is not a top priority for
DQC, the program shows good overall performance.
Table I compares the running times of DQC with
PySCF [26], an established quantum chemistry code. For
small systems, we ﬁnd that DQC is as eﬃcient as PySCF.
However, for moderate-sized molecules (e.g. C4H5N),
DQC is about 4–6 times slower than PySCF. This slow-
down can be attributed to DQC currently not taking ad-
vantage of the symmetry of the 2-electron integral tensor,
which can reduce the tensor size by roughly a factor of
8 when the basis functions are real-valued. In contrast,
DQC is only about 50% slower than PySCF for systems
with density ﬁtting. The diﬀerence is mainly caused by
the higher number of SCF iterations required in DQC
over PySCF, due to the use of diﬀerent SCF convergence
acceleration schemes in the two codes.

4

TABLE III. Perturbative properties of H2O from HF/cc-
pVDZ calculations. The middle column presents the values
calculated in DQC while the last column shows the CCCBDB
values [31]. The IR intensities and Raman activities are pre-
sented at the frequency of 1800 cm−1.

Properties

IR intensities (km/mol)
Raman activities (A4/amu)
Dipole (D)
Quadrupolexx (DA)

DQC

80.69
4.79
−2.044
−7.008

CCCBDB

80.70
4.79
−2.044
−7.008

ground state, while the excited states yield large negative
eigenvalues. This illustrates that it is straightforward to
check whether or not a state corresponds to a true mini-
mum with DQC.

FIG. 2. Basis set truncation errors for the cc-pVDZ and
cc-pVTZ basis sets for a range of hydrocarbons, compared
with the truncation error for a reoptimized cc-pVDZ basis
set. The reference energies are computed in the cc-pV5Z ba-
sis set. None of the molecules shown in the ﬁgure were used
in the basis set optimization.

C. Molecular properties

A key advantage of writing quantum chemistry soft-
ware with automatic diﬀerentiation is that calculations
of molecular properties can be implemented eﬃciently:
all we need to know is how a speciﬁc property relates
to some derivative expression. For example, vibrational
modes and frequencies of a molecule can be written as

qvib, ωvib = eig

(cid:18) ∂2E
∂X2

(cid:19)

,

(7)

where X is an n × 3 matrix containing the nuclear co-
ordinates of the n atoms, eig is the eigendecomposition,
qvib is one of the vibrational modes, and ωvib is its fre-
quency. The expression shown in equation (7) is all that
is needed to calculate the vibrational characteristics of
the molecule; the explicit form of the derivative expres-
sion is not required.

Another useful example is the calculation of the elec-
tric dipole and quadrupole moments of a molecule. The
electric dipole moment is given by

µ = −

∂E
∂E

(cid:88)

+

Zixi,

i

while the electric quadrupole tensor is given by

M = −2

∂E
∂∇E

(cid:88)

+

ZixixT
i .

i

(8)

(9)

intensity of the infrared vibrational transition for a nor-
mal mode q at a frequency ω is given by

IIR =



(cid:88)

(cid:88)



i

jk

∂µi
∂Xjk


2

qjk



,

(10)

where µ is the electric dipole moment and X is the matrix
of atomic coordinates.

Similarly, the Raman activity at the same frequency

and normal mode is proportional to [32]

IRaman = 5 [tr (α)]2 + 7γ;
(cid:88)

∂2µi
∂Ej∂Xkl

qkl;

αij =

γ =

kl
(cid:88)

ij

(1 − δij)

(cid:20) 1
4

(αii − αjj)2 +

(cid:21)

,

α2
ij

3
2

(11)

(12)

(13)

where δij is the Kronecker delta.

The HF/cc-pVDZ perturbation properties of H2O,
found using the expressions above, are displayed in Ta-
ble III. The values are in excellent agreement with data
from the the computational chemistry comparison and
benchmark database (CCCBDB) [31], even though DQC
does not have any explicit code to calculate the gradients
required for these properties.

D. Basis set optimization

In both expressions, E is the total energy of the molecule,
E is the electric ﬁeld, Zi is the atomic number of i-th
atom, and xi are its coordinates.

Having these vibrational and electric multipole prop-
erties readily available makes obtaining the Raman vi-
brational spectrum straightforward. For example, the

The diﬀerentiability of DQC with respect to the ba-
sis set parameters enables the optimization of system-
speciﬁc basis sets. Here we show this capability by opti-
mizing a basis set for hydrocarbons within Kohn–Sham
DFT using the PW92 functional. We reoptimized the
cc-pVDZ basis [28] for a training set of molecules con-
sisting of CH (methylidyne), CH3 (methyl radical), CH4

(methane), C2H2 (acetylene), and C2H4 (ethylene). The
accuracy of the reoptimized basis was then tested on a set
of hydrocarbons that were not included in the training
set. The results are shown in ﬁgure 2. The reoptimiza-
tion of the cc-pVDZ basis set leads to a marked decrease
of the total energies of all the molecules in the test set,
as the cc-pVXZ basis set series is designed to capture
correlation energies instead of polarization energies [28],
and as hydrocarbons are chemically similar.

E. Alchemical perturbation

One of the diﬀerentiable quantities in DQC is the
atomic number, allowing us to perform alchemical per-
turbation studies to predict the properties of molecules
without actually needing to simulate them [33, 34]. As a
simple example, we will show here that some properties
of diatomic molecules CO (atomic numbers 6 and 8) and
BF (atomic numbers 5 and 9) can be estimated directly
from the properties of N2 (atomic number 7) and its al-
chemical perturbations. To do this, we parametrize the
atomic number of the atoms in the diatomic molecule by
a continuous variable λ, so that the atoms have atomic
numbers Zl = 7 + λ and Zr = 7 − λ. The molecules N2,
CO, and BF thus correspond to λ = 0, λ = 1, and λ = 2,
respectively.

The properties we aim to predict are the bond length
s∗ and the energy E∗ at the equilibrium position, which
can be mathematically expressed as

s∗(λ) = arg min

s

E(s, λ),

E∗(λ) = E(s∗, λ).

(14)

(15)

Performing HF/pc-1 calculations, we evaluate the equi-
librium distance and the energy at the equilibrium posi-
tion in two ways. The ﬁrst way is to optimize the geome-
try for various ﬁxed values of λ, and calculate the above
properties directly. The calculations were performed sep-
arately, but with the same basis (pc-1 nitrogen basis on
all atoms) for diﬀerent molecules, in analogy to the pro-
cedure used in refs 33 and 34. The second way is to
estimate those properties using a Taylor series expansion
to second order in λ:

s∗(λ) ≈ s∗(0) + λ

(0) +

E∗(λ) ≈ E∗(0) + λ

(0) +

∂s∗
∂λ
∂E∗
∂λ

1
2

λ2 ∂2s∗
∂λ2 (0)
λ2 ∂2E∗

1
2

∂λ2 (0).

(16)

(17)

As s∗ and E∗ are calculated at equilibrium, calculating
the perturbation terms requires propagating the gradi-
ent through the optimization process. However, auto-
matic diﬀerentiation makes the propagation trivial, as it
is automatically handled by the optimization routine in
xitorch.

The results obtained via these two approaches are com-
pared in ﬁgure 3. As we can see from these results, the

5

FIG. 3. Comparison of the properties of CO and BF obtained
via an exact calculation and an estimation from the second-
order gradients via alchemical perturbations, employing the
nitrogen pc-1 basis on all atoms.

properties of CO and BF can be estimated accurately
from alchemical perturbations of N2. The estimated equi-
librium distances for CO and BF diﬀer by −0.0004 and
0.024 Bohr, respectively, while the estimated equilibrium
energies deviate by 33 and 587 mEh, respectively. This
shows that the equilibrium position of new molecules can
be estimated well with the alchemical gradient calcu-
lated by DQC, without actually having to calculate those
molecules.

V. DISCUSSION

Implementing quantum chemistry with automatic dif-
ferentiation libraries is a promising way to accelerate sim-
ulation workﬂows and to enable novel applications. How-
ever, the implementation comes with several challenges.
An overarching challenge is that the automatic diﬀeren-
tiation library used here, PyTorch, is primarily designed
for deep learning rather than for scientiﬁc computing. As
deep learning only focuses on low-order derivatives, ac-
cessing high-order gradients that are commonly required
for scientiﬁc applications can be diﬃcult.

Detecting numerical instabilities in high-order gradi-
ent calculations can also be demanding.
Instabilities
that produce NaN (not-a-number) in PyTorch are rela-

tively straightforward to manage with its debugging fea-
ture since version 1.8, but other instabilities that do not
produce a NaN can be challenging to detect.

Another challenge is debugging and proﬁling higher-
order gradient calculations. As the gradient is generated
automatically, it is hard to ﬁnd the slowest part of the
code, or the part that requires the most memory, because
this information is not readily provided by the available
proﬁling tools.

Besides higher-order gradient calculations, using au-
tomatic diﬀerentiation libraries also poses unique chal-
lenges in terms of code optimization. For example, quan-
tum chemistry codes usually save the two-electron inte-
grals on disk due to their large size and process them only
in blocks small enough to ﬁt easily into memory. This
scheme can only be used in DQC if the gradients with
respect to the nuclear positions and the basis are not
required. To the authors’ best knowledge, there is cur-
rently no obvious structure in PyTorch to allow gradient-
propagating operations to work with large tensors saved
on disk.

6

VI. CONCLUSIONS

Implementing quantum chemical calculations using au-
tomatic diﬀerentiation liberates us from needing to de-
rive analytical gradient expressions. With gradients au-
tomatically generated by the program, software develop-
ers can focus on designing better, more detailed compu-
tational models, and on applying them to problems at
hand. We have shown how automatic diﬀerentiation al-
lows us to easily explore various applications in quantum
chemistry, and are conﬁdent that further exploration of
this approach will unveil new applications that have not
been considered to date.

CODE AVAILABILITY

The Diﬀerentiable Quantum Chemistry (DQC) code
can be found at https://github.com/diﬀqc/dqc/. The
repository that contains the applications presented in this
paper is located at https://github.com/diﬀqc/dqc-apps/.

ACKNOWLEDGMENTS

M.F.K. and S.M.V. acknowledge support from the
UK EPSRC grant EP/P015794/1 and the Royal Society.
S.M.V. is a Royal Society University Research Fellow.
The authors declare no conﬂict of interest.

[1] Sergey Ioﬀe and Christian Szegedy. Batch normalization:
Accelerating deep network training by reducing internal
covariate shift. In International conference on machine
learning, pages 448–456. PMLR, 2015.

[2] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob
Uszkoreit, Llion Jones, Aidan N Gomez, Lukasz Kaiser,
and Illia Polosukhin. Attention is all you need. arXiv
preprint arXiv:1706.03762, 2017.

[3] Kristof T Sch¨utt, Huziel E Sauceda, P-J Kindermans,
Alexandre Tkatchenko, and K-R M¨uller. Schnet–a deep
learning architecture for molecules and materials.
J.
Chem. Phys., 148(24):241722, 2018.

[4] Olaf Ronneberger, Philipp Fischer, and Thomas Brox.
U-net: Convolutional networks for biomedical image seg-
mentation. In International Conference on Medical im-
age computing and computer-assisted intervention, pages
234–241. Springer, 2015.

[5] Hai-Jun Liao, Jin-Guo Liu, Lei Wang, and Tao Xiang.
Diﬀerentiable programming tensor networks. Physical
Review X, 9(3):031041, 2019.

[6] Connor Schenck and Dieter Fox. Spnets: Diﬀerentiable
ﬂuid dynamics for deep neural networks. In Conference
on Robot Learning, pages 317–335. PMLR, 2018.

[7] Samuel Schoenholz and Ekin Dogus Cubuk. Jax md: a
framework for diﬀerentiable physics. Advances in Neural
Information Processing Systems, 33, 2020.

[8] Teresa Tamayo-Mendoza, Christoph Kreisbeck, Roland
Lindh, and Al´an Aspuru-Guzik. Automatic diﬀerentia-
tion in quantum chemistry with applications to fully vari-
ational hartree–fock. ACS central science, 4(5):559–566,
2018.

[9] Ulf Ekstr¨om, Lucas Visscher, Radovan Bast, Andreas J
Thorvaldsen, and Kenneth Ruud. Arbitrary-order den-
sity functional response theory from automatic diﬀer-
entiation. Journal of chemical theory and computation,
6(7):1971–1980, 2010.

[10] Pierre Hohenberg and Walter Kohn. Inhomogeneous elec-

tron gas. Phys. Rev., 136(3B):B864, 1964.

[11] Walter Kohn and Lu Jeu Sham. Self-consistent equations
including exchange and correlation eﬀects. Phys. Rev.,
140(4A):A1133, 1965.

[12] Adam S Abbott, Boyi Z Abbott, Justin M Turney, and
Henry F Schaefer III. Arbitrary-order derivatives of
quantum chemical methods via automatic diﬀerentiation.
The Journal of Physical Chemistry Letters, 12(12):3232–
3239, 2021.

[13] Li Li, Stephan Hoyer, Ryan Pederson, Ruoxi Sun,
Ekin D Cubuk, Patrick Riley, and Kieron Burke. Kohn-
Sham equations as regularizer: Building prior knowl-
edge into machine-learned physics. Phys. Rev. Lett.,
126(3):036401, 2021.

[14] Muhammad F Kasim and Sam M Vinko. Learning the
exchange-correlation functional from nature with fully

diﬀerentiable density functional theory. arXiv preprint
arXiv:2102.04229, 2021.

[15] Douglas Rayne Hartree. The wave mechanics of an atom
with a non-coulomb central ﬁeld. part ii. some results
and discussion. In Mathematical Proceedings of the Cam-
bridge Philosophical Society, volume 24, pages 111–132.
Cambridge University Press, 1928.

[16] Adam Paszke, Sam Gross, Francisco Massa, Adam Lerer,
James Bradbury, Gregory Chanan, Trevor Killeen, Zem-
ing Lin, Natalia Gimelshein, Luca Antiga, Alban Des-
maison, Andreas Kopf, Edward Yang, Zachary DeVito,
Martin Raison, Alykhan Tejani, Sasank Chilamkurthy,
Benoit Steiner, Lu Fang, Junjie Bai, and Soumith Chin-
tala. Pytorch: An imperative style, high-performance
deep learning library.
In H. Wallach, H. Larochelle,
A. Beygelzimer, F. d'Alch´e-Buc, E. Fox, and R. Garnett,
editors, Advances in Neural Information Processing Sys-
tems, volume 32, pages 8026–8037. Curran Associates,
Inc., 2019.

[17] Muhammad F Kasim and Sam M Vinko. ξ-torch: dif-
ferentiable scientiﬁc computing library. arXiv preprint
arXiv:2010.01921, 2020.

[18] Clemens Carel Johannes Roothaan. New developments
in molecular orbital theory. Rev. Mod. Phys., 23(2):69,
1951.

[19] Susi Lehtola,

and Christian
Frank Blockhuys,
Van Alsenoy. An overview of self-consistent ﬁeld calcu-
lations within ﬁnite basis sets. Molecules, 25(5):1218,
2020.

[20] Per-Olov L¨owdin. Quantum theory of cohesive properties

of solids. Adv. Phys., 5(17):1–171, 1956.

[21] Susi Lehtola. Curing basis set overcompleteness with
J. Chem. Phys.,

pivoted Cholesky decompositions.
151(24):241102, 2019.

[22] Martin Head-Gordon and John A Pople. Optimization of
wave function and geometry in the ﬁnite basis Hartree–
Fock method. J. Phys. Chem., 92(11):3063–3069, 1988.
[23] Troy Van Voorhis and Martin Head-Gordon. A geomet-
ric approach to direct minimization. Molecular Physics,
100(11):1713–1721, 2002.

[24] Charles G Broyden. A class of methods for solving non-
linear simultaneous equations. Mathematics of computa-
tion, 19(92):577–593, 1965.

7

[25] Barak A Pearlmutter. Gradient descent: Second-order
momentum and saturating error. Advances in neural in-
formation processing systems, pages 887–894, 1991.
[26] Qiming Sun, Xing Zhang, Samragni Banerjee, Peng
Bao, Marc Barbry, Nick S Blunt, Nikolay A Bogdanov,
George H Booth, Jia Chen, Zhi-Hao Cui, et al. Recent
developments in the PySCF program package. J. Chem.
Phys, 153(2):024109, 2020.

[27] John P Perdew and Yue Wang. Accurate and simple ana-
lytic representation of the electron-gas correlation energy.
Phys. Rev. B, 45(23):13244, 1992.

[28] Thom H Dunning Jr. Gaussian basis sets for use in corre-
lated molecular calculations. I. The atoms boron through
neon and hydrogen. J. Chem. Phys., 90(2):1007–1023,
1989.

[29] E. R. Davidson. The iterative calculation of a few of
the lowest eigenvalues and corresponding eigenvectors of
large real symmetric matrices. Journal of Computational
Physics, 17(1):87–94, 1975.

[30] Frank Jensen. Polarization consistent basis sets: Princi-

ples. J. Chem. Phys., 115:9113–9125, 2001.

[31] Editor: R. D. Johnson III.

NIST Computational
Chemistry Comparison and Benchmark Database.
NIST Standard Reference Database Number 101
[Online]. Available:
(Release
https://dx.doi.org/10.18434/T47C7Z.
National
Institute of Standards and Technology, Gaithersburg,
MD., 2020.

21, August

2020),

[32] Darragh P. O’Neill, Mih´aly K´allay, and J¨urgen Gauss.
Analytic evaluation of raman intensities in coupled-
cluster theory. Molecular Physics, 105(19-22):2447–2453,
2007.

[33] Robert Balawender, Michael Lesiuk, Frank De Proft,
Christian Van Alsenoy, and Paul Geerlings. Explor-
ing chemical space with alchemical derivatives: alchem-
ical transformations of h through ar and their ions as a
proof of concept. Physical Chemistry Chemical Physics,
21(43):23865–23879, 2019.

[34] Guido Falk von Rudorﬀ and O Anatole von Lilienfeld. Al-
chemical perturbation density functional theory. Physical
Review Research, 2(2):023220, 2020.

