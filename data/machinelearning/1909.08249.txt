BigData Applications from Graph Analytics to Machine
Learning by Aggregates in Recursion

Ariyam Das Youfu Li

Jin Wang Mingda Li Carlo Zaniolo

Department of Computer Science

University of California, Los Angeles, USA

{ariyam, youfuli, jinwang, limingda, zaniolo}@cs.ucla.edu

In the past, the semantic issues raised by the non-monotonic nature of aggregates often prevented
their use in the recursive statements of logic programs and deductive databases. However, the re-
cently introduced notion of Pre-mappability (PreM) has shown that, in key applications of interest,
aggregates can be used in recursion to optimize the perfect-model semantics of aggregate-stratiﬁed
programs. Therefore we can preserve the declarative formal semantics of such programs while
achieving a highly efﬁcient operational semantics that is conducive to scalable implementations on
parallel and distributed platforms. In this paper, we show that with PreM, a wide spectrum of clas-
sical algorithms of practical interest, ranging from graph analytics and dynamic programming based
optimization problems to data mining and machine learning applications can be concisely expressed
in declarative languages by using aggregates in recursion. Our examples are also used to show that
PreM can be checked using simple techniques and templatized veriﬁcation strategies. A wide range
of advanced BigData applications can now be expressed declaratively in logic-based languages, in-
cluding Datalog, Prolog, and even SQL, while enabling their execution with superior performance
and scalability [7], [5].

1

Introduction

Prolog’s success with advanced applications demonstrated the ability of declarative languages to express
powerful algorithms as “logic + control.” Then, after observing that in relational database management
systems, “control” and optimization are provided by the system implicitly, Datalog researchers sought
the ability to express powerful applications using only declarative logic-based constructs. After initial
successes, which e.g., led to the introduction of recursive queries in SQL, Datalog encountered two major
obstacles as data analytics grew increasingly complex: (i) lack of expressive power at the language level,
and (ii) lack of scalability and performance at the system level.

These problems became clear with the rise of more complex descriptive and predictive BigData an-
alytics. For instance, the in-depth study of data mining algorithms [9] carried out in the late 90s by the
IBM DB2 team concluded that the best way to carry out predictive analytics is to load the data from an
external database into main memory and then write an efﬁcient implementation in a procedural language
to mine the data from the cache. However, recent advances in architectures supporting in-memory paral-
lel and distributed computing have led to the renaissance of powerful declarative-language based systems
like LogicBlox [3], BigDatalog [11], SociaLite [10], BigDatalog-MC [13], Myria [12] and RASQL [7]
that can scale efﬁciently on multi-core machines as well as on distributed clusters. In fact, some of these
general-purpose systems like BigDatalog and RASQL have outperformed commercial graph engines like
GraphX for many classical graph analytic tasks. This has brought the focus back on to the ﬁrst chal-
lenge (i) – how to express the wide spectrum of predictive and prescriptive analytics in declarative query
languages. This problem has assumed great signiﬁcance today with the revolution of machine learning
B. Bogaerts, E. Erdem, P. Fodor, A. Formisano,
G. Ianni, D. Inclezan, G. Vidal, A. Villanueva,
M. De Vos, F. Yang (Eds.): International
Conference on Logic Programming 2019 (ICLP’19).
EPTCS 306, 2019, pp. 273–279, doi:10.4204/EPTCS.306.32

274

ComplexAnalytics byAggregates inRecursion

driven data analytics, since “in-database analytics” can save data scientists considerable time and effort,
which is otherwise repeatedly spent in extracting features from databases via multiple joins, aggrega-
tions and projections and then exporting the dataset for use in external learning tools to generate the
desired analytics [1]. Modern researchers have worked toward this “in-database analytics” solution by
writing user-deﬁned functions in procedural languages or using other low-level system interfaces, which
the query engines can then import [6]. However this approach raises three fundamental challenges:

• Productivity and Developability: Writing efﬁcient implementations of advanced data analytic
applications (or even modifying them) using low-level system APIs require data science knowl-
edge as well as system engineering skills. This can strongly hinder the productivity of data scien-
tists and thus the development of these advanced applications.

• Portability: User-deﬁned functions written in one system-level API may not be directly portable

to other systems where the architecture and underlying optimizations differ.

• Optimization: Here, the application developer is entrusted with the responsibility to write an
optimal user-deﬁned function, which is contrary to the work and vision of the database community
in the 90s [8] that aspired for a high-level declarative language like SQL supported by implicit
query optimization techniques.

In this paper, we argue that these problems can be addressed by simple extensions that enable the
use of aggregate functions in the recursive deﬁnitions of logic-based languages, such as Datalog, Prolog,
and even SQL. To that effect, we use different case studies to show that simple aggregates in declarative
recursive computation can express concisely and declaratively a host of advanced applications ranging
from graph analytics and dynamic programming (DP) based optimization problems to data mining and
machine learning (ML) algorithms. While the use of non-monotonic aggregates in recursive programs
raises difﬁcult semantic issues, the newly introduced notion of pre-mappability (PreM) [14] can ensure
the equivalence of former programs with that of aggregate-stratiﬁed programs under certain conditions.
Following this notion of PreM, we further illustrate step-by-step how a data scientist or an application
developer can very easily verify the semantic correctness of the declarative programs, which provide
these complex ML/AI-powered data analytic solutions. Before diving into these case studies, let us
brieﬂy introduce PreM.

2 Pre-Mappable Constraints in Graph Queries

We consider a Datalog query, given by rules r1.1 − r1.3, to compute the shortest paths between all vertices
in a graph given by the relation arc(X, Y, D), where D is the distance between vertices X and Y . In
this query, as shown in rule r1.3, the aggregate min is deﬁned on group-by variables X and Y , at a stratum
higher than the recursive rules (r1.1 and r1.2). Thus, we use the compact head notation often used in the
literature for aggregates.

r1.1 : path(X, Y, D) <- arc(X, Y, D).
r1.2 : path(X, Y, D) <- path(X, Z, Dxz), arc(Z, Y, Dzy), D = Dxz + Dzy.
r1.3 : shortestpath(X, Y, minhDi) <- path(X, Y, D).

The min and max aggregates can also be viewed as constraints enforced upon the results returned in
i.e., for the example at hand the min constraint (X, Y, minhDi) is enforced on
the head of the rule:
shortestpath(X, Y, D). This view allows us to deﬁne the semantics of r1.3 by re-expressing it with

Dasetal.

275

negation as shown in rules r1.4 and r1.5. This guarantees that the program has a perfect-model semantics,
although the iterated ﬁxpoint computation of such model can be very inefﬁcient and even non-terminating
in presence of cycles.

r1.4 : shortestpath(X, Y, D) <- path(X, Y, D), ¬betterpath(X, Y, D).
r1.5 : betterpath(X, Y, D) <- path(X, Y, D), path(X, Y, Dxy), Dxy < D.

The aforementioned inefﬁciency can be cured with PreM, whereby the min aggregate can be pushed
inside the recursion within the same stratum, as shown in rules r2.1 and r2.2. Because of PreM this trans-
formation is equivalence-preserving [4] since the program below has a minimal ﬁxpoint and computes
the shortestpath atoms of the original program in a ﬁnite number of iterations.

In general, this transformation holds true for any constraint γ and Immediate Consequence Operator

(deﬁned over recursive rules) T , if γ(T (I)) = γ(T (γ(I))), for every interpretation I of the program.

r2.1 : path(X, Y, minhDi) <- arc(X, Y, D).
r2.2 : path(X, Y, minhDi) <- path(X, Z, Dxz), arc(Z, Y, Dzy), D = Dxz + Dzy.
r2.3 : shortestpath(X, Y, D) <- path(X, Y, D).

Testing that PreM was satisﬁed during the execution of a program is straightforward [7]. Furthermore,
simple formal tools [16] are at hand to prove that PreM holds for any possible execution of a given
program, but due to space limitations we will simply use the reasoning embedded in those tools to
prove PreM for the cases at hand. For example, PreM is always satisﬁed by base rules such as r2.1
[15], and hence we only need to prove the property for the recursive rule r2.2, i.e. we prove that the
additional constraint ¯γ = (X, Z, minhDxzi) can be imposed on I = path(X, Z, Dxz) without changing the
result returned in the head in as much as this is constrained by γ = (X, Y, minhDxz + Dzyi). Indeed every
(X, Z, Dxz) that violates ¯γ produces a (X, Y, D) value that violates γ and it is thus eliminated. So the
addition of ¯γ does not change the result when γ is also in place. An even more dramatic situation occurs,
if we replace D = Dxz + Dzy with, say, D = 3.14 ∗ Dzy in our recursive rule. Then it is clear that the result
computed in the head of the rule is invariant w.r.t the value of Dxz, and therefore we could even select
the min of these values. In other words, we here have that T (I) = T (γ(I)). Obviously this is a special
case of PreM, that will be called intrinsic PreM (or iPreM in short). Another special case of PreM,
called radical PreM (or rPreM in short) occurs when the equality γ(T (I)) = T (γ(I)) holds. This is
for instance the case when the condition X = a is added to the rule r2.3, which speciﬁes that we are only
interested in the paths that originate in a. Then this condition can be pushed all the way to the non-
recursive base rule r2.1, leaving the recursive rule unchanged and thus amenable to the min optimization
previously described. While the use of rPreM in pushing constants was widely studied in the Datalog
literature, the use of iPreM and full PreM in dealing with non-monotonic constraints was introduced
in [15].

3 Dynamic Programming based Optimization Problem

Consider the classic coin change problem: given a value V and an inﬁnite supply of each of C1,C2, ...,Cn
valued coins, what is the minimum number of coins needed to get change for V amount? Traditionally,
declarative programming languages attempt to solve this through a stratiﬁed program: the lower stratum
recursively enumerates over all the possible ways to make up the value V, while the min aggregate is
applied at the next stratum to select the desired answer. Obviously, such simple stratiﬁed recursive

276

ComplexAnalytics byAggregates inRecursion

solutions are computationally extremely inefﬁcient. In procedural languages, these problems are solved
efﬁciently with dynamic programming (DP) based optimization. Such DP based solutions utilize the
“optimal substructure property” of the problem i.e., the optimal solution of the given problem can be
evaluated from the optimal solutions of its sub-problems, which are, in turn, progressively calculated
and stored in memory (memoization). For example, consider an extensional predicate coins having the
atoms coins(2), coins(3) and coins(6), which represent coins with values 2 cents, 3 cents and 6
cents respectively. Now, we need at least 2 coins to make up the value V = 9 cents (3 cents + 6 cents).
Note, we can also make up 6 cents using 3 coins of 2 cents each. However, the optimal solution to
make up 9 cents should also in turn use the best alternative available to make up 6 cents, which is to
use 1 coin of 6 cent itself. Based on this discussion, the example program below, described by rules
r3.1 − r3.2, shows how this solution can be succinctly expressed in Datalog with aggregate in recursion.
This program can be executed in a top-down fashion and the optimal number of coins required to make
up the change is determined by passing the value of V (9 in our example) to the recursive predicate num
(as shown by the query goal).

r3.1 : num(C, 1) ← coins(C).
r3.2 : num(V, minhNi) ← coins(C), C < V, X = V − C, num(X, Y), N = Y + 1.
? − num(9, N).

The successive bindings for the predicate num are calculated from the coin value C under consid-
eration (as V - C) and are passed in a top-down manner (top-down information passing) till the exit
rule r3.1 is reached. The min aggregate inside recursion ensures that for every top-down recursive call
(sub-problem) only the optimal solution is retained. With this said materialization of the intensional
predicate num (analogous to memoization), this program execution is almost akin to a DP based solution
except one difference — pure DP based implementations are usually executed in a bottom-up manner.
In the same vein, it is worth mentioning that many interesting DP algorithms (e.g., computing minimum
number of operations required for a chain matrix multiplication) can also be effectively computed with
queries, containing aggregates in recursion, using bottom-up semi-naive evaluation identical to the DP
implementations. We next focus our attention on validating PreM for the above program. Note the
deﬁnition of PreM, iPreM or rPreM does not refer to any evaluation strategy for processing the recur-
sive query i.e. the deﬁnitions are agnostic of top-down, bottom-up or magic sets based recursive query
evaluation strategies. Interestingly, the use of “optimal substructure property” in DP algorithms itself
guarantees the validity of PreM. This can be illustrated as follows with respect to the min constraint:
consider inserting an additional constraint ¯γ = num(X, minhYi) on I = num(V, N) in the recursive rule r3.2.
Naturally, any Y, which does not satisfy ¯γ, will produce a N that violates the min aggregate in the head
of rule r3.2 and hence will be discarded. Since, the imposition of ¯γ in the rule body does not change the
result when γ in the head (of rule r3.2) is applied, the min constraint can be pushed inside recursion i.e.,
γ(T (I)) = γ(T (γ(I))), thus validating PreM.

4 K-Nearest Neighbors Classiﬁer

K-nearest neighbors is a popular non-parametric instance-based lazy classiﬁer, which stores all instances
of the training data. Classiﬁcation of a test point is computed based on a simple majority vote among K
nearest1 training instances of the test point, where the latter is assigned into the class that majority of the
K neighbors belong to.

1Based on metrics like Euclidean distance.

Dasetal.

277

In the Datalog program, deﬁned by rules r4.1 − r4.7, the predicate te(Id,X,Y) denotes a relational
instance of two-dimensional test points represented by their Id and coordinates (X,Y). Likewise, the
predicate tr(Id,X,Y,Label) denotes the relational instance of training points represented by their Id,
coordinates (X,Y) and corresponding class Label. In this example, rule r4.1 calculates the Euclidean dis-
tance between the test and all the training points, while the recursive rule r4.3 with aggregate determines
the nearest K neighbors for each of the test point. Symbolically, the predicate nearestK(IdA,D,IdB,J)
represents the training instance IdB is the J-th nearest neighbor of the test point IdA located at a distance
of D apart. Finally, rules r4.4 − r4.5 aggregates the votes for different classes and performs the classiﬁ-
cation by majority voting. cMax in rule r4.5 is a special construct that extracts the corresponding class
Label that received the maximum votes for a given test point. Rule r4.5 can be alternatively expressed
without cMax, as shown in rules r′
4.5. In terms of simple relational algebra, the constructs cMin or
cMax can be thought of denoting the projection of speciﬁc columns (attributes like Id2 in r4.3 and Label
in r4.5) from a tuple, which satisﬁes the min or max aggregate constraint respectively. However, these
special constructs are mere syntactic sugar as illustrated before with equivalent rules r′
4.5, which do
not use any of these constructs.

4.5, r′′

4.5, r′′

2
r4.1 : dist(Id1, Id2, D) ← te(Id1, X1, Y1), tr(Id2, X2, Y2, Label), D = (X1 − X2)
r4.2 : nearestK(Id, −1, −1, nil) ← te(Id, X, Y).
r4.3 : nearestK(Id1, minhDi, cMinhId2i, J1) ← dist(Id1, Id2, D), nearestK(Id1, S, Id3, J),

+ (Y1 − Y2)

2.

larger(S, Id3, D, Id2), J1 = J + 1, J1 ≤ K.
r4.4 : votes(Id1, Label, counthId2i) ← nearestK(Id1, D, Id2, J), tr(Id2, X, Y, Label).
r4.5 : classify(Id1, maxhVi, cMaxhLabeli) ← votes(Id1, Label, V).
r4.6 : larger(S, Id3, D, Id2) ← D > S.
r4.7 : larger(S, Id3, D, Id2) ← D = S, Id2 > Id3.

r′
4.5 : classify(Id1, V, Label) ← votes(Id1, Label, V), ¬higher(Id1, V).
4.5 : higher(Id1, V) ← votes(Id1, Label, V), votes(Id1, Label′, W), W > V.
r′′
We now verify that the min aggregate in the recursive rule r4.2 − r4.3 satisﬁes PreM and ensures
semantic correctness. Note the exit rule r4.2 always trivially satisﬁes the PreM deﬁnition, since the
interpretation, I of the recursive predicate is initially an empty set. Thus, we focus our attention only on
the recursive rule r4.3. We now prove that r4.3 satisﬁes iPreM: consider inserting an additional constraint
(Id1, J, minhSi) in the body of the rule r4.3 that deﬁnes the min constraint on the recursive predicate
nearestK in the body (creating an interpretation γ(I) in the rule body). If this min constraint in the body
ensures that for a given Id1 and J, S is the minimum distance of the J-th nearest neighbor, then for the
corresponding valid J1(≤ K), r4.3 without the min aggregate in the head will produce all potential J1-th
neighbors whose distances are higher than S (i.e., distance of J-th neighbor), thereby being identical to
T (I). Thus, we have, T (I) = T (γ(I)) validating r4.3 satisﬁes iPreM, since the recursive rule remains
invariant to the inclusion of the additional constraint (Id1, J, minhSi) in the rule body.

Similar to K-nearest neighbor classiﬁer, several other data mining algorithms like K-spanning tree
based graph clustering, vertex and edge based clustering, tree approximation of Bayesian networks,
etc. — all depend on the discovery of a sub-sequence of elements in sorted order and can likewise be
expressed with PreM using aggregates in recursion. It is also worth observing that while our declarative
K-nearest algorithm requires more lines of code than the other cases presented in this paper, it can still be
expressed with only seven lines of logical rules as compared to standard learning tools like Scikit-learn
that implements this in 150+ lines of procedural or object-oriented code.

278

ComplexAnalytics byAggregates inRecursion

5

Iterative-Convergent Machine Learning Models

Iterative-convergent machine learning (ML) models like SVM, perceptron, linear regression, logistic re-
gression models, etc. are often trained with batch gradient descent and can be written declaratively as
Datalog programs with XY-stratiﬁcation, as shown in [2]. Rules r5.1 − r5.3 show a simple XY-stratiﬁed
program template to train a typical iterative-convergent machine learning model. J denotes the tempo-
ral argument, while training_data (in r5.2) is an extensional predicate representing the training set
and model(J, M) is an intensional predicate deﬁning the model M learned at iteration J. The model is
initialized using the predicate init_model and the X -rule r5.2 computes the corresponding error E and
gradient G at every iteration based on the current model and the training data using the predicate compute
(deﬁned according to the learning algorithm under consideration). The ﬁnal Y -rule r5.3 assigns the new
model for the next iteration based on the current model and the associated gradient using the update
predicate (also deﬁned according to the learning algorithm at hand). Since many iterative-convergent
ML models are formulated as convex optimization problems, the error gradually reduces over iterations
and the model converges when the error reduces below a threshold δ.

r5.1 : model(0, M) ← init_model(M).
r5.2 : stats(J, E, G) ← model(J, M), training_data(Id, R), compute(M, R, E, G).
r5.3 : model(J + 1, M′) ← stats(J, E, G), model(J, M), update(M, G, M′), E > δ.

Interestingly, an equivalent version of the above program can be expressed with aggregates and pre-
mappable constraints in recursion, as shown with rules r′
5.4. The stopping criterion γ : E > δ pushed
5.3 satisﬁes rPreM, since T (γ(I)) and γ(T (I)) would both generate the same
inside the recursion in rule r′
atoms in find, where the error E is above the threshold δ (assuming convex optimization function). Also
note, the max aggregate deﬁned over the recursive predicate find trivially satisﬁes iPreM.

5.1 −r′

r′
5.1 : model(0, M) ← init_model(M).
r′
5.2 : stats(J, E, G) ← model(J, M), training_data(Id, R), compute(M, R, E, G).
r′
5.3 : find(maxhJi, cMaxhMi, cMaxhEi, cMaxhGi) ← model(J, M), stats(J, E, G), E > δ.
5.4 : model(J1, M′) ← find(J, M, E, G), update(M, G, M′), J1 = J + 1.
r′

6 Conclusion

Today BigData applications are often developed and operated in silos, which only support a particular
family of tasks – e.g. only descriptive analytics or only graph analytics or only some ML models and
so on. This lack of a unifying model makes development extremely ad hoc, and hard to port efﬁciently
over multiple platforms. For instance, on many graph applications native Scala with Apache Spark can-
not match the performance of systems like RaSQL, which can plan the best data partitioning/swapping
strategy for the whole query and optimize the semi-naive evaluation accordingly [7]. However, as demon-
strated in this paper, a simple extension to declarative programming model, which allows use of aggre-
gates and easily veriﬁable pre-mappable constraints in recursion, can enable developers to write concise
declarative programs (in Datalog, Prolog or SQL) and express a plethora of applications ranging from
graph analytics to data mining and machine learning algorithms. This will also increase the productivity
of developers and data scientists, since they can work only on the logical aspect of the program without
being concerned about the underlying physical optimizations.

Dasetal.

References

279

[1] Mahmoud Abo Khamis, Hung Q. Ngo, XuanLong Nguyen, Dan Olteanu & Maximilian Schleich (2018):
In-Database Learning with Sparse Tensors. In: SIGMOD/PODS’18, doi:10.1145/3196959.3196960.
[2] Vinayak R. Borkar et al. (2012): Declarative Systems for Large-Scale Machine Learning. In: Bulletinofthe

IEEEComputerSocietyTechnicalCommitteeonDataEngineering, doi:10.1.1.362.4961.

[3] Molham Aref, Balder ten Cate, Todd J. Green, Benny Kimelfeld, Dan Olteanu, Emir Pasalic, Todd L. Veld-
huizen & Geoffrey Washburn (2015): Design and Implementation of the LogicBlox System. In: SIGMOD’15,
doi:10.1145/2723372.2742796.

[4] Tyson Condie, Ariyam Das, Matteo Interlandi, Alexander Shkapsky, Mohan Yang & Carlo Zaniolo (2018):
Scaling-up reasoning and advanced analytics on BigData. TPLP 18(5-6), pp. 806–845, doi:10.1017/
S1471068418000418.

[5] Ariyam Das & Carlo Zaniolo (2019): A Case for Stale Synchronous Distributed Model for Declarative

Recursive Computation. In: 35thInternationalConferenceonLogicProgramming, ICLP’19.

[6] Xixuan Feng, Arun Kumar, Benjamin Recht & Christopher Ré (2012): Towards a Uniﬁed Architecture for

in-RDBMS Analytics. In: SIGMOD’12, pp. 325–336, doi:10.1145/2213836.2213874.

[7] Jiaqi Gu, Yugo Watanabe, William Mazza, Alexander Shkapsky, Mohan Yang, Ling Ding & Carlo Zaniolo
(2019): RaSQL: Greater Power and Performance for Big Data Analytics with Recursive-aggregate-SQL on
Spark. In: SIGMOD’19, doi:10.1145/3299869.3324959.

[8] Tomasz Imielinski & Heikki Mannila (1996): A Database Perspective on Knowledge Discovery. Commun.

ACM 39(11), pp. 58–64, doi:10.1145/240455.240472.

[9] Sunita Sarawagi, Shiby Thomas & Rakesh Agrawal (2000): Integrating Association Rule Mining with Re-
lational Database Systems: Alternatives and Implications. Data Mining and Knowledge Discovery 4(2),
doi:10.1145/276304.276335.

[10] Jiwon Seo, Jongsoo Park, Jaeho Shin & Monica S. Lam (2013): Distributed Socialite: A Datalog-based
Language for Large-scale Graph Analysis. Proc. VLDB Endow. 6(14), pp. 1906–1917, doi:10.14778/
2556549.2556572.

[11] Alexander Shkapsky, Mohan Yang, Matteo Interlandi, Hsuan Chiu, Tyson Condie & Carlo Zaniolo (2016):
Big Data Analytics with Datalog Queries on Spark. In: SIGMOD’16, doi:10.1145/2882903.2915229.
[12] Jingjing Wang, Magdalena Balazinska & Daniel Halperin (2015): Asynchronous and Fault-tolerant Recursive
Datalog Evaluation in Shared-nothing Engines. Proc.VLDBEndow.8(12), pp. 1542–1553, doi:10.14778/
2824032.2824052.

[13] Mohan Yang, Alexander Shkapsky & Carlo Zaniolo (2017): Scaling up the performance of more powerful
Datalog systems on multicore machines. VLDBJ. 26(2), pp. 229–248, doi:10.1007/s00778-016-0448-z.
[14] Carlo Zaniolo, Mohan Yang, Ariyam Das & Matteo Interlandi (2016): The Magic of Pushing Extrema into

Recursion: Simple, Powerful Datalog Programs. In: AMW’16.

[15] Carlo Zaniolo, Mohan Yang, Matteo Interlandi, Ariyam Das, Alexander Shkapsky & Tyson Condie (2017):
Fixpoint semantics and optimization of recursive Datalog programs with aggregates. TPLP 17(5-6), pp.
1048–1065, doi:10.1017/S1471068417000436.

[16] Carlo Zaniolo, Mohan Yang, Matteo Interlandi, Ariyam Das, Alexander Shkapsky & Tyson Condie (2018):
Declarative BigData Algorithms via Aggregates and Relational Database Dependencies. In: AMW’18.

