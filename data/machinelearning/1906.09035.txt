9
1
0
2

n
u
J

1
2

]

Y
S
.
s
s
e
e
[

1
v
5
3
0
9
0
.
6
0
9
1
:
v
i
X
r
a

Revised Progressive-Hedging-Algorithm Based
Two-layer Solution Scheme
for Bayesian Reinforcement Learning

Xin Huang
The Chinese University of Hong Kong
huangxin@se.cuhk.edu.hk

Duan Li∗
City University of Hong Kong
dli226@cityu.edu.hk

Daniel Z. Long
The Chinese University of Hong Kong
zylong@se.cuhk.edu.hk

Abstract

Stochastic control with both inherent random system noise and lack of knowledge
on system parameters constitutes the core and fundamental topic in reinforcement
learning (RL), especially under non-episodic situations where online learning is
much more demanding. This challenge has been notably addressed in Bayesian
RL recently where some approximation techniques have been developed to ﬁnd
suboptimal policies. While existing approaches mainly focus on approximating
the value function, or on involving Thompson sampling, we propose a novel two-
layer solution scheme in this paper to approximate the optimal policy directly,
by combining the time-decomposition based dynamic programming (DP) at the
lower layer and the scenario-decomposition based revised progressive hedging al-
gorithm (PHA) at the upper layer, for a type of Bayesian RL problem. The key fea-
ture of our approach is to separate reducible system uncertainty from irreducible
one at two different layers, thus decomposing and conquering. We demonstrate
our solution framework more especially via the linear-quadratic-Gaussian prob-
lem with unknown gain, which, although seemingly simple, has been a notorious
subject over more than half century in dual control.

1 Introduction

Traditional reinforcement learning (RL) algorithms have been mainly developed under episodic
settings, where learning can be done ofﬂine by repeated simulations of an unchanged system
(Sutton and Barto, 2018; Bertsekas, 2019). However, RL under a non-episodic problem setting with
uncertainties resulted from both inherent systems random disturbance and lack of knowledge on
system parameters still remains challenging, since such a problem requires learning online and the
exploitation-exploration tradeoff under such a setting becomes much more crucial and prominent.
Bayesian RL has been thus emerged to tackle this essential issue in the machine learning commu-
nity [Please see a comprehensive survey by (Ghavamzadeh et al., 2015)]. By augmenting the state
space with probabilistic belief on those unknown systems parameters, the corresponding Bellman
equation naturally optimizes the tradeoff between the exploitation by utilizing the current informa-
tion from hyperstate and exploration by foreseeing the outcomes of applied future actions using the
Bayesian law, which leads to active learning. As a consequence, the resulting current action from

∗Corresponding author.

Preprint. Under review.

 
 
 
 
 
 
DP takes into account not only the current state and belief but also the future observations as future
actions’ outcomes by conditional planning based on the posterior belief (see Poupart et al., 2006).

Actually, a similar subject termed dual control was invented long ago in Feldbaum (1961). Com-
pared with classical adaptive controllers, the dual controller, as a function of the hyperstate, pos-
sesses dual features of both caution to control the process (i.e., exploitation) and probing to learn
(identify) the system (i.e., exploration) (see Bar-Shalom, 1981). No matter whether in Bayesian RL
or dual control, however, to ﬁnd an optimal policy is always analytically intractable, simply because
of the very nonlinearity of inference, even under the Gaussian assumption (Aoki, 1967). It has been
a long standing research challenge for over a half century in dual control, even for the “toy” example
of discrete-time linear-quadratic-Gaussian (LQG) control problem with unknown gain. The subject
becomes hot again recently in RL as evidenced by increasing attention in the community. For in-
stance, Dallaire et al. (2009) provide an algorithm within Bayesian RL framework in order to learn
an LQG system without assuming any parametric form for the transition, observation and reward
function. As they mention, however, it is hard to evaluate the control performance of their algorithm
and compare with others. Ouyang et al. (2017) address LQG case with unknown system parameters
from Thompson sampling (Thompson, 1933) perspective. Such an approach of making decision
based on one sample from current probabilistic model dose not take into account the learning effect
of future actions. Researchers in RL, for example Klenske and Hennig (2016) among others, became
aware of some early work in dual control (such as Tse and Bar-Shalom, 1973). It turns out that such
algorithms are mostly classiﬁed as approximation on the inference for Bayesian RL. Our work in
this paper is different from the existing literature in both RL and dual control. We propose for a type
of Bayesian RL problem a novel solution framework based on techniques from progressive hedg-
ing algorithm (PHA) by Rockafellar and Wets (1991). More precisely, we consider in this paper a
discrete-time LQG problem with ﬁxed but unknown gain in system dynamics, as a starting point
in developing novel RL solution algorithms for this general class of problem. We would also like
to emphasize that a discrete-time LQG problem with ﬁxed but unknown gain in system dynamics
is closely related to a well-studied dynamic portfolio selection problem, see for example Li and Ng
(2000). We adopt a two-layer solution scheme, where at the lower layer, we solve a family of re-
duced stochastic control problem involving only irreducible uncertainty (i.e., random system noise)
while ﬁxing the reducible uncertainty (i.e., unknown parameter) at one possible value. For LQG
case, the lower-layer problem can be analytically solved by dynamic programming (DP). At the up-
per layer, we apply a revised version of PHA in Rockafellar and Wets (1991) to iteratively aggregate
the family of optimal policies from the lower layer to an implementable policy with respect to the
posterior probabilities updated from nominal trajectories, which is motivated by Li et al. (2008). We
ﬁnally show in Section 4 by experiments that our new approach leads to a better approximate policy
with lower average cost than the outcome generated by DUL ((Deshpande et al., 1973)) which is
still a leading passive learning method in dual control up to date, and the other three methods using
ideas borrowed from greedy method, ǫ-greedy and Thompson sampling.

The rest of the paper is arranged as follows. We present in Section 2 the mathematical formulation
of RL problem concerned. We then propose our two-layer scheme in Section 3 with an illustrative
example, followed by the experimental results on performance comparing with other algorithms in
Section 4. We conclude our paper in Section 5.

2 Problem formulation

2.1 Bayesian reinforcement learning problems under consideration

We consider a class of Bayesian RL problem with the state dynamics xt+1 = ft(xt, ut, ξt|θ) for
t = 0, 1, · · · , T − 1 and x0 given, where T is the ﬁnite time horizon, xt ∈ Rn is the state which is
assumed to be perfectly observed at time t, and ut ∈ Rm is the control. The state transition function
ft can be nonlinear in general, and is determined by a ﬁxed parameter θ ∈ Rd which is, however,
unknown to the agent, who only has some prior belief on its distribution p0(θ). Noise ξt ∈ Rn is the
i.i.d. Gaussian disturbance with mean 0 and covariance Σξ, and is independent of θ.

Given the above system, the goal of the agent is to minimize the following expected total cost,

L

u|x0, p0(θ)

= Eθ,ξ

(cid:0)

(cid:1)

gT (xT ) +

"

T −1

t=0
X

2

x0, p0(θ)

#

gt(xt, ut, ξt)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

over all admissible policies u = (u0, u1, · · · , uT −1)′ ∈ U0 × U1 × · · · × UT −1, where gt’s and gT
are cost functions. We also assume that when ﬁxing θ at θi, L(·|x0, δ(θ = θi)) is convex w.r.t. u, as
required by PHA. In the following we denote δ(θ = θi) by δi.

Note that the uncertainty from θ is due to the lack of knowledge of the agent, and such an uncertainty
is reducible by learning, whereas the randomness incurred by system disturbance ξt’s is not. Let
us deﬁne the information set as I t = {x0, x1, . . . , xt, u0, u1, . . . , ut−1}, t = 1, · · · , T − 1, with
I 0 = {p0(θ), x0}, and denote the posterior distribution of θ at time t by pt(θ|I t). Then the Bayesian
law leads to

pt(θ|I t) = pt(θ|xt, ut−1, I t−1) ∝ ψ(xt|θ, xt−1, ut−1) × pt−1(θ|I t−1),

(1)
for t = 1, · · · , T − 1 with p0(θ|I 0) = p0(θ). For simplicity, we denote pt(θ|I t) by pt(θ), but keep
in mind that the calculation on belief of θ at time t is I t dependent. Moreover, the conditional den-
sity of xt is given by ψ(xt|θ, xt−1, ut−1) = φ(f −1
(xt))| with
φ(z; µ, Σ) being the normal density at z with mean µ and variance Σ, and J being the Jacobian ma-
trix of f −1
t−1(xt|θ, xt−1, ut−1). We thus ﬁnd the recursive relationship between pt+1(θ) and pt(θ).
When implementing controls successively, the agent will update the belief on θ accordingly after ob-
serving the realized state, and, hopefully, the agent’s knowledge of θ will degenerate when the time
horizon T is large enough. By augmenting the original state space with belief of model parameters,
the Bellman equation for the optimal value function Jt of the augmented system is given by

t−1(xt|θ, xt−1, ut−1); 0, Σξ)|det(Jf

−1
t−1

xt+1, pt+1(θ)

xt, pt(θ)

,

(2)

Jt

xt, pt(θ)

= min
ut

Eθ,ξt

gt(xt, ut, ξt) + Jt+1
h

(cid:0)

(cid:1)

for t = 0, · · · , T − 1 with terminal condition JT (xT , pT (θ)) = gT (xT ). Theoretically, we could
handle Bayesian RL problems by DP, through augmenting the state space and keeping track of
belief updating, thus achieving optimal balance between exploitation and exploration. The resulting
optimal policy, if we are able to derive it, includes an essential feature of active learning, in the sense
that taking into account in (2) the effect of future actions and beliefs via conditional planning before
we actually observe the future states. Unfortunately, due to the high nonlinearity of (1), solving the
Bellman equation (2) in general is impossible, at least intractable.

(cid:0)

(cid:1)(cid:12)
(cid:12)

i

2.2 LQG problem with unknown gain

As a speciﬁc case of the general form described in the above subsection, we consider in this subsec-
tion the following discrete-time LQG control problem with an unknown gain,

(P)

Eθ,ξ

min
u

1
2

"

T −1

x′
T QxT +

1
2

x′
tQxt +

u′
tRut

x0, p0(θ)

1
2

#

(cid:17)(cid:12)
(cid:12)
(cid:12)

t=0 (cid:16)
X
s.t. xt+1 = Axt + B(θ)ut + ξt, t = 0, 1, · · · , T − 1,
where A is given, and the gain matrix B is an unknown constant matrix determined by an unknown
parameter θ. The LQG problem under such an assumption is not trivial, as Åström and Helmersson
(1986) pointed out more than three decades ago, and still remains as an open challenge, evidenced
by the recent work of Klenske and Hennig (2016) in RL community, in which the authors developed
an approximate dual method for LQG problems with unknown parameters. Moreover, this type of
problem is also of great practical interests. For instance, in the dynamic portfolio selection problem
in Li and Ng (2000), the wealth dynamics is governed by a multiple-input and single-output linear
system with the wealth level being the state and dollar amounts to invest on multiple risky assets
being the control. The scalar A in such a case is the deterministic risk-free rate, while the vector B is
the excess return vector of risky assets. As an extension of Li and Ng (2000), B can be decomposed
into an unknown but ﬁxed mean (depending on whether the market is bull, bear or others) and an
i.i.d. Gaussian noise. What’s more, due to the dynamic nature of the market, making a ﬁnancial
investment decision cannot be an episodic experiment.

We assume in this paper that θ takes one of N possible values, θ1, θ2, . . . , θN , with prior belief
p0(θ) = (p01, p02, . . . , p0N )′ where p0i = P(θ = θi | I 0), i = 1, · · · , N . For simplicity we set
B(θi) = Bi for all i. Let the posterior probability of θi at time t + 1 be p(t+1)i = P(θ = θi | I t+1).
Then, by the Bayesian law, we have, for t = 0, · · · , T − 1,

p(t+1)i =

φ(xt+1; Axt + Biut, Σξ)pti
N
j=1[φ(xt+1; Axt + Bjut, Σξ)ptj]

(3)

P

3

which is very nonlinear with respect to the realized xt+1. Furthermore, the Bellman equation be-
comes

Jt

xt, pt(θ)

1
2
(cid:20)
with terminal condition JT
xT , pT (θ)
longer quadratic, and DP would fail to deliver an analytical solution.

1
2
2 x′
T QxT . It is easy to see that the value function is no

u′
tRut + Jt+1

xt+1, pt+1(θ)

x′
tQxt +

= min
ut

xt, pt(θ)

Eθ,ξ

= 1

(cid:1)(cid:12)
(cid:12)
(cid:12)

(4)

(cid:21)

(cid:0)

(cid:0)

(cid:1)

(cid:0)

(cid:1)

3 A two-layer solution scheme

We propose now our two-layer solution scheme for the class of Bayesian RL problem presented in
the previous section. The basic idea is to separate reducible and irreducible uncertainties into two
different layers, ﬁrst decompose and then conquer. For simplicity and clearness of our presentation,
we focus our investigation to the LQG problem with unknown gain described in Subsection 2.2.

3.1 Classical PHA

While DP is a time-decomposition based algorithm, the progressive hedging algorithm (PHA) by
Rockafellar and Wets (1991) is a scenario-decomposition based scheme. PHA has been developed
for solving multistage stochastic decision-making problems with ﬁnite scenarios. We now demon-
strate how we can apply PHA to solve a naive version of problem (P) in which the prior knowledge
of parameter θ is not updated from learning. Note that the possible value of θ takes from a ﬁnite set,
with a ﬁnite scenario index set S = {1, 2, · · · , N }. When we set θ = θi hence B = Bi, i ∈ S, the
related scenario subproblem is

(Pi)

min
u

L(u|x0, δi) := Eξ

1
2

x′
T QxT +

h

T −1

t=0 (cid:16)
X

1
2

x′
tQxt +

1
2

u′
tRut

x0

i

(cid:17)(cid:12)
(cid:12)
(cid:12)

s.t. xt+1 = Axt + Biut + ξt, t = 0, 1, · · · , T − 1,

which returns to a classical LQG problem with known gain and irreducible uncertainty associated
with {ξt}. Scenario subproblem (Pi) can be solved analytically by DP with the following optimal
feedback policy at time t (refer to Kirk, 1970, for example)

iP(t+1)iBi)−1B′

u∗
(5)
ti(xt) = −Ktixt,
where Kti = (R+B′
tiRKti+(A−BiKti)′P(t+1)i(A−
iP(t+1)iA and Pti = Q+K ′
BiKti). If we do not update the prior knowledge of parameter θ using future observations, we have
a naive version of problem (P),
(PN aive)

i∈S p0iL(u|x0, δi) s.t. xt+1 = Axt + B(θ)ut + ξt, t = 0, 1, · · · , T − 1.
To solve (PN aive), PHA, as a scenario-decomposition method, ﬁrst decomposes it into N scenario
subproblems (Pi), i ∈ S, and generates the scenario-based feedback policy for each i using (5),

min
u

P

u[0]

i (·) =

0i(x0), u∗
u∗

1i(x1), · · · , u∗

(T −1)i(xN −1)

′

,

(6)

which does not satisfy the non-anticipativity. To proceed, PHA projects all u[0]
i ’s into a non-
(cid:0)
anticipative space to get an implementable feedback policy ˆu[0] =
. Compared with a
scenario-speciﬁc policy (like u[0]
i ), an implementable one (like ˆu[0]) is indifferent to all scenarios.
In order to generate the ﬁnal optimal implementable feedback policy, PHA next adopts the aug-
mented Lagrangian method by adding some appropriate penalties to the original scenario subprob-
lems. More speciﬁcally, PHA solves, in parallel for all i ∈ S, the resulting Lagrangian subproblems

(cid:1)
i∈S p0iu[0]

P

i

(P [ν]

i ) min
u

L(u|x0, δi) + u′w[ν]

i +

rku − ˆu[ν]k2,

1
2

in each iteration ν = 0, 1, · · · , whose optimal solution is denoted by u[ν+1]
, with the next im-
i∈S p0iu[ν+1]
plementable feedback policy used for (P [ν+1]
. Furthermore, the
i
u[ν+1]
Lagrangian multiplier for scenario i is updated via w[ν+1]
with initial
i
w[0]
i being zero vector for all i; the penalty parameter r > 0 is predetermined, and k · k denotes
2-norm hereafter. The process repeats until the convergence occurs, which is guaranteed by a con-
vexity of the scenario subproblem w.r.t. the control variable according to the PHA requirement, and
is actually the optimal solution to the problem (PN aive).

) being ˆu[ν+1] =
= w[ν]

− ˆu[ν+1]

i + r
P

(cid:1)

(cid:0)

i

i

i

4

3.2 Revised PHA-based two-layer solution scheme

In order to incorporate learning feature into our solution algorithm for (P), we need to update the
knowledge about uncertain parameter θ. In our revised PHA-based two-layer solution scheme, ev-
ery step is the same as in PHA for the naive version (PN aive) described in the previous subsection,
except that, when forming the implementable feedback policy at iteration ν, we need to take condi-
tional expectations using the posterior probabilities at each time t = 0, 1, · · · , T − 2,

ˆu[ν]
t+1 (·) =

i∈S p(t+1)iu[ν]

(t+1)i (·) ,

(7)

) (ν ≥ 1),

(t+1)i (·) of u[ν]

where u[ν]
with initial u[0]
i
substitute (3) into (7), ˆu[ν]
when dealing with (P [ν]
nominal value,

i (·) comes from solving the ith Lagrangian subproblem (P [ν−1]

P

i

given by (6). As evidenced from (3), p(t+1)i depends on I t+1.

If we directly
t+1(·) becomes nonlinear in state, which in turn leads to the intractability
i ) in the next iteration. We bypass this difﬁculty by setting p(t+1)i at its

¯p[ν]
(t+1)i =

ti , Σξ)¯p[ν]

ti

t+1; ¯µ[ν]

φ(¯x[ν]
j∈S[φ(¯x[ν]

t+1; ¯µ[ν]

tj , Σξ)¯p[ν]
tj ]

(8)

where ¯µ[ν]

ti = A¯x[ν]

t + Bi ˆu[ν]

t (¯x[ν]

P

t ) and the nominal state is determined sequentially by

A¯x[ν]

¯x[ν]
t+1 = Eθ,ξt
= A¯x[ν]
t +
(cid:2)

t + B(θ)ˆu[ν]
i∈S ¯p[ν]
ti Bi
for t = 0, 1, · · · , T − 1 with nominal initial state ¯x[ν]
0 = x0 and nominal prior distribution ¯p[ν]
0 (θ) =
p0(θ) held for every ν. Then the implementable feedback policy obtained at t + 1 becomes linear
with respect to the state compared with (7),

t (¯x[ν]
t ) + ξt
t (¯x[ν]
ˆu[ν]
t )

t (θ)

, ¯p[ν]

¯x[ν]
t

(cid:0) P

(9)

(cid:12)
(cid:12)

(cid:1)

(cid:3)

ˆu[ν]
t+1 (·) =

i∈S ¯p[ν]

(t+1)iu[ν]

(t+1)i (·) .

(10)

This relaxation to a linear policy enables us to proceed the iteration until converging to a ﬁnal
approximate feedback policy of our two-layer (TL) method,

P

uT L
t

(xt) = ˆu[ν]

t (xt) = − ˆK [ν]

t xt, as ν → ∞, for all t.

(11)

In practice, the algorithm will stop when the predetermined convergence tolerance level (tol) is
satisﬁed, namely, err < tol, where the error is deﬁned by

err :=

kˆu[ν+1] − ˆu[ν]k2 + 1
r2

i∈S kw[ν+1]

i

− w[ν]

i k2.

(12)

We summarize the complete algorithm as the pseudocode in Algorithm 1.

P

q

Conﬁning ourselves on the nominal trajectory, on the one hand, we are able to forwardly calculate an
implementable policy and the nominal posterior distribution along the time horizon in each iteration,
on the other hand, however, since Bellman equation in (4) considers the entire (continuous) state
space, the converged nominal-based policy is only suboptimal. Nevertheless, as we will demonstrate
in Section 4, our newly-derived approximation performs better in an average sense than the prevalent
passive learning method and others borrowed from traditional RL algorithms. Before that, let us take
an example to further explain our algorithm.

3.3 Illustration of the algorithm

In this subsection, we use a scalar system to illustrate Algorithm 1 in details. More speciﬁcally, the
system dynamics becomes xt+1 = axt + b(θ)ut + ξt for t = 0, 1, · · · , T − 1, where we denote
b(θi) = bi , ∀i ∈ S = {1, · · · , N } and the i.i.d. system random disturbance ξt follows N (0, σ2),
together with other usual assumptions for (P).
Solving the scenario subproblem minu L(u|x0, δi) by DP for each i at the lower layer, we obtain the
scenario-speciﬁc feedback policy u[0]
ti =

ti xt for all t, with backward recursions K [0]

ti (xt) = −K [0]

5

Algorithm 1: Revised PHA-based Two-layer Algorithm for LQG with An Unknown Gain
Input: System known parameters and functions, the initial state, the prior belief of θ with the scenario index

set S = {1, · · · , N }, the algorithm tolerance level tol, and the penalty r

Output: Approximate feedback policy (suboptimal)
1. Lower layer: deal with scenario subproblems.
solve (Pi) to get u[0]
for all i ∈ S;
i
2. Upper layer: active learning along a nominal trajectory.
2.1 Initialize the implementable feedback policy ˆu[0] and the Lagrangian multiplier w[0]
i
initial Lagrangian subproblems (P [0]
while ν = 0 do

i ):

in order to form the

set the nominal initial state ¯x[0]
0 , ˆu[0]
obtain ˆu[0] = {ˆu[0]
for t : 0 → (T − 1) do

1 , · · · , ˆu[0]

0 = x0 and the nominal prior distribution ¯p[0]

0 (θ) = p0(θ);

T −1} through forward calculation:

compute the implementable feedback policy at t: ˆu[0]

t (·) =

ti × u[0]
¯p[0]

ti (·);

compute the nominal state of next time stage ¯x[0]
update the nominal posterior distribution ¯p[0]
t+1(θ):
for i ∈ S do

i∈S
P

t+1 via (9) for ν = 0;

calculate scenario-speciﬁc control ¯µ[0]
update nominal posterior probability ¯p[0]

ti = A¯x[0]

t (¯x[0]
t + Bi ˆu[0]
t );
(t+1)i via (8) for ν = 0;

i = 0 for all i ∈ S;

set w[0]
2.2 Iteration starts:
for ν = 0, 1, · · · do

form the Lagrangian subproblems and solve in parallel: (P [ν]
conduct the while-do in 2.1 above but for ν + 1 in order to get ˆu[ν+1];
update the Lagrangian multiplier: w[ν+1]
− ˆu[ν+1]
check the algorithm stopping criterion by calculating err via (12):
if err < tol then
break;

u[ν+1]
i
(cid:0)

= w[ν]

i + r

i

for all i ∈ S;

(cid:1)

i ) to obtain u[ν+1]

i

for all i ∈ S;

else

ν ← ν + 1;

ti x2

i Γ[0]

0 ) =

2 Γ[0]

2 Γ[0]

ti )2Γ[0]

(t+1)i + 1

(t+1)i), Γ[0]

0i u[0]
1 =

(t+1)i)/(R + b2

ti = Q + R(K [0]

ti )2 + (a − biK [0]

i ) for later iteration. More precisely, we initialize the nominal initial state ¯x[0]

T i ≡ Q for all i. The optimal cost-to-go function is then given by J [0]
ti = Λ[0]

(abiΓ[0]
(t+1)i, and the boundary
condition Γ[0]
ti (xt) = 1
t +
ti , with Λ[0]
Λ[0]
(t+1)iσ2 and the boundary condition Λ[0]
T i ≡ 0. Then at the upper layer
we ﬁrst forwardly aggregate solutions from the lower layer and simultaneously update the posterior
distribution along the nominal state trajectory in order to form the initial Lagrangian subproblems
(P [0]
0 = x0 and the
nominal prior distribution ¯p[0]
0 (θ) = p0(θ), and then calculate the implementable control at t = 0:
0i (¯x[0]
0 ) = − ˆK [0]
0 where ˆK [0]
i∈S ¯p[0]
ˆu[0]
0 (¯x[0]
0i . The next nominal state
0 =
is obtained via (9): ¯x[0]
¯x[0]
0i bi) ˆK [0]
0 , with the nominal posterior probabilities
a − (
1i ’s updated numerically through (8) for various i, which in turn yields ˆu[0]
¯p[0]
1 x1 with
ˆK [0]
1 ) to get the
1 =
nominal state and posterior distribution at t = 2. We conduct the above procedure till the end of
time horizon and ﬁnally obtain a feedback policy ˆu[0] for ν = 0. The initial Lagrangian multiplier
is set to be zero, which is equivalent as a linear function of state, namely, w[0]
ti xt
with W [0]
ti ≡ 0 for all t and i. We are now ready to deﬁne Lagrangian subproblems for ν = 0:
T −1
t=0 (ut − ˆu[0]
(Q[0]
t )2. Note that the above multistage
optimization problem (subject to the linear state dynamics) can be analytically solved by DP and the
P
optimal solution is linear in state. It is easy to prove, by mathematical induction, that starting with
linear forms of ˆu[0]
i )’s, ν ≥ 0, keep the same quadratic forms, with optimal

(cid:3)
1i , which is still linear in state. We then apply the control ˆu[0]

1 (x1) = − ˆK [0]
1 (¯x[0]

P
ti (·), all (Q[ν]

i ) : minu L(u|x0, δi) +

ti (xt) = W [0]

0 ¯x[0]
i∈S ¯p[0]

t (·) and w[0]

ti ut + 1
2 r

T −1
t=0 w[0]

i∈S ¯p[0]

i∈S ¯p[0]

0i K [0]

1i K [0]

P

P

P

P

(cid:2)

0

6

cost-to-go function at t satisfying the new Bellman equation

ti

(cid:20)

1
2

1
2

Eξ

t +

Ru2

Qx2

ti ut +

J [ν+1]

t + w[ν]

(xT ) = 1

r(ut − ˆu[ν]

axt + biut + ξt

(xt) = min
ut

t )2 + J [ν+1]
(t+1)i

T i
= (abiΓ[ν+1]

1
2
with boundary condition J [ν+1]
where K [ν+1]
ti
t + Λ[ν+1]
2 Γ[ν+1]
1
x2
ti
ti
= Λ[ν+1]
and Λ[ν+1]
ti
the Lagrangian multiplier is updated via w[ν+1]
W [ν+1]
(cid:3)
ti
criterion described in Algorithm 1 is satisﬁed, and results in a linear feedback policy as in (11).

(cid:17) (cid:12)
(cid:12)
(cid:12)
(cid:12)
(t+1)i). Accordingly, J [ν+1]
i Γ[ν+1]
i Γ[ν+1]
R + r + b2
(t+1)i + Q + r
−
T i = Q and Λ[ν+1]
(t+1)iσ2, with boundary conditions Γ[ν+1]
(cid:0)
(cid:1)
u[ν+1]
ti (xt) + r
ti

(t+1)i
T i = 0. Finally,
(cid:1)
=
). The iteration terminates when the stopping

T . Then optimal solution is u[ν+1]
ti )/(R + r + b2
ˆK [ν]
t

2 x2
t + W [ν]
= a2Γ[ν+1]

(cid:21)
(xt) = −K [ν+1]

, where Γ[ν+1]
2 Γ[ν+1]

(cid:1)(cid:0)
(xt) − ˆu[ν+1]

xt,
ti
(xt) =
2

xt, where W [ν+1]

(t+1)i + r ˆK [ν]

ti +r( ˆK [ν+1]

(xt) = w[ν]

(t+1)i + 1

−K [ν+1]
ti

K [ν+1]
ti

= W [ν]

(xt)

xt

(cid:16)

(cid:0)

(cid:2)

ti

ti

ti

ti

ti

2

,

t

t

4 Experimental results on performance

(cid:2)

· · ·

p0(θ)

≈ Eθ

Eξ
(cid:8)

By assigning different values for the non-episodic example discussed in Subsection 3.3, we now
verify the efﬁciency of our proposed two-layer (TL) scheme, compared with other algorithms in-
cluding DP, DUL (the prevalent passive learning approach of Deshpande et al. (1973)), and three
other methods leveraging ideas from traditional RL algorithms: the greedy method, ǫ-greedy, and
Thompson sampling. While DP, as the theoretical best, provides a benchmark for comparison, it
is only applicable when T = 2, where analytical optimal policy can be obtained at t = 1, and
numerical method has to be invoked at t = 0, for example by MATLAB. As for DUL, it makes
an ansatz that the expectation and the minimization operators in the original problem (P) can be
exchanged, i.e., minu Eθ
. The DUL algorithm is
basically a rolling horizon approach. At the beginning, scenario subproblems are solved for the en-
(cid:8)
tire time horizon and the resulting DUL policy at t = 0 is a weighted sum of the optimal solutions
for scenario subproblems with weighting coefﬁcients being the prior probabilities. At time t, poste-
rior distribution of θ is calculated based on observed I t, and scenario subproblems are solved for the
truncated time horizon from t to T , and the resulting DUL policy at time t is a weighted sum of the
new scenario-based optimal solutions with weights being the posterior probabilities at time t. The
essence of DUL is actually to take conditional average. Adopting similar idea of rolling horizon, we
may also think out other three algorithms (rooted originally in classical RL problems) that are appli-
cable to non-episodic cases. The ﬁrst one is similar to the greedy method (named GRE) by selecting
the scenario-speciﬁc policy with largest posterior probability at time t. As a variation of GRE, the
ǫ-greedy type strategy (termed ǫ-GRE) perturbs the greedy policy a bit by a randomized policy of
selecting the greedy policy with probability (1 − ǫ) or a randomly chosen policy with probability ǫ.
The last algorithm follows the idea of Thompson sampling (labelled TS here) that a policy at time t
is selected by randomly sampling a scenario-speciﬁc policy based on the posterior distribution.

p0(θ)
(cid:12)
(cid:12)

minu Eξ

(cid:3) (cid:9)

· · ·

(cid:3)(cid:9)

(cid:12)
(cid:12)

(cid:2)

For simplicity, the model is set with a = Q = R = σ = x0 = 1, and N = 2 meaning that b takes
two possible values. The penalty parameter r and the tolerance level are chosen to be 1 and 10−5,
respectively. Details of assignments on b = {b1, b2} and p0(θ) = {p01, p02} for 12 experiments can
be found in Table 1. We do these for both simplest two-period problem, where DP works, and longer
time horizon problems with T = 3 and T = 5, where DP fails. As for long-horizon problems with
T = 3 or 5, we adopt rolling TL in order to incorporate real posterior belief into consideration. More
speciﬁcally, at each time t we adopt current TL policy ˆuT L
(·) for only one period and treat pt+1(θ)
based on the real-observed I t+1 as “prior” belief in the next step to solve the remaining problem
from t + 1 to T to generate a new ˆuT L

t+1(·) (termed as TLR method).

t

For each experiment under a certain group of T , b, and p0(θ), we compute the TL feedback gain ˆKt
in (11). Then we generate ten thousand simulations for each experiment out of twelve shared by all
the seven algorithms. Every simulation is characterized by two parts (θ, {ξt}t), where θ is sampled
by p0(θ) and each ξt is sampled from the assumed i.i.d. Gaussian noise, in order to calculate and
compare the total costs induced by different policies in the average sense. Table 1 summarizes these
results. When T = 2, DP always ranks the top (with one exception, which could be due to that
MATLAB can only identify a local minimum for a possible non-convex value function at t = 0) and
TL approximates the true optimal policy pretty well as evidenced by its lower average total cost
compared to others (except for its rolling variant and DP). For T = 3 where DP no longer works, TL

7

almost maintains superior over the rest (except for TLR) even without utilizing any online posterior
information which other approaches rely on. As time goes by, reference to newly-updated belief
becomes more and more necessary. Based on this recognition, our TLR essentially beats all the rest
when T goes beyond 2. We also observe some interesting ﬁndings that should be naturally expected.
First, the longer horizon, the larger the total cost. Second, in experiment (vi) where we are certain
about the system parameter with a one-point distribution for the prior belief, all the algorithms lead
to the same (actually optimal) policy and yield the same cost, since the problem, in such a case,
reduces to a pure stochastic decision problem with full knowledge on parameters. Finally, we can
see from experiment (i) to (iii) that the larger the variance of b, the worse the passive learning
DUL and others perform. In other words, the inherent active learning feature in TL (TLR) and DP
becomes much more demanding when the uncertainty in b is large.

Table 1: Average total costs from seven algorithms under 10,000 simulations for each experiment out
of twelve, with different assignments on T , b (with N = 2 for simplicity), and p0(θ) = {p01, p02};
ǫ is set to be 10%; all the results are rounding in four decimals; bold numbers represent the lowest
total costs under corresponding experiments.

No.

p01

For T = 2

(i)
(ii)
(iii)

(iv)
(v)
(vi)

1
3

1/2
2/3
1

For T = 3

(vii)
(viii)
(ix)

1/3
1/2
2/3

For T = 5

(x)
(xi)
(xii)

1/3
1/2
2/3

b

DP

TL

TLR

DUL

GRE

ǫ-GRE

TS

b1 = 1
b1 = 1
b1 = 1

b2 = 2
b2 = 5
b2 = 10

b1 = 1

b2 = 2

1.8170
1.8199
1.8793

1.9052
1.9383
2.0276

1.8172
1.8261
1.8833

1.9060
1.9395
2.0276

1.8171
1.8203
1.8785

1.9055
1.9389
2.0276

1.8204
1.9974
2.7875

1.9095
1.9427
2.0276

1.8213
2.0491
3.7598

1.9296
1.9614
2.0276

1.8236
2.1060
4.0188

1.9314
1.9611
2.0276

1.8409
2.4745
5.7482

1.9310
1.9589
2.0276

b1 = 1

b2 = 2

b1 = 1

b2 = 2

N/A
N/A
N/A

N/A
N/A
N/A

2.5349
2.6541
2.7140

2.5333
2.6511
2.7106

2.5371
2.6542
2.7139

2.5517
2.6949
2.7384

2.5545
2.6916
2.7419

2.5837
2.6932
2.7506

3.8848
4.0923
4.2734

3.8779
4.0762
4.2546

3.8804
4.0789
4.2558

3.9070
4.1359
4.3022

3.9134
4.1364
4.3039

3.9671
4.1559
4.3159

5 Summary

We develop a novel solution approach to a type of Bayesian reinforcement learning (RL) problem un-
der the non-episodic setting, especially the discrete-time linear-quadratic-Gaussian (LQG) problem
with ﬁxed but unknown gain as one concrete example, to which the classical dynamic program-
ming (DP) fails. While the existing algorithms in the RL literature focus mainly on approximating
the value function when it comes to the single-episodic setting (for example, Klenske and Hennig,
2016), or invoking Thompson sampling method in episodes for LGQ with uncertain parameters
(such as Ouyang et al., 2017), our new solution approximates the optimal policy directly, thus by-
passing the stage of approximating the value function. Most importantly, our scheme separates the
non-episodic problem into two different layers according to different types of uncertainties, and
combines the time-decomposition based method DP at the lower layer and the revised scenario-
decomposition based approach progressive hedging algorithm (PHA) at the upper layer, to strike a
balance between exploitation and exploration. By separating the reducible uncertainty from the ir-
reducible one, we may take advantage of DP to generate an analytical solution for scenario-speciﬁc
subproblems with reducible uncertainty ﬁxed at a certain scenario. The revised PHA at the upper
level, on the other hand, aggregates the solutions from all scenario subproblems to generate an im-
plementable one, which ﬁnally converges to a suboptimal policy to approximate the optimal one of
the primal Bayesian RL problem, as shown in our experiments. One future research topics are to
investigate deeper the convergence property of our revised-PHA based two-layer solution algorithm,
and to study how to generate nominal trajectory or even multiple ones in order to simulate more
learning environment in advance. Furthermore, while the current version of PHA requires convexity

8

for each scenario problem to guarantee the convergence, Prof. Rockafellar has recently been consid-
ering to relax PHA to nonconvex cases (Rockafellar, 2018). We will also utilize his new results to
extend our current work.

References

Aoki, M. (1967). Optimization of Stochastic Systems: Topics in Discrete-Time Systems, volume 32.

Academic Press.

Åström, K. J. and Helmersson, A. (1986). Dual control of an integrator with unknown gain. Com-

puters & Mathematics with Applications, 12(6):653–662.

Bar-Shalom, Y. (1981). Stochastic dynamic programming: Caution and probing. IEEE Transactions

on Automatic Control, 26(5):1184–1195.

Bertsekas, D. P. (2019). Reinforcement Learning and Optimal Control. Unpublished textbook

manuscript, see https://web.mit.edu/dimitrib/www/RLbook.html.

Dallaire, P., Besse, C., Ross, S., and Chaib-draa, B. (2009). Bayesian reinforcement learning in
continuous POMDPs with Gaussian processes. In 2009 IEEE/RSJ International Conference on
Intelligent Robots and Systems, pages 2604–2609. IEEE.

Deshpande, J., Upadhyay, T., and Lainiotis, D. (1973). Adaptive control of linear stochastic systems.

Automatica, 9(1):107–115.

Feldbaum, A. (1960–1961). Dual control theory I–IV. Avtomatika i Telemekhanika, 21(9), 21(11),

22(1), 22(2).

Ghavamzadeh, M., Mannor, S., Pineau, J., Tamar, A., et al. (2015). Bayesian reinforcement learning:

A survey. Foundations and Trends R(cid:13) in Machine Learning, 8(5-6):359–483.

Kirk, D. E. (1970). Optimal Control Theory: An Introduction. Springer.

Klenske, E. D. and Hennig, P. (2016). Dual control for approximate bayesian reinforcement learning.

Journal of Machine Learning Research, 17:1–30.

Li, D. and Ng, W.-L. (2000). Optimal dynamic portfolio selection: Multiperiod mean-variance

formulation. Mathematical Finance, 10(3):387–406.

Li, D., Qian, F., and Fu, P. (2008). Optimal nominal dual control for discrete-time linear-quadratic

gaussian problems with unknown parameters. Automatica, 44(1):119–127.

Ouyang, Y., Gagrani, M., and Jain, R. (2017). Learning-based control of unknown linear systems

with Thompson sampling. arXiv preprint arXiv:1709.04047.

Poupart, P., Vlassis, N., Hoey, J., and Regan, K. (2006). An analytic solution to discrete bayesian re-
inforcement learning. In Proceedings of the 23rd International Conference on Machine Learning,
pages 697–704. ACM.

Rockafellar, R. T. (2018). Progressive hedging in nonconvex stochastic optimization. In The Work-
shop on Variational Analysis and Stochastic Optimization, Hong Kong Polytechnic University.

Rockafellar, R. T. and Wets, R. J.-B. (1991). Scenarios and policy aggregation in optimization under

uncertainty. Mathematics of Operations Research, 16(1):119–147.

Sutton, R. S. and Barto, A. G. (2018). Reinforcement Learning: An Introduction. MIT press.

Thompson, W. R. (1933). On the likelihood that one unknown probability exceeds another in view

of the evidence of two samples. Biometrika, 25(3/4):285–294.

Tse, E. and Bar-Shalom, Y. (1973). An actively adaptive control for linear systems with random
parameters via the dual control approach. IEEE Transactions on Automatic Control, 18(2):109–
117.

9

