Momentum-inspired Low-Rank Coordinate Descent for
Diagonally Constrained SDPs

Junhyung Lyle Kim, Jose Antonio Lara Benitez, Mohammad Taha Toghani, Cameron Wolfe,
Zhiwei Zhang, Anastasios Kyrillidis
Rice University
Houston, TX, USA
jlylekim,jx24,mt72,crw13,zhiwei,anastasios@rice.edu

1
2
0
2

l
u
J

3

]

C
O
.
h
t
a
m

[

2
v
5
7
7
8
0
.
6
0
1
2
:
v
i
X
r
a

ABSTRACT
We present a novel, practical, and provable approach for solving
diagonally constrained semi-definite programming (SDP) problems
at scale using accelerated non-convex programming. Our algorithm
non-trivially combines acceleration motions from convex optimiza-
tion with coordinate power iteration and matrix factorization tech-
niques. The algorithm is extremely simple to implement, and adds
only a single extra hyperparameter – momentum. We prove that
our method admits local linear convergence in the neighborhood
of the optimum and always converges to a first-order critical point.
Experimentally, we showcase the merits of our method on three
major application domains: MaxCut, MaxSAT, and MIMO signal de-
tection. In all cases, our methodology provides significant speedups
over non-convex and convex SDP solvers – 5× faster than state-of-
the-art non-convex solvers, and 9 to 103× faster than convex SDP
solvers – with comparable or improved solution quality.

CCS CONCEPTS
• Theory of Computation → Design and Analysis of Algo-
rithms; Theory and Algorithms for Application Domains; • Mathe-
matics of Computing → Mathematical Software.

KEYWORDS
Semi-Definite Programming, Non-Convex Optimization

1 INTRODUCTION
Background. This work focuses on efficient ways to solve semi-
definite programming instances (SDPs) with diagonal constraints:

min
𝑋 ⪰0

⟨𝐶, 𝑋 ⟩

s.t. 𝑋𝑖𝑖 = 1, 𝑖 = 1, . . . , 𝑛.

(1)

Here, 𝑋 ∈ S𝑛 is the 𝑛 × 𝑛 symmetric optimization variable and
𝐶 ∈ S𝑛 is a problem-dependent cost matrix. The above formulation
usually appears in practice as the convex relaxation of quadratic
form optimization over discrete variables.

min
𝑥 ∈D𝑛

⟨𝑥, 𝐶𝑥⟩,

(2)

D is a discrete set on the unit imaginary circle:

D =

(cid:110)
𝑒

𝚤2𝜋𝑚
𝑀

: 𝑚 = 0, 1, . . . , 𝑀 − 1(cid:111)

.

√

where 𝚤 :=
−1 denotes the imaginary unit. Different values for
𝑀 define different realizations of the discrete set D. For example,
𝑀 = 2 reduces D to the binary set {±1}, while D becomes {±1, ±𝚤}

Authors before AK are listed in alphabetical order.

for 𝑀 = 4.1 The formulation in (2) appears in many applications,
including MaxCut or Max-𝑘-Cut [5, 14, 16, 20, 21, 26, 29, 39, 49, 51],
MaxSAT [20], maximal margin classification [19], semi-supervised
learning [58], correlation clustering on dot-product graphs [55],
community detection [1, 25], and (quantized) phase synchroniza-
tion in communication networks [10, 64]. Other problems that
can be cast as (quantized) quadratic form optimization over the
unit complex torus include phase recovery [56], angular synchro-
nization [50], and optimization problems in communication sys-
tems [27, 32, 33, 37, 42].

Typically, solving (2) is computationally expensive due to the
presence of discrete structures. Discrete algorithmic solutions have
been developed to solve (2) with near-optimal performance and
rigorous theoretical guarantees by exploiting the problem’s struc-
ture [24, 30, 38, 41]. However, the go-to techniques for solving (2)
are oftentimes continuous. For example, methods exist that relax
combinatorial entities in (2) and find a solution with non-linear,
continuous optimization. Such techniques can be roughly catego-
rized into convex [17, 23, 44, 45, 53, 54] and non-convex, continuous
approaches [8, 9, 11, 31, 59].

Recently, numerous algorithms have been proposed for solving
large-scale SDP instances of the form (1). [59] present a low-rank
coordinate descent approach to solving MaxCut and MaxSat SDP
instances that is 10-100× faster than state-of-the-art solvers. Simi-
larly, [62] solve MaxCut instances on a laptop with almost 8 million
vertices and 1013 matrix entries, while [22] propose a simulated
bifurcation algorithm that can solve all-to-all, 100, 000-node Max-
Cut problems with continuous weights. Despite such developments,
however, SDPs are still hard problems to solve in practice. This work
aims to contribute along the path of efficient algorithms for solving
large-scale SDPs.

This Paper. We present an algorithmic prototype for solving diago-
nally constrained SDPs at scale. Based on the low 𝑘-rank property of
SDPs [2, 6, 47] (see Lemma 2.1), we focus on solving a non-convex,
but equivalent, formulation of (1):
𝑓 (𝑉 ) ≜ (cid:10)𝐶, 𝑉 ⊤𝑉 (cid:11)

∥𝑣𝑖 ∥2 = 1, ∀𝑖.

s.t.

(3)

min
𝑉 ∈R𝑘×𝑛

Here, 𝑉 ∈ R𝑘×𝑛 is the optimization variable and the linear con-
straints on 𝑋 in (1) translate to 𝑉 ∈ (𝑆𝑘−1)𝑛 (i.e., each column vector
𝑣𝑖 satisfies ∥𝑣𝑖 ∥2 = 1). Our algorithm, named Mixing Method++,
adds momentum to a coordinate power iteration-style technique
for solving SDPs by incorporating ideas from accelerated convex

1Many other
𝚤2𝜋
D = {1, 𝑒
3 , 𝑒

realizations of
𝚤4𝜋
3 } for Max-3-Cut [21, 51].

the set D exist. For example, we define

 
 
 
 
 
 
optimization and matrix factorization. As its predecessor [59], the
algorithm is simple to implement, requiring only one additional
hyperparameter – momentum. From an empirical perspective, we
test the algorithm on MaxCut, MaxSAT, and MIMO signal detection
applications, where we demonstrate significant speedups in com-
parison to other state-of-the-art solvers (e.g., 9× to 102× speedup on
MaxSAT instances) with comparable or improved solution quality.
Additionally, we prove that our accelerated method admits local
linear convergence in the neighborhood of the optimum and always
converges to a first order stationary point. To the best of our knowl-
edge, this is the first theoretical result that incorporates momentum
into a coordinate-descent approach for solving SDPs.

2 BACKGROUND
Notation. We use S𝑛 to denote the cone of positive semi-definite
(PSD) matrices. We denote the 𝑘-dimensional sphere by 𝑆𝑘−1, where
𝑘 − 1 indicates the dimension of the manifold. The product of 𝑛,
𝑘-dimensional spheres is denoted by (𝑆𝑘−1)𝑛. For any 𝑣 ∈ R𝑛 and
𝑀 ∈ R𝑛×𝑚, we define ∥𝑣 ∥2 and ∥𝑀 ∥𝐹 as the ℓ2 and Frobenius norms.
For a matrix 𝑉 ∈ R𝑘×𝑛, we denote its 𝑖-th column interchangeably
as 𝑉:,𝑖 or 𝑣𝑖 . For 𝑎 ∈ R𝑛, we define 𝐷𝑎 as the 𝑛 × 𝑛 diagonal matrix
with entries (𝐷𝑎)𝑖𝑖 = 𝑎𝑖 . We denote the vector of all 1’s as 1 and the
Hadamard product as ⊙. Singular values are denoted as 𝜎 (·), while
𝜎nnz (·) represents minimum non-zero singular value(s). The matrix
𝐶 corresponds to the cost matrix of the optimization problem (1).

Low-rank Property of SDPs. Focusing on (1), the number of lin-
ear constraints on 𝑋 is far less than the number of variables within
𝑋 . This constitutes such SDPs as weakly constrained, which yields
the following result [6, 47].

Lemma 2.1. The SDP in (1) has a solution with rank 𝑘 = (cid:6)√
One can enforce low-rank solutions to weakly constrained SDPs
by defining 𝑋 = 𝑉 ⊤𝑉 , where 𝑉 ∈ R𝑘×𝑛 and 𝑘 (𝑘 + 1)/2 > 𝑛 [10, 11].
This low-rank parameterization, shown in (3), yields a non-convex
formulation of (1) with the same global solution. This formula-
tion can be solved efficiently because the conic constraint in (1) is
automatically satisfied.2

2𝑛 (cid:7).

Mixing Method. Consider again the low-rank SDP parameteriza-
tion given in (3). To connect this formulation with its discrete form
in (2), assume 𝑘 = 1, which yields the following expression:

min
𝑣 ∈R1×𝑛

𝑣𝐶𝑣 ⊤

s.t.

|𝑣𝑖 | = 1, ∀𝑖,

(4)

Notice that 𝑣 is normalized entry-wise during each optimization
step. To solve (4), one can consider using related algorithms, such
as a power iteration-style methods [40], as shown below.

𝑢 ← 𝐶𝑣,

𝑣 + ← normalize(𝑢),

Here, normalize(𝑢) projects 𝑢 such that |𝑣 +
𝑖 | = 1 for each entry
of 𝑣 +. This is the crux of the Mixing Method [59], which applies
a coordinate power iteration routine to sequentially update each
column of 𝑉 and solve (3); see Algorithm 1. Variants of Algorithm 1
that utilize random coordinate selection instead of cyclic updates
for the columns of 𝑉 have also been explored [15].

2Handling a PSD constraint requires an eigenvalue decomposition of 𝑛 × 𝑛 matrices,
leading to a 𝑂 (𝑛3) overhead per iteration.

Kim, et al.

(cid:17)

Algorithm 1 Mixing Method [59]
1: Input: 𝐶 ∈ S𝑛, 𝑉 ∈ (𝑆𝑘−1)𝑛.
2: while not yet converged do
3:

for 𝑖 = 1 to 𝑛 do

4:

𝑣𝑖 ← normalize

5:
end for
6: end while

(cid:16)

− (cid:205)𝑗≠𝑖 𝑐𝑖 𝑗 𝑣 𝑗

In (3), diagonal elements of 𝐶 do not contribute to the optimiza-
tion due to the constraint ∥𝑣𝑖 ∥2 = 1, and thus can be set to zero.
When considering only the 𝑖-th column of 𝑉 , the objective (cid:10)𝐶, 𝑉 ⊤𝑉 (cid:11)
takes the form 2𝑣 ⊤
𝑗=1 𝑐𝑖 𝑗 𝑣 𝑗 . The full gradient of the objective
𝑖
with respect to 𝑣𝑖 can be computed in closed form at each iteration,
yielding the coordinate power iteration routine outlined in Algo-
rithm 1. Interestingly, this procedure also comes with theoretical
guarantees [59], which we include below for completeness.3

(cid:205)𝑛

Theorem 2.1. The Mixing Method converges linearly to the global
optimum of (3), under the assumption that the initial point is close
enough to the optimal solution.

3 MIXING METHOD++
Towards a Momentum-inspired Update Rule. In this work,
we introduce Mixing Method++, which uses acceleration tech-
niques [43, 48] to significantly improve upon the performance of
Mixing Method. For gradient descent, a classical acceleration tech-
nique is the Heavy-Ball method [48], which iterates as follows:
𝑤𝑡 +1 = 𝑤𝑡 − 𝜂∇𝑓 (𝑤𝑡 ) + 𝛽 (𝑤𝑡 − 𝑤𝑡 −1).
Here, 𝑤 is the optimization variable, 𝑓 (·) is a differentiable loss
function, 𝜂 is the step size, and 𝛽 is the momentum parameter.
Intuitively, the heavy-ball method exploits the history of previous
updates by moving towards the direction 𝑤𝑡 − 𝑤𝑡 −1, weighted by
the momentum parameter 𝛽. A similar momentum term can be
naively incorporated into power iteration:

𝑤𝑡 +1 = normalize (cid:0)𝐶𝑤𝑡 + 𝛽 (𝐶𝑤𝑡 − 𝑤𝑡 )(cid:1) ,
where there is no notion of a step size 𝜂. By adapting this accelerated
power iteration scheme to the Mixing Method update rule, we arrive
at the following recursion:

ˆ𝑣𝑖 = normalize(𝑔𝑖 + 𝛽 (𝑔𝑖 − 𝑣𝑖 )),
where 𝑔𝑖 = − (cid:205)𝑗≠𝑖 𝑐𝑖 𝑗 𝑣 𝑗 . Because 𝑔𝑖 is not normalized before the
addition of the momentum term, 𝑔𝑖 and 𝑣𝑖 can be of significantly
different magnitude. As such, we normalize 𝑔𝑖 as an intermediate
step and adopt a double-projection approach per iteration; see Al-
gorithm 2. Such double projection ensures that 𝑢𝑖 and 𝑣𝑖 are of
comparable magnitude when the momentum term is added, result-
ing in significantly-improved momentum inertia.

Properties of Mixing Method++. The proposed algorithm is com-
prised of a two-step update procedure. The last normalization
projects 𝑢𝑖 + 𝛽 (𝑢𝑖 − 𝑣𝑖 ) onto the unit sphere, which ensures the up-
dated matrix is feasible. In contrast, the first normalization ensures

3Most of global guarantees in [59] hold for a variant of the Mixing Method that
resembles coordinate gradient descent with step size, rather than the coordinate power
iteration method that is used and tested in practice.

Momentum-inspired Low-Rank Coordinate Descent for Diagonally Constrained SDPs

Algorithm 2 Mixing Method++
1: Input: 𝐶 ∈ S𝑛, 𝑉 ∈ (𝑆𝑘−1)𝑛, 0 ≤ 𝛽 < 1.
2: while not yet converged do
3:

for 𝑖 = 1 to 𝑛 do

(cid:16)

(cid:17)

𝑢𝑖 ← normalize
𝑣𝑖 ← normalize (𝑢𝑖 + 𝛽 (𝑢𝑖 − 𝑣𝑖 ))

− (cid:205)𝑗≠𝑖 𝑐𝑖 𝑗 𝑣 𝑗

4:

5:

6:
end for
7: end while

that − (cid:205)𝑛
𝑗=1 𝑐𝑖 𝑗 𝑣 𝑗 and 𝑣𝑖 are comparable in magnitude, as the former
may have a norm greater than 1. The overall computational cost
of the added momentum step is negligible, making the step-wise
computational complexity of Mixing Method++ roughly equal to
that of the Mixing Method.

We show that Mixing Method++ converges linearly when 𝑉 lies
in a neighborhood of the global optimum and always reaches a first-
order stationary point. Despite the similarity of our convergence
rates to previous work [59], achieving acceleration in theory is not
always feasible, even in convex, non-stochastic cases; see [4, 13,
18, 34, 36, 48]. Nonetheless, we observe acceleration in practice,
and Mixing Method++ with 𝛽 = 0.8 yields a robust algorithm with
significant speed-ups in comparison to Mixing Method.

4 CONVERGENCE ANALYSIS
We begin by presenting some notation for brevity and readability.
𝑓 ★ is used to denote the optimal value of the objective function
𝑓 (𝑉 ) = ⟨𝐶, 𝑉 ⊤𝑉 ⟩. The matrices 𝑉 and ˆ𝑉 refer to the current and
next iterates from the inner iteration of Algorithm 2. For each
𝑖 ∈ [𝑛], we define the family of maps 𝑍𝑖 : R𝑘×𝑛 → R𝑘×𝑛 as:

Figure 1: The minimum norm of the columns of 𝑉 through-
out iterations of Mixing Method and Mixing Method++ on the
MaxCut and MIMO objectives.

trick from [15] in practice. Given this assumption, no further as-
sumptions are required for the second normalization step provided
that 0 ≤ 𝛽 < 1, as summarized below.

Observation 4.1. 𝑤𝑖 = ∥𝑢𝑖 − 𝛽𝑣𝑖 ∥2 ≠ 0, whenever 0 ≤ 𝛽 < 1.

Proof. Based on upper and lower triangle inequality bounds
and the fact that 𝑢𝑖 and 𝑣𝑖 are both in 𝑆𝑘−1, we get the inequality
□
1 ≤ ∥(1 + 𝛽) 𝑢𝑖 − 𝛽𝑣𝑖 ∥2 ≤ 1 + 2𝛽.

Our first technical lemma lower bounds the decrease in the

objective over inner iterations of Algorithm 2.

|
ˆ𝑣1
𝑉 ↦−→ (cid:169)
(cid:173)
|
(cid:171)

. . .

|
ˆ𝑣𝑖−1
|

|
𝑣𝑖
|

|
𝑣𝑖+1
|

. . .

|
𝑣𝑛
|

.

(cid:170)
(cid:174)
(cid:172)

In words, 𝑍𝑖 (𝑉 ) is the partially updated 𝑉 matrix (i.e., within the
inner loop of Algorithm 2) before updating 𝑣𝑖 to ˆ𝑣𝑖 . Thus, only the
vector 𝑣𝑖 changes from 𝑍𝑖 (𝑉 ) to 𝑍𝑖+1 (𝑉 ). Notice that 𝑍𝑛+1 (𝑉 ) = ˆ𝑉 .
We now present our main theoretical results. All proofs are

provided in Section 6.4 We adopt Assumption 3.1 from [59].

Assumption 4.1. For 𝑖 ∈ [𝑛], assume ∥ (cid:205)𝑛

𝑗=1 𝑐𝑖 𝑗 𝑣 𝑗 ∥2 do not de-
generate in the procedure. That is, all norms are always greater than
or equal to a constant value 𝛿 > 0.

Put simply, Assumption 4.1 states that the update rule will never
yield 𝑢𝑖 with zero norm. We find that this assumption consistently
holds in practice for both Mixing Method and Mixing Method++
applied over several objectives. In particular, we track the smallest
value of ∥ (cid:205)𝑗≠𝑖 𝑐𝑖 𝑗 𝑣 𝑗 ∥2 observed during the inner loop of Mixing
Method and Mixing Method++, then plot these minimum norms
throughout all iterations in Figure 1. As can be seen, Assumption 4.1
consistently holds for both MaxCut and MIMO objectives. Further-
more, if Assumption 4.1 does not hold, we can exploit the simple

(5)

Lemma 4.1. Let ˆ𝑉 , 𝑉 be the next and previous iteration of Algo-
rithm (2), respectively. We define 𝑦𝑖 = ∥𝑔𝑖 ∥2, where 𝑔𝑖 = − (cid:205)𝑗≠𝑖 𝑐𝑖 𝑗 𝑣 𝑗 .
We then derive the following.

𝑓 (𝑉 ) − 𝑓 ( ˆ𝑉 ) ≥

1 − 𝛽
1 + 𝛽

𝑛
∑︁

𝑖=1

𝑦𝑖 ∥𝑣𝑖 − ˆ𝑣𝑖 ∥2
2.

Furthermore, 𝑓 is non-increasing whenever 0 ≤ 𝛽 < 1.

Next, we lower bound the magnitude of the update from 𝑉 to ˆ𝑉
based on the objective residual, showing that the magnitude of our
update will be large until we approach an optimum.

Lemma 4.2. Under assumption 4.1, there exists positive constants

𝛾 and 𝜁 such that

∥𝑉 − ˆ𝑉 ∥2

𝐹 ≥ (cid:0)𝜁 − 𝛾 ∥Δ∥𝐹 (cid:1) (𝑓 (𝑉 ) − 𝑓 ∗),

where Δ := (𝐷𝑤𝐷𝑦 + 𝛽𝐷𝑦) − (𝐷𝑤∗ 𝐷𝑦∗ + 𝛽𝐷𝑦∗ ).
Finally, we upper bound the value of ∥Δ∥2

2 with respect to the
objective residual, which later enables the definition of a neighbor-
hood for local linear convergence within Theorem 4.1.

Lemma 4.3. Under Assumption 4.1, ∃ 𝜏 > 0 such that

∥(𝑤 + 𝛽1) ⊙ 𝑦 − (𝑤 ∗ + 𝛽1) ⊙ 𝑦∗ ∥2

2 ≤ 𝜏 (𝑓 (𝑉 ) − 𝑓 ∗).

4The proof that Mixing Method++ always converges to a first-order critical point is
provided in Section 7.

Drawing upon these technical lemmas, we show Mixing Method++

converges linearly within a neighborhood of the optimum.

4567010203040505.05.56.06.5IterationsMaxCutMIMOminikvik2MixingMethod++MixingMethodSolver

Sedumi
MoSeK
SDPNAL+
CGAL
SDPLR
Mixing Method
Mixing Method++

# SI

60
74
52
92
95
106
111

MLOR

-4.30
-3.24
-4.33
0.93
-2.89
-2.80
-3.87

Acc. (×)
360.20
348.37
1316.35
49.19
9.14
5.26
1

Table 1: Results on 203 MaxCut instances. SI stands for solved in-
stances; MLOR stands for median(log(objective residual)). Mixing
Method++ solved most instances efficiently with good precision.

Theorem 4.1 (Local linear convergence). Let 𝑓 ★ represent
the optimal value of the objective function, and let 𝛿 be the non-
degenerative lower-bound of Assumption 4.1. Define the neighborhood,

N★ :=

(cid:26)
𝑉 ∈ (𝑆𝑘−1)𝑛 : 𝜏 (𝑓 (𝑉 ) − 𝑓 ★) ≤

(cid:16) 𝜁 −𝜅
𝛾

(cid:17)2(cid:27)

,

for some positive constant 𝜅 and 𝜁 , 𝜏, and 𝛾 as defined in Lemmas 4.2
and 4.3. If 𝑉 ∈ N★, we then have:

𝑓 ( ˆ𝑉 ) − 𝑓 ★ ≤ (1 − 𝜌) (cid:0)𝑓 (𝑉 ) − 𝑓 ★(cid:1) ,
where 𝜌 ∈ (0, 1]. This result shows that Algorithm (2) converges
linearly when 𝑉 ∈ N★.

5 EXPERIMENTAL RESULTS
We test Mixing Method++ on three well-known applications of (1):
MaxCut, MaxSAT, and MIMO signal detection. We use the same
formulation in [59] to solve MaxCut and MaxSAT, while for MIMO
we follow the experimental setup in [35]. We implement Mixing
Method++ in C with 𝛽 = 0.8.5 Each experiment is run on a single
core in a homogeneous Linux cluster with 2.63 GHz CPU and 16
GB of RAM. We compare Mixing Method++ with wide variety of
solvers depending on the application. For MaxCut, we compare
with CGAL [63], Sedumi [52], SDPNAL+ [61], SDPLR [11], MoSeK
[3], and Mixing Method [59]. For MaxSAT, we compare with Mixing
Method and Loandra [7]. Lastly, for MIMO signal detection, we
compare with Mixing Method.

We often report performance in terms of the objective residual,
which is defined as the difference between objective values given by
each solver and the lowest objective value achieved by any solver.
More formally, let Obj𝑖 𝑗 be the value of the objective function given
by optimizer 𝑖 on SDP instance 𝑗. Then, the objective residual of
optimizer 𝑖 on instance 𝑗 is defined as |Obj𝑖 𝑗 − min
Obj𝑖′ 𝑗 |, where
𝑖′ ∈𝑂
𝑂 is the set of all solvers used on problem instance 𝑗.

5.1 MaxCut
The SDP relaxation of the MaxCut problem is given by

max
∥𝑣𝑖 ∥=1,

1
2

∑︁

𝑐𝑖 𝑗

(cid:16) 1−𝑣⊤
𝑖 𝑣𝑗
2

(cid:17)

,

𝑖 𝑗

Kim, et al.

Figure 2: G40: 𝑛 = 2000, number of edges = 11766. Mixing
Method++ converges within 1s while Mixing Method uses
about 4s. MoSeK and Sedumi need 102 and 103 seconds re-
spectively to converge.

Figure 3: uk: 𝑛 = 4824, number of edges= 6837. Consider the
CPU time when each solver reaches objective residual 10−2.
Mixing Method++ uses only 20s while Mixing Method needs
200s. MoSeK and Sedumi consume more than 103 and 104 sec-
onds respectively.

where 𝐶 is the adjacency matrix. Thus, we aim to minimize the
following objective function:

𝑓MaxCut =

(cid:68)
𝐶, 1𝑛×𝑛−𝑉 ⊤𝑉

4

(cid:69) s.t. ∥𝑣𝑖 ∥2 = 1 ∀𝑖,

where 𝑉 ∈ R𝑘×𝑛 and 1𝑛×𝑛 is the 𝑛 × 𝑛 matrix of all 1s. We consider
the following benchmarks within our MaxCut experiments.
• Gset: 67 binary-valued matrices, produced by an autonomous,
random graph generator. The dimension 𝑛 varies from 800 to 104.

• Dimacs10: 152 symmetric matrices with 𝑛 varying from 39 to
50, 912, 018 , chosen for the 10-th Dimacs Implementation Chal-
lenge. We consider the 136 instances with dimension 𝑛 ≤ 8 · 106.

Table 1 lists the number of solved instances, median logarithm of
objective residual, and the pairwise acceleration ratio for different
SDP solvers tested on MaxCut.6 In comparison to the other solvers,
Mixing Method++ solves the most MaxCut instances (i.e., 111 of 203

5We extensively tested our theoretical bound on 𝛽 in experiments. After testing all
values in the set [0, 1) with an interval of 0.01, we observe that 𝛽 = 0.8 indeed yields
the best performance on over 90% of instances.

6When an instance is solved by both Mixing Method++ and solver 𝑠 within the 24
hour time limit, the pairwise acceleration ratio is defined as the CPU time taken by
solver 𝑠 divided by that of Mixing Method++.

101100101102103CPU Time (sec)106104102100102104Objective ResidualMixing MethodMixing Method++MoSeKSedumi101100101102103104CPU Time (sec)106104102100102104Objective ResidualMixing MethodMixing Method++MoSeKSedumiMomentum-inspired Low-Rank Coordinate Descent for Diagonally Constrained SDPs

Methods

Avg. Approx. Ratio

Loandra
Mixing Method
Mixing Method++

0.945
0.975
0.977

Table 2: Results on MaxSAT. Mixing Method++ achieves the
best approximation ratio with a time limit of 300s. 850 prob-
lems are tested in total. Problems are derived from crafted
(331), random (454), and industrial domains (65).

total instances) within the imposed 24 hour time limit and provides a
5× to 1316× speedup. Moreover, the efficiency of Mixing Method++
does not harm its precision, which is evident in its median logarithm
objective residual of −3.87. Such performance is preceded only by
Sedumi (−4.30) and SDPNAL+ (−4.33), both of which are more
than 300× slower than Mixing Method++.

We also study two specific cases of MaxCut: G40 from Gset and
uk from Dimacs10. In Figures 2 and 3, we plot objective residual
with respect to CPU time of Mixing Method++ and other SDP
solvers on the G40 and uk instances, respectively.7 In both MaxCut
instances, Mixing Method++ converges significantly faster than
other solvers that were considered.

5.2 MaxSAT
Let 𝑠𝑖 𝑗 ∈ {±1, 0} be the sign of variable 𝑖 in clause 𝑗. The following
problem provides an upper bound to the exact MaxSAT solution:

max
∥𝑣𝑖 ∥=1,

𝑚
∑︁

𝑗=1

(cid:16)1 −

∥𝑉 𝑠 𝑗 ∥2−( |𝑠 𝑗 |−1) 2
4 |𝑠 𝑗 |

(cid:17)

,

where 𝑉 ∈ R𝑘×𝑛 and 𝐶 = (cid:205)𝑚
𝑗=1

where 𝑠 𝑗 = [𝑠1𝑗 , ..., 𝑠𝑛 𝑗 ]⊤. Therefore, the MaxSAT SDP relaxation
can then be solved by minimizing the following, related objective:
𝑓MaxSAT = (cid:10)𝐶, 𝑉 ⊤𝑉 (cid:11) s.t. ∥𝑣𝑖 ∥2 = 1 ∀𝑖,
𝑠 𝑗 𝑠⊤
𝑗
4 |𝑠 𝑗 |
We consider 850 problem instances from the 2016-2019 MaxSAT
competition. Each instance is categorized as random, crafted or
industrial. We evaluate Mixing Method++ as a partial MaxSAT
solver8 and compare its performance to that of the Mixing Method
and Loandra; the latter was the best partial solver in the 2019
MaxSAT competition. The best solution given by all solvers is used
as ground truth when the optimal solution is not known.

.

The average approximation ratio of each solver across all MaxSAT
instances is shown in Table 2. Mixing Method++ achieves the best
average approximation ratio. We also consider two specific MaxSat
instances: s3v90c800-6 from the random track and from the indus-
trial track wb.4m8s4.dimacs.filtered. In Figures 4 and 5, we plot
both the objective residual and the cost (i.e., the number of un-
satisfied clauses) with respect to CPU time for s3v90c800-6 and
wb.4m8s4.dimacs.filtered instances, respectively. Mixing Method++

7We do not include CGAL and SDPLR in the plots, because the intermediate solution
given by those methods is infeasible, which makes intermediate objective values
difficult to quantify.
8A partial solver is only required to provide the assignment it finds with the least
number of violated clauses, while a complete solver must also provide proof that such
an assignment is optimal.

Figure 4: s3v90c800-6.cnf (𝑛 = 90, 𝑚 = 800). Mixing Method++
not only converges faster than Mixing Method, but provides
better solution (30) compared to Mixing Method (31) and
Loandra (33). The optimal solution has cost 26.

Figure 5: wb_4m8s4_dimacs_filtered.cnf (𝑛 = 463, 080, 𝑚 =
1, 759, 150). Loandra reaches optimal (230) in 1 sec, while Mix-
ing Method and Mixing Method++ return a solution with cost
28, 306 and 25, 210 respectively in 1 hour.

converges faster than Mixing Method in both cases and returns the
best solution on the s3v90c800-6 instance. Although Loandra pro-
vides the best solution to wb.4m8s4.dimacs.filtered quickly, Mixing
Method++ still outperforms Mixing Method significantly.

5.3 MIMO
The MIMO signal detection setting is defined as follows:

arg min
𝑥 ∈S

∥𝑦 − 𝐻𝑥 ∥2
2,

where 𝑦 ∈ R𝑚 is the signal vector, 𝐻 ∈ R𝑚×𝑛 is the channel
matrix, and 𝑥 ∈ S is the transmitted signal. It is assumed that 𝑦 =
𝐻𝑥 + 𝑣, where 𝑣 is a noise vector. For our experiments, we consider
the constellation {±1}, which yields S = {±1}𝑛. The MIMO SDP
relaxation can then be solved by minimizing the following objective.
𝑓MIMO = ⟨𝐶, 𝑉 𝑇 𝑉 ⟩ s.t. ∥𝑣𝑖 ∥2 = 1 ∀𝑖,

102100105104103102101100101Objective Residual10210034567Cost of Solution1e1CPU Time (sec)Mixing Method++Mixing MethodLoandraOptimal102103101102103104105Objective Residual1001020.00.51.01.5Cost of Solution1e5CPU Time (sec)Mixing Method++Mixing MethodLoandraOptimalKim, et al.

Figure 6: Convergence comparison of Mixing Method++ and
Mixing Method on MIMO signal detection problems with
different SNRs. The size of the channel matrix is listed above
each subplot.

Figure 7: Convergence comparison of Mixing Method++ (blue
line) with 𝛽 = 0.8 and Mixing Method (orange line) on 500-
node MaxCut problem instances with different sparsity lev-
els.

.

(cid:21)

−𝐻𝑇 𝑦
𝑦𝑇 𝑦

where 𝑉 ∈ R𝑘×(𝑛+1) and 𝐶 =

(cid:20) 𝐻𝑇 𝐻
−𝑦𝑇 𝐻
We compare Mixing Method++ to Mixing Method on several
simulated instances of the MIMO SDP objective. 𝐻 is sampled
from a standard normal distribution, 𝑥 is sampled from {±1}, and
𝑣 is sampled from a centered normal distribution with variance
𝑣 . Experiments are performed for numerous settings of 𝜎2
𝜎2
𝑣 de-
termined by the signal-to-noise ratio (SNR) (i.e., 𝜎2
SNR ). We
perform tests with SNR ∈ {8, 16} and problem sizes (𝑚, 𝑛) ∈
{(16, 16), (32, 32), (64, 32)}. We plot the objective residual achieved
by both Mixing Method and Mixing Method++ on MIMO instances
with respect to CPU time in Figure 6. As can be seen, Mixing
Method++ matches or exceeds the performance of the Mixing Method
in all experimental settings.

𝑣 = 𝑚𝑛

5.4 The Effect of Sparsity
We empirically observe that Mixing Method++ achieves different
levels of acceleration based on the sparsity of 𝐶.9 To further un-
derstand the impact of sparsity on the performance of Mixing
Method++, we compare Mixing Method++ to Mixing Method for
objectives with different sparsity levels. In particular, we construct
a MaxCut objective for a graph with 500 nodes and consider adja-
cency matrices with three different sparsity levels: 0.8, 0.5, and 0.2.
In Figure 7, we plot the objective residual of both Mixing Method
and Mixing Method++ on these problem instances. As can be seen,
the acceleration achieved by Mixing Method++ is more significant
when 𝐶 is sparse. Furthermore, decreasing the value of 𝛽 improves
the performance of Mixing Method++ on MaxCut instances when
𝐶 is dense.

5.5 Adaptive Momentum
We observe that Mixing Method sometimes decreases the objective
residual faster than Mixing Method++ during early stage iterations.
Inspired by this observation and previous work on adaptive mo-
mentum schedules [12, 46, 57], we explore whether dynamically
adjusting the value of 𝛽 between iterations can further improve
the performance of Mixing Method++. We propose the following

9We define sparsity as the number of zero-valued elements divided by the total number
of elements.

momentum schedule:

𝛽𝑡 = 𝛽 (1 − exp(−𝛼𝑡/𝑇 )) ,
where 𝛽 = 0.8 is the default momentum, 𝑡 is the current iteration,
𝑇 is the total number of iterations, and 𝛼 is a constant such that
exp(−𝛼) ≈ 0. Intuitively, this schedule begins with a low momen-
tum value, which quickly increases to 𝛽 = 0.8, thus forming a
warm-up schedule for the momentum. As shown in Figure 8, this
schedule improves the convergence speed of Mixing Method++.

Figure 8: Comparison of Mixing Method (orange line),
Mixing Method++ with fixed momentum 𝛽 = 0.8 (blue line),
Mixing Method++ with an increasing Scheduled Momentum
from 0 to 0.8 (green line) in terms of the objective cost per
iteration.

6 LOCAL LINEAR CONVERGENCE
We now give detailed proof of Theorem 4.1. Let 𝑔𝑖 be the linear
combination in step 4 of Algorithm 1, before projecting onto the
unit sphere:

𝑔𝑖 =

∑︁

𝑗 <𝑖

𝑐𝑖 𝑗 ˆ𝑣 𝑗 +

𝑐𝑖 𝑗 𝑣 𝑗 .

∑︁

𝑗 >𝑖

We also define 𝑦𝑖 = ∥𝑔𝑖 ∥2 and 𝑓 (𝑉 ) ≜ ⟨𝐶, 𝑉 𝑇 𝑉 ⟩ as the objective
value for some viable solution 𝑉 . Therefore, step 4 of Algorithm 1
can be expressed as: 𝑦𝑖𝑢𝑖 = −𝑔𝑖 . Thus, the changes presented in
the Algorithm 2 can be written as the combination of 4 and the
momentum, in step 5:
𝑔𝑖
𝑦𝑖

(1 + 𝛽) 𝑢𝑖 − 𝛽𝑣𝑖
𝑤𝑖

𝑢𝑖 = −

ˆ𝑣𝑖 =

and

,

,

0.000.020.040.061041021001020.000.050.100.151041021001020.000.050.10103100103CPU Time (sec)Objective Residual16 x 1632 x 3264 x 32MM++, SNR = 16MM++, SNR = 32MM, SNR = 16MM, SNR = 3205010015020010310210110010110210380%05010015020010310210110010110210310450%05010015020010310210110010110210310420%IterationsObjective ResidualMixing Method++Mixing Method01020304050607080Iteration103101101103Objective ResidualMixing MethodMixing Method++Mixing Method++ W/ Adaptive MomentumMomentum-inspired Low-Rank Coordinate Descent for Diagonally Constrained SDPs

where 𝑤𝑖 = ∥(1 + 𝛽) 𝑢𝑖 − 𝛽𝑣𝑖 ∥2. This leads to the following one line
relation,

𝑤𝑖𝑦𝑖 ˆ𝑣𝑖 = − (1 + 𝛽) 𝑔𝑖 − 𝛽𝑦𝑖𝑣𝑖, ∀𝑖 ∈ [𝑛].
(6)
Herein, the matrices 𝑉 and ˆ𝑉 refer to the current and the end
state of the inner iteration in algorithm 2. For each 𝑖 ∈ [𝑛], we
define the family of maps 𝑍𝑖 : (𝑆𝑘−1)𝑛 → (𝑆𝑘−1)𝑛 as follows
(cid:40) ˆ𝑣 𝑗 ,
𝑣 𝑗 ,
where {𝑒 𝑗 } is the canonical basis in R𝑛. It is trivial to see that 𝑍𝑖 (𝑉 )
corresponds to the matrix in the inner cycle before updating 𝑣𝑖 to ˆ𝑣𝑖 .
Thus, only the vector 𝑣𝑖 has been changed from 𝑍𝑖 (𝑉 ) to 𝑍𝑖+1 (𝑉 ).
Also notice that 𝑍𝑛+1 (𝑉 ) corresponds to the end of the inner cycle,
i.e., 𝑍𝑛+1 (𝑉 ) = ˆ𝑉 .

if 𝑗 < 𝑖
if 𝑗 ≥ 𝑖,

𝑍𝑖 (𝑉 ) 𝑒 𝑗 =

(7)

Matrix Representation
The transition from the state 𝑣𝑖 to ˆ𝑣𝑖 is expressed in the relation (6),
then for any 𝑖 ∈ [𝑛] in each inner cycle we have,

(1 + 𝛽)

∑︁

𝑗 <𝑖

𝑐𝑖 𝑗 ˆ𝑣 𝑗 + 𝑤𝑖𝑦𝑖 ˆ𝑣𝑖 = − (1 + 𝛽)

∑︁

𝑗 >𝑖

𝑐𝑖 𝑗 𝑣 𝑗 − 𝛽𝑦𝑖𝑣𝑖 .

(8)

Let 𝐿 be the strictly lower triangular matrix of 𝐶 so (8) leads us to
the representation:

(cid:0)(1 + 𝛽) 𝐿 + 𝐷𝑤𝐷𝑦 (cid:1) ˆ𝑉 ⊤ = − (cid:0)(1 + 𝛽) 𝐿⊤ + 𝛽𝐷𝑦 (cid:1) 𝑉 ⊤.

(9)

Proof of Lemma 4.1
Let 𝛽 be in [0, 1]. When fixing all the others variables, 𝑓 with respect
to 𝑣𝑖 is given by

⟨𝐶, 𝑉 ⊤𝑉 ⟩ = 2𝑣 ⊤
𝑖

(cid:0) ∑︁
𝑗

𝑐𝑖 𝑗 𝑣 𝑗 (cid:1) + constant.

Since only 𝑣𝑖 is changed, during the 𝑖th coordinate-wise updating,
the only part of the objective that will change is 2𝑣 ⊤

𝑖 𝑔𝑖 . That is,

Proof. Since 𝑣 ∗
𝑖 + 𝛽)𝑣 ∗

(𝑤 ∗
are in the unit sphere.

𝑖 . Taking the norm, 𝑤 ∗

𝑖 is a fixed point, using this fact in Eq. (6) yields
𝑖 and 𝑣 ∗
𝑖
□

𝑖 + 𝛽 = 1 + 𝛽, since 𝑢∗

𝑖 = 𝑢∗

Let 𝑆 be defined as (1 + 𝛽) 𝐶+𝐷𝑤𝐷𝑦+𝛽𝐷𝑦 and let 𝑆∗ be (1 + 𝛽) 𝐶+
𝐷𝑤∗ 𝐷𝑦∗ + 𝛽𝐷𝑦∗ ; namely, the corresponding value of 𝑆 when 𝑉 is
optimal in the optimization (3). We have the following observation.

Observation 6.2. 𝑆∗ is PSD.

Proof. By observation 6.1 we have 𝑤 ∗

𝑖 = 1, so
𝑆∗ = (1 + 𝛽) 𝐶 + 𝐷𝑤∗ 𝐷𝑦∗ + 𝛽𝐷𝑦∗ = (1 + 𝛽)

(cid:16)
𝐶 + 𝐷∗
𝑦

(cid:17)

,

where according to lemma 3.12, and since 𝑉 is optimal, it follows
that 𝑆 ∗
□

1+𝛽 ⪰ 0, hence 𝑆∗ ⪰ 0.

Proof of Lemma 4.2
By (9), we have

ˆ𝑉 = −𝑉 (cid:0)(1 + 𝛽) 𝐿 + 𝛽𝐷𝑦 (cid:1) (cid:0)(1 + 𝛽) 𝐿⊤ + 𝐷𝑤𝐷𝑦 (cid:1)−1 .

This leads to

𝑉 − ˆ𝑉 =𝑉 ((1 + 𝛽) 𝐶 + 𝐷𝑤𝐷𝑦 + 𝛽𝐷𝑦)

((1 + 𝛽) 𝐿⊤ + 𝐷𝑤𝐷𝑦)−1
=𝑉 𝑆 ((1 + 𝛽) 𝐿⊤ + 𝐷𝑤𝐷𝑦)−1
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:125)

(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)

(cid:124)

,

(cid:123)(cid:122)
𝑅

Using the definition Δ ≜ (𝐷𝑤𝐷𝑦 + 𝛽𝐷𝑦) − (𝐷𝑤∗ 𝐷𝑦∗ + 𝛽𝐷𝑦∗ ),

and the fact that 𝑆 = 𝑆∗ + Δ in the previous equation, we get

∥𝑉 − ˆ𝑉 ∥2

𝐹 ≥ ∥𝑉 𝑆∗𝑅∥2

𝐹 + 2tr(cid:0)𝑉 ⊤𝑉 𝑆∗𝑅𝑅⊤Δ(cid:1).

(10)

We claim that

∥(𝑤 + 𝛽1) ⊙ 𝑦 − (𝑤 ∗ + 𝛽1) ⊙ 𝑦∗ ∥2𝐼𝑛 + Δ ⪰ 0.

To see this, first notice 𝐷𝑤𝐷𝑦 + 𝛽𝐷𝑦 = 𝐷 (𝑤+𝛽1) ⊙𝑦. Thus,

Δ = 𝐷 (𝑤+𝛽1) ⊙𝑦 − 𝐷 (𝑤∗+𝛽1) ⊙𝑦∗ .

𝑓 (𝑍𝑖 (𝑉 )) − 𝑓 (𝑍𝑖+1 (𝑉 )) = 2𝑔⊤

𝑖 (𝑣𝑖 − ˆ𝑣𝑖 ) .

Besides,

The updating rule of algorithm 2 is given by the recursion (6),

so using this into the above equation yields

𝑓 (𝑍𝑖 (𝑉 )) − 𝑓 (𝑍𝑖+1 (𝑉 )) =

=

2𝑦𝑖 (𝑤𝑖 − 𝛽)
1 + 𝛽
𝑦𝑖 (𝑤𝑖 − 𝛽)
1 + 𝛽

(1 − 𝑣 ⊤

𝑖 ˆ𝑣𝑖 ),

∥𝑣𝑖 − ˆ𝑣𝑖 ∥2
2.

From observation 4.1, we have 𝑤𝑖 − 𝛽 ≥ 1 − 𝛽. Thus,

𝑓 (𝑍𝑖 (𝑉 )) − 𝑓 (𝑍𝑖+1 (𝑉 )) ≥ 𝑦𝑖

1 − 𝛽
1 + 𝛽

∥𝑣𝑖 − ˆ𝑣𝑖 ∥2
2.

Adding over all the 𝑖, leads us to the desired conclusion

𝑓 (𝑉 ) − 𝑓 ( ˆ𝑉 ) =

𝑛
∑︁

𝑓 (𝑍𝑖 (𝑉 )) − 𝑓 (𝑍𝑖+1 (𝑉 ))

𝑖=1
1 − 𝛽
1 + 𝛽

≥

𝑛
∑︁

𝑖=1

𝑦𝑖 ∥𝑣𝑖 − ˆ𝑣𝑖 ∥2
2.

The following observation will be useful later on.

Observation 6.1. For all 𝑖 ∈ [𝑛], 𝑤 ∗

𝑖 = 1

∥(𝑤 + 𝛽1) ⊙ 𝑦 − (𝑤 ∗ + 𝛽1) ⊙ 𝑦∗ ∥2 = ∥Δ∥𝐹 .

So the claim follows since 𝛽 ≥ 0 and termwise
∥Δ∥𝐹 + Δ𝑖 ≥ |Δ𝑖 | + Δ𝑖 ≥ 0.

Now, for the first part in (10), we get
∥𝑉 𝑆∗𝑅∥2

𝐹 = tr( 𝑆∗⊤
(cid:124)(cid:123)(cid:122)(cid:125)
⪰0

𝑉 ⊤𝑉
(cid:124)(cid:123)(cid:122)(cid:125)
⪰0

𝑆∗
(cid:124)(cid:123)(cid:122)(cid:125)
⪰0

𝑅𝑅⊤
)
(cid:124)(cid:123)(cid:122)(cid:125)
⪰0

≥ 𝜎2

min (𝑅)𝜎nnz (𝑆∗)tr(𝑉 𝑇 𝑉 𝑆∗).

For the second in (10), we get

tr(cid:0)𝑉 ⊤𝑉 𝑆∗𝑅𝑅⊤Δ(cid:1) ≥ −∥Δ∥𝐹 Tr (cid:0)𝑉 ⊤𝑉 𝑆∗𝑅𝑅⊤(cid:1)

≥ −∥Δ∥𝐹 𝜎2
this last inequality is given by our previous claim, the fact that
𝑆∗ ⪰ 0 (observation 6.2) and

max (𝑅)tr(cid:0)𝑉 ⊤𝑉 𝑆∗(cid:1),

) = Tr(𝑉 ⊤𝑉 𝑆∗𝐷2)
Tr(𝑉 ⊤𝑉 𝑆∗𝑅𝑅⊤) = Tr(𝑉 ⊤𝑉 𝑆∗ 𝑈 𝐷2𝑈 ⊤
(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)
(cid:125)
(cid:123)(cid:122)
(cid:124)
𝑅𝑅⊤

≤ 𝜎2

max (𝑅) Tr(𝑉 ⊤𝑉 𝑆∗).

Using the lower bounds in (10) gives us

∥𝑉 − ˆ𝑉 ∥2

𝐹 ≥ (cid:0)𝜎2

min (𝑅)𝜎nnz (𝑆∗) − 2∥Δ∥𝐹 𝜎2

max (𝑅)(cid:1)tr(cid:0)𝑉 ⊤𝑉 𝑆∗(cid:1).

To conclude, the term
Tr(𝑉 ⊤𝑉 𝑆∗) = Tr(𝑉 ⊤𝑉𝐶) − Tr(−𝑉 ⊤𝑉 𝐷𝑦∗ ) = 𝑓 (𝑉 ) − Tr(−𝑉 ⊤𝑉 𝐷𝑦∗ )

𝑖 = 𝑓 (𝑉 ) + ⟨1, 𝑦∗⟩
·𝑦∗

𝑖)
= 𝑓 (𝑉 ) +

∑︁

𝑖

⟨𝑣𝑖, 𝑣𝑖 ⟩
(cid:32)
(cid:32)
(cid:123)(cid:122)
(cid:125)
(cid:124)
=1

𝑖𝑖)
≥ 𝑓 (𝑉 ) − 𝑓 ∗.

where 𝑖) follows from the fact that 𝐷𝑦∗ is diagonal. To understand
𝑖𝑖), consider the dual to the diagonally constrained SDP problem (1)
(i.e., see Lemma 3.12 of [59] for more details):

max
𝑦

−⟨1, 𝑦⟩, such that 𝐶 + 𝐷𝑦 ⪰ 0

(11)

We know that 𝐶 + 𝐷𝑦∗ = 𝑆 ∗
1+𝛽 ⪰ 0 from Observation 6.2. Therefore,
𝑦∗ is a feasible solution to the dual problem (11), revealing that
𝑓 ∗ ≥ −⟨1, 𝑦∗⟩. This fact allows us to derive the inequality given by
𝑖𝑖). Then, if we define 𝜁 = 𝜎2
max (𝑅) with
𝜎min (𝑅) = 1/(𝑤 ⊙ 𝑦)max and 𝜎max (𝑅) = 1/(𝑤 ⊙ 𝑦)min, we arrive at
the final result:

min (𝑅)𝜎𝑛𝑛𝑧 (𝑆∗) and 𝛾 = 2𝜎2

∥𝑉 − ˆ𝑉 ∥2

𝐹 ≥ (𝜁 − 𝛾 ∥Δ∥𝐹 ) (𝑓 (𝑉 ) − 𝑓 ★)

It should be noted that both 𝜁 and 𝛾 are strictly positive constants
because 𝑅 is defined as an invertible matrix and, therefore, has all
non-zero eigenvalues.

Proof of Lemma 4.3
Recall that Δ𝑖 = (𝑤𝑖 + 𝛽)𝑦𝑖 − (𝑤★
of Δ𝑖 ˆ𝑣𝑖 into the following expression:

𝑖 + 𝛽)𝑦★

𝑖 . We can unroll the value

𝑖 )(cid:1) ˆ𝑣𝑖
Then, we derive the following equality from (6):

𝑖 ) + 𝛽 (𝑦𝑖 − 𝑦∗

(cid:0)(𝑤𝑖𝑦𝑖 − 𝑤 ∗

𝑖 𝑦∗

𝑤𝑖𝑦𝑖 ˆ𝑣𝑖 = − (1 + 𝛽) 𝑔𝑖 − 𝛽𝑦𝑖𝑣𝑖

= − (1 + 𝛽) 𝑍𝑖𝑐𝑖 − 𝛽𝑦𝑖𝑣𝑖

(12)

(13)

𝑖 = (1 + 𝛽) 𝑐𝑖 + 𝑤 ∗

where we denote 𝑍𝑖 = 𝑍𝑖 (𝑉 ) for brevity and 𝑐𝑖 as the 𝑖th column
of 𝐶. We denote 𝑠∗
𝑖 𝑒𝑖 . By adding (12) to
both sides of (13), we arrive at the following, expanded version of
the update rule in (6).
𝑖 𝑦∗

𝑖 𝑒𝑖 + 𝛽𝑦∗

𝑖 𝑦∗

𝑤𝑖𝑦𝑖 ˆ𝑣𝑖 − 𝑤 ∗
𝑖 ˆ𝑣𝑖 + 𝛽𝑦𝑖 ˆ𝑣𝑖 − 𝛽𝑦∗
𝑖 ˆ𝑣𝑖
𝑖 𝑦∗
= − (1 + 𝛽) 𝑍𝑖𝑐𝑖 − 𝛽𝑦𝑖𝑣𝑖 − 𝑤 ∗
𝑖)
𝑖 )(cid:1) (𝑣𝑖 − ˆ𝑣𝑖 ).
= −𝑍𝑖𝑠∗

𝑖 − 𝛽 (𝑦𝑖 − 𝑦∗

𝑖 𝑦∗

𝑖 + (cid:0)𝑤 ∗
where 𝑖) follows from the definition of 𝑠★
By combining Assumption 4.1 and Lemma 4.1, it is known that

𝑖 and the fact that 𝑍𝑖𝑒𝑖 = 𝑣𝑖 .

𝑖 ˆ𝑣𝑖 + 𝛽𝑦𝑖 ˆ𝑣𝑖 − 𝛽𝑦∗
𝑖 ˆ𝑣𝑖

(14)

Kim, et al.

Therefore, based on (15) and (16), it is known that ∥𝑍𝑖𝑠★

2 and
2 are both upper bounded by a positive factor of 𝑓 (𝑉 ) − 𝑓 ★.

𝑖 ∥2

∥𝑣𝑖 − ˆ𝑣𝑖 ∥2
The inner product of (12) with itself to yields:
𝑖 )(cid:1)2

𝑖 ) + 𝛽 (𝑦𝑖 − 𝑦∗

𝑖 𝑦∗

Δ2
𝑖

𝑖)
= (cid:0)(𝑤𝑖𝑦𝑖 − 𝑤 ∗
𝑖𝑖)
≤ 2∥𝑍𝑖𝑠∗
= 2∥𝑍𝑖𝑠∗

𝑖 ∥2 + 2(𝑦∗
𝑖 − 𝛽𝑦𝑖 )2 ∥𝑣𝑖 − ˆ𝑣𝑖 ∥2
2
𝑖 ∥2 + 2(𝑦∗
𝑖

𝑖 𝑦𝑖 + 𝑦𝑖

− 2𝛽𝑦∗

2) ∥𝑣𝑖 − ˆ𝑣𝑖 ∥2

where 𝑖) follows from the fact that ˆ𝑣𝑖 is a unit vector and 𝑖𝑖) follows
from combining observation 6.1 with (14). Next, we have:

∥(𝑤 + 𝛽1) ⊙ 𝑦 − (𝑤 ∗ + 𝛽1) ⊙ 𝑦∗ ∥2

2 = ∥Δ∥2

𝐹 =

𝑛
∑︁

𝑖=1

Δ2
𝑖 .

We combine this expression with the upper bounds for ∥𝑍𝑖𝑠★
and ∥𝑣𝑖 − ˆ𝑣𝑖 ∥2
where 𝜏 is defined as some positive constant:

𝑖 ∥2
2
2 derived in (15) and (16) to arrive at the final result,

∥(𝑤 + 𝛽1) ⊙ 𝑦 − (𝑤 ∗ + 𝛽1) ⊙ 𝑦∗ ∥2

2 ≤ 𝜏 (𝑓 (𝑉 ) − 𝑓 ∗)

Proof of Theorem 4.1
Based on Lemma 4.3, a neighborhood can be selected around the
optimum such that the value of 𝑓 (𝑉 ) − 𝑓 ★ is sufficiently small.
We define this neighborhood through the selection of a positive
constant 𝜅 such that the following inequality holds, where 𝜏 is
defined in Lemma 4.3:

(cid:19)2

(cid:18) 𝜁 − 𝜅
𝛾

≥ 𝜏 (cid:0)𝑓 (𝑉 ) − 𝑓 ★(cid:1)

(17)

Within this expression, 𝜁 and 𝛾 are both defined in Lemma 4.2. Be-
cause 𝜁 and 𝛾 are both strictly positive (i.e., see Lemma 4.2), (cid:16) 𝜁 −𝜅
(cid:17) is
𝛾
known to be strictly positive so long as 𝜅 ∈ [0, 𝜁 ). Therefore, there
always exists a value of 𝜅 such that (17) will be true within a suffi-
ciently small neighborhood around the optimum. We combine (17)
with the inequality from Lemma 4.3 to yield the following:

(cid:19)2

(cid:18) 𝜁 − 𝜅
𝛾
Then, because (cid:16) 𝜁 −𝜅
𝛾
above expression to yield the following:

≥ 𝜏 (𝑓 (𝑉 ) − 𝑓 ∗) ≥ ∥Δ∥2
𝐹 ,

(cid:17) is strictly positive, we can manipulate the

𝜁 − 𝛾 ∥Δ∥𝐹 ≥ 𝜅.

(18)

The above inequality holds for all successive iterations of Algo-
rithm 2. Then, based on the combination of Lemma 4.1 and assump-
tion 4.1, 𝑓 (𝑉 ) − 𝑓 ( ˆ𝑉 ) ≥ 𝛿 1−𝛽
1+𝛽 ∥𝑉 − ˆ𝑉 ∥2
1 − 𝛽
1 + 𝛽
1 − 𝛽
1 + 𝛽

𝑓 (𝑉 ) − 𝑓 ( ˆ𝑉 ) ≥ 𝛿

𝜅 (𝑓 (𝑉 ) − 𝑓 ∗)

𝐹 , and thus

∥𝑉 − ˆ𝑉 ∥2
𝐹

𝑖)
≥ 𝛿

𝑓 (𝑉 ) − 𝑓 ∗ ≥

1 − 𝛽
1 + 𝛽

𝛿 ∥𝑣𝑖 − ˆ𝑣𝑖 ∥2
2.

Besides,

𝑓 (𝑉 ) − 𝑓 ∗ ≥ 𝑓 (𝑍𝑖 ) − 𝑓 ∗ = Tr(𝑍 ⊤

≥ 𝜎−1

max (𝑆∗)∥𝑍𝑖𝑆∗ ∥2

max (𝑆∗)∥𝑍𝑖𝑠∗

𝑖 ∥2
2

𝑖 𝑍𝑖𝑆∗)
𝐹 ≥ 𝜎−1

(15)

(16)

where 𝑖) is derived by combining (18) and Lemma 4.2. This expres-
sion in turn implies the following.

(cid:18)

1 − 𝛿𝜅

(cid:19)

1 − 𝛽
1 + 𝛽

(𝑓 (𝑉 ) − 𝑓 ∗) ≥ 𝑓 ( ˆ𝑉 ) − 𝑓 ∗.

thus giving us the desired linear convergence. By substituting 𝜌 =
𝛿𝜅 1−𝛽
1+𝛽

, we arrive at the final result.

Momentum-inspired Low-Rank Coordinate Descent for Diagonally Constrained SDPs

7 CONVERGENCE TO FIRST-ORDER

CRITICAL POINT

Mixing method++ not only has local linear convergence, but it
always converges to a first-order critical point, per following Theo-
rem:

Theorem 7.1. Let 𝑉 ℓ = 𝑍 ℓ

𝑛+1 (𝑉 ), see definition (7), for all ℓ ∈ N;
i.e., the collection of points generated by Mixing Method++ after
finishing the inner loop. Then, under the assumption 4.1, {𝑉 ℓ }ℓ con-
verges to a limit point ¯𝑉 and the Riemannian gradient at ¯𝑉 is zero
(Mixing Method++ converges to a first-order critical point).

Proof. For 𝛽 in [0, 1) we know by lemma 4.1 that the objective
function is decreasing. Besides, (𝑆𝑘−1)𝑛 is compact, indeed limit
point compact, so there exists a limit point ¯𝑉 such that 𝑓 ( ¯𝑉 ) =
lim𝑘 𝑓 (𝑉 𝑘 ) by continuity of 𝑓 . It is clear that ¯𝑉 is a fixed point in
relation (9), so

¯𝑉𝐶 = −

¯𝑉 𝐷 ( ¯𝑤+𝛽1) ⊙ ¯𝑦
1 + 𝛽

.

(19)

Since the constraint set is a product of spheres, its corresponding
tangent space (henceforth denoted by the letter T) at the point ¯𝑉 is
given by the product of tangent spaces of 𝑆𝑘−1; namely

𝑆𝑘−1(cid:17)𝑛
(cid:16)

=

T ¯𝑉

(cid:16)
𝑆𝑘−1(cid:17)

,

T ¯𝑣𝑗

𝑛
(cid:214)

𝑗=1

(20)

where ¯𝑣 𝑗 is the 𝑗th column of ¯𝑉 .

The above result gives us a way to characterize the tangent space.
To this end, it is actually enough to work with the tangent space of
𝑆𝑘−1.

By definition, for any 𝑣 𝑗 , the vector (cid:164)𝑣 𝑗 ∈ R𝑘 is in the tangent
space of 𝑆𝑘−1 if and only if there exists a curve 𝜑 : 𝐼 → 𝑆𝑘−1 such
that 𝜑 (0) = 𝑣 𝑗 and (cid:164)𝜑 (0) = (cid:164)𝑣 𝑗 , where (cid:164)𝜑 is the derivative of 𝜑. Then
𝜑 (𝑡) ∈ 𝑆𝑘−1 if satisfies ⟨𝜑 (𝑡), 𝜑 (𝑡)⟩ = 1 for all 𝑡 ∈ 𝐼 . Differentiating
on both sides leads us to 0 = ⟨ (cid:164)𝜑 (𝑡), 𝜑 (𝑡)⟩ + ⟨𝜑 (𝑡), (cid:164)𝜑 (𝑡)⟩. Evaluating
at 𝑡 = 0, we get

2⟨(cid:164)𝑣 𝑗 , 𝑣 𝑗 ⟩ = 0,
thus { (cid:164)𝑣 𝑗 ∈ R𝑘 : ⟨(cid:164)𝑣 𝑗 , 𝑣 𝑗 ⟩ = 0} ⊆ T𝑣𝑗 𝑆𝑘−1, since both subspaces are
of the same dimension, { (cid:164)𝑣 𝑗 ∈ R𝑘 : ⟨(cid:164)𝑣 𝑗 , 𝑣 𝑗 ⟩ = 0} = T𝑣𝑗 𝑆𝑘−1.

Now by (20) and the previous analysis, we finally arrive to the

characterization of the tangent space; namely

𝑆𝑘−1(cid:17)𝑛
(cid:16)

T ¯𝑉

(cid:110) (cid:164)¯𝑉 ∈ R𝑘×𝑛 : ⟨(cid:164)¯𝑣 𝑗 , ¯𝑣 𝑗 ⟩ = 0 ∀𝑗 ∈ [𝑛]

(cid:111)

,

=

and (cid:164)¯𝑣 𝑗 (𝑣 𝑗 ) corresponds to the 𝑗th column of (cid:164)¯𝑉 ( ¯𝑉 ), respectively.

𝑆𝑘−1(cid:17)𝑛
(cid:16)

Let P⊥ : R𝑘×𝑛 → T ¯𝑉

be the projector operator from the
euclidean space to the tangent space at ¯𝑉 , defined for any𝑊 ∈ R𝑘×𝑛
as follows,

𝑊

P⊥
−−→ (cid:0)𝑤1 − ⟨¯𝑣1, 𝑤1⟩ ¯𝑣1

. . . 𝑤𝑛 − ⟨¯𝑣𝑛, 𝑤𝑛⟩ ¯𝑣𝑛 (cid:1) .

Let the Riemannian gradient of 𝑓 denoted by grad𝑓 (·), and the
gradient of 𝑓 defined in the entire euclidean domain as ∇𝑓 (·). Using
tools from matrix manifold the Riemannian gradient is given by

grad𝑓 ( ¯𝑉 ) = P⊥ (∇𝑓 ( ¯𝑉 )).

It is easy to see that ∇𝑓 ( ¯𝑉 ) = 2 ¯𝑉𝐶, and by relation (19), this yields
us to the equivalent version ∇𝑓 ( ¯𝑉 ) = − 2
1+𝛽

¯𝑉 𝐷 ( ¯𝑤+𝛽1) ⊙ ¯𝑦.

Finally, (cid:0)∇𝑓 ( ¯𝑉 )(cid:1)

𝑗 = − 2

1+𝛽 (𝑤 𝑗𝑦 𝑗 + 𝛽𝑦 𝑗 ) ¯𝑣 𝑗 , ∀𝑗 ∈ [𝑛] and by defi-

nition of the projection map we get

(cid:0)P⊥ (∇𝑓 ( ¯𝑉 ))(cid:1)

𝑗 =

2
1 + 𝛽

(𝑤 𝑗𝑦 𝑗 + 𝛽𝑦 𝑗 )(−¯𝑣 𝑗 + ¯𝑣 𝑗 ) = 0.

So, we have (cid:0)P⊥ (∇𝑓 ( ¯𝑉 )(cid:1)

𝑗 = 0, for all coordinates 𝑗 ∈ [𝑛], and thus

grad𝑓 ( ¯𝑉 ) = P⊥ (∇𝑓 ( ¯𝑉 )) = 0.

□

8 CONCLUSION AND FUTURE DIRECTIONS
We present a novel approach, Mixing Method++, to solve diagonally
constrained SDPs. Mixing Method++ inherits the simplicity—and
non-trivially preserves theoretical guarantees from—its predeces-
sor. In practice, it yields not only faster convergence on nearly all
tested instances, but also improvements in solution quality. Mixing
Method++ adds one addition hyperparameter 𝛽 for which we pro-
vide a theoretical upper bound (i.e., 𝛽 < 1). Using 𝛽 = 0.8 experi-
mentally leads to a robust algorithm, which outperforms Mixing
Method and numerous other state-of-the-art SDP solvers. Theoreti-
cally validating the experimental acceleration provided by Mixing
Method++ is still an open problem, which could potentially be han-
dled with the help of Lyapunov Analysis [28, 60].

ACKNOWLEDGMENTS
AK acknowledges funding by the NSF (CCF-1907936). This work
was partially done as MTT’s and CW’s class project for “COMP545:
Advanced Topics in Optimization,” Rice University, Spring 2021. AK
thanks Danny Carey for his percussion performance at the song
“Pneuma.”

REFERENCES
[1] E. Abbe. 2018. Community Detection and Stochastic Block Models. Foundations

and Trends® in Communications and Information Theory 14, 1-2 (2018), 1–162.
[2] Farid Alizadeh, Jean-Pierre A Haeberly, and Michael L Overton. 1997. Com-
plementarity and nondegeneracy in semidefinite programming. Mathematical
programming 77, 1 (1997), 111–128.

[3] Mosek ApS. 2019. Mosek optimization toolbox for MATLAB. User’s Guide and

Reference Manual, version 4 (2019).

[4] M. Assran and M. Rabbat. 2020. On the Convergence of Nesterov’s Accelerated
Gradient Method in Stochastic Settings. arXiv preprint arXiv:2002.12414 (2020).
[5] F. Barahona, M. Grötschel, M. Jünger, and G. Reinelt. 1988. An application
of combinatorial optimization to statistical physics and circuit layout design.
Operations Research 36, 3 (1988), 493–513.

[6] Alexander I. Barvinok. 1995. Problems of distance geometry and convex proper-
ties of quadratic maps. Discrete & Computational Geometry 13, 2 (1995), 189–202.
[7] Jeremias Berg, Emir Demirović, and Peter J. Stuckey. 2019. Core-Boosted Linear
Search for Incomplete MaxSAT. In Integration of Constraint Programming, Arti-
ficial Intelligence, and Operations Research, Louis-Martin Rousseau and Kostas
Stergiou (Eds.). Springer International Publishing, Cham, 39–56.

[8] S. Bhojanapalli, N. Boumal, P. Jain, and P. Netrapalli. 2018. Smoothed analysis
for low-rank solutions to semidefinite programs in quadratic penalty form. arXiv
preprint arXiv:1803.00186 (2018).

[9] Srinadh Bhojanapalli, Anastasios Kyrillidis, and Sujay Sanghavi. 2016. Dropping
convexity for faster semi-definite optimization. In Conference on Learning Theory.
530–582.

[10] N. Boumal. 2016. Nonconvex phase synchronization. SIAM Journal on Optimiza-

tion 26, 4 (2016), 2355–2377.

[11] S. Burer and R. Monteiro. 2003. A nonlinear programming algorithm for solving
semidefinite programs via low-rank factorization. Mathematical Programming
95, 2 (2003), 329–357.

Kim, et al.

[12] John Chen, Cameron Wolfe, Zhao Li, and Anastasios Kyrillidis. 2019. Demon:
Momentum Decay for Improved Neural Network Training. arXiv preprint
arXiv:1910.04952 (2019).

[13] O. Devolder, F. Glineur, and Y. Nesterov. 2014. First-order methods of smooth
convex optimization with inexact oracle. Mathematical Programming 146, 1-2
(2014), 37–75.

[14] M. Deza and M. Laurent. 1994. Applications of cut polyhedra - II. J. Comput.

Appl. Math. 55, 2 (1994), 217–247.

[15] Murat A. Erdogdu, Asuman Ozdaglar, Pablo A. Parrilo, and Nuri Denizcan Vanli.
2018. Convergence Rate of Block-Coordinate Maximization Burer-Monteiro
Method for Solving Large SDPs. arXiv e-prints, Article arXiv:1807.04428 (July
2018), arXiv:1807.04428 pages. arXiv:1807.04428 [math.OC]

[16] Alan Frieze and Mark Jerrum. 1995. Improved approximation algorithms for MAX
𝑘-CUT and MAX BISECTION. In International Conference on Integer Programming
and Combinatorial Optimization. Springer, 1–13.

[39] S. Mei, T. Misiakiewicz, A. Montanari, and R. Oliveira. 2017. Solving SDPs
for synchronization and MaxCut problems via the Grothendieck inequality. In
Conference on Learning Theory. 1476–1515.
[40] RV Mises and Hilda Pollaczek-Geiringer. 1929.

Praktische Verfahren der
Gleichungsauflösung. ZAMM-Journal of Applied Mathematics and Mechan-
ics/Zeitschrift für Angewandte Mathematik und Mechanik 9, 2 (1929), 152–164.

[41] ApS Mosek. 2015. The MOSEK optimization toolbox for Python manual.
[42] Idin Motedayen-Aval, Arvind Krishnamoorthy, and Achilleas Anastasopoulos.
2006. Optimal joint detection/estimation in fading channels with polynomial
complexity. IEEE transactions on information theory 53, 1 (2006), 209–223.
[43] Yurii Nesterov. 2013. Introductory lectures on convex optimization: A basic course.

Vol. 87. Springer Science & Business Media.

[44] Y. Nesterov and A. Nemirovskii. 1989. Self-concordant functions and polynomial-
time methods in convex programming. USSR Academy of Sciences, Central Eco-
nomic & Mathematic Institute.

[17] B. Gärtner and J. Matousek. 2012. Approximation algorithms and semidefinite

[45] Y. Nesterov and A. Nemirovskii. 1994. Interior-point polynomial algorithms in

programming. Springer Science & Business Media.

convex programming. SIAM.

[18] E. Ghadimi, H. Feyzmahdavian, and M. Johansson. 2015. Global convergence
of the heavy-ball method for convex optimization. In 2015 European control
conference (ECC). IEEE, 310–315.

[19] F. Gieseke, T. Pahikkala, and C. Igel. 2013. Polynomial runtime bounds for fixed-
rank unsupervised least-squares classification. In Asian Conference on Machine
Learning. 62–71.

[20] M. Goemans and D. Williamson. 1995.

Improved approximation algorithms
for maximum cut and satisfiability problems using semidefinite programming.
Journal of the ACM (JACM) 42, 6 (1995), 1115–1145.

[21] Michel X Goemans and David P Williamson. 2004. Approximation algorithms
for MAX-3-CUT and other problems via complex semidefinite programming. J.
Comput. System Sci. 68, 2 (2004), 442–470.

[22] Hayato Goto, Kosuke Tatsumura, and Alexander R Dixon. 2019. Combinatorial
optimization by simulating adiabatic bifurcat‘ions in nonlinear Hamiltonian
systems. Science advances 5, 4 (2019), eaav2372.

[46] Brendan O’donoghue and Emmanuel Candes. 2015. Adaptive restart for acceler-
ated gradient schemes. Foundations of computational mathematics 15, 3 (2015),
715–732.

[47] Gábor Pataki. 1998. On the rank of extreme matrices in semidefinite programs
and the multiplicity of optimal eigenvalues. Mathematics of operations research
23, 2 (1998), 339–358.

[48] Boris T Polyak. 1987. Introduction to optimization. optimization software. Inc.,

Publications Division, New York 1 (1987).

[49] J. Shi and J. Malik. 2000. Normalized cuts and image segmentation. IEEE Trans-
actions on pattern analysis and machine intelligence 22, 8 (2000), 888–905.
[50] A. Singer. 2011. Angular synchronization by eigenvectors and semidefinite
programming. Applied and computational harmonic analysis 30, 1 (2011), 20–36.
[51] Anthony Man-Cho So, Jiawei Zhang, and Yinyu Ye. 2007. On approximating com-
plex quadratic optimization problems via semidefinite programming relaxations.
Mathematical Programming 110, 1 (2007), 93–110.

[23] M. Grötschel, L. Lovász, and A. Schrijver. 2012. Geometric algorithms and combi-

[52] Jos F Sturm. 1999. Using SeDuMi 1.02, a MATLAB toolbox for optimization over

natorial optimization. Vol. 2. Springer Science & Business Media.

[24] Gurobi. 2014. Inc.,“Gurobi optimizer reference manual,” 2015.
[25] B. Hajek, Y. Wu, and J. Xu. 2016. Achieving exact cluster recovery threshold via
semidefinite programming. IEEE Transactions on Information Theory 62, 5 (2016),
2788–2797.

[26] A. Hartmann. 1996. Cluster-exact approximation of spin glass groundstates.
Physica A: Statistical Mechanics and its Applications 224, 3-4 (1996), 480–488.
[27] Robert W Heath and Arogyaswami Paulraj. 1998. A simple scheme for transmit
diversity using partial channel feedback. In Conference Record of Thirty-Second
Asilomar Conference on Signals, Systems and Computers (Cat. No. 98CH36284),
Vol. 2. IEEE, 1073–1078.

[28] Chi Jin, Praneeth Netrapalli, and Michael I Jordan. 2018. Accelerated gradient
descent escapes saddle points faster than gradient descent. In Conference On
Learning Theory. 1042–1085.

[29] R. Karp. 1972. Reducibility among combinatorial problems. In Complexity of

computer computations. Springer, 85–103.

[30] N. Krislock, J. Malick, and F. Roupin. 2017. BiqCrunch: a semidefinite branch-
and-bound method for solving binary quadratic problems. ACM Transactions on
Mathematical Software (TOMS) 43, 4 (2017), 32.

[31] Anastasios Kyrillidis, Amir Kalev, Dohyung Park, Srinadh Bhojanapalli, Con-
stantine Caramanis, and Sujay Sanghavi. 2018. Provable compressed sensing
quantum state tomography via non-convex methods. npj Quantum Information
4, 1 (2018), 1–7.

[32] Anastasios Kyrillidis and George N Karystinos. 2014. Fixed-rank Rayleigh quo-
tient maximization by an MPSK sequence. IEEE transactions on communications
62, 3 (2014), 961–975.

[33] Anastasios T Kyrillidis and George N Karystinos. 2011. Rank-deficient quadratic-
form maximization over M-phase alphabet: Polynomial-complexity solvability
and algorithmic developments. In 2011 IEEE International Conference on Acoustics,
Speech and Signal Processing (ICASSP). IEEE, 3856–3859.

[34] L. Lessard, B. Recht, and A. Packard. 2016. Analysis and design of optimization
algorithms via integral quadratic constraints. SIAM Journal on Optimization 26,
1 (2016), 57–95.

[35] Huikang Liu, Man-Chung Yue, Anthony Man-Cho So, and Wing-Kin Ma. 2017.
A discrete first-order method for large-scale MIMO detection with provable guar-
antees. In 2017 IEEE 18th International Workshop on Signal Processing Advances in
Wireless Communications (SPAWC). IEEE, 1–5.

[36] N. Loizou and P. Richtárik. 2017. Momentum and stochastic momentum for
stochastic gradient, Newton, proximal point and subspace descent methods.
arXiv preprint arXiv:1712.09677 (2017).

[37] David J Love, Robert W Heath, and Thomas Strohmer. 2003. Grassmannian beam-
forming for multiple-input multiple-output wireless systems. IEEE transactions
on information theory 49, 10 (2003), 2735–2747.

[38] R. Martí, A. Duarte, and M. Laguna. 2009. Advanced scatter search for the max-cut

problem. INFORMS Journal on Computing 21, 1 (2009), 26–38.

symmetric cones. Optimization methods and software 11, 1-4 (1999), 625–653.

[53] Q. Tran-Dinh, A. Kyrillidis, and V. Cevher. 2014. An inexact proximal path-
following algorithm for constrained convex minimization. SIAM Journal on
Optimization 24, 4 (2014), 1718–1745.

[54] Q. Tran-Dinh, A. Kyrillidis, and V. Cevher. 2016. A single-phase, proximal path-

following framework. arXiv preprint arXiv:1603.01681 (2016).

[55] N. Veldt, A. Wirth, and D. Gleich. 2017. Correlation Clustering with Low-Rank
Matrices. In Proceedings of the 26th International Conference on World Wide Web.
International World Wide Web Conferences Steering Committee, 1025–1034.

[56] I. Waldspurger, A. d’Aspremont, and S. Mallat. 2015. Phase recovery, MAXCUT
and complex semidefinite programming. Mathematical Programming 149, 1-2
(2015), 47–81.

[57] Bao Wang, Tan M Nguyen, Andrea L Bertozzi, Richard G Baraniuk, and Stanley J
Osher. 2020. Scheduled restart momentum for accelerated stochastic gradient
descent. arXiv preprint arXiv:2002.10583 (2020).

[58] J. Wang, T. Jebara, and S.-F. Chang. 2013. Semi-supervised learning using greedy
MaxCut. Journal of Machine Learning Research 14, Mar (2013), 771–800.
[59] P.-W. Wang, W.-C. Chang, and Z. Kolter. 2017. The Mixing method: coordinate
descent for low-rank semidefinite programming. arXiv preprint arXiv:1706.00476
(2017).

[60] Ashia C Wilson, Benjamin Recht, and Michael I Jordan. 2016. A Lyapunov
analysis of momentum methods in optimization. arXiv preprint arXiv:1611.02635
(2016).

[61] Liuqin Yang, Defeng Sun, and Kim-Chuan Toh. 2015. SDPNAL: a majorized semis-
mooth Newton-CG augmented Lagrangian method for semidefinite program-
ming with nonnegative constraints. Mathematical Programming Computation 7,
3 (2015), 331–366.

[62] Alp Yurtsever, Joel A Tropp, Olivier Fercoq, Madeleine Udell, and Volkan Cevher.
2019. Scalable Semidefinite Programming. arXiv preprint arXiv:1912.02949 (2019).
[63] Alp Yurtsever, Joel A. Tropp, Olivier Fercoq, Madeleine Udell, and Volkan Cevher.
2019. Scalable Semidefinite Programming. arXiv e-prints, Article arXiv:1912.02949
(Dec 2019), arXiv:1912.02949 pages. arXiv:1912.02949 [math.OC]

[64] Y. Zhong and N. Boumal. 2018. Near-optimal bounds for phase synchronization.

SIAM Journal on Optimization 28, 2 (2018), 989–1016.

