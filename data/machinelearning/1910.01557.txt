9
1
0
2

t
c
O
0
1

]

O
R
.
s
c
[

2
v
7
5
5
1
0
.
0
1
9
1
:
v
i
X
r
a

CyPhyHouse: A Programming, Simulation, and Deployment
Toolchain for Heterogeneous Distributed Coordination

Ritwika Ghosh1, Joao P. Jansch-Porto2, Chiao Hsieh1, Amelia Gosse2,
Minghao Jiang3, Hebron Taylor2, Peter Du3, Sayan Mitra3, Geir Dullerud2

October 11, 2019

Abstract

Programming languages, libraries, and development tools have transformed the application develop-
ment processes for mobile computing and machine learning. This paper introduces the CyPhyHouse—a
toolchain that aims to provide similar programming, debugging, and deployment beneﬁts for distributed
mobile robotic applications. Users can develop hardware-agnostic, distributed applications using the
high-level, event driven Koord programming language, without requiring expertise in controller design
or distributed network protocols. The modular, platform-independent middleware of CyPhyHouse im-
plements these functionalities using standard algorithms for path planning (RRT), control (MPC), mutual
exclusion, etc. A high-ﬁdelity, scalable, multi-threaded simulator for Koord applications is developed
to simulate the same application code for dozens of heterogeneous agents. The same compiled code
can also be deployed on heterogeneous mobile platforms. The effectiveness of CyPhyHouse in improv-
ing the design cycles is explicitly illustrated in a robotic testbed through development, simulation, and
deployment of a distributed task allocation application on in-house ground and aerial vehicles.

1 Introduction

Programming languages like C#, Swift, Python, and development tools like LLVM [1] have helped make
millions of people, with diverse backgrounds, into mobile application developers. Open source software
libraries like Caffe [2], PyTorch [3] and Tensorﬂow [4] have propelled the surge in machine learning re-
search and development. To a lesser degree, similar efforts are afoot in democratizing robotics. Most
prominently, ROS [5] provides hardware abstractions, device drivers, messaging protocols, many common
library functions and has become widely used. The PyRobot [6] and PythonRobotics [7] libraries provide
hardware-independent implementations of common functions for physical manipulation and navigation of
individual robots.

Nevertheless, it requires signiﬁcant effort (weeks, not hours) to develop, simulate, and debug a new ap-
plication for a single mobile robot—not including the effort to build the robot hardware. The required effort

Coordinated Science Laboratory, University of Illinois at Urbana-Champaign, Urbana, IL 61801
1 Department of Computer Science
2 Department of Mechanical Science and Engineering
3 Department of Electrical and Computer Engineering
{rghosh9,janschp2,chsieh16,gosse2,mjiang24,hdt2,peterdu2,mitras,dullerud}

@illinois.edu

1

 
 
 
 
 
 
grows quickly for distributed and heterogeneous systems, as none of the existing robotics libraries provide
either (a) support for distributed coordination, or (b) easy portability of code across different platforms.

With the aim of simplifying application development for distributed and heterogeneous systems, in this
paper we introduce CyPhyHouse1—an open source software toolchain for programming, simulating, and
deploying mobile robotic applications.

In this work, we target distributed coordination tasks such as collaborative mapping [8], surveillance,
delivery, formation-ﬂight, etc. with aerial drones and ground vehicles. We believe that for these applica-
tions, low-level motion control for the individual robots is standard but tedious, and coordination across
distributed (and possibly heterogeneous) robots is particularly difﬁcult and error-prone. This motivates the
two key abstractions provided by CyPhyHouse: (a) portability of high-level coordination code across differ-
ent platforms; and (b) shared variable communication across robots.

The ﬁrst of the several software components of CyPhyHouse is a high-level programming language
called Koord that enables users to write distributed coordination applications without being encumbered
by socket programming, ROS message handling, and thread management. Our Koord compiler generates
code that can be and has been directly deployed on aerial and ground vehicle platforms as well as simulated
with the CyPhyHouse simulator. Koord language abstractions for path planning, localization, and shared
memory make application programs succinct, portable, and readable (see Section 3). The modular structure
of the CyPhyHouse middleware we have built will make it easy for a roboticist to add support for new
hardware platforms. In summary, the three main contributions of this paper are as follows.

Figure 1: Right: Annotated snapshot of a distributed task allocation application deployed on four
cars and drones using CyPhyHouse in our test arena. The red tasks are incomplete, and the green
are completed. Left bottom: different robotic platforms: the F1/10 Car and the quadcopter. Left top:
Visualization of the same application running in CyPhyHouse simulator which interfaces with Gazebo.

1. An end-to-end distributed application for robotic vehicles and drones developed and deployed using
CyPhyHouse toolchain This Task application requires the participating robots to visit a common list of
points, mutually exclusively, and while avoiding collisions. Our solution program written in Koord is less
than 50 lines long (see Figure 2). Our compiler generates executables for both the drone and the vehicle

1https://cyphyhouse.github.io

2

platforms, linking the platform independent parts of the application with the platform-speciﬁc path planners
and controller. We ran more than 100 experiments with a set of tasks running on different combinations of
ground and aerial vehicles, all with few edits in the conﬁguration ﬁle (see Figure 2).

2. A high-ﬁdelity, scalable, and ﬂexible simulator for distributed heterogeneous systems The simula-
tor executes instances of the application code generated by the Koord compiler—one for each robot in the
scenario. Within the simulator, individual robots communicate with each other over a wired or a wireless
network and with their own simulated sensors and actuators through ROS topics. For example, a simulation
with 16 drones can spawn over 1.4K ROS topics and 1.6K threads, yet, our simulator is engineered to exe-
cute and visualize such scenarios in Gazebo running on standard workstations and laptops. In Section 5, we
present detailed performance analysis of the simulator.

3. A programming language and middleware for heterogeneous platforms that support application
development, simulation, deployment, as well as veriﬁcation2 As explained earlier, Koord provides
abstractions for distributed applications running on possibly heterogeneous platforms. For example, Koord
supports easy coordination across robots: a single line of code like

x[pid ] = (x[pid − 1] + x[pid + 1])/2
assigns to a shared variable x[pid ] of a robot with the unique integer identiﬁer pid , the average of the values
of x[pid − 1] and x[pid + 1] which are the values held respectively by robots pid − 1 and pid + 1. This
makes Koord implementations of consensus-like protocols read almost like their textbook counterparts [10].
These statements are implemented using message-passing in the CyPhyHouse middleware. Koord comes
with well-deﬁned semantics which makes it possible to reason about the correctness of the distributed ap-
plications using formal techniques.

2 Related work

Several frameworks and tools address the challenges in development of distributed robotic applications. Ta-
ble 1 compares these works along the following dimensions: (a) whether the framework has been tested with
hardware deployments, (b) availability of support for networked and distributed robotic systems, (c) sup-
port for heterogeneous platforms, (d) availability of specialized programming language, (e) availability of
a simulator and compiler, and (f) support for formal veriﬁcation and validation.

Drona provides a language with a decentralized motion planner and builds a mail delivery system (sim-
ilar to our Task). The key differences are that Drona uses an asynchronous model of computation (Cy-
PhyHouse uses a synchronous model) and currently only CyPhyHouse has demonstrated deployment on
heterogeneous platforms.

Buzz, the programming language used by ROSBuzz [11] doesn’t provide abstractions like CyPhyHouse
does with Koord, for path planning, de-conﬂicting, and shared variables. Additionally, ROSBuzz speciﬁ-
cally requires the Buzz Virtual Machine to be deployed on each robot platform whereas with CyPhyHouse,
deploying Koord only requires standard ROS and Python packages.

It should also be mentioned, that “Correct-by-construction” synthesis from high-level temporal logic
speciﬁcations have been widely discussed in the context of mobile robotics (see, for example [12, 13, 14, 15,
16]). CyPhyHouse differs in the basic assumption that roboticist’s (programmer’s) creativity and efforts will

2Formal semantics of the language and the automatic veriﬁcation tools are not part of this paper. Some of the details of the

formal aspects of Koord were presented in an earlier workshop paper [9].

3

be necessary well beyond writing high-level specs in solving distributed robotics problems; consequently
only the tedious parts of coordination and control are automated and abstracted in the Koord language and
compiler.

Table 1

HW Dist. Hetero- Sim
Depl. Sys. geneous

Prog.
Lang.

Comp. V&V

Name
ROS [5]
ROSBuzz [11]
PythonRobotics
(cid:88)
PyRobot [6]
(cid:88)
MRPT [17]
Robotarium [18] (cid:88)
Drona [19]
Live [21]
CyPhyHouse

(cid:88)
(cid:88) (cid:88)

(cid:88) (cid:88)
(cid:88)
(cid:88) (cid:88)

(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:88)
(cid:88)

(cid:88) C++/Python/...
(cid:88)
(cid:88)
(cid:88)

Buzz
Python
Python
C++
Matlab
P [20]
LPR
Koord

(cid:88)
(cid:88)

(cid:88)

(cid:88)

(cid:88)
(cid:88)
(cid:88)

(cid:88)

(cid:88)

Other open and portable languages that raise the level of abstraction for robotic systems include [22, 23,
24]. (For an earlier survey see [25]. Most of these older languages are proprietary and platform-speciﬁc.)
VeriPhy [22] also has some commonality with CyPhyHouse; however, instead of a programming language,
the starting point is differential dynamic logic [26].

3 A distributed task allocation application

In this section, we introduce the distributed task allocation problem (Task) that we will use throughout the
paper to illustrate the capabilities of CyPhyHouse.

Given a robot G, and a point x in R3, we say that G has visited x if the position of G stays within an
(cid:15)v-ball x for δv amount of time, for some ﬁxed (cid:15)v > 0 and δv > 0. The distributed task allocation problem
requires a set of robots to visit a sequence of points mutually exclusively:

Task: Given a set of (possibly heterogeneous) robots, a safety distance ds > 0, and a sequence of points
(tasks) list = x1, x2, . . . ∈ R3, it is required that: (a) every unvisited xi in the sequence is visited exactly
by one robot; and (b) no two robots ever get closer than ds.

We view visiting points as an abstraction for location-based objectives like package delivery, mapping,

surveillance, or ﬁre-ﬁghting.

The ﬂowchart in Figure 2 shows a simple idea for solving this problem for a single robot: Robot A
looks for an unassigned task τ from list; if there is a clear path to τ then A assigns itself the task τ . Then
A visits τ following the path; once done it repeats. Of course, converting this to a working solution for a
distributed system is challenging as it involves combining distributed mutual exclusion for assigning a task
τ exclusively to a robot A from the list (step 1) [27, 28], dynamic conﬂict-free path planning (step 2), and
low-level motion control (step 3).

Our Koord language implementation of this ﬂowchart is shown in Figure 2. It has two events: Assign
and Complete. The semantics of Koord is such that execution of the application programs in the distributed
system advances in rounds of duration δ3, and in each round, each robot executes at most one event. A robot
can only execute the statements in the event’s effect (eff) if its precondition (pre) is satisﬁed. If no event is

3δ is a parameter set by the user, with a default value of 0.1 second.

4

enabled, the robot does nothing. In between the rounds, the robots may continue to move as driven by their
local controllers. The Koord middleware (Section 4) ensures that the robot program executions adhere to
this schedule even if local clocks are not precisely synchronized.

In our example, the Assign event uses a single atomic update to assign a task to robot i from the shared
list of tasks called list in a mutually exclusive fashion.4 The route variable shares paths and positions among
all robots, and is used by each robot in computing a collision-free path to an unassigned task.5 To access
variables, e.g., route, shared by a certain robot, each robot program also has access to its unique integer
identiﬁer pid and knows the pid s of all participating robots.

else: atomic:
for i = 0, length(list):
if task.assigned==false:
myTask=list[i ]
testRoute=ﬁndPath(Motion.psn,

myTask.loc)
if pathIsClear(route, testRoute, pid):
isOnTask=true
assign(myTask, pid)
list[i ]=myTask
route[pid ]=testRoute
Motion.path=testRoute
else:
isOnTask=false
route[pid ]=[Motion.psn ]

boolean isOnTask
Task myTask
pos[ ] testRoute
int i

1 using Motion:
actuators:
2
pos[ ] path
3
sensors:
4
pos psn
5
boolean reached
6
7 local:
8
9
10
11
12
13 allread:
14
15 allwrite:
16
17
18 Assign:
19
20

pos[ ] route

Task[ ] list

pre: isOnTask == false
eff: if allAssigned(list): stop

21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37 Complete:
38
39
40

pre: isOnTask and Motion.reached
eff: isOnTask=false

route[pid ]=[Motion.psn ]

robot:

pid: 0
on_device: hotdec_car
motion_automaton: MotTestCar
...
device:

bot_name: hotdec_car
bot_type: CAR
planner: RRT_CAR
positioning_topic:

topic: vrpn_client_node/
type: PoseStamped

reached_topic:

topic: reached
type: String

waypoint_topic:

topic: waypoint
type: String

...

num_robots: 3

Figure 2: Left shows the ﬂowchart for a simple solution to Task application. Middle shows the Task pro-
gram implemented in Koord language for robots with identiﬁer pid to solve distributed task allocation
problem. Right shows snippet of a sample conﬁguration. It includes platform-agnostic settings for the
robot, e.g., robot id (pid), device to run on (on_device), and the number of robots (num_robots), as well
as platform speciﬁc settings, e.g., path planners (planner) and position systems (positioning_topic).

The low-level control of the robot platform is abstracted from the programmers in Koord, with certain
assurances about the controllers from the platform developers (discussed in Section 4 and Section 6). The
Task program uses a controller called Motion to drive the robots through a route, as directed by the position
value set at its actuator port Motion.route. The sensor ports used by the Task program are: (a) Motion.psn:
the robot position in a ﬁxed coordinate system. (b) Motion.reached : a ﬂag indicating whether the robot has
reached its waypoint.

Here the motion module implements vehicle models for the robots. In the next section, we discuss the
CyPhyHouse middleware, which implements a modular design of this runtime system to allow a high degree
of ﬂexibility concerning these modules in deployment and simulation.

4 CyPhyHouse Architecture

A system running a Koord application has three parts: an application program, a controller, and a plant.
At runtime, the Koord program executes within the runtime system of a single agent, or a collection of
programs execute on different agents that communicate using shared variables. The plant consists of the

4We provide several library functions associated with abstract data types (assign, allAssigned) and path planners (ﬁndPath,

pathIsClear). Users can also write functions permitted by Koord syntax.

5Platform speciﬁc path-planners can ensure that ground vehicles do not ﬁnd paths to points above the plane, and aerial vehicles

do not ﬁnd paths to points on the ground.

5

hardware platforms of the participating agents. The controller receives inputs from the program (through
actuator ports), sends outputs back to the program (through sensor ports), and interfaces with the plant. We
developed a software-hardware interface (middleware) in Python 3.5 to support the three-plane architecture
comprising the Koord runtime system.

Figure 3: Each compiled Koord program interacts with CyPhyHouse middleware simply via variables.
The middleware implements distributed shared memory(DSM) across agents and the language abstrac-
tions over platform-speciﬁc controllers through actuator ROS topics, and obtain (real or simulated)
information such as device positions through sensor ROS topics.

4.1 Compilation

The Koord compiler included with CyPhyHouse generates Python code for the application using all the
supported libraries, such as the implementation of distributed shared variables using message passing over
WiFi, motion automata of the robots, high-level collision and obstacle avoidance strategies, etc. The appli-
cation then runs with the Python middleware for CyPhyHouse. The Koord compiler is written using Antlr
(Antlr 4.7.2) in Java [29].6 We use ROS to handle the low-level interfaces with hardware. To communicate
between the high-level programs and low-level controllers, we use Rospy, a Python client library for ROS
which enables the (Python) middleware to interface with ROS Topics and Services used for deployment or
simulation.

4.2 Shared memory and Communication

At a high level, updates to a shared variable by one agent are propagated by the CyPhyHouse middleware,
and become visible to other agents in the next round. The correctness of a program relies on agents having
consistent values of shared variables. When an agent updates a shared variable, the middleware uses message
passing to inform the other agents of the change. These changes should occur before the next round of
computations.

CyPhyHouse supports UDP based messaging over Wi-Fi for communication between robots to im-
plement the shared memory. Any shared memory update translates to a update message which the agent

6Details of the grammar, AST, and IR design of the Koord compiler are beyond the scope of this paper; however, description

of the language and its full grammar are provided in [30] for the interested reader.

6

broadcasts over WiFi.7 The agents running a single distributed Koord application are assumed to be run-
ning on a single network node, with little to no packet loss. However, the communication component of the
middleware can be easily extended to support multi-hop networks as well.

(a) No conﬂict.

(b) Conﬂict.

(c) RRT with smoothing.
Figure 4: Different planner can work with the same code. (a) shows the xy plots of concurrently
available paths during a round of the Task application using an RRT planner for two quadcopters. (b)
shows the same conﬁguration, where paths computed are not viable to be traversed concurrently. The
green markers are current quadcopter positions, The black path is a ﬁxed path, and the red points
are unsassigned task locations. (c) shows the same scenarios under which paths cannot be traversed
concurrently, except that a different RRT-based planner (with path smoothing) is used.

4.3 Dynamics

If an application requires the agents to move, each agent uses an abstract class, Motion automaton, which
must be implemented for each hardware model (either in deployment or simulation). This automaton sub-
scribes to the required ROS Topics for positioning information of an agent, updates the reached ﬂag of the

7The interested reader is referred to [30] for more details on the shared memory model, and its formal semantics.

7

motion module, and publishes to ROS topics for motion-related commands, such as waypoint or path fol-
lowing. It also provides the user the ability to use different path planning modules as long as they support the
interface functions. Figure 4 shows two agents executing the same application using different path planners.

4.4 Portability

Apart from the dynamics, all aforementioned components of the CyPhyHouse middleware are platform-
agnostic. Our implementation allows any agent or system simulating or deploying a Koord program to use
a conﬁguration ﬁle (as shown in Figure 2) to specify the system conﬁguration, and the runtime modules for
each agent, including the dynamics-related modules, while using the same application code.

5 CyPhyHouse multi-robot simulator

We have built a high-ﬁdelity simulator for testing distributed Koord applications with large number of
heterogeneous robots in different scenarios. Our middleware design allows us to separate the simulation
of Koord applications and communications from the physical models for different platforms. Conse-
quently, the compiled Koord applications together with the communication modules can run directly in the
simulator—one instance for each participating robot, and only the physical dynamics and the robot sensors
are replaced by their simulated counterparts. This ﬂexibility enables users to test their Koord applications
under different scenarios and with various robot hardware platforms. Simpler physical models can be used
for early debugging of algorithms; and the same code can be used later with more accurate physics and
heterogeneous platforms. The simulator can be used to test different scenarios, with different numbers of
(possibly heterogeneous) robots, with no modiﬁcations to the application code itself, rather simply modify-
ing a conﬁguration ﬁle as shown in Figure 5. To our knowledge, this is the only simulator for distributed
robotics providing such ﬁdelity and ﬂexibility.

5.1 Simulator Design

Simulating Koord and communication To faithfully simulate the communication, our simulator spawns
a process for each robot which encompasses all middleware threads. The communication handling threads
in these processes can then send messages to each other through broadcasts within the local network. To
simulate robots on a single machine, we support specifying distinct network ports for robots in the conﬁg-
uration ﬁle. Since the communication is through actual network interfaces, our work can be extended to
simulate different network conditions with existing tools in the future.

Physical Models and Simulated World Our simulated physical world is developed based on Gazebo [31]
and we provide a simulated positioning system to relay positions of simulated devices from Gazebo to the
CyPhyHouse middleware. We integrate two Gazebo robot models from the Gazebo and ROS community,
the car from the MIT RACECAR project [32] and the quadcopter from the hector quadrotor project [33].
Further, we implement a simpliﬁed version of position controller by modifying the provided default model.
Users can choose between simpliﬁed models for faster simulation or original models for accuracy.

In addition to simulation, we also develop Gazebo plugins for visualization. Users may either use these
to plot the movements or traces of the robots for real-time monitoring during experiments or visualize and
analyze execution traces with Gazebo after experiments.

8

(a) Shapeform with 9 drones.

(b) Shapeform with 16 drones.

(c) Task.
Figure 5: CyPhyHouse simulator running different scenarios with the same Koord application. (a)
shows simulation of 9 drones running Shapeform application, (b) shows the Shapeform application on
16 drones. Different scenarios are speciﬁed by changing the conﬁguration ﬁle. (c) shows a simulation
of Task on heteterogenous robots.

5.2 Simulator performance analysis experiments and results.

Large scale simulations play an important role in testing robotic applications and also in training machine
learning modules for perception and control. Therefore, we perform a large set of experiments to measure
the performance and scalability of the CyPhyHouse simulator and experiment with various scenarios (such
as different application Koord programs, increasing numbers of devices, or mixed device types). We then
collect the usages of different resources and the amount of messages in each scenario. Finally, we compare
resource usages and communications to study how our simulator can scale across different scenarios.

In our experiments, we use three Koord programs including the example Task in Figure 2, a line forma-
tion program Lineform, and a program forming a square Shapeform. For Task, we simulate with both cars
and quadcopters to showcase the coordination between heterogeneous devices. For Lineform and Shape-
form, we use only quadcopters to evaluate the impact of increasing numbers of robots on these statistics.
For each experiment scenario with a timeout of 120 seconds, we collect the total message packets and packet
length received by all robots and sample the following resource usages periodically: Real Time Factor (RT
Factor, the ratio between simulated clock vs wall clock), CPU percentage, the memory percentage and the
number of threads. All experiments are run on a workstation with 32 Intel Xeon Silver 4110 2.10GHz CPU
cores and 32 GB main memory.

In Figure 6, we only show the average of each collected metric. For Lineform and Shapeform, RT factor
drops while all resource usages scale linearly with the number of robots. Average number and size of packets
received per second for each robot also grows linearly; hence, the message communication complexity for

9

Figure 6: Resource usages and communications for Shapeform and Lineform.

all robots is quadratic in the number of robots. One can improve the communication complexity with a more
advanced distributed shared memory design.

6 Deployment Setup

6.1 Vehicle platforms

As previously mentioned, the CyPhyHouse toolchain was developed with heterogeneous robotics platforms
in mind. In order to demonstrate such capabilities, we have built several cars and quadcopters. Note that the
cars have nonholonomic constraints, while the quadcopter has uncertain dynamics, so typically to deploy
an application like Task, a roboticist would have to develop a separate application for each platform. With
CyPhyHouse we show that the same application code can be deployed on both platforms.

Quadcopters

Two quadcopters were assembled from off-the-shelf hardware, with a 40cm × 40cm footprint. The main
computer is a Raspberry Pi 3 B+ along with a Navio2 deck for sensing and motor control. Stabilization
and reference tracking are handled by Ardupilot [34]. Between the CyPhyHouse middleware and Ardupi-
lot we include a hardware abstraction layer to convert setpoint messages from the high-level language into
MAVLINK using the mavROS [35]. Since the autopilot is designed for GPS, we convert the current quad-
copter position into the Geographic Coordinate System before sending it to the controller.

Car

The cars are built based on the open-source MIT RACECAR project [32]. The computing unit consists of
an NVIDIA TX2 board. We wrote a custom ROS node that uses the current position and desired waypoints
to compute the input speed and steering angle using a Model Predictive Controller (MPC). Low-level motor
control uses an electronic speed controller.

6.2 Test arena and localization

We performed our experiments in a 7m × 8m × 3m arena equipped with 8 Vicon cameras. The Vicon
system allows us to track the position of multiple robots with sub-millimeter accuracy, however, we note
that the position data can come from any source (for example GPS, ultrawide-band, LIDAR), as long as all
robots share the same coordinate system. While the motion capture system transmits all the data from a

10

050100150200250Lineform 6Lineform 8Lineform 10Lineform 12Shapeform 9Shapeform 16Avg RT FactorPackets/agent/secAvg packet (10kb) size/agent/secAvg %CPUAvg #threads div 10Figure 7: Normalized position traces for Task running on 2 quadcopters (dashed lines) and 2 cars (solid
lines); x vs time (Top) and y vs time (Bottom) traces. Note the concurrent safe movement of vehicles
(e.g., around 13, 36, and 52 seconds). The y positions of car 1 (solid black) and drone 2 (dashed blue)
are close between 20-25s, but they are safe as they are separated in x.

central computer, each vehicle only subscribes to its own position information. This was done to simplify
experiments, as the goal of this work is not to develop new positioning systems. All coordination and
de-conﬂicting across robots is performed based on position information shared explicitly through shared
variables in the Koord application.

6.3

Interface with middleware

The same application can be deployed using different path planners and low-level controllers through in-
terfaces deﬁned by the CyPhyHouse middleware (See Section 4). In our experiments, both vehicles use
RRT-based path planners [36]. The planner uses a bicycle model for the cars, and a straight-line model for
the quadcopters. The path generated is then forwarded to the robot via a ROS topic. The relevant ROS topics
for each vehicle were speciﬁed in the conﬁguration. Each vehicle updates the reached topic when it reaches
the destination (Section 3).

6.4 Experiments with Task on upto four vehicles

The Task application of Section 3 was run in over 100 experiments with different combinations of cars
and quadcopters. Figure 7 shows the (x, y)-trajectories of the vehicles in one speciﬁc trial run, in which
two quadcopters and two cars were deployed. Careful examination of such ﬁgures show us that all the
performance requirements of Task are achieved: concurrent movement when different robots have clear
paths to tasks, safe separation at all times, and robots getting blocked when there is no safe path found. In
our experiments with up to 4 vehicles, we found that with fewer robots, there are fewer blocked paths, so
each robot spends less time idling. This non-blocking effect is superseded by the parallelism gains obtained
from having multiple robots. For example, with three robots (2 quadcopters and 1 car, or 1 quadcopter and 2
cars) Task had an average runtime of about 110 seconds for 20 tasks. The average runtime for the same with
4 robots across 70 runs was about 90 seconds. We experience zero failures, provided the wireless network
conditions satisﬁes the assumptions stated in Section 4.

11

01020304050607080-0.500.5x normalized01020304050607080time [s]-0.500.5y normalized7 Conclusions

We presented the open source Koord language and the CyPhyHouse toolchain for distributed robotic ap-
plications. We demonstrated the usefulness of the language in succinctly writing an application involving
distributed task allocation and path planning. We presented and proﬁled the scalable CyPhyHouse simulator
that can execute and test instances of Koord applications with dozens of vehicles. We also showed how
the same code can be simulated, and directly deployed on cars and drones with supporting platform speciﬁc
controllers. While still in the development stages, CyPhyHouse has been used by more than 25 individuals
for programming, simulating, and testing other applications like formation ﬂight, and surveillance. Our
experiences suggest the toolchain can indeed lower the barrier for entry into the distributed robotics.

Acknowledgements

We would like to thank Sasa Misailovic for contributing to the design of the Koord language. John Wang
and Zitong Chen contributed to Koord and CyPhyHouse software systems. We are grateful to Nitin Vaidya
for the early design of the shared memory system. This research is supported by a research grant from the
National Science Foundation (CNS award number 1629949).

References

[1] Chris Lattner and Vikram Adve. Llvm: A compilation framework for lifelong program analysis & transforma-
tion. In Proceedings of the International Symposium on Code Generation and Optimization: Feedback-directed
and Runtime Optimization, CGO ’04, pages 75–, Washington, DC, USA, 2004. IEEE Computer Society.

[2] Yangqing Jia, Evan Shelhamer, Jeff Donahue, Sergey Karayev, Jonathan Long, Ross Girshick, Sergio Guadar-
arXiv preprint

rama, and Trevor Darrell. Caffe: Convolutional architecture for fast feature embedding.
arXiv:1408.5093, 2014.

[3] Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan, Edward Yang, Zachary DeVito, Zeming Lin,
In NIPS Autodiff

Alban Desmaison, Luca Antiga, and Adam Lerer. Automatic differentiation in PyTorch.
Workshop, 2017.

[4] Martín Abadi, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen, Craig Citro, Greg S. Corrado,
Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Ian Goodfellow, Andrew Harp, Geoffrey Irving,
Michael Isard, Yangqing Jia, Rafal Jozefowicz, Lukasz Kaiser, Manjunath Kudlur, Josh Levenberg, Dan Mané,
Rajat Monga, Sherry Moore, Derek Murray, Chris Olah, Mike Schuster, Jonathon Shlens, Benoit Steiner, Ilya
Sutskever, Kunal Talwar, Paul Tucker, Vincent Vanhoucke, Vijay Vasudevan, Fernanda Viégas, Oriol Vinyals,
Pete Warden, Martin Wattenberg, Martin Wicke, Yuan Yu, and Xiaoqiang Zheng. TensorFlow: Large-scale
machine learning on heterogeneous systems, 2015. Software available from tensorﬂow.org.

[5] Morgan Quigley, Ken Conley, Brian P. Gerkey, Josh Faust, Tully Foote, Jeremy Leibs, Rob Wheeler, and An-

drew Y. Ng. Ros: an open-source robot operating system. In ICRA Workshop on Open Source Software, 2009.

[6] Adithyavairavan Murali, Tao Chen, Kalyan Vasudev Alwala, Dhiraj Gandhi, Lerrel Pinto, Saurabh Gupta, and
Abhinav Gupta. Pyrobot: An open-source robotics framework for research and benchmarking. arXiv preprint
arXiv:1906.08236, 2019.

[7] Atsushi Sakai, Daniel Ingram, Joseph Dinius, Karan Chawla, Antonin Rafﬁn, and Alexis Paques. Pythonrobotics:

a python code collection of robotics algorithms. CoRR, abs/1808.10703, 2018.

[8] Alexander Cunningham, Manohar Paluri, and Frank Dellaert. Ddf-sam: Fully distributed slam using constrained
factor graphs. In 2010 IEEE/RSJ International Conference on Intelligent Robots and Systems, pages 3025–3030.
IEEE, 2010.

12

[9] Ritwika Ghosh, Sasa Misailovic, and Sayan Mitra. Language semantics driven design and formal analysis for

distributed cyber-physical systems: [extended abstract]. In ApPLIED@PODC, 2018.

[10] M. Mesbahi and Magnus Egerstedt. Graph-theoretic Methods in Multiagent Networks. Princeton University

Press, 2010.

[11] David St-Onge, Vivek Shankar Varadharajan, Guannan Li, Ivan Svogor, and Giovanni Beltrame. ROS and buzz:

consensus-based behaviors for heterogeneous teams. CoRR, abs/1710.08843, 2017.

[12] Hadas Kress-Gazit, Georgios E Fainekos, and George J Pappas. Temporal-logic-based reactive mission and

motion planning. IEEE transactions on robotics, 25(6):1370–1381, 2009.

[13] Marius Kloetzer and Calin Belta. A fully automated framework for control of linear systems from temporal logic

speciﬁcations. IEEE Transactions on Automatic Control, 53(1):287–297, 2008.

[14] Tichakorn Wongpiromsarn, Ufuk Topcu, and Richard M Murray. Receding horizon control for temporal logic
speciﬁcations. In Proceedings of the 13th ACM international conference on Hybrid systems: computation and
control, pages 101–110. ACM, 2010.

[15] Tichakorn Wongpiromsarn, Ufuk Topcu, Necmiye Ozay, Huan Xu, and Richard M Murray. Tulip: a software
toolbox for receding horizon temporal logic planning. In Proceedings of the 14th international conference on
Hybrid systems: computation and control, pages 313–314. ACM, 2011.

[16] Alphan Ulusoy, Stephen L Smith, Xu Chu Ding, Calin Belta, and Daniela Rus. Optimality and robustness
in multi-robot path planning with temporal logic constraints. The International Journal of Robotics Research,
32(8):889–911, 2013.

[17] Jose Luis Blanco Claraco and I First Steps. Development of scientiﬁc applications with the mobile robot pro-

gramming toolkit the mrpt reference book.

[18] D. Pickem, P. Glotfelter, L. Wang, M. Mote, A. Ames, E. Feron, and M. Egerstedt. The robotarium: A remotely
accessible swarm robotics research testbed. In 2017 IEEE International Conference on Robotics and Automation
(ICRA), pages 1699–1706, May 2017.

[19] Ankush Desai, Indranil Saha, Jianqiao Yang, Shaz Qadeer, and Sanjit A Seshia. Drona: A framework for
safe distributed mobile robotics. In 2017 ACM/IEEE 8th International Conference on Cyber-Physical Systems
(ICCPS), pages 239–248. IEEE, 2017.

[20] Ankush Desai, Vivek Gupta, Ethan Jackson, Shaz Qadeer, Sriram Rajamani, and Damien Zufferey. P: Safe

asynchronous event-driven programming. SIGPLAN Not., 48(6):321–332, June 2013.

[21] Miguel Campusano and Johan Fabry. Live robot programming: The language, its implementation, and robot API

independence. Science of Computer Programming, 133:1 – 19, 2017.

[22] Brandon Bohrer, Yong Kiam Tan, Stefan Mitsch, Magnus O. Myreen, and André Platzer. Veriphy: Veriﬁed
controller executables from veriﬁed cyber-physical system models. In Proceedings of the 39th ACM SIGPLAN
Conference on Programming Language Design and Implementation, PLDI 2018, pages 617–630, New York,
NY, USA, 2018. ACM.

[23] Damien Zufferey. The REACT language for robotics, 2017.

[24] Brian C Williams, Michel D Ingham, Seung H Chung, and Paul H Elliott. Model-based programming of intelli-

gent embedded systems and robotic space explorers. Proceedings of the IEEE, 91(1):212–237, 2003.

[25] Arne Nordmann, Nico Hochgeschwender, and Sebastian Wrede. A Survey on Domain-Speciﬁc Languages in

Robotics, pages 195–206. Springer International Publishing, Cham, 2014.

[26] Brandon Bohrer, Vincent Rahli, Ivana Vukotic, Marcus Völp, and André Platzer. Formally veriﬁed differential
dynamic logic. In Proceedings of the 6th ACM SIGPLAN Conference on Certiﬁed Programs and Proofs, CPP
2017, pages 208–221, New York, NY, USA, 2017. ACM.

13

[27] Nancy A Lynch. Distributed algorithms. Morgan Kauffmann, 1996.

[28] Sukumar Ghosh. Distributed systems: an algorithmic approach. Chapman and Hall/CRC, 2014.

[29] Terence Parr. The Deﬁnitive ANTLR 4 Reference. Pragmatic Bookshelf, 2nd edition, 2013.

[30] Koord Language Development Team. A design and analysis framework for distributed cps.

[31] N. Koenig and A. Howard. Design and use paradigms for gazebo, an open-source multi-robot simulator. In
2004 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) (IEEE Cat. No.04CH37566),
volume 3, pages 2149–2154 vol.3, Sep. 2004.

[32] S. Karaman, A. Anders, M. Boulet, J. Connor, K. Gregson, W. Guerra, O. Guldner, M. Mohamoud, B. Plancher,
R. Shin, and J. Vivilecchia. Project-based, collaborative, algorithmic robotics for high school students: Pro-
gramming self-driving race cars at mit. In 2017 IEEE Integrated STEM Education Conference (ISEC), pages
195–203, March 2017.

[33] Johannes Meyer, Alexander Sendobry, Stefan Kohlbrecher, Uwe Klingauf, and Oskar von Stryk. Comprehen-
sive simulation of quadrotor uavs using ros and gazebo. In Itsuki Noda, Noriaki Ando, Davide Brugali, and
James J. Kuffner, editors, Simulation, Modeling, and Programming for Autonomous Robots, pages 400–411,
Berlin, Heidelberg, 2012. Springer Berlin Heidelberg.

[34] ArduPilot Development Team. Ardupilot.

[35] Vladimir Ermakov. mavros.

[36] Steven M LaValle. Rapidly-exploring random trees: A new tool for path planning. 1998.

14

