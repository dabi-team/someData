1
2
0
2

g
u
A
4
2

]

G
L
.
s
c
[

1
v
1
6
6
0
1
.
8
0
1
2
:
v
i
X
r
a

On the Eﬀectiveness of Genetic Operations in
Symbolic Regression

Bogdan Burlacu1,2, Michael Aﬀenzeller1,2, and Michael Kommenda1,2

1 Heuristic and Evolutionary Algorithms Laboratory
School of Informatics, Communications and Media
University of Applied Sciences Upper Austria
Softwarepark 11, 4232 Hagenberg, Austria
2 Institute for Formal Models and Veriﬁcation
Johannes Kepler University Linz
Altenbergerstr. 69, 4040 Linz, Austria

{bogdan.burlacu,michael.affenzeller,michael.kommenda}@fh-hagenberg.at
⋆

Abstract. This paper describes a methodology for analyzing the evolu-
tionary dynamics of genetic programming (GP) using genealogical infor-
mation, diversity measures and information about the ﬁtness variation
from parent to oﬀspring. We introduce a new subtree tracing approach
for identifying the origins of genes in the structure of individuals, and we
show that only a small fraction of ancestor individuals are responsible
for the evolvement of the best solutions in the population.

Keywords: Genetic programming, evolutionary dynamics, algorithm analysis,
symbolic regression

1 Introduction

Empirical analysis in the context of diﬀerent benchmark problems and tentative
algorithmic improvements (such as various selection schemes or ﬁtness assign-
ment techniques) has a limited ability of explaining genetic programming (GP)
behavior and dynamics. Results usually conﬁrm our intuitions about the re-
lationship between selection pressure, diversity, ﬁtness landscapes and genetic
operators, but they prove diﬃcult to extend to more general theories about the
internal functioning of GP.

This work is motivated by the necessity for a diﬀerent approach to study the
GP evolutionary process. Instead of looking for correlations between diﬀerent
selection or ﬁtness assignment mechanisms and solution quality or diversity, we
focus on the reproduction process itself and the eﬀectiveness of the variation-
producing operators in transferring genetic material.

⋆

The ﬁnal publication is available at
https://link.springer.com/chapter/10.1007/978-3-319-27340-2_46

 
 
 
 
 
 
Achieving good solutions depends on the eﬃcient use of the available gene
pool given its inherent stochasticity (random initialization, random crossover,
random mutation). Under the eﬀects of selection pressure, many suboptimal
exchanges of genetic information will cause a decrease in the amount of ge-
netic material available to the evolutionary engine. Measures to mitigate this
phenomenon usually use various heuristics for guiding either selection or the
crossover operator towards more promising regions of the search space [1,2].

Diversity is an important aspect of GP, considered to be a key factor in its
performance. Multiple studies dedicated to GP diversity analyze diversity mea-
sures (based on various distance metrics, for example [3]) in correlation with the
eﬀects of genetic operators [4,5,6]. Genotype operations – crossover in particular
– often have a negative (or at most, neutral) eﬀect on individuals, leading to
diversity loss in the population following each selection step. This eﬀect is due
to the interplay between crossover and selection which leads to an increase in
average program size [7] (when sampling larger programs, crossover has a higher
chance of having a neutral eﬀect).

2 Methodology

In this paper we introduce a new methodology for the exact identiﬁcation (“trac-
ing”) of any structural change an individual is subjected to during evolution. We
use this methodology in combination with population diversity and genealogy
analysis methods to investigate the eﬀects of the genetic operators in terms of
how often they lead to a ﬁtness improvement, how often they overlap (for exam-
ple when the same area inside the tree is repeatedly targeted by crossover), and
how often they cancel each other out.

2.1 Tracing of genotype fragments

This method is based on previous work on population genealogies [8,9]. During
the algorithm run, every new generation is added to the genealogy graph with
arcs connecting child vertices to their parents. When crossover is followed by
mutation, both the results of crossover and mutation are saved in the graph
(Figure 1).

We deﬁne an individual’s trace graph as a collec-
tion of vertices representing its ancestors from which
the various parts of its genotype originated, connected
by a collection of arcs representing the diﬀerent geno-
type operations that gradually assembled those parts.
The tracing procedure uses a set of simple arith-
metic rules to navigate genealogies and identify the
relevant subtrees, based on the indices of the subtree
to be traced and the index of the received fragment
(Figure 2). The nodes in each tree are numbered ac-
cording to their preorder index i such that, given two

Parent 0 Parent 1

Rank 0

Crossover fragment

Rank 0.5

Intermediate vertex

Mutation fragment

Rank 1

Child

Fig. 1: Saving intermedi-
ate results in the geneal-
ogy graph

subtrees A and B, B ⊂ A if iA < iB < iA + lA, where iA, iB are their respective
preorder indices and lA, lB are their lengths.

Root parent
×

0

+

1

−

4

Non-root parent
−

Subtree swap

0

×

4

×

1

Child
×

0

Inherited
part

+

1

Received
fragment

×

4

a

2

b

3

a

5

b

6

a

2

a

3

b

5

b

6

a

2

b

3

a

5

a

6

Fig. 2: Preorder arithmetics for subtree inclusion

Since some individuals within the ancestry of the traced individual may have
contributed parts of their genotype to multiple oﬀspring, there may exist multiple
evolutionary trajectories in the trace graph passing through the same vertex or
sequence of vertices, reﬂected in the graph by multiple arcs between the same
two vertices, each arc representing the transmission of diﬀerent genes or building
blocks.

2.2 Analysis of population dynamics

The various measurements used to quantify the behavioral aspects of GP are
described in more detail within the following paragraphs.
Genetic Operator Eﬀectiveness
Operator eﬀectiveness is calculated as the diﬀerence in ﬁtness between the child
and its root parent.

Average ﬁtness improvement Let N be the total number of individuals in the
population, ti one individual and pi its parent:

¯q =

1
N

N

·

X
i=1

(cid:0)F itness(ti) − F itness(pi)(cid:1)

Best ﬁtness improvement Return the diﬀerence between the ﬁtness values of the
best individual tbest and its parent pbest

qbest = F itness(tbest) − F itness(pbest)

The average and best ﬁtness improvements are calculated individually for crossover
and mutation operations.
Average relative overlap
We deﬁne the relative overlap between two sets A1 and A2 using the Sørensen-

Dice coeﬃcient3 which can also be seen as a similarity measure between sets:

s(A1, A2) =

2 · |A1 ∩ A2|
|A1| + |A2|

The reason for using this measure is to see how much overlap exists between
the trace graphs and root lineages of the individuals in the population. A high
relative overlap would mean that diversity is exhausted as all the individuals
have the same parents or ancestors.
Genotype and phenotype similarity
These similarity measures provide information about the evolution of diversity
from both a structural (genotype) and a semantic (phenotype) perspective. Geno-
type similarity is calculated using a bottom-up tree mapping [10] that can be
computed in time linear in the size of the trees and has the advantage that it
works equally well for unordered trees. For two trees T1 and T2 and a bottom-up
mapping M between them, the similarity is given by:

GenotypeSimilarity(T1, T2) =

2 · |M |
|T1| + |T2|

Phenotype similarity between two trees is calculated as the Pearson R2 correla-
tion coeﬃcient between their respective output values on the training data.
Contribution ratio
While it is clear that under the inﬂuence of random evolutionary forces (such as
genetic drift or hitchhiking) each of an individual’s ancestors plays an equally
important role in the events leading to its creation, the trace graph represents a
powerful tool for analyzing the origin of genes and the way solutions are assem-
bled by the genetic algorithm.

The size of the trace graph relative to the size of the complete ancestry can
be used as a measure of the eﬀort spent by the algorithm to achieve useful
adaptation. For example, a small trace graph means that a small number of
an individual’s ancestors contributed to the assembly of its genotype, via an
equally small number of genetic operations (crossover and mutation). The eﬀort,
seen as the ratio of eﬀective genetic operations over the total number of genetic
operations, can give an indication of how easy new and better solutions can be
assembled by the algorithm.

The contribution ratio r is given by the percentage of individuals from the

best solution ancestry that had an actual contribution to its structure:

r =

|T race(bestSolution)|
|Ancestry(bestSolution)|

3 It was also possible to use the Jaccard index J(A1, A2) = |A1∩A2|

|A1∪A2| as it is very similar
to the Sørensen-Dice coeﬃcient. However this choice makes no practical diﬀerence
for the results presented in this publication

3 Experiments

For the experimental part, we use GP to solve two symbolic regression benchmark
problems:
Vladislavleva-8

F8(x1, x2) =

(x1 − 3)4 + (x2 − 3)3 − (x2 − 3)
(x2 − 2)4 + 10

Poly-10

F (x) = x1x2 + x3x4 + x5x6 + x1x7x9 + x3x6x10

The Vladislavleva-8 problem was solved using the standard GP algorithm
(SGP) with a population size of 500 individuals and 50 generations (in order
to be able to compute the trace graphs of each individual in the population
in feasible time). For the Poly-10 problem the oﬀspring selection GP (OSGP)
[11] was also tested with a population size of 300 individuals and gender-speciﬁc
selection.

We analyzed the algorithm dynamics using the genealogy graph, the ances-
try of the best solution and the trace history of its genotype. Other additional
measurements such as diversity, size and quality distributions were included for
a more complete picture. All the results were averaged on a collection of 20
algorithmic runs for each problem and algorithm conﬁguration.

In the case of SGP, we see in Figure 3 that the genetic operators produce
negative improvement on average, meaning that in most cases the ﬁtness of the
child is worse than the ﬁtness of the parent. The light-colored curves ﬁlled with
green in Figure 3 represent the best improvement while the dark-colored once
ﬁlled with red represent the average improvement. As average ﬁtness improve-
ment produced by genetic operators tends to be negative, the increase in average
population ﬁtness can be attributed to the interplay between recombination op-
erators and selection. OSGP operator improvement is always small but positive
due to the requirement that oﬀspring are better than their parents.

The ability to produce useful genetic variation (leading to ﬁtness improve-
ments) is directly related to the structural diversity of the population which
cannot be controlled through ﬁtness-based selection. Results in Figures 4a and
4b reveal the relationship mediated by the selection mechanism between the
structural similarity between two trees and the degree to which their root lin-
eages and their trace graphs overlap. The high correlation (calculated as the
Pearson R2 coeﬃcient) between the three curves corresponds intuitively to the
fact that similar individuals come from similar (partially overlapping) lineages,
with the important diﬀerence that trace graphs do not represent lineages in the
strictest sense, as they only include those ancestors whose genes survived in the
structure of the traced individual. In Figures 4c and 4d we show the correlation
between semantic similarity and quality of the best solution. We see that SGP
does not suﬀer from loss of semantic diversity. With oﬀspring selection, as chil-
dren are required to outperform their parents, the semantic similarity increases
rapidly to a value close to 1.

y
t
i
l
a
u
Q

y
t
i
l
a
u
Q

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

Crossover improvement

Mutation improvement

y
t
i
l
a
u
Q

1

0.8

0.6

0.4

0.2

0

0

10

20

30

40

50

10

20

30

40

50

Generation

Generation

Quality increase
Quality decrease

Child quality
Parent quality

Quality increase
Quality decrease

Child quality
Parent quality

(a) SGP Vladislavleva-8
crossover improvement

(b) SGP Vladislavleva-8
mutation improvement

Crossover improvement

Mutation improvement

y
t
i
l
a
u
Q

1

0.8

0.6

0.4

0.2

0

0

5

10

15

20

25

30

35

40

45

50

0

5

10

15

20

25

30

35

40

45

50

Generation

Generation

Quality increase
Quality decrease

Child quality
Parent quality

Quality increase
Quality decrease

Child quality
Parent quality

(c) OSGP Poly-10
crossover improvement

(d) OSGP Poly-10
mutation improvement

Fig. 3: SGP Vladislavleva-8 and Poly-10 best (above) and average (below) oper-
ator improvement

Another aspect of GP search is illustrated in Figure 5a, where we can observe
the exploratory behavior of the OSGP algorithm in the beginning of the run,
when the building blocks representing the terms of the formula are gradually
discovered, and the exploitative behavior towards the end, when no big jumps in
quality are produced, but the solution is incrementally improved through small
changes of the tree constants and variable weighting factors.

Finally, the contribution ratio for SGP and OSGP was calculated at 13% and
4%, respectively, showing a high degree of interrelatedness between individuals
which leads to low genetic operator eﬃciency. Fit individuals contribute mul-
tiple times, but selection pressure exceeds their variability potential. Oﬀspring
selection improves eﬃciency by adapting selection pressure.

4 Conclusion and outlook

Our results show that in most cases GP operators do not lead to ﬁtness improve-
ment. The tracing of the best solution indicates that a few critical operations

Average genotype similarity

OSGP Structural similarity measures

p
a
l
r
e
v
o

h
p
a
r
g

e
c
a
r
T

1

0.8

0.6

0.4

0.2

0

0

10

20

30

40

50

0

10

20

30

40

50

Generation

Generation

Trace graph overlap
Genotype similarity

Root lineage overlap

Trace lineage overlap
Root lineage overlap

Genotype similarity

(a) SGP Vladislavleva-8

(b) OSGP Poly-10

OSGP Phenotype similarity and best quality

OSGP Phenotype similarity and best quality

y
t
i
r
a
l
i

m

i
s

e
p
y
t
o
n
e
h
P

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

y
t
i
r
a
l
i

m

i
s

/

p
a
l
r
e
v
O

y
t
i
r
a
l
i

m

i
s

e
p
y
t
o
n
e
h
P

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

10

20

30

40

50

0

10

20

30

40

50

Generation

Generation

Phenotype similarity

Best quality

Phenotype similarity

Best quality

(c) SGP Vladislavleva-8 Qualities and
phenotype similarity

(d) OSGP Poly-10 Qualities and
phenotype similarity

Fig. 4: Relationship between root lineage/trace graph overlap and genotype sim-
ilarity

when the algorithm is able to assemble high ﬁtness solution elements out of pre-
existing, disparate genes are responsible for the performance of the entire run.
A signiﬁcantly small fraction (around 13% for SGP and 4% for OSGP) of all an-
cestors of the best individual have an actual contribution to its ﬁnal structure.
The tracing methodology can reveal interesting and previously unexplored
aspects of GP evolution regarding genetic operators and their eﬀects on pop-
ulation dynamics. In contrast to other methods and techniques, our approach
provides a more accurate and complete description of the evolutionary process.

Acknowledgments The work described in this paper was done within the
COMET Project Heuristic Optimization in Production and Logistics (HOPL),
#843532 funded by the Austrian Research Promotion Agency (FFG).

References

1. Burke, E.K., Gustafson, S., Kendall, G., Krasnogor, N.:

Is increased diversity
in genetic programming beneﬁcial? an analysis of the eﬀects on performance. In

y
t
i
l
a
u
Q

1

0.8

0.6

0.4

0.2

0

0

Root and trace lineages

10

20

30

40

50

Generation

Root lineage

Trace lineage

(a) OSGP Poly-10 best solution (the term x3x4 was already present in the
initial formula)

Sarker, R., Reynolds, R., Abbass, H., Tan, K.C., McKay, B., Essam, D., Gedeon,
T., eds.: Proceedings of the 2003 Congress on Evolutionary Computation CEC2003,
Canberra, IEEE Press (2003) 1398–1405

2. Burke, E.K., Gustafson, S., Kendall, G.: Diversity in genetic programming: An
analysis of measures and correlation with ﬁtness. IEEE Transactions on Evolution-
ary Computation 8 (2004) 47–62

3. Mattiussi, C., Waibel, M., Floreano, D.: Measures of diversity for populations and
distances between individuals with highly reorganizable genomes. Evolutionary
Computation 12 (2004) 495–515

4. Ekárt, A., Németh, S.Z.: Maintaining the diversity of genetic programs. In Foster,
J.A., Lutton, E., Miller, J., Ryan, C., Tettamanzi, A.G.B., eds.: Genetic Program-
ming, Proceedings of the 5th European Conference, EuroGP 2002. Volume 2278
of LNCS., Kinsale, Ireland, Springer-Verlag (2002) 162–171

5. Nguyen, T.H., Nguyen, X.H.: A brief overview of population diversity measures in
genetic programming. In Pham, T.L., Le, H.K., Nguyen, X.H., eds.: Proceedings
of the Third Asian-Paciﬁc workshop on Genetic Programming, Military Technical
Academy, Hanoi, VietNam (2006) 128–139

6. Jackson, D.: Phenotypic diversity in initial genetic programming populations. In
Esparcia-Alcazar, A.I., Ekart, A., Silva, S., Dignum, S., Uyar, A.S., eds.: Proceed-
ings of the 13th European Conference on Genetic Programming, EuroGP 2010.
Volume 6021 of LNCS., Istanbul, Springer (2010) 98–109

7. Dignum, S., Poli, R.: Crossover, sampling, bloat and the harmful eﬀects of size
In O’Neill, M., Vanneschi, L., Gustafson, S., Esparcia Alcazar, A.I., De
limits.
Falco, I., Della Cioppa, A., Tarantino, E., eds.: Proceedings of the 11th European
Conference on Genetic Programming, EuroGP 2008. Volume 4971 of Lecture Notes
in Computer Science., Naples, Springer (2008) 158–169

8. Burlacu, B., Aﬀenzeller, M., Kommenda, M., Winkler, S.M., Kronberger, G.: Evo-
In Jimenez, E., Sokolov, B., eds.: The
lution tracking in genetic programming.
24th European Modeling and Simulation Symposium, EMSS 2012, Vienna, Aus-
tria (2012)

9. Burlacu, B., Aﬀenzeller, M., Kommenda, M., Winkler, S., Kronberger, G.: Visual-
ization of genetic lineages and inheritance information in genetic programming. In:
GECCO ’13 Companion: Proceeding of the ﬁfteenth annual conference companion
on Genetic and evolutionary computation conference companion, Amsterdam, The
Netherlands, ACM (2013) 1351–1358

10. Valiente, G.: An eﬃcient bottom-up distance between trees. In: Proceedings of
the 8th International Symposium of String Processing and Information Retrieval,
Press (2001) 212–219

11. Aﬀenzeller, M., Winkler, S., Wagner, S., Beham, A.: Genetic Algorithms and
Genetic Programming: Modern Concepts and Practical Applications. Numerical
Insights. CRC Press, Singapore (2009)

