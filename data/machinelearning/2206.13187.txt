2
2
0
2

n
u
J

0
3

]
L
C
.
s
c
[

2
v
7
8
1
3
1
.
6
0
2
2
:
v
i
X
r
a

IMPLEMENTING A CHATBOT SOLUTION FOR LEARNING
MANAGEMENT SYSTEMS

A PREPRINT

Dimitrios Chaskopoulos, Jonas Eilertsen Hægdahl, Petter Sagvold, Claire Trinquet, Maryam Edalati
Department of Computer Science
Norwegian University of Science and Technology
Gjøvik, Norway
{dimitrc, jonaseha, pettsag, clairet, maryame}@stud.ntnu.no

July 1, 2022

ABSTRACT

Innovation is a key component in trying new solutions for the students to learn efﬁciently and in
ways that correspond to their own experience, where chatbots are one of these new solutions. One
of the main problem that chatbots face today is to mimic human language, where they try to ﬁnd
the best answer to an input, which is not how a human conversation usually works, rather taking
into account the previous messages and building onto them. Extreme programming methodology
was chosen to use integrate ChatterBot, Pyside2, web scraping and Tampermonkey into Blackboard
as a test case. Problems occurred with the bot and more training was needed for the bot to work
perfectly, but the integration and web scraping worked, giving us a chatbot that was able to talk
with. We showed the plausibility of integrating an AI bot in an educational setting.

Keywords education · eLearning · chatbot · machine learning · artiﬁcial intelligence

1

Introduction & Background

Finding new ways to help students has always been important in the ﬁeld of higher education. Innovation is a key
component in trying new solutions for the students to learn efﬁciently and in ways that correspond to their own
experience. Chatbots are one of these new solutions [1]. This work attempts to further the research in this area, by
creating an educational chatbot integrated into the Blackboard platform.

Chatbots are computer programs that can hold a conversation with humans in natural language. They are used in a
great variety of different ﬁelds, including for informational and educational purposes. Pedagogical chatbots have been
found to have a great positive inﬂuence on students’ learning. Research shows that the interactivity of chatbots makes
them a great help in creating an interactive and efﬁcient learning environment [2]. Our aim in this research work is to
create a chatbot that could be integrated into Blackboard and could serve as a virtual teaching assistant, by being able
to answer questions from students about the course to facilitate and support multimedia learning objects [3].

In order to develop a state-of-the-art chatbot, many technologies are out there as discussed in [1]. Research work
in [4] brieﬂy discusses the history and type of chatbots. To create a chatbot, it is also extremely helpful to have some
examples of how other chatbots’ discussions are [4–6], and how to make chatbots seem more human [5] and trustable
[7]. Even though this implementation focuses on educational bots, it is worth noting the wide spectrum of chatbot
usage such as in education, health, productivity, to name a few. Chatbots can be used in almost all circumstances and
ﬁelds of work or study. Starting from the health department and the victim aid bot named ‘SPeCECA’, whose job
is to facilitate victims and witnesses of accidents and sudden illness. The bot aims to prevent them from inﬂicting
avoidable damage to the patient until the trained response unit arrives at the incident [8]. Moving on to chatbots like
‘ActionBot (ABT)’ which help mitigate differences between team members and can be used in a learning or working
environment. It can be used to improve team cohesion and overall performance while avoiding lack of communication

 
 
 
 
 
 
A PREPRINT - JULY 1, 2022

and potential hindrances to productivity [9]. To ﬁnally chatbots like SLOWBot, one of the thousand variations of
chatbots implemented with aim to aid the user in their pursuit of a better and healthier lifestyle [10].

This adaptability and potential use of chatbots is one of the reasons to explore existing off-the-shelf chatbots, and try to
see more potential possibilities it has to offer. For instance, such a tool could be used as mode of social interaction [11],
or to teach information security concepts [12, 13]. The ﬁrst problem with this variety of course is that there exists and
equal variety of ways to implement them, each with their own strengths and weaknesses. A quick example of the
complexity and structure such a chatbot can easily reach is SPeCECA the victim support bot, given in Fig 1:

Figure 1: SPeCECA’s components and actors [8]

Although, usually simpler structures are sufﬁcient for the chatbot to be effective in its task.

One of the main problem that chatbots face is to mimic human language [14]. They try to ﬁnd the best answer to an
input, which is not how a human conversation usually works, rather taking into account the previous messages and
building onto them.

There are many chatbots developed for various purposes. For example, chatbots used for educational purposes have
been found to have a number of beneﬁts [15–17]. A WhatsApp chatbot for students [18] helped a group chat made for
students become more active during the pandemic. It had both entertainment purpose, keeping the group active with a
game, and educational purpose, with an API attachement where students could ask questions about a speciﬁc topic.

Another study Gupta and Chen [19] tried to ﬁnd how a chatbot could help create a more inclusive learning environ-
ment. It would make it easier for all students to have access to the proper resources, especially for students with
learning disabilities or disorders (the possibility to hold conversations through chat or through audio for hearing or
visually impaired students is a strong point for ex- ample). It would also be able to adapt to students with very dif-
ferent environments. And there are different types of learning that a chatbot can use for students depending on their
preferences: some learn better with visual learning (videos, images, color codes), kinesthetic learning (with activi-
ties like games and quizzes for example) and auditory learning (by providing podcast resources or audio ﬂashcard
games) [20, 21].

Notable examples of those kind of chatbots are many. For instance, @dawebot is a chatbot that tutors students in a
wide range of topics and courses through an assortment of well-aimed quiz questions, which helps their focus and
concentration [22]. CidoPoliBot is another state-of-the-art bot in development which gamiﬁes education and takes
into account a speciﬁc target audience. It is developed by Fadhil and Villaﬁorita and it educates children about proper
lifestyle choices. The initial testing yielded very promising results showing a clear advantage of the bot over the
previous cut board tutoring methods on which it is based [23]. Another signiﬁcant step in educational innovation
is a chatbot named ‘SingGuru’ which aids in the learning of American Sign Language. It provides direct feedback
translating the teacher’s movement from sing language into detailed text. It is currently used as a tutoring aid to a
course for said language and it can currently help the user orient themselves in the course but also takes an active part in

2

A PREPRINT - JULY 1, 2022

the learning process and tests. Questionnaires have shown an increase in student performance of over 20 percent [24].
In addition, we must mention CapacitaBOT a fascinating bot which aids persons with intellectual disabilities. Due to
the recent lock downs and the modern way of life in general it’s hard for some people that struggle with daily social
interactions to practise and help them better ﬁt into the society. This bot aids and educates them by honing their social
abilities and training them for real life situations [25]. Lastly, there is a chatbot called Jill Watson which is closer
to what we are trying to accomplish here. This bot is a virtual teacher assistant which has successfully helped and
interacted with over 700 students. JW is able to answer frequent asked questions and uploaded announcements without
any problem [26].

As we can see the potential for interactive learning with chatbots can be a very interesting and potentially useful ﬁeld
of study, which can hold vast potentials for improvement with new ground-breaking innovations that have started to
appear in the resent years [27]. It can greatly facilitate class tutoring [28], and improve experience for both students
and teachers, since they cannot always be available to answer every student questions [29], as our current study ties to
prove. But it has the future potential of being an autonomous entity, helping the members of society that need it the
most.

2 Methodology

Our research work was guided by the double diamond design process [30]:

• The ﬁrst phase consisted of researching chatbots and the state-of-the-art on how they work and can be em-

ployed for educational purposes.

• In the second phase, we used our research to formulate a problem statement, and deﬁne the objective of
this study. We decided to develop an AI chatbot to integrate into Blackboard for educational purposes. Our
bot could be added to the webpage, and converse with students about the course topics. We wanted to use
webscraping, so that the bot could ﬁnd by itself documents about the topics on the Blackboard page, and train
itself with them.

• Then we explored possible ways of implementing the chatbot, trying different solutions for each goal in the

study and each problem that we encountered.

• Finally, in the last phase, the solutions we implemented started to converge towards a working prototype,
as we found what worked for the chatbot and what ﬁt the best for the objective that we settled on for this
research work.

This design process has allowed us to experiment with the study. In the ﬁrst part of researching the topic of chatbots,
we learned a lot about the current state of chatbot technology and how it is used for educational purposes. The second
part let us bring new elements to the chatbot, adding new features that were not previously integrated.

Figure 2 shows the architecture of our proposed solution.

Python was used for coding the application. The main packages for Python in this study was ChatterBot and PySide2,
the framework for the bot and the library for the graphical user interface.

Tampermonkey and Javascript were used for the integration of the chatbot into Blackboard. Blackboard was used to
test out the bot and its web scraping. This version of Blackboard was a local instance given to us by the IT-department
to test out different aspects of the project on.

Since the bot will be integrated into Blackboard, this means that Feide will be the main security for the chatbot. The
main security concern for this research work is ”Poison packages”. By using Python, a lot of the packages used in
this work can be open source. The simplicity of downloading and installing packages in Python, which has led to
a range of cyber-criminal attacks against package managers. The criminal can either Trojanise a repository or make
fake packages of a private project that is in use. By doing this the attacker may be able to deceive a company’s
whole development team, or even the organization’s ofﬁcial software build system, into updating private code from
an untrusted (and dangerous) external source if the company’s auto-updating processes aren’t properly safeguarded1.
This sort of trick is known as a supply chain attack. Figure 3 shows package squatting where there are packages with
typos that the criminals hope people will use.

1https://nakedsecurity.sophos.com/2021/03/07/poison-packages-supply-chain-risks -user-hits-python- community-with-4000-

fake-modules/

3

A PREPRINT - JULY 1, 2022

Figure 2: Architecture design of the proposed solution

Figure 3: Package squatting [31]

3 Chatbot Implementation

Since the task involved developing a domain speciﬁc conversational AI bot for a Hyper Interactive Intelligent Presenter
[32], we needed to ﬁnd a framework that could be used to solve the task and also a graphical user interface framework
that could easily be used. Since the bot needed to be trained to converse on a domain-speciﬁc topic for a course
extracted later on from the video classiﬁcation framework [33], the chosen framework would need to support this.
The main task for this conversational AI bot was to assist users in acquiring basic knowledge about a topic and/or for
querying relevant material available on the course page. Such a chatbot can be a great way to acquire students opinions
and sentiments towards certain aspects related to the teaching activities as well [34, 35]. It can also be a great way to
observe students’ learning experience [36] and behaviour [37–39] when the interact with the course through this bot
and to measure their engagement in a game-based learning approach [40] or to learn a dropout pattern [41, 42].

ChatterBot was the framework that was chosen to be used for this article. ChatterBot is a Python library that makes it
easy to generate automated responses to a user’s input, and uses a selection of machine learning algorithms to produce
different types of responses [43]. In ﬁgure 4 you can see how the ChatterBot framework works, from getting the input
and choosing what to output2.

The ChatterBot framework allows you to change a lot for how the bot will process the input statement or how the bot
will logically choose an appropriate output statement. There is also a way to have a default response, but this is not
something we have implemented. Under is a small list of the main things you can change with the framework. If you

2https://chatterbot.readthedocs.io/en/stable/

4

A PREPRINT - JULY 1, 2022

Figure 4: Process ﬂow diagram

do not specify these parameters when you set up the chatbot, the framework will choose the parameters for you. The
list also gives a short explanation on what each item is.

1. Preprocessors: simple functions that modify the given input that the conversational bot receives before it gets

processed by the logic adapter

2. Logic Adapters: determines the logic for how the bot selects a response to a given input

3. Storage Adapters: provides an interface that allows the bot to connect to different storage technologies

4. Filters: efﬁcient way to create queries that can be passed to the storage adapters used by the bot. They reduce

the number of statements the bot has to process before giving a response

The most important parameter for this study was the training and what type of training to be used for the bot. The
ChatterBot framework includes tools that help simplify the process of training a chatbot instance. The training pro-
cess involves loading example dialog into the database used by the bot. The graph data structure that reﬂects the
sets of known statements and answers is either created or built upon. When a chatbot trainer receives a data set, it

5

constructs the necessary entries in the conversational bot’s knowledge graph to accurately reﬂect the statement inputs
and responses. Figure 5 shows how conversations with the bot are stored as graphs in the database3.

A PREPRINT - JULY 1, 2022

Figure 5: Conversations in database

The main ways to train the bot is using a list of statements where the order of each statement is based on its placement
in a given conversation, training it with corpus data or training it with the Ubuntu dialog corpus [44]. For this research
work the English corpus dialog4 set was chosen. This trained the bot so that we could easily communicate with it and
the bot could give appropriate outputs to out inputs. Each time the bot have a conversation or "learn" something new,
it gets stored in a database. In listing 1 you can see a simple conversational bot that uses the terminal to talk with the
user and is trained on the English corpus data.

Figure 6: Listing 1: Terminal example for the bot

The framework that was chosen was PySide2 for GUI. PySide2 is a Python binding of the cross-platform GUI toolkit
Qt and is one of the alternatives to the standard library package Tkinter for Python. There is two different library
package for the GUI toolkit Qt. PySide2 and PyQt5. Even though there are two packages, they are basically the same.
They are 99% the same5. The reason why there is two packages wrapping the same library, is because of licensing.

3https://chatterbot.readthedocs.io/en/stable/training.html
4https://github.com/gunthercox/chatterbot-corpus
5https://www.pythonguis.com/faq/pyqt5-vs-pyside2/

6

PySide2 uses a LGPL license while PyQt5 uses GPL or commercial license6. Since the libraries are the same, it is
easy to take a PyQt5 project and use it with Pyside2.

A PREPRINT - JULY 1, 2022

Figure 7: Listing 2: Graphical user interface for chatbot

In listing 2 you can see the main code for setting up and running the graphical user interface. The interface has a text
area for displaying the conversation, a input ﬁeld to ask the question and a button to press to ask the bot. The reason
why the button is there and not just using "enter", is because some people may not know you can use "enter" to ask
questions. Layouts are made to keep the different widgets and to make it a bit prettier for the eyes to look at. The
text area is made to be read only. This is so that the user cannot write in it and the area is only used to display the
conversation between the bot and the user.

Listing 3 is the main connection between the ChatterBot framework, mentioned in the beginning of this article, and the
graphical user interface. The request from the user is "taken" from the input ﬁeld and is then sent to the bot which then
gives back a response. This happens when either the user presses "enter" after a question or presses on the Ask-button.
Line number 6 and 7 in listing 3 shows how the button-function is connected to run when the button is pressed or
”enter” is pressed. After the bot has given back a response, the request and the response is then displayed on the text
area. This displaying is done with each new conversation having a newline before itself, this to make it easier to read.

6https://www.pythonguis.com/faq/pyqt-vs-pyside/

7

A PREPRINT - JULY 1, 2022

Figure 8: Listing 3: Request/response for the bot

There is also added to strings in front of the response and request. You in front of the request and Bot in front of the
response. After they are displayed on the text area, the input ﬁeld is cleared.

3.1 Database Management

The database that Chatterbot creates consists of three tables. One table contains tags that rep- resent different topics
that the bot has been trained on. The main table contains all the training data with timestamps and what the statements
are a response to. If a statement is not part of the training the bot has done, it will have a ﬁeld called "conversation" be
blank, with it as training if the statement is part of the training. The ﬁnal table is connection table between the training
data and the topic tags.

The program for merging the databases will start by ﬁnding all the databases of the type .sqlite3, which is the format
Chatterbot saves the database ﬁle in. If there is one or less databases in the folder the program is in, it will tell the
user that there aren’t enough databases to merge, as well as which database type the program supports. It will then
ask the user which database they want to merge into. Once a database is selected, the program will start the merging
process by ﬁrst trimming down all the other databases to the statements that has a blank conversation ﬁeld. It will then
loop through the databases and add any statement that does not exist in the selected database to add the statement to
the database as shown in listing 4. A statement is deﬁned as not existing in the selected database by comparing all
the ﬁelds except for the id ﬁeld. Once all the databases has been merged into the selected database, the program will
tell the user which database they had chosen to merge into, in case the user forgot their selection. The program is
ignoring the training ﬁelds as they should stay the same through all the different databases, and if there is one person
that decided to add some training to their database, the user can just select the database with the updated training set
to merge into.

Figure 9: Listing 4: Database merging

8

A PREPRINT - JULY 1, 2022

3.2 Web scraping

Since our state-of-the-art chatbot was meant for aiding students and instructors in their respective courses, the black-
board web page was an obvious way to try and obtain data to train it. And we can scrap the information directly as
well from course contents available on blackboard [45]. To do this we attempted to get all the necessary information
with a known technique called web scraping. ‘Web scraping is used to transform unstructured data on the web into
structured data that can be stored and analysed in a central local database or spreadsheet’ [46]. That way we aimed to
get data from the information pages of each course and any wiki or site they might site and train the chat-bot to answer
questions based on them. That would ease the students and make the data easier accessible, since they wouldn’t have to
spend time going through everything or even try to contact their supervisor in case, they had trouble ﬁnding uploaded
data.

There were many good choices of tools like HTQL, iMacros and IRobotSoft each one of them a top choice with
unique features [47]. Nonetheless, we thought the best course of action was to try and implement our own to get better
acquainted with the methodology. To do this, we looked at a wide variety of web scraping techniques and programs
and after discussion we decided to go for selenium and beautiful soup python libraries. The main reason we choose
them was their popularity and ease of use, so that we might obtain fast and easily the information we needed. After
some initial trial and error, we got a fully working web scraper up and running in relatively short time. This ﬁrst
attempt was able to collect a wide range of data, which we managed to categorize, from some test websites that didn’t
require log in. The next step was password protected websites, this part was a bit harder to fully implement but again
we managed to set up a program that could log in and then scrape some sites provided by the tutorials.

3.3

Integration

Since we were unable to make any direct changes to blackboard, we had to ﬁnd another way to integrate our chatbot
into Blackboard. A solution we found for this which we decided to make use of is Tampermonkey7 which is an add-on
for browsers that allows for the use of userscripts. These userscripts can both add and remove functionality from
websites, and we made use of both parts in our work. The script is made up of a small amount of functions. We started
by creating a button that will be placed in the lower right of the screen. Clicking the button will open a chatwindow
where the button was placed and remove the button. The chatwindow consists of four parts, a gray input box for the
user to talk with the chatbot with a button to the right of it. Clicking on the button or pressing enter will then send a
request to the chatbot with the question the user wants to ask the chatbot.

The question will then be added to the white box above the input ﬁeld and once the response from the bot comes back,
it too will be added to the white box. Above the white box, there is another button that will close the chatwindow and
add back the ﬁrst button. The script will remember the discussion as long as the page isn’t reloaded or changed and
will thus still be there if the chatwindow is closed and reopened again. Such a tool could easily be integrated into other
pedagogical platforms [48].

4 Results & Discussion

With all the implementation mentioned above, the Blackboard page looks like ﬁgure 10. The ﬁgure shows how the
chatbot is integrated into Blackboard. The grey part under the white box is the input area, while the white box is the
conversation area. If the user asks question, the bot will answer it.

The next ﬁgure, ﬁgure 11, is showing how a conversation with the chatbot looks like. As previously mentioned, the
questions/answer has a help-string in front of each. This is to help know who asked and answered what. As shown
in the ﬁgure, the bot does not always know what to answer. Sometimes the bot also answers something that does not
have any correlation with the question. The easiest ﬁx for this s simply more training for the bot. With more training,
the bot will get better and have more conﬁdence giving the right answers. More training equals better answers.

The framework stores each conversation as a graph in the database. Each time the user asks, the bot stores it into the
database. If the bot ask "How are you doing?", and the user answers "Doing ﬁne", "ﬁne" or "good", all these will
be stored as answers to the question in the database. Then the bot know what to answer if the user asks the same
question. "Hi there" and "How are you doing?" is stored a lot because that was always the ﬁrst questions the authors
asked during development of the bot. That means the bot knows a lot on how to respond to those questions and inputs.

7https://www.tampermonkey.net/

9

A PREPRINT - JULY 1, 2022

Figure 10: Full Blackboard page with bot in the corner

Figure 11: Discussion between user and bot

4.1 Challenges

installation We had quite a lot of problems when it came to installing Chatterbot and making it work. We were all
able to install version 1.0.4 of Chatterbot, but not the newest version of Chatterbot, version 1.1.0. We were looking
for what the cause of this could be for a long time. What we did notice was that package called spacy did not
want to install newer versions, and that it tried to install older and older versions of it until it was able to install a
version compatible with Chatterbot version 1.0.4. With no idea on how to ﬁx this, we decided to use version 1.0.4 of
Chatterbot as it was the latest available version that we were able to install, but it wasn’t without its own problems.
Version 1.0.4 of Chatterbot was made for a python version of 3.7 or lower, but we were using newer python versions
which had removed or changed two functions that Chatterbot was dependent on. Due to this, we had to go into the
packages we had installed and ﬁnd the function that was removed or changed and then replace it with the newer
method. The functions we had to change was "time.clock()" to "time.perf counter()" in sqlacademys util/compat.py
and "collections.Hashable" to "collections.abc.Hashable" in yamls constructor.py. With this done, we were able to get
Chatterbot up and running.

10

A PREPRINT - JULY 1, 2022

design aspects Now the bot does not have any design behind it, it is just a simple chatbot that can be interacted with.
As you can see in ﬁgure 10 it does not look like it belongs there, and it also does not look nice. One of the things
that could have been made, is a small bot-button as you can see on other pages that have chatbots. Pushing this button
"summons" the bot conversation on the page, almost like opening a message. Also not having such hard corners for
the bot. Right now it has very sharp corners, but would be nicer to have rounder corners. The size is also something
that would need to be changed design wise. All these different design changes should be talked about with someone
having some design background, since most of the programmers do not have the same knowledge as they do.

training The bot is trained on two different methods: on a list of responses and questions, and on a corpus dialog set.
This makes it so that the bot can talk, but still needs a lot of training to be more human like. We initially tried to train
the bot using the Ubuntu Dialog Corpus but after a few hours we turned off the training because it was said training
with this data set could take as much as a week to ﬁnish. Training the bot on large data sets will help it a lot with the
learning part, which in part will help the users when talking with them. This large and time consuming training can
be done by using/renting a virtual machine and letting the chatbot train there. After the training is done, the database
ﬁle will then be used with the local chatbot. This can also be made into two different instances of the chatbot. One
that only trains and the other one for the talking. Then you can just continuously feed the learning bot with material.
Using the database merger mentioned in 4.2 can be used for combining the two databases after each training period.

Web scraping The main way from which we planned to add data is the web scraping of the blackboard website,
the course information page speciﬁcally seemed to be a good start. Although the web scrapper seemed efﬁcient
when collecting data from other websites we weren’t that successful with blackboard. Unfortunately, we didn’t take
into account Feide’s security system which prevented us from taking the necessary data to train the bot efﬁciently.
Nevertheless, that doesn’t mean that it cannot be of use as it can always collect data from provided supportive material,
like Wikipedia or other websites, each professor might provide to his students. Another important topic is that we
didn’t implement our own training class as the chatbot framework we used allows. The reason for this is that the web
scraper wasn’t set up the right way for training, as the data format wasn’t .yml or a list.

integration Due to only getting access to a test-environment of Blackboard that we couldn’t directly change the source
code of, we were unable to directly integrate the chatbot into Blackboard. It would have been a lot better to implement
the chatbot into Blackboard, but due to this problem, we had to rely on making an external modiﬁcation of the website.
While Tampermonkey works for modifying blackboard, we can’t look away from the fact that we are not only relying
on a third party tool for this but also in a sense making a third party method for adding the chatbot to Blackboard.

4.2 Limitations & Improvements

One of the limitations of this chatbot is its learning ability to understand context and use semantics [49–51]. The bot
can be made to comprehend the semantics either using ontology, [52–57], or by incorporating concept vector space
models [58, 59], or by utilizing embeddings [33, 60–62], to enhance the personalized learning trajectory thus making
the chatbot works like a personal learning companion. In addition to teaching and learning activities, the chatbots can
also contribute to the administrative part of the education sector by providing students with guidance and assistance
related to admission process, tuition fee, etc, [63]. Apart from this, the bot can further be trained to understand
domain-speciﬁc jargons or be able to converse in multi-languages.

5 Conclusion

The main goal of this research work was to create an educational chatbot. We made a chatbot that is integrated into
Blackboard and can be trained on a speciﬁc topic so that it can answer student’s questions about it. We also researched
webscraping and tried to use it on Blackboard so that the bot could learn from the Learning Materials directly on the
course page, but we encountered some problems speciﬁc to Blackboard that complicated this task. The webscraping
part is still working on lower-security websites and can be exploited for the chatbot. For the future works related to this
study, the ﬁrst thing to do would be to connect the webscraping part to the chatbot, as they are current in completely
separate ﬁles and not connected in any way. The data gathered by the webscaper is not directly usable by the bot, so
implementing that is necessary for the interaction. Then the chatbot should be trained, which can be done through
webscaping on webpages other than blackboard, with trusted webpages given by the professors for example, or simply
with .yml ﬁles made speciﬁcally for the chatbot.

11

A PREPRINT - JULY 1, 2022

References

[1] E. Adamopoulou and L. Moussiades, “An overview of chatbot technology,” in IFIP International Conference on

Artiﬁcial Intelligence Applications and Innovations. Springer, 2020, pp. 373–383.

[2] A. S. Imran, “Interactive media learning object in distance and blended education,” in Proceedings of the 17th

ACM international conference on Multimedia, 2009, pp. 1139–1140.

[3] A. S. Imran and F. A. Cheikh, “Multimedia learning objects framework for e-learning,” in 2012 International

Conference on E-Learning and E-Technologies in Education (ICEEE).

IEEE, 2012, pp. 105–109.

[4] S. Roller, E. Dinan, N. Goyal, D. Ju, M. Williamson, Y. Liu, J. Xu, M. Ott, K. Shuster, E. M. Smith et al.,

“Recipes for building an open-domain chatbot,” arXiv preprint arXiv:2004.13637, 2020.

[5] D. Adiwardana, M.-T. Luong, D. R. So, J. Hall, N. Fiedel, R. Thoppilan, Z. Yang, A. Kulshreshtha, G. Nemade,

Y. Lu et al., “Towards a human-like open-domain chatbot,” arXiv preprint arXiv:2001.09977, 2020.

[6] F. Clarizia, F. Colace, M. Lombardi, F. Pascale, and D. Santaniello, “Chatbot: An education support system for

student,” in International Symposium on Cyberspace Safety and Security. Springer, 2018, pp. 291–302.

[7] A. Følstad, C. B. Nordheim, and C. A. Bjørkli, “What makes users trust a chatbot for customer service? an
exploratory interview study,” in International conference on internet science. Springer, 2018, pp. 194–208.

[8] N. Ouerhani, A. Maalel, and H. Ben Ghézela, “Spececa: a smart pervasive chatbot for emergency case assistance

based on cloud computing,” Cluster Computing, vol. 23, no. 4, pp. 2471–2482, 2020.

[9] I. Benke, M. T. Knierim, and A. Maedche, “Chatbot-based emotion management for distributed teams: A partic-
ipatory design study,” Proceedings of the ACM on Human-Computer Interaction, vol. 4, no. CSCW2, pp. 1–30,
2020.

[10] S. Gabrielli, K. Marie, and C. D. Corte, “Slowbot (chatbot) lifestyle assistant,” in Proceedings of the 12th EAI

international conference on pervasive computing Technologies for Healthcare, 2018, pp. 367–370.

[11] A. S. Imran, K. Pireva, F. Dalipi, and Z. Kastrati, “An analysis of social collaboration and networking tools
Springer, 2016, pp.

in elearning,” in International Conference on Learning and Collaboration Technologies.
332–343.

[12] Ø. Nordhaug, A. S. Imran, A. M. Alawawdeh, and S. J. Kowalski, “The forensic challenger,” in 2014 Interna-

tional Conference on Web and Open Access to Learning (ICWOAL).

IEEE, 2014, pp. 1–6.

[13] A. M. Alawawdeh, A. S. Imran, and S. J. Kowalski, “Norwegian information security lectures as a case study
for hyper interactive presenter,” in 2014 World Congress on Computer Applications and Information Systems
(WCCAIS).

IEEE, 2014, pp. 1–5.

[14] G. Caldarini, S. Jaf, and K. McGarry, “A literature survey of recent advances in chatbots. information 2022, 13,

41,” 2022.

[15] L. K. Fryer, K. Nakao, and A. Thompson, “Chatbot learning partners: Connecting learning experiences, interest

and competence,” Computers in Human Behavior, vol. 93, pp. 279–289, 2019.

[16] G. Hiremath, A. Hajare, P. Bhosale, R. Nanaware, and K. Wagh, “Chatbot for education system,” International

Journal of Advance Research, Ideas and Innovations in Technology, vol. 4, no. 3, pp. 37–43, 2018.

[17] R. Winkler and M. Söllner, “Unleashing the potential of chatbots in education: A state-of-the-art analysis,” in

Academy of Management Annual Meeting (AOM), 2018.

[18] B. Balatamoghna and B. Nagajayanthi, “Enhancement of productivity using chatbots,” in Futuristic Communi-

cation and Network Technologies. Springer, 2022, pp. 885–892.

[19] S. Gupta and Y. Chen, “Supporting inclusive learning using chatbots? a chatbot-led interview study,” Journal of

Information Systems Education, vol. 33, no. 1, pp. 98–108, 2022.

[20] F. Dalipi, A. S. Imran, F. Idrizi, and H. Aliu, “An analysis of learner experience with MOOCs in mobile and
desktop learning environment,” in Advances in human factors, business management, training and education.
Springer, 2017, pp. 393–402.

[21] K. Pireva, A. S. Imran, and F. Dalipi, “User behaviour analysis on LMS and MOOC,” in 2015 IEEE Conference

on e-Learning, e-Management and e-Services (IC3e).

IEEE, 2015, pp. 21–26.

[22] J. Pereira, “Leveraging chatbots to improve self-guided learning through conversational quizzes,” in Proceedings
of the fourth international conference on technological ecosystems for enhancing multiculturality, 2016, pp.
911–918.

12

A PREPRINT - JULY 1, 2022

[23] A. Fadhil and A. Villaﬁorita, “An adaptive learning with gamiﬁcation & conversational uis: The rise of cibopoli-
bot,” in Adjunct publication of the 25th conference on user modeling, adaptation and personalization, 2017, pp.
408–412.

[24] P. Paudyal, A. Banerjee, and S. Gupta, “On evaluating the effects of feedback for sign language learning using
explainable ai,” in Proceedings of the 25th International Conference on Intelligent User Interfaces Companion,
2020, pp. 83–84.

[25] M. Mateos-Sanchez, A. C. Melo, L. S. Blanco, and A. M. F. García, “Chatbot, as educational and inclusive tool

for people with intellectual disabilities,” Sustainability, vol. 14, no. 3, p. 1520, 2022.

[26] A. K. Goel and L. Polepeddi, “Jill watson: A virtual teaching assistant for online education,” in Learning engi-

neering for online education. Routledge, 2018, pp. 120–143.

[27] J. Torous, S. Bucci, I. H. Bell, L. V. Kessing, M. Faurholt-Jepsen, P. Whelan, A. F. Carvalho, M. Keshavan,
J. Linardon, and J. Firth, “The growing ﬁeld of digital psychiatry: current evidence and the future of apps, social
media, chatbots, and virtual reality,” World Psychiatry, vol. 20, no. 3, pp. 318–335, 2021.

[28] L.-K. Lee, Y.-C. Fung, Y.-W. Pun, K.-K. Wong, M. T.-Y. Yu, and N.-I. Wu, “Using a multiplatform chatbot as an
IEEE,

online tutor in a university course,” in 2020 International Symposium on Educational Technology (ISET).
2020, pp. 53–56.

[29] W. Siblini, B. Sayil, and Y. Kessaci, “Towards a more robust evaluation for conversational question answering,”
in Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th Inter-
national Joint Conference on Natural Language Processing (Volume 2: Short Papers), 2021, pp. 1028–1034.
[30] D.-Y. Liu and H.-F. Hsu, “An international comparison of empirical generalized double diamond model ap-

proaches to taiwan and korea,” Competitiveness Review: An International Business Journal, 2009.

[31] J. Jylang, “Poison packages – supply chain risks - user hits python community with 4000 fake modules,” 2021.

[32] A. S. Imran and S. J. Kowalski, “HIP–a technology-rich and interactive multimedia pedagogical platform,” in

International Conference on Learning and Collaboration Technologies. Springer, 2014, pp. 151–160.

[33] Z. Kastrati, A. S. Imran, and A. Kurti, “Integrating word embeddings and document topics with deep learning in

a video classiﬁcation framework,” Pattern Recognition Letters, vol. 128, pp. 85–92, 2019.

[34] M. Edalati, A. S. Imran, Z. Kastrati, and S. M. Daudpota, “The potential of machine learning algorithms for
sentiment classiﬁcation of students’ feedback on MOOC,” in Proceedings of SAI Intelligent Systems Conference.
Springer, 2021, pp. 11–22.

[35] Z. Kastrati, B. Arifaj, A. Lubishtani, F. Gashi, and E. Nishliu, “Aspect-based opinion mining of students’ re-
views on online courses,” in Proceedings of the 2020 6th International Conference on Computing and Artiﬁcial
Intelligence. New York, NY, USA: ACM, 2020, p. 510–514.

[36] S. A. Rääf, J. Knöös, F. Dalipi, and Z. Kastrati, “Investigating learning experience of moocs learners using topic
modeling and sentiment analysis,” in 2021 19th International Conference on Information Technology Based
Higher Education and Training (ITHET), 2021, pp. 01–07.

[37] F. Patel, R. Thakore, I. Nandwani, and S. K. Bharti, “Combating depression in students using an intelligent
chatbot: a cognitive behavioral therapy,” in 2019 IEEE 16th India Council International Conference (INDICON).
IEEE, 2019, pp. 1–4.

[38] K. Pireva, R. Tahir, A. S. Imran, and N. Chaudhary, “Evaluating learners’ emotional states by monitoring brain
waves for comparing game-based learning approach to pen-and-paper,” in 2019 IEEE Frontiers in Education
Conference (FIE).

IEEE, 2019, pp. 1–8.

[39] O. T. Tran and T. C. Luong, “Understanding what the users say in chatbots: A case study for the vietnamese

language,” Engineering Applications of Artiﬁcial Intelligence, vol. 87, p. 103322, 2020.

[40] K. P. Nuci, R. Tahir, A. I. Wang, and A. S. Imran, “Game-based digital quiz as a tool for improving students’

engagement and learning in online lectures,” Ieee Access, vol. 9, pp. 91 220–91 234, 2021.

[41] M. S. Lim, S.-B. Ho, and I. Chai, “Design and functionality of a university academic advisor chatbot as an early
intervention to improve students’ academic performance,” in Computational science and technology. Springer,
2021, pp. 167–178.

[42] A. S. Imran, F. Dalipi, and Z. Kastrati, “Predicting student dropout in a mooc: An evaluation of a deep neural net-
work model,” in Proceedings of the 2019 5th International Conference on Computing and Artiﬁcial Intelligence,
2019, pp. 190–195.

[43] G. Cox, “Chatterbot documentation,” 2021.

13

A PREPRINT - JULY 1, 2022

[44] R. Lowe, N. Pow, I. Serban, and J. Pineau, “The ubuntu dialogue corpus: A large dataset for research in unstruc-

tured multi-turn dialogue systems,” arXiv preprint arXiv:1506.08909, 2015.

[45] A. S. Imran and F. A. Cheikh, “Blackboard content classiﬁcation for lecture videos,” in 2011 18th IEEE interna-

tional conference on image processing.

IEEE, 2011, pp. 2989–2992.

[46] D. S. Sirisuriya et al., “A comparative study on web scraping,” 2015.
[47] R. Giannini, R. L. Conte, and S. Mosca, “Web scraping techniques to collect data on consumer electronics and
airfares for italian hicp compilation,” in European Conference on quality in ofﬁcial statistics, vol. 2, 2014, p. 5.
[48] A. S. Imran, F. A. Cheikh, and S. J. Kowalski, “Automatic annotation of lecture videos for multimedia driven
pedagogical platforms,” Knowledge Management & E-Learning: An International Journal, vol. 8, no. 4, pp.
550–580, 2016.

[49] A. A. Qaffas, “Improvement of chatbots semantics using wit. ai and word sequence kernel: Education chatbot as
a case study,” International journal of modern education and computer science, vol. 11, no. 3, p. 16, 2019.
[50] Z. Kastrati, A. S. Imran, and S. Y. Yayilgan, “The impact of deep learning on document classiﬁcation using
semantically rich representations,” Information Processing & Management, vol. 56, no. 5, pp. 1618–1632, 2019.
[51] M. Virkar, V. Honmane, and S. U. Rao, “Humanizing the chatbot with semantics based natural language gener-
IEEE, 2019,

ation,” in 2019 International Conference on Intelligent Computing and Control Systems (ICCS).
pp. 891–894.

[52] Z. Kastrati, A. S. Imran, and S. Yildirim-Yayilgan, “SEMCON: a semantic and contextual objective metric for
enriching domain ontology concepts,” International Journal on Semantic Web and Information Systems (IJSWIS),
vol. 12, no. 2, pp. 1–24, 2016.

[53] A. Hallili, “Toward an ontology-based chatbot endowed with natural language processing and generation,” in

26th european summer school in logic, language & information, 2014.

[54] Z. Kastrati, A. S. Imran, S. Yildirim-Yayilgan, and F. Dalipi, “Analysis of online social networks posts to investi-
gate suspects using SEMCON,” in International Conference on Social Computing and Social Media. Springer,
2015, pp. 148–157.

[55] D. Spiliotopoulos, K. Kotis, C. Vassilakis, and D. Margaris, “Semantics-driven conversational interfaces for
Springer, 2020, pp. 255–

museum chatbots,” in International Conference on Human-Computer Interaction.
266.

[56] Z. Kastrati, A. S. Imran, and S. Y. Yayilgan, “SEMCON: semantic and contextual objective metric,” in Proceed-
IEEE, 2015,

ings of the 2015 IEEE 9th International Conference on Semantic Computing (IEEE ICSC 2015).
pp. 65–68.

[57] H. Al-Zubaide and A. A. Issa, “Ontbot: Ontology based chatbot,” in International Symposium on Innovations in

Information and Communications Technology.

IEEE, 2011, pp. 7–12.

[58] Z. Kastrati and A. S. Imran, “Performance analysis of machine learning classiﬁers on improved concept vector

space models,” Future Generation Computer Systems, vol. 96, pp. 552–562, 2019.

[59] Z. Kastrati, A. S. Imran, and S. Y. Yayilgan, “An improved concept vector space model for ontology based
classiﬁcation,” in 2015 11th International Conference on Signal-Image Technology & Internet-Based Systems
(SITIS).

IEEE, 2015, pp. 240–245.

[60] N. Bensalah, H. Ayad, A. Adib et al., “Combining word and character embeddings for arabic chatbots,” in
Springer, 2020, pp.

International Conference on Advanced Intelligent Systems for Sustainable Development.
571–578.

[61] Z. Kastrati, A. Kurti, and A. S. Imran, “WET: Word embedding-topic distribution vectors for MOOC video

lectures dataset,” Data in brief, vol. 28, p. 105090, 2020.

[62] B. Gamage, R. Pushpananda, and R. Weerasinghe, “The impact of using pre-trained word embeddings in sinhala
IEEE,

chatbots,” in 2020 20th International Conference on Advances in ICT for Emerging Regions (ICTer).
2020, pp. 161–165.

[63] A. Bhutoria, “Personalized education and artiﬁcial intelligence in the united states, china, and india: A systematic
review using a human-in-the-loop model,” Computers and Education: Artiﬁcial Intelligence, vol. 3, p. 100068,
2022.

14

