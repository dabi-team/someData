2
2
0
2

n
u
J

4
1

]
E
N
.
s
c
[

1
v
4
7
6
6
0
.
6
0
2
2
:
v
i
X
r
a

Severe Damage Recovery in Evolving Soft
Robots through Diﬀerentiable Programming

Kazuya Horibe1*, Kathryn Walker2†, Rasmus Berg
Palm2†, Shyam Sudhakaran2† and Sebastian Risi2

1*Department of Systems Innovation, Osaka University, 1-3
Machikaneyama, Toyonaka, 560-8531, Osaka, Japan.
2Department of Digital Design, IT University of Copenhagen,
Rued Langgaards Vej 7, Copenhagen, DK 2300, Denmark.

*Corresponding author(s). E-mail(s):
horibe@irl.sys.es.osaka-u.ac.jp;
Contributing authors: kwal@itu.dk; rasmb@itu.dk;
shyamsnair@protonmail.com; sebr@itu.dk;
†These authors contributed equally to this work.

Abstract

Biological systems are very robust to morphological damage, but arti-
ﬁcial systems (robots) are currently not. In this paper we present
a system based on neural cellular automata,
in which locomot-
ing robots are evolved and then given the ability to regener-
ate their morphology from damage through gradient-based train-
ing. Our approach thus combines the beneﬁts of evolution to dis-
cover a wide range of diﬀerent robot morphologies, with the eﬃ-
ciency of supervised training for robustness through diﬀerentiable
update rules. The resulting neural cellular automata are able to
grow virtual robots capable of regaining more than 80% of their
types of morphological damage.
functionality,

even after

severe

1 Introduction

Within the natural world, evolution has created a diverse range of robust,
adaptive organisms that are able to survive damage. While this adaptation is

1

 
 
 
 
 
 
2

Severe Damage Recovery in Evolving Soft Robots

sometimes due to a change in behaviour (or control system), in many cases
these organisms rely on morphological regeneration. In these instances, the
organisms repair and/or reconﬁgure their morphology in response to damage
or changes in components [1].

The amount of regeneration for which an organism is capable varies from
species to species. For many years, gardeners have deliberately damaged
(pruned) their plants to encourage plant re-growth in a particular direction
or increase fruit yield [2, 3]. Plant propagation through cutting (where a com-
pletely new plant is grown from part of an existing plants stem or root) is also
common practise [4]. Whilst pruning can be considered a chore by many [2],
it does help to highlight the power of nature’s morphological regeneration.

Morphological regeneration does not only occur in plants but also in ani-
mals. For instance, salamanders are capable of regenerating an amputated leg
[5]. The simple organisms Hydra and Planaria are capable of complete mor-
phological repair, regardless of which body part is removed [6, 7]. Even within
humans, the liver organ is able to regenerate and replace lost liver tissue via
growth from the remaining cells [8].

In contrast to biological organisms, artiﬁcial robotic systems are fragile and
even a small amount of damage can severely impact their performance. Fur-
thermore, despite its commonplace within nature, the majority of examples of
robots adapting to damage focus on a change in control system, not morphol-
ogy. This potentially limits their robustness compared with the wide range of
damage natural systems are able to recover from.

Fig. 1: Approach Overview. (1) A diversity of morphologies are discovered
through evolutionary optimization. (2) A neural cellular automata is trained
to regrow a target morphology found by evolution under diﬀerent damages.
(3) The resulting NCA is able to grow a soft robot, while being able to recover
from extreme forms of damage.

While the mechanisms behind natural morphological regeneration are still
not fully understood, artiﬁcial methods such as neural cellular automata have
proven successful tools for their modelling. For instance, the work presented
in this paper is an extension of our previous conference paper [9], where we
evolve neural cellular automata to grow locomoting soft robots capable of
some morphological regeneration. Neural cellular automata are based on the
simpler cellular automata. These consist of a regular grid of cells where each
cell can be in any one of a ﬁnite set of states, cell states are then updated based

(1)EvolutionaryMorphology Discovery….(2) Robustness Training through Differentible Optimization(3) ResilientNeuralCellularAutomataGrowthDamage RecoverySevere Damage Recovery in Evolving Soft Robots

3

on information from their neighbour’s states and simple rule sets. In neural
cellular automata, these simple rules are replaced by artiﬁcial neural networks.
In this paper, we extend our initial investigation and use a more eﬃcient
way of training neural cellular automata for robustness, which is based on
gradient-based optimization. An overview of the approach is shown in Figure 1.
As before [9], we ﬁrst use an evolutionary algorithm to discover neural cellular
automata that can grow the control and morphology of a diversity of soft
voxel-based robots. The NCA for a particular robot is then eﬃciently trained
through diﬀerentiable programming (i.e. gradient-based optimization) to grow
a particular robot while being able to recover from various forms of damage.
In contrast to previous work on training for regeneration through gradient-
based optimization [10, 11], here the target artefacts are evolved instead of
being hand-designed. This approach thus combines the creativity of artiﬁcial
evolution with the eﬃciency of supervised training, opening up new application
in the ﬁeld of morphological computation.

1.1 Related Work

1.1.1 Evolving Virtual Creatures

In this paper we explore growing virtual soft robots, capable of regeneration,
via the use of trained neural cellular automata. In the ﬁrst instance we use
evolutionary algorithms to grow simple soft robots, using distance travelled
as our ﬁtness function. However, the concept of using artiﬁcial evolution to
design the control and morphology of virtual robots has existed for almost
three decades. In his seminal work, Karl Sims evolved the body plans of simple
block based robots, which interacted with their virtual environment [12, 13].
This work was then followed by many researchers also investigating using evo-
lutionary algorithms to design the morphology and control of virtual robots,
e.g.,

[14–18].

A common theme amongst researchers investigating evolving robot mor-
phologies is the use of compositional pattern producing networks (CPPNs) [19]
to describe body shape and properties [20–24]. CPPNs are a special type of
artiﬁcial neural network, applied over the whole input space, allowing patterns
or shapes to be produced.

However, these previous examples only consider static morphologies, that
is, they do not allow for shape changes for growth or damage recovery. There-
fore, researchers have more recently begun to investigate diﬀerent approaches
to address these limitations, which we review next.

1.1.2 Damage recovery/ shape change in robots

As mentioned previously, when trying to adapt to new environments/tasks
or recover from damage, researchers have mostly explored control-based
approaches instead of changing the robot’s morphology [25–30]. The investi-
gation into metamorphosis/morphological regeneration as a damage recovery
strategy is less common, despite its potential and prevalence in nature.

4

Severe Damage Recovery in Evolving Soft Robots

Recent examples of robots adapting their morphology to diﬀerent environ-
ments, rather than control, include the work by Kriegman et al. [31] where
individual parts of the robot change stiﬀness in response to external stresses.
Walker et al. [32] explore removing individual parts of the robot to sculpt mor-
phologies based on environmental interaction. Shah et al. published work on
a physical soft robot capable of radial morphological shape change for loco-
motion in diﬀerent environments [33]. We refer the interested reader to the
extensive review paper on shape changing robots by Shah et al. [34].

These previous examples all refer to morphology change for environmental
adaptation. However, there are also examples where morphological change has
been exploited for damage recovery. These works include that by Kriegman
et al. [35], where silicone based physical voxel robots were able to recover
from voxel removal. Furthermore, Xenobots, synthetic creatures designed from
biological tissue [36], have shown to be capable of morphological reattachment
(i.e. healing after insult).

1.1.3 Neural cellular automata for growth and recovery

Cellular automata (CA) were ﬁrst proposed by Neumann and Ulam in the
1940s and consist of a regular grid of cells where each cell can be in any
one of a ﬁnite set of states [37]. Each cell determines its next state based
on local information (i.e. the states of its neighboring cells) according to pre-
deﬁned rules. Instead of hand-designed rules, these rules can also be learned.
For example, Miller showed that automatic recovery of simple damaged target
patterns is possible by learning CA rules through genetic programming [38].

CA rules can also be learned by neural networks, resulting in what is now
called a neural cellular automata (NCA) [39]. NCAs have been used to great
eﬀect for morphological growth and recovery in simulation. For example, Mord-
vintsev et al. trained a neural CA to grow complex two-dimensional images
starting from a few initial cells through gradient-based optimization (i.e. dif-
ferentiable programming) [11]. In addition, the authors have also successfully
trained the system to reconstruct the pattern after damage (i.e. it was able to
regrow the target pattern). The neural network in their work is a convolutional
network, which lends itself to represent neural CAs [40].

Based on Mordvintsev’s work, Sudhakaran et al. [10] have trained neu-
ral cellular automata capable of growing particular target patterns in three
dimensions. As with Mordvintsev’s work, these 3D shapes/structures are able
to regrow after signiﬁcant damage and are also trained through gradient-based
optimization. Both approaches [10, 11] relied on user-speciﬁc target patterns,
while these target patterns are themselves evolved in our approach and then
made robust against damage.

Severe Damage Recovery in Evolving Soft Robots

5

2 Method

2.1 Soft Robot Simulator

For our investigations (both 2D and 3D) we use the soft robot simulator “Vox-
elyze” [41]. In Voxelyze, a cell takes the form of a 3D cube called a voxel;
adjacent voxels (or cells) are connected together by simulated beams. Voxelyze
creates actuation within these soft robots by employing a sinusoidally varying
global control signal (termed temperature by the Voxelyze software). Active
cells expand and contract in phase with this sinusoidal temperature variation,
whilst passive cells remain a constant size. The software VoxCad can then be
used to visualise this.

Our aim is to evolve soft robots capable of successful locomotion, as well
as regeneration, both in 2D and 3D. Thus the ﬁtness of a robot (in terms of
locomotion) is how far the robot travelled in a ﬁxed time period. This time
period is 0.25 seconds, or 10 actuation cycles in 2D and for 0.5 seconds, or 20
actuation cycles in 3D. The evaluation times try to strike a balance between
reducing computational costs while still giving suﬃcient time to observe inter-
esting locomotion behaviours. Fitness is determined as the distance the robot’s
center of mass moves in 0.25 or 0.5 seconds. The distance (or ﬁtness) of a robot
is measured in units that correspond to the length of a voxel with volume one.
It should also be noted that creatures with zero voxels after their growth are
automatically assigned a ﬁtness of 0.0.

In all our experiments, the neural cellular automata is able to utilise four
types of cell/voxel. The ﬁrst is an active cell, denoted by the colour red, and
has an expansion and contraction cycle in phase with the global control signal.
We also refer to this type of cell as muscle. The second type of cell can also
be thought of as muscle. Denoted by the colour green, it also expands and
contracts, but this time at counter phase to the red muscle cells. Dark blue
cells are passive, they do not change size. We refer to these as bone. The ﬁnal
cell type is denoted by a light blue colour. These are also passive but have a
lower stiﬀness than dark blue bone voxels.

Our choice of cell types is consistent with previous literature (Cheney et
al. [20]), as is our choice of physical and environmental Voxelyze parameters.

2.2 Neural Cellular Automata

As previously discussed, Neural Cellular Automata (NCA) are Cellular
Automata in which each cell state is represented by a vector of scalar values,
and the update rules are parameterized by neural networks [11]. Our cell state
vector consists of three parts: 1) The number of unique output types for each
cell k, e.g. muscle, bone, etc., corresponds to the ﬁrst k channels, 2) the cell
aliveness value and 3) a number of hidden states. The NCA grid is seeded with
a single central cell at t = 0 with its state vector set to all ones and all the
other cell states to zero. The NCA update rule deﬁnes a recurrent additive

6

Severe Damage Recovery in Evolving Soft Robots

(a) Evolutionary Neural Architecture

(b) Diﬀerentiable Neural Architecture

Fig. 2: Neural Cellular Automata Architecture. The evolutionary
approach uses a simple three-layer network (a), while the diﬀerentiable pro-
gramming approach is based on a more complex deep convolutional neural
network (b).

function parameterized by a neural network,

t = ai
hi

t · (hi

t−1 + ui

t · fθ({hj

t−1}j∈N (i))) ,

(1)

t ∈ RD is the D dimensional state of cell i at time t, fθ is the update
where hi
rule, parameterized by a neural network with parameters θ and N (i) is the set
of indices of all the neighbors of cell i, including i. For a NCA deﬁned on a 3D
grid it corresponds to the cells in a 3 × 3 × 3 neighborhood [10]. ai
t ∈ {0, 1}
and ui

t ∈ {0, 1} are the alive and update masks respectively.

The update mask is a random binary variable sampled with some proba-
bility p, so that p(ui
t = 1) = p. The random update mask can be seen as a
form of dropout [42] which makes the NCA robust to noise and invariant to
the exact order of the updates. In our experiments we use p = 0.5.

The aliveness mask ensures that dead cells have an all zero state. A cell
is considered alive if any of the cells in its 3 × 3 × 3 neighborhood, including

Severe Damage Recovery in Evolving Soft Robots

7

itself, have an aliveness value of more than 0.1. The aliveness value is the k’th
entry of the cell state vector, so that ai
t−1[k]}j∈N (i)) ≥ 0.1. The
aliveness mask is eﬃciently computed using a 3D max pooling operation.

t = max({hj

3 Evolving Soft Robot Morphologies

To conﬁrm the promise of NCA for growing soft robots, we use a simple three-
layer networks with tanh activation functions (Fig. 2a). We experiment with
both feed forward (the hidden layer is a linear layer) and recurrent net-
works (the hidden layer is an LSTM unit [43]), which means that each cell
has its own memory. Here, the dimension of the hidden layer is set to 64
unless otherwise noted. The recurrent setup is inspired by recent experimental
reports that organisms store information about the original morphology in a
distributed manner in the bioelectrical signaling networks [44, 45].

To evolve a NCA for initial robot growth, we use a simple genetic algo-
rithm [46, 47] that has been shown to be eﬀective in training deep neural
networks [48, 49]. The implemented GA variant performs truncation selection
with the top T individuals becoming the parents of the next generation. The
following procedure is repeated at each generation: First, parents are selected
uniformly at random. They are mutated by adding Gaussian noise to the
weight vector of the neural network (its genotype): θ(cid:48) = θ + σ(cid:15), where (cid:15) is
drawn from normal distribution N (0, I) and σ is set to 0.03. Following a tech-
nique called elitism, top M th individuals are passed on to the next generation
without mutation.

3.1 2D soft robots

We ﬁrst investigate the use of NCA in 2D. Here, robots have a maximum size of
7 × 7 voxels. Since the NCA used a Moore neighborhood, the input dimension
of the neural network is 9 × 2 = 18, which includes neighboring cell types and
alpha values.

The output layer of the NCA has a size of 6 neurons; 5 neurons for the dif-
ferent states of the cell (empty=0, light blue=1, dark blue=2, red=3, green=4)
plus one alpha channel. The ﬁrst single soft & passive cell (light blue) is placed
at position (3, 3) and 10 steps of development are performed. As result, 11
morphologies are obtained, see (Fig. 3a). Afterwards, the ﬁnal grown robot
is tested in the physical simulator (Voxelyze) and allowed to attempt loco-
motion for 0.25 seconds, i.e., 10 actuation cycles. The ﬁtness of each robot is
taken to be distance travelled by the robot from its starting point. These 2D
experiments use a population size of 300, running for 500 generations. One
evolutionary run on 8 CPUs took around 12 hours.

Results were obtained from ten independent evolutionary runs, using both
recurrent and feed forward networks. The training mean together with boot-
strapped 95% conﬁdence intervals is shown in Fig. 3b. Evolution produced a
variety of soft robots (Fig. 3c). A “Hook” type is distinguished by its hook-like

8

Severe Damage Recovery in Evolving Soft Robots

(a) 2D robot development

(b) Training

(c) 2D robot locomotion

Fig. 3: Evolution of 2D soft robots (a) Example of the development of
2D soft robots through a neural cellular automata. (b) Training ﬁtness for the
recurrent/feed forward setup. (c) Time series of soft robot behaviors as they
move from left to right. From top to bottom, we refer to them as Hook type,
S-type, Biped, L-type, and Zigzag.

form and locomotion, which shakes the two sides of the hook and the pro-
ceeds to hook the remaining one side to the ﬂoor. The “S” shaped-robot is
distinguished by its sharp and peristaltic motion with amplitude in the same
direction as the direction of travel. The “Biped” has two legs and its locomo-
tion resembles that of a frog, with the two legs pushing the robot forward.
The “L” type displays a sharp and winged movement. Finally, the “Zig-zag”
shows a spring-like movement by stretching and retracting the zigzag structure.
Enabling the cells to keep a memory of recent developmental states through
a recurrent network improved performance, although only slightly (Fig. 3b).
Investigating what information the evolved LSTM-based network is keeping
track of during development is an interesting future research direction.

3.2 3D soft robots

In this section we now extend our methodology to grow 3D robots. For these
3D robots the maximum morphology size is 9 × 9 × 9. Because of the used
Moore neighborhood, the input dimension of the neural network is 3 × 9 ×
2 = 54. The hidden layer is set to 64. The output layer is set to 5 + 1 = 6
dimensions with the number of states of the cell and the value of its own
next step alpha value. The ﬁrst single soft & passive cell is placed at position
(4, 4, 4) and 10 steps of growth are performed (Fig. 4a). The ﬁnal soft robot
grown after 10 steps is tested in Voxelyze and, as with the 2D robots, the
distance of the robot’s center of gravity from its starting point is used as part

Severe Damage Recovery in Evolving Soft Robots

9

of the ﬁtness function. Additionally, we include a voxel cost in the ﬁtness
calculation: F itness = (Distance) − (V oxelsCost). We added a “voxel” cost
because preliminary results indicated that without this additional metric all
the soft robots simply acquired a box-like morphology. Including the voxel
cost metric increased diversity in the population. Note that voxel cost is the
number of voxels that are neither empty nor dead.

For our 3D experiments, the evaluation time is increased to 0.5s for 20
actuation cycles to adjust for the increased complexity of the robots. Each gen-
eration has a population size of 100 and the next generation is selected from
the top 20%. The number of generations is set to 300. Note that both the gen-
eration number and population size are reduced from those values used in the
2D experiments as simulated the larger 3D robots has a higher computational
cost. One evolutionary run on 1 CPU took around 80–90 hours.

Results are based on 24 independent runs for both the recurrent and feed
forward treatment (Fig. 4b). Interestingly, the feed forward setup for the 3D
robots has a higher ﬁtness than the recurrent one, in contrast to the 2D soft
robot results (Fig. 3b). We hypothesize that with the increased numbers of
neighbors in 3D and more complex patterns, it might be harder to evolve an
LSTM-based network that can use its memory component eﬀectively. Because
the dynamics of LSTM-based networks are inherently diﬃcult to analyse, more
experiments are needed to investigate this discrepancy further.

Similarly to CPPN-encoded soft robots [20], 3D robots grown by an evolved
NCA (Figure 4) can be classiﬁed into two groups: the ﬁrst group is the
two-dimensional group of organisms (Fig. 4c), where planar morphology was
acquired by evolution. Exemplary classes of locomotion in this group include
the jumper, which is often composed of a single type of muscle voxel. Once a
soft robot sinks down, it use this recoil to bounce up into the air and move for-
ward. The morphology determines the angle of bounce and fall. The Roller is
similar to a square; it moves in one direction by rotating and jumping around
the corners of the square. The Push-Pull is a widely seen locomotion style. A
soft robot pushes itself forward with its hind legs. During this push, it pulls
itself forward, usually by hooking its front legs on the ground. The Slider has
a front foot and a hind foot, and by opening and closing the two feet, it slides
forward across the ﬂoor. The two legs are usually made of a single material.
The Jitter moves by bouncing up and down from its hind legs to back. It has
an elongated form and is often composed of a single type of muscle voxel. The
second group is the three-dimensional group of organisms, as shown in Fig. 4d.
The L-Walker resembles an L-shaped form; it moves by opening and closing
the front and rear legs connected to its pivot point at the bend of the L. The
Crawler has multiple short legs and its legs move forward in concert.

4 Training for Regeneration

We now investigate the ability of the soft robots to regenerate their body parts
to recover from morphological damage. We chose three morphologies from the

10

Severe Damage Recovery in Evolving Soft Robots

(a) 3D soft robot development

(b) Training

(c) 2D Group

(d) 3D Group

Fig. 4: Evolution of soft robots (a) A robots shown at diﬀerent timesteps
during its development. The initial light blue voxel is surrounded by a dotted
line. (b) Fitness over generations for the recurrent/feed forward setup. (c) Time
series of common 2D soft robot behaviors as they move from left to right. From
top to bottom, we refer to them as Jumper, Roller, Pull-Push, Slider, and
Jitter. (d) Common grown 3D robots: Pull-Push, L-Walker, Jumper, Crawler,
and Slider.

previous experiments, which are able to locomote well and are as diverse as
possible: the Biped (feed forward), Tripod (feed forward), and Multiped (recur-
rent). The morphologies of each of these three robots are shown in Fig. 5a and
the locomotion patterns in Fig. 4d. We use two diﬀerent approaches to train
regeneration NCAs, the ﬁrst one is an evolutionary approach as previously
reported in [9]. The second approach is based on gradient-based optimization,
i.e. diﬀerentiable programming.

Severe Damage Recovery in Evolving Soft Robots

11

4.1 Evolutionary Training for Regeneration

In these experiments, which have been ﬁrst reported in our conference paper
[9], we damage the morphologies such that one side of the robot was completely
removed (Fig. 5a). In the left side of these damaged morphologies, the cell
states were set to empty and the maturation alpha values were set to zero. For
the recurrent network, the memory of LSTM units in each cell were also reset
to zero.

4.1.1 Network architecture and training method

We initially attempted regeneration using the original NCAs of these three
robots but regeneration failed and locomotion was not recovered. Therefore,
we evolved another NCA, where the sole purpose was to regrow a damaged
morphology. In other words, one NCA grows the initial morphology and the
other NCA is activated once the robot is damaged. Fitness for this second
NCA is determined by the voxel similarity between the original morphology
and the recovered morphology (values in the range of [0, 729]). The maximum
ﬁtness of 9 × 9 × 9 = 729 indicates that the regrown morphology is identical
to the original morphology. We evolve these soft robots, which are allowed to
grow for 10 steps, for 1, 000 generations with a population size of 1, 000. The
next generation is again selected from the top 20%.

Morphology (Network)
Biped (feed forward)
Tripod (feed forward)
Multiped (recurrent)

Similarity
98% (718/729)
99% (728/729)
91% (667/729)

Original Damaged
27.2(67%)
40.4
1.63(3.6%)
44.5
5.36(12%)
42.7

Regrown
35.1(86%)
20.3(45%)
9.6(22%)

Table 1: Morphology similarity and locomotion recovery rate.

Locomotion

4.1.2 Morphology similarity and locomotion recovery

For all three morphologies, we trained both feed forward and recurrent NCAs.
The best performing network types for damage recovery were consistent with
the original network type for locomotion in all morphologies (biped = feed
forward, tripod = feed forward, multiped = recurrent ). Training for the Biped
(feed forward), Tripod (feed forward) and Multiped (recurrent) takes 45, 23,
and 100 hours, respectively, using a single CPU core (2.7 GHz Intel Xeon
E5). The results with the highest performing network type are summarised in
Table 1 and damaged morphologies for each of the robots are shown in Fig. 5a.
The results indicate that the Multiped was the hardest to reproduce, followed
by the Biped and then the Tripod. The Tripod had a higher similarity than the
other morphologies and the NCA almost completely reproduced the original
morphology with the exception of one cell. We hypothesise that regeneration
for the Tripod is easier because it only requires the regrowth of one leg, a
simple rod-like shape with only a few cells.

12

Severe Damage Recovery in Evolving Soft Robots

For comparison, we then measured the locomotion of the original, dam-
aged, and regrown morphology with an evaluation time of 0.5s for 10 cycles in
Voxelyze. The ratio of regrowth and travel distance to the original morphology
are shown in Table 1 and its locomotion in Fig. 9. The damaged Biped main-
tained 67% of its original locomotion ability; it replicated a similar locomotion
pattern to the one observed in the L-Walker. As the Tripod lost one of its three
legs, it was incapable of successful locomotion. Furthermore, the Multiped lost
all locomotion – the robot simply collapsed at the starting position.

These results suggest that the location of the damage is important in deter-
mining how much the robot loses in terms of locomotion performance. For
instance, in the case of the Biped, the left hand side and right hand side are
symmetrical. This means that when the left hand side was removed, the right
hand side was able to locomote in the same, almost unaﬀected way. Therefore,
despite having the lowest similarity value between the initial and regrown mor-
phologies, there is little loss in performance. In contrast, the Tripod regained
less than half the locomotion of the original morphology, despite regaining its
original morphology almost completely. It would appear that the one voxel it
is unable to regenerate is necessary to prevent the robot from spinning and
thus from moving forward.

Using this method of training two neural networks via an evolutionary
approach shows potential for soft robotic regeneration with NCAs. However,
only one type of damage scenario is investigated, and even in this case our
method is not successful at recovering the functionality of the robot. Therefore,
in the next section, we investigate a new method of training one neural network
for growth and recovery through gradient-based optimization.

4.2 Regeneration through diﬀerentiable programming

In the gradient-based training, one NCA is trained to grow a particular target
structure (one of the three evolved robot morphologies) while being resilient
to damage.

4.2.1 Network architecture and training method

Here we use a similar three-dimensional convolutional network than the one
introduced by Sudhakaran et al.
[10]. This network (Fig. 2b) is an extension
of the 3D network proposed by Mordvintsev et al. [11], which has been shown
to exhibit robust regeneration 2D patterns against various types of damage.
The input of the NCA ﬁrst passes through a perception net implemented with
a 3D convolutional layer with kernel size=3, stride = 1 and output
channels = cell state the NCA * 3. Next, its output passes through
three linear 3D convolutional layers with kernel size=1, stride = 1 of
the NCA update network. Following [10, 11], we apply stochastic updates, i.e.
per-cell dropout. An “alive mask” is implemented by multiplying the MaxPool
layer of the update by a Boolean ﬁlter, which is 1 if the value of the living
channel is < 0.1, and 0 otherwise. All network weights are initialization with
standard normal = 0.1 and mean = 0.0.

Severe Damage Recovery in Evolving Soft Robots

13

(a) Original, damaged and regrown

(b) Biped regereration

(c) Tripod regereration

(d) Multiped regereration

(e) Fitness function of each morphology

Fig. 5: Soft robots evolved for regeneration (a) Original, damaged, and
regrown morphology. (b)-(d) Soft robot development after damage shown at
diﬀerent timesteps. (e) Training performance for recurrent/feed forward setup.

The additive update rule is inspired by residual networks [50], and helps
with stabilizing the gradient during training. The update rule can be eﬃciently
implemented using a single 3D convolution with a ﬁlter size of 3×3×3 followed
by a non-linearity and any number of 3D convolutions with 1 × 1 × 1 ﬁlter
sizes, followed by non-linearities. A ﬁnal linear 1 × 1 × 1 convolution maps back
to the NCA hidden state size. In our experiments we follow [10] and use two
1 × 1 × 1 convolutions with 64 channels each, and ReLU non-linearities [51].
During training the NCA is run for a random number of steps, T between
48 and 64, after which the loss is calculated. We use the loss from [10], which

14

Severe Damage Recovery in Evolving Soft Robots

contains two parts,

(cid:88)

L =

i

1
2

CE(yi, ti) + IOU(yi, ti)

(2)

where yi = softmax(hi
T [: k]) is the softmax of the ﬁrst k channels of the ﬁnal
cell state, CE is the categorical cross entropy loss, where ti ∈ {1, ..., k} are the
cell type targets. In practice we split the cross entropy loss of empty voxels
and the cross entropy loss of the rest of voxels. This split helps with training
stability, as the loss for non-empty voxels does not overshadow the loss for
the empty voxels. IOU is the Intersection Over Union loss which measures the
absolute distance between non empty voxels and empty voxels. Given the loss
the gradients are computed with back-propagation using automatic diﬀeren-
tiation and the NCA parameters are trained with a gradient-based approach,
using the Adam optimizer [52].

In this case the NCA quickly learns to grow the target structure, but is
not stable when run for more time steps than it was trained for and can only
recover from limited damage. In order to learn a NCA that is stable over
thousands of time steps and capable of regenerating from severe damage we
modify the training, following the approach outlined in [11].

Algorithm 1 NCA pool training with damage

pool ← init()
while not converged do

idx, seeds ← sample(pool, 5)
losses ← L(seeds)
seeds ← sort(seeds, losses)
seeds[0] = initial
seeds[−2 :] = damage(seeds[−2 :])
T ∼ U[48, 64]
seeds ← NCA(seeds, T )
loss ← (cid:80) L(seeds)
optimize(NCA, loss)
pool[idx] ← seeds

(cid:46) Sort seeds according to loss descending
(cid:46) Replace worst seed with initial seed
(cid:46) Apply damage to two best seeds

(cid:46) Run the NCA for T steps

(cid:46) Train the NCA with gradient descent
(cid:46) Replace samples from pool with new seeds

end while

Instead of always training from the same seed, at each training step we
sample a batch of 5 random seeds from a pool of size 32. Of the 5 sampled
seeds, we replace the one with the highest loss with a single cell seed, and
apply damage to the two seeds with the lowest losses. We damage the seed by
setting all the cell states to zero in a sphere with radius three, except the ﬁrst
channel, which corresponds to the empty block, which we set to one. After the
training step we replace the sampled seeds in the pool with the output of the

Severe Damage Recovery in Evolving Soft Robots

15

Morphology(State)
Biped(Damage)
Biped(Regrown)
Tripod(Damage)
Tripod(Regrown)
Multiped(Damage)
Multiped(Regrown)

Left
67%
98%
5%
100%
12%
98%

Right
17%
98%
14%
100%
3%
43%

Top
9%
100%
22%
100%
10%
25%

Bottom Front
1%
103%
22%
100%
3%
95%

23%
94%
16%
100%
15%
83%

Back
1%
93%
12%
100%
10%
97%

Table 2: Recovery of locomotion ability of the regrown morphologies after
various types of damage (left, right, top, bottom, front, back).

NCA at the last step, ht. The pool is initialized with 32 single cell seeds. See
Algorithm 1 for details.

4.2.2 Morphology similarity and locomotion recovery

We performed 20,000 steps of learning unless the loss function reaches 0. Train-
ing for 8903, 8066, and 20000 steps for Biped, Tripod, and Multiped takes 15,
12, and 48 minutes using a GeForce GTX 1650 (TU117), respectively. The
training curves for each morphology are shown in Fig. 6, displaying a rapid
decrease in the loss.

Fig. 6: Training curves for gradient-based optimization of 3D NCAs.
From left to right: Biped, Tripod, and Multiped. The loss decreases rapidly
for all three morphologies.

We ﬁrst examined whether the trained network is able to grow the original
target morphology from a single cell. The ﬁrst single soft & passive cell is
placed at position (3, 3, 3) with alive channel = 1 and 10 hidden states with
random numbers 0 to 1. All other cells are empty voxels with alive channel and
10 hidden states set to 0. After running the NCA for 60 steps from the initial
condition, we conﬁrmed all the grown morphologies completely matched the
original morphologies (Fig. 7).

Next, we evaluated the system’s ability for morphological regeneration and
locomotion recovery. Based on the three spatial axes deﬁned in Fig. 2, Left-
Right, Top-Bottom, and Back-Front, six types of cuts were made to each of
the three soft robots. The cell types were set to empty and the active channel
and hidden states to 0 for three of the seven columns of each axis. Starting
from one of the damaged morphologies, the NCA was run for 200 steps for

16

Severe Damage Recovery in Evolving Soft Robots

Fig. 7: Growing soft robots from a single cell with gradient-based
trained NCAs.

Fig. 8: Regeneration against various damage with NCAs trained
by gradient-based optmization. Deﬁnition of damage types are shown in
the upper left panel. The other panels show the regeneration during diﬀerent
timesteps for diﬀerent types of damage for the Tripod (left & right damage),
Biped (left & top damge), and Multiped (left & front damage).

the Biped / Multiped and 150 steps for the Tripod to see if it can regrow the
original morphology (Fig. 8).

The similarities of the regrown morphologies to the original morphologies
are shown in Table 3. The Tripod was easier to regenerate than the other two
morphologies and completely regrew the original morphology for all types of
damage. During regrowth, the morphology quickly matched (within 10 steps)

Severe Damage Recovery in Evolving Soft Robots

17

Morphology(Network)
Biped(CNN)
Tripod (CNN)
Multiped (CNN)

Top

Back
Bottom Front
Right
Left
99.1% 99.4% 99.1%
99.4% 99.7% 100%
100%
100%
100%
100%
100%
100%
99.7% 99.1% 97.9% 98.2% 97.9% 98.8%

Table 3: Similarities of the morphologies that were regrown after diﬀerent
types of damage (e.g. left, right, top, bottom, front, back) to the original
morphologies.

the original one almost perfectly, but required 150 developmental steps for
a perfect match. The Biped only achieved 100% recovery for the top dam-
age. However, it did not improve the similarity for the other types of damage
even when run for more than 200 steps. The Mutiped did not achieve 100%
regeneration for any damage.

We measured the locomotion of original, damaged, and regrown morphol-
ogy with an evaluation time of 0.5s for 10 cycles in VoxCad. The travel distance
for original morphology is shown in Table 1, and the rate of locomotion for
damaged and regrown morphology is shown in Table 2. Biped’s left damage
remained at 67% as in the evolutionary calculation (Table 1), while other
damage critically lost its locomotion ability. For the Tripod, all damaged mor-
phologies fatally lost their movement ability but regained it 100%, completely
regrowing their original morphology after all types of damage. In Multiped,
the soft robot regained more than 80% of its mobility, except for Right and
Top damage, where the soft robot collapsed in the middle due to the place-
ment of a small number of cells and could not move any further, resulting in
a small mobility value.

4.2.3 Comparing regeneration through evolutionary vs.

diﬀerentiable programming

The similarities of the regrown morphologies to the original morphologies after
Left damage were higher for all three morphologies for the diﬀerentiable train-
ing compared to the evolutionary training (Biped 99.4% compared to 98%,
Tripod 100% compared to 99%, and Multiped 99.7% compared to 91%). The
results are summarised in Table 1 and 3. The NCAs produced by the diﬀer-
entiable training show overall high robustness against all six damage types,
reaching a similarity of more than 95% for all three morphologies (Table 3).

Fig. 9 shows the locomotion of the original morphology, regrown mor-
phology by evolutionary training, and regrown morphology by diﬀerentiable
programming under the left damage condition. For all three soft robots, the
regrown morphologies obtained through diﬀerentiable programming travelled
further than that obtained by evolutionary optimization.

It is important to note that it is diﬃcult to fairly compare these two diﬀer-
ent optimization approaches. Both methods not only use diﬀerent optimization
algorithms but also diﬀerent neural network architectures and hyperparam-
eters. However, while the eﬃciency of our genetic algorithm can likely be
improved, the results reported here mirror similar results from previous

18

Severe Damage Recovery in Evolving Soft Robots

Fig. 9: Recovery of locomotion using evolutionary algorithm and dif-
ferentiable programming. From left to right: Biped, Tripod, and Multipod.
The regrown morphologies by evolutionary training are shown transparent,
while the regrown morphologies by diﬀerentiable programming are shown
transparent with a frame around them.

research: artiﬁcial evolution often struggles when tasked to perform supervised
learning [53] and even learning to grow simple 2D structures can be chal-
lenging [54]. In cases where a target structure is given, supervised learning
through gradient-based optimization has shown to be the eﬃcient method of
choice, and has allowed signiﬁcantly more complex 2D [11] and 3D patterns
[10] to be grown through neural networks than have previously been possible.
On the other hand, evolutionary algorithms have shown to be better suited
for open-ended search [55] (instead of training towards a target) and the cre-
ative discovery of artefacts and behaviours [56]. The approach presented in
this paper thus combines the advantages of both methods and we hope will
spur the development of more of such hybrid methods.

5 Discussion and Future Work

The growth and regeneration abilities of complex multicellular tissues are spe-
ciﬁc characteristics of biological systems, allowing ﬂexible adaptation to their
environments. In this paper, we developed a new method for simulated soft
robots to regenerate from damage based on neural cellular automata. The
approach ﬁrst evolves various growing soft robots and in a second steps trains
them to being able to regenerate the original morphology after diﬀerent types
of damage through diﬀerentiable programming. Although complete regrowth
to the original morphology was not always achieved, all regrown soft robots
regained more than 80% of their travel distance after all types of damage,
except for Right and Top damage to the Multiped. These results suggest that
growth can increase the evolutionary diversity of soft robot morphologies and
that regeneration can provide resilience to damage.

While the locomotion and regeneration tasks in this paper are relatively
simple, they open up exciting future directions such as object manipula-
tion, adaptation to environmental changes, task-based transformation, and
self-replication.

Severe Damage Recovery in Evolving Soft Robots

19

Recently, soft robots designed using computer simulations have been recre-
ated in real robots using a variety of materials [57]. With the development of
material science, a variety of soft robots that can change their shape have also
been created [58] and hybrid robots with dynamic plasticity are being fabri-
cated [36]. In the future, it may be possible to create hybrid robots with living
tissue that can grow spontaneously and recover functionality after severe dam-
age, by building on the proposed approach. Because the method presented
in this paper only relies on the local communication of cells, it could be a
promising avenue to explore for the next generation of these hybrid robots.

6 Acknowledgements

This work was supported by the Tobitate! (Leap for Tomorrow) Young
Ambassador Program, a DFF-Research Project1 grant (9131- 00042B), and
KH’s Academist supporters1(Takaaki Aoki, Hirohito M. Kondo, Takeshi Oura,
Yusuke Kajimoto,Ryuta Aoki).

References

[1] Carlson, B.M.: Principles of Regenerative Biology. Elsevier/Academic

Press, New York (2011)

[2] Wade, G.L., Westerﬁeld, R.R.: Basic principles of pruning woody plants

(2009)

[3] Davis, J.M., Estes, E.A.: Spacing and pruning aﬀect growth, yield,
and economic returns of staked fresh-market tomatoes. Journal of the
American Society for Horticultural Science 118(6), 719–725 (1993)

[4] Hartmann, H.T., Kester, D.E., et al.: Plant Propagation: Principles and

Practices. Prentice-Hall., New Jersey (1975)

[5] Vieira, W.A., Wells, K.M., McCusker, C.D.: Advancements to the axolotl
model for regeneration and aging. Gerontology 66(3), 212–222 (2020)

[6] Levin, M., Selberg, J., Rolandi, M.: Endogenous bioelectrics in devel-
opment, cancer, and regeneration: drugs and bioelectronic devices as
electroceuticals for regenerative medicine. Iscience 22, 519–533 (2019)

[7] Vogg, M.C., Galliot, B., Tsiairis, C.D.: Model systems for regeneration:

Hydra. Development 146(21), 177212 (2019)

[8] Fausto, N., Campbell, J.S., Riehle, K.J.: Liver regeneration. Hepatology

43(S1), 45–53 (2006)

1https://academist-cf.com/projects/119?lang=en

20

Severe Damage Recovery in Evolving Soft Robots

[9] Horibe, K., Walker, K., Risi, S.: Regenerating soft robots through neural

cellular automata. In: EuroGP, pp. 36–50 (2021)

[10] Sudhakaran, S., Grbic, D., Li, S., Katona, A., Najarro, E., Glanois, C.,
Risi, S.: Growing 3d artefacts and functional machines with neural cellular
automata. arXiv preprint arXiv:2103.08737 (2021)

[11] Mordvintsev, A., Randazzo, E., Niklasson, E., Levin, M.: Growing neural
cellular automata. Distill (2020). https://doi.org/10.23915/distill.00023.
https://distill.pub/2020/growing-ca

[12] Sims, K.: Evolving 3d morphology and behavior by competition. Artiﬁcial

life 1(4), 353–372 (1994)

[13] Sims, K.: Evolving virtual creatures. In: Proceedings of the 21st Annual
Conference on Computer Graphics and Interactive Techniques, pp. 15–22
(1994)

[14] Dellaert, F., Beer, R.D.: Co-evolving body and brain in autonomous
agents using a developmental model. Cleveland, OH 44106 (1994)

[15] Eggenberger, P., et al.: Evolving morphologies of simulated 3d organ-
isms based on diﬀerential gene expression. In: Proceedings of the Fourth
European Conference on Artiﬁcial Life, pp. 205–213 (1997). Citeseer

[16] Ostergaard, E.H., Lund, H.H.: Evolving control for modular robotic units.
In: Proceedings 2003 IEEE International Symposium on Computational
Intelligence in Robotics and Automation. Computational Intelligence in
Robotics and Automation for the New Millennium (Cat. No. 03EX694),
vol. 2, pp. 886–892 (2003). IEEE

[17] Lipson, H., Pollack, J.B.: Automatic design and manufacture of robotic

lifeforms. Nature 406(6799), 974–978 (2000)

[18] Risi, S., Cellucci, D., Lipson, H.: Ribosomal robots: Evolved designs
inspired by protein folding. In: Proceedings of the 15th Annual Conference
on Genetic and Evolutionary Computation, pp. 263–270 (2013)

[19] Stanley, K.O.: Compositional pattern producing networks: A novel
abstraction of development. Genetic programming and evolvable machines
8(2), 131–162 (2007)

[20] Cheney, N., MacCurdy, R., Clune, J., Lipson, H.: Unshackling evolution:
evolving soft robots with multiple materials and a powerful generative
encoding. ACM SIGEVOlution 7(1), 11–23 (2014)

[21] Cheney, N., Bongard, J., Lipson, H.: Evolving soft robots in tight

Severe Damage Recovery in Evolving Soft Robots

21

spaces. In: Proceedings of the 2015 Annual Conference on Genetic and
Evolutionary Computation, pp. 935–942 (2015)

[22] Cheney, N., Bongard, J., SunSpiral, V., Lipson, H.: Scalable co-
optimization of morphology and control in embodied machines. Journal
of The Royal Society Interface 15(143), 20170937 (2018)

[23] Auerbach, J.E., Bongard, J.C.: Environmental inﬂuence on the evolution
of morphological complexity in machines. PLoS computational biology
10(1), 1003399 (2014)

[24] Auerbach, J.E., Bongard, J.C.: Evolving cppns to grow three-dimensional
physical structures. In: Proceedings of the 12th Annual Conference on
Genetic and Evolutionary Computation, pp. 627–634 (2010)

[25] Urzelai, J., Floreano, D.: Evolutionary robotics: coping with environ-
mental change. In: Genetic and Evolutionary Computation Conference
(GECCO’2000) (2000)

[26] Nolﬁ, S., Floreano, D.: Learning and evolution. Autonomous robots 7(1),

89–113 (1999)

[27] Chatzilygeroudis, K., Vassiliades, V., Mouret, J.-B.: Reset-free trial-and-
error learning for robot damage recovery. Robotics and Autonomous
Systems 100, 236–250 (2018)

[28] Cully, A., Clune, J., Tarapore, D., Mouret, J.-B.: Robots that can adapt

like animals. Nature 521(7553), 503–507 (2015)

[29] Kano, T., Sato, E., Ono, T., Aonuma, H., Matsuzaka, Y., Ishiguro, A.:
A brittle star-like robot capable of immediately adapting to unexpected
physical damage. Royal Society open science 4(12), 171200 (2017)

[30] Najarro, E., Risi, S.: Meta-learning through hebbian plasticity in random

networks. arXiv preprint arXiv:2007.02686 (2020)

[31] Kriegman, S., Cheney, N., Corucci, F., Bongard, J.C.: Interoceptive
robustness through environment-mediated morphological development.
In: Proceedings of the Genetic and Evolutionary Computation Confer-
ence, pp. 109–116 (2018)

[32] Walker, K., Hauser, H.: Evolution of morphology through sculpting in a
voxel based robot. In: ALIFE 2021: The 2021 Conference on Artiﬁcial Life
(2021). MIT Press

[33] Shah, D.S., Powers, J.P., Tilton, L.G., Kriegman, S., Bongard, J., Kramer-
Bottiglio, R.: A soft robot that adapts to environments through shape

22

Severe Damage Recovery in Evolving Soft Robots

change. Nature Machine Intelligence 3(1), 51–59 (2021)

[34] Shah, D., Yang, B., Kriegman, S., Levin, M., Bongard, J., Kramer-
Bottiglio, R.: Shape changing robots: bioinspiration, simulation, and
physical realization. Advanced Materials 33(19), 2002882 (2021)

[35] Kriegman, S., Walker, S., Shah, D., Levin, M., Kramer-Bottiglio, R.,
Bongard, J.: Automated shapeshifting for function recovery in damaged
robots. arXiv preprint arXiv:1905.09264 (2019)

[36] Kriegman, S., Blackiston, D., Levin, M., Bongard, J.: A scalable pipeline
for designing reconﬁgurable organisms. Proceedings of the National
Academy of Sciences 117(4), 1853–1859 (2020)

[37] Neumann, J.v.: Theory of self-reproducing automata. Edited by Arthur

W. Burks (1966)

[38] Miller, J.F.: Evolving a self-repairing, self-regulating, french ﬂag organ-
ism. In: Genetic and Evolutionary Computation Conference, pp. 129–139
(2004). Springer

[39] Wulﬀ, N., Hertz, J.A.: Learning cellular automaton dynamics with neural
networks. Advances in Neural Information Processing Systems 5 (1992)

[40] Gilpin, W.: Cellular automata as convolutional neural networks. Physical

Review E 100(3), 032402 (2019)

[41] Hiller, J.D., Lipson, H.: Multi material topological optimization of struc-
tures and mechanisms. In: Proceedings of the 11th Annual Conference on
Genetic and Evolutionary Computation, pp. 1521–1528 (2009)

[42] Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., Salakhutdinov,
R.: Dropout: a simple way to prevent neural networks from overﬁtting.
The journal of machine learning research 15(1), 1929–1958 (2014)

[43] Hochreiter, S.: Long Short-Term Memory. Neural computation 1780,

1735–1780 (1997)

[44] Levin, M., Pezzulo, G., Finkelstein, J.M.: Endogenous Bioelectric Signal-
ing Networks: Exploiting Voltage Gradients for Control of Growth and
Form. Annual Review of Biomedical Engineering 19, 353–387 (2017).
https://doi.org/10.1146/annurev-bioeng-071114-040647

[45] McLaughlin, K.A., Levin, M.: Bioelectric signaling in regeneration: Mech-
anisms of ionic controls of growth and form. Developmental Biology
433(2), 177–189 (2018). https://doi.org/10.1016/j.ydbio.2017.08.032

[46] Holland, J.H.: Genetic Algorithms. Scientiﬁc American 267(1), 66–73

Severe Damage Recovery in Evolving Soft Robots

23

(1992)

[47] Eiben, A.E., Smith, J.E.: Introduction to Evolutionary Computing. Nat-
ural Computing Series. Springer, Berlin, Heidelberg (2003). https://doi.
org/10.1007/978-3-662-05094-1

[48] Such, F.P., Madhavan, V., Conti, E., Lehman, J., Stanley, K.O., Clune, J.:
Deep Neuroevolution: Genetic Algorithms Are a Competitive Alternative
for Training Deep Neural Networks for Reinforcement Learning. arXiv
(2017) arXiv:1712.06567

[49] Risi, S., Stanley, K.O.: Deep neuroevolution of recurrent and discrete
world models. In: Proceedings of the Genetic and Evolutionary Compu-
tation Conference, pp. 456–462 (2019)

[50] He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image
recognition. In: Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, pp. 770–778 (2016)

[51] Nair, V., Hinton, G.E.: Rectiﬁed linear units improve restricted boltzmann

machines. In: Icml (2010)

[52] Kingma, D.P., Ba, J.: Adam: A method for stochastic optimization. arXiv

preprint arXiv:1412.6980 (2014)

[53] Woolley, B.G., Stanley, K.O.: On the deleterious eﬀects of a priori objec-
tives on evolution and representation. In: Proceedings of the 13th Annual
Conference on Genetic and Evolutionary Computation, pp. 957–964
(2011)

[54] Nichele, S., Ose, M.B., Risi, S., Tufte, G.: Ca-neat: evolved compositional
pattern producing networks for cellular automata morphogenesis and
replication. IEEE Transactions on Cognitive and Developmental Systems
10(3), 687–700 (2017)

[55] Pugh, J.K., Soros, L.B., Stanley, K.O.: Quality diversity: A new frontier
for evolutionary computation. Frontiers in Robotics and AI 3, 40 (2016)

[56] Lehman, J., Clune, J., Misevic, D., Adami, C., Altenberg, L., Beaulieu, J.,
Bentley, P.J., Bernard, S., Beslon, G., Bryson, D.M., et al.: The surprising
creativity of digital evolution: A collection of anecdotes from the evolu-
tionary computation and artiﬁcial life research communities. Artiﬁcial life
26(2), 274–306 (2020)

[57] Howison, T., Hauser, S., Hughes, J., Iida, F.: Reality-assisted evolution of
soft robots through large-scale physical experimentation: a review. arXiv
(2020) arXiv:2009.13960

24

Severe Damage Recovery in Evolving Soft Robots

[58] El-Atab, N., Mishra, R.B., Al-Modaf, F., Joharji, L., Alsharif, A.A., Alam-
oudi, H., Diaz, M., Qaiser, N., Hussain, M.M.: Soft Actuators for Soft
Robotic Applications: A Review. Advanced Intelligent Systems 2(10),
2000128 (2020). https://doi.org/10.1002/aisy.202000128

