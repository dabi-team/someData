2
2
0
2

b
e
F
6

]

C
S
.
s
c
[

2
v
8
6
4
2
1
.
1
0
2
2
:
v
i
X
r
a

SYMBOLIC-NUMERIC INTEGRATION OF UNIVARIATE
EXPRESSIONS BASED ON SPARSE REGRESSION

A PREPRINT

Shahriar Iravanian∗
Emory University

Carl Julius Martensen
Otto-von-Guericke University

Alessandro Cheli
University of Pisa

Shashi Gowda
Massachusetts Institute of Technology

Anand Jain
Julia Computing

Yingbo Ma
Julia Computing

Chris Rackauckas
Massachusetts Institute of Technology

February 8, 2022

ABSTRACT

Most computer algebra systems (CAS) support symbolic integration as core functionality. The ma-
jority of the integration packages use a combination of heuristic algebraic and rule-based (integration
table) methods. In this paper, we present a hybrid (symbolic-numeric) methodology to calculate the
indeﬁnite integrals of univariate expressions. The primary motivation for this work is to add sym-
bolic integration functionality to a modern CAS (the symbolic manipulation packages of SciML, the
Scientiﬁc Machine Learning ecosystem of the Julia programming language), which is mainly de-
signed toward numerical and machine learning applications and has a different set of features than
traditional CAS. The symbolic part of our method is based on the combination of candidate terms
generation (borrowed from the Homotopy operators theory) with rule-based expression transforma-
tions provided by the underlying CAS. The numeric part is based on sparse-regression, a component
of Sparse Identiﬁcation of Nonlinear Dynamics (SINDy) technique. We show that this system can
solve a large variety of common integration problems using only a few dozen basic integration rules.

1 Introduction

Symbolic integration is a core competency of most Computer Algebra Systems (CAS) and has numerous applica-
tions [1, 2, 3]. Since the advent of symbolic integration software in the 1960s [4, 5], the majority of the integration
packages fall on a spectrum between algebraic methods - based on a combination of heuristics such as derivative-
divide and integration-by-part methods to the Risch algorithm - and rule-based methods, incorporating thousands of
speciﬁc integration rules (e.g., RUBI)[6, 7, 8]. In this paper, we develop a symbolic-numeric (hybrid) integration
method, which is closer in spirit to the heuristic methods but takes a detour in numerical computation to simplify the
intermediate steps.

JuliaSymbolics is a subset organization of SciML (an open source organization maintaining a collection of hundreds
of scientiﬁc computing packages for the Julia programming language). Historically, SciML began as a group of
ordinary differential equation (ODE) solvers [9]. Symbolic computation was added as an Embedded Domain Speciﬁc
Language (eDSL) to ease the deﬁnition of ODE systems and to aid with automatic calculation of Jacobian and Hessian
of such systems. With the expansion of the SciML ecosystem, the purely symbolic routines were decoupled from the
ODE solvers and were collected under JuliaSymbolics [10]. Considering its history and origin, JuliaSymbolics is
geared toward symbolic differentiation and numerical integration but lacks direct symbolic integration capabilities.

∗shahriar.iravanian@emoryhealthcare.org

 
 
 
 
 
 
IRAVANIAN ET AL. SYMBOLIC-NUMERIC INTEGRATION - FEBRUARY 8, 2022

Furthermore, SciML has grown to cover recent advances in scientiﬁc machine learning. As part of our method,
we utilize one of the these new packages (DataDrivenDiffEq.jl) that implements data-driven differential equation
structural estimation and identiﬁcation [11].

SymbolicNumericIntegration.jl is an attempt to build a symbolic integration package by combining the symbolic
manipulation and automatic differentiation capabilities of JuliaSymbolics with numerical routines such as sparse
regression provided by DataDrivenDiffEq.jl.

2 The Overview of the Method

This section informally introduces the symbolic-numeric integration algorithm by a simple example. We want to ﬁnd
C = x sin x. We can integrate f using the method of indeterminate coefﬁcients. The main

f (x) dx, where f : C

idea is to write the solution, i.e., S =
R

→

x sin x dx, as a sum of multiple possible terms with unknown coefﬁcients,

R

S =

qiθi(x) ,

(1)

∈

C, for i = 1

C, is the set of rea-
where qi
sonable candidate terms (ansatz). For our example, a reasonable set of terms is T =
.
x, sin x, cos x, x sin x, x cos x
}
Of course, we need a better method to ﬁnd T than saying it should be a reasonable set! We will discuss this problem
is details later (Section 3.2), but for now assume that an oracle provides T . We have

, are the unknown coefﬁcients and T =

, where θi : C

θi(x)
}

· · · |

→

T

{

{

|

i
X

Differentiating with respect to x,

S = q1x + q2 sin x + q3 cos x + q4x sin x + q5x cos x .

By deﬁnition, S =

R

′

S

= q1 + (q4 −

q5x sin x + q4x cos x .
f dx; therefore, S′ = f = x sin x. We obtain the following linear system,

q3) sin x + (q2 + q5) cos x

−

q1 = 0
q3 = 0
q4 −
q2 + q5 = 0
q5 = 1

−
q4 = 0

The solution to the linear the system is q5 =

1, q2 = 1, and q1 = q3 = q4 = 0. Therefore,

−

As it should.

S =

x sin x dx = cos x

Z

x cos x .

−

(2)

(3)

(4)

(5)

Note that the preceding calculations were essentially all symbolic. However, numerical computation becomes nec-
essary to avoid relying on JuliaSymbolics to convert expressions into unique canonical forms.
Identities like
sin2 x + cos2 x = 1 may be correctly applied in this case, but in general, according to Richardson’s theorem, the
problem of ﬁnding canonical forms of transcendental expressions is undecided [12]. Another reason for using nu-
merical computation is that the list of candidates may not be (and usually is not) linearly independent. Finding a
linearly-independent subset of a set of expressions is facilitated using numerical methods (Section 4.3).

3 Symbolic Computation

3.1 The Main Integration Algorithm

The main symbolic-numeric integration algorithm is summarized in Algorithm 1. Let x be the independent variable.
C, is a univariate expression of x.
For this paper, we assume that the input function to be integrated, f : C
Additionally, we assume that f is well deﬁned in a closed subset of the complex plane with only isolated poles.

→

The candidates generation algorithm (Section 3.2) produces a list of generator expressions, G0, G1, G2,
(by apply-
C, and θk does not have a constant leading
k akθk(x), ak
ing Equations 12, 13 and 15), where Gi =
∈
Ti+1. We can ignore
coefﬁcient. Each Gi is converted to a set of candidates, Ti =
the constant leading coefﬁcients because the ﬁnal coefﬁcients are calculated by the numerical part of the algorithm.
Therefore, we can express θks as equivalence classes of expressions where f (x)
g(x) iff f /g is a non-zero constant.
Using this convention, we may write (sin x)′ = cos x and (cos x)′ = sin x.

. According to Eq. 15, Ti

C, θk : C

· · ·

P

→

θk

∼

⊂

}

{

2

IRAVANIAN ET AL. SYMBOLIC-NUMERIC INTEGRATION - FEBRUARY 8, 2022

1 do

Algorithm 1 Symbolic-Numeric Integration
Input: A univariate expression f (x) with constant coefﬁcients in C
Input: L, a user-deﬁned parameter that determines the number of generators to try
Output: A symbolic expression y, the antiderivative of f , such that y′ = f
1: for k = 0 . . . L
2: Gk
Tk
3:
y
4:
if y′ is equal to f then
5:
6:
end if
7:
8: end for
9: return no answer

←
←
the anti-derivative of f using Tk {Algorithm 2}

the kth candidate generator {Eqs. 12, 13, and 15}
the candidate terms of Gk

←
return y

−

For each Gi and the corresponding Ti, Algorithm 1 calls Algorithm 2 to ﬁnd the anti-derivative of the input. If there
is an acceptable solution, it returns; otherwise, Algorithm 1 fetches the next generator, Gi+1, and tests the resulting
candidate set, Ti+1. If no solution is found after trying GL−1, it returns with a failure message. L is a parameter
speciﬁed by the user.

}

· · ·

, θn

←
←

θ1, θ2,

bi
←
for j
←
Aij
end for

f (xi) {b is a vector of n elements}

1 . . . n do
a random complex numbers inside the open disk Dd

Algorithm 2 The Numerical part of Symbolic-Numeric Integration
Input: A univariate expression f (x) with constant coefﬁcients in C
Input: A set of candidate terms T =
{
Output: A symbolic expression y, the antiderivative of f , such that y′ = f
1: for i
xi
2:
3: move xi toward the poles of f
4:
5:
6:
7:
8: end for
9: Find R
10: for i
11:
12:
13: end for
14: solve minq
15: y
←
16: return y

}
remove the ith row and column from A
remove the ith row from b

2
2 + λ
k
j qjθj {A uses θ′, but y is based on θ}

1 . . . n do
j(xi) {A is an n-by-n matrix and θ′
θ′

k2 for q (sparse regression)
q

, the set of linearly-dependent rows of A

1, 2, . . . , n

⊂ {
R do

Aq

←

−

∈

b

k

k

P

j is the derivative of θj with respect to x}

Algorithm 2 generates n test points xi in complex plane, where n is the number of the candidates, to create an n-by-n
matrix A and an n-element vector b ﬁlled, respectively, with the values of the derivatives of the candidate terms and
the input function at the test points.

As discussed above, a potential complication at this stage is that the rows of A may be linearly-dependent. We remedy
this problem by ﬁnding the linearly-dependent rows and removing them from A and b (Section 4.3).

Using full-rank A and b, we ﬁnd q such that Aq = b. As is discussed in Section 4.4, we cast the problem as an
optimization task and use sparse regression to calculate q. Finally, we put everything together and generate y =

j qjθj, the candidate anti-derivative of the input.

P
3.2 Candidates Generation

Candidate generation is the core of the Symbolic-Numeric integration algorithm. First, we describe an algorithm for a
subset of expressions amenable to simple treatment and then expand to the general algorithm.

One key observation is that the form of the anti-derivative of some functions is similar to their derivative forms. For
(cos x)′. The underlying reason is that these functions can be deﬁned in term of
example,

cos x dx = sin x =

−

R

3

IRAVANIAN ET AL. SYMBOLIC-NUMERIC INTEGRATION - FEBRUARY 8, 2022

e−x;
the polynomials of the exponential function and its inverse, i.e., f
therefore C[ex, e−x] is closed under differentiation and integration. The functions with this property include the non-
negative integer powers of sin x, cos x, sinh x, cosh x, and ex. Let’s deﬁne

C[ex, e−x], (ex)′ = ex, and (e−x)′ =

−

∈

f (x) = (ex)p1 (sin x)p2 (cos x)p3 (sinh x)p4 (cosh x)p5 ,

(6)
Z+. For these class of functions, we can obtain the candidate terms with repetitive differentiation. For
(T is the set of candidates), differentiate f , and add the resulting

where pk
example, let f (x) = ex sin x. We start with T =
terms to T (ignoring the constant coefﬁcients):

∈

∅

′

−

(7)
⇒
Next, we need to differentiate each term in T that was not previously processed. The ﬁrst term, ex cos x, gives
is the ﬁnal answer, consistent with
back f and the second term is equal to f . Therefore, T =
ex cos x)/2. The main idea is repetitive differentiation of the terms until we run out of

ex cos x, ex sin x
}

ex sin x dx = (ex sin x

ex cos x, ex sin x
}

= ex cos x + ex sin x

T =

{

{

f

.

∈

new terms to process. Essentially, we are generating a closure of the input expression based on differentiation.
R
C[ex, e−x] has a ﬁnite number of candidate terms; therefore, the preceding algorithm always terminates.
Every f
We prove this for functions deﬁned according to Eq. 6. After differentiation, each resulting term is also in the form
of Eq. 6 and p1 remains the same in all of them. In addition, p2 + p3 remain the same (one power of sin x converts
k pk, is a constant.
to cos x or vice versa). Similarly, p4 + p5 is a constant. Therefore, the sum of the powers, p =
Since for each p there are only a ﬁnite number of possible expressions, we run out of new terms in a ﬁnite number of
steps and the algorithm terminates.
In general, most integrands are not in C[ex, e−x] and candidates cannot all be found by just repetitive differentiation;
however, repetitive differentiation is still the backbone of the general algorithm. The essence of candidate generation
is integration by parts,

P

′

uv

dx = uv

−

Z

Z

′

u

v dx

(8)

followed by repetitive differentiation. This process or something equivalent resides at the core of most symbolic
integration packages. However, when applying this algorithm to complex expressions, multiple problems arise. At
each step, there can be more than one possible split of the integrand into u and v′. It is unknown a priori which split
will result in the correct solution. Therefore, we need to explore all possibilities. Doing this naively can generate an
exponential number of candidates. In fact, there is no guarantee that the process even terminates. Realizing that many
intermediate expressions are shared among different paths, we can manage the number of candidates by keeping track
of the intermediate results, similar to how memoization reduces the complexity of recursive algorithms. A top-down
recursive algorithm with memoization usually has an equivalent bottom-up dynamic programming dual. This is the
algorithmic basis of the approach discussed below.

A more systematic way to manage the intermediate expressions generated by repetitive integration by parts is pro-
vided by the continuous homotopy operators, which automate integration by parts and are useful in integrating exact
expressions composed of multiple functions of independent variables and ﬁnding conservation laws in the system of
differential equations [13, 14, 15]. Here, our goal is to borrow some of the machinery of the homotopy operators
methodology to enhance the generation of candidate expressions. We continue with a brief and incomplete discussion
of the homotopy operators technique.
Let u = (u1, u2,
derivatives with respect to x. We deﬁne ui
is deﬁned as

, uN ) be a vector of N dependent variables of x. Let f (u) be a function of u and its partial
kx = ∂kui/∂xk. The total derivative operator

x = ∂ui/∂x and ui

0x = ui, ui

· · ·

xf =

D

∂f
∂x

+

N

M j

j=1
X

k=0
X

uj
(k+1)x

∂f
∂uj
kx

(9)

where M j is the maximum order of the partial derivatives of uj present in f . The key to the homotopy operators
−1
technique is a method to invert
x f =

xf , namely

uf , where

f dx =

D

D

1

N

H

Iuj f



[λu]

dλ
λ

R
uf =

H

λ0 
Z

j=1
X
is the one-dimensional homotopy operator, λ is a dummy integration variable, and the notation X[λu] means replacing
ui with λui, ui
Iuj is deﬁned as

x, and the same for other variables and partial derivatives in X. Moreover,

x with λui





(10)

M j

k−1

Iuj f =

k=1  
X

i=0
X

uj
ix(

−D

x)k−(i+1)

∂f
∂uj
kx

.

!

(11)

4

IRAVANIAN ET AL. SYMBOLIC-NUMERIC INTEGRATION - FEBRUARY 8, 2022

For the proof of these equations, refer to [13, 15]. However, we can make intuitive sense of these equations. Eq 11
has two main roles. First, it replaces ukx (removed by the partial differentiation operator) with u(k−1)x. This action
is similar to integration by part, and, in fact, its proof is based on integration by parts. Second, it performs repetitive
differentiation (by the sub-expression containing the powers of
x), reminiscent of the method discussed above for
functions in C[ex, e−x]. Finally, the deﬁnite integral in Eq 10 on variable λ calculates the coefﬁcients of the candidates.
In this paper, we use sparse regression to ﬁnd the coefﬁcients; therefore, we do not need Eq 10. Our focus is on Eq 11,
but we cannot use it in its current form because the expected integrands are generally not in the form of f (u). The key
is to rewrite the integrand, f (x), is a usable form,

D

f (x) =

N

i
Y

ui(x)ni , where ui(x) = gi(vi(x)) ,

(12)

1),

−

gi(x) is a function that can be easily integrated (see Section 3.3), and ni
then f = u2

1 for u1 = sin(v1) and v1 = x2

1.

Z+. For example, if f (x) = sin2(x2

∈

−

To ﬁnd candidates, we follow the same process as in Eq 11 but customized for expressions conformant to Eq 12.
However, we cannot simply apply Eq 11 because, for a general non-exact expression, M j may not be known or
even bounded. Instead, we unroll the outer summation in Eq 11 to generate an ordered list of candidate generators,
1 , by
G0, G1, G2,
multiplying f by v′
1). Ignoring the constant factors, the second part can be
written as (v′
g(v) dv (remember that
g is chosen to be easy to integrate). Therefore,

· · ·
1)−1∂f /∂u1. Considering that u = g(v), we have

. We generate G0 by integrating each ui in turn. We integrate the ﬁrst factor of f , i.e. un1

1 and split f into u1v′

1 and f /(u1v′

g(v)v′ dx =

uv′ dx =

1/v′

R

R

R

N

G0 =

1 +

gi(v) dv

i=1 (cid:18)
X

Z

−1
1 + v
i

(cid:19)v←vi (cid:18)

∂f
∂ui (cid:19)

.

(13)

1 +

gi(v) dv

, 1 represents the constant of integration. For the term on the right, 1 is not strictly necessary but
In
improves performance by moving terms from Gi>0 to G0. Next, we generate G1, G2,
by repetitive differentiation
similar to Eq 11. In addition, we introduce the powers of x into the results by integration-by-parts, assuming v′ = 1
(cid:1)
R
and v = x in Eq 8,

· · ·

(cid:0)

Putting all together,

f dx =

′
(x)

f dx = xf

Z

Z

′

xf

dx

−

Z

Gi+1 = (1 + x) (1 +

x) Gi .

D

(14)

(15)

Let’s apply the algorithm to f (x) = cot4 x. Decomposing f based on Eq 12, we have u = cot v, v = x, and f = u4.
cot v dv = log(sin v), we get G0 = 1 + log(sin x) + cot3 x + log(sin x) cot3 x, which does not
Considering that
solve the integral. Next, we move to G1 by using Eq 15. This time, we have

R
G1 = 1 + log(sin x) + cot3 x + log(sin x) cot3 x + x + cot x +

· · ·
Feeding f and the candidate set derived from G1 to Algorithm 2, we solve the integral,

(14 terms) ,

(16)

(17)

cot4 x dx = x + cot x

1
3

−

cot3 x .

Z

3.3 Rule-Based Integration

Converting integrands to a form compatible with Eq. 12 and ﬁnding
gi(v) dv in Eq. 13 are facilitated by the term-
rewriting and rule deﬁnition functionality of JuliaSymbolics, which includes a layered architectural design [16] to
decouple term rewriting from other features, and leverages the Julia’s metaprogramming features that have been inher-
ited from other languages in the Lisp family.

R

On the lowest level, TermInterface.jl and Metatheory.jl packages [17, 10, 16] provide an efﬁcient expression rewrit-
ing engine and rule deﬁnition eDSL. Rules are written as regular Julia expressions, thus parsed into S-expressions
and then efﬁciently compiled to callable functions that perform pattern matching and support advanced conditional
selection [18, 10, 16]. JuliaSymbolics also supports the deﬁnition of equational (bidirectional) rewrite rules that can
be executed through an e-graph rewriting engine (adopted from [19]), performing equality saturation.

5

IRAVANIAN ET AL. SYMBOLIC-NUMERIC INTEGRATION - FEBRUARY 8, 2022

We use JuliaSymbolics’s rewriting capabilities to ﬁnd the integrals of g(x). Nearly ﬁfty rules are sufﬁcient to cover
elementary functions (exponential, logarithmic, trigonometric, hyperbolic, and their inverses). The following code
snippets show a few example rules.

@rule integrate(^(~x, -1)) => log(~x)
@rule integrate(^(~x, ~k)) => ^(~x, ~k+1)
@rule integrate(^(sin(~x), ~k::is_neg)) =>

integrate(^(csc(~x), -~k))

@rule integrate(csc(~x)) =>

log(sin(~x)^-1 - cos(~x)*sin(~x)^-1)

4 Numerical Computation

4.1 Simplifying Rational Expressions

Processing rational expressions is one of the ﬁrst steps in symbolic integration with a long and mathematically rich
history (e.g., Hermite’s and Harowitz’ methods). In this paper, to stay with the general theme of our method, we use
a symbolic-numeric (hybrid) algorithm to factor rational expressions based on ﬁnding the roots of the denominator
(which is assumed to be a polynomial). Our method is broadly similar to the one proposed in [20]; however, to ﬁnd
the coefﬁcients of the terms, we use sparse regression method (see below) instead of the method of residues.

4.2 Generating Random Points and Moving Toward the Poles

In line 2 of Algorithm 2, n random number xi (test points) are generated in, Dd, an open disk of radius d centered
at the origin (d is a parameter provided by the user). Therefore, Dd should contain the majority of the unique poles
of f (x). Note that a function like sec(x) has an inﬁnity number of poles and Dd should contain at least one of them.
For the sparse regression to work properly, test points need to be near the poles of f (x). We use a variant of the
Newton-Raphson method to facilitate probing the poles. The standard Newton-Raphson method to ﬁnd zeros of f (x)
f (xj)/f ′(xj), where superscript depicts an order index and not a power. The zero-ﬁnding
is the iteration xj+1 = xj
algorithm can be transformed to a pole-ﬁnding one by changing the minus sign to plus. Therefore,

−

i = xj
xj+1

i +

f (xj
i )
f ′(xj
i )

,

(18)

is used by Algorithm 2 on line 4 to move the test points toward the poles.

4.3 Finding Linearly-Independent Subsets of the Candidates

Matrix A in Algorithm 2 can be rank-deﬁcient. In order to ﬁnd acceptable regression solutions, we need to remove
linearly-dependent columns from A. This task is achieved by using pivoted QR algorithm [21].
In short, A is
decomposed to A = QRPT , where Q is an orthogonal rotation matrix, R is an upper triangular matrix, and P is
the permutation matrix. We ﬁnd the columns linearly dependent on other columns by locating small values on the
diagonal of R (here, small means having an absolute value less than a parameter ǫ, usually taken to be 10−6) and
convert P to the set R, used by Algorithm 2, that lists indices of linearly-dependent columns.

4.4 Sparse Regression

In Algorithm 2, we need to ﬁnd q such that Aq = b. If A is low dimensional, this can be done simply as q = A−1b
(by construction, A is a square matrix). However, this process has the drawback of tending to use all the terms,
even those with numerically small coefﬁcients, which obscures the results and differs from the expected answer to
integration problems. We need a parsimonious (sparse) model such that q has the minimum number of non-zero
elements while still solves Aq = b with an acceptable accuracy. We can achieve this by recasting the problem as an
optimization problem to solve

Aq

min

q k

b

2
2 + λ
k

q
k

k

i ,

−

(19)

for q, where i
In this paper, we use the sequential thresholded
least-squares (STLSQ) algorithm, which is a component of Sparse Identiﬁcation of Nonlinear Dynamics (SINDy)
technique [22] and uses ℓ2-norm. This method has been chosen due to robust behaviour within the scope of many

, and λ is a regularization parameter.

∈ {

1, 2

}

6

IRAVANIAN ET AL. SYMBOLIC-NUMERIC INTEGRATION - FEBRUARY 8, 2022

Table 1: Performance of SymbolicNumericIntegration.jl

Source

Success

Failure Total

Apostle [24]
Hearn
Stewart [25]
Timofeev [26]

123
191
220
136

26
38
77
126

149
229
297
262

problems related to SINDy. However, other sparse regression algorithms, e.g., the least absolute shrinkage and selec-
tion operation (LASSO) using ℓ1-norm [23], Elastic-Net or SR3 are also possible candidates. The sparse regression
code is provided by DataDrivenDiffEq.jl [11].

5 Results

SymbolicNumericIntegration.jl is available at https://github.com/SciML/SymbolicNumericIntegration.jl.
We tested the performance of the software using a collection of test integrals provided by RUBI based on classic
calculus textbooks [8] (Table 1).

We showcase the strengths and weaknesses of the symbolic-numeric integration algorithm with two examples (both
from Apostle [24]). The algorithm can successfully solve the following integral,

log x
x√1 + log x

dx =

2
3

x log x

1 + log x

4
3

−

1 + log x .

(20)

The reason for the success is that we can solve Eq. 20 after substitution u = 1 + log x, which transforms the integral to
1)/√u du. However, the integration algorithm does not explicitly apply the substitution. Instead,
easily solvable
the way that the candidate generation algorithm (section 3.2) creates new candidates implicitly covers the substitution.
On the other hand, the algorithm fails to solve the following simple integral,

(u

−

R

p

p

1
1 + 2 cos x

dx =

log(tan x/2 + √3)

log(tan x/2

−
√3

√3)

−

(21)

Here, there is no simple substitution that can solve the integral. The standard solution is obtained by expressing cos x
in term of the tangent of half-angle and then solve the resulting rational expression. While it is easy to explicitly add
this procedure to the algorithm, it is not an automatic consequence of the candidate generation algorithm based on
homotopy operators. However, the algorithm can solve the following two variants of the problem,

because now the substitution u = 1 + 2 cos x works, and,

sin x
1 + 2 cos x

dx =

1
2

−

log(1 + 2 cos x) ,

Z

since sin x/(1 + cos x) = tan(x/2) and the algorithm can implicitly apply the tangent of half-angle trick.

1
1 + cos x

dx =

sin x
1 + cos x

,

Z

(22)

(23)

6 Conclusions

SymbolicNumericIntegration.jl provides a proof-of-concept that symbolic-numeric integration, based on a combi-
nation of symbolic candidates generation and numerical sparse regression, is able to solve many standard integration
problems. Symbolic integration systems are tightly coupled to the CAS they are build on. JuliaSymbolics has strong
simpliﬁcation, rule-based rewriting, differentiation and code generation capabilities – all useful for the scientiﬁc ma-
chine learning workﬂow it is designed to support. We add the much needed feature of symbolic integration by building
on the same strengths of this CAS. On the other hand, polynomials with rational or integer coefﬁcients (Z[x] and Q[x]),
which are the workhorse of most traditional CAS, currently lack robust algorithmic support. Therefore, SymbolicNu-
mericIntegration.jl employs the strengths of JuliaSymbolics, as used in Eqs. 12, 13, and 15, and covers for its
shortcomings by using numerical methods. We believe that the features of strong auto-differentiation and numeri-
cal routines combined with a relatively weak classic symbolic algebra are not unique to SciML ecosystem and are
shared by many recent systems gearing toward machine learning and expect that the symbolic-numeric methodology
developed in this paper can be applicable to these other systems.

7

Z

Z

IRAVANIAN ET AL. SYMBOLIC-NUMERIC INTEGRATION - FEBRUARY 8, 2022

Acknowledgements

This material is based upon work supported by the National Science Foundation under grant no. OAC-1835443,
grant no. SII-2029670, grant no. ECCS-2029670, grant no. OAC-2103804, and grant no. PHY-2021825. We also
gratefully acknowledge the U.S. Agency for International Development through Penn State for grant no. S002283-
USAID. The information, data, or work presented herein was funded in part by the Advanced Research Projects
Agency-Energy (ARPA-E), U.S. Department of Energy, under Award Number DE-AR0001211 and DE-AR0001222.
We also gratefully acknowledge the U.S. Agency for International Development through Penn State for grant no.
S002283-USAID. The views and opinions of authors expressed herein do not necessarily state or reﬂect those of
the United States Government or any agency thereof. This material was supported by The Research Council of
Norway and Equinor ASA through Research Council project "308817 - Digital wells for optimal production and
drainage". Research was sponsored by the United States Air Force Research Laboratory and the United States Air
Force Artiﬁcial Intelligence Accelerator and was accomplished under Cooperative Agreement Number FA8750-19-2-
1000. The views and conclusions contained in this document are those of the authors and should not be interpreted as
representing the ofﬁcial policies, either expressed or implied, of the United States Air Force or the U.S. Government.
The U.S. Government is authorized to reproduce and distribute reprints for Government purposes notwithstanding any
copyright notation herein.

References

[1] Manuel Bronstein. Symbolic Integration I. Springer-Verlag, 2005.
[2] Edmund A. Lamagna. Computer algebra concepts and techniques. CRC Press, 2018.
[3] Jurgen Gerhard. Modern computer algebra: Third edition. Cambridge University Press, 2011.
[4] SlagleJames R. A Heuristic Program that Solves Symbolic Integration Problems in Freshman Calculus. Journal

of the ACM (JACM), 10(4):507–520, oct 1963.

[5] Joel Moses. Symbolic Integration: The Stormy Decade. pages 427–440.
[6] Robert H. Risch. The Problem of Integration in Finite Terms. Transactions of the American Mathematical

Society, 139:167, may 1969.

[7] Aaron Meurer, Christopher P. Smith, Mateusz Paprocki, Ondˇrej ˇCertík, Sergey B. Kirpichev, Matthew Rock-
lin, AMiT Kumar, Sergiu Ivanov, Jason K. Moore, Sartaj Singh, Thilina Rathnayake, Sean Vig, Brian E.
Granger, Richard P. Muller, Francesco Bonazzi, Harsh Gupta, Shivam Vats, Fredrik Johansson, Fabian Pedregosa,
Matthew J. Curry, Andy R. Terrel, Štˇepán Rouˇcka, Ashutosh Saboo, Isuru Fernando, Sumith Kulal, Robert Cim-
rman, and Anthony Scopatz. SymPy: symbolic computing in Python. PeerJ Computer Science, 3(1):e103, jan
2017.

[8] Albert Rich, Patrick Scheibe, and Nasser Abbasi. Rule-based integration: An extensive system of symbolic

integration rules. Journal of Open Source Software, 3(32):1073.

[9] Christopher Rackauckas and Qing Nie. Differentialequations.jl–a performant and feature-rich ecosystem for

solving differential equations in julia. Journal of Open Research Software, 5(1), 2017.

[10] Shashi Gowda, Yingbo Ma, Alessandro Cheli, Maja Gwozdz, Viral B Shah, Alan Edelman, and Christopher
Rackauckas. High-performance symbolic-numerics via multiple dispatch. arXiv preprint arXiv:2105.03949,
2021.

[11] JuliusMartensen, Christopher Rackauckas, et al. Datadrivendiffeq.jl, July 2021.
[12] Daniel Richardson. Some undecidable problems involving elementary functions of a real variable. Journal of

Symbolic Logic, 33:514–520, 1 1969.

[13] W. Hereman, B. Deconinck, and L. D. Poole. Continuous and Discrete Homotopy Operators: A Theoretical

Approach made Concrete. oct 2005.

[14] Bernard Deconinck and Michael Nivala. Symbolic integration using homotopy methods. Mathematics and

Computers in Simulation, 80(4):825–836, dec 2009.

[15] Douglas Poole and Willy Hereman. The homotopy operator method for symbolic integration by parts and inver-

sion of divergences with applications. https://doi.org/10.1080/00036810903208155, 89(4):433–455, apr 2010.

[16] Alessandro Cheli and Christopher Rackauckas. Automated code optimization with e-graphs, 2021.
[17] Alessandro Cheli. Metatheory.jl: Fast and elegant algebraic computation in julia with extensible equality satura-

tion. Journal of Open Source Software, 6(59):3078, 2021.

8

IRAVANIAN ET AL. SYMBOLIC-NUMERIC INTEGRATION - FEBRUARY 8, 2022

[18] Yingbo Ma, Shashi Gowda, Ranjan Anantharaman, Chris Laughman, Viral Shah, and Chris Rackauckas. Model-

ingtoolkit: A composable graph transformation system for equation-based modeling, 2021.

[19] Max Willsey, Chandrakana Nandi, Yisu Remy Wang, Oliver Flatt, Zachary Tatlock, and Pavel Panchekha. Egg:

Fast and extensible equality saturation. Proc. ACM Program. Lang., 5(POPL), jan 2021.

[20] NodaMatu-Tarow and MiyahiroEiichi. A hybrid approach for the integration of a rational function. Journal of

Computational and Applied Mathematics, 40(3):259–268, jul 1992.

[21] G. H. Golub and C. F. Van Loan. Matrix computations. Johns Hopkins University Press, 2013.
[22] Steven L. Brunton, Joshua L. Proctor, J. Nathan Kutz, and William Bialek. Discovering governing equations
from data by sparse identiﬁcation of nonlinear dynamical systems. Proceedings of the National Academy of
Sciences of the United States of America, 113(15):3932–3937, apr 2016.

[23] Robert Tibshirani. Regression shrinkage and selection via the lasso. Journal of the Royal Statistical Society:

Series B (Methodological), 58:267–288, 1 1996.

[24] Tom M. Apostol. Calculus, Vol. 1: One-Variable Calculus, with an Introduction to Linear Algebra. J. Wiley,

1967.

[25] J. Stewart and R.S. Andre. Calculus. Mathematics Series. Brooks/Cole, 1991.
[26] A. F. Timofeev. Integration of Functions. 1948.

9

