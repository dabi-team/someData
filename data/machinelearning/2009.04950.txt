A Markov Decision Process Approach to Active Meta Learning

Bingjia Wang,1 Alec Koppel, 2 Vikram Krishnamurthy 1
1 School of Electrical and Computer Engineering, Cornell University
2 CISD, U.S. Army Research Laboratory
bw499@cornell.edu, alec.e.koppel.civ@mail.mil, vikramk@cornell.edu

0
2
0
2

p
e
S
0
1

]

G
L
.
s
c
[

1
v
0
5
9
4
0
.
9
0
0
2
:
v
i
X
r
a

Abstract

In supervised learning, we ﬁt a single statistical model to
a given data set, assuming that the data is associated with
a singular task, which yields well-tuned models for speciﬁc
use, but does not adapt well to new contexts. By contrast,
in meta-learning, the data is associated with numerous tasks,
and we seek a model that may perform well on all tasks si-
multaneously, in pursuit of greater generalization. One chal-
lenge in meta-learning is how to exploit relationships between
tasks and classes, which is overlooked by commonly used
random or cyclic passes through data. In this work, we pro-
pose actively selecting samples on which to train by discern-
ing covariates inside and between meta-training sets. Speciﬁ-
cally, we cast the problem of selecting a sample from a num-
ber of meta-training sets as either a multi-armed bandit or
a Markov Decision Process (MDP), depending on how one
encapsulates correlation across tasks. We develop scheduling
schemes based on Upper Conﬁdence Bound (UCB), Gittins
Index and tabular Markov Decision Problems (MDPs) solved
with linear programming, where the reward is the scaled sta-
tistical accuracy to ensure it is a time-invariant function of
state and action. Across a variety of experimental contexts,
we observe signiﬁcant reductions in sample complexity of
active selection scheme relative to cyclic or i.i.d. sampling,
demonstrating the merit of exploiting covariates in practice.

1

Introduction

In supervised learning, we learn to map features to targets
by minimizing a statistical loss averaged over samples from
an unknown distribution which is typically associated with
a singular task (Learned-Miller 2011). When this map is a
universal function approximator, i.e., a deep neural network
(DNN), this framework has yielded successes across a va-
riety of applications (Yin et al. 2017; Gopalakrishnan et al.
2017; Du et al. 2017; Pan et al. 2012). However, its suc-
cesses have been limited when data is comprised of sev-
eral qualitatively different regimes, or tasks. To enhance
adaptivity to disparate tasks, meta-learning seeks to obtain
model parameters along the Pareto frontier of the minimizer
of many training objectives simultaneously (Andrychowicz
et al. 2016), and has gained attention for overcoming data
starvation issues in robotics and physical systems (Finn,
Abbeel, and Levine 2017).

Copyright c(cid:13) 2021, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

Existing approaches, however, offer little guidance about
how to select samples on which to train to enable fast conver-
gence, and instead operate via cyclic or random sampling.
Doing so is appropriate when disparate tasks are statistically
independent. However, in many contexts such as meteorol-
ogy (Racah et al. 2017), computer vision, and robotics (Finn,
Abbeel, and Levine 2017), signiﬁcant relationships between
tasks exist. We are then faced with the question of how to
incorporate such relationships into the training of a meta-
model. In this work, we do so via active sample selection
during training meta-models. This active sample selection
is executed according to correlation within and across tasks
via multi-armed bandits (MAB) (Lattimore and Szepesv´ari
2020) and Markov Decision Processes (MDPs) (Puterman
2014) based schedulers, which yields substantial gains in
sample efﬁciency across a variety of experimental settings.
Before continuing, a few historical remarks are in or-
der. Augmenting DNN training to improve adaptivity has
received substantial interest over the years. Transfer learn-
ing relaxes the independent and identically distributed (i.i.d.)
hypothesis on data, and seeks to transform a model good for
one task to another (domain adaptation) (Tan et al. 2018;
Dai et al. 2007), i.e., transfer an understanding of Spanish to
Italian (Dai et al. 2007). Generative modeling, by contrast,
directly estimates the data distribution in order to output
new examples that plausibly could have been drawn from
the original data, similar in spirit to bootstrapping. Recent
advances in parameterizing these models using deep neural
network, have enabled scalable modeling of complex, high-
dimensional data (Shorten and Khoshgoftaar 2019). Both
approaches are effective for transferring from one task to an-
other, but it is unclear how to employ these approaches when
seeking generalization across many tasks, unless the genera-
tive/covariance model co-evolves with data drift, which may
cause instability (Radford, Metz, and Chintala 2015).

By contrast, meta-learning seeks to learn attributes of a
problem class which are common to many distinct domains,
and has been observed to improve adaptability via explic-
itly optimizing their few-shot generalization across a set of
meta-training tasks (Wang et al. 2019). Importantly, doing
so enables learning of a new task with as little as a single
example (Yu et al. 2018; Yin et al. 2019). Meta-learning al-
gorithms can be framed in terms of a cost that ties together
many training sub-tasks simultaneously, with, for instance,

 
 
 
 
 
 
Digit Recognition
Meta CIFAR-100
Extreme Weather

UCB Scheduler Gittins Index Scheduler MDP Scheduler
32.5
3.57
2.42

24.5
2.5
1.25

/
/
3.33

Table 1: Relative sample efﬁciency gain compared to base-
line cyclic sampling on different experiments.

et al. 2017), and a meta-learning variant of CIFAR100
(Krizhevsky 2012). On top of sample efﬁciency gains, the
order of sample selection experimentally can fundamentally
improve the limit points to which the meta-model converges.

2 Elements of Meta-Learning
In supervised learning, we seek to build a predictor fw :
X → Y which maps feature vectors x ∈ X to target vari-
ables y ∈ Y by minimizing a loss function (cid:96) : Rp×X ×Y →
R in expectation over the data distribution P(x, y) which is
unknown. Here w ∈ Rp denotes the parameters of the sta-
tistical model (such as a feedforward or convolutional neural
network). The loss (cid:96) quantiﬁes the difference between candi-
date prediction fw(x) at an input vector x ∈ X and a target
variable y ∈ Y, and is small when fw(x) and y are close. For
concreteness and clarity, we focus on the case of multi-class
classiﬁcation, an instance of supervised learning, although
the ideas developed in this work are also applicable to unsu-
pervised and reinforcement learning. Thus, the space of tar-
get variables is of the form Y = {1, . . . , C}, where C is the
number of classes. In this context, we wish to compute the
parameters that minimize the statistical loss over w ∈ Rp,

w∗ = argmin

w

Ex,y[(cid:96)(fw(x), y)]

where the expectation is over P(x, y). In practice, one is
given a batch of data D = {(x1, y1), ..., (xk, y˜n)}, which
may be associated with any number N of unknown distri-
butions {Pi(x, y)}N
i=1 colloquially referred to as tasks. In
particular, we have access to N distinct training subsets
Di = {xu, yu}˜ni
u=1 whose union is D, and we would like
to ﬁnd a model that simultaneously performs well on each:

w∗= argmin
w∈Rp

˜L(w) :=

(cid:88)

{xu,yu}∈Di

(cid:96)(fw(xu), yu)for i = 1, . . . , N (1)

We consider that each meta-learning sample subset Di is
tr∪Di
split into a training and a validation set, i.e., Di = Di
val
with |Di
tr| = n, and that the training subsets Di
tr for all i are
used for training within tasks, whereas the validation set is
used across tasks. Moreover, we denote Dval = ∪iDi
val and
Dtr = ∪iDi
tr. 1 Then, we hypothesize that the statistical
model fw = fwλ depends on a vector of hyperparameters
λ ∈ Rd, such as the regularizer, the radius of a pooling step
in a convolutional neural network, or other architectural con-
siderations. One way to pose the problem of meta-learning

1For disambiguation, we denote samples of Di as {xi

u} for
u = 1, . . . , ˜ni. Moreover, we denote ni as the number of training
examples available for task i. Throughout, to further alleviate no-
tation, we suppress the dependence of example (xi
u) on class c,
and instead leave this dependence implicit.

u, yi

u, yi

Figure 1: Our scheduler selects which samples from train-
ing subsets to execute task-speciﬁc updates to ensure the
meta-model’s performance improves as rapidly as possible
as quantiﬁed by meta-training subsets’ contribution to the
meta-model’s validation accuracy. Doing so requires a novel
deﬁnition of the reward in multi-armed bandits or MDPs.

recurrent or attention-based models, or an otherwise two-
stage objective (Liu and Vicente 2019): the inner cost deﬁnes
performance on a single task, and the outer meta-objective
tethers performance across tasks. Doing so results in proce-
dures that experimentally have yielded substantial gains in
terms of DNN adaptation and generalization to new tasks
(Rajeswaran et al. 2019).

The aforementioned works, as well as other meta-learning
objectives, operate under the assumption that training sam-
ples are i.i.d. to justify sampling cyclically or randomly. This
assumption is invalid for settings involving drift or latent re-
lationships between classes, such as training an NLP sys-
tem for both Spanish and Italian (Peters, Ruder, and Smith
2019), image classiﬁcation of animals from a common genus
(Wang et al. 2018), or systems identiﬁcation problems aris-
ing in ground robotics when traversing prairie and forest
ﬂoor (Koppel et al. 2016; Chiuso and Pillonetto 2019). Thus,
in this work, we propose to build a scheduler on top of
the meta-learner (Figure 1) to exploit relationships between
meta-training data subsets to allocate samples judiciously.

To do so, we incorporate ideas from active learning
(Cohn, Ghahramani, and Jordan 1996), speciﬁcally, select-
ing a given meta-learning training subset, according to ei-
ther a multi-armed bandit (Auer, Cesa-Bianchi, and Fis-
cher 2002a) or a Markov decision process (MDP) (Bellman
1957). Which technique is appropriate depends on whether
the statistical accuracy of one task is allowed to be corre-
lated with another. In either case, the state is the weights
of a meta-learning model, the arm (action) is the index of
the speciﬁc training task or class label, and the reward is
the statistical accuracy of the meta-model on a validation set
multiplied by a scaling factor to ensure the reward is station-
ary. Moreover, regret of a given arm is the scaled average
long-run validation accuracy on that meta-training subset.

Experimentally, we observe the merit of bandit selections
when we employ the Upper Conﬁdence Bound (UCB) or
Gittins Index, and MDP policies based upon a linear pro-
gramming solver (De Farias and Van Roy 2003) for meta-
training DNNs. In particular, we obtain orders of mag-
nitude improvement in sample complexity when employ-
ing our sample selection schemes relative to cyclic or ran-
dom sampling (Table 1) for training feedforward multi-
layer DNNs and convolutional variants on MNIST (Lecun
et al. 1998), the real world Extreme Weather dataset (Racah

is as a two-stage optimization variant of (1):

min
λ

Li(wλ) :=

(cid:88)

(cid:96)(fwλ(xu), yu) for i = 1, . . . , N (2)

{xu,yu}∈Di
val

s.t. wλ ∈ argmin

H i(wλ) :=

(cid:88)

h(fwλ(xu), yu)

wλ

{xu,yu}∈Di
tr

where h is again some cost, possibly equal to (cid:96), which is
small when fwλ(xu) and yu are close. This formulation
yields models fwλ which both perform well on individual
tasks i as quantiﬁed by H i(wλ) and across tasks through
seeking to minimize Li(wλ) for all i = 1, . . . , N simultane-
ously. That is, model selection of fwλ according to (2) at the
inner-stage (the constraint evaluation) is decoupled across
tasks, whereas at the outer stage, the objective is coupled by
hyperparamaters λ. For connections to bilevel optimization,
see (Franceschi et al. 2018; Likhosherstov et al. 2020).

Given that computing the simultaneous minimizer of a
number of different non-convex functions is intractable, one
may hypothesize that the universal quantiﬁer over task i in
(2) may be replaced by the sum-costs

L(wλ) =

N
(cid:88)

i=1

Li(wλ) , H(wλ) =

N
(cid:88)

i=1

H i(wλ) ,

(3)

which presupposes that tasks and classes are statistically
independent. Then, because exactly solving the inner op-
timization problem, i.e., the constraint in (2), is both in-
tractable numerically when fwλ is a neural network (as
the problem becomes non-convex) and may lead to solu-
tions that over-prioritize a singular task (over ﬁt), one may
consider the computational approximation of (2) as (Finn,
Abbeel, and Levine 2017)

min
λ

L(wλ)

s.t. wλ = wλ − η∇wH(wλ) .

(4)

Note that the argmin in the constraint of (2) been substi-
tuted in (4) by the fact that we seek model parameters close
to the ﬁxed point of the gradient of the task-speciﬁc objec-
tive H(wλ) (Finn, Abbeel, and Levine 2017), while also
minimizing the cost L which is deﬁned across tasks. The
spirit of (4) is that we seek model parameters that perform
well after a few gradient steps on an unseen task, whereas
(1) yields solutions that perform well on average observing
a number of samples from a common distribution. Prevail-
ing practice in meta-learning is built upon assuming statis-
tical independence between tasks and classes, i.e., writing
H = (cid:80)N
i=1 H i, which permits grouping the inner and outer
expectations – see (Fallah, Mokhtari, and Ozdaglar 2020).

Main Results In this work, we move beyond the hypothe-
sis that tasks and classes are independent by considering a
generalization of (4): rather than focusing on the aggregate
task-speciﬁc cost H(wλ), we retain the task-speciﬁc model
ﬁtness in the constraint H i(wλ),

L(wλ) s.t. wλ = wλ −η∇wH i(wλ), i = 1, . . . , N,

(5)

min
λ

Algorithm 1: Active Learning for Meta Learning
Initialize: No. tasks blah N , task-speciﬁc data {Di
tr},
tr| = n, validation set Dval, init. params. wλ ∈ Rp
|Di
associated w/ hyperparams. λ ∈ Rd, batch size B
for k = 1, ... do

for t = 1, ..., (cid:98) n

B (cid:99) do

u, yθ
Schedule mini-batch B({θu}) = {xθ
u}
Update parameters w via SGD [cf. (6)]

wt+1 = wt −δ∇w

B
(cid:88)

h(fwt(xθ

u), yθ
u)

u=1

end
Update hyperparams. λ of meta-model [cf. (7)]
(cid:88)
∇λ(cid:96)(fwN (xu), yu)

λk+1 = λk −η

{xu,yu}⊂Dval

end
return Meta-model fwλ params. w, hyperparams. λ

classes when the satisfaction of one constraint inﬂuences an-
other. In this work, we focus on sequential approaches to
addressing this question, inspired by active learning (Cohn,
Ghahramani, and Jordan 1996; Settles 2011). In particular,
we develop techniques to select which among the N differ-
ent tasks and C different classes one should execute a train-
ing step at any given time such that the overall meta-learning
performance L(wλ) is optimized expeditiously. Doing so
yields signiﬁcant gains in sample efﬁciency of training meta-
learners across a variety of experimental contexts, as we
demonstrate in Sec. 4 – see Table 1. Next, we shift to the
technical development of bandits and MDPs to this end.

3 Active Sample Selection

u, yi

In meta-learning (5), there are two intertwined challenges.
First, to enforce the constraint, one requires access to train-
ing examples (xi
u) for each task i and class c in order
to evaluate the gradient of the different task-speciﬁc objec-
tives H i(wλ) with respect to model parameters wλ for ﬁxed
hyperparameters λ. With access to (xi
u) for each task, a
stochastic gradient update with step-size δ > 0 is performed:
B
(cid:88)

u, yi

wt+1 = wt −δ∇w

h(fwt(xi

u), yi

u) ,

(6)

u=1

where 1 ≤ B ≤ n is some mini-batch size, which makes
(6) a stochastic gradient step (for B < n), and we have
suppressed dependence on λ for succinctness. Existing ap-
proaches proceed to execute training steps on all tasks i and
classes c cyclically, meaning there are t = N total updates of
the form (6) – see (Andrychowicz et al. 2016; Finn, Abbeel,
and Levine 2017). Then, we conduct a stochastic gradient
update of step-size η > 0 with respect to the meta-model:

λk+1 = λk −η

(cid:88)

∇λ(cid:96)(fwN (xu), yu) ,

(7)

{xu,yu}⊂Dval

which instead reveals the question of how to compute a point
at the intersection of a set of N constraints for each of C

For simplicity, we consider that B samples are chosen from
validation set Dval to execute a meta-model update in (7).

Algorithm 2: UCB Scheduler
Result: Batch B
Input: Time index t;
Initialize:
Upper Bound U = 2;
Exploration factor ξ > 1;
Vt,Di: number of visits to subset Di
Use initial model to train on each Di with ﬁrst batch of
samples {xi
u=1 independently to obtain r0(Di);
u}B
V0,Di = 1, ∀i ∈ [N ]
At time t:

tr until time t;

u, yi

˜µt−1,Di =

1
Vt−1,Di

t−1
(cid:80)
τ =0

θt = argmaxDi [˜µt−1,Di + U

(cid:113) ξ log t
Vt−1,Di

]

rτ (θτ )1{θτ = Di}, ∀i ∈ [N ]

Vt,Di =

1{θτ = Di}, ∀i ∈ [N ]

B = {xθt

u }tB

u=(t−1)B+1

t
(cid:80)
τ =0
u , yθt

the expected sub-optimality, or regret RT , deﬁned as,

RT = E{T · rt(θ∗) −

T
(cid:88)

t=1

rt(θt)} .

(8)

Strategies whose time-average regret approaches null,
RT /T → 0 as the time horizon T becomes large are
called no-regret. We consider two widely-used MAB no-
regret algorithms, the Upper-Conﬁdence Bound (UCB) (Lai
and Robbins 1985; Agrawal 1995; Auer, Cesa-Bianchi, and
Fischer 2002b) and Gittins Indices (Gittins 1979; Gittins,
Glazebrook, and Weber 2011), due to both their simplicity
and that they operate upon fairly different principles. Before
shifting to describing how θt is selected for these algorithms,
we identify how the structural attributes of MABs are well-
suited to active sampling for meta-models.

In meta-learning, for multi-class classiﬁcation with C i
classes for task i, the S different possible arms are the ∪i[C i]
classes, i.e., [S] = ∪i[C i], and the arm θt pulled at a given
time t is the class ct, meaning that one executes a SGD step
(6) associated with class ct. An open question is then how
to deﬁne the reward rt(θ). One possibility is the statistical
accuracy on the validation set Dval:
1
|Dval|

1[fwt(xu) = yu] ,

˜rt(θ) =

(cid:88)

(9)

{xu,yu}∈Dval

where the indicator 1[fwt(xu) = yu] is 1 when the model
fwt classiﬁes training example (xu, yu) correctly and null
otherwise. Observe, however, that as the model w and hy-
perparameters λ evolve during training, the reward will drift
as the validation accuracy improves, which invalidates the
stationarity hypothesis (that the distribution in (8) is station-
ary) underlying the guarantees of UCB and Gittins indices.
To ameliorate this issue, we use the fact that the conver-
gence rate of SGD and its ﬁrst-order variants (such as Adam)
t) convergence
on non-convex problems exhibit a O(1/
rate to a ﬁrst-order stationary point in terms of attenuation of
the gradient norm (Bottou, Curtis, and Nocedal 2018)[Sec.

√

√

t×(validation error) on MNIST is nearly
Figure 2: Scaled
constant for each class (state) as a function of within-task
training index t. Thus, via the approximate relationship be-
tween the rate of attenuation of the expected gradient of the
meta-training objective E[(cid:107)∇wL(wt)(cid:107)] and validation er-
ror e(t) during within-task training, we can deﬁne a reward
r(t) = 1 −
te(t) which is time-invariant, and hence satis-
ﬁes the conditions required for a valid bandit formulation in
the sense that the distribution in (8) is stationary.

√

One way of going beyond statistical independence be-
tween tasks in the updates is by using second-order infor-
mation (Im, Jiang, and Verma 2019; Song et al. 2019; Park
and Oliva 2019); however, when computing the Hessian of
the Lagrangian of (5), its statistical properties are only lo-
cally (not globally) informative due to non-convexity – see
(Nocedal and Wright 2006). Instead, we directly exploit-
ing covariates within and between tasks. While related ideas
have been proposed for how to weight the gradient of the
meta-objective L(wλ) in (Cai et al. 2020; Simon et al. 2020;
Nicholas et al. 2020), none have augmented the update rule
both within a task and across tasks.

To do so, we estimate dependencies both within each task
and dependencies across different tasks as respectively a
multi-armed bandit (MAB) or a Markov Decision Problem
(MDP). Before proceeding to deﬁning their speciﬁc use in
modeling dependencies to more effectively schedule which
task one should perform an inner-loop update at a given
time, we present the generic procedure for concreteness as
Algorithm 1, which is depicted graphically in Figure 1. It in-
volves a MAB/MDP scheduler followed by the within-task
and cross-task SGD optimization. Next, we deﬁne in detail
the Scheduler called in Algorithm 1.

3.1 Multi-armed Bandits Scheduling of Subsets
Multi-armed bandits (MAB) encapsulates the setting where
we seek to exploit covariates within a task, e.g., how one
class is correlated with another. In MAB, at each time t,
a player (scheduler) selects one among S available arms,
denoted as θt ∈ {1, . . . , S} (subsequently we abbreviate
{1, . . . , S} := [S]), after which a reward rt(θt) is revealed
(Lattimore and Szepesv´ari 2020). Since rewards are ob-
served sequentially, under the setting that the underlying
generating process of the rewards is stationary, the opti-
mal selection is the one that performs best-in-hindsight, i.e.,
θ∗ = argmaxθ∈Θ R(θ) := E{rt(θ)}. The performance of
any sequential selection strategy for θt may be quantiﬁed as

Algorithm 3: Gittins Index Scheduler
Result: Batch B
Input: Time index t;
Initilize: Compute Gittins Indices vi of Di using
Algorithm 5 in Appendix B
At time t:
θt = argmaxDi vi(yi
u , yθt
B = {xθt

(t−1)B+1)

u }tB

u=(t−1)B+1

4.3]. Then, based upon the hypothesis that the rates of atten-
uation of the gradient norm E[(cid:107)∇wL(w)(cid:107)] and the statistical
error et = 1−˜rt(θ) are comparable,
tet should be constant
during training. Thus, we deﬁne the reward as

√

rt(θ) = 1 −

√

t(1 − ˜rt(θ))

(10)

Figure 2 shows the errors of some classes in a sample meta-
training subset over the ﬁrst 120 training steps in our MNIST
experiment (elaborated upon in Section 4). Observe that
√
tet of each state is approximately a constant over time,
which provides evidence to support our hypothesis, and thus
substantiates our choice of reward for linking class selec-
tion among performance on training subsets H i(w) with the
meta-learning validation objective L(w) [cf. (5)]. The values
tet may increase for larger t since the model parameters
of
may settle to the local minima and the error saturates. This is
not a problem, however, as later selections inﬂuence regret
less due to the accumulating sum over time in regret (8).
This decrease in importance of later decisions may further
be enforced through discounting that arises in UCB, Gittins
Indices, and MDPs as described next.

√

Upper Conﬁdence Bound Upper Conﬁdence Bound
(UCB) operates upon the principle of optimism in the face of
uncertainty. Speciﬁcally, we initialize the model associated
with task i via a single iteration of (6) on (xi
1). Then, we
count the number of times θ = ˜θ has been chosen at time t
as Vt,c for each θ ∈ [C], i.e., Vt,˜θ = (cid:80)t
1{θτ = ˜θ} and
its associated average reward:

1, yi

τ =1

¯µt,˜θ =

1
Vt,˜θ

t
(cid:88)

τ =1

rτ (θτ )1{θτ = ˜θ}

Then, UCB selection operates via calibrated perturbation
from the sample mean of the reward ¯µb as

θt+1 = argmax

˜θ

¯µ˜θ,t + U

(cid:115)

ξ log t
Vt,˜θ

where ξ and U are constants that encourage exploration.
This procedure is repeated for B −1 total steps, and achieves
regret that is logarithmic in the total number of steps B,
which is precisely the within-task mini-batch size – see (Lai
and Robbins 1985).We set the exploration factor U = 2. For
each hyperparameter update of λ, a batch of B samples are
selected from Dval according to those classes from ∪i[C i]
which maximize the upper-conﬁdence bound as determined
by Algorithm 2. Then, these samples are used to update the
hyperparameters λ w.r.t. the validation loss in (7).

Algorithm 4: MDP Scheduler
Result: Batch B
Input: Time index t;
Initilize: Compute Value vectors V (s) solving LP (15)
At time t:
state s = (y1
a = argmaxi∈[N ][r(s, i) + (cid:80)
u}tB
B = {xa

(t−1)B+1)
s(cid:48) γPi(s, s(cid:48))V (s(cid:48))]

(t−1)B+1, ..., yN

(t−1)B+1, y2

u, ya

u=(t−1)B+1

Gittins Index UCB is a frequentist (non-Bayesian) strat-
egy: it does not construct any distributional model for how to
select θt. Next we consider a Bayesian approach based upon
Gittins Index, which may also be shown to be no regret (Git-
tens and Dempster 1979). It has the additional merit that it
exploits the Markovian dependencies between states by the
transition matrix structure. Proceeding with its technical de-
velopment necessitates a distributional model among states.
For task i, we construct the count-based measure:

P i

cc(cid:48) =

number of jumps from label c to c(cid:48)
number of examples with label c

.

(11)

This counting-based construction of the transition matrix be-
tween classes in Di
tr has precedent in Bayesian ﬁltering (Kr-
ishnamurthy 2016)[Ch. 5]. Gittins index is then deﬁned as

vi(θ) = max
τ >0

Ei[(cid:80)τ

t=0 βtrt(θt)|θ0 = θ]
t=0 βt|θ0 = θ]

E[(cid:80)τ

(12)

where τ is a measurable stopping time. Here v(θ) is called
Gittins index associated with reward r(θ) at state θ, and the
expectation Ei is computed with respect to the distribution
P i
cc(cid:48) over labels [C i] for a ﬁxed i. We deﬁne the Gittins index
identically as (12) for each meta-training subset i as vi(θi).
The Gittins Index Theorem establishes that a selection is
optimal, i.e., no regret (8), if and only if it always selects
an arm with highest Gittins index when there is Marko-
vian dependence on the way label transitions occur (Gittens
and Dempster 1979), with (10) as the reward. To investi-
gate whether this condition holds true, we use Pearson’s chi-
squared test to determine whether the evidence supports the
examples are not i.i.d. at 95% conﬁdent level (signiﬁcant
level (p-value) of 0.05). Further details and validation of the
constructed transition matrices is deferred to Appendix A.
In the experimental settings of Sec 4, there is signiﬁcant ev-
idence that classes exhibit Markovian dependence.

1, ..., ri

Since the reward is a constant for each class (state), based
on equation (10), we approximate the reward ri
c of state c
in Di as the accuracy of ﬁtting the ﬁrst sample of label c in
Di into the initial model. The reward vector of Di is then
ri = [ri
C]. We use largest-remaining-index algorithm
(Varaiya, Walrand, and Buyukkoc 1985) to compute the Git-
tins Index of each label in each meta-learning subset i (See
Appendix B). The Gittins Index Theory (Gittens and Demp-
ster 1979) states that the optimal action is to choose the ban-
dit with highest Gittins Index at each iteration. Gittins in-
dices are computed ofﬂine before the actual training process.
Gittins Index scheduler is shown in Algorithm 3.

Figure 3: Digit recognition experiment. Cyclically process-
ing samples from task-speciﬁc subsets comprised of Optical
Recognition (Xu, Krzyzak, and Suen 1992) and Semeion
Handwritten Digits (Buscema 1998) yields much higher
sample complexity for obtaining a well-performing model
on unseen MNIST data as compared to bandit schedulers:
well-performing models via bandit scheduling only 200 re-
quire steps, nearly an order of magnitude reduction.

3.2 MDPs for Cross-Correlated Task Scheduling
In MAB, arms are assumed independent from one another
in UCB and Gittins index and correlation across tasks is not
permitted. However, in many applications of meta-learning,
dependencies across different training subsets exist. In such
a setting, the reward for arm c will not remain frozen when
arm c(cid:48) is chosen. To address this limitation, we consider us-
ing MDPs, where transition probabilities and reward func-
tions are deﬁned across subsets (arms) c and c(cid:48).

An MDP over state space S and action space A is one
in which, starting from state s, and selecting action a,
one moves to state s(cid:48) with probability Pa(s, s(cid:48)). Then, a
reward Ra(s, s(cid:48)) is revealed. The canonical objective of
an MDP is to select actions {at} so as to maximize the
average cumulative return, or value, deﬁned as v(s) =
E[(cid:80)H
u=0 γuRa(s, s(cid:48)) | s0 = s], where H ≤ ∞ is the hori-
zon length and γ ∈ (0, 1) is a discount factor. It’s well-
known that the optimal value function satisﬁes Bellman’s
optimality equation (Puterman 2014):
(cid:88)

Pa(s, s(cid:48))(Ra(s, s(cid:48)) + γV (s(cid:48))))

(
V (s) = max

(13)

a

s(cid:48)

The optimal policy for each state s ∈ S is the action corre-
sponding to the maximum value:
a∗ = argmax
(

Pa(s, s(cid:48))(Ra(s, s(cid:48)) + γV (s)))

(14)

(cid:88)

a

s(cid:48)

The optimal policy is time-homogeneous, i.e., assigns a
ﬁxed action a to any state s independent of time t for H =
∞. One way to obtain the optimal policy for tabular set-
tings, i.e., when the state and action spaces are discrete and
of moderate cardinality, when the transition matrix is avail-
able [cf. (11)] is via linear programming (LP) (De Farias
and Van Roy 2003). We proceed to formulate this LP for the
meta-learning scheduler policy. The state space S is vector-
valued consisting of the N -fold Cartesian product of the set
of classes [C] × · · · [C], the aggregate transition model is the
N -fold Kronecker product of task-speciﬁc transition matrix

Figure 4: Meta-CIFAR-100 experiment. CIFAR-100 is di-
vided into task-speciﬁc datasets by superclasses ”aquatic
mammals”, ”medium-sized mammals”, ”small mammals”
and ”insect.” Then, we use the superclass ”large carnivores”
as the cross-task test set. The performance gap between
cyclic and active sampling is more stark for this setting, as
the inherent correlation is more pronounced. Gittins Index
scheduler achieves 73% accuracy and UCB achieves 58%
accuracy, while cyclic sampling only has 40% accuracy.

(11), i.e., Pi = P i ⊗ I 1 · · · ⊗ I N −1. The Kronecker product
ensures the dimensionality consistence between state space
S and the transition model Pi. The action determines which
meta-training subset should be chosen at the next training
time-slots. Moreover, the reward is given as the validation
accuracy (10), as in the beginning of Sec. 3.1, except now
we reinterpret the reward as being not only a function of
the selected class but also the meta-learning subset Di as
well, i.e., r(θ) = r(s, i). This is the additional expressive
power of MDPs over Gittins Index. In MDPs, the reward
for the same state changes when different arms are played,
which exploits both within and cross-task correlation. Then,
we formulate an LP to solve for the optimal value V (s):

(cid:88)

min

s

V (s), s.t.V (s) ≥ r(s, i) +

γPi(s, s(cid:48))V (s(cid:48)) (15)

(cid:88)

s(cid:48)

for ∀s, i. The optimal policy is computed by equation (14),
where V (s(cid:48)) is obtained from the optimal solution in LP
(15). The MDP scheduler is shown in Algorithm 4. With our
various active selection schemes deﬁned, we shift to estab-
lishing their experimental merits for improving the training
of meta-models across a variety of problem contexts.

4 Experiment

We experiment the proposed MAB/MDP scheduler on three
datasets with either explicit or inexplicit sample dependen-
cies within and cross tasks. Across all experiments, we ob-
serve signiﬁcant relative sample efﬁciency gain compared to
basic cyclic sampling, demonstrating the merit of exploiting
covariates in practice.

Digit Recognition We ﬁrst evaluate the performance of
the schedulers on MNIST handwritten digits (LeCun 1998)
– MNIST forms the validation set Dval, and the task-speciﬁc
subsets are the related Optical Recognition (Xu, Krzyzak,
and Suen 1992) and Semeion Handwritten Digit data sets
(Buscema 1998) – see Appendix C for additional details.

MDP
Gittins Index
UCB
Cyclic

UBOT
0.901
0.904
0.673
0.352

TMQ U850 V850 VBOT
0.774
0.873
0.738
0.836
0.600
0.649
0.592
0.043

0.870
0.653
0.421
0.480

0.917
0.845
0.684
0.304

Z100
0.842
0.877
0.619
0.448

Table 2: Overall Test Classiﬁcation Accuracy on Various
Features using Different Schedulers. MDP and Gittins Index
Schedulers outperform UCB and cyclic scheduling.

In cross-task Lwλ, We select multinomial logistic as the
loss l, and in task speciﬁc H i(wλ), cross-entropy is selected
as lss li (Murphy 2012). The speciﬁc model fwλ is a four-
layer fully-connected neural network with 300 nodes per
layer, and the hyperparameters λ concatenates the inner ob-
jective’s (the constraint in (5)) learning rate and the initial-
ization wi. We use Adam (Kingma and Ba 2014) with de-
caying learning rate as outer objective optimizer.

To evaluate the performance, we vary the batch size B ∈
{1, 20, 100}. We compare UCB (Algorithm 2), Gittins Index
(Algorithm 3), and cyclic sampling from all subsets, where
one simply passes through rows of training data one after
another. Results are given in Figure 3. Because there are
no strong inner dependencies between examples in MNIST
dataset, Gittins index algorithm does not exhibit signiﬁcant
gains compared to UCB. However, both active schedulers
outperform the cyclic sampling: to obtain test accuracy 80%,
Gittins index requires 40 samples as compared with 53 for
UCB sampling and 1300 for cyclic from test data.

Meta-CIFAR-100 The CIFAR-100 dataset is an image
dataset containing 100 classes with 600 images each
(Krizhevsky 2009). We construct 4 task-speciﬁc meta-
training subsets: each task is associated with a superclass,
that is, we form meta-training subsets consisting entirely of
a single superclass. This deﬁnes a classiﬁcation problem as-
sociated with those classes within it – see Appendix C.

We use cross entropy as both the inner and outer loss func-
tions and employ a four-layer CNNs with strided convolu-
tions and 64 ﬁlters per layer. The hyperparameters are the
same as in the Digit Recognition – see Appendix C.

Figure 4 shows the result of using Gittins Index and
UCB compared with cyclic sampling. Note the signiﬁcant
improvements in sample efﬁciency and the superior limit
point to which the model converges when using active se-
lection as compared with cyclic passes through task-speciﬁc
samples. Moreover, Gittins index outperforms UCB, which
is evidence that inherent correlation in the class and task
structure is more pronounced for this setting. To achieve
40% accuracy, Gittins Index scheduler requires 1400 sam-
ples, while UCB requires 2000 samples and cyclic scheduler
needs 5000 samples, meaning they are respectively 2.57×
and 1.50× more efﬁcient than cyclic sampling.

Extreme Weather Gittins index, as compared to UCB,
employs the Markovian transition matrix [cf. (11)] to select
the next sample (12), and thus leverages dependencies be-
tween classes. In principle, the merit of modeling correla-
tions may be greater when the order of the data has physical
meaning. This is not obvious in the case for Meta CIFAR-
100 and Digit Recognition. To further investigate the merit
of exploiting covariates between samples, we focus on an

(a) U850

(b) V850

Figure 5: Evolution of multi-Classiﬁcation accuracy when
using various features. MDP and Gittins Index Schedulers
outperform UCB and cyclic scheduling.

instance arising in meteorology, as the physical meaning of
ordering is inherent due to, e.g., the water cycle.
Data Preparation We consider
the Extreme Weather
Dataset (Racah et al. 2017): training data consists of im-
age patterns of various features and the bounding boxes
(prescribed regions) on the images label a speciﬁc extreme
weather type (considered as class). We use various bounding
boxes with different features to construct the meta training,
validation and test sets – see Appendix C for details.
Result Our results are summarized in Table 2 and Figure 5.
In Appendix D, one may observe that the constructed tran-
sition matrices are diagonally dominant, meaning that co-
variates between neighboring events/classes are more signif-
icant. Thus, it is no surprise that in Table 2, one may observe
that MDP and Gittins index schedulers outperform other two
scheduling policies in all experiments, as they are designed
to exploit correlation. Mostly, MDP outperforms Gittins In-
dex, showing that cross-task covariates also have obvious
positive effect during training; whereas in some cases, UCB
performs comparably to periodic sampling.

We also compare our results with (Liu et al. 2016), which
uses a CNN with hyperparameter optimization to perform
the binary classiﬁcations on different weather events using
multiple features. We use similar features as (Liu et al. 2016)
described, but with single feature in each test. Although the
accuracy we obtain is not comparable, we obtain moderate
accuracy with a much simpler correlation model. Speciﬁ-
cally, with only 5000 ﬁve-features images of size of 32 ×
32, which is 90% fewer examples than (Liu et al. 2016),
we achieve 70-90% of the accuracy. Moreover, we focus on
multi-class problems, which is signiﬁcantly more challeng-
ing than binary classiﬁcation. Thus, MDPs and Gittins Index
schedulers can signiﬁcantly improve training efﬁciency. See
Appendix D for further details.

5 Conclusion
We departed from prior works on meta-learning that pre-
sume independence between tasks by directly considering
within and across-task correlation. We proposed a module
to select samples according to their contribution to meta-
model validation accuracy, which yielded signiﬁcant sample
efﬁciency gains across a variety of domains as compared to
cyclic passes through data. Rigorously analyzing these sam-
ple efﬁciency gains is the subject of future work.

References
Agrawal, R. 1995. Sample mean based index policies with O
(log n) regret for the multi-armed bandit problem. Advances
in Applied Probability 1054–1078.

Andrychowicz, M.; Denil, M.; Gomez, S.; Hoffman, M. W.;
Pfau, D.; Schaul, T.; Shillingford, B.; and De Freitas, N.
2016. Learning to learn by gradient descent by gradient de-
In Advances in neural information processing sys-
scent.
tems, 3981–3989.

Auer, P.; Cesa-Bianchi, N.; and Fischer, P. 2002a. Finite-
time Analysis of the Multiarmed Bandit Problem. Machine
Learning 47(2): 235–256. doi:10.1023/A:1013689704352.
URL https://doi.org/10.1023/A:1013689704352.

Auer, P.; Cesa-Bianchi, N.; and Fischer, P. 2002b. Finite-
time analysis of the multiarmed bandit problem. Machine
learning 47(2-3): 235–256.

Bellman, R. 1957. A Markovian Decision Process. Indiana
Univ. Math. J. 6: 679–684. ISSN 0022-2518.

Bottou, L.; Curtis, F. E.; and Nocedal, J. 2018. Optimiza-
tion methods for large-scale machine learning. Siam Review
60(2): 223–311.

Buscema, M. 1998. Metanet*: The theory of independent
judges. Substance use & misuse 33(2): 439–461.

Cai, D.; Sheth, R.; Mackey, L.; and Fusi, N. 2020. Weighted
Meta-Learning. arXiv preprint arXiv:2003.09465 .

Chiuso, A.; and Pillonetto, G. 2019. System identiﬁcation:
A machine learning perspective. Annual Review of Control,
Robotics, and Autonomous Systems 2: 281–304.

Cohn, D. A.; Ghahramani, Z.; and Jordan, M. I. 1996. Ac-
tive learning with statistical models. Journal of artiﬁcial
intelligence research 4: 129–145.

Dai, W.; Yang, Q.; Xue, G.-R.; and Yu, Y. 2007. Boosting
for Transfer Learning. In Proceedings of the 24th Interna-
tional Conference on Machine Learning, ICML 07, 193200.
New York, NY, USA: Association for Computing Machin-
ery. ISBN 9781595937933. doi:10.1145/1273496.1273521.
URL https://doi.org/10.1145/1273496.1273521.

De Farias, D. P.; and Van Roy, B. 2003. The linear pro-
gramming approach to approximate dynamic programming.
Operations research 51(6): 850–865.

Du, X.; El-Khamy, M.; Lee, J.; and Davis, L. 2017. Fused
DNN: A Deep Neural Network Fusion Approach to Fast and
Robust Pedestrian Detection. In 2017 IEEE Winter Confer-
ence on Applications of Computer Vision (WACV), 953–961.

Fallah, A.; Mokhtari, A.; and Ozdaglar, A. 2020. On the
convergence theory of gradient-based model-agnostic meta-
learning algorithms. In International Conference on Artiﬁ-
cial Intelligence and Statistics, 1082–1092.

Finn, C.; Abbeel, P.; and Levine, S. 2017. Model-agnostic
meta-learning for fast adaptation of deep networks. In Pro-
ceedings of the 34th International Conference on Machine
Learning-Volume 70, 1126–1135.

Franceschi, L.; Frasconi, P.; Salzo, S.; Grazzi, R.; and Pon-
til, M. 2018. Bilevel Programming for Hyperparameter
ICML 2018 doi:https:
Optimization and Meta-Learning.
//arxiv.org/abs/1806.04910.

Gittens, J.; and Dempster, M. 1979. Bandit Processes and
Dynamic Allocation Indices [with discussion]. Journal of
the Royal Statistical Society. Series B: Methodological 41:
148–177. doi:10.1111/j.2517-6161.1979.tb01068.x.
Gittins, J.; Glazebrook, K.; and Weber, R. 2011. Multi-
armed bandit allocation indices. John Wiley & Sons.

Gittins, J. C. 1979. Bandit processes and dynamic allocation
indices. Journal of the Royal Statistical Society: Series B
(Methodological) 41(2): 148–164.

Gopalakrishnan, K.; Khaitan, S. K.; Choudhary, A.; and
Agrawal, A. 2017. Deep Convolutional Neural Networks
with transfer learning for computer vision-based data-driven
pavement distress detection. Construction and Building Ma-
terials 157: 322 – 330.
ISSN 0950-0618. doi:https://doi.
org/10.1016/j.conbuildmat.2017.09.110. URL http://www.
sciencedirect.com/science/article/pii/S0950061817319335.

Im, D. J.; Jiang, Y.; and Verma, N. 2019. Model-Agnostic
Meta-Learning using Runge-Kutta Methods. arXiv preprint
arXiv:1910.07368 .

Kingma, D. P.; and Ba, J. 2014. Adam: A method for
stochastic optimization. arXiv preprint arXiv:1412.6980 .

Koppel, A.; Fink, J.; Warnell, G.; Stump, E.; and Ribeiro, A.
2016. Online learning for characterizing unknown environ-
ments in ground robotic vehicle models. In 2016 IEEE/RSJ
International Conference on Intelligent Robots and Systems
(IROS), 626–633. IEEE.
Krishnamurthy, V. 2016. Partially Observed Markov Deci-
sion Processes. Cambridge University Press.

Krizhevsky, A. 2009. Learning Multiple Layers of Features
from Tiny Images. Master’s thesis, University of Tront .

Krizhevsky, A. 2012. Learning Multiple Layers of Features
from Tiny Images. University of Toronto .

Lai, T.; and Robbins, H. 1985.
Asymptotically Efﬁ-
cient Adaptive Allocation Rules. Adv. Appl. Math. 6(1):
422. ISSN 0196-8858. doi:10.1016/0196-8858(85)90002-8.
URL https://doi.org/10.1016/0196-8858(85)90002-8.
Lattimore, T.; and Szepesv´ari, C. 2020. Bandit algorithms.
Cambridge University Press.

Supervised Learning and
Learned-Miller, E. G. 2011.
Bayesian Classiﬁcation URL https://people.cs.umass.edu/
∼elm/Teaching/Docs/supervised.pdf.

LeCun, Y. 1998. The MNIST database of handwritten digits.
http://yann. lecun. com/exdb/mnist/ .

Lecun, Y.; Bottou, L.; Bengio, Y.; and Haffner, P. 1998.
Gradient-based learning applied to document recognition.
Proceedings of the IEEE 86(11): 2278–2324.

Likhosherstov, V.; Song, X.; Choromanski, K.; Davis, J.; and
Weller, A. 2020. UFO-BLO: Unbiased First-Order Bilevel
Optimization. arXiv preprint arXiv:2006.03631 .

Simon, C.; Koniusz, P.; Nock, R.; and Harandi, M. 2020. On
modulating the gradient for meta-learning. ECCV.

Song, X.; Gao, W.; Yang, Y.; Choromanski, K.; Pacchiano,
A.; and Tang, Y. 2019. ES-MAML: Simple Hessian-Free
In International Conference on Learning
Meta Learning.
Representations.
Tan, C.; Sun, F.; Kong, T.; Zhang, W.; Yang, C.; and Liu, C.
2018. A Survey on Deep Transfer Learning. In K˚urkov´a, V.;
Manolopoulos, Y.; Hammer, B.; Iliadis, L.; and Maglogian-
nis, I., eds., Artiﬁcial Neural Networks and Machine Learn-
ing – ICANN 2018, 270–279. Cham: Springer International
Publishing. ISBN 978-3-030-01424-7.

Varaiya, P.; Walrand, J.; and Buyukkoc, C. 1985. Exten-
sions of the multiarmed bandit problem: The discounted
case. IEEE Transactions on Automatic Control 30(5): 426–
439.

Wang, R.; Lehman, J.; Clune, J.; and Stanley, K. O. 2019.
Paired open-ended trailblazer (poet): Endlessly generating
increasingly complex and diverse learning environments and
their solutions. arXiv preprint arXiv:1901.01753 .
Wang, Y.; Wu, X.-M.; Li, Q.; Gu, J.; Xiang, W.; Zhang,
L.; and Li, V. O. 2018. Large Margin Meta-Learning for
In Neural Information Process-
Few-Shot Classiﬁcation.
ing Systems (NIPS) Workshop on Meta-Learning, Montreal,
Canada.
Xu, L.; Krzyzak, A.; and Suen, C. Y. 1992. Methods of com-
bining multiple classiﬁers and their applications to hand-
writing recognition. IEEE transactions on systems, man, and
cybernetics 22(3): 418–435.
Yin, M.; Tucker, G.; Zhou, M.; Levine, S.; and Finn, C.
2019. Meta-Learning without Memorization.

Yin, W.; Kann, K.; Yu, M.; and Schtze, H. 2017. Compara-
tive Study of CNN and RNN for Natural Language Process-
ing.

Yu, T.; Finn, C.; Xie, A.; Dasari, S.; Zhang, T.; Abbeel, P.;
and Levine, S. 2018. One-shot imitation from observing
humans via domain-adaptive meta-learning. arXiv preprint
arXiv:1802.01557 .

Liu, S.; and Vicente, L. N. 2019. The stochastic multi-
gradient algorithm for multi-objective optimization and its
application to supervised machine learning. arXiv preprint
arXiv:1907.04472 .

Liu, Y.; Racah, E.; Prabhat; Correa, J.; Khosrowshahi, A.;
Lavers, D.; Kunkel, K.; Wehner, M. F.; and Collins, W. D.
2016. Application of Deep Convolutional Neural Networks
for Detecting Extreme Weather in Climate Datasets. CoRR
abs/1605.01156. URL http://arxiv.org/abs/1605.01156.

Murphy, K. P. 2012. Machine learning: a probabilistic per-
spective.

Nicholas, I.; Kuo, H.; Harandi, M.; Fourrier, N.; Walder,
C.; Ferraro, G.; and Suominen, H. 2020. M2SGD: Learn-
ing to Learn Important Weights. In 2020 IEEE/CVF Con-
ference on Computer Vision and Pattern Recognition Work-
shops (CVPRW), 957–964. IEEE Computer Society.

Nocedal, J.; and Wright, S. 2006. Numerical optimization.
Springer Science & Business Media.

Pan, J.; Liu, C.; Wang, Z.; Hu, Y.; and Jiang, H. 2012. In-
vestigation of deep neural networks (DNN) for large vocab-
ulary continuous speech recognition: Why DNN surpasses
In 2012 8th International
GMMS in acoustic modeling.
Symposium on Chinese Spoken Language Processing, 301–
305.

Park, E.; and Oliva, J. B. 2019. Meta-curvature. In Advances
in Neural Information Processing Systems, 3314–3324.

Peters, M. E.; Ruder, S.; and Smith, N. A. 2019. To Tune
or Not to Tune? Adapting Pretrained Representations to Di-
verse Tasks. ACL 2019 7.

Puterman, M. L. 2014. Markov decision processes: discrete
stochastic dynamic programming. John Wiley & Sons.

Racah, E.; Beckham, C.; Maharaj, T.; Kahou, S.; Prabhat,
M.; and Pal, C. 2017.
ExtremeWeather: A large-scale
climate dataset for semi-supervised detection, localization,
In Guyon,
and understanding of extreme weather events.
I.; Luxburg, U. V.; Bengio, S.; Wallach, H.; Fergus, R.;
Vishwanathan, S.; and Garnett, R., eds., Advances in Neural
Information Processing Systems 30, 3405–3416. Curran
Associates, Inc.
URL http://papers.nips.cc/paper/6932-
extremeweather-a-large-scale-climate-dataset-for-semi-
supervised-detection-localization-and-understanding-of-
extreme-weather-events.pdf.

Radford, A.; Metz, L.; and Chintala, S. 2015. Unsupervised
Representation Learning with Deep Convolutional Genera-
tive Adversarial Networks.

Rajeswaran, A.; Finn, C.; Kakade, S.; and Levine, S. 2019.
Meta-Learning with Implicit Gradients.

Settles, B. 2011. From theories to queries: Active learning
In Active Learning and Experimental Design
in practice.
workshop In conjunction with AISTATS 2010, 1–18.

Shorten, C.; and Khoshgoftaar, T. M. 2019. A survey on
image data augmentation for deep learning. Journal of Big
Data 6(1): 60.

Supplementary Material for
“A Markov Decision Process Approach to Active Meta Learning”
In the supplementary material, we provide additional details regarding the construction of meta-learning tasks and evaluations,
the associated data sets, and quantities constructed toward these ends.

A Determine Sample Dependencies in Meta-training Subsets Using Chi-squared Test
First, we focus on the statistical validation of the transition matrices constructed as (11) for the various data sets. These transition
matrices are essential to the constructing Gittins Index (12) and the policy associated with an MDPs (15). Our goal here is to
determine whether the constructed transition matrices provide evidence that classes and tasks exhibit any signiﬁcant correlation
effects.

To do so, we use the Pearson’s Chi-Squared to determine whether there is a statistically signiﬁcant difference between the
expected frequencies and the observed frequencies at the 95% conﬁdent level, i.e., p value of 0.05. The null hypothesis is
samples are i.i.d. in each subset. If the statistical test rejects the null hypothesis, i.e., p-value ≤ 0.05, Gittins Index or MDPs are
justiﬁed for scheduling. Under independence, the rows of the constructed Markov chain induced by the transition matrix P i
cc(cid:48)
are identical for a ﬁxed Di
tr. Table 3 shows the p-values of meta-training subsets in MNIST and meta CIFAR-100 experiments.
The p-values of subsets in Extreme Weather experiment are all nearly 0.

p-value

Subset 1
4.36 × 10−7

Subset 2
0.0314

Subset 3
0.00836
(a) Digit Subsets

Subset 4
2.33 × 10−6

Subset 5
1.20 × 10−5

p-value

Subset 1
0.0302

Subset 2
0.00986

Subset 3
0.00215

Subset 4
0.00351

(b) Meta CIFAR-100

Table 3: p-values of meta-training subsets in MNIST and Meta CIFAR-100. p-values for the Extreme Weather data set are
identically near null, and the transition matrix is diagonally dominant – see Appendix D.

Algorithm 5: Compute Gittins Indices of States in Meta Training Subsets
Result: Gittins Indices vi
State (label) space Y = {1, ..., C}
N meta training subsets {Di}N
i=1, Di = {xu, yu}˜n
Transition Matrices of each subset P i, i = 1, ..., N
Discount factor β
for i = 1, ..., N do

u=1

Fit the ﬁrst sample of each label in Di into the initial model independently and get the reward vector ri = [ri

1, ..., ri
C]

end
for i = 1, ..., N do

Compute gittins index vi of each subset Di:
Initialization:
state α1 = argmax

ri
α

α∈Y

vi(α1) = ri
α1
for l = 2, ..., C do

C(αl) = {α1, ..., αl−1} , S(αl) = Y\C(αl)

(cid:26) P i
ab
0

Ql

a,b =

for b ∈ C(αl)
otherwise
d(l) = [I − βQ(l)]−1ri , b(l) = [I − βQ(l)]−11
d(l)
choose αl = argmax
α
b(l)
α
α∈S(αl)

∀a, b ∈ Y

d(l)
αl
b(l)
αl

vi(αl) =

end

end

This provides substantial evidence across the different data domains that classes and tasks exhibit Markovian dependence,

which is evidence that exploiting correlation effects may be useful for scheduling.

B Largest-remaining-index Algorithm for Gittins Index in Meta Learning
We use largest-remaining-index algorithm to compute the Gittins Index of each state (class) in each meta-learning subset i. We
elaborate upon how this procedure works next. Suppose the state space for a given subset is Y = {1, ..., C}. First step is to
identify state (class) α1 with the highest Gittins index:

α1 = argmax

α∈Y

ri
α, vi(α1) = ri
α1

Next step is the recursion to ﬁnd state αl with lth largest Gittins index. Deﬁne continuation set as C(αl) = {α1, ..., αl−1} and
stopping set as S(αl) = Y\C(αl). Then state αl and its associated Gittins Index can be computed using a matrix Q ∈ RC×C
and two vectors d,b ∈ RC, which are shown in detail in Algorithm 5. This procedure is then used in the Gittins Index based
scheduler summarized in Algorithm 3.

C Additional Details of Experiments
We elaborate upon the meta-learning problem formulation in terms of data preparation and allocation, parameter selection,
loss function speciﬁcation, etc. for the experimental results presented in Section 4. These points are collated into Table 4 for
convenience.

Digit Recognition

Meta CIFAR-100

Extreme Weather

Meta-training subsets
2 subsets from Semeion Dataset
3 subsets from Opt. Reconition Dataset
1400 samples each subset
4 subsets from superclasses
aquatic mammals, medium-sized mammals
small mammals, insect
500 samples per subset
5 subsets from ﬁrst 5 bounding boxes
each subset conatains different 5 features
500 samples per subset

Within-task loss h

Cross-task loss f

Neural net

Hyperparameters

Cross-entropy

Multinomial logistic

4-layer fully connected DNN
300 nodes per layer

DNN initial weights wi and biases bi
Within-task objective learning rate

Cross-entropy

Cross-entropy

4-layer CNNs with strided convolutions
64 ﬁlters per layer

DNN initial weights wi and biases bi
Within-task objective learning rate

Cross-entropy

Cross-entropy

4-layer CNNs with strided convolutions
64 ﬁlters per layer

DNN initial weights wi and biases bi
Within-task objective learning rate

Table 4: Experimental setup: data description, parameter selection, architecture speciﬁcation, loss functions, meta-model deﬁ-
nition.

C.1 Digit Recognition
We construct N = 5 meta-training subsets with 1400 samples per set. Two are selected from Semeion dataset, and the data
from the other three sets are from Optical Recognition Dataset. We construct a common validation set with size 1400 from the
two datasets above to evaluate the performance after each hyper iteration. The performance of this procedure is evaluated on
a test set comprised of 60000 samples from MNIST dataset. The size of digit images from Optical Recognition dataset and
Semeion dataset is different from the size of MNIST images. So we resize the traning and validation image to 28 × 28 in order
to ensure images have compatible dimensionality.

C.2 Meta CIFAR-100
The CIFAR-100 dataset is an image dataset containing 100 classes with 600 images each (Krizhevsky 2009). There are 500
training images and 100 testing images per class. The 100 classes are grouped into 20 superclasses, each of which contains
classes. Each image comes with a “ﬁne” label (the class to which it belongs) and a “coarse” label (the superclass to which
it belongs). We construct the task-speciﬁc subsets where each task is associated with a superclass, that is, we form data sets
consisting entirely of a single superclass, which deﬁnes a classiﬁcation problem associated with those classes within it. Super-
classes consist of “aquatic mammals”, “medium-sized mammals”, “small mammals” and “insect.” Then, we use the superclass
“large carnivores” as the cross-task validation set. This construction we call Meta-CIFAR-100.

C.3 Extreme Weather
We consider the Extreme Weather Dataset (Racah et al. 2017), where samples from both climate simulations and re-analysis
are considered. The reanalysis samples are generated by assimilating observations into a climate model. Ground truth labeling
of various events is obtained via multivariate threshold based criteria implemented in TECA, and manual labeling by experts
(Racah et al. 2017). Training data consists of image patterns, where several relevant spatial variables are stacked together over
a prescribed region (called bounding box) that bounds a type of weather event, which is considered as ground truth label. The
dimension of the bounding box is based domain knowledge of events observed in the real word. There are 1460 example images
(4 per day, 365 days in the year) arranged in time order for each year’s dataset. We only used 2005’s dataset for the experiment.

Each image has 16 channels corresponding to 16 features. Each channel is 768 x 1152 corresponding to one measurement per
25 square km on earth.

We ﬁrst build the Meta training subsets. For each image, there are up to 15 bounding boxes, where each box indicates a
prescribed region in the image that bounds a type of extreme weather event. We used these bounding boxes to split the dataset
into different subsets of meta-training set. The ﬁrst box of each image forms the ﬁrst subset, the second boxes form the second
subset, and so on. Only the ﬁrst 5 boxes of each image are used, so in total we have 5 different tasks. In order to better
differentiate tasks, each subset uses different 5 among 16 features and the features used in each subset are not identical. The
ﬁrst ﬁve bounding boxes forms the 5 subsets with 500 images each, another 50 images with all bounding boxes and 5 features
are used for validation and other images with all bounding boxes with only one feature are used for testing. Because of the
spatial dimension of climate events vary signiﬁcantly and the spatial resolution of source data is non-uniform, the bounding
boxes are resized to 32 × 32.

We present a sample transition matrix of the task-speciﬁc data subset via (11) below:

D Additional Result of Extreme Weather Experiment






0.721
0.052
0.004
0.000

0.256
0.901
0.037
0.017

0.020
0.033
0.939
0.454






0.003
0.014
0.020
0.529

The transition matrix is diagonal-dominant which means that the examples in the dataset are highly correlated. The same type
of weather event or its neighbor type of event are likely to happen after one type of extreme weather happens. Combining this
structure of likelihood with reward vectors obtained, which are the initial validation accuracy, the Gittins Index reﬂects the
relative ”importance” of each state in each arm during the training process. Following the Gittins Index policy we can ﬁnd the
optimal stopping time on one meta-training set and the next dataset the ML model should learn.

Table 5 displays the summary of examples used in each meta training subset to train the ML model using different schedulers,
and feature U850 in test set. Observe that for MDP and Gittins Index scheduler, each meta-training subset contributes to training
different types of weather events while training set 4 is rarely scheduled, which indicates that it contributes little towards
validation performance for any of type of events. This ﬁltering out of irrelevant information makes training the meta-learner
more efﬁcient. The overall classiﬁcation accuracy for each weather type at the end of training is summarized in Table 6. Since
the schedulers select more samples labeled as Tropical Cyclone and Extratropic Cyclone, the classiﬁcation accuracy on these
weather types are higher in general.

Subset 1
Subset 2
Subset 3
Subset 4
Subset 5

Trop. Depression
140
10
230
0
0

Trop. Cyclone
0
3190
0
0
0

Extratropic Cyclone Atmo. River

0
0
1150
20
0

0
0
0
0
260

(a) MDP Scheduler

Subset 1
Subset 2
Subset 3
Subset 4
Subset 5

Trop. Depression
440
0
0
0
0

Trop. Cyclone
20
1870
10
10
0

Extratropic Cyclone Atmo. River

0
0
2450
0
0

0
0
0
0
210

(b) Gittins Index Scheduler

Subset 1
Subset 2
Subset 3
Subset 4
Subset 5

Trop. Depression
120
170
90
90
40

Trop. Cyclone
830
650
430
140
90

Extratropic Cyclone Atmo. River

50
180
490
670
700

0
0
0
100
160

(c) UCB Scheduler

Table 5: Summary of Examples used in Meta-training subsets, each subset uses different 5 features. The test set uses feature
U850. By exploiting correlation, samples associated with certain classes and tasks are signiﬁcantly down-sampled.

MDP
Gittins Index
UCB

Trop. Depression
0.789
0.421
0.368

Trop. Cyclone
0.961
0.836
0.698

Extratropic Cyclone Atmo. River

0.947
0.963
0.788

0.658
0.395
0.421

Table 6: Test Classiﬁcation Accuracy of each Weather Type using Feature U850

