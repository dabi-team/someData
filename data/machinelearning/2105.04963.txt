1
2
0
2

l
u
J

3

]
L
P
.
s
c
[

2
v
3
6
9
4
0
.
5
0
1
2
:
v
i
X
r
a

Exploring a Handwriting Programming
Language for Educational Robots(cid:63)

Laila El-Hamamsy1,2[0000−0002−6046−4822], Vaios
Papaspyros1[0000−0001−8257−1891], Taavet Kangur1, Laura Mathex1, Christian
Giang3,5[0000−0003−2034−9253], Melissa Skweres2, Barbara
Bruno4[0000−0003−0953−7173], and Francesco Mondada1,2[0000−0001−8641−8704]

1 MOBOTS Group, Ecole Polytechnique F´ed´erale de Lausanne (EPFL), Switzerland
2 Center LEARN, Ecole Polytechnique F´ed´erale de Lausanne (EPFL), Switzerland
3 D-VET Laboratory, Ecole Polytechnique F´ed´erale de Lausanne (EPFL),
Switzerland
4 CHILI Laboratory, Ecole Polytechnique F´ed´erale de Lausanne (EPFL), Switzerland
5 SUPSI-DFA, Locarno, Switzerland
firstname.lastname@epfl.ch

Abstract. Recently, introducing computer science and educational robots
in compulsory education has received increasing attention. However, the
use of screens in classrooms is often met with resistance, especially in pri-
mary school. To address this issue, this study presents the development
of a handwriting-based programming language for educational robots.
Aiming to align better with existing classroom practices, it allows stu-
dents to program a robot by drawing symbols with ordinary pens and
paper. Regular smartphones are leveraged to process the hand-drawn in-
structions using computer vision and machine learning algorithms, and
send the commands to the robot for execution. To align with the local
computer science curriculum, an appropriate playground and scaﬀolded
learning tasks were designed. The system was evaluated in a preliminary
test with eight teachers, developers and educational researchers. While
the participants pointed out that some technical aspects could be im-
proved, they also acknowledged the potential of the approach to make
computer science education in primary school more accessible.

Keywords: Educational Robotics · Tangible programming · Computing
education

1

Introduction

With the increasing eﬀorts to introduce computer science (CS) in K-12 world-
wide [2], it has become necessary to develop tools and environments that oﬀer
an appropriate progression across schools years [13]. Nowadays, aside from Text-
based Programming Languages such as Python or C, three main approaches to

(cid:63) Supported by the NCCR Robotics, Switzerland

 
 
 
 
 
 
2

L. El-Hamamsy et al.

teach CS exist: CS unplugged activities 6 that do not involve the use of screens
and aim at teaching core CS concepts rather than programming per se; Tangible
Programming Languages (TPLs) which involve the use of physical manipulatives
to program virtual or physical agents [9,10]; and Visual Programming Languages
(VPLs) such as Scratch7, which oﬀer block-based solutions to programming, ei-
ther on tablets or computers [7]. Although VPLs are increasingly present in
education settings, they are met with resistance from teachers at the lower lev-
els of primary school mainly due to the presence of screens [2]. Conversely, TPLs,
which are still not present in formal settings [8] appear to be better suited for the
needs of primary school education. Indeed, the tangibility of TPL approaches
aligns nicely with early childhood education practices and principles [3,15], pro-
motes active and collaborative learning [9, 16], and is less likely to be met with
resistance by teachers. Moreover, TPLs seem to appeal more than VPLs to young
students [7] and help mitigate gender stereotypes [7, 9]. Lastly, experiments sug-
gest that TPLs have a positive impact on interest, enjoyment and learning [9],
all the while reducing the amount of errors produced [17] and the amount of
adult support required [8] compared to VPLs.

Educational Robots (ER), which by design embody and enact abstract CS
concepts and directives, can be thought of as naturally aligned with the prin-
ciples of TPL, and thus a potential means to promote the adoption of TPL
by teachers. Among the solutions proposed in the literature to combine ER and
TPL, those not requiring the purchase of additional dedicated hardware (i.e., be-
side the robot itself) seem particularly promising for primary school education
settings [6]. A recent example is the work of Mehrotra et al. [8], who devel-
oped a Paper-based Programming Language (PaPL) for the Thymio II robot8,
observing that the paper-based interface helps promote the use of tangible inter-
faces in classrooms by oﬀering a ubiquitous and accessible solution which only
requires the robot and a classroom laptop. Similarly, TPL approaches that intro-
duce handwriting as a way to provide instructions/values [14] seem particularly
interesting for primary school education settings, enhancing the programming
sessions with the possibility to train essential graphomotor skills [18], which have
been shown to be linked to improved student learning [12].

In this work, we build on the principles of the ﬁrst handwriting TPL ap-
proaches and the Paper-based Programming Language to introduce a Handwriting-
based Programming Language (HPL). By allowing students to program the robot
by handwriting instructions on a sheet of paper, HPL relies on two cornerstones
of primary school classrooms: the use of paper as material and of handwriting
as a means of expression. HPL can thus be seen as an eﬀort to take program-
ming one step closer to primary school practices, all the while capitalising on
the beneﬁts handwriting has with respect to student learning [12].

6 CS Unplugged activities: csunplugged.org/en/
7 See scratch.mit.edu for Scratch resources and scratchjr.org for Scratch Jr
8 Thymio II - https://www.thymio.org/

Exploring a Handwriting Programming Language for Educational Robots

3

2 Development of HPL

Our goal is to develop a Handwriting-based Programming Language for the
Thymio II robot which could serve as a precursor to more advanced TPLs and
VPLs for ER. For this reason, we focus on sequential programming and basic
robot movements. As movements in TPLs are often represented by arrows, the
instructions of the HPL were designed to allow for a “clear mapping between
[the] tangible and virtual commands” [13] (see Fig. 1 - A).

Fig. 1. HPL symbols (A) and workﬂow from the handwriting activity to the robot
commands (B). The “up” and “down” arrows (ﬁrst row) correspond to forwards and
backwards motions. The “forward right” and “forward left” arrows (second row) rep-
resent a forward motion along an arc of given circumference. The “rotate right” and
“rotate left” arrows (third row) correspond to a rotation. Icons are taken from FlatIcon
and the NounProject.

A data set of 6888 images of handwritten arrows was acquired from 92 stu-
dents in the 9 to 12 age range, and split 60% - 40% between training and testing.
Both during training and testing, each image is ﬁrst pre-processed using adap-
tive ﬁltering and binarisation followed by morphological operators, to reduce the
noise while preserving edges and remove asperities [5]. The arrows are then iso-
lated by identifying contours. The feature set is created to characterise the shape
diﬀerences between the arrows by combining a) Fourier descriptors, b) Hellinger
distances between the pixel density histograms along the x and y axes of the
arrow to be classiﬁed and the centroid of the classes computed on the training
set, and c) geometric features (circularity, convexity, inertia, rotated bounded
rectangle, minimum including circle, moments, etc...). A number of state-of-the-
art classiﬁers were trained and tested, namely: Decision Tree; Support Vector
Machine; Multilayer Perceptron (MLP); kNN; Random Forest; AdaBoost; Naive
Bayes classiﬁer. The MLP achieved the best performance (reported in Table 1).
While the symbol set here only included motion commands, the paper and
pen approach allows to easily change the symbols and provides the opportunity
to develop more complex commands. While contingent on the creation of a data
set with a selection of symbols which must be both intuitive for participants and
suﬃciently distinct for classiﬁcation, we do not perceive any technical limitations
to expanding the HPL language to include a larger set of instructions (including
conditionals and loops for example).

4

L. El-Hamamsy et al.

Table 1. Confusion Matrix, Precision (P), Recall (R) and F1-Score (F1) for the MLP
classiﬁer (learning rate 0.01, ReLU activation, Adam optimiser) computed on the test
set. The confusion matrix indicates the number of observations of the class (true labels
indicated in each row) and predicted to be in the class indicated by the columns.

Up

Down

Forward
Right

Forward
Left

Rotate
Right

Rotate
Left

P R F1

Up
Down
Forward Right
Forward Left
Rotate Right
Rotate Left

430
3
8
6
2
2

3
427
2
3
2
3

5
4
544
7
2
6

5
4
8
573
3
10

5
4
6
6
263
86

3
3
0
0
55
263

.95 .95 .95
.97 .96 .96
.96 .96 .96
.95 .96 .96
.71 .80 .75
.81 .71 .76

3 An ER-HPL learning activity

Speciﬁcally, the activity aims at helping students 1) understand the concept
of sequential programming, 2) discover the notions of cost and path planning,
inspired from the work done in the JUSThink project [11], and 3) reinforce the
understanding of geometry and angles. A set of scaﬀolded tasks were designed
to introduce the students to these concepts using the playground and interface
presented in Fig. 2. In the tasks, students are asked to provide a sequence of
instructions allowing the robot to reach a target on a map, by ﬁrst drawing
arrows on sheets of paper and then taking images of them using an ad-hoc
application running on a tablet. The application analyses and transforms the
instructions into robot motion commands, according to the workﬂow shown in
Fig. 1 - B.

The use of paper introduces the possibility to use a physical exercise book, a
natural approach which is close to classroom practices and helps monitor student
progress over time. Additionally, it gives the teacher the opportunity to scaﬀold
the instructions according to the needs of the individual students. Indeed, to
promote collaboration, the teacher can choose to employ a card-based solution
(similar to traditional TPLs) requiring students to draw the arrows only once,
on separate cards, and then move them around to ﬁnd the correct sequence (see
Fig. 2, Option 1). Conversely, if the objective is to have the students practice
their handwriting, the teacher can choose to have them write the arrows on a
single sheet of paper (see Fig. 2, Option 2).

A preliminary heuristic evaluation of the HPL platform and corresponding
activity framework was conducted based on the methodology developed by Gi-
ang [4]. The evaluation included 8 participants with experience in education
(2 teachers, 4 engineers, 2 educational researchers) representing the diﬀerent
stakeholders involved in the development of ER content. The participants were
interested and evoked the engaging, kinaesthetic, playful character of this low
cost approach to teaching programming. Although one researcher mentioned that
they were unsure how the HPL would help improve learning CS concepts, other
participants appreciated that the HPL would help train graphomotor skills and
increase sense of ownership of the system. Participants mentioned that the HPL

Exploring a Handwriting Programming Language for Educational Robots

5

Fig. 2. Learning activity with ER-HPL using the Thymio robot. Participants are ex-
pected to program the robot to move from one icons on the map to another using the
HPL programming language. To learn about the notion of cost, on the playground map
(top), the colour of the ground indicates the cost for the robot to navigate along it. The
darker the ground colour of a segment, the higher the cost for the robot to navigate it
and the faster the robot will use it’s initial energy (denoted by the colours of the LEDs
on the surface of the robot) using the ground sensors to the intensity of the colour. The
instructions corresponding to the displayed trajectory (in white on the map) are shown
on the bottom. Each step of the algorithm generates either a displacement (indicated
by the white arrows on the map) which is equal to the distance between the diﬀerent
illustrated locations on the map (i.e., 11 cm) or a rotation of 45 degrees. Icons are
taken from FlatIcon and the NounProject.

6

L. El-Hamamsy et al.

components were easy to understand (but not necessarily easy to draw), and
suggested to continue improving the robustness of the symbol recognition. They
believed that drawing the symbols on individual cards would facilitate collabora-
tion, and allow to easily modify the number of symbols to be used. They believed
that the activity set designed was intuitive and didactic. They appreciated the
various scaﬀolding possibilities and the presence of a physical exercise book com-
plementing the in-app instructions. They characterised the overall platform as
intuitive, but suggested improvements in terms of storytelling and the applica-
tion’s graphical user interface, speciﬁcally recommending additional feedback on
the smartphone.

4 Conclusion

In this article we propose the Handwriting-based Programming Language (HPL),
aiming at facilitating the introduction of programming in primary school edu-
cation. HPL relies on paper and handwriting to program Educational Robots
(ER) in a tangible way, while leveraging on well-known practices for early child-
hood education. From the students’ perspective, the use of handwriting as input
modality introduces the possibility to train graphomotor skills while program-
ming, and can potentially contribute to an increased sense of controllability and
ownership, which, like handwriting in general, are important factors for student
learning. From the teachers’ perspective, HPL aims to be close to traditional
pedagogical approaches and facilitate the development of learning activities that
organically take into account instructions (and instruction modalities), learning
artefacts (i.e., the robot, playground and interfaces) and assessment methods [4].
Therefore, we believe that HPL will be more attractive for teachers who are still
reticent about educational technologies. Future steps include evaluating these
hypotheses in classroom experiments with the target group and expanding to a
larger set of instructions. One could even envision a fully tablet-based alternative
in conjunction with a digital pen and an automated handwriting diagnostic sys-
tem [1]. Such a system would not only be able to assess the child’s progress over
time but would be able to propose adequate remediation to address common
handwriting diﬃculties [1] through playful means.

5 Acknowledgements

A big thank you goes out to the teacher A.S. and the students involved in the
data collection, as well as our always supportive colleagues.

References

1. Asselborn, T.L.C.: Analysis and Remediation of Handwriting diﬃculties p. 157

(2020). https://doi.org/10.5075/epﬂ-thesis-8062

Exploring a Handwriting Programming Language for Educational Robots

7

2. El-Hamamsy, L., Chessel-Lazzarotto, F., Bruno, B., Roy, D., Cahlikova, T., Cheva-
lier, M., Parriaux, G., Pellet, J.P., Lanar`es, J., Zuﬀerey, J.D., Mondada, F.: A
computer science and robotics integration model for primary school: evaluation of
a large-scale in-service K-4 teacher-training program. Educ Inf Technol (Nov 2020)
3. Elkin, M., Sullivan, A., Bers, M.U.: Programming with the KIBO Robotics Kit in

Preschool Classrooms. Computers in the Schools 33(3), 169–186 (Jul 2016)

4. Giang, C.: Towards the alignment of educational robotics learning systems with

classroom activities p. 176 (2020). https://doi.org/10.5075/epﬂ-thesis-9563

5. Herrera-Camara, J.I., Hammond, T.: Flow2Code: from hand-drawn ﬂowcharts to

code execution. In: SBIM ’17. pp. 1–13. ACM (Jul 2017)

6. Horn, M.S., Jacob, R.J.K.: Designing tangible programming languages for class-

room use. In: TEI’07. p. 159. ACM Press (2007)

7. Horn, M.S., Solovey, E.T., Crouser, R.J., Jacob, R.J.: Comparing the use of tangi-
ble and graphical programming languages for informal science education. In: CHI
’09. pp. 975–984. ACM (Apr 2009)

8. Mehrotra, A., Giang, C., Duruz, N., Dedelley, J., Mussati, A., Skweres, M., Mon-
dada, F.: Introducing a Paper-Based Programming Language for Computing Ed-
ucation in Classrooms. In: ITiCSE ’20. pp. 180–186. ACM (Jun 2020)

9. Melcer, E.F., Isbister, K.: Bots & (Main)Frames: Exploring the Impact of Tangible
Blocks and Collaborative Play in an Educational Programming Game. In: CHI ’18.
pp. 1–14. ACM (Apr 2018)

10. Mussati, A., Giang, C., Piatti, A., Mondada, F.: A Tangible Programming Lan-
guage for the Educational Robot Thymio. In: 2019 10th International Conference
on Information, Intelligence, Systems and Applications (IISA). pp. 1–4 (Jul 2019)
11. Nasir, J., Norman, U., Johal, W., Olsen, J.K., Shahmoradi, S., Dillenbourg, P.:
Robot Analytics: What Do Human-Robot Interaction Traces Tell Us About Learn-
ing? In: 2019 28th IEEE RO-MAN. pp. 1–7 (Oct 2019)

12. Ose Askvik, E., van der Weel, F.R.R., van der Meer, A.L.H.: The importance of
cursive handwriting over typewriting for learning in the classroom: A high-density
eeg study of 12-year-old children and young adults. Frontiers in Psychology 11,
1810 (2020)

13. Papavlasopoulou, S., Giannakos, M.N., Jaccheri, L.: Reviewing the aﬀordances of
tangible programming languages: Implications for design and practice. In: 2017
IEEE EDUCON. pp. 1811–1816 (Apr 2017)

14. Sabuncuo˘glu, A., Sezgin, M.: Kart-ON: Aﬀordable Early Programming Education
with Shared Smartphones and Easy-to-Find Materials. In: Proceedings of the 25th
International Conference on Intelligent User Interfaces Companion. pp. 116–117.
IUI ’20, ACM (Mar 2020)

15. Sapounidis, T., Demetriadis, S.: Educational Robots Driven by Tangible Program-
ming Languages: A Review on the Field. In: Alimisis, D., Moro, M., Menegatti, E.
(eds.) Educational Robotics in the Makers Era. pp. 205–214. Advances in Intelli-
gent Systems and Computing, Springer International Publishing (2017)

16. Sapounidis, T., Demetriadis, S., Papadopoulos, P.M., Stamovlasis, D.: Tangible
and graphical programming with experienced children: A mixed methods analysis.
International Journal of Child-Computer Interaction 19, 67–78 (Mar 2019)

17. Sapounidis, T., Demetriadis, S., Stamelos, I.: Evaluating children performance with
graphical and tangible robot programming tools. Personal and Ubiquitous Com-
puting 19(1), 225–237 (Jan 2015)

18. Ziviani, J.: The Development of Graphomotor Skills. In: Hand Function in the

Child, pp. 217–236. Elsevier (2006)

