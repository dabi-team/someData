LARGE-SCALE TEXT PROCESSING PIPELINE WITH APACHE
SPARK

9
1
0
2
c
e
D
2

]
L
C
.
s
c
[

1
v
7
4
5
0
0
.
2
1
9
1
:
v
i
X
r
a

Alexey Svyatkovskiy
Princeton University
Princeton, NJ 08540

Kosuke Imai
Princeton University
Princeton, NJ 08540

Mary Kroeger
Princeton University
Princeton, NJ 08540

Yuki Shiraito
Princeton University
Princeton, NJ 08540

ABSTRACT

In this paper, we evaluate Apache Spark for a data-intensive machine learning problem. Our use
case focuses on policy diffusion detection across the state legislatures in the United States over time.
Previous work on policy diffusion has been unable to make an all-pairs comparison between bills due
to computational intensity. As a substitute, scholars have studied single topic areas.
We provide an implementation of this analysis workﬂow as a distributed text processing pipeline
with Spark dataframes and Scala application programming interface. We discuss the challenges and
strategies of unstructured data processing, data formats for storage and efﬁcient access, and graph
processing at scale.

1

Introduction

Policy diffusion occurs when government decisions in a given jurisdiction are systematically inﬂuenced by prior policy
choices made in other jurisdictions [1]. While policy diffusion can manifest in a variety of forms, we focus on a type
of policy diffusion that can be detected by examining similarity of legislative bill texts. Our dataset is based on the
LexisNexis StateNet [2] and contains a total of more than 7 million legislative bills from 50 US states from 1991
to 2016. We aim to identify groups of legislative bills from different states falling into the same diffusion topic, to
perform an all-pairs comparison between the bills within each topic, and to identify paths connecting speciﬁc legislative
proposals on a graph.

The causes and the extent to which policies spread across state legislatures is of substantive importance to political
scientists, with implications for the states as laboratories of democracy [3–7]. Previous work has been unable to make
an all-pairs comparison between bills for a lengthy time period, as we do in this paper, because of computational
intensity: a brute-force all-pairs calculation between the texts of the state bills yields O(1013) distinct pairs. As a
substitute, scholars have studied single topic areas [6, 8–11], however, these areas are also the most likely to diffuse and
thus tell us little about the extent to which law traverses across state borders.

Our analysis pipeline, which is summarized in Fig. 1, consists of the following ﬁve stages: (1) data ingestion, (2)
pre-processing and feature extraction, (3) candidate document selection, (4) document pair similarity calculation and
(5) policy diffusion detection by ranking or on a graph. Apache Spark [12], a high-performance distributed computing
framework for large-scale data processing, is at the core of the pipeline implementation. Spark uses directed acyclic
graph (DAG) instead of MapReduce execution engine, allowing to process multi-stage pipelines chained in one job.
It is closely integrated with Apache Hadoop ecosystem and can run on YARN, use Hadoop ﬁle formats, and HDFS
storage [13]. Spark provides an ability to cache large datasets in memory between stages of the calculation, allowing
to reuse intermediate results of the computation in iterative algorithms like k-means clustering and improves fault
tolerance by taking advantage of the data replication in HDFS and check-pointing.

The framework is applicable to a wider class of fundamental text mining problems of ﬁnding similar items, including
plagiarism and mirror website detection [14].

The implementation of the pipeline uses a mix of RDD based API along with the dataframes, allowing to take
advantage of the Catalyst query optimizer and direct operations on serialized data, available in Spark 2.0.0 [15]. We use
GraphFrames [16] for dataframe-based graph algorithms calculation and graph queries.

Scala is a high-level programming language for the Java virtual machine (JVM). We chose Scala over Python or R
programming languages — commonly considered a standard in text analysis research communities — because the
optimal performance of Spark is most likely to be achieved in that language. Spark code written in Python or R is

 
 
 
 
 
 
Figure 1: The policy diffusion analysis pipeline.

often slower than equivalent code written in Scala, since it is statically typed and the cost of JVM communication from
Python to Scala can be very high.

Big data applications require a mix of processing techniques, data sources and storage formats. We chose Apache Avro
row-based format and Apache Parquet columnar format for this pipeline instead of data formats like CSV and JSON,
commonly used by scholars in this area, to take advantage of advanced compression and serialization, crucial for big
data applications implemented with Spark.

2

 Document similarity calculation Represent document pairs and similarities as weighted undirected graph. Perform PageRank and graph queries using GraphFrames package  Distributed processing with Spark ML    Data ingestion Intermediate Parquet sink on HDFS Statistical analysis, aggregation, plotting using Histogrammar package HDFS storage    Raw unstructured text data Structured, compressed data in        Avro format Pre-processing and Feature extraction k-means clustering, candidate pair selection Interactive statistical analysis tools compatible with Spark have been implemented in the Histogrammar package [17]: a
cross-platform suite of data aggregation primitives for making histograms, calculating descriptive statistics and plotting.
Histogrammar allows to aggregate data using functional primitives, summarizing a large dataset with discretized
distributions, using lambda functions and composition rather than a restrictive set of histogram types.

We observe stable execution of memory-intensive text processing jobs with large number of executor containers yielding
efﬁciencies greater than 80% for the largest dataset considered in the study.

The paper is organized as follows: we start with the hardware speciﬁcations and details on the Spark cluster setup
and Hadoop ecosystem; in the Section III the policy diffusion detection method and the core modules of the pipeline
are described; Section IV introduces the Histogrammar tool for interactive data aggregation and plotting applied to
the policy diffusion problem; ﬁnally, Section V summarizes the performance of the core modules of the pipeline and
discusses the optimization. Section VI concludes the paper.

2 Hardware speciﬁcations

An SGI Hadoop Linux cluster consisting of 6 worker nodes and 4 service nodes is used to deploy Apache Spark. The
cluster is conﬁgured with all the servers mounted on one rack and interconnected using a 10 Gigabit Ethernet switch.
Intel Xeon CPU E5-2680 v2 @ 2.80GHz CPU processors, with each worker node having 256 GB of memory and 10
TB of hard disk allow to achieve high performance and handle distributed workloads.

The Hadoop cluster is conﬁgured without single points of failure by using two separate machines as name nodes. Spark
applications are scheduled using YARN resource manager with dynamic resource allocation enabled. HDFS distributed
ﬁle system is chosen to improve data locality by means of replication.

3 Text processing pipeline: core modules

This section discusses the core modules of the text processing pipeline for policy diffusion detection.

3.1 Data ingestion

During ingestion step the raw unstructured data are converted into Apache Avro format having following schema:

\ b e g i n { c e n t e r }
{ " n a m e s p a c e " :

" b i l l s . a v r o " ,

" t y p e " :
" name " :
" f i e l d s " :

[

" r e c o r d " ,
" B i l l s " ,

" t y p e " :

" s t r i n g " } ,

" p r i m a r y _ k e y " ,
" c o n t e n t " ,
" y e a r " ,
" s t a t e " ,
" d o c v e r s i o n " ,

" t y p e " :

" t y p e " :

" s t r i n g " }

" i n t " } ,

" t y p e " :

" i n t " } ,

" t y p e " :

" s t r i n g " }

{ " name " :
{ " name " :
{ " name " :
{ " name " :
{ " name " :

]

}
\ end { c e n t e r }

where the primary_key ﬁeld is a unique identiﬁer of the elements in the dataset constructed from year, state and
document version. The year, state and docversion ﬁelds are used to construct predicates and ﬁlter the data before the
all-pairs similarity join calculation.

The content ﬁeld stores the entire legislative proposal as a unicode string. It is only used for feature extraction step, and
is not read into memory during candidate selection and ﬁltering steps, thanks to the Avro schema evolution property.

Avro schema is stored in a ﬁle along with the data. Thus, if the program reading the data expects a different schema
this can be easily resolved by setting the avro.input.schema.key in the Spark application, since the schemas of Avro
writer and reader are both present.

3

3.2 Pre-processing and Feature extraction

The feature extraction step consists of a sequence of Spark ML transformers intended to produce numerical feature
vectors as a dataframe column. The resulting dataframe is fed to Spark ML k-means estimator, later used to calculate
the all-pairs join, and subsequently during the graph analysis step with GraphFrames.

3.2.1 Data cleaning and stop word removal

The raw text of legislative proposals from the StateNet dataset contains a lot of spurious white spaces and non-
alphanumeric characters, which bare no meaning for analysis of legislative bills and often represent an obstacle for
tokenization. The cleaner is implemented as a column-based user deﬁned function (UDF).

The words appearing very frequently in all the documents across the corpus (stop words) are excluded by means of
StopWordsRemover transformer from Spark ML, which takes a dataframe column of unicode strings and drops all the
stop words from the input. The default list of stop words for English language is used in this study.

3.2.2 Bag-of-words and the N -gram model

In the bag-of-words model, text is represented as a multiset of words, disregarding grammar and word order but keeping
multiplicity. The N -gram model, on the other hand, preserves the spatial information about the order within the multiset.
Conceptually, the bag-of-word model can be viewed as a special case of the N -gram model with N = 1.

We use a regular expression based tokenizer which produces a dataframe column having an array of strings per row.
The NGram transformer from Spark ML takes a sequence of strings from the output of tokenizer and converts it to a
sequence of space-delimited strings of N consecutive words, which are optionally added to the bag-of-word features to
improve accuracy.

3.2.3 Term frequency and inverse document frequency calculation

Term frequency-inverse document frequency (TF-IDF) is a feature vectorization method used to reﬂect the importance
of a term to a document in the corpus. TF-IDF is implemented in two classes in Spark ML.

HashingTF class implements a transformer, which takes tokenized documents and converts them into ﬁxed-length
feature vectors by means of the hashing trick. A raw feature is mapped to an index by applying the MurmurHash 3 hash
function. The IDF estimator is ﬁt on feature vectors created from HashingTF. It down-weights columns which appear
frequently in the corpus.

3.2.4 Dimensionality reduction

Singular value decomposition (SVD) is applied to the TF-IDF document-feature matrix to extract concepts which are
most relevant for classiﬁcation [18].

SVD factorizes the document-feature matrix M (m × n) into three matrices U ,Σ and V , such that:

M = U · Σ · V T ,
(1)
having m × k, k × k and k × n dimensions correspondingly, where m is the number of legislative bills (O(106)), k is
the number of concepts, and n is the number of features (214). Following inequalities hold:

m (cid:29) n (cid:29) k.

(2)

The left singular matrix U is represented as row-oriented distributed matrix while Σ and V matrices are sufﬁciently
small to ﬁt into the Spark driver memory.

3.3 Candidate selection and clustering

Focusing on the document vectors which are likely to be highly similar is essential for all-pairs comparison at scale.
Modern studies employ variations of nearest-neighbor search, locality sensitive hashing [14], as well as sampling
techniques to select a subset of rows of TF-IDF matrix based on the sparsity [19]. Our approach utilizes k-means
clustering to identify groups of documents which are likely to belong to the same diffusion topic, reducing the number
of comparisons in the all-pairs similarity join calculation.

The f eatures dataframe column is passed to the KMeans estimator which generates KMeansModel with a given
number of cluster centroids. k-means clustering subdivides N vectors in the feature space into k clusters so that each
vector belongs to a cluster with the nearest centroid, used to initialize the cluster.

4

Given an initial set of k cluster centroids m(0)

i

, where i = 0...N the algorithm yields:

i = (cid:8)xp : (cid:13)
S(t)
where each xp is assigned to exactly one S(t) during the iteration t.
During the update step, the means of the clusters are assigned to be the new clusters centroids on the next iteration:

, ∀j, 1 ≤ j ≤ k(cid:9),

(cid:13)xp − m(t)

(cid:13)xp − m(t)

≤ (cid:13)

(cid:13)
2
(cid:13)

(cid:13)
2
(cid:13)

j

i

(3)

m(t+1)
i

=

1
|S(t)
i

|

(cid:88)

xj

xj ∈S(t)

i

(4)

and the procedure is repeated before the convergence based on the within-cluster sum of squares (WCSS) objective is
reached.

The optimum number of clusters has been determined empirically, by repeating the calculating for a range of values of
k and scoring them on a processing time versus WCSS plane. While processing time has been increasing with k, the
WCSS gain has appeared to slow down signiﬁcantly in the neighborhood of k ≈ 150 for a 3 state subset and k ≈ 400
for the entire dataset.

3.3.1 Number of permutations

Requesting algorithm to focus on the combinatorial pairs belonging to the same clusters reduces the number of
comparisons in the all-pairs similarity join by 2-3 orders of magnitude, keeping the bill pairs belonging to the same
diffusion topics with high probability.

Indeed, starting with a total of N = 212768 legislative proposals in a 3 state subset of the dataset, we would
get a total of: N · (N − 1)/2 = 2.26 × 1010 distinct combinatorial pairs to compare. Considering k = 150
classes for k-means clustering and assuming a uniform distribution of samples among these clusters we would get:
M = N/k = 212768/150 ≈ 1418, resulting in M · (M − 1)/2 · k = 1418 · (1418 − 1)/2 · 150 ≈ 1.5 × 108
combinatorial pairs, which is roughly 2 orders of magnitude less compared to the case with no clustering. The actual
distribution among k-means clusters for this sample has shown a mean occupancy of 1467.3 documents per cluster,
with the standard deviation of 9562.4, and the maximum occupancy of 110794 documents per cluster, yielding a good
reduction in the number of pairwise comparisons.

3.4 Document similarity calculation

The k-means clustering algorithm assigns vectors in the feature space to clusters by minimizing the WCSS objective.
The step after that – all-pairs document similarity calculation – is performed within each cluster. Cosine, Jaccard,
manhattan and Hamming similarity measures are considered.

The SimilarityMeasure trait provides a common interface for similarity calculation between feature vectors reaching
into Spark’s private linear algebra code to use BLAS dot product. Each similarity measure is implemented as an object
extending the SimilarityMeasure class and each implementing its own compute method for dot product.

We convert Cosine, manhattan and Hamming distances to similarities assuming inverse proportionality, and re-scale all
similarities to a common range:

SM =

100
1 + DM

(5)

an extra additive term in the denominator serves as a regularization parameter for the case of identical vectors.

3.5 Policy diffusion detection

The policy diffusion detection tool can be used in a number of modes:

• identiﬁcation of groups of diffused bills in the dataset given a diffusion topic,
• discovery of diffusion topics,
• identiﬁcation of minimum cost paths connecting two speciﬁc legislative proposals on a graph, and, possibly,
• identiﬁcation of the most inﬂuential US states for policy diffusion.

We use supervised pre-training on a set of diffusion topics labeled by an expert to tune the classiﬁcation algorithm to
achieve a better accuracy.

5

FL/2005/SB436, MI/2005/SB1046: 91.38,
FL/2005/SB436, MI/2005/HB5143: 91.29,
FL/2005/SB436, MI/2005/HB5153: 91.18,
FL/2005/SB436, SC/2005/SB1131: 82.89,
FL/2005/SB436, SC/2005/HB4301: 81.86,
FL/2005/SB436, SC/2011/SB1415: 77.11.

Below is an example output of the classiﬁer for the test performed on a subset of legislative proposals having "Stand
your ground" diffusion topic.

Input: A set of bills on the topic: FL/2005/SB436, MI/2005/HB5153, MI/2005/HB5143, SC/2005/HB4301,
MI/2005/SB1046, and a probe bill: FL/2005/SB436.

Output: A set of top similarity bills from the test set contained all the samples labeled as having "Stand your ground"
diffusion topic by an expert:

3.6 Reformulating the problem as a network (graph) problem

Some policy diffusion questions are easier answered if the problem is formulated as a graph analysis problem. The
dataframe output of the document similarity step is mapped onto a weighted undirected graph, considering each unique
legislative proposal as a node and a presence of a document with similarity above a certain threshold as an edge with a
weight attribute equal to the similarity. The PageRank and Dijkstra minimum cost path algorithms are applied to detect
events of policy diffusion and the most inﬂuential states.

A GraphFrame is constructed using two dataframes (a dataframe of nodes and an edge dataframe), allowing to easily
integrate the graph processing step into the pipeline along with Spark ML, without a need to move the results of previous
steps manually and feeding them to the graph processing module from an intermediate sink, like with isolated graph
analysis systems.

4

Interactive analysis

This section describes the tools and techniques used for interactive part of the analysis in read-eval-print loop (REPL)
shell.

Histogrammar [17] is a suite of data aggregation primitives for making histograms, calculating descriptive statistics and
plotting. A few composable functions can generate many different types of plots, and these functions are reimplemented
in multiple languages and serialized to JSON for cross-platform compatibility. Histogrammar allows to aggregate data
using cross-platform, functional primitives, summarizing a large dataset with discretized distributions, using lambda
functions and composition rather than a restrictive set of histogram types.

Histogrammar primitives are order-independent commutative monoids designed for distributed computing and cross-
platform compatibility. As a data analyst, you just express your data aggregation in terms of nested Histogrammar
primitives and pass it to any system for evaluation. Since all of the logic of what to ﬁll is encoded in your lambda
functions, the aggregation phase is automatic.

Moving the logic of data analysis out of the for loop allows the analyst to describe an entire analysis declaratively. A
whole analysis can be wrapped up in subdirectories like

Label(

dir1 = Label(

hist1 = Bin(...),
hist2 = Bin(...)),

dir2 = ...)

This tree gets ﬁlled the same way as a single histogram, because the Label collection is a primitive just like Bin.

Thus, analysis code can be independent of where the data are analyzed. This is especially helpful for aggregating data in
hard to reach places: across a distributed system like Apache Spark, on a GPU coprocessor, or through a thin bandwidth
connection.

Histogrammar has front-end extensions to pass its aggregated data to many different plotting libraries, including Bokeh
and Matplotlib.

6

for each (pkj, pkk) in RDD calculate (pkj, (pkj, pkk))
join with the dataset ˜D on the left key

1: procedure JOIN ON THE LEFT KEY( ˜D)
2:
3:
4: end procedure
5: procedure JOIN ON THE RIGHT KEY( ˜D)
6:
7:
8: end procedure
9: procedure CALCULATE SIMILARITIES(threshold)
10:
11:
12: end procedure

for each (pkj, pkk) and feature vector vj in RDD calculate (pkk, ((pkj, pkk), vj)
join with the dataset ˜D on the right key

for each (pkj, pkk) and feature vector (vj, vk) in RDD calculate ((pkj, pkk), (vj, vk))
for each ((pkj, pkk), (vj, vk)) calculate similarity between vj and vk: ((pkj, pkk), Sjk) Filter Sjk > threshold

Figure 2: Two-sided join and all-pairs similarity calculation.

Histogrammar also has back-end extensions for aggregating data from different frameworks. It can therefore be thought
of as a common language for aggregating and then plotting data, so that every plotting library doesn’t have to have
individual hooks for every kind of aggregation system.

An example interactive analysis in spark-shell REPL is provided in Appendix A.

5 Performance evaluation

This section discusses the core algorithms, types of transformations used in the analysis, partitioning, check-pointing
and shufﬂe among the stages of calculation.

The policy diffusion analysis involves map, ﬁlter, join and aggregateByKey transformations. All-pairs similarity
calculation involves a two-sided join transformation with wide dependencies among partitions, resulting in an order of
100 TB of intermediate data and intensive shufﬂes, making the analysis challenging. The cost of failure for a partition
with wide dependencies is rather high, since it requires a number of partitions to be re-computed, especially if the
lineage graph is rather long. An intermediate Parquet sink is introduced between the two main steps of the computation
(separating the feature extraction and document classiﬁcation steps) to break the RDD’s lineage.

5.1 All-pairs similarity calculation

The most compute and shufﬂe intensive part of the pipeline is the all-pairs document similarity calculation. To scale the
solution up to large dataset sizes an efﬁcient candidate selection step via k-means clustering is introduced (3.3).
Once all rows of the pre-processed dataset D are subdivided into k clusters, a copy of the clustered dataset ˜D is
broadcasted to each partition across the nodes of Spark cluster. All combinatorial pairs of primary keys (pkj, pkk)
corresponding to the documents are calculated in each partition, ﬁltered by state and predicted cluster label. The result
is then aggregated into an array of pairs of primary keys (pkj, pkk) and combined. The RDD checkpoint is introduced
following this step.

Next, the two-sided join is performed to calculate the and all-pairs similarity as described in 5.1. The DAG visualization
of two-sided join and all-pairs similarity calculation is provided in Appendix B.

5.1.1 Shufﬂe and partitioning

Spark applications have been deployed on the cluster (2) with up to 40 executor containers each using 3 executor
cores and 15 GB of RAM per JVM. We use external shufﬂe service inside the YARN node manager, observing an
improved stability of memory-intensive jobs with larger number of executor containers. Fig. 3 shows the efﬁciency of
the computation on the Spark cluster, deﬁned as:

E =

T0
Nexec · TN

(6)

where T0 is the processing time on a single executor and TN is the processing time using Nexec executor containers.
The total processing time is composed of the executor compute time, shufﬂe read-write time, task serialization and
deserialization times, excluding scheduler delays. The efﬁciency is calculated for four distinct samples containing

7

legislative proposals from 2, 4, 6 and 10 states respectively as a function of the number of executor containers used in
the calculation. As seen, the efﬁciency decreases down to 50% for the case of 2 state sample, which is due to a relatively
small problem size. The efﬁciency in the high-executor region is improved as the sample size increases, staying above
80% for the 10 state sample.

Figure 3: Efﬁciency as a function of the number of executor containers used in the calculation for different dataset sizes.

An intensive shufﬂe across partitions of the dataset has been identiﬁed as the main cause of efﬁciency decrease. Fig. 4,
shows the scaling of the document similarity calculation step as a function of number of processing cores, as well as the
effects of changing the fraction of Java heap space used during shufﬂes. If the speciﬁed threshold for in-memory maps
used for shufﬂes is exceeded, the contents will begin to spill to disk. Increasing the value of the memory fraction to
50% of the executor memory allowed to maintain a good scaling beyond 90 processing cores.

Partition is a unit of parallelism in Spark. Proper partitioning is necessary to speed-up the computation and avoid
out-of-memory errors. The algorithm described in section (5.1) avoids grouping by key, thus minimizing the shufﬂe and
eliminating "struggler tasks" which arise due to an uneven distribution of documents over key-groups.

Let S be a feature vector for a short document and L be a feature vector for a long document, i.e., |S| ≤ |L|. The usual
Jaccard measure is

Now, deﬁne α such that |S| = α|T | where 0 < α ≤ 1. We consider the following weighted Jaccard measure,

J =

|S| + |L| − |S − L|
|S| + |L| + |S − L|

Jw =

|S| + |L| − w|S − L|
|S| + |L| + w|S − L|

8

(7)

(8)

Figure 4: Processing time as a function of number of virtual cores in the Spark cluster. Comparison of two curves
illustrate the effect of the shufﬂe memory spill fraction.

Suppose that the fraction of S contained in L is given by r. Then, |S − L| = (1 + α − 2αr)|L|. The weighted Jaccard
distance becomes,

Jw =

(1 + α)|L| − w(1 + α − 2αr)|L|
(1 + α)|L| + w(1 + α − 2αr)|L|

We would like to choose w as a function of α such that Jw is approximately r for any r.

w =

(1 − r)(1 + α)
(1 + r)(1 + α − 2αr)

6 Conclusion

(9)

(10)

The Apache Spark framework has been evaluated for the case of data-intensive machine learning problem. A text
processing pipeline utilizing Avro serialization framework, Spark ML, GraphFrames, and Histogrammar suite of data
aggregation primitives has been proposed in application to a policy diffusion problem.

The proposed framework allows to efﬁciently calculate all-pairs comparison between legislative bills, estimate relation-
ships between bills on a graph, and is potentially applicable to a wider class of fundamental text mining problems of
ﬁnding similar items.

Histogrammar tool, adopted as a part of the framework to enable interactive analysis, allows a researcher to perform
analysis in Scala language, integrating well with Hadoop ecosystem.

9

s p a r k −s h e l l −−p a c k a g e s
" o r g . d i a n a −hep : h i s t o g r a m m a r −bokeh_2 . 1 1 : 1 . 0 . 3 " ,
" o r g . d i a n a −hep : h i s t o g r a m m a r −s p a r k s q l _ 2 . 1 1 : 1 . 0 . 3 "

" o r g . d i a n a −hep : h i s t o g r a m m a r _ 2 . 1 1 : 1 . 0 . 3 " ,

import org.dianahep.histogrammar._
import org.dianahep.histogrammar.bokeh._
import org.dianahep.histogrammar.sparksql._
import io.continuum.bokeh._

//UDF to filter data
def stateSelector_udf = udf((pk1: String,pk2: String) =>
{(pk1 contains "FL") || (pk2 contains "FL")})

//load and filter data
val data = spark.read.parquet("path").cache()
val filtered = data.filter(stateSelector_udf(col("pk1"),col("pk2")))

//create and fills the histogram
val hist = filtered.histogrammar(Bin(20, 0, 100, $"similarity"))

//plot the histogram and save
val plot = hist.bokeh(glyphType="histogram",glyphSize=3,fillColor=Color.Red)

save(plot,"cosine_sim.html")

.plot(xLabel="Similarity",yLabel="Num. pairs")

7 Appendix A

Histogrammar is available on Maven Central, a publicly accessible Java/Scala repository with dependency management.
To use it in Spark 2.0, one does not have to download anything. Following will start spark-shell and include the
Histogrammar core as well as the packages needed to work with Spark SQL and Bokeh (7).

Following lines of Scala code in the interactive spark-shell produce an editable HTML ﬁle with the similarity distribution
plot for all the bill pairs having at least one bill from Florida (7).

8 Appendix B

References

[1] Fabrizio Gilardi. Four ways we can improve policy diffusion research. State Politics and Policy Quarterly, page

1532440015608761, 2015.

[2] LexisNexis StateNet. http://www.lexisnexis.com/en-us/products/state-net.page. Ac-

cessed: 2016-08-30.

[3] Jack Walker. The diffusion of innovations among the american states. American Political Science Review,

63(3):880–899, 1969.

[4] Virginia Gray. Innovation in the states: A diffusion study. American Political Science Review, 67(4):1174–1185,

1973.

[5] Frances Stokes Berry and William Berry. State lottery adoptions as policy innovations: An event history analysis.

American Political Science Review, 84(2):395–415, 1990.

[6] Steven J Balla. Interstate professional associations and the diffusion of policy innovations. American Politics

Research, 29(3):221–245, 2001.

[7] Craig Volden. States as policy laboratories: Emulating success in the children’s health insurance program.

American Journal of Political Science, 50(2):294–312, 2006.

[8] Rebecca J Kreitzer. Politics and morality in state abortion policy. State Politics and Policy Quarterly, 15(1):41–66,

2015.

10

// Configure an ML pipeline
val cleaner = new Cleaner()
.setInputCol("content")
.setOutputCol("cleaned")

val tokenizer = new RegexTokenizer()

.setInputCol(cleaner.getOutputCol)
.setOutputCol("words")
.setPattern("\\W")

val remover = new StopWordsRemover()

.setInputCol(tokenizer.getOutputCol)
.setOutputCol("filtered")

val ngram = new NGram()

.setN(nGramGranularity)
.setInputCol(remover.getOutputCol)
.setOutputCol("ngram")

val hashingTF = new HashingTF()

.setInputCol(ngram.getOutputCol)
.setOutputCol("keys")
.setNumFeatures(numTextFeatures)

var idf = new IDF()

.setInputCol(hashingTF.getOutputCol)
.setOutputCol("features")

val pipeline = new Pipeline()

.setStages(Array(cleaner, tokenizer,

remover, ngram, hashingTF, idf))

// Fit the pipeline
val model = pipeline.fit(train)

[9] Karen Mossberger. The politics of ideas and the spread of enterprise zones. Georgetown University Press, 2000.
[10] Julianna Pacheco. Attitudinal policy feedback and public opinion: the impact of smoking bans on attitudes towards

smokers, secondhand smoke, and antismoking policies. Public opinion quarterly, page nft027, 2013.

[11] Charles R Shipan and Craig Volden. Policy diffusion: Seven lessons for scholars and practitioners. Public

Administration Review, 72(6):788–796, 2012.

[12] Matei Zaharia, Mosharaf Chowdhury, Michael J. Franklin, Scott Shenker, and Ion Stoica. Spark: Cluster
computing with working sets. In Proceedings of the 2Nd USENIX Conference on Hot Topics in Cloud Computing,
HotCloud’10, pages 10–10, Berkeley, CA, USA, 2010. USENIX Association.

[13] Vinod Kumar Vavilapalli, Arun C. Murthy, Chris Douglas, Sharad Agarwal, Mahadev Konar, Robert Evans,
Thomas Graves, Jason Lowe, Hitesh Shah, Siddharth Seth, Bikas Saha, Carlo Curino, Owen O’Malley, Sanjay
Radia, Benjamin Reed, and Eric Baldeschwieler. Apache hadoop yarn: Yet another resource negotiator. In
Proceedings of the 4th Annual Symposium on Cloud Computing, SOCC ’13, pages 5:1–5:16, New York, NY, USA,
2013. ACM.

[14] Anand Rajaraman and Jeffrey David Ullman. Mining of Massive Datasets. Cambridge University Press, New

York, NY, USA, 2011.

[15] Michael Armbrust, Reynold S. Xin, Cheng Lian, Yin Huai, Davies Liu, Joseph K. Bradley, Xiangrui Meng, Tomer
Kaftan, Michael J. Franklin, Ali Ghodsi, and Matei Zaharia. Spark sql: Relational data processing in spark. In
Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data, SIGMOD ’15, pages
1383–1394, New York, NY, USA, 2015. ACM.

[16] Ankur Dave, Alekh Jindal, Li Erran Li, Reynold Xin, Joseph Gonzalez, and Matei Zaharia. Graphframes: An
integrated api for mixing graph and relational queries. In Proceedings of the Fourth International Workshop on
Graph Data Management Experiences and Systems, GRADES ’16, pages 2:1–2:8, New York, NY, USA, 2016.
ACM.

11

Figure 5: Similarity distribution produced with Histogrammar using Bokeh plotting front-end.

[17] Jim Pivarski and Alexey Svyatkovskiy. histogrammar-scala: 1.0.0, September 2016.
[18] Susan T. Dumais. Latent semantic analysis. Annual Review of Information Science and Technology, 38(1):188–230,

2004.

[19] Reza Zadeh and Gunnar Carlsson. Dimension independent matrix square using mapreduce. 2013.

12

Figure 6: DAG visualization of two-sided join and all-pairs similarity calculation.

13

