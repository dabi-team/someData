Megadiﬀ: A Dataset of 600k Java Source Code Changes
Categorized by Diﬀ Size

Martin Monperrus

Matias Martinez

Fernanda Madeiral

Thomas Durieux

He Ye
Zhongxing Yu

Abstract

This paper presents Megadiﬀ, a dataset of source code diﬀs. It focuses on Java,
with strict inclusion criteria based on commit message and diﬀ size. Megadiﬀ con-
tains 663 029 Java diﬀs that can be used for research on commit comprehension, fault
localization, automated program repair, and machine learning on code changes.

1

Introduction

Researchers have analyzed source code changes to create knowledge on the evolution
of software systems and, consequently, to create new techniques and tools to support
software development tasks. For instance, Le et al. [9] prioritize mutation operators for
program repair based on their prevalence in source code diﬀs. Long and Rinard [13] train
the patch generation system by learning human diﬀs obtained from open-source software
repositories.

Researchers tend to create ad-hoc datasets of source code diﬀs for the tasks at hand.
This poses several problems with respect to scientiﬁc reproducibility. First, the dataset of
diﬀs may not be made publicly available. This leads to one approach cannot be compared
with another based on the same dataset. Second, the diﬀ inclusion criterion may not be
documented in the paper, due to focusing on another problem. Diﬀerent criterion leads to
the collected diﬀs in diﬀerent quality, which may further impact the experimental results.
Third, the dataset of diﬀs may be shared only in a processed format, not in raw format,
making reuse impossible out of the scope of the already done prepossessing.

To solve this problem, this paper proposes Megadiﬀ, a novel dataset of source code
diﬀs focusing on Java. Here, a diﬀ is deﬁned as a set of line-based changes made to a
source code ﬁle. Megadiﬀ concentrates on small changes made to Java ﬁles. Megadiﬀ
solves the aforementioned problems with the following characteristics: 1) it is publicly
available on GitHub and Zenodo; 2) the inclusion criteria are systematic; 3) the dataset
contains the raw diﬀ, with all lines of the changed ﬁles, with no exception. 4) Megadiﬀ is
well categorized by diﬀ size, ranging from 1 to 40 lines of code changes, which provides
wider choices for research experiments (in contrast to diﬀs with speciﬁc lines of code
change).

While it is straightforward to take any GitHub repository to study software evolution,
it is diﬃcult to do so at scale. At full scale (with a large number of repositories and
a large number of commits), it is time-consuming to collect, ﬁlter and analyze commits.

1

The design of Megadiﬀ hides this complexity for the researchers, and the scale of Megadiﬀ
results from weeks of computation for data collection and ﬁltering.

To sum up, our contribution is Megadiﬀ, a dataset of source code diﬀs in
the Java programming language. To our knowledge, this is the largest dataset
of Java diﬀs ever.

2 Collection Process

In order to create MegaDiﬀ, we use the BOA platform [4], a domain-speciﬁc language
and infrastructure that eases mining software repositories. BOA platform allows easy
execution queries on several datasets. The queries allow, for example, to look for speciﬁc
AST constructions or ﬁnding commits that have a speciﬁc commit message. In our case,
we use the biggest Boa dataset: “2015 September/GitHub”. It is composed of more than
380,000 code repositories and 23 million commits.

Commit and project inclusion criterion We use the following Boa query to collect

the commit and the projects.

out: output collection[string] of string;
p: Project = input;

exists (l: int; match(‘java‘, lowercase(p.programming_languages[l])))
foreach (i: int; def(p.code_repositories[i]))

foreach (j: int; def(p.code_repositories[i].revisions[j]))

if (isfixingrevision(p.code_repositories[i].revisions[j].log))

out[p.code_repositories[i].revisions[j].id]

<< p.code_repositories[i].url;

This query iterates on all commits of all Java projects from the dataset. If the com-
mit is a ﬁxing commit (see http://boa.cs.iastate.edu/docs/dsl-functions.php#
isfixingrevision), we collect the commit SHA and the URLs of the project.

We execute this query on April 2nd, 2019 which resulted in 4 590 405 unique commit
identiﬁers. Those commits are spread over 101 472 unique GitHub repositories. On April
20, 2019, we have attempted to clone them all and found that 14 816 are no longer
publicly available. At this date, there were 3 934 926 commit identiﬁers from BOA that
are in public and available repositories.

Commit ﬁltering The next step was to ﬁlter the commits. We select commits which:
1) contain changes in at least one Java source ﬁle, 2) contain less than n changed lines of
code in *.java ﬁles (as deﬁned as the sum of added and removed lines, as given by git
diff). We set n = 40 given out storage budget.

Data preparation For each commit, we extract the diﬀ with full context and store
it in a single ﬁle. This means that the source code around and involved in the diﬀ is raw,
unmodiﬁed, unprocessed Java source code.

Finally, Megadiﬀ is composed of 663 029 commits done on Java source code.

2

3 Content

Repository Content Megadiﬀ is available as a Git repository at https://github.com/
monperrus/megadiff and preserved on https://doi.org/10.5281/zenodo.5013515. The
size of Megadiﬀ is 4.6 GB (considering all diﬀ ﬁles compressed).

Folder content The diﬀs are sorted in the folders. Each folder refers to the number
of changed lines (the sum of additions and deletions) in the diﬀ. For instance, folder 2
contains diﬀs with a) 2 added lines;b) 2 deleted lines; c) 1 addition and one deletion.

File content There is one diﬀ ﬁle per commit. The diﬀ can aﬀect diﬀerent ﬁles. The
diﬀs follow the uniﬁed diﬀ format. For sake of storage, all diﬀ ﬁles are compressed with
the XZ utility. The diﬀ ﬁles have the following characteristics:

• The diﬀ ﬁle name is the commit SHA1. Hence, it is possible to use GitHub to search

for ﬁnding the origin of the diﬀ as follows:
https://github.com/search?q=acbfff0a50baaceae0ad1e1160fffa693b50c994&
type=Commits.

• A diﬀ is composed of all Java ﬁle changes (a commit can change several Java ﬁles

at once).

• The diﬀs are given with full context, meaning that both the full ﬁles before and

after the change are present.

• The diﬀs are unﬁltered: most of them contain code changes, but some of them only

contain formatting or documentation changes.

4 Applications

Megadiﬀ can be used in several research topics for researchers aiming at diﬀerent goals.
One major application is the study of how developers evolve software systems. More con-
cretely, source code diﬀs could be analyzed in terms of maintenance activities (corrective:
bug ﬁxing; perfective: system improvements; adaptive: new feature introduction), like
done by Levin and Yehudai [11].

Furthermore, the diﬀs related to particular maintenance activities could be used for
research in speciﬁc research ﬁelds. For example, the diﬀs related to bug ﬁxing could be
used for understanding how developers ﬁx bugs [22, 20, 14].

On a more technical side, diﬀs could even be used to purely evaluate tools. For
instance, Megadiﬀ could be used to evaluate specialized tools that extract features from
diﬀs, e.g. [15]. Note that there exists a usage of Megadiﬀ in this direction: the diﬀs are
used to evaluate an approach for hyperparameter optimization of AST diﬀerencing [17].
Other than understanding source code changes and using them for evaluating ap-
proaches and tools, Megadiﬀ can also be used to feed systems. For instance, the diﬀs can
be used for the training of supervised-machine-learning-based program repair tools, e.g.,
[1]. In that direction, Yu et colleagues use Megadiﬀ to learn source code transformation
and apply the learned model to predict transformation that repair bugs.

3

Table 1: Datasets of Java source code diﬀs.

Dataset

CVS-Vintage [18]
HDRepair [9]
CodRep [2]
Fixminer [8]
IntroClassJava [3]
ManySStuBs4J [7]
Megadiﬀ (this paper)

# Diﬀs

89,993
16,450
58,069
11,416
297
153,652
663 029

5 Related datasets

There are several datasets of source code diﬀs. In this section, we discuss the ones focused
on Java, summarized in Table 1.

Martinez and Monperrus’ CVS-Vontage [18] is a dataset of 89 993 CVS transactions
in Java. The limitations of this dataset are that 1) it is only composed of old Java
software (i.e., written in early versions of the language, with the programming practices
of that time) 2) CVS transactions are ﬁle-based, there is no concept of commit aggregating
changes over diﬀerent ﬁles in CVS.

Le and colleagues [9] have collected 3202 Java diﬀs and shared them in an open-
source repository. Liu et al. [12] consider 16 450 commits over 6 Java projects, shared in
a replication package. Koyuncu et al.
[8] have collected and used 11,416 Java patches.
The scale of those datasets is relatively small. CodRep is a dataset of diﬀs [2], which only
focuses on one-liners (those diﬀs that change a single line). This prevents CodRep to be
representative of larger changes. IntroClassJava from Durieux and Monperrus [3] is the
Java version of IntroClass from Le Goues and colleagues [10], which contains 297 small
buggy programs (5-20 lines) written by students. The dataset also includes the reference
version (correct) of such buggy programs.

There are other related datasets, such as Defects4J [5], Bugs.jar [19], and Bears [16].
These datasets are publicly available and have been useful for research, mainly in au-
tomated program repair. While they make the source code diﬀ of bug ﬁxes available,
they are small in comparison with Megadiﬀ due to their diﬀerent nature of containing
reproducible bugs.

There are many other papers studying diﬀs in the context of mining software repos-
itories, but few have consolidated and shared a dataset. For instance, Zhong and Su
[22] study 15 119 commits in Java software, but they have only shared the metadata of
the commits, not the actual source code of the diﬀs. Soto and colleagues [21] have used
the BOA platform to study Java software evolution, but have not collected the diﬀs.
Karampatsis and Sutton [6] study the changes involved in bug ﬁxes that modify one
single statement. For that, they created a dataset named ManySStuBs4J [7], composed
of 153,652 single statement bug-ﬁx changes mined from 1,000 popular open-source Java
projects. As a diﬀerence, Megadiﬀ includes commits that aﬀect more than one statement.

4

6 Conclusion

Megadiﬀ is a dataset of 663 029 diﬀs of Java source code, taken from open-source projects.
To our knowledge, this is the largest dataset of Java source code diﬀs to date. We envision
that Megadiﬀ will provide useful data for future research about software evolution and
machine learning on code.

References

[1] B. Baudry, Z. Chen, K. Etemadi, H. Fu, D. Ginelli, S. Kommrusch, M. Martinez,
M. Monperrus, J. Ron, H. Ye, and Z. Yu. A software repair bot based on continual
learning. IEEE Software, 2021.

[2] Z. Chen and M. Monperrus. The codrep machine learning on source code competi-

tion. Technical Report 1807.03200, arXiv, 2018.

[3] T. Durieux and M. Monperrus.

IntroClassJava: A Benchmark of 297 Small and

Buggy Java Programs. Technical report, Universite Lille 1, 2016.

[4] R. Dyer, H. Nguyen, H. Rajan, and T. Nguyen. Boa: A language and infrastructure
for analyzing ultra-large-scale software repositories. In ICSE’13, pages 422–431, 2013.

[5] R. Just, D. Jalali, and M. D. Ernst. Defects4J: A Database of Existing Faults to En-
able Controlled Testing Studies for Java Programs. In Proceedings of the 23rd Inter-
national Symposium on Software Testing and Analysis (ISSTA ’14), pages 437–440,
New York, NY, USA, 2014. ACM.

[6] R.-M. Karampatsis and C. Sutton. How often do single-statement bugs occur? the
manysstubs4j dataset. In Proceedings of the 17th International Conference on Mining
Software Repositories, MSR ’20, page 573577, New York, NY, USA, 2020. Association
for Computing Machinery.

[7] R. M. Karampatsis and C. Sutton. Manysstubs4j dataset, Feb. 2020.

[8] A. Koyuncu, K. Liu, T. F. Bissyandé, D. Kim, J. Klein, M. Monperrus, and Y. L.
Traon. Fixminer: Mining relevant ﬁx patterns for automated program repair. Em-
pirical Software Engineering Journal, Springer Verlag, 2020.

[9] X. B. D. Le, D. Lo, and C. L. Goues. History Driven Program Repair.

In Pro-
ceedings of the 23rd International Conference on Software Analysis, Evolution, and
Reengineering (SANER), pages 213–224, 2016.

[10] C. Le Goues, N. Holtschulte, E. K. Smith, Y. Brun, P. Devanbu, S. Forrest, and
W. Weimer. The manybugs and introclass benchmarks for automated repair of c
programs. IEEE Transactions on Software Engineering, 41(12):1236–1256, 2015.

[11] S. Levin and A. Yehudai. Boosting automatic commit classiﬁcation into mainte-
nance activities by utilizing source code changes. In Proceedings of the 13th Interna-
tional Conference on Predictive Models and Data Analytics in Software Engineering,
PROMISE, page 97106, New York, NY, USA, 2017. Association for Computing Ma-
chinery.

5

[12] K. Liu, D. Kim, A. Koyuncu, L. Li, T. F. Bissyand´e, and Y. Le Traon. A closer
look at real-world patches. In Proceedings of the 34th ICSME, pages 275–286. IEEE,
2018.

[13] F. Long and M. Rinard. Automatic patch generation by learning correct code. In
Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles
of Programming Languages, POPL ’16, page 298312, New York, NY, USA, 2016.
Association for Computing Machinery.

[14] F. Madeiral and T. Durieux. A large-scale study on human-cloned changes for au-
tomated program repair. In Proceedings of the 18th IEEE/ACM International Con-
ference on Mining Software Repositories (MSR ’21), Mining Challenge Track, pages
510–514, Los Alamitos, CA, USA, may 2021. IEEE Computer Society.

[15] F. Madeiral, T. Durieux, V. Sobreira, and M. Maia. Towards an automated ap-
proach for bug ﬁx pattern detection. In Proceedings of the 6th Workshop on Software
Visualization, Evolution and Maintenance (VEM ’18), 2018.

[16] F. Madeiral, S. Urli, M. Maia, and M. Monperrus. Bears: An Extensible Java
Bug Benchmark for Automatic Program Repair Studies. In Proceedings of the 26th
IEEE International Conference on Software Analysis, Evolution and Reengineering
(SANER ’19), pages 468–478, Hangzhou, China, 2019. IEEE.

[17] M. Martinez, J.-R. Falleri, and M. Monperrus. Hyperparameter optimization for ast

diﬀerencing. Technical Report 2011.10268, arXiv, 2020.

[18] M. Monperrus and M. Martinez. Conservation and Replication with CVS-Vintage:
A Dataset of CVS Repositories of Java Software. Technical report, University of
Lille, 2012.

[19] R. K. Saha, Y. Lyu, W. Lam, H. Yoshida, and M. R. Prasad. Bugs.jar: A Large-scale,
Diverse Dataset of Real-world Java Bugs. In Proceedings of the 15th International
Conference on Mining Software Repositories (MSR ’18), pages 10–13, New York,
NY, USA, 2018. ACM.

[20] V. Sobreira, T. Durieux, F. Madeiral, M. Monperrus, and M. A. Maia. Dissection of
a Bug Dataset: Anatomy of 395 Patches from Defects4J. In Proceedings of the 25th
IEEE International Conference on Software Analysis, Evolution and Reengineering
(SANER ’18), pages 130–140, Campobasso, Italy, 2018. IEEE.

[21] M. Soto, F. Thung, C.-P. Wong, C. Le Goues, and D. Lo. A deeper look into bug
ﬁxes: patterns, replacements, deletions, and additions. In Proceedings of the 13th
International Conference on Mining Software Repositories, pages 512–515. ACM,
2016.

[22] H. Zhong and Z. Su. An Empirical Study on Real Bug Fixes. In Proceedings of the

37th International Conference on Software Engineering, 2015.

6

