0
2
0
2

t
c
O
0
1

]

G
L
.
s
c
[

1
v
0
9
8
4
0
.
0
1
0
2
:
v
i
X
r
a

Rare-Event Simulation for Neural Network and Random Forest Predictors

YUANLU BAI, Columbia University, USA
ZHIYUAN HUANG, Carnegie Mellon University, USA
HENRY LAM, Columbia University, USA
DING ZHAO, Carnegie Mellon University, USA

We study rare-event simulation for a class of problems where the target hitting sets of interest are defined via modern machine learning

tools such as neural networks and random forests. This problem is motivated from fast emerging studies on the safety evaluation of

intelligent systems, robustness quantification of learning models, and other potential applications to large-scale simulation in which

machine learning tools can be used to approximate complex rare-event set boundaries. We investigate an importance sampling scheme

that integrates the dominating point machinery in large deviations and sequential mixed integer programming to locate the underlying

dominating points. Our approach works for a range of neural network architectures including fully connected layers, rectified linear

units, normalization, pooling and convolutional layers, and random forests built from standard decision trees. We provide efficiency

guarantees and numerical demonstration of our approach using a classification model in the UCI Machine Learning Repository.

Additional Key Words and Phrases: variance reduction, importance sampling, safety evaluation, neural network, random forest, large

deviations

1 INTRODUCTION

Due to the extensive development of artificial intelligence (AI), machine learning techniques have been embedded in

many safety-sensitive physical systems, including autonomous vehicles [68] and unmanned aircraft [66]. In autonomous

vehicles, for instance, machine learning predictors can be applied to many tasks including perception [28, 99], path

planning [42, 105], motion control [94], or end-to-end driving systems [29, 64, 75]. In these tasks, misprediction can

cause catastrophic impacts on public safety, as exemplified by the series of fatal accidents encountered by autonomous

driving systems due to the failures in detecting nearby vehicles or pedestrians (e.g. [18, 19]). To reduce the risk of such

catastrophe, machine learning models in these systems need to be carefully evaluated against safety, especially before

their mass deployment in public.

Recent research considers using probabilistic measures to quantify the risks of machine learning predictors or entire
intelligent physical systems. These measures can be defined in a variety of ways. In robustness evaluation, a prediction
model, with neural network as a dominant example, is considered more robust if it is more likely to make a consistent

prediction under small perturbations on the input [52]. When the perturbation is modeled via a random distribution,

the robustness of neural networks is measured by the probability that the prediction value persists [101–103]. In more

Authors’ addresses: Yuanlu Bai, yb2436@columbia.edu, Columbia University, 500 W. 120th Street, New York, USA; Zhiyuan Huang, zhuang2@andrew.
cmu.edu, Carnegie Mellon University, USA; Henry Lam, henry.lam@columbia.edu, Columbia University, 500 W. 120th Street, New York, USA; Ding Zhao,
dingzhao@cmu.edu, Carnegie Mellon University, USA.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not
made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

© 2020 Association for Computing Machinery.
Manuscript submitted to ACM

Manuscript submitted to ACM

1

 
 
 
 
 
 
2

Bai, Huang, Lam & Zhao

complex intelligent system evaluation, risks can be quantified by the occurrence probabilities of safety-critical events.
These events can be defined as the violation in terms of certain safety metrics (e.g., [41] listed seven potential safety

metrics for autonomous vehicles including crashes per driving hour and disengagements per scenario), and recent studies

use the probabilities of crash or injury in driving tasks as safety metrics [58, 79, 106]. For AI-equipped autonomous

vehicles, the evaluation target would implicitly involve a probabilistic measurement on the embedded machine learning

model. Moreover, in [104], neural networks are further used to approximate sophisticated safety-critical sets defined

from complex system dynamics, and the target probabilities comprise hitting sets defined via these neural network

outputs.

Our study is motivated from the estimation of probabilistic risk measures described above. Due to the complexity

of machine learning predictors, these probabilities are typically unamenable to analytical formulas, even when the

underlying stochastic distribution is fully modeled. This thus calls for the use of Monte Carlo simulation. However,

the target probabilities, which signify the risks of dangerous yet unlikely events, are tiny. The problem thus falls into

the domain of rare-event simulation, in which it is widely known that crude Monte Carlo can be extremely inefficient

and variance reduction is necessarily employed. Traditionally, rare-event simulation techniques (e.g. [25, 63]) have

been applied in broad application areas including queueing systems [11, 12, 15, 38, 69, 84, 89, 95], communication

networks [27, 65, 82], finance [43, 47, 48], insurance [3, 6, 31], reliability [56, 77, 78, 85, 97], biological processes [54, 91],

dynamical systems [39, 100], and combinatorics [9, 10]. The evaluation of machine learning models and intelligent

physical systems that we focus on here is a new application that is propelled rapidly by the growth of AI. Our goal is to

provide a first step into building rare-event simulation algorithms in these applications, which integrate tools from

both the disciplines of machine learning and rare-event simulation, and which are statistically guaranteed in terms of

the classical efficiency notions in the rare-event literature.

More specifically, we study importance sampling (IS) [93] to design efficient estimators. In rare-event estimation,

the rarity nature of hitting set dictates that crude Monte Carlo samples have a low frequency of observing the hitting

occurrence, and this inefficiency exhibits statistically as a large relative error (i.e., ratio of standard deviation to mean)

in the estimation. To mitigate this issue, IS uses an alternate distribution to generate samples that can attain a higher

frequency in hitting the target event, and reweights the outputs to maintain unbiasedness via the likelihood ratios. To

achieve a small relative error, the new generating distribution (i.e., the IS distribution) needs to be carefully selected,

often by analyzing the weights in interaction with the hitting set geometry and the underlying system dynamics [50, 90].

It is known that such analyses are important as ill-designed schemes can lead to significantly biased estimates [49].

In this paper, we follow the above analysis path in the literature and use the common theoretical notion of efficiency

called asymptotic optimality or logarithmic efficiency [7, 56, 63] that we will detail in the sequel.

In terms of our scope of study, we focus on piecewise linear machine learning predictors, which include random

forests and neural networks with common activation functions such as rectified linear units (ReLU). We also assume the

underlying distribution is Gaussian or mixtures of such. Under this setting, we design provably efficient IS schemes to

estimate rare-event probabilities that the prediction outputs hit above certain high thresholds. Our main methodology

integrates the classical notion of dominating points [35, 90] for rare-event sets with sequential mixed integer program-

ming (MIP) to attain an efficient estimator. Intuitively, a dominating point is the highest-density point in the rare-event

set, so that using an IS distribution that shifts the mean to this point (via exponential tilting) gives rise to a distribution

that hits the rare-event set more frequently and the generated likelihood ratio contributes properly to the probability of

interest, which are desirable for controlling the relative error. However, this is only a local characterization. To explain,

the simulation randomness stipulates that some generated samples may have huge likelihood ratios. Controlling these

Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

3

ratios in turn requires a geometric property that, in the Gaussian case, implies the dominating point to be on the

boundary of the rare-event set, and that the latter lies completely inside one of the half-spaces cut by the tangential

hyperplane passing through the dominating point (e.g., these occur when the rare-event set is convex). When this

geometric property does not hold, then one needs to divide the rare-event set into union of smaller sets each bearing

its own dominating point, and an efficient IS scheme is built via a mixture of exponential tiltings targeted at all these

individual dominating points [90]. The sequential MIP in our procedure serves to locate all these dominating points. It

casts each search as a density maximization problem constrained by hitting sets induced from the considered machine

learning model. The involved feasible regions shrink sequentially as we add more “cutting planes" to the constraints in

order to remove the half-spaces that are already considered by earlier dominating points. Our MIPs are derived from

the reformulation techniques that appeared recently in the machine learning literature, which leverage the geometric

structures of ReLU neural networks [96] and random forests [74]. We provide a step-by-step guide in formulating

random forests and different neural network architectures as suitable MIPs to be inserted into our sequential algorithm.

We also provide theoretical results on asymptotic optimality that targets at general piecewise polyhedrals where applies

to our considered rare-event sets. Towards this, we also derive large deviations results for the associated probabilities of

interest.

The paper is organized as follows. Section 2 first provides a brief literature review. Section 3 describes our problem

setting and notations. Section 4 presents our algorithm and theoretical guarantees. Section 5 provides the MIP formu-

lations for random forests and different neural network architectures. Section 6 shows numerical results. Section 7

contains the proofs of theorems.

2 RELATED WORK

A significant line of work studies the use of large deviations to invent efficient IS procedures, which mathematically

identifies the most likely path to trigger a rare event through minimizing the so-called rate function (see, e.g., the

surveys [7, 14, 25, 45, 63, 88]). Among these studies, our approach extends the IS schemes using dominating points

[35, 90]. Similar idea of using half-spaces to split rare-event set is also considered in [2, 80] where the rare-event set is

constrained to be a union of half-spaces and the half-spaces are explicitly given in the setting. The use of sequential

MIP algorithm on an implicitly half-space separable rare-event set distinguishes our work from these studies. To prove

the efficiency of our algorithm, we need to derive the asymptotic result for the rare-event probability of interest. [55]

provides a variety of useful techniques to represent the asymptotic approximation of probability using dominating

points, but some technical modifications need to be made to fit in our settings. Similar to our derivations, [57] represents

the asymptotic of probability on convex sets using dominating points, yet focuses on a different scaling setting from

ours.

Other IS schemes include the cross-entropy method [21, 32, 83, 86, 87] that uses sequential stochastic optimization

to search for an optimal IS distribution in a parametric family. Adaptive IS [1, 22, 34, 67] updates the IS distribution

iteratively between simulated replications to approach the optimal (zero-variance) IS distribution and generates non

i.i.d samples for estimating the target expectation associated with finite-state discrete Markov chains. Another line of

studies use techniques such as Markov-chain Monte Carlo (MCMC) to sample from the rare-event set of interest, or

approximately from the conditional distribution given the occurrence of the rare event [23, 24, 26, 53]. IS schemes have

also been designed for heavy-tailed systems [13, 16, 17, 27, 37, 61, 76], in contrast to the light-tailed settings considered

in this paper. Besides IS, other competing methods for rare-event simulation include conditional Monte Carlo [4, 5] and

splitting [33, 44, 46, 72, 81].

Manuscript submitted to ACM

4

Bai, Huang, Lam & Zhao

In machine learning literature, some studies discuss using probability measure to evaluate the robustness of prediction

models. Since the measure can be extremely small, rare-event simulation techniques are considered in these studies.

[102] discusses an adaptive multilevel splitting approach to estimate the statistical robustness of machine learning

models. [98] proposes to learn a failure probability predictor to approximate the minimum variance IS distribution

in estimating agent failure probabilities. [103] proposes an approach to compute the lower and upper bounds for a

probabilistic robustness measure. The topic of these works is one of our key motivations, and our work can be viewed

as a step towards the provision of rigorous guarantees for methodologies driven by these applications.

Lastly, another related line of research studies optimization problems with machine learning models in the objective.

[74] discusses the optimization of tree ensemble models and provides treatment for large scale problems. [96] formulates

the robustness verification of neural networks as MIP problems. These studies leverage the piecewise linear property of

these machine learning models to turn optimization on the prediction output into tractable MIPs. Our MIP formulations

for finding dominating points follow from these optimization studies.

3 PROBLEM SETTING

3.1 Rare-Event Probability Estimation
We state our problem setting. Consider a prediction model 𝑔(·), with input 𝑋 ∈ R𝑑 and output 𝑔(𝑋 ) ∈ R. Suppose
that the input follows a Gaussian distribution, i.e, 𝑋 ∼ 𝑁 (𝜇, Σ), where Σ is a 𝑑 × 𝑑 positive definite matrix. We want
to estimate the probability 𝑝 = 𝑃 (𝑔(𝑋 ) ≥ 𝛾), where 𝛾 ∈ R is a threshold that triggers a rare event. We note that the
Gaussian assumption can be relaxed without much difficulty in our framework to, for instance, mixtures of Gaussians,

which we will discuss later and can expand our scope of applicability.

This problem setting is related to risk assessments involving machine learning models, as exemplified below.

Example 3.1 (Statistical Robustness Metric [102, 103]). Consider a classification model that predicts using “score
functions” 𝑔𝑖 (·) with 𝑖 = 1, .., 𝐾 where 𝐾 denotes the number of categories. The predicted output is the category that has
the maximum score, i.e. the prediction at 𝑋 is given by arg max𝑖 𝑔𝑖 (𝑋 ). Suppose an example input 𝑥0 belongs to category
𝑐. A classification model is robust if it gives correct prediction for all 𝑥 such that 𝑑 (𝑥, 𝑥0) ≤ 𝜖 where 𝑑 denotes a certain
distance and 𝜖 > 0 is a small real number. A statistical robustness metric considers 𝑝 = 𝑃 (max𝑖 𝑔𝑖 (𝑋 ) − 𝑔𝑐 (𝑋 ) ≥ 0),
where 𝑋 follows a distribution concentrated around 𝑥0. Here 𝑝 represents the probability that the output is inconsistent
with the baseline prediction at 𝑥0.

Example 3.2 (Risk Evaluation of Intelligent Physical Systems [36]). Consider an intelligent physical system that embeds
a machine learning predictor 𝑔, so that the decision of the system given an input 𝑋 can be expressed as ℎ(𝑔(𝑋 )). The
probability 𝑃 (ℎ(𝑔(𝑋 )) ∈ 𝑆), where 𝑆 represents a risky region, can be used to measure the risk of the system decision.
In most cases, ℎ is random by itself and can have a different complexity structure than the function class 𝑔. In this paper,
we consider a rare-event probability in the form of 𝑃 (𝑔(𝑋 ) ≥ 𝛾) as a first step of study in this direction.

Example 3.3 (Probability Evaluation for Learned Rare-Event Set [104]). When the rare-event set is very complicated
(e.g., in autonomous driving contexts), one approach to retain tractability is to approximate or learn the rare-event
set via classification tools. Given historical or simulated data {𝑋, 𝑌 }, where 𝑌 ∈ {0, 1} denotes whether a rare-event
(e.g. a crash) occurs to the system of interest under input 𝑋 , we train a neural network 𝑔(·) to classify the rare-event
region given 𝑋 . The learned rare-event set is represented by {𝑥 : 𝑔(𝑥) ≥ 𝛾 }, where 𝛾 is the threshold for classifying
Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

5

rare-event (e.g. 𝛾 = 0.5). Since {𝑥 : 𝑔(𝑥) ≥ 𝛾 } is an approximation of the true rare-event set, 𝑝 = 𝑃 (𝑔(𝑋 ) ≥ 𝛾) provides
an approximation on the probability of the rare event.

It is known that neural networks can be vulnerable to adversarial attacks, in that a tiny perturbation in the input

can exert a large effect on the prediction output [52], and such a perturbed input is considered as an adversarial

example. Studies have discussed how to find these adversarial examples [70] and to conduct adversarial learning [71].

Among them, Example 3.1 is an example of a probabilistic measure on how likely adversarial examples appear around a

certain input. Examples 3.2 and 3.3, on the other hand, represent endeavors to tackle safety-critical problems driven by

applications involving AI systems, which can embed machine learning models or are approximated by them.

3.2 Importance Sampling

When 𝑝 is small, estimation using crude Monte Carlo is challenging since, intuitively, the samples have a low frequency

of hitting the target set. This is statistically manifested as a large relative error. To be more specific, suppose that we
use the crude Monte Carlo estimator ˆ𝑝𝑁 = 1
𝑖=1 𝐼 (𝑔(𝑋𝑖 ) ≥ 𝛾) to estimate 𝑝. Since the probability 𝑝 is tiny, the error
𝑁
of the estimator should be measured relative to the size of 𝑝. In other words, we would like the probability of having a
large relative error to be small, i.e., 𝑃 (| ˆ𝑝𝑁 − 𝑝 | > 𝜀𝑝) ≤ 𝛿 where 𝛿 is the confidence level and 0 < 𝜀 < 1. By Markov’s
inequality, a sufficient condition for this is

(cid:205)𝑁

𝑉 𝑎𝑟 (𝐼 (𝑔(𝑋 ) ≥ 𝛾))
𝛿𝜀2𝐸 [𝐼 (𝑔(𝑋 ) ≥ 𝛾)]2 =
where 𝑅𝐸 = √︁𝑉 𝑎𝑟 (𝐼 (𝑔(𝑋 ) ≥ 𝛾))/𝐸 [𝐼 (𝑔(𝑋 ) ≥ 𝛾)] is the relative error. For the crude Monte Carlo estimator, the RE is
given by √︁(1 − 𝑝)/𝑝. That is, the simulation size 𝑁 has to be roughly proportional to 1/𝑝 in order to achieve a given
relative error. Under the settings that 𝑋 has a Gaussian distribution and 𝑔 is piecewise linear (see Corollary 4.3), 𝑝 is

𝑁 ≥

.

𝑅𝐸2
𝛿𝜖2

exponentially small in the threshold level 𝛾, and hence the required simulation size would grow exponentially in 𝛾.

A common approach to speed up simulation in such contexts is to use IS (see, e.g. the surveys [7, 14, 25, 45, 63, 88],
among others). Suppose 𝑋 has a density 𝑓 . The basic idea of IS is to change the sampling distribution to say ˜𝑓 , and
output

𝑍 = 𝐼 (𝑔( ˜𝑋 ) ≥ 𝛾)

𝑓 ( ˜𝑋 )
˜𝑓 ( ˜𝑋 )

,

(1)

where ˜𝑋 is sampled from ˜𝑓 . This output is unbiased if 𝑓 is absolutely continuous with respect to ˜𝑓 over the rare-event
set {𝑥 : 𝑔(𝑥) ≥ 𝛾 }. By choosing ˜𝑓 appropriately, one can substantially reduce the simulation variance.

To measure the efficiency of an IS scheme, we introduce a rarity parameter, say 𝛾, that parametrizes the rare-event
probability 𝑝𝛾 such that 𝑝𝛾 → 0 as 𝛾 → ∞. As discussed before, since the probability of interest is small, one should
focus on the relative error of the Monte Carlo estimator with respect to the magnitude of this probability. To this end,
we call an IS estimator 𝑍𝛾 for 𝑝𝛾 asymptotically optimal [7, 63] if

log ˜𝐸 [𝑍 2
𝛾 ]
log ˜𝐸 [𝑍𝛾 ]

lim
𝛾→∞

= 2,

(2)

where ˜𝐸 denotes the expectation with regard to ˜𝑓 . The notion (2) is equivalent to saying that ˜𝐸 [𝑍 2
𝛾 ]/ ˜𝐸 [𝑍𝛾 ]2 is at most
polynomially growing in 𝛾. This ensures that the second moment, or the variance, does not explode exponentially

relative to the probability of interest as 𝛾 increases, thus preventing an exponentially large number of simulation

Manuscript submitted to ACM

6

Bai, Huang, Lam & Zhao

replications to achieve a given relative accuracy. We will use asymptotic optimality as our efficiency criterion in this

paper.

Another commonly used efficiency criterion is the bounded relative error, which is defined as

lim sup
𝛾→∞

˜𝐸 [𝑍 2
𝛾 ]
˜𝐸 [𝑍𝛾 ]2

< ∞.

This is a stronger condition than asymptotic optimality. More efficiency criteria can be found in [62, 73].

4 EFFICIENT IMPORTANCE SAMPLING VIA SEQUENTIAL MIXED INTEGER PROGRAMMING
In the case of Gaussian input distributions, finding a good ˜𝑓 is particularly handy and one approach to devise good
IS distributions uses the notion of so-called dominating point. As explained in the introduction, a dominating point

can be understood as the highest-density point in the rare-event set that satisfies some conditions. More precisely, the

collection of dominating points for a rare-event set with Gaussian distributed input is defined in Definition 4.1.

Definition 4.1. Suppose that a set 𝐴 ⊂ R𝑑 satisfies that 𝑆 ⊂ (cid:208)𝑎 ∈𝐴{𝑥 : (𝑎 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎) ≥ 0} and that 𝑎 =
arg min𝑥 {(𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇) : 𝑥 ∈ 𝑆 and (𝑎 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎) ≥ 0} for any 𝑎 ∈ 𝐴. Moreover, suppose that the above
conditions do not hold anymore if we remove any element from 𝐴. Then the points in 𝐴 are called the dominating
points of 𝑆 with input distribution 𝑁 (𝜇, Σ).

Note that minimizing (𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇) is equivalent to maximizing 𝜙 (𝑥; 𝜇, Σ), the Gaussian density with mean 𝜇
and covariance Σ. The condition 2(𝑎 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎) ≥ 0 is the first-order condition of optimality for the optimization
min𝑥 (𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇) over a convex set for 𝑥. Thus, intuitively, each dominating point in the collection 𝐴 can be
viewed as the highest-density point in a “local" region formed by 𝑆 ∩ {𝑥 : (𝑎 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎) ≥ 0}. In particular, if
{𝑥 : 𝑔(𝑥) ≥ 𝛾 } is a convex set, then there is only one dominating point 𝑎. In this case, a well-known IS scheme is to use
a Gaussian distribution 𝑁 (𝑎, Σ) as the IS distribution ˜𝑓 .

We explain intuitively why we need more than one dominating point (the highest-density point over 𝑆) and the

pitfall if we omit the other ones in constructing efficient IS. Suppose that the rare-event set consists of two disconnected

convex components which are nearly equi-distant with respect to the origin, and we choose the IS distribution to be

centered at the dominating point of one component. Then, if a sample from the IS distribution hits the other component,

a scenario that could be unlikely but possible, the resulting likelihood ratio, which now contributes to the output as the

rare-event set is hit, could possibly be tremendous. This ultimately leads to an explosion of the relative error in the

IS estimator. [49] presents more counterexamples which show that it is essential to find all the dominating points in

constructing an efficient IS based on mixtures.

In view of the aforementioned discussions, we consider the following IS scheme. If we can split {𝑥 : 𝑔(𝑥) ≥ 𝛾 } into
R1, ..., R𝑟 , and for each R𝑖, 𝑖 = 1, ..., 𝑟 there exists a dominating point 𝑎𝑖 such that 𝑎𝑖 = arg min𝑥 {(𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇) :
𝑥 ∈ R𝑖 } and R𝑖 ⊆ {𝑥 : (𝑎𝑖 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎𝑖 ) ≥ 0}, then we use a Gaussian mixture distribution with 𝑟 components as
the IS distribution ˜𝑓 , where the 𝑖th component has mean 𝑎𝑖 . This proposal guarantees the asymptotic optimality of the
IS (see Theorem 4.2).

In our task, because the machine learning predictor 𝑔(𝑥) is nonlinear and 𝑥 is high-dimensional in general, splitting
{𝑥 : 𝑔(𝑥) ≥ 𝛾 } into R1, ..., R𝑟 that have dominating points is challenging even with known parameters. This challenge
motivates us to use Algorithm 1 to obtain the dominating points 𝑎1, ..., 𝑎𝑟 that constructs an efficient IS distribution.
The procedure uses a sequential “cutting plane" approach to exhaustively look for all dominating points, by reducing

Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

7

the search space at each iteration via taking away the regions covered by found dominating points. The set 𝐴 in the

procedure serves to store the dominating points we have located throughout the procedure. At the end of the procedure,
we obtain a set 𝐴 that contains all the dominating points 𝑎1, ..., 𝑎𝑟 .

Algorithm 1: Procedure to find all dominating points for the set {𝑥 : 𝑔(𝑥) ≥ 𝛾 }.
Input: Prediction model 𝑔(𝑥), threshold 𝛾, input distribution 𝑁 (𝜇, Σ).
Output: dominating point set 𝐴.

1 Start with 𝐴 = ∅;
2 While {𝑥 : 𝑔(𝑥) ≥ 𝛾, (𝑎𝑖 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎𝑖 ) < 0, ∀𝑎𝑖 ∈ 𝐴} ≠ ∅ do
Find a dominating point 𝑎 by solving the optimization problem

3

𝑎 = arg min

(𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇)

𝑥
𝑠.𝑡 . 𝑔(𝑥) ≥ 𝛾

(3)

and update 𝐴 ← 𝐴 ∪ {𝑎};

4 End

(𝑎𝑖 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎𝑖 ) < 0, ∀𝑎𝑖 ∈ 𝐴

Algorithm 1 gives 𝐴 = {𝑎1, . . . , 𝑎𝑟 }. With this, we split {𝑥 : 𝑔(𝑥) ≥ 𝛾 } into R1, . . . , R𝑟 where R𝑖 = {𝑥 : 𝑔(𝑥) ≥
𝛾, (𝑎𝑖 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎𝑖 ) ≥ 0, (𝑎 𝑗 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎 𝑗 ) ≤ 0, ∀𝑗 < 𝑖}. Clearly 𝑎𝑖 = arg min{(𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇) : 𝑥 ∈ R𝑖 } and
(𝑎1 − 𝜇)𝑇 Σ−1 (𝑎1 − 𝜇) ≤ · · · ≤ (𝑎𝑟 − 𝜇)𝑇 Σ−1 (𝑎𝑟 − 𝜇). Moreover, we note that (𝑎1 − 𝜇)𝑇 Σ−1 (𝑎1 − 𝜇) = min𝑖=1,...,𝑟 {(𝑎𝑖 −
𝜇)𝑇 Σ−1 (𝑎𝑖 − 𝜇)}.

Given the dominating point set 𝐴 we use

as the IS distribution. That is, the IS estimator is

1
𝑟

𝑁 (𝑎1, Σ) + · · · +

1
𝑟

𝑁 (𝑎𝑟 , Σ)

𝑍 = 𝐼 (𝑔( ˜𝑋 ) ≥ 𝛾)𝐿( ˜𝑋 )

(4)

where ˜𝑋 ∼ ˜𝑓 and 𝐿, the likelihood ratio, is defined as

𝑟𝑒− 1
2 (𝑥−𝑎1)𝑇 Σ−1 (𝑥−𝑎1) + · · · + 𝑒− 1
As a summary, after computing the dominating points 𝐴 = {𝑎1, . . . , 𝑎𝑟 } using Algorithm 1, we estimate the probability

2 (𝑥−𝑎𝑟 )𝑇 Σ−1 (𝑥−𝑎𝑟 )

2 (𝑥−𝜇)𝑇 Σ−1 (𝑥−𝜇)

𝑓 (𝑥)
˜𝑓 (𝑥)

𝐿(𝑥) =

𝑒− 1

=

.

of interest via Algorithm 2.

Algorithm 2: Construct the IS estimator with all the dominating points.
Input: Prediction model 𝑔(𝑥), threshold 𝛾, dominating points 𝐴 = {𝑎1, . . . , 𝑎𝑟 }, simulation size 𝑁 .
Output: Estimated rare-event probability ˆ𝑝.
𝑟 𝑁 (𝑎1, Σ) + · · · + 1
𝑖=1 𝐼 (𝑔( ˜𝑋𝑖 ) ≥ 𝛾)𝐿( ˜𝑋𝑖 ) where
(cid:205)𝑁

1 Generate ˜𝑋1, . . . , ˜𝑋𝑁 ∼ 1
2 Compute ˆ𝑝 = 1
𝑁

𝑟 𝑁 (𝑎𝑟 , Σ);

𝐿(𝑥) =

3 End

𝑟𝑒− 1
2 (𝑥−𝑎1)𝑇 Σ−1 (𝑥−𝑎1) + · · · + 𝑒− 1

2 (𝑥−𝜇)𝑇 Σ−1 (𝑥−𝜇)

𝑒− 1

2 (𝑥−𝑎𝑟 )𝑇 Σ−1 (𝑥−𝑎𝑟 )

;

Manuscript submitted to ACM

8

Bai, Huang, Lam & Zhao

The efficiency guarantee of the proposed IS estimator (4) is given by:

Theorem 4.2. Suppose that the input 𝑋 ∼ 𝑁 (𝜇, Σ) and the prediction model 𝑔(·) is a piecewise linear function such
is at most

that 𝑃 (𝑔(𝑋 ) ≥ 𝛾) > 0 for any 𝛾 ∈ R. The IS estimator 𝑍 is defined in (4). Then we have that ˜𝐸 [𝑍 2]/ ˜𝐸 [𝑍 ]2
polynomially growing in 𝛾. That is, 𝑍 is asymptotically optimal.

Theorem 4.2 is proved by constructing an upper bound for the relative error, which in turn depends on the asymptotic

approximation of probability on polytope sets using dominating points. Our proof leverages the results in [55] on the tail
exceedance asymptotic of 𝑃 (𝑁 (0, Σ𝑛) ≥ 𝑡𝑛) where ∥𝑡𝑛 ∥ → ∞ as 𝑛 → ∞, but requires substantial generalization. Note
that Theorem 4.2 only makes the very general assumptions that 𝑔 is piecewise linear and the probability 𝑃 (𝑔(𝑋 ) ≥ 𝛾) is
nondegenerate (i.e., non-zero) for any 𝛾 ∈ R. Our result applies to, for example, the probability 𝑃 (𝐴𝑋 ≥ 𝑡) where 𝐴 is a
constant matrix and 𝑡 − 𝛾𝑒1 is a constant vector (here, 𝑒1 = (1, 0, . . . , 0)𝑇 ). If 𝐴𝐴𝑇 is not invertible, then it is not easily
reducible to the setting studied in [55]. To achieve a general result, we carefully construct a superset and a subset of the

rare-event set to derive tight enough upper and lower bounds for the probability of interest, in which we analyze the

involved asymptotic integrals instead of using the conditional probability representation in [55] that is not directly

applicable in our setting. For the detailed proof, please refer to Section 7.

A by-product in deriving Theorem 4.2 is the large deviations probability asymptotic for 𝑃 (𝑔(𝑋 ) ≥ 𝛾):

Corollary 4.3. Suppose that the input 𝑋 ∼ 𝑁 (𝜇, Σ) and the prediction model 𝑔(·) is a piecewise linear function such
that 𝑃 (𝑔(𝑋 ) ≥ 𝛾) > 0 for any 𝛾 ∈ R. Denote 𝑎 = arg min{(𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇) : 𝑔(𝑥) ≥ 𝛾 }. Then − log 𝑃 (𝑔(𝑋 ) ≥ 𝛾) =
(1 + 𝑜 (1))(𝑎 − 𝜇)𝑇 Σ−1 (𝑎 − 𝜇)/2 as 𝛾 → ∞. In particular, 𝑃 (𝑔(𝑋 ) ≥ 𝛾) is exponentially small in 𝛾.

The theoretical guarantee given by Theorem 4.2 justifies the sequential MIP algorithm for searching dominating

points. The resulting mixture IS distribution is asymptotically optimal. We point out some related works that use

mixture distributions that are related to our proposed method. In [2, 80], mixture IS distributions are constructed based

on separating rare-event set with half-spaces. However, in these works, the rare-event set is restricted to be a union of

half-spaces, and these half-spaces are assumed to be known. The use of Algorithm 1 allows us to deal with more general

rare-event sets. Moreover, in relation to Corollary 4.3, we also mention the work [57] that derives an asymptotic result

for Gaussian probabilities using dominating points. However, they focus on convex hitting sets where the entire set is

scaled with a rarity parameter, which is different from our settings. First, our rare-event set is not necessarily convex.

Second, even if we separate our rare-event set into the union of convex sets, their results still cannot be applied, since

in our settings some linear constraints are allowed to be fixed instead of scaling with 𝛾.

The proposed IS scheme can be extended to problems with Gaussian mixture inputs. Suppose the Gaussian mixture
has 𝑚 components, so that 𝑋 ∼ (cid:205)𝑚
𝑗=1 𝜋 𝑗 𝑁 (𝜇 𝑗 , Σ 𝑗 ). For each component 𝑗, we implement Algorithm 1 with input
distribution 𝑁 (𝜇 𝑗 , Σ 𝑗 ) to obtain dominating point set 𝐴𝑗 (with cardinality 𝑟 𝑗 ). The proposed IS distribution is given by
˜𝑓 (𝑥) = (cid:205)𝑚
𝑗=1

𝑖=1 1/𝑟 𝑗 𝜋 𝑗 𝑁 (𝑎 𝑗𝑖, Σ 𝑗 ). We summarize the procedure as Algorithm 3.

(cid:205)𝑟 𝑗

Similar to Algorithm 2, we have the efficiency guarantee for Algorithm 3:

Corollary 4.4. Suppose that the input 𝑋 ∼ (cid:205)𝑚

𝑗=1 𝜋 𝑗 𝑁 (𝜇 𝑗 , Σ 𝑗 ) and the prediction model 𝑔(·) is a piecewise linear
function such that 𝑃 (𝑔(𝑋 ) ≥ 𝛾) > 0 for any 𝛾 ∈ R. The IS estimator 𝑍 is defined as 𝐼 (𝑔( ˜𝑋 ) ≥ 𝛾)𝐿( ˜𝑋 ) where ˜𝑋 ∼
(cid:205)𝑚
is at most polynomially

(cid:205)𝑟 𝑗
𝑖=1 1/𝑟 𝑗 𝜋 𝑗 𝑁 (𝑎 𝑗𝑖, Σ 𝑗 ) and 𝐿(𝑥) is as defined in (5). Then we have that ˜𝐸 [𝑍 2]/ ˜𝐸 [𝑍 ]2

𝑗=1

growing in 𝛾. That is, 𝑍 is asymptotically optimal.

When we apply Algorithm 1 to find all dominating points, the key is to be able to solve the optimization problems in

(3). We will investigate this in the next section.

Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

9

Algorithm 3: Procedure for Gaussian mixture distributed input.
Input: Prediction model 𝑔(𝑥), threshold 𝛾, input distribution (cid:205)𝑚
Output: Estimated rare-event probability ˆ𝑝.

𝑗=1 𝜋 𝑗 𝑁 (𝜇 𝑗 , Σ 𝑗 ), simulation size 𝑁 .

1 Implement Algorithm 1 with input distribution 𝑁 (𝜇 𝑗 , Σ 𝑗 ) to get 𝐴𝑗 = {𝑎 𝑗1, . . . , 𝑎 𝑗𝑟 𝑗 };
2 Generate ˜𝑋1, . . . , ˜𝑋𝑁 ∼ (cid:205)𝑚
𝑖=1 1/𝑟 𝑗 𝜋 𝑗 𝑁 (𝑎 𝑗𝑖, Σ 𝑗 );
𝑗=1
3 Compute ˆ𝑝 = 1
𝑁

(cid:205)𝑟 𝑗

𝑖=1 𝐼 (𝑔( ˜𝑋𝑖 ) ≥ 𝛾)𝐿( ˜𝑋𝑖 ) where
(cid:205)𝑁
2 𝑒− 1
𝑗=1 𝜋 𝑗 |Σ 𝑗 |− 1
(cid:205)𝑚
(cid:205)𝑟 𝑗
𝑖=1 1/𝑟 𝑗 𝜋 𝑗 |Σ 𝑗 |− 1

𝐿(𝑥) =

(cid:205)𝑚

𝑗=1

2 (𝑥−𝜇 𝑗 )𝑇 Σ−1

𝑗 (𝑥−𝜇 𝑗 )

2 𝑒− 1

2 (𝑥−𝑎 𝑗𝑖 )𝑇 Σ−1

𝑗 (𝑥−𝑎 𝑗𝑖 )

;

(5)

4 End

5 TRACTABLE OPTIMIZATION FORMULATION FOR PREDICTION MODELS

We discuss how to formulate the optimization problems in Algorithm 1 as an MIP with quadratic objective function and

linear constraints. Sections 5.1 and 5.2 focus on random forest and neural network structures respectively.

5.1 Tractable Formulation for Random Forest

To look for dominating points in a random forest or tree ensemble, we follow the route in [74] that studies optimization

over these models. We consider a random forest as follows. The input 𝑥 has 𝑑 dimensions. Suppose the model consists
of 𝑇 trees 𝑓1, ..., 𝑓𝑇 . In each tree 𝑓𝑡 , we use 𝑎𝑖,𝑗 to denote the 𝑗th unique split point for the 𝑖th dimension of the input 𝑥,
such that 𝑎𝑖,1 < 𝑎𝑖,2 < ... < 𝑎𝑖,𝐾𝑖

, where 𝐾𝑖 is the number of unique split points for the 𝑖th dimension of 𝑥.

Following the notations in [74], let leaves(𝑡) be the set of leaves (terminal nodes) of tree 𝑡 and splits(𝑡) be the
set of splits (non-terminal nodes) of tree 𝑡. In each split 𝑠, we let left(𝑠) be the set of leaves that are accessible from
the left branch (the query at 𝑠 is true), and right(𝑠) be the set of leaves that are accessible from the right branch (the
query at 𝑠 is false). For each node 𝑠, we use V(𝑠) ∈ {1, ..., 𝑑 } to denote the dimension that participate in the node and
C(𝑠) ∈ {1, ..., 𝐾V(𝑠) } to denote the set of values of dimension 𝑖 that participate in the split query of 𝑠 (C(𝑠) = { 𝑗 } and
V(𝑠) = {𝑖} indicate the query 𝑥𝑖 ≤ 𝑎𝑖,𝑗 ). We use 𝜆𝑡 to denote the weight of tree 𝑡 ((cid:205)𝑇
𝑡 =1 𝜆𝑡 = 1). For each 𝑙 ∈ leaves(𝑡),
𝑝𝑡,𝑙 denotes the output for the 𝑙th leaf in tree 𝑡.

To formulate the random forest optimization as an MIP, we introduce binary decision variables 𝑧𝑖,𝑗 and 𝑦𝑡,𝑙 . First, we

have

𝑧𝑖,𝑗 = 𝐼 (𝑥𝑖 ≤ 𝑎𝑖,𝑗 ), 𝑖 = 1, ..., 𝑑, 𝑗 = 1, ..., 𝐾𝑖 .

(6)

We then use 𝑦𝑡,𝑙 = 1 to denote that tree 𝑡 outputs the prediction value 𝑝𝑡,𝑙 on leaf 𝑙, and 𝑦𝑡,𝑙 = 0 otherwise. We use z, y
to represent the vectors of 𝑧𝑖,𝑗 and 𝑦𝑡,𝑙 respectively. For the input 𝑥, we assume that 𝑥 ∈ [−𝐵, 𝐵]𝑑 and |𝑎𝑖,𝑗 | ≤ 𝐵. Then
(6) is represented by the following constraints

𝑥𝑖 ≤ 𝑎𝑖,𝑗 + 2(1 − 𝑧𝑖,𝑗 )𝐵

𝑥𝑖 > 𝑎𝑖,𝑗 − 2𝑧𝑖,𝑗 𝐵.

Manuscript submitted to ACM

10

Bai, Huang, Lam & Zhao

Now we formulate (3) with 𝐴 = ∅ as the following MIP

min
𝑥,y,z

𝑠.𝑡 .

(𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇)

𝑇
∑︁

𝑡 =1

∑︁

𝜆𝑡 𝑝𝑡,𝑙𝑦𝑡,𝑙 ≥ 𝛾

𝑙 ∈leaves(𝑡 )
∑︁

𝑦𝑡,𝑙 = 1, ∀𝑡 ∈ {1, ...,𝑇 }

(7)

𝑙 ∈leaves(𝑡 )
∑︁

𝑦𝑡,𝑙 ≤

∑︁

𝑧V(𝑠),𝑗 , ∀𝑡 ∈ {1, ...,𝑇 }, 𝑠 ∈ splits(𝑡)

𝑙 ∈left(𝑠)
∑︁

𝑗 ∈C(𝑠)
𝑦𝑡,𝑙 ≤ 1 −

∑︁

𝑧V(𝑠),𝑗 , ∀𝑡 ∈ {1, ...,𝑇 }, 𝑠 ∈ splits(𝑡)

𝑗 ∈C(𝑠)
𝑙 ∈right(𝑠)
𝑧𝑖,𝑗 ≤ 𝑧𝑖,𝑗+1, ∀𝑖 ∈ {1, ..., 𝑑 }, 𝑗 ∈ {1, ..., 𝐾𝑖 − 1}

𝑧𝑖,𝑗 ∈ {0, 1}, ∀𝑖 ∈ {1, ..., 𝑑 }, 𝑗 ∈ {1, ..., 𝐾𝑖 }

𝑦𝑡,𝑙 ≥ 0, ∀𝑡 ∈ {1, ...,𝑇 }, 𝑙 ∈ leaves(𝑡)

𝑥𝑖 ≤ 𝑎𝑖,𝑗 + 2(1 − 𝑧𝑖,𝑗 )𝐵, ∀𝑖 ∈ {1, ..., 𝑑 }, 𝑗 ∈ {1, ..., 𝐾𝑖 }

𝑥𝑖 > 𝑎𝑖,𝑗 − 2𝑧𝑖,𝑗 𝐵, ∀𝑖 ∈ {1, ..., 𝑑 }, 𝑗 ∈ {1, ..., 𝐾𝑖 }.

This formulation has a quadratic objective function and linear constraints. Similarly, we can formulate (3) with 𝐴 ≠ ∅
by adding linear constraints (𝑎𝑖 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎𝑖 ) < 0, ∀𝑎𝑖 ∈ 𝐴 to (7). Note that both the number of decision variables
and the number of constraints are linearly dependent on the total number of nodes in the random forest.

5.2 Tractable Formulation for Neural Network

A neural network 𝑔(·) is a network that connects a large number of computational units (known as neurons) [30, 51].
According to its task, a network has a specific architecture that usually involves multiple layers of neurons and different

operations over the neurons. For simplification, here we consider layers with consecutive architecture and each layer of

the neural network only contains one specific structure.

The key part of the reformulation is to deal with the non-linearity brought by the maximum function. Our treatment

of the maximum function follows from [96], which rewrites neural network structures into linear equations with binary

variables.

In order to obtain tractable formulation for the constraint 𝑔(𝑥) ≥ 𝛾, we independently handle each single layer in
𝑔(·). Assume we have 𝑙 layers in 𝑔(·), where 𝑔𝑖 (·) denotes the 𝑖th layer. Given input 𝑥, the output of the neural network
can be represented as 𝑔(𝑥) = 𝑔𝑙 (𝑔𝑙−1 (...𝑔1 (𝑥))). For convenience, we introduce 𝑥𝑖 to denote the output of the 𝑖th layer
(note that it is also the input for the 𝑖 + 1th layer). In other words, for the 𝑖th layer we have 𝑥𝑖 = 𝑔𝑖 (𝑥𝑘−1). Using these

Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

11

notations, we can transform the constraint 𝑔(𝑥) ≥ 𝛾 into a sequence of constraints:

𝑥𝑙 ≥ 𝛾,
𝑥𝑙 = 𝑔𝑙 (𝑥𝑙−1),
𝑥𝑙−1 = 𝑔𝑙−1 (𝑥𝑙−2),
...,
𝑥1 = 𝑔1 (𝑥).

This transformation makes clear that the constraints altogether are tractable if the constraint for each layer (i.e.
𝑥𝑖 = 𝑔𝑖 (𝑥𝑘−1)) is tractable . Note that both the number of decision variables and the number of constraints are linearly
dependent on the total number of neurons in the neural network. In the rest of this section, we discuss the reformulation

of neural network layers concerning different structures.

Fully Connected Layer. In a fully connected layer, each neuron performs a linear transformation on the input. We
5.2.1
consider a layer with 𝑛 neurons and the input for this layer is a vector 𝑥 ∈ R𝑚. We use 𝑤𝑖 ∈ R𝑚 and 𝑏𝑖 ∈ R to denote
the weight and bias respectively for the linear transformation in the 𝑖th neuron. Then the output of the 𝑖th neuron can
be represented by 𝑦𝑖 = 𝑤𝑇

𝑖 𝑥 + 𝑏𝑖 . To summarize, the output of the layer, 𝑦 = [𝑦1; 𝑦2; ...; 𝑦𝑛] ∈ R𝑛, is given by

where 𝑊 = [𝑤1, 𝑤2, ..., 𝑤𝑛] and 𝑏 = [𝑏1; 𝑏2; ...; 𝑏𝑛].

𝑦 = 𝑊 𝑇 𝑥 + 𝑏,

5.2.2 ReLU Layer. In a rectified linear unit (ReLU) layer, negative elements in the input are replaced by 0’s. For the 𝑖th
input, the output is given by 𝑦𝑖 = 𝑚𝑎𝑥 {𝑥𝑖, 0}. This can be represented by

𝑦𝑖 ≤ 𝑥𝑖 − 𝑙 (1 − 𝑧𝑖 ),

𝑦𝑖 ≥ 𝑥𝑖,

𝑦𝑖 ≤ 𝑢𝑧𝑖,

𝑦𝑖 ≥ 0,

𝑧𝑖 ∈ {0, 1} ,

where 𝑧𝑖 ∈ {0, 1} is a binary variable, 𝑢 and 𝑙 are the upper and lower bounds of the input respectively.

5.2.3 Normalization Layer. In a normalization layer, the input is normalized and linearly transformed to make the
gradient decent algorithm more efficient. Again we assume the input is 𝑥 ∈ R𝑚 with a given normalization parameter
𝜇 ∈ R𝑚 and Σ ∈ R𝑚×𝑚. Moreover, we have the transformation matrix 𝛾 ∈ R𝑚×𝑚 and bias vector 𝛽 ∈ R𝑚. The output
is given by

𝑦 = 𝛾

(cid:16)Σ−1/2 (𝑥 − 𝜇)

(cid:17)

+ 𝛽.

5.2.4 Pooling Layer. In a pooling layer, a “filter” that can be applied to adjacent elements in a vector or matrix goes
through the input with a certain stride. Such type of layer is used to summarize “local” information and reduce the

dimension of the input. Max pooling and average pooling are two types of commonly used filters.

Manuscript submitted to ACM

12

Bai, Huang, Lam & Zhao

Suppose the input is represented by matrix 𝑥 ∈ R𝑚1×𝑚2 , where 𝑥𝑖 𝑗 denotes the element in the 𝑖th row 𝑗th column.
The size of the filter is 𝑠1 × 𝑠2 with stride (𝑠1, 𝑠2). The output have size 𝑦 ∈ R𝑛1,𝑛2 , where 𝑛1 = 𝑚1/𝑠1 and 𝑛2 = 𝑚2/𝑠2.
We assume that the value of 𝑠1, 𝑠2 are carefully chosen so that 𝑛1 and 𝑛2 are integers.

For average pooling layer, we have

𝑦𝑖 𝑗 =

(cid:205)𝑖𝑠1

𝑟 =(𝑖−1)𝑠1+1

(cid:205)𝑗𝑠2

𝑐=( 𝑗−1)𝑠2+1

𝑥𝑟𝑐

𝑠1𝑠2

for 𝑖 = 1, ..., 𝑛1, 𝑗 = 1, ..., 𝑛2.

For max pooling layer, we have 𝑦𝑖 𝑗 = max(𝑟,𝑐) ∈𝑆 𝑥𝑟𝑐 for 𝑖 = 1, ..., 𝑛1, 𝑗 = 1, ..., 𝑛2, where 𝑆 = {(𝑟, 𝑐)|𝑟 = (𝑖 − 1)𝑠1 +

1, ..., 𝑖𝑠1, 𝑐 = ( 𝑗 − 1)𝑠2 + 1, ..., 𝑗𝑠2}. The tractable formulation is given by

𝑦𝑖 𝑗 ≤ 𝑥𝑟𝑐 − (𝑢 − 𝑙)(1 − 𝑧𝑟𝑐 ),

𝑦𝑖 𝑗 ≥ 𝑥𝑟𝑐,
∑︁

𝑧𝑟𝑐 = 1

(𝑟,𝑐) ∈𝑆
𝑧𝑟𝑐 ∈ {0, 1},

(𝑟, 𝑐) ∈ 𝑆

(𝑟, 𝑐) ∈ 𝑆

(𝑟, 𝑐) ∈ 𝑆.

5.2.5 Convolutional Layer. In a convolutional layer, several filters are used to extract features from the input. The
input of the layer is 𝑥 ∈ R𝑚1,𝑚2 . Suppose we have 𝑟 filters and assume the filters have size 𝑠1 × 𝑠2 with stride (𝑡1, 𝑡2).
We use 𝑤𝑖 ∈ R𝑡1𝑡2 and 𝑏𝑖 ∈ R𝑡1𝑡2 to denote the weight and bias for the 𝑖th filter. The output is 𝑦 ∈ R𝑛1×𝑛2×𝑟 , where
𝑛1 = (𝑚1 − 𝑠1)/𝑡1 and 𝑛2 = (𝑚2 − 𝑠2)/𝑡2. Again we assume the numbers are carefully chosen so that 𝑛1, 𝑛2 are integers.

Then we have

𝑘 ( ˜𝑥𝑖 𝑗 ) + 𝑏𝑘,

𝑦𝑖 𝑗𝑘 = 𝑤𝑇
˜𝑥𝑖 𝑗 = [𝑥 (𝑖−1)𝑡1+1,( 𝑗−1)𝑡2+1; 𝑥 (𝑖−1)𝑡1+2,( 𝑗−1)𝑡2+1; ...; 𝑥 (𝑖−1)𝑡1+1,( 𝑗−1)𝑡2+2, ...; 𝑥 (𝑖−1)𝑡1+𝑠1,( 𝑗−1)𝑡2+𝑠2 ].

for integers 1 ≤ 𝑖 ≤ 𝑛1, 1 ≤ 𝑗 ≤ 𝑛2 and 1 ≤ 𝑘 ≤ 𝑟 .

5.2.6 Reformulation in the Output Layer. Here we discuss the reformulation of the output layer, which also provides
us clues on how other more general problems in classification tasks are potentially transformable into the constraint
𝑔(𝑥) ≥ 𝛾. Although the output layer is usually highly nonlinear, we show how to formulate it as linear mixed-integer
constraints.

In classification tasks, the neural network usually uses a softmax layer as the output layer for training purposes.
Suppose the classification problem has 𝑛 categories in total, the last layer inputs 𝑥 ∈ R𝑛 and outputs 𝑦 ∈ R𝑛 with
𝑒𝑥𝑖
𝑗 =1 𝑒𝑥 𝑗 . The prediction for classification is determined by the maximum value of 𝑦𝑖 . Indeed, the result is equivalent
𝑦𝑖 =
if we determine the categories by the maximum value of 𝑥𝑖 .

(cid:205)𝑛

When the constraint is 𝑔(𝑋 ) = 𝑖 or 𝑔(𝑋 ) ≠ 𝑖, we can use this equivalence to reformulate the last layer (and therefore
complete the formulation for the whole network). Specifically, 𝑔(𝑋 ) = 𝑖 can be formulated as 𝑥𝑖 ≥ 𝑥 𝑗 , 𝑓 𝑜𝑟 𝑗 ≠ 𝑖 and
𝑔(𝑋 ) ≠ 𝑖 can be formulated as 𝑥𝑖 ≤ max𝑗≠𝑖 𝑥 𝑗 , where 𝑗 ≠ 𝑖 denotes 𝑗 is an element for the set that contains all possible

Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

13

indexes except 𝑖. For tractable form, the latter formula can be further rewritten as:

𝑥𝑖 ≤ 𝑥 𝑗 + (1 − 𝑧 𝑗 )(𝑢 − 𝑙), 𝑗 ≠ 𝑖.
∑︁

𝑧 𝑗 ≥ 1,

𝑗≠𝑖
𝑧 𝑗 ∈ {0, 1}, 𝑖 ≠ 𝑐.

6 EXPERIMENTS

This section presents several experimental results using our Algorithm 1 for neural network and random forest predictors.

In Section 6.1, we consider two simple toy examples. The first problem has one dominating point and the second

problem has multiple dominating points. To illustrate the efficiency of the IS scheme, we compare it with the naive use

of a uniform IS estimator. In Section 6.2, we consider a realistic problem generated from a classification data set with a

high dimensional feature space.

6.1 Toy Problems
Consider a problem where 𝑋 follows a distribution 𝑓 (𝑥), and the set {𝑥 : 𝑔(𝑥) ≥ 𝛾 } is known to lie inside [𝑙, 𝑢]𝑑 where
𝑑 is the dimension of the input variable 𝑋 . The uniform IS estimator is given by

𝑍𝑢𝑛𝑖 𝑓 𝑜𝑟𝑚 = 𝐼 (𝑔(𝑋 ) ≥ 𝛾) 𝑓 (𝑋 )(𝑢 − 𝑙)𝑑,

where 𝑋 is generated from a uniform distribution on [𝑙, 𝑢]𝑑 . This estimator has a polynomially growing relative
efficiency as the magnitude of the dominating points grows [60], but the efficiency also depends significantly on the

size of the bounded set, i.e., 𝑙, 𝑢, 𝑑.

The first problem has input 𝑥 = [𝑥1, 𝑥2] over the bounded space [0, 5]2. We generate 2,601 samples using a uniform

grid over the space with a mesh of 0.1 on each coordinate and use the function

𝑦 (𝑥) = (𝑥1 − 5)3 + (𝑥2 − 4.5)3 + (𝑥1 − 1)2 + 𝑥 2

2 + 500

(8)

to label these samples. The dataset we obtained is denoted as 𝐷 = {(𝑋𝑛, 𝑌𝑛)}. 𝑔(𝑥) is trained using 𝐷. We consider only
𝑋 in the region [0, 5]2, so that 𝑔(𝑥) can be thought of as being set to 0 outside this box. We use 𝛾 = 500 in this example
and the shape of the rare-event set {𝑥 : 𝑔(𝑥) ≥ 𝛾 }.

We first train a random forest 𝑔(𝑥), which ensembles three regression trees. The three regression trees are averaged
and each of them has around 600 nodes. The rare-event set is presented in Figure 1. The dominating point is obtained
by implementing Algorithm 1, which is located at (3.05, 2.65). We recall the problem setting that the input 𝑋 follows a
Gaussian distribution. In particular, we use Gaussian distributions 𝑁 (0, 𝐼𝜎2), where 𝐼 denotes the identity matrix and
𝜎2 ∈ R+. In our experiment, we vary the value of 𝜎2 to create problems with different rarity, where a smaller 𝜎2 gives a
rarer probability.

Figures 3 and 4 present the experimental results based on 50,000 samples. In Figure 3, we observe that the estimates

for the two IS schemes are similar in all considered cases. On the other hand, Figure 4 shows the relative error for
the proposed IS is smaller in all 𝜎2 considered. Moreover, as the rarity increases, the relative error of the proposed
IS increases from roughly 2.5 to 5, whereas the relative error of the uniform IS increases from 5 to 40. The slower

increasing rate indicates that the proposed IS scheme is more efficient and the outperformance is stronger for rarer

problems.

Manuscript submitted to ACM

14

Bai, Huang, Lam & Zhao

Fig. 1. Rare-event set and dominating points
for the random forest (case 1).

Fig. 2. Rare-event set and dominating points
for the neural network (case 1).

Fig. 3. Probability estimation with different
numbers of samples. Random forest, case 1.

Fig. 4. 95% confidence interval half-width
with different numbers of samples. Random
forest, case 1.

Next, we train a neural network predictor as 𝑔(𝑥). The neural network has 3 layers with 100 neurons in each of
the 2 hidden layers, and all neurons are ReLU. The defined rare-event set is presented in Figure 2. We observe that

the set is roughly convex and should have a single dominating point. We obtain the dominating point for the set at
(3.3676, 2.6051). Figures 5 and 6 shows our results. Again we observe the proposed IS scheme provides smaller relative
errors in all cases and the advantage increases with the rarity level (the relative error increases from 2.5 to 10 for the

proposed IS and 5 to 55 for the uniform IS).

Next, we consider true output values generated according to the function

𝑦 (𝑥) = 10 × 𝑒−

(cid:16) 𝑥1−5
3

(cid:17) 2

(cid:16) 𝑥2−5
4

−

(cid:17) 2

+ 10 × 𝑒−𝑥1

2−(𝑥2−4.5) 2

.

(9)

Again we use a uniform grid over [0, 5]2 with a mesh of 0.1 on each coordinate to train the predictors. The random
forest ensembles three regression trees with around 600 nodes and the neural network with 2 hidden layers, 100 neurons

in the first hidden layer and 50 neurons in the second hidden layer. All neurons in the neural network are ReLU. We
set 𝛾 = 8. The shapes of the rare-event sets are shown in Figures 7 and 8. We observe that the set now consists of
Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

15

Fig. 5. Probability estimation with different
numbers of samples. Neural network, case 1.

Fig. 6. 95% confidence interval half-width
with different numbers of samples. Neural
network, case 1.

Fig. 7. Rare-event set and dominating point
for the random forest (case 2).

Fig. 8. Rare-event set and dominating point
for the neural network (case 2).

two disjoint regions and therefore we expect to obtain multiple dominating points. Using Algorithm 1, we obtain two
dominating points in each case: (0, 4.15) and (3.75, 3.55) for the random forest model; (0.113, 4.162) and (4.187, 3.587)
for the neural network model. We use these dominating points to construct a mixture distribution, as discussed in
Section 3, as the IS distribution. Again we vary 𝜎2 to obtain problems with different rarities and use 50,000 samples for
each case.

The experimental results for the random forest predictor are shown in Figures 9 and 10, and the results for the

neural network predictor are shown in Figures 11 and 12. Similar to the previous problem, both IS schemes give similar

estimates in all the cases, as observed in Figures 9 and 11. The relative errors shown in Figures 10 and 12 illustrate that,

as the probability of interest decreases, the relative error ratio between the uniform IS and the proposed IS increases

from 2 to around 5-6. We can conclude that the proposed IS scheme again outperforms the uniform IS and is more

preferable as the rarity increases.

Manuscript submitted to ACM

16

Bai, Huang, Lam & Zhao

Fig. 9. Probability estimation with different
numbers of samples. Random forest, case 2.

Fig. 10. 95% confidence interval half-width
with different numbers of samples. Random
forest, case 2.

Fig. 11. Probability estimation with differ-
ent numbers of samples. Neural network,
case 2.

Fig. 12. 95% confidence interval half-width
with different numbers of samples. Neural
network, case 2.

6.2 MAGIC Gamma Telescope Data Set

We study a rare-event probability estimation problem from a realistic classification task. The classification problem

uses the MAGIC Gamma Telescope data set in the UCI Machine Learning Repository [8]. The problem is to classify

images of electromagnetic showers collected by a ground-based atmospheric Cherenkov gamma telescope. The features

of the data are 10-dimensional characteristic parameters of the images and the data set contains 19020 data points in

total. Studies [20, 40, 92] use machine learning predictors to discriminate images caused by a “signal” (primary gammas)

from those initiated by the “background” (cosmic rays in the upper atmosphere).

To train the predictors, we allocate 15,000 data points as the training set and use the remaining 4,020 data points as

the testing set. We train a random forest that ensembles 10 random trees to achieve 85.6% testing set accuracy. For

neural network, we use 2 hidden layers with 20 neurons and achieved 87% testing set accuracy.

The rare-event probability of interest is the statistical robustness metric (Example 3.1) of the two trained predictors.

Specifically, we consider a testing data point, say with input 𝑥 and true label 𝑦, that is correctly predicted in both
predictors (the predicted value 𝑔(𝑥) is consistent with 𝑦). Then we perturb the input 𝑥 with a Gaussian noise 𝜖 ∼ 𝑁 (0, 𝐼𝜎2)
Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

17

Fig. 13. Probability estimation with differ-
ent numbers of samples. Random forest,
MAGIC.

Fig. 14. 95% confidence interval half-width
with different numbers of samples. Random
forest, MAGIC.

and estimate the probability of 𝑃 (𝑔(𝑥 + 𝜖) ≠ 𝑦), where we vary the value of 𝜎2 to construct rare-event with different
rarities. Note that, as discussed in Example 3.1, 𝑃 (𝑔(𝑥 + 𝜖) ≠ 𝑦) can be transformed into the format considered in this
paper, i.e. 𝑃 (𝑔(𝑋 ) > 𝛾).

First, we implement Algorithm 1 to obtain dominating points for the rare-event sets {𝑔(𝑥 + 𝜖) ≠ 𝑦} with random
forest and neural network as 𝑔(·) respectively. We obtain 53 dominating points for the rare-event sets associated with
the random forest predictor and 217 dominating points in the neural network case. The IS distributions are constructed
using these dominating points. In both problems, 𝜎2 ranges from 0.03 to 0.1 and we use 50,000 samples to estimate each
target rare-event probabilities.

The experimental results for the random forest and neural network are presented in Figures 13 and 14 respectively.

We observe that the estimates are very accurate in all experiments (with different rarities), which are indicated by the

tight 95% confidence intervals. These results show that our proposed IS scheme performs well with large numbers of

dominating points and in relatively high-dimensional problems.

7 PROOF OF THEOREMS

Throughout this section, we write 𝑓1 (𝛾) ∼ 𝑓2 (𝛾) if lim𝛾→∞ 𝑓1 (𝛾)/𝑓2 (𝛾) = 1. First of all, we adapt Theorem 4.1 in [55] to
obtain the following lemma.

Lemma 7.1. Let 𝑌 be a 𝑑-dimensional Gaussian random vector with zero mean and positie definite covariance matrix ˜Σ.
Suppose that ˜𝑠 = ˜𝑠 (𝛾) is a 𝑑-dimensional vector such that as 𝛾 → ∞, at least one of its components goes to ∞. Use 𝑦∗ to
denote arg min𝑦 ≥ ˜𝑠 𝑦𝑇 ˜Σ−1𝑦. Then by Proposition 2.1 in [55], we know that there exists a unique set 𝐼 ⊂ {1, · · · , 𝑑 } such that

1 ≤ |𝐼 | ≤ 𝑑;

𝑦∗
𝐼 = ˜𝑠𝐼 ≠ 0𝐼 ;
If 𝐽 := {1, . . . , 𝑑 } \ 𝐼 ≠ ∅, then 𝑦∗
𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼 > 0;
∀𝑖 ∈ 𝐼, 𝑒𝑇

𝐽 = −( ˜Σ−1)−1

𝐽 𝐽 ( ˜Σ−1)𝐽 𝐼 ˜𝑠𝐼 ≥ ˜𝑠𝐽

𝑦𝑇 ˜Σ−1𝑦 = (𝑦∗)𝑇 ˜Σ−1𝑦∗ > 0.

min
𝑦 ≥𝑡

(10a)

(10b)

(10c)

(10d)

(10e)

Manuscript submitted to ACM

18

Bai, Huang, Lam & Zhao

We suppose that for sufficiently large 𝛾, the set 𝐼 does not change with 𝛾 and lim𝛾→∞ ( ˜𝑠 − 𝑦∗)𝐽 = ˜𝑠∗
𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼 either goes to ∞ or is a positive constant. Then as 𝛾 → ∞, we have that
∀𝑖 ∈ 𝐼 , 𝑒𝑇

𝐽 . Suppose further that

where 𝐶 = 𝐶 (𝛾) is a positive constant.

𝑃 (𝑌 ≥ ˜𝑠) ∼ 𝐶

exp{−(𝑦∗)𝑇 ˜Σ−1𝑦∗/2}

(cid:206)𝑖 ∈𝐼 𝑒𝑇

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼

Proof. Given 𝑥 ∈ R𝑑 , we define ˜𝑥 in the following way: ( ˜𝑥)𝑖 = (𝑒𝑇

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼 )−1𝑥𝑖, ∀𝑖 ∈ 𝐼 ; ( ˜𝑥)𝐽 = 𝑥 𝐽 . Using (3.4) in

[55], we know that

and thus

(𝑥 + 𝑦∗)𝑇 ˜Σ−1 (𝑥 + 𝑦∗) = 𝑥𝑇 ˜Σ−1𝑥 + 2(𝑥𝐼 )𝑇 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼 + (𝑦∗)𝑇 ˜Σ−1𝑦∗,

𝜙 ( ˜𝑥 + 𝑦∗) = (2𝜋)− 𝑑

2 | ˜Σ|− 1

2 exp{−

= (2𝜋)− 𝑑

2 | ˜Σ|− 1

2 exp{−

(cid:104)

(cid:104)

1
2
1
2

( ˜𝑥)𝑇 ˜Σ−1 ˜𝑥 + 2( ˜𝑥𝐼 )𝑇 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼 + (𝑦∗)𝑇 ˜Σ−1𝑦∗(cid:105)
𝐼 1𝐼 + (𝑦∗)𝑇 ˜Σ−1𝑦∗(cid:105)

( ˜𝑥)𝑇 ˜Σ−1 ˜𝑥 + 2𝑥𝑇

}

}

where 𝜙 is the density function of 𝑁 (0, ˜Σ). Then we get that

𝑃 (𝑌 ≥ ˜𝑠)
∫

=

𝜙 (𝑦)d𝑦

𝑦 ≥ ˜𝑠

=

(cid:32)

(cid:214)

𝑖 ∈𝐼

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼
𝑒𝑇

(cid:33)−1

∫

𝑥 ≥ ˜𝑠−𝑦∗

𝜙 ( ˜𝑥 + 𝑦∗)d𝑥

=(2𝜋)− 𝑑

2 | ˜Σ|− 1

2

(cid:33)−1

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼
𝑒𝑇

(cid:32)

(cid:214)

𝑖 ∈𝐼

exp{−(𝑦∗)𝑇 ˜Σ−1𝑦∗/2}

∫

𝑥 ≥ ˜𝑠−𝑦∗

exp{−( ˜𝑥)𝑇 ˜Σ−1 ˜𝑥/2 − 𝑥𝑇

𝐼 1𝐼 }d𝑥 .

Apparent from the above, it suffices to show that ∫
as 𝛾 → ∞. Indeed, using (3.6) in [55] we know that ( ˜𝑥)𝑇 ˜Σ−1 ˜𝑥 ≥ 𝑥𝑇

𝑥 ≥𝑡 −𝑦∗ exp{−( ˜𝑥)𝑇 ˜Σ−1 ˜𝑥/2 − 𝑥𝑇

𝐼 1𝐼 }d𝑥 converges to a positive constant

exp{−( ˜𝑥)𝑇 ˜Σ−1 ˜𝑥/2 − 𝑥𝑇

𝐼 1𝐼 } ≤ exp{−𝑥𝑇

𝐽 ( ˜Σ𝐽 𝐽 )−1𝑥 𝐽 and thus
𝐽 ( ˜Σ𝐽 𝐽 )−1𝑥 𝐽 /2 − 𝑥𝑇

𝐼 1𝐼 }.

Moreover, we have that

∫

𝑥𝐼 ≥0𝐼

exp{−𝑥𝑇

𝐽 ( ˜Σ𝐽 𝐽 )−1𝑥 𝐽 /2 − 𝑥𝑇

𝐼 1𝐼 }d𝑥 =

∫

R|𝐽 |

exp{−𝑥𝑇

𝐽 ( ˜Σ𝐽 𝐽 )−1𝑥 𝐽 /2}d𝑥 𝐽 < ∞.

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼 → ∞} and 𝐼2 = {𝑖 ∈ 𝐼 : 𝑒𝑇

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼 is a positive constant}. Then we get

We partition 𝐼 into 𝐼1 = {𝑖 ∈ 𝐼 : 𝑒𝑇
that

exp{−( ˜𝑥)𝑇 ˜Σ−1 ˜𝑥/2 − 𝑥𝑇

𝐼 1𝐼 }

lim
𝛾→∞
(cid:26)

= exp

Manuscript submitted to ACM

(cid:104)

1
2

−

( ˜𝑥𝐼2 )𝑇 ( ˜Σ−1)𝐼2𝐼2

˜𝑥𝐼2 + ( ˜𝑥𝐼2 )𝑇 ( ˜Σ−1)𝐼2 𝐽 𝑥 𝐽 + 𝑥𝑇

𝐽 ( ˜Σ−1)𝐽 𝐼2

˜𝑥𝐼2 + 𝑥𝑇

𝐽 ( ˜Σ−1)𝐽 𝐽 𝑥 𝐽

(cid:105)

− 𝑥𝑇

𝐼 1𝐼

(cid:27)

.

Rare-Event Simulation for Neural Network and Random Forest Predictors

19

We know that the above limit does not depend on 𝛾. By applying the dominated convergence theorem, we get that

∫

𝑥 ≥ ˜𝑠−𝑦∗

lim
𝛾→∞
∫ ∫

exp{−( ˜𝑥)𝑇 ˜Σ−1 ˜𝑥/2 − 𝑥𝑇

𝐼 1𝐼 }d𝑥

𝑥𝐼 ≥0𝐼 ,𝑥 𝐽 ≥ ˜𝑠∗
𝐽
(cid:26)

(cid:104)

1
2

exp

−

( ˜𝑥𝐼2 )𝑇 ( ˜Σ−1)𝐼2𝐼2

∫ ∫

˜𝑥𝐼2 + ( ˜𝑥𝐼2 )𝑇 ( ˜Σ−1)𝐼2 𝐽 𝑥 𝐽 + 𝑥𝑇

𝐽 ( ˜Σ−1)𝐽 𝐼2

˜𝑥𝐼2 + 𝑥𝑇

𝐽 ( ˜Σ−1)𝐽 𝐽 𝑥 𝐽

(cid:27)

(cid:105)

− 𝑥𝑇

𝐼 1𝐼

d𝑥𝐼 d𝑥 𝐽

=

=

𝑥𝐼2 ≥0𝐼2 ,𝑥 𝐽 ≥ ˜𝑠∗
𝐽
(cid:26)

exp

−

(cid:104)

( ˜𝑥𝐼2 )𝑇 ( ˜Σ−1)𝐼2𝐼2

1
2
𝑥 ≥𝑡 −𝑦∗ exp{−( ˜𝑥)𝑇 ˜Σ−1 ˜𝑥/2 − 𝑥𝑇

This shows that ∫
proved the theorem.

˜𝑥𝐼2 + ( ˜𝑥𝐼2 )𝑇 ( ˜Σ−1)𝐼2 𝐽 𝑥 𝐽 + 𝑥𝑇

𝐽 ( ˜Σ−1)𝐽 𝐼2

˜𝑥𝐼2 + 𝑥𝑇

𝐽 ( ˜Σ−1)𝐽 𝐽 𝑥 𝐽

(cid:27)

(cid:105)

− 𝑥𝑇

𝐼2 1𝐼2

d𝑥𝐼2 d𝑥 𝐽 .

𝐼 1𝐼 }d𝑥 converges to a positive constant as 𝛾 → ∞, and hence we have
□

Proof of Theorem 4.2. Suppose that 𝑔(𝑥) = 𝑔𝑖 (𝑥) for ℎ𝑖 𝑗 (𝑥) ≥ 0, 𝑗 = 1, . . . , 𝑚𝑖 , 𝑖 = 1, . . . , 𝑟 ′ where 𝑔𝑖 ’s and ℎ𝑖 𝑗 ’s
are all affine functions. Then we can split {𝑥 : 𝑔(𝑥) ≥ 𝛾 } into ˜R1, . . . , ˜R𝑟 ′ where ˜R𝑖 = {𝑥 : 𝑔𝑖 (𝑥) ≥ 𝛾, ℎ𝑖 𝑗 (𝑥) ≥ 0, 𝑗 =
1, . . . , 𝑚𝑖 }. We denote ˜𝑎𝑖 = arg min𝑥 {(𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇) : 𝑥 ∈ ˜R𝑖 }.

To justify the asymptotic optimality of the proposed IS estimator (4), we need to show that

˜𝐸 [𝑍 2]
˜𝐸 [𝑍 ]2 =

𝐸 [𝐼 (𝑔(𝑋 ) ≥ 𝛾)𝐿(𝑋 )]
𝑃 (𝑔(𝑋 ) ≥ 𝛾)2

=

(cid:205)𝑟

𝑖=1 𝐸 [𝐼 (𝑋 ∈ R𝑖 )𝐿(𝑋 )]
(cid:16)(cid:205)𝑟 ′
𝑖=1 𝑃 (𝑋 ∈ ˜R𝑖 )

(cid:17)2

is at most polynomially growing in 𝛾.

To simplify the notations, we consider the polyhedron 𝑃1 := {𝑥 ∈ R𝑑 : 𝐴𝑥 ≥ 𝑡 } where 𝐴 ∈ R𝑚×𝑑, 𝑡 ∈ R𝑚 and
in particular, 𝑡1 = 𝛾 + 𝑐 for some constant 𝑐 ∈ R and 𝑡2, . . . , 𝑡𝑚 are all constants in R. Naturally, we assume that
𝑃 (𝑋 ∈ 𝑃1) > 0 where 𝑋 ∼ 𝑁 (𝜇, Σ) for any 𝛾 ∈ R. We define 𝑥 ∗ = arg min{(𝑥 − 𝜇)𝑇 Σ−1 (𝑥 − 𝜇) : 𝑥 ∈ 𝑃1}. Note that for
sufficiently large 𝛾, each component of 𝑥 ∗ is an affine function of 𝛾, so (𝑥 ∗ − 𝜇)𝑇 Σ−1 (𝑥 ∗ − 𝜇) is a quadratic polynomial
of 𝛾. We will prove that − log 𝑃 (𝑋 ∈ 𝑃1) ∼ (𝑥 ∗ − 𝜇)𝑇 Σ−1 (𝑥 ∗ − 𝜇)/2 as 𝛾 → ∞.

We use 𝐴𝑖 to denote the 𝑖-th row vector of 𝐴. Suppose that 𝐴𝑇
𝑖 𝑗

𝑥 ≥ 𝑡𝑖 𝑗 , 𝑗 = 1, . . . , 𝑚′ are all the linearly independent
active constraints at 𝑥 ∗. If 𝑚′ < 𝑑, then we can add redundant constraints in the form of 𝑥𝑘𝑙 ≥ −∞, 𝑙 = 1, · · · , 𝑑 − 𝑚′
such that we get 𝑑 linearly independent constraints now. More specifically, let

𝐴𝑇
𝑖1
...
𝐴𝑇
𝑖𝑚′
𝑒𝑇
𝑘1
...

𝐵 =

(cid:170)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:172)
By the definition, we get that 𝐵 is invertible. We know that for sufficiently large 𝛾, the active constraints at 𝑥 ∗ do not
change as 𝛾 increases. Thus, in our following discussions, we assume that 𝐵 and 𝑠 does not change with 𝛾. Also, it
is clear that the constraint 𝐴𝑇
1 ≥ 𝑡1 = 𝛾 + 𝑐 must be active at 𝑥 ∗, i.e. 𝑖1 = 1. Since 𝑃2 := {𝑥 : 𝐵𝑥 ≥ 𝑠} is obtained by
Manuscript submitted to ACM

(cid:169)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
(cid:173)
𝑒𝑇
𝑘𝑑−𝑚′
(cid:171)

(cid:170)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:174)
(cid:172)

, 𝑠 =

.

𝑡𝑖1
(cid:169)
...
(cid:173)
(cid:173)
(cid:173)
(cid:173)
𝑡𝑖𝑚′
(cid:173)
(cid:173)
(cid:173)
−∞
(cid:173)
...
(cid:173)
(cid:173)
(cid:173)
(cid:173)
−∞
(cid:171)

20

Bai, Huang, Lam & Zhao

removing constraints from 𝑃1, we have that 𝑃1 ⊂ 𝑃2. Our first step is to develop the asymptotic result of 𝑃 (𝑋 ∈ 𝑃2),
where we directly apply Lemma 7.1.

We know that 𝑌 := 𝐵(𝑋 −𝜇) ∼ 𝑁 (0, ˜Σ) where ˜Σ = 𝐵Σ𝐵𝑇 is positive definite. We denote 𝑦∗ = arg min{𝑦𝑇 ˜Σ−1𝑦 : 𝑦 ≥ ˜𝑠}
where ˜𝑠 = 𝑠 − 𝐵𝜇. Recall that under our settings, 𝑠1 = 𝛾 + 𝑐 for some constant 𝑐 ∈ R so ˜𝑠1 → ∞ as 𝛾 → ∞. We still use
the symbol 𝐼 to denote the set that satisfies (10). Similar to our previous argument, 𝐼 does not change for sufficiently
𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼 > 0 and it is an affine function
large 𝛾. Also the limit lim𝛾→∞ ( ˜𝑠 − 𝑦∗)𝐽 exists. For any 𝑖 ∈ 𝐼 , we know that 𝑒𝑇
of 𝛾, and thus either it goes to ∞ or it is a positive constant as 𝛾 → ∞. In conclusion, all the assumptions of Lemma 7.1
hold in this case. Therefore, we get that

𝑃 (𝑋 ∈ 𝑃2) ∼ 𝐶

exp{−(𝑦∗)𝑇 ˜Σ−1𝑦∗/2}

(cid:206)𝑖 ∈𝐼 𝑒𝑇

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼

(11)

for some constant 𝐶. It is easy to verify that (𝑦∗)𝑇 ˜Σ−1𝑦∗ = (𝑥 ∗ − 𝜇)𝑇 Σ−1 (𝑥 ∗ − 𝜇), and hence − log 𝑃 (𝑋 ∈ 𝑃2) ∼
(𝑥 ∗ − 𝜇)𝑇 Σ−1 (𝑥 ∗ − 𝜇)/2.

Clearly 𝑃 (𝑋 ∈ 𝑃2) gives an upper bound for 𝑃 (𝑋 ∈ 𝑃1). Now we develop a lower bound using similar techniques.
We denote 𝑥 ∗∗ = arg min𝑥 {(𝑥 −𝜇)𝑇 Σ−1 (𝑥 −𝜇) : 𝑥 ∈ 𝑃2 \ 𝑃1} and 𝑥 ∗∗∗ = arg min𝑥 {(𝑥 −𝑥 ∗)𝑇 Σ−1 (𝑥 −𝑥 ∗) : 𝑥 ∈ 𝑃2 \ 𝑃1}.
Clearly each component of 𝑥 ∗ and 𝑥 ∗∗∗ is affine in 𝛾 when 𝛾 is sufficiently large, and hence (𝑥 ∗∗∗−𝑥 ∗)𝑇 Σ−1 (𝑥 ∗∗∗−𝑥 ∗) ≥ 0
is polynomial in 𝛾. Thus we know that (𝑥 ∗∗∗ −𝑥 ∗)𝑇 Σ−1 (𝑥 ∗∗∗ −𝑥 ∗) either goes to infinity or stays a nonnegative constant
as 𝛾 → ∞. However, if (𝑥 ∗∗∗ − 𝑥 ∗)𝑇 Σ−1 (𝑥 ∗∗∗ − 𝑥 ∗) = 0 for sufficiently large 𝛾, then we have that 𝑥 ∗∗∗ = 𝑥 ∗, and hence
𝑥 ∗ ∈ 𝑃2 \ 𝑃1, which contradicts the easily verified fact that (𝑥 ∗∗ − 𝜇)𝑇 Σ−1 (𝑥 ∗∗ − 𝜇) > (𝑥 ∗ − 𝜇)𝑇 Σ−1 (𝑥 ∗ − 𝜇). Therefore,
there exists a constant 0 < 𝜀 < 1 such that {𝑥 : (𝑥 − 𝑥 ∗)𝑇 Σ−1 (𝑥 − 𝑥 ∗) ≤ 𝜀2} ∩ 𝑃1 = {𝑥 : (𝑥 − 𝑥 ∗)𝑇 Σ−1 (𝑥 − 𝑥 ∗) ≤ 𝜀2} ∩ 𝑃2
for sufficiently large 𝛾. Correspondingly, there exists 𝜀 ′ > 0 such that {𝑥 : ∥𝑥 ∥∞ ≤ 𝜀 ′} ⊆ {𝑥 : 𝑥𝑇 Σ−1𝑥 ≤ 𝜀2}.

Still we define 𝑌 = 𝐵(𝑋 − 𝜇) ∼ 𝑁 (0, ˜Σ). Then we get that

𝑃 (𝑋 ∈ 𝑃1) ≥ 𝑃 ((𝑋 − 𝑥 ∗)𝑇 Σ−1 (𝑋 − 𝑥 ∗) ≤ 𝜀2, 𝑋 ∈ 𝑃1)
= 𝑃 ((𝑋 − 𝑥 ∗)𝑇 Σ−1 (𝑋 − 𝑥 ∗) ≤ 𝜀2, 𝑋 ∈ 𝑃2)
= 𝑃 ((𝑌 + 𝐵𝜇 − 𝐵𝑥 ∗)𝑇 ˜Σ−1 (𝑌 + 𝐵𝜇 − 𝐵𝑥 ∗) ≤ 𝜀2, 𝑌 ≥ ˜𝑠).

Similar to the proof of Lemma 7.1, we have that

𝑃 (𝑋 ∈ 𝑃1)
∫

≥

(𝑦+𝐵𝜇−𝐵𝑥 ∗)𝑇 ˜Σ−1 (𝑦+𝐵𝜇−𝐵𝑥 ∗) ≤𝜀2,𝑦 ≥ ˜𝑠
(cid:33)−1

∫

(cid:32)

=

(cid:214)

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼
𝑒𝑇

𝜙 (𝑦)d𝑦

𝑖 ∈𝐼

≥(2𝜋)− 𝑑

2 | ˜Σ|− 1

2

(cid:32)

(cid:214)

𝑖 ∈𝐼

𝜙 ( ˜𝑥 + 𝑦∗)d𝑥

˜𝑥𝑇 ˜Σ−1 ˜𝑥 ≤𝜀2, ˜𝑥 ≥ ˜𝑠−𝑦∗
(cid:33)−1

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼
𝑒𝑇

exp{−(𝑦∗)𝑇 ˜Σ−1𝑦∗/2}(1 − 𝜀2/2)

∫

0≤ ˜𝑥 ≤𝜀′1

exp{−𝑥𝑇

𝐼 1𝐼 }d𝑥

(cid:32)

2 | ˜Σ|− 1

=(2𝜋)− 𝑑

2 (1 − 𝜀2/2)𝜀 ′|𝐽 |

1 − exp{−𝑒𝑇
𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼
𝑒𝑇
Combining the upper and lower bound for 𝑃 (𝑋 ∈ 𝑃1), we finally get that − log 𝑃 (𝑋 ∈ 𝑃1) ∼ (𝑥 ∗ − 𝜇)𝑇 Σ−1 (𝑥 ∗ − 𝜇)/2
as 𝛾 → ∞. We apply this result to ˜R𝑖, 𝑖 = 1, . . . , 𝑠 to get that − log 𝑃 (𝑋 ∈ ˜R𝑖 ) ∼ ( ˜𝑎𝑖 − 𝜇)𝑇 Σ−1 ( ˜𝑎𝑖 − 𝜇)/2, which implies

exp{−(𝑦∗)𝑇 ˜Σ−1𝑦∗/2}.

𝑖 ( ˜Σ𝐼 𝐼 )−1 ˜𝑠𝐼 𝜀 ′}

(cid:214)

𝑖 ∈𝐼

(cid:33)

Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

21

that

− log 𝑃 (𝑔(𝑋 ) ≥ 𝛾) = − log

Moreover, since

(cid:33)

𝑃 (𝑋 ∈ ˜R𝑖 )

(cid:32) 𝑠
∑︁

𝑖=1

∼ min
𝑖=1,...,𝑠

{( ˜𝑎𝑖 − 𝜇)𝑇 Σ−1 ( ˜𝑎𝑖 − 𝜇)}/2 = (𝑎1 − 𝜇)𝑇 Σ−1 (𝑎1 − 𝜇)/2.

(12)

𝐿(𝑥) ≤

𝑟𝑒−(𝑥−𝜇)𝑇 Σ−1 (𝑥−𝜇)/2
𝑒−(𝑥−𝑎𝑖 )𝑇 Σ−1 (𝑥−𝑎𝑖 )/2 = 𝑟𝑒−(𝑎𝑖 −𝜇)𝑇 Σ−1 (𝑎𝑖 −𝜇)/2−(𝑎𝑖 −𝜇)𝑇 Σ−1 (𝑥−𝑎𝑖 )

and (𝑎𝑖 − 𝜇)𝑇 Σ−1 (𝑥 − 𝑎𝑖 ) ≥ 0 on R𝑖 , we get that

𝐸 [𝐼 (𝑋 ∈ R𝑖 )𝐿(𝑋 )] ≤ 𝑟𝑒−(𝑎𝑖 −𝜇)𝑇 Σ−1 (𝑎𝑖 −𝜇)/2𝑃 (𝑋 ∈ R𝑖 ) ≤ 𝑟𝑒−(𝑎1−𝜇)𝑇 Σ−1 (𝑎1−𝜇)/2𝑃 (𝑋 ∈ R𝑖 ),

and hence ˜𝐸 [𝑍 2] ≤ 𝑟𝑒−(𝑎1−𝜇)𝑇 Σ−1 (𝑎1−𝜇)/2𝑃 (𝑔(𝑋 ) ≥ 𝛾). Combining the inequality with the asymptotic result for
□
𝑃 (𝑔(𝑋 ) ≥ 𝛾), we can easily get that the IS estimator 𝑍 is asymptotically optimal.

Proof of Corollary 4.3. See (12) in the proof of Theorem 4.2.

Proof of Corollary 4.4. Now we suppose that 𝑋 ∼ (cid:205)𝑚

𝑗=1 𝜋 𝑗 𝑁 (𝜇 𝑗 , Σ 𝑗 ). We know that

𝑃 (𝑔(𝑋 ) ≥ 𝛾) =

𝑚
∑︁

𝑗=1

𝜋 𝑗 𝑃 (𝑔(𝑋 ) ≥ 𝛾 |𝑋 ∼ 𝑁 (𝜇 𝑗 , Σ 𝑗 ))

− log 𝑃 (𝑔(𝑋 ) ≥ 𝛾) ∼ min

𝑗=1,...,𝑚

{(𝑎 𝑗1 − 𝜇 𝑗 )𝑇 Σ−1
𝑗

(𝑎 𝑗1 − 𝜇 𝑗 )/2}.

and thus

Moreover, we have that

𝑗 (𝑥−𝜇 𝑗 )/2

𝑒−(𝑥−𝜇 𝑗 )𝑇 Σ−1
𝑖=1 1/𝑟 𝑗 𝑒−(𝑥−𝑎 𝑗𝑖 )𝑇 Σ−1
(cid:205)𝑟 𝑗

𝑗 (𝑥−𝑎 𝑗𝑖 )/2

≤ 𝑟 𝑗 𝑒−(𝑎 𝑗 1−𝜇 𝑗 )𝑇 Σ−1

𝑗 (𝑎 𝑗 1−𝜇 𝑗 )/2

≤ max
𝑗

{𝑟 𝑗 }𝑒− min𝑗 { (𝑎 𝑗 1−𝜇 𝑗 )𝑇 Σ−1

𝑗 (𝑎 𝑗 1−𝜇 𝑗 )/2}

and hence

Therefore, we get that

𝐿(𝑥) ≤ max

𝑗

{𝑟 𝑗 }𝑒− min𝑗 { (𝑎 𝑗 1−𝜇 𝑗 )𝑇 Σ−1

𝑗 (𝑎 𝑗 1−𝜇 𝑗 )/2}.

˜𝐸 [𝑍 2]
˜𝐸 [𝑍 ]2 =

𝐸 [𝐼 (𝑔(𝑋 ) ≥ 𝛾)𝐿(𝑋 )]
𝑃 (𝑔(𝑋 ) ≥ 𝛾)2

≤

max𝑗 {𝑟 𝑗 }𝑒− min𝑗 { (𝑎 𝑗 1−𝜇 𝑗 )𝑇 Σ−1

𝑗 (𝑎 𝑗 1−𝜇 𝑗 )/2}

𝑃 (𝑔(𝑋 ) ≥ 𝛾)

grows polynomially in 𝛾 and the IS estimator 𝑍 is asymptotically optimal.

□

□

ACKNOWLEDGEMENTS

We gratefully acknowledge support from the National Science Foundation under grants CAREER CMMI-1653339/1834710,

IIS-1849280, IIS-1849304, and the Manufacturing Futures Initiative at Carnegie Mellon University. A preliminary confer-

ence version of this work has appeared in [59].

REFERENCES

[1] T. P. I. Ahamed, V. S. Borkar, and S. Juneja. Adaptive importance sampling technique for Markov chains using stochastic approximation. Operations

Research, 54:489–504, 2006.

[2] Dohyun Ahn and Kyoung-Kuk Kim. Efficient simulation for expectations over the union of half-spaces. ACM Transactions on Modeling and

Computer Simulation (TOMACS), 28(3):1–20, 2018.

Manuscript submitted to ACM

22

Bai, Huang, Lam & Zhao

[3] S. Asmussen. Conjugate processes and the simulation of ruin problems. Stochastic Processes and their Applications, 20:213–229, 1985.
[4] S. Asmussen and K. Binswanger. Simulation of ruin probabilities for subexponential claims. Astin Bulletin, 27:297–318, 1997.
[5] S. Asmussen and D. Kroese. Improved algorithms for rare event simulation with heavy tails. Advances in Applied Probability, 38:545–558, 2006.
[6] Søren Asmussen and Hansjörg Albrecher. Ruin probabilities, volume 14. World scientific, 2010.
[7] Søren Asmussen and Peter W Glynn. Stochastic Simulation: Algorithms and Analysis, volume 57. Springer Science & Business Media, New York,

2007.

[8] Arthur Asuncion and David Newman. Uci machine learning repository, 2007.
[9] M. Bayati, J. Kim, and A. Saberi. A sequential algorithm for generating random graphs. Approximation, Randomization and combinatorial

Optimization. Algorithms and Techniques. Lecture Notes in Computer Science, 4627:326–340, 2007.

[10] J. Blanchet. Efficient importance sampling for binary contingency tables. Annals of Applied Probability, 19:949–982, 2009.
[11] J. Blanchet, P. Glynn, and H. Lam. Rare event simulation for a slotted time 𝑀/𝐺/𝑠 model. Queueing Systems, 63:33–57, 2009.
[12] J. Blanchet and M. Mandjes. Rare event simulation for queues. In Rare Event Simulation Using Monte Carlo Methods, pages 87–124. 2009. Chapter 5.
[13] Jose Blanchet and Peter Glynn. Efficient rare-event simulation for the maximum of heavy-tailed random walks. The Annals of Applied Probability,

pages 1351–1378, 2008.

[14] Jose Blanchet and Henry Lam. State-dependent importance sampling for rare-event simulation: An overview and recent advances. Surveys in

Operations Research and Management Science, 17(1):38–59, 2012.

[15] Jose Blanchet and Henry Lam. Rare-event simulation for many-server queues. Mathematics of Operations Research, 39(4):1142–1178, 2014.
[16] Jose Blanchet, Henry Lam, and Bert Zwart. Efficient rare-event simulation for perpetuities. Stochastic Processes and their Applications, 122(10):3361–

3392, 2012.

[17] Jose H Blanchet and Jingchen Liu. State-dependent importance sampling for regularly varying random walks. Advances in Applied Probability,

40(4):1104–1128, 2008.

[18] National Transpotation Safety Board. Preliminary report, highway, hwy18mh010, 2018.
[19] National Transpotation Safety Board. Collision between car operating with partial driving automation and truck-tractor semitrailer delray beach,

florida, march 1, 2019, 2019.

[20] RK Bock, A Chilingarian, M Gaug, F Hakl, Th Hengstebeck, M Jiřina, J Klaschka, E Kotrč, P Savick`y, S Towers, et al. Methods for multidimensional
event classification: a case study using images from a cherenkov gamma-ray telescope. Nuclear Instruments and Methods in Physics Research Section
A: Accelerators, Spectrometers, Detectors and Associated Equipment, 516(2-3):511–528, 2004.

[21] P. T. De Boer, V.F. Nicola, and R.Y. Rubinstein. Adaptive importance sampling simulation of queueing networks. In Proceedings of 2000 Winter

Simulation Conference, pages 646–655. IEEE Press, 2000.

[22] V. S. Borkar, S. Juneja, and A. A. Kherani. Performance analysis conditioned on rare events: An adaptive simulation scheme. Communications in

Information, 3:259–278, 2004.

[23] Zdravko I Botev and Pierre L’Ecuyer. Sampling conditionally on a rare event via generalized splitting. INFORMS Journal on Computing, 2020.
[24] Zdravko I Botev, Pierre L’Ecuyer, and Bruno Tuffin. Markov chain importance sampling with applications to rare event probability estimation.

Statistics and Computing, 23(2):271–285, 2013.

[25] James Bucklew. Introduction to Rare Event Simulation. Springer Science & Business Media, New York, 2013.
[26] Joshua CC Chan and Dirk P Kroese. Improved cross-entropy method for estimation. Statistics and Computing, 22(5):1031–1040, 2012.
[27] Bohan Chen, Jose Blanchet, Chang-Han Rhee, and Bert Zwart. Efficient rare-event simulation for multiple jump events in regularly varying

random walks and compound poisson processes. Mathematics of Operations Research, 44(3):919–942, 2019.

[28] Chenyi Chen, Ari Seff, Alain Kornhauser, and Jianxiong Xiao. Deepdriving: Learning affordance for direct perception in autonomous driving. In

Proceedings of the IEEE International Conference on Computer Vision, pages 2722–2730, 2015.

[29] Zhilu Chen and Xinming Huang. End-to-end learning for lane keeping of self-driving cars. In 2017 IEEE Intelligent Vehicles Symposium (IV), pages

1856–1860. IEEE, 2017.

[30] Leon O Chua and Lin Yang. Cellular neural networks: Theory. IEEE Transactions on circuits and systems, 35(10):1257–1272, 1988.
[31] Jeffrey F Collamore. Importance sampling techniques for the multidimensional ruin problem for general markov additive sequences of random

vectors. The Annals of Applied Probability, 12(1):382–421, 2002.

[32] P. T. de Boer, D. Kroese, S. Mannor, and R. Rubinstein. A tutorial on the cross-entropy method. Annals of Operations Research, 134:19–67, 2005.
[33] Thomas Dean and Paul Dupuis. Splitting for rare event simulation: A large deviation approach to design and analysis. Stochastic Processes and their

Applications, 119(2):562 – 587, 2009.

[34] P. Y. Desai and P. W. Glynn. A Markov chain perspective on adaptive Monte Carlo algorithms. Proceedings of 2001 Winter Simulation Conference,

9:391–412, 2001.

[35] AB Dieker and Michel Mandjes. On asymptotically efficient simulation of large deviation probabilities. Advances in applied probability, 37(2):539–552,

2005.

[36] Tommaso Dreossi, Alexandre Donzé, and Sanjit A Seshia. Compositional falsification of cyber-physical systems with machine learning components.

Journal of Automated Reasoning, 63(4):1031–1053, 2019.

[37] Paul Dupuis, Kevin Leder, and Hui Wang. Importance sampling for sums of random variables with regularly varying tails. ACM Transactions on

Modeling and Computer Simulation (TOMACS), 17(3):14–es, 2007.

Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

23

[38] Paul Dupuis, Kevin Leder, and Hui Wang. Importance sampling for weighted-serve-the-longest-queue. Mathematics of Operations Research,

34(3):642–660, 2009.

[39] Paul Dupuis, Konstantinos Spiliopoulos, and Hui Wang. Importance sampling for multiscale diffusions. Multiscale Modeling & Simulation, 10(1):1–27,

2012.

[40] Jakub Dvořák and Petr Savick`y. Softening splits in decision trees using simulated annealing. In International Conference on Adaptive and Natural

Computing Algorithms, pages 721–729. Springer, 2007.

[41] Laura Fraade-Blanar, Marjory S Blumenthal, James M Anderson, and Nidhi Kalra. Measuring automated vehicle safety: forging a framework. RAND

Corporation, 2018.

[42] Roy Glasius, Andrzej Komoda, and Stan CAM Gielen. Neural network dynamics for path planning and obstacle avoidance. Neural Networks,

8(1):125–133, 1995.

[43] P. Glasserman. Monte Carlo Methods in Financial Engineering. Springer, 2004.
[44] P. Glasserman, P. Heidelberger, P. Shahabuddin, and T. Zajic. Multilevel splitting for estimating rare event probabilities. Operations Research,

47:585–600, 1999.

[45] Paul Glasserman. Monte Carlo Methods in Financial Engineering, volume 53. Springer Science & Business Media, New York, 2013.
[46] Paul Glasserman, Philip Heidelberger, Perwez Shahabuddin, and Tim Zajic. A large deviations perspective on the efficiency of multilevel splitting.

IEEE Transactions on Automatic Control, 43(12):1666–1679, 1998.

[47] Paul Glasserman, Wanmo Kang, and Perwez Shahabuddin. Fast simulation of multifactor portfolio credit risk. Operations Research, 56(5):1200–1217,

2008.

[48] Paul Glasserman and Jingyi Li. Importance sampling for portfolio credit risk. Management Science, 51(11):1643–1656, 2005.
[49] Paul Glasserman and Yashan Wang. Counterexamples in importance sampling for large deviations probabilities. The Annals of Applied Probability,

7(3):731–746, 1997.

[50] Peter W Glynn and Donald L Iglehart. Importance sampling for stochastic simulations. Management Science, 35(11):1367–1392, 1989.
[51] Ian Goodfellow, Yoshua Bengio, Aaron Courville, and Yoshua Bengio. Deep Learning, volume 1. MIT press Cambridge, Massachusetts, 2016.
[52] Ian J Goodfellow, Jonathon Shlens, and Christian Szegedy. Explaining and harnessing adversarial examples. arXiv preprint arXiv:1412.6572, 2014.
[53] Adam W Grace, Dirk P Kroese, and Werner Sandmann. Automated state-dependent importance sampling for markov jump processes via sampling

from the zero-variance distribution. Journal of Applied Probability, 51(3):741–755, 2014.

[54] P. Grassberger. Go with the winners: A general Monte Carlo strategy. Computer Physics Communications, 147:64–70, 2002.
[55] Enkelejd Hashorva and Juerg Huesler. On multivariate gaussian tails. Annals of the Institute of Statistical Mathematics, 55:507–522, 02 2003.
[56] P. Heidelberger. Fast simulation of rare events in queueing and reliability models. ACM Transactions on Modeling and Computer Simulation

(TOMACS), 5:43–85, 1995.

[57] Harsha Honnappa, Raghu Pasupathy, and Prateek Jaiswal. Dominating points of gaussian extremes, 2018.
[58] Z. Huang, H. Lam, D. J. LeBlanc, and D. Zhao. Accelerated evaluation of automated vehicles using piecewise mixture models. IEEE Transactions on

Intelligent Transportation Systems, pages 1–11, 2017.

[59] Zhiyuan Huang, Henry Lam, and Ding Zhao. Designing importance samplers to simulate machine learning predictors via optimization. In 2018

Winter Simulation Conference (WSC), pages 1730–1741. IEEE, 2018.

[60] Zhiyuan Huang, Henry Lam, and Ding Zhao. Rare-event simulation without structural information: a learning-based approach. In 2018 Winter

Simulation Conference (WSC), pages 1826–1837. IEEE, 2018.

[61] Henrik Hult and Jens Svensson. On importance sampling with mixtures for random walks with heavy tails. ACM Transactions on Modeling and

Computer Simulation (TOMACS), 22(2):1–21, 2012.

[62] S. Juneja and P. Shahabuddin. Chapter 11 rare-event simulation techniques: An introduction and recent advances. In Shane G. Henderson and
Barry L. Nelson, editors, Simulation, volume 13 of Handbooks in Operations Research and Management Science, pages 291 – 350. Elsevier, 2006.
[63] Sandeep Juneja and Perwez Shahabuddin. Rare-event simulation techniques: An introduction and recent advances. Handbooks in Operations

Research and Management Science, 13:291–350, 2006.

[64] Nidhi Kalra and Susan M Paddock. Driving to safety: How many miles of driving would it take to demonstrate autonomous vehicle reliability?

Transportation Research Part A: Policy and Practice, 94:182–193, 2016.

[65] G. Kesidis, J. Walrand, and C.-S. Chang. Effective bandwidths for multiclass Markov fluids and other ATM sources. IEEE/ACM Transactions on

Networks., 1:424–428, 1993.

[66] Mykel J Kochenderfer, Jessica E Holland, and James P Chryssanthacopoulos. Next-generation airborne collision avoidance system. Technical

report, Massachusetts Institute of Technology-Lincoln Laboratory Lexington United States, 2012.

[67] C. Kollman, K. Baggerly, D. Cox, and R. Picard. Adaptive importance sampling on discrete Markov chains. Annals of Applied Probability, 9:391–412,

1999.

[68] Philip Koopman and Michael Wagner. Autonomous vehicle safety: An interdisciplinary challenge. IEEE Intelligent Transportation Systems Magazine,

9(1):90–96, 2017.

[69] D. P. Kroese and V. F. Nicola. Efficient estimation of overflow probabilities in queues with breakdowns. Performance Evaluation, 36-37:471–484,

1999.

[70] Alexey Kurakin, Ian Goodfellow, and Samy Bengio. Adversarial examples in the physical world. arXiv preprint arXiv:1607.02533, 2016.

Manuscript submitted to ACM

24

Bai, Huang, Lam & Zhao

[71] Alexey Kurakin, Ian Goodfellow, and Samy Bengio. Adversarial machine learning at scale. arXiv preprint arXiv:1611.01236, 2016.
[72] P. L’Ecuyer, F. Le Gland, P. Lezaud, and B. Tuffin. Splitting techniques. In Rare Event Simulation Using Monte Carlo Methods, pages 39–62. 2009.

Chapter 3.

[73] Pierre L’Ecuyer, Jose H. Blanchet, Bruno Tuffin, and Peter W. Glynn. Asymptotic robustness of estimators in rare-event simulation. ACM Trans.

Model. Comput. Simul., 20(1), February 2010.

[74] Velibor V Mišic. Optimization of tree ensembles. Working Paper: arXiv preprint arXiv:1705.10883, 2017.
[75] Urs Muller, Jan Ben, Eric Cosatto, Beat Flepp, and Yann L Cun. Off-road obstacle avoidance through end-to-end learning. In Advances in neural

information processing systems, pages 739–746, 2006.

[76] Karthyek RA Murthy, Sandeep Juneja, and Jose Blanchet. State-independent importance sampling for random walks with regularly varying

increments. Stochastic Systems, 4(2):321–374, 2015.

[77] Victor F Nicola, Marvin K Nakayama, Philip Heidelberger, and Ambuj Goyal. Fast simulation of highly dependable systems with general failure

and repair processes. IEEE Transactions on Computers, 42(12):1440–1452, 1993.

[78] Victor F Nicola, Perwez Shahabuddin, and Marvin K Nakayama. Techniques for fast simulation of models of highly dependable systems. IEEE

Transactions on Reliability, 50(3):246–264, 2001.

[79] Matthew O’Kelly, Aman Sinha, Hongseok Namkoong, Russ Tedrake, and John C Duchi. Scalable end-to-end autonomous vehicle testing via

rare-event simulation. In Advances in Neural Information Processing Systems, pages 9827–9838, 2018.

[80] Art B Owen, Yury Maximov, Michael Chertkov, et al. Importance sampling the union of rare events with an application to power systems analysis.

Electronic Journal of Statistics, 13(1):231–254, 2019.

[81] P. Glasserman, P. Heidelberger and P. Shahabuddin and T. Zajic. A large deviations perspective on the effiency of multilevel splitting. IEEE

Transactions on Automated Control, pages 1666–1679, 1998.

[82] S. Parekh and J. Walrand. Quick simulation of rare events in networks. IEEE Transactions on Automatic Control, 34:54–66, 1989.
[83] R. Y. Rubinstein. Rare-event simulation via cross-entropy and importance sampling. Second Workshop on Rare Event Simulation, RESIM’99, pages

1–17, 1999.

[84] A. Ridder. Importance sampling algorithms for first passage time probabilities in the infinite server queue. European Journal of Operational Research,

199:176–186, 2009.

[85] G. Rubino and B. Tuffin. Markovian models for dependability analysis. In Rare Event Simulation Using Monte Carlo Methods, pages 125–144. 2009.

Chapter 6.

[86] R. Rubinstein and D. Kroese. The Cross-Entropy Method: A Unified Approach to Combinatorial Optimization, Monte-Carlo Simulation, and Machine

Learning. Springer-Verlag, 2004.

[87] R. Y. Rubinstein. Optimization of computer simulation models with rare events. European Journal of Operations Research, 99:89–112, 1997.
[88] Reuven Y Rubinstein and Dirk P Kroese. Simulation and the Monte Carlo Method, volume 10. John Wiley & Sons, New Jersey, 2016.
[89] J. S. Sadowsky. Large deviations theory and efficient simulation of excessive backlogs in a 𝐺𝐼 /𝐺𝐼 /𝑚 queue. IEEE Transactions on Automatic

Control, 36:1383–1394, 1991.

[90] John S Sadowsky and James A Bucklew. On large deviations theory and asymptotically efficient monte carlo estimation. IEEE transactions on

Information Theory, 36(3):579–588, 1990.

[91] W. Sandmann. Rare event simulation methodologies in systems biology. In Rare Event Simulation Using Monte Carlo Methods, pages 243–266. 2009.

Chapter 11.

[92] Petr Savick`y and Emil Kotrc. Experimental study of leaf confidences for random forest. In Proceedings of the 16th Symposium on Computational

Statistics, pages 1767–1774. Prague, Czech Republic, 2004.

[93] David Siegmund. Importance sampling in the monte carlo study of sequential tests. The Annals of Statistics, pages 673–684, 1976.
[94] Nathan A Spielberg, Matthew Brown, Nitin R Kapania, John C Kegelman, and J Christian Gerdes. Neural network vehicle models for high-

performance automated driving. Science Robotics, 4(28), 2019.

[95] R. Szechtman and P. Glynn. Rare event simulation for infinite server queues. In Proceedings of the 2002 Winter Simulation Conference, pages

416–423, 2002.

[96] Vincent Tjeng and Russ Tedrake. Verifying neural networks with mixed integer programming. Working Paper: arXiv preprint arXiv:1711.07356,

2017.

[97] B. Tuffin. On numerical problems in simulation of highly reliable Markovian systems. In Proceedings of the 1st International Conference on

Quantitative Evaluation of SysTems (QEST), pages 156–164. IEEE Computer Society Press, 2004.

[98] Jonathan Uesato, Ananya Kumar, Csaba Szepesvari, Tom Erez, Avraham Ruderman, Keith Anderson, Nicolas Heess, Pushmeet Kohli, et al. Rigorous

agent evaluation: An adversarial approach to uncover catastrophic failures. arXiv preprint arXiv:1812.01647, 2018.

[99] Jessica Van Brummelen, Marie O’Brien, Dominique Gruyer, and Homayoun Najjaran. Autonomous vehicle perception: The technology of today

and tomorrow. Transportation research part C: emerging technologies, 89:384–406, 2018.

[100] Eric Vanden-Eijnden and Jonathan Weare. Rare event simulation of small noise diffusions. Communications on Pure and Applied Mathematics,

65(12):1770–1803, 2012.

[101] Benjie Wang, Stefan Webb, and Tom Rainforth. Statistically robust neural network classification. arXiv preprint arXiv:1912.04884, 2019.

Manuscript submitted to ACM

Rare-Event Simulation for Neural Network and Random Forest Predictors

25

[102] Stefan Webb, Tom Rainforth, Yee Whye Teh, and M Pawan Kumar. A statistical approach to assessing neural network robustness. arXiv preprint

arXiv:1811.07209, 2018.

[103] Tsui-Wei Weng, Pin-Yu Chen, Lam M Nguyen, Mark S Squillante, Ivan Oseledets, and Luca Daniel. Proven: Certifying robustness of neural networks

with a probabilistic approach. arXiv preprint arXiv:1812.08329, 2018.

[104] Jianxin Wu, James M Rehg, and Matthew D Mullin. Learning a rare event detection cascade by direct feature selection. In Advances in Neural

Information Processing Systems, pages 1523–1530, 2004.

[105] Simon X Yang and Chaomin Luo. A neural network approach to complete coverage path planning. IEEE Transactions on Systems, Man, and

Cybernetics, Part B (Cybernetics), 34(1):718–724, 2004.

[106] Ding Zhao, Henry Lam, Huei Peng, Shan Bao, David J LeBlanc, Kazutoshi Nobukawa, and Christopher S Pan. Accelerated evaluation of automated
IEEE transactions on intelligent transportation systems,

vehicles safety in lane-change scenarios based on importance sampling techniques.
18(3):595–607, 2016.

Manuscript submitted to ACM

