0
2
0
2

y
a
M
5

]

G
L
.
s
c
[

1
v
7
8
3
2
0
.
5
0
0
2
:
v
i
X
r
a

SurvLIME-Inf: A simpliﬁed modiﬁcation of SurvLIME for
explanation of machine learning survival models

Lev V. Utkin, Maxim S. Kovalev and Ernest M. Kasimov
Peter the Great St.Petersburg Polytechnic University (SPbPU)
St.Petersburg, Russia
e-mail: lev.utkin@gmail.com, maxkovalev03@gmail.com, kasimov.ernest@gmail.com

Abstract

A new modiﬁcation of the explanation method SurvLIME called SurvLIME-Inf for explain-
ing machine learning survival models is proposed. The basic idea behind SurvLIME as well as
SurvLIME-Inf is to apply the Cox proportional hazards model to approximate the black-box sur-
vival model at the local area around a test example. The Cox model is used due to the linear
relationship of covariates. In contrast to SurvLIME, the proposed modiﬁcation uses L∞-norm for
deﬁning distances between approximating and approximated cumulative hazard functions. This
leads to a simple linear programming problem for determining important features and for explain-
ing the black-box model prediction. Moreover, SurvLIME-Inf outperforms SurvLIME when the
training set is very small. Numerical experiments with synthetic and real datasets demonstrate
the SurvLIME-Inf eﬃciency.

Keywords:

interpretable model, explainable AI, survival analysis, censored data, linear pro-

gramming, the Cox model, Chebyshev distance.

1

Introduction

Deep machine learning models can be regarded as powerful tools for solving many applied problems,
including medical diagnostics, ﬁnances, manufacturing etc.
In spite of satisfactory performance of
the deep learning models, they may be of limited use because their predictions are typically hard
to be interpreted or explained by human. This is caused by the fact that many machine learning
models work as black-box models. At the same time, there is a high demand for understanding
predictions produced by deep learning models. For example, a doctor has to get an explanation of
a diagnosis predicted by a black-box model in order to choose a corresponding treatment. She or
he has to understand how the particular decisions are made by the deep learning model. Therefore,
explainability of deep learning models is an topical direction of research nowadays, and, as a result,
a lot of methods have been developed to address the interpretation problems and to get accurate
explanations for obtained predictions [5, 11, 12, 21, 24, 37, 38, 39, 52].

There are two main groups of methods for explaining the black-box models. The ﬁrst group
includes local methods which aim to interpret a single prediction. The methods are based on using
In contrast to
a local area around a test instance. The second group consists of global methods.
the local methods, they explain a black-box model on the whole input space or its part to take into
account the overall behavior of the model. We study only the local models because our aim is to ﬁnd

1

 
 
 
 
 
 
features which lead to the individual prediction. Moreover, we consider post-hoc explanation methods
which are used to explain predictions of such black-box models after they are trained.

One of the well-known local explanation methods is the Local Interpretable Model-agnostic Expla-
nations (LIME) [44], which uses simple and easily understandable linear models to locally approximate
the predictions of black-box models. LIME provides an explanation for a single instance by perturbing
it around its neighborhood and then by constructing a local surrogate model trained also on original
training data. Garreau and Luxburg [20] proposed a thorough theoretical analysis of the LIME and
derived closed-form expressions for coeﬃcients of the explaining model for the case of the linear ex-
planation function. Garreau and Luxburg [20] point out that LIME is ﬂexible to provide explanations
for diﬀerent data types, including text and image data, while being model-agnostic, i.e., any details
of the black-box model are unknown.

One of the peculiarities of LIME is that it explains point-valued predictions produced by the
black-box model. However, there are models which produce functions as predictions instead of points.
The well-known class of the model with these predictions is machine learning survival models [31, 59]
which solve survival analysis tasks [25, 55].

One of the most widely-used regression models for the analysis of survival data is the well-known
Cox proportional hazards model, which is a semi-parametric model that calculates eﬀects of observed
covariates on the risk of an event occurring, for example, death or failure [13]. The model assumes
that a patient’s log-risk of failure is a linear combination of the instance covariates. This is a very
important and at the same time very strong assumption.

There are many survival analysis models, for example, random survival forests, deep neural net-
works, etc., which relax this assumption and allow for more general relationships between covariates
and the output parameters [55]. However, these models are the black-box ones and, therefore, they
require to be explained. Taking into account that predictions of the models are functions, for example,
the survival functions (SF), cumulative hazard functions (CHF), the original LIME cannot be used.
Kovalev et al. [30] proposed an explanation method called SurvLIME, which deals with censored data.
The basic idea behind SurvLIME is to apply the Cox model to approximate the black-box survival
model at a local area around a test instance. The Cox model is chosen due to its assumption of the
linear combination of covariates. Moreover, it is important that the covariates as well as their combi-
nation do not depend on time. Therefore, coeﬃcients of the covariates can be regarded as quantitative
impacts on the prediction.

SurvLIME includes a procedure which randomly generates synthetic instances around the tested
instance, and the CHF is calculated for every synthetic instance by means of the black-box survival
model. For every instance, the approximating Cox model CHF is written as a function of coeﬃcients
of interest. By writing the distance between CHFs provided by the black-box survival model and
by the approximating Cox model, respectively, an unconstrained convex optimization problem for
computing the coeﬃcients of covariates is constructed. The L2-norm is used in order to consider
the distance between two CHF. As a result, the explanation by using SurvLIME is based on solving
the convex optimization problem.
In order to simplify the approach, we propose and investigate
another explanation method which is based on using L∞-norm for the distance between CHFs. This
modiﬁcation is called SurvLIME-Inf.

The choice of this norm is caused by the fact that obtained optimization problems become rather
simple from the computational point of view [35]. Indeed, we get the linear optimization problem for
computing coeﬃcients of the Cox model. The L∞-norm (Chebychev distance) is a measure of the
approximation quality, which is deﬁned as the maximum of absolute values of the diﬀerence between
the function being approximated and the approximating function. Sim and Hartley [49] pointed out
that L∞ minimization is not robust to outliers, i.e., L∞ minimization may ﬁt the outliers and not the

2

good data. Nevertheless, our experiments have illustrated a perfect approximation of CHFs provided
by the black-box survival model and the approximating Cox model by rather small datasets.

Numerical results using synthetic and real data illustrate SurvLIME-Inf.
The paper is organized as follows. A short survey of publications devoted to local explanation
methods and machine learning models in survival analysis is given in Section 2. Basic concepts of
survival analysis are considered in Section 3. A brief introduction to LIME can be found in Section 4.
Basic ideas behind SurvLIME-Inf are proposed in Section 5. Section 6 contains a formal derivation of
the linear programming problem implementing SurvLIME-Inf. Numerical experiments with synthetic
and real data are given in Section 7. Concluding remarks are provided in Section 8.

2 Related work

Local explanation methods. LIME is one of the eﬃcient and simple explanation methods. As
a result, many modiﬁcations of LIME have been developed recently, including, DLIME [57], Anchor
LIME [45], LIME-SUP [26], ALIME [47], NormLIME [3], LIME-Aleph [42], GraphLIME [27], MPS-
LIME [48], Tree-LIME [32], SurvLIME [30]. Another popular method is the SHAP [50] which takes
a game-theoretic approach for optimizing a regression loss function based on Shapley values [34]. It
is pointed out by Aas et al. [1] that Shapley values explain the diﬀerence between the prediction and
the global average prediction, while LIME explains the diﬀerence between the prediction and a local
average prediction.

Another group of explanation methods is based on counterfactual explanations [54], which try to
explain what to do in order to achieve a desired outcome by means of ﬁnding changes to some features
of an explainable input instance such that the resulting data point called counterfactual has a diﬀerent
speciﬁed prediction than the original input. It is important to note that LIME was also modiﬁed to
implement counterfactual explanations [43, 56].

Many explanation methods, including LIME, are based on perturbation techniques [14, 18, 19,
41, 53]. These methods assume that contribution of a feature can be determined by measuring how
prediction score changes when the feature is altered.

Descriptions of many explanation methods and various approaches, their critical reviews can be

found in survey papers [2, 4, 12, 21, 46].

Most methods explain point-valued predictions produced by black-box models, i.e., predictions in
the form of some number (class, regression value, decision about anomaly, etc.). This fact restrict their
use in survival models, where predictions are usually represented in the form of CHFs or SFs. Only
SurvLIME [30] deals with these functions, but it may be computationally hard due to the optimization
problem which has to be solved.

Machine learning models in survival analysis. A clear taxonomy of survival analysis methods
and their comprehensive review can be found in [55]. Following the Cox model [13], a lot of its
modiﬁcations have been proposed. Some modiﬁcations are based on the Lasso method [51], on the
group Lasso penalty method [29], on the adaptive Lasso [58]. To relax assumptions of the Cox model,
in particular, the linear relationship between covariates and the time of event, many models using
neural networks, random forests, support vector machines, etc. have been developed starting from
the pioneering work [16]. The corresponding review of the methods is proposed by Nezhad et al. [40].
One of the important class of survival models, illustrating their eﬃciency and accuracy especially by
limited survival data, is the random survival forests (RSFs) which can be viewed as an extension of
the original random forests [9]. A detailed review of RSFs is presented by Bou-Hamad et al. [8].

Most survival models except for those based on the Cox model can be regarded as black-box models.

3

Therefore, they require to be explained in many applications. At the same time, only the Cox model
can be regarded as explainable one due to its linear relationship between covariates. Therefore, it will
be used to approximate more powerful models, including survival deep neural networks and RSFs, in
order to explain predictions of these models.

3 Basic concepts of survival analysis

In survival analysis, an instance (patient) i is represented by a triplet (xi, δi, Ti), where xT
i =
(xi1, ..., xid) is the vector of the patient parameters (characteristics) or the vector of the instance
features; Ti is time to event of the instance. If the event of interest is observed, then Ti corresponds to
the time between baseline time and the time of event happening, in this case δi = 1, and we have an
uncensored observation. If the instance event is not observed and its time to event is greater than the
observation time, then Ti corresponds to the time between baseline time and end of the observation,
and the event indicator is δi = 0, and we have a censored observation. Suppose a training set D
consists of n triplets (xi, δi, Ti), i = 1, ..., n. The goal of survival analysis is to estimate the time to
the event of interest T for a new instance (patient) with a feature vector denoted by x by using the
training set D.

The survival and hazard functions are key concepts in survival analysis for describing the distribu-
tion of event times. The survival function denoted by S(t|x) as a function of time t is the probability
of surviving up to that time, i.e., S(t|x) = Pr{T > t|x}. The hazard function h(t|x) is deﬁned as
h(t|x) = f (t|x)/S(t|x), where f (t|x) is the density function of the event of interest.

Another important concept in survival analysis is the CHF H(t|x), which is deﬁned as the integral
of the hazard function h(t|x) and can be interpreted as the probability of an event at time t given
survival until time t. The survival function is determined through the hazard function and through
the CHF as S(t|x) = exp (−H(t|x)).

To compare survival models, the C-index proposed by Harrell et al. [23] is used. It estimates how
good a survival model is at ranking survival times. In other words, this is the probability that the
event times of a pair of instances are correctly ranking. C-index does not depend on choosing a ﬁxed
time for evaluation of the model and takes into account censoring of patients [36].

According to the Cox proportional hazards model[13] , the hazard function at time t given predictor

values x is deﬁned as

h(t|x, b) = h0(t) exp (cid:0)bTx(cid:1) = h0(t) exp

(cid:18)(cid:88)d

k=1

(cid:19)

bkxk

.

(1)

Here h0(t) is a baseline hazard function which does not depend on the vector x and the vector b;

bT = (b1, ..., bd) is an unknown vector of regression coeﬃcients or parameters.

In the framework of the Cox model, the survival function S(t|x, b) is computed as

S(t|x, b) = exp(−H0(t) exp (cid:0)bTx(cid:1) = (S0(t))exp(bTx) .

(2)

Here H0(t) is the cumulative baseline hazard function; S0(t) is the baseline survival function. It

is important to note that functions H0(t) and S0(t) do not depend on x and b.

One of the ways for estimating parameters b of the Cox model is the Cox partial likelihood function
[13]. There are other methods, including the Breslow approximation [10] and the Efron approximation
[15].

4

4 LIME

Before studying the LIME modiﬁcation for survival data, this method is brieﬂy considered below.
LIME proposes to approximate a black-box model denoted as f with a simple function g in the vicinity
of the point of interest x, whose prediction by means of f has to be explained, under condition that
the approximation function g belongs to a set of explanation models G, for example, linear models.
In order to construct the function g in accordance with LIME, a new dataset consisting of perturbed
samples is generated, and predictions corresponding to the perturbed samples are obtained by means
of the explained model. New samples are assigned by weights wx in accordance with their proximity
to the point of interest x by using a distance metric, for example, the Euclidean distance or a kernel.
The weights are used to enforce locality for the linear model g.

An explanation (local surrogate) model is trained on new generated samples by solving the following

optimization problem:

arg min
g∈G

L(f, g, wx) + Φ(g).

(3)

Here L is a loss function, for example, mean squared error, which measures how the explanation

is close to the prediction of the black-box model; Φ(g) is the model complexity.

As a result, the prediction is explained by analyzing coeﬃcients of the local linear model. The
output of LIME, therefore, is a set of important features corresponding to coeﬃcients of the linear
model.

5 A general algorithm of SurvLIME and SurvLIME-Inf

Suppose that there are a training set D and a black-box model which produces an output in the form
of the CHF H(t|x) for every new instance x. An idea behind SurvLIME is to approximate the output
of the black-box model with the CHF produced by the Cox model for the same input instance x.
With this approximation, we get the parameters b of the approximating Cox model, whose values can
be regarded as quantitative impacts on the prediction H(t|x). The largest coeﬃcients indicate the
corresponding important features.

Denote the Cox CHF as HCox(t|x, b). Then we have to ﬁnd such parameters b that the distance
between H(t|x) and HCox(t|x, b) for the considered instance x would be as small as possible. In order
to avoid incorrect results, a lot of nearest points xk in a local area around x is generated. For every
xk, the CHF H(t|xk) of the black-box model is obtained as a prediction of the black-box model. Now
optimal values of b can be computed by minimizing the weighted average distance between every
pair of CHFs H(t|xk) and HCox(t|xk, b) over all points xk. Weight wk assigned to the k-th distance
depends on the distance between xk and x. Smaller distances between xk and x produce larger weights
of distances between CHFs.

It is important to point out that the optimization problem for computing parameters b depends
on the used distance metric between CHFs H(t|xk) and HCox(t|xk, b). SurvLIME uses the L2-norm
which leads to a convex optimization problem. SurvLIME-Inf uses the L∞-norm. We will show that
this distance metric leads to the linear programming problem whose solution is very simple.

6 Optimization problem for computing parameters

Let t0 < t1 < ... < tm be the distinct times to event of interest, for example, times to deaths
from the set {T1, ..., Tn}, where t0 = mink=1,...,n Tk and tm = maxk=1,...,n Tk. The black-box model

5

maps the feature vectors x ∈ Rd into piecewise constant CHFs H(t|x) such that H(t|x) ≥ 0 for all t,
maxt H(t|x) < ∞. Let us introduce the time T ≥ tm in order to restrict H(t|x) and denote Ω = [0, T ].
Interval Ω can be divided into into m + 1 non-intersecting subsets Ω0, ..., Ωm such that Ωj =
[tj, tj+1), ∀j ∈ {0, ..., m − 1}, Ωm = [tm, T ]. After introducing the indicator functions Ij(t), which
takes the value 1 when t ∈ Ωj, and 0 otherwise, we rewrite H(t|x) as follows:

H(t|x) =

m
(cid:88)

j=0

Hj(x) · Ij(t).

(4)

Here Hj(x) is a part of H(t|x) in interval Ωj under additional condition Hj(x) > 0. CHF Hj(x)

does not depend on t in interval Ωj because it is constant in this interval.

The same can be written for the Cox CHF:

HCox(t|x, b) = H0(t) exp (cid:0)bTx(cid:1) =

m
(cid:88)

j=0

(cid:2)H0j exp (cid:0)bTx(cid:1)(cid:3) · Ij(t).

(5)

It should be noted that the use CHFs for computing the distance between them leads to a complex
optimization problem which may be non-convex. Therefore, we proposed to take logarithms of H(t|x)
and HCox(t|x, b) denoted as φ(t|x) and φCox(t|x, b), respectively. Since the logarithm is the monotone
function, then there hold

φ(t|x) =

m
(cid:88)

(ln Hj(x))Ij(t),

j=0

φCox(t|x, b) =

=

m
(cid:88)

j=0
m
(cid:88)

j=0

(cid:0)ln (cid:2)H0j exp (cid:0)bTx(cid:1)(cid:3)(cid:1) Ij(t)

(cid:0)ln Hj(x) − ln H0j − bTx(cid:1) Ij(t).

(6)

(7)

Let us consider the distance between φ(t|xk) and φCox(t|xk, b) based on the L∞-norm for every

generated point xk:

D∞,k (φ, φCox) = (cid:107)φ(t|xk) − φCox(t|xk, b)(cid:107)∞

= max
t∈Ω

|φ(t|xk) − φCox(t|xk, b)| .

(8)

Hence, the weighted average distance between φ(t|xk) and φCox(t|xk, b) for N generated points

xk has to be minimized over b. This can be written as the following optimization problem:

(cid:32) N
(cid:88)

k=1

min
b

wk · max
t∈Ω

|φ(t|xk) − φCox(t|x, b)|

.

(cid:33)

Let us introduce the optimization variables

zk = max
t∈Ω

|φ(t|xk) − φCox(t|xk, b)| .

6

(9)

(10)

They are restricted as follows:

The above constraints for every t can be represented as two constraints

zk ≥ |φ(t|xk) − φCox(t|xk, b)| , ∀t ∈ Ω.

zk ≥ φ(t|xk) − φCox(t|xk, b), ∀t ∈ Ω,

zk ≥ φCox(t|xk, b) − φ(t|xk), ∀t ∈ Ω.

Substituting (6)-(7) into (9) and taking into account (12)-(13), we get

subject to ∀t ∈ Ω and k = 1, ..., N ,

min
b

N
(cid:88)

k=1

wkzk,

zk ≥

zk ≥

m
(cid:88)

j=0

m
(cid:88)

j=0

(cid:0)ln Hj(xk) − ln H0j − bTxk

(cid:1) Ij(t),

(cid:0)ln H0j + bTxk − ln Hj(xk)(cid:1) Ij(t).

The last constraints can be rewritten as

zk ≥ ln Hj(xk) − ln H0j − bTxk, j = 0, ..., m,

(11)

(12)

(13)

(14)

(15)

(16)

(17)

(18)
Note that term bTxk does not depend on j. This implies that the constraints can be reduced to

zk ≥ bTxk+ ln H0j − ln Hj(xk), j = 0, ..., m.

the following simple constraints:

where

zk ≥ Qk − bTx, k = 1, ..., N,

zk ≥ bTx − Rk, k = 1, ..., N,

Qk = max

j=0,...,m

Rk = min

j=0,...,m

(ln Hj(xk) − ln H0j) ,

(ln Hj(xk) − ln H0j) .

(19)

(20)

(21)

(22)

Finally, we get the linear optimization problem with d + N optimization variables (z1, ..., zN and

b) and 2N constraints. It is of the form:

subject to

min
b

N
(cid:88)

k=1

wkzk,

zk ≥ Qk − xkbT, k = 1, ..., N,
zk ≥ xkbT − Rk, k = 1, ..., N.

(23)

(24)

(25)

Finally, we write the following scheme of Algorithm 1.

7

Algorithm 1 The algorithm for computing vector b for point x in SurvLIME-Inf
Require: Training set D; point of interest x; the number of generated points N ; the black-box

survival model for explaining f (x)
Ensure: Vector b of important features
1: Compute the baseline CHF H0(t) of the approximating Cox model on dataset D by using the

Nelson–Aalen estimator

2: Generate N − 1 random nearest points xk in a local area around x, point x is the N -th point
3: Get the prediction of H(t|xk) by using the black-box survival model (the function f )
4: Compute weights wk = K(x, xk) of perturbed points, k = 1, ..., N
5: Find vector b by solving the convex optimization problem (23)-(25)

7 Numerical experiments

7.1 Synthetic data

In order to investigate the proposed method, random survival times to events are generated by using
the Cox model estimates. For experiments, we randomly generate N = 1000 covariate vectors x ∈ Rd
from the uniform distribution in the d-sphere with predeﬁned radius R = 8. Here d = 5. The center of
the sphere is p = (0, 0, 0, 0, 0). There are several methods for the uniform sampling of points x in the
d-sphere with the unit radius R = 1, for example, [6, 22]. Then every generated point is multiplied
by R.

We use the Cox model estimates to generate random survival times, applying results obtained
by Bender et al.
[7] for survival time data for the Cox model with Weibull distributed survival
times. The Weibull distribution with the scale λ = 10−5 and shape v = 2 parameters is used
to generate appropriate survival times for simulation studies because this distribution shares the
assumption of proportional hazards with the Cox regression model [7]. If we take the vector bT =
(−0.25, 10−6, −0.1, 0.35, 10−6), then the following expression can be used for generating survival times
[7]:

T =

(cid:18) − ln(U )

(cid:19)1/v

λ exp(bTx)

,

(26)

where U is the random variable uniformly distributed in interval [0, 1].

It can be seen that vector b has two almost zero-valued elements and three “large” elements
which will correspond to important features. Generated values Ti are restricted by the condition: if
Ti > 2000, then Ti is replaced with value 2000. The event indicator δi is generated from the binomial
distribution with probabilities Pr{δi = 1} = 0.9, Pr{δi = 0} = 0.1.

Perturbations can be viewed as a step of the algorithm. According to it, N nearest points xk are
generated in a local area around x. These points are uniformly generated in the d-sphere with some
predeﬁned radius r = 0.5 and with the center at point x. Weights to every point are assigned as
follows:

wk = 1 − (cid:0)r−1 · (cid:107)x − xk(cid:107)2

(cid:1)1/2

.

(27)

To compare vectors b, we introduce the following notation: bmodel are coeﬃcients of the Cox
model which is used as the black-box model; btrue are coeﬃcients used for training data generation
(see (26)); bexpl are explaining coeﬃcients obtained by using the proposed explanation algorithm.

One of the aims of numerical experiments is to consider the method behavior by assuming that the
black-box model is the Cox model. With these experiments, we have an opportunity to compare the

8

Figure 1: The best, mean and worst approximations for the Cox model

vector btrue with vectors bmodel and bexpl because the black-box Cox model as well as the explanation
Cox model are expected to have close vectors b. We cannot perform the same comparison by using
the RSF as a black-box model. Therefore, the results with the RSF will be compared by considering
the proximity of SFs obtained from the RSF and the explanation Cox model.

To evaluate the algorithm, 900 instances are randomly selected from every cluster for training and
100 instances are for testing. In the test phase, the optimal explanation vector bexpl is computed
for every point from the testing set. In accordance with the obtained vectors bexpl, we depict the
best, mean and worst approximations on the basis of the Euclidean distance between vectors bexpl and
bmodel (for the Cox model) and with Euclidean distance between H(tj|xi) and HCox
(for
the RSF). In order to get these approximations, points with the best, mean and worst approximations
are selected among all testing points.

tj|xi, bexpl

(cid:17)

(cid:16)

i

The three cases (best (pictures in the ﬁrst row), mean (pictures in the second row) and worst
(pictures in the third row)) of approximations for the black-box Cox model are depicted in Fig. 1.
Left pictures show values of important features bexpl, bmodel and btrue. It can be seen from these
pictures that all experiments show very clear coincidence of important features for all models. Right
pictures in Fig. 1 show SFs computed by using the black-box Cox model and the Cox approximation.
It follows from the pictures that the approximation is perfect even for the worst case.

Similar results for the black-box RSF model are shown in Fig. 2 where three pictures correspond
to the best, mean and worst approximations. The important features are not shown in Fig. 2 because

9

Figure 2: The best, mean and worst approximations for the RSF model

RSF does not provide the important features like the Cox model. However, it follows from the SFs in
Fig. 2 that the proposed method provides the perfect approximation of the RSF output by the Cox
model.

It is interesting to point out that SurvLIME-Inf provides better results in comparison with
SurvLIME for small amounts of training data. In order to study the method under this condition,
the black-box Cox model and the RSF are trained on 10, 20, 30, 40 examples. The models are tested
on 10 examples. Numerical results for the Cox model are shown in Fig. 3 where rows correspond to
10, 20, 30, 40 training examples, respectively, left pictures in every row show relationships between
SFs obtained from the black-box Cox model and from the Cox approximation by using SurvLIME,
the same relationships by using SurvLIME-Inf are depicted in right pictures. One can see from Fig. 3
that SurvLIME-Inf provides better approximations of SFs in comparison with SurvLIME for cases of
10, 20, 30 training examples. However, it can be seen from the last row (40 training examples) that
SurvLIME becomes better with increase of the training set.

Measures RM SEmodel and RM SEtrue as functions of the sample size n for SurvLIME and
SurvLIME-Inf are provided in Table 1 for comparison purposes. They are deﬁned for the Cox model
from ntest testing results as follows:

RM SEtype =

(cid:32)

1
ntest

ntest(cid:88)

i=1

(cid:13)
(cid:13)btype
(cid:13)

i − bexpl

i

(cid:33)1/2

,

(cid:13)
(cid:13)
(cid:13)2

(28)

where is “model” and “true” is substituted into the above expression in place of “type”.

RM SEmodel characterizes how the obtained important features coincide with the corresponding
features obtained by using the Cox model as the black-box model. RM SEtrue considers how the
obtained important features coincide with the features used for generating the random times to events.
It can be seen from Table 1 that SurvLIME-Inf outperforms SurvLIME for small n, namely, for
n = 10 and 20. At the same time, this outperformance disappears with increasing n, i.e., when n = 30
and 40. This is a very interesting observation which tells us that SurvLIME-Inf should be used when
the training set is very small.

The same experiments are carried out for the RSF. They are shown in Fig. 4.

7.2 Real data

Let us apply the following well-known real datasets to study the method.

10

Figure 3: Comparison of the SFs relationship for SurvLIME and SurvLIME-Inf with using the black-
box Cox model by 10, 20, 30, 40 training examples

Table 1: Approximation measures for four cases of using the black-box Cox model by the small amount
of data for SurvLIME and SurvLIME-Inf

SurvLIME

SurvLIME-Inf

n RM SEmodel RM SEtrue RM SEmodel RM SEtrue
10
20
30
40

0.719
0.659
0.347
0.324

0.809
0.664
0.428
0.344

0.575
0.460
0.432
0.451

0.290
0.358
0.398
0.388

11

Figure 4: Comparison of the SFs relationship for SurvLIME and SurvLIME-Inf with using the RSF
by 10, 20, 30, 40 training examples

12

Figure 5: The mean approximation for the Cox model (the ﬁrst and the second picture) and the RSF
(the third picture) trained on the Veteran dataset

The Veterans’ Administration Lung Cancer Study (Veteran) Dataset [28] contains data on 137
males with advanced inoperable lung cancer. The subjects were randomly assigned to either a standard
chemotherapy treatment or a test chemotherapy treatment. Several additional variables were also
measured on the subjects. The number of features is 6, but it is extended till 9 due to categorical
features.

The NCCTG Lung Cancer (LUNG) Dataset [33] records the survival of patients with advanced
lung cancer, together with assessments of the patients performance status measured either by the
physician and by the patients themselves. The data set contains 228 patients, including 63 patients
that are right censored (patients that left the study before their death). The number of features is 8,
but it is extended till 11 due to categorical features.

The Primary Biliary Cirrhosis (PBC) Dataset contains observations of 418 patients with primary
biliary cirrhosis of the liver from the Mayo Clinic trial [17], 257 of whom have censored data. Every
example is characterized by 17 features including age, sex, ascites, hepatom, spiders, edema, bili and
chol, etc. The number of features is extended till 22 due to categorical features.

The above datasets can be downloaded via the “survival” R package.
Fig. 5 illustrates numerical results for the Veteran dataset. We provide only the case of the mean
approximation in order to reduce the number of similar pictures. Fig. 5 contains three pictures: the
ﬁrst one illustrates the explanation important features and important features computed by using the
Cox model; the second picture shows two SFs for the Cox model; the third picture shows two SFs for
the RSF. It follows from Fig. 5 that the method provides appropriate results for the real dataset.

Similar numerical results for the LUNG and PBC datasets are shown in Fig. 6 and Fig. 7,

respectively.

8 Conclusion

A new modiﬁcation of SurvLIME using the L∞-norm for computing the distance between CHFs in-
stead of the L2-norm has been presented in the paper. The basic idea behind both the methods is
to approximate a survival machine learning model at a point by the Cox proportional hazards mod-
el which assumes a linear combination of the instance covariates. However, this idea is diﬀerently
implemented in SurvLIME and SurvLIME-Inf. SurvLIME-Inf extends the set of explanation meth-
ods dealing with censored data in the framework of survival analysis. Numerical experiments with

13

Figure 6: The mean approximation for the Cox model (the ﬁrst and the second picture) and the RSF
(the third picture) trained on the LUNG dataset

Figure 7: The mean approximation for the Cox model (the ﬁrst and the second picture) and the RSF
(the third picture) trained on the PBC dataset

14

synthetic and real datasets have clearly illustrated accuracy and correctness of SurvLIME-Inf.

The main advantage of SurvLIME-Inf is that it uses the linear programming for computing coeﬃ-
cients of the approximating Cox model. This peculiarity allows us to develop new methods taking into
account inaccuracy of training data, possible imprecision of data. This is an interesting and important
direction for further research. Another problem, which can be solved by using SurvLIME-Inf, is to
explain machine learning survival models by using the Cox model with time-dependent covariates.
This is also an important direction for further research.

Acknowledgement

The reported study was funded by RFBR, project number 20-01-00154.

References

[1] K. Aas, M. Jullum, and A. Loland. Explaining individual predictions when features are depen-

dent: More accurate approximations to Shapley values. arXiv:1903.10464, Mar 2019.

[2] A. Adadi and M. Berrada. Peeking inside the black-box: A survey on explainable artiﬁcial

intelligence (XAI). IEEE Access, 6:52138–52160, 2018.

[3] I. Ahern, A. Noack, L. Guzman-Nateras, D. Dou, B. Li, and J. Huan. NormLime: A new feature

importance metric for explaining deep neural networks. arXiv:1909.04200, Sep 2019.

[4] A.B. Arrieta, N. Diaz-Rodriguez, J. Del Ser, A. Bennetot, S. Tabik, A. Barbado, S. Garcia,
S. Gil-Lopez, D. Molina, R. Benjamins, R. Chatila, and F. Herrera. Explainable artiﬁcial in-
telligence (XAI): Concepts, taxonomies, opportunities and challenges toward responsible AI.
arXiv:1910.10045, October 2019.

[5] V. Arya, R.K.E. Bellamy, P.-Y. Chen, A. Dhurandhar, M. Hind, S.C. Hoﬀman, S. Houde, Q.V.
Liao, R. Luss, A. Mojsilovic, S. Mourad, P. Pedemonte, R. Raghavendra, J. Richards, P. Sattigeri,
K. Shanmugam, M. Singh, K.R. Varshney, D. Wei, and Y. Zhang. One explanation does not ﬁt
all: A toolkit and taxonomy of AI explainability techniques. arXiv:1909.03012, Sep 2019.

[6] F. Barthe, O. Guedon, S. Mendelson, and A. Naor. A probabilistic approach to the geometry of

the l-ball. The Annals of Probability, 33(2):480–513, 2005.

[7] R. Bender, T. Augustin, and M. Blettner. Generating survival times to simulate cox proportional

hazards models. Statistics in Medicine, 24(11):1713–1723, 2005.

[8] I. Bou-Hamad, D. Larocque, and H. Ben-Ameur. A review of survival trees. Statistics Surveys,

5:44–71, 2011.

[9] L. Breiman. Random forests. Machine learning, 45(1):5–32, 2001.

[10] N. Breslow. Covariance analysis of censored survival data. Biometrics, 30:89–99, 1974.

[11] V. Buhrmester, D. Munch, and M. Arens. Analysis of explainers of black box deep neural networks

for computer vision: A survey. arXiv:1911.12116v1, November 2019.

15

[12] D.V. Carvalho, E.M. Pereira, and J.S. Cardoso. Machine learning interpretability: A survey on

methods and metrics. Electronics, 8(832):1–34, 2019.

[13] D.R. Cox. Regression models and life-tables. Journal of the Royal Statistical Society, Series B

(Methodological), 34(2):187–220, 1972.

[14] M. Du, N. Liu, and X. Hu. Techniques for interpretable machine learning. arXiv:1808.00033,

May 2019.

[15] B. Efron. The eﬃciency of Cox likelihood function for censored data. Journal of the American

Statistical Association, 72:557–565, 1977.

[16] D. Faraggi and R. Simon. A neural network model for survival data. Statistics in medicine,

14(1):73–82, 1995.

[17] T.R. Fleming and D.P. Harrington. Counting processes and survival aalysis. John Wiley & Sons,

Hoboken, NJ, USA, 1991.

[18] R. Fong and A. Vedaldi. Explanations for attributing deep neural network predictions.

In

Explainable AI, volume 11700 of LNCS, pages 149–167. Springer, Cham, 2019.

[19] R.C. Fong and A. Vedaldi. Interpretable explanations of black boxes by meaningful perturbation.
In Proceedings of the IEEE International Conference on Computer Vision, pages 3429–3437.
IEEE, 2017.

[20] D. Garreau and U. von Luxburg. Explaining the explainer: A ﬁrst theoretical analysis of LIME.

arXiv:2001.03447, January 2020.

[21] R. Guidotti, A. Monreale, S. Ruggieri, F. Turini, F. Giannotti, and D. Pedreschi. A survey of

methods for explaining black box models. ACM computing surveys, 51(5):93, 2019.

[22] R. Harman and V. Lacko. On decompositional algorithms for uniform sampling from n-spheres

and n-balls. Journal of Multivariate Analysis, 101:2297–2304, 2010.

[23] F. Harrell, R. Caliﬀ, D. Pryor, K. Lee, and R. Rosati. Evaluating the yield of medical tests.

Journal of the American Medical Association, 247:2543–2546, 1982.

[24] A. Holzinger, C. Biemann, C.S. Pattichis, and D.B. Kell. What do we need to build explainable

ai systems for the medical domain? arXiv:1712.09923, Dec 2017.

[25] D. Hosmer, S. Lemeshow, and S. May. Applied Survival Analysis: Regression Modeling of Time

to Event Data. John Wiley & Sons, New Jersey, 2008.

[26] L. Hu, J. Chen, V.N. Nair, and A. Sudjianto. Locally interpretable models and eﬀects based on

supervised partitioning (LIME-SUP). arXiv:1806.00663, Jun 2018.

[27] Q. Huang, M. Yamada, Y. Tian, D. Singh, D. Yin, and Y. Chang. GraphLIME: Local inter-

pretable model explanations for graph neural networks. arXiv:2001.06216, January 2020.

[28] J. Kalbﬂeisch and R. Prentice. The Statistical Analysis of Failure Time Data. John Wiley and

Sons, New York, 1980.

16

[29] J. Kim, I. Sohn, S.-H. Jung, S. Kim, and C. Park. Analysis of survival data with group lasso.

Communications in Statistics - Simulation and Computation, 41(9):1593–1605, 2012.

[30] M.S. Kovalev, L.V. Utkin, and E.M. Kasimov. SurvLIME: A method for explaining machine

learning survival models. arXiv:2003.08371, March 2020.

[31] C. Lee, W.R. Zame, J. Yoon, and M. van der Schaar. Deephit: A deep learning approach to
survival analysis with competing risks. In 32nd Association for the Advancement of Artiﬁcial
Intelligence ( AAAI) Conference, pages 1–8, 2018.

[32] H. Li, W. Fan, S. Shi, and Q. Chou. A modiﬁed lime and its application to explain service supply
chain forecasting. In CCF International Conference on Natural Language Processing and Chinese
Computing, pages 637–644, Cham, 2019. Springer.

[33] C.L. Loprinzi, J.A. Laurie, H.S. Wieand, J.E. Krook, P.J. Novotny, J.W. Kugler, J. Bartel,
M. Law, M. Bateman, and N.E. Klatt. Prospective evaluation of prognostic variables from patient-
completed questionnaires. north central cancer treatment group. Journal of Clinical Oncology,
3(12):601–607, 1994.

[34] S.M. Lundberg and S.-I. Lee. A uniﬁed approach to interpreting model predictions. In Advances

in Neural Information Processing Systems, pages 4765–4774, 2017.

[35] T. Marosevic. A choice of norm in discrete approximation. Mathematical Communications,

1(2):147–152, 1996.

[36] M. May, P. Royston, M. Egger, A.C. Justice, and J.A.C. Sterne. Development and validation
of a prognostic model for survival time data: application to prognosis of HIV positive patients
treated with antiretroviral therapy. Statistics in Medicine, 23:2375–2398, 2004.

[37] S. Mohseni, N. Zarei, and E.D. Ragan. A survey of evaluation methods and measures for inter-

pretable machine learning. arXiv:1811.11839, Dec 2018.

[38] C. Molnar. Interpretable Machine Learning: A Guide for Making Black Box Models Explainable.

Published online, https://christophm.github.io/interpretable-ml-book/, 2019.

[39] W.J. Murdoch, C. Singh, K. Kumbier, R. Abbasi-Asl, and B. Yua. Interpretable machine learning:

deﬁnitions, methods, and applications. arXiv:1901.04592, Jan 2019.

[40] M.Z. Nezhad, N. Sadati, K. Yang, and D. Zhu. A deep active survival analysis approach for
precision treatment recommendations: Application of prostate cancer. arXiv:1804.03280v1, April
2018.

[41] V. Petsiuk, A. Das, and K. Saenko. Rise: Randomized input sampling for explanation of black-

box models. arXiv:1806.07421, June 2018.

[42] J. Rabold, H. Deininger, M. Siebers, and U. Schmid. Enriching visual with verbal explanations
for relational concepts: Combining LIME with Aleph. arXiv:1910.01837v1, October 2019.

[43] Y. Ramon, D. Martens, F. Provost, and T. Evgeniou. Counterfactual explanation algorithms for

behavioral and textual data. arXiv:1912.01819, December 2019.

[44] M.T. Ribeiro, S. Singh, and C. Guestrin. “Why should I trust You?” Explaining the predictions

of any classiﬁer. arXiv:1602.04938v3, Aug 2016.

17

[45] M.T. Ribeiro, S. Singh, and C. Guestrin. Anchors: High-precision model-agnostic explanations.

In AAAI Conference on Artiﬁcial Intelligence, pages 1527–1535, 2018.

[46] C. Rudin. Stop explaining black box machine learning models for high stakes decisions and use

interpretable models instead. Nature Machine Intelligence, 1:206–215, 2019.

[47] S.M. Shankaranarayana and D. Runje. ALIME: Autoencoder based approach for local inter-

pretability. arXiv:1909.02437, Sep 2019.

[48] S. Shi, X. Zhang, and W. Fan. A modiﬁed perturbed sampling method for local interpretable

model-agnostic explanation. arXiv:2002.07434.

[49] K. Sim and R. Hartley. Removing outliers using the l∞ norm.

In IEEE Computer Society
Conference on Computer Vision and Pattern Recognition (CVPR’06), volume 1, pages 485–494,
New York, NY, USA, 2006.

[50] E. Strumbel and I. Kononenko. An eﬃcient explanation of individual classiﬁcations using game

theory. Journal of Machine Learning Research, 11:1–18, 2010.

[51] R. Tibshirani. The lasso method for variable selection in the cox model. Statistics in medicine,

16(4):385–395, 1997.

[52] E. Tjoa and C. Guan. A survey on explainable artiﬁcial intelligence (XAI): towards medical XAI.

arXiv:1907.07374v3, October 2019.

[53] M.N. Vu, T.D. Nguyen, N. Phan, and M.T. Thai R. Gera. Evaluating explainers via perturbation.

arXiv:1906.02032v1, Jun 2019.

[54] S. Wachter, B. Mittelstadt, and C. Russell. Counterfactual explanations without opening the
black box: Automated decisions and the GPDR. Harvard Journal of Law & Technology, 31:841–
887, 2017.

[55] P. Wang, Y. Li, and C.K. Reddy. Machine learning for survival analysis: A survey. arX-

iv:1708.04649, August 2017.

[56] A. White and A.dA. Garcez. Measurable counterfactual local explanations for any classiﬁer.

arXiv:1908.03020v2, November 2019.

[57] M.R. Zafar and N.M. Khan. DLIME: A deterministic local interpretable model-agnostic expla-

nations approach for computer-aided diagnosis systems. arXiv:1906.10263, Jun 2019.

[58] H.H. Zhang and W. Lu. Adaptive Lasso for Cox’s proportional hazards model. Biometrika,

94(3):691–703, 2007.

[59] L. Zhao and D. Feng. Dnnsurv: Deep neural networks for survival analysis using pseudo values.

arXiv:1908.02337v2, March 2020.

18

