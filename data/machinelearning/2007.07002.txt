Combining Deep Learning and Optimization for
Security-Constrained Optimal Power Flow

Alexandre Velloso and Pascal Van Hentenryck

1

0
2
0
2

l
u
J

4
1

]

C
O
.
h
t
a
m

[

1
v
2
0
0
7
0
.
7
0
0
2
:
v
i
X
r
a

Abstract—The

security-constrained optimal power ﬂow
in power systems and connects the
(SCOPF) is fundamental
automatic primary response (APR) of synchronized generators
with the short-term schedule. Every day, the SCOPF problem
is repeatedly solved for various inputs to determine robust
schedules given a set of contingencies. Unfortunately,
the
modeling of APR within the SCOPF problem results in complex
large-scale mixed-integer programs, which are hard to solve.
To address this challenge,
leveraging the wealth of available
historical data,
this paper proposes a novel approach that
combines deep learning and robust optimization techniques.
Unlike recent machine-learning applications where the aim is to
mitigate the computational burden of exact solvers, the proposed
method predicts directly the SCOPF implementable solution.
Feasibility is enforced in two steps. First, during training, a
Lagrangian dual method penalizes violations of physical and
operations constraints, which are iteratively added as necessary
to the machine-learning model by a Column-and-Constraint-
Generation Algorithm (CCGA). Second, another different CCGA
restores feasibility by ﬁnding the closest feasible solution to
the prediction. Experiments on large test cases show that the
method results in signiﬁcant time reduction for obtaining feasible
solutions with an optimality gap below 0.1%.

Index

Terms—

Column-and-constraint

decomposition methods,
deep
primary response, security-constrained optimal power ﬂow.

learning,

neural

generation,
network,

NOMENCLATURE
This section introduces the main notation. Bold symbols
are used for matrices (uppercase) and vectors (lowercase).
Additional symbols are either explained in the context or
interpretable by applying the following general rules: Symbols
with superscript “j”, “k”, or “l” denote new variables,
parameters or sets corresponding to the j-th, k-th, or l-th
iteration of the associated method. Symbols with superscript
“∗” denote the optimal value of the associated (iterating)
variable. Symbols with superscript “t” are associated with the
data set for the t-th past solve. Dotted symbols are associated
with predictors for the corresponding variable.

Sets

E, Es

Fs

Feasibility sets for variables associated with the
nominal state and contingent state s, respectively.
Feasibility set for primary response variables under
contingent state s.
Full set and subset of constraints.

C, C
G, L, N Sets of generators, transmission lines and buses,

respectively.
Full set and subset of contingencies, respectively.
Full set and subset of past solves, respectively.

S, S
T , T
U+, U− Subsets of line–contingent state pairs.
Ys

Set of decision variables associated with automatic
primary response under contingent state s.

Parameters

Learning rate and Lagragian dual step size.

α, ρ
β, β1, βc Parameters for selecting constraints.
γ
γi
(cid:15)
λ, λc

Vector of parameters for primary response.
Parameter for primary response of generator i.
Tolerance for transmission line violation.
Vectors
Lagrangian multipliers for constraint c.
ν, νc, ˜νc Vector for violations, violation for constraint c, and

all Lagrangian multipliers

and

for

median violation for c among past solves T .

A, B Line-bus and Generator-bus incidence matrices.
ω
d
e
f
g, g
gi
ˆg
ˆgi
h(·)
K0
K1
k2, k3
r
ri
S

Vector of weights for deep neural network.
Vector of nodal net loads.
Vector of ones with appropriate dimension.
Vector of line capacities.
Vectors of lower and upper limits for generators.
Upper limit for generator i.
Vector of capacities for generators.
Capacity of generator i.
Piecewise linear generation costs.
Matrix of power transfer distribution factors.
Preprocessed matrix for ﬂow limits.
Preprocessed vectors for ﬂow limits.
Vector of primary response limits of generators.
Element of r related to generator i, given by γiˆgi.
Angle-to-ﬂow matrix.

Nominal-state-related decision variables and vectors

θ, f , g
gi

Phase angles, line ﬂows, and nominal generation.
Generation of generator i in nominal state.

s , τ −

Contingent-state-related decision variables and vectors
Vector of phase angles under contingent state s.
θs
τ +
s Vectors of line violation under contingent state s.
φ, sφ Highest line violation and related contingent state.
˜φ
Median highest line violation among instances T .
Vector for line ﬂows under contingent state s.
fs
Vector for generation under contingent state s.
gs
(cid:48)
g
Provisional vector for gs.
s
gs,i
Generation of generator i under contingent state s.
(cid:48)
Provisional variable for gs,i.
g
s,i
Global signal under contingent state s.
ns
xs
Binary vector indicating whether generators reached
g under contingency state s.
Element of xs corresponding to generator i.

xs,i

A. Motivation

I. INTRODUCTION

The authors are afﬁliated with the School of Industrial and Systems
Engineering, Georgia Institute of Technology, Atlanta, GA 30332, USA. E-
mail: avelloso@gatech.edu, pvh@isye.gatech.edu.

Power systems operations require constant equilibrium
between nodal loads and generation. At the scale of seconds,

 
 
 
 
 
 
this balance is achieved by Automatic Primary Response
(APR) mechanisms that govern the synchronized generators.
For longer time scales, ranging from a few minutes to hours
or even days ahead,
this balance is obtained by solving
mathematical optimization problems, as independent system
operators seek consistent and efﬁcient schedules satisfying
complex physical and operational constraints. The need to
solve these optimization problems in a timely manner is
driving intense research about new models and algorithms,
both in industry and academia. In this vein, this work aims
at speeding up solution times of security-constrained optimal
power ﬂow (SCOPF) problem [1]–[7] by combining deep
learning and robust optimization methods. The SCOPF is
solved by operators every few minutes for different sets of bus
loads. The high penetration of renewable sources of energy has
increased the frequency of these optimizations. The SCOPF
problem considered in this work links the APR to the very
short-term schedule. It is also relevant to mention that the
SCOPF problem is directly or indirectly present in many other
power system applications, including security-constrained unit
commitment [8], transmission switching [9], and expansion
planning [10]. Thus, a reduction in the computational burden
would allow system operators to introduce important modeling
improvements to many applications.

a

B. Contextualization and Related Work
The SCOPF problem determines

least-cost
for

pre-
contingency generator dispatch that allows
feasible
points of operation for a set of contingencies, e.g., individual
failures of main lines and/or generators. The SCOPF problem
may refer to the corrective case [5] where re-scheduling
is deemed possible and to the preventive case where no
the system must be
re-dispatch occurs [3], [6], [11],
able to achieve a feasible steady-state point without a new
schedule. A valuable review of the SCOPF problem and
solution methods is available in [4]. Interesting discussions
about credible contingencies, reserve requirements, security
criteria, and regulation for reserves can be found in [2], [6],
[12] and the references therein. Without loss of generality,
the N − 1 security criterion for generators is adopted in this
paper, i.e., the system must operate under the loss of any
single generator.

i.e.,

The SCOPF is a nonlinear and nonconvex problem based
on the AC optimal power ﬂow (OPF) equations. Extensive
reviews can be found in [13] and [14]. The DC formulation
of the SCOPF has been widely used in both academia and
industry [2], [3], [6], [7]. Interesting discussions regarding
the quality of approximations and relaxations of the OPF
problem can be found in [15]–[18]. The DC-SCOPF can
also be used to improve AC-SCOPF approaches [19]. It is
not within the scope of this work to discuss the quality of
aforementioned approximations or relaxations to the optimal
power ﬂow. Instead, this research offers a new approach that
improves current industry practices, which is still strongly
based on DC-SCOPF.

for
The APR of synchronized generators is essential
stability. These generators respond automatically to frequency
variations, caused by power imbalances for instance, by
adjusting their power outputs until frequency is normalized
and the power balance is restored. Unfortunately, the APR
deployment, which is bounded by generators limits only, may

2

result in transmission line overloads [6], [11], [20]. Therefore,
this work co-optimizes the APR of synchronized generators
within the (preventive) SCOPF problem. Even though the
APR behavior is nonlinear, linear approximations are used in
practice [21]. In [6], [7], [11], [22], [23], the APR is modeled
by a single variable representing frequency drop (or power
loss) for each contingency state and by a participation factor
for each generator.

The DC-SCOPF problem with APR is referred to as the
SCOPF problem for conciseness in this paper. It admits
an exact extensive formulation (with all variables and
constraints for nominal state and contingency states) as a
mixed-integer linear program (MILP) [6], [11]. Nevertheless,
this formulation is generally very large because the APR
constraints require binary variables for each generator and for
each contingency state to determine whether generators are
producing according to the linear response model or are at
their limits [6], [11]. Thus, the number of binary variables
increases quadratically with the number of generators, which
makes the extensive form of the SCOPF impractical. Better
modeling strategies and decomposition schemes are required.
The robust optimization framework has been widely applied
in power systems due to its interesting tradeoff between
modeling capability and tractability. See [24] for a review
of robust optimization applications in power systems. The
SCOPF problem can be modeled as a two-stage robust
optimization or adaptive robust optimization (ARO) and
tackled by two main decomposition methods: Benders
decomposition [25] and the column-and-constraint-generation
algorithm (CCGA) [26]. Both approaches rely on iterative
procedures that solve a master problem and subproblems.
The master problem is basically the nominal OPF problem
with additional cuts/constraints and variables representing
feasibility or optimality information on the subproblems.
Whereas Benders decomposition provides dual information
about the subproblems through valid cuts restricting the master
problem, the CCGA adds primal contraints and variables from
the subproblems to the master problem.

Unfortunately, the SCOPF problem is not suitable for a
traditional Benders decomposition since the subproblems are
nonconvex due to the APR constraints (which feature binary
inspired by [25], an
variables). Despite such challenges,
interesting heuristic method was proposed in [6] but it does
not guarantee optimality. In contrast, the CCGA algorithm
proposed in [11] is an exact solution method which was used
to produce optimal solutions to power network with more than
2,000 buses. Notwithstanding aforementioned contributions,
both approaches still require signiﬁcant computational effort
to obtain near-optimal solutions.

Machine learning (ML) approaches have been advocated to
address the computational burden associated with the hard and
repetitive optimization problems in the power sector, given the
large amounts of historical data (i.e., past solutions). Initial
attempts date back to the early 1990s, when, for example,
artiﬁcial neural networks were applied to predict the on/off
decisions of generators for an unit commitment problem [27],
[28]. More recently, ML was used to identify partial warm-
start solutions and/or constraints that can be omitted, and
to determine afﬁne subspaces where the optimal solution
is likely to lie [29]. Artiﬁcial neural network and decision
tree regression were also used to learn sets of high-priority

lines to consider for transmission switching [30], while the
k-nearest neighbors approach was used to select previously
optimized topologies directly from data [31]. As for the
security and reliability aspects of the network, the security-
boundary detection was modeled with a neural network to
simplify stability constraints for the optimal power ﬂow
[32], while decision trees were applied to determine security
boundaries (regions) for controllable variables for a coupled
natural gas and electricity system [33]. Machine learning
was also applied for identifying the relevant sets of active
constraints for the OPF problem [34].

Unlike these applications, where the main purpose of
machine learning is to enhance the solver performance by
classifying sets, eliminating constraints, and/or by modeling
speciﬁc parts of the problems, the machine-learning approach
in [35] directly predicts the generator dispatch for the OPF
by combining deep learning and Lagrangian duality. This
approach produces signiﬁcant computational gains but is not
directly applicable to the SCOPF problem which features an
impractical number of variables and constraints. This work
remedies this limitation.

C. Contributions

The paper assumes the existence of historical SCOPF data,
i.e., pairs of inputs and outputs [29]–[31], [34], [35] The
proposed approach uses a deep neural network (DNN) to
approximate the mapping between loads and optimal generator
dispatches. To capture the physical, operational, and APR
constraints, the paper applies the Lagrangian dual scheme
of [35] that penalizes constraint violations at training time.
Moreover, to ensure computational tractability, the training
process, labeled as CCGA-DNN, mimics a dedicated CCGA
algorithm that iteratively adds new constraints for a few critical
contingencies. In these constraints, an approximation for the
post-contingency generation is adopted to keep the size of
the DNN small. The resulting DNN provides high-quality
approximations to the SCOPF in milliseconds and can be used
to seed another dedicated CCGA to ﬁnd the nearest feasible
solution to the prediction. The resulting approach may bring
two orders of magnitude improvement in efﬁciency compared
to the original CCGA algorithm.

In summary,

the contributions can be summarized as
follows: i) a novel DNN that maps a load proﬁle onto a
high-quality approximation of the SCOPF problem, ii) a new
training procedure, the CCGA-DNN, that mimics a CCGA,
where the master optimization problem is replaced by a DNN
iii) an approximation for the post-contingency
prediction,
generation which keeps the DNN size small, and iv) an
dedicated CCGA algorithm seeded with the DNN evaluation
to obtain high-quality feasible solutions fast. Of particular
is the tight combination of machine learning and
interest
optimization proposed by the approach.

D. Paper Organization

This paper is organized as follows. Section II introduces
the SCOPF problem. Section III presents the properties of
the SCOPF problem and the CCGA for SCOPF. Section IV
introduces the deep learning models in stepwise reﬁnements.
Section V describes the CCGA for feasibility recovery. Section
VI reports the case studies and the numerical experiments and
Section VII concludes the paper.

3

II. THE SCOPF PROBLEM

A. The Power Flow Constraints
The SCOPF formulation

security-
constrained DC power ﬂow constraints over
the vectors
for generation g, ﬂows f , and phase angles θ. In matrix
notations, these constraints are represented as follows:

traditional

uses

Af + Bg = d
f = Sθ

− f ≤ f ≤ f
g ≤ g ≤ g

(1)
(2)

(3)
(4)

Afs + Bgs = d
fs = Sθs
− f ≤ fs ≤ f
gs ≤ g

∀s ∈ S (5)
∀s ∈ S (6)
∀s ∈ S (7)
∀s ∈ S (8)

(1)–(4) model

Equations
the DC power ﬂow in pre-
contingency state and capture the nodal power balance (1),
Kirchhoff’s second law (2), transmission line limits (3), and
generator limits (4). Analogously, equations (5)–(8) model the
power ﬂow for each post-contingency state s. The bounds
g in (4) and (8) may be different from capacity ˆg due to
commitment and/or operational constraints.

B. Automatic Primary Response

The APR is modeled as in [6], [7], [11]: under contingent
state s, a global variable ns is used to mimic the level of
system response required for adjusting the power imbalance.
The APR of generator i under contingency s, gs,i − gi,
is proportional to its capacity ˆgi and to the parameter γi
associated with the droop coefﬁcient, i.e.,

∀i ∈ G, ∀s ∈ S, i (cid:54)= s
∀s ∈ S.

gs,i = min{gi + nsγi ˆgi, gi}
gs,s = 0

(9)
(10)
These equations are nonconvex and can be linearized by
introducing binary variables xs,i to denote whether generator
i in scenario s is not at its limit, i.e.,
|gs,i − gi − nsγiˆgi| ≤ gi(1 − xs,i) ∀i ∈ G, s ∈ S, i (cid:54)= s (11)
∀i ∈ G, s ∈ S, i (cid:54)= s (12)
gi + nsγi ˆgi ≥ gi(1 − xs,i)
gs,i ≥ gi(1 − xs,i)
∀i ∈ G, s ∈ S, i (cid:54)= s (13)
ns ∈ [0, 1]
∀s ∈ S (14)
∀i ∈ G, s ∈ S (15)
xs,i ∈ {0, 1}
∀s ∈ S. (16)
gs,s = 0

C. Extensive Formulation for the SCOPF Problem
The extensive formulation for the SCOPF problem using
variables for generation, ﬂows, and phase angles is as follows:
h(g)
(17)

min
θ,f ,g,[θs,fs,gs,ns,xs]s∈S
s.t.:

(18)
(19)
Using power transfer distribution factors (PTDF), constraints
(1)–(8) can be replaced by the following constraints:

(1) − (4)
(5) − (16)

∀s ∈ S.

e(cid:62)g = e(cid:62)d
(20)
|K0(d − Bg)| ≤ f (21)
(22)
(4)

e(cid:62)gs = e(cid:62)d
|K0(d − Bgs)| ≤ f
(8)

∀s ∈ S (23)
∀s ∈ S (24)
∀s ∈ S (25)

Constraints (20)–(25) that involve the PTDF matrix K0 are
from [36]. The total demand balance for the nominal and
contingent states are enforced by (20) and (23) respectively. In

constraints (21) and (24), the PTDF matrix translates the power
injected by each generator at its bus into its contribution to
the ﬂow of each line. These constraints also bound the ﬂows
from above and below. Observe that g and gs are the only
variables in this formulation.

For conciseness, denote the power ﬂow constraints (20)–
(22) and (23)–(25) by g ∈ E and gs ∈ Es respectively.
Similarly, denote the APR constraints (11)–(16) by Ys =
[g, gs, xs, ns] ∈ Fs. The extensive SCOPF formulation then
becomes
min
g,[gs,xs,ns]s∈S

h(g)

(26)

s.t.: g ∈ E

gs ∈ Es
Ys ∈ Fs

(27)
∀s ∈ S (28)
∀s ∈ S (29)

Note that
the number of binary variables above grows
quadratically with the number of generators. Hence, solving
(26)–(29) becomes impractical for large-scale systems.

III. SCOPF PROPERTIES AND CCGA

This section introduces key properties of

s for g and ns,
s for gs that can be computed

the SCOPF
problem and summarizes the CCGA proposed in [11]. These
properties are necessary for the CCGA and the ML models.
The CCGA serves both as a benchmark for evaluation and is
used as part of the feasibility recovery scheme proposed in
Section V.
Property 1: For s ∈ S, given values g∗ and n∗
there exists a unique value g∗
directly using constraints (11)–(16).
Property 2: Consider s ∈ S and a value g∗ for g. If there
exists a value n∗
s for ns that admits a feasible solution to
constraints (11)–(16) and (23), then this value n∗
s is unique
and can be computed by a simple bisection method [11].
Property 2 holds since, for a given g∗, each component of
gs is continuous and monotone with respect to ns. Hence the
value n∗
s that satisfy constraint
(23) can be found by a simple bisection search over ns.
Property 3: Constraint (24) can be formulated as

s and its associated vector g∗

K1gs + k2 ≥ 0
K1gs + k3 ≥ 0,

(30)
(31)

using matrix operations to obtain K1, k2, and k3.
Note that each row of K1 and each element of k2 and k3
are associated with a speciﬁc transmission line. Therefore, for
each s ∈ S and for each line, the (positive and negative)
violation of the thermal limit of the line can be obtained by
inspecting (30)–(31) for the proposed value g(∗)
s .

4

Algorithm 1 CCGA
1: Initialization: j ← 0, S ← ∅, U+ ← ∅, U− ← ∅
2: for j = 0, 1, . . . do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: end for

solve (32)–(36) to obtain gj
nj
s ← apply the bisection method on all s ∈ S
gj
s ← enforce (11)–(16) on all s ∈ S
s ← get the line violations of gj
s , τ +
τ −
φ ← compute the highest line violation among all s ∈ S
sφ ← select the contingent state associated with φ
S ← S ∪ {sφ}
U+ ← U+ ∪ { (l, s) | τ +
U− ← U− ∪ { (l, s) | τ −
BREAK if φ ≤ (cid:15).

s [l] > β}
s [l] > β}

s using (30)–(31) for all s ∈ S

min

h(g)

g,[g(cid:48)

s]s∈S ,[xs,ns]s∈S

s.t.: g ∈ E

(cid:48)

g
s − g ≤ r
(8), (23), (16)
Ys ∈ Fs
Kl
1g
Kl
1g

s + kl
s + kl

(cid:48)

(cid:48)

2 ≥ 0
3 ≥ 0

(32)

(33)

∀s ∈ S (34)
∀s ∈ S (35)
∀s ∈ S (36)
∀(l, s) ∈ U+ (37)
∀(l, s) ∈ U− (38)

(cid:48)

Constraints (32)–(38) uses variables g
s to denote a “guess”
for the post-contingency generation: the actual vector gs is not
determined by the master problem but by the aforementioned
bisection method. Constraint (33) enforces the nominal state
constraints. Constraint (34) imposes a valid bound for post-
contingency generation. For all contingencies, constraint (35)
enforces the generation capacity (8), total demand satisfaction
(23), and the absence of generation for a failed generator (16).
The APR is enforced “on-demand” in (36) for a reduced set of
contingent states S. Initially, S = ∅. Inequalities (37)–(38) are
also the “on-demand” versions of (30)–(31) for (a few) pairs
of transmission lines and contingencies. Initially, U+ and U−
are empty sets.

s, nj

s, xj

s and τ −

s]s∈S . The vectors τ +

The CCGA algorithm is speciﬁed in Algorithm 1. At
iteration j, the master problem (32)–(38) computes gj. The
bisection method then determines the contingent state variables
[gj
s of positive numbers
represent the positive and negative violations of transmission
lines for contingent state s: they are calculated for all s ∈ S
by inspecting constraints (30)–(31) for [gj
s]s∈S . The algorithm
then computes the highest single line violation φ among
all contingent states and uses sφ to denote the contingent
state associated with φ. The pairs lines/contingencies featuring
violations above a predeﬁned threshold β are added to the
master problem by updating sets U+ and U−. Likewise, sφ
is added to S. As a result, the variables and APR constraints
associated with sφ are added to the master problem during the
next iteration. The CCGA terminates when φ < (cid:15), where (cid:15) is
the tolerance for line violation.

A. The Column and Constraint Generation Algorithm

The CCGA, which relies on the above properties, alternates
between solving a master problem to obtain a nominal
schedule g and a bisection method to obtain the state variables
of each contingency. The master problem is speciﬁed as
follows:

The following result from [11] ensures the correctness
of CCGA: It shows that a solution to the master problem
produces a nominal generation for which there exists a solution
to each contingency that satisﬁes the APR and total demand
constraints. Since the CCGA adds at least one violated line
constraint and, possibly, a set of violated APR constraints for
one contingency to the master problem at each iteration, it is
guaranteed to converge after a ﬁnite number of iterations.

(cid:48)

(cid:48)

s and g∗

Theorem 1: For each solution g∗ to the master problem, there
exist values n∗
s that satisfy the demand constraint
s = e(cid:62)d and the APR constraints (11)–(16) for each
e(cid:62)g∗
contingency s.
s,i ≤ min {gi, gi + γiˆgi} for each i
Proof: By (8) and (34), g
and s, where g
s,i is the i-th element of g
s. When ns = 0,
gs = g, except for gs,s = 0. When ns = 1, gs,i =
min {gi, gi + γiˆgi} ≥ g
s,i for each i and s, with i (cid:54)= s. Since,
s meets the global demand, e(cid:62)gs ≥ e(cid:62)g
s = e(cid:62)d
by (23), g
when ns = 1. By the monotonicity and continuity of gs,i
there is a value n∗
with respect
s
whose associated g∗
s satisﬁes the demand constraint in (23)
and preserves the APR constraints (cid:3).

to ns (for a given gi),

(cid:48)

(cid:48)

(cid:48)

(cid:48)

IV. DEEP NEURAL NETWORKS FOR SCOPF

This section describes the use of supervised learning to
obtain DNNs that map a load vector into a solution of the
SCOPF problem. A DNN consists of many layers, where the
input for each layer is typically the output of the previous
layer [37]. This work uses fully-connected DNNs.

A. Speciﬁcation of the Learning Problem

s, nt

s, nt

s, xt

For didactic purposes,

the speciﬁcation of the learning
problem uses the extensive formulation (26)–(29). The training
data is a collection of instances of the form
{dt; gt, [gt
s]s∈S }t∈T
s, xt

where (gt, [gt
s]s∈S ) is the optimal solution (ground
truth) to the SCOPF problem for input dt. The DNN is a
parametric function O[ω](·) whose parameters are the network
ω: It maps a load vector d into an approximation O[ω](d) =
{ ˙g, [ ˙ns, ˙xs, ˙gs]s∈S } of the optimal solution to the SCOPF
problem for load d. The goal of the machine-learning training
to ﬁnd the optimal weights ω∗, i.e.,
s( ˙gt
Lt
ω∗ = arg min

0( ˙gt) +
Lt

s, ˙nt
s)

s, ˙xt

(39)

(cid:88)

(cid:88)

t∈T

ω
s.t.: O[ω](dt) = ( ˙gt, [ ˙gt

s∈S

s, ˙nt

s, ˙xt

˙gt ∈ E t
˙gt
s ∈ E t
s
˙Y t
s ∈ F t
s
where the loss functions are deﬁned as

s])

∀t ∈ T (40)
∀t ∈ T (41)
∀t ∈ T , ∀s ∈ S (42)

∀t ∈ T , ∀s ∈ S (43)

0( ˙gt) = ||gt − ˙gt||2
Lt
s( ˙gt
Lt
s) = ||gt
s, ˙nt

s, ˙xt

s − ˙gt

s − ˙xt

s||2 + ||nt

s||2 + ||xt
and minimize the distance between the prediction and the
ground truth. There are two difﬁculties in this learning
problem:
the large number of scenarios, variables, and
constraints, and the satisfaction of constraints (41)–(43). This
section examines possible approaches.

s − ˙nt

s||2

B. The Baseline Model
The baseline model

is a parsimonious approach that
disregards constraints (41)–(43) and predicts the nominal
generation only, i.e.,
(cid:88)
ω∗ = arg min

0( ˙gt)
Lt

t∈T

ω
s.t.: O[ω](dt) = ( ˙gt)

∀t ∈ T

5

interspersed
It uses a DDN model with 5 linear layers,
with 5 nonlinear
layers that use the softplus activation
function. The sizes of the input and output of each layer are
linearly parameterized by |L| and |G|. A high-level algebraic
description of layers of the DNN follows:

li = γ(Wili−1 + bi),
l1 = γ(W1d + b1)

for each layer li

The elements of vector ω are rearranged as matrices Wi and
vector of biases bi. Note that the demand vector d is the input
for the ﬁrst layer. The symbol γ denotes a nonlinear activation
function. Unfortunately, training the baseline model tends to
produce predictors violating the problem constraints [34], [35].

C. A Lagrangian Dual Model for Nominal Constraints

This

section extends

the baseline model

to include
constraints on the nominal state (41). Constraints (42)–(43)
on the contingency cases are not considered in the model. To
capture physical and operational constraints, the training of
the DNN adopts the Lagrangian dual approach from [35].

The Lagrangian dual approach relies on the concept of
constraint violations. The violations of a constraint f (x) = 0
is given by |f (x)|, while the violations of f (x) ≥ 0 are
speciﬁed by max(0, −f (x)). Although these expressions are
not differentiable, they admit subgradients. Let C represent
the set of nominal constraints and νc(g) be the violations of
constraint c for generation dispatch g. The Lagrangian dual
approach introduces a term λcνt
c(gt) in the objective function
for each c ∈ V and each t ∈ T , where λc is a Lagrangian
multiplier. The optimization problem then becomes
0( ˙gt) +

LR(λ) = min

c( ˙gt))

λcνt

(44)

(Lt

(cid:88)

(cid:88)

ω

t∈T

c∈C
s.t. O[ω](dt) = ( ˙gt)
and the Lagrangian dual is simply

∀t ∈ T (45)

LD = max

LR(λ)

(46)

λ
Problem (46) is solved by iterating between training for
weights ω and updating the Lagrangian multipliers. Iteration j
uses Lagrangian multiplier λj and solves LR(λj) to obtain the
optimal weights ωj. It then updates the Lagrangian multipliers
using the constraint violations. The overall scheme is presented
in Algorithm 2. Lines 3–10 train weights ωj for a ﬁxed
vector of Lagrangian multipliers λj, using minibatches and
a stochastic gradient descent method with learning rate α. For
each minibatch, the algorithm computes the predictions (line
6), the constraint violations (line 7), and updates the weights
(line 9). Lines 2–13 describe the solving of Lagrangian dual. It
computes the Lagrangian relaxation described previously and
updates the Lagrangian multipliers in line 11 using the median
violation ˜νc for each nominal constraint c.

D. CCGA-DNN Model

This section presents the ﬁnal ML model, the CCGA-DNN,
which mimics a CCGA algorithm. In particular, the CCGA-
DNN combines the Lagrangian dual model with an outer loop
that adds constraints for the contingent states on-demand.

Observe ﬁrst

that a direct Lagrangian dual approach
loop to add
to the SCOPF would require an outer
[ ˙gs, ˙xs, ˙ns]s∈S and constraints
for
(42)–(43)
predictors
selected contingency states s. Unfortunately, the addition of

for k = 0, 1, . . . do

Sample minibatch: Tk ⊂ T
for t ∈ Tk do

Algorithm 2 Lagrangian Dual Model (T , C, α, ρ, Jmax, λ0, ω0)
1: j ← 0.
2: for j = 0, 1, . . . , Jmax do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13: end for

Compute O[ωj ](dt) = ˙gt and Lt
c( ˙gt) ∀c ∈ C
Compute νt

end for
ωj ← ωj − α∇ωj [(cid:80)

end for
c ← λj
λj+1
ωj+1 ← ωj

c + ρ ˜νc ∀c ∈ C

0( ˙gt) + (cid:80)

c∈C λcνt

t∈T (Lt

c( ˙gt))]

0( ˙gt)

new predictors structurally modiﬁes the DNN output O[ω](·)
and induces a considerable increase in the DNN size.

˙nt
s

sγi ˆgi , gi}},

The key idea to overcome this difﬁculty is to mimic
the CCGA closely, replacing the master problem with the
prediction O[ωl](dt) at iteration l. Moreover, constraints (43)
are replaced by constraints of the form
i + ˙nt
s,i = max{0, min{ ˙gt
˙gt
(47)
where
is obtained by the bisection method on the
prediction. Again, these constraints are not differentiable but
admit subgradients and hence can be dualized in the objective
function. The CCGA-DNN is summarized in Algorithm 3.
At each iteration l, the Lagrangian dual model (Algorithm
2) produces updated weights ωl and multipliers λl (line 5).
The inner loop (lines 6–12) applies the bisection method to
s for all t and constraints (11)–(16) to obtain ˙gt
ﬁnd ˙nt
s (lines
8–9). These values are then used to compute the highest line
violation φt among all states and the associated contingent
state st
φ (line 10). The inner loop also increases the element of
the counter vector p associated with st
φ whenever the highest
violation for solve t is above tolerance (cid:15) (line 11). Then,
in the main loop, contingency states with high frequencies
of violated lines are identiﬁed (line 13) using a threshold
β1. The algorithm is terminated if S(cid:48)
is empty and median
relative violations for nominal constraints in (41) are within
tolerances βc (line 14). Otherwise, the set of constraints is
updated by adding constraints (30)–(31) and (47) for added
contingent states (line 15). The Lagrangian multipliers for
added constraints (30)–(31) ∀s ∈ S(cid:48)
are initialized in line
16. Finally, constraints (30)–(31) ∀s ∈ S are updated with
the median violation ˜φ for those lines associated with some
φt (line 17). Note that the process of updating Lagrangian
multipliers for (30)–(31) ∀s ∈ S is different and much stricter
than that for nominal constraints in Algorithm 2.

V. FEASIBILITY RECOVERY AND OPTIMALITY GAP
The training step produces a set of weights ω∗ and
the associated DNN produces, almost instantly, a dispatch
prediction ˙g = O[ω∗](d) for an input load vector d. However,
the prediction ˙g may violate the nominal and contingency
constraints. To restore feasibility,
this paper proposes a
feasibility-recovery CCGA, denoted by FR-CCGA, that ﬁnds
the feasible solution closest to ˙g. The master problem for FR-
CCGA is similar to (32)–(38) but it uses a different objective
function, i.e.,

min

|| ˙g − g||

g,[g(cid:48)

s]s∈S ,[xs,ns]s∈S
s.t.:

(33)–(38)

∀ S, S, U+, U−

(48)

(49)

6

Algorithm 3 CCGA-DNN (T , α, ρ, β1, βc, (cid:15), jMax)
1: C ← {(41)}, S ← ∅, λ0 ← 0, ω0 ← 0
2: Create a counter vector p of size |S|
3: for l = 1, 2, . . . do
p ← 0
4:
λl, ωl ← Lagrangian Dual Model(T , C, α, ρ, jMax, λl−1,ωl−1)
5:
for t ∈ T do
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: end for

˙gt ← O[ωl](dt)
˙nt
s ← bisection method, ∀s ∈ S
˙gt
s ← enforce (11)–(16), ∀s ∈ S
Compute: φt and identify st
φ
if φt > (cid:15) then increase (st
φ)-th element of p by 1

end for
S(cid:48)
BREAK if S(cid:48)
C ← C ∪ {(30) − (31), (47), ∀s ∈ (S(cid:48)
(31) ← 0, ∀s ∈ (S(cid:48)
λl
(30), λl
(31) += ρ ˜φ, ∀s ∈ S
(30), λl
λl

≡ ∅ and ˜νc ≤ βc, ∀c ∈ (41).
\ S)}

← {s | p[s] / |T | > β1}

\ S)

TABLE I
INSTANCE SIZE FOR THE SCOPF PROBLEM (26)–(29) AFTER PRESOLVE

System

|G|

|L|

|N |

Total
Variables

Binary
Variables

Linear
Constraints

118-IEEE
1354-PEG
1888-RTE

54
260
297

186
1,991
2,531

118
1,354
1,888

13,466
387,026
467,011

2,862
63,455
79,032

19,137
513,677
624,780

Note that ˙g is a constant vector in FR-CCGA. While CCGA
and FR-CCGA are similar in nature, FR-CCGA is signiﬁcantly
faster because O[ω∗](d) is often close to feasibility.

The FR-CCGA and CCGA can be run in parallel to provide
upper and lower bounds to the SCOPF respectively. This may
be useful for operators to assess the quality of the prediction
and the associated FR-CCGA solution and decide whether
to commit to the FR-CCGA solutions or wait until a better
solution is found or the optimality gap is sufﬁciently small.

VI. COMPUTATIONAL EXPERIMENTS

A. Data

The test cases are based on modiﬁed versions of 3 system
topologies from [38]. Table I shows the size of a single
instance for each topology. For each topology, the training
and testing data is given by the inputs and solutions of many
instances that are constructed as follows. For each instance,
the net demand of each bus has a deterministic component
and a random component. The deterministic component varies
across instances from 82% of the nominal net load to near-
infeasibility values by small
increments of 0.002%. The
random component is independently and uniformly distributed
ranging from -0.5% to 0.5% of the corresponding nominal
nodal net load for each bus and instance. Algorithm 1 was
applied to solve each instance for a maximum line violation
of (cid:15) = 0.05 MW and an optimality gap of 0.25%.

B. Training Aspects

The training set T is composed by a random sample
containing 70% of the generated instances. Algorithm 3 was
applied with (cid:15) set to 1 MW, β1 to 5%, βc to 1.5 · 10−2,
and ρ to 105. The inner loop of Algorithm 2 (lines 4–11)
is executed 1.5 · 105 times with a learning rate α varying
from 10−4 to 10−10 and Jmax was set to 1. The DNN models
were implemented using PyTorch package with Python 3.0.
The training was performed using NVidia Tesla V100 GPUs

TABLE II
TRAINING SUMMARY FOR ALGORITHM 3

TABLE IV
SELECTED INDICATORS OF VIOLATION ACROSS INSTANCES (%)

System

Iterations

Added Contingency States S (by generator numbers)

λ(20)

RLV

7

118-IEEE
1354-PEG
1888-RTE

3
3
2

{4}
{23, 65, 74, 112, 126, 163, 222}
{152, 153}

Fig. 1. Prediction of Mccga for selected generators of the 1354-PEG System.

TABLE III
PREDICTION MEAN ABSOLUTE ERRORS (%)

Generation Range (MW)

System

Model

118-IEEE

1354-PEG

1888-RTE

Mb
Mccga

Mb
Mccga

Mb
Mccga

10
50

2.3
2.5

2.4
5.0

1.3
1.4

50
100

2.8
3.0

1.3
1.8

1.2
1.1

100
250

0.7
0.7

1.1
1.2

0.7
0.6

250
500

0.3
0.4

0.9
1.0

0.4
0.4

500
1000

N/A
N/A

0.4
0.4

0.3
0.3

1000
2000

N/A
N/A

0.2
0.3

0.1
0.1

2000
5000

N/A
N/A

0.1
0.2

N/A
N/A

and 2 GHz Intel Cores. Table II presents a training summary.
In the following, the baseline model is denoted by Mb and
the CCGA-DNN by Mccga. Note that the ﬁrst iteration of
Algorithm 3 returns the weights of the baseline model.

C. Prediction Quality

Accurate predictions were obtained for all DNN models and
topologies. Figure 1 illustrates how Mccga can learn complex
generator patterns arising in the 1354-PEG system. Table III
reports the mean absolute errors for predictions ˙gt, segmented
by generation range: Mb achieves a slightly better accuracy
which is expected since it is the less constrained model.
the
Table IV reports selected indicators of violations:
relative violation λ(20) of the total load constraint and the
relative violation RLV of the lines associated with φ. The
results report median values as well as lower and upper bounds
for intervals that capture 95% of the instances. Both models
achieve the desired tolerance of βc = 1.5 · 10−2 for λ(20) (the
tolerance βc does not apply to RLV). Model Mccga produces
lower overall violations and has a major effect on RLV.

D. Comparison with Benchmark CCGA

The previous sections reported on the accuracy of the
predictors. This section shows how FR-CCGA leverages the
predictors to ﬁnd near-optimal primal solutions signiﬁcantly
faster than CCGA. More precisely,
in terms
of cost and CPU time, CCGA and FR-CCGA when seeded
with Mb and Mccga, for 200 randomly selected instances
for each system topology. Each instance was solved with the
same tolerances as in the training. They were solved using

it compares,

System

Model

Median

95%-Interval

Median

95%-Interval

118-IEEE

1354-PEG

1888-RTE

Mb
Mccga

Mb
Mccga

Mb
Mccga

0.016
0.003

0.018
0.010

0.012
0.005

0.001
0.000

0.001
0.000

0.001
0.000

0.055
0.011

0.062
0.040

0.047
0.027

0.099
0.000

0.259
0.005

0.205
0.007

0.000
0.000

0.086
0.000

0.021
0.000

0.467
0.548

1.256
0.117

1.418
0.057

λ(20) – Net load constraint violation divided by total load.
RLV – Relative violation for line associated with φ.

TABLE V
DISTANCE BETWEEN PREDICTION AND FEASIBLE SOLUTION (%)

System

Model

Median

95%-Interval

118-IEEE

1354-PEG

1888-RTE

Mb
Mccga

Mb
Mccga

Mb
Mccga

0.05
0.18

0.05
0.09

0.04
0.04

0.01
0.05

0.01
0.05

0.00
0.01

0.12
0.47

0.13
0.14

0.10
0.07

TABLE VI
CPU TIME COMPARISON

System

Model

Median

Mean

Min.

Max.

Std.

118-IEEE

1354-PEG

1888-RTE

CCGA
Mb
Mccga

CCGA
Mb
Mccga

CCGA
Mb
Mccga

0.210
0.024
0.026

0.214
0.057
0.068

321.746
5.335
1.521

327.210
8.434
2.168

5.479
5.316
2.120

7.406
5.501
1.945

0.101
0.021
0.023

75.585
1.320
0.768

3.110
1.224
0.911

3.717
1.580
1.372

741.798
133.366
8.449

30.923
18.074
4.543

0.305
0.160
0.171

127.101
13.505
1.740

7.073
3.348
0.919

TABLE VII
FR-CCGA COST INCREASE OVER CCGA (%)

System

Model

Median Mean

Min.

Max.

Std.

118-IEEE

1354-PEG

1888-RTE

Mb
Mccga

Mb
Mccga

Mb
Mccga

0.021
0.027

0.020
0.067

0.026
0.033

0.019
0.030

0.021
0.067

0.024
0.033

-0.073
-0.010

-0.007
0.032

-0.003
0.004

0.055
0.112

0.051
0.091

0.070
0.070

0.014
0.020

0.012
0.017

0.011
0.013

i gf

i |gb

Gurobi 8.1.1 under JuMP package for Julia 0.6.4 on a laptop
Dell XPS 13 9380 featuring a i7-8565U processor at 1.8
GHz and 16 GB of RAM. Tables V, VI, and VII summarize
the experiments. Table V reports the distances in percentage
between the predictions and the feasible solutions obtained by
FR-CCGA when seeded with the predictions. For instance, for
Mb, this distance is (cid:80)
i |/ (cid:80)
i − gf
i , where gb
i is Mb’s
prediction for generator i and gf
i is i’s generation computed by
FR-CCGA seeded with gb. As should be clear, the predictions
are very close to feasibility. Table VI reports the computation
times which show signiﬁcant increases in performance by
FR-CCGA especially when seeded with Mccga and on the
1354-PEG system, the most challenging network. FR-CCGA
is about 160 times faster than CCGA on this test case. FR-
CCGA is also signiﬁcantly more robust when using Mccga
instead of Mb. Table VII indicates that the cost/objective
increase of FR-CCGA over CCGA is very small for both Mb
and Mccga.

0100020003000Instance 0200400generation (MW)Generator 30PredictionReal Values0100020003000Instance 200400600800generation (MW)Generator 224PredictionReal Values8

[15] F. Li and R. Bo, “Dcopf-based lmp simulation: algorithm, comparison
with acopf, and sensitivity,” IEEE Trans. Power Syst., vol. 22, no. 4, pp.
1475–1485, 2007.

[16] C. Coffrin

and P. Van Hentenryck,

“A linear-programming
approximation of ac power ﬂows,” INFORMS J. Comput., vol. 26,
no. 4, pp. 718–734, 2014.

[17] C. Coffrin, H. L. Hijazi, and P. Van Hentenryck, “The qc relaxation:
A theoretical and computational study on optimal power ﬂow,” IEEE
Trans. Power Syst., vol. 31, no. 4, pp. 3008–3018, 2015.

[18] B. Eldridge, R. P. O’Neill, and A. Castillo, “Marginal loss calculations
for the dcopf,” Federal Energy Regulatory Commission, Tech. Rep, 2017.
[19] A. Marano-Marcolini, F. Capitanescu, J. L. Martinez-Ramos, and
L. Wehenkel, “Exploiting the use of dc scopf approximation to improve
iterative ac scopf algorithms,” IEEE Trans. Power Syst., vol. 27, no. 3,
pp. 1459–1466, 2012.

[20] E. Lannoye, D. Flynn, and M. O’Malley, “Transmission, variable
generation, and power system ﬂexibility,” IEEE Trans. Power Syst.,
vol. 30, no. 1, pp. 57–66, 2014.

[21] P. Kundur, N. J. Balu, and M. G. Lauby, Power system stability and

control. McGraw-hill New York, 1994, vol. 7.

[22] J. F. Restrepo and F. D. Galiana, “Unit commitment with primary
frequency regulation constraints,” IEEE Trans. Power Syst., vol. 20,
no. 4, pp. 1836–1842, Nov. 2005.

[23] K. Karoui, H. Crisciu, and L. Platbrood, “Modeling the primary reserve
allocation in preventive and curative security constrained OPF,” in Proc.
IEEE PES Trans. Distrb. Conf. Expo.

IEEE, Apr., 2010, pp. 1–6.

[24] X. A. Sun, “Robust optimization in electric power systems,” Advances
and Trends in Optimization with Engineering Applications, T. Terlaky,
M. F. Anjos, and S. Ahmed, Eds., pp. 357–365, 2017.

[25] D. Bertsimas, E. Litvinov, X. A. Sun, J. Zhao, and T. Zheng, “Adaptive
the security constrained unit commitment

robust optimization for
problem,” IEEE Trans. Power Syst., vol. 28, no. 1, pp. 52–63, 2013.

[26] B. Zeng and L. Zhao, “Solving two-stage robust optimization problems
using a column-and-constraint generation method,” Oper. Res. Lett.,
vol. 41, no. 5, pp. 457–461, Sep. 2013.

[27] H. Sasaki, M. Watanabe, J. Kubokawa, N. Yorino, and R. Yokoyama,
“A solution method of unit commitment by artiﬁcial neural networks,”
IEEE Trans. Power Syst., vol. 7, no. 3, pp. 974–981, 1992.

[28] Z. Ouyang and S. Shahidehpour, “A hybrid artiﬁcial neural network-
dynamic programming approach to unit commitment,” IEEE Trans.
Power Syst., vol. 7, no. 1, pp. 236–242, 1992.

[29] A. S. Xavier, F. Qiu, and S. Ahmed, “Learning to solve large-
scale security-constrained unit commitment problems,” arXiv preprint
arXiv:1902.01697, 2019.

[30] Z. Yang and S. Oren, “Line selection and algorithm selection for
transmission switching by machine learning methods,” in 2019 IEEE
Milan PowerTech.

IEEE, 2019, pp. 1–6.

[31] E. S. Johnson, S. Ahmed, S. S. Dey, and J.-P. Watson, “A k-nearest
neighbor heuristic for real-time dc optimal transmission switching,”
arXiv preprint arXiv:2003.10565, 2020.

[32] V. J. Gutierrez-Martinez, C. A. Ca˜nizares, C. R. Fuerte-Esquivel,
A. Pizano-Martinez, and X. Gu, “Neural-network security-boundary
constrained optimal power ﬂow,” IEEE Trans. Power Syst., vol. 26, no. 1,
pp. 63–72, 2010.

[33] D. C. Costa, M. V. Nunes, J. P. Vieira, and U. H. Bezerra, “Decision
tree-based security dispatch application in integrated electric power and
natural-gas networks,” Electr. Power Syst. Res., vol. 141, pp. 442–449,
2016.

[34] S. Misra, L. Roald,

constrained
optimization: Identifying optimal active constraint sets,” arXiv preprint
arXiv:1802.09639, 2018.

“Learning for

and Y. Ng,

[35] F. Fioretto, T. W. Mak, and P. Van Hentenryck, “Predicting AC
Optimal Power Flows: Combining Deep Learning and Lagrangian Dual
Methods,” in Thirty-Fourth AAAI Conference on Artiﬁcial Intelligence
(AAAI-20), 2020.

[36] A. J. Ardakani and F. Bouffard, “Identiﬁcation of umbrella constraints in
dc-based security-constrained optimal power ﬂow,” IEEE Trans. Power
Syst., vol. 28, no. 4, pp. 3924–3934, Nov. 2013.

[37] Y. LeCun, Y. Bengio, and G. Hinton, “Deep learning,” Nature, vol. 521,

no. 7553, pp. 436–444, 2015.

[38] S. Babaeinejadsarookolaee et al., “The power grid library for
benchmarking ac optimal power ﬂow algorithms,” arXiv preprint
arXiv:1908.02788, 2019.

Fig. 2. Convergence plot for the Mccga for the 1354-PEG system.

Figure 2 illustrates the behavior of the algorithms on a
randomly chosen instance of the 1354-PEG system. The red
line represents the upper bound (feasible solution) generated in
1.87 seconds by the FR-CCGA seeded with Mccga. The blue
line represents a sequence of true lower bounds (infeasible
solutions) generated by Algorithm 1.

VII. CONCLUSION
This paper proposed a tractable methodology that combines
deep learning models and robust optimization for generating
solutions for the SCOPF problem. The considered SCOPF
modeled generator contingencies and the automatic primary
response of synchronized units. Computational results over
two large test cases demonstrate the practical relevance of the
methodology as a scalable, easy to specify, and cost-efﬁcient
alternative tool for managing short-term scheduling.

REFERENCES

[1] O. Alsac and B. Stott, “Optimal load ﬂow with steady-state security,”
IEEE Trans. Power App. Syst., vol. PAS-93, no. 3, pp. 745–751, 1974.
[2] F. Bouffard, F. D. Galiana, and J. M. Arroyo, “Umbrella contingencies
in security-constrained optimal power ﬂow,” in 15th Power systems
computation conference, PSCC, vol. 5, 2005.

[3] Y. Li and J. D. McCalley, “Decomposed SCOPF for

improving
efﬁciency,” IEEE Trans. Power Syst., vol. 24, no. 1, pp. 494–495, 2009.
[4] F. Capitanescu, J. M. Ramos, P. Panciatici, D. Kirschen, A. M.
Marcolini, L. Platbrood, and L. Wehenkel, “State-of-the-art, challenges,
and future trends in security constrained optimal power ﬂow,” Elect.
Power Syst. Res., vol. 81, no. 8, pp. 1731–1741, Aug. 2011.

[5] Q. Wang, J. D. McCalley, T. Zheng, and E. Litvinov, “Solving corrective
risk-based security-constrained optimal power ﬂow with lagrangian
relaxation and benders decomposition,” Int. J. Elec. Power, vol. 75, pp.
255–264, Feb. 2016.

[6] Y. Dvorkin, P. Henneaux, D. S. Kirschen, and H. Pandˇzi´c, “Optimizing
primary response in preventive security-constrained optimal power ﬂow,”
IEEE Syst. Journal, vol. 12, no. 1, pp. 414–423, Mar. 2016.

[7] M. Velay, M. Vinyals, Y. Besanger, and N. Retiere, “Fully distributed
security constrained optimal power ﬂow with primary frequency
control,” Int. J. Elec. Power, vol. 110, pp. 536–547, Sep. 2019.

[8] A. Street, F. Oliveira, and J. M. Arroyo, “Contingency-constrained
unit commitment with n − k security criterion: A robust optimization
approach,” IEEE Trans. Power Syst., vol. 26, no. 3, pp. 1581–1590,
2010.

[9] A. Khodaei and M. Shahidehpour, “Security-constrained transmission
switching with voltage constraints,” Int. J. Electr. Power Energy Syst.,
vol. 35, no. 1, pp. 74–82, 2012.

[10] A. Moreira, A. Street, and J. M. Arroyo, “An adjustable robust
optimization
transmission
expansion planning,” IEEE Trans. Power Syst., vol. 30, no. 4, pp.
2013–2022, 2014.

contingency-constrained

approach

for

[11] A. Velloso, P. Van Hentenryck, and E. S. Johnson, “An exact and scalable
problem decomposition for security-constrained optimal power ﬂow,” in
Proceedings of the XXI Power Systems Computation Conference (PSCC-
2020), 2020.

[12] Z. Zhou, T. Levin, and G. Conzelmann, “Survey of U.S. ancillary
services markets,” Argonne National Lab.(ANL), Argonne, IL (United
States), Tech. Rep., 2016.

[13] L. Platbrood, F. Capitanescu, C. Merckx, H. Crisciu, and L. Wehenkel,
“A generic approach for solving nonlinear-discrete security-constrained
optimal power ﬂow problems in large-scale systems,” IEEE Trans. Power
Syst., vol. 29, no. 3, pp. 1194–1203, 2013.

[14] F. Capitanescu, “Critical

recent advances and further
developments needed in ac optimal power ﬂow,” Electr. Power Syst.
Res., vol. 136, pp. 57–68, 2016.

review of

                7 L P H   V                      & R V W     ñ   