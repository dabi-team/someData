Induction of Non-monotonic Logic Programs To Explain
Statistical Learning Models

Farhad Shakerin
Department of Computer Science

The University of Texas at Dallas
Richardson, USA
farhad.shakerin@utdallas.edu

1 Introduction & Problem Description

Dramatic success of machine learning (ML) has led to a torrent of Artiﬁcial Intelligence (AI) applica-
tions. However, the effectiveness of these systems is limited by the machines’ current inability to explain
their decisions and actions to human users. That’s mainly because statistical machine learning methods
produce models that are complex algebraic solutions to optimization problems such as risk minimization
or data likelihood maximization. Lack of intuitive descriptions makes it hard for users to understand and
verify the underlying rules that govern the model. Also, these methods cannot produce a justiﬁcation
for a prediction they compute for a new data sample. It is important to be able to “explain” the model
that has been learned by a given machine learning technique. That is, as ML researchers/practitioners,
we want to ﬁnd the logic—approximated by a set of rules, for example—that explains the behavior of
the learned model to the user. This explanation can be very useful to users as they can not only develop
an intuitive understanding of the model, it can lead to further actions. This intuitive understanding can
allow a banker, for example, to advise a loan applicant what changes they need to make to their proﬁle
in order to move from “loan rejected” classiﬁcation to “loan approved” one. Explanations are also being
necessitated by regulatory requirements such as the European GDPR [20]. Explanations can also reveal
bias in the learned model, as well as improve a users’ trust in the machine learning system’s output.

Signiﬁcant effort is being invested towards “Explainable AI” [1]. The goal of these endeavors is to
create a suite of machine learning techniques that: a) Produce more explainable models, while main-
taining a high level of prediction accuracy. b) Enable human users to understand, appropriately trust,
and effectively manage the emerging generation of AI systems. In this project, we propose to conduct
research to achieve these goals.

Inductive Logic Programming (ILP) [9] is one Machine Learning technique where the learned model
is in the form of logic programming rules (Horn Clauses) that are comprehensible to humans. It allows
the background knowledge to be incrementally extended without requiring the entire model to be re-
learned. Meanwhile, the comprehensibility of symbolic rules makes it easier for users to understand and
verify induced models and even reﬁne them.

However, due to lack of negation-as-failure [2], Horn clauses are not sufﬁciently expressive for
representation and reasoning when the background knowledge is incomplete. Additionally, ILP is not
able to handle exception to general rules: it learns rules under the assumption that there are no exceptions
to them. This results in exceptions and noise being treated in the same manner. The resulting theory that
is learned is a default theory [5, 2], and in most cases this theory describes the underlying model more
accurately. It should be noted that default theories closely model common sense reasoning as well [2].
B. Bogaerts, E. Erdem, P. Fodor, A. Formisano,
G. Ianni, D. Inclezan, G. Vidal, A. Villanueva,
M. De Vos, F. Yang (Eds.): International
Conference on Logic Programming 2019 (ICLP’19).
EPTCS 306, 2019, pp. 379–388, doi:10.4204/EPTCS.306.51

380

Induction of NMLPs To Explain Statistical Learning Models

Figure 1: Optimal sequential covering with 3 Clauses (Left), Sub-Optimal sequential covering with 4
Clauses (Right)

Thus, a default theory, if it can be learned, will be more intuitive and comprehensible for humans. Default
reasoning also allows us to reason in absence of information. A system that can learn default theories
can therefore learn rules that can draw conclusions based on lack of evidence, just like humans. Other
reasons that underscore the importance of inductive learning of default theories can be found in Sakama
[15] who also surveys other attempts in this direction.

In this dissertation, I am investigating heuristics-based algorithms to learn non-monotonic logic pro-
grams, (i.e., logic programs (Horn clauses) extended with negation-as-failure [5, 2]). My novel algorithm
extends the famous FOIL algorithm [12] by Quinlan. The work resulted in an algorithm called FOLD
(First Order Learner of Default-theories) that was published in Theory and practice of Logic Program-
ming [18]. Because of the presence of negation-as-failure, the answer set programs that are learned by
FOLD, are more succinct and concise, compared to standard logic programs without negation. They also
capture the underlying logic more accurately.

The FOIL algorithm itself is a popular top-down algorithm. FOIL uses heuristics from information
theory called weighted information gain. The use of a greedy heuristic allows FOIL to run much faster
than bottom-up approaches and scale up much better. However, scalability comes at the expense of losing
accuracy if the algorithm is stuck in a local optima and/or when the number of examples is insufﬁcient.
Figure 1 demonstrates how the local optima results in discovering sub-optimal rules that does not neces-
sarily coincide with the real underlying sub-concepts of the data. Additionally, since the objective is to
learn pure clauses (i.e., clauses with zero or few negative example coverage) the FOIL algorithm often
discovers too many clauses each of which only cover a few examples. Discovering a huge number of
clauses reduces the interpretability and also it does not generalize well on the test data.

Unlike top-down ILP algorithms, statistical machine learning algorithms are bound to ﬁnd the rele-
vant features because they optimize an objective function with respect to global constraints. This results
in models that are inherently complex and cannot explain what features account for a classiﬁcation deci-
sion on any given data sample. The Explainable AI techniques such as LIME [13] and SHAP [7] have
been proposed that provide explanations for any given data sample. Each explanation is a set of feature-
value pairs that would locally determine what features and how strongly each feature, relative to other
features, contributes to the classiﬁcation decision. To capture the global behavior of a black-box model,
however, an algorithm needs to group similar data samples (i.e., data samples for which the same set of
feature values are responsible for the choice of classiﬁcation) and cover them with the same clause.

However, the FOLD algorithm although capable of learning more concise and accurate logic pro-
grams, still suffers from the local optima. Another major contribution of my dissertation is to create
heuristics based on statistical learning models (as opposed to information gain and other data dependent
heuristics) that would guide the search for the “best” clause using insights taken from a statistical model

F. Shakerin

381

such as an SVM model or a random forest. The resulted algorithms do not suffer the local optima.

2 Background

2.1

Inductive Logic Programming (ILP)

Inductive Logic Programming (ILP) [9] is one Machine Learning technique where the learned model is
in the form of logic programming rules (Horn Clauses) that are comprehensible to humans. It allows the
background knowledge to be incrementally extended without requiring the entire model to be re-learned.
Meanwhile, the comprehensibility of symbolic rules makes it easier for users to understand and verify
induced models and even edit them. The ILP problem is formally deﬁned as follows:
Given

1. a background theory B, in the form of an extended logic program, i.e., clauses of the form h ←
l1, ..., lm, not lm+1, ..., not ln, where l1, ..., ln are positive literals and not denotes negation-as-failure
(NAF) and B has no even cycle

2. two disjoint sets of ground target predicates E+, E− known as positive and negative examples

respectively

3. a hypothesis language of function free predicates L, and a reﬁnement operator ρ under θ −

subsumption [11] that would disallow even cycles.

Find a set of clauses H such that:

• ∀e ∈ E+, B ∪ H |= e

• ∀e ∈ E−, B ∪ H (cid:54)|= e

• B and H are consistent.

The ILP learning problem can be regarded as a search problem for a set of clauses from which
training examples can be deduced. The search is performed either top down or bottom-up. A bottom-
up approach builds most-speciﬁc clauses from the training examples and searches the hypothesis space
by using generalization. This approach is not applicable to large-scale datasets, nor it can incorporate
Negation-As-Failure into the hypotheses. A survey of bottom-up ILP systems and their shortcomings can
be found at [15]. In contrast, top-down approach starts with the most general clauses and then specializes
them. A top-down algorithm guided by heuristics is better suited for large-scale and/or noisy datasets
[22], particularly, because it is scalable.

The FOIL algorithm by Quinlan [12] is a popular top-down algorithm. FOIL uses heuristics from
information theory called weighted information gain. The use of a greedy heuristic allows FOIL to run
much faster than bottom-up approaches and scale up much better. For instance, the QuickFOIL system
[22] can deal with millions of training examples in a reasonable time.

FOIL is a top-down ILP algorithm which follows a sequential covering approach to induce a hypoth-
esis. The FOIL algorithm is summarized in Algorithm 1. This algorithm repeatedly searches for clauses
that score best with respect to a subset of positive and negative examples, a current hypothesis and a
heuristic called information gain (IG).

The inner loop searches for a clause with the highest information gain using a general-to-speciﬁc
hill-climbing search. To specialize a given clause c, a reﬁnement operator ρ under θ -subsumption [11]
is employed.

382

Induction of NMLPs To Explain Statistical Learning Models

Algorithm 1 Summarizing the FOIL algorithm
Input: target, B, E+, E−
Output: H
1: H ← /0
2: while (|E+| > 0) do
3:

c ← (target :- true.)
while (|E−| > 0 ∧ c.length < max length) do

for all c(cid:48) ∈ ρ(c) do

compute score(E+, E−, H ∪ {c(cid:48)}, B)

end for
let ˆc be the c(cid:48) ∈ ρ(c) with the best score
E− ← covers( ˆc, E−)

4:

5:

6:

7:

8:

9:

10:

11:

end while
add ˆc to H
E+ ← E+ \ covers( ˆc, E+)

12:
13: end while
14: return H

Deﬁnition 1 Clause C θ -subsumes clause D, denoted by C (cid:22) D, if there exists a substitution θ such that
head(C)θ = head(D) and body(C)θ ⊆ body(D), where head(C) and body(C) denote the head and the
body of clause C respectively. θ -subsumption provides a syntactic notion of generality that is used in
general-to-speciﬁc search for clauses based on their example coverage.

The most general clause is p(X1, ..., Xn) ← true. where the predicate p/n is the predicate being
learned and each Xi is a variable. The reﬁnement operator based on θ -subsumption specializes the current
clause h ← b1, ...bn. This is realized by adding a new literal l to the clause yielding h ← b1, ...bn, l. The
heuristic based search uses information gain. In FOIL, information gain for a given clause is calculated
as follows:

p1
p1 + n1
where L is the candidate literal to add to rule R, p0 is the number of positive bindings of R, n0 is the
number of negative bindings of R, p1 is the number of positive bindings of R + L, n1 is the number
of negative bindings of R + L, t is the number of possible bindings that make the clause cover positive
examples,

p0
p0 + n0

IG(L, R) = t

− log2

log2

(1)

(cid:18)

(cid:19)

FOIL handles negated literals in a naive way by adding the literal not L to the set of specialization
candidate literals for any existing candidate L. This approach leads to learning predicates that do not
capture the concept accurately as shown in the following example.
Example 1 B, E + are background knowledge and positive examples respectively with CWA and the
concept to be learned is ﬂy.

B :

E + :

bird(X) ← penguin(X).
bird(tweety).
cat(kitty).
f ly(tweety).

bird(et).
penguin(polly).
f ly(et).

The FOIL algorithm would learn the following rule:

f ly(X) ← not cat(X), not penguin(X).

F. Shakerin

383

which does not yield a constructive deﬁnition even though it covers all the positives (tweety and et are
not penguins and cats resp.) and no negatives (neither cats nor penguins do not ﬂy). In fact, the correct
theory in this example is as follows: ”Only birds ﬂy but, among them there are exceptional ones who do
not ﬂy”. It translates to the following logic programming rule:
fly(X) :- bird(X), not penguin(X).
which FOIL fails to discover.

2.2 The FOLD Algorithm

We ﬁrst present our FOLD algorithm that we have developed to learn default theories from background
knowledge, positive and negative examples. The FOLD algorithm which is an extension of FOIL, learns
a concept in terms of a default and possibly multiple exceptions (and exceptions to exceptions, exceptions
to exceptions of exceptions, and so on). FOLD tries ﬁrst to learn the default by specializing a general rule
of the form {target(V1, ...,Vn) :- true.} with positive literals. As in FOIL, each specialization must
rule out some already covered negative examples without decreasing the number of positive examples
covered signiﬁcantly. Unlike FOIL, no negative literal is used at this stage. Once the heuristic score
(i.e., information gain) (IG) becomes zero, or the maximum clause length is reached (whichever happens
ﬁrst), this process stops. At this point, if any negative example is still covered, they must be either
noisy data or exceptions to the current hypothesis. Exceptions could be learned by swapping the current
positive and negative examples, then calling the same algorithm recursively. As a result of this recursive
process, FOLD can learn exceptions to exceptions, and so on. In presence of noise, FOLD identiﬁes
and enumerates noisy samples, that is, outputs them as ground facts in hypothesis, to make sure that
the algorithm converges. Maximum Description Length Principle [12] is incorporated to heuristically
control the hypothesis length and identify noise. Algorithm 3 presents the pseudo-code of the FOLD
algorithm.
Example 2 B, E+ are background knowledge and positive examples respectively under Closed World
Assumption, and the target predicate is ﬂy.
B:

bird(X) :- penguin(X).
bird(tweety).
cat(kitty).

bird(et).
penguin(polly).
fly(et).

E+: fly(tweety).
Now, we illustrate how FOLD discovers the above set of clauses given E+ = {tweety, et} and E− =
{polly, kitty} and the target fly(X). By calling FOLD, at line 2 while loop, the clause {fly(X) :-
true.} is specialized. Inside the SPECIALIZE function, at line 10, the literal bird(X) is selected to
add to the current clause, to get the clause ˆc = fly(X) :- bird(X), which happens to have the greatest
IG among {bird,penguin,cat}. Then, at lines 20-21 the following updates are performed: E+ = {},
E− = {polly}. A negative example polly, a penguin is still covered. In the next iteration, SPECIALIZE
fails to introduce a positive literal to rule it out since the best IG in this case is zero. Therefore, the
EXCEPTION function is called by swapping the E+, E−. Now, FOLD is recursively called to learn a
rule for E+ = {polly}, E− = {}. The recursive call (line 27), returns {fly(X) :- penguin(X)} as
the exception. In line 28, a new predicate ab0 is introduced and at lines 29-31 the clause {ab0(X) :-
penguin(X)} is created and added to the set of invented abnormalities, namely, AB. In line 32, the
negated exception (i.e not ab0(X)) and the default rule’s body (i.e bird(X)) are compiled together to
form the following theory:

fly(X) :- bird(X), not ab0(X).
ab0(X) :- penguin(X).

384

Induction of NMLPs To Explain Statistical Learning Models

Algorithm 2 FOLD Algorithm
Input: target, B, E+, E−
Output: D = {c1, ..., cn} %defaults clauses

AB = {ab1, ..., abm} %exceptions clauses

1: function FOLD(E+, E−)
2:

while (|E+| > 0) do

3:

4:

5:

6:

c ← (target :- true.)
ˆc ← SPECIALIZE(c,E+,E−)
E+ ← E+ \ covers( ˆc, E+, B)
D ← D ∪ { ˆc}

end while
7:
8: end function
9: function SPECIALIZE(c, E+, E−)
10:

while |E−| > 0 ∧ c.length < max rule length do
(cde f , ˆIG) ← ADD BEST LITERAL(c,E+,E−)
if ˆIG > 0 then
ˆc ← cde f

else

ˆc ← EXCEPTION(c, E−, E+)
if ˆc == null then

ˆc ← enumerate(c, E+)

end if

end if
E+ ← E+ \ covers( ˆc, E+, B)
E− ← covers( ˆc, E−, B)

end while
22:
23: end function
24: function EXCEPTION(cde f , E+, E−)
25:

ˆIG ← ADD BEST LITERAL(c, E+, E−)
if ˆIG > 0 then

c set ← FOLD(E+, E−)
c ab ← generate next ab predicate()
for each c ∈ c set do

AB ← AB ∪ {c ab:- bodyo f (c)}

end for
ˆc ← (heado f (cde f ):- bodyo f (c), not(c ab))

else

ˆc ← null

11:

12:

13:

14:

15:

16:

17:

18:

19:

20:

21:

26:

27:

28:

29:

30:

31:

32:

33:

34:

end if

35:
36: end function

2.3 The LIME Approach

LIME [13] is a novel technique that ﬁnds easy to understand explanations for the predictions of any com-
plex black-box classiﬁer in a faithful manner. LIME constructs a linear model by sampling N instances

F. Shakerin

385

around any given data sample x. Every instance x(cid:48) represents a perturbed version of x where perturbations
are realized by sampling uniformly at random for each feature of x. LIME stores the classiﬁer decision
f (x(cid:48)) and the kernel π(x, x(cid:48)). The π function measures how similar the original and perturbed sample are
and it is then used as the associated weight of x(cid:48) in ﬁtting a locally weighted linear regression (LWR)
curve around x. The K greatest learned weights of this linear model are interpreted as top K contributing
features into the decision made by the black-box classiﬁer. Algorithm 3 illustrates how a locally linear
model is created around x to explain a classiﬁer’s decision.

Algorithm 3 Linear Model Generation by LIME
Input: f : Classiﬁer
Input: N : Number of samples, K : length of explanation,
Input: x : sample to explain, π : similarity kernel
Output: w : Importance vector of features
1: Z ← {}
2: for i ∈ {1, 2, 3, ..., N} do
3:

x(cid:48)
i ← sample around(x)
Z ← Z ∪ (cid:104)x(cid:48)

i, f (xi), π(xi)(cid:105)

4:
5: end for
6: w ← LW R(Z , K)
7: return w

The interpretation language should be understandable by humans. Therefore, LIME requires the user
to provide some interpretation language as well. In case of tabular data, it boils down to specifying the
valid range of each table column. In particular, if the data column is a numeric variable (as opposed
to categorical), the user must specify the intervals or a discretization strategy to allow LIME to create
intervals that are used later on to explain the classiﬁcation decision.
Example 3 The UCI heart dataset contains features such as patient’s blood pressure, chest pain, thal-
lium test results, number of major vessels blocked, etc. The classiﬁcation task is to predict whether the
subject suffers from heart disease or not. Figure 2 shows how LIME would explain a model’s prediction
over a data sample.

Figure 2: Top 3 Relevant Features in Patient Diagnosis According to LIME

In this example, LIME is called to explain why the model predicts heart disease. In response, LIME re-
turns the top features along with their importance weight. According to LIME, the model predicts “heart
disease” because of high serum cholesterol level, and having a chest pain of type 4 (i.e., asymptomatic).
In this dataset, chest pain level is a categorical variable with 4 different values.

The categorical variables should be propositionalized before a statistical model can be applied.
Propositionalization is the process of transforming each categorical variable with domain of cardinal-

386

Induction of NMLPs To Explain Statistical Learning Models

ity n, into n new binary features. The feature “thallium test” is a categorical feature too. However, in this
case LIME reports that the feature “thal 7” which is a new feature that resulted from propositionaliza-
tion and has the value “false”, would have made the model predict “healthy”. The value 7 for thallium
test in this dataset indicates reversible defect which is a strong indication of heart disease. It should
be noted that the feature “serum cholesterol” is discretized with respect to the training examples’ label.
Discretization aims to reduce the number of values a continuous variable takes by grouping them into
intervals or bins.

In order to capture model’s global behavior, we are investigating an approach to learn concise logic
programs from a transformed data set that is generated by storing the explanations provided by LIME.
The LIME system takes as input a black-box model (such as a Neural Network, Random Forest, etc.)
and a data sample. For any given data sample, it outputs a list of (weighted) features that contribute most
to the classiﬁcation decision. By repeating the same process for all training samples, we can generate a
transformed version of the original data set that only contains the relevant features for each data sample.

3 Research Goals

The goal is to develop a heuristic-based ILP algorithm that would replace the traditional weighted infor-
mation gain heuristic with a new one. The new heuristic should guide the search based on the insights
that a statistical learning model provides. We have extended the FOLD algorithm to incorporate the in-
formation generated by the pioneering LIME system [13], which essentially computes the features that
are deemed most important in classifying a given data sample. With help of LIME, our algorithm (called
LIME-FOLD [17]) is able to learn answer set programs that are signiﬁcantly more accurate and concise
compared to standard ILP methods (including Aleph [19] and our own FOLD method). For example,
for the “who makes 50K” UCI Adult data set, the number of learned rules go down from nearly 130 on
the Aleph system [19] to just 6 under LIME-FOLD while simultaneously improving precision, recall,
accuracy and the F1-score.

4 Current Research Status

I have further improved the application of explainable AI tools to capture the global behavior of statistical
learning models by incorporating SHAP [7] and High Utility Item-set Mining (HUIM) [4] which is a
powerful technique in datamining. The idea is to group similar data samples (i.e., data samples for which
the same set of feature values are responsible for the choice of classiﬁcation) and cover them with the
same clause. While in FOIL, the search for a clause is guided by heuristics, in this novel approach, I adapt
High Utility Item-set Mining (HUIM) [4] — a popular technique from data mining — to ﬁnd clauses. We
call this algorithm SHAP-FOLD. The standard FOLD algorithm, LIME-FOLD and SHAP-FOLD have
all been implemented and are available online at [16]

5 Open Issues

To make a Machine Learning model fully explainable, not only all the decisions need to be explain-
able, but also according to GDPR, an automated decision making system should also provide a user
with minimum necessary efforts to ﬂip a decision. This is known as Counter-factual Explanation. A
counterfactual explanation describes a causal situation in the form: “If X had not occurred, Y would not

F. Shakerin

387

have occurred”. In interpretable machine learning, counterfactual explanations are minimal necessary
changes in the feature values of an individual data sample to ﬂip the prediction of a classiﬁer from one
class to another. In particular this is important in ﬁnancial and educational applications where an auto-
mated system should provide recommendations as to how go from the state of “rejection” to “approval”
with minimum required efforts. The existing solutions based linear programming optimisation, do not
consider the physical and logical constraints when they try to ﬁnd solutions [21]. The declarative nature
of ILP-induced clauses have the potential to explain why the hypothesis holds for a particular data sam-
ple. One can go a step further than just explaining a machine learning model: one can provide advise
on how to change the classiﬁcation of a sample data. For example, if a machine learning based model is
used to decide whether a loan application ought to be approved or not, one can compute with the help of
Craig interpolant [8] how various features must change in order for that application to become qualiﬁed.
Signiﬁcantly greater understanding of the model can thus be gained with the help of Craig interpolants.

References

[1] Explainable Artiﬁcial Intelligence (XAI), doi:10.23919/MIPRO.2018.8400040. Available at https://www.

darpa.mil/program/explainable-artificial-intelligence.

[2] Chitta Baral (2003): Knowledge representation, reasoning and declarative problem solving. Cambridge

University Press, Cambridge, New York, Melbourne, doi:10.1017/CBO9780511543357.

[3] Tianqi Chen & Carlos Guestrin (2016): XGBoost: A Scalable Tree Boosting System. In: Proceedings of the

22Nd ACM SIGKDD, KDD ’16, pp. 785–794, doi:10.1145/2939672.2939785.

[4] Wensheng Gan, Jerry Chun-Wei Lin, Philippe Fournier-Viger, Han-Chieh Chao, Tzung-Pei Hong & Hamido
Fujita (2018): A survey of incremental high-utility itemset mining. Wiley Interdiscip. Rev. Data Min. Knowl.
Discov. 8(2), doi:10.1609/aaai.v33i01.33013052.

[5] Michael Gelfond & Yulia Kahl (2014): Knowledge Representation, Reasoning, and the Design of Intelli-
gent Agents: The Answer-Set Programming Approach. Cambridge University Press, New York, NY, USA,
doi:10.1017/CBO9781139342124.

[6] M. Lichman (2013): UCI,ML Repository, http://archive.ics.uci.edu/ml.
[7] Scott M Lundberg & Su-In Lee (2017): A uniﬁed approach to interpreting model predictions. https:

//github.com/slundberg/shap.

[8] K. L. McMillan (2005): An Interpolating Theorem Prover. Theor. Comput. Sci. 345(1), pp. 101–121,

doi:10.1016/j.tcs.2005.07.003.

[9] Stephen Muggleton (1991):
doi:10.1007/BF03037089.

Inductive Logic Programming. New Gen. Comput. 8(4), pp. 295–318,

[10] Stephen Muggleton, Luc Raedt, David Poole, Ivan Bratko, Peter Flach, Katsumi Inoue & Ashwin Srinivasan

(2012): ILP Turns 20. Mach. Learn. 86(1), pp. 3–23, doi:10.1007/s10994-011-5259-2.

[11] G. D. Plotkin (1971): A further note on inductive generalization, In machine Intelligence, volume 6, pages

101-124.

[12] J. Ross Quinlan (1990): Learning Logical Deﬁnitions from Relations. Machine Learning 5, pp. 239–266,

doi:10.1007/BF00117105.

[13] Marco Tulio Ribeiro, Sameer Singh & Carlos Guestrin (2016): ”Why Should I Trust You?”: Explain-
ing the Predictions of Any Classiﬁer. In: Proceedings of the 22nd ACM SIGKDD 2016, pp. 1135–1144,
doi:10.1145/2939672.2939778.

[14] F. Riguzzi (2016): ALEPH in SWI-Prolog. Available at https://github.com/friguzzi/aleph.
[15] Chiaki Sakama (2005): Induction from answer sets in nonmonotonic logic programs. ACM Trans. Comput.

Log. 6(2), pp. 203–231, doi:10.1145/1055686.1055687.

388

Induction of NMLPs To Explain Statistical Learning Models

[16] F. Shakerin (2019): FOLD package. https://github.com/fxs130430/SHAP_FOLD.
[17] Farhad Shakerin & Gopal Gupta (2019): Induction of Non-Monotonic Logic Programs to Explain Boosted
Tree Models Using LIME. In: AAAI, AAAI Press, pp. 3052–3059, doi:10.1609/aaai.v33i01.33013052.
[18] Farhad Shakerin, Elmer Salazar & Gopal Gupta (2017): A new algorithm to automate inductive learning of

default theories. TPLP 17(5-6), pp. 1010–1026, doi:10.1017/S1471068417000333.

[19] A. Srinivasan (2001): The Aleph Manual. Available at http://web.comlab.ox.ac.uk/oucl/research/

areas/machlearn/Aleph/.

[20] Paul Voigt & Axel von dem Bussche (2017): The EU General Data Protection Regulation (GDPR): A Prac-
tical Guide, 1st edition. Springer Publishing Company, Incorporated, doi:10.1007/978-3-319-57959-7.
[21] Sandra Wachter, Brent Mittelstadt & Chris Russell (2017): Counterfactual explanations without opening the
black box: Automated decisions and the GDPR.(2017). Harvard Journal of Law & Technology 31, p. 841,
doi:10.2139/ssrn.3063289.

[22] Qiang Zeng, Jignesh M. Patel & David Page (2014): QuickFOIL: Scalable Inductive Logic Programming.

Proc. VLDB Endow. 8(3), pp. 197–208, doi:10.14778/2735508.2735510.

