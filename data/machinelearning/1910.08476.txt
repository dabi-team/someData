9
1
0
2

t
c
O
9
2

]

G
L
.
s
c
[

2
v
6
7
4
8
0
.
0
1
9
1
:
v
i
X
r
a

On Connections between Constrained
Optimization and Reinforcement Learning

Nino Vieillard, Olivier Pietquin, and Matthieu Geist

Google Research, Brain Team

Abstract

Dynamic Programming (DP) provides standard algorithms to solve Markov
Decision Processes. However, these algorithms generally do not optimize a
scalar objective function. In this paper, we draw connections between DP
and (constrained) convex optimization. Speciﬁcally, we show clear links
in the algorithmic structure between three DP schemes and optimization
algorithms. We link conservative Policy iteration to Frank-Wolfe, Mirror-
Descent Modiﬁed Policy Iteration to Mirror Descent, and Politex (Policy
Iteration Using Expert Prediction) to Dual Averaging. These abstract DP
schemes are representative of a number of (deep) reinforcement learning
(RL) algorithms. By highlighting these connections (most of which have
been noticed earlier, but in a scattered way), we would like to encourage
further studies linking RL and convex optimization, that could lead to the
design of new, more eﬃcient, and better understood RL algorithms.

1 Introduction

A standard way to model sequential decision making is through the frame of Markov Deci-
sion problems (MDPs). These MDPs, when known and small enough, can be solved with
Dynamic Programming (DP), of which two classical algorithms are policy iteration (PI)
and value iteration (VI). Solving an MDP means ﬁnding a policy π∗ such that its value vπ∗
dominates the value of any other policy, state-wise. As such, it cannot be easily framed as
a (convex) optimization problem, even if connections can be made: VI can be (indirectly)
seen as minimizing the residual kT∗v − vk through a ﬁxed-point approach, and PI can be
obtained as Newton descent on the same residual (e.g., [Pérolat et al., 2016] and references
therein).

Reinforcement learning aims at solving sequential decision making problems through inter-
actions. Many RL algorithms can be seen as approximate and possibly asynchronous and
stochastic variations of DP algorithms, mainly PI and VI. As such, connections of these
algorithms to convex optimization are quite loose. A notable exception is algorithms based
on policy gradient, that aim at maximizing the expected value function, J(π) = Es∼µ[vπ(s)],
or a proxy of this objective function [Deisenroth et al., 2013]. However, this function is not
concave, which is often a problem from an optimization perspective. Another exception is
the set of algorithms that aim at minimizing the residual J(v) = kT∗v − vk. Again, this is
not convex in general and this approach comes with drawbacks [Geist et al., 2017].

In this work, we describe three connections between DP schemes and convex optimization
algorithms, from an algorithmic perspective, and without considering estimation or approxi-
mation errors. We relate the Frank-Wolfe algorithm [Frank and Wolfe, 1956] to Conservative
Policy Iteration [Kakade and Langford, 2002] in Section 3. Then, we establish a connection

Optimization Foundations for Reinforcement Learning Workshop at NeurIPS 2019, Vancouver,
Canada.

 
 
 
 
 
 
between Mirror Descent [Beck and Teboulle, 2003] and Mirror Descent Modiﬁed Policy Iter-
ation [Geist et al., 2019] in Section 4, and ﬁnally between Dual Averaging [Nesterov, 2009]
and Politex [Lazic et al., 2019] in Section 5. Most of these connections have been noticed
earlier, but in a scattered way, and sometimes not clearly. We also discuss brieﬂy more
connections between RL and optimization in Section 6.

2 Background

2.1 Markov Decision Processes

S

We consider the problem of solving inﬁnite horizon discounted Markovian Decision Process
(MDP). An MDP is a tuple {S, A, P, r, γ}, where S and A are ﬁnite spaces of respectively
states and actions, P ∈ ∆S×A
is a Markovian transition kernel (writing ∆X the simplex over
the set X), r ∈ RS×A a reward function and γ ∈ (0, 1) the discount factor. The objective
of dynamic programming is to ﬁnd a policy π∗ that dominates every policy π in the space
of policies that we denote Π. A policy π ∈ Π is a function that associate to each state
s ∈ S a distribution over A, π(·|s). It deﬁnes an associated stochastic kernel, Pπ(s′|s) =
Ea∼π(·|s)[P (s′|s, a)], and an associated expected reward function rπ(s) = Ea∼π(·|s)[r(s, a)].
The value vπ ∈ RS of a policy associates to each state the expected discounted cumulative
reward,

vπ(s) = E

∞

"

t=0
X

γtr(st, at)

(cid:12)
(cid:12)
(cid:12)
(cid:12)
(cid:12)

s0 = s, st+1 ∼ P (·|st, at), at ∼ π(·|st)

#

.

To every policy is associated a Bellman evaluation operator, deﬁned for each v ∈ RS as
Tπv = rπ + γPπv. The value function of a policy is the unique ﬁxed point of this operator.
The Bellman optimality operator is deﬁned as T∗v = maxπ Tπv, and the optimal value
function v∗ veriﬁes v∗ = T∗v∗. We deﬁne the set of greedy policies w.r.t. to any value v as
Gv = {π|Tπv = T∗v}. An optimal policy π∗ is such that π∗ ∈ Gv∗.
The state-action value function qπ ∈ RS×A associated to a policy π is deﬁned as

qπ(s, a) = r(s, a) + γEs′∼P (·|s,a)[vπ(s′)].

This state-action value function possesses similar properties to the value function, In par-
ticular, we can easily re-write the Bellman equations using state-action values instead of
values, and we have that Tπqπ = qπ and T∗qπ∗ = qπ∗ = q∗. The greediness can be deﬁned
w.r.t to a state-action value by Gq = argmaxa q(·, a).
Two classic DP algorithms are PI and VI. PI iterates as follows, πk+1 ∈ G(vπk ), its con-
vergence being guaranteed by the fact that for any policy π, vGvπ ≥ vπ, the equality being
obtained only at optimality. VI iterates as follows, vk+1 = T∗vk, its convergence being
guaranteed by the fact that the Bellman operator is a γ-contraction. In both cases, the
argument for convergences are loosely related to convex optimization. Both schemes can be
generalized to modiﬁed policy iteration (MPI), that iterates as

vk = T m
πkvk−1
πk+1 ∈ Gvk.

(cid:26)

We retrieve PI with m = ∞ (in this case, we compute the ﬁxed point of the contractive
operator Tπk ) and VI with m = 1 (noticing that vk = Tπkvk−1 = TGvk−1vk−1 = T∗vk−1).
This can be seen as a PI scheme where the full evaluation of the policy is relaxed to a partial,
less costly, evaluation.
We deﬁne the objective function J ∈ R∆S

A as

J(π) = Es∼µ [vπ(s)] ,

J(π). This non-concave
with µ a given distribution of states. We aim at solving maxπ∈∆S
optimization problem can be addressed for example with a gradient ascent, and it is the
basis of a number of RL algorithms [Deisenroth et al., 2013], either directly or indirectly.

A

2

For example, Conservative Policy Iteration [Kakade and Langford, 2002] or Trust Region
Policy Optimization (TRPO) [Schulman et al., 2015] were designed for optimizing a proxy
to this objective function. An interesting observation is that the natural gradient of J(π),
˜∇J(π), in the tabular case (and with a softmax representation for the policy), is indeed the
state-action value function, that is ˜∇J(π) = qπ. This is a direct corollary of the results
of Kakade [2002]. We’ll use this observation later.

2.2 Convex Optimization

We study the problem of ﬁnding the maximum of a concave function over a convex set,
instead of the standard setting where one aims to ﬁnd the minimum of a convex function.
This allows us to draw more natural connections to RL, without loss of generality. More
precisely, given a concave function f taking its values in R and a closed convex space X , we
deﬁne a maximization problem as ﬁnding x∗ ∈ X such that

f (x∗) = max
x∈X

f (x).

(1)

We consider methods derived from the gradient ascent scheme. This classic algorithm as-
sumes that f is (sub)diﬀerentiable, and produces a sequence (xk), with η a learning rate,

xk+1 = xk + η∇f (xk).

There is no reason for this sequence to stay in X , and a classical solution is projected gradient
ascent, that additionally project back the iterate onto the convex set,

yk+1 = xk + η∇f (xk)
xk+1 = ΦX (yk+1),

(cid:26)

with ΦX the projection onto X . We’ll discuss other algorithms while drawing connections
to RL in the following sections.

3 Conservative Policy Iteration and Frank Wolfe

We start by linking the classic Frank Wolfe algorithm [Frank and Wolfe, 1956], also
known as Conditional Gradient Descent, to the DP scheme Conservative Policy Iteration
(CPI, Kakade and Langford [2002]). This link was ﬁrst made by Scherrer and Geist [2014],
who studied a boosting generalization of CPI based on Frank-Wolfe, but without mentioning
it, and was explicitly given by Shani et al. [2019].

Frank–Wolfe Frank-Wolfe (FW) addresses problem (1). Given the current iterate xk and
its gradient gk = ∇f (xk), it searches for the element of X being the most colinear to the
gradient, and update the iterate by doing a convex mixture of these elements, which ensure
that the iterates stay in the convex set. Formally, it iterates as follows, with x0 ∈ X for
initialization:

gk = ∇f (xk)
sk = argmaxx∈X hx, gki
xk+1 = (1 − α)xk + αsk.




(2)

Compared to projected gradient ascent, it might be easier in some problems to ﬁnd the most

colinear element than to project the iterate onto the convex set.

Conservative Policy Iteration CPI is a classic RL algorithms that soften the PI scheme
by replacing the greedy policy by a stochastic mixture of the greedy policy and the previous
one. It iterates as follows:

πk+1 = (1 − α)πk + αGqπk ,

with Gqπk any greedy policy respectively to qπk . Without approximation, the optimal rate
is α = 1, and the algorithm is of practical interest when there is approximation, but we
stick to the exact case, the aim being to draw connections to optimization.

3

Let µ ∈ ∆S > 0 be a distribution over states1, and deﬁne the scalar product on RS×A as
a q1(s, a)q2(s, a). The greedy policy Gqπk can be equivalently seen as
hq1, q2i =
the policy maximizing hπ, qπk i. Recall also that the state-action value function is indeed the
natural gradient of J, ˜∇J(π) = qπ. Given this, we can rewrite the update of CPI as follows:

s µ(s)

P

P

qk = qπk = ˜∇J(πk)
π′
hπ, qki
k = argmaxπ∈∆S
πk+1 = (1 − α)πk + απ′
k.

A




(3)

Comparing Eqs. (2) and (3), it is clear that CPI is indeed the Frank-Wolfe algorithm applied
to the objective function J(π), up to the fact that the vanilla gradient is replaced by the
natural gradient2. We are not aware of a FW algorithm considering natural gradients in
the optimization literature.



CPI being a variation of the PI scheme, we can also write an MPI-like variation of CPI,
as considered by Vieillard et al. [2019]. This gives the following iterate (with π0 and q0 for
initialization), that generalizes scheme (3):

qk = T m
πk qk−1
π′
hπ, qki
k = argmaxπ∈∆S
πk+1 = (1 − α)πk + απ′
k.

A






With m < ∞, we no longer have a FW scheme, but the algorithmic approach is very
In addition to the process updating the policies, we have an additional process
similar.
that replaces the gradient computation, this process iterating value functions based on the
Bellman operator of the current policy. With this point of view, the function qk plays a
role similar to the gradient, giving the direction of improvement. Notice that this scheme
converges, despite the lack of concavity [Vieillard et al., 2019] (but the proof does not rely
on optimization-like arguments).

4 MD-MPI and Mirror Descent

Here, we show a connection between the Mirror Descent (MD, Beck and Teboulle [2003])
optimization method and the DP scheme Mirror Descent Modiﬁed Policy iteration (MD-
MPI, Geist et al. [2019]).

Mirror Descent Let DΩ be the Bregman divergence generated by a convex function
Ω ∈ RX , DΩ(x||x′) = Ω(x) − Ω(x′) − h∇Ω(x′), x − x′i. Classic Bregman divergences are the
Euclidean distance, generated by the ℓ2 norm, or the Kullback-Leibler (KL) divergence, gen-
erated by the negative entropy. Mirror Descent solves a maximization problem by iterating
as follows:

gk = ∇f (xk)
xk+1 = argmaxx∈X ηhx, gki − DΩ(x||xk).
In words, MD consists at each step in maximizing a linearization of the function of interest,
with the constraint of not moving to far from the previous iterate, this constraint being
quantiﬁed by the Bregman divergence. It generalizes classic gradient ascent, that can be
retrieved in the unconstrained case by considering the Euclidean distance.

(4)

(cid:26)

MD-MPI Geist et al. [2019] introduced a set of abstract DP algorithms to study the
propagation of errors of regularized RL algorithms, where the greediness is softened by a
convex regularizer (typically, a scaled entropy or KL divergence, see the paper for details).

1

2

Notice that the original CPI considers the distribution dµ,πk = (1 − γ)µ(I − γPπk )

(the γ-
weighted occupancy measure induced by πk for the initial state distribution µ) instead of µ, which
is of importance for the analysis in the approximate setting, but does not change the algorithm in
the exact setting considered here.

−1

With the vanilla gradient, the derivation would be a bit more invovled, but we would obtain
the original CPI, that is with µ being replaced by dµ,πk , see the derivations of Scherrer and Geist
[2014].

4

MD-MPI considers the general case where the greediness is regularized by a Bregman diver-
gence, within an MPI-like scheme. We consider a slight variation here, where greediness is
computed in expectation with respect to µ (instead of state-wise in the original work).
Let Ω : ∆A → R be a convex function, and deﬁne (with a slight abuse of notation) the
convex function Ω : ∆S
s µ(s)Ω(π(.|s)). We ﬁrst consider a PI-like
update of MD-MPI (that is, setting m = ∞, or MD-PI), and recall that qπk = ˜∇J(πk). The
P
corresponding update rule can be written as

A → R as Ω(π) =

qk = qπk = ˜∇J(πk)
πk+1 = argmaxπ∈∆A

S

(

ηhπ, qki − DΩ(π||πk).

(5)

As before, comparing Eqs. (4) and (5), MD-PI is exactly mirror descent applied to J(π), up
to the fact that the vanilla gradient is replaced by the natural one. We’re not aware of any
MD algorithm doing so in the optimization literature.

With a KL divergence, this scheme is very close to TRPO, the main diﬀerences being that the
distribution dµ,πk (deﬁned in footnote 1) is used instead of µ, at each iteration. Contrary to
CPI, that can be seen exactly as Frank-Wolfe with vanilla gradient (see footnote 2), Eq. (5)
with the vanilla gradient would not give TRPO. The reader can refer to Shani et al. [2019],
who draw connections between MD and TRPO, and show that TRPO is a kind of modiﬁed
MD.

We can also write the original MD-MPI (up to the slight variation mentioned before):

qk = T m
πk qk−1
πk+1 = argmaxπ∈∆A

S

(

ηhπ, qki − DΩ(π||πk)

.

As it was the case for CPI, we obtain a mirror descent scheme, up to the fact that the
gradient is replaced by a second iterative process on the q-values. In both domains, the idea
is similar: the goal is to move in the direction of improvement – either a new point or a new
policy –, this direction being provided by the gradient or the q-value, but staying not too
far from the previous point or policy.

5 Politex and Dual Averaging

Finally, we show a new connection between the recent Politex (Policy Iteration Using Expert
Prediction) algorithm [Lazic et al., 2019], and the Dual Averaging (DA, Nesterov [2009])
optimization scheme.

Dual Averaging Dual Averaging can be considered as a lazy version of MD
(see Bubeck et al. [2015, Section 4.4]), and iterates as follows

gk = ∇f (xk)
xk+1 = argmaxx∈X ηhx,

(

k
j=0 gji − Ω(x).

(6)

In some cases, it can be shown to be equivalent to MD. This algorithmic scheme can also be
linked to Follow the Regularized Leader (FTRL), that is somehow a building block of Politex
(the related paper focusing indeed on prediction with expert advice, which is related).

P

Politex Politex is a PI scheme, in the average reward case, that, at each iteration, es-
timates the value of its current policy, and computes a new policy that is the softmax of
the sum of all q-values of the preceding policies. Notice that a softmax policy is a greedy
policy regularized by an entropy (e.g., see Geist et al. [2019]). Here, we ﬁrst consider this
algorithm in the cumulative discounted reward case, generalized to any regularizer. In this
case, we can write a generalization of Politex as

qk = qπk = ˜∇J(πk)
πk+1 = argmaxπ∈∆A

S

(

ηhπ,

k
j=0 qji − Ω(π)

.

(7)

P

5

Comparing Eqs. (6) and (7), we see that this variation of Politex is exactly DA with a
natural gradient in lieu of the vanilla one.

This can be easily generalized to an MPI-like scheme:

qk = T m
πk qk−1
πk+1 = argmaxπ∈∆A

S

(

ηhπ,

k
j=0 qji − Ω(π).

Again, this is DA, up to the fact that the gradient is replaced by an iterative process for
computing q-values.

P

6 Other connections

There are other works, not discussed above, that draw connections between optimization
and RL. We mention brieﬂy some of them here.

Bertsekas and Tsitsiklis [1996] see v − T∗v as the gradient of an unknown function, and this
has served as a building block to Goyal and Grand-Clement [2019] to introduce a Nesterov-
like VI algorithm, with improved convergence rate.

Another classic DP approach, less used in RL, compute the optimal value function as the
solution of a linear program. Neu et al. [2017] build on this to study regularized MDPs,
where optimal policies are computed as the solution of real convex problems. The practical
issue is that it involves working in the dual space (on state-action distributions), which
might be not practical (as required quantities might not be easy to estimate).

Agarwal et al. [2019] study the convergence of various policy gradient algorithms, and de-
spite the lack of concavity, their proof techniques borrow to optimization (and allow showing
even global convergence in some cases).

7 Discussion

Using an analogy between the gradient and the state-action value function, we have shown
a strong connection between some constrained convex optimization and RL algorithms. We
have made this connection clear on three cases: Frank Wolfe and Conservative policy itera-
tion, Mirror Descent and MD Modiﬁed Policy Iteration, and Dual Averaging and Politex. A
summary of these connections is presented in Table 1. All these algorithms are improvements
of canonical algorithms in their ﬁelds, namely Projected Gradient Descent in optimization
and policy iteration in dynamic programming. They all share a same idea of regularization,
either by a stochastic mixture of consecutive policies (like in CPI), or by explicitly regular-
izing the improvement step (like in mirror descent, that regularizes its improvement with a
divergence).

From these three examples, we see how some methods have been identiﬁed in Optimization
and in RL, and this sheds light and links that could be exploited in RL. Indeed, such
a connection could be useful for either designing new algorithms in RL, or giving new
techniques of analysis to better understand these algorithms. Drawing more formal links
between optimization and RL (for example, linking the contraction in RL to strong convexity
or Lipschitzness in optimization) could also be useful to strengthen the general connection
between these ﬁelds.

6

Table 1: Summary of connections and analogies.

Convex Optimization Reinforcement Learning

x
f (x)
∇f (x)

π
? (J(ω) in tabular case)
qπ

Frank–Wolfe
Mirror Descent
Dual Averaging

Conservative Policy Iteration
MD-MPI (type 2)
Politex

7

References

Alekh Agarwal, Sham M Kakade, Jason D Lee, and Gaurav Mahajan. Optimality and
approximation with policy gradient methods in markov decision processes. arXiv preprint
arXiv:1908.00261, 2019.

Amir Beck and Marc Teboulle. Mirror descent and nonlinear projected subgradient methods

for convex optimization. Operations Research Letters, 31(3):167–175, 2003.

Dimitri P Bertsekas and John N Tsitsiklis. Neuro-dynamic programming, volume 5. Athena

Scientiﬁc Belmont, MA, 1996.

Sébastien Bubeck et al. Convex optimization: Algorithms and complexity. Foundations and

Trends in Machine Learning, 8(3-4):231–357, 2015.

Marc Peter Deisenroth, Gerhard Neumann, Jan Peters, et al. A survey on policy search for

robotics. Foundations and Trends R(cid:13) in Robotics, 2(1–2):1–142, 2013.

Marguerite Frank and Philip Wolfe. An algorithm for quadratic programming. Naval re-

search logistics quarterly, 3(1-2):95–110, 1956.

Matthieu Geist, Bilal Piot, and Olivier Pietquin. Is the bellman residual a bad proxy? In

Advances in Neural Information Processing Systems, pages 3205–3214, 2017.

Matthieu Geist, Bruno Scherrer, and Olivier Pietquin. A theory of regularized markov
decision processes. In Proceedings of the International Conference on Machine Learning,
2019.

Vineet Goyal and Julien Grand-Clement. A ﬁrst-order approach to accelerated value itera-

tion. arXiv preprint arXiv:1905.09963, 2019.

Sham Kakade and John Langford. Approximately optimal approximate reinforcement learn-
ing. In Proceedings of the International Conference on Machine Learning, volume 2, pages
267–274, 2002.

Sham M Kakade. A natural policy gradient. In Advances in neural information processing

systems, pages 1531–1538, 2002.

Nevena Lazic, Yasin Abbasi-Yadkori, Kush Bhatia, Gellert Weisz, Peter Bartlett, and Csaba
Szepesvari. Politex: Regret bounds for policy iteration using expert prediction. In Pro-
ceedings of the International Conference on Machine Learning, pages 3692–3702, 2019.

Yurii Nesterov. Primal-dual subgradient methods for convex problems. Mathematical pro-

gramming, 120(1):221–259, 2009.

Gergely Neu, Anders Jonsson, and Vicenç Gómez. A uniﬁed view of entropy-regularized

markov decision processes. arXiv preprint arXiv:1705.07798, 2017.

Julien Pérolat, Bilal Piot, Matthieu Geist, Bruno Scherrer, and Olivier Pietquin. Softened
In Proceedings of The International

approximate policy iteration for markov games.
Conference on Machine Learning, pages 1860–1868, 2016.

Bruno Scherrer and Matthieu Geist. Local policy search in a convex space and conservative
policy iteration as boosted policy search. In Proceedings of the Joint European Conference
on Machine Learning and Knowledge Discovery in Databases, pages 35–50. Springer, 2014.

John Schulman, Sergey Levine, Pieter Abbeel, Michael Jordan, and Philipp Moritz. Trust
region policy optimization. In Proceedings of the International Conference on Machine
Learning, pages 1889–1897, 2015.

Lior Shani, Yonathan Efroni, and Shie Mannor. Adaptive trust region policy opti-
mization: Global convergence and faster rates for regularized mdps. arXiv preprint
arXiv:1909.02769, 2019.

Nino Vieillard, Olivier Pietquin, and Matthieu Geist. Deep conservative policy iteration.

arXiv preprint arXiv:1906.09784, 2019.

8

