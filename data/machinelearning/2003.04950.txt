0
2
0
2

r
a

M
0
1

]

O
R
.
s
c
[

1
v
0
5
9
4
0
.
3
0
0
2
:
v
i
X
r
a

Synthesis of Control Barrier Functions Using a Supervised Machine
Learning Approach

Mohit Srinivasan1, Amogh Dabholkar2, Samuel Coogan3, and Patricio Vela4

Abstract— Control barrier functions are mathematical con-
structs used to guarantee safety for robotic systems. When
integrated as constraints in a quadratic programming optimiza-
tion problem, instantaneous control synthesis with real-time
performance demands can be achieved for robotics applications.
Prevailing use has assumed full knowledge of the safety barrier
functions, however there are cases where the safe regions must
be estimated online from sensor measurements. In these cases,
the corresponding barrier function must be synthesized online.
This paper describes a learning framework for estimating
control barrier functions from sensor data. Doing so affords
system operation in unknown state space regions without
compromising safety. Here, a support vector machine classiﬁer
provides the barrier function speciﬁcation as determined by sets
of safe and unsafe states obtained from sensor measurements.
Theoretical safety guarantees are provided. Experimental ROS-
based simulation results for an omnidirectional robot equipped
with LiDAR demonstrate safe operation.

I. INTRODUCTION

Autonomous vehicles [1], industrial robots, and multi-
robot systems [2] deployed in uncertain domains are often
tasked to respect safety-critical constraints while advancing a
given task [3]. When operating in unknown and dynamic en-
vironments with insufﬁcient advanced information regarding
the workspace, controllers which translate sensory informa-
tion from the environment into safe control actions are of
paramount importance. Control barrier functions (CBFs) are
level-set functions used to provide formal safety guarantees
for controlled dynamical systems. Given a possibly unsafe
nominal control policy, barrier function based quadratic
programs (QPs) generate a safe control action at each time
instant. The control actions are minimally invasive in the
sense that the nominal control policy is modiﬁed only when
it will result in violation of a safety constraint. Barrier func-
tion based real-time controllers in robotics support collision
avoidance for multi-robot motion [4], task allocation for
robotic swarms [5], and motion planning [6].

A key assumption commonly imposed is that the robotic
system has complete knowledge of the unsafe state space
regions. Leveraging the knowledge translates to formal safety
guarantees arising from its translation to CBFs. In practice,

This work was supported in part by the National Science Foundation
under Grant Nos. #1836932, S&AS 1849333, and in part by DARPA PAI
1Mohit Srinivasan, 3Samuel Coogan and 4Patricio Vela are with the
School of Electrical and Computer Engineering, Georgia Institute of
Technology, Atlanta, USA mohit.srinivasan@gatech.edu;
sam.coogan@gatech.edu; pvela@gatech.edu

2Amogh Dabholkar is with the Department of Electrical and Electronics
Engineering, Birla Institute of Technology and Science (BITS), Pilani - K.
K. Birla Goa Campus, India adabholkar6@gatech.edu

3Samuel Coogan is also with the School of Civil and Environmental

Engineering, Georgia Institute of Technology, Atlanta, USA

this assumption need not hold and limits more widespread
application of barrier functions. As a motivating example,
consider an autonomous robot operating in an environment
for which it has no knowledge of the obstacle boundaries. If
these boundaries are to be as level-sets of smooth functions,
the process of ﬁnding closed-form barrier functions for these
obstacles is not straightforward. Without the functions, one
cannot leverage the safety guarantees that CBFs provide.
Thus, this paper describes a support vector machine (SVM)
approach to CBF synthesis from sensor measurements. In
particular, sensory information obtained from the environ-
ment deﬁnes the set of safe and unsafe samples and is used
for training the SVM classiﬁer.

Learning algorithms, or data-driven synthesis methods, for
ensuring safety have been explored in several contexts. The
most prevalent has been to establish stable state space regions
meeting safety speciﬁcations by identifying a control Lya-
punov function (CLFs) compatible with given CBFs. Tech-
niques for doing so include sum-of-squares (SOS) methods
[7] and neural network designs [8], with the aim of identify-
ing the largest possible stable region within the safe region.
When attempting to learn baseline control policies for a given
task, reinforcement learning methods cannot guarantee safety
as the exploration process demands executing unsafe control
inputs. Employing pre-speciﬁed barrier functions during the
action policy exploration and keeping track of the safety
interventions to inﬂuence the explored policies, can provide
the necessary safety guarantees [9]. Investigations more
closely aligned with barrier function synthesis using tools
from machine learning include the use of kernel machines
[10] to synthesize occupancy map functions for navigation
and planning purposes [11], [12]. Occupancy map level-sets
can distinguish safe and unsafe regions. This potential use
was further explored in the context of perceptron algorithms,
where the resulting classiﬁer function provided a mechanism
to synthesize non-colliding trajectories through space [13].
Emphasis was on improving the run-time of global mapping
relative to existing kernel machine methods. Our aim is to
explore how these machine learning constructs can be used
to synthesize CBFs in a manner that the learned function
provides the necessary safety guarantees.

The contributions of this work are as follows: First, we
present a SVM approach for the synthesis of a barrier
function from a training dataset consisting of safe and unsafe
samples obtained from sensor measurements. We describe
ofﬂine and online training methods. Second, a formal guar-
antee on correct classiﬁcation of unsafe regions is provided
for both the methods. We show that in the ofﬂine method,

 
 
 
 
 
 
the system is rendered safe for an under-approximated (con-
servative) safe set. A similar guarantee holds locally in the
online approach. The proposed framework is implemented in
a ROS-based simulator with a LiDAR equipped omnidirec-
tional robot. Evaluation metrics for the trajectories generated
by the proposed CBF synthesis framework quantify how well
they match the ideal case where the CBF is known. To the
best of our knowledge, this is the ﬁrst paper addressing the
problem of CBF synthesis from sensed environmental data.
This paper is organized as follows: Section II reviews
control barrier functions, their safety properties, and their
use in QP-based control. Section III describes the problem
addressed. Section IV covers the main results of the CBF
synthesis framework, for both the ofﬂine and online ver-
sions. Section V covers implementation scenarios from a
motion planning perspective along with evaluation metrics
for comparing the generated trajectories with ground truth
data. Section VI provides concluding remarks.

II. MATHEMATICAL BACKGROUND

This section summarizes the concept of control barrier
functions and the formal safety guarantees they provide. To
begin, consider an afﬁne control robotic system:

˙x = f (x) + g(x)u ,

x

∈ D ⊂

Rn, u

Rm,

∈

(1)

where x is the state of the robot, u is the control input, and
Rn×m are
Rn and g :
x(0) = x0. Both f :
locally Lipschitz continuous vector ﬁelds.

D →

D →

∈

D

≥

x
{

C 1(

h(x)

∈ D |

0 and h

; R)
}

Consider further that the system has a set of safe states
given by the
=
C
super zero level-set of the function h. The boundary of the
.
safe set is the zero level-set, ∂
h(x) = 0
}
During controlled evolution, the system (1) is considered to
be safe if for all t
. As detailed
∈ C
in [14], zeroing control barrier functions (ZCBFs) can be
used to guarantee safety of the system. To deﬁne ZCBFs,
R as
function α : R
we ﬁrst deﬁne an extended class
a function that is strictly increasing and α(0) = 0.

when x(0)

0, x(t)

∈ D |

x
{

∈ C

→

=

≥

K

C

; R) is a Zeroing
Deﬁnition 1. The function h
Control Barrier Function (ZCBF) if there exists a locally
Lipschitz extended class
(cid:26)

function α such that for all x

C 1(

∈ D

D

K

(cid:27)

∈

sup
u∈Rm

Lf h(x) + Lgh(x)u(x) + α(h(x))

0 ,

≥

for the Lie derivatives Lf h(x) = ∂h(x)
∂x f (x) and Lgh(x) =
∂h(x)
∂x g(x) of h in the direction of the vector ﬁelds f and g.
Deﬁne the state-dependent set of control inputs

(x),

U

(cid:27)
0

.

≥

(x)

U

≡

(cid:26)

u

Rm

∈

|

Lf h(x)+Lgh(x)u(x)+α(h(x))

(2)
Safety of the system can then be guaranteed under the action
of a suitable control input u(x)
,
formalized by the following theorem:

(x) for all x

∈ D

∈ U

Theorem 1. [14] Let

h(x)

≥

D |

0 and h

∈

there be a safe set
C 1(

; R)

C
∈
speciﬁed for the afﬁne

x
{

=

D

}

control system (1). If h is a ZCBF, then any control input
renders
u
C(
∈
0.
the set

; Rm) where u(x)
forward invariant. That is, x(t)

(x) for all x

∈ D
for all t

∈ U

∈ C

≥

D
C

The constraint (2) arising from a ZCBF h is afﬁne in the
control input u. and hence can be encoded as a quadratic
, the require-
program (QP) constraint in u. For ﬁxed x
ment u
(x) becomes a linear constraint for the following
point-wise in time, minimum norm QP:

∈ D

∈ U

u

−

k(x)

||
u

minimize
u∈Rm
s.t

2
2
||
(x) ,
R is a user-deﬁned nominal control policy.
where k :
This QP (a) results in a control input for following the
nominal policy while simultaneously guaranteeing safety,
and (b) is amenable to efﬁcient online computation.

D →

∈ U

(3)

III. PROBLEM STATEMENT

∈

RN

D ⊂

Consider an afﬁne control robotic system as in (1) evolving
R2 and equipped with LiDAR sensors that provide
in
depth information. By virtue of the depth measurement
vector zt
>0 at time t, where N is the total number
of samples, the robot can detect unsafe state space regions.
the angular
Regarding the LiDAR sensor, denote by θres
resolution (increment angle) of the measurements. This is
the angle between two consecutive light rays emitted from
the sensor. We make the following assumption in order to
account for spatial variations in the nature of the workspace:
assume that the resolution of the LiDAR sensor is high
enough to capture the spatial proﬁle of the environment from
a given offset distance, i.e., the LiDAR has a sufﬁciently
small increment angle θres. Sensors such as the ones from
Velodyne [15] with increment angles as small as 0.08◦ are
capable of satisfying the above assumption. Hence, it is
reasonable to assume such sensor resolution capabilities.

C(

∈ {

0 hi

; R)

Let k

∈ D |

; Rm) be a user-deﬁned nominal feedback
control policy to be followed by the robot. Examples of such
policies include proportional (go-to-goal) control or MPC
based policies [16]. The state space is assumed to contain
unknown unsafe regions. That is, there exist p unsafe sets in
the state space deﬁned as
i =
C
for all i
C(
1, 2, . . . , p
ZCBFs. The safe region is

hi(x)
x
{
∈
, such that hi are unknown
}
p
i=1 C
D\ ∪
Since there is no a priori knowledge of the unsafe sets,
data obtained from the LiDAR sensor must be used to
R,
synthesize the unknown barrier functions hi
, to render the system safe while minimally
i
}
deviating from the nominal feedback policy k. In conjunction
with the robot’s state, the measurements obtained from the
on-board depth sensors provide the location of points on the
boundary of the unsafe sets, and hence are points x
∈ D
for which h(x) = 0. To learn the unsafe regions and follow
the nominal policy safely, a framework for the synthesis of
barrier functions is required with guarantees on safety of the
system, as formalized by the problem statement:

1, 2, . . . , p

D →

∈ {

≤

D

D

∈

i.

}

:

Problem Statement 1. Consider the afﬁne control robotic
.
system in (1) and the unsafe sets
}

1, 2, . . . , p

⊂ D

∈ {

i
C

, i

Given the nominal feedback control policy k :
LiDAR measurements zt obtained at any time instant t
≥
0, formulate a barrier function synthesis framework which
either

D →

R and

1) Learns the unsafe region (cid:83)p

i ofﬂine given a dataset

of safe and unsafe samples from the domain, or
2) Learns the unsafe region online using instantaneous
measurements zt, as the system traverses the domain.

i=1C

IV. CONTROL BARRIER FUNCTION SYNTHESIS
FRAMEWORK

This section describes the methodology for obtaining
the training dataset, the control barrier function synthesis
framework, and two QP based approaches which utilize the
synthesized barrier function to guarantee safety.

A. Support Vector Machines

T
∈

The learning approach to be used for barrier function
speciﬁcation via-a-vis the unsafe regions will be support
vector machine (SVMs), namely kernel SVMs [10]. Suppose
is provided
a dataset
where xi
=
1, 1

=
(x1, y1), (x2, y2), . . . , (xN , yN )
}
{
Rn is an n dimensional vector and y
∈ Y
is a label associated with the vector xi for all i

∈
}
{−
. Using the dataset, the linear SVM algorithm
1, 2, . . . , N
}
{
determines an afﬁne decision boundary function (cid:98)f (wT x+b),
Rn are coefﬁcients
Rn is a training sample, w
where x
∈
R is a bias term, which translates the sample x
and b
that belongs to one of the
into a corresponding label y
two classes i.e. +1 or
1. When the data is not separable
by a hyperplane in the native space, a non-linear mapping
transforming the data into a higher dimensional space with
better separability properties may be used. This paper makes
use of such a mapping, via a kernel function, to facilitate
separation of unsafe obstacle regions from safe regions.

∈ Y

−

∈

∈

D

Since the domain

consists of states which are either
safe or unsafe, their separation can be cast as a binary SVM
classiﬁcation problem. However, it is imperative that unsafe
states be classiﬁed as unsafe, whereas all the safe states need
not strictly be classiﬁed as safe. To that end, we consider the
non-linear, biased-penalty SVM optimization problem [17]:

minimize
w

1
2 ||

w

2 + C +
2
||

N
(cid:88)

ξi + C −

N
(cid:88)

ξj

j|yj =−1

s.t

yi
ξi

(wφ(xi) + b)
0, for all i

ξi
1, 2, . . . , N

−

·

≥

i|yi=+1
1

≥

∈ {

,

(4)

}

where C +, C − > 0 are constants penalizing misclassiﬁcation
of the positive and negative samples, and φ : Rn
Rd is
a non-linear mapping into a higher dimensional space. In
practice, the dual of the above optimization problem is solved
by using a kernel function kφ to bypass the need to explicitly
deﬁne φ [10]. We use the Gaussian kernel,

→

kφ(xi, xj) = exp

(cid:18)

xi

(cid:107)

xj

−
σ2

−

(cid:19)

2
(cid:107)

,

(5)

where σ > 0 is the bandwidth of the kernel (and is a hyper
parameter).

Observe that in (4) there are two separate costs for the
positive and negative classes. Unequal costs permit a greater
bias towards correctly classifying one class over the other.
In particular, having C − =
> C + > 1 induces
∞
a hard margin classiﬁcation for the unsafe states and allows
for some misclassiﬁcation for the safe states. This outcome
is captured by the so called cost matrix (M ) of the form

and

∞

Estimated

True

Safe
Unsafe

Safe Unsafe

0
C −

C +
0

Each entry [M ]ij of the matrix represents the cost of clas-
sifying a sample as label j when it truly belongs to label i.
The penalty for classifying a truly safe (or unsafe) state as
safe (or unsafe) is zero. It is undesirable to classify a truly
unsafe state as safe, motivating a high penalty for C −. Since
safe states being classiﬁed as unsafe do not compromise
safety, the penalty C + may be smaller. The optimization
problem (4) provides compliance (in favor of safety) to
measurement errors and noise in the sensor data which can
affect the generated decision boundary. The mixed hard/soft
margin classiﬁcation is what supports the theoretical safety
guarantees of the system as discussed in the following
subsections.

B. Training Dataset Generation

This section details the training data generation process
suited to binary SVM classiﬁcation per (4). A pictorial
example for obtaining the training data from a LiDAR sensor
at a particular time instant is shown in Fig. 1. Below we
provide a detailed explanation for generating the dataset.

× D →

Generating meaningful data for the kernel SVM from
the LiDAR sensor requires converting the scalar variables
into world Cartesian coordinates by means of a laser scan
transform g : R
R2, whose main input is the
laser scan measurements in polar coordinates and the current
robot state (for mapping from the robot frame to the world
frame). Assume that if the sensor detects an unsafe region,
then the output from the sensor is a ﬁnite depth reading,
else it is inﬁnite. In particular, given a measurement vector
zt = (cid:2)z1
RN at time t with N samples,
. . .
to be the index set of the
deﬁne
=
ﬁnite scan measurements. Deﬁne
t; xt)
i∈F {
}
− represents points on the
as the set of unsafe samples.
boundary of the unsafe set detected by the sensor which is
− =
used to populate a dataset of negative labeled samples
(cid:83)
. To obtain the positive samples from
t; xt),
− is projected radially
the environment, each g(zi
t; xt)
backwards along the line segment joining the state of the
robot x(t) and the point g(zi
R>0. Deﬁne

t; xt), by a ﬁnite distance d

zN
t
∈
1, . . . , N
{

− = (cid:83)

F ⊂ I

i∈F {

(g(zi

1)
}

g(zi

∈ O

z2
t

(cid:3)T

O

O

−

∈

T

}

t

t = g(zi
(cid:98)zi
1, 2, . . . , N

t −

d; xt)

∈

R2

∈ {

where d > 0 is the ﬁnite offset dis-
for all i
i∈F {(cid:98)zi
tance. Deﬁne the set of positive samples as
,
t}
with the dataset for positive labeled samples constructed
. Collecting the set of positive
as
t, +1)
}

+ = (cid:83)

+ = (cid:83)

i∈F {

((cid:98)zi

O

T

}

(6)

class i.e., safe or unsafe. The posterior probabilities obtained
from the model are then converted into margin scores which
deﬁne a signed level-set function and provide the barrier
function we seek. The barrier function approximator is thus
a two hidden layer Gaussian kernel neural network. This
entire procedure is summarized in Algorithm 2. By virtue
of the methodology used to generate the training data in
Algorithm 1, and the biased-penalty hard margin SVM
optimization problem (4), the synthesized barrier function
correctly classiﬁes the unsafe samples. This is formalized in
Proposition 1.

Proposition 1. Given a training dataset
obtained from
Algorithm 1, if Algorithm 2 is used to synthesize the barrier
− are such that (cid:98)h(x) <
function (cid:98)h, then the unsafe samples
−.
0 for all x

O

T

∈ O

T

O

, we have that the set

Proof. By the method presented in Algorithm 1 to generate
− consists
the training dataset
of points on the boundary of the unsafe set. From the
kernel-SVM approach used in Algorithm 2, a function (cid:98)h
is generated which classiﬁes the safe and unsafe samples.
Since the optimization problem (4) is a hard margin SVM
for the unsafe samples and RBF kernels have universal
function approximation capabilities (Theorem 2, [18]), we
− and thus the
can guarantee that (cid:98)h(x) < 0 for all x
(cid:4)
proposition follows.

∈ O

Algorithm 2: Kernel-SVM based Barrier Function Syn-
thesis
Input: Training Dataset
Output: Estimated Barrier Function (cid:98)h

T

1 function BarrierEstimator(
T
Map samples in
2

)

HS

←

←

to Hilbert space
T
Train kernel SVM classiﬁer (4) using

T
Cl
(cid:98)h
←
ﬁrst Gaussian kernel layer mapping
return (cid:98)h

Recover signed distance function from Cl and

HS

T

Fig. 1: A particular instantiation of a training dataset obtained
from measurements from a LiDAR sensor for a given unsafe
set. The red points indicate unsafe samples which represent
the boundary of the unsafe set whereas the green points
indicate the safe samples obtained by the transformation
dictated by equation (6). The red dashed lines indicate the
LiDAR rays emanating from the sensor onboard the robot.

+

=

and negative labeled samples generates the training dataset
contains all unsafe
T
samples and corresponding safe samples for training the
SVM classiﬁer. The procedure is summarized in Algorithm 1.

−. The training dataset

∪ T

T

T

Algorithm 1: Training Dataset Generator
Input: Laser Scan Measurement zt and Robot State xt
Output: Training Dataset

1 function TrainingDataGenerator(zt)
2

Identify

T

− = (cid:83)

F ⊂ {

(g(zi

1, . . . , N
t; xt),

}
1)
−

}

3

4

5

6

7

T
t = g(zi
(cid:98)zi
+ = (cid:83)
T

i∈F{
t −
i∈F{
−

T ← T
return

T

∪ T

d; xt),
i
∀
((cid:98)zi
t, +1)
}

+

∈ F

3

4

5

C. Barrier Function Synthesis with Kernel-SVMs

D. Ofﬂine Barrier Function Synthesis & Control

D

To improve the ability to capture unsafe region boundaries,
the point data is transformed by a ﬁxed set of Gaussian
kernels of the form (5) using a sparse set of grid points over
the domain
. This provides a ﬁrst kernel machine layer
that behaves like an approximate Hilbert space occupancy
map [11] and roughly captures the different safe and unsafe
regions of the state space. Passing the vector output of this
Hilbert space to the kernel SVM generates a second layer that
can reﬁne the boundary to better separate the safe and unsafe
regions. The solution to the hard/soft margin kernel SVM in
(4) deﬁnes the parameters for a non-linear decision boundary
separating the training data (the output layer of the full
classiﬁcation network). Evaluating the two-layer classiﬁer
outputs a posterior probability describing
model for x
∈ D
belongs to a particular
the likelihood that the sample x

∈ D

Here, we discuss the ofﬂine approach to CBF synthesis
using Algorithm 1 and Algorithm 2. Per the problem setup
in Section III, we consider the workspace consisting of p
unsafe regions characterized by ZCBFs hi, i
.
}
We assume that there exists an oracle which provides a set
of unsafe samples corresponding to the boundary of each
in the state space by means of
unsafe sets i
a LiDAR sensor which are dense enough to cover the true
boundary of the obstacles. For example, this oracle can be a
“mapping” robot that navigates the domain and gathers data
about the safe and unsafe regions.

1, 2, . . . , p

1, 2, . . . , p

∈ {

∈ {

}

Once Algorithm 1 generates the requisite training data
using the oracle, executing Algorithm 2 leads to a ZBF
; R), whose
estimate. Note that a single ZCBF (cid:98)h
zero level-set captures the boundaries between safe and

C 1(

D

∈

C={x2D|h(x)0}<latexit sha1_base64="uPv0/a17EWlOTMjbHyc344FtLEY=">AAACH3icbZDLSgMxFIYzXmu9VV26OViEuikzIupGKNaFywr2Ap1SMmnahmYyY5KRlmHexI2v4saFIuKub2OmLaKtPwQ+/nMOOef3Qs6Utu2xtbS8srq2ntnIbm5t7+zm9vZrKogkoVUS8EA2PKwoZ4JWNdOcNkJJse9xWvcG5bRef6RSsUDc61FIWz7uCdZlBGtjtXPnro91n2AelxO4AjeGIbhMwI99kxhmHegXhifgcvoANrhJO5e3i/ZEsAjODPJopko79+V2AhL5VGjCsVJNxw51K8ZSM8JpknUjRUNMBrhHmwYF9qlqxZP7Ejg2Tge6gTRPaJi4vydi7Cs18j3Tma6t5mup+V+tGenuZStmIow0FWT6UTfioANIw4IOk5RoPjKAiWRmVyB9LDHRJtKsCcGZP3kRaqdFx/DdWb50PYsjgw7RESogB12gErpFFVRFBD2hF/SG3q1n69X6sD6nrUvWbOYA/ZE1/gYVC6EX</latexit><latexit sha1_base64="uPv0/a17EWlOTMjbHyc344FtLEY=">AAACH3icbZDLSgMxFIYzXmu9VV26OViEuikzIupGKNaFywr2Ap1SMmnahmYyY5KRlmHexI2v4saFIuKub2OmLaKtPwQ+/nMOOef3Qs6Utu2xtbS8srq2ntnIbm5t7+zm9vZrKogkoVUS8EA2PKwoZ4JWNdOcNkJJse9xWvcG5bRef6RSsUDc61FIWz7uCdZlBGtjtXPnro91n2AelxO4AjeGIbhMwI99kxhmHegXhifgcvoANrhJO5e3i/ZEsAjODPJopko79+V2AhL5VGjCsVJNxw51K8ZSM8JpknUjRUNMBrhHmwYF9qlqxZP7Ejg2Tge6gTRPaJi4vydi7Cs18j3Tma6t5mup+V+tGenuZStmIow0FWT6UTfioANIw4IOk5RoPjKAiWRmVyB9LDHRJtKsCcGZP3kRaqdFx/DdWb50PYsjgw7RESogB12gErpFFVRFBD2hF/SG3q1n69X6sD6nrUvWbOYA/ZE1/gYVC6EX</latexit><latexit sha1_base64="uPv0/a17EWlOTMjbHyc344FtLEY=">AAACH3icbZDLSgMxFIYzXmu9VV26OViEuikzIupGKNaFywr2Ap1SMmnahmYyY5KRlmHexI2v4saFIuKub2OmLaKtPwQ+/nMOOef3Qs6Utu2xtbS8srq2ntnIbm5t7+zm9vZrKogkoVUS8EA2PKwoZ4JWNdOcNkJJse9xWvcG5bRef6RSsUDc61FIWz7uCdZlBGtjtXPnro91n2AelxO4AjeGIbhMwI99kxhmHegXhifgcvoANrhJO5e3i/ZEsAjODPJopko79+V2AhL5VGjCsVJNxw51K8ZSM8JpknUjRUNMBrhHmwYF9qlqxZP7Ejg2Tge6gTRPaJi4vydi7Cs18j3Tma6t5mup+V+tGenuZStmIow0FWT6UTfioANIw4IOk5RoPjKAiWRmVyB9LDHRJtKsCcGZP3kRaqdFx/DdWb50PYsjgw7RESogB12gErpFFVRFBD2hF/SG3q1n69X6sD6nrUvWbOYA/ZE1/gYVC6EX</latexit><latexit sha1_base64="uPv0/a17EWlOTMjbHyc344FtLEY=">AAACH3icbZDLSgMxFIYzXmu9VV26OViEuikzIupGKNaFywr2Ap1SMmnahmYyY5KRlmHexI2v4saFIuKub2OmLaKtPwQ+/nMOOef3Qs6Utu2xtbS8srq2ntnIbm5t7+zm9vZrKogkoVUS8EA2PKwoZ4JWNdOcNkJJse9xWvcG5bRef6RSsUDc61FIWz7uCdZlBGtjtXPnro91n2AelxO4AjeGIbhMwI99kxhmHegXhifgcvoANrhJO5e3i/ZEsAjODPJopko79+V2AhL5VGjCsVJNxw51K8ZSM8JpknUjRUNMBrhHmwYF9qlqxZP7Ejg2Tge6gTRPaJi4vydi7Cs18j3Tma6t5mup+V+tGenuZStmIow0FWT6UTfioANIw4IOk5RoPjKAiWRmVyB9LDHRJtKsCcGZP3kRaqdFx/DdWb50PYsjgw7RESogB12gErpFFVRFBD2hF/SG3q1n69X6sD6nrUvWbOYA/ZE1/gYVC6EX</latexit>UnsafeSample<latexit sha1_base64="oaG/Sl3z9UIUzqX9z+liBy9zRoU=">AAAB/XicbZDLSgMxFIYz9VbrrV52boJFcFVmRNBl0Y3LivYCbSmZ9EwbmskMyRmxDsVXceNCEbe+hzvfxrSdhbYeCHz8/znJye/HUhh03W8nt7S8srqWXy9sbG5t7xR39+omSjSHGo9kpJs+MyCFghoKlNCMNbDQl9Dwh1cTv3EP2ohI3eEohk7I+koEgjO0Urd40EZ4wLSmDAuA3rIwljDuFktu2Z0WXQQvgxLJqtotfrV7EU9CUMglM6bluTF2UqZRcHtfoZ0YiBkfsj60LCoWgumk0+3H9NgqPRpE2h6FdKr+nkhZaMwo9G1nyHBg5r2J+J/XSjC46KRCxQmC4rOHgkRSjOgkCtoTGjjKkQXGtbC7Uj5gmnG0gRVsCN78lxehflr2LN+clSqXWRx5ckiOyAnxyDmpkGtSJTXCySN5Jq/kzXlyXpx352PWmnOymX3yp5zPH8/jlXA=</latexit><latexit sha1_base64="oaG/Sl3z9UIUzqX9z+liBy9zRoU=">AAAB/XicbZDLSgMxFIYz9VbrrV52boJFcFVmRNBl0Y3LivYCbSmZ9EwbmskMyRmxDsVXceNCEbe+hzvfxrSdhbYeCHz8/znJye/HUhh03W8nt7S8srqWXy9sbG5t7xR39+omSjSHGo9kpJs+MyCFghoKlNCMNbDQl9Dwh1cTv3EP2ohI3eEohk7I+koEgjO0Urd40EZ4wLSmDAuA3rIwljDuFktu2Z0WXQQvgxLJqtotfrV7EU9CUMglM6bluTF2UqZRcHtfoZ0YiBkfsj60LCoWgumk0+3H9NgqPRpE2h6FdKr+nkhZaMwo9G1nyHBg5r2J+J/XSjC46KRCxQmC4rOHgkRSjOgkCtoTGjjKkQXGtbC7Uj5gmnG0gRVsCN78lxehflr2LN+clSqXWRx5ckiOyAnxyDmpkGtSJTXCySN5Jq/kzXlyXpx352PWmnOymX3yp5zPH8/jlXA=</latexit><latexit sha1_base64="oaG/Sl3z9UIUzqX9z+liBy9zRoU=">AAAB/XicbZDLSgMxFIYz9VbrrV52boJFcFVmRNBl0Y3LivYCbSmZ9EwbmskMyRmxDsVXceNCEbe+hzvfxrSdhbYeCHz8/znJye/HUhh03W8nt7S8srqWXy9sbG5t7xR39+omSjSHGo9kpJs+MyCFghoKlNCMNbDQl9Dwh1cTv3EP2ohI3eEohk7I+koEgjO0Urd40EZ4wLSmDAuA3rIwljDuFktu2Z0WXQQvgxLJqtotfrV7EU9CUMglM6bluTF2UqZRcHtfoZ0YiBkfsj60LCoWgumk0+3H9NgqPRpE2h6FdKr+nkhZaMwo9G1nyHBg5r2J+J/XSjC46KRCxQmC4rOHgkRSjOgkCtoTGjjKkQXGtbC7Uj5gmnG0gRVsCN78lxehflr2LN+clSqXWRx5ckiOyAnxyDmpkGtSJTXCySN5Jq/kzXlyXpx352PWmnOymX3yp5zPH8/jlXA=</latexit><latexit sha1_base64="oaG/Sl3z9UIUzqX9z+liBy9zRoU=">AAAB/XicbZDLSgMxFIYz9VbrrV52boJFcFVmRNBl0Y3LivYCbSmZ9EwbmskMyRmxDsVXceNCEbe+hzvfxrSdhbYeCHz8/znJye/HUhh03W8nt7S8srqWXy9sbG5t7xR39+omSjSHGo9kpJs+MyCFghoKlNCMNbDQl9Dwh1cTv3EP2ohI3eEohk7I+koEgjO0Urd40EZ4wLSmDAuA3rIwljDuFktu2Z0WXQQvgxLJqtotfrV7EU9CUMglM6bluTF2UqZRcHtfoZ0YiBkfsj60LCoWgumk0+3H9NgqPRpE2h6FdKr+nkhZaMwo9G1nyHBg5r2J+J/XSjC46KRCxQmC4rOHgkRSjOgkCtoTGjjKkQXGtbC7Uj5gmnG0gRVsCN78lxehflr2LN+clSqXWRx5ckiOyAnxyDmpkGtSJTXCySN5Jq/kzXlyXpx352PWmnOymX3yp5zPH8/jlXA=</latexit>SafeSample<latexit sha1_base64="GTflzDNGpwfrHy3ScOjce+Kelco=">AAAB+3icbZDLSgMxFIYz9VbrbaxLN8EiuCozIuiy6MZlpfYC7VAy6Zk2NHMhOSMtQ1/FjQtF3Poi7nwb03YW2nog8PH/5yQnv59IodFxvq3CxubW9k5xt7S3f3B4ZB+XWzpOFYcmj2WsOj7TIEUETRQooZMoYKEvoe2P7+Z++wmUFnH0iNMEvJANIxEIztBIfbvcQ5hg1mAB0AYLEwmzvl1xqs6i6Dq4OVRIXvW+/dUbxDwNIUIumdZd10nQy5hCwc19pV6qIWF8zIbQNRixELSXLXaf0XOjDGgQK3MipAv190TGQq2noW86Q4YjverNxf+8borBjZeJKEkRIr58KEglxZjOg6ADoYCjnBpgXAmzK+UjphhHE1fJhOCufnkdWpdV1/DDVaV2m8dRJKfkjFwQl1yTGrknddIknEzIM3klb9bMerHerY9la8HKZ07In7I+fwAda5R5</latexit><latexit sha1_base64="GTflzDNGpwfrHy3ScOjce+Kelco=">AAAB+3icbZDLSgMxFIYz9VbrbaxLN8EiuCozIuiy6MZlpfYC7VAy6Zk2NHMhOSMtQ1/FjQtF3Poi7nwb03YW2nog8PH/5yQnv59IodFxvq3CxubW9k5xt7S3f3B4ZB+XWzpOFYcmj2WsOj7TIEUETRQooZMoYKEvoe2P7+Z++wmUFnH0iNMEvJANIxEIztBIfbvcQ5hg1mAB0AYLEwmzvl1xqs6i6Dq4OVRIXvW+/dUbxDwNIUIumdZd10nQy5hCwc19pV6qIWF8zIbQNRixELSXLXaf0XOjDGgQK3MipAv190TGQq2noW86Q4YjverNxf+8borBjZeJKEkRIr58KEglxZjOg6ADoYCjnBpgXAmzK+UjphhHE1fJhOCufnkdWpdV1/DDVaV2m8dRJKfkjFwQl1yTGrknddIknEzIM3klb9bMerHerY9la8HKZ07In7I+fwAda5R5</latexit><latexit sha1_base64="GTflzDNGpwfrHy3ScOjce+Kelco=">AAAB+3icbZDLSgMxFIYz9VbrbaxLN8EiuCozIuiy6MZlpfYC7VAy6Zk2NHMhOSMtQ1/FjQtF3Poi7nwb03YW2nog8PH/5yQnv59IodFxvq3CxubW9k5xt7S3f3B4ZB+XWzpOFYcmj2WsOj7TIEUETRQooZMoYKEvoe2P7+Z++wmUFnH0iNMEvJANIxEIztBIfbvcQ5hg1mAB0AYLEwmzvl1xqs6i6Dq4OVRIXvW+/dUbxDwNIUIumdZd10nQy5hCwc19pV6qIWF8zIbQNRixELSXLXaf0XOjDGgQK3MipAv190TGQq2noW86Q4YjverNxf+8borBjZeJKEkRIr58KEglxZjOg6ADoYCjnBpgXAmzK+UjphhHE1fJhOCufnkdWpdV1/DDVaV2m8dRJKfkjFwQl1yTGrknddIknEzIM3klb9bMerHerY9la8HKZ07In7I+fwAda5R5</latexit><latexit sha1_base64="GTflzDNGpwfrHy3ScOjce+Kelco=">AAAB+3icbZDLSgMxFIYz9VbrbaxLN8EiuCozIuiy6MZlpfYC7VAy6Zk2NHMhOSMtQ1/FjQtF3Poi7nwb03YW2nog8PH/5yQnv59IodFxvq3CxubW9k5xt7S3f3B4ZB+XWzpOFYcmj2WsOj7TIEUETRQooZMoYKEvoe2P7+Z++wmUFnH0iNMEvJANIxEIztBIfbvcQ5hg1mAB0AYLEwmzvl1xqs6i6Dq4OVRIXvW+/dUbxDwNIUIumdZd10nQy5hCwc19pV6qIWF8zIbQNRixELSXLXaf0XOjDGgQK3MipAv190TGQq2noW86Q4YjverNxf+8borBjZeJKEkRIr58KEglxZjOg6ADoYCjnBpgXAmzK+UjphhHE1fJhOCufnkdWpdV1/DDVaV2m8dRJKfkjFwQl1yTGrknddIknEzIM3klb9bMerHerY9la8HKZ07In7I+fwAda5R5</latexit>LiDARRays<latexit sha1_base64="8SuBVq8W5QfZpxv4ezNDsu+cQhg=">AAAB+nicbZC7TsMwFIadcivllsLIYlEhMVUJQoKxXAYGhlLRi9RGleM6rVXHiewToAp9FBYGEGLlSdh4G9w2A7T8kqVP/zlH5/j3Y8E1OM63lVtaXlldy68XNja3tnfs4m5DR4mirE4jEamWTzQTXLI6cBCsFStGQl+wpj+8nNSb90xpHsk7GMXMC0lf8oBTAsbq2sUOsEdIb/jVeQ3XyEiPu3bJKTtT4UVwMyihTNWu/dXpRTQJmQQqiNZt14nBS4kCTgUbFzqJZjGhQ9JnbYOShEx76fT0MT40Tg8HkTJPAp66vydSEmo9Cn3TGRIY6PnaxPyv1k4gOPNSLuMEmKSzRUEiMER4kgPuccUoiJEBQhU3t2I6IIpQMGkVTAju/JcXoXFcdg3fnpQqF1kcebSPDtARctEpqqBrVEV1RNEDekav6M16sl6sd+tj1pqzspk99EfW5w/bkZO5</latexit><latexit sha1_base64="8SuBVq8W5QfZpxv4ezNDsu+cQhg=">AAAB+nicbZC7TsMwFIadcivllsLIYlEhMVUJQoKxXAYGhlLRi9RGleM6rVXHiewToAp9FBYGEGLlSdh4G9w2A7T8kqVP/zlH5/j3Y8E1OM63lVtaXlldy68XNja3tnfs4m5DR4mirE4jEamWTzQTXLI6cBCsFStGQl+wpj+8nNSb90xpHsk7GMXMC0lf8oBTAsbq2sUOsEdIb/jVeQ3XyEiPu3bJKTtT4UVwMyihTNWu/dXpRTQJmQQqiNZt14nBS4kCTgUbFzqJZjGhQ9JnbYOShEx76fT0MT40Tg8HkTJPAp66vydSEmo9Cn3TGRIY6PnaxPyv1k4gOPNSLuMEmKSzRUEiMER4kgPuccUoiJEBQhU3t2I6IIpQMGkVTAju/JcXoXFcdg3fnpQqF1kcebSPDtARctEpqqBrVEV1RNEDekav6M16sl6sd+tj1pqzspk99EfW5w/bkZO5</latexit><latexit sha1_base64="8SuBVq8W5QfZpxv4ezNDsu+cQhg=">AAAB+nicbZC7TsMwFIadcivllsLIYlEhMVUJQoKxXAYGhlLRi9RGleM6rVXHiewToAp9FBYGEGLlSdh4G9w2A7T8kqVP/zlH5/j3Y8E1OM63lVtaXlldy68XNja3tnfs4m5DR4mirE4jEamWTzQTXLI6cBCsFStGQl+wpj+8nNSb90xpHsk7GMXMC0lf8oBTAsbq2sUOsEdIb/jVeQ3XyEiPu3bJKTtT4UVwMyihTNWu/dXpRTQJmQQqiNZt14nBS4kCTgUbFzqJZjGhQ9JnbYOShEx76fT0MT40Tg8HkTJPAp66vydSEmo9Cn3TGRIY6PnaxPyv1k4gOPNSLuMEmKSzRUEiMER4kgPuccUoiJEBQhU3t2I6IIpQMGkVTAju/JcXoXFcdg3fnpQqF1kcebSPDtARctEpqqBrVEV1RNEDekav6M16sl6sd+tj1pqzspk99EfW5w/bkZO5</latexit><latexit sha1_base64="8SuBVq8W5QfZpxv4ezNDsu+cQhg=">AAAB+nicbZC7TsMwFIadcivllsLIYlEhMVUJQoKxXAYGhlLRi9RGleM6rVXHiewToAp9FBYGEGLlSdh4G9w2A7T8kqVP/zlH5/j3Y8E1OM63lVtaXlldy68XNja3tnfs4m5DR4mirE4jEamWTzQTXLI6cBCsFStGQl+wpj+8nNSb90xpHsk7GMXMC0lf8oBTAsbq2sUOsEdIb/jVeQ3XyEiPu3bJKTtT4UVwMyihTNWu/dXpRTQJmQQqiNZt14nBS4kCTgUbFzqJZjGhQ9JnbYOShEx76fT0MT40Tg8HkTJPAp66vydSEmo9Cn3TGRIY6PnaxPyv1k4gOPNSLuMEmKSzRUEiMER4kgPuccUoiJEBQhU3t2I6IIpQMGkVTAju/JcXoXFcdg3fnpQqF1kcebSPDtARctEpqqBrVEV1RNEDekav6M16sl6sd+tj1pqzspk99EfW5w/bkZO5</latexit>Robot<latexit sha1_base64="fqrrt5W+L/tf/zfRbbrl+IjHEZw=">AAAB83icbZBNS8NAEIY39avWr6pHL4tF8FQSEfRY9OKxiq2FJpTNdtIu3WTD7kQsoX/DiwdFvPpnvPlv3LY5aOsLCw/vzDCzb5hKYdB1v53Syura+kZ5s7K1vbO7V90/aBuVaQ4trqTSnZAZkCKBFgqU0Ek1sDiU8BCOrqf1h0fQRqjkHscpBDEbJCISnKG1fB/hCfM7FSqc9Ko1t+7ORJfBK6BGCjV71S+/r3gWQ4JcMmO6nptikDONgkuYVPzMQMr4iA2gazFhMZggn908oSfW6dNIafsSpDP390TOYmPGcWg7Y4ZDs1ibmv/VuhlGl0EukjRDSPh8UZRJiopOA6B9oYGjHFtgXAt7K+VDphlHG1PFhuAtfnkZ2md1z/Ltea1xVcRRJkfkmJwSj1yQBrkhTdIinKTkmbySNydzXpx352PeWnKKmUPyR87nD6W9khE=</latexit><latexit sha1_base64="fqrrt5W+L/tf/zfRbbrl+IjHEZw=">AAAB83icbZBNS8NAEIY39avWr6pHL4tF8FQSEfRY9OKxiq2FJpTNdtIu3WTD7kQsoX/DiwdFvPpnvPlv3LY5aOsLCw/vzDCzb5hKYdB1v53Syura+kZ5s7K1vbO7V90/aBuVaQ4trqTSnZAZkCKBFgqU0Ek1sDiU8BCOrqf1h0fQRqjkHscpBDEbJCISnKG1fB/hCfM7FSqc9Ko1t+7ORJfBK6BGCjV71S+/r3gWQ4JcMmO6nptikDONgkuYVPzMQMr4iA2gazFhMZggn908oSfW6dNIafsSpDP390TOYmPGcWg7Y4ZDs1ibmv/VuhlGl0EukjRDSPh8UZRJiopOA6B9oYGjHFtgXAt7K+VDphlHG1PFhuAtfnkZ2md1z/Ltea1xVcRRJkfkmJwSj1yQBrkhTdIinKTkmbySNydzXpx352PeWnKKmUPyR87nD6W9khE=</latexit><latexit sha1_base64="fqrrt5W+L/tf/zfRbbrl+IjHEZw=">AAAB83icbZBNS8NAEIY39avWr6pHL4tF8FQSEfRY9OKxiq2FJpTNdtIu3WTD7kQsoX/DiwdFvPpnvPlv3LY5aOsLCw/vzDCzb5hKYdB1v53Syura+kZ5s7K1vbO7V90/aBuVaQ4trqTSnZAZkCKBFgqU0Ek1sDiU8BCOrqf1h0fQRqjkHscpBDEbJCISnKG1fB/hCfM7FSqc9Ko1t+7ORJfBK6BGCjV71S+/r3gWQ4JcMmO6nptikDONgkuYVPzMQMr4iA2gazFhMZggn908oSfW6dNIafsSpDP390TOYmPGcWg7Y4ZDs1ibmv/VuhlGl0EukjRDSPh8UZRJiopOA6B9oYGjHFtgXAt7K+VDphlHG1PFhuAtfnkZ2md1z/Ltea1xVcRRJkfkmJwSj1yQBrkhTdIinKTkmbySNydzXpx352PeWnKKmUPyR87nD6W9khE=</latexit><latexit sha1_base64="fqrrt5W+L/tf/zfRbbrl+IjHEZw=">AAAB83icbZBNS8NAEIY39avWr6pHL4tF8FQSEfRY9OKxiq2FJpTNdtIu3WTD7kQsoX/DiwdFvPpnvPlv3LY5aOsLCw/vzDCzb5hKYdB1v53Syura+kZ5s7K1vbO7V90/aBuVaQ4trqTSnZAZkCKBFgqU0Ek1sDiU8BCOrqf1h0fQRqjkHscpBDEbJCISnKG1fB/hCfM7FSqc9Ko1t+7ORJfBK6BGCjV71S+/r3gWQ4JcMmO6nptikDONgkuYVPzMQMr4iA2gazFhMZggn908oSfW6dNIafsSpDP390TOYmPGcWg7Y4ZDs1ibmv/VuhlGl0EukjRDSPh8UZRJiopOA6B9oYGjHFtgXAt7K+VDphlHG1PFhuAtfnkZ2md1z/Ltea1xVcRRJkfkmJwSj1yQBrkhTdIinKTkmbySNydzXpx352PeWnKKmUPyR87nD6W9khE=</latexit>UnsafeSet<latexit sha1_base64="/PReYWI+RsaP7m8rZPtHU6Ncbq8=">AAAB+nicbZDLSgMxFIYz9VbrbapLN8EiuCozIuiy6MZlRXuBtpRMeqYNzWSG5Ixaxj6KGxeKuPVJ3Pk2ppeFtv4Q+PjPOZyTP0ikMOh5305uZXVtfSO/Wdja3tndc4v7dROnmkONxzLWzYAZkEJBDQVKaCYaWBRIaATDq0m9cQ/aiFjd4SiBTsT6SoSCM7RW1y22ER4xqynDQqC3gOOuW/LK3lR0Gfw5lMhc1a771e7FPI1AIZfMmJbvJdjJmEbBJYwL7dRAwviQ9aFlUbEITCebnj6mx9bp0TDW9imkU/f3RMYiY0ZRYDsjhgOzWJuY/9VaKYYXnUyoJEVQfLYoTCXFmE5yoD2hgaMcWWBcC3sr5QOmGUebVsGG4C9+eRnqp2Xf8s1ZqXI5jyNPDskROSE+OScVck2qpEY4eSDP5JW8OU/Oi/PufMxac8585oD8kfP5A3VDlBw=</latexit><latexit sha1_base64="/PReYWI+RsaP7m8rZPtHU6Ncbq8=">AAAB+nicbZDLSgMxFIYz9VbrbapLN8EiuCozIuiy6MZlRXuBtpRMeqYNzWSG5Ixaxj6KGxeKuPVJ3Pk2ppeFtv4Q+PjPOZyTP0ikMOh5305uZXVtfSO/Wdja3tndc4v7dROnmkONxzLWzYAZkEJBDQVKaCYaWBRIaATDq0m9cQ/aiFjd4SiBTsT6SoSCM7RW1y22ER4xqynDQqC3gOOuW/LK3lR0Gfw5lMhc1a771e7FPI1AIZfMmJbvJdjJmEbBJYwL7dRAwviQ9aFlUbEITCebnj6mx9bp0TDW9imkU/f3RMYiY0ZRYDsjhgOzWJuY/9VaKYYXnUyoJEVQfLYoTCXFmE5yoD2hgaMcWWBcC3sr5QOmGUebVsGG4C9+eRnqp2Xf8s1ZqXI5jyNPDskROSE+OScVck2qpEY4eSDP5JW8OU/Oi/PufMxac8585oD8kfP5A3VDlBw=</latexit><latexit sha1_base64="/PReYWI+RsaP7m8rZPtHU6Ncbq8=">AAAB+nicbZDLSgMxFIYz9VbrbapLN8EiuCozIuiy6MZlRXuBtpRMeqYNzWSG5Ixaxj6KGxeKuPVJ3Pk2ppeFtv4Q+PjPOZyTP0ikMOh5305uZXVtfSO/Wdja3tndc4v7dROnmkONxzLWzYAZkEJBDQVKaCYaWBRIaATDq0m9cQ/aiFjd4SiBTsT6SoSCM7RW1y22ER4xqynDQqC3gOOuW/LK3lR0Gfw5lMhc1a771e7FPI1AIZfMmJbvJdjJmEbBJYwL7dRAwviQ9aFlUbEITCebnj6mx9bp0TDW9imkU/f3RMYiY0ZRYDsjhgOzWJuY/9VaKYYXnUyoJEVQfLYoTCXFmE5yoD2hgaMcWWBcC3sr5QOmGUebVsGG4C9+eRnqp2Xf8s1ZqXI5jyNPDskROSE+OScVck2qpEY4eSDP5JW8OU/Oi/PufMxac8585oD8kfP5A3VDlBw=</latexit><latexit sha1_base64="/PReYWI+RsaP7m8rZPtHU6Ncbq8=">AAAB+nicbZDLSgMxFIYz9VbrbapLN8EiuCozIuiy6MZlRXuBtpRMeqYNzWSG5Ixaxj6KGxeKuPVJ3Pk2ppeFtv4Q+PjPOZyTP0ikMOh5305uZXVtfSO/Wdja3tndc4v7dROnmkONxzLWzYAZkEJBDQVKaCYaWBRIaATDq0m9cQ/aiFjd4SiBTsT6SoSCM7RW1y22ER4xqynDQqC3gOOuW/LK3lR0Gfw5lMhc1a771e7FPI1AIZfMmJbvJdjJmEbBJYwL7dRAwviQ9aFlUbEITCebnj6mx9bp0TDW9imkU/f3RMYiY0ZRYDsjhgOzWJuY/9VaKYYXnUyoJEVQfLYoTCXFmE5yoD2hgaMcWWBcC3sr5QOmGUebVsGG4C9+eRnqp2Xf8s1ZqXI5jyNPDskROSE+OScVck2qpEY4eSDP5JW8OU/Oi/PufMxac8585oD8kfP5A3VDlBw=</latexit>unsafe regions, is obtained as opposed to p different ZCBFs
characterizing the unsafe sets. With the synthesized barrier
function (cid:98)h, we then implement a QP controller with (2) as
the constraint. Capturing all the unsafe sets with a single
function means that the QP involves only one constraint
which reduces the computational complexity involved in
computing the control input. The QP is solved, and the con-
trol is applied, until the system completes the speciﬁed task
associated to the nominal controller. The entire ofﬂine barrier
function synthesis and control methodology is formalized in
Algorithm 3. In the algorithm, the initial loop from t = 0
to t = T where T <
, indicates the time period when the
training data is gathered for generating the barrier function.

∞

Algorithm 3: Ofﬂine SVM-based QP controller
Input: Nominal controller k

1
T ← ∅
2 forall t
3

zt
t

∈
←
←

4

[0, T ] do
LaserScanMeasurement
TrainingDataGenerator(zt, xt)

T
T ← T ∪ T

t

5
6 ˆh
BarrierEstimator (
7 while Goal is not reached do
8

Solve the QP:

←

T

)

5

6

7

8

9

10

u∗(x) = argmin

u∈Rm ||

u

k(x)

2
2
||

−

s.t Lf (cid:98)h(x) + Lg(cid:98)h(x)u(x)

α((cid:98)h(x))

≥ −

11

u∗(x)

u
Solve (1), update state x(t)

←

9

function of the QP is quasi-convex in u, the constraints are
quasi-convex in u and the nominal policy k is continuous,
from Proposition 8 in [19] we have that the generated control
u is continuous. Hence from Theorem 1 and by assumption
is
0
}
c
(cid:98)
S
∈
(cid:4)

S ⊂
≥
rendered forward invariant. That is, we have that x(t)
for all t

, we have that the set (cid:98)
(cid:98)
S
S

∈ D |

(cid:98)h(x)

x
{

c =

0.

≥

E. Online Barrier Function Synthesis & Control

Algorithm 4: Online SVM-based QP controller
Input: Aggregate Flag δ, Nominal controller k

T ← ∅

1
2 while Goal is not reached do
LaserScanMeasurement
3
TrainingDataGenerator(zt)

zt
t

4

←
←

T
if δ = 1 then

T ← T ∪ T

else

t

t
T ← T

ˆh
Solve the QP:

←

BarrierEstimator (

)

T

u∗(x) = argmin

u∈Rm ||

u

k(x)

2
2
||

−

s.t Lf (cid:98)h(x) + Lg(cid:98)h(x)u(x)

α((cid:98)h(x))

≥ −

u∗(x)

u
Solve (1), update state x(t)

←

Recall that the increment angle of the LiDAR sensor is
given by θres. Intuitively, as θres
0, the LiDAR sensor
captures the true nature of the boundary of the unsafe
region. Hence, using Proposition 1, we can guarantee that
Algorithm 2 synthesizes a barrier function whose level-sets
are over-approximations of the true unsafe regions. That is,
R as
denote (cid:98)S =
the unsafe region estimated by Algorithm 2. Then, we have

where (cid:98)S :

∈ D |

D →

(cid:98)h(x)

0
}

→

≤

x

{

p
(cid:83)
i=1{

x

that

, where
(cid:98)
S

S

=

S ⊂

∈ D |

hi(x)

0
}

≤

is the true

∈ {

1, 2, . . . , p

unsafe region characterized by the unknown barrier functions
. In practice, this statement holds
hi for all i
}
true for high resolution LiDAR sensors. The degree of over-
approximation depends on a number of factors which include
R>0 with which the positive samples
the distance d
are generated in Algorithm 1. Next, we provide a formal
guarantee that Algorithm 3 guarantees safety of the system.

∈

Theorem 2. Suppose
Algorithm 3 is used. Then given any x(0)
c =
x
(cid:98)
{
S
that x(t)

(cid:98)S and the controller from
c where
(cid:98)
S
, the robot trajectory is such

0
}
0.

S ⊂

∈

(cid:98)h(x)
∈ D |
c for all t
(cid:98)
S
∈

≥
≥

Proof. From Algorithm 3, the QP enforces the barrier func-
tion constraint (2) with (cid:98)h as the ZCBF. Since the cost

When access to the full set of unsafe samples from the
environment is not available, a real-time barrier function
synthesis method is preferable. Here, we describe an online
approach to synthesizing barrier functions, based on Algo-
rithm 4. For online ZCBF synthesis, the set of unsafe samples
covering the boundary of all the unsafe regions is not known
a priori. Hence, at time t = 0, the system is initialized
with no information regarding the state space, except the
nominal feedback control policy. At each time instant t,
the system obtains the depth measurement zt and generates
the training dataset
via Algorithm 1. Then, Algorithm 2
synthesizes a local barrier function. Implementing the QP
controller generates the control input at time instant t. In
the next time instant, the same procedure repeats and a new
barrier function is synthesized based on the updated sensor
measurements.

T

Two variations of the online barrier function synthesis
method can be implemented. In the ﬁrst method, the depth
sensor data for all previous time instances is deleted, and
the QP is solved with only the immediately sensed measure-
ments. The barrier function approximates the true safe region
only locally i.e., in a neighborhood around the state xt of
the robot. In the second method, samples from the previous
time instant are aggregated with the samples from the cur-
rent time instant, with Algorithm 2 implemented with the
incremented set. The two cases synthesize different barrier

(a)

(b)

Fig. 2: Trajectories generated for the robot in a ﬁve obstacle scenario. The robot must reach a goal region (red circle)
which is known a priori. Three different trajectories are shown- the ground truth trajectory (dashed green), the ofﬂine
kernel-SVM based controller trajectory (dotted blue), and the online kernel-SVM based controller trajectory (dash-dotted
purple). For the initial condition on the left, the trajectories show high correlation values (Rofﬂine = 0.9992, Ronline = 0.9777,
Rofﬂine-online = 0.9734) and small Fr´echet distance values (Fofﬂine = 0.0469, Fonline = 0.0822, Fofﬂine-online = 0.0853) which
indicate that the trajectories are highly similar to the ground truth trajectory. For the ﬁgure on the right, the trajectories once
again show high correlation values (Rofﬂine = 0.9627, Ronline = 0.8085, Rofﬂine-online = 0.8946) and small Fr´echet distance
values (Fofﬂine = 0.0665, Fonline = 0.0840, Fofﬂine-online = 0.1334). Observe that estimated unsafe set is an over-approximation
of the true unsafe sets, and hence Algorithm 3 guarantees collision free trajectories in the ofﬂine case, as per Theorem 2.

function at each time instant. For the data-aggregation case,
the estimate of the barrier improves as the number of samples
characterizing the unsafe regions increases. Advantages and
drawbacks exist for both approaches. In the data aggregation
case, one needs to continuously update the dataset with new
measurements and this exhaustive data collection process
can become computationally expensive unless one resorts to
efﬁcient ways to store data [20]. For the non data aggregation
case, computation is faster but the estimate of the barrier
function does not improve iteratively as the robot traverses
the domain. Both procedures are described in Algorithm 4.

x
{

r(x) =

Deﬁne the sensing range of the sensor as

|

r

x

x

∈

≤

−

→

∈ B

0
}

(cid:107) ≤

x
{

r(x)

r(x)

r(x) =

where (cid:98)h :

, where r
}

B
∈
R>0 is the sensing range
D | (cid:107)
of the robot. Similar to the discussion in the previous
subsection, it can be guaranteed that if θres
0, then locally,
Algorithm 2 synthesizes a barrier function whose level-set
over approximates the true unsafe region. That is, denote
R is the
(cid:98)h(x)
(cid:99)
D →
S
estimated ZCBF from Algorithm 2. Then, as θres
0, we
→
locally within the
have that

S
⊂
r(x), where

p
(cid:83)
i=1{
the true unsafe region. In the online case, a statement similar
to Theorem 2 cannot be made since the robot does not have
access to the full set of samples that characterize the entire
boundary of the unsafe set and hence, there is no guarantee
that globally in the domain the generated level-sets are over-
approximations of the true unsafe regions. However, since
the robot dynamics are locally Lipschitz continuous, safety
holds locally as seen in Fig 2.

r(x) for all x
(cid:98)
S
r(x) =

hi(x)

r(x)

∈ D

∈ B

ball

≤

is

B

S

x

}

0

|

V. EXPERIMENTAL RESULTS

This section describes and discusses simulation results
from a path planning perspective conducted on the “Simple
Two Dimensional Robot (STDR) simulator”1. Two environ-
ments were created for use in STDR. The ﬁrst environment
contains ﬁve ellipsoidal obstacles scattered throughout a 3.2
x 2 workspace domain. The second environment of the same
size contains more general obstacles whose shape cannot be
characterized easily by level-sets of closed-form polynomi-
als. In both cases, the robot has no a priori knowledge of
the environment and follows a nominal controller that drives
it towards a goal point. More formally, we consider a robot
R2 is the position
with dynamics ˙x = u, where x
R2 is the control input. The nominal
of the robot and u
is given by k(x) =
feedback control policy for all x
is a desired
δ
ﬁnal goal position for the robot. Informally, the robot must
follow k(x) as close as possible while avoiding the unknown
obstacles in the workspace. The robot must reach a goal
region which is deﬁned as
.
0.1
=
}
For the ﬁrst scenario, depicted in Fig. 2, we obtain ground
truth data using a grid-based solution, which is a common
approach to compute the true signed distance to the obstacles.
The signed distance function corresponds to the true barrier
function characterizing the obstacles.

(x−xgoal)
|(cid:107)x−xgoal|(cid:107) , where δ

R>0, and xgoal

∈ D | (cid:107)

∈ D ⊂

xgoal

∈ D

∈ D

(cid:107) ≤

−

∈

∈

G

x

x

{

·

A. Evaluation Metrics

Comparison of the trajectory outcomes for the different
implementations involves two evaluation metrics: the corre-

1http://wiki.ros.org/stdr_simulator

TABLE I: Correlation Coefﬁcients for Five Obstacle Sce-
nario (Values close to 1 indicate high correlation)

Case

1
2
3
4
5
6
7
8
9
10
Average

Ofﬂine SVM
vs Ground Truth
0.9992
0.9627
0.9997
0.9889
0.9954
0.9991
0.9800
0.9692
0.9880
0.9997
0.9881

Online SVM
vs Ground Truth
0.9777
0.8085
0.9709
0.9466
0.9442
0.9882
0.9865
0.7601
0.8718
0.9899
0.9244

Ofﬂine SVM
vs Online SVM
0.9734
0.8946
0.9694
0.9195
0.9447
0.9870
0.9811
0.5886
0.8665
0.9874
0.9112

TABLE II: Fr´echet Distance for Five Obstacle Scenario
(Smaller values indicate less mismatch between trajectories)

Case

1
2
3
4
5
6
7
8
9
10
Average

Ofﬂine SVM
vs Ground Truth
0.0469
0.0665
0.0276
0.0582
0.0660
0.0308
0.1197
0.0496
0.0578
0.0389
0.0562

Online SVM
vs Ground Truth
0.0822
0.0840
0.0446
0.1444
0.1563
0.0392
0.1296
0.0759
0.1368
0.0327
0.0925

Ofﬂine SVM
vs Online SVM
0.0853
0.1334
0.0468
0.1232
0.1341
0.0266
0.0479
0.0652
0.1119
0.0369
0.0811

ofﬂine kernel-SVM based barrier estimation approach as
discussed in Algorithm 3. The purple, dash-dotted trajectory
is generated using Algorithm 4 which is the online kernel-
SVM based barrier function estimation method. Observe that
in both the cases, the robots avoid the obstacle and follow
the nominal control policy as close as possible. In the second
scenario, we consider a situation where the obstacle shapes
are such that ﬁnding the closed form expressions for the
barrier functions is not straightforward. This setting is as
shown in Fig. 3. The pink, dashed trajectories are generated
using the ofﬂine kernel-SVM based barrier function approach
as discussed in Algorithm 3, whereas the green, dash-dotted
trajectories are generated using the online kernel-SVM based
barrier function method described in Algorithm 4. A video
of the simulations results is also provided2.

C. Discussion & Future Work

Table I compares the correlation coefﬁcient for both the
online and ofﬂine approaches against the ground truth tra-
jectory in the ﬁrst scenario. In addition, the online method
is also compared to the ofﬂine case. On average, we obtain
correlation coefﬁcient values > 0.90, which shows a high
similarity between the ground truth trajectory and the barrier
estimated trajectory. In particular, note that
the average
correlation between the ofﬂine kernel-SVM approach and the
ground truth trajectory is greater then 0.98. We then provide
Fr´echet distances which measures the degree of mismatch in
terms of the Euclidean distance between two 2D trajectories.
The smaller the Fr´echet distance, the smaller the mismatch

2https://youtu.be/-XiaR7QchtQ

Fig. 3: An implementation in the STDR simulator where the
robot has to navigate the unknown environment to reach a
goal region (red circle). Ofﬂine kernel-SVM based controller
and online kernel-SVM based controller trajectories for two
different initial conditions (green crosses) are shown. The
obstacles
3 are such that they cannot be easily
characterized by closed form polynomials, and hence, using
the traditional CBF formulation is difﬁcult. However, using
Algorithm 3 and Algorithm 4, we can generate trajectories
such that the robot remains safe.

2 and

O

O

O

1,

lation coefﬁcient (R) and the Fr´echet distance (F ). These
metrics capture both the evolutionary mismatch between
trajectories, as well as the Euclidean distance mismatch.
The combination of both these metrics provides a means to
evaluate the outcomes of the proposed algorithms.

1) Correlation Coefﬁcient: Informally, the correlation co-
efﬁcient between two trajectories captures the change in
one trajectory with respect to the other. That is, one can
obtain information regarding the ﬂow of one trajectory with
respect to the other. Typically, two trajectories are said to
be highly correlated if they have a correlation coefﬁcient
greater than 0.7 [21]. We make use of the correlation
coefﬁcient to develop an intuition regarding the nature of the
trajectories generated by the ofﬂine and online kernel-SVM
based approaches compared with the ground truth data.

Informally,

2) Fr´echet Distance:

the Fr´echet distance
provides a measure of the Euclidean distance mismatch
between two trajectories. While the correlation coefﬁcient
provides information regarding the ﬂow of two trajectories,
the Fr´echet distance provides an explicit degree of mismatch
between the two. A lower Fr´echet distance indicates less
mismatch between the two trajectories. In particular, F = 0
implies that the two trajectories are identical.

B. Implementation Results

We ﬁrst consider the ﬁve obstacle scenario shown in Fig. 2.
Two different initial conditions for the robot are considered.
Three different trajectories are plotted in each ﬁgure. The
green dashed trajectory indicates the ground truth trajectory
obtained when the barrier function for each obstacle is known
a priori. A QP of the form (3) is solved to generate this
trajectory. The blue, dotted trajectory is generated from the

between the two trajectories. Table II shows the Fr´echet
distances between trajectories for the ﬁve obstacle scenario.
Observe that on average, we obtain distances < 0.10 for
each case, which shows that the Euclidean distance mismatch
between the trajectories is small. A key inference from the
above data is that Rofﬂine is very high and Fofﬂine is very
small, which shows that the ofﬂine kernel-SVM estimated
barrier function closely replicates the true barrier functions.
A direction of future research is to extend the proposed
SVM-based learning technique for synthesizing CBFs to
other sensor models besides LIDAR such as RGB cameras.
This could be done by identifying the depth map from a
stereo image and then using that to generate the training
data and the barrier function.

VI. CONCLUDING REMARKS

This paper presented a supervised machine learning based
approach to automated synthesis of control barrier functions.
A kernel-SVM based method classiﬁes the set of safe and
unsafe samples, and generates the desired barrier (level-
set) function. A formal guarantee on zero misclassiﬁcation
of unsafe samples is provided along with guarantees on
safety of the robot. The proposed framework was evaluated
based on the comparison between the generated trajectories
and ground truth data. Experimental simulations using the
proposed framework were conducted on an omnidirectional
robot in a ROS-based simulator using synthetic LiDAR data.

ACKNOWLEDGEMENT
The authors thank Alex Chang for discussions regarding

SVMs and for helping with the initial code base.

REFERENCES

[1] R. Hussain and S. Zeadally, “Autonomous cars: Research results, is-
sues, and future challenges,” IEEE Communications Surveys Tutorials,
vol. 21, pp. 1275–1313, Secondquarter 2019.

[2] G. Beltrame, E. Merlo, J. Panerati, and C. Pinciroli, “Engineering
safety in swarm robotics,” in 2018 IEEE/ACM 1st International
Workshop on Robotics Software Engineering (RoSE), pp. 36–39, May
2018.

[3] J. C. Knight, “Safety critical systems: Challenges and directions,”
in Proceedings of
the 24th International Conference on Software
Engineering, ICSE 02, (New York, NY, USA), p. 547550, Association
for Computing Machinery, 2002.

[4] L. Wang, A. D. Ames, and M. Egerstedt, “Safety barrier certiﬁcates for
collisions-free multirobot systems,” IEEE Transactions on Robotics,
vol. 33, pp. 661–674, June 2017.

[5] G. Notomista, S. Mayya, S. Hutchinson, and M. Egerstedt, “An op-
timal task allocation strategy for heterogeneous multi-robot systems,”
in 2019 18th European Control Conference (ECC), pp. 2071–2076,
June 2019.

[6] M. Srinivasan, S. Coogan, and M. Egerstedt, “Control of multi-agent
systems with ﬁnite time control barrier certiﬁcates and temporal logic,”
in 2018 IEEE Conference on Decision and Control (CDC), pp. 1991–
1996, Dec 2018.

[7] L. Wang, D. Han, and M. Egerstedt, “Permissive barrier certiﬁcates
for safe stabilization using sum-of-squares,” in 2018 Annual American
Control Conference (ACC), pp. 585–590, June 2018.

[8] S. M. Richards, F. Berkenkamp, and A. Krause, “The lyapunov neural
network: Adaptive stability certiﬁcation for safe learning of dynamical
systems,” in Proceedings of the 2nd Conference on Robot Learning
(CoRL), vol. 87, pp. 466–476, PMLR, 2018.

[9] R. Cheng, G. Orosz, R. M. Murray, and J. W. Burdick, “End-to-end
safe reinforcement learning through barrier functions for safety-critical
continuous control tasks,” in Proceedings of the AAAI Conference on
Artiﬁcial Intelligence, vol. 33, pp. 3387–3395, 2019.

[10] N. Cristianini, J. Shawe-Taylor, et al., An introduction to support
vector machines and other kernel-based learning methods. Cambridge
university press, 2000.

[11] F. Ramos and L. Ott, “Hilbert maps: Scalable continuous occupancy
mapping with stochastic gradient descent,” The International Journal
of Robotics Research, vol. 35, no. 14, pp. 1717–1730, 2016.

[12] G. Francis, L. Ott, and F. Ramos, “Fast stochastic functional path
planning in occupancy maps,” in International Conference on Robotics
and Automation, pp. 929–935, 2019.

[13] T. Duong, N. Das, M. Yip, and N. Atanasov, “Autonomous Navigation
in Unknown Environments using Sparse Kernel-based Occupancy
Mapping,” arXiv e-prints, p. arXiv:2002.01921, Feb 2020.

[14] A. D. Ames, S. Coogan, M. Egerstedt, G. Notomista, K. Sreenath,
and P. Tabuada, “Control barrier functions: Theory and applications,”
in 2019 18th European Control Conference (ECC), pp. 3420–3431,
June 2019.

[15] LiDAR Comparison Chart, https://autonomoustuff.com/lidar-chart/.
[16] T. Gurriet, M. Mote, A. D. Ames, and E. Feron, “An online approach
to active set invariance,” in 2018 IEEE Conference on Decision and
Control (CDC), pp. 3592–3599, Dec 2018.

[17] K. Veropoulos, C. Campbell, N. Cristianini, et al., “Controlling
the sensitivity of support vector machines,” in Proceedings of the
international joint conference on AI, vol. 55, p. 60, 1999.

[18] B. Hammer and K. Gersmann, “A note on the universal approximation
capability of support vector machines,” neural processing letters,
vol. 17, no. 1, pp. 43–53, 2003.

[19] R. Konda, A. D. Ames, and S. Coogan, “Characterizing Safety:
Minimal Barrier Functions from Scalar Comparison Systems,” Aug
2019. Under review. https://arxiv.org/abs/1908.09323.
[20] S. Ross, G. Gordon, and D. Bagnell, “A reduction of imitation learning
and structured prediction to no-regret online learning,” in Proceedings
of the fourteenth international conference on artiﬁcial intelligence and
statistics, pp. 627–635, 2011.

[21] Y. J. Kim, S. W. Park, H. G. Yeom, M. S. Bang, J. S. Kim, C. K.
Chung, and S. Kim, “A study on a robot arm driven by three-
dimensional trajectories predicted from non-invasive neural signals,”
Biomedical engineering online, vol. 14, no. 1, p. 81, 2015.

