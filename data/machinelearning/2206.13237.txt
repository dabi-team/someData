2
2
0
2

n
u
J

3
2

]
T
S
.
n
i
f
-
q
[

1
v
7
3
2
3
1
.
6
0
2
2
:
v
i
X
r
a

The DEBS 2022 Grand Challenge:
Detecting Trading Trends in Financial Tick Data

Sebastian Frischbier
Infront Financial Technology GmbH
Germany
sebastian.frischbier@infrontfinance.com

Jawad Tahir
Technical University of Munich
Germany
jawad.tahir@tum.de

Christoph Doblander
Technical University of Munich
Germany
christoph.doblander@tum.de

Arne Hormann
Infront Quant AG
Germany
arne.hormann@infrontquant.com

Ruben Mayer
Technical University of Munich
Germany
ruben.mayer@tum.de

Hans-Arno Jacobsen
University of Toronto
Canada
jacobsen@eecg.toronto.edu

ABSTRACT
The DEBS Grand Challenge (GC) is an annual programming compe-
tition open to practitioners from both academia and industry. The
GC 2022 edition focuses on real-time complex event processing of
high-volume tick data provided by Infront Financial Technology
GmbH. The goal of the challenge is to efficiently compute specific
trend indicators and detect patterns in these indicators like those
used by real-life traders to decide on buying or selling in financial
markets. The data set Trading Data used for benchmarking con-
tains 289 million tick events from approximately 5500+ financial
instruments that had been traded on the three major exchanges
Amsterdam (NL), Paris (FR), and Frankfurt am Main (GER) over the
course of a full week in 2021. The data set is made publicly available.
In addition to correctness and performance, submissions must ex-
plicitly focus on reusability and practicability. Hence, participants
must address specific nonfunctional requirements and are asked
to build upon open-source platforms. This paper describes the re-
quired scenario and the data set Trading Data, defines the queries
of the problem statement, and explains the enhancements made to
the evaluation platform Challenger that handles data distribution,
dynamic subscriptions, and remote evaluation of the submissions.

CCS CONCEPTS
• Information systems → Stream management; • Computing
methodologies → Distributed algorithms; • General and refer-
ence → General conference proceedings.

KEYWORDS
Event processing, data streaming, trading, technical analysis

ACM Reference Format:
Sebastian Frischbier, Jawad Tahir, Christoph Doblander, Arne Hormann,
Ruben Mayer, and Hans-Arno Jacobsen. 2022. The DEBS 2022 Grand Chal-
lenge: Detecting Trading Trends in Financial Tick Data. In The 16th ACM
International Conference on Distributed and Event-based Systems (DEBS ’22),
June 27-June 30, 2022, Copenhagen, Denmark. ACM, New York, NY, USA,
7 pages. https://doi.org/10.1145/3524860.3539645

DEBS ’22, June 27-June 30, 2022, Copenhagen, Denmark
© 2022 Copyright held by the owner/author(s). Publication rights licensed to ACM.
This is the author’s version of the work. It is posted here for your personal use. Not
for redistribution. The definitive Version of Record was published in The 16th ACM
International Conference on Distributed and Event-based Systems (DEBS ’22), June 27-
June 30, 2022, Copenhagen, Denmark, https://doi.org/10.1145/3524860.3539645.

1 INTRODUCTION
The DEBS 2022 Grand Challenge (GC) is a programming challenge
organized as part of the annual ACM International Conference on
Distributed and Event-Based Systems (DEBS). The GC encourages
participants from academia and industry to solve a practical prob-
lem by building an efficient and elegant distributed event-driven
solution for it. Submitted solutions are benchmarked using real-
world data and compared based on their performance, design, and
practicability.

This year’s edition of the GC applies technical analysis to finan-
cial markets, featuring fine-granular real-world data about financial
instruments such as equities and indices rarely available to research.
The goal of this GC is to efficiently apply complex event processing
at scale to detect opportunities in price movements hidden amongst
millions of events. Participants need to implement trading strate-
gies such as those used by real-life traders to decide on buying or
selling of their assets. Consequently, multiple trend indicators must
be tracked for each financial instrument’s instance. Upon detecting
specific patterns in these trend indicators, alerts need to be created
if a trader has declared interest in this instrument instance; to raise
the bar, our traders change their interest dynamically.

The remainder of this paper is structured as follows. In Section 2,
we provide background information on the domain of financial
market data. In Section 3, we introduce the data set Trading Data
containing the real tick data used for this challenge. In Section 4 we
formalize the problem statement and in Section 5 we describe the
evaluation done on the Challenger platform [5] with the enhance-
ments we added for this year’s challenge. Finally, we conclude in
Section 6.

2 BACKGROUND
Trading is fuelled by precise real-time event data together with
reliable background information about financial instruments such
as equities, indices or funds. Instances of a financial instrument are
called symbols. The high-volume streams of events reporting de-
mand (ask), supply (bid), made trades (last), and other information
about each symbol are called financial market data.

The overall amount of market data published by the various
exchanges on a daily basis and processed by technical solution
providers such as Infront Financial Technology GmbH (formerly
vwd Vereinigte Wirtschaftsdienste GmbH) is massively increasing.

 
 
 
 
 
 
DEBS ’22, June 27-June 30, 2022, Copenhagen, Denmark

Frischbier et al.

symbol, these have already been normalized by Infront, while global
date and CEST timestamp information have been added together
with various metadata for initial enrichment. Note that the total
order of events per symbol across exchanges cannot be assumed.

The distribution of events in the data set can be briefly summa-
rized as follows: slicing by source, most traffic has been recorded
from source Paris (55%) followed by Amsterdam (28%) and Frankfurt
(17%). Slicing by instrument type, we observe that more events are
generated by activities regarding equities (239,5 million) than for
indices (49,5 million). Actual trading activities (e.g., price events),
however, are much higher for indices (49 million) than for equi-
ties (10 million). Furthermore, analysing the distribution of events
across symbols reveals a long-tail distribution for general event
types but also for trading activities regardless of exchange: most
traffic is related to only a small number of symbols.

Plotting the cumulative update rates per exchange over time in
Fig. 2 shows the typical repetitive patterns per source. Zooming-in
to a single trading day, as in Fig. 3 for the Paris exchange, shows
the load spikes at opening and closing times while activity is lowest
at local lunch time. Note that the spikes can only partially be attrib-
uted to direct trading activity but also to housekeeping tasks (e.g.,
maintaining order books, statistics) creating additional traffic. This
pattern applies to an exchange in general as shown by Frischbier
et al. [1].

3.2 Subsets for GC 2022
For the GC 2022, two subsets, Purged and Test, were extracted from
the full data set. The characteristic long-tail distribution of events
per symbol is preserved in all data sets as shown in Fig. 4.

3.2.1 Purged subset: This data set contains only price events rel-
evant to the GC 2022 queries. This subset of 59 million events is
used to evaluate the submitted solutions on the Challenger plat-
form. Consequently, participants do not need to filter out events
that do not contain attributes relevant to the GC 2022. This data
set contains price events for almost all symbols in the full data set
(i.e., 5183/5504) with indices being more actively traded than equi-
ties (i.e., 82% vs 18%) and most traffic being recorded from source
Frankfurt (54%), followed by Paris (36%) and Amsterdam (10%).

3.2.2 Test subset: This data set contains the first one million events
from the Purged data set for debugging and calibration by the par-
ticipants when setting up their solution. Still covering 5177 symbols
from both security types and all three sources but also preserving
a long-tail distribution across symbols, it has been published up-
front via Challenger for registered participants as a representative
sample.

3.3 Attributes and Format
For convenience and portability, Trading Data is provided as a
collection of flat comma-separated values (CSV) files (one file per
day). Each line in a file represents a single event. Event types (e.g.,
bid, ask, price) are not explicitly marked but are identified by the
respective non-NULL attributes (e.g., attribute ask for an ask event).
The attributes available in events of the data sets are shown in
Table 1; The attributes directly relevant for this GC are marked in

Figure 1: Example screen of a market data terminal product
(here: Infront Professional Terminal).

For example, the daily average number of events being processed
by Infront increased from 18 billion in 2019 to 40 billion in 2021.

Leaving aside the special case of algorithmic trading, market data
are provided to users at different levels of quality of information
(QoI) depending on their subscription; quality attributes in this
context refer primarily to granularity, timeliness, and completeness,
ranging from fine-granular tick data to end-of-day aggregations.
Traders, analysts, and other stakeholders utilize market data of
their required quality in interactive decision support systems called
market data terminals to identify investment opportunities for spe-
cific sets of symbols they are interested in. The Infront Professional
Terminal (IPT) shown in Fig. 1 is an example of a terminal solution
that fuses market data with metadata, news, interactive analytics,
advanced visualizations, and direct trading functionality.

3 DATA SET: ONE WEEK OF REAL TICK DATA
The data used for this year’s Grand Challenge are based on a week’s
worth of real tick data captured by Infront Financial Technology
GmbH in 2021. The full data set intentionally contains far more
data than is actually needed for the DEBS 2022 Grand Challenge to
foster reuse in future research projects. The full data set Trading
Data used for the DEBS Grand Challenge 2022 is publicly available
[2] licensed under an open license1.

3.1 Full Data Set: Trading Data
The full data set contains 289 million events consisting of tick data
and housekeeping events recorded from Monday, November 8th,
to Sunday, November 14th, 2021. The data cover 5504 equities and
indices that are traded on three European exchanges (exchange code
in parentheses): Paris (FR), Amsterdam (NL), and Frankfurt/Xetra
(ETR). All tick data events for security type equities (e.g., Royal
Dutch Shell or Siemens Healthineers) and indices are contained in
the set as they had been captured on these days by Infront’s systems.
Consequently, this data set reflects real update rates per second and
can also be used for complex event processing research tasks that
need to correlate events for indices with those for equities. In the
case of exchange-specific and ambiguous identifiers for the same

1http://creativecommons.org/licenses/by-nc-sa/4.0/

The DEBS 2022 Grand Challenge:
Detecting Trading Trends in Financial Tick Data

DEBS ’22, June 27-June 30, 2022, Copenhagen, Denmark

Figure 2: Daily load patterns in Trading Data for all exchanges: start/end of trade, midday, and weekend.

Figure 3: Paris exchange on Monday, November 8𝑡ℎ.

Figure 4: Long tail distribution of events in Trading Data and
the two derived subsets Purged and Test.

the third column with a star (★). Global CEST timestamps are in the
format HH:MM:SS.ssss while dates are stored as DD-MM-YYYY.

Some events appear to come with no payload in the full data
set. We had to balance the desire for a raw and unabridged data
set with the need to protect intellectual property and to keep the
data set’s size as small as possible. In particular, only a small subset
of attributes needs to be evaluated in this year’s GC. Hence, we

eliminated certain attributes to preserve the number of events and
their update patterns over time while reducing the overall size.

4 PROBLEM DEFINITION
This year’s GC requires participants to implement a basic trading
strategy as applied by intraday traders in real life. The strategy
aims at (a) identifying trends in price movements for individual
symbols using event aggregation over tumbling windows (Query

DateNumber of events (aggregated by minute)050K100K150K180KExchangesParisAmsterdamFrankfurtNov 08Nov 09Nov 10Nov 11Nov 12Nov 13Nov 14Time of day (CEST)Number of events (aggregated by minute)Paris exchange050K100K150K08:0010:0012:0014:0016:0018:00Symbols (ordered by number of events descending)Events per symbol (log)Data setFullPurgedTest2481216DEBS ’22, June 27-June 30, 2022, Copenhagen, Denmark

Frischbier et al.

2
3
4
5
6
7
8
9
10
11
12
13
14
15

16
17
18
19

20
21
22
23
24
25

GC
★

★

★

★

ID Title

Description

1

ID.[Exchange]

Unique identifier for this symbol
with trading exchange: Paris (FR) /
Amsterdam (NL) / Frankfurt (ETR)
Security type: [E]quity or [I]ndex
System date last received update
System time last received update
Price of best ask order
Volume of best ask order
Price of best bid order
Volume of best bid order
Time of last ask
Day’s high ask
Closing price (six digits)
Currency (according to ISO 4217)

SecType
Date
Time
Ask
Ask volume
Bid
Bid volume
Ask time
Day’s high ask
Close
Currency
Day’s high ask time Day’s high ask time
Day’s high
ISIN

Auction price
Day’s low ask
Day’s low
Day’s low ask time

Open
Nominal value
Last
Last volume
Trading time
Total volume

Day’s high (price)
ISIN (International Securities
Identification Number)
Price at midday’s auction
Lowest ask price of the current day
Lowest price of the current day
Time of lowest ask price of the
current day
First price of current trading day
Nominal Value
Last trade price
Last trade volume
Time of last update (bid/ask/trade)
Cumulative volume for current
trading day
Mid price (between bid and ask)
Date of last trade
Profit
Current price
Related indices
Time of day’s highest bid
Time of day’s lowest bid
Time of open price
Time of last price
Time of closing price
Time of day’s high
Time of day’s low
Time of last bid update
Time of last auction price

★

26 Mid price
27
28
29
30
31
32
33
34
35
36
37
38
39
Table 1: Attributes in Trading Data: syntax and semantics.

Trading date
Profit
Current price
Related indices
Day high bid time
Day low bid time
Open time
Last price time
Close time
Day high time
Day low time
Bid time
Auction time

1) and (b) generating buy/sell advisories upon detecting specific
patterns using complex event processing (Query 2).

4.1 Definitions and Relaxations
We define the following terms and relaxations to allow participants
to focus on the actual engineering aspects of the GC:

(1) Each instrument instance is identified by a symbol 𝑠 ∈ 𝑆
consisting of a unique string and the exchange code of the
exchange the instrument instance is being traded on; e.g.,

the symbol RDSA.NL denotes shares of Royal Dutch Shell
traded on the Amsterdam exchange2.

(2) All events have to be grouped by their symbol.
(3) All events provided via Challenger are prefiltered to contain

only pricing information per symbol 𝑠.

(4) All metrics for all 𝑠 ∈ 𝑆 must constantly be calculated, but
updates need to be provided only for a subset of symbols
𝑠 ∈ 𝑆 ⊊ 𝑆 the platform subscribes to (simulating traders).
(5) Calculations are based on windows of 5 minutes’ length.
(6) The first window 𝑤0 starts at 0:00 (midnight) CEST.
(7) Windows do not overlap (tumbling windows).
(8) A window 𝑤𝑖 is evaluated once the next window 𝑤𝑖+1 starts.

4.2 Quantitative Indicators (Query 1)
The first query defines one of the most essential indicators for each
symbol used in technical analysis to identify trends: the exponential
moving average (EMA). Multiple price events observed within 𝑤
minutes define a window of length 𝑤 (e.g., 𝑤 = 5 minutes). In our
example a window of length 𝑤 cannot be evaluated until the next
window starts. The EMA of the current window is calculated by
weighting the price last observed in the current window with the
EMA of the previous window. Furthermore, we define 𝐸𝑀𝐴𝑗
𝑠,0 = 0,
i.e., for the first reading of a symbol 𝑠 in the very first window, we
assume the EMA of the previous window is zero.

𝐸𝑀𝐴𝑗

𝑠,𝑤𝑖 =

(cid:20)
𝐶𝑙𝑜𝑠𝑒𝑠,𝑤𝑖 ·

(cid:19) (cid:21)

(cid:18) 2
1 + 𝑗

(cid:20)

·

1 −

(cid:19)(cid:21)

(cid:18) 2
1 + 𝑗

+ 𝐸𝑀𝐴𝑗
𝑠,𝑤𝑖−1
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:124)
(cid:125)
(cid:123)(cid:122)
prev. window

with

|𝑤 |
𝑗

𝑠
𝐶𝑙𝑜𝑠𝑒𝑠,𝑤𝑖
𝐸𝑀𝐴𝑗

𝑠,𝑤0

: window duration in minutes

:

:

:

smoothing factor for EMA with 𝑗 ∈ {38, 100}
symbol 𝑠 ∈ 𝑆 = {𝑠1, . . . , 𝑠𝑛 }
last price event for 𝑠 observed in window 𝑤𝑖

= 0

4.3 Breakout Patterns: Crossovers (Query 2)
The quantitative indicators of Query 1 are used in Query 2: breakout
patterns can be identified by tracking two EMAs per symbol that
are computed over different intervals.

Generally, breakout patterns describe meaningful changes in the
development of a price that indicate the start of a trend (even if
only temporary). A change is called a bullish breakout, if the price
is starting to rise steadily (crossover from below / breaking through
the support area) and a bearish breakout if the price is going to lose
steadily (crossover from above / breaking through the resistance
area).

Properly identifying such changes and their nature in a timely
manner allows a trader to monetize this knowledge by immediately
buying (in case of a bullish breakout) or selling (in case of a bearish
breakout) to maximize revenue.

2https://live.euronext.com/product/equities/GB00B03MLX29-XAMS/quotes

The DEBS 2022 Grand Challenge:
Detecting Trading Trends in Financial Tick Data

DEBS ’22, June 27-June 30, 2022, Copenhagen, Denmark

4.3.1 Bullish Breakout Pattern: Buy Advisory. Generally, we detect
a bullish breakout pattern for a symbol once the EMA with the
shorter interval 𝑗1 starts to overtake the EMA with the longer inter-
val 𝑗2. In this case, a buy advise event must be created immediately
so that a trader can still benefit from a relatively low price.

For long intervals of 𝑗1 = 50 days and 𝑗2 = 100 days this crossover
is specifically called a golden cross to indicate a golden opportunity
for long-term investments.

For this challenge, we use a granularity of minutes by setting
𝑗1 = 38 and 𝑗2 = 100 and create a buy advise event upon detecting
a crossover as illustrated in Fig. 5 and formalised in Equations 1
and 2.

A bullish breakout pattern can be observed if and only if

𝐸𝑀𝐴38

𝑠,𝑤𝑖

> 𝐸𝑀𝐴100

𝑠,𝑤𝑖 and

𝐸𝑀𝐴38

𝑠,𝑤𝑖−1

≤ 𝐸𝑀𝐴100

𝑠,𝑤𝑖−1

(1)

(2)

Subsequently, a buy advise event must be generated.

Figure 5: Crossover called a bullish breakout pattern.

4.3.2 Bearish Breakout Pattern: Sell Advisory. Generally, we detect
a bearish breakout pattern for a symbol once the EMA with the
longer interval 𝑗2 starts to overtake the EMA with the shorter inter-
val 𝑗1. In this case, a sell advise event must be created immediately
so that a trader can still sell at a relatively high price.

Conversely to the golden cross described earlier, a bearish pattern
for 𝑗1=50 days and 𝑗2=100 days is specifically called a death cross.
For the bullish pattern, we use a granularity of minutes by setting
𝑗1 = 38 and 𝑗2 = 100 and create a sell advise event as shown in
Fig. 6 and formalised in Equations 3 and 4.

A bearish breakout pattern can be observed if and only if

𝐸𝑀𝐴38

𝑠,𝑤𝑖

< 𝐸𝑀𝐴100

𝑠,𝑤𝑖 and

𝐸𝑀𝐴38

𝑠,𝑤𝑖−1

≥ 𝐸𝑀𝐴100

𝑠,𝑤𝑖−1

(3)

(4)

Subsequently, a sell advice event must be generated.

4.4 Bonus: Smart Visualization
Whether users can fully exploit a decision support system for trad-
ing does not only depend on the correctness and performance of
its implementation; being able to visually cut through the noise
and visually emphasize the relevant data to the user is almost as
important. Hence, GC participants were encouraged to find a smart
way to visualize the results of the queries for bonus points.

Figure 6: Crossover called a bearish breakout pattern

5 EVALUATION
Submitted solutions are automatically evaluated by the distributed
evaluation platform Challenger [5] and ranked by their performance
regarding latency, processing time, and throughput. Furthermore,
each solution must address specific nonfunctional requirements to
prove its practicability and portability beyond the boundaries of
this community and GC scenario. In this section, we describe the
automatic performance evaluation performed by our evaluation
platform, the enhancements we added to the Challenger platform3
to this end, and briefly review evaluation guidelines that aim at
engendering reusability in the solutions.

5.1 Evaluation Approach
The functional evaluation of the solutions covers two aspects,
namely correctness and performance. These are centrally gauged
using Challenger in the same manner as in the previous GC edi-
tion [5]. The correctness of a solution is assessed by code reviews.
For performance evaluation, the latency (90𝑡ℎ percentile) of the
queries is averaged per solution and ranked among all received
solutions. The team with the lowest rank wins the challenge.

5.2 Expected Results in the Evaluation
For a fair evaluation, our platform mimics the usual behaviour
of traders using market terminal solutions: traders subscribe to
individual sets of symbols they want to track and get informed
about opportunities (e.g., advise to buy or sell).

Every batch of events pushed to a participant’s solution comes
with a list of symbols that the Challenger platform subscribes to
in order to simulate a trader. The subscription is valid until it is
updated (i.e., the current set of symbols is replaced with a new
one). Subscriptions change dynamically over the evaluation ses-
sion. Consequently, participants always need to keep track of all
symbols with their EMAs and crossovers to properly reply to the
latest subscriptions. Subscription patterns are implemented to be
unpredictable but reproducible.

For each symbol 𝑠 ∈ 𝑆 that Challenger has currently been sub-
scribed to, the evaluation platform expects the following results
returned from a submitted solution per batch:

• Query 1: 𝐸𝑀𝐴38
• Query 2: last three sell/buy advice events

𝑠,𝑤𝑙𝑎𝑠𝑡 and 𝐸𝑀𝐴100

𝑠,𝑤𝑙𝑎𝑠𝑡

3https://github.com/jawadtahir/CHALLENGER

DEBS ’22, June 27-June 30, 2022, Copenhagen, Denmark

Frischbier et al.

5.3 Evaluation Platform
For competitive benchmarking of the submitted solutions, we have
reused and extended the evaluation platform Challenger [5] that
had been introduced for the ACM DEBS 2021 Grand Challenge.

About the platform. Challenger is a gRPC4-based service that
allows participants to remotely benchmark their solutions with
different but centrally provided data sets. The platform provides
registered participants with dedicated virtual machines for running
benchmarks. Solutions can be implemented with the programming
language preferred by the participants using service stubs generated
from the gRPC interfaces. Challenger also provides participants with
dashboards about their solution’s performance and their ranking
among all participants; data from these dashboards can be exported.

Figure 7: Challenger API.

How to use the platform. Participants generate stubs to communi-
cate with the evaluation platform using a client generator for gRPC.
In the first step, participants create a new benchmark; see Fig. 7
(step 1). Then they invoke startBenchmark, see Fig. 7 (step 2), which
sets the starting point of the evaluation run on Challenger. Next,
the participants retrieve all batches and return two types of results
for each batch. Timestamps in nanosecond resolution are taken
from each retrieval of a batch and from each submission of the
results. When the last batch is received, which is marked by a flag,
the participants call endBenchmark. The throughput for each query
is calculated from the number of batches received between the start
and end of the benchmark. The processing latency of each query is
derived from the timestamps of the retrieval and submission of the
results.

w h i l e True :

b a t c h = s t u b . n e x t B a t c h ( benchmark )
e v e n t _ c o u n t = e v e n t _ c o u n t +

l e n ( b a t c h . e v e n t s )

d e f q u e r y R e s u l t s ( s y m b o l s : l i s t [ s t r ] )

−> l i s t [ ch . I n d i c a t o r ] :

# Your p a r t :
# f o r

t h e g i v e n s y m b o l s

c a l c u l a t e

t h e

i n d i c a t o r s

r e t u r n l i s t ( )

r e s u l t Q 1 = ch . R e s u l t Q 1 (

# The i d o f
b e n c h m a r k _ i d = benchmark . i d ,

t h e benchmark

t h e benchmark

# The i d o f
b a t c h _ s e q _ i d = b a t c h . s e q _ i d ,
i n d i c a t o r s = q u e r y R e s u l t s (

b a t c h . l o o k u p _ s y m b o l s ) )

# s e n d t h e
s t u b . r e s u l t Q 1 ( r e s u l t Q 1 )

r e s u l t o f q u e r y 1 b a c k

d e f

c r o s s o v e r E v e n t s ( ) −>
l i s t [ ch . C r o s s o v e r E v e n t ] :

# Your p a r t :

c a l c u l a t e

t h e c r o s s o v e r e v e n t s

r e t u r n l i s t ( )

# do t h e same f o r Q2
r e s u l t Q 2 = ch . R e s u l t Q 2 (

# The i d o f
b e n c h m a r k _ i d = benchmark . i d ,

t h e benchmark

# The s e q u e n c e i d o f
b a t c h _ s e q _ i d = b a t c h . s e q _ i d ,
c r o s s o v e r _ e v e n t s = c r o s s o v e r E v e n t s ( ) )

t h e b a t c h

# s u b m i t
s t u b . r e s u l t Q 2 ( r e s u l t Q 2 )

r e s u l t s o f Q2

t h e

# S t e p 4 − once t h e
# i s
r e c e i v e d ,
# S e e t h e
# h t t p s : / / c h a l l e n g e . msrg . i n . tum . de / benchmarks /

l a s t
s t o p t h e c l o c k

s t a t i s t i c s w i t h i n ~5 min h e r e :

e v e n t

i f b a t c h . l a s t :

p r i n t ( f " r e c e i v e d l a s t b a t c h ,

t o t a l b a t c h e s :

{ e v e n t _ c o u n t } " )

s t u b . endBenchmark ( benchmark )
b r e a k

4https://grpc.io

Definition 5.1: Example code snippet in Python provided to
participants about interacting with Challenger.

ParticipantParticipantChallengerChallenger1) Create a new BenchmarkcreateNewBenchmark(BenchmarkConﬁguration)(Benchmark)2) BenchmarkstartBenchmark(Benchmark)Repeat until ﬁnishednextMessage(Benchmark)PayloadParallelized calculation of resultsresultQ1(ResultQ1)resultQ2(ResultQ2)endBenchmark(Benchmark)The DEBS 2022 Grand Challenge:
Detecting Trading Trends in Financial Tick Data

DEBS ’22, June 27-June 30, 2022, Copenhagen, Denmark

[4] Z. Jerzak and H. Ziekow. 2014. The DEBS 2014 Grand Challenge. In DEBS ’14.

https://doi.org/10.1145/2611286.2611333

[5] J. Tahir, C. Doblander, R. Mayer, S. Frischbier, and H.-A. Jacobsen. 2021. The
DEBS 2021 Grand Challenge: Analyzing Environmental Impact of Worldwide
Lockdowns. In DEBS ’21. https://doi.org/10.1145/3465480.3467836

5.4 Nonfunctional Requirements
The ACM DEBS Grand Challenge’s primary goal is to complement
conceptual research in the area of event-driven and distributed
systems with the engineering challenge of putting such approaches
into practice by solving problems using real-world data.

Over the course of the years, participants focused more on the
correctness and performance of their implementation than on max-
imizing the reusability and versatility of their solution beyond the
scope of the challenge at hand. Understandably, most submitted
solutions thus tended to be built from scratch and were custom-
tailored to a single-node architecture to side-step the challenges
that come with distributed systems.

Previous instances of the GC already tried to motivate parti-
cipants to consider nonfunctional requirements (NFRs) in their
submission [3, 4]. Building on and reinforcing this trend, we intro-
duced detailed NFRs in last year’s edition of the GC and made them
mandatory for this year’s edition. With these we want to ensure a
minimum level of portability and practicability beyond the scope
of the current challenge. Hard NFRs to be explicitly addressed by
participants are: configurability, scalability (with horizontal scalabil-
ity being preferred), operational reliability/resilience, accessibility
of the solution’s source code, integration with standard tools and
protocols, as well as documentation.

Most of these NFRs can directly be addressed by building upon
widely-used industry-strength open-source platforms such as those
curated by recognized open source foundations5. We are very glad
to report that this year all submitted solutions are built on top of
various open-source distributed frameworks such as Apache Flink,
Apache Kafka, Apache Spark, and Jupyter Notebook.

6 CONCLUSIONS
Registration for the 2022 edition of the GC opened in December
2021. Participants were required to first register on Microsoft CMT
for general communication and the final submission of their short
papers to the peer-review process. Successfully registered partici-
pants were then activated on the Challenger platform. A total of
17 teams from academic and industrial organizations registered for
GC 2022 and actively used Challenger to benchmark their solutions
against the Trading Data set. By the deadline, eight teams were able
to submit solutions to the peer-review process.

ACKNOWLEDGMENTS
The authors would like to thank Christian Roth, Thorsten Hammel,
Alexander Echler, and Fredrik Koch of the Infront group for their
input and support. The infrastructure for running Challenger was
provided by the Chair for Application and Middleware Systems at
Technical University of Munich (TUM).

REFERENCES
[1] S. Frischbier, M. Paic, A. Echler, and C. Roth. 2019. Managing the Complexity of
Processing Financial Data at Scale-An Experience Report. In CSD&M ’19. Springer.
https://doi.org/10.1007/978-3-030-34843-4_2

[2] S. Frischbier, J. Tahir, C. Doblander, A. Hormann, R. Mayer, and H.-A. Jacobsen.
2022. DEBS 2022 Grand Challenge Data Set: Trading Data. https://doi.org/10.5281/
zenodo.6382482

[3] V. Gulisano, D. Jorde, R. Mayer, H. Najdataei, and D. Palyvos-Giannas. 2020. The
DEBS 2020 Grand Challenge. In DEBS ’20. https://doi.org/10.1145/3401025.3402684

5https://opensource.com/resources/organizations

