9
1
0
2

g
u
A
7

]
L
M

.
t
a
t
s
[

1
v
7
2
4
2
0
.
8
0
9
1
:
v
i
X
r
a

Strengthening the Case for a Bayesian Approach to Car-following
Model Calibration and Validation using Probabilistic Programming

Franklin Abodo∗, Andrew Berthaume†, Stephen Zitzow-Childs† and Leonardo Bobadilla∗

∗School of Computing and Information Sciences
College of Engineering and Computing
Florida International University
Miami, FL 33199, USA
Email: fabod001@ﬁu.edu, bobadilla@cs.ﬁu.edu

†Volpe National Transportation Systems Center
Ofﬁce of Research and Technology
U.S. Department of Transportation
Cambridge, MA 02142, USA
Email: {andrew.berthaume, s.zitzow-childs}@dot.gov

Abstract— Compute and memory constraints have histori-
cally prevented trafﬁc simulation software users from fully
utilizing the predictive models underlying them. When cal-
ibrating car-following models, particularly, accommodations
have included 1) using sensitivity analysis to limit the number
of parameters to be calibrated, and 2) identifying only one
set of parameter values using data collected from multiple
car-following instances across multiple drivers. Shortcuts are
further motivated by insufﬁcient data set sizes, for which
a driver may have too few instances to fully account for
the variation in their driving behavior. In this paper, we
demonstrate that recent technological advances can enable
transportation researchers and engineers to overcome these
constraints and produce calibration results that 1) outperform
industry standard approaches, and 2) allow for a unique set of
parameters to be estimated for each driver in a data set, even
given a small amount of data. We propose a novel calibration
procedure for car-following models based on Bayesian machine
learning and probabilistic programming, and apply it to real-
world data from a naturalistic driving study. We also discuss
how this combination of mathematical and software tools
can offer additional beneﬁts such as more informative model
validation and the incorporation of true-to-data uncertainty
into simulation traces.

I. INTRODUCTION

Trafﬁc simulation software packages are widely used in
transportation engineering to estimate the impacts of po-
tential changes to a roadway network and forecast system
performance under future scenarios. These packages are
underpinned by math- and physics-based models, which are
designed to describe behavior at an aggregate (macroscopic)
level or at
the level of individual drivers (microscopic).
Within the microscopic realm, driver behavior is decomposed
into sub-models which individually handle lane-changing,
car-following, route choice, and so on. This work focuses
speciﬁcally on car-following models (CFMs), which estimate
the acceleration and deceleration behavior of individual
vehicles with respect to their driving environment. Critical
to the accurate performance of simulation models is the
calibration process, during which unobserved model param-
eters have their values estimated using ﬁeld measurements.
Due to known variations in driver behavior that exist across
regions and between driving conditions (such as road weather

conditions), every transportation network model must be re-
calibrated to accurately reﬂect the in situ driver behavior
prior to forecasting future conditions. A variety of statistical
and machine learning tools have been employed to estimate
the values of a CFMs latent variables in prior work. CFMs
are typically calibrated using optimization techniques, with
the genetic algorithm being a popular approach [1], [2]. A
less frequently used method based on Bayesian inference was
shown in [3] to outperform one particular deterministic opti-
mization method applied to a real-world data set. However,
the application of Bayesian methods to the calibration (and
validation) of CFMs remains not thoroughly explored in the
literature. As recently as ﬁfteen years ago, the use of Markov
Chain Monte Carlo (MCMC) methods for calibration of
trafﬁc simulator parameters was considered a difﬁcult chal-
lenge that required expert knowledge, mainly when applied
at the scale of the large parameter spaces and large ﬁeld
data sets often under consideration [4]. In this paper, we
revisit the problem of CFM calibration in the context of
Bayesian machine learning, demonstrating how the advent of
probabilistic programming languages (PPLs) has enabled the
convenient construction of probabilistic variations of CFMs
that yield more effective calibration results by exploiting the
hierarchical structure of ﬁeld data. This result is of particular
interest to researchers and engineers concerned with agent-
based modeling and simulation [1], in which the driving
behavior and travel related decision making of individuals
are studied and used in downstream analyses. We also
discuss how Bayesian approaches to model criticism allow
for more stringent and informative validation of CFMs. High-
resolution data from a naturalistic driving study serve as
the basis of these demonstrations. The statistical models and
calibration procedure are implemented using the distributed
computing framework TensorFlow Probability (TFP) and the
PPL Edward2 [5]. The source code is publicly available for
other researchers to compare results using different data sets.

II. RELATED WORK

In prior work on calibration for trafﬁc simulators, Bayesian
methods have been advocated because of their ability to
capture uncertainty in estimated parameter values stemming

 
 
 
 
 
 
is meant

from: 1) inconsistency between the model and the natural
to capture; 2) errors introduced
phenomena it
by the calibration process itself (including the choices of
measure of performance and measure of error (MoE)); and
3) noise or errors in the data collection process [6], [7].
In [6] and [7], Markov Chain Monte Carlo methods are
used to analyze the error in human measurement of turn
counts and roadway entry counts, and to estimate other
parameters of the CORSIM simulator. In [7], the inﬂuence
of sampling from parameter distributions when generating
simulation traces rather than ﬁxing parameter values is
additionally evaluated. [8] modeled the Intelligent Driver
Model using Gaussian random variables as the parameters
to perform a probabilistic sensitivity analysis based on the
Kullback-Liebler dissimilarity measure in order to limit the
number of parameters requiring value estimation to those
yielding the greatest performance improvement relative to
default parameter values. [3] advocated for the use of a
Bayesian approach to calibration by directly comparing
an MCMC-based calibration method with a deterministic
optimization method, using one synthetic data set to show
that the Bayesian method could recover known parameter
values and one real-world data set as a case study. One
common characteristic of these prior works is a lack of
transparency into the calibration procedures that would allow
their results to be reproduced using the same data (assuming
public availability) or contested using data from a different
distribution collected under different scenarios.

In this work, we seek to strengthen the case for Bayesian
methods. First, we use a hierarchical model formulation that
yields excellent calibration results for multiple individual
drivers, improving performance on a small data set over
the multivariate normal model used by Mazinur. This ca-
pability is important because the use of one parameter set
to represent the behavior and preferences of many drivers
violates the assumptions of some models that parameters
can only remain constant for a single driver [9] or even
a single CF instance [10]. Further, the ability to perform
driver-speciﬁc calibrations is required for agent-based driver
behavior modeling [1]. Second, we implement our ideas in
TFP and Edward2, a software library and API for proba-
bilistic programming that abstract away the complexity of
MCMC algorithm implementation details, and that can easily
scale to meet the compute demands associated with large
data sets and simulator parameter search spaces. Finally, we
discuss additional beneﬁts of the application of Bayesian
methods to car-following model calibration not addressed
in previous work, including for example the utility of the
Bayesian interpretation of p-values.

III. BACKGROUND AND PRELIMINARIES

A. Bayesian Programming

A Bayesian program (BP) is a generic formalism that can
be used to describe many classes of probabilistic model,
including Hidden Markov Models, Bayesian Networks and
Markov Decision Processes [11]. This formalism organizes
a graphical model, which encodes prior knowledge about

the inference problem, together with model variables and
observed data into a structure like the following:

Program






Desc.




Questions.

Spec.






Variables
Decomposition
Forms (parametric or program)

Identiﬁcation (using data)

The program must deﬁne 1) a means of computing the
joint probability over its model, variables and data, and 2)
a means of answering a speciﬁc inference question given
that joint probability. For example, a Hidden Markov Model
would have a sequence of states and observations as its
variables, emission and transition matrices as its model,
and various message-passing algorithms as its means of
answering inference questions. The Baum-Welch algorithm
[12] would be its means of identiﬁcation.

B. Probabilistic Programming

languages

Probabilistic programming languages (PPLs) allow BPs
to be implemented and have inference performed over
their parameters using software. PPLs are like ordinary
programming
allow
but
variables’ values to be randomly sampled from distributions,
allowing the output of programs written in them to vary
non-deterministically given the same input. They also allow
variables’ values to be conditioned on data (observations).
In the BP formalism,
the description of a probabilistic
program is as follows:

additionally

they

Prog.









Spec.

Desc.




Question: P (θ|x).



Variables: θ (latent) and x (obs)
Decomp.: P (x, θ) ∝ P (θ)P (x|θ)
Form: Probabilistic Program

Identiﬁcation: MCMC or VI

The decomposition states that the posterior joint prob-
ability of the model parameters and the observations is
proportional to the product of the prior probability of the
model parameters, P (θ), and the likelihood of the obser-
vations given the model parameters, P (x|θ). Because we
treat each CF instance as independent, the likelihood can
be further decomposed into products of the probabilities of
each individual xi ∈ x:

P (x|θ) =

|x|
(cid:89)

i=0

P (xi|θ).

The inference algorithms included with PPLs, such as
Markov Chain Monte Carlo (MCMC) and variational in-
ference (VI), can be run on arbitrary graphical models, as
opposed to algorithms that run on a limited set of model
classes for which they have been specially invented (e.g.
Bayesian and Markov Networks). To construct a probabilistic

IDM is a member of the class of collision-free car-
following models. In ordinary situations, the vehicle will
decelerate according to b, but in emergencies, deceleration
can occur at an exponential rate [14]. Other widely used
car-following models include the Gipps model [15], which
is used in the AIMSUN simulator and is also a collision-
free model, and Wiedemann ’99, a psycho-physical model
that is the basis of VISSIM [16]. IDM is itself included as
an option in the deep reinforcement learning framework for
trafﬁc simulation, Flow [17].

D. Naturalistic Driving Data Set

Microsimulation models depend on observations of in-
dividual driver/vehicle characteristics such as velocity and
inter-vehicle spacing, as opposed to macrosimulation models,
which operate on aggregate measures like density and ﬂow.
The vehicles must be instrumented to collect data at this
level of granularity with radar and other sensors, and their
state (e.g., steering angle, acceleration, etc.) must be captured
from their Controller Area Network (CAN) buses. This work
was supported by data collected in such a fashion as part of a
naturalistic driving study conducted by the Volpe Center. The
original purpose of the study was to observe driver transits
through construction zones, and use the observations to
develop a work zone-speciﬁc car-following model. A subset
of 207 quality-controlled car-following instances across 54
unique drivers of a single vehicle was selected from the
total set of instances constructed from the raw data. Unused
instances were plagued by temporal discontinuities resulting
from hardware outages. The small data set size will help us
demonstrate the utility of informative Bayesian priors.

IV. CALIBRATION METHOD

A. Probabilistic Intelligent Driver Model Formulation

A probabilistic variant of IDM can be easily derived
the BP formalism, and conveniently
in the context of
constructed using a PPL. In this work, the latent variables
are θ = {v0, T, a, b, δ, s0, s1} and the observed variables
are x = {s, v, ∆v} ∪ {aobs}; our means of joint probability
identiﬁcation is a Hamiltonian Monte Carlo (HMC) variant
of MCMC; and our form is the IDM model implemented as
an Edward2 program.

We explore three probabilistic model formulations:
1) a single multivariate-normal of dimension k equal to
the number of parameters, following the formulation
in [3]. The single set of parameters are calibrated
using data from all drivers d ∈ D, where |D| equals
the number of drivers:

θd ∼ Nk(µ, Σ).

2) a two-level hierarchy of univariate normals for which
each driver has an individual set of k random variables
with their mean and standard deviation drawn from a
pair of parent distributions shared across all drivers:

Fig. 1. Directed acyclic graph representation of the probabilistic IDM
model. Deterministic operations are abstracted into terms (rounded rectan-
gles), and random variables (RVs) are represented by circles. The response
variable, accelt+1, is also treated as an RV because it is a function of RVs.

variation of a deterministic mathematical model, such as a
car-following model, one merely needs to implement the
model as the likelihood function using the primitives of
the PPL, with random variables (and their corresponding
probability distributions) used to represent model param-
eters and the response variable, and ordinary mathemati-
cal operations used everywhere else. If the model can be
implemented,
then probabilistic parameter estimation can
be performed in a plug-and-play fashion. The incredible
ﬂexibility of PPLs like Edward2 and PyMC3 [13] allow
models of varying compositions to be implemented, from
the piece-wise linear Newell ’02 model [10] to the highly
non-linear Wiedemann ’99 (W99) model, which includes
conditional function evaluation. We chose the IDM model
to demonstrate our calibration approach due to its moderate
simplicity and interpretability, plus its widespread use in
practice [2].

C. The Intelligent Driver Model

The Intelligent Driver Model [9] predicts a following
vehicle’s next acceleration, at+1, given that vehicle’s
absolute velocity, v, and its velocity and distance relative to
a leading vehicle, ∆v and s, at the current time:

(cid:20)
at+1 = a

1 −

(cid:19)δ

(cid:18) v
v0

−

(cid:18) s∗(v, ∆v)
s

(cid:19)2(cid:21)
,

with:

s∗(v, ∆v) = s0 + s1

(cid:114) v
v0

+ Tv +

v∆v
√
ab
2

.

(1)

(2)

The estimable parameters are v, the desired velocity; T ,
the ”safe” time headway, which is the time it would take
the following vehicle to close the gap between itself and
the leading vehicle; a, the maximum acceleration; b, the
desired or ”comfortable” deceleration, with higher values
corresponding to more aggressive and late braking; s0 and
s1, jam distance terms that correspond to stop-and-go trafﬁc
when values are low; and δ, which represents the rate at
which a driver will decrease acceleration as the desired
velocity is approached. This decrease in acceleration can
range anywhere from exponential to linear or sub-linear.

θd = µd + σd × θd,norm;

θd,norm ∼ N L1

k (0, 1);

µd ∼ N L2

k (µµ, σµ);

σd ∼ N L2

k (µσ, σσ).

allows

arrangement

each driver

This
a unique
parameterization that shares statistical strength with
those of other drivers during calibration to avoid
insufﬁcient data. We chose
the consequences of
a non-centered implementation of
the hierarchical
model because it resulted in slightly lower error than
a centered one that we explored but do not present
here.

3) a set of k univariate normals, each having an individual

mean and standard deviation for each driver:

θd ∼ N (µd, σd).

is

the arrangement

for which we expect
This
model performance to suffer from a lack of training
data (especially in cases where there may exist only
one car-following instance for a driver.

For simplicity, we assume there is no beneﬁt to allowing the
parameters of a single model to have different formulations.

B. Modeling the Data Distribution

For each model type, a normal distribution was chosen
to represent the response variable, with each CF instance’s
distribution being assigned its corresponding observed mean
and standard deviation. This assumption of normality is rel-
atively safe given an inspection of each instance’s quantile-
quantile plot. While the plots do show heavy tails for
several instances, in our experiments the use of normal data
model performed better than Student’s t-distribution models,
indicating that the response distributions are not actually
heavy-tailed but simply contain outliers. Each instance was
as statistically independent, but with all time steps within a
single instance being dependent.

C. Calibration Procedure

1) Choosing an Inference Algorithm: The inference algo-
rithm chosen to identify the target joint probability distri-
bution was Hamiltonian Monte Carlo, an advanced MCMC
algorithm that uses gradients to inform its proposals for
the next state to be explored during inference. HMC can
be expected to require many fewer iterations to converge
than alternative algorithms [18] This algorithm applies to the
probabilistic IDM because the model equations are differen-
tiable. A model such as W99 would require the use of an
alternative algorithm like Metropolis-Hastings, also available
in TFP, because of its conditionally invoked, driving regime-
speciﬁc equations.

2) Testing for MCMC Convergence: To determine at what
number of burn-in steps that the search for the target joint
distribution converges, the search was run multiple times
with each successive run including an additional 1500 steps,
starting with 1500 at
the base run. This restart method
was chosen after observing that, in TFP, initializing one
search with the resulting state of a preceding search led to
either slow or no progress being made. If the difference in
joint probability between two consecutive runs fell below
an arbitrary threshold, the results of the calibration of the
preceding run were accepted as ﬁnal.

3) Scalability of Calibration Procedure: Each probabilis-
tic model calibration required no more than 9,000 iterations
to converge, compared to reports of hundreds of thousands
of iterations required in earlier literature for the same IDM
model [3], even with only four out of seven of its parameters
being calibrated. This speed (under four minutes) on a single
quad-core CPU, coupled with the support for distributed
computing across a virtually unbounded number of comput-
ers offered by TFP, make the application of our calibration
method achievable for big data sets.

TABLE I

MEASURES OF CALIBRATION ERROR

Root Mean Square Error

Average KL-Divergence

Prior σ

Pooled
Hierarchical
Individual
Literature[9]*

1

.1842
.1527
.1864

10

.1592
.1500
.1587
149.9

100

.1529
.1493
.1548

1

397.88
190.72
492.59

10

213.16
182.49
212.63
5.86e9

100

194.67
175.13
194.71

∗ θ = {v0, T, a, b, δ, s0, s1} = {6.5, 1.6, .73, 1.67, 4., 2., 0.}

V. CALIBRATION RESULTS

A. Error Analysis

Four trends are apparent in the calibration results. First, the
hierarchical model outperforms each of the other two models
for every combination of prior σ and measure of error.
Second, the improvement of the hierarchical over the other
models decreases monotonically with the decrease in the
inﬂuence of the priors. Thirdly, as the prior σ values increase,
making them less informative to the search for the target dis-
tribution, the MoEs of all three models decrease signiﬁcantly.
Given that priors are known to inﬂuence posterior inferences
less as data sets become larger and more representative
of the phenomena they document [19], we can interpret
this correlation between choice of σ and ﬁtness of model
as indicating that the data set under consideration in this
work is not sufﬁcient in size to trust the under-regularized
posterior distributions for use at test time, in spite of having
a closer ﬁt to the data. The ultimate test of performance
remains direct observation of the simulated driving behavior
resulting from the application of each model, a task reserved
for future work. Finally, the prior inﬂuence trend in the
hierarchical model is relatively weak compared to the other
two models. The variant with the strongest regularization is
only marginally less similar to the true response distribution

Posterior Model Parameter Distributions: Individual parameters are presented in the ﬁrst row, Hierarchical in the second, and Pooled in the
Fig. 2.
third. In rows one and two, each of the 54 drivers’ unique distributions are grouped and arrayed by parameter. The effect of constraining individual means
and standard deviations to be sampled from a shared global mean and standard deviation is apparent when comparing the ﬁrst and second rows. Note the
differences in x-axis scale when measuring the visualizations, especially in the third row.

than the variants with weaker regularization, making that ﬁrst
variant more attractive at test time.

B. Analysis of Posterior Parameter Distributions

Differences in parameter distributions resulting from the
three modeling formulations can be seen in Figure 2. We con-
sider only those target joint distributions discovered using a
prior σ of 1. While distribution means vary quite dramatically
across all Individual parameters, Hierarchical parameters are
approximately zero-centered in all but two cases. Reasonably,
the means of the Pooled parameters appear to be near
averages of the corresponding Individual parameters, with
each deviating from zero. For desired deceleration, a large
variation across drivers is preserved among the Hierarchical
distributions, but they have been drawn an order of magni-
tude closer to zero than the Individual distributions.

VI. COMPARISON OF BAYESIAN AND GENETIC
ALGORITHM METHODS USING PARAMETER ESTIMATES

The optimization technique pitted against Bayesian cali-
bration in [3] is not considered to be the industry standard
technique [2]. To further strengthen the case for our method,
we compare it
to our experience applying the industry
standard method based on genetic algorithms. In particular,
we use the implementation of a differential evolutionary
algorithm available in TFP, with modiﬁcations made to allow
the search space to be constrained to limit explosions in
model parameter values. Rather than invest the necessary
time in performing one instance of cross-validation for
each iteration of algorithm hyperparameter tuning, we will
attempt to compare calibration procedures without analyt-
ically comparing the models that they produce. We instead
heuristically compare the estimates of model parameters that
they produce.

A. The Differential Evolution Algorithm

and data. The search through the parameter space proceeds
by iteratively evaluating the population, and then performing
two genetic operations on candidates: mutation (also known
as crossover) and recombination. These perturbations encour-
age improvement in candidate ﬁtness and exploration of the
space, respectively. The algorithm depends on two hyperpa-
rameters: a differential weight that controls the magnitude
of the mutation operation, and a crossover probability. Our
ﬁtness function of choice was the average of the root mean
squared errors per car-following instance, plus an additional
regularization term of the Euclidean distance between the
candidate parameter values and the literature values speciﬁed
in Table I. We introduce a third hyperparameter, lambda,
which scales the regularization term. To discover the best
solution achievable using the differential evolution algorithm,
the best possible set of hyperparameter values must be
identiﬁed with respect to the model and data. We used two
search methods, grid search and Bayesian Optimization.

B. Hyperparameter Tuning via Grid Search

The ﬁrst approach used to identify hyperparamaters that
could yield excellent model parameter estimates was that of
grid search. With grid search, we exhaustively test a ﬁxed set
of combinations of hyperparameter values, performing cali-
bration once for each combination. We considered crossover
probabilities between 0.1 and 0.9 with a step size of 0.2,
differential weights between 0.1 and 1.9 with a step size of
0.2, and lambda between 0 and 0.0001 with step sizes of
0.0000025. The best combination found yielded an average
RMSE of 0.118534155, outperforming the best Bayesian
calibration result. But, we observed that for every oucome
of the grid search, including the best one, at least one of the
model parameters exploded in value, making the calibration
results unconvincing with respect to the value ranges inferred
from [14].

The differential evolution (DE) algorithm [20] as imple-
mented in TensorFlow Probability is initialized using a set
of candidate solution parameter vectors called a population
(as opposed to the single vector speciﬁcation of the prior
in the Bayesian method). An objective function is used to
measure each candidate’s ﬁtness with respect to the model

C. Hyperparameter Tuning via Bayesian Optimization

Bayesian Optimization (BO) is one variant of sequential
model-based optimization (SBMO), a class of algorithms that
search a function space for functions with optimal outputs
given some particular inputs. In each iteration of a search,
SBMOs measure the utility of points in the parameter space

and choose the point thought to yield the best output of a
function in the function space evaluated on those parameters.
We used an implementation of Bayesian Optimization writ-
ten in Python and the scikit-learn machine learning library
to search for near-optimal DE algorithm hyperparameters.
Bayesian optimization can be considered to improve on grid
search because it can require fewer function evaluations and
because it can discover parameter values that fall inside
the gaps in continuous space that woudl go unevaluated in
a grid search. We found that the BO method discovered
hyperparameters with lower average population RMSE than
grid search, with the lowest being 3.5764458 compared to
grid search’s 12.985725 average, but that the absolute lowest
RMSE for an individual was higher than that of grid search:
0.33400983 versus 0.118534155.

VII. DISCUSSION AND FUTURE WORK

A. Implementation of Models with Varying Complexity

IDM is a moderately complex model, having 7 parameters
and a relatively simple functional form. The ﬂexibility of
TFP can be nicely demonstrated by implementing a less
complex model such as the piece-wise linear Newell ’02,
having just two parameters, and a more complex model
such as W99 with its ten estimable parameters and four
groups of conditionally-executable functions (one per driving
regime). These models would require unique implementation
of their calibration procedures relative to IDM. In the case
of Newell, time is an estimable parameter and requires that
at each iteration of inference a unique approximation of
”truly observed” responses be created for comparison with
predicted responses. In the case of W99, time steps must
be processed sequentially rather than in parallel because the
driving regime at each time step depends on the predicted
acceleration response at the previous time step. Further, the
non-trivially different models could help to demonstrate the
breadth of the applicability of the Bayesian approach.

B. Bayesian Model Validation and Comparison

1) Validation via Bayesian Information Criterion: The
standard best practice for validating statistical and machine
learning models is to perform either K-fold or leave-one-
out (LOO) cross-validation (CV), especially when a data
set is too small to expect a held-out test set to be equally
representative of the data distribution as the training set.
Cross-validation estimates a model’s predictive accuracy on
out-of-sample data by partitioning the total data set into K
subsets (with K = 1 corresponding to LOO-CV), perform-
ing K distinct model ﬁts with a disjoint subset held out
each time, using that held-out data subset to measure the
Kth model’s performance, and ﬁnally averaging over the
K models’ performance metrics. Among the probabilistic
models presented in this paper, this method is useful for
the hierarchical or
validating the pooled model but not
individual models, since the latter two include sub-models
with parameters estimated using only one data point. For-
tunately, the Bayesian framework offers validation metrics
called information criterion that asymptotically approximate

LOO-CV using the entire data set. Criterion of particular
interest are 1) the Watanabe-Akaike information criterion
(WAIC) [21], which operates on samples from the posterior
log likelihood distribution one observation at a time, and then
sums over all observations in the data set to yield a single
measure, and 2) Pareto smoothed importance sampling-based
LOO (PSIS-LOO), which improves on WAIC ”in the ﬁnite
case with weak priors or inﬂuential observations [22],” which
is precisely our scenario.

2) Validation via Bayesian Two-Sample Tests: The trafﬁc
simulator calibration literature contains at least 25 examples
of measures of error used to validate models. The closest to
a consensus on the most generally applicable MoE is around
the root mean squared error (RMSE). P-values have been
used in the CFM calibration literature to compare parameter
values estimated using data collected from different driving
and environment conditions [23]. In [24], the authors 1)
propose the use of maximum mean discrepancy two sample
tests to validate probabilistic models in a way that exposes
the regions where two compared distributions vary most
in a visualizeable way, and 2) explain how p-values as
interpreted from a Bayesian perspective more stringently
criticise a model than under a frequentist interpretation. We
interpret their description in the car-following context to
mean that a frequentist p-value indicates how unlikely a
set of data is to have been generated by a model given
some parameterization, and that a Bayesian p-value indicates
unlikeliness given the exact parameterization that resulted
from a calibration. Further, the Bayesian p-values can be
computed for distributions as well as point estimates (e.g.
distribution means), making comparisons between the results
of Bayesian calibration and an alternative optimization-based
calibration possible. We intend to explore the possibility that
Bayesian two-sample tests may serve as a good generalized
measure of error for car-following models.

3) Model-Based Comparison of Bayesian- and Genetic
Optimization-based Calibration Procedures: While compar-
isons made in this paper between our proposed calibration
procedure and a state of the art procedure were based on
arbitrary judgement of how convincing the model parameter
values resulting from those competing procedures were, a
more sound approach would be to base comparisons on
model validation metrics. Particularly, cross-validation could
be performed on the pooled Bayesian model and on the
genetic model, and then used to compare predictive accuracy
between the models rather than to validate the calibration
results of each model. Recall that use of the hierarchical
model is prohibited by our inclusion of layer 1 groups that
have only one data point.

C. Application in a Trafﬁc Simulator

Users of trafﬁc models and simulators commonly assume
that all drivers have sufﬁciently similar behavior to perform
a single parameter calibration and use the results to represent
average driving behavior. Some documented attempts to
deviate from this practice and instead perform one calibration
per driver have led to the simulator producing excessive

crashes and other unrealistic behavior [1]. One potential
explanation for this failure is the dramatic reduction is data
size when only a single driver is considered, leading to
an over-ﬁt model that does not generalize to the simulated
driving scenarios of interest. In future work, we intend to
show that our calibration procedure using a hierarchical sta-
tistical model not only ﬁts the data well, while allowing for
inter-driver variance, but also produces convincing simulated
trajectories with help from the use of default parameter
values as strong priors on the estimated values.

D. Can Simulations Derived from Ill-ﬁt Models be Trusted?

The utility of augmenting the randomness built into trafﬁc
simulators by incorporating the uncertainty in the data col-
lection and calibration procedures, as well as a sub-model’s
approximation of reality, has been explored in the past [7].
Not considered in past work, however, is the fact that a
probabilistic model ﬁt on a data set will almost certainly
not ﬁt perfectly. This is usually desired in the interest of
model generalization, but also means that combinations of
parameter values drawn from the posterior joint distribution
may yield unrealistic driving behavior. Intuitively, because
the product of Bayesian calibration is a joint distribution over
parameters and ﬁeld data, if the marginal posterior distribu-
tion over the data matched the observed distribution perfectly,
then the marginal distribution over the parameters would
necessarily produce behavior no different than that observed
in the data. If the ﬁt is not perfect, can reasonable simulations
be guaranteed? In future work, we intend to explore potential
answers to the question: How many parameter samples must
be drawn, fed into a simulator, and the resultant simulation
traces validated before one can feel conﬁdent that any sample
drawn will yield valid results?

E. Constructing a Large and Complete Data Set

While the ability to incorporate prior domain knowledge
into the calibration process is demonstrated in this work to be
a strength, particularly when time, budget and human capital
constraints result in a relatively small data set, analysis of
Bayesian calibration based on a larger and more complete
data set is preferred. Completeness is described in [23] to be
the property of representing all driving situations to which
any parameter in the model is relevant. We assume that our
NDS data set is sufﬁciently complete based on the length and
variety of routes and durations traveled by driver subjects
during data collection, but could make a more convincing
case for our method by performing a rigorous qualiﬁcation of
a data set. A larger data set would also make cross-validation
(CV) a more comfortable exercise. In this paper, we forego
the use of CV in order to avoid contributing additional
uncertainty into the calibration results. Even when using the
safest method of CV with respect to added uncertainty, leave-
one-out (LOO), when a data set is very small its one-left-out
subsets can yield inference results that deviate non-trivially
from those of the full set [18].

VIII. CONCLUSION

This paper presented a new method by which a car-
following model may be calibrated using Bayesian inference
and a hierarchical probabilistic model implemented in the
probabilistic programming language Edward2. The method
was framed using the Bayesian programming formalism.
Calibration results using a microscopic naturalistic driving
data set of 54 with varying numbers of CF instances and
varying instance lengths were shown to improve when using
a hierarchical formulation of the Intelligent Driver Model
over individual and pooled formulations. Moreover, the util-
ity of the incorporation of Bayesian priors as a form of
regularization into the calibration process was demonstrated.
Potential beneﬁts of a Bayesian approach to CFM validation
and comparison, and future directions of research, were also
discussed. To enable convenient reproduction and criticism
of our proposed method, and to encourage the exploration
of probabilistic programming within the transportation re-
the implementation
search and engineering communities,
source code has been made available on GitHub: https:
//github.com/foabodo/pwie.

REFERENCES

[1] C. D. Yang and T. Morton, “Trends of transportation simulation
and modeling based on a selection of exploratory advanced research
projects: Workshop summary report,” Ofﬁce of Operations Research
and Development, Federal Highway Administration, U.S. Department
of Transportation, Tech. Rep., Jul. 2012.

[2] B. Hammit, R. James, and M. Ahmed, “A case for online trafﬁc
simulation: Systematic procedure to calibrate car-following models
using vehicle data,” 11 2018, pp. 3785–3790.

[3] M. Rahman, M. Chowdhury, T. Khan, and P. Bhavsar, “Improving
the efﬁcacy of car-following models with a new stochastic parameter
estimation and calibration method,” IEEE Transactions on Intelligent
Transportation Systems, vol. 16, no. 5, pp. 2687–2699, Oct 2015.
[4] D. Higdon, M. Kennedy, J. C. Cavendish, J. A. Cafeo, and R. D. Ryne,
“Combining ﬁeld data and computer simulations for calibration and
prediction,” SIAM J. Sci. Comput.

[5] D. Tran, M. Hoffman, D. Moore, C. Suter, S. Vasudevan, A. Radul,
M. Johnson, and R. A. Saurous, “Simple, Distributed, and Accelerated
Probabilistic Programming,” arXiv e-prints, p. arXiv:1811.02091, Nov
2018.

[6] M. J. Bayarri, J. O. Berger, G. Molina, N. Rouphail, and J. Sacks,
“Assessing uncertainties in trafﬁc simulation: A key component in
model calibration and validation,” Transportation Research Record,
vol. 1876, pp. 32–40, 01 2004.

[7] G. Molina, M. J. Bayarri, and J. O. Berger, “Statistical inverse analysis
for a network microsimulator,” Technometrics, vol. 47, no. 4, pp. 388–
398, 2005.

[8] R. Zhong, K. Fu, A. Sumalee, D. Ngoduy, and W. Lam, “A
cross-entropy method and probabilistic sensitivity analysis framework
for calibrating microscopic trafﬁc models,” Transportation Research
Part C: Emerging Technologies, vol. 63, pp. 147 – 169, 2016.
[Online]. Available: http://www.sciencedirect.com/science/article/pii/
S0968090X15004222

[9] M. Treiber, A. Hennecke, and D. Helbing, “Congested trafﬁc states in
empirical observations and microscopic simulations,” Physical Review
E, vol. 62, pp. 1805–1824, 02 2000.

[10] G. Newell, “A simpliﬁed car-following theory: a lower order model,”
Transportation Research Part B: Methodological, vol. 36, no. 3, pp.
195 – 205, 2002. [Online]. Available: http://www.sciencedirect.com/
science/article/pii/S0191261500000448

[11] J. Diard, P. Bessi`ere, and E. Mazer, “A survey of probabilistic
models using the bayesian programming methodology as a unifying
framework,” 2003.

[12] L. E. Baum, T. E. Petrie, G. Soules, and N. R. Weiss, “A maximization
technique occurring in the statistical analysis of probabilistic functions
of markov chains,” 1970.

[13] J. Salvatier, T. V Wiecki, and C. Fonnesbeck, “Probabilistic program-

ming in python using pymc3,” 01 2016.

[14] B. Ferreira, F. A. F. Braz, A. A. F. Loureiro, and S. V. A. Campos, “A
probabilistic model checking analysis of vehicular ad-hoc networks,”
in 2015 IEEE 81st Vehicular Technology Conference (VTC Spring),
May 2015, pp. 1–7.

[15] P. Gipps, “A behavioural car-following model for computer simula-
tion,” Transportation Research Part B: Methodological, vol. 15, pp.
105–111, 04 1981.

[16] J. Barcelo, Fundamentals of Trafﬁc Simulation, 01 2010.
[17] N. Kheterpal, K. Parvate, C. Wu, A. Kreidieh, Eug`ene, E. Vinitsky,
and A. M. Bayen, “Flow: Deep reinforcement learning for control in
sumo,” 2018.

[18] A. Vehtari, A. Gelman, and J. Gabry, “Practical bayesian model
evaluation using leave-one-out cross-validation and waic,” Statistics
and Computing, vol. 27, no. 5, pp. 1413–1432, Sep 2017. [Online].
Available: https://doi.org/10.1007/s11222-016-9696-4

[19] A. Gelman, Prior Distribution. American Cancer Society, 2006.
[Online]. Available: https://onlinelibrary.wiley.com/doi/abs/10.1002/
9780470057339.vap039

[20] D. Karaboa and S. Okdem, “A simple and global optimization al-
gorithm for engineering problems: Differential evolution algorithm,”
Turkish Journal of Electrical Engineering and Computer Sciences,
vol. 12, pp. 53–60, 01 2004.

[21] S. Watanabe, “Asymptotic equivalence of bayes cross validation and
widely applicable information criterion in singular learning theory,” J.
Mach. Learn. Res.

[22] A. Vehtari, A. Gelman, and J. Gabry, “Practical bayesian model
evaluation using leave-one-out cross-validation and waic,” Statistics
and Computing, vol. 27, no. 5, pp. 1413–1432, Sep 2017. [Online].
Available: https://doi.org/10.1007/s11222-016-9696-4

[23] B. Hammit, “Methods to explore driving behavior heterogeneity using
shrp2 naturalistic driving study trajectory-level driving data,” Ph.D.
dissertation, University of Wyoming, 9 2018.

[24] J. R. Lloyd and Z. Ghahramani, “Statistical model criticism using
kernel two sample tests,” in Proceedings of the 28th International
Conference on Neural Information Processing Systems - Volume 1,
ser. NIPS’15. Cambridge, MA, USA: MIT Press, 2015, pp. 829–
837. [Online]. Available: http://dl.acm.org/citation.cfm?id=2969239.
2969332

