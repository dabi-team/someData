9
1
0
2

y
a
M
9
2

]

G
L
.
s
c
[

2
v
6
2
2
1
1
.
5
0
9
1
:
v
i
X
r
a

Induction of Non-Monotonic Rules From Statistical
Learning Models Using High-Utility Itemset Mining

Farhad Shakerin
Department of Computer Science
The University of Texas at Dallas
Richardson, TX 75080
farhad.shakerin@utdallas.edu

Gopal Gupta
Department of Computer Science
The University of Texas at Dallas
Richardson, TX 75080
gupta@utdallas.edu

Abstract

We present a fast and scalable algorithm to induce non-monotonic logic programs
from statistical learning models. We reduce the problem of search for best clauses
to instances of the High-Utility Itemset Mining (HUIM) problem. In the HUIM
problem, feature values and their importance are treated as transactions and utilities
respectively. We make use of TreeExplainer, a fast and scalable implementa-
tion of the Explainable AI tool SHAP, to extract locally important features and
their weights from ensemble tree models. Our experiments with UCI standard
benchmarks suggest a signiﬁcant improvement in terms of classiﬁcation evalua-
tion metrics and running time of the training algorithm compared to ALEPH, a
state-of-the-art Inductive Logic Programming (ILP) system.

1

Introduction

Dramatic success of machine learning has led to a torrent of Artiﬁcial Intelligence (AI) applications.
However, the effectiveness of these systems is limited by the machines’ current inability to explain
their decisions and actions to human users. That’s mainly because the statistical machine learning
methods produce models that are complex algebraic solutions to optimization problems such as risk
minimization or geometric margin maximization. Lack of intuitive descriptions makes it hard for
users to understand and verify the underlying rules that govern the model. Also, these methods cannot
produce a justiﬁcation for a prediction they arrive at for a new data sample.

The Explainable AI program [1] aims to create a suite of machine learning techniques that: a) Produce
more explainable models, while maintaining a high level of prediction accuracy. b) Enable human
users to understand, appropriately trust, and effectively manage the emerging generation of artiﬁcially
intelligent partners.

Inductive Logic Programming (ILP) [2] is one Machine Learning technique where the learned model
is in the form of logic programming rules (Horn Clauses) that are comprehensible to humans. It
allows the background knowledge to be incrementally extended without requiring the entire model
to be re-learned. Meanwhile, the comprehensibility of symbolic rules makes it easier for users to
understand and verify induced models and even reﬁne them.

The ILP learning problem can be regarded as a search problem for a set of clauses that deduce the
training examples. The search is performed either top down or bottom-up. A bottom-up approach
builds most-speciﬁc clauses from the training examples and searches the hypothesis space by using
generalization. This approach is not applicable to large-scale datasets, nor it can incorporate negation-
as-failure into the hypotheses. A survey of bottom-up ILP systems and their shortcomings can be
found at [3]. In contrast, top-down approach starts with the most general clause and then specializes
it. A top-down algorithm guided by heuristics is better suited for large-scale and/or noisy datasets [4].

Preprint. Under review.

 
 
 
 
 
 
Figure 1: Optimal sequential covering with 3 Clauses (Left), Sub-Optimal sequential covering with 4
Clauses (Right)

The FOIL algorithm by Quinlan [5] is a popular top-down algorithm. FOIL uses heuristics from
information theory called weighted information gain. The use of a greedy heuristic allows FOIL to
run much faster than bottom-up approaches and scale up much better. However, scalability comes at
the expense of losing accuracy if the algorithm is stuck in a local optima and/or when the number
of examples is insufﬁcient. Figure 1 demonstrates how the local optima results in discovering
sub-optimal rules that does not necessarily coincide with the real underlying sub-concepts of the
data. Additionally, since the objective is to learn pure clauses (i.e., clauses with zero or few negative
example coverage) the FOIL algorithm often discovers too many clauses each of which only cover a
few examples. Discovery of a huge number of clauses reduces the interpretability and also it does not
generalize well on the test data.

Unlike top-down ILP algorithms, statistical machine learning algorithms are bound to ﬁnd the relevant
features because they optimize an objective function with respect to global constraints. This results
in models that are inherently complex and cannot explain what features account for a classiﬁcation
decision on any given data sample. The Explainable AI techniques such as LIME [6] and SHAP
[7] have been proposed that provide explanations for any given data sample. Each explanation is a
set of feature-value pairs that would locally determine what features and how strongly each feature,
relative to other features, contributes to the classiﬁcation decision. To capture the global behavior of
a black-box model, however, an algorithm needs to group similar data samples (i.e., data samples
for which the same set of feature values are responsible for the choice of classiﬁcation) and cover
them with the same clause. While in FOIL, the search for a clause is guided by heuristics, in our
novel approach, we adapt High Utility Item-set Mining (HUIM) [8] — a popular technique from
data mining — to ﬁnd clauses. We call this algorithm SHAP-FOLD from here on. The advantage of
SHAP-FOLD over heuristics-based algorithms such as FOIL is that:

1. SHAP-FOLD does not get stuck in a local optima
2. SHAP-FOLD distinguishes exceptional cases from noisy samples
3. SHAP-FOLD learns a reasonable number of non-monotonic rules in the form of default
theories that would understandably capture the global behavior of any black-box model

4. SHAP-FOLD is fast and scalable compared to conventional ILP algorithms

This paper makes the following novel contribution: We present a new ILP algorithm capable of
learning non-monotonic logic programs from local explanations of black-box models provided by
SHAP. Our experiments on UCI standard benchmark data sets suggest that SHAP-FOLD outperforms
ALEPH in terms of classiﬁcation evaluation metrics, running time, and providing more concise
explanations measured in terms of number of clauses induced.

2 Background

2.1

Inductive Logic Programming

Inductive Logic Programming (ILP) [2] is a subﬁeld of machine learning that learns models in the
form of logic programming rules (Horn Clauses) that are comprehensible to humans. This problem is
formally deﬁned as:
Given

1. a background theory B, in the form of an extended logic program, i.e., clauses of the form
h ← l1, ..., lm, not lm+1, ..., not ln, where l1, ..., ln are positive literals and not denotes
negation-as-failure (NAF) [9] and B has no even cycle

2

2. two disjoint sets of ground target predicates E+, E− known as positive and negative exam-

ples respectively

3. a hypothesis language of function free predicates L, and a reﬁnement operator ρ under

θ − subsumption [10] that would disallow even cycles.

Find a set of clauses H such that:

• ∀e ∈ E+, B ∪ H |= e
• ∀e ∈ E−, B ∪ H (cid:54)|= e
• B ∧ H is consistent.

2.2 The FOIL Algorithm

FOIL is a top-down ILP algorithm that follows a sequential covering scheme to induce a hypotheses.
The FOIL algorithm is summarized in Algorithm 1. This algorithm repeatedly searches for clauses
that score best with respect to a subset of positive and negative examples, a current hypothesis and a
heuristic called information gain (IG).

c ← (target :- true.)
while (|E−| > 0 ∧ c.length < max_length) do

for all c(cid:48) ∈ ρ(c) do

Algorithm 1 Summarizing the FOIL algorithm
Input: target, B, E+, E−
Output: Initialize H ← ∅
1: while (|E+| > 0) do
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: end while
13: return H

end while
add ˆc to H
E+ ← E+ \ covers(ˆc, E+)

end for
let ˆc be the c(cid:48) ∈ ρ(c) with the best score
E− ← covers(ˆc, E−)

compute score(E+, E−, H ∪ {c(cid:48)}, B)

The inner loop searches for a clause with the highest information gain using a general-to-speciﬁc
hill-climbing search. To specialize a given clause c, a reﬁnement operator ρ under θ-subsumption
[10] is employed. The most general clause is p(X1, ..., Xn) ← true. where the predicate p/n is the
predicate being learned and each Xi is a variable. The reﬁnement operator specializes the current
clause h ← b1, ...bn. This is realized by adding a new literal l to the clause yielding h ← b1, ...bn, l.
The heuristic based search uses information gain.

2.3 SHAP

SHAP [7] (SHapley Additive exPlanations) is a uniﬁed approach with foundations in game theory to
explain the output of any machine learning model in terms of its features’ contributions. To compute
each feature i’s contribution, SHAP requires retraining the model on all feature subsets S ⊆ F , where
F is the set of all features. For any feature i, a model fS∪{i} is trained with the feature i present, and
another model fS is trained with feature i eliminated. Then, the difference between predictions is
computed as follows: fS∪{i}(xS∪{i}) − fS(xS), where xS represents sample’s feature values in S.
Since the effect of withholding a feature depends on other features in the model, the above differences
are computed for all possible subsets of S ⊆ F \ {i} and their average taken. The weighted average
of all possible differences (a.k.a Shapley value) is used as feature importance. The Equation 1 shows
how Shapley value associated with each feature value is computed:

(cid:88)

φi =

S⊆F \{i}

|S|!(|F | − |S| − 1)!
|F |!

(cid:20)
fS∪{i}(xS∪{i}) − fS(xS)

(cid:21)

(1)

3

Given a dataset and a trained model, SHAP outputs a matrix with the shape (#samples, #f eatures)
representing the Shapley value of each feature for each data sample. Each row sums to the difference
between the model output for that sample and the expected value of the model output. This difference
explains why the model is inclined to predict a speciﬁc class outcome.

Example 1 The UCI heart dataset contains features such as patient’s blood pressure, chest pain,
thallium test results, number of major vessels blocked, etc. The classiﬁcation task is to predict whether
the subject suffers from heart disease or not. Figure 2 shows how SHAP would explain a model’s
prediction over a data sample.

For this individual, SHAP explains why the model predicts heart disease by returning the top features
along with their Shapley values (importance weight). According to SHAP, the model predicts “heart
disease" because of the values of “thalium test" and “maximum heart rate achieved" which push the
prediction from the base (expected) value of 0.44 towards a positive prediction (heart disease). On
the other hand, the feature “chest pain" would have pushed the prediction towards negative (healthy),
but it is not strong enough to turn the prediction.

Figure 2: Shap Values for A UCI Heart Prediction

The categorical features should be binarized before any model is trained. Binarization (a.k.a one-hot
encoding) is the process of transforming each categorical feature with domain of cardinality N ,
into N new binary predicates (features).In Example 1, chest pain level is a categorical feature with
4 different values in the set {1, 2, 3, 4}. Type 4 chest pain indicates asymptomatic pain and is a
serious indication of a heart condition. In this case, binarization results in 4 different predicates. The
“thalium test" is also a categorical feature with outcomes in the set {3,6,7}. Any outcome other than 3,
indicates a defect (6 for ﬁxed and reversible for 7). In case of Example 1, SHAP determines that the
feature “thal_7" with outcome of 1 (True), pushes the prediction towards heart disease. To reﬂect this
fact in our ILP algorithm, for any person X, the predicate thal(X,7) is introduced. Also, SHAP
indicates that the binary feature “chest_pain_4" with value 0 (False), pushes the prediction towards
healthy.

2.4 High-Utility Itemset Mining

The problem of High-Utility Itemset Mining (HUIM) is an extension of an older problem in data
mining known as frequent pattern mining [11]. Frequent pattern mining is meant to ﬁnd frequent
patterns in transaction databases. A transaction database is a set of records (transactions) indicating
the items purchased by customers at different times. A frequent itemset is a group of items that
appear in many transactions. For instance, {noodles, spicy sauce} being a frequent itemset, can be
used to take marketing decisions such as co-promoting noodles with spicy sauce. Finding frequent
itemsets is a well-studied problem with an efﬁcient algorithm named Apriori [12]. However, in some
applications frequency is not always the objective. For example, the pattern {milk,bread} may be
highly frequent, but it may yield a low proﬁt. On the other hand, a pattern such as {caviar, champagne}
may not be frequent but may yield a high proﬁt. Hence, to ﬁnd interesting patterns in data, other
aspects such as proﬁtability is considered.

Mining high utility itemsets can be viewd as a generalization of the frequent itemset mining where
each item in each transaction has a utility (importance) associated with it and the goal is to ﬁnd
itemsets that generate high proﬁt when for instance, they are sold together. The user has to provide a
value for a threshold called minimum utility. A high utility itemset mining algorithm outputs all the
high-utility itemsets with at least minimum utility proﬁt. The HUIM problem is formally deﬁned as
follows:

• I = {i1, i2, ..., im} is a set of items.

4

• D = {T1, T2, ..., Tn} be a transaction database where each transaction Ti ∈ D is a subset

of I.

• u(ip, Tq) denotes the utility (proﬁt) for item ip in transaction Tq. For example u(b, T0) = 10

in Example from Table 1.

• u(X, Tq), utility of an itemset X is deﬁned as (cid:80)

is a k-itemset, X ⊆ Tq and 1 ≤ K ≤ m.
• u(X), utility of an itemset X is deﬁned as (cid:80)

Tq∈D∧X⊆Tq

u(X, Tq).

ip∈X u(ip, Tq), where X = {i1, i2, ..., iK}

An itemset X is a high utility itemset if u(X) ≥ ε, where X ⊆ I and ε is the minimum utility
threshold, otherwise, it is a low utility itemset. Table 1 shows a transaction database consisting of
5 transactions. Left columns shows the transaction Identiﬁer. Middle column contains the items
included in each transaction and right column contains each item’s respective proﬁt. If the ε is set to
25, the result of a high utility itemset mining algorithm is shown in the right table in Table 1.

Several high utility itemset mining algorithms have been proposed (e.g., UMining, Two-Phase, IHUP,
UP-Growth, etc). A complete survey of these algorithms can be found in [13]. The differences
between these algorithms lies in the data structures, strategies that are employed for searching high
utility itemsets (DFS vs. BFS), and how they prune the unpromising paths.

Transactions
T0
T1
T2
T3
T4

Items
a b c d e
b c d e
a c d
a c e
b c e

Proﬁts
5 10 1 6 3
8 3 6 3
5 1 2
10 6 6
4 2 3

High Utility Itemsets

{a, c}: 28
{a, b, c, d, e}: 25
{b, c, d}: 34
{b, c, e}: 37
{b, d, e}: 36
{c, e}: 27

{a, c, e}: 31
{b, c}: 28
{b, c, d, e}: 40
{b, d}: 30
{b, e}: 31

Table 1: Left: A High Utility Itemset Problem Instance. Right: Solution for minutil = 25

The downside of this approach is that it requires the decision maker to choose a minimum utility
threshold value for discovering interesting itemsets. This is quite challenging as too low a choice
of ε results in too many itemsets and too high a choice of ε results in too few itemsets. In order to
address this issue, Top-K High Utility Itemset (THUI) mining problem was introduced [14], where
the user wants to discover the k itemsets having the highest utility. A top-k high-utility itemset mining
algorithm works as follows: It initially sets an internal ε threshold to 0, and starts to explore the
search space. Then, as soon as k high utility itemsets are found, the internal ε is raised to the utility
of the pattern having the lowest utility among the current top-k patterns. Then, the search continues
and for each high utility itemset found, the set of the current top-k pattern is updated as well as the
internal ε. When the algorithm terminates, it returns the set of the top-k high utility itemsets.

3 SHAP-FOLD Algorithm

In this section we present the SHAP-FOLD algorithm. SHAP-FOLD learns a concept in terms of a
default theory [15]. A default theory is a non-monotonic logic theory to formalize reasoning with
default assumptions in absence of complete information. In Logic Programming, default theories are
represented using negation-as-failure (NAF) semantics [9].

Example 2 The following default theory “Normally, birds ﬂy except penguins which do not", is
represented as:

flies(X) :- bird(X), not ab_bird(X).
ab_bird(X) :- penguin(X).

This default theory is read as: “For every object X, X ﬂies if X is a bird and is not abnormal. For
every object X, X is an abnormal bird if it is a penguin".

The SHAP-FOLD algorithm adapts the FOIL style sequential covering scheme. Therefore, it itera-
tively learns single clauses, until all positive examples are covered. To learn one clause, SHAP-FOLD

5

ﬁrst ﬁnds common patterns among positive examples. If the resulted clause (default) covers a signiﬁ-
cant number of negative examples, SHAP-FOLD swaps the current positive and negative examples
and recursively calls the algorithm to learn common patterns in negative examples (exceptions). As
shown in Example 2, the exceptions are ruled out using negation-as-failure. Learning exceptions
allow our SHAP-FOLD algorithm to distinguish between noisy samples and exceptional cases.

To search for “best" clause, SHAP-FOLD tightly integrates the High Utility Itemset Mining (HUIM)
and the SHAP technique. In this novel approach, the SHAP system is employed to ﬁnd relevant
features as well as their importance. To ﬁnd the “best" clause SHAP-FOLD creates instances of HUIM
problem. Each instance, contains a subset of examples represented as a set of “transactions" as shown
in Table 1. Each “transaction" contains a subset of feature values along with their corresponding
utility (i.e., feature importance). The feature importance φi ∈ [0, 1] for all i distinct feature values.
Therefore, a high-utility itemset in any set of “transactions" represents strongest features that would
contribute to the classiﬁcation of a signiﬁcant number of examples, because, otherwise, that itemset
would not have been selected as a high-utility itemset. To ﬁnd the itemset with highest utility, the
HUIM algorithm Top-K [14] is invoked with K set to 1.

SHAP-FOLD takes a target predicate name (G), a tabular dataset (D) with m rows and two different
labels +1 and −1 for positive examples and negative examples respectively. E+ and E− represent
these examples in the form of target atoms. It also takes a “transaction" database. Each row of
T contains a subset of an example’s feature-values ((cid:126)zi) along with their Shapley values ((cid:126)φi). This
“transaction" database is passed along to create HUIM instance and ﬁnd the itemset with highest
utility every time Top-K algorithm is invoked. The summary of SHAP-FOLD’s pseudo-code is shown
in Algorithm 2.

In the function FOIL (lines 1-8), sequential covering loop to cover positive examples is realized.
On every iteration, a default clause (and possibly multiple exceptions) - denoted by Cdef +exc - is
learned and added to the hypothesis. Then, the covered examples are removed from the remaining
examples. In the function LEARN_ONE_RULE (lines 9-17), Top-K algorithm with k = 1 is invoked
and a high-utility itemset (i.e., a subset of features-values and their corresponding Shapley values) is
retrieved. These subset of features create the default part of a new clause. Next, if the default clause
covers false positives, the current positive and negative examples are swapped to learn exceptions. In
the function LEARN_EXCEPTIONS (lines 18 - 25), the algorithm recursively calls itself to learn
clauses that would cover exceptional patterns. When the recursive call returns, for all learned clauses,
their head is replaced by an abnormality predicate. To manufacture the complete default theory,
the abnormality predicate preceded by negation-as-failure (not) is added to the default part. The
following example shows how SHAP-FOLD learns a concise non-monotonic logic program from an
XGBoost trained model.

Example 3 The “UCI Cars" dataset has the information about evaluating 1728 different cars and
their acceptability based on features such as buying price, maintenance cost, trunk size, capacity,
number of doors, and safety. SHAP-FOLD generates the following program from a trained XGBoost
model:

DEF(1):
EXCEPTIONS(1):

acceptable(A):- safety(A,high), not ab0(A).

ab0(A):- persons(A,2).
ab0(A):- maintenance(A,very_high).

DEF(2):
EXCEPTIONS(2):

acceptable(A):- persons(A,4), safety(A,medium), not ab1(A).
ab1(A):- price(A,very_high), trunk(A,small).
ab1(A):- price(A,high), maintenance(A,very_high).

DEF(3):

acceptable(A):- trunk(A,big),safety(A,medium), persons(A,>5).

On ﬁrst iteration, the clause DEF(1) (i.e., acceptable(A) :- safety(A,high) is generated.
Since it covers a signiﬁcant number of negative examples, E+ and E− are swapped and algorithm re-
cursively calls itself. Inside LEARN_EXCEPTIONS, the recursive call returns with EXCEPTIONS(1)
clauses. The head predicate ab0 replaces their head and ﬁnally in line 24, the negation of abnormality
is appended to the default to create a complete default clause. According to the discovered default
clause, a car is considered acceptable if its safety is high, unless it can only ﬁt two person (too small)
or its maintenance cost is high. Similarly, the DEF(2) clause states that a car is acceptable if it
can ﬁt 4 person and its safety is medium, unless its price is too high and its trunk is small. Another

6

exceptional case is established by high price and very high maintenance. The third clause default
part does not cover any false positives, hence no exception clause is learned.

There are some technicalities that should be pointed out: (1) The numeric features should be
discretized (i.e., by splitting them into ﬁxed number of intervals). This restriction is imposed by
SHAP technique. (2) Inspired by FOIL implementation, the “if statement" in line 13 of the algorithm
is realized in terms of an empirical accuracy (e.g., % 85) to avoid over-ﬁtting. This would allow some
noise error after learning the exceptions.

Algorithm 2 Summary of SHAP-FOLD Algorithm
Input: G: Target Predicate to Learn
B: Background Knowledge
D = { ((cid:126)x1, y1), ..., ((cid:126)xm, ym)} : yi ∈ {−1, +1}
E+ = { (cid:126)xi | (cid:126)xi ∈ D ∧ yi = 1} : Positive Examples
E− = { (cid:126)xi | (cid:126)xi ∈ D ∧ yi = −1}: Negative Examples
T = { ((cid:126)zi, (cid:126)φi) | (cid:126)zi ⊆ (cid:126)xi ∧ (cid:126)xi ∈ D ∧ (cid:126)φi is (cid:126)zi’s Shapley values }

(cid:46) default clauses
(cid:46) exceptions/abnormal clauses

(cid:46) returns sets of defaults and exceptions

Output: D = { C1, ..., Cn}

AB = { ab1, ..., abm}

end while
return D, AB

Cdef +exc ← LEARN_ONE_RULE(E+,E−)
E+ ← E+ \ covers(Cdef +exc, E+, B)
D ← D ∪ {Cdef +exc}

1: function FOIL(E+, E−)
while (|E+| > 0) do
2:
3:
4:
5:
6:
7:
8: end function
9: function LEARN_ONE_RULE(E+, E−)
10:
11:
12:
13:
14:
15:
16:
17: end function
18: function LEARN_EXCEPTIONS(Cdef , E+, E−)
19:
20:
21:
22:
23:
24:
25: end function

AB ← AB ∪ {abab_index :- bodyof (Ci)}

end if
return Cdef +exc

- let Item-Set be {(f1, ...fn), (φ1, ..., φn)} ← TOP-K(K=1,E+,T) (cid:46) Call to HUIM algorithm
Cdef ← (G :- f1, ..., fn)
F P ← covers(Cdef , E−)
if F P > 0 then

(cid:46) FP denotes False Positives

Cdef +exc ← LEARN_EXCEPTIONS(Cdef , E−, E+)

{C1, ..., Ck} ← FOIL(E+, E−)
ab_index ← GEN ERAT E_U N IQU E_AB_IN DEX()
for i ← 1 to k do

(cid:46) Recursive Call After Swapping

end for
return Cdef +exc ← (headof (Cdef ) :- bodyof (Cdef ), not(abab_index))

4 Experiments

In this section, we present our experiments on UCI standard benchmarks [16]. The ALEPH system
[17] is used as the baseline. ALEPH is a state-of-the-art ILP system that has been widely used in
prior work. To ﬁnd a rule, ALEPH starts by building the most speciﬁc clause, which is called the
“bottom clause", that entails a seed example. Then, it uses a branch-and-bound algorithm to perform
a general-to-speciﬁc heuristic search for a subset of literals from the bottom clause to form a more
general rule. We set ALEPH to use the heuristic enumeration strategy, and the maximum number
of branch nodes to be explored in a branch-and-bound search to 500K. We also conﬁgured Aleph
to allow up to 50 false examples covered by each clause while each clause should be at least 80 %
accurate. We use the standard metrics including precision, recall, accuracy and F1 score to measure
the quality of the results.

7

Data Set
cars
credit-a
breast-w
kidney
voting
autism
ionosphere
heart
kr vs. kp

Shape
(1728, 6)
(690, 15)
(699, 9)
(400, 24)
(435, 16)
(704, 17)
(351, 34)
(270, 13)
(3196, 36)

Aleph

Precision Recall Accuracy
0.63
0.72
0.87
0.92
0.94
0.43
0.87
0.75
0.99

0.83
0.78
0.92
0.96
0.97
0.73
0.89
0.76
0.92

0.85
0.78
0.93
0.93
0.95
0.79
0.85
0.78
0.95

Algorithm

F1
0.72
0.75
0.89
0.94
0.95
0.53
0.88
0.75
0.95

Time (s)
73
180
10
5
25
476
113
28
836

SHAP-FOLD
Precision Recall Accuracy
0.94
0.74
0.95
0.95
0.98
0.83
0.91
0.83
0.99

0.84
0.90
0.92
0.93
0.98
0.96
0.87
0.76
0.92

0.93
0.84
0.95
0.93
0.95
0.95
0.85
0.81
0.95

F1
0.89
0.81
0.93
0.94
0.96
0.89
0.89
0.80
0.95

Time (s)
5
7
2
1
1
2
2
1
8

Table 2: Evaluation of SHAP_FOLD on UCI Datasets

The SHAP-FOLD requires a statistical model as input to the SHAP technique. While computing
the Shapley values is slow, there is a fast and exact implementation called TreeExplainer [18] for
ensemble tree models. XGBoost [19] is a powerful ensemble tree model that perfectly works with
TreeExplainer. Thus, we trained an XGBoost model for each of the reported experiments in this paper.
Table 2 presents the comparison between ALEPH and SHAP_FOLD on classiﬁcation evaluation of
each UCI dataset. The best performer is highlighted with boldface font. In terms of the running time,
SHAP-FOLD scales up much better. In case of “King-Rook vs. King-Pawn", while ALEPH discovers
283 clauses in 836 seconds, SHAP-FOLD does much better. It ﬁnishes in 8 seconds discovering
only 3 clauses that cover the knowledge underlying the model. Similarly, in case of “UCI kidney",
SHAP-FOLD ﬁnds fewer signiﬁcantly fewer clauses.Thus, not only SHAP-FOLD’s performance is
much better, it discovers more succinct programs. Also, scalability is a major problem in ILP, that
our SHAP-FOLD algorithm solves: its execution performance is orders of magnitude better.

SHAP-FOLD almost always achieves a higher Recall score.This suggests that the proper use of
negation-as-failure leads to better coverage. The absence of negation from ALEPH hypothesis space
forces the algorithm to create too speciﬁc clauses which leaves many positive examples uncovered. In
contrast, our SHAP-FOLD algorithm emphasizes on better coverage via ﬁnding high-utility patterns
of important features ﬁrst. If the result turns out to cover too many negative examples to tolerate, by
learning exceptions and ruling them out (via the same algorithm applied recursively), SHAP-FOLD
maintains the same coverage as it rules out exceptional negative examples.

SHAP-FOLD is a Java application that interfaces SWI-Prolog [20] using JPL library. The HUIM
instances are solved by calling TKU from the SPMF Data mining library [21].

5 Related Works and Conclusions

A survey of ILP can be found in [22]. In ILP community, researchers have tried to combine statistical
methods with ILP techniques. Support Vector ILP [23] uses ILP hypotheses as kernel in dual form of
the SVM algorithm. kFOIL [24] learns an incremental kernel for SVM algorithm using a FOIL style
specialization. nFOIL [25] integrates the Naive-Bayes algorithm with FOIL. The advantage of our
research over all of the above mentioned research work is that, ﬁrst it is model agnostic, second it is
scalable thanks to the fast and scalable HUIM algorithm and SHAP TreeExplainer, third it enjoys the
power of negation-as-failure which is absent from the above mentioned works.

In this paper, we presented a fast and scalable ILP algorithm to induce default theories from statistical
machine learning models. In this novel approach, irrelevant features are ﬁltered out by SHAP, a
technique from explainable AI. Then, the problem of searching for “best" clause is reduced to a
High-Utility Itemset Mining problem. Our experiments on benchmark datasets suggest a signiﬁcant
improvement in terms of the classiﬁcation evaluation metrics and running time.

There are number of directions for future work: (i) Incorporating Relational features, and learning
probabilistic logic programs that are currently absent from the research presented in this paper (ii)
extending non-monotonic logic programs to image classiﬁcation explanation domain.

8

Acknowledgments

Authors are partially supported by NSF Grant IIS 1718945. We would like to cordially thank S.
Mohammad Mirbagheri for bringing HUIM algorithms to our attention. We also thank the members of
Applied Logic, Programming-languages & Systems (ALPS) lab for useful discussions and feedback.

References

[1] David Gunning. Explainable artiﬁcial intelligence (xai), https://www.darpa.mil/program/

explainable-artificial-intelligence, 2015.

[2] Stephen Muggleton. Inductive logic programming. New Gen. Comput., 8(4):295–318, February

1991.

[3] Chiaki Sakama. Induction from answer sets in nonmonotonic logic programs. ACM Trans.

Comput. Log., 6(2):203–231, 2005.

[4] Qiang Zeng, Jignesh M. Patel, and David Page. Quickfoil: Scalable inductive logic program-

ming. Proc. VLDB Endow., 8(3):197–208, November 2014.

[5] J. Ross Quinlan. Learning logical deﬁnitions from relations. Machine Learning, 5:239–266,

1990.

[6] Marco Tulio Ribeiro, Sameer Singh, and Carlos Guestrin. "why should I trust you?": Explaining
In Proceedings of the 22nd ACM SIGKDD 2016, pages

the predictions of any classiﬁer.
1135–1144, 2016.

[7] Scott M Lundberg and Su-In Lee. A uniﬁed approach to interpreting model predictions. In

Advances in Neural Information Processing Systems, pages 4765–4774, 2017.

[8] Wensheng Gan, Jerry Chun-Wei Lin, Philippe Fournier-Viger, Han-Chieh Chao, Tzung-Pei
Hong, and Hamido Fujita. A survey of incremental high-utility itemset mining. Wiley Interdiscip.
Rev. Data Min. Knowl. Discov., 8(2), 2018.

[9] Chitta Baral. Knowledge representation, reasoning and declarative problem solving. Cambridge

University Press, Cambridge, New York, Melbourne, 2003.

[10] G. D. Plotkin. A further note on inductive generalization, in machine intelligence, volume 6,

pages 101-124, 1971.

[11] Charu C. Aggarwal and Jiawei Han. Frequent Pattern Mining. Springer Publishing Company,

Incorporated, 2014.

[12] Rakesh Agrawal and Ramakrishnan Srikant. Fast algorithms for mining association rules in
large databases. In Proceedings of the 20th International Conference on Very Large Data Bases,
VLDB ’94, pages 487–499, San Francisco, CA, USA, 1994. Morgan Kaufmann Publishers Inc.

[13] Philippe Fournier-Viger, Jerry Chun-Wei Lin, Tin Truong-Chi, and Roger Nkambou. A Survey

of High Utility Itemset Mining, pages 1–45. Springer International Publishing, Cham, 2019.

[14] Vincent S Tseng, Cheng-Wei Wu, Philippe Fournier-Viger, and S Yu Philip. Efﬁcient algorithms
for mining top-k high utility itemsets. IEEE Transactions on Knowledge and data engineering,
28(1):54–67, 2016.

[15] Farhad Shakerin, Elmer Salazar, and Gopal Gupta. A new algorithm to automate inductive

learning of default theories. TPLP, 17(5-6):1010–1026, 2017.

[16] M. Lichman. UCI,ml repository, http://archive.ics.uci.edu/ml, 2013.

[17] A. Srinivasan. The Aleph Manual, http: // web. comlab. ox. ac. uk/ oucl/ research/

areas/ machlearn/ Aleph/ , 2001.

[18] Scott M Lundberg, Gabriel G Erion, and Su-In Lee. Consistent individualized feature attribution

for tree ensembles. arXiv preprint arXiv:1802.03888, 2018.

9

[19] Tianqi Chen and Carlos Guestrin. Xgboost: A scalable tree boosting system. In Proceedings of

the 22Nd ACM SIGKDD, KDD ’16, pages 785–794, 2016.

[20] Jan Wielemaker. SWI-Prolog Home Page. http://www.swi-prolog.org/.

[21] Philippe Fournier-Viger, Jerry Chun-Wei Lin, Antonio Gomariz, Ted Gueniche, Azadeh Soltani,
Zhihong Deng, and Hoang Thanh Lam. The SPMF open-source data mining library version 2.
In ECML/PKDD (3), volume 9853 of LNCS, pages 36–40. Springer, 2016.

[22] Stephen Muggleton, Luc Raedt, David Poole, Ivan Bratko, Peter Flach, Katsumi Inoue, and

Ashwin Srinivasan. Ilp turns 20. Mach. Learn., 86(1):3–23, January 2012.

[23] Stephen Muggleton, Huma Lodhi, Ata Amini, and Michael J. E. Sternberg. Support vector
inductive logic programming. In Achim Hoffmann, Hiroshi Motoda, and Tobias Scheffer,
editors, Discovery Science, Berlin, Heidelberg, 2005. Springer Berlin Heidelberg.

[24] Niels Landwehr, Andrea Passerini, Luc De Raedt, and Paolo Frasconi. kFOIL: Learning
simple relational kernels. In Proceedings, The Twenty-First National Conference on Artiﬁcial
Intelligence and the Eighteenth Innovative Applications of Artiﬁcial Intelligence Conference,
July 16-20, 2006, Boston, Massachusetts, USA, pages 389–394, 2006.

[25] Niels Landwehr, Kristian Kersting, and Luc De Raedt. nFOIL: Integrating naïve bayes and
FOIL. In Proceedings, The Twentieth National Conference on Artiﬁcial Intelligence and the
Seventeenth Innovative Applications of Artiﬁcial Intelligence Conference, July 9-13, 2005,
Pittsburgh, Pennsylvania, USA, pages 795–800, 2005.

10

