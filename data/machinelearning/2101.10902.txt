2
2
0
2

y
a
M
4

]

M
Q
.
o
i
b
-
q
[

5
v
2
0
9
0
1
.
1
0
1
2
:
v
i
X
r
a

Published as a conference paper at ICLR 2022

MAXIMUM n-TIMES COVERAGE FOR
VACCINE DESIGN

Ge Liu, Alexander Dimitrakakis, Brandon Carter, David Gifford
Computer Science and Artiﬁcial Intelligence Laboratory
Massachusetts Institute of Technology
gifford@mit.edu

ABSTRACT

We introduce the maximum n-times coverage problem that selects k overlays
to maximize the summed coverage of weighted elements, where each element
must be covered at least n times. We also deﬁne the min-cost n-times coverage
problem where the objective is to select the minimum set of overlays such that
the sum of the weights of elements that are covered at least n times is at least
τ . Maximum n-times coverage is a generalization of the multi-set multi-cover
problem, is NP-complete, and is not submodular. We introduce two new practical
solutions for n-times coverage based on integer linear programming and sequential
greedy optimization. We show that maximum n-times coverage is a natural way
to frame peptide vaccine design, and ﬁnd that it produces a pan-strain COVID-19
vaccine design that is superior to 29 other published designs in predicted population
coverage and the expected number of peptides displayed by each individual’s HLA
molecules.

1

INTRODUCTION

In the maximum n-times coverage problem, a set of overlays is selected to cover elements zero or
more times, where each overlay is predetermined to cover one or more elements. Each element is
assigned a weight that reﬂects its importance. The objective of the problem is to maximize the sum
of the weights of elements that are covered at least n times by at most k overlays. When the coverage
of elements by overlays is determined by a machine learning method, the result summarizes machine
learning results with a compact solution that is shaped by the element weights employed.

Our introduction of weighted elements and required n-times coverage creates a new class of problem
without a known solution or complexity bound for approximate solutions. The closest problem
to the maximum n-times coverage problem is the multi-set multi-cover problem which does not
assign weights to the elements and thus can be formulated as the Covering Integer Program (CIP)
problem (Srinivasan, 1999). Thus like CIP, maximum n-times coverage is NP-complete. A log(n)-
time approximation algorithm for CIP can violate coverage constraints (Dobson, 1982; Kolliopoulos,
2003; Kolliopoulos & Young, 2001). Deletion-robust submodular maximization protects against
adversarial deletion (Bogunovic et al., 2018; Mirzasoleiman et al., 2017) and robust submodular
optimization protects against objective function uncertainty (Iyer, 2019), but neither guarantees that
each element is covered n times.

In this work, we investigate properties of the maximum n-times coverage problem, provide a practical
solution to the problem, and use the solution for machine learning based vaccine design. We show that
maximum n-times coverage is not submodular, and introduce NTIMES-ILP and MARGINALGREEDY,
efﬁcient algorithms for solving the n-times coverage problem on both synthetic data and real vaccine
design. In our framing of vaccine design, an element is a speciﬁc collection of HLA alleles (a
genotype), weights are the frequency of genotypes in the population, n is the desired number of
peptides displayed by each individual, and an overlay is a peptide that is predicted to be displayed
by each genotype a speciﬁed number of times. The solution of the maximum n-times coverage
problem allows us to ﬁnd a set of overlays that maximizes the sum of element weights (population
coverage). We show that framing vaccine design as maximum n-times coverage produces a solution
that produces superior predicted population coverage when compared to 29 previous published
vaccines for COVID-19 with less than 150 peptides.

1

 
 
 
 
 
 
Published as a conference paper at ICLR 2022

2 THE MAXIMUM n-TIMES COVERAGE PROBLEM

2.1 MULTI-SET MULTI-COVER PROBLEM

In the standard SET COVER and MAXIMUM COVERAGE problems, we are given a set U of |U|
elements (also known as the universe) and a collection S = {S1, S2, . . . , Sm} of m subsets of U
such that (cid:83)
i Si = U. The goal in the SET COVER problem is to select a minimal-cardinality set of
subsets from S such that their union covers U. The MULTI-SET MULTI-COVER (MSMC) problem
is a generalization of the SET COVER problem, where multi-sets are sets in which an element can
appear more than once. The objective of the MSMC problem is to determine the minimum number
of multisets (a multi-set can be chosen multiple times) such that each element i is covered at least bi
times. It can be formulated into Covering Integer Program (CIP) problem (Srinivasan, 1999):
Deﬁnition 1. (Covering Integer Program, CIP) Given A ∈ Rn×m
CIP P = (A, b, w, d) seeks to minimize wT x, subject to Ax ≥ b, x ∈ Zm

+, w ∈ Rm

+ , d ∈ Rm

, b ∈ Rn

+ , a

+

+ ,and x ≤ d.

Here Aij represents the number of times i-th element appears in the j-th multi-set. The w is set to be
all 1 in MSMC. The constraints x ≤ b are called multiplicity constraints which limit the number of
times a single multi-set can be reused, and they generally make covering problems much harder as
natural linear programming (LP) relaxation can have an unbounded integrality gap (Chuzhoy & Naor,
2006). Dobson (1982) provides a combinatorial greedy H(maxj
i Aij)-approximation algorithm
(H(t) stands for t-th harmonic number) but multiplicity constraints can be dealt with effectively only
in the (0,1) case, and thus this algorithm can be as bad as polynomial. Kolliopoulos & Young (2001);
Kolliopoulos (2003) gave a tighter-bound solution that can obtain O(log n)-approximation.

(cid:80)

Figure 1: Example of n-times coverage calculation.

2.2 MAXIMUM n-TIMES COVERAGE

We introduce the maximum n-times coverage problem, a variant of the MSMC problem that accounts
for multiple coverage of each element while also assigning weights to different elements. We are
given a set X with l elements {X1, X2, . . . , Xl} each associated with a non-negative weight w(Xi),
and a set of m overlays A = {A1, A2, . . . , Am}. Each overlay Aj covers each element i in X an
element speciﬁc number of times cj(Xi), which is similar to a multi-set. When cj(Xi) = 0 the
element Xi is not covered by overlay Aj. We use a very strict multiplicity constraint such that each
overlay can be used only once. Given a subset of overlays O ⊆ A, the total number of times an
element Xi is covered by O is the sum of cj(Xi) for each overlay j in O:

C(Xi|O) =

(cid:88)

j∈O

cj(Xi)

(1)

We deﬁne the n-times coverage function fn(O) as the sum of weights of elements in X that are
covered at least n times by O. Figure 1 shows an example computation of the n-times coverage
function.

fn(O) =

l
(cid:88)

i=1

w(Xi)1{C(Xi|O)≥n} =

l
(cid:88)

i=1

w(Xi)1{(cid:80)

j∈O cj (Xi)≥n}

(2)

The objective of the MAXIMUM n-TIMES COVERAGE problem is to select a set of k overlays O ⊆ A
such that fn(O) is maximized. This can be formulated as the maximization of the monotone set
function fn(O) under cardinality constraint k:

O∗ = arg max
O⊆A,|O|≤k

fn(O)

2

(3)

Published as a conference paper at ICLR 2022

We deﬁne MIN-COST n-TIMES COVERAGE as the minimum set of overlays such that the sum of
the weights of elements covered at least n times is ≥ τ . We assume A provides sufﬁcient n-times
coverage for fn(A) ≥ τ . We deﬁne the n-TIMES SET COVER problem as the special case of
MIN-COST n-TIMES COVERAGE where τ = (cid:80)

i w(Xi).

MIN-COST n-TIMES COVERAGE

O∗ = arg min

|O|

O

s.t.

fn(O) ≥ τ

n-TIMES SET COVER

O∗ = arg min

|O|

O

s.t.

fn(O) = fn(A)

(4)

(5)

Theorem 1. The n-times coverage function fn(O) is not submodular.

The proof can be found in Appendix A. Since the n-times coverage problem is not submodular,
we cannot take advantage of the proven near-optimal performance of the greedy algorithm for the
SUBMODULAR MAXIMUM COVERAGE problem. Thus we seek new solutions.

3 THE NTIMES-ILP SOLUTION FOR MAXIMUM n-TIMES COVERAGE

We ﬁrst formulate the maximum-n times coverage problem as an integer linear program (ILP). We
associate a binary variable ai with each overlay Ai such that ai = 1 if Ai ∈ O∗ and otherwise ai = 0.
Thus the cardinality constraint can be written as |O| = (cid:80)m
i=1 ai ≤ k, and the number of times an
element Xj is covered by O is C(Xj|O) = (cid:80)
i=1 aici(Xj). The main challenge is
to encode the objective function fn(O) = (cid:80)l
i=1 aici(Xj )≥n} in a linear fashion. We
replace the step function 1{(cid:80)m
i=1 aici(Xj )≥n} with a variable tj such that for each element Xj:
m
(cid:88)

i∈O ci(Xj) = (cid:80)m
j=1 w(Xj)1{(cid:80)m

m
(cid:88)

tj = 1 ⇐⇒

aici(Xj) ≥ n and

tj = 0 ⇐⇒

aici(Xj) < n

(6)

i=1

i=1

We enforce the conditions in (6) with the Big M method (Sherali et al., 2013), where we include the
following inequalities for each element Xj ∈ X :

− M (1 − tj) ≤

m
(cid:88)

i=1

aici(Xj) − n + (cid:15) ≤ M tj,

(7)

We set (cid:15) ∈ (0, 1) and choose M to be a large number such as 10,000 which is larger than the term
(cid:80)m

i=1 aici(Xj) − n + (cid:15). Here we prove that tj = 1 ⇐⇒ (cid:80)m

i=1 aici(Xj) ≥ n.

Proof. When tj = 1, inequality (7) becomes 0 ≤ (cid:80)m
number, we can ignore the right inequality and rearrange to get (cid:80)m
(cid:80)m
i=1 aici(Xj) and n are both integers and (cid:15) ∈ (0, 1), we ﬁnd (cid:80)m
can be taken in the reverse order to prove that (cid:80)m
binary variable.

i=1 aici(Xj) − n + (cid:15) ≤ M . If M is a large
i=1 aici(Xj) ≥ n − (cid:15). Since
i=1 aici(Xj) ≥ n. All these steps
i=1 aici(Xj) ≥ n =⇒ tj = 1, given that tj is a

We also prove that tj = 0 ⇐⇒ (cid:80)m

i=1 aici(Xj) < n.

Proof. We start by showing the forward direction. If tj = 0, then inequality (7) becomes −M ≤
(cid:80)m
i=1 aici(Xj) − n + (cid:15) ≤ 0. As M is large, −M is a large negative number, so we can ignore the
left inequality. Hence, (cid:80)m
i=1 aici(Xj) < n,
because both the quantities (cid:80)m
i=1 aici(Xj) ≤
n − (cid:15). Rearranging this we get (cid:80)m
i=1 aici(Xj) − n + (cid:15) ≤ 0, which forces tj as a binary variable to
be equal to 0 from inequality (7).

i=1 aici(Xj) ≤ n − (cid:15) < n. In the reverse direction, if (cid:80)m

i=1 aici(Xj) and n are integers, for any (cid:15) ∈ (0, 1), (cid:80)m

Therefore, the objective function to maximize becomes fn(O) = (cid:80)l
(cid:80)l

j=1 w(Xj)1{C(Xj |O)≥n} =
j=1 tjw(Xj), which is linear as a sum over l terms of a binary variable multiplied by a constant.

The complete NTIMES-ILP formulation of n-times coverage is:

• Variables

3

Published as a conference paper at ICLR 2022

– a1, ..., am representing presence of each overlay A1, ..., Am in ﬁnal solution
– t1, ..., tl representing if each element X1, ..., Xl has been covered at least n times

• Constraints
– (cid:80)m
– −M (1 − tj) ≤ (cid:80)m

i=1 ai ≤ k (the maximum total number of overlays allowed in the ﬁnal subset)

i=1 aici(Xj) − n + (cid:15) ≤ M tj for each j ∈ {1, ..., l}

• Objective to maximize
– fn(O) = (cid:80)l

j=1 w(Xj)1{C(Xj |O)≥n} = (cid:80)l

j=1 tjw(Xj)

If we want to enforce non-redundancy constraints such that pairs of overlays that violate certain
distance criteria are not both chosen, we can include additional constraints at + ar ≤ 1 for every pair
of overlays (At, Ar) that we don’t want both to be included in the ﬁnal subset.

4 THE MARGINALGREEDY ALGORITHM FOR MAXIMUM n-TIMES COVERAGE

Although NTIMES-ILP can produce near-optimal solutions on problems with reasonable size, it
may become intractable for problems where hundreds of thousands of elements and/or overlays are
involved, such as certain variants of the vaccine design problem. Thus, we seek a polynomial time
algorithm that provides good solutions to the maximum n-times coverage problem. A naive greedy
solution is problematic when the n-times objective is directly approached. This is a consequence
of potential early bad overlay choices by a greedy approach that can cause it to fail later to ﬁnd
overlays with sufﬁcient n-times coverage. In addition, during greedy optimization available overlay
choices may not provide differential marginal gain to avoid ties and random overlay selection. The
MARGINALGREEDY algorithm is speciﬁcally designed to avoid early bad choices that will lead to
failure by marginally approaching the n-times coverage objective. MARGINALGREEDY preserves
marginal gains by employing look-ahead tie-breaking that assists in selecting overlays that beneﬁt
longer term objectives.

Algorithm 1 MARGINALGREEDY algorithm (for MIN-COST n-TIMES COVERAGE)

Input: Weights of the elements in X : w(X1), w(X2), . . . , w(Xl), ground set of overlays A where
each overlay j in A covers Xi for cj(Xi) times, target minimum # times being covered ntarget,
coverage cutoff for different n: τ1, τ2, . . . , τntarget, beam size b
Initialize beam B0 ← {∅}, t = 0
for n = 1, . . . , ntarget do

Using set function fn(S) = (cid:80)l
repeat

i=1 w(Xi)1{(cid:80)

K t ← ∅
for O ∈ Bt do

j∈S cj (Xi)≥n} as objective function.

(cid:46) K t is the set of candidate solutions
(cid:46) Beam search

for a ∈ A \ O do

K t ← K t ∪ {O ∪ {a}}

(cid:46) Add the candidate solution {O ∪ {a}} to K t

Bt+1 ← {Top b candidate solutions in K t as scored by fn(S)}
t ← t + 1
mt ← median score of candidate solutions in the beam Bt

until mt ≥ τn (in ntarget-th cycle the termination condition is maxS∈Bt fn(S) ≥ τtarget)
(for MAXIMUM n-TIMES COVERAGE with cardinality constraint k, there is additional
termination condition t > k)
O∗ = arg maxS∈Bt fntarget(S)

Output: The ﬁnal selected subset of overlays O∗

MARGINALGREEDY optimizes n-times coverage with a sequence of greedy optimization cycles
where the n-th cycle optimizes the coverage function fn(S). We establish coverage starting at n = 1
and incrementally increase the n-times criteria to ntarget. Thus early overlay selections are guided
by less stringent cycle-speciﬁc coverage objectives. A set of coverage cutoffs {τ1, τ2, . . . , τtarget} is
used as the termination condition for each greedy optimization cycle, and when not speciﬁed, we
assume τ1 = τ2 = · · · = τtarget by default. We use beam search to keep track of top b candidate

4

Published as a conference paper at ICLR 2022

solutions at each iteration. In general the larger the beam size, the closer the result is to the true
optimal. However, there is a tradeoff between beam size and running time. In our results we choose
the largest beam size that maintains a practical running time as we describe below.

The full algorithm is given in Algorithm 1. A similar algorithm can be used to solve the n-TIMES
SET COVER problem in which τtarget = fntarget(A). For the MAXIMUM n-TIMES COVERAGE
problem with cardinality constraint k, the optimization terminates when t > k. When beam search is
not used to reduce computation time (b = 1), we have extended the algorithm to break ties during the
n-times coverage iteration by looking ahead to (n + 1)-times coverage. We call this extension look
ahead tie-breaking. Another advantage of MARGINALGREEDY is that it is capable of guaranteeing
high coverage for nt < ntarget by controlling the cycle-speciﬁc coverage cutoffs τt. This is desired
in vaccine design where wider population coverage is also important and we want to make sure that
almost 100% of the population will be covered at least once.

5 VACCINE POPULATION COVERAGE MAXIMIZATION

Contemporary peptide vaccine design methods use machine learning scoring of peptide display for
HLA alleles followed by the selection of peptides to maximize 1-times coverage. These methods do
not accurately model the frequency of HLA haplotypes in a population and thus can not accurately
assess the population coverage provided by a vaccine. Malone et al. (2020) uses haplotypes but does
not explicitly model their frequencies. For a selected set of peptides, the IEDB Population Coverage
Tool (Bui et al., 2006) estimates peptide-MHC binding coverage and the distribution of peptides
displayed for a given population but does not consider linkage disequilibrium between HLA loci.

We frame vaccine design as maximum n-times coverage because ideally each vaccinated individual
in a population will be “covered” by multiple immunogenic peptides. While it might be assumed that
an individual will be vaccinated if they display a single peptide, three independent lines of reasoning
support the need for n-times coverage:

1. When an individual displays multiple peptides their immune system activates and expands
more than one set of T cell clonotypes that are poised to ﬁght viral infection (Sekine et al.,
2020; Schultheiß et al., 2020; Grifoni et al., 2020).

2. The peptides that are immunogenic vary from one individual to another, and thus having
multiple peptides displayed increases the probability at least one will be strongly immuno-
genic (Croft et al., 2019).

3. If a virus evolves and changes its peptide composition, using multiple peptides reduces the

chance of viral escape (Wibmer et al., 2021).

Prior work has not considered formalizing these aspects of vaccine design with an n-times constraint
and thus has produced solutions to the 1-times coverage task. Existing solutions to 1-times coverage
do not anticipate or solve the n-times coverage task. Both Malone et al. (2020) and Toussaint
et al. (2008) provide solutions to 1-times coverage, Lundegaard et al. (2010) does not provide
speciﬁc population coverage guarantees, and Oyarzun & Kobe (2015) reviews methods for 1-times
coverage. Discrete optimization has been used for other aspects of vaccine design that are unrelated
to population coverage, such designing a single peptide sequence that covers a set of diverse but
related set of input epitopes (Theiler & Korber, 2018), and designing spacers for string-of-beads
peptide delivery (Schubert & Kohlbacher, 2016).

For a peptide to be effective in a vaccine it must be presented by an individual’s Major Histocom-
patibility Complex (MHC) molecules and be immunogenic. A displayed peptide is immunogenic
when it activates T cells, which expand in number and mount a response against pathogens or tumor
cells. Memory T cells provide robust immunity against COVID-19, even in the absence of detectable
antibodies (Sekine et al., 2020). The use of peptide vaccine components to activate T cells is in
development for cancer (Hu et al., 2018) and viral diseases including HIV (Arunachalam et al., 2020),
HPV (Kenter et al., 2009) and malaria (Li et al., 2014; Rosendahl Huber et al., 2014).

A challenge for the design of peptide vaccines is the diversity of human MHC alleles that each have
speciﬁc preferences for the peptide sequences they will display. The Human Leukocyte Antigen
(HLA) loci, located within the MHC, encode the HLA class I and class II molecules. We consider

5

Published as a conference paper at ICLR 2022

the three classical class I loci (HLA-A, HLA-B, and HLA-C) and three loci that encode class II
molecules (HLA-DR, HLA-DQ, and HLA-DP). A single chromosome contains one allele at each
locus. We use haplotype to represent a combination of HLA alleles in a single chromosome, denoted
as AiBjCk for MHC class I or DRiDQjDPk for MHC class II. Each haplotype has a frequency
(cid:80)|B|
G(i, j, k) in a given population where (cid:80)|A|
k=1 G(i, j, k) = 1. Each individual inherits
j=1
i=1
two haplotypes to form their diploid genotype and may carry 3–6 different alleles per MHC class
depending on the zygosity. The frequency of a diploid genotype is thus (MHC class I as an example):
F i1j1k1i2j2k2 = F (Ai1 Bj1 Ck1 , Ai2 Bj2 Ck2 ) = G(i1, j1, k1)G(i2, j2, k2)
(8)
We use observed frequencies of 2,138 MHC class I and 1,711 MHC class II haplotypes for our
population coverage optimization. Each haplotype represents a speciﬁc combination of 230 different
HLA-A, HLA-B, and HLA-C alleles (MHC class I) or 280 different HLA-DP, HLA-DQ, and HLA-
DR alleles (MHC class II) (Liu et al., 2020). Our use of haplotypes models the linkage disequilibrium
between HLA genes. We separately select MHC class I and class II epitopes using n-times coverage
and then combine them in a single vaccine delivery construct for an effective immune response.

(cid:80)|C|

We adopt an experimentally calibrated model of peptide-HLA immunogenicity to design vaccines
using n-times coverage (Liu et al., 2021) (Appendix B). We utilize the observed immunogenicity
of peptides in convalescent COVID-19 patient peripheral blood mononuclear cell samples (Snyder
et al., 2020; Klinger et al., 2015; Nolan et al., 2020), and use these data to select machine learning
models to predict immunogenicity for peptides or HLA alleles that are not observed in the clinical
data. We deﬁne a peptide-HLA hit as a (peptide, HLA allele) pair where the peptide is predicted to be
immunogenic and displayed by the HLA allele. Once we have determined a candidate set of peptides
that are predicted to be immunogenic, we then need to select a minimal subset of peptides such that
each individual in τtarget of the population is predicted to have at least n peptide-HLA hits.

We ﬁrst introduce EvalVax-Robust, an evaluation tool for estimating the population coverage of a
proposed peptide vaccine set. EvalVax-Robust evaluates the percentage of the population having
at least n peptide-HLA binding hits in each individual. For a given peptide p and a class I HLA
allele X ∈ A ∪ B ∪ C, our machine learning model outputs a binary hit prediction ep(X) ∈ {0, 1}
indicating peptide-HLA immunogenicity. For each diploid genotype we compute the total number of
peptide-HLA hits as the sum of ep(X) over the unique HLA alleles in the genotype.

ci1j1k1i2j2k2
p

= cp(Ai1 Bj1 Ck1 , Ai2 Bj2 Ck2 ) =

(cid:88)

X∈{Ai1 ,Bj1 ,Ck1 }∪{Ai2 ,Bj2 ,Ck2 }

ep(X)

(9)

The total number of peptide-HLA hits provided by a set of peptides O is the sum of number of hits
per peptide:

C i1j1k1i2j2k2

O

= C(Ai1Bj1Ck1, Ai2Bj2Ck2|O) =

(cid:88)

p∈O

cp(Ai1 Bj1 Ck1, Ai2 Bj2 Ck2 )

(10)

We deﬁne the EvalVax-Robust predicted population coverage with ≥ n peptide-HLA hits for a peptide
vaccine set P as:

fn(O) =

|A|
(cid:88)

|B|
(cid:88)

|C|
(cid:88)

|A|
(cid:88)

|B|
(cid:88)

|C|
(cid:88)

i1=1

j1=1

k1=1

i2=1

j2=1

k2=1

F i1j1k1i2j2k2 · 1{C i1j1k1i2j2k2

O

≥ n}

(11)

EvalVax-Robust population coverage optimization can be accomplished by a solution to the maximum
n-times coverage problem, as we can rewrite equation (11) into equation (2) by setting X to be
the set of possible genotypes i1j1k1i2j2k2, and the weights w(Xi) to be the genotype frequencies
F i1j1k1i2j2k2. The peptide candidate set is the set of possible overlays A, where each peptide p ∈ A
is an overlay which covers a genotype ci1j1k1i2j2k2
times. We directly applied MARGINALGREEDY
on EvalVax-Robust objective function with a beam size of 10 for MHC class I and 5 for MHC class
II, but we further reduced peptide redundancy by eliminating unselected peptides that are within three
(MHC class I) or ﬁve (MHC class II) edits on a sequence distance metric from the selected peptides
at each iteration. The same non-redundancy constraints are added to NTIMES-ILP as described in
Section 3. As the number of unique genotypes is on the scale of millions (1M for MHC class I and
0.6M for MHC class II), for NTIMES-ILP we used an alternative objective fn(O)hap that computes
n-times coverage at the haplotype level for better tractability.

p

fn(O)hap =

|A|
(cid:88)

|B|
(cid:88)

|C|
(cid:88)

i=1

j=1

k=1

G(i, j, k) · 1{C ijk

O ≥ n}

(12)

6

Published as a conference paper at ICLR 2022

Figure 2: The MARGINALGREEDY and NTIMES-ILP algorithms outperform the greedy algorithm
on both LARGE and SMALL toy examples. Superior performance is seen on both the n-TIMES
SET COVER where a smaller number of overlays is used by MARGINALGREEDY and NTIMES-ILP
to achieve 100% coverage at different criteria of n, and on the MAXIMUM n-TIMES COVERAGE
problems where MARGINALGREEDY and NTIMES-ILP achieve higher coverage given same number
of overlays. Shaded regions indicate 95% conﬁdence intervals.

6 RESULTS

6.1 TOY EXAMPLES

We empirically evaluate the NTIMES-ILP and MARGINALGREEDY algorithms with two toy ex-
amples: a LARGE dataset where a set of 30 overlays are randomly generated to cover a set of 10
elements (with equal weights) 0, 1, or 2 times, and a SMALL dataset where a set of 10 overlays that
were randomly generated to cover a set of 5 elements with equal weights 0, 1, or 2 times. Figure 2
shows the efﬁciency of the NTIMES-ILP and MARGINALGREEDY algorithms on both the n-TIMES
SET COVER and MAXIMUM n-TIMES COVERAGE problems for varying values of n. We compare
our algorithms to a greedy algorithm that directly optimizes n-times coverage and ﬁnd the greedy
algorithm degenerates to sub-optimal solutions for large values of n. These sub-optimal solutions can
be as bad as random. We also compute the true optimal solution with exponential-time exhaustive
search. We repeated problem generation and optimization with 6 different random seeds to provide
conﬁdence bounds and used beam size b = 1 with look-ahead tie-breaking for MARGINALGREEDY.
As shown in Figure 2, NTIMES-ILP achieves true optimal in all datasets and MARGINALGREEDY
outperforms greedy on all tasks and datasets. We observed that MARGINALGREEDY has a signiﬁcant
advantage over greedy in tests with larger n and in regions of higher coverage. Appendix D contains
additional results for a more complex dataset with unequal element weights and sparser overlays, as
well as a comparison to an additional local search baseline (hill climbing with restarts).

6.2 COVID-19 VACCINE DESIGN USING MAXIMUM n-TIMES COVERAGE

We used both the NTIMES-ILP and MARGINALGREEDY algorithms to design peptide vaccines
for COVID-19 and evaluated the population coverage with different number of HLA-peptide hits
(1 ≤ n ≤ 8) using EvalVax-Robust. For MARGINALGREEDY the time complexity of the algorithm
is polynomial, O(vbdp), where v is the vaccine size, b is the beam width, d is the number of HLA
diploid genotypes, and p is the number of peptides. For the COVID-19 vaccine problem, this is
O(1012), and our implementation typically takes 225 CPU hours (with parallelization it ﬁnishes in
<1 hour) for vaccine design. By point of contrast, exhaustive search is (cid:0)p
We compared our vaccine designs with 29 vaccine designs in the literature on the probability that a
vaccine has at least N peptide-HLA hits per individual in a population, and the expected number of
per individual peptide-HLA hits in the population, which provides insight on how well a vaccine is
displayed on average. Figure 3 shows the comparison between OptiVax (A) MHC class I and (B)
class II vaccine designs at all vaccine sizes from 1–45 peptides (colored curves) and baseline vaccines

(cid:1)d, which is O(1055).

v

7

Published as a conference paper at ICLR 2022

Figure 3: EvalVax population coverage evaluation of SARS-CoV-2 vaccines for (top) MHC class I
and (bottom) MHC class II. (a) EvalVax-Robust population coverage with n ≥ 1 peptide-HLA hits
per individual, performances of 3 variants of OptiVax are shown by curves and baseline performance
is shown by red crosses (labeled by name of ﬁrst author). (b) EvalVax-Robust population coverage
with n ≥ 5 peptide-HLA hits. (c) EvalVax-Robust population coverage with n ≥ 8 peptide-HLA
hits. (d) Comparison of OptiVax and baselines on expected number of peptide-HLA hits.

Figure 4: SARS-CoV-2 OptiVax selected peptide vaccine using NTIMES-ILP on haplotypes for
(A) MHC class I and (B) MHC class II. (a) EvalVax-Robust population coverage at different per-
individual number of peptide-HLA hit cutoffs for populations self-reporting as having White, Black,
or Asian ancestry and average values. (b) Binding of vaccine peptides to each of the available alleles.

(red crosses) from prior work. We observe superior performance of OptiVax vaccine designs on all
evaluation metrics at all vaccine sizes for both MHC class I and class II. Most baselines achieve
reasonable coverage at n ≥ 1 peptide hits. However, many fail to show a high probability of higher
hit counts, indicating a lack of predicted redundancy if a single peptide is not displayed. Note that
OptiVax-MarginalGreedy also outperforms all baselines on n = 1 coverage and achieve 99.99%
(MHC class I) and 99.67% (MHC class II) coverage for n = 1, suggesting its capability to cover
almost full population at least once while optimizing for higher peptide display diversity.

MHC class I results. We selected an optimized set of peptides from all SARS-CoV-2 proteins
using NTIMES-ILP and MARGINALGREEDY. We use an MHC class I integrated model of peptide-
HLA immunogenicity for our objective function. After all ﬁltering steps, we considered 1,100
candidate peptides. With OptiVax-ILP, we design a vaccine with 19 peptides that achieves 99.999%
EvalVax-Robust coverage over populations self-reporting as having Asian, Black, or White ancestry
with at least one peptide-HLA hit per individual. This set of peptides also provides 98.52% coverage
with at least 5 peptide-HLA hits and 85.40% coverage with at least 8 peptide-HLA hits (Figure 4A,
Table S2). With OptiVax-MarginalGreedy, we design a vaccine with 19 peptides that achieves
99.999% EvalVax-Robust coverage over populations self-reporting as having Asian, Black, or White
ancestry with at least one peptide-HLA hit per individual. This set of peptides also provides 98.58%

8

Published as a conference paper at ICLR 2022

Figure 5: SARS-CoV-2 OptiVax selected peptide vaccine set using MARGINALGREEDY.

coverage with at least 5 peptide-HLA hits and 87.97% coverage with at least 8 peptide-HLA hits
(Figure 5A, Table S2). The population level distribution of the number of peptide-HLA hits in White,
Black, and Asian populations is shown in Figure 5A, where the expected number of peptide-HLA
hits 11.355, 11.151 and 12.984, respectively.

MHC class II results. We use an MHC class II model of peptide-HLA immunogenicity for our
objective function. After all ﬁltering steps, we considered 4,195 candidate peptides. With NTIMES-
ILP, we design a vaccine with 19 peptides that achieves 99.65% EvalVax-Robust coverage with at
least one peptide-HLA hit per individual. This set of peptides also provides 94.22% coverage with at
least 5 peptide-HLA hits and 83.76% coverage with at least 8 peptide-HLA hits (Figure 4B, Table S2).
With MARGINALGREEDY, we design a vaccine with 19 peptides that achieves 99.63% EvalVax-
Robust coverage with at least one peptide-HLA hit per individual. This set of peptides also provides
96.75% coverage with at least 5 peptide-HLA hits and 87.35% coverage with at least 8 peptide-HLA
hits (Figure 4B, Table S2). The population level distribution of the number of peptide-HLA hits
per individual in populations self-reporting as having Asian, Black, or White ancestry is shown in
Figure 5B, where the expected peptide-HLA hits is 17.206, 16.085 and 11.210, respectively.

Table S2 shows the evaluation of our OptiVax-Robust vaccine designs using the MARGINALGREEDY
algorithm compared to 29 designs by others as baselines. We note that it is natural that our designs
that were both optimized and evaluated with the same objective performed the best. To provide a fair
comparison, we also evaluated all designs with an immunogenicity model that does not incorporate
clinical data and found that our designs also performed the best (Figure S1). The metric used in all
cases is vaccine population coverage, which is a common metric (Bui et al., 2006). Thus, part of the
contribution of the present work is emphasizing the value of combining machine learning predictions
with combinatorial optimization for principled vaccine design.

7 CONCLUSION

We introduced the maximum n-times coverage problem, and showed that it is not submodular. We
presented both a novel ILP based method and a beam search algorithm for solving the problem, and
used them to produce a peptide vaccine design for COVID-19. We compared the resulting optimized
peptide vaccine designs with 29 other published designs and found that the optimized designs provide
substantially better population coverage for both MHC class I and class II presentation of viral
peptides. The use of n-times coverage as an objective increases vaccine redundancy and thus the
probability that one of the presented peptides will be immunogenic and produce a T cell response.
We are presently testing our pan-strain COVID-19 vaccine in mouse challenge studies for protection
against a COVID variant of concern. Our pan-strain vaccine delivers MHC class I and class II n-times
coverage optimized epitopes with a single mRNA-LNP construct. Our methods can also be used to
augment existing vaccine designs with peptides to improve their predicted population coverage by
initializing the algorithm with peptides that are present in an existing design. We provide an open-
source implementation of our methods at https://github.com/gifford-lab/optivax.

9

Published as a conference paper at ICLR 2022

ACKNOWLEDGMENTS

This work was supported in part by Schmidt Futures, a Google Cloud Platform grant, and a C3.AI
DTI Award to D.K.G. Ge Liu’s contribution was made prior to joining Amazon.

REFERENCES

Miysaa I Abdelmageed, Abdelrahman Hamza Abdelmoneim, Mujahed I Mustafa, Naﬁsa M Elfadol,
Naseem S Murshed, Shaza W Shantier, and Abdelraﬁe M Makhawi. Design of multi epitope-based
peptide vaccine against E protein of human 2019-nCoV: An immunoinformatics approach. bioRxiv,
2020.

Tobias Achterberg. SCIP: solving constraint integer programs. Mathematical Programming Compu-

tation, 1(1):1–41, 2009.

Syed Faraz Ahmed, Ahmed A Quadeer, and Matthew R McKay. Preliminary identiﬁcation of
potential vaccine targets for the COVID-19 coronavirus (SARS-CoV-2) based on SARS-CoV
immunological studies. Viruses, 12(3):254, 2020.

Mst Rubaiat Nazneen Akhand, Kazi Faizul Azim, Syeda Farjana Hoque, Mahmuda Akther Moli,
Bijit Das Joy, Hafsa Akter, Ibrahim Khalil Aﬁf, Nadim Ahmed, and Mahmudul Hasan. Genome
based evolutionary study of SARS-CoV-2 towards the prediction of epitope based chimeric vaccine.
bioRxiv, 2020.

Prabhu S. Arunachalam, Tysheena P. Charles, Vineet Joag, Venkata S. Bollimpelli, Madeleine K. D.
Scott, Florian Wimmers, Samantha L. Burton, Celia C. Labranche, Caroline Petitdemange, Sailaja
Gangadhara, Tiffany M. Styles, Clare F. Quarnstrom, Korey A. Walter, Thomas J. Ketas, Traci
Legere, Pradeep Babu Jagadeesh Reddy, Sudhir Pai Kasturi, Anthony Tsai, Bertrand Z. Yeung,
Shakti Gupta, Mark Tomai, John Vasilakos, George M. Shaw, Chil-Yong Kang, John P. Moore,
Shankar Subramaniam, Purvesh Khatri, David Monteﬁori, Pamela A. Kozlowski, Cynthia A.
Derdeyn, Eric Hunter, David Masopust, Rama R. Amara, and Bali Pulendran. T cell-inducing
vaccine durably prevents mucosal SHIV infection even with lower neutralizing antibody titers.
Nature Medicine, 2020.

Amrita Banerjee, Dipannita Santra, and Smarajit Maiti. Energetics based epitope screening in SARS
CoV-2 (COVID 19) spike glycoprotein by immuno-informatic analysis aiming to a suitable vaccine
development. bioRxiv, 2020.

Vargab Baruah and Sujoy Bose. Immunoinformatics-aided identiﬁcation of T cell and B cell epitopes

in the surface glycoprotein of 2019-nCoV. Journal of Medical Virology, 2020.

Manojit Bhattacharya, Ashish R Sharma, Prasanta Patra, Pratik Ghosh, Garima Sharma, Bidhan C
Patra, Sang-Soo Lee, and Chiranjib Chakraborty. Development of epitope-based peptide vaccine
against novel coronavirus 2019 (SARS-COV-2): Immunoinformatics approach. Journal of medical
virology, 92(6):618–631, 2020.

Ilija Bogunovic, Junyao Zhao, and Volkan Cevher. Robust maximization of non-submodular objec-

tives. In International Conference on Artiﬁcial Intelligence and Statistics (AISTATS), 2018.

Huynh-Hoa Bui, John Sidney, Kenny Dinh, Scott Southwood, Mark J Newman, and Alessandro
Sette. Predicting population coverage of T-cell epitope-based diagnostics and vaccines. BMC
bioinformatics, 7(1):153, 2006.

Roman M Chicz, Robert G Urban, William S Lane, Joan C Gorga, Lawrence J Stern, Dario AA
Vignali, and Jack L Strominger. Predominant naturally processed peptides bound to HLA-DR1 are
derived from MHC-related molecules and are heterogeneous in size. Nature, 358(6389):764–768,
1992.

Julia Chuzhoy and Joseph Naor. Covering problems with hard capacities. SIAM Journal on Computing,

36(2):498–515, 2006.

UniProt Consortium. UniProt: a worldwide hub of protein knowledge. Nucleic acids research, 47

(D1):D506–D515, 2019.

10

Published as a conference paper at ICLR 2022

Bruno Coutard, Coralie Valle, Xavier de Lamballerie, Bruno Canard, NG Seidah, and E Decroly. The
spike glycoprotein of the new coronavirus 2019-nCoV contains a furin-like cleavage site absent in
CoV of the same clade. Antiviral research, 176:104742, 2020.

Nathan P Croft, Stewart A Smith, Jana Pickering, John Sidney, Bjoern Peters, Pouya Faridi, Matthew J
Witney, Prince Sebastian, Inge EA Flesch, Sally L Heading, et al. Most viral peptides displayed by
class I MHC on infected cells are immunogenic. Proceedings of the National Academy of Sciences,
116(8):3112–3117, 2019.

Gregory Dobson. Worst-case analysis of greedy heuristics for integer programming with nonnegative

data. Mathematics of Operations Research, 7(4):515–531, 1982.

Stefan Elbe and Gemma Buckland-Merrett. Data, disease and diplomacy: GISAID’s innovative

contribution to global health. Global Challenges, 1(1):33–46, 2017.

Ethan Fast, Russ B Altman, and Binbin Chen. Potential T-cell and B-cell epitopes of 2019-nCoV.

bioRxiv, 2020.

Alba Grifoni, Daniela Weiskopf, Sydney I Ramirez, Jose Mateus, Jennifer M Dan, Carolyn Rydyznski
Moderbacher, Stephen A Rawlings, Aaron Sutherland, Lakshmanane Premkumar, Ramesh S Jadi,
et al. Targets of T cell responses to SARS-CoV-2 coronavirus in humans with COVID-19 disease
and unexposed individuals. Cell, 181(7):1489–1501, 2020.

Ekta Gupta, Rupesh Kumar Mishra, and Ravi Ranjan Kumar Niraj. Identiﬁcation of potential vaccine
candidates against SARS-CoV-2, a step forward to ﬁght novel coronavirus 2019-nCoV: A reverse
vaccinology approach. bioRxiv, 2020.

Ramneek Gupta, Eva Jung, and Søren Brunak. Prediction of N-glycosylation sites in human proteins.

In preparation, 2004. URL http://www.cbs.dtu.dk/services/NetNGlyc/.

James Hadﬁeld, Colin Megill, Sidney M Bell, John Huddleston, Barney Potter, Charlton Callender,
Pavel Sagulenko, Trevor Bedford, and Richard A Neher. Nextstrain: real-time tracking of pathogen
evolution. Bioinformatics, 34(23):4121–4123, 2018.

Charles V Herst, Scott Burkholz, John Sidney, Alessandro Sette, Paul E Harris, Shane Massey, Trevor
Brasel, Edecio Cunha-Neto, Daniela S Rosa, William Chong Hang Chao, et al. An effective CTL
peptide vaccine for ebola zaire based on survivors’ CD8+ targeting of a particular nucleocapsid
protein epitope with potential implications for COVID-19 vaccine design. Vaccine, 2020.

Zhuting Hu, Patrick A Ott, and Catherine J Wu. Towards personalized, tumour-speciﬁc, therapeutic

vaccines for cancer. Nature Reviews Immunology, 18(3):168, 2018.

Rishabh Iyer. A uniﬁed framework of robust submodular optimization.

arXiv preprint

arXiv:1906.06393, 2019.

Vanessa Jurtz, Sinu Paul, Massimo Andreatta, Paolo Marcatili, Bjoern Peters, and Morten Nielsen.
NetMHCpan-4.0: improved peptide–MHC class I interaction predictions integrating eluted ligand
and peptide binding afﬁnity data. The Journal of Immunology, 199(9):3360–3368, 2017.

Gemma G Kenter, Marij JP Welters, A Rob PM Valentijn, Margriet JG Lowik, Dorien MA Berends-
van der Meer, Annelies PG Vloon, Farah Essahsah, Lorraine M Fathers, Rienk Offringa, Jan Wouter
Drijfhout, et al. Vaccination against HPV-16 oncoproteins for vulvar intraepithelial neoplasia. New
England Journal of Medicine, 361(19):1838–1847, 2009.

Arbaaz Khan, Aftab Alam, Nikhat Imam, Mohd Faizan Siddiqui, and Romana Ishrat. Design of
an epitope-based peptide vaccine against the Severe Acute Respiratory Syndrome Coronavirus-2
(SARS-CoV-2): A vaccine informatics approach. bioRxiv, 2020.

Mark Klinger, Francois Pepin, Jen Wilkins, Thomas Asbury, Tobias Wittkop, Jianbiao Zheng, Martin
Moorhead, and Malek Faham. Multiplex identiﬁcation of antigen-speciﬁc T cell receptors using a
combination of immune assays and immune receptor sequencing. PLoS One, 10(10):e0141561,
2015.

11

Published as a conference paper at ICLR 2022

Stavros G Kolliopoulos. Approximating covering integer programs with multiplicity constraints.

Discrete applied mathematics, 129(2-3):461–473, 2003.

Stavros G Kolliopoulos and Neal E Young. Tight approximation results for general covering integer
In Proceedings 42nd IEEE Symposium on Foundations of Computer Science, pp.

programs.
522–528. IEEE, 2001.

Chloe Hyun-Jung Lee and Hashem Koohy. In silico identiﬁcation of vaccine targets for 2019-nCoV.

F1000Research, 9, 2020.

Weidang Li, Medha D Joshi, Smita Singhania, Kyle H Ramsey, and Ashlesh K Murthy. Peptide

vaccine: progress and challenges. Vaccines, 2(3):515–536, 2014.

Ge Liu, Brandon Carter, Trenton Bricken, Siddhartha Jain, Mathias Viard, Mary Carrington, and
David K Gifford. Computationally optimized SARS-CoV-2 MHC class I and II vaccine formula-
tions predicted to target human haplotype distributions. Cell Systems, 11(2):131–144, 2020.

Ge Liu, Brandon Carter, and David K Gifford. Predicted cellular immunity population coverage gaps
for SARS-CoV-2 subunit vaccines and their augmentation by compact peptide sets. Cell Systems,
12(1):102–107, 2021.

Claus Lundegaard, M Buggert, Ac Karlsson, Ole Lund, Carina Perez, and Morten Nielsen. PopCover:
a method for selecting of peptides with optimal population and pathogen coverage. In Proceedings
of the First ACM International Conference on Bioinformatics and Computational Biology, pp.
658–659, 2010.

Brandon Malone, Boris Simovski, Clément Moliné, Jun Cheng, Marius Gheorghe, Hugues Fontenelle,
Ioannis Vardaxis, Simen Tennøe, Jenny-Ann Malmberg, Richard Stratford, et al. Artiﬁcial intel-
ligence predicts the immunogenic landscape of SARS-CoV-2 leading to universal blueprints for
vaccine designs. Scientiﬁc Reports, 10(1):1–14, 2020.

Baharan Mirzasoleiman, Amin Karbasi, and Andreas Krause. Deletion-robust submodular maximiza-
tion: Data summarization with the right to be forgotten. In Proceedings of the 34th International
Conference on Machine Learning-Volume 70, pp. 2449–2458. JMLR. org, 2017.

Debarghya Mitra, Nishant Shekhar, Janmejay Pandey, Alok Jain, and Shiv Swaroop. Multi-epitope

based peptide vaccine design against SARS-CoV-2 using its spike protein. bioRxiv, 2020.

Sean Nolan, Marissa Vignali, Mark Klinger, Jennifer N Dines, Ian M Kaplan, Emily Svejnoha, Tracy
Craft, Katie Boland, Mitch Pesesky, Rachel M Gittelman, et al. A large-scale database of T-cell
receptor beta (TCRβ) sequences and binding associations from natural and synthetic exposure to
SARS-CoV-2. Research Square, 2020. doi: https://doi.org/10.21203/rs.3.rs-51964/v1.

Timothy J O’Donnell, Alex Rubinsteyn, and Uri Laserson. MHCﬂurry 2.0: Improved pan-allele
prediction of MHC class I-presented peptides by incorporating antigen processing. Cell Systems,
11(1):42–48, 2020.

Patricio Oyarzun and B Kobe. Computer-aided design of T-cell epitope-based vaccines: addressing

population coverage. International Journal of Immunogenetics, 42(5):313–321, 2015.

Asaf Poran, Dewi Harjanto, Matthew Malloy, Michael S Rooney, Lakshmi Srinivasan, and Richard B
Gaynor. Sequence-based prediction of vaccine targets for inducing T cell responses to SARS-CoV-2
utilizing the bioinformatics predictor RECON. bioRxiv, 2020.

Arunachalam Ramaiah and Vaithilingaraja Arumugaswami. Insights into cross-species evolution of
novel human coronavirus 2019-nCoV and deﬁning immune determinants for vaccine development.
bioRxiv, 2020.

Melissa J Rist, Alex Theodossis, Nathan P Croft, Michelle A Neller, Andrew Welland, Zhenjun Chen,
Lucy C Sullivan, Jacqueline M Burrows, John J Miles, Rebekah M Brennan, et al. HLA peptide
length preferences control CD8+ T cell responses. The Journal of Immunology, 191(2):561–571,
2013.

12

Published as a conference paper at ICLR 2022

Sietske Rosendahl Huber, Josine van Beek, Jørgen de Jonge, Willem Luytjes, and Debbie van Baarle.
T cell responses to viral infections–opportunities for peptide vaccination. Frontiers in immunology,
5:171, 2014.

Ratnadeep Saha and Burra VLS Prasad. In silico approach for designing of a multi-epitope based

vaccine against novel Coronavirus (SARS-COV-2). bioRxiv, 2020.

Paul Saikko, Jeremias Berg, and Matti Järvisalo. LMHS: a SAT-IP hybrid MaxSAT solver. In Inter-
national Conference on Theory and Applications of Satisﬁability Testing, pp. 539–546. Springer,
2016.

Haroldo Santos and Tulio Toffolo. Mixed integer linear programming with Python, 2020.

Benjamin Schubert and Oliver Kohlbacher. Designing string-of-beads vaccines with optimal spacers.

Genome Medicine, 8(1):1–10, 2016.

Christoph Schultheiß, Lisa Paschold, Donjete Simnica, Malte Mohme, Edith Willscher, Lisa von
Wenserski, Rebekka Scholz, Imke Wieters, Christine Dahlke, Eva Tolosa, et al. Next-generation
sequencing of T and B cell receptor repertoires from COVID-19 patients showed signatures
associated with severity of disease. Immunity, 53(2):442–455, 2020.

Takuya Sekine, André Perez-Potti, Olga Rivera-Ballesteros, Kristoffer Strålin, Jean-Baptiste Gorin,
Annika Olsson, Sian Llewellyn-Lacey, Habiba Kamal, Gordana Bogdanovic, Sandra Muschiol,
et al. Robust T cell immunity in convalescent individuals with asymptomatic or mild COVID-19.
Cell, 183:158–168, 2020.

Hanif D. Sherali, John J. Jarvis, and Mokhtar S. Bazaraa. Linear Programming And Network Flows.

John Wiley & Sons Incorporated, 2013.

Abhishek Singh, Mukesh Thakur, Lalit Kumar Sharma, and Kailash Chandra. Designing a multi-

epitope peptide-based vaccine against SARS-CoV-2. bioRxiv, 2020.

Thomas M Snyder, Rachel M Gittelman, Mark Klinger, Damon H May, Edward J Osborne, Ruth
Taniguchi, H Jabran Zahid, Ian M Kaplan, Jennifer N Dines, Matthew N Noakes, et al. Magnitude
and dynamics of the T-Cell response to SARS-CoV-2 infection at both individual and population
levels. medRxiv,, 2020. doi: https://doi.org/10.1101/2020.07.31.20165647.

Aravind Srinivasan. Improved approximation guarantees for packing and covering integer programs.

SIAM Journal on Computing, 29(2):648–670, 1999.

Sukrit Srivastava, Sonia Verma, Mohit Kamthania, Rupinder Kaur, Ruchi Kiran Badyal, Ajay Kumar
Saxena, Ho-Joon Shin, Michael Kolbe, and Kailash Pandey. Structural basis to design multi-epitope
vaccines against Novel Coronavirus 19 (COVID19) infection, the ongoing pandemic emergency:
an in silico approach. bioRxiv, 2020.

Muhammad Tahir ul Qamar, Abdur Rehman, Usman Ali Ashfaq, Muhammad Qasim Awan, Israr
Fatima, Farah Shahid, and Ling-Ling Chen. Designing of a next generation multiepitope based
vaccine (MEV) against SARS-COV-2: Immunoinformatics and in silico approaches. bioRxiv,
2020.

James Theiler and Bette Korber. Graph-based optimization of epitope coverage for vaccine antigen

design. Statistics in Medicine, 37(2):181–194, 2018.

Nora C Toussaint, Pierre Dönnes, and Oliver Kohlbacher. A mathematical framework for the selection
of an optimal set of peptides for epitope-based vaccines. PLoS Computational Biology, 4(12):
e1000246, 2008.

Yoya Vashi, Vipin Jagrit, and Sachin Kumar. Understanding the B and T cells epitopes of spike protein
of severe respiratory syndrome coronavirus-2: A computational way to predict the immunogens.
bioRxiv, 2020.

Qiong Wang, Ye Qiu, Jin-Yan Li, Zhi-Jian Zhou, Ce-Heng Liao, and Xing-Yi Ge. A unique protease
cleavage site predicted in the spike protein of the novel pneumonia coronavirus (2019-ncov)
potentially related to viral transmissibility. Virologica Sinica, pp. 1–3, 2020.

13

Published as a conference paper at ICLR 2022

Constantinos Kurt Wibmer, Frances Ayres, Tandile Hermanus, Mashudu Madzivhandila, Prudence
Kgagudi, Brent Oosthuysen, Bronwen E. Lambson, Tulio de Oliveira, Marion Vermeulen, Karin
van der Berg, Theresa Rossouw, Michael Boswell, Veronica Ueckermann, Susan Meiring, Anne
von Gottberg, Cheryl Cohen, Lynn Morris, Jinal N. Bhiman, and Penny L. Moore. SARS-CoV-2
501Y.V2 escapes neutralization by South African COVID-19 donor plasma. Nature Medicine, 27
(4):622–625, 2021.

Margreet A Wolfert and Geert-Jan Boons. Adaptive immune activation: glycosylation does matter.

Nature Chemical Biology, 9(12):776–784, 2013. doi: 10.1038/nchembio.1403.

Haoyang Zeng and David K Gifford. Quantiﬁcation of uncertainty in peptide-MHC binding prediction
improves high-afﬁnity peptide selection for therapeutic design. Cell Systems, 9(2):159–166, 2019.

14

Published as a conference paper at ICLR 2022

A PROOF THAT n-TIMES COVERAGE IS NOT SUBMODULAR

Theorem 2. The n-times coverage function fn(O) is not submodular.

Proof. We show fn(O) is not submodular for n = 2 (a similar counter example can be found for
any n > 1). Consider the example overlays A in Table S1. When n = 2, none of {A1},{A2},{A3}
or {A2, A3} provides n-times coverage while {A1, A3} covers X2 two times and {A1, A2} covers
X4 two times. Therefore, the marginal gain of adding A1, A2, or A3 into an empty set is always
zero, whereas adding A1 into {A2} or {A3} achieves non-zero gains and adding A1 into {A2, A3}
achieves even higher gain:

∆f (A1|∅) := fn=2({A1}) − fn=2(∅)

= 0

∆f (A1|{A2}) := fn=2({A1, A2}) − fn=2({A2})
= w(X4) − 0 = 0.48
∆f (A1|{A3}) := fn=2({A1, A3}) − fn=2({A3})
= w(X2) − 0 = 0.01

∆f (A1|{A2, A3}) := fn=2({A1, A2, A3}) − fn=2({A2, A3})

= w(X2) + w(X4) − 0 = 0.49

Given that {A3} ⊆ {A2, A3} and ∆f (A1|{A3}) < ∆f (A1|{A2, A3}), the function fn=2(O) does
not satisfy the diminishing return property (Deﬁnition 2) and thus is not submodular.

Table S1: Coverage map of overlays used in the counter example.

w(Xi)

0.01
X1

0.01
0.48
0.5
X2 X3 X4

A1
A2
A3

0
0
1

1
0
1

0
1
0

1
1
0

Deﬁnition 2. (Submodularity) A function f : 2V → R is submodular if for every A ⊆ B ⊆ V and
e ∈ V \ B it holds that ∆f (e|A) ≥ ∆f (e|B).

Equivalently, f is a submodular function if for every A, B ⊆ v, f (A∩B)+f (A∪B) ≤ f (A)+f (B).

B DETAILS OF VACCINE DESIGN

We score peptide-HLA immunogenicity based upon clinical data from convalescent COVID-19
patients (Section 5). For peptide-HLA combinations not observed in our clinical data we selected a
machine learning model of immunogenicity that best predicted the peptide-HLA combinations we did
observe. Our selected MHC class I model predicts a peptide-HLA combination will be immunogenic
if they are predicted to bind with an afﬁnity of ≤ 50 nM by the mean of the predictions from
PUFFIN (Zeng & Gifford, 2019), NetMHCpan-4.0 (Jurtz et al., 2017) and MHCﬂurry 2.0 (O’Donnell
et al., 2020). Our selected MHC class II model predicts a peptide-HLA combination will be
immunogenic if they are predicted to bind with an afﬁnity of ≤ 50 nM by NetMHCIIpan-4.0.

Peptides of length 8–10 residues can bind to HLA class I molecules whereas those of length 13–25
bind to HLA class II molecules (Rist et al., 2013; Chicz et al., 1992). We obtained the SARS-CoV-2
viral proteome from the ﬁrst documented case from GISAID (Elbe & Buckland-Merrett, 2017)
(sequence entry Wuhan/IPBCAMS-WH-01/2019). We applied sliding windows of length 8–10 (MHC
class I) and 13–25 (MHC class II) to identify candidate peptides for inclusion in our peptide vaccine,
resulting in 29,403 candidate peptides for MHC class I and 125,593 candidate peptides for MHC
class II.

15

Published as a conference paper at ICLR 2022

Candidate peptide ﬁltering. For our SARS-CoV-2 peptide vaccine design, we eliminate peptides
that are expected to mutate and thus cause vaccine escape, peptides crossing cleavage sites, peptides
that may be glycosylated, and peptides that are identical to peptides in the human proteome.

Removal of mutable peptides. We eliminate peptides that are observed to mutate above an input
threshold rate (0.002) to improve coverage over all SARS-CoV-2 variants and reduce the chance that
the virus will mutate and escape vaccine-induced immunity in the future. When possible, we select
peptides that are observed to be perfectly conserved across all observed SARS-CoV-2 viral genomes.
Peptides that are observed to be perfectly conserved in thousands of examples may be functionally
constrained to evolve slowly or not at all.

For SARS-CoV-2, we obtained the most up to date version of the GISAID database (Elbe & Buckland-
Merrett, 2017) (as of 4:04pm EST February 4, 2021) and used Nextstrain (Hadﬁeld et al., 2018)1 to
remove genomes with sequencing errors, translate the genome into proteins, and perform multiple
sequence alignments (MSAs). We retrieved 451,198 sequences from GISAID, and 426,072 remained
after Nextstrain quality processing. After quality processing, Nextstrain randomly sampled 34
genomes from every geographic region and month to produce a representative set of 12,884 genomes
for evolutionary analysis. Nextstrain deﬁnition of a “region” can vary from a city (e.g., “Shanghai”)
to a larger geographical district. Spatial and temporal sampling in Nextstrain is designed to provide a
representative sampling of sequences around the world.

The 12,884 genomes sampled by Nextstrain were then translated into protein sequences and aligned.
We eliminated viral genome sequences that had a stop codon, a gap, an unknown amino acid (because
of an uncalled nucleotide in the codon), or had a gene that lacked a starting methionine, except for
ORF1b which does not begin with a methionine. This left a total of 12,789 sequences that were used
to compute peptide level mutation probabilities. For each peptide, the probability of mutation was
computed as the number of non-reference peptide sequences observed divided by the total number of
peptide sequences observed.

Removal of cleavage regions. SARS-CoV-2 contains a number of post-translation cleavage sites
in ORF1a and ORF1b that result in a number of nonstructural protein products. Cleavage sites
for ORF1a and ORF1b were obtained from UniProt (Consortium, 2019) under entry P0DTD1. In
addition, a furin-like cleavage site has been identiﬁed in the Spike protein (Wang et al., 2020; Coutard
et al., 2020). This cleavage occurs before peptides are loaded in the endoplasmic reticulum for class
I or endosomes for class II. Any peptide that spans any of these cleavage sites is removed from
consideration. This removes 3,887 peptides out of the 163,796 we consider across windows 8–10
(class I) and 13–25 (class II) (∼2.4%).

Removal of glycosylated peptides. Glycosylation is a post-translational modiﬁcation that involves
the covalent attachment of carbohydrates to speciﬁc motifs on the surface of the protein. We eliminate
all peptides that are predicted to have N-linked glycosylation as it can inhibit MHC class I peptide
loading and T cell recognition of peptides (Wolfert & Boons, 2013). We identiﬁed peptides that
may be glycosylated with the NetNGlyc N-glycosylation prediction server (Gupta et al., 2004) and
eliminated peptides where NetNGlyc predicted a non-zero N-glycosylation probability in any residue.
This resulted in the elimination of 18,957 of the 154,996 peptides considered (∼12%).

Self-epitope removal. T cells are selected to ignore peptides derived from the normal human
proteome, and thus we remove any self peptides from consideration for a vaccine. In addition, it
is possible that a vaccine might stimulate the adaptive immune system to react to a self peptide
that was presented at an abnormally high level, which could lead to an autoimmune disorder. All
peptides from SARS-CoV-2 were scanned against the entire human proteome downloaded from
UniProt (Consortium, 2019) under Proteome ID UP000005640. A total of 48 exact peptide matches
(46 8-mers, two 9-mers) were discovered and eliminated from consideration.

Datasets. OptiVax (Liu et al., 2020) software was obtained from GitHub (https://github.
com/gifford-lab/optivax) and is available under an MIT license. Models and haplotype fre-
quencies (Liu et al., 2020) were obtained from Mendeley Data (https://doi.org/10.17632/

1from GitHub commit 639c63f25e0bf30c900f8d3d937de4063d96f791

16

Published as a conference paper at ICLR 2022

cfxkfy9zp4.1, https://doi.org/10.17632/gs8c2jpvdn.1) and are available under
a Creative Commons Attribution 4.0 International license.

Computational resources. We utilized Google Cloud Platform machines with 224 CPU cores for
MarginalGreedy optimization and parallelized computation across all CPU cores. For ILP designs,
we used our own computing resources with 8 CPU cores. The prediction of peptide-HLA binding
with machine learning models (NetMHCpan, NetMHCIIpan, MHCﬂurry, PUFFIN) was done using
our own computing resources with ∼200 CPU cores and NVIDIA GeForce RTX 2080 Ti GPUs.

ILP solver. We use the Python-MIP solver (Santos & Toffolo, 2020), which is a well-maintained
Mixed Integer Program (MIP) Solver with a Python API. Other solvers, such as the SCIP (Achterberg,
2009) and the LMHS (Saikko et al., 2016) solvers were considered, yet were deemed to not be
the best options for this problem, as they are optimized to solve more general problems than MIPs
without any guarantees of better performance compared to the Python-MIP solver.

Peptide Set

Vaccine
Size

EvalVax-
Robust
p(n ≥ 1)

EvalVax-
Robust
p(n ≥ 5)

EvalVax-
Robust
p(n ≥ 8)

MHC Class I Peptide Vaccine Evaluation
S-protein
S1-subunit
OptiVax-MarginalGreedy(Ours)
OptiVax-ILP(Ours)
Srivastava et al. (2020)
Random subset of binders
Fast et al. (2020)
Herst et al. (2020)
Lee & Koohy (2020)
Ahmed et al. (2020)
Herst et al. (2020)
Abdelmageed et al. (2020)
Baruah & Bose (2020)
Gupta et al. (2020)
Singh et al. (2020)
Vashi et al. (2020)
Poran et al. (2020)
Khan et al. (2020)
Akhand et al. (2020)
Bhattacharya et al. (2020)
Saha & Prasad (2020)
Mitra et al. (2020)

3795
2055
19
19
37
19
13
52
13
16
16
10
5
7
7
51
10
3
31
13
5
9

MHC Class II Peptide Vaccine Evaluation
OptiVax-MarginalGreedy(Ours)
S-protein
OptiVax-ILP(Ours)
S1-subunit
Ramaiah & Arumugaswami (2020)
Random subset of binders
Fast et al. (2020)
Banerjee et al. (2020)
Akhand et al. (2020)
Singh et al. (2020)
Abdelmageed et al. (2020)
Tahir ul Qamar et al. (2020)
Mitra et al. (2020)
Vashi et al. (2020)
Poran et al. (2020)
Ahmed et al. (2020)
Baruah & Bose (2020)

19
16315
19
8905
134
19
13
9
31
7
10
11
5
20
10
5
3

100.00%
100.00%
100.00%
100.00%
99.90%
97.09%
89.60%
97.76%
75.78%
73.49%
96.70%
79.09%
95.31%
38.91%
67.80%
84.86%
72.56%
42.08%
61.44%
53.78%
39.30%
32.13%

99.63%
99.28%
99.65%
98.86%
98.88%
93.70%
86.99%
83.51%
60.45%
56.29%
28.40%
72.75%
47.92%
35.12%
69.37%
54.96%
0.00%

99.43%
99.05%
98.58%
98.52%
80.06%
67.00%
57.38%
50.93%
42.18%
26.65%
13.97%
7.05%
6.39%
3.01%
2.84%
2.53%
0.84%
0.09%
0.04%
0.01%
0.00%
0.00%

96.75%
96.53%
94.22%
91.87%
90.20%
59.13%
15.24%
12.49%
9.22%
0.96%
0.96%
0.27%
0.04%
0.04%
0.00%
0.00%
0.00%

99.06%
97.37%
87.97%
85.40%
44.74%
43.42%
30.55%
13.50%
20.60%
9.29%
0.07%
0.11%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%

87.35%
96.04%
83.76%
90.97%
83.97%
32.47%
3.69%
0.66%
1.01%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%
0.00%

Exp. #
peptide-
HLA
hits /
vaccine
size

40.183
20.788
11.830
11.164
7.163
7.131
5.558
4.719
4.113
3.085
2.931
2.000
2.565
0.804
1.499
1.802
1.355
0.614
0.840
0.710
0.423
0.355

14.017
395.096
13.540
177.838
33.743
6.033
2.560
2.398
1.886
0.981
0.479
1.278
0.657
0.673
0.983
0.654
0.000

Exp. #
peptide-
HLA
hits
(White)

Exp. #
peptide-
HLA
hits
(Black)

Exp. #
peptide-
HLA
hits
(Asian)

38.212
20.616
11.355
10.883
7.533
7.368
5.616
5.207
4.397
3.051
3.236
2.192
3.128
0.747
1.431
1.976
0.997
0.702
1.062
0.977
0.496
0.504

16.989
541.429
15.900
265.183
45.044
7.822
3.650
3.162
2.531
1.438
0.919
1.840
0.905
0.959
1.469
0.736
0.000

38.250
20.397
11.151
10.430
7.018
6.229
4.386
4.473
3.384
2.248
2.988
1.777
2.031
0.388
1.305
1.711
1.383
0.878
0.774
0.635
0.291
0.251

14.375
416.406
14.762
175.615
38.254
6.527
2.262
2.354
2.536
1.113
0.274
1.464
0.579
0.618
0.910
0.717
0.000

44.086
21.351
12.984
12.180
6.938
7.796
6.672
4.477
4.558
3.957
2.568
2.030
2.537
1.278
1.760
1.720
1.686
0.263
0.682
0.518
0.482
0.311

10.686
227.455
9.958
92.717
17.932
3.750
1.769
1.679
0.591
0.392
0.244
0.530
0.488
0.442
0.569
0.510
0.000

Table S2: Comparison of existing baselines, S-protein peptides, and OptiVax-Robust peptide vaccine
designs on various population coverage evaluation metrics. The rows are sorted by EvalVax-Robust
p(n ≥ 1). Random subsets are generated 200 times. The binders used for generating random subsets
are deﬁned as peptides that are predicted to bind with ≤ 50 nM to more than 5 of the alleles.

17

Published as a conference paper at ICLR 2022

C EVALUATION OF OPTIVAX-ROBUST VACCINE DESIGN AND BASELINES

WITH NON-EXPERIMENTALLY-CALIBRATED MACHINE LEARNING
PREDICTIONS

We found that OPTIVAX produced vaccine designs superior to the baselines we tested even when it
used immunogenicity models that did not rely upon clinical data of peptide immunogenicity. Since
our immunogenicity model used experimental data that was not accessible to the baseline methods,
our designs have an advantage over baseline vaccines that did not use calibrated machine learning
predictions. We repeated vaccine design using an ensemble of NetMHCpan-4.0 and MHCﬂurry with
50 nM predicted afﬁnity cutoff for predicting MHC class I immunogenicity and NetMHCIIpan-4.0
for MHC class II. As shown in Figure S1, OptiVax-Robust again shows superior performance on all
metrics at all vaccine size under 35, indicating the success of MARGINALGREEDY in optimizing
population coverage with diverse peptide display.

Figure S1: EvalVax population coverage evaluation of SARS-CoV-2 vaccines for (top) MHC class I
and (bottom) MHC class II using non-experimentally calibrated machine learning predictions. (a)
EvalVax-Robust population coverage with n ≥ 1 peptide-HLA hits per individual, performances of 3
variants of OptiVax are shown by curves and baseline performance is shown by red crosses (labeled
by name of ﬁrst author). (b) EvalVax-Robust population coverage with n ≥ 5 peptide-HLA hits. (c)
EvalVax-Robust population coverage with n ≥ 8 peptide-HLA hits. (d) Comparison of OptiVax and
baselines on expected number of peptide-HLA hits.

D ADDITIONAL EXPERIMENTS ON A DATASET WITH UNEQUAL WEIGHTS AND

SPARSE COVERAGE

We further expanded our evaluation to include a hill climbing based method and a more complex
dataset. We generated a dataset named LARGE with sparse overlay coverage and unequal element
weights to provide a further basis of comparison for n-times coverage methods. The LARGE dataset
was created by generating a set of 30 overlays to cover a set of 10 elements with unequal weights,
and the probability of covering an element 0, 1, or 2 times is 0.6, 0.3, and 0.1, respectively. We
added an additional baseline method using hill climbing with random restarts for comparison with
other methods. For hill climbing we used stochastic local search that queries a randomly selected
subset of neighbors (Algorithm 2). We used stochastic local search because for a solution size of
k, a single exhaustive local search step requires querying all possible solutions that are 1 peptide
different from the current solution, which may result in k× #_total candidate_peptide queries to
the oracle that computes n-times population coverage. This approach is too expensive in typical
vaccine design problems with thousands of candidate peptides. For a fair comparison we have set
the number of restarts and hill climbing steps such that the total number of oracle queries needed to
build a hill climbing solution of size k is equivalent to that of MarginalGreedy. Figure S2 shows that
hill climbing is effective when the solution size is small, and but fails to reach 100% coverage when
MarginalGreedy reaches 100% coverage. MarginalGreedy and True Optimal reach 100% coverage

18

Published as a conference paper at ICLR 2022

with approximately the same number of overlays. Our integer programming n-times coverage
formulation achieves exact true optimal results on the LARGE dataset.

Figure S2: Comparison of n-times coverage methods on the LARGE dataset that includes hill
climbing (Algorithm 2). The LARGE dataset contains unequal element weights and sparse coverage.

Algorithm 2 HILLCLIMB algorithm (in MAXIMUM n-TIMES COVERAGE with cardinality constraint)
Input: Weights of the elements in X :w(X1), w(X2), . . . , w(Xl), ground set of overlays A where
each overlay j in A covers Xi for cj(Xi) times, cardinality constraint k, target minimum # times
being covered ntarget, number of restarts M , number of hill climbing steps T , number of neighbors
considered in one hill climb step N .
Initialize solution set S = ∅
Using ntarget-times coverage function f (O) = (cid:80)l
for m = 1, . . . , M do

j∈O cj (Xi)≥ntarget} as objective.

i=1 w(Xi)1{(cid:80)

Randomly select a set of k overlays from A as starting solution O∗, compute τbest = f (O∗)

as the best coverage so far.
for step = 1, . . . , T do

Randomly pick an overlay a from O∗ as candidate to be replaced
Randomly select N overlays from currently unselected set N ⊆ A \ O
for a(cid:48) ∈ N do

(cid:46) Loop over the selected neighbors

if f (O∗ \ {a} ∪ {a(cid:48)}) > τbest then

O∗ ← O∗ \ {a} ∪ {a(cid:48)}
τbest ← f (O∗)

(cid:46) Replace the overlay with a better one

S ← S ∪ {O∗}
O∗ = arg maxO∈S f (O)
Output: The ﬁnal selected subset of overlays O∗

(cid:46) Add the best solution in current run into solution pool
(cid:46) Use the best result as ﬁnal solution

E HIGH-RESOLUTION FIGURES FOR VACCINE MHC HITS

19

Published as a conference paper at ICLR 2022

.

5
e
r
u
g
i
F
d
n
a

4

e
r
u
g
i

F
m
o
r
f

s
t
o
l
p

g
n
i
d
n
i
b
I

s
s
a
l
c
C
H
M
n
o
i
t
u
l
o
s
e
r
-
h
g
i
H

:
3
S
e
r
u
g
i
F

20

