Grammar Filtering For Syntax-Guided Synthesis

Kairo Morton,1 William Hallahan,2 Elven Shum,3 Ruzica Piskac,2 Mark Santolucito,2
1George School, 2Yale University, 3Deerﬁeld Academy
mortonk@georgeschool.org, william.hallahan@yale.edu, eshum20@deerﬁeld.edu,
ruzica.piskac@yale.edu, mark.santolucito@yale.edu

0
2
0
2

b
e
F
7

]

G
L
.
s
c
[

1
v
4
8
8
2
0
.
2
0
0
2
:
v
i
X
r
a

Abstract

Programming-by-example (PBE) is a synthesis paradigm that
allows users to generate functions by simply providing input-
output examples. While a promising interaction paradigm,
synthesis is still too slow for realtime interaction and more
widespread adoption. Existing approaches to PBE synthesis
have used automated reasoning tools, such as SMT solvers,
as well as works applying machine learning techniques. At
its core, the automated reasoning approach relies on highly
domain speciﬁc knowledge of programming languages. On
the other hand, the machine learning approaches utilize the
fact that when working with program code, it is possible to
generate arbitrarily large training datasets. In this work, we
propose a system for using machine learning in tandem with
automated reasoning techniques to solve Syntax Guided Syn-
thesis (SyGuS) style PBE problems. By preprocessing Sy-
GuS PBE problems with a neural network, we can use a data
driven approach to reduce the size of the search space, then al-
low automated reasoning-based solvers to more quickly ﬁnd
a solution analytically. Our system is able to run atop exist-
ing SyGuS PBE synthesis tools, decreasing the runtime of the
winner of the 2019 SyGuS Competition for the PBE Strings
track by 47.65% to outperform all of the competing tools.

Introduction
The term “program synthesis” refers to automatically gen-
erating code to satisfy some speciﬁcation. That speciﬁcation
describes what the code should do, without going into de-
tails about how it should be done. The speciﬁcation could
be given as a set of constraints (Manna and Waldinger 1979;
Kuncak et al. 2010), it can be deduced from the program
and its environment (Gvero et al. 2013; Feng et al. 2017), or
it can be inferred from a large corpus (Balog et al. 2017;
Santolucito et al. 2017).

One paradigm of program synthesis is called program-
ming by example (Cypher et al. 1993) (PBE). In the PBE ap-
proach, a user only provides a set of pairs of input-output
examples that illustrate the desired behavior of the code.
From these examples, the PBE engine should then generate
code that generalizes from the examples to create a program
which covers the unspeciﬁed examples as well.

Copyright c(cid:13) 2020, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

The idea of automated code synthesis is an area of re-
search with a long history (cf. the Church synthesis prob-
lem (Church 1963)). However, due to the problem’s unde-
cidability and high computational complexity for decidable
fragments, for almost 50 years the research in program syn-
thesis was mainly focused on addressing theoretical ques-
tions and the size of synthesized programs was relatively
small. However, the state of affairs has drastically changed
in the last decade. By leveraging advances in automated rea-
soning and formal methods, there has been a renewed in-
terest in software synthesis. The research in program syn-
thesis has recently focused on developing efﬁcient algo-
rithms and tools, and synthesis has even been used in in-
dustrial software (Gulwani 2011). Today, machine learning
plays a vital role in modern software synthesis and there
are numerous tools and startups that rely on machine learn-
ing and big data to automatically generate code (cod 2019;
Balog et al. 2017).

format

(SyGuS)

it was difﬁcult

With numerous synthesis tools and formats being de-
veloped,
to empirically evaluate and
compare existing synthesis tools. The Syntax Guided
Synthesis
language (Alur et al. 2013;
Raghothaman and Udupa 2019) was introduced in an effort
to standardize the speciﬁcation format of program synthe-
sis, including PBE synthesis problems. The SyGuS language
speciﬁes synthesis problems through two components - a
set of constraints (eg input-output examples), and a gram-
mar (a set of functions). The goal of a SyGuS synthesis
problem is to construct a program from functions within the
given grammar that satisﬁes the given constraints. With this
standardized synthesis format and an ever expanding set of
benchmarks, there is now a yearly competition of synthesis
tools (Alur et al. 2019), which pushes the frontier of scalable
synthesis further.

The SyGuS Competition splits synthesis problems into
tracks, for example PBE Strings or PBE BitVectors, assign-
ing a different grammar for each track - and sometimes
even varying the grammar within a single track. As the
grammar deﬁnes the search space in SyGuS, this allows
benchmark designers to ensure problems are relatively
in-scope of current tools. However, when synthesis is de-
ployed in real-world applications, we must allow for larger

 
 
 
 
 
 
grammars that account for the wide range of use-cases users
require
(Santolucito, Hallahan, and Piskac 2019). While
larger grammars allow for more expressive power in the
synthesis engine, it also slows down the whole synthesis
process.

In our own experimentation, we found that by manually
removing some parts of the grammar from the SyGuS Com-
petition benchmarks, we can signiﬁcantly improve synthesis
times. Accordingly, we sought to automate this process. Re-
moving parts of a grammar is potentially dangerous though,
as we may remove the possibility of ﬁnding a solution al-
together. In fact, understanding the grammar’s impact on
synthesis algorithms is a complex problem, connected to the
concept of overﬁtting (Padhi et al. 2019).

In this paper, we utilize machine learning to automate an
analysis of a SyGuS grammar and a set of synthesis con-
straints. We generate a large number of SyGuS problems,
and use this data to train a neural network. Given a new Sy-
GuS problem, the neural network predicts how likely it is for
a given grammar element to be critical to synthesizing a so-
lution to that problem. Our key insight is that, in addition to
criticality, we predict how much time we expect to save by
removing this grammar element. We combine these predic-
tions to efﬁciently ﬁlter grammars to ﬁt a speciﬁc synthesis
problem, in order to speed up synthesis times. Even with
these reduced grammars, we are still able to ﬁnd solutions
to the problems.

We implemented our approach in a modular tool, GRT,
that can be attached to any existing SyGuS synthesis engine
as a blackbox. We evaluated GRT by running it on the Sy-
GuS Competition Benchmarks from 2019 in the PBE Strings
track. We found GRT outperformed CVC4, the winner of the
SyGuS Competition from 2019, reducing the overall synthe-
sis time by 47.65%. Additionally, GRT was able to solve a
benchmark for which CVC4 timed out.

In summary, the core contributions of our work are as fol-

lows:

1. A methodology to generate models that can reduce time
needed to synthesize PBE SyGuS problems. In particular,
our technique reduced the grammar by identifying which
functions to try to eliminate to increase the efﬁciency of
a SyGuS solver. It also learns a model to predict which
functions are critical for a particular PBE problem.

2. A demonstration of the effectiveness of our methodology.
We show experiments on existing SyGuS PBE Strings
track that demonstrates the speed up resulting from us-
ing our ﬁltering as a preprocessor for an existing SyGuS
solver. Over the set of benchmarks, our techniques de-
creases the total time taken by synthesis by 47.65%.

Related
SyGuS

to

neural

directly

approach

is
satisfy

to
network

train
One
to
input/output
the
a
examples
(Andrychowicz and Kurach 2016;
Devlin et al. 2017b; Graves, Wayne, and Danihelka 2014;
Kaiser and Sutskever 2015;
Joulin and Mikolov 2015;
Chen, Liu, and Song 2017). However,
such approaches
struggle to generalize, especially when the number of

examples is small
(Devlin et al. 2017a). Some existing
work (Wang et al. 2018; Bunel et al. 2018) aims to repre-
sent aspects of the syntax and semantics of a language in
a neural network. In contrast to these existing approaches,
which aim to outright solve SyGuS problems, our work acts
as a preprocessor for a separate SyGuS solver. However,
one could also explore using our work as a preprocessor
for one of these existing neural network directed synthe-
sis approaches. Other works have explored combining
logic-directed and machine learning guided synthesis
approaches (Nye et al. 2019). This work sought to split
synthesis tasks between generating high level sketches with
neural networks, and ﬁll in the holes of the sketch with an
enumerative solver. Our work could be complementary to
this, by assisting in pruning of the search space needed to
ﬁll in the holes.

Like

Deductive

our work, DeepCoder
Neural-Guided

(Balog et al. 2017)
and
Search
(NGDS) (Kalyan et al. 2018) identify pieces of a grammar
that should be removed from the grammar. However, in our
parlance, these works only consider criticality, which mea-
sures how important a part of the grammar is to completing
synthesis. Unlike our work, they do not consider the time
savings from removing or keeping a part of the grammar.
NGDS (Kalyan et al. 2018) does note that different models
could be trained for different pieces of a grammar, however,
it provides no means of automating this process. Rather, the
user would have to manually elect to train individual neural
networks for different grammatical elements. Work by Si
et al (Si et al. 2018) aims to learn an efﬁcient solver for a
SyGuS from scratch, rather than, as in our work, acting as a
preprocessor for a separate solver.

Background

A SyGuS synthesis problem is a tuple (C, G) of constraints,
C, and a context-free grammar, G. In our case we restrict
the set of constraints to the domain of PBE, so that all con-
straints are in the form of pairs (i, o) of input-output exam-
ples. We write G \ g to denote the grammar G, but without
the terminal symbol g. The set of terminal symbols are the
component functions that can be used in constructing a pro-
gram (e.g. +, -, str.length). We also use the notation, π(G), to
denote the projection of G into its set representation, which
is the set of the terminal symbols in the grammar.

The problem statement of syntax-guided synthesis (Sy-
GuS) is; given a grammar, G, and a set of constraints C, ﬁnd
a program, P ∈ G, such that the program satisﬁes all the
constraints – ∀c ∈ C.P ⊢ c. For brevity, we equivalently
write P ⊢ C. If our synthesis engine is able to ﬁnd such a
program in t seconds or less, we write that (G, C)  t P . We
G to indicate the time to run (G, C)  t P .
use the notation T C
If the SyGuS solver is not able to ﬁnd a solution within the
G > t), we denote this as (G, C) 6 t P . We
timeout (T C
typically set a timeout on all synthesis problems of 3600
seconds, the same value of the timeout used in the SyGuS
competition. We write (G, C)   P and (G, C) 6  P as
shorthand for (G, C)  3600 P and (G, C) 6 3600 P , re-
spectively.

Grammar G

Constraints C

Predict Time

Criticality

Combo

Predicted
Grammar G⋆

Figure 1: GRT uses the grammar G and constraints C to pre-
dict how critical each function is, and the amount of time that
would be saved by eliminating it from the grammar. Then, it
outputs a new grammar G⋆, which it expects will speed up
synthesis over the original grammar (that is, it expects that
T C
G⋆ < T C

G ).

We deﬁne G as the grammar constructed from the maxi-
mal set of terminal symbols we consider for synthesis. We
call a terminal, g, within a grammar, critical for a set of con-
straints, C, if (G \ g, C) 6  P . For any given set of con-
straints, if a solution exists with G, there is also a grammar,
Gcrit, that contains exactly the critical terminal symbols re-
quired to ﬁnd a solution. More formally, Gcrit is constructed
such that

(Gcrit, C)   P ∧ ∀g ∈ Gcrit. (G \ g, C) 6  P

Note that Gcrit is not unique.

The goal of our work is to ﬁnd a grammar, G⋆, where
π(Gcrit) ⊆ π(G⋆) ⊆ π(G). This will yield a grammar
that removes some noncritical terminal symbols so that the
search space is smaller, but still sufﬁcient to construct a cor-
rect program.

Overview

Our system, GRT, works as a preprocessing step for a Sy-
GuS solver. The goal of GRT is to remove elements from the
grammar and thus, by having a smaller search space, save
time during synthesis. To do this we combine two metrics,
as shown in Figure 1: our predicted conﬁdence that a gram-
mar element is not needed, and our prediction of how much
time will be saved by removing that element. We focus on
removing only elements where we are both conﬁdent that
the grammar element is noncritical, and that removing the
grammar element signiﬁcantly impacts synthesis times. By
giving the constraints and the grammar deﬁnition to GRT,
we predict which elements of the grammar can be safely
removed. By analyzing running times we predict which of
these elements are beneﬁcal to remove. We describe GRT
in three sections, addressing dataset generation, the training
stage, and our evaluation.

Data Generation
In order to learn a model for GRT, we need to generate a
labelled dataset that maps constraints to grammar compo-
nents in Gcrit. This will allow us to predict, given a new
set of constraints C′, which grammar elements are noncrit-
ical for synthesis, and accordingly prune our grammar. The
generation of data for application to machine learning for
program synthesis is a nontrivial problem, requiring careful
construction of the dataset (Shin et al. 2019). We break the
generation of this dataset into two stages: ﬁrst, we generate a
set of programs, P from G. Then, for each program in P, we
generate constraints for that program. We additionally need
a dataset of synthesis times, in order to predict how long
synthesis takes for a given set of constraints.

Criticality Data
To generate a set of programs P, that can be generated
from a grammar G, we construct a synthesis query with
no constraints. We then run CVC4 with the command
--sygus-stream, which instructs CVC4 to output as
many solutions as it can ﬁnd. With no constraints, all func-
tions satisfy the speciﬁcation, and CVC4 will generate all
permutations of (well-formed and well-typed) functions in
the grammar, until the process is terminated (we terminate
after generating n programs). Because CVC4 generates so-
lutions of increasing size, we collect all generated programs,
then shufﬂe the order to prevent data bias with respect to the
order (size) in which CVC4 generated programs.

After generating programs, we generate corresponding
constraints (in the form of input-output examples for PBE)
for these functions. To do this, for each program, P , we ran-
domly generate a set of inputs I, and compute the input-
output pairs C = {(i, P (i)) | i ∈ I}. We then form a SyGuS
problem (G, C), where we know that the program P satis-
ﬁes the constraints, and is part of the grammar: P ⊢ C and
P ∈ G. This amounts to programs that could be synthesized
from the constraints (i.e. (G, C)  ∞ P ). It is important that
our dataset represent programs that could be synthesized, as
opposed to what can be synthesized (i.e. (G, C)  3600 P ).
This is important because we will use this data set to try to
learn the “semantics” of constraints, and we do not want to
use this data set to additionally, inadvertently learn the limi-
tations of the synthesis engine.

At this point, we have now constructed a dataset of triples
of grammars (ﬁxed for all benchmarks), constraints, and
programs, D = {(G, C1, P1) . . . (G, Cn, Pn)}. In order to
use D to helps us predict Gcrit, we break up each triple by
splitting each constraint set C into its individual constraints.
For a triple (G, C, P ), where C = {c1 . . . cm}, we generate
a new set of triples {(G, c1, P ) . . . (G, cm, P )}. The union
of all these triples of individual constraints form our train-
ing set, T Rcrit, that will be used to predict critical functions
in the grammar for a given set of constraints.

Timing Data
In addition to a training set for predicting Gcrit, we also
need a separate training set for predicting the time that can
be saved by removing a terminal from the grammar. This

dataset maps grammar elements g ∈ G to the effect on syn-
thesis times, R, when g is dropped from the grammar. To do
this we require synthesis problems that more closely model
the types of constraints that humans typically write. We col-
lect these set of benchmarks from users of the live coding in-
terface for SyGuS (Santolucito, Hallahan, and Piskac 2019).
Because we had limited number of human-generated con-
straint examples, we augmented this with constraints gener-
ated from T Rcrit.

We run synthesis for each problem with the full grammar,
as well as with all grammars constructed by removing one
element, g. For every synthesis problem benchmark, 1 ≤
i ≤ m, we record the difference in synthesis times between
running with the full grammar, and removing g:

T Ci
G − T Ci
G\g
Thus, we create a training set, T Rtime, relating each ter-
minal g ∈ π(G) and a set of constraints, to the time it takes
to synthesize a solution without that terminal.

(1)

Training

Predicting criticality
Our goal is to predict, given a set of constraints C, if a ter-
minal g belongs to the set of terminals π(Gcrit) for C. To
do this, we use a Feedforward Neural Network (Multi-Layer
Perceptron), with an extra embedding layer to encode the
string valued input-output examples into feature vectors. We
train the neural network to predict the membership of each
terminal g ∈ π(G) to the critical set π(Gcrit), based on a
single constraint c ∈ C. This prediction produces a 1D bi-
nary vector of length |π(G)|, where 1 at position i in the
binary vector indicates the terminal in position i is predicted
to belong to the critical set.

When a SyGuS problem has multiple (|C| ≥ 2) con-
straints, we run our prediction on each constraint individ-
ually. We then use a voting mechanism to come to consen-
sus on the construction of G⋆. After computing |C| binary
vectors across all constraints, the vectors are summed to pro-
duce a ﬁnal voting vector. The magnitude of each element in
this ﬁnal voting vector represents the number of votes “from
each constraint” that the terminal represented by that ele-
ment is in the critical set. We then use this ﬁnal voting vector
in combination with our time predictions.

Predicting time savings
It is only worthwhile to remove a terminal symbol g from
a grammar G if T C
G . If a g stands to only
give us a small gain in synthesis times, it may not be worth
the risk that we incorrectly predicted its criticality.

G\g is less than T C

To predict the amount of time saved by removing a termi-
nal g we examine the distribution of times in our training set
T Rtime. For each terminal g, we calculate Ag, the average
time increase that results from removing g from the gram-
mar. Denoting the time to run (G, C)   P as T C
G , we can
write Ag as:

Ag = P

n

i=1 T Ci
G − T Ci
G\g
n

If a terminal g has a negative Ag, then removing it from
the grammar actually slows down synthesis, on average. As
such, dropping the terminal from the grammar is not gener-
ally helpful. Thus, we only consider those terminals with a
positive Ag in our second step.

Combining predictions
With our predictions of the criticality a terminal g and of
time saved by removing g, we must make a ﬁnal decision on
whether or not we should remove g. To do this, we take the
top three terminals with the greatest average positive impact
on synthesis time over the training set, as computed with
Ag. These tended to be terminals that mapped between types
which saved more time due to the internal mechanisms and
heuristics of the CVC4 solver. We then use the ﬁnal voting
vector from our criticality prediction to choose only two out
of the three to remove from G to form G⋆. We chose to re-
move only two terminals from G in order to minimize the
likelihood of generating a G⋆, such that π(G⋆) ⊆ π(Gcrit).
We conjecture that the number of terminals removed is a
grammar-dependent parameter that must be selected on a per
grammar basis, just as the number of terminals with Ag > 0
is grammar speciﬁc.

Falling back to the full grammar
There is some danger that G⋆ will, in fact, not be sufﬁcient
to synthesize a program. Thus, we propose a strategy that
• ﬁrst, tries to synthesize a program with the grammar G⋆
• second, if synthesis with G⋆ is unsuccessful, falls back to

attempting synthesis with the full grammar G.
We determine how long to wait before switching from G⋆

to G by ﬁnding an x that minimizes:

n

Xi=1 (cid:26)

T Ci
G⋆
min(x + T Ci

T Ci
G⋆ < x
G , t) T Ci
G⋆ > x(cid:27)

(2)

where C1 . . . Cn are the constraints from the training set,
and t is the timeout for synthesis.

line of

the sum,
Ideally, as captured in the ﬁrst
(Ci, G⋆)  x P will ﬁnish before T Ci
G⋆ = x. However, if a
benchmark does not ﬁnish in that time, it will fall back on
the full grammar. Then, either (Ci, G⋆)  t−x P will suc-
ceed, and synthesize the expression in total time x + T Ci
G , or
synthesis will timeout, in total time (t − x) + x = t.

Experiments
The SyGuS competition (Alur et al. 2017) provides public
competition benchmarks and results from previous years.
In particular, the PBE Strings dataset provides a collection
of PBE problems over a grammar that includes string, in-
teger, and Boolean manipulating functions. First, we de-
scribe our approach to generating a training set of PBE
problems over strings. Then, we present our results run-
ning GRT against the 2019 competition’s winner in the PBE
Strings track, CVC4 (N¨otzli et al. 2019; Barrett et al. 2011;
Alur et al. 2019). We are able to reduce synthesis time by
47.65% and synthesize a new solution to a benchmark that
was left unsolved by CVC4.

CVC4
GRT+CVC4

e
t
e
l
p
m
o
c
o
t

s
d
n
o
c
e
S

150

100

50

0

43 44 45 46 67 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62
Benchmark Id

Figure 2: The top 20 problems with longest synthesis time for CVC4 (excepting timeouts), and the corresponding synthesis
times for GRT+CVC4.

Technical details

The data triples generated during our initial data generation
process of T Rcrit are triples of strings. However, the neural
network cannot process input-output pairs of type string as
input. Thus, this data must be encoded numerically before
it can be utilized to train the neural network. Each character
in the input-output pairs is converted to its ASCII equiva-
lent integer value. The size of each pair is then standardized
by adding a padding of zeros to the end of each newly en-
coded input and output vector respectively. This creates two
vectors: the encoded input and the encoded output, both of
which have a length of 20. These two vectors are then con-
catenated to give us a single vector for training. By the end
of this process the triples created in our ﬁrst data generation
step are now one vector of type N40 representing the input-
output pair and a correct label P that will be predicted.

To generate the training set for predicting synthesis times,
T Rtime, we combine human generated and automatically
generated SyGuS problems. Speciﬁcally, we use 10 human
generated SyGuS problems, and 20 randomly selected prob-
lems from T Rcrit.

The overall architecture of our model can be categorized
as a multi-layer perceptron (MLP) neural network. More
speciﬁcally, our model is made up of ﬁve fully connected
layers: the input layer, three hidden layers, and the output
layer. By using the Keras Framework, we include an em-
bedding layer along with our input layer which enables us
to create unique vector embeddings of length 100 for any
given input-output pair in the dataset. This embedding layer
learns the optimal weights used to create these unique vec-
tors through the training process. Thus, we create an encod-
ing of the input-output pairs for training, while simultane-
ously standardizing the scale of the vector before it reaches
the ﬁrst hidden layer. The hidden layers of the model are all
fully connected, and all use the sigmoid activation function.
In addition, we implement dropout during training to ensure

that overﬁtting does not occur. The size of the hidden layers
was calculated using a geometric series to ensure that there
was a consistent decrease in layer size as the layers get closer
to the output layer. Speciﬁcally, the size of each hidden layer
was calculated by:

HLsize (n) = input size

output size
input size (cid:1)

n
Lnum +1

(3)

(cid:0)
where Lnum represents the total number of layers in the
network. Our model used the Adam optimization method
and the binary-cross entropy loss function as it is well suited
for multi-label classiﬁcation. Overall, our model was trained
on 124928 data points for 15 epochs with a batch size of 200
producing a training time of 228 seconds.

Results

After generating our data sets and training our model, we
wrote a wrapper script to run GRT as a preprocessor for
CVC4’s SyGuS engine. We compared the synthesis results
of GRT+CVC4 with the synthesis results of running CVC4
alone. All experiments were run on MacBook Pro with a 2.9
GhZ Intel i5 processor with 8GB of RAM. CVC4 uses a
default random seed, and is deterministic over the choice
of that seed, so the results of synthesis from CVC4 on a
given grammar and set of constraints are deterministic. We
note that our training data in no way used any of the SyGuS
benchmarks.

GRT+CVC4 outperformed directly calling CVC4 on 32
out of 64 benchmarks (50%), with a reduction in total syn-
thesis time over all benchmarks from 1304.87 seconds with
CVC4 to 683.09 seconds with GRT+CVC4. On one bench-
mark, CVC4 timed out and was not able to ﬁnd a solution
(even when the timeout was increased to 5000 seconds),
while GRT+CVC4 found a solution within the timeout spec-
iﬁed by the SyGuS Competition rules (3600 seconds). On
one benchmark, both CVC4 and GRT+CVC4 timeout (TO)

s
n
o
i
t
u
l
o
s
d
e
z
i
s
e
h
t
y
s

f
o
h
t
g
n
e
L

100

50

0

49

CVC4
GRT+CVC4

61

62
Benchmark Id

58

48

Figure 3: When the GRT+CVC4 found a different solution
than CVC4, it was on average shorter than the solution found
with the full grammar.

and are not able to ﬁnd a solution. On the other 31 bench-
marks, CVC4 performed the same (within ±0.1s) with and
without the preprocessor. All the benchmarks for which
CVC4 performed the same as GRT+CVC4 ﬁnish in under
2 seconds, and 28 of the 31 ﬁnish in under a second. In
these cases there was little room for improvement even with
GRT+CVC4.

Figure 4 shows the exact running times with both the full
and reduced grammars from the benchmarks with the 30
largest running times with the full grammar. These are the
benchmarks for which the synthesis times and size of the so-
lution diverge most meaningfully, however all other data is
available in the supplementary material for this paper. Fig-
ure 4 also shows |P | and |P ∗|, the sizes of the programs
found by the CVC4 and GRT+CVC4, respectively. We de-
ﬁne size of a program as the number of nodes in the abstract
syntax tree of the program. In terms of the grammar G, this
is the number of terminals (including duplicates) that were
composed to create the program.

In Figure 2, we present a visual comparison of the results
for the 20 functions that took CVC4 the longest, while still
ﬁnishing in the 3,600 second time limit. We note that we
have the largest gains on the problems for which CVC4 is
the slowest. Problems that CVC4 already handles quickly
stand to beneﬁt less from our approach.

In order to get a better baseline to understand the impact
of GRT on running times, we ran a version of GRT with
only the criticality prediction, which we call GRTC. In this
case, GRTC+CVC4 actually performed worse than CVC4
by itself, increasing the running time on 53 out of the 62
benchmarks that did not timeout on CVC4.

On all but 5 benchmarks, CVC4 synthesized the same pro-
gram when running with G and G⋆. The sizes of the pro-
grams (in terms of the number of terminal symbols used) for
the benchmarks on which CVC4 synthesized different pro-
grams are shown in Figure 3. While on some benchmarks
GRT+CVC4 produced a larger solution than CVC4, as a
whole the sum of the size of all solutions for CVC4 was

id
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64

ﬁle
lastname-small.sl
bikes-long.sl
bikes-long-repeat.sl
lastname.sl
phone-6-short.sl
phone-7-short.sl
initials-long-repeat.sl
phone-5-short.sl
phone-7.sl
phone-8.sl
phone-6.sl
phone-5.sl
phone-9-short.sl
phone-10-short.sl
phone-9.sl
phone-10.sl
lastname-long.sl
lastname-long-repeat.sl
phone-6-long-repeat.sl
phone-5-long-repeat.sl
phone-7-long.sl
phone-7-long-repeat.sl
phone-5-long.sl
phone-8-long-repeat.sl
phone-9-long-repeat.sl
phone-6-long.sl
phone-8-long.sl
phone-10-long-repeat.sl
phone-10-long.sl
initials-long.sl
phone-9-long.sl

T C
G
1.80
1.97
2.08
2.31
3.23
3.26
3.33
3.72
4.57
4.72
4.85
4.88
4.88
8.81
12.08
31.23
32.40
32.49
83.59
84.77
87.83
89.13
90.81
91.04
91.19
98.15
108.06
149.53
153.32
TO
TO

T C
G⋆
1.84
1.76
1.71
1.83
1.22
1.26
2.54
1.51
2.03
2.17
1.97
2.20
4.73
8.28
4.86
8.49
25.49
24.92
25.31
33.68
26.15
26.23
30.01
35.64
77.02
24.75
29.94
129.43
133.22
TO
3516.21

|P |
4
3
3
4
11
11
7
9
11
11
11
11
52
49
56
97
4
4
11
11
11
11
11
11
47
11
11
49
49
-
-

|P ⋆|
4
3
3
4
11
11
7
9
11
11
11
11
52
49
52
49
4
4
11
11
11
11
11
11
50
11
11
65
65
-
49

Figure 4: Synthesis results over the 30 longest running
benchmarks from SyGuS Competition’s PBE Strings track.

806, while for GRT+CVC4 it was 789. Thus, overall, we
were able to outperform CVC4 on size of synthesis as well.
The SyGuS competition scores each tool using the for-
mula: 5N + 3F + S, where N is the number of benchmarks
solved (non-timeouts), F is based on a “pseudo-logarithmic
scale” (Alur et al. 2017) indicating speed of synthesis, and
S is based on a “pseudo-logarithmic scale” indicating size
of the synthesized solution. On all three of these measure-
ments, GRT+CVC4 performed better than CVC4. There are
number of other synthesis tracks available in the SyGuS
competition, which do not involve PBE constraints. We note
that our approach can selectively be applied as a preprocess-
ing step for input in the PBE track without incurring an over-
head on other synthesis tasks.

Although we implemented a strategy to manage a switch
from the reduced grammar back to the full grammar, we
found in practice that the optimal strategy for our system
was to exclusively use the reduced grammar. Because we
had conservatively pruned the grammar, we had no need to
switch back to the full grammar.

Conclusions
In a way, by training on a dataset we generate from the out-
put of the interpreter of the language, we are encoding an ap-
proximation of the semantics into our neural network. While
the semantic approximation is too coarse to drive synthesis
itself, we can use it to prune the search space of potential
programs. By predicting terminals impact on synthesis time,
we more conservatively remove only terminals likely to have
a positive impact. In conjunction with analytically driven
tools, we can then signiﬁcantly improve synthesis times with
very little overhead.

While we have presented GRT, which demonstrates a sig-
niﬁcant gain in performance over all existing SyGuS solvers,
we still have many opportunities for further improvement. In
our prediction of the potential time saved by removing a ter-
minal from the grammar, we have simply used the average
expected value over all samples in the dataset. By using a
neural network here, we may be able to leverage some prop-
erty of the SyGuS problem constraints to have more accurate
potential time savings predictions. This would allow us, pos-
sibly in combination with a more advance prediction com-
bination strategy, to more aggressively prune the grammar.
The drawback to this approach is that we may then poten-
tially remove too much from the grammar. One of the key
features of GRT is that it introduces no new timeouts, that
is, it does not remove any critical parts of the grammar.

Additionally, our prediction of criticality of a terminal
uses a voting mechanism to combine the prediction based
on each constraint. While this worked well in practice, this
strategy ignores the potential for interaction between con-
straints. In our preliminary exploration, we were not able to
construct a model that captures this inter-constraint interac-
tion in a useful way. This may be a path for future work. In a
similar vein, there exist a number of other works that deﬁne
a criticality measure for each terminal in the SyGuS gram-
mar (Balog et al. 2017; Kalyan et al. 2018). It may be possi-
ble to leverage these in place of our criticality measure, and
in combination with our time savings prediction, to achieve
better results.

So far we have only explored the PBE Strings track of the
SyGuS Competition. The competition also features a PBE
BitVectors track where our technique may have signiﬁcant
gains as well. This would require a new encoding scheme,
but the overall approach would remain similar. In general,
extending this work to allow for other PBE types, as well as
more general constraints, would broaden the potential real-
world application of SyGuS.

Acknowledgments This work was supported in part
by NSF grants CCF-1302327, CCF-1715387, and CCF-
1553168.

References
[Alur et al. 2013] Alur, R.; Bodik, R.; Juniwal, G.; Martin,
M. M.; Raghothaman, M.; Seshia, S. A.; Singh, R.; Solar-
Lezama, A.; Torlak, E.; and Udupa, A. 2013. Syntax-guided
synthesis. In 2013 Formal Methods in Computer-Aided De-
sign, 1–8. IEEE.

[Alur et al. 2017] Alur, R.; Fisman, D.; Singh, R.; and Solar-
Lezama, A. 2017. Sygus-comp 2017: Results and analysis.
arXiv preprint arXiv:1711.11438.

Fisman, D.;

[Alur et al. 2019] Alur, R.;

S.;
2019.
Reynolds, A.; Singh, R.; and Udupa, A.
The
synthesis.
on
https://sygus.org/comp/2019/results-slides.pdf. Accessed:
2019-11-20.

syntax-guided

competition

Padhi,

6th

[Andrychowicz and Kurach 2016] Andrychowicz, M., and
Kurach, K. 2016. Learning efﬁcient algorithms with hierar-
chical attentive memory. arXiv preprint arXiv:1602.03218.
[Balog et al. 2017] Balog, M.; Gaunt, A. L.; Brockschmidt,
M.; Nowozin, S.; and Tarlow, D. 2017. Deepcoder: Learn-
In 5th International Conference
ing to write programs.
on Learning Representations, ICLR 2017, Toulon, France,
April 24-26, 2017, Conference Track Proceedings.

[Barrett et al. 2011] Barrett, C.; Conway, C. L.; Deters, M.;
Hadarean, L.; Jovanovi´c, D.; King, T.; Reynolds, A.; and
In International Conference on
Tinelli, C. 2011. CVC4.
Computer Aided Veriﬁcation, 171–177. Springer.

[Bunel et al. 2018] Bunel, R.; Hausknecht, M.; Devlin, J.;
Singh, R.; and Kohli, P. 2018. Leveraging grammar and
reinforcement learning for neural program synthesis. arXiv
preprint arXiv:1805.04276.

[Chen, Liu, and Song 2017] Chen, X.; Liu, C.; and Song, D.
2017. Learning neural programs to parse programs. CoRR
abs/1706.01284.

[Church 1963] Church, A. 1963. Application of recursive
arithmetic to the problem of circuit synthesis. Journal of
Symbolic Logic 28(4):289–290.

[cod 2019] 2019. codata - ai completions for your java ide.

https://www.codota.com/. Accessed: 2019-09-03.

[Cypher et al. 1993] Cypher, A.; Halbert, D. C.; Kurlander,
D.; Lieberman, H.; Maulsby, D.; Myers, B. A.; and Turran-
sky, A., eds. 1993. Watch What I Do: Programming by
Demonstration. Cambridge, MA, USA: MIT Press.

[Devlin et al. 2017a] Devlin, J.; Bunel, R. R.; Singh, R.;
Hausknecht, M.; and Kohli, P. 2017a. Neural program meta-
In Advances in Neural Information Processing
induction.
Systems, 2080–2088.

[Devlin et al. 2017b] Devlin, J.; Uesato, J.; Bhupatiraju, S.;
Singh, R.; Mohamed, A.-r.; and Kohli, P. 2017b. Robustﬁll:
In Proceedings
Neural program learning under noisy i/o.
of the 34th International Conference on Machine Learning-
Volume 70, 990–998. JMLR. org.

[Feng et al. 2017] Feng, Y.; Martins, R.; Wang, Y.; Dillig, I.;
and Reps, T. W. 2017. Component-based synthesis for com-
plex apis. In Proceedings of the 44th ACM SIGPLAN Sym-
posium on Principles of Programming Languages, POPL
2017, 599–612.

[Graves, Wayne, and Danihelka 2014] Graves, A.; Wayne,
G.; and Danihelka, I. 2014. Neural turing machines. arXiv
preprint arXiv:1410.5401.

[Gulwani 2011] Gulwani, S. 2011. Automating string pro-
In

cessing in spreadsheets using input-output examples.
PoPL’11, January 26-28, 2011, Austin, Texas, USA.

[Si et al. 2018] Si, X.; Yang, Y.; Dai, H.; Naik, M.; and Song,
L. 2018. Learning a meta-solver for syntax-guided program
synthesis.

[Wang et al. 2018] Wang, C.; Huang, P.-S.; Polozov, A.;
Brockschmidt, M.; and Singh, R. 2018. Execution-guided
neural program decoding. arXiv preprint arXiv:1807.03100.

[Gvero et al. 2013] Gvero, T.; Kuncak, V.; Kuraj, I.; and
Piskac, R. 2013. Complete completion using types and
In ACM SIGPLAN Conference on Programming
weights.
Language Design and Implementation, PLDI ’13, Seattle,
WA, USA, June 16-19, 2013, 27–38.

[Joulin and Mikolov 2015] Joulin, A., and Mikolov, T. 2015.
Inferring algorithmic patterns with stack-augmented recur-
rent nets. In Advances in neural information processing sys-
tems, 190–198.

[Kaiser and Sutskever 2015] Kaiser, Ł., and Sutskever, I.
arXiv preprint

2015. Neural gpus learn algorithms.
arXiv:1511.08228.

[Kalyan et al. 2018] Kalyan, A.; Mohta, A.; Polozov, O.; Ba-
tra, D.; Jain, P.; and Gulwani, S. 2018. Neural-guided deduc-
tive search for real-time program synthesis from examples.
arXiv preprint arXiv:1804.01186.

[Kuncak et al. 2010] Kuncak, V.; Mayer, M.; Piskac, R.; and
Suter, P. 2010. Complete functional synthesis. In Proceed-
ings of the 2010 ACM SIGPLAN Conference on Program-
ming Language Design and Implementation, PLDI 2010,
Toronto, Ontario, Canada, June 5-10, 2010, 316–329.

[Manna and Waldinger 1979] Manna, Z., and Waldinger, R.
1979. A deductive approach to program synthesis. In Pro-
ceedings of the Sixth International Joint Conference on Ar-
tiﬁcial Intelligence, IJCAI 79, Tokyo, Japan, August 20-23,
1979, 2 Volumes, 542–551.

[N¨otzli et al. 2019] N¨otzli, A.; Reynolds, A.; Barbosa, H.;
Niemetz, A.; Preiner, M.; Barrett, C.; and Tinelli, C. 2019.
Syntax-guided rewrite rule enumeration for smt solvers.
SAT.

[Nye et al. 2019] Nye, M.; Hewitt, L.; Tenenbaum, J.; and
Solar-Lezama, A. 2019. Learning to infer program sketches.
arXiv preprint arXiv:1902.06349.

[Padhi et al. 2019] Padhi, S.; Millstein, T. D.; Nori, A. V.;
and Sharma, R. 2019. Overﬁtting in synthesis: Theory and
practice. In Computer Aided Veriﬁcation - 31st International
Conference, CAV 2019, New York City, NY, USA, July 15-18,
2019, Proceedings, Part I, 315–334.

[Raghothaman and Udupa 2019] Raghothaman, M.,

and
Udupa, A. 2019. Language to specify syntax-guided syn-
thesis problems. https://sygus.org/assets/pdf/SyGuS-IF.pdf.
Accessed: 2019-11-20.

[Santolucito et al. 2017] Santolucito, M.; Zhai, E.; Dhodap-
kar, R.; Shim, A.; and Piskac, R. 2017. Synthesizing con-
ﬁguration ﬁle speciﬁcations with association rule learning.
PACMPL 1(OOPSLA):64:1–64:20.

[Santolucito, Hallahan, and Piskac 2019] Santolucito, M.;
Hallahan, W. T.; and Piskac, R. 2019. Live programming
In Extended Abstracts of the 2019 CHI
by example.
Conference on Human Factors in Computing Systems, CHI
2019, Glasgow, Scotland, UK, May 04-09, 2019.

[Shin et al. 2019] Shin, R.; Kant, N.; Gupta, K.; Bender, C.;
Trabucco, B.; Singh, R.; and Song, D. 2019. Synthetic
datasets for neural program synthesis. In International Con-
ference on Learning Representations.

