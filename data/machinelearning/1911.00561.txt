0
2
0
2

p
e
S
1
2

]
E
S
.
s
c
[

3
v
1
6
5
0
0
.
1
1
9
1
:
v
i
X
r
a

Twin-Finder: Integrated Reasoning Engine for
Pointer-Related Code Clone Detection

Hongfa Xue
The George Washington University
Washington, DC, USA
hongfaxue@gwu.edu

Yongsheng Mei
The George Washington University
Washington, DC, USA
ysmei@gwu.edu

Kailash Gogineni
The George Washington University
Washington, DC, USA
kailashg26@gwu.edu

Guru Venkataramani
The George Washington University
Washington, DC, USA
guruv@gwu.edu

Tian Lan
The George Washington University
Washington, DC, USA
tlan@gwu.edu

Abstract—Detecting code clones is crucial in various software
engineering tasks. In particular, code clone detection can have
signiﬁcant uses in the context of analyzing and ﬁxing bugs in
large scale applications. However, prior works, such as machine
learning-based clone detection, may cause a considerable amount
of false positives. In this paper, we propose Twin-Finder, a novel,
closed-loop approach for pointer-related code clone detection that
integrates machine learning and symbolic execution techniques
to achieve precision. Twin-Finder introduces a clone veriﬁcation
mechanism to formally verify if two clone samples are indeed
clones and a feedback loop to automatically generated formal
rules to tune machine learning algorithm and further reduce the
false positives. Our experimental results show that Twin-Finder
can swiftly identify up 9× more code clones comparing to a tree-
based clone detector, Deckard and remove an average 91.69%
false positives.

Index Terms—Memory Safety, Formal methods, Code Clones

I. INTRODUCTION
With rapid rise in software sizes and complexity, analyzing
and ﬁxing bugs in large scale applications is becoming
increasingly critical. Similar code fragments are common
in large code bases [14]. Detecting such code fragments,
usually referred as code clones, is crucial in various software
engineering tasks, such as vulnerability discovery, refactoring
and plagiarism detection. Prior works that use subsequence
matching [5] have shown good performance in detecting text-
based similar code clones. They have limited scalability since
the pairwise string or tree comparison is expensive in large code
bases. Code clone detection using machine learning approaches,
such as clustering algorithms, improves the previous string-
matching based clone detections. However, this may still cause
a considerable amount of false positives.

In this paper, we introduce a novel clone detection approach,
Twin-Finder, that is designed for better clone detection. Our
approach uses domain-speciﬁc knowledge for code clone
analysis, which can be used to detect code clone samples
spanning non-contiguous and intertwined code base in software
applications. We design and demonstrate our framework for
pointer-related code clone detection, as pointers and pointer-
related operations widely exist in real-world applications and
often cause security bugs, detecting such pointer-speciﬁc code
clones are of great signiﬁcance.

To verify the robustness of detection, we design a clone
veriﬁcation mechanism using symbolic execution (SE) that

formally veriﬁes if the two clone samples are indeed true code
clones. Existing works have reported that the false positives
from code clone detection are inevitable and human efforts
are still needed for further veriﬁcation and tuning detection
algorithms [14]. To automate this veriﬁcation process, we
introduce a feedback loop using formal analysis. We compare
the Abstract Syntax Trees (AST) representing two code clone
samples if we observe they have different memory safety
conditions. We add numerical weight to the feature vectors
corresponding to the two code clone samples, based on the
outputs from the tree comparison. Finally, we exponentially
recalculate the distances among feature vectors to reduce the
false positives admitted from code clone detection.

The contributions of this paper are summarized as follows:
• We propose Twin-Finder, a pointer-related code clone
detection framework. Twin-Finder can automatically
identify related codes from large code bases and perform
code clone detection.

• Twin-Finder leverages program slicing to remove ir-
relevant codes and isolate analysis targets to ﬁnd non-
contiguous and intertwined clones. Our evaluation demon-
strates that Twin-Findercan detect up to 9× more clones
comparing to Deckard.

• Twin-Finder deploys formal analysis to perform a closed-
loop operation. In particular, Twin-Finder introduces a
clone veriﬁcation mechanism to formally verify if two
clone samples are indeed clones and a feedback loop to
tune code clone detection algorithm and further reduce
an average 91.69% false positives.

II. PROBLEM STATEMENT AND MOTIVATION

A. Challenges

Assuming we want to detect code clones for pointer-related
code clones, existing code clone detection approaches are
inefﬁcient for this purpose, due to the considerable amount of
pointer-irrelevant codes coupled with the target pointers. Even
most advanced deep learning approaches currently fail to extract
clone samples where pointer-related codes are intertwined
with other codes. Another issue from current clone detection
approaches is that they cannot guarantee zero false positives.
To eliminate false positives, it always requires human efforts
for further veriﬁcation. If we can eliminate the false positives

 
 
 
 
 
 
1 v o i d dict2pid_dump ( . . . ) {
2 . . .
3 f o r
4
5

f p r i n t f
f o r

"%5d " ,

( j = 0 ;

( i = 0 ;

( fp ,

i ) ;

i < mdef−>n _ s s e q ;

i ++) {

j < m d e f _ n _ e m i t _ s t a t e ( mdef ) ;

j

++)
f p r i n t f

( fp ,

"%5d " , mdef−>s s e q [ i ] [ j ] ) ;

6
7 . .
8 }
9 . .
10 }

6 }
7 . . .
8 }
9 . . .
10 }

1 i n t 3 2 g c _ c o m p u t e _ c l o s e s t _ c w ( . . . ) {
2 . . .
3 f o r ( c o d e i d = 0 ; c o d e i d < gs −>n_code ; c o d e i d +=2) {
4
5

f o r ( c i d = 0 ; c i d <gs −>n _ f e a t l e n ;

"%5d " , gs −>codeword [ c o d e i d ] [ c i d ] )

c i d ++)

( fp ,

f p r i n t f
;

Code fragment of function sphinx3::dict2pid_dump as
pointer {mdef − > sseq} are intertwined inside of the
function

Code fragment of function sphinx3::gc_compute_closest_cw
as pointer {gs− > codeword} are intertwined inside of the
function

Fig. 1. A true positive example

(a) AST of function sphinx3::dict2pid_dump

(b) AST of function sphinx3::gc_compute_closest_cw

Fig. 2. ASTs generated from the true positive example in Figure 1, where the shady nodes represent the different nodes between two trees

( . . . ,

i n t 3 2 ∗ a c t i v e )

( j = 0 ; a c t i v e [ j ] >= 0 ;

j ++) {

1 i n t 3 2 mgau_eval
2 {
3 . . .
4 f o r
5
6 . . .
7 }
8 . . .
9 }

c = a c t i v e [ j ] ;

1 v o i d l e x t r e e _ h m m _ h i s t b i n ( l e x t r e e _ t ∗ l e x t r e e

, . . . )

( i = 0 ;

i < l e x t r e e −>n _ a c t i v e ;

i ++) {

l n = l i s t [ i ] ;

2 {
3 . . .
4 f o r
5
6 . .
7 }
8 . . .
9 }

Code clone samples of function sphinx3::mgau_eval and
sphinx3::lextree_hmm_histbin as pointer {active} and
{list} are intertwined inside of the functions

Fig. 3. A false positive example

as many as possible, We still can enable a better analysis with
more clone samples.

B. Motivating Example

We use real-world false positive and true positive samples in
sphinx3 from SPEC2006 benchmark reported from a tree-based
code clone detector DECKARD [5] as motiving examples. First,
we give the formal deﬁnition of false positive which is deﬁned
in Deﬁnition 1.

Deﬁnition 1. False Positives. In this paper, we deﬁne false
positives occur if a code clone pair is identiﬁed as code clones

by code clone detection, but two clone samples share different
bound safety constraints in terms of pointer analysis.

Conventional clone detections, such as combining tree-
based approach with machine learning techniques, introduce
a code similarity measurement S and transfer the code
into intermediate representations (e.g. Abstract Syntax Trees
(ASTs)) to detect more code clones. This can help to detect
clones that are not identical but still sharing a similar code
structure. Consider the true positive example in Figure 1, in
tree-based clone detection, two source ﬁles are ﬁrst parsed
and converted into Abstract Syntax Trees (ASTs), where all
identiﬁer names and literal values are replaced by AST nodes.
For example, the initialization and exit conditions in for loops
are replaced as Assignment, BinaryOp, UnaryOp and so on.
Then a tree pattern is generated from post-order tree traversal.
After, a pairwise tree pattern comparison can be used to detect
such clones. In Figure 2 we plot the ASTs for these two clone
samples correspondingly. Both ASTs share a common tree
pattern with only three different nodes appeared in the ﬁrst
code sample. It is clear to see that the ﬁrst code sample has
an extra function call fprintf compared to the second code
sample. If we relax the code similarity threshold, these two
code samples are identiﬁed as code clones.

a

with

dependency

proceed
process,

variables{i, j, mdef −

anal-
To
>
ysis
n_sseq, mdef _n_emit_state(mdef )}
as
pointer-related variables (that can potentially affect the value
of pointers) for target pointer {mdef − > sseq} in the ﬁrst
example (second code example is applied with the same
procedure). However, fprintf cannot affect any values of those
variables. Thus, the bound safety conditions can be simply
derived as these two equations.

identiﬁed

are

{i < length(mdef − > sseq)} ∧ {j < length(∗mdef − > sseq)}

(1)

(a) AST of function sphinx3::mgau_eval

(b) AST of function sphinx3::lextree_hmm_histbin

Fig. 4. ASTs generated from false positive example in Figure 3, where the shady nodes represent the different nodes between two trees

{codeid < length(gs− > codeword)} ∧ {cid < length(∗gs− > codeword)}

(2)

respectively. As we can see, they are identical because the
conditions differ only in variable names. Thus, they are true
positives as they share the same pointer safety conditions.

Even though a relaxed code similarity is able to detect
such clones, it can also introduce a considerable amount of
false positives. Figure 3 illustrates one false positive example
detected in sphinx3 from SPEC2006 benchmark. Two for loops
are identiﬁed as code clones under a certain code similarity
threshold. Figure 4 shows the ASTs generated from those
two code samples respectively. As we can see, they indeed
share a common tree pattern but with 2 different nodes in
shady color. Even though they are not identical, they still can
be identiﬁed as similar looking code clones if we relax the
code similarity threshold. Assuming the target pointers for
analysis are active and list, we ﬁrst obtain pointer related
variables through dependency analysis. It is easy to see that a
solely variable j is related to pointer active but two variables
{i, lextree− > n_active} are related to list. Thus,
the
bound safety conditions are deemed different. As mentioned
in Deﬁnition 1, these two code clones will be deﬁned as false
positives since they do not share the same safety conditions.

III. SYSTEM DESIGN

In this section, we present details of our Twin-ﬁnder and
show how our system is designed. Two main components of
Twin-Finder are shown in Figure 5, namely Domain Speciﬁc
Slicing and Closed-loop Code Clone Detection.

A. Domain Speciﬁc Slicing

For pointer analysis, only some certain types of variables
are related to the target pointer for further consideration, which
can affect the base, offset or bound information of this pointer
(such as array index, pointer increment and other similar types
of variables). Here, we name such variables as pointer-related
variables. Analyzing only pointers in the programs requires
unrelated codes to be discarded automatically. However, this
selection of relevant codes requires the knowledge of control
ﬂow and dependency of data among pointer-related variables to
be taken into account. To address this problem, Twin-Finder
ﬁrst performs dependency analysis of the code and deploy
program slicing to isolate pointer related code in three steps:
1) Pointer Selection. Given a source code of a program, we
utilize the static code analysis to select all the pointers
and collect related information from the code, including
variable name, pointer declaration type (e.g. global vari-
ables, local variables or structures) and the location in
the code (deﬁned and used in which function). The types
of selected pointers consist of the pointers/arrays deﬁned

as local/global variables, the elements of structures and
function parameters. We generate a pointer list for each
program through such pointer selection process, denoted
as P trList = {p1, p2, . . . , pm}, where pi represents a
target pointer for further analysis (for i = 1, . . . , m).
2) Dependency Analysis and Lightweight Tainting A
directed dependency graph DG = (N , E) is created for
each pointer pi within the function where it is originally
declared. The nodes of the graph N represent the identi-
ﬁers in the function and edges E represent the dependency
between nodes, which reﬂects array indexing, assignments
between identiﬁers and parameters of functions. As soon
as the dependency graph is constructed, we start with the
target pointer pi and traverse the dependency graph to
discover all pointer-related variables in both top-down and
bottom-up directions. This tainting propagation process
stops at function boundaries. In the end, we generate the
pointer-related variable list pi = {v1, v2, . . . , vn}, where
vi represents a pointer-related variable for pointer pi.
3) Isolating Code through Slicing. We use both forward
and backward program slicing to isolate code into pointer-
isolated code. Given a pointer-related variable list V =
{v1, v2, . . . , vn} for a target pointer pi, we ﬁrst make use
of backward slicing: we construct a backward slice on
each variable vi ∈ V at the end of the function and slice
backwards to only add the statements into slice iff there is
data dependency as vi is on left-hand side of assignments
or parameter of functions, which can potentially affect
the value of vi, in the slice. Whenever vi is in a loop (e.g.
while/f or loop) or if − else/switch branches, forward
slicing is then used to add those control dependency
statements to the slice.

B. Code Clone Detection

Twin-Finder leverages a tree-based code clone detection
approach, which is originally proposed by Jiang et al. [5]. We
adopt the notions of code similarity, feature vectors and other
related deﬁnitions from previous work [5]. We deploy such
method on the top of our domain speciﬁc slicing module to
only detect code clones among pointer isolated codes.

1) Deﬁnitions: We ﬁrst formally give the several deﬁnitions

used in our code clone detection module.

Deﬁnition 2. Code Similarity.

Given two Abstract Syntax Trees (AST) T1 and T2, which
are representing two code fragments, the code similarity S
between them is deﬁned as:

S(T1, T2) =

2S
2S + L + R

(3)

Fig. 5. Approach Overview

S is the number of shared nodes in T1 and T2; {L :
[t1, t2, .., tn], R : [t1, t2, .., tm]} are the different nodes between
two trees, where ti represents a single AST node.

Deﬁnition 3. Feature Vectors. A feature vector V =
(v1, v2, ..., vn) in the Euclidean space is generated from a
sub-AST, corresponding to a code fragment, where each vi
represents a speciﬁc type of AST nodes and is calculated by
counting the occurrences of corresponding AST node types in
the sub-AST.

Given an AST tree T , we perform a post-order traversal
of T to generate vectors for its subtrees. Vectors for a subtree
are summed up from its constituent subtrees.

2) Clone Detection: Given a group of feature vectors, we
utilize Locality Sensitive Hashing (LSH) [4] and near-neighbor
querying algorithm based on the euclidean distance between
two vectors to cluster a vector group Suppose two feature
vectors Vi and Vj representing two code fragments Ci and Cj
respectively. The code size (the total number of AST nodes)
are denoted as S(Ci) and S(Cj). The euclidean distance
between Vi and Vj are denoted as E([Vi; Vj]) Then, given
a feature vector group V , the threshold can be simpliﬁed as
(cid:112)2(1 − S) × minv∈V ∈ S(v), where we use vector sizes to
approximate tree sizes. The S is the code similarity metric
deﬁned from Equation 2(we omit the details of how this
threshold is derived. We refer readers to [5]). Thus, code
fragments Ci and Cj will be clustered together as code clones
under a given code similarity S if E([Vi; Vj]) ≤ T .
C. Clone Veriﬁcation

To formally check if the code clones detected by Twin-
Finder are indeed code clones in terms of pointer memory
safety, we propose a clone veriﬁcation mechanism and utilize
symbolic execution as our veriﬁcation tool.

1) Recursive Sampling: To improve the coverage of code
clone samples in the clusters, we propose a recursive sampling
procedure to select clone samples for clone veriﬁcation.

First, we randomly divide one cluster into several smaller
clusters. Then we pick random code clone samples from
each smaller cluster center and cluster boundary. After, we
employ symbolic execution in selected samples for further
clone veriﬁcation. Note that the code clone samples are pointer
isolated code generated from program slicing. Since symbolic
execution requires the code completeness, we map the code
clone samples to the original source code locations to perform
symbolic execution.

2) Clone Veriﬁcation: Clustering algorithm cannot offer any
guarantees in terms of ensuring safe pointer access from all
detected code clones. It is possible that two code fragments are

clustered together, but have different bound safety conditions,
especially if we use a smaller code similarity. To further
improve the clone detection accuracy of Twin-ﬁnder, we design
a clone veriﬁcation method to check whether the code clone
samples are true clones.

Let X = {p1, p2, ..., pn} be a ﬁnite set of pointer-related
variables as symbolic variables, while symbolic executing
a program all possible paths, each path maintains a set
of constraints called the path conditions which must hold
on the execution of that path. First, we deﬁne an atomic
condition, AC(), over X is in the form of f (p1, p2, ..., pn),
where f is a function that performs the integer operations on
O ∈ {>, <, ≥, ≤, =}. Similarly, a condition over X can be a
Boolean combination of path conditions over X.

Deﬁnition 4. Constraints. An execution path can be repre-
sented as a sequence of basic blocks. Thus, path conditions
can be computed as AC(b0) ∧ AC(b1)... ∧ AC(bn) where each
AC(bi) in AC() represents a sequence of atomic condition
in the basic block bn. For the case of involving multiple
execution paths, the ﬁnal constraints will be the union of
all path conditions.

Example. Back to the example mentioned in Figure 1. The
code fragment of function sphinx3::dict2pid_dump includes two
for loops, representing two basic blocks (b1, b2). Thus, there are
two paths in this code fragment. For the ﬁrst for loop, we can
derive an atomic condition AC(b1) = {i < length(mdef − >
sseq)}. Similarly, we can get the second condition of the sec-
ond for loop as AC(b2) = {j < length(∗mdef − > sseq)}.
Finally, the path conditions for this code can be computed as
AC(b1) ∧ AC(b2).

Give a clone pair sampled from the previous step, we perform
symbolic execution from beginning to the end of clone samples
in original source code based on the locations information (line
numbers of code). The symbolic executor is used to explore
all the possible paths existing in the code fragment. We collect
all the possible constraints(deﬁned in Deﬁnition 4) for each
clone sample after symbolic execution is terminated. Then the
veriﬁcation process is straightforward. A constraint solver can
be used to check the satisﬁability and syntactic equivalence of
logical formulas over one or more theories.

The steps of this veriﬁcation process are summarized as

follows:

• Matching the Variables: To verify if two sets of con-
straints are equal, we omit the difference of variable names.
However, we need to match the variables between two
constraints based on their dependency of target pointers.
For instance, two pointer dereference a[i] =(cid:48) A(cid:48) and
b[j] =(cid:48) B(cid:48), the indexing variables are i and j respectively.

During symbolic execution, they both will be replaced
as symbolic variables, and we do not care much about
the variables names. Thus, we can derive a precondition
that i is equivalent to j for further analysis. This prior
knowledge can be easily obtained through dependency
analysis mentioned in Section 4.

• Simpliﬁcation: Given a memory safety condition S, it
can contain multiple linear inequalities. For simplicity, the
ﬁrst step is to ﬁnd possibly simpler expression S(cid:48), which
is equivalent to S.

• Checking the Equivalence:To prove two sets of con-
straints S1 == S2 ,we only need to prove the negation
of S1 == S2 is unsatisﬁable.

Example. Assuming we have two sets of constraints, S1 =
(x1 ≥ 4) ∧ (x2 ≥ 5) and S2 = (x3 ≥ 4) ∧ (x4 ≥ 5), where x1
is equivalent to x3 and x2 is equivalent to x4. We then can
solve that N ot(S1 == S2) is unsatisﬁable. Thus, S1 == S2.

D. Formal Feedback to Vector Embedding

Algorithm 1 Algorithm for Feedback to Vector Embedding

1: Input:: Code Clone Samples Ci, Cj
2: Corresponding AST sub-trees: Si, Sj
3: Corresponding Feature Vectors: Vi, Vj
4: Current Code similarity threshold: S
5: Longest Common Subsequence function: LCS ()
6: Output:: Optimized Feature vectors: Oi, Oj
7: Initialization:
8: Oi, Oj = Vi, Vj
9: D = LCS(Si, Sj)
10: if Ci and Cj share same constraints then
Si = RemoveSubtrees(Si − D)
11:
Sj = RemoveSubtrees(Sj − D)
12:
On∈{i;j} = V ectornize(Sn∈{i;j});
13:
14: else
15:
16:
17:
18:
19:

T=[]
U ncommon_Subtrees = (Si − D) + (Sj − D)
T.append(U ncommon_Subtrees)
for t in T do

EuclideanDistance(Oi, Oj)
(cid:112)2(1 − S) × min{Size(Vi), Size(Vj)} then

if

<

20:

21:
22:

break;
t = d.index
On∈{i;j}[t] = On∈{i;j}[t] ∗ δ; where δ > 1.0

While using the formal method to verify if the two clone
samples are true clones, we provide a feedback process to
the vector embedding in code clone detection to reduce false
positives. Since the code clone detection is based on the
euclidean distance between data points over a code similarity
threshold, the feedback is a mechanism to tune the feature
vectors weights. Based on the constraints we obtained from
symbolic execution, we are able to determine which type of
variables or statements causing different constraints between
two clone samples. We use such information to guide feedback
to vector embedding in clone detection module. Now we
describe a feedback mechanism to vector embedding in code
clone detection if we observe false positives veriﬁed through
the execution in Section III-C2.

To tune and adjust the weights in the feature vectors, we
design an algorithm for our feedback. Algorithm 1 shows the
steps of feedback in detail. Given a code similarity threshold
S, It takes two clone samples (Ci, Cj), corresponding AST
sub-trees (Si, Sj) and feature vectors (Vi, Vj) representing
two code clones as inputs (line 1-4 in Algorithm 1), and we
utilize a helper function LCS() to ﬁnd the Longest Common
Subsequence between two lists of sub-trees.

When the code clone samples are symbolically executed,
we start by checking if the constraints, obtained from previous
formal veriﬁcation step, are equivalent. Then the feedback
procedure after is conducted as two folds:

(1) If they indeed share the same constraints, we remove
the uncommon subtrees (where can be treated as numerical
weight as 0) as we now know they will not affect the output
of constraints (line 10-13). This process is to make sure the
remaining trees are identical so that they will be detected as
code clone in the future.

(2) If they have different constraints, we obtain the uncom-
mon subtrees from (Si, Sj)(line 15-17) and add numerical
weight, δ > 1.0, one by one. We iterate the list and we trace
back to the vector using the vector index to adjust the weight
δ for that speciﬁc location correspondingly (line 18-22). We
initialize the weight δ as a random number which is greater
than 1.0 and re-calculate the euclidean distance between two
feature vectors. We repeat this process until the distance is
out of current code similarity threshold S (line 19-20). This is
designed to guarantee that these two code samples will not be
considered as code clone in the future. Finally, the feedback
can run in a loop fashion to eliminate false positives. The
termination condition for our feedback loop is that no more
false positives can be further eliminated or observed.

Example: Here, we give an example to illustrate how
our formal feedback works. We use the false positive ex-
ample showing in Figure 4. Assuming the feature vectors
are < 7, 2, 2, 2, 0, 1, 1, 1, 1 > and < 8, 1, 1, 2, 1, 1, 1, 1, 1 >
respectively, where the ordered dimensions of vectors are occur-
rence counts of the relevant nodes: ID, Constant, ArrayRef,
Assignment, StrucRef, BinaryOp, UnaryOp, Compound,
and For. Based on the threshold deﬁned in equation III-B,
these two code fragments will be clustered as clones when
S = 0.75. During the feedback loop, we ﬁrst identify these
2 different nodes in each tree by ﬁnding the LCS. Assuming
we initial the weight δ = 2 and add it to the corresponding
dimension in the feature vectors, we can obtain the updated
feature vectors as < 7, 1+1×δ, 1+1×δ, 1+1×δ, 0, 1, 1, 1, 1 >
and < 7 + 1 × δ, 1, 1, 2, 1 × δ, 1, 1, 1, 1 >. We then re-calculate
the euclidean distance of these two updated feature vectors,
and they will be no longer satisﬁed within the threshold
(cid:112)2(1 − S) × min(S(Ci), S(Cj)). Thus, we can eliminate
such false positives in the future.

We instrument a source code symbolic executor, KLEE [3]
and SMT solver Z3 [18] for our clone veriﬁcation module. We
develop a python script for our formal feedback module.

IV. EVALUATION

This section presents a detailed evaluation results of
Twin-Finder against a tree-based code clone detection tool
DECKARD [5] in terms of code clone detection, and conduct
several case studies for applications security analysis.

A. Experiment Setup

We selected 7 different benchmarks from real-world applica-
tions: bzip2, hmmer and sphinx3 from SPEC2006 benchmark
suite [1]; man and gzip from Bugbench [7]; thttpd-2.23beat1 [2],
a well-known lightweight sever and a lightweight browser links-
2.14 [8].
B. Code Clones Detection

TABLE I
COMPARISON OF NUMBER OF CODE CLONES DETECTED BEFORE AND
AFTER USING OUR APPROACH

Benchmark

Program Size

#Code clones

#Code clones % Code clones

bzip2

sphinx3

hmmer

thttpd

gzip

man

(LoC)

5,904

13,207

20,721

7,956

5,225

3,028

without slicing and feedback Our approach

432

1,047

1,238

611

36

47

1,084

3,546

4,391

1,398

365

443

150.92%

238.68%

254.68%

128.80%

913.89%

842.55%

3,007

178,441

links
We measure code clone quantity by the number of code
clones that are detected before and after we use Twin-Finder
for pointer analysis purpose. We conduct two experiments in
terms of the following: code clones quantity, the ﬂexibility of
code similarity conﬁguration and false positives analysis.

226.21%

9,809

TABLE II
COMPARISON OF CODE CLONE COVERAGE

Benchmark

bzip2

sphinx3

hmmer

thttpd

gzip

man

links

Pointer related Code

Clone Detection w/ DECKARD

Clone Detection w/ Our Approach

LoC

3,279

9,519

11,635

4,390

2,289

1,683

28,334

# Cloned LoC % Cloned LoC

# D.S LoC

% D.S LoC

1,066

3,073

3,163

1,279

219

248

6,429

32.51%

32.28%

27.19%

29.13%

9.57%

14.74%

22.69%

2,038

7,224

6,929

2,267

919

826

18,334

62.15%

75.89%

59.55%

51.64%

40.15%

49.08%

64.71%

TABLE III
STATISTICS OF CODE CLONES DETECTED FROM TWIN-FINDER WITH THE
NUMBER OF ITERATIONS FOR FEEDBACK UNTIL CONVERGE

Benchmark

# True Code Clones

# Feedback Iterations

S = 1.0

S = 0.90

S = 0.80

S = 1.0

S = 0.90

S = 0.80

bzip2

sphinx3

hmmer

man

gzip

683

1,495

2,725

102

66

858

2,645

3,760

265

183

1,084

3,546

4,391

443

365

1

3

4

1

1

5

10

12

5

4

10

16

21

12

11

We evaluated the effectiveness of Twin-Finder to show
the optimal results Twin-Finder is able to achieve. The code
similarity is set as 0.80 with feedback enabled to eliminate
false positives until converge (no more false positives can be
observed or eliminated) in the ﬁrst experiment. Table I shows
the size of the corresponding percentage of more code clones
detected using our approach. As we can see, the results show
that Twin-Finder is able to detect 393.68% more code clones
on average compared to the clone detection without slicing and
feedback, with the lowest as 128.80% in thttpd and highest up
to 913.89% in gzip. Note that our approach achieves the best
performance in two smaller benchmark gzip and man. That is
because the number of identical code clones is relatively small
in both applications (36 in gzip and 47 in man respectively).

(a) thttpd

(b) links

Fig. 6. The amount of code clones detected in thttpd and links with the number
of iterations for feedback until converge after relaxing the code similarity from
0.70 to 1.00

While using our approach, we harness the power of program
slicing and feedback using formal analysis, which allows us
to detect more true code clones.

We further evaluated the coverage of code clones detected in
terms of pointer-related code. We measured the total number
of pointer-related lines of code (LoC) cross the entire program
and the detected LoC using DECKARD and our approach
as shown in Table II. It presents the total detected pointer
related cloned lines, named as Domain Speciﬁc LoC (D.S
LoC), using our approach. The percentage of D.S LoC ranges
from 40.15% to 75.89%, while for DECKARD the number
ranges from 9.57% to 32.51%. The results show that
it
is difﬁcult to directly compare the coverage for different
applications, because such results are usually sensitive to:
(1) the type of application, such as sphinx3 has intensive
pointer access, thus it has the highest clone coverage using our
approach; (2) the different conﬁgurations may lead to different
results(e.g.,different similarity S).

In the second experiment, we relaxed the code similarity
threshold from 1.00 to 0.70 to show our approach is capable
to detect many more code clones within a ﬂexible user-deﬁned
conﬁguration. However, it is reasonable to expect more false
positives to occur.

To tackle such false positives issue, we enabled a closed-loop
feedback to vector embeddingIn this experiment, we applied
our feedback as soon as we observed two code clone samples
having different constraints through our clone veriﬁcation
process. We executed several iterations of our feedback until
the percentage of false positives converged (no more false
positives can be eliminated or observed). Figure 6 presents the
number of true code clones detected in thttpd and links from
our approach (drawn as the red line in each ﬁgure) and the
number of iterations for feedback needed to converge (shown as
the bar plot in each ﬁgure) correspondingly. We also repeated
the same experiments with three different code similarities
setups in other smaller benchmarks. Table III shows the results.
As expected, we are able to detect more true code clones while
we reduce the code similarity.
C. Feedback for False Positives Elimination

We analyzed the number of false positives that could be
eliminated by our approach. Here, we chose bzip, thttpd and
Links as representative applications to show the results. Figure 7
presents the accumulated percentage of false positives elimi-
nated by Twin-Finder in each iteration with Code Similarity
set to 0.7. Here, we are able to eliminate 99.32%, 89.0%, and
86.74% of false positives in bzip2, thttpd and Links respectively.
The results show our feedback mechanism can effectively

ACKNOWLEDGMENTS
This work was supported by the US Ofﬁce of Naval Research
(ONR) under Awards N00014-15-1-2210 and N00014-17-1-
2786. Any opinions, ﬁndings, conclusions, or recommendations
expressed in this article are those of the authors, and do not
necessarily reﬂect those of ONR.

REFERENCES

[1] SPEC CPU 2006. https://www.spec.org/cpu2006/, 2006.
[2] ACME Lab. Thttpd. http://www.acme.com/software/thttpd/.
[3] Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al. Klee: Unassisted
and automatic generation of high-coverage tests for complex systems
programs. In OSDI, volume 8, pages 209–224, 2008.

[4] Mayur Datar, Nicole Immorlica, Piotr Indyk, and Vahab S Mirrokni.
Locality-sensitive hashing scheme based on p-stable distributions. In
Proceedings of the twentieth annual symposium on Computational
geometry, pages 253–262. ACM, 2004.

[5] Lingxiao Jiang, Ghassan Misherghi, Zhendong Su, and Stephane Glondu.
Deckard: Scalable and accurate tree-based detection of code clones. In
Proceedings of the 29th international conference on Software Engineering,
pages 96–105. IEEE Computer Society, 2007.

[6] Raghavan Komondoor and Susan Horwitz. Using slicing to identify
duplication in source code. In International Static Analysis Symposium,
pages 40–56. Springer, 2001.

[7] Shan Lu, Zhenmin Li, Feng Qin, Lin Tan, Pin Zhou, and Yuanyuan
Zhou. Bugbench: Benchmarks for evaluating bug detection tools. In
Workshop on the evaluation of software defect detection tools, volume 5,
2005.

[8] Twibright Labs. Links. http://links.twibright.com.
[9] Martin White, Michele Tufano, Christopher Vendome, and Denys
Poshyvanyk. Deep learning code fragments for code clone detection.
In Proceedings of the 31st IEEE/ACM International Conference on
Automated Software Engineering, pages 87–98. ACM, 2016.

[10] Hongfa Xue. Learn2Reason: Joint Statistical and Formal learning
Approach to Improve the Robustness and Time-to-solution for Software
Security. PhD thesis, The George Washington University, 2020.
[11] Hongfa Xue, Yurong Chen, Guru Venkataramani, and Tian Lan. Hecate:
Automated customization of program and communication features to
In International Conference on Security and
reduce attack surfaces.
Privacy in Communication Systems. Springer, 2019.

[12] Hongfa Xue, Yurong Chen, Guru Venkataramani, Tian Lan, Guang Jin,
and Jason Li. Morph: Enhancing system security through interactive
customization of application and communication protocol features. In
Proceedings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security, pages 2315–2317. ACM, 2018.

[13] Hongfa Xue, Yurong Chen, Fan Yao, Yongbo Li, Tian Lan, and Guru
Venkataramani. Simber: Eliminating redundant memory bound checks
via statistical inference. In IFIP International Conference on ICT Systems
Security and Privacy Protection, pages 413–426. Springer, 2017.
[14] Hongfa Xue, Shaowen Sun, Guru Venkataramani, and Tian Lan. Machine
learning-based analysis of program binaries: A comprehensive study.
IEEE Access, 7:65889–65912, 2019.

[15] Hongfa Xue, Guru Venkataramani, and Tian Lan. Clone-hunter:
accelerated bound checks elimination via binary code clone detection.
In Proceedings of the 2nd ACM SIGPLAN International Workshop on
Machine Learning and Programming Languages, pages 11–19. ACM,
2018.

[16] Hongfa Xue, Guru Venkataramani, and Tian Lan. Clone-slicer: Detecting
domain speciﬁc binary code clones through program slicing.
In
Proceedings of the 2018 Workshop on Forming an Ecosystem Around
Software Transformation, pages 27–33. ACM, 2018.

[17] Fan Yao, Yongbo Li, Yurong Chen, Hongfa Xue, Tian Lan, and Guru
Venkataramani. Statsym: vulnerable path discovery through statistics-
guided symbolic execution. In Dependable Systems and Networks (DSN),
2017 47th Annual IEEE/IFIP International Conference on, pages 109–
120. IEEE, 2017.

[18] Yunhui Zheng, Xiangyu Zhang, and Vijay Ganesh. Z3-str: A z3-based
string solver for web application analysis. In Proceedings of the 2013 9th
Joint Meeting on Foundations of Software Engineering, pages 114–124.
ACM, 2013.

Fig. 7. Accumulated percentage of false positives eliminated by Twin-Finder
with code similarity set to 0.70

remove the majority of false positives admitted from code
clone detection. The performance of our feedback is sensitive
to different programs due to different program behaviors and
program size. Finally, our feedback may not be able to remove
100% of false positives, that is because there are several special
cases that we cannot remove them using current implementation,
such as multiple branches or indirect memory access with the
value of array index derived from another pointer.

V. RELATED WORK

Code clone detection. Traditional text-based or tree-based
approaches are still not sufﬁcient to detect semantics-similar
code clones. Thus, learning-based approaches have been devel-
oped over the past three years. White et al. [9] ﬁrst proposes
deep neural network (DNN) based code clone detection in
source code. But still, they are not able to detect non-contiguous
and intertwined code clones. Komondoor et al. [6] also make
the use of program slicing and dependence analysis to ﬁnd non-
contiguous and intertwined code clones. But they are trying to
ﬁnd isomorphic subgraphs from program dependency graph in
order to identify code clones, where the computing of graph
comparison is more expensive. And they do not apply a variant
code similarity metric and formal analysis.

Learning-based approach for code analysis. Prior work
have studied bug/vulnerabilities using learning based ap-
proaches [16], [15], [12], [10], [11]. StatSym [17] proposes
frameworks combining statistical and formal analysis for
vulnerable path discovery. SIMBER [13] proposes a statistical
inference framework to eliminate redundant bound checks and
improve the performance of applications without sacriﬁcing
security. In this paper, we develop an integrated framework
that harnesses the effectiveness of code clone detection and
formal analysis techniques on source code at scale.

VI. CONCLUSION

In this paper, we presented a novel framework, Twin-Finder,
a pointer-related code clone detector for source code, that can
automatically identify related codes from large code bases and
perform code clone detection. We evaluated our approach using
real-world applications, such as SPEC 2006 benchmark suite.
Our results show Twin-Finder is able to detect up to 9× more
code clones comparing to conventional code clone detection
approaches and remove an average 91.69% false positives.

