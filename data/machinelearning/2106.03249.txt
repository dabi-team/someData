Accurate Self-Conﬁguration of Rectangular Multiport Interferometers

Ryan Hamerly1,2, Saumil Bandyopadhyay1, and Dirk Englund1
June 8, 2021

1
2
0
2

n
u
J

6

]
s
c
i
t
p
o
.
s
c
i
s
y
h
p
[

1
v
9
4
2
3
0
.
6
0
1
2
:
v
i
X
r
a

1 Research Laboratory of Electronics, MIT, 50 Vassar Street,
Cambridge, MA 02139, USA
2 NTT Research Inc., Physics and Informatics Laboratories,
940 Stewart Drive, Sunnyvale, CA 94085, USA

Abstract—Multiport interferometers based on inte-
grated beamsplitter meshes are widely used in pho-
tonic technologies. While the rectangular mesh is fa-
vored for its compactness and uniformity, its geome-
try resists conventional self-conﬁguration approaches,
which are essential to programming large meshes in
the presence of fabrication error. Here, we present
a new conﬁguration algorithm, related to the 2 × 2
block decomposition of a unitary matrix, that over-
comes this limitation. Our proposed algorithm is ro-
bust to errors, requires no prior knowledge of the pro-
cess variations, and relies only on external sources
and detectors. We show that self-conﬁguration using
this technique reduces the eﬀect of fabrication errors
by the same quadratic factor observed in triangular
meshes. This relaxes a signiﬁcant limit to the size
of multiport interferometers, removing a major road-
block to the scaling of optical quantum and machine-
learning hardware.

Large-scale programmable photonic circuits are the cor-
nerstone of many emerging technologies, including quan-
tum computing [1, 2], machine learning acceleration [3–
5], and microwave photonics [6, 7]. One such circuit—the
universal multiport interferometer, which functions as a
linear optical input-output device with a programmable
transfer matrix (Fig. 1)—is of special importance due to
its generality and broad range of applications [8]. The
most scalable designs involve meshes of Mach-Zehnder
interferometers (MZIs): while the triangular Reck mesh
(Fig. 1(a)) was initially employed and is straightforward
to conﬁgure [9], more recently work has shifted to the
Clements rectangle (Fig. 1(b)), which oﬀers clear ad-
vantages of compactness, path-length uniformity, and re-
duced sensitivity to loss [10]. Much recent study has
focused on scaling [11, 12] and optimizing [13–16] MZI
meshes based on the Clements design.

A major challenge to scaling MZI meshes is the pres-
ence of component errors due to fabrication imperfec-
tions. Errors cause each MZI transfer matrix to deviate
from its programmed value (Fig. 1(c)); since the overall
circuit is a cascade of MZIs with O(N ) depth, the to-
tal error in the transfer matrix scales as O(
N ), where
N is the circuit size (assuming uncorrelated errors). At
large mesh sizes, these errors (if left uncorrected) place

√

unreasonable constraints on fabrication tolerances, ulti-
mately limiting the scaling of multiport interferometers.
Error-correction techniques are therefore critical for large-
scale programmable photonics. Global optimization [13–
15] and in-situ training [17] are promising in principle,
but computationally ineﬃcient and device-speciﬁc. Lo-
cal per-MZI correction is also eﬀective, but requires prior
characterization of the device errors [18]. A number
of eﬃcient “self-conﬁguring” algorithms have been pro-
posed [19–21], but these generally only work for triangular
meshes and require large numbers of internal power mon-
itors [22], a signiﬁcant addition in hardware complexity.
Recently, we proposed an eﬃcient error-correction algo-
rithm that does not require internal detectors or accurate
pre-characterization [23]. However, this algorithm only
works for triangular (i.e. Reck) meshes, which excludes
the more eﬃcient Clements design.

In this Letter, we present a new self-conﬁguring strategy
that is naturally adapted to the Clements design and
requires no additional hardware complexity beyond ex-
ternal sources and (coherent) detectors. This algorithm
proceeds by conﬁguring the diagonals of the mesh, start-
ing at the corners, in a manner that progressively zeroes
out the elements of a target matrix through a sequence
of Givens rotations. Numerical experiments on imperfect
MZI meshes show that our algorithm is stable and robust,
and reduces errors by at least a quadratic factor (while
suﬃciently small errors are corrected exactly), consistent

Figure 1: (a) Reck and (b) Clements 5 × 5 MZI meshes.
(c) Tunable building blocks: MZI and phase shifter. Eﬀect of
errors on MZI transfer function.

1

θφ==(a)(b)S(  )S(  )eiθ1π4π4(c)S(  +α)S(  +β)π4π4S(ψ) = cos(ψ)   i sin(ψ)i sin(ψ)   cos(ψ)errors 
 
 
 
 
 
in the lower-left triangle of X, enforcing diagonality. The
remaining phases are read oﬀ from the diagonal elements.

While this procedure correctly sets the phases (θ, φ) for
an ideal Clements mesh, it does not work in the presence
of errors because the relationship between (θ, φ) and Tmn
also depends on the splitting angle imperfections (α, β)
(Fig. 1(c)), which are unknown. Here, we describe the
procedure for programming Clements in the presence
of errors:

1. Initialize the MZIs to approximate the cross state
(θ = 0). An ideal cross state is not possible with
errors, but an approximation will be ﬁne.

2. Conﬁgure the crossings in the order given by

Fig. 2(a). For each crossing in W [resp. V ]:

(a) Perform the Givens rotation X → XT †

mn [resp.
X → T †
mnX] that zeroes the next element of Xij
in the sequence Fig. 2(c) (note (i, j) (cid:54)= (m, n)).

(b) Update W → TmnW [resp. V → V Tmn].
(c) Send input (cid:126)ain = (cid:126)w∗

j (the jth column of W †)
into the device, Fig. 3. The output (cid:126)aout(θ, φ)
depends on the phases being conﬁgured. Set
(θ, φ) to zero the inner product (cid:104)(cid:126)vi|(cid:126)aout(θ, φ)(cid:105),
where (cid:126)vi is the ith column of V .

3. Finally, set the diagonal: for each i, inject (cid:126)ain = w∗
i

and adjust φ to satisfy arg((cid:104)(cid:126)vi|(cid:126)aout(φ)(cid:105)) = 0.

Of the main loop (Step 2), parts (a-b) are just a restate-
ment of the Clements factorization [10]. However this

Figure 3: Programming a physical Clements mesh in the
presence of errors. (a) Procedure to set phases for a crossing
in W . (b) Procedure for V .

2

Figure 2: (a) Clements mesh and order of MZI conﬁguration.
(b) Building up the matrices V, W in a sequence of Givens
rotations to diagonalize X = V †U W †. (c) Order of matrix
elements zeroed by the procedure.

with the behavior observed for triangular meshes [23].
This signiﬁcantly relaxes the scaling constraints posed by
fabrication imperfections in realistic MZI meshes. As an
example, we consider the application to optical neural
networks and show how this correction scheme provides
a path to overcome the no-go results of Ref. [24].

Our procedure is based on the diagonalization of a unitary
using 2 × 2 Givens rotations [10], which we review here
for clarity. Following Fig. 2(a), divide the mesh along
the rising diagonal so that its transfer matrix becomes
U = V DW , where D is a phase screen and V and W
represent the upper and lower triangles, given by:

V = (T21T22)(T41 . . . T44) . . . (TN −2,1 . . . TN −2,N −2)
W = (TN −1,N −1 . . . TN −1,1) . . . (T33 . . . T31)(T11)

(1)

where Tmn is the 2 × 2 block unitary corresponding to
the nth crossing (MZI / phase-shift pair) of the mth di-
agonal. Following the order in the ﬁgure, we “build up”
the matrices (V, W ) one block at a time while keeping
track of X = V †U W †. Fig. 2(b) shows the ﬁrst few steps
of this process. Updates to W → TmnW right-multiply
X → XT †
mn, and the phases of Tmn are chosen to zero
an element in the lower-left corner of X. Likewise, up-
dates to V → V Tmn left-multiply X → T †
mnX. Following
the order in Fig. 2(c), this procedure zerores all elements

(a)(c)0000000000000000000000000000111111111357642(b)X=V†UW†W†V†W   T11WV   VT21V   VT22W   T31W...W   T77WWVD(a)W  VTmnWV Tmn(b)wj*viviwj*1000000000000001000000000000000000X  X Tmn†X  Tmn X†jj+1i‒1ialgorithm (blue). The algorithm always improves the ma-
trix ﬁdelity, but there are two distinct regimes: for small
σ, the error approaches machine precision, as errors can
be corrected exactly. On the contrary, for large σ, the
corrected error asymptotes to a ﬁnite value:

Ec = (cid:112)2/3 N σ2 =

1
√
6

E 2
0

(2)

This form can be derived rigorously from the distribution
of MZI splitting angles over the Haar measure [23, 29],
where errors arise solely from MZIs whose target split-
ting ratios cannot be realized in the imperfect hardware.
Since Ec ∝ E 2
0 , we can say that self-calibration leads to
a quadratic suppression of errors: the smaller the initial
error, the greater the beneﬁt of error correction.

Fig. 4(b-c) tests the scalability of the algorithm by vary-
ing the mesh size N . Fig. 4(b) shows that, as expected,
as the mesh size grows, the corrected error asymptotes
to the quadratic factor Eq. (2). By plotting Ec/(E 2
6),
0 /
Fig. 4(c) shows the boundary between the exactly cor-
rectable small-error regime (Ec = 0) and the inexact
large-error regime where Eq. (2) holds. The regimes meet
where the coverage cov(N ) of U (N ) dips below unity [29];

√

is performed merely to keep track of matrices (V, W );
we do not use the (θ, φ) provided by the algorithm. In-
stead, Step 2(c) uses physical measurements ﬁnd the cor-
rect phases in the presence of hardware errors. This
step, which corresponds to zeroing the matrix element
Xij = v∗
j of the physical hardware, is visualized in
Fig. 3:

i U w∗

1. When conﬁguring an W (Fig. 3(a)), we input (cid:126)ain =
(cid:126)w∗
j and program (θ, φ) to direct all the light to in-
termediate output j (solid arrow), zeroing the power
that goes to j + 1 (dashed arrow). We do not have
access to these intermediate outputs, but j + 1 con-
nects to the input i of V ; therefore (cid:104)(cid:126)vi|(cid:126)aout(cid:105) is a valid
proxy for this ﬁeld and zeroing it correctly conﬁgures
the red block to match W .

2. When conﬁguring V (Fig. 3(b)), we want (cid:126)vi to be
the output from light at intermediate port i (solid
arrow); therefore, the output from light at port i −
1 (dashed arrow) should be orthogonal to (cid:126)vi. We
excite this ﬁeld by inputting (cid:126)w∗
j ; any errors in the
unconﬁgured mesh will hit downstream inputs k <
i − 1, but will not pollute input i. Therefore zeroing
(cid:104)(cid:126)vi|(cid:126)aout(cid:105) correctly conﬁgures the blue block of the
mesh to match V , provided W is properly conﬁgured.

It is relatively straightforward to extend this procedure
to triangular meshes, as described in the Supplementary
Information [25, Sec. S1].

To test this algorithm, we performed numerical experi-
ments on Clements meshes of size up to 128 × 128. The
algorithms were implemented in Python and are avail-
able as part of the Meshes package [26]. We consider an
error model based on imperfections in splitter angles α, β
(Fig. 1(c)), as these are the dominant eﬀect of fabrication
error in MZI-based silicon photonic circuits. For simplic-
ity, consider the case of uncorrelated Gaussian errors so
that the error magnitude can be characterized by a single
variable σ = (cid:104)α(cid:105)rms = (cid:104)β(cid:105)rms (the case of correlated errors
is treated in the Supplementary Information [25, Sec. S2];
the qualitative results are the same because most corre-
lations cancel out in ensemble averaging [23]). Target
matrices are sampled uniformly over the Haar measure
[27, 28]. As a ﬁgure of merit, we consider the normalized
N . For unitary matrices,
matrix error E = (cid:104)(cid:107)∆U (cid:107)(cid:105)rms/
E ∈ [0, 2] corresponds to the average relative error of a
given matrix element Uij.

√

√

In the uncorrected case, each MZI introduces a mean er-
2σ. These errors add in quadrature,
ror (cid:104)(cid:107)∆U (cid:107)(cid:105)rms =
leading to an overall normalized error E0 =
2N σ, which
grows with mesh size. This is understandable given that
a circuit depth that grows as O(N ), with each layer con-
tributing O(σ) error and the layers adding in quadrature.
Fig. 4(a) plots the error as a function of σ for a 64 × 64
mesh, both without error correction (red) and with our

√

Figure 4: (a) Corrected and uncorrected matrix error as a
function of σ, 64 × 64 Clements mesh. (b) Scaling with mesh
size, showing the quadratic suppression of errors due to correc-
tion. (c) Boundary between the regimes of exact and inexact
error correction.

3

103102101MZI Error 105104103102101100Matrix Error =|U|/Nc=2/3N20=2N64x64UncorrectedCorrectedMedianIQRFit102101100Uncorrected (0)105104103102101100Corrected (c)N=c=(0)2/6103102101MZI Error 8163264128Size NExactInexact8163264128103102101100c/(20/6)(a)(b)(c)larger hardware errors.

We have proposed a new self-conﬁguration technique for
rectangular MZI meshes. Our technique requires only ex-
ternal sources and (coherent) detectors and does not rely
on an accurate characterization of device errors. This
method is based on the diagonalization of a unitary ma-
trix by Givens rotations, with a speciﬁc set of measure-
ments performed to ensure that the Givens rotations are
properly implemented in the hardware. For suﬃciently
small hardware errors, our approach leads to perfect real-
ization of the target matrix. For large errors, it achieves
the same quadratic reduction E → E 2/
6 observed for
local correction algorithms [18] and self-conﬁguration on
triangular meshes [23]. As a target application, we consid-
ered optically accelerated DNNs and showed that the pro-
posed technique increases their robustness to hardware
error, particularly in the critical region around σ ≈ 2%
characteristic of directional couplers in silicon.

√

One open question is the robustness to non-unitary errors
(unbalanced losses), as this and other self-conﬁguring al-
gorithms rely on unitarity, while realistic devices often
have undesired state-dependent loss [35–37]. In addition,
extensions of the algorithm to more recently developed
mesh geometries [38–42] may prove useful, as some ge-
ometries are less sensitive to hardware error and may be
easier to scale up to large dimensions.

S.B. is supported by an NSF Graduate Research Fel-
lowship. D.E. acknowledges funding from AFOSR (no.
FA9550-20-1-0113, FA9550-16-1-0391).

References

[1] J. Carolan, C. Harrold, C. Sparrow, E. Mart´ın-
L´opez, N. J. Russell, J. W. Silverstone, P. J. Shad-
bolt, N. Matsuda, M. Oguma, M. Itoh, et al., Uni-
versal linear optics, Science 349, 711 (2015).

[2] H.-S. Zhong, H. Wang, Y.-H. Deng, M.-C. Chen,
L.-C. Peng, Y.-H. Luo, J. Qin, D. Wu, X. Ding,
Y. Hu, P. Hu, X.-Y. Yang, W.-J. Zhang, H. Li,
Y. Li, X. Jiang, L. Gan, G. Yang, L. You, Z. Wang,
L. Li, N.-L. Liu, C.-Y. Lu, and J.-W. Pan, Quan-
tum computational advantage using photons, Science
10.1126/science.abe8770 (2020).

[3] Y. Shen, N. C. Harris, S. Skirlo, M. Prabhu,
T. Baehr-Jones, M. Hochberg, X. Sun, S. Zhao,
H. Larochelle, D. Englund, et al., Deep learning
with coherent nanophotonic circuits, Nature Photon-
ics 11, 441 (2017).

[4] A. N. Tait, T. F. Lima, E. Zhou, A. X. Wu, M. A.
Nahmias, B. J. Shastri, and P. R. Prucnal, Neu-
romorphic photonic networks using silicon photonic
weight banks, Scientiﬁc Reports 7, 7430 (2017).

Figure 5: (a) 2-layer DNN for MNIST classiﬁcation where
synaptic connections are represented by Clements meshes.
(b) Simulated classiﬁcation accuracy as a function of network
size N and hardware MZI error σ.

we have previously shown that cov(N ) ∼ e−N 3σ2/3 [23];
therefore the boundary lies at roughly N 3σ2 = 3 (dashed
curve in Fig. 4(c)).

To illustrate the beneﬁts of this error reduction, we con-
sider as an example deep neural network (DNN) inference
on optical hardware. DNNs process data in a sequence
of layers, each consisting of (linear) synaptic connections
and (nonlinear) neuron activation (Fig. 5(a)). One excit-
ing possibility is to use photonics to accelerate this pro-
cess: encode the input in optical amplitudes, use a pro-
grammable MZI mesh to implement the synaptic weights,
and perform the activations with an all-optical (or electro-
optic) nonlinearity [3]. A major challenge is that useful
learning tasks require large mesh sizes (N > 100), which
are particularly susceptible to fabrication error; a recent
study showed that accurate DNN inference might require
unrealistic process tolerances in the hardware [24]. This
challenge has spurred investigations into alternative pro-
posals, which have their own limitations [4, 5, 30].

Fig. 5(b) illustrates the advantage of error correction in an
MZI-mesh DNN accelerator. Here, input images are pre-
processed by a Fourier transform and fed into a two-layer
DNN, with electro-optic neuron activations [31]. Models
with inner layer sizes N = 64 and N = 256 were trained
on the MNIST digit dataset [32] using the Neurophox
package [33]. Details and code are available in the Supple-
mentary Material [25, Sec. S3]. These pre-trained models
were then simulated numerically on imperfect Clements
meshes to calculate the classiﬁcation accuracy. Applying
our correction algorithm increases the error tolerance of
these DNNs by over 2×. Note that directional couplers in
silicon typically exhibit σ ≈ 2% [34]; in this regime, the
uncorrected DNNs show signiﬁcant degradation, while er-
ror correction restores them to their canonical accuracy.
Error correction may even allow the use of broad-band
multi-mode interference couplers, which typically exhibit

4

U11, 2, 3, 4, ...U2(a)(b)[5] R. Hamerly, L. Bernstein, A. Sludds, M. Soljaˇci´c,
and D. Englund, Large-scale optical neural networks
based on photoelectric multiplication, Physical Re-
view X 9, 021032 (2019).

[6] D. Marpaung, C. Roeloﬀzen, R. Heideman,
A. Leinse, S. Sales, and J. Capmany, Integrated mi-
crowave photonics, Laser & Photonics Reviews 7,
506 (2013).

[7] L. Zhuang, C. G. Roeloﬀzen, M. Hoekman, K.-J.
Boller, and A. J. Lowery, Programmable photonic
signal processor chip for radiofrequency applications,
Optica 2, 854 (2015).

[8] N. C. Harris, J. Carolan, D. Bunandar, M. Prabhu,
M. Hochberg, T. Baehr-Jones, M. L. Fanto, A. M.
Smith, C. C. Tison, P. M. Alsing, et al., Linear pro-
grammable nanophotonic processors, Optica 5, 1623
(2018).

[9] M. Reck, A. Zeilinger, H. J. Bernstein, and
P. Bertani, Experimental realization of any discrete
unitary operator, Physical Review Letters 73, 58
(1994).

[10] W. R. Clements, P. C. Humphreys, B. J. Metcalf,
W. S. Kolthammer, and I. A. Walmsley, Optimal de-
sign for universal multiport interferometers, Optica
3, 1460 (2016).

[11] N. C. Harris, R. Braid, D. Bunandar, J. Carr,
J. Elmhurst,
B. Dobbie, C. Dorta-Quinones,
M. Forsythe, M. Gould, S. Gupta, et al., Acceler-
ating artiﬁcial intelligence with silicon photonics, in
2020 Optical Fiber Communications Conference and
Exhibition (OFC) (IEEE, 2020) pp. 1–4.

work, IEEE Journal of Selected Topics in Quantum
Electronics (2020).

[17] T. W. Hughes, M. Minkov, Y. Shi, and S. Fan, Train-
ing of photonic neural networks through in situ back-
propagation and gradient measurement, Optica 5,
864 (2018).

[18] S. Bandyopadhyay et al., Hardware error correc-
tion for programmable photonics, arXiv preprint
arXiv:2103.04993 (2021).

[19] D. A. Miller, Self-aligning universal beam coupler,

Optics Express 21, 6360 (2013).

[20] D. A. Miller, Self-conﬁguring universal linear optical

component, Photonics Research 1, 1 (2013).

[21] D. A. Miller, Setting up meshes of interferometers–
reversed local light interference method, Optics Ex-
press 25, 29233 (2017).

[22] S. Grillanda, M. Carminati, F. Morichetti, P. Cic-
carella, A. Annoni, G. Ferrari, M. Strain, M. Sorel,
M. Sampietro, and A. Melloni, Non-invasive moni-
toring and control in silicon photonics using CMOS
integrated electronics, Optica 1, 129 (2014).

[23] R. Hamerly et al., Stability of self-conﬁguring large
multiport interferometers, in preparation (2021).

[24] M. Y.-S. Fang, S. Manipatruni, C. Wierzynski,
A. Khosrowshahi, and M. R. DeWeese, Design of op-
tical neural networks with component imprecisions,
Optics Express 27, 14009 (2019).

[25] See supplemental material for details on the trian-
gular mesh implementation, correction of correlated
errors, and the optical neural network model.

[12] C. Ramey, Silicon photonics for artiﬁcial intelligence
acceleration, in 2020 IEEE Hot Chips 32 Symposium
(HCS) (IEEE Computer Society, 2020) pp. 1–26.

[26] R. Hamerly, Meshes:

tools for modeling photonic
beamsplitter mesh networks, Online at: https://
github.com/QPG-MIT/meshes (2021).

[13] R. Burgwal, W. R. Clements, D. H. Smith, J. C.
Gates, W. S. Kolthammer, J. J. Renema, and I. A.
Walmsley, Using an imperfect photonic network to
implement random unitaries, Optics Express 25,
28236 (2017).

[14] J. Mower, N. C. Harris, G. R. Steinbrecher,
Y. Lahini, and D. Englund, High-ﬁdelity quantum
state evolution in imperfect photonic integrated cir-
cuits, Physical Review A 92, 032322 (2015).

[15] S. Pai, B. Bartlett, O. Solgaard, and D. A. Miller,
Matrix optimization on universal unitary photonic
devices, Physical Review Applied 11, 064044 (2019).

[16] S. Pai, I. Williamson, T. W. Hughes, M. Minkov,
O. Solgaard, S. Fan, and D. A. Miller, Parallel pro-
gramming of an arbitrary feedforward photonic net-

[27] A. Haar, Der massbegriﬀ in der theorie der kon-
tinuierlichen gruppen, Annals of Mathematics , 147
(1933).

[28] W.-K. Tung, Group theory in physics: an intro-
duction to symmetry principles, group representa-
tions, and special functions in classical and quan-
tum physics (World Scientiﬁc Publishing Company,
1985).

[29] N. J. Russell, L. Chakhmakhchyan, J. L. O’Brien,
and A. Laing, Direct dialling of Haar random unitary
matrices, New Journal of Physics 19, 033007 (2017).

[30] L. Bernstein, A. Sludds, R. Hamerly, V. Sze, J. Emer,
and D. Englund, Freely scalable and reconﬁgurable
optical hardware for deep learning, Scientiﬁc Reports
11, 1 (2021).

5

[31] I. A. Williamson, T. W. Hughes, M. Minkov,
B. Bartlett, S. Pai, and S. Fan, Reprogrammable
electro-optic nonlinear activation functions for opti-
cal neural networks, IEEE Journal of Selected Topics
in Quantum Electronics 26, 1 (2019).

[32] Y. LeCun, L. Bottou, Y. Bengio, and P. Haﬀner,
Gradient-based learning applied to document recog-
nition, Proceedings of the IEEE 86, 2278 (1998).

[33] S. Pai, Neurophox: a simulation framework for uni-
tary neural networks and photonic devices, Online
at: https://github.com/solgaardlab/neurophox
(2020).

[34] J. C. Mikkelsen, W. D. Sacher, and J. K. Poon, Di-
mensional variation tolerant silicon-on-insulator di-
rectional couplers, Optics Express 22, 3145 (2014).

[35] X. Li, N. Youngblood, C. R´ıos, Z. Cheng, C. D.
Wright, W. H. Pernice, and H. Bhaskaran, Fast and
reliable storage using a 5 bit, nonvolatile photonic
memory cell, Optica 6, 1 (2019).

[36] D. M. Gill, S. S. Patel, M. Rasras, K.-Y. Tu, A. E.
White, Y.-K. Chen, A. Pomerene, D. Carothers,
R. L. Kamocsai, C. M. Hill, et al., CMOS-compatible
Si-ring-assisted Mach–Zehnder interferometer with
internal bandwidth equalization, IEEE Journal of Se-
lected Topics in Quantum Electronics 16, 45 (2009).

[37] N. C. Harris, Y. Ma, J. Mower, T. Baehr-Jones,
D. Englund, M. Hochberg, and C. Galland, Eﬃcient,
compact and low loss thermo-optic phase shifter in
silicon, Optics Express 22, 10487 (2014).

[38] V. J. L´opez-Pastor, J. S. Lundeen, and F. Mar-
quardt, Arbitrary optical wave evolution with
Fourier transforms and phase masks, arXiv preprint
arXiv:1912.04721 (2019).

[39] S. Fldzhyan, M. Y. Saygin, and S. Kulik, Optimal de-
sign of error-tolerant reprogrammable multiport in-
terferometers, Optics Letters 45, 2632 (2020).

[40] M. Y. Saygin,

I. Kondratyev,

I. Dyakonov,
S. Mironov, S. Straupe, and S. Kulik, Robust archi-
tecture for programmable universal unitaries, Phys-
ical Review Letters 124, 010501 (2020).

[41] R. Tanomura, R. Tang, S. Ghosh, T. Tanemura, and
Y. Nakano, Robust integrated optical unitary con-
verter using multiport directional couplers, Journal
of Lightwave Technology 38, 60 (2019).

[42] J. Polcari, Generalizing the butterﬂy structure of the
FFT, in Advanced Research in Naval Engineering
(Springer, 2018) pp. 35–52.

6

Supplementary Material

S1 Triangular Meshes

The key to self-conﬁguring the Clements mesh [S1] was
realizing that it could be divided into two triangles with
a phase screen in the center: U = V DW . By conﬁgur-
ing one diagonal at a time, alternating between V and
W , we could zero all the elements of the target ma-
trix X = V †U W †, thus realizing the desired unitary.
This procedure is simpliﬁed when conﬁguring Reck [S2],
which can be expressed in terms of a single triangle:

U = D

(cid:16)(cid:89)

(cid:17)

Tmn

(cid:16)(cid:89)

(cid:17)

D

Tmn

or

(S1)

mn
(cid:124) (cid:123)(cid:122) (cid:125)
W

mn
(cid:124) (cid:123)(cid:122) (cid:125)
V

The ﬁrst case U = DW corresponds to a mesh with
an output phase screen (Fig. S1(a)), while the mesh for
U = V D has an input phase screen (Fig. S1(b)). The al-
gorithm in the main text simpliﬁes because we may sub-
stitute V = I [resp. W = I]. This leads to two cases:

1. For the ﬁrst case (Fig. S1(a)), we work downstream
from the leftmost MZI. For example, we can work
down the falling diagonals, with the order given in
the ﬁgure. Each step adds an MZI to W → TmnW ,
which updates the target matrix X → XT †
mn to zero
an element in the upper triangle. With input ﬁeld
ain = w∗
j (the jth column of W †), the parameters
(θ, φ) are set to zero the ﬁeld at output i, where
(i, j) is the index of the element Xij being zeroed.

2. For the second case (Fig. S1(b)), we work upstream
from the rightmost MZI, which performs the update
V → TmnV , X → T †
mnX. With light sent into the
ith input, (θ, φ) are chosen to zero the dot product
between the output ﬁeld and vi (the ith column of
V ).

After the crossings are conﬁgured, the phases of D can
be obtained by inspection.

The MZI order in Fig. S1 is not unique. Any order that
preserves causality (the set of conﬁgured and unconﬁg-
ured MZIs must be causally separated) will produce a
valid self-conﬁguration.

Like the conﬁguration of the Clements rectangle, the
procedure above is designed, at each time step, to prop-
erly set the conﬁgured MZIs in the red [resp. blue] block
to realize W [resp. V ]. The procedure in Fig. 1(a) is
closely related to the Reversed Local Light Interference
Method (RELLIM) [S3]. However, there are two impor-
tant diﬀerences. First, RELLIM inputs columns of U †,
while our scheme inputs columns of W †. As the MZIs
are conﬁgured, W changes. Second, RELLIM assumes
the existence of internal power detectors after each MZI
(or the ability to pre-calibrate the downstream mesh so

that internal ﬁelds can be read oﬀ from the outputs). By
inputting a row of the target W †, light will exit the red
block along only the jth and (j + 1)th channels (provided
all upstream MZIs are correctly set). The former, which
is set to zero by varying (θ, φ), is read oﬀ directly from
the ith output.

The procedures in Fig. S1(a-b) are reciprocal to each
other and can also be related to the “ratio method” de-
scribed in Ref. [S4], since the process of zeroing matrix
elements never depends on absolute amplitudes, only on
their ratios. Moreover, the ratio method is also robust
in the presence of large errors and achieves the same
quadratic error reduction. However, the when conﬁgur-
ing each MZI, the ratio method required a sweep of the
upstream phase shifter in order to subtract the common
amplitude (cid:126)a, a procedure that is not necessary here.

√

N as a func-
Fig. S2 plots the matrix error E = (cid:107)∆U (cid:107)/
tion of MZI error σ for the Reck mesh. The result is
identical to the case of the Clements mesh, Fig. 4, fol-
2N σ, Ec = (cid:112)2/3N σ2 predicted
lowing the curves E0 =
by theory [S4]. Over the Haar measure, the distribution

√

Figure S2: Corrected and uncorrected matrix error as a func-
tion of MZI error σ, 64 × 64 Reck mesh.

of MZI splitting angles is the same for both mesh geome-
tries up to a reordering of the MZIs [S5]; therefore, this
correspondence is unsurprising.

self-conﬁguration procedures

for Reck and
The
Clements can be mapped to a general-purpose sub-
routine that self-conﬁgures any MZI mesh of the form
U = V DW , provided that the geometry admits a matrix
diagonalization by way of Givens rotations. This algo-
rithm has been implemented in Python with Numba
extensions for numerical eﬃciency, and is available as
part of the Meshes package [S6]

S2 Correlated Errors

n(cid:105), (cid:104)β2

In realistic MZI meshes, the beamsplitter errors αn, βn
will be strongly correlated, since the process variations
that lead to errors (waveguide thickness and spacing, par-
tial etch depth, slab height) all have correlation lengths
much longer than the size of an MZI. In general, the ma-
trix error (cid:104)(cid:107)∆U (cid:107)2(cid:105) will depend both on the error ampli-
tudes ((cid:104)α2
n(cid:105)) as well as their correlations ((cid:104)αmαn(cid:105),
etc.). For an individual matrix U , the dependence on
correlations can be signiﬁcant. However, we have previ-
ously shown that, in an ensemble average over the Haar
measure, this dependence becomes very small for most
inter-MZI correlations because of the random phase shifts
between pairs of MZIs [S4, Appendix A]. Only intra-
MZI correlations (cid:104)αnβn(cid:105) have a signiﬁcant eﬀect on the
ensemble-averaged matrix error.

Figure S1: Self-conﬁguration procedure for the triangular
Reck mesh. The procedure depends on whether the mesh
layout has (a) an output phase screen, or (b) an input phase
screen.

Consider the extreme case of full correlation αn = βn = µ.
This case is realized, for instance, when the dominant
error source arises from operating the mesh away from
the coupler design wavelength. In Ref. [S4], the coverage,

7

(a)W  VTmnWV Tmn(b)wj*vi00X  X Tmn†X  Tmn X†jj+100000000000000i‒1iout[i]in[j]01234512345000000000000000000000000000000111111111111103102101MZI Error 105104103102101100Matrix Error =|U|/Nc=2/3N20=2NReck (Triangular), 64x64UncorrectedCorrectedMedianIQRFitwhere α is the power tap fraction, g is the modulator
phase induced per unit optical power, and φ is the phase
in the absence of power. Here, we choose α = 0.1, g =
π/20, and φ = π, which causes f (E) to approximate the
form of a leaky ReLU in the right power regime.

Models of sizes N = 64 and N = 256 were trained using
the Neurophox package [S9]. Code and model parame-
ters are provided in the Supplementary Material [S10].

References

[S1] W. R. Clements, P. C. Humphreys, B. J. Metcalf,
W. S. Kolthammer, and I. A. Walmsley, Optimal de-
sign for uni- versal multiport interferometers, Optica
3, 1460 (2016).

[S2] M. Reck, A. Zeilinger, H. J. Bernstein, and
P. Bertani, Experimental realization of any discrete
unitary operator, Physical Review Letters 73, 58
(1994).

[S3] D. A. B. Miller, Setting up meshes of interferome-
ters– reversed local light interference method, Optics
Express 25, 29233 (2017).

[S4] R. Hamerly et al., Stability of self-conﬁguring large
multiport interferometers, in preparation (2021).

[S5] N. J. Russell, L. Chakhmakhchyan, J. L. O’Brien,
and A. Laing, Direct dialling of Haar random unitary
matrices, New Journal of Physics 19, 033007 (2017).

[S6] R. Hamerly, Meshes: tools for modeling photonic
beam-splitter mesh networks, Online at: https://
github.com/QPG-MIT/meshes (2021).

[S7] S. Pai, I. Williamson, T. W. Hughes, M. Minkov,
O. Solgaard, S. Fan, and D. A. B. Miller, Parallel
programming of an arbitrary feedforward photonic
network, IEEE Journal of Selected Topics in Quan-
tum Electronics 26, 1 (2020).

[S8] I. A. Williamson, T. W. Hughes, M. Minkov,
B. Bartlett, S. Pai, and S. Fan, Reprogrammable
electro-optic nonlinear activation functions for opti-
cal neural networks, IEEE Journal of Selected Topics
in Quantum Electronics 26, 1 (2019).

[S9] S. Pai, Neurophox: a simulation framework for uni-
tary neural networks and photonic devices, Online
at: https://github.com/solgaardlab/neurophox
(2020).

[S10] See supplemental material for details on the trian-
gular mesh implementation, correction of correlated
errors, and the optical neural network model.

Figure S3: Corrected and uncorrected matrix error as a func-
tion of correlated MZI error amplitude µ, 128×128 Clements
mesh.

uncorrected error, and corrected error are calculated to
be:

cov(N ) = e−(2/3)N 3µ2

√

N µ

E0 = 2
Ec = (cid:112)8/9N µ2

(S2)

(S3)

(S4)

Fig. S3 plots E0 and Ec against the error amplitude µ for
a 128×128 Clements mesh. Small residual dependences
on correlation (proportional to θmθn) lead to a slight de-
viation in E0, while the theoretical curve for Ec matches
very accurately. The behavior is qualitatively very close
to that in the uncorrelated case.

S3 Neural Network Model

√

The optical neural network model is based on the archi-
tecture described in Ref. [S7]. Images from the MNIST
digit dataset are preprocessed with a Fourier transform,
N window, where N is
N ×
which is cropped to a
a model parameter that quantiﬁes the size of the neural
network. The light from this window (N input neurons)
is fed into a two-layer optically accelerated DNN. This
DNN consists of a single inner layer and two N × N uni-
tary circuits, represented by Clements meshes.

√

The activation function at the inner layer is realized with
an electro-optic nonlinearity: a fraction of each output
ﬁeld is fed into a detector that drives a Mach-Zehnder
modulator, while the remaining light passes through the
modulator [S8]. This implements the activation function:

√

f (E) =

1 − α e−i(g|E|2+φ−π)/2 cos(cid:0) 1

2 (g|E|2 + φ)(cid:1) (S5)

8

103102MZI Error 105104103102101100Matrix Error =|U|/Nc=8/9N20=2NCorrelated Errors, 128x128UncorrectedCorrectedMedianIQRFit