Digital Communications and Networks(DCN)

1
2
0
2

g
u
A
0
1

]
E
S
.
s
c
[

1
v
9
8
3
4
0
.
8
0
1
2
:
v
i
X
r
a

journal homepage: www.elsevier.com/locate/dcan

Diversiﬁed and Compatible Web APIs
Recommendation in IoT

Wenwen Gonga, Huiping Wub, Xiaokang Wangc, Xuyun Zhangd, Yawei Wanga
Yifei Chen∗a, Mohammad R. Khosravie, f

aColleage of Information and Electrical Engineering, China Agricultural University, Beijing 100000, China
bBlockchain Laboratory of Agricultural Vegetables, Weifang University of Science and Technology, Shouguang 262700, China
cDepartment of Computer Science, St. Francis Xavier University, Antigonish, NS, Canada
dDepartment of Computing, Macquarie University, Sydney NSW 2122, Australia
eDepartment of Computer Engineering, Persian Gulf University, Bushehr 7516913817, Iran
f Department of Electrical and Electronic Engineering, Shiraz University of Technology, Shiraz 71557-13876, Iran

Abstract

With the ever-increasing popularity of Internet of Things (IoT), massive enterprises are attempting to encapsulate their devel-
oped outcomes into various lightweight web APIs (application programming interfaces) that can be accessible remotely. In
this situation, ﬁnding and composing a list of existing web APIs that can corporately fulﬁll the software developers’ functional
needs have become a promising way to develop a successful mobile app, economically and conveniently. However, the big
volume of candidate IoT web APIs put additional burden on the app developers’ web APIs selection decision-makings, since
it is often a challenging task to simultaneously guarantee the diversity and compatibility of the ﬁnally selected a set of web
APIs. Considering this challenge and latest successful applications of game theory in IoT, a Diversiﬁed and Compatible web
APIs Recommendation approach, namely DivCAR, is put forward in this paper. First of all, to achieve API diversity, DivCAR
employs random walk sampling technique on a pre-built “API-API” correlation graph to generate diverse “API-API” correlation
subgraphs. Afterwards, with the diverse “API-API” correlation subgraphs, we model the compatible web APIs recommenda-
tion problem to be a minimum group Steiner tree search problem. Through solving the minimum group Steiner tree search
problem, manifold sets of compatible and diverse web APIs ranked are returned to the app developers. At last, we design and
enact a set of experiments on a real-world dataset crawled from www.programmableWeb.com. Experimental results validate
the eﬀectiveness and eﬃciency of our proposed DivCAR approach in balancing the web APIs recommendation diversity and
compatibility.

© 2015 Published by Elsevier Ltd.

KEYWORDS: Internet of Things, web APIs Recommendation, diversity, compatibility

∗Yifei Chen (Corresponding author) is with Colleage of In-
formation and Electrical Engineering, China Agricultural Uni-
versity, Beijing 100000, China and will handle correspondence
at all stages of refereeing and publication, also post publication
(email:glhfei@cau.edu.cn).

1Wenwen Gong is with Colleage of Information and Electrical
Engineering, China Agricultural University, Beijing 100000, China
(email: wen.gong@cau.edu.cn).

2Huiping Wu is with Blockchain Laboratory of Agricul-
tural Vegetables, Weifang University of Science and Technology,
Shouguang 262700, China (email: wuhp760731@wfust.edu.cn).

3Xiaokang Wang is with Department of Computer Science, St.
Francis Xavier University, Antigonish B2G, Canada (email: xk-
wang@stfx.ca).

4Xuyun Zhang is with Department of Computing, Mac-

quarie University,
xuyun.zhang@mq.edu.au)

Sydney NSW 2122, Australia

(email:

5Yawei Wang is with Colleage of Information and Electrical En-
gineering, China Agricultural University, Beijing 100000, China
(email: yaweiwang@cau.edu.cn).

6Mohammad R. Khosravi is with Department of Computer
Engineering, Persian Gulf University, Bushehr 7516913817, Iran
and Department of Electrical and Electronic Engineering, Shi-
raz University of Technology, Shiraz 71557-13876, Iran (email:
m.khosravi@mehr.pgu.ac.ir)

 
 
 
 
 
 
Digital Communications and Networks(DCN)

journal homepage: www.elsevier.com/locate/dcan

Diversiﬁed and Compatible Web APIs
Recommendation in IoT

Wenwen Gonga, Huiping Wub, Xiaokang Wangc, Xuyun Zhangd, Yawei Wanga
Yifei Chen∗a, Mohammad R. Khosravie, f

aColleage of Information and Electrical Engineering, China Agricultural University, Beijing 100000, China
bBlockchain Laboratory of Agricultural Vegetables, Weifang University of Science and Technology, Shouguang 262700, China
cDepartment of Computer Science, St. Francis Xavier University, Antigonish, NS, Canada
dDepartment of Computing, Macquarie University, Sydney NSW 2122, Australia
eDepartment of Computer Engineering, Persian Gulf University, Bushehr 7516913817, Iran
f Department of Electrical and Electronic Engineering, Shiraz University of Technology, Shiraz 71557-13876, Iran

1. Introduction

Internet of Things (IoT) describes the seamless in-
terconnectivity among machines and human devices
which gather and share massive information. With the
wide adoption of IoT, Service-oriented Architecture
(SoA) and other novel technologies, the latest decade
has witnessed the birth of web service sharing plat-
forms, such as online www.programmableWeb.com13,

∗∗Yifei Chen (Corresponding author) is with Colleage of In-
formation and Electrical Engineering, China Agricultural Uni-
versity, Beijing 100000, China and will handle correspondence
at all stages of refereeing and publication, also post publication
(email:glhfei@cau.edu.cn).

7Wenwen Gong is with Colleage of Information and Electrical
Engineering, China Agricultural University, Beijing 100000, China
(email: wen.gong@cau.edu.cn).

8Huiping Wu is with Blockchain Laboratory of Agricul-
tural Vegetables, Weifang University of Science and Technology,
Shouguang 262700, China (email: wuhp760731@wfust.edu.cn).

9Xiaokang Wang is with Department of Computer Science, St.
Francis Xavier University, Antigonish B2G, Canada (email: xk-
wang@stfx.ca).

10Xuyun Zhang is with Department of Computing, Mac-
(email:

Sydney NSW 2122, Australia

quarie University,
xuyun.zhang@mq.edu.au)

11Yawei Wang is with Colleage of Information and Electrical En-
gineering, China Agricultural University, Beijing 100000, China
(email: yaweiwang@cau.edu.cn).

12Mohammad R. Khosravi is with Department of Computer
Engineering, Persian Gulf University, Bushehr 7516913817, Iran
and Department of Electrical and Electronic Engineering, Shi-
raz University of Technology, Shiraz 71557-13876, Iran (email:
m.khosravi@mehr.pgu.ac.ir)

13http://www.programmableweb.com

which hosts a wide variety of lightweight web APIs
(Application Programming Interfaces) published by
various services vendors [1]. Up to September 2020,
the largest web APIs ecosystem, programmableWeb,
gathers at least 23,612 published web APIs belong-
ing to more than 400 predeﬁned categories. All these
sharing platforms usually oﬀer the external invocation
function of published web APIs to developers [2]. For
app developers, development cycle and cost can be
saved by reusing remotely these third-party web APIs
[3] and combining a few of them into value-added ap-
plications [4].

Beneﬁting from IoT applications in various ﬁelds,
the continuous evolution of the web API economy al-
lows developers to ﬁnd desired web APIs and fur-
ther integrate them into a mashup in IoT by resort-
ing to exact keyword-matching techniques [5]. How-
ever, the massive candidate web APIs with similar
functionality but distinct quality would often make
it hard for app developers to select the suitable web
APIs, especially for those developers who do not have
much background knowledge of web APIs. For ex-
ample, if a developer intends to accomplish an app
with three functions {“Video”, “Blogging”, “Pho-
tos”}, he/she will search for a set of collectively-
satisﬁed candidate web APIs over 23,612 web APIs
from the programmableWeb.com repository through
feeding in these three keywords successively. Then,
the website would respectively return corresponding
1087, 753 and 661 functional-qualiﬁed web APIs,
which means that such app would require exhaustive

Diversity-aware Web APIs Assignment and Recommendation for Mashup Creation based on Game Theory in IoT3

exploration of nearly 10003 web API compositions.
As many researchers have pointed out, ﬁnding the op-
timal one from so many combinations is known as
classical NP-hard [6, 7]. In this case, how to recom-
mend top-K compositions to app developers remains
a non-trivial task. Therefore, it happens that there is
a rapid growth in the need for recommendation sys-
tem (RS) technique [8] to fulﬁll multifarious software
products including apps.

Although a large body of eﬀorts have been made in
current researches in this ﬁeld, we still identify several
deﬁciencies:

(1) First of all, there is a signiﬁcant lack of diver-
sity14 [9] in existing methods since most of them place
too much emphasis on accuracy. Moreover, they usu-
ally exhibit the redundant web APIs owing to sharing
uniform web APIs in web APIs recommendation lists.
This repetitive invocations for identical web API eas-
ily result in decreasing the rate of customer’s satisfac-
tion and increasing cost of a little extra resource to
some extent.

(2) In the second place, taking into account the tense
time-to-market limit, it’s impractical for app develop-
ers to inspect the oﬃcial mannuals of all potentially-
possible web APIs and conﬁrm the compatibility be-
tween them. Thus, top-K combinations with the same
functionality but distinct compatibility are diﬀerent to
catch, which is prone to reduce the usefulness of rec-
ommendations and the productivity of developers.

Recently, game theory, as an model of strate-
gic interaction among rational decision-makers, has
been widely applied to various problems in IoT, such
as allocate resources, assign tasks and so on.
In
view of these two limitations for automatic app de-
velopment, we put forward a novel Diversity-aware
and Compatibility-driven web APIs Recommendation
method (called DivCAR) in this paper. Our contribu-
tions of this paper are chieﬂy summarized as follows:
(1) We introduce the idea of sampling to achieve the
diversity of web APIs recommendation. To the best
of our knowledge, this is the ﬁrst eﬀort to combine
the idea of sampling with minimum group Steiner tree
search algorithm for the diversity of web APIs recom-
mendation.

(2) We conduct an eﬀective web APIs recommen-
dation algorithm to return the top-K useful compo-
sition solutions in terms of comprehensive diversity-
accuracy measure.

(3) We performed a series of systematic experi-
ments over a real-world dataset crawled from the web-
site programmableWeb.com, and then exported experi-
ment results reveal the superiority of our proposal than
comparision methods.

14There are two kinds of diversity in recommendation system:
aggregate or individual diversity. The aggregate diversity is for all
users across all recommended items while the individual diversity is
for each individual user. Here, our focus is on the aggregate diver-
sity.

The remainder of our paper is structured as follows.
Section 2 investigates and classiﬁes relevant research
works. In order to better facilitate an understanding of
our approach, a motivating example is described intu-
itively in Section 3. Key notations and their meanings
required by our algorithm are presented in section 4.
Our recommendation solution DivCAR, in Section 5,
is discussed in detail. In Section 6, we verify the ef-
fectiveness of our approach through the exported ex-
perimental results. Last but not least, Section 7 draws
a conclusion and points out future work.

2. Related Work

In recent years, a growing number of scholars have
devoted themselves to the multi-angle researches on
web APIs-based app development from theoretical re-
search to practical application in IoT, which lays a
solid groundwork for our solution.
In this section,
we would summarize existing literatures on web APIs
recommendation for app creation from the perspec-
tives of accuracy, diversity and compatibility.

2.1. Accuracy-oriented Recommendation

The accuracy in IoT web service ranking or recom-
mendation has been highly concerned by researchers
[10, 11, 12]. In the reusable composition context, Yao
et al. propose a probabilistic matrix factorization ap-
proach with implicit correlation regularization to ex-
plore web API recommendation for mashups. Ex-
perimental results over a large-scale real-world ser-
vice dataset demonstrate that their method outper-
forms the state-of-the-art collaborative ﬁltering ap-
proaches in terms of accuracy. In [3], Hao et al. put
forward a method named targeted reconstructing IoT
service descriptions (TRSDs) for the sake of more
valuable information hidden in mashup description;
then, according to that, a novel service recommen-
dation algorithm is developed to advance accuracy by
6.5%. Afterwards, to improve the quality of the rec-
ommendation results, Zhong et al. [13] enhance the
above approach by dynamically reconstructing objec-
tive service proﬁles and design a novel recommen-
dation strategy based on similar proﬁles. A topic-
adaptive web APIs recommendation method integrat-
ing multi-dimensional information, called hierarchi-
cal Dirichlet processes-factorization machines (HDP-
FM), is proposed in [14], which achieves a good ac-
curacy performance in terms of precision, recall, F-
measure and NDCG. Deep learning is introduced in
[15] for web service recommendation by Xiong and
Wang et al.; in concrete, the complex invocation in-
teractions are integrated into a deep neural network
through combining collaborative ﬁltering and textual
content to bring forth improvement at precision rate.
Like this work, [16] also utilizes deep learning and
matrix factorization to do an in-depth mining of tex-
tual item content. Recently, Huang et.al [17] introduce

4

Wenwen Gong, et al.

a novel deep reinforcement learning-based approach
to deal with the long-term recommendation problem
in IoT, which signiﬁcantly outperforms existing meth-
ods in terms of Hit-Rate and NDCG. Besides, [18]
concerns security in android applications. However,
accuracy is often not the only focus of app developers
in evaluating the recommended web APIs. Therefore,
it is also of practical signiﬁcance to explore other im-
portant recommendation performance criteria besides
accuracy.

2.2. Diversity-oriented Recommendation

Diversity, a key mertric for evaluating the recom-
mendation performances in IoT settings, can signiﬁ-
cantly expand the end users’ service selection scope
and as a result, enhance the end users’ satisfaction
degree [9]. To name a few, through clustering, a
category-aware distributed service recommendation
(CDSR) model is put forward in [19] based on an
app requirements in the form of textual input. This
method not only enhances the accuracy to some ex-
tent but also gains better diversity in long-tail recom-
mendation. Similarly in [20], following the idea “ser-
vices should be recommended cooperatively, not indi-
vidually”, the authors of [21] continue to extend their
work by exploiting the variant vKmeans cluster tech-
nique based on K-means algorithm and updating ser-
vice ranking mechanism. Then, a novel framework
for service set recommendation (SSR) is proposed to
provide more diverse recommendations for develop-
ers. Literature [22] brings forth a service package
recommendation (SPR) to produce recommendations
with more selective scope by exploiting a similar dis-
course analysis technique in [21]. To generate a list of
diverse web APIs, Kang et al. [23] incorporate func-
tional similarity, QoS (Quality of Service) values [24]
and diversity features of web services into a web ser-
vices graph to rank web service diversity degree. Fi-
nally, top-K web services with sound diversity are re-
turned app developers. However, the above-mentioned
approaches can only a set of web services, instead of
outputting multiple sets of web services, which often
narrows users’ web services selection scope. Consid-
ering this drawback, Cheng et al. [25] reﬁne the pre-
vious work in [23] to ﬁnd more diverse web services
lists. Diﬀerent from [23] where each node in web ser-
vice graph is an individual web service, the each node
in [25] is web service lists. In addition, Gu et al. [26]
propose a novel diversity-optimization method based
on a time-sensitive semantic cover tree (T2SCT) to
make diversiﬁed recommendations with pretty little
compromise on accuracy. Then, to achieve both ac-
curcy and diversity, He et al. [27] use Matrix Factor-
ization (MF) to predict useful third-party web APIs for
app development. Recently, a novel method called Di-
vRec LSH is proposed in [28] to achieve diverse and
eﬃcient recommendations through Locality-Sensitive
Hashing (LSH) technique. Although the above solu-

tions can achieve diverse recommendations, they of-
ten suﬀer from low compatibility of returned web ser-
vices, which makes application development less suc-
cessful.

2.3. Compatibility-oriented Recommendation

In IoT web APIs-based app creation, compatibility
is often a critical metric to measure that the collabora-
tion performances among web APIs and hence gains
ever-increasing attention. Here, we need to point out
that plus papers [29], [27] and [25], the next few recent
approaches to be explained are all based on the co-
invocation data in IoT scenario. And the same is true
of our research in this paper. In [30], the correlation
graph describing web APIs is modeled to excavate the
compatibility-aware evolution patterns of web APIs in
IoT environment. The authors exploit a quantitative
method of tag-based semantic matching-degree be-
tween inputs and outputs of two web APIs to evaluate
the web API compatibility. However, this method as
well as the measurement in [31] are prone to introduce
unless edges when modeling the service correlation
for such input/output-based compatibility evaluation.
Inspired by this issue, Qi et al. [32] have made great
eﬀorts to deﬁne a new compatibility metric which an
“API-API” correlation graph is established. Finally,
combined with minimum group Steiner tree search ap-
proach, a compatibility-aware APIs recommendation
method is proposed to return a set of functionally-
qualiﬁed web APIs with high-level compatibility. Af-
terwards, in [33], an updated weighted APIs correla-
tion graph is put forward through introducing edges’
weights (lager is better). Furthermore, the authors
of [33] propose a weight-aware compatibility web
APIs recommendation method. Nevertheless, these
approaches fail to provide developers with multiple
sets of compatible web APIs. To cope with this is-
sue, in [34], Gong et al. continue to make eﬀorts
in accomplishing a keywords-driven web APIs group
recommendation, which could deliver multiple sets
of IoT web APIs which are functional-qualiﬁed and
compatibility-guaranteed.

However, work [34] still suﬀers from a low diversity
across multiple web APIs recommendation lists as it
cannot traverse as more nodes and edges bridging web
APIs as possible in the web APIs correlation graph.
In view of this drawback, in this paper, we develop
a diversity-aware and compatibility-driven web APIs
recommendation solution based on the game theory,
called DivCAR, via exploiting the sampling technique
[35] to carry out more comprehensive coverage of the
whole search space. Speciﬁc details will be elaborated
in Section 5.

3. Motivating Example

In this section, we present a real-world IoT example
in Figure 1 to clarify the motivation of our research.

Diversity-aware Web APIs Assignment and Recommendation for Mashup Creation based on Game Theory in IoT5

As shown in Figure 1, a developer, i.e., Grace, intends
to develop a mobile taxi-hailing app [36] that can aid
passengers to quickly ﬁnd an available taxi. Gener-
ally, this app often involves four sub-functions: map-
ping, messaging, navigating and payment. Thus, when
developing such a mobile taxi-hailing app, Grace
needs to enter a set of keywords, {“Mapping”, “Mes-
saging”, “Navigating”, “Payments”} into web APIs
search engines (ProgrammableWeb.com) to search for
a set of qualiﬁed APIs that can collectively satisfy
Grace’s functional requirements. Here, Figure 1 ex-
hibits the candidate web APIs for each keyword as
well as their possible combinations (marked by vari-
ous colors).

However, in the above keywords-driven mobile app
development scenario, two challenges are often raised.
First of all, Grace may know little about the compat-
ibility among the returned web APIs by the APIs rec-
ommender system, while less-compatible web APIs
may lead to a high failure rate when composing these
APIs into a complex app. Therefore, from the per-
spective of Grace, it is becoming a necessity to guar-
antee that the returned a set of web APIs are not only
functional-qualiﬁed but also compatible enough. Sec-
ond, to provide Grace more ﬂexibilities when choos-
ing appropriate web APIs, it is signiﬁcant for the rec-
ommender system to return multiple sets of qualiﬁed
APIs, instead of only one set of APIs. This way, Grace
can pick out her preferred API set from multiple can-
didate sets, so as to reduce the APP development cost
and accelerate the development speed.

As a result, in this situation, how to recommend
manifold diversity-aware web APIs lists with func-
tionality and compatibility guarantee is becoming a
challenging and meaningful issue that deserves inten-
sive research.

4. Problem Deﬁnition

In the following section, we summarize the ratio-
nale of necessary terms for the process of web APIs
recommendation solutions in IoT settings. Key nota-
tions and their meanings are presented in Table 1.

Deﬁnition 1 (Web APIs Ecosystem): A IoT web
APIs ecosystem saves plentiful web “APP-API” inter-
action information. Here, a IoT web APIs ecosys-
is deﬁned as S = (API, A) where API =
tem,
{api1, api2, ..., apin} and A = {a1, a2, ..., am} denote
the collection of web APIs and apps in the IoT web
APIs ecosystem (i.e., ProgrammableWeb.com) sepa-
rately. An “APP-API” co-usage record si ∈ S exists on
condition that some web API apii ∈ API is success-
fully invoked in an app ai ∈ A by an app developer.

Deﬁnition 2 (Keywords Query): Given a IoT web
APIs ecosystem S , keywords query is denoted as Q =
{q1, q2, ..., qr} from category attribute of web APIs in
S , which represents the end-users’ functional require-
ments for expected apps.

Deﬁnition 3 (Vertices): A collection of vertices is
represented by V = {v1, v2, ..., vn} corresponding to a
set of web APIs API in web APIs ecosystem S , in
which each vertex covers a group of keywords query
{q1, q2, ..., qr}.

Deﬁnition 4 (Edges): Given a cluster of vertices
V = {v1, v2, ..., vn}, there are a set of corresponding
edges deﬁned as E = {e1, e2, ..., es} (s ≤ n). If a pair
of vi and v j have ever been appeared in an identical
app, an edge e(vi, v j) is added into set E. That is to
say, suppose each app ai ∈ A invokes all web APIs in
API and a complete graph associated with the cluster
of vertices V = {v1, v2, ..., vn} would be acquired.

Deﬁnition 5 (Compatibility): In this paper, one of
the facets that interest us is the number of times that a
pair of vi and v j have ever been integrated successfully
into identical app according to historical app develop-
ment, which is called as the compatibility value ci, j (an
integer greater than zero) of an edge e(vi, v j). In some
ways, the value of compatibility for an edge reﬂects
the weight or popularity between the two web APIs al-
lied to an edge. As depicted in Figure 2, c2,3>c3,4, then
we can draw the conclusion that v3 has better compat-
ibility with v2 instead of v4. At this level, the granular-
ity of web APIs versions and so on is out of the scope
of this article.

Deﬁnition 6 (Diversity): Assume that two sets of
web APIs collection API1, API2, there is a diversity
value D = 1 − |API1∩API2|
|API1|+|API2| indicating the degree to
which the web APIs from API1, API2 are not sim-
ilar to some extent. For example, considering two
web APIs collections API1 = api1, api2, api3, API2 =
api1, api4, the diversity value equals to 0.8.

Deﬁnition 7 (Weighted Web APIs Correlation
Graph (W-ACG)): Each app published on the Pro-
grammableWeb website indicates a meaningful inte-
gration for constituted web APIs. Above deﬁnitions
and such valuable information allow a web APIs cor-
relation graph W-ACG = G(V, E, W) quoted from [33]
to be established oﬄine. Speciﬁcally, we employ the
example in Figure 2 to explain for easing readers’ un-
derstanding. In this example, there are a total of 10
vertices where each vertex Ai(∈ A)(0 ≤ i ≤ 9) (marked
in dark orange) represents a web API covering a col-
lection of functional keywords, e.g., A3 possesses the
keywords describing functions {q1, q4, q12} while A0
can fulﬁll the function set {q7}. There exists an edge
between these two vertices with a compatibility of
0.25 that is taken reciprocal, which says the weight
between is 4 and they have ever been integrated col-
lectively four times. Note here that the “Ai” in Figure
2 is shortened to “i” for brevity’s sake.

In addition, as you can see in Figure 2, there are two
unconnected subgraphs due to a fraction of IoT web
APIs from diﬀerent domains, e.g. print service and
health. In the real world, it would be almost impossi-
ble for an app developer to enter such irrelevant key-
words that belong to diﬀerent domains. Therefore, the

6

Wenwen Gong, et al.

Fig. 1: A motivating example of web APIs recommendation for app creation in IoT.

maximal connected subgraph serves as our W-ACG.

Fig. 2: The partial weighted web APIs correlation graph.

As a result, our recommendation problem can be
formalized as follows: given a set of keywords query
instances Q in the web APIs ecosystem S , it requires
us to ﬁnd a set of potential web APIs compositions
with minimum compatibility C while guaranteeing ac-
curacy and diversity constraints P, which can be de-
scribed as in (1):

Maximize C satisfying P
C = {C1, ..., CK} , Cl = Capi1
P = {P1, ..., PK} , P1 ≥ ... ≥ PK

+ ... + Capin , l ∈ {1, ..., K}

(1)

Here, APIi, API j ∈ {API1, ..., APIK} means two ar-

bitrary recommended web APIs lists from web APIs
compositions {API1, ..., APIK}. Constraints P means
putting accuracy ﬁrst. That is, diversity is considered
when the accuracy of the list is the same since diver-
sity is ensured during the sampling process in Step 1.

5. Our Recommendation Solution: DivCAR

Our recommendation solution DivCAR, in this sec-
tion, is discussed in detail. Before we get into the de-
tails, let’s ﬁrst describe the Steiner tree in subsection
5.1, a key technique used in the solution. And then,
the speciﬁc steps of our recommendation approach Di-
vCAR are depicted in subsection 5.2.

5.1. Steiner tree

The Steiner tree (ST) or minimum Steiner tree,
named after Jakob Steiner, refers to a combinatorial
optimization solution and has been proven to be com-
putationally hard and NP-complete [37, 38]. The
Steiner tree problem is superﬁcially similar to the min-
imum spanning tree problem, in that both of them in-
terconnect a given set of vertexes by a graph of short-
est length, where the length is the sum of the lengths
of all edges. It has been proven that the shortest in-
terconnect is exactly a tree. However, the diﬀerence
between them is that extra intermediate vertexes and
edges could be added into the graph in the Steiner
tree problem in order to reduce the length of the span-
ning tree. In other words, the minimum spanning tree
can be recognized as a special case of the minimum
Steiner tree.

Let us provide a mathematical deﬁnition of the
Steiner tree. Given G(V, E, W) and V (cid:48) ⊆ V, then
T (vi, Q(cid:48)) is called a Steiner tree of V (cid:48) in G iﬀ both con-
ditions in (1) and (2) hold: (1) keywords of one vertex

    Google Maps Bing Maps … 1338 APIs   APIs repository Com Messaging Respond.io … 1726 APIs  IVA Video Sezion Video … 1087 APIs  Pin Payments Paypal Payments … 1588 APIs   Grace   {q1, q4, q12} {q5, q7} {q1, q8} {q3, q6} {q1, q10} {q3, q6} {q1, q2} {q7} {q9} {q2, q5, q11}                    3 2 1 0 4 5 6 7 8 9 3 1 1 1 1 1 1 1 1 1 1 1 4 3 1 1 1 1 1 1 1 Diversity-aware Web APIs Assignment and Recommendation for Mashup Creation based on Game Theory in IoT7

Table 1: Speciﬁcation of symbols used in this paper

Speciﬁcation

Symbol
S = (API, A) A web APIs ecosystem
API

The web APIs collection

A

Q

V

E

W

G(V, E, W)

Gsam
p
Q(cid:48) ⊆ Q

Nkey
N Set

Nsam

R

RT

ST

The collection of apps

A sequence of required keywords

The vertex collection

The undirected edge collection

The weight collection

Weighted web APIs correlation graph
A cluster of subgraphs {G1, ..., Gz}
The size of each sample

A state of Q in our model

A pre-built keyword nodes set

The neighboring nodes set of vi
The collection of sampled vertexes

The priority queue recording transitive

trees

The priority queue recording candidate

trees

The list of optimal trees from each

subgraph

T (vi, Q(cid:48))
Tmin(vi, Q)
Tdiv

A status in our algorithm

Minimum group Steiner tree

Diverse top-K Steiner trees

in V (cid:48) are diﬀerent from those of another one from V (cid:48);
(2) Q(cid:48) contains required keywords in set Q, i.e., sat-
isfying Q(cid:48) ⊆ Q.
In the application scenario of this
paper, however, there is usually more than one corre-
sponding node for each required keyword from Q, and
thus the original Steiner tree problem no longer meets
our needs so that the group Steiner tree needs to be
introduced. The essential diﬀerence between them is
that the same keywords of distinct vertexes in V (cid:48) ex-
ist. We will consider the example in Figure 2, sup-
posing that Q = {q1, q2, q3, q5}, and then T (v2, Q(cid:48))
is a Steiner tree of V (cid:48) where Q(cid:48) = {q1, q2, q3, q5},
V (cid:48) = {v5, v1, v2} and edges are {e(v5, v1), e(v1, v2)}; fur-
thermore, supposing that Q = {q1, q3, q7}, then there
are two group Steiner trees that meet the requirements,
i.e., T (v2, Q(cid:48)) where Q(cid:48) = {q1, q3, q7}, V (cid:48) = {v5, v1, v2}
and edges are {e(v5, v1), e(v1, v2)}, and T (v0, Q(cid:48)) where
Q(cid:48) = {q1, q3, q7}, V (cid:48) = {v5, v1, v0} and edges are
{e(v5, v1), e(v1, v0)}. In general, since there are diverse
group Steiner trees for a set of initially-given query
keywords, this allows us to searh and decide several
minimum group Steiner trees, which results in more
intricate decision-makings [39]. In the following sub-

Algorithm 1: DivFinder-Sampling (G, Q)
Input:
G(A, E, W): weighted APIs correlation graph;
Q = {q1, . . . , qr} : a set of query keywords
Output:
Gsam = {G1, · · · , Gz} : a cluster of weighted
correlation subgraphs

1 Nkey = generate nodes(G, Q)
2 for each i ∈ z do
Nsam = ∅
3
randomly select a node vi from Nkey
add vi into Nsam
update Nsam
while |Nsam| < |Gi| do

6

5

7

4

N Set = ∅
if wvi,v j>0 then

add v j into N Set
update N Set

end
randomly select a neighbor Ni from
N Set into Nsam
add Ni into Nsam
update Nsam

8

9

10

11

12

13

14

15

16

end
build new subgraph Gi using Nsam

17
18 end
19 return Gsam = {G1, · · · , Gz}

section, we explain step by step how to address this
problem.

5.2. Diversity-aware and Compatibility-driven Web
APIs Recommendation Approach: DivCAR

Our solution aims at excavating deeply histori-
cal “APP-API” invoking information from large web
APIs ecosystems S to reﬂect “the wisdom from the
crowd”. Speciﬁcally, from the data-driven perspec-
tive, a wealth of “APP-API” invoking data stored
in the web server of ProgrammableWeb.com carries
abundant invocation information between apps and
their constituent web APIs, which provides solid back-
ground knowledge for professionally building apps.
To further achieve diversity across all web APIs rec-
ommendation compositions, our proposed DivCAR is
chieﬂy threefold, as presented in Figure 3. First, we
exploit random walk sampling technique on a pre-
established weighted “API-API” correlation graph to
generate diverse subgraphs. Second, with these var-
ious subgraphs, we model the compatible web APIs
recommendation process as a minimum group Steiner
tree search problem on the basis of graph theory. Fi-
nally, through working out the search algorithm, mul-
tiple groups of compatible and diverse web APIs are
ranked and returned to the app developers.

Step 1: Generate diverse subgraphs of W-ACG by
random walk sampling

8

Wenwen Gong, et al.

which makes the application of sampling algorithms
trivial for end-users. The most attractive advantage of
Little Ball of Fur is that it can leave the vertex index
values unchanged.

In consideration of the characteristics of our dataset,
the Random Walk Sampler among them is allowed
to serve for our algorithm. Moreover, we all know
that this often results in a great number of sampling
times if we expect to gain representative and desired
results, due to the inherent uncertainty and probability
of sampling technique. Without loss of generality, in
the experimentation of this paper, we sample each set
of keyword query sequences Q = {q1, q2, ..., qr} 100
times by Random Walk Sampler of Little Ball of Fur
based on the prebuilt W-ACG, which is represented
by {G1, · · · , G100}. We will analyze the inﬂuence of
sampling times z on the experimental results in detail
in Section 6. To ensure better understanding, we use
Algorithm 1 to elaborate the details.

In addition, since each web API from the pro-
grammableWeb sharing platform often possesses mul-
tiple tags that represent its functions, we collect these
tags of all web APIs integrated in each app to form
distinct sets of query keywords. What needs to be em-
phasized here is that all of these groups of query key-
words are established in advance. In the meantime, all
corresponding subgraphs can be built oﬄine to ensure
execution eﬃciency. Once these subgraphs have been
built oﬄine, they will remain relatively stable and can
still be updated with minimal overhead.

Step 2: Compatibility-aware web APIs recommenda-
tion online

In the second step, according to end-users’ re-
quired keywords online, our algorithm will return a
compatibility-optimal web APIs composition based on
each of 100 subgraphs obtained by Step 1. For in-
stance, T (v0, Q(cid:48)) and T (v2, Q(cid:48)) in Figure 2 mentioned
previously. That is to say, given a query Q, this step
of DivCAR returns a compatibility-optimal minimum
group Steiner tree, Tmin(vi, Q), rooted at vi, while cov-
ering each requirement in Q. To be speciﬁc, we will
state the details below. Here, please note that it is nec-
essary to convert the compatibility value by taking the
inverse of ci, j of edge e(vi, v j) since our object is to
try our best to obtain the “minimum value” case of
compatibility-aware optimization problem as formu-
late in equation (1).

As depicted in Algorithm 2, according to the theory
of the Steiner tree, there are two crucial operations:
tree growth and tree merging, which are described by
lines 15-19 and 21-28 of Algorithm 2, respectively.
Let us illustrate them with the example in Figure 4.
Concretely, assume that an app developer is entitled to
enter a set of required keywords Q = {q1, q3, q5, q6}.
Let the descending priority queues R, RT save possible
trees and ﬁnal trees, respectively.

As shown in Figure 4, a transition tree T (v5, Q(cid:48))
where V (cid:48) = {v1, v2, v3, v5} and Q(cid:48) = {q1, q5, q6} (key-

Fig. 3: Working procedure of DivCAR.

Our current methods [34, 32, 33] for information
retrieval based on graphs are limited to the most
frequently-used web APIs, which hinders the diversity
of recommended results. In this step, to further speed
up diverse web APIs compositions, sampling strat-
egy for graphs, as an eﬀective technique thoroughly
researched in [40], is introduced to generate optimal
coverage of W-ACG. Furthermore, to produce better
representations for W-ACG, [40] answers two natu-
ral questions: (a) Which sampling techniques can per-
form well with various existing sampling methods; (b)
How many the sample size can be. Overall, sampling
strategy based on simple random node selection could
perform well. Morover, this approach can also work
well as the sample size of the evolutionary subgraph
pattern is reduced to approximately 15 percent of the
original graph, which will be veriﬁed in Section 6.

Concretely, we employ an open-source Python li-
brary that consists of more than twenty algorithms
for graph sampling, Little Ball of Fur [41], to attain
multiple subgraphs.
In a nutshell, it can be called
a Swiss Army knife for sampling tasks from graph
structured data. In the ﬁrst place, Little Ball of Fur is
developed through various techniques for node, edge,
and exploration-based graph sampling. In the second
place, it provides a uniﬁed application public interface

 q1 q2 … Step 1 Little Ball of Fur … 𝑇𝑚𝑖𝑛1 𝑇𝑚𝑖𝑛𝑧 … Step 2 Step 2 ST = {𝑇𝑚𝑖𝑛1  …, 𝑇𝑚𝑖𝑛𝑧}  Step 3 Top-K optimal web API lists Offline Phase Online Phase app developer subgraph1 subgraphz Diversity-aware Web APIs Assignment and Recommendation for Mashup Creation based on Game Theory in IoT9

Algorithm 2: DivFinder-DivSearching (Gsam,
Q)

Input:
Gsam = {G1, · · · , Gz} : a cluster of weighted
web APIs correlation subgraphs;
Q = {q1, . . . , qr} : a set of query keywords
Output:
S T = Tmin1 , · · · , Tminz : a list of minimum group
Steiner trees answered from all of subgraphs.

1 R = ∅, RT = ∅
2 for each Gi ∈ Gsam do
for each vi ∈ V do
3
Q(cid:48) = Q ∩ Cvi
if Q(cid:48) (cid:44) ∅ then

5

4

enqueue newtree T (vi, Q(cid:48)) into R

end

end
while R (cid:44) ∅ do

dequeue R as T (vi, Q(cid:48))
if Q(cid:48) = Q then

enqueue T (vi, Q(cid:48)) into RT
continue

end
% the growth operation for one tree
for each u ∈ U(vi) do

if wu,vi

+ wT (u,Q(cid:48))<wT (vi,Q(cid:48)) then
T (vi, Q(cid:48)) = e(u, vi) + T (u, Q(cid:48))
enqueue T (vi, Q(cid:48)) into R

end

end
% the merging operation for one tree
for each T (vi, Q(cid:48)

2) do

1), T (vi, Q(cid:48)
= ∅ then

2

if Q(cid:48)
1 ∩ Q(cid:48)
if
wT (vi,Q(cid:48)
then

1) + wT (vi,Q(cid:48)

2)<wT (vi,Q(cid:48)

1∪Q(cid:48)
2)

2) =
1 ∪ Q(cid:48)
1) ⊕ T (vi, Q(cid:48)
2)
1 ∪ Q(cid:48)

T (vi, Q(cid:48)
T (vi, Q(cid:48)
enqueue T (vi, Q(cid:48)
R

2) into

end

end

end

end
= RT.top()
Tmini
add Tmini into ST

32
33 end
34 return ST

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

Fig. 4: The tree growth and tree merging processes: an example.

words are shown in bold) appears at some point in our
model (highlighted with light green-shaded area). Af-
terwards, the algorithm continues further from three
directions (marked with diﬀerent colors in Figure 4):
(1) grows to v6 to produce a new tree T (v6, Q(cid:48)); (2)
extends v7 to produce T (v7, Q(cid:48)); (3) increases v8 to
produce T (v8, Q(cid:48)). As these three trees are produced
with the same keywords Q(cid:48) = {q1, q5, q6} but dis-
tinct compatibility, T (v7, Q(cid:48)) with optimal compati-
bility is enqueued into queue R for subsequent oper-
ations. Here, please note that although the required
query keywords have not been increased, this opera-
tion is still a necessary part of the whole algorithm. In
this case, v6, v7 and v8 are referred to as linking nodes,
while v1, v2, v4, v5 and v9 are known as keyword nodes.
The above process is called the tree growth operation,
which is illustrated in Figure 5 (a) and formalized as
Formula (2).

In general, the tree growth operation in Figure 5 (a)
needs to alternate with the following process called
the tree merging operation in Figure 5 (b), which is
formalized in Formula (3). Among the trees after
growth, there often is at least one pair satisfying two
conditions:
(1) both of them possess identical root
nodes; (2) they cover distinct query keywords. In this
case, we can attain a better tree with more keywords
through merging them to speed up the search process.
Likewise, taking Figure 4 as an example, T (v3, Q(cid:48)
1)
= {q1, q7} and T (v3, Q(cid:48)
where V (cid:48) = {v1, v3} , Q(cid:48)
2)
1
where V (cid:48) = {v2, v3} , Q(cid:48)
= {q6} (marked in yellow-red)
2
also possess identical root node v3, but diﬀerent key-
words. Under the circumstances, we can merge them
into a better tree T (v3, Q(cid:48)), where V (cid:48) = {v1, v2, v3} and
Q(cid:48) = {q1, q6}.

Such tree growth and tree merging operations pro-
ceed alternately until an optimal group Steiner tree
T (v9, Q) where V (cid:48) = {v1, v2, v3, v5, v7, v8, v9} is ﬁnally
returned. In addition, it is highlighted that if there is
more than one tree with the same keywords root at an
identical vertex, then only one tree with the best com-
patibility will be left.

wTg(Ai,K(cid:48)) = min
u∈U(Ai)

(wT(u,K(cid:48)) + wu,Ai)

wTm(vi,Q(cid:48)) = min
(cid:48)
(cid:48)
Q=Q
1∪Q
2,
(cid:48)
(cid:48)
=∅
1∩Q
Q
2

(wT(vi,Q
(cid:48)
1)

+ wT(vi,Q

(cid:48)

2))

(2)

(3)

            A1 {q10} {q4} {q8} {q3} {q2, q5} {q11, q12} {q1, q7} {q6} {q2, q3} 1 1/5 1/2 1/4 1/3 1/2 1 1/2 1/3 1/2 1/3 1    6 2 3 4 5 7 8 9 1 1 1 1 2 2 2 3 3 3 5 5 5 6 7 8 √ 2 2 1 1 3 3 3 1/2 1/3 1/2 1/3 10

Wenwen Gong, et al.

(a) Tree growth

(b) Tree merging

Fig. 5: An example for tree operations.

Algorithm 3: DivFinder-Ranking (ST)
Input:
ST: The list of optimal trees derived from all
subgraphs;
Output:
Tdiv = (cid:8)Tdiv1 , · · · , Tdivk
resulting trees

(cid:9) : ﬁnal recommendation

1 R ST = ranking(ST)
2 for each R S Ti, R S T j ∈ R S T do
if diversityR S Ti,R S T j ≤ θ then
3
add R S Ti, R S T j into Tdiv
update Tdiv

5

4

end

6
7 end
8 return Tdiv

Step 3: Diversity and accuracy-aware ranking algo-
rithm

By means of the previous Step 2 and Step 3, we
can acquire 100 top-level group Steiner trees based on
all sampled subgraphs, and these trees represent 100
diﬀerent web APIs compositions. However, theoreti-
cally, there must be some compositions with low accu-
racy due to the contingency inherent in the sampling
process, which requires us to rank all of them to pick
out high-quality compositions. Algorithm 3 presents
the pseudo-code of the process of ranking. Speciﬁ-
cally, they are ﬁrst ranked in order of accuracy. Then,
the top-K web APIs compositions where the diversity
between each pair is greater than θ are ﬁnally returned
to app developers as the ﬁnal web APIs recommenda-
tion results.

6. Experiments

6.1. Experimental Conﬁgurations

In our experiments, we employ the real-world
dataset crawled from www.programmableWeb.com
[32], which includes co-invocation information be-
tween 6,146 apps and 18,478 web APIs. According
to the redundant co-usage data of the maximum con-
nected graph, W-ACG is prebuilt in advance. Through
in-depth mining on the information, we conclude that

the vast majority of apps (approximately 96%) have 2
to 5 keywords. However, what needs special explana-
tion here is that in the research scenario of this article,
the apps that only contain two keywords, as a special
case, will not be experimented upon. Moreover, all
tags for web APIs included in apps are collected as all
sorts of keyword sets to generate various subgraphs
by the Little Ball of Fur library. All experiments are
performed on a laptop with identical hardware settings
(Intel i5-7300 2.60 GHz CPU, 8.0 GB RAM) and soft-
ware conﬁgurations (Windows 10 and Python 3.7).

6.2. Performance Metrics

In this part, we comprehensively measure the per-
formance of DivCAR in terms of the following a few
widely-utilized metrics:

(1) Mean Inter-List Diversity (MILD). Inter-list
diversity evaluates how diﬀerent every two lists are on
the basis of their Hamming distance (HMD). A higher
HMD implies higher diversity between each two lists.
It can be calculated as follows:

(cid:12)(cid:12)(cid:12)

(4)

HMD = 1 −

, i, j ∈ K ∧ i (cid:44) j

C(i, j)
|RLi| + (cid:12)(cid:12)(cid:12)RL j
(cid:12)(cid:12)(cid:12) represent the number of web
in which |RLi| ,
APIs in ith, jth recommendation lists, respectively. Be-
sides, if the ith, jth recommendation lists share no com-
mon web API at all, C(i, j) = 0 holds and their HMD
is 1; otherwise, their HMD is 0.

(cid:12)(cid:12)(cid:12)RL j

MILD averages the inter-list diversity across all
the recommendation lists in one experiment instance,
which is calculated by the formular (5):

MILD =

(cid:88)

1
K(K − 1)

HMD

(5)

in which K is the total number of recommendation
compositions.

(2) Inner-List Compatibility (MILC). Inner-list
compatibility measures the success rate of each rec-
ommendation compositions, which is the inverse of
the value that can be returned directly by our Steiner
tree algorithm. And then, MILC averages the inter-list
compatibility across all the recommendation composi-
tions in one experiment instance. The larger the value

            A1 {q10} {q4} {q8} {q3} {q2, q5} {q11, q12} {q1, q7} {q6} {q2, q3} 1 1/5 1/2 1/4 1/3 1/2 1 1/2 1/3 1/2 1/3 1    6 2 3 4 5 7 8 9 1 1 1 1 2 2 2 3 3 3 5 5 5 6 7 8 √ 2 2 1 1 3 3 3 1/2 1/3 1/2 1/3             A1 {q10} {q4} {q8} {q3} {q2, q5} {q11, q12} {q1, q7} {q6} {q2, q3} 1 1/5 1/2 1/4 1/3 1/2 1 1/2 1/3 1/2 1/3 1    6 2 3 4 5 7 8 9 1 1 1 1 2 2 2 3 3 3 5 5 5 6 7 8 √ 2 2 1 1 3 3 3 1/2 1/3 1/2 1/3 Diversity-aware Web APIs Assignment and Recommendation for Mashup Creation based on Game Theory in IoT11

is, the higher the recommendation performance will
be.

(3) Mean Precision (MP). Precision of a recom-
mendation list RLi is the ratio of correct web APIs in
total recommended list. MP is the average of preci-
sion across all the recommendation compositions in
one experimental instance. As formalized in formula
(6), the larger the value is, the better the recommenda-
tion accuracy is.

K(cid:88)

|RLi| ∩

(cid:12)(cid:12)(cid:12)RLapp

(cid:12)(cid:12)(cid:12)

MP = 1
K

i=1

|RLi|
(cid:12)(cid:12)(cid:12) denotes the amount of real-world web

(6)

(cid:12)(cid:12)(cid:12)RLapp
where
APIs used in some app.

(4) Mean Recall (MR). Diﬀerent from precision,
recall of a recommendation list is calculated by the
ratio of correct web APIs in all real-world web APIs in
an app. Similar to MP, larger is better. The calculation
of MR is shown in formula (7):

MR = 1
K

K(cid:88)

i=1

|RLi| ∩

(cid:12)(cid:12)(cid:12)RLapp
(cid:12)(cid:12)(cid:12)

(cid:12)(cid:12)(cid:12)RLapp

(cid:12)(cid:12)(cid:12)

(7)

The above metrics are calculated for each experi-
ment instance, all within the range of [0, 1]; further-
more, each pair of recommendation lists in each of 100
experimental instances is averaged to measure the per-
formance of our algorithm.

(6) Time cost. Time cost, as a key metric,
is
widely-used for the recommendation eﬃciency; then,
the lower the value is, the higher the recommendation
eﬃciency is.

6.3. Comparative Approaches

In our experiments, we compare DivCAR with the
following three representative approaches that all use
“APP-API” historical co-invocation records:

(1) SSR [21]: a solution that employs clustering
and text analysis techniques to ﬁnd the N sets of web
APIs of N separate categories that are most similar to
a developer’s functional input text descriptions. Ac-
cording to popularity, similarity and correlation de-
gree of distinct web APIs, the web APIs compositions
with the highest score are selected in the ranking task
without considering their diversity and compatibility.
Thus, this method is the baseline method in our exper-
iments.

(2) KC MulAGR [34]: a keywords-driven web APIs
group recommendation for automatic app service cre-
ation, which combines the Steiner tree algorithm with-
out sampling with pairwise ranking based on diversity
to return diverse adequate sets of web APIs.

(3) ATD JSC [25]:

is an algorithm that ﬁrst enu-
merates all potential web APIs compositions through
graph searching. Then, it derives the maximal inde-
pendent sets (MISs) of similarity graph built from po-

tential solutions to achieve top-K diverse web APIs
compositions.

(4)MSD [42]: Like in ATD JSC, MSD also ﬁrst enu-
merates all possible web APIs compositions through
graph searching. Then, it produces top-K diverse web
APIs compositions through solving max-sum diversi-
ﬁcation problem.

To perform a more fairer comparison, the optimal
parameters in the above four competitive approaches
are tuned. Specially, we set diversity threshold α = 0.5
for ATD-JSC and trade-oﬀ parameter λ = 0.5 for
MSD. In our experiments, we conduct the four sce-
narios where inputted number of keywords r are 3, 4,
5 and 6, respectively. As for each scenario, we change
the values of the parameter sampling times z from 10
to 100 in steps of 10, which determines the number
of sampled subgraphs. And we also vary the param-
eter sampling size p, which indicates how many the
number of vertexes in each subgraph are sampled by
DivCAR.

6.4. Experimental Results

In this subsection, we verify the superiority of our
DivCAR with respect to the following four proﬁles,
where K is equal to 10 in all cases.

Proﬁle-1: Performance convergence evaluation of
DivCAR w.r.t. sampling times z

In our DivCAR, the number of sampling, i.e., z in
the sampling process of Step 1, serves a fairly sig-
niﬁcant role in making diversiﬁed, eﬃcient and accu-
rate recommendations. The more sampling times, the
higher the probability of generating the precise rec-
ommendations for a set of required keywords. Nev-
ertheless, the resulting consumption will also be high.
Thus, to evaluate if and how much DivCAR trades ac-
curacy for eﬃciency, we ﬁrst statistically analyze the
convergence performance of representive metrics, i.e.,
precision and diversity, under the inﬂuence of param-
eter z to guide our follow-up experiments.

In examining Figure 6, sampling times z are
varied from 10 to 100, and each curve repre-
sents a parameter pair (p, r), where p falls into
{200, 300, 400, 500, 600, 700, 800} and r belongs to
{2, 3, 4, 5, 6}. Running data on precision and diversity
are reported in Figure 6 (a) and Figure 6 (b), respec-
tively. The MP and MILD performance are relatively
slow and basically stable at about 0.3 and 0.9 when
parameter z grows to 100, respectively. Therefore, our
subsequent experiments are based on the fact that z is
equal to 100 instead of no greater value of z.

Proﬁle-2: Diversity comparison of the ﬁve methods

As we discussed in the previous section, diversity
is the top priority of our research. On the one hand,
a lower diversity may lead to loss of users’ satisfac-
tion degree and interests. On the other hand, a larger
diversity may consequently increases its recommen-
dation success rate. To measure the diversity per-

12

Wenwen Gong, et al.

(b) MP convergence

(c) MILD convergence

Fig. 6: Performance convergence of DivCAR w.r.t. sampling times.

Fig. 7: Recommendation diversity comparison.

Fig. 8: Recommendation compatibility comparison.

formance of DivCAR in terms of the interlist diver-
sity (MILD) metric, we vary value of r from 3 to 6
in this test. Figure 7 presents the averaged statisti-
cal data of the exported results with z = 100, p ∈
{100, 200, 300, 400, 500, 600, 700, 800}. Likewise, the
following three proﬁles, i.e., proﬁle-3, proﬁle-4 and
proﬁle-5 are also averaged.

As indicated in Figure 7, not surprisingly, the value
of mean interlist diversity (MILD) of our DivCAR is
obviously superior to SSR by 65.81%, KC MulAGR
by 22.71% and ATD JSC by 22.8% on average across
four cases with diﬀerent r, respectively. This comes
from the sampling mechanism introduced in our Di-
vCAR, which makes good use of DivCAR’s ability to
levarage the randomness of the sampling process to
guarantee the nonrepeatability of web APIs across dis-
tinct recommendation lists. To a certain extent, this
avoid the so-called local optimum dilemma in the op-
timization problem. In addition, we can see that the

baseline SSR remains largely lower than other three
methods, which conﬁrms that the diversity of its algo-
rithm needs to be further improved. In contrast with
this, the MILD values of KC MulAGR and ATD JSC
are lower than that of DivCAR since KC MulAGR
only utilizes the minimum group Steiner tree algo-
rithm without sampling technique. And thus, as for
improving the dilemma of local optimum, they don’t
work very well. Furthermore, from Figure 7, it can be
drawn that the performance of our method is compara-
ble to that of the MSD method in terms of MILD value,
but the accuracy of MSD was signiﬁcantly worse than
that of our proposal.

Figure 7 also shows that, when the number of r
rises, the overall MILD data of these ﬁve approaches
roughly decline. For example, one of the most obvious
is that KC MulAGR decrease from 76.32% to 58.92%
and ATD JSC decrease from 75.98% to 58.91%. This
is mainly because of the fact that more web APIs in-

Diversity-aware Web APIs Assignment and Recommendation for Mashup Creation based on Game Theory in IoT13

(a) MP

(b) MILD

Fig. 9: Recommendation accuracy comparison.

dency in MILC of DivCAR and KC MulAGR with the
growth of r. Their values basically ﬂuctuate around 4.
The reason for this phenomenon is that one or more
web APIs are needed to collectively meet functional
requirements represented by distinct number of key-
words. Under normal conditions, more web APIs of-
ten lead to larger MILC values. In addition, there is
little diﬀerence in MILC value between DivCAR and
KC MulAGR. For example, DivCAR’s MILC outper-
form KC MulAGR by 0.2, 1.59, 1.52 and 0.89 when r
is equal to 3, 4, 5 and 6, respectively. This shows an-
other advantage of sampling technique to avoid global
optimization. Therefore, our DivCAR can always
achieve high-level web APIs compatibility.

Proﬁle-4: Accuracy comparison of the ﬁve methods

In this part, we evaluate and compare the recom-
mendation accuracy of ﬁve methods by measuring the
MP and MR metrics, which are recognized as the key
measurements for evaluating the probability of “False-
positive” and “False-negative”, respectively. The sta-
tistical experiment results are indicated in Figure 9.

As displayed in Figure 9 (a) and Figure 9 (b), the
MP and MR values of the three methods, DivCAR,
KC MulAGR, SSR and MSD, all increase with the
growth of r. For instance, DivCAR’s MP and MR
gradually increase by 9% from 23% to 32% in Fig-
ure 9 (a) and by 10% from 32% to 42% in Figure 9
(b), respectively. This is because the validity of rec-
ommended web APIs will increase with the rise of
required web APIs to fulﬁll more complex functional
requirements for an app. Here, what needs to be ex-
plained is that the MP and MR data of DivCAR are su-
perior to those of SSR and MSD, but perform slightly
worse than KC MulAGR and ATD JSC. This comes
from two main reasons. On the one hand, the fact our
DivCAR outperforms SSR originates from that we uti-
lize minimum group Steiner tree algorithm. On the
one hand, there is a tradeoﬀ between accuracy and di-
versity needs to be adjusted according to the needs of

Fig. 10: Computation time comparison.

crease the likelihood of repetition among them. There-
fore, more distinct web APIs can be recommended
to app developers to improve the satisfaction and
serendipity of recommendations through our DivCAR.
DivCAR oﬀers signiﬁcantly global diversity of the web
APIs across individual recommendation lists by sam-
pling to give equal opportunities to both popular and
less popular web APIs.

Proﬁle-3: Compatibility comparison of the two meth-
ods

Compatibility, as another goal of our study we need
to guarantee, aﬀects how many success rate a devel-
oper executes. In this experiment, since compatibility
between web APIs is not considered in other two com-
petitive methods ATD JSC and SSR, we only compare
the compatibility of trees answered by DivCAR with
KC MulAGR in terms of the mean inner-list compati-
bility (MILC) metric. Moreover, a larger compatibility
of a tree means better compatibility among web APIs
from the tree. Here, r is set to an integer between 2
and 6. The experimental data are shown in Figure 8.

As exported in Figure 8, there is no distinct ten-

14

Wenwen Gong, et al.

(a) MP convergence

(b) MILD convergence

(c) MP convergence

(d) MILD convergence

Fig. 11: Performance evaluation of DivCAR w.r.t. (z, p).

diﬀerent scenes. To better demonstrate why such bal-
ance between the accuracy and diversity is the right
balance, we deﬁned a harmonic mean of the diversity
and accuracy according to F2-score, which is calcu-
lated by (1 + 4) MP∗MILD
(4∗MP)+MILD . The values of harmonic
mean are 0.6107, 0.6082, 0.6002, 0.1672, 0.3826 for
DivCAR, KC MulAGR, ATD JSC, SSR and MSD, re-
spectively. Especially, our focus is on the diversity
of web API name in research scenarios of our pa-
per. To be speciﬁc, except for SSR, although the ac-
curacy of KC MulAGR and ATD JSC is better than
that of DivCAR, their diversity is not as good as that
of DivCAR. For example, DivCAR obtains signiﬁcant
merits over SSR, i.e., 65.81%, 18% and 22.13% in
MILD, MP and MR, respectively; DivCAR outper-
forms ATD JSC in MILD by 22.8% on average, but
is inferior to ATD JSC in MP and MR by 21.6% and
22.62%. It’s also important to point out here that al-
though the diversity of our DivCAR is comparable to
that of MSD, the accuracy is signiﬁcantly better than
that of MSD, i.e., 16% and 17% on average in MP and
MR. Nonetheless, more importantly, the accuracy of
DivCAR is still able to meet the needs of developers in
most cases. Therefore, the performance of our algo-

rithm can still be guaranteed.

Proﬁle-5: Eﬃciency comparison of the ﬁve methods

Eﬃciency, as an important metric to evaluate algo-
rithm performance, is tested and made a comparison
of ﬁve diﬀerent recommendation methods. The con-
sumed time cost of ﬁve approaches is illustrated in
Figure 10.

As demonstrated in Figure 10, the time consump-
tion of the ﬁve methods all increase with the number of
r. Among them, the fastest growth is especially SSR so
that it grows almost linearly. This comes from the fact
that more query keywords often require more compli-
cated search processes. Moreover, the time cost of SSR
presents an approximately and linearly positive cor-
relation with r, since time consumption is generated
when candidate web APIs are clustered into r distinct
categories in the ﬁrst stage of the algorithm. Among
these approaches, the most time-consuming method is
MSD as it concerns the sum of the diversity of all com-
binations. With the growth of r, both KC MulAGR and
DivCAR methods consume more time to ﬁnd the top-
K appropriate web APIs compositions from increasing
numbers of candidate web APIs. KC MulAGR needs

Diversity-aware Web APIs Assignment and Recommendation for Mashup Creation based on Game Theory in IoT15

more or less as much consumed time as ATD JSC
does as they all ﬁrst generate all candidate result trees
and then to ﬁnd diverse top-K web APIs recommen-
dation lists. However, it is obvious from Figure 10
that the growth in consumption time of DivCAR is
slightly more signiﬁcant than that of KC MulAGR and
ATD JSC. This is because slightly more time is re-
quired to ﬁnd the top-K optimal solutions from fewer
sampled nodes in the ﬁrst step of our DivCAR. Plus,
the excellent diversity value of DivCAR, the time cost
is perfectly acceptable.

Proﬁle-6: Recommendation performance evaluation
of our DivCAR w.r.t. (z, p)

In our algorithm, the two parameters, i.e., sam-
pling times z and sampling size p, can aﬀect
the exported recommendation results.
To inves-
inﬂuence on DivCAR’s performance,
tigate their
z ∈ {10, 20, 30, 40, 50, 60, 70, 80, 90, 100} and p ∈
{100, 200, 300, 400, 500, 600, 700, 800}.
Therefore,
we test the average accuracy, diversity, compatibil-
ity and eﬃciency performance of our DivCAR across
one hundred cases with diﬀerent z - p combinations in
terms of MP, MILD, MILC and computation time, re-
spectively. The experimental results are shown in Fig-
ure 11, in which each line represents a change trend
in the performance of p at diﬀerent z and can all con-
verges when z = 100.

As Figure 11 indicates, as z grows, the increase in
z from 10 to 100 signiﬁcantly impacts the values of
MP obtained by diﬀerent sample sizes. In Figure 11
(a), compared with z = 10, DivCAR achieves much
higher performance when z>10. For instance, on av-
erage across diﬀerent cases with z>10, DivCAR’s MP
outperforms z>10 by 55%. As presented Figure 11
(b), DivCAR is also signiﬁcantly aﬀected along with
the increase in z, but in the opposite negative way. Di-
vCAR’s MILD slightly decreases by 3.34% on aver-
age. On one hand, it shows that the increases in MP
can achieve much more signiﬁcant than the such slight
decreases in the values of MILD. On the other hand,
we can conclude that the MP and MILD performances
of our DivCAR can reach the best case when the samp-
ing size p is 100. This mainly comes from that as the
number of sampling times increases, more “appropri-
ate web APIs” in each recommendation list inevitably
result in less diversity of web APIs.

By contrast, the increase in z does not signiﬁcantly
impact DivCAR’s compatability and eﬃciency mea-
sured by MILC and computation time, which further
illustrates the stability of our method. More specif-
ically, in the case of a small z at the beginning, the
compatibility is not pretty stable, which is in line with
our expected idea. But with the growth of z, p exactly
aﬀects MILC and computation time. Under diﬀerent
p, all the values of MILC vary from 2 to 22 in Figure
11 (c) and the values of computation time all vary from
0.1 to 1.1 in Figure 11 (d). These changes are per-
fectly acceptable range. In addition, computation time

gradually escalates with the growth of sampling size
p, which perfectly validates our expected results. This
is because the search processes become more compli-
cated as the number of nodes in sampled subgraphs
increase. With p = 100, DivCAR produces the most
signiﬁcant merit over other diﬀerent p, i.e., 0.089 sec-
onds in computation time. Lastly, it is worth noting
in particular that the ﬁnding mentioned in the classic
paper [40] that sampling strategy can achieve ideal ef-
fects with size down to approximately 15% of original
massive graph, which exactly corresponds to the case
z = 100 and p = 100 across all combinations.

7. Conclusion

Web APIs recommendation in IoT settings has be-
come a promising way for app developers to develop
desirable apps quickly and eﬀciently. However, the re-
sults demonstrate that existing web APIs recommen-
dation algorithms still suﬀer from low diversity. To
overcome this issue, in this paper, we propose Div-
CAR by means of the idea of game theory in IoT and
sampling technique, to achieve diversity-aware and
compatibility-driven web APIs recommendation for
mashup development in IoT. In DivCAR, we employ
a random walk sampling technique on a “API-API”
correlation graph prebuilt from “APP-API” co-usage
records to generate diverse “API-API” correlation sub-
graphs. Afterwards, with the diverse “API-API” corre-
lation subgraphs, we model the compatible web APIs
recommendation problem as a minimum group Steiner
tree search problem; moreover, through solving the
problem, manifold sets of compatible and diverse web
APIs are made available to the app developers. At last,
extensive experiments based on a real-world dataset
from programmableWeb validate the eﬀectiveness and
eﬃciency of our proposed DivCAR approach.

In our future work, the quality data of IoT web
APIs, i.e., response time, will be extended into our al-
gorithm to imporve the recommendation accuracy. In
addition, we will leverage more additional information
of apps and web APIs from programmableWeb, e.g.,
their descriptions and versions, for more practical and
diverse apps in IoT.

References

[1] N. Almarimi, A. Ouni, S. Bouktif, M. W. Mkaouer, R. G.
Kula, M. A. Saied, Web service api recommendation for au-
tomated mashup creation using multi-objective evolutionary
search, Applied Soft Computing Journal 85.

[2] B. Cao, X. F. Liu, M. M. Rahman, B. Li, J. Liu, M. Tang, Inte-
grated content and network-based service clustering and web
apis recommendation for mashup development, IEEE Trans-
actions on Services Computing 13 (1) (2020) 99–113.

[3] Y. Hao, Y. Fan, W. Tan, J. Zhang, Service recommendation
based on targeted reconstruction of service descriptions, 2017,
pp. 285–292.

[4] A. Segev, E. Toch, Context-based matching and ranking of
web services for composition, IEEE Transactions on Services
Computing 2 (3) (2009) 210–222.

16

Wenwen Gong, et al.

[26] L. Gu, P. Yang, Y. Dong, Diversity optimization for recom-
mendation using improved cover tree, Knowledge-Based Sys-
tems 135 (nov.1) (2017) 1–8.

[27] Q. He, B. Li, F. Chen, J. Grundy, Y. Yang, Diversiﬁed third-
party library prediction for mobile app development, IEEE
Transactions on Software Engineering (2020) 1–1.

[28] L. Wang, X. Zhang, R. Wang, C. Yan, L. Qi, Diversiﬁed
service recommendation with high accuracy and eﬃciency,
Knowledge-Based Systems 204 (2020) 106196.

[29] L. Yao, X. Wang, Q. Z. Sheng, B. Benatallah, C. Huang,
Mashup recommendation by regularizing matrix factorization
with api co-invocations, https://doi.org/10.1109/TSC.
2018.2803171 (2018).

[30] G. Huang, Y. Ma, X. Liu, Y. Luo, X. Lu, M. B. Blake,
Model-based automated navigation and composition of com-
plex service mashups, IEEE Transactions on Services Com-
puting 8 (3) (2015) 494–506.

[31] N. Chen, N. Cardozo, S. Clarke, Goal-driven service compo-
sition in mobile and pervasive computing, IEEE Transactions
on Services Computing 11 (1) (2018) 49–62.

[32] L. Qi, Q. He, F. Chen, W. Dou, Q. Ni, Data-driven web
apis recommendation for building web applications, https:
//doi.org/10.1109/TBDATA.2020.2975587 (2020).
[33] L. Qi, Q. He, F. Chen, W. Dou, S. Wan, X. Zhang, X. Xu,
Finding all you need: Web apis recommendation in web of
things through keywords search, IEEE Transactions on Com-
putational Social Systems 6 (5) (2019) 1063–1072.

[34] W. Gong, C. Lv, Y. Duan, Z. Liu, M. R. Khosravi, W. Dou,
Keywords-driven web apis group recommendation for auto-
matic app service creation process, https://doi.org/10.
1002/spe.2902 (2020).

[35] M. S. Mahmud, J. Z. Huang, S. Salloum, T. Z. Emara, K. Sa-
datdiynov, A survey of data partitioning and sampling meth-
ods to support big data analysis, Big Data Mining and Analyt-
ics 3 (2) (2020) 85–101.

[36] Y. Khazbak, J. Fan, S. Zhu, G. Cao, Preserving personalized
location privacy in ride-hailing service, Tsinghua Science and
Technology 25 (6) (2020) 743–757.

[37] M. R. Garey, D. S. Johnson, The rectilinear steiner tree prob-
lem is np-complete, SIAM Journal on Applied Mathematics
32 (4) (1977) 826–834.

[38] F. K.Hwang, D. Richards, Pawel.Winter, The steiner tree prob-

lem, Networks 22 (1) (1992) 55–89.

[39] N. Bhardwaj, P. Sharma, An advanced uncertainty measure
using fuzzy soft sets: Application to decision-making prob-
lems, Big Data Mining and Analytics 4 (2) (2021) 94–103.

[40] J. Leskovec, C. Faloutsos, Sampling from large graphs, Pro-
ceedings of the 12th ACM SIGKDD international conference
on Knowledge discovery and data mining (2006) 631–636.

[41] B. Rozemberczki, O. Kiss, R. Sarkar, Little ball of fur a
python library for graph sampling, https://doi.org/10.
1145/1122445.1122456 (2020).

[42] A. Borodin, A. Jain, H. C. Lee, Y. Ye, Max-sum diversiﬁca-
tion, monotone submodular functions, and dynamic updates,
ACM Transactions on Algorithms (TALG) 13 (3) (2017) 1–
25.

[5] M. Jiang, W. C. Fu, C. W. Wong, Exact top-k nearest keyword
search in large networks, SIGMOD ’15: Proceedings of the
2015 ACM SIGMOD International Conference on Manage-
ment of Data (2015) 393–404.

[6] D. Ardagna, B. Pernici, Global and local qos guarantee in web
service selection, Business Process Management Workshops
1 (4) (2006) 233–243.

[7] A. Ouni, R. G. Kula, M. Kessentini, T. Ishio, D. M. German,
K. Inoue, Search-based software library recommendation us-
ing multi-objective optimization, Information and Software
Technology 83 (2017) 55–75.

[8] W. Gong, L. Qi, Y. Xu, Privacy-aware multidimensional mo-
bile service quality prediction and recommendation in dis-
tributed fog environment, Wireless Communications and Mo-
bile Computing, 2018, Article ID 3075849, 8 pages 2018.
[9] M. K. A, T. P. B, Diversity in recommender systems – a survey,

Knowledge-Based Systems 123 (2017) 154–162.

[10] E. Al-Masri, Q. H. Mahmoud, Qos-based discovery and rank-
ing of web services, https://doi.org/10.1109/ICCCN.
2007.4317873 (2007).

[11] L. Yao, Q. Z. Sheng, A. Segev, J. Yu, Recommending web
services via combining collaborative ﬁltering with content-
based features, https://doi.org/10.1109/ICWS.2013.
16 (2013).

[12] L. Yao, Q. Z. Sheng, A. H. H. Ngu, J. Yu, A. Segev, Uniﬁed
collaborative and content-based web service recommendation,
IEEE Transactions on Services Computing 8 (3) (2015) 453–
466.

[13] Y. Zhong, Y. Fan, W. Tan, J. Zhang, Web service recommen-
dation with reconstructed proﬁle from mashup descriptions,
IEEE Transactions on Automation Science and Engineering
15 (2) (2018) 468–478.

[14] L. HC, L. JX, C. BQ, S. M., Topic-adaptive web api recom-
mendation method via integrating multidimensional informa-
tion., IEEE Transactions on Automation Science and Engi-
neering 15 (2) (2018) 468–478.

[15] R. Xiong, J. Wang, N. Zhang, Y. Ma, Deep hybrid collabora-
tive ﬁltering for web service recommendation, Expert Systems
with Applications 110 (2018) 191–205.

[16] H. Wu, Z. Zhang, K. Yue, B. Zhang, J. He, L. Sun, Dual-
regularized matrix factorization with deep neural networks for
recommender systems, Knowledge-Based Systems 145 46–
58.

[17] L. Huang, M. Fu, F. Li, H. Qu, Y. Liu, W. Chen, A deep re-
inforcement learning based long-term recommender system,
Knowledge-Based Systems 213 (2021) 106706.

[18] J. Tang, R. Li, K. Wang, X. Gu, Z. Xu, A novel hybrid method
to analyze security vulnerabilities in android applications, Ts-
inghua Science and Technology 25 (5) (2020) 589–603.
[19] B. Xia, Y. Fan, W. Tan, K. Huang, J. Zhang, C. Wu, Category-
aware api clustering and distributed recommendation for auto-
matic mashup creation, IEEE Transactions on Services Com-
puting 8 (5) (2015) 674–687.

[20] W. Gao, L. Chen, J. Wu, H. Gao, Manifold-learning based
api recommendation for mashup creation, 2015 IEEE Interna-
tional Conference on Web Services (ICWS) (2015) 432–439.
[21] W. Gao, J. Wu, A novel framework for service set recommen-
dation in mashup creation, 2017 IEEE International Confer-
ence on Web Services (ICWS) (2017) 65–72.

[22] Q. Gu, J. Cao, Q. Peng, Service package recommendation
for mashup creation via mashup textual description mining,
2016 IEEE International Conference on Web Services (ICWS)
(2016) 452–459.

[23] G. Kang, M. Tang, J. Liu, X. Liu, B. Cao, Diversifying
web service recommendation results via exploring service us-
age history, IEEE Transactions on Services Computing 9 (4)
(2016) 566–579.

[24] Y. Jin, W. Guo, Y. Zhang, A time-aware dynamic service qual-
ity prediction approach for services, Tsinghua Science and
Technology 25 (2) (2019) 227–238.

[25] H. Cheng, M. Zhong, J. Wang, Diversiﬁed keyword search
based web service composition, Journal of Systems and Soft-
ware 163 (2020) 110540.

