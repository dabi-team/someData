2
2
0
2

g
u
A
0
3

]

R
C
.
s
c
[

1
v
2
6
0
4
1
.
8
0
2
2
:
v
i
X
r
a

Attack detection based on machine learning
algorithms for different variants of Spectre attacks
and different Meltdown attack implementations

*Note: Sub-titles are not captured in Xplore and should not be used

Zhongkai Tong∗, Ziyuan Zhu∗, Yusha Zhang∗, Yuxin Liu∗, and Dan ∗
∗Institute of Information Engineering, Chinese Academy of Sciences
∗School of Cyber Security, University of Chinese Academy of Sciences, Beijing, China

Abstract—To improve the overall performance of processors,
computer architects use various performance optimization tech-
niques in modern processors, such as speculative execution,
branch prediction, and chaotic execution. Both now and in
the future, these optimization techniques are critical for im-
proving the execution speed of processor instructions. However,
researchers have discovered that
these techniques introduce
hidden inherent security ﬂaws, such as meltdown and ghost
attacks in recent years. They exploit techniques such as chaotic
execution or speculative execution combined with cache-based
side-channel attacks to leak protected data. The impact of these
vulnerabilities is enormous because they are prevalent in existing
or future processors. However, until today, meltdown and ghost
have not been effectively addressed, but instead, multiple attack
variants and different attack implementations have evolved from
them. This paper proposes to optimize four different hardware
performance events through feature selection and use machine
learning algorithms to build a real-time detection mechanism
for Spectre v1,v2,v4, and different implementations of meltdown
attacks, ultimately achieving an accuracy rate of over 99%. In
order to verify the practicality of the attack detection model,
this paper is tested with a variety of benign programs and
different implementations of Spectre attacks different from the
modeling process, and the absolute accuracy also exceeds 99%,
showing that this paper can cope with different attack variants
and different implementations of the same attack that may occur
daily.

Index Terms—spectre, meltdown, attack detection, machine
learning, security, hardware performance counters, feature se-
lection.

I. INTRODUCTION

In the past, hardware was considered trustworthy in infor-
mation security for a long time. However, with the continuous
development of cache side-channel attacks in the past decade,
it poses a signiﬁcant threat to the security of existing computer
hardware. Researchers are constantly working on software and
hardware mitigation and detection techniques to address these
issues. The development of cache side-channel attacks has also
made possible microarchitecture attacks such as the recently
discovered Meltdown [1] and Spectre [2] attacks.

Memory isolation is a critical security mechanism provided
by modern computer systems. Part of the operating system

Identify applicable funding agency here. If none, delete this.

and instruction set structure prevents processes from accessing
each other’s memory or kernel memory and allowing different
owners to run simultaneously on the same physical computing
platform, such as the same cloud computing platform or
desktop computing platform. Moreover, recently discovered
meltdown attacks could overcome memory isolation and allow
malicious processes to access memory addresses without phys-
ical and kernel memory privileges. The meltdown had a broad
impact, including Intel’s X86 architecture of processors, IBM
POWER processors, and some ARM-based processors [3].
Malicious processes use the acceleration mechanism of out-
of-order execution to cause eventual memory access requests
to fail by attempting to access memory addresses that do not
belong to the process. In contrast, memory access request
violations are captured after the contents of the requested
memory location have been loaded into the cache, and the
operating system disables access to the contents of the cache
by issuing the SIGSEGV signal. However, since the content
is now present in the cache, a malicious process can use a
cache-based side-channel attack (e.g., Flush+Reload [4]) to
obtain private information in the cache.

Speculative execution is a powerful performance enhance-
ment technique in modern processors. The technique allows a
computer system to execute some tasks that may be needed
in advance by guessing the future execution path. The work
is completed before it is known whether it is needed to avoid
possible time delays. If the guess ends up being correct, the
computation results from the extra work will be committed,
resulting in an additional performance gain. However, if the
guessed execution path is wrong, most of the changes made by
the pre-execution will be discarded, the results will be ignored,
and the state of the registers will revert to their original state,
but some information will be read into the cache. Spectre
attacks exploit this technique to trick the processor into taking
the wrong branch for the speculative execution. Furthermore,
these malicious branch executions can be combined with
cache-side channel attacks and eventually leak the contents
of the victim’s memory or registers.

To keep different computing devices safe from these hard-
ware vulnerabilities, researchers are constantly coming up with

 
 
 
 
 
 
different mitigation measures to try to solve these problems.
Despite extensive efforts, the existing mitigation techniques for
meltdown and ghost attacks are not perfect. Operating systems
(such as Linux) map physical and kernel memory into two
virtual address spaces for each running process, and malicious
processes using meltdown can access any part of physical and
kernel memory at any stage of their execution. Moreover,
blocking or making it difﬁcult for malicious processes to
understand these mappings is crucial to mitigate meltdowns.
This can be achieved using recent OS patches such as KPTI
(formerly known as KAISER) [5]. However, these patches can
signiﬁcantly impact CPU performance of 5% to 30% [6].

Many software-based or hardware-based mitigation tech-
niques have been proposed for Spectre attacks. For example,
the binary-based methods oo7 [7] and Spectector [8] detect
possible attacks by analyzing binaries to discover potentially
vulnerable parts. Nevertheless, these methods cannot be ap-
plied to ongoing Spectre intrusions or to take action against
them. Because there are many Specter attack variants, it is
challenging to solve all problems with a single patch, and
existing software mitigation techniques can introduce a 5%-
12% performance loss to performance. Hardware defense
methods such as DAWG [9] and InvisiSpec [10], which have
been proposed in recent years, are effective against speciﬁc
Spectre attacks but lack practicality and require additional
hardware modiﬁcations, bringing a much more signiﬁcant
actual performance loss than software methods. So there is
a need for a technology that has a low-performance loss, high
utility, and the ability to mitigate multiple attacks and their
variants.

Attack detection techniques are a more ﬂexible form of
software-based protection and are increasingly being used
as the ﬁrst defense against various attacks. By analyzing
the speciﬁc characteristics of an attack, attack detection can
provide an effective early detection mechanism, which is the
theoretical basis for attack detection. Since attack detection
does not require changes to the original CPU microarchitec-
ture, it is convenient; and the performance loss associated
with monitoring most process runtime speciﬁc behaviors (e.g.,
hardware performance counters) is shallow, so attack detection
is increasingly becoming an essential method for defending
against attacks.

The main contributions of this paper are as follows:

• In this paper, 30 different performance events regarding
Spectre and Meltdown attacks are collected using hard-
ware performance counters. The feature sets are feature
preferred using random forest and principal component
analysis algorithms, respectively, and the optimal feature
subset of four features is obtained.

• To the best of our knowledge, comparisons are made
with other similar papers. This paper is the ﬁrst uniﬁed
attack detection model implemented for different variants
of Spectre attacks (v1, v2, and v4) and different fusion
attacks, modeled using different machine learning algo-
rithms, and ﬁnally achieving a high accuracy rate of 99%,

indicating that the attack detection model in this paper is
highly generic.

• In contrast to other similar works, this paper is the ﬁrst
to collect independent benign and attack programs as
validation sets for the detection mechanism in addition
to the data in the test and training sets. Furthermore, it
is found that the accuracy of the model in this paper can
still be maintained at about 99% on the validation set,
indicating that the established attack detection model has
strong practicality.

• In addition to providing the detection accuracy and clas-
siﬁcation performance of the attack detection model, this
paper further analyzes speciﬁc associations between the
four selected hardware performance events and attacks.

II. BACKGROUND AND RELATED WORK

A. Spectre And Meltdown

Meltdown attacks exploit the out-of-order execution of the
microprocessor to leak secret information from the user or
kernel space of the same process and other processes. Bypasses
page-level privilege protection mechanisms by executing un-
privileged instructions out of order. Allow even unprivileged
users to read all main memory through the meltdown attack.
The attack is implemented in two steps, the ﬁrst step is to
bypass memory isolation by unordered execution, and the
second step is to obtain secret information by observing access
traces in the cache using a cache-side channel attack. As attack
techniques continue to evolve, multiple implementations of
meltdown attacks have emerged.

Unlike Meltdown attacks, Spectre attacks do not generate
any exceptions or segmentation errors but use branch pre-
diction to bypass the isolation between user-level processes.
Spectre attacks exist in various variants, mainly v1, v2, and v4
[11], and as attack techniques evolve, these have evolved into
several different implementations such as Branchscope[22],
Speculative buffer overﬂows[23], ret2spec[24], Netspectre[12],
and Exspectre [13]. Spectre attacks mainly exploit branch
prediction, making almost all processors vulnerable to branch
prediction. Branch predictors are used to predicting conditional
branch instructions, indirect branch instructions, and return
stack buffers. Different variants of Spectre can exploit all three
types of branch instructions. Thus, variants of Spectre attacks
are still mainly implemented in two steps to achieve the attack.
The ﬁrst step is that the attacker misleads the CPU’s branch
predictor to execute unprivileged instructions speculatively;
the second step is similar to meltdown, which also leaks
unauthorized memory information cache side-channel attack.

B. Hardware Performance Counters

Hardware performance counters have been present in all
microprocessors for over a decade. Hardware performance
counters are a set of dedicated registers built into the CPU
microarchitecture to collect information in the microprocessor,
including cache usage information and instruction ﬂow, and
are primarily used to measure program and system perfor-
mance [25]. Many researchers have used HPC for security

purposes in recent years, such as malware detection, cache
side-channel attack detection. Because hardware performance
counters can collect multiple performance events, different
program characteristics can be found during process execution.
So using this principle can reﬂect the process security status,
and it was found in previous studies that performance counters
introduce very little loss, making it a near-perfect attack
detection tool. The existing hardware performance counter
tools are PAPI, Intel PMU, and Perf, and this paper uses Perf,
a performance counter for Linux systems.

C. Machine Learning Algorithms

In information security, machine learning is applied to
various areas, such as intrusion detection and trafﬁc anomalies.
In this paper, ﬁve different machine learning algorithms:
LDA[14], KNN[15], logistic regression[34], SVM[35], and
Adaboost[36] are selected to construct detection models for
Spectre and Meltdown attacks. Machine learning algorithms
with different algorithmic principles and computational com-
plexity are modeled separately to verify the feasibility of
building attack detection models with information from limited
hardware performance counters. Finally,
the most suitable
algorithm is selected to build the attack detection models in
this paper.

D. Related Work

Because of the attrition associated with some hardware
and software attack defenses and their limitations, more re-
searchers are devoting themselves to studying attack detec-
tion techniques. This section summarizes the recent devel-
opments regarding attack detection for Spectre and Melt-
down attacks and discusses their advantages and disadvan-
tages. In related work in 2018, four different hardware per-
formance events (LLC references, LLC miss, branches, and
branch mispredictions) were collected at a sampling rate of
100ms in paper [16] build an attack detection model against
Spectre V1 and ﬁnally achieved 99.98% accuracy. However,
the sample size used in the paper is small, with a total sample
size of only 2400, and the results are subject to change. In
another paper [17], three hardware events (LLC misses, LLC
accesses, and the total number of instructions) were collected
at a sampling rate of 100ms to build an attack detection model
for both v1 and v2 variants of Spectre. The attack detection
model achieved an accuracy of 99.23%. However, the positive
and negative sample sizes are incredibly unbalanced, and the
total number is negligible and unconvincing (317 positive
samples and 1247 negative samples). In more recent work,
[18] targeted the v1 and v2 variants of the Spectre attack
and the meltdown attack, and the paper collected ﬁve and
four different hardware performance events at a sampling
rate of 100 ms to model attack detection for each of the
three attacks. The main feature in the attack against Spectre
is branching instructions, while the main feature against the
meltdown attack is Total page faults. The absolute accu-
racy of the highest attack detection is obtained as 99.97%
(v1),99.98% (v2),99.97% (meltdown), respectively. Although

excellent classiﬁcation results are achieved, building different
attack detection models for different attacks increases the
performance loss of attack detection and lacks practicality. In
[19], the paper performed attack detection for v1 and v2 of
Spectre by collecting operators and operands, modeled using
the LSTM algorithm, and ﬁnally obtained an accuracy of
97.2%, but the possible false alarm rate is high, which may
reach up to 12%. The paper [20] collects eight different hard-
ware events for v1 and v2 variants of Spectre and eventually
obtains an accuracy of 98.7%. However, many processors can
only provide interfaces to collect four hardware performance
events simultaneously, so it is challenging to apply it to real-
time attack detection. In a recent paper on attack detection for
the meltdown, the attack is detected by analyzing the broken
errors caused by the meltdown attack. Low overhead and high
accuracy attack detection against meltdown were achieved, but
the paper does not verify whether different implementations
against meltdown are still valid [21]. In the work of paper
[33], by analyzing different hardware performance events,
different hardware performance events are collected as feature
sets through 100ms sampling interval to build attack detection
models for Spectre and Meltdown, respectively, and ﬁnally
achieve reasonable accuracy rates. However, the performance
loss brought by the attack detection models established in the
paper is too high, which may reach up to 8%.

Moreover, the different hardware performance events used
to build the models are not conducive to extending them to
real-time attack detection. The attack detection against Spectre
also encountered challenges in the paper [26] when four
hardware performance events (using the same features as in the
paper [16]) were collected using a sampling rate of 100ms to
build an attack detection model, the purpose of evading attack
detection could be achieved by reducing the branch prediction
errors occurring within a unit event. After experiments, it is
found that the accuracy of attack detection can be reduced
to about 70% while achieving a high attack success rate. To
sum up, it shows that similar work in recent years has been
challenging to meet the needs of attack detection, and there is
an urgent need for an anti-evasive attack detection technology
for multiple attacks.

III. MODEL IMPLEMENTATION

This section describes the process of constructing an attack
detection model for Spectre v1, v2, v4, and different imple-
mentations of meltdown attacks in this paper. In this paper,
the hardware performance events obtained from benign and
attack programs are used as the data source for modeling.
The data are randomly divided into two parts according to
the ratio of 8:2. 80% of the data is used as the training set
for building the detection model, and 20% of the data is used
as the test set. A tenfold cross-validation method is used in
the paper to obtain the accuracy of the detection model and
try to avoid the overﬁtting problem brought by the modeling
process. Unlike previous work, this paper adds a validation
set in addition to the training and test sets. The validation set
comprises hardware performance events collected by benign

and attack programs independent of the modeled data sources.
In this paper, the validation set is used to validate the model
to illustrate the usefulness of the established attack detection
model and make the obtained results more objective and
accurate.

The steps of the attack detection model constructed in this

paper are as follows.

• Datd extraction: For various benign and attack processes,
hardware performance events of different processes are
collected at 1ms sampling intervals as data sources.
• Feature selection: For the data collected in the ﬁrst step,
feature preference is performed, unnecessary features are
removed, and the data source is updated.

• Data partitioning: The data source obtained in the ﬁrst
step is randomly divided into two parts of 8:2. 80% of
them are used as the training set and 20% as the test set.
• Model training: The training data is modeled using dif-
ferent machine learning algorithms to obtain the sub-
accuracy of the training set of the detection model.

• Model testing: Repeat step 3 to obtain the optimal pa-
rameters of the model by adjusting the main parameters
of different algorithms. Finally, the data from the test set
are used to test the model built from the training set to
obtain the attack detection accuracy.

• Classiﬁcation results: We use the parameters obtained in
step 5 to model and perform 10-fold cross-validation and
calculate the average accuracy as the absolute accuracy
of the classiﬁcation model.

• Model validation: Hardware performance counter infor-
mation is collected for different benign processes and
different attack implementations to form the validation
set. Moreover, use the validation set to verify the utility
of the attack detection model built above.

Figure 1 shows the overall experimental ﬂowchart of the
attack detection model built in this paper for different Spectre
variant attacks and different Meltdown attack implementations.

IV. EXPERIMENT

A. Experimental Setup

The hardware platform used for the experiments in this
paper is Intel Core I5-7200U, with a processing frequency
of 2.5GHz equipped with a 3Mb cache and 8GB of RAM.
The operating system chosen for the experiments is Ubuntu
16.04. In this paper, the different hardware performance events
are collected in real-time using the function (perf event open)
provided by perf.

B. Data Set

To train a supervised learning model with utility, we created
a dataset consisting of hardware performance counter data for
various benign and attack processes during operation. The data
information is collected for each process rather than for the
overall readings of the entire CPU. The purpose of doing so
is to make attack detection accurate to a single process, which
is more practical than extending it to the whole system. In

Fig. 1. Sample distribution of page fault by different processes

this paper, the attack detection system can determine whether
a process is benign by performing attack prediction on the
speciﬁc process running and notify the suspicious process to
the user or terminate the malicious process directly.

Previous works have given certain features directly and
collected limited information on hardware performance events
to build attack detection models, lacking the process of ob-
jective feature preference, so this paper collects 25 hardware
performance events related to different attacks as the original
set of features. Table 1 shows all the features collected in this
paper.

In their previous work [26], they experimentally found that
building an attack detection model using hardware event data
collected at a sampling rate of 100ms was able to reduce
the attack detection accuracy to 70% and achieve a high
attack success rate at the same time by using different ways
of evasion detection. In this paper, a sampling rate of 1ms
is used to collect different hardware performance events to
avoid attack evasion, and the high sampling rate of hardware
counters may bring too much loss of high performance []. In
this paper, data from the following 12 different scenarios are
collected to generate a large dataset with a balance of positive
and negative samples.

• Stress C: The process repeatedly keeps calculating the

square root of a random number[27].

• Stress M: The process keeps calling the memory allo-
cation function malloc and the memory release function
free[27].

Perf

PERF TYPR HARDWARE

PERF TYPE SOFTWARE

TABLE I
COLLECTION OF ALL HARDWARE PERFORMANCE EVENTS

Event

1.PERF COUNT HW CAC HE REFERENCES
2.PERF COUNT HW CAC HE MISSES
3.PERF COUNT HW CPU CYCLES
4.PERF COUNT HW INSTRUCTIONS
5.PERF COUNT HW BUS CYCLES
6.PERF COUNT HW REF CPU CYCLES
7.PERF COUNT HW BRANCH MISSES
8.PERF COUNT HW CACHE MISSES

9.PERF COUNT SW CPU CLOCK
10.PERF COUNT SW TASK CLOCK
11.PERF COUNT SW PAGE FAULTS
12.PERF COUNT SW CONTEXT SWITCHES

PERF TYPE HW CACHE
13.PERF COUNT HW CACHE L1D READ
14.PERF COUNT HW CACHE L1D WRITE
15.PERF COUNT HW CACHE L1D ACCESS
16.PERF COUNT HW CACHE L1D MISS
17.PERF COUNT HW CACHE L1I MISS
18.PERF COUNT HW CACHE LL READ
19.PERF COUNT HW CACHE LL WRITE
20.PERF COUNT HW CACHE LL ACCESS
21.PERF COUNT HW CACHE LL MISS
22.PERF COUNT HW CACHE DTLB READ
23.PERF COUNT HW CACHE DTLB WRITE
24.PERF COUNT HW CACHE DTLB ACCESS
25.PERF COUNT HW CACHE DTLB MISS
26.PERF COUNT HW CAC HE ITLB ACCESS
27.PERF COUNT HW CAC HE ITLB MISS
28.PERF COUNT HW CACHE BPU READ
29.PERF COUNT HW CACHE BPU ACCESS
30.PERF COUNT HW CACHE BPU MISS

• Stress I: The process calls sync() repeatedly. Sync () is
used to write the contents of memory to the hard disk[27].
• Firefox: Use ﬁrefox to browse the web randomly and

perform random operations such as searching.

• Video: Use a video player to play videos.
• Meltdown: This paper uses the meltdown attack,

in-
cluding meltdown, meltdown nonull, and meltdown fast,
three different ways to implement the attack [28].

• Spectre: This paper uses specter attacks, including spectre

V1(1), V2, and V4, three different attacks [29].

The above dataset constitutes all the data for the training
and testing sets required for the attack detection modeling in
this paper, with an overall sample size of 152156. The amount
of data of Stress C, Stress M, Stress I are 15000, the amount
of data of Firefox and Video are 20000, the amount of data of
v1 is 11024, the amount of data of v2 is 10305, the amount
of data of M is 10664, the amount of data of MF is 10598,
the amount of data of MN is 10564, the amount of data of v4
is 14001.

• Stress: Includes both Stress C and Stress M parts. These
two parts are different from the data collected in the test
set and training set.

• MiBench: Uses various test sets from the MiBench
benchmark collection, including: Basic, Bit, Cjpeg, CRC,
Dijkstra, FFT, Gsm, Patrica, Qsort, Susan, and Type-
set[30].

• Spectre: Unlike the test set and training set data, using
another code implementation of spectre V1(2) attack [2].
This paper incorporates a validation set and a training set,
and a test set, unlike previous work. The utility of the attack
detection model is validated with a separate validation set,
and the different scenarios included in the validation set are
shown above. The total sample size of the validation set is
34838. Furthermore, the labels of all data in this paper are 0
for all benign programs, 1 for Spectre v1, 2 for Spectre v2, 3
for different implementations of meltdown, and 4 for Spectre
v4, respectively.

C. Feature Selection

Since multiple features are acquired, and in the existing
system, only 4-8 sampling interfaces are generally provided,
in order to be able to apply the attack detection system to real-
time monitoring, and considering the performance loss caused
by multi-event sampling, this paper makes the preferential
selection of the acquired features. It selects no more than four
features to build the attack detection model.

In previous similar work, most would assume that Spectre
attacks can be detected by analyzing information about branch
predictors [16 18 20 26 32], and meltdown attacks can be
detected by analyzing information about page fault [18 33].
However,
the case after
analyzing the data obtained in different scenarios.

this paper ﬁnds that

this is not

2000

1500

t
l
u
a
F
_
e
g
a
P

1000

500

0

m

mf

mn

stressC

stressM

firefox

Fig. 2. Sample distribution of page fault by different processes

It is evident from ﬁgure 2 that ﬁrefox and Stress M are the
same as the general meltdown attack; both generate a large
number of page fault. Furthermore, for different attack imple-
mentation methods, the performance of the feature page fault
is also different. Meltdown nonull and Meltdown fast in the
attack implementation process do not generate page table

errors, the same as ordinary benign procedures. So page fault
is not suitable as a feature to discover meltdown attacks.

This paper uses

two features, BPU ACCESS and
BPU MISS, to analyze whether the Spectre attack can be
detected by information related to the branch predictor.

0

500000

1000000

1500000

2000000

2500000

BPU_access

Auccracy =

35000

30000

25000

20000

15000

10000

5000

0

3500

3000

2500

2000

1500

s
s
i
m
_
U
P
B

s
s
i
m
_
U
P
B

1000

500

0

0

50000

100000

150000

200000

BPU_access

Fig. 3. Sample distribution of BPU features collected by different processes

Figure 3 shows the sample distribution of benign and attack
programs for BPU ACCESS and BPU MISS. It is obvious
to ﬁnd that for ﬁrefox and video, which are highly occupied
programs, their distribution is extensive, and there is a signif-
icant overlap with the sample distribution of different Spectre
attacks. So the information about BPU is challenging to
distinguish the difference between benign and attack programs.
In this paper, four of the remaining features were selected as
the feature set using the random forest algorithm for the ﬁnal
selection. Furthermore, the basic idea of random forest ﬁltering
features is to observe how much the accuracy is affected
after modeling with and without features. To make the results
of feature preferences more intuitive, this paper compares
them by numerically parameterizing the difference between the
accuracy before and after adding features and adding features
in a ratio operation. Table 2 shows the inﬂuence size of the
four characteristics with the highest importance.

In summary,

feature
are LL ACCESS, L1D WRITE, DTLB WRITE,
DTLB READ.

sets used in this paper
and

the

 firefox

 video

 stressC

 stressM

 stressI

 v1(1)

 v2

 m

 v4

 v1(2)

 firefox

 video

 stressC

 stressM

 stressI

 v1(1)

 v2

 m

 v4

 v1(2)

TABLE II
THE IMPACT FACTORS OF THE FOUR FEATURES WITH THE HIGHEST
CORRELATIONS

Feature
LL ACCESS
L1D WRITE
DTLB WRITE
DTLB READ

Socre
0.2467
0.2456
0.1053
0.0350

D. Evaluation Metrics

The following describes the four evaluation metrics used in
this paper for the attack detection model. Where TP is the
number of positive classes predicted as positive, FN is the
number of positive classes predicted as negative, FP is the
number of negative classes predicted as positive, and TN is
the number of negative classes predicted as negative.

T P + T N
T P + F P + T N + F N
2
P recision + 1

Recall

1

P recision =

T P
T P + F P

Recall =

T P
T P + F N

F 1 scores =

E. Result

This paper uses four hardware events as the feature set of the
model for attack detection and tries different machine learning
algorithms to build a uniﬁed detection model for different
variants of Spectre and Meltdown attacks. Table 3 shows the
accuracy of attempting to build attack detection models using
different machine learning algorithms.

TABLE III
ACCURACY OBTAINED BY MODELING WITH DIFFERENT MACHINE
LEARNING ALGORITHMS

ML algorithm Accuracy
LDA
LR
KNN
SVM
Adaboost

72.89%
81.90%
63.95%
91.18%
99.88%

From the contents of Table 3, it is found that Adaboost
obtains the best results. Therefore, the Adaboost algorithm
is ﬁnally chosen in this paper to analyze further the other
classiﬁcation performance of the attack detection model. Table
4 shows the ﬁnal obfuscation matrix obtained using the test
set for the attack detection model built based on the Adaboost
algorithm in this paper.

TABLE IV
CONFUSION MATRIX OBTAINED FROM THE TEST SET

Confusion Matrix
Benign
V1
V2
M(M,MF,MN)
V4

Benign
17019
0
0
0
0

V1
2
2243
0
6
1

V2
1
0
2046
0
0

M
3
4
1
6280
5

V4
0
1
0
18
2802

Because the smaller the number of collected hardware
performance events, the less performance loss, this paper tries
to remove the least noteworthy feature among the four features,
DTLB READ, and use three hardware performance events to
build the attack detection model, and ﬁnally, the accuracy of
the model decreases from 99% to 96%. Because the attack
is destructive and has a broad impact, to maintain the high
accuracy of the attack detection, this paper ﬁnally still selects
four hardware performance events as the set of features.

TABLE V
CLASSIFICATION PERFORMANCE OBTAINED BY MODELING THE
ADABOOST ALGORITHM

Classiﬁcation Performance
Precision
Recall
F1 scores

Accuracy
1.00
1.00
1.00

The performance of the attack detection model from Ta-
ble 5 shows that the Adaboost-based attack detection model
proposed in this paper achieves excellent detection results
for different Spectre attack variants and meltdown attacks,
proving that malicious processes in the system can be accu-
rately detected with limited information. In order to further
validate the situation in actual use and simulate whether users
can accurately detect potential attacks during daily use, this
paper validates the attack detection model using different
benign procedures and different attack implementations, and
the different attack implementations are chosen further to test
the robustness of the attack detection model. Table 5 shows the
confusion matrix obtained by using the validation set to verify
the attack detection model, and the accuracy of the attack
detection model in this paper is 99.76% on the validation set.

TABLE VI
CONFUSION MATRIX OBTAINED FROM THE VALIDATION SET

Confusion Matrix
Benign
V1
V2
M(M,MF,MN)
V4

benign
11047
40
0
0
0

V1
12
23709
0
0
0

V2 M V4
0
30
0
0
0
0
0
0
0
0

0
0
0
0
0

Table 6 shows the comparison between the results of this
paper and similar work. It is found that this paper builds a
uniﬁed attack detection model for multiple attacks by using
limited hardware performance events as features and obtains
excellent attack detection accuracy.

The ROC plot in Figure 4 shows the performance of the at-
tack detection model built in this paper based on the Adaboost
algorithm to cope with different variants of Spectre’s attack
and Meltdown attack. The ROC curve shows the rate of actual
positive samples being misclassiﬁed as false-positive samples
in the attack detection model. The value of AUC in the ﬁgure
is the area under different ROC curves, which is usually used
as a criterion to evaluate the model’s performance. Because

ROC curves sometimes do not directly reﬂect the performance
of a model, while AUC as a numerical value allows the
performance to be quantiﬁed and expressed more intuitively.
It is evident in Figure 5 that the attack detection model built
in this paper shows excellent detection performance regardless
of the type of attacks targeted.

Fig. 4. ROC plot of the attack detection model built by Adaboost algorithm

V. CONCLUSION AND DISCUSSION

This paper is the ﬁrst uniﬁed attack detection model built
for multiple attacks in contrast to similar works. In this paper,
we use four hardware performance events as a feature set and
build an attack detection model using Adaboost for multiple
variants of the now mainstream Spectre attack and different
implementations of meltdown attack, and ﬁnally obtain great
classiﬁcation accuracy. The results show that the attack de-
tection mechanism is suitable for discovering the presence of
malicious processes in the system, and the detection system is
validated in this paper using the validation set with excellent
results.

In this paper, to explain the reason for the high accuracy of
the obtained attack detection model, the relationship between
the features in different scenarios is analyzed, and the four
features used for modeling are selected for further study.
Figure 5 shows the sample distribution of the same features
collected for different scenarios.

it can be found that

By analyzing the sample distribution of different scenarios
under the same features,
there are
signiﬁcant differences between benign and attack programs,
which opens up the possibility of attack detection. Moreover,
for the attack process, i.e., between V1, V2, Meltdown, and
V4, there are also relatively apparent differences between the
different features. Previous work often used Page fault as
the main feature to discover meltdown attacks. However, this
paper ﬁnds signiﬁcant differences in page fault features under
different attack implementations, except for the traditional

TABLE VII
COMPARISON WITH THE RESULTS OF SIMILAR WORK.

Paper
Paper[16]

Paper[20]

Paper[19]

Paper[21]

Paper[18]

Paper[17]

Paper[32]

Our Result

Attack Types
Spectre V1
Spectre V1
Spectre V2
Meltdown
Spectre V1
Spectre V2
Meltdown
Spectre V1
Spectre V2
Meltdown
Spectre V1
Spectre V2
Spectre V1
Meltdown
Spectre V1
Spectre V2
Spectre V4
Meltdown
Meltdown Fast
Meltdown Nonull

Accuracy
99.98%

Feature number.
4

Number of samples
2400

98.7%

97.2%

99%
99.80%
99.98%
99.97%

99.23%

99.97%
99.97%

99.88%

8

NA

4

5

4

5

6
5

4

NA

NA

NA

100000

15635

NA

186994

12000

1250000

 25%~75%

 1.5 Range within IQR

10000

 Median line

1000000

8000

6000

S
S
E
C
C
A
_
C
L
L

E
T
I
R
W
_
B
L
T
D

750000

500000

E
T
I
R
W
_
D
1
L

D
A
E
R
_
B
L
T
D

750000

500000

1500000

1250000

1000000

4000

2000

 25%~75%

250000

 1.5 Range within IQR

 Median line

0

0

SC SM SI

Ffox video

v1

v2

m

mf mn

v4

SC SM SI

Ffox video

v1

v2

m

mf mn

v4

LLC ACCESS

L1D W RIT E

1250000

 25%~75%

1000000

 1.5 Range within IQR

 Median line

2250000

2000000

1750000

 25%~75%

 1.5 Range within IQR

 Median line

250000

0

750000

500000

250000

0

SC SM SI

Ffox video

v1

v2

m

mf mn

v4

SC SM SI

Ffox video

v1

v2

m

mf mn

v4

DT LB W RIT E

DT LB READ

Fig. 5. Sample distribution under different scenarios for four features

meltdown attack, which causes a certain number of page
errors, and the recent meltdown fast meltdown nonull attack
implementations, which do not have page errors. However,
under the four features selected in this paper, the performance
of different meltdown attack implementations is similar, and
the distribution is signiﬁcantly different from other scenarios.
Hence, the four features selected in this paper are suitable for
attack detection against different meltdown attack implemen-
tations.

This paper ﬁnally implements an attack detection system
for multiple Spectre and Meltdown attacks based on a set of
four hardware performance events as features with a sampling
interval of 1ms and can discover malicious processes in the
system accurately. In this paper, the attack detection system
also causes only a slight performance loss since it was found
in previous work that the performance loss incurred is shallow
when the sampling interval is above 500us. We hope to load
the whole system into the FPGA, which can further reduce
the loss to the system and also improve the versatility of
the attack detection module. Accurate attack detection can
also be combined with other performance-losing mitigations,
such as lfence operations on potentially malicious processes,
rather than all processes using the branch predictor, which
can save signiﬁcant performance loss. In future work, since
the benign and attack programs in this paper are limited, the
utility of attack detection would be signiﬁcantly enhanced if
an autonomous learning module could be added to the model
to change the data sample set dynamically. For example, when
new samples of benign programs with different feature repre-
sentations emerge or new samples of Spectre and Meltdown
variant attacks emerge, these new samples are added to the
original dataset and re-modeled.

ACKNOWLEDGMENT

The preferred spelling of the word “acknowledgment” in
America is without an “e” after the “g”. Avoid the stilted
expression “one of us (R. B. G.) thanks . . .”. Instead, try
“R. B. G. thanks. . .”. Put sponsor acknowledgments in the
unnumbered footnote on the ﬁrst page.

REFERENCES

[1] Lipp M, Schwarz M, Gruss D, et al. Meltdown: Reading kernel mem-
ory from user space[C]//27th USENIX Security Symposium (USENIX
Security 18). 2018: 973-990.

[2] Kocher P, Horn J, Fogh A, et al. Spectre attacks: Exploiting speculative
execution[C]//2019 IEEE Symposium on Security and Privacy (SP).
IEEE, 2019: 1-19.

[3] Graz University of Technology. Meltdown and Spectre: Vulnerabilities

in modern computers leak passwords and sensitive data[J].

[4] Yarom Y, Falkner K. FLUSH+ RELOAD: A high resolution, low noise,
L3 cache side-channel attack[C]//23rd USENIX Security Symposium
(USENIX Security 14). 2014: 719-732.

[5] Corbet J. KAISER: hiding the kernel from user space[J]. LWN. net,

https://lwn. net/Articles/738975, 2017.

[6] Bennett R, Callahan C, Jones S, et al. How to live in a post-meltdown
and-spectre world[J]. Communications of the ACM, 2018, 61(12): 40-
44.

[7] Wang G, Chattopadhyay S, Gotovchits I, et al. oo7: Low-overhead de-
fense against spectre attacks via program analysis[J]. IEEE Transactions
on Software Engineering, 2019.

[8] Guarnieri M, K?pf B, Morales J F, et al. SPECTECTOR: principled
detection of speculative information ﬂows[C]//2020 IEEE Symposium
on Security and Privacy (SP). IEEE, 2020: 1-19.

[9] Kiriansky V, Lebedev I, Amarasinghe S, et al. DAWG: A defense against
cache timing attacks in speculative execution processors[C]//2018 51st
Annual IEEE/ACM International Symposium on Microarchitecture (MI-
CRO). IEEE, 2018: 974-987.

[10] Yan M, Choi J, Skarlatos D, et al. Invisispec: Making speculative execu-
tion invisible in the cache hierarchy[C]//2018 51st Annual IEEE/ACM
International Symposium on Microarchitecture (MICRO). IEEE, 2018:
428-441.

[11] Speculative

store

bypass

[Online].

Available:

https://nvd.nist.gov/vuln/detail/CVE-2018-3639

[12] Wampler J, Martiny I, Wustrow E. ExSpectre: Hiding Malware in

Speculative Execution[C]//NDSS. 2019.

[13] Schwarz M, Schwarzl M, Lipp M, et al. Netspectre: Read arbitrary mem-
ory over network[C]//European Symposium on Research in Computer
Security. Springer, Cham, 2019: 279-299.

[14] Yu H, Yang J. A direct LDA algorithm for high-dimensional data with
application to face recognition[J]. Pattern recognition, 2001, 34(10):
2067-2070.

[15] Zhang M L, Zhou Z H. ML-KNN: A lazy learning approach to multi-

label learning[J]. Pattern recognition, 2007, 40(7): 2038-2048.

[16] Li C, Gaudiot J L. Online detection of spectre attacks using microarchi-
tectural traces from performance counters[C]//2018 30th International
Symposium on Computer Architecture and High Performance Comput-
ing (SBAC-PAD). IEEE, 2018: 25-28.

[17] Depoix J, Altmeyer P. Detecting spectre attacks by identifying cache
side-channel attacks using machine learning[J]. Advanced Microkernel
Operating Systems, 2018, 75.

[18] Ahmad B A. Real time Detection of Spectre and Meltdown Attacks

Using Machine Learning[J]. arXiv preprint arXiv:2006.01442, 2020.

[19] Zhang Y, Makris Y. Hardware-Based Detection of Spectre Attacks:
A Machine Learning Approach[C]//2020 Asian Hardware Oriented
Security and Trust Symposium (AsianHOST). IEEE, 2020: 1-6.
[20] Islam M S, Kuruvila A P, Basu K, et al. ND-HMDs: Non-Differentiable
Hardware Malware Detectors against Evasive Transient Execution At-
tacks[C]//2020 IEEE 38th International Conference on Computer Design
(ICCD). IEEE, 2020: 537-544.

[21] Akyildiz T A, Guzgeren C B, Yilmaz C, et al. MeltdownDetector: A
runtime approach for detecting meltdown attacks[J]. Future Generation
Computer Systems, 2020, 112: 136-147.

[22] Evtyushkin D, Riley R, Abu-Ghazaleh NCSEECE, et al. Branchscope:
A new side-channel attack on directional branch predictor[J]. ACM
SIGPLAN Notices, 2018, 53(2): 693-707.

[23] Kiriansky V, Waldspurger C. Speculative buffer overﬂows: Attacks and

defenses[J]. arXiv preprint arXiv:1807.03757, 2018.

[24] Maisuradze G, Rossow C. ret2spec: Speculative execution using return
stack buffers[C]//Proceedings of the 2018 ACM SIGSAC Conference on
Computer and Communications Security. 2018: 2109-2122.
monitoring

performance

Available:

[25] Perf

[Online].

tool.

https://perf.wiki.kernel.org/index.php/ Main Page

[26] Li C, Gaudiot J L. Challenges in Detecting an Evasive Spectre[J]. IEEE

Computer Architecture Letters, 2020, 19(1): 18-21.

[27] Amos

Waterland.
https://people.seas.harvard.edu/ apw/stress/

2018.

stress.

(2018).

[28] IAIK. 2018. meltdown. (2018) https://github.com/IAIK/meltdown
[29] v-lavrentikov.

meltdown-spectre.

https://github.com/v-

2020.

lavrentikov/meltdown-spectre

[30] Guthaus M R, Ringenberg J S, Ernst D, et al. MiBench: A free,
commercially representative embedded benchmark suite[C]//Proceedings
of the fourth annual IEEE international workshop on workload charac-
terization. WWC-4 (Cat. No. 01EX538). IEEE, 2001: 3-14.

[31] Li C, Gaudiot J L. Detecting malicious attacks exploiting hardware
vulnerabilities using performance counters[C]//2019 IEEE 43rd Annual
Computer Software and Applications Conference (COMPSAC). IEEE,
2019, 1: 588-597.

[32] Mushtaq M, Bricq J, Bhatti M K, et al. Whisper: A tool for run-
time detection of side-channel attacks[J]. IEEE Access, 2020, 8: 83871-
83900.

[33] Chaudhuri K, Monteleoni C. Privacy-preserving logistic

regres-

sion[C]//NIPS. 2008, 8: 289-296.

[34] Tsang I W, Kwok J T, Cheung P M, et al. Core vector machines: Fast
SVM training on very large data sets[J]. Journal of Machine Learning
Research, 2005, 6(4).

[35] Bartlett P L, Traskin M. Adaboost

is consistent[J]. The Journal of

Machine Learning Research, 2007, 8: 2347-2368.

