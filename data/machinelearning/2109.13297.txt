GANG-MAM: GAN based enGine for Modifying
Android Malware

Renjith Ga, Sonia Laudannab, Aji Sa, Corrado Aaron Visaggiob, Vinod Pc

aDepartment of Computer Science, University of Kerala, Trivandrum, Kerala, India
bDepartment of Engineering, University of Sannio, Italy
cDepartment of Computer Applications, Cochin University of Science and Technology,
Kochi, Kerala, India

Abstract

Malware detectors based on machine learning are vulnerable to adversarial
attacks. Generative Adversarial Networks (GAN) are architectures based
on Neural Networks that could produce successful adversarial samples. The
interest towards this technology is quickly growing. In this paper, we propose
a system that produces a feature vector for making an Android malware
strongly evasive and then modify the malicious program accordingly. Such
a system could have a twofold contribution:
it could be used to generate
datasets to validate systems for detecting GAN based malware and to enlarge
the training and testing dataset for making more robust malware classiﬁers.

Keywords: Generative Adversarial Network, malware, Android malware,
malware detection

Email addresses: renjithg@keralauniversity.ac.in

(Renjith G),
(Sonia Laudanna), aji@keralauniversity.ac.in
(Corrado Aaron Visaggio), vinod.p@cusat.ac.in

(Aji S),
(Vinod P)

slaudanna@unisannio.it
visaggio@unisannio.it

1
2
0
2

p
e
S
7
2

]

R
C
.
s
c
[

1
v
7
9
2
3
1
.
9
0
1
2
:
v
i
X
r
a

Preprint submitted to SoftwareX

September 27, 2021

 
 
 
 
 
 
Required Metadata

Curren t co de version

Nr. Co de metadata description
C1
C2

Current code version
Permanent link to code/repository
used for this code version
Legal Code License
Code versioning system used
Software code language used
Compilation requirements

C3
C4
C5
C6

C7

C8

If available Link to developer docu-
mentation/manual
Support email for questions

Please ﬁll in this column
Version 1.0
https://github.com/papersubKS

GPLv2
git
Python 3.6+
Compiled and tested in Ubuntu
18.04 LTS, Tensorﬂow 2.4.1, Keras
2.4.3, Scikit-learn 0.23.1, Matplotlib
3.2.2, Apktool 2.5.0, QEMU 2.11.1,
Android Emulator 30.7.5.0, Android
SDK Tools 26.1.1, Android SDK
Platform-Tools 29.0.5, AAPT 0.2-
27.0.1, Java 1.8
https://github.com/papersubKS

papersubKS@gmail.com

Table 1: Code metadata (mandatory)

1. Motiv ation and signiﬁcance

Generative Adversarial Networks (GAN) [1] were introduced to produce
adversarial samples that are able to lead machine learning based classiﬁers
to the wrong decision. The main concept behind a GAN is that two in-
dependent Neural Networks, the Generator and the Discriminator, through
a competition, create fake samples that are classiﬁed as real samples by a
classiﬁer. The Generator creates the fake candidate samples, while the dis-
criminator makes a judgement on the fake samples and the real data. On
the basis of this judgement, the Generator generates fake data that are more
similar to the real ones. After an iterative process, the Generator is able to
create fake data indistinguishable from the real data. Recent studies focused
on the production of adversarial examples with GAN that deceive malware
classiﬁers into recognizing malicious ﬁles as legitimate. MalGAN [2] is a
pioneer work on black-box adversarial-example attacks toward Android mal-
ware detection. It used a GAN to generate adversarial examples to bypass

2

black-box detectors. Subsequent studies investigated how the GAN can be
used to realize eﬀective adversarial samples. E-MalGAN [3] is an evasive
adversarial-example attack that misleads in-cloud ﬁrewall-equipped Android
malware detection systems without requiring any information about the tar-
get. GAN was also used to create adversarial samples of Windows malware
[4], while in [5] authors used deep Convolution GAN for allowing training
with a few data. In [6] a deep learning GAN can create images that appear
to be malware samples visualized as an image. Authors in [7] do the same
thing but using auxiliary classiﬁer GANs. In this paper, we will introduce a
system which allows to modify an existing malware on the basis of a GAN
output. The GAN determines which are the most suitable feature vectors
for the malware, and then the system modiﬁes the malware accordingly.

GAN generated malware can be used in malware research in two main
ways. The ﬁrst one is to improve the eﬀectiveness of malware detectors
by enlarging the training dataset. The second one is to develop methods
that can recognize malware produced by GAN, which is indistinguishable
from benign samples by classiﬁers. Considered the increasing interest of
the malware analysis community in GAN generated malware, the software
that we propose can support researchers to easily build datasets for their
experiments.

The main novelty of our system is that it can modify existing Android
malware, maintaining its operational integrity. We will make available our
software to scientiﬁc research in the public repository1.

2. Soft ware description

We present an automated tool aiming at making existing malware strongly
evasive, namely GAN Generated malware for Modifying Android Malware
(GANG-MAM), based on a GAN engine. The tool consists of two parts: the
GANG that produces an evasive features vector and the MAM that accord-
ingly modiﬁes the existing malware, preserving its malicious behaviour.
For a given malware m, whose the corresponding feature vector is Vm, the
GANG produces a new feature vector V0
m’, that will let the malicious pro-
gram be recognized as benign by a malware classiﬁer. Of course, the malware
m must properly change in order to show the new features vector. This task
is accomplished by the MAM engine, which transforms the malware m in m0
by updating the corresponding features. The block diagram of the tool is
shown in Figure 1.

1https://github.com/papersubKS

3

Figure 1: The high-level Architecture of GANG-MAM

Therefore, the challenge is that the modiﬁcation of the feature must not
compromise malware’s original functions, and the perturbation to the fea-
ture space can be practically implemented in the Android PacKage (APK),
meaning that the modiﬁcation can be realized in the program code of an
unpacked malware and can also be repacked/rebuilt into the original mali-
cious APK. The MAM modiﬁer works on the input APK ﬁle based on an
input CSV ﬁle that contains the features the existing APK, generated by the
GANG, must show. Once the modiﬁcations are made, the tool repackages
the APK, signs it and generates the output APK. The underlying features
of the APK can be easily modiﬁed without accessing its original Java/Kotlin
source code. MAM is designed to handle any number of input APKs with
the capability to modify diﬀerent types of features in each APK. The tool en-
sures a hassle-free process to specify the features to be modiﬁed via an input
feature deﬁnition CSV ﬁle. Additionally, the tool can also insert smali equiv-
alents of the newly added activities, services, broadcast receivers and content
providers. Re-engineering the contents of an APK is made easier as the tool
automates all the repetitive processes like APK assembling/disassembling,
feature modiﬁcation, building, signing, and testing. Table 2 shows an exam-
ple of the captured features.

4

Feature

Permission

Intents Action

Service

Intents Category

Value
permission.ACCESS NETWORK STATE
permission.ACCESS WIFI STATE
permission.READ PHONE STATE
permission.INTERNET
action.FTPSERVER STOPPED
action.DOCUMENTS PROVIDER
action.FTPSERVER STARTED
action.UPGRADE ALL
TapContextService
QuickAccessibilityService
PluginPitService
Push BroadCast Service
category.MULTIWINDOW LAUNCHER
category.DEFAULT
category.BROWSABLE
category.LEANBACK LAUNCHER

Table 2: Example of Static Features

2.1. Software Architecture

The detailed software architecture of GANG-MAM is presented in Fig-
ure 2. GANG-MAM accepts any number of Android APKs and generates
modiﬁed Android APKs as output. GANG-MAM has mainly four functions
such as feature extraction, GANG engine, MAM engine and validation.

2.1.1. Feature Extraction

The feature extraction phase includes dissembling of the input Android
APKs and extraction of feature vectors from it. The features considered are
permissions, activities, services, receivers, providers, actions and categories,
as shown in Table 2. Apktool is used to dismantle each input APKs selected.
The actual feature extraction is done on the dismantled APKs. The feature
vectors are represented in a CSV format. Each APKs is selected, and a
hash is computed. The column entries in the CSV ﬁle are the SHA256
hash value for the APKs and all the static features in the APK. In each
row, corresponding to each hash value, the feature deﬁnitions are presented.
Each attribute corresponding to APKs is represented as 1’s and 0’s, where 1
denotes the presence of an attribute, conversely 0 signify the absence of the
feature. While creating new a variant, if elements of the App feature vector
are 1, the corresponding feature is added; the addition of extraneous features
while retaining the older ones preserves the functionality of an application.

5

Figure 2: Detailed Architecture of GANG-MAM

2.1.2. GANG Engine

GANG engine accepts the input feature vector and generates the modiﬁed
feature vector. A pretrained GAN model is used to generate the modiﬁed
feature vector.

2.1.3. MAM Engine

MAM engine accepts the modiﬁed feature vector CSV ﬁle with the up-
dated feature details for each APK. MAM will manage any number of fea-
tures for all the input APKs. MAM also processes the input intermediate
smali ﬁles, which facilitate the tool to insert smali equivalents of the newly
added static features like activities, services, broadcast receivers and content
providers. The inputs are validated before they are used for further process-
ing. MAM selects each input APKs and calculates its hash. The modiﬁed
feature vector CSV ﬁle is parsed to ﬁnd the corresponding entry of the APK
in the CSV ﬁle.

Apktool is used to disassemble and reassemble Android applications. This
contains the internals of the APK ﬁle such as manifest ﬁle, assets, resources,
intermediate smali ﬁles. The features that must be modiﬁed for this APK
are read from memory and applied to the disassembled APK contents in
their corresponding locations. The tool will insert intermediate smali ﬁles
corresponding to those static features that require run time modiﬁcations
such as activities, services, broadcast receivers and content providers. Once
all the features have been modiﬁed as per the feature modiﬁcation CSV ﬁle,
Apktool is used to repackage the modiﬁed contents such as assets, manifests,
resources, smali ﬁles and then generates the output APKs and then signs it.

6

MAM engine can work independently from the GANG engine as well. The
input APKs and the corresponding feature vectors to be applied to the APKs
should be provided.

2.1.4. Validation

The output APKs are validated using the Android emulator environ-
ment. Each of the input APKs is installed, launched, executed using monkey
2, uninstalled and cleaned up. In the same way, each of the output modi-
ﬁed APKs are installed, launched, executed using monkey, uninstalled and
cleaned up. Both the execution logs are stored and compared for any diﬀer-
ence in the functional execution ﬂow. This ensures that the modiﬁed APKs
are functional and behave like input APKs.

The entire GANG-MAM process is fully automatic and repeated till all
the input APKs are processed and output APKs are generated and validated.

2.1.5. Implementation

GANG-MAM is fully developed using python 3.6+. Apktool 2.5.0 [8] is
used to assemble and disassemble the Android APKs. The GANG engine is
developed using Tensorﬂow 2.4.1 [9], Keras 2.4.3 [10] and Scikit-learn 0.23.1
[11]. The Android APK signed using two command-line utilities keytool and
jarsigner [12]. The experimental evaluation is conducted on MSI GF63 (Intel
Core i7 processor, 9th generation, 16GB memory, NVIDIA GeForce GTX
1650 With Max-Q design, 4GB GDDR6) laptop. The operating system used
is Ubuntu 18.04 with virtualisation support. The input and modiﬁed APKs
are tested and validated using the latest Android 12.0 emulator, and monkey
[13] environment.

2.1.6. Stability Results

The GANG-MAM tool generates the modiﬁed android applications from
the input malware applications according to the deﬁned feature vector changes.
The feature vector changes can be done using the GANG engine, or we can
feed it externally. We have used Androzoo [14] malware repository and down-
loaded 500 Android applications (Eg: malware) for our stability testing. The
tool could successfully generate an input feature vector for these 500 Android
applications. GANG engine could modify the feature vectors for these 500
Android applications. MAM engine successfully created 500 modiﬁed An-
droid applications at the output. During our validation step, it was observed
that almost 492 Android applications ensure operational integrity and were
successfully tested in the Android emulator environment with monkey. We

2https://developer.android.com/studio/test/monkey

7

#
1
2
3
4
5
6
7
8
9
10

APK names
puzzles.legogames9.legobatman9.apk
com.tianer.cloudcharge.apk
com.thevotinggame.thevotinggame.apk
com.cocoa.cocoa 17875 5715f29.apk
com.landlordvision.mobile.apk
tools.app.volume.super.loud.apk
com.robotobia.hdstockwallpapers.apk
com.appybuilder.asker88kudus.M0.apk
com.stmvideo.webtv.radiorevivert.apk
ru.indieproductions.survivalguidef.apk

Before After Diﬀ
1
1
1
3
1
1
2
1
2
2

139
141
35
34
141
153
140
140
141
139

139
141
35
35
141
153
139
140
140
141

Table 3: APK operational integrity (before and after modiﬁcation)

have traced the reason for the failure of 8 Android applications and found
that these applications require login credentials to run in the Android em-
ulator environment. Table 3 represents the execution details of 10 Android
APKs. The execution logs of the Android APK before and after modiﬁcation
are stored in two separate ﬁles. The Android APK is installed and launched
using ‘adb’ utility. The installed APK is executed in the Android emula-
tor environment. Android ‘monkey’ is used to inject the events (with the
same seed) and control the application during runtime. The execution logs
of original and modiﬁed applications are compared using Linux ’diﬀ’ utility
to compute the diﬀerence in the log ﬁles.

The diﬀerences in 1 to 3 lines are observed while comparing the execution
logs. We manually investigated those lines and found that the diﬀerences are
either related to timestamp information or dynamic input data.
In both
cases, the operational and functional ﬂow for the Android APK before and
after modiﬁcation is the same.

2.2. Software Functionalities & Usage

The major highlights of this tool are: this is the ﬁrst tool that gener-
ates adversarial Android malware samples; this tool supports end to end
automation; this tool has the ability to handle any number of APKs; Also, it
supports features to be modiﬁed via a separate CSV ﬁle that means, modiﬁ-
cation engine (MAM) can also work independently from the GANG engine;
this tool has the ability to handle an unlimited number of static features; be-
sides our tool is independent of the underlying Java/Kotlin source code; easy
to integrate the smali for the necessary features; this tool can be extended
to automatically modify dynamic features in the APKs.

The command-line options and usage are detailed below:

8

$ ./run .sh -h

-e Name of the emulator
-c Clean all output folder contents created earlier
-n Path of the feature vector ﬁle to run in No GANG mode
-v Print current tool version
-h help message

The emulator to be used for testing the modiﬁed APKS can be passed
to the tool using the ‘e’ ﬂag. The tool checks for the name of the emulator
in the available emulator list, and if found, will use it for testing the APKS.
For example:

$ ./run .sh -e Nexus_4a

To run this tool without feature vector generation (GANG), use the ‘-n’
option. The feature vector to be used should be passed as an argument with
this option.

$ ./run .sh -n /home/user/feature_vector.csv

2.3. Sample code snippets analysis (optional)
3. Illus trativ e Examples

A video is available in the Git repository of GANG-MAM project.

4. Impact

The proposed software can support the research about GAN produced
malware in two directions. The ﬁrst one is that it can help to enlarge the
experimental dataset with adversarial samples. One of the problems of mal-
ware analysis research is to collect many instances which must be enough
recent properly validated and labelled. This brings about that researchers
can not often have a dataset huge enough for obtaining strong evidence from
their experiments. The second one is to support the study of methods for
contrasting GAN produced malware. GAN is a tool that can be used to
produce very evasive malware. Currently, the body of knowledge is missing
of methods that can successfully tackle GAN produced malware, while it is
an imminent threat.

9

5. Conclusions

We realized GANG-MAM, a tool for modifying existing Android malware
with GAN produced features vectors. Due to the large diﬀusion of classiﬁers
for detecting and analysing malware, many researchers are investigating ad-
versarial attacks and how to protect from them. Since GAN represents an
eﬀective method for generating strongly evasive malware, we expect that the
tool we propose will be largely used by both research but also industry com-
munity. The tool can have a two-fold application: testing the robustness
and eﬀectiveness of existing malware classiﬁers, by ﬁnding blind spots in the
decision models of classiﬁers or by enlarging the training data-sets; providing
data-sets for testing new methods aiming at recognizing malware produced
with GANs.

References

[1] I. Goodfellow, J. Pouget-Abadie, M. Mirza, B. Xu, D. Warde-Farley,
S. Ozair, A. Courville, Y. Bengio, Generative adversarial nets, Advances
in neural information processing systems 27 (2014).

[2] W. Hu, Y. Tan, Generating adversarial malware examples for black-box

attacks based on gan, arXiv preprint arXiv:1702.05983 (2017).

[3] H. Li, S. Zhou, W. Yuan, J. Li, H. Leung, Adversarial-example attacks
toward android malware detection system, IEEE Systems Journal 14 (1)
(2019) 653–656.

[4] Z. Moti, S. Hashemi, H. Karimipour, A. Dehghantanha, A. N. Jahromi,
L. Abdi, F. Alavi, Generative adversarial network to detect unseen
internet of things malware, Ad Hoc Networks 122 (2021) 102591.
doi:https://doi.org/10.1016/j.adhoc.2021.102591.
URL
S1570870521001281

https://www.sciencedirect.com/sci

ence/article/pii/

[5] J.-Y. Kim, S.-J. Bu, S.-B. Cho, Malware detection using deep transferred
generative adversarial networks, in: International Conference on Neural
Information Processing, Springer, 2017, pp. 556–564.

[6] Y. Lu, J. Li, Generative adversarial network for improving deep learning
based malware classiﬁcation, in: 2019 Winter Simulation Conference
(WSC), IEEE, 2019, pp. 584–593.

[7] R. Nagaraju, M. Stamp, Auxiliary-classiﬁer gan for malware analysis,

arXiv preprint arXiv:2107.01620 (2021).

10

[8] Android
install

apktool,

https://ibotpeaches.github.io

/Apktool/

, [Accessed Sep 14, 2021].

[9] Tensorﬂow, https://www.tensorﬂow.org/ins

tall

, [Accessed Sep 14,

2021].

[10] Keras, https://keras.io

, [Accessed Sep 14, 2021].

[11] Scikit-learn, https://scikit-
cessed Sep 14, 2021].

learn.org/stable/install.html

, [Ac-

[12] Android keytool & jarsigner, https://www.tutorialspoint.com/

unix_commands/keytool.htm, [Accessed Sep 14, 2021].

[13] Android monkey, https://developer.android.com/

studio/test/

monkey.html, [Accessed Sep 14, 2021].

[14] K. Allix, T. F. Bissyand´e, J. Klein, Y. Le Traon, Androzoo: Collect-
ing millions of android apps for the research community, in: Proceed-
ings of the 13th International Conference on Mining Software Repos-
itories, MSR ’16, ACM, New York, NY, USA, 2016, pp. 468–471.
doi:10.1145/2901739.2903508.
URL http://doi.acm.org/10.1145/290

1739.2903508

11

