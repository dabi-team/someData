AI-CARGO: A Data-Driven Air-Cargo Revenue Management
System

Stefano Giovanni Rizzo, Ji Lucas, Zoi Kaoudi, Jorge-Arnulfo Quiane-Ruiz, Sanjay Chawla
Qatar Computing Research Institute (QCRI)
Doha, Qatar
{strizzo,jlucas,zkaoudi,jquianeruiz,schawla}@hbku.edu.qa

9
1
0
2

y
a
M
2
2

]
I

A
.
s
c
[

1
v
0
3
1
9
0
.
5
0
9
1
:
v
i
X
r
a

ABSTRACT
We propose AI-CARGO, a revenue management system for air-
cargo that combines machine learning prediction with decision-
making using mathematical optimization methods. AI-CARGO ad-
dresses a problem that is unique to the air-cargo business, namely
the wide discrepancy between the quantity (weight or volume) that
a shipper will book and the actual received amount at departure
time by the airline. The discrepancy results in sub-optimal and
inefficient behavior by both the shipper and the airline resulting
in overall loss of potential revenue for the airline. AI-CARGO also
includes a data cleaning component to deal with the heterogeneous
forms in which booking data is transmitted to the airline cargo
system. AI-CARGO is deployed in the production environment of a
large commercial airline company. We have validated the benefits
of AI-CARGO using real and synthetic datasets. Especially, we have
carried out simulations using dynamic programming techniques
to elicit the impact on offloading costs and revenue generation of
our proposed system. Our results suggest that combining predic-
tion within a decision-making framework can help dramatically to
reduce offloading costs and optimize revenue generation.

1 INTRODUCTION
The revenue of commercial airlines is primarily derived from sales
of passenger tickets and cargo (freight) shipments. While most mod-
ern airlines have implemented sophisticated data-driven passenger
revenue management systems, for cargo the situation is different.
The air-cargo ecosystem is complex and involves several players
including shippers, freight forwarders, airline- and end-customers.
Overall, there are five fundamental differences between passenger
and cargo revenue management [16][4][1]:

(1) In the case of passenger revenue, the unit of sale is an airline
seat, which is static. However, in the case of cargo, there is sub-
stantial variability in both volume and weight of cargo shipments.
Furthermore, the revenue from a cargo shipment often depends on
the nature of the cargo. For example, perishable and non-perishable
shipments generate different marginal revenues. This makes the
unit of sale in cargo highly dynamic.
(2) A large chunk of air cargo capacity is pre-booked by freight
forwarders who tend to overbook and release capacity closer to the
date of departure. The ecosystem of air-cargo management is such
that there is no penalty for overbooking. Additionally, some portion
of cargo space is also reserved for mail and passenger baggage. Thus,
the effective capacity available for cargo is called the “free sale”,
which can vary up to departure day.
(3) For cargo shipments what matters is the source and destination.
How the cargo is routed from source to destination is less of a

Figure 1: The x-axis is booked volume (bkvol). The y-axis
is received vol (rcsvol). For confidentiality reason, the axis
range is obfuscated.

concern as long as it reaches on time. Rerouting though has ancillary
cost as the shipment has to be stored in a warehouse.
(4) A unique aspect of the air-cargo ecosystem is that there is often
a substantial discrepancy between the space booked by a shipping
agent (in terms of volume and weight) for a particular item and
the actual quantity that arrives on or just before the departure
day. Furthermore, it is a convention in the business that airlines
will not charge for the discrepancy, which makes it very difficult
for airlines to manage their perishable capacity. This creates an
inefficiency in the market where agents tend to book excess capacity.
Therefore, airlines tend to overbook flights under the assumption
that the quantity that will arrive will be less than what was booked.
Overbooking often leads to offloading, which has cost in terms of
storage and rerouting.
(5) It is well known that cargo capacity is often volume-constrained,
i.e., the aircraft will reach volume capacity before it reaches weight
capacity. However, this makes things even harder because the vol-
ume measurements are less accurate than the weight ones. Figure 1
illustrates this fact.

Due to these major differences, air-cargo business requires not
only to accurately predict the quantity (weight and volume) of an
item that will be tendered but also to make decisions on whether
to accept or reject a booking for a certain flight. This will enable
the airline to greatly increase the efficiency of capacity utilization.
However, prediction and decision-making in an air-cargo setting
is non-trivial because of three main reasons. First, the quality of
cargo booking data varies a lot. Shippers often send information
using text messages, emails, spreadsheets, voice calls, or even inter-
mediate their bookings through freight forwarders. Second, there

bkvol[Booked volume]rcsvol[Received volume] 
 
 
 
 
 
are no good features for predicting the final quantity that will be
received. Employees working in the cargo revenue teams use their
intuition to decide whether to accept a shipment for a flight or
to reroute through another flight. Third, offloading and rerouting
cargo incur high costs in terms of storage and rerouting, which
somehow constraints the decision-making.

We present the AI-CARGO system that deals with the above
challenges. Although the use of formal decision-making is well es-
tablished in the revenue management community [7], AI-CARGO
is the first work that puts all pieces together to provide a complete
pipeline for the air-cargo revenue management problem: given an
incoming booking it (i) identifies if there might exist a substantial
difference between the booked volume and the one that might be
tendered, (ii) predicts the volume that will be tendered, and (iii) con-
siders such a volume prediction to make an acceptance/rejection
suggestion. AI-CARGO is currently deployed in production in a
large airline company1. In particular, after surveying related work
in Section 2, we make the following contributions in Section 3:

(1) We introduce a unique data cleaning module using the concept
of disguised missing values (DMVs). The detection of DMVs signifi-
cantly improves the overall quality of the prediction. (Section 3.1)
(2) We propose to use Gradient Boosting Machines (GBMs) to build
a volume prediction model that reduces the bias and the variance
at the flight level. Our model takes into account whether a booking
might contain a DMV or not to increase the quality of the prediction.
(Section 3.2)
(3) We model air-cargo revenue management as a prediction-driven
sequential and stochastic optimization problem, where the state
(total volume) is realized at departure time. This model tightly inte-
grates the above prediction model in order to make more reliable
decisions. (Section 3.3)
(4) We evaluate the AI-CARGO using both synthetic and real
data taken from the airline company. We demonstrate that our
prediction-based decision-making technique helps the airline com-
pany to increase the total revenue and decrease the offloading cost.
(Section 4)

We conclude this paper with a discussion, some lessons learned

from the project, and future work in Section 5.

2 RELATED WORK
To the best of our knowledge AI-CARGO is the first known cargo
revenue management system which combines machine learning
and mathematical optimization. We overview related work in these
subareas.

The discipline of Revenue Management (RM) is an advanced and
well developed topic within the Operations Research (OR) commu-
nity. It has roots in the airline industry and has now expanded in
other areas, including hotels and tourism [7]. The initial focus in
the airline industry was primarily on passenger RM, in particular
how to price passenger seats in order to maximize revenue [14]. A
strand of relevant work that has appeared in the data mining litera-
ture is the problem of determining overbooking rate, forecasting
the number of no-shows per flight, i.e., the percentage of bookings

1We omit the company name for confidentiality reasons.

2

that were made but did not show up by departure time [10, 13]. No-
shows are a common problem in air-cargo too and several works
have proposed solutions [12, 17].

While RM for passenger seats is now a well developed area, the
same is not true for cargo management. The first research overview
of issues surrounding air cargo revenue management were intro-
duced in [11]. Since then the research literature has seen a steady
growth with works including [5, 16]. Our work closely follows the
decision making paradigm introduced by [1] for modeling both
volume and weight aspects of bookings in air-cargo RM. Our in-
novation is that we integrate machine learning prediction into the
decision making process.

Decision making with machine learning can also fall under the
umbrella of reinforcement learning (RL) [22]. However, much of
the focus in RL is on model-free approaches and on using function
approximation for overcoming the curse of dimensionality phenom-
enon that is ubiquitous in sequential learning paradigms [3, 18, 22].
The air cargo data that airlines collect is replete with errors
because of the nature of the business. Shippers coordinate with
freight forwarders and airlines using various means including email,
phone calls, SMS and this increases the possibility of data errors.
Data cleaning, data curation and preparation is a very developed
area within the database community [8, 20] and there is tremendous
potential to put these techniques into practice in the air cargo
industry. In order to integrate fine-grained predictive modeling
we had to resort to various data cleaning approaches. A particular
data quality problem we dealt with is Disguised Missing Values
(DMVs) [9, 15, 19], where users instead of providing a NaN for
unknown values use arbitrary yet valid data values. The difference
in our case is that DMVs are contextualized and conditioned, i.e.,
we only want to measure the impact of DMVs on the prediction of
the final received volume.

3 PROPOSED SYSTEM: AI-CARGO
AI-CARGO has three components as shown in Figure 2: the (i) Dis-
guised Missing Value (DMV) Detector, (ii) Cargo Predictor, and
(iii) Decision-Maker. Given an incoming booking, the DMV Detec-
tor checks whether the booking has a DMV or not by consulting
a directory of possible DMVs. Then, the Cargo Predictor gets as
input the booking from the DMV Detector (i.e., the booking with
a DMV indicator), extracts the relevant features from the booking
(including the DMV indicator), and predicts the volume expected
to be tendered by the customer. At the end of the pipeline, the
Decision-Maker gets the incoming booking with the predicted vol-
ume that will be tendered and takes a decision whether to accept or
not the booking via a stochastic dynamic program. We detail each
of these steps in the following three sections.

3.1 Detecting DMVs
The unique nature of the entire air-cargo ecosystem results in
several practices that make bookings’ values, e.g., booked volume
(bkvol), not very reliable. For instance, customers send booking
information via SMSs, emails, text files, or even phone calls, which
also causes a natural lag between the time a customer creates the
booking and the time the booking is actually reflected in the central
cargo system.

Figure 2: The AI-CARGO system consists of three modules: (i) a disguised missing value detector, a prediction component to
estimate rcsvol and a decision-making rule to decide which bookings to accept in order to maximize expected revenue.

An important observation we made is that customers often send
arbitrary but fixed values as proxies for NaN. That is, when a cus-
tomer first books an item the exact volume (or weight) that will
be delivered is often not known. However, instead of setting bkvol
to NaN, customers will often choose a fixed but arbitrary number,
which will have no bearing on the received volume rcsvol. In the
data cleaning literature, these proxy values are often called Dis-
guised Missing Values (DMVs) [15, 19]. For example, consider a set
of six bookings whose bkvol was 10.23 and rcsvol were all different:
5.1, 2.8, 13.3, 26.4, 26.4, and 2.8. Unless other features can explain
the diverse range of values taken by rcsvol, 10.23 is very likely to
be a DMV.

Detection of DMVs is important as they can have a substantial
impact on the prediction model. To see how a DMV can effect
prediction, consider the case of a linear regression model in a single
dimension. Suppose a linear model y = wx is learnt from examples
(xi , yi )n

i=1. Then, it is well known that

xiyi

w =

n
(cid:205)
i=1
n
(cid:205)
i=1
Now suppose xdmv and a associated set of values {y1, y2, . . . , ym }
are added to the training set. Let wnew be the new updated param-
eter, which will be:

x 2
i

wnew =

n
(cid:205)
i=1

xiyi + xdmv

m
(cid:205)
j=1

yj

n
(cid:205)
i=1

x 2
i

+ mx 2

dmv

w +

yj

m
(cid:205)
j=1

x 2
i

xdmv

n
(cid:205)
i =1

1 + mx 2
dmv
x 2
i

n
(cid:205)
i =1

=

Depending upon the value of (cid:205)m
i yj , the model might or might not
be impacted by xdmv . For instance, if (cid:205)m
j=1 yj = mwxdmv , then
substituting in the above equation shows that wnew = w and the
DMV has no impact on the model. However, if 1
i= yj deviates
m
significantly from the straight line y = wx, the impact of xdmv can
clearly be large.

(cid:205)

We thus use the mean distance and entropy information to com-
pute two features for each bkvol in order to detect DMVs. For each
distinct bkvol, denoted as ui , let Vi = {vi,1, . . . , vi,ni } be the set of
rcsvols that appear in the data. Then, we define д1 to quantify how
much the average of rcsvols deviates from the associated bkvol.
Formally,

(cid:32)

д1(ui ) =

1
ni

(cid:33)2

ni(cid:213)

vi,k − ui

k =1
Then we redefine a second feature д2 to capture the entropy of the
set Vi . The higher the entropy the more likely that ui is a DMV. We
normalize the entropy score in order to upperbound it at one. If Vi
consists of K distinct elements, then let Vi,k be the the k-th bucket
of Vi and define pk

. We thus define д2 as

= |Vi,k |
|Vi |

−

K
(cid:205)
k =1

pk log pk

log ni

д2(ui ) =

When д1 and д2 are above some threshold it means that the bkvol
is a DMV. Using features д1 and д2, we offline create the DMVs di-
rectory illustrated in the left-bottom part of Figure 2. In more detail,
from our historical booking data, we map every frequent2 distinct
value into a two-dimensional feature space and visually browse the
space to set a cutoff threshold. We then denote every bkvol value
that crosses the threshold as DMV and put it into a DMVs directory.
Figure 3 shows an example of the two-dimensional DMV space,
where the x-axis is д1 and the y-axis is д2, and highlights several
known examples of DMVs, confirmed by domain experts. Our goal
is to let the algorithm learn that if a booking contains a bkvol that

2We used a threshold of 0.01%.

3

Disguised Missing Value DetectorCargo PredictorDecision-MakerHistorical Booking DataDMVs Directoryentropy > Temean_distance > TdisDMV( )true/falseML Modeltrain( )predicted volumebookingaccept or  rejectBooking SourcesONLINEOFFLINEDecision TablegetVFval ( )build( )VF valueRevenue and Volume Statisticsbkibki[ ]bki, dmvbki, pred. vol.compute( )• Number of pieces (PIECES): A shipment may consist of
a number of equal units. Diagonal lines in Figure 4 suggest
that bookings frequently differ from the tendered shipments
in the number of pieces rather than in their volume. Thus,
knowing the number of pieces is useful in predicting possible
outcomes at receiving time. For example, if two pieces where
booked for a bkvol of 12m3, with volume for each piece of
6m3, it is unlikely that a single piece will be split and the
rcsvol will become 4m3. It is in fact much more likely that it
may become 6m3, 18m3, or 24m3.

• Booked volume (BKVOL): We observed that, despite of
DMVs, the booked volume, bkvol, is still an important feature
for predicting rcsvol. This is because when bkvol is not a
DMV, it tends to be precise.

• Shipment code (SHC): This is a set of codes to instruct how
the shipment must be handled, e.g., live animals or perish-
ables. This feature ended up being important as it specifies
over (or complements the) the product type explained here
below. We encode the shipment code feature as a binary
vector with one element for each shipment code (one-hot
encoding).

• Product type (PRODUCT): We observed that the patterns
in rcsvol vary with different product type. In theory product
type should be a highly informative feature, but we observed
that the distribution of product types is skewed.

• DMV Flag (DMV): Because DMVs are frequent and must
be dealt within a production environment, we decided not
to remove DMV data from the training set. At the same time,
giving their negative impact in the prediction, it is important
to know if a booking has a DMV for bkvol. For this reason,
we provide a flag, which is obtained by the DMV Detector
based on historical data.

• Destination (DEST): We also consider the destination as
a feature, even if the destination alone is a weak predictor
for rcsvol. This is because in conjunction with product type
it becomes possible to elicit subtypes within products and
thus reduce the variance.

• Origin (ORIG): The origin airport of the shipment. This
feature allows capturing the average behavior of booking
agents from each location.

We also experimented with using both random forests (RFs) and
gradient boosting machines (GBMs) [6] for building the model.
GBMs are ensemble methods and are known to perform well “out
of the box”. They can also easily handle a mixture of datatypes
including numeric and categorical data. Recall that for a predic-
tion problem the error can be decomposed into a sum of bias and
variance [23]. On the one hand, RFs reduce the error by reduc-
ing variance as they combine independently generated deep trees
on bootstrapped samples. GBMs, on the other hand, reduce the
bias by building shallow trees in a sequential manner, where each
subsequent tree is trained by using the dependent variable as the
residuals of the previous one. In our case, even though we trained
the model to make predictions at the booking level, we were pri-
marily interested in making flight level predictions, which are an
aggregation of booking level predictions. Therefore, while GBM
predictions fluctuate more and individual predictions are further

Figure 3: DMVs identified by the DMV score method

is likely to be a DMV, the, it should deemphasizes the bkvol in the
prediction of rcsvol. This approach also makes it easier to handle
DMVs in a production environment.

3.2 Predicting Cargo Volume
Given an incoming booking with its DMV flag, AI-CARGO pro-
ceeds to predict rcsvol (i.e., the received volume by departure time)
for the given booking, as shown in Figure 2. To do so we need
to offline build a model using historical data as illustrated in the
middle-bottom of Figure 2. We thus need to (i) decide on the fea-
tures and (ii) decide on the algorithm to use. Predicting rcsvol is
quite challenging as the bkvol is usually quite different from rcsvol.
Figure 4 illustrates this difficulty. The vertical lines provide a clear
indication that we need other features besides bkvol to have any
chance of accurately predicting rcsvol.

We thus experimented with extracting different feature combi-
nations until we settled on a set that provides a good compromise
between model complexity and accuracy. More formally, given a
sample of bookings, we formed a feature set X and mapped each
booking i as an element xi ∈ X and the rcsvol as yi ∈ R+
. The
prediction task then becomes a regression problem, where we have
to learn a function

fθ : X → R

+

Figure 5 shows the set of features we use, which were the most

important ones, for predicting rcsvol:

• Days until departure (DAYS): The most important feature
by far is the number of days between the booking time and
the departure time. Bookings closer to the departure time
tend to be more accurate. In fact, bookings that are time-
stamped several days before departure day tend to show a
clear pattern of overbooking from the customer side (and
hence of using DMVs). It is natural for shippers to overbook
as in the air-cargo business there is no penalty for that.
• Booked weight (BKWT): Contrary to bkvol, which usu-
ally tends to be a DMV, bkwt is a valuable information. This
is because shipping agents have a much more accurate infor-
mation of bkwt as they have access to high quality weighing
machines. Indeed, instruments for accurately measuring vol-
ume are not that widespread [2, 21]. Thus, being easier to
measure, bkwt is on average more precise.

4

02468101214161820Distance Of Mean From Booked0.40.50.60.70.80.91.0Normalized entropyBK: 39.17BK: 29.38BK: 17.82BK: 18.29BK: 9.76BK: 7.32BK: 90.000.0020.00Standard DeviationFigure 4: Values of bkvol and related rcsvol in shipments from historical data for a given range of bkvol. Circled in green are
vertical patterns that are evidently disguised missing values.

volume (weight) of the shipment becomes available only at depar-
ture time. We, thus, model this problem as a stochastic dynamic
program [1, 18].

We start by defining a state vector x = (x1, . . . , xm ). Each xi
is the number of items of type i assigned to a flight. A type is a
pre-defined category, like fresh food or pharma. The state x evolves
with time t. We define the value function V F (x, t) as the expected
revenue from the flight given that at time t the flight is in state
x. We label departure day as time t = 0 and the booking horizon
extends up to time t = T . Thus, time flows backwards. We model a
3 is fixed and known. We
single flight whose volume capacity kv
also discretize time and in each time bin t the probability of an
item i being received for a booking is pi,t . We assume that at each
time step only one shipment can arrive for booking. We define
p0,t as 1 − (cid:205)m
i=1 p(i, t) as the probability that no booking will show
up in time period t. In practice, when an agent books an item of
type i, it is accompanied by a booked volume bkvoli . When the
item finally arrives for shipment the received volume is rcsvoli .
The revenue received from the item i is R(rcsvoli ), where R() is
typically an increasing and concave function of volume. Recall that
during booking time the airline only knows bkvoli and not rcsvoli .
Thus, it is common to make a decision about whether to accept or
reject a booking based on the average volume of type i, ¯vi .

We can now define the value function V F (x, t) as a recursive
function (Bellman’s Equation) in order to maximize the overall
expected revenue [1]:

V F (x, t) =

m
(cid:213)

pi,t max{R( ¯vi ) + V F (x + ei, t − 1), V F (x, t − 1)}

i=1
+ p0,tV F ((x, t − 1)),
(cid:35) +

(cid:34) m
(cid:213)

xi ¯vi − kv

V F (x, 0) = −hv

t = 1, 2, . . . ,T

i=1

where [a]+ = max{a, 0}. We now explain the above recursive equa-
tion. When the state is x at a given time t then V F (x, t) is the
expected revenue over the full time horizon of the booking. At time
step t, the probability of a shipment of type i arriving is pi,t . If the
booking is accepted then the state will transition to x + ei, where

3For non-cargo flights kv varies depending upon passenger load.

5

Figure 5: Features importance. For categorical features, such
as product, the value of the category with the maximum im-
portance is shown.

from the actual value, the differences cancel each other out at the
flight level, that is, the aggregation of bookings at the flight level
will automatically result in variance reduction. This has been con-
firmed by evaluating both models for booking level and flight level
prediction. On the booking level, the variance in GBM predictions
is more than 5 times higher than RF predictions. However, at the
flight level, the mean absolute error of RF is 87.1% higher than the
GBM error. For these reasons, in our production deployment we
have used GBMs.

3.3 Decision Making
Once a booking is DMV-tagged and its bkvol is predicted, the
Decision-Maker creates an acceptance/rejection suggestion for the
given booking. Before digging in how it does so, let us first state
what the problem of decision making in the context of airline cargo
booking is. For any flight, capacity is a perishable quantity, i.e., once
the flight takes-off the capacity is lost. Therefore, an airline wants
to accept bookings that will maximize revenue. The problem can
be seen as a generalization of the classic Knapsack problem with
two caveats: (i) cargo bookings appear over time and the exact

DMV5DMV4DMV3DMV2DMV1rcsvol= bkvolReceived volume (rcsvol)rcsvol= 2 ·  bkvolrcsvol= 3 ·  bkvolrcsvol= 1.5·  bkvolrcsvol= 2.5 ·  bkvolBooked volume (bkvol)DAYSBKWTPIECESBKVOLSHCPRODUCTDMVDESTORIG0.00.10.20.3Feature importanceFigure 6: The Value Function (VF) corresponding to Example
1. Each cell corresponds to the revenue that will be accrued
starting from state x at time t. Note the cell values are com-
puted using backward induction as time is going backwards.

ei is the one-hot binary vector with a 1 at the i-th location. By
accepting the booking, the expected revenue will be R( ¯vi ). How-
ever, the booking of item i will only be accepted if the revenue
R( ¯vi ) + V F (x + ei, t − 1) is greater than not accepting the booking
and transitioning one step towards departure while staying in the
same state, i.e., V F (x, t −1). At time t = 0 and in state x, the V F (x, 0)
captures the cost of off-loading, which is proportional (hv ) to the
total expected volume (cid:205)
i xi ¯vi minus the capacity kv . For example,
if the expected volume is 100 units and the capacity kv is 50, then
the off-loading cost is −50hv .

Having defined the value function V F (x, t), the decision rule
(D1V) at each time step t, which determines whether to accept or
reject an incoming shipment of type i is given as:

D1V : R( ¯vi ) + V F (x + ei, t − 1) > V F (x, t − 1)

However, we can integrate prediction in the decision-making by
modifying the decision rule. For example, suppose our predictive
function is fθ (as defined in Section 3.24), i.e., given a booked vol-
ume bkvoli of type i, fθ (bkvoli ) is the predicted received volume
rcsvoli ). We, then, have a new decision rule (D2V) as
(

ˆ

D2V : R(fθ (bkvoli )) + V F (x + ei, t − 1) > V F (x, t − 1)

The Curse of Dimensionality: It is worth noting that the con-
struction of V F (x, t) suffers from the well-known curse of dimen-
sionality of dynamic programming [3, 18]. For example, suppose
there are m items and the number of time periods is T . Then, the
size of the state space is exponential in m5. An approximate solution
to escape the exponential blow-up is to use aggregate x = (cid:205)
i xi ¯vi .
This makes the state space one-dimensional scalar-valued, instead
of vector-valued, of maximum size. This state space is bounded by
M × T , where M is the maximum possible volume booked for any
type. The construction of V F (x, t) becomes considerably simplified
and the decision rule D2V then becomes D2S:

D2S : R(fθ (bkvoli )) + V F (x + fθ (bkvoli ), t − 1) > V F (x, t − 1)

Illustrative Example 1: To illustrate how dynamic programming
is used to form the V F function, we will work through a simple
scenario shown in Table 1.
We assume there are two shipment types: type1 and type2. Both
types can arrive for a booking with a probability of 0.4 in any
time step and the probability that no shipment will arrive for any

4We have overloaded the fθ signature to emphasize the role of bkvol
5It is S (T , m), Stirling number of second kind

Table 1: Sample cargo characteristics

volume
revenue (ρ)
prob. arrival in t
prob. no booking in t

1
3
4
5
6 max capacity (kv )

type1
1
1
0.4

type2
1
2
0.4

0.2
2

booking is 0.2. The revenue for type1 is 1 and for type2 is 2, while
the volume for both types is fixed at 1 unit. Recall that time is
labeled in a reverse order, i.e., departure time is 0 and booking
horizon extends up to time t = 4. To compute the value function
V F , we proceed backwards for each state x. Now the state is a two-
dimensional vector x = (x1, x2), where x1 and x2 are the number
of bookings of type1 and type2 respectively. However, we collapse
x into x = x1 ¯v1 + x2 ¯v2 = x1 + x2 as we have assume that the
volume booked has a value of 1. The different values of x are shown
as rows in Figure 6. We first have to populate the first column of
Table 1. For example, V F (0, 0) = − max(0 − kv , 0) = 0 as kv = 2
and V F (3, 0) = − max(3 − 2, 0) = −1. As an example, we compute
V F (1, 2).

V F (1, 2) =0.4 max(1 + V F (2, 1), V F (1, 1))

+ 0.4 ∗ max(2 + V F (2, 1), V F (1, 1) + 0.2 ∗ V F (1, 1)

=0.4 ∗ (1 + 0.4) + 0.4 ∗ (2 + 0.4) + 0.2 ∗ 1.2
=1.76 ≈ 1.8

4 RESULTS
We first evaluate our proposed AI-CARGO system in terms of rev-
enue and costs. We then show an in-depth analysis of our tech-
niques. Note that the prediction module of AI-CARGO has been
deployed in a large international airline company6 and the results
reported are from the production environment.

4.1 Dataset
We obtained a real dataset spanning two years (June 2016- August
2018) of booking records from the cargo IT team of the airline com-
pany. Each booking record consists of several attributes including,
booking date, origin, destination, agent, booking volume (bkvol),
product type, received date, departure datetime, and received vol
(rcsvol). We use this dataset to detect the DMVs and build the ML
model for predicting rcsvol using all other attributes. As we do
not have real information on the revenue and offload costs, we
create simulated data as proposed in [1] to evaluate our decision
making approach. To create the simulations from the real dataset,
we compute the probabilities of the product types from the real
dataset: For each type i, we compute

pi = # bookings with product i

# total bookings

The related probabilities of the ten most frequent product types
are shown in the top Table 2. We observe that the product type
frequencies are skewed, with the most frequent product type with

6Note again that we cannot convey the name for confidentiality reasons.

6

t=0t=1t=2t=3t=4x=00.01.22.43.13.6x=10.01.21.82.20.0x=20.00.40.80.00.0x=3-1.0-0.60.00.00.0x=4-2.00.00.00.00.0Table 2: The top table shows the probabilities (pi ) of making a booking for a product type i. The bottom table shows the
probabilities (pt ) of a booking arriving in a time period t.

Product type Type1 Type2 Type3 Type4 Type5 Type6 Type7 Type8 Type9 Type10

pi

0.856

0.042

0.036

0.035

0.012

0.007

0.005

0.003

0.002

0.002

Time period 1-10

11-20

21-30

31-40

41-50

51-60

pt

0.05

0.03

0.009

0.004

0.003

0.005

Figure 7: Offloading cost and the revenue generated for varying levels of capacity kv

a probability of 0.856. Then, we split the booking horizon into
60 equal time steps and we compute the probability of a booking
arriving at time step t as

pt = # shipments at time t
# shipments in dataset

For the sake of simplicity and to replicate the same formulation
as in [1], we compute a single probability for 6 different intervals of
time steps, resulting in 10 time steps per interval. For each interval
we take the average of the 10 single time steps that belong to this
interval. The results are shown in the bottom Table 2. Given pi the
probability of an incoming type i at any time, and pt the probability
of getting any type of booking at time t, the probability of getting
a booking of product type i at time t is pi,t = pipt .

4.2 AI-CARGO Revenue Analysis
We first evaluate our proposed AI-CARGO system in terms of rev-
enue benefits and offload costs. Using the data described above
we simulate the whole AI-CARGO system pipeline including data
cleaning, prediction, and decision-making as follows. First, we com-
pute the V F (x, t) table by using the entire dataset and taking the
average booking volume for each time step. Then, we consider two
different test cases in order to evaluate the power of our system by
combing predictive modeling with decision making:

(1) BKD to RCS: no prediction is made. The decision to whether
accept or reject an incoming booking by applying DS2 is based on

7

the reported bkvol, i.e., fθ (bvi ) = bvi . Final offloading cost is then
calculated based on the rcsvol.
(2) PRED to RCS: The received booking is processed for DMV iden-
tification and the resulting feature vector is used to output a predic-
tion fθ (bvi ) using our prediction model. The decision to accept or
reject an incoming shipment using D2S is based on this predicted
volume.

At each time step we draw bookings from the dataset following
the probabilities of Table 2 and apply the decision rule D2S. Figure 7
shows the results on eleven different flight capacities kv and ten
thousand flights each, for a total of 220 thousand flights.

The left-hand side graph of Figure 7 clearly shows that for vari-
ous capacity constraints (kv ) the offloading cost is lower almost by
a factor of ten and with a much lower standard deviation. This sug-
gests that using predictions instead of booked volume (bkvol) not
only reduces the offloading cost but adds substantial amount of cer-
tainty into the whole air cargo booking process. In the right-hand
side graph of Figure 7, we show the final revenue, i.e., after subtract-
ing the offloading costs, for various flight capacity constraints. We
observe that the revenue increases when using a predicted booked
volume, albeit slightly, indicating that the decision function selected
better-value shipments during the booking time horizon. Still the
standard deviation of the revenue is lower when using the predic-
tions. Note that, the way the decision making process is designed,
excess overbooking incurs negative penalty (i.e., offloading), while
underbooking results to zero penalty (i.e., V F (x, 0) is zero when
the total volume is less than the flight capacity). It is thus more
beneficial to reduce the risk of offloading by using a predictive

20253035404550556065700.1110100Capacity kvOffloading costBKD to RCS2025303540455055606570020406080Capacity kvFinal revenuePRED to RCSmodel that overpredicts leading to less shipments getting accepted.
This is a design choice that is driven by business objectives.

Table 3: Average error decrease for each product type, at
booking level, in production environment.

4.3 In-depth analysis
We now evaluate the main two components of our system indepen-
dently: the predictive model and the decision making process.
Predictive model: We first evaluate our predictor module. For our
evaluation, we use 3-fold cross-validation on the full real dataset
of two years cargo bookings. We make a prediction on each single
booking and we evaluate the aggregated flight leg predicted volume
vs. the flight-leg received volume. For this reason, we implemented
cross-validation so that all the bookings from the same flight leg
are kept in the same split. Based on grid-search results, we set the
XGBoost regressor with 0.9 subsample ratio of columns for each
split, 300 estimators, a maximum tree depth of 20 and a learning
rate of 0.05. All other parameters are set as default.

Product type % of booking

% error decrease
from bkvol

Type1
Type2
Type3
Type4
Type5
Type6
Type7
Type8
Type9
Type10

73.3%
10.1%
3.7%
3.5%
3.1%
2.7%
1.4%
0.8%
0.7%
0.1%

-33.4%
-38.3%
-61.9%
-66.9%
-34.1%
-7.2%
-43.9%
-96.6%
+25.8%
-30.7%

vs. actual rcsvol). The predicted volume has decreased the error
considerably for 9 out of the 10 product types. The increase in error
for product type9 is on a very rare product type and, thus, there are
not enough data to train the model. However, as it is rare it does
not influence the total flight-leg predicted volume.
Decision Making: We now evaluate our decision making module
in isolation from the prediction module. This means that in this
experiment we do not use predictions but the decision is made
based on the mean value ¯vi and offloading is determined based on
the random number generated by a lognormal distribution, which
leads to rule D1S : R( ¯vi ) + V F (x + ¯vi , t − 1) > V F (x, t − 1). We
evaluate D1S by comparing it with a first-come first-served (FCFS)
policy. In the FCFS policy, every incoming booking is accepted until
the capacity runs out. FCFS is a greedy strategy in the sense that
it will accept immediate revenue instead of waiting for a potential
booking from which more revenue can be made. In an ideal setting,
if the booking value was equal to the received value, FCFS will not
incur any offloading costs. However, since the two values are rarely
the same, the natural advantage of FCFS is not realized and the
experiments bear that out. Note

We compare the D1S and the FCFS strategy on the simulated
data set from [1]. Using the mean volume µk for each product k
of the 24 categories and the related probability distributions, we
recreate synthetic data for 10 thousand different simulations and
run the two different policies. Mean value is used as booked volume,
while the received volume is drawn from a lognormal distribution
with mean equal to the booked volume and variance (θ µk )2.

Table 4: The average over 10,000 flight simulations for ex-
pected revenue and final revenue after offloading for the
two strategies with varying θ . Advantage in revenue for D1S
is kept after the offloading cost are applied.

Expected revenue Revenue after offloading

θ

0.8
1.0

D1S

FCFS

D1S

2927.87
2927.87

2548.95
2548.95

2584.28
2553.74

FCFS

2541.32
2517.23

Figure 8: Prediction error for flight legs in test splits. Each
data point is a flight leg. Below each dotted line are all the
flights with an error below the respective percentage.

(cid:205)N
1

|r csvoli −fθ (bkvoli )|
r csvoli

We use the mean relative absolute error on our predictive model:
e = 1
. The average error on the entire
N
historical data is 7.8%. Figure 8 shows that the prediction error is
under 5% in almost half of the flights, while it is under 10% for
the 74.8% of the flights. Similar results are shown in the table at
the top right of the figure. We observe that by using the predictive
model instead of the actual booked volume values we have a greater
number of flights that have a small error. It is also noteworthy that
our prediction error is lower for higher capacity flights, where it
has the biggest impact.

Table 3 shows the benefits of the prediction on the shipment
level for the 10 most frequent product types. Specifically, it shows
the decrease in percentage of the prediction error (predicted rcsvol
vs. actual rcsvol) from the booking error (original booked volume

8

Volume prediction: Flights with error below X%20%15%10%5%Error %E%Flights with prediction error below %E%Flights with booking error below %E5%48.9%41.5%10%74.8%61.5%15%86.7%73.7%20%92.5%81.6%% Prediction ErrorFlight leg received volume10%20%30%40%50%60%70%80%Results in Table 4 show how D1S has a benefit not only for the
expected revenue but also the final one, after the offloading cost
is deducted. As the variance increases, offloading increases and
revenue decreases which suggests that our predictive approach has
potential in better handling the booking decision making process,
as we showed in the previous section.

Table 5: Last 16 time steps in the booking horizon of one
flight simulation, showing current cargo load and decision
for the two policies.

FCFS

D1S

t

bkvol

Revenue
rate

Load Decision

Load Decision

45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60

55.0
59.0
52.0
30.0
59.0
119.0
30.0
30.0
30.0
52.0
27.0
52.0
125.0
30.0
30.0
30.0

0.69
0.79
0.72
1.12
0.54
0.98
1.12
1.12
1.12
0.8
0.8
0.8
0.69
1.12
1.12
1.12

2759.0
2814.0
2873.0
2925.0
2955.0
2955.0
2955.0
2955.0
2955.0
2955.0
2955.0
2955.0
2955.0
2955.0
2955.0
2955.0

accepted
accepted
accepted
accepted
rejected
rejected
rejected
rejected
rejected
rejected
rejected
rejected
rejected
rejected
rejected
rejected

2759.0
2814.0
2873.0
2925.0
2955.0
2955.0
3074.0
3104.0
3134.0
3164.0
3164.0
3164.0
3164.0
3164.0
3194.0
3224.0

accepted
accepted
accepted
accepted
rejected
accepted
accepted
accepted
accepted
rejected
rejected
rejected
rejected
accepted
accepted
accepted

Table 5 provides the last 16 steps in the booking horizon for
one of the flight simulation. In particular, it shows how in practice
the decision rule D1S keeps overbooking if the revenue rate is
advantageous, while rejecting the less profitable shipments once
the capacity is reached. This leads to the accumulation of offloading
cost with the ultimate goal of maximizing the revenue.

5 DISCUSSION AND FUTURE WORK
In this paper we have described the components of AI-CARGO, an
intelligent and data-driven air-cargo revenue management system.
AI-CARGO was developed in conjunction with a large commercial
airliner over a two year period. We summarize some of our lessons
learned from the project and suggest directions for future work.

The project started as a classical data science project with the
stated objective of predicting the received weight (rcswt) and re-
ceived volume (rcsvol) of air-cargo bookings. We later narrowed it
to predicting rcsvol as it turned out that most flights are volume
constrained, i.e., they run out of volume space before weight capac-
ity. However, overtime, we realized that prediction per-se cannot be
carried out in isolation. We have to analyze the upstream sources
of data and understand how the data was being generated. Closer
analysis led us to conclude that the use of disguised missing values
(DMVs) was prolific in the air-cargo ecosystem and a solution was
required to detect DMVs and obviate their impact on the prediction

9

task. We also had to get a better understanding of how the outcome
of the prediction task will be consumed by end users for decision
making. This led us to formulate the prediction-driven revenue
optimization problem. Our general conclusion is that in order to
make real and tangible impact, data science techniques have to be
situated and combined with an overall objective. For future work
we plan to extend the AI-CARGO system so that it can be used by
shippers and freight-forwarders and not just the RM teams within
an airline.

REFERENCES
[1] Kannapha Amaruchkul, William L Cooper, and Diwakar Gupta. 2007. Single-leg
air-cargo revenue management. Transportation science 41, 4 (2007), 457–469.
[2] D Beidermand. 2002. New freight dimensions: For shippers, finding the real cost
of a shipment shouldn?t be a matter of weight and see. Air Cargo World 92, 8
(2002), 34–40.

[3] Dimitri P Bertsekas, Dimitri P Bertsekas, Dimitri P Bertsekas, and Dimitri P
Bertsekas. 2005. Dynamic programming and optimal control. Vol. 1. Athena
scientific Belmont, MA.

[4] Thijs Boonekamp, J Gromicho, W Dullaert, and B Radstaak. 2013. Air cargo
revenue management. Unpublished masters thesis, Vrije Universiteit, Amsterdam
(2013).

[5] S Budiarto, H P Putro, P Pradono, and G Yudoko. 2018. Revenue management
IOP Conference Series: Earth and

of air cargo service in theory and practice.
Environmental Science 158 (2018), 12–22.

[6] Tianqi Chen and Carlos Guestrin. 2016. XGBoost: A Scalable Tree Boosting
System. In Proceedings of the 22Nd ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining (KDD ’16). ACM, New York, NY, USA,
785–794. https://doi.org/10.1145/2939672.2939785

[7] Wen-Chyuan Chiang Chiang, Jason Chen, and Xiaojing Xu. 2007. An overview
of research on revenue management: current issues and future research. Interna-
tional Journal of Revenue Management (IJRM) 1, 1 (2007).

[8] Ahmed K Elmagarmid, Panagiotis G Ipeirotis, and Vassilios S Verykios. 2007.
Duplicate record detection: A survey. IEEE Transactions on knowledge and data
engineering 19, 1 (2007), 1–16.

[9] Ming Hua and Jian Pei. 2007. Cleaning Disguised Missing Data: A Heuristic
Approach. In Proceedings of the 13th ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining (KDD ’07). 950–958.

[10] Christoph Hueglin and Francesco Vannotti. 2001. Data Mining Techniques to
Improve Forecast Accuracy in Airline Business. In Proceedings of the Seventh
ACM SIGKDD International Conference on Knowledge Discovery and Data Mining
(KDD ’01). 438–442.

[11] Raja G Kasilingam. 1997. Air cargo revenue management: Characteristics and
complexities. European Journal of Operational Research 96, 1 (1997), 36–44.
[12] Yingjie Lan, Michael O Ball, and Itir Z Karaesmen. 2011. Regret in overbooking
and fare-class allocation for single leg. Manufacturing & Service Operations
Management 13, 2 (2011), 194–208.

[13] Richard D. Lawrence, Se June Hong, and Jacques Cherrier. 2003. Passenger-
based Predictive Modeling of Airline No-show Rates. In Proceedings of the 9th
ACM SIGKDD International Conference on Knowledge Discovery and Data Mining.
397–406.

[14] Jeffrey I. McGill and Garrett J. Van Ryzin. 1999. Revenue Management: Research

Overview and Prospects. Transportation Science 33, 2 (1999), 233–256.

[15] Ronald K. Pearson. 2006. The Problem of Disguised Missing Data. SIGKDD Explor.

Newsl. 8, 1 (2006), 83–92.

[16] Andreea Popescu. 2006. Air cargo revenue and capacity management. Ph.D.

Dissertation. Georgia Institute of Technology.

[17] Andreea Popescu, Pinar Keskinocak, Ellis Johnson, Mariana LaDue, and Raja
Kasilingam. 2006. Estimating Air-Cargo Overbooking Based on a Discrete Show-
Up-Rate Distribution. Interfaces 36, 3 (May 2006), 248–258.

[18] Warren B Powell. 2007. Approximate Dynamic Programming: Solving the curses

of dimensionality. Vol. 703. John Wiley & Sons.

[19] Abdulhakim A Qahtan, Ahmed Elmagarmid, Raul Castro Fernandez, Mourad
Ouzzani, and Nan Tang. 2018. FAHES: A Robust Disguised Missing Values
Detector. In Proceedings of the 24th ACM SIGKDD International Conference on
Knowledge Discovery & Data Mining. ACM, 2100–2109.

[20] Vijayshankar Raman and Joseph M Hellerstein. 2001. Potter’s wheel: An interac-

tive data cleaning system. In VLDB, Vol. 1. 381–390.

[21] B. Slager and L. Kapteijins. [n. d.]. Implementation of cargo revenue management

at KLM. Journal of Revenue Pricing Management 3 ([n. d.]), 80–90.

[22] Richard S Sutton and Andrew G Barto. 2018. Reinforcement learning: An intro-

duction. MIT press.

[23] T.R. Tibshirani and J. Friedman. 2009. Elements of Statistical Learning.

