Automatic Detection and Analysis of Technical
Debts in Peer-Review Documentation of R Packages

Junaed Younus Khan and Gias Uddin
DISA Lab, University of Calgary

2
2
0
2

n
a
J

1
1

]
E
S
.
s
c
[

1
v
1
4
2
4
0
.
1
0
2
2
:
v
i
X
r
a

Abstract—Technical debt (TD) is a metaphor for code-related
problems that arise as a result of prioritizing speedy delivery
over perfect code. Given that the reduction of TDs can have
long-term positive impact in the software engineering life-cycle
(SDLC), TDs are studied extensively in the literature. However,
very few of the existing research focused on the technical debts
of R programming language despite its popularity and usage.
Recent research by Codabux et al. [21] ﬁnds that R packages can
have 10 diverse TD types analyzing peer-review documentation.
However, the ﬁndings are based on the manual analysis of a
small sample of R package review comments. In this paper, we
develop a suite of Machine Learning (ML) classiﬁers to detect
the 10 TDs automatically. The best performing classiﬁer is based
on the deep ML model BERT, which achieves F1-scores of 0.71
- 0.91. We then apply the trained BERT models on all available
peer-review issue comments from two platforms, rOpenSci and
BioConductor (13.5K review comments coming from a total
of 1297 R packages). We conduct an empirical study on the
prevalence and evolution of 10 TDs in the two R platforms. We
discovered documentation debt is the most prevalent among all
types of TD, and it is also expanding rapidly. We also ﬁnd that R
packages of generic platform (i.e. rOpenSci) are more prone to
TD compared to domain-speciﬁc platform (i.e. BioConductor).
Our empirical study ﬁndings can guide future improvements
opportunities in R package documentation. Our ML models can
be used to automatically monitor the prevalence and evolution
of TDs in R package documentation.

Index Terms—R, Technical Debt, Machine Learning, Empirical

Study, rOpenSci, BioConductor, Documentation

I. INTRODUCTION

Technical debt (TD) denotes sub-optimal software devel-
opment choices/actions [11], [24]. In order to meet project
goals with time and resource constraints, developers often use
shortcuts or execute rapid hacks in their work [15], [62].
While such shortcuts may enable developers in achieving
their short-term objectives, they may have harmful long-term
consequences [38], [42]. Studies ﬁnd that software applica-
tions containing TDs are more prone to issues like bugs and
maintenance problems [30], [34], [37], [41], [68]. TDs also
hinder the productivity of software developers [14]. Several
studies have been conducted to understand the pattern and
impact of different types of TD. Most of the existing studies
used a single artifact (i.e. source code comments) to explore
TD with a few recent exceptions [7], [13], [89].

R is a popular programming language among data scientists
and scientiﬁc communities. While studies in TDs have mainly
focused on popular programming languages like Java, we are
aware of few research that focused on TDs in R packages.
Recently, Codabux et al. [21] manually analyzed the peer-

review documentation explore TD in R rOpenSci packages.
rOpenSci is a popular platform that promotes development and
use of high-quality R software [17]. It conducts peer-review
of R packages in public GitHub issues. Codabux et al. [21]
identiﬁed 10 types of TD in the a sample of 600 comments
related to rOpenSci R packages. They are documentation,
code, design, defect, requirement,
test, architecture, build,
usability, and versioning debts. However, to get a complete
understanding of the distribution and growth of different types
of TD in different R packages, a large-scale empirical study is
necessary. Codabux et al. also focused on only one platform
(rOpenSci). To get a more representative picture of TDs in
R packages, other platforms of R packages should be studied
too. Without an automatic detection of TDs in R packages, it is
however, not possible to facilitate such large-scale analysis of
TDs in packages. This is because manual labeling is a time-
consuming and resource-intensive process. Automatic detec-
tion is also crucial to take necessary precautions about TD,
and to manage and ﬁx them. Most existing researches basically
focused on automatic detection of self-admitted technical debts
(SATD) using source-code [25], [46], [54], [64], [90]. As such,
we are aware of no research that automatically detected the
10 TD types from Codabux et al. [21] in R packages.

In this paper, we develop techniques to automatically detect
10 TD types from Codabux et al. [21] in R packages. We then
conduct an empirical study to understand the prevalence and
evolution of the 10 TDs in all R packages from rOpenSci [17]
and BioConductor [31]. Speciﬁcally, we follow three three ma-
jor phases (see Fig. 1). First, we employed a two-stage BERT-
based hierarchical machine learning framework to detect TD
types. Second, we apply the trained model on all approved
comments from the peer review package documentation of two
R platforms, rOpenSci and BioConductor. Third, we analyze
the prevalence of evolution of the 10 TD types across the two
R platforms based on the data labeled by the trained BERT
model. To the end, we answer three research questions:

RQ1. How accurately can we detect TDs in R packages?
(Section II) First, we checked whether a given sentence
if yes, we
(of issue comments) indicates any TD or not,
determined the type of that TD in the second stage. We
evaluated a suite of ML models (i.e. SVM, BiLSTM, and
BERT) to detect the presence of TD in the ﬁrst stage. The
BERT-based model outperforms the other two with an F1-
score of 0.90 in this task. Second, we detected the types of
these TD using a BERT-based hierarchical approach which
shows F1-scores between 0.71 – 0.91 to detect the 10 TDs.

 
 
 
 
 
 
TABLE I: Statistics of the Benchmark Dataset

TD Type

# Sentence

#Word/Sent

Top 3 Words

N/A
Documentation
Code
Design
Defect
Requirement
Test
Architecture
Build
Usability
Versioning

400
230
226
202
192
207
195
200
172
150
104

9
11
9
11
11
12
11
12
10
13
12

thanks, package, CRAN
documentation, vignette, readme
function, name, variable
function, data, method
error, code, data
user, data, think
test, coverage, full
package, make, tool
check, install, CRAN
error, help, message
version, current, numbers

A. Benchmark Dataset Used to Design ML Models

To design and test the TD type detection algorithms, we
used the dataset published by Codabux et al. [21] which
contains 600 TD instances in R peer-reviews documentation
of rOpenSci manually labelled in 10 TD types. Each in-
stance is a phrase extracted from a full issue comment. First,
they extracted the comments of all 157 approved rOpenSci
packages of that time. Second, they manually investigated
a randomly selected subset of the comments and identiﬁed
the ones with potential TD indication. Later, 600 phrases
were manually extracted from those comments and labelled in
different TD types. Hence, one limitation of the dataset is that
it only contains TD signiﬁcant parts of the issue comments
and remaining parts of the comments (i.e. insigniﬁcant/non-
TD sentences) were discarded. Since issue comments are from
natural human language domain, it is obvious that they contain
a number of sentences that are not relevant to TD. Hence,
for automatic detection, we need a number of such non-TD
sentences as well for training our machine learning model so
that it can distinguish them from TD sentences and discard
them from a given issue comment in real world scenario.
Accordingly, we built a dataset of both TD-signiﬁcant and
TD-insigniﬁcant sentences as follows. (1) We extracted the full
comments of TD instances labeled in the dataset [21] using
their comment-ids. (2) We split the extracted comments into
sentences. (3) Among these sentences, ones that exist in the
TD dataset of [21] are considered signiﬁcant for determining
TD. (4) The rest sentences are considered insigniﬁcant. In
this process, we obtained a binary dataset of total of 1205
sentences: 805 TD signiﬁcant and 400 TD insigniﬁcant (i.e.
non-TD). Each of these 805 TD sentences again carries a type
(i.e. TD type) as labeled in the original dataset [21].

One issue of the dataset is it is greatly imbalanced. Al-
though as claimed by the authors [21], it might represent the
comparative distribution of different types of debts in their
studied subset of R domain, we need a slightly more balanced
dataset to develop an unbiased machine learning model. We
augmented the text data by replacing words (adjectives, verbs)
with their synonyms to generate different texts with the same
meaning [43], [88]. The synonyms were generated using
WordNet [50]. We did not use SMOTE, since it is not effective
for the high dimensional numerical representation of text data
[16]. Table I shows statistics of the ﬁnal dataset.

Fig. 1: Schematic diagram of our study.

RQ2. How prevalent are TDs in R packages? (Sec-
tion III-B) We applied our BERT based framework on the
peer-review issue comments of all approved rOpenSci and
BioConductor packages. It is important to know the current
state of different type of TD e.g. which type is more (or less)
frequent than others. Hence, we analyzed the distribution of
different types of TDs across all rOpenSci and BioConductor
packages. We ﬁnd that documentation debt is the most preva-
lent, while versioning debt is the least frequent.

RQ3. How do the TDs evolve in R packages? (Sec-
tion III-C) Trend analysis shows us the growing pattern of
different TD and helps us to understand what to expect in
the future. We analyzed the evolution of different TDs over
time and observed that there is a signiﬁcant upward trend of
most of the TD (specially documentation, defect, test debts)
in rOpenSci. On the other hand, there is an overall decline of
all TD types in BioConductor packages.

To assist R developers with our research, we developed a
browser extension that can show the TD types of a given R
package in rOpenSci and BioConductor. The browser exten-
sion uses our developed ML model to automatically detect the
TD types of an R package. Our developed ML model and the
browser extension can support R developers and researchers
to learn and to conduct empirical studies of the 10 TD types
in R packages. We are aware of no previous empirical study
that analyzed all R packages in rOpenSci and BioConductor.
As such, our tool and empirical study ﬁndings can beneﬁt
diverse stakeholders like R developers, package maintainers,
and researchers (see Section V).

Replication Package. Our code and data are shared at https:

//github.com/disa-lab/R-TD-SANER2022

II. AUTOMATIC DETECTION OF R TDS (RQ1)

In this section, we describe the design and performance of
a suite of Machine Learning (ML) models to automatically
detect 10 TD types in R packages. Automatic detection is
important to monitor, analyze and to ﬁx TDs.

Phase-1Phase-3Large-scale R issue commentsDataset by Codabux et al.Developing ML ModelAutomatic Labeling of New DataLabeled DataEmpirical StudyPrevalence & Trend AnalysisPhase-2input features [53] and trained the model with 256 batch-size
over 10 epochs.

2) Stage 2. Detection of TD-types in Signiﬁcant Sentences:
In this stage, we want
the type of TD from a
to detect
given instance (i.e. sentence). We consider ten types of TD
discussed in [21]. Hence, it is a 10-class classiﬁcation problem.
Since BERT was the best performing model for TD presence
detection in the ﬁrst stage (see Section II-C1), we limited
our experiment to BERT for this stage. We ﬁrst evaluated
the effectiveness of a single classiﬁer to decide among all
the 10 possible classes. However, the single BERT performed
poorly with an accuracy of ∼12% which is nearly random
for a 10-class problem. In the multi-class scenario, the clas-
siﬁcation task becomes very difﬁcult since the classiﬁer has
to distinguish between a large number of classes in order to
make predictions. To deal with this issue, we leveraged the
concept of hierarchical classiﬁcation [9], [65]. Hierarchical
classiﬁcation approaches the multi-class problem by splitting
the output space like a tree where each (parent) node is divided
into a number of child nodes, and the procedure is repeated
until each child node represents a single class [19]. Hence,
it needs a predeﬁned data taxonomy according to which it
hierarchically distributes all the classes in a collection of multi-
class sub-problems and thus the number of classes involved
in each local sub-problem gets reduced. To induce the class
hierarchy (i.e. taxonomy), we followed the procedure proposed
by Daniel et al. [66]. We used the 10 × 10 confusion matrix
produced while using a single classiﬁer to predict among all
10 classes together. First, we generated a distance matrix (D)
from the confusion matrix (M) using Equations 1 and 2.

Confusion matrix normalization M(i, j) =

Distance Matrix D(i, j) =





1 − Mi j+M ji
0

2

(cid:80)n

Mi j
j=1 Mi j

if i (cid:44) j
if i = j

(1)

(2)

Any element of the distance matrix, D(i, j) indicates the
level of similarity between the class i and j ranging from
0 to 1 where 0 (and 1) means completely indistinguishable
(and distinguishable). Then we divided all 10 types of TD
in 3 clusters using spectral clustering algorithm [51], [85].
The optimal number of cluster, K (=3) was determined using
eigengap heuristic [85]. Thus, we induced a hierarchy of TD
types as showed in Figure 3. Then we used a total of 4 BERT-
based classiﬁers (each for every parent node) where the ﬁrst
classiﬁer (of the root node) was trained to distinguish among
the three clusters only. To achieve this goal, we relabeled
all the data of our dataset into three classes according to
the hierarchy of Figure 3 and trained the ﬁrst classiﬁer on
it. We call it S2M0 (Stage-2 Model-0). Similarly, the next
three classiﬁers (addressed later as S2M1, S2M2, S2M3) were
trained to detect debts of Cluster-1, Cluster-2, and Cluster-
3 respectively. Hence, S2M1 detects among documentation,
code, defect, test, and design debts; S2M2 detects among
build, architecture, and versioning debts; S2M3 detects among
usability and requirement debts.

Fig. 2: Automatic Detection of different types of TD.

B. The TD Detection Algorithms

We developed a two-stage framework to detect TD instances
of a package from corresponding GitHub issue comments as
depicted in Figure 2. For a given issue comment, we split it
into sentences and every sentence is labeled as TD signiﬁcant
or insigniﬁcant
in stage-1. TD insigniﬁcant sentences are
discarded and the TD signiﬁcant sentences are passed to stage-
2 for TD-type detection. The detailed workﬂow of the two
stages are mentioned below.

1) Stage 1. Discarding Insigniﬁcant Sentences: We devel-
oped a BERT-based model that would detect TD-signiﬁcant vs
TD-insigniﬁcant instances in a binary classiﬁcation fashion.
BERT is a pre-trained model which was designed to learn
contextual word representations of unlabeled texts [27]. We
chose BERT because it is found to signiﬁcantly outperform
other models in various natural language processing and text
classiﬁcation tasks [32], [39], [71]. We used BERT-Base
containing 12 layers with 12 attention heads and 110 M
parameters. We appended a classiﬁcation head composed of
a single linear layer on top of it. We trained the model for
10 epochs with a mini-batch size of 32 and maximum input
length of 300. We used early-stop to avoid overﬁtting [56]
considering validation loss as the metric of the early-stopping
[55]. We used AdamW optimizer [45] setting the learning
rate to 4e-5, β1 to 0.9, β2 to 0.999, and (cid:15) to 1e-8 [27], [69].
We used binary cross-entropy to calculate the loss [61]. We
refer to this model as S1M (Stage-1 Model) for the rest of
this paper. We compared the performance of this BERT-based
model (S1M) with one traditional ML model (i.e. SVM) and
one deep learning model (i.e. Bi-LSTM). SVM is widely used
for text classiﬁcation [23], [28]. We used linear kernel for the
SVM as prescribed by earlier works [96] with Bag of words
(BoW). BoW is a popular feature extraction approach for text
data and successfully applied for text classiﬁcation [63]. On
the other hand, Bi-LSTM is capable of exploiting contextual
information from text data examining from both directions
[33]. For Bi-LSTM model, we used 300 hidden states with
ADAM optimizer [36] and an initial learning rate of 0.001.
We used 100 dimensional pre-trained GloVe embedding as

Binary ClassificationTD vs. Non-TDMulticlass ClassificationTD type DetectionTD?YesNoType of TDOutputStage-1Stage-2SentenceInputDiscardTD Type Clusters S2M0 Model Used for Cluster Detection

Cluster-1 TDs S2M1 Model Used

Cluster-2 TDs S2M2 Model Used

Cluster-3 TDs S2M3 Model Used

Documentation

Code Defect

Test Design

Build Architecture Versioning

Usability

Requirement

Fig. 3: Hierarchy of different types of TD

C. Evaluation of the ML Models

For the ﬁrst stage, we used our dataset in binary fashion (i.e.
consisting two labels: TD and non-TD). For the second stage,
we only considered the TD signiﬁcant sentences labelled in 10
types (since the non-TD sentences will be eliminated in the
ﬁrst stage). We split the dataset in 80:20 ratio to create train
and test sets in every stage of classiﬁcation.

We report the classiﬁcation performance using four standard
metrics: Accuracy, Precision, Recall, F1-score [47]. Accuracy
(A) is the ratio of the number of correctly predicted examples
out of all data. Precision (P) is the ratio of the number of
correctly predicted examples and all the predicted examples
for a given class. Recall (R) is the ratio of the number of
correctly predicted examples and all examples of a given class.
F1-score (F1) is the harmonic mean of precision and recall.

P =

T P
T P + FP

, R =

T P
T P + FN

, F1 = 2 ∗

P ∗ R
P + R

, A =

T P + T N
T P + FP + T N + FN

TP = Correctly classiﬁed as a TD, FP = Incorrectly classiﬁed
as a TD, TN = Correctly classiﬁed as not a TD, FN =
Incorrectly classiﬁed as not a TD.

1) Detection Performance of Signiﬁcant vs non-Signiﬁcant
Comments for TD: In stage-1, we developed a BERT based bi-
nary classiﬁer (S1M) for discarding TD insigniﬁcant sentences
from an issue comment. We also evaluated SVM and Bi-
LSTM for these tasks as baselines. We report the performance
of stage-1 in Table II. We can see that our BERT-based
model (S1M) outperforms both SVM and Bi-LSTM with 91%
accuracy and 90% F1-score. Since the task of stage-1 (i.e.
binary classiﬁcation) is relatively simple and straight-forward,
state-of-the-art pre-trained language model like BERT shows
very high performance here [32], [71].

2) Detection Performance of TD Types in Signiﬁcant Com-
ments: We report the result of stage-2 in Table III. We see
that hierarchical classiﬁcation greatly outperforms the single-
model approach. In fact,
that was our motivation behind
employing hierarchical approach. Among the hierarchical clas-
siﬁers (of different stages), S2M1 has to distinguish among
5 classes of cluster-1 (i.e.documentation, code, defect, test,
design debts). It achieves 72% accuracy with 71% F1-score.
Other models of stage-2 (i.e. S2M0, S2M2, S2M3) show
better performance with F1-scores of 81%, 77%, and 91%
respectively, since they work with comparatively smaller clus-
ters. Specially, cluster-3 contains only 2 classes (i.e. usability,
requirement debts), hence, the classiﬁcation problem becomes
binary here and S2M3 achieves very high performance.

TABLE II: Performance of Stage-1: TD Presence Detection

Feature

Model

A

BoW
GloVe Embed
BERT Embed

SVM 0.76
Bi-LSTM 0.82
0.91

BERT (S1M)

P

0.77
0.82
0.90

R

0.76
0.82
0.90

F

0.76
0.82
0.90

TABLE III: Performance of Stage-2: TD Type Detection

Model

Task

A

P

R

F

Single BERT

All 10 types TD detection

0.12

0.07

0.08

0.08

Hierarchical BERT to Detect the 10 TDs in Different Clusters
S2M0
S2M1
S2M2
S2M3

Cluster detection
Cluster-1 TD detection
Cluster-2 TD detection
Cluster-3 TD detection

0.86
0.72
0.77
0.93

0.82
0.73
0.77
0.93

0.82
0.70
0.76
0.89

0.82
0.71
0.77
0.91

3) Misclassiﬁcation Analysis: We further analyzed what
factors the single-BERT made perform poorly and how they
were solved by our hierarchical-BERT approach. Table IV
shows some examples of TD instances that were misclassiﬁed
by single-BERT but correctly classiﬁed by the hierarchical
approach. We ﬁnd that the most probable reason behind single-
BERT’s misclassiﬁcation is the confusion among the classes
within the same cluster (see Figure 3). In fact, that was the
intuition behind our hierarchical classiﬁcation. Additionally,
a few misclassiﬁcation occurred due to lack of context and
vocabulary mismatch as well. For example, “Though there are
tests to cover most functions, good-practice still ﬂags some
lines as not being covered.” was misclassiﬁed as code debt by
Single-BERT while it is actually indicating a test debt due to
the presence of common words across TDS like ‘functions’,
‘ﬂag’, ‘good-practice’, ‘lines’, etc.

III. EMPIRICAL STUDY OF R TDS

In this section, we report an empirical study by applying the
best performing model from RQ1 (i.e., Hierarchical BERT) on
all issue comments from R packages of two platforms, rOpen-
Sci and BioConductor. We answer two research questions:
RQ2. How prevalent are the 10 TD types in the R packages

across the two platforms? (Section III-B)

RQ3. How do the 10 TD types evolve in the studied R

packages? (Section III-C)

The prevalence analysis of TDs (RQ2) can inform us whether
a TD type is more frequent over other TD types. Such ﬁndings
help prioritizing measures like developing solutions to ﬁx the
more frequent TD types over the less frequent TD types. Trend
analysis (RQ3) allows us to see how any speciﬁc TD type

TABLE IV: Misclassiﬁcation Analysis of Single-BERT where Hierarchical BERT Correctly Classiﬁed

TD Instance Example Comment

Actual TD

Single-BERT Label Misclassiﬁcation Reason

“With the data I would prefer to keep the internal df in the sysdata.rda ﬁle.” Ir284
“I ran into a small problem when trying to install via CRAN which I reported
an issue.” Ir115
‘‘There are still some unconventional R styles used that hindered my ability
to understand the package.” Ir139
“There is a bug in how double last names (as in Spanish) are generated.” Ir94
“But I think making some commonly used ﬂags into ﬁrst-class arguments
would dramatically improve the appeal of this package.
“However, the text of the vignette is clearly still unﬁnished.” Ir94
“I recommend removing the ﬂexibility and only letting the API receive JSON,
since validation information is only returned for JSON data.” Ir141
“Though there are tests to cover most functions, good-practice still ﬂags
some lines as not being covered.” Ir290
“After that I’ll focus on some of the bigger changes for a v0.3.0 release, since
they’ll likely introduce some breaking changes.” Ir279
“You’d have a much more welcoming package that doesn’t have to direct its
users to a GNU manpage in the opening paras of its vignette!” Ir139

Ir139”

* Architecture

Build

Lack of context

Build

Code

Defect

Design

Documentation

Lack of context

Design

Code

Build

Confusion within Cluster-1

Confusion within Cluster-1

Lack of context

Documentation

Defect

Confusion within Cluster-1

Requirement

Usability

Confusion within Cluster-3

Test

Versioning

Code

Build

Vocabulary mismatch

Confusion within Cluster-2

Usability

Requirement

Confusion within Cluster-3

* Link to corresponding rOpenSci issue (Irx)

could increase (or decrease) quicker (or slower) than the others
and whether a TD is on the rise in recent years.

A. Data Used for the Empirical Study

We collected all the 13.5K review comments between 2016
and 2021 from the two platforms, rOpenSci and BioConductor.
As of 2021 and during the time of our analysis, rOpenSci has
173 and BioConductor as 1124 approved R packages. Our
dataset also has ∼4.5K issue comments that are provided in
response to the comments. We extracted these issue comments
from respective peer-review GitHub repositories of each plat-
forms [1], [2] using web crawling and text parsing techniques.
Following Codabux et al. [21], we chose only the approved
packages to ensure the completeness of the review process and
the standard of the packages so that we can get a legitimate
view of the TD from our study.

B. How prevalent are TDs in R packages? (RQ2)

1) Approach: We automatically determined the TD types
indicated in all the issue comments collected from rOpenSci
and BioConductor packages. One issue comment can indicate
one or more types of TD at different sentences or phrases.
Since we are using sentence level detection, our developed ML
models from RQ1 was able to catch all of the types expressed
in each issue comment. We then counted and analyzed all
the TD instances of different types both for rOpenSci and
BioConductor packages.

2) Results: We show the overall TD distribution of rOpen-
Sci and BioConductor in combined in Figure 4. We see that
documentation (26.1%) and design (21.5%) debts are two
most prevalent TD in general. Table V depicts the distribution
of different
types of TD in rOpenSci and BioConductor
individually in terms of frequency and percentage. It also
shows some examples of respective TD that are predicted by
our automated model. We ﬁnd a total of 3938 TD instances in
∼4.5K issue comments of rOpenSci and 10159 TD instances
in ∼9K issue comments of BioConductor. However, not all
types of TDs are equally prevalent in R packages. Among

11.4% Code

3.4% Test

26.1% Document.

12.2% Defect
0.7% Versioning

21.5% Design

1.7% Usability
6.2% Build
8.4% Requirement

8.4% Architecture

Fig. 4: Overall distribution of different types of TD.

all the types, documentation debt is the most frequent one
with 938 occurrences (∼23.8%) in rOpenSci and 2740 occur-
rences (∼27%) in BioConductor. On the other side, versioning
debt is the least prominent one with only 22 occurrences in
rOpenSci and 71 occurrences in BioConductor. Apart from
documentation debt, some other TD such as design debt, defect
debt, and code debt occur frequently. Moreover, we see almost
similar distribution of different TDs for both rOpenSci and
BioConductor packages which suggests that different types of
TDs occur in similar distribution in R packages regardless of
the platform, scope, and ﬁeld.

C. How do the TDs evolve in R packages? (RQ3)

1) Approach: For each type and year, we divided the total
number of TD instances detected in a year by the total number
of packages in that year. Thus we determined the average
number of TD (per package) over years and plotted them in the
graph. Depending on the availability of data, we considered
the packages from April 2015 to April 2020 for the trend
analysis of rOpenSci and from April 2016 to April 2021 for
BioConductor. To get an overall idea about the growth of
different types of TD, we also calculated the overall change in
the occurrence and the compound annual growth rate (CAGR)
for each TD type combining the data of both rOpenSci and
BioConductor over years 2016–2020.

2) Results: To see how TD differ among different types
of platform and ﬁeld of R, we compared our ﬁndings for

TABLE V: TD Distribution and Example Comment with TD in rOpenSci and BioConductor

TD Type

rOpenSci

Documentation

938 Comments

23.8% Comments

“I think you should include a bit more info there: instructions for
how to get it set up locally and a link to the nycﬂights13 package.” Ir366

*

BioConductor

2740 Comments

27% Comments

“In addition, your vignette must have code chunks primarily with eval = TRUE,
so that the vignette accurately reﬂects the current capabilities of your software.”
Ib585

†

Design

Defect

Code

740 Comments

18.8% Comments

2287 Comments

22.5% Comments

“I think there are some opportunities to reduce dependencies in this package.”
Ir274

“These two functions are extremely similar and should be combined into one
accounting for the minimal differences.” Ib1141

511 Comments

13% Comments
“There are cases where unreasonable values will be generated by the
functions in this package (e.g., phone numbers with illegal area codes,
weird names for people, etc.” Ir94

1202 Comments

11.8% Comments

“I found the error is about the number of cores recruited by makeCluster()
function.” Ib1943

445 Comments

11.3% Comments
“I feel the user-facing function should be named ch gene sequence(),
not ch sequence().” Ir94

1157 Comments

11.4% Comments

“Having arguments like reportPDF makes the function impure because the
output depends on that argument.” Ib1941

Requirement

406 Comments

10.3% Comments

776 Comments

7.6% Comments

“It’s not just dates you might want to subset, it could also be geographic
space, or vertical levels within a climate model, or different ﬁle formats,
or any number of other facets depending on the data set.” Ir139

“Importing data from huge MAF ﬁles would again require a way to manipulate
this kind of ﬁles from disk, as far as I know, such a feature is not availabe in
maftools.” Ib1950

Architecture

293 Comments

7.4% Comments

“A common solution is to split the general tool and the speciﬁc application
into separate packages.” Ir102

259 Comments

6.6% Comments

“Problems arose after installing using devtools::install all()” Ir121

199 Comments

5.1% Comments

“A more robust test might also compare the values returned to the known
tags from the REF website, or that the return type is in fact a tibble class
object.” Ir78

125 Comments

3.2% Comments

“For the sake of your distracted future users, if you handled the auth
failure more gracefully and gave the right helpful message, it would
be a lot friendlier.” Ir127

Build

Test

Usability

Versioning

893 Comments

8.8% Comments
“Because of the size of the ﬁles we would recommend reformatting this package
into and ExperimentHub package with the data stored on the Bioconductor
AWS S3 buckets.” Ib498

637 Comments

6.3% Comments

“Looks like our Single Package Builder (SPB) failed to install WGSmapp
before trying to run R CMD build on SCOPE.” Ib1242

277 Comments

2.7% Comments

“There is an issue that there is no testing being done for the ’plotFemap’
function.” Ib1897

119 Comments 1.2% Comments

“You should remove it as a system requirement so users don’t install because
they think its a requirement in order to use your package” Ib1897

22 Comments .5% Comments
“The version numbers for rgdal etc should be whatever the current version is,
since that is what you are developing against.” Ir22

71 Comments

.7% Comments

“This is due to one of the core dependencies Seurat not installing properly due
to their corrupted version 4.0.0.” Ib1845

* Link to corresponding rOpenSci issue (Irx)
† Link to corresponding BioConductor issue (Ibx)

rOpenSci (generic) and BioConductor (bioinformatics) pack-
ages. Though the distribution analysis of two platforms suggest
that different types of TD occur in almost similar distribution
regardless of the type and scope of R packages (see the
result of RQ2), we observe signiﬁcant differences in terms of
quantity of TD and their evolution during our trend analysis.
To get a more comprehensible view of these differences,
we determined the total yearly number of TD instances (per
package) aggregating all types both for rOpenSci and BioCon-
ductor, then plotted them on the same graph (Figure 5). We
ﬁnd that TD occur in signiﬁcantly higher amount in generic
platform i.e. rOpenSci compared to more domain-speciﬁc
platform i.e. BioConductor. For example, from April 2016 to
April 2020, the yearly average of per package TD instances for
rOpenSci was around 24 while the number is less than 10 for
BioConductor. Moreover, we see an overall upward trend of
TD in rOpenSci packages with a steep slope at the end (April
2019 to April 2020) while the trend of BioConductor’s TD is
somewhat decreasing or stable. One possible reason might be
unlike BioConductor, rOpenSci allows packages from diverse
domains and scopes. Since different domains have different
properties and vulnerabilities, rOpenSci packages are more
prone to various types of TD.

Figure 6 and 7 show the trend analysis of rOpenSci and

Fig. 5: Evolution of TDs in rOpenSci and BioConductor

BioConductor packages respectively. For rOpenSci, we see
an overall upward trend for most types of TD (except the
architecture debt). Among them, documentation debt has the
most overall per package increment of ∼2.5 unit over ﬁve
years starting at ∼4.5 debts in 2015 and reaching ∼7 in
2020 with a steep slope at the tail (Figure 6). It indicates
the constantly growing concern of the reviewers and users
regarding documentation quality. Defect and test debts are two
other types with signiﬁcant increment of 1.6 and 1.4 unit per
package throughout this time. On the other hand, we see a
decreasing trend in architecture debt with less than 1 unit (per
package) in 2020. Literature suggests that unlike other TD

201620172018201920209121518212427Total # of TD (per Package) rOpenSci BioConductorTABLE VI: Growth-rate of different types of TD.

TD Type

∆Occurrence Growth Rate (%)

Documentation
Build
Requirement
Architecture
Design
Usability
Code
Versioning
Test
Defect

2.14
0.45
0.61
-0.75
0.17
0.05
0.74
-0.03
1.28
1.24

5.41
3.78
3.42
-7.15
0.52
1.77
3.82
-5.58
15.05
5.84

Fig. 6: Trend analysis of different TD in rOpenSci

Fig. 7: Trend analysis of different TD in BioConductor

(such as code-level technical debt), architecture debt is very
difﬁcult to detect as they do not show any clear symptom
[83], [84]. So it might happen that with growing diversity
and complexity of packages, it is gradually becoming more
challenging to identify architecture debts. For BioConductor,
we see an overall downward trend for all types of TD. Even
for the most prevalent type (i.e. documentation debt), the per
package number has dropped below 2 in 2021 while in 2016 it
was close to 3 (Figure 7). Table VI shows the overall growth-
rate of the TDs. Documentation debt is the most growing TD
among all with an annual increment of 2.14 units per package.
On the other hand, test debt is the fastest one to grow with a
growth-rate of 15.05%. Other debts with signiﬁcant increment
and growth-rate are defect, code, build, and requirement debt.

IV. DISCUSSIONS

We ﬁrst analyze whether the 10 TD types show any cor-
relation in our studied empirical dataset (Section IV-A). In
Section IV-B, we compare the TD distribution between our
empirical study ﬁndings with the state-of-the-art [21].

A. Correlation between the 10 TD types

Since a R package might contain multiple number of TD
coming from different types, there is a possibility that these
types are interdependent and correlated. For example, one type
of TD might cause or contribute to another type of TD directly
or indirectly. To investigate the hypothesis, we used Spear-
man’s correlation coefﬁcient
to determine such correlation
between different types of TD found in the entire dataset used
for empirical study in Section III-A. Spearman’s coefﬁcient

Fig. 8: Correlation between different types of TD in R pack-
ages. Intensity of (red) color indicates the level of correlation.

is a measure of monotonic relationship between two variables
[67]. It has a range of -1 to +1, with ±1 denoting perfect
positive or negative correlation and 0 denoting no association.
We report the Spearman’s coefﬁcients between each pair of
TD types in Figure 8. While most of the technical debts are
somewhat positively correlated, we observe strong positive
correlations among 4 types (i.e. Documentation, Requirement,
Design, and Code debts) with Spearman’s coefﬁcients of +0.5
to +0.6 indicating that they are highly likely to trigger each
other at several cases. For example, design and code debts
are similar in terms of pattern and origin i.e. both are related
to coding style and quality [18], [92]. Hence, we see a
strong relation between them. Documentation debt is closely
associated with requirement debt and often caused by it as
well [21], [60]. Moreover, documentation greatly depends on
code and design i.e. it is difﬁcult to produce (and maintain) a
good documentation for a code with bad programming style
or poor design. Also, requirement debts are closely related to
code and design debts since poor coding style or design often
results in partial or incorrect implementation of requirements.

B. Comparison with previous work

Since Codabux et al. studied the distribution of different
types of TDs in R packages of rOpenSci [21], we compared

20152016201720182019202001234567# of TD (per Package)DocumentationBuildRequirementArchitectureDesignUsabilityCodeVersioningTestDefect2016201720182019202020210123# of TD (per Package)DocumentationBuildRequirementArchitectureDesignUsabilityCodeVersioningTestDefectDOCUMENTATIONBUILDREQUIREMENTARCHITECTUREDESIGNUSABILITYCODEVERSIONINGTESTDEFECTDOCUMENTATIONBUILDREQUIREMENTARCHITECTUREDESIGNUSABILITYCODEVERSIONINGTESTDEFECT1.00.20.60.40.60.30.50.00.30.40.21.00.10.10.10.10.20.10.20.30.60.11.00.40.60.40.50.10.20.30.40.10.41.00.40.40.30.10.10.40.60.10.60.41.00.40.60.00.30.50.30.10.40.40.41.00.30.20.20.30.50.20.50.30.60.31.00.00.20.30.00.10.10.10.00.20.01.00.10.10.30.20.20.10.30.20.20.11.00.30.40.30.30.40.50.30.30.10.31.01.000.750.500.250.000.250.500.751.00TABLE VII: Comparison of TD distribution between Codabux
et al. (C) [21] and our study: R = rOpenSci, O = Overall.

TD Type

Distribution Observed

Documentation
Design
Defect
Code
Requirement
Architecture
Build
Test
Usability
Versioning

C 31%

R 23.8%

O 26.1%

C 12.3%
C 12%
C 11.3%

R 18.8%

O 21.5%

R 13%

O 12.2%

R 14.5%

O 11.4%

O 8.4%

R 10.3%

C 6.3%
O 8.4%
C 5.8% R 7.4%
C 5.7% R 6.6% O 6.2%
C 7.5% R 5.1% O 3.4%
C 4% R 3.2% O 1.7%
C 0.8% R 0.5% O 0.7%

Platforms studied
# Package Analyzed
# Issue comments

C rOpenSci, We: rOpenSci & BioConductor
C 157, We Studied: R 173 Overall 1,297
C 458 We Studied: R 4,500 Overall 13,500

our ﬁnding with theirs. While Codabux et al. analyzed 600
review comments of 157 packages from rOpenSci platforms,
we analyzed all the ∼13.5K review comments collected from
all 1297 packages in two platforms, rOpenSci and BioCon-
ductor. In Table VII, we show the distribution of each of
the 10 TD types in our dataset in two ways: in rOpenSci
platform and overall (i.e., rOpenSci and BioConductor). We
compare our distribution against those found by Codabux et
al. in their studied rOpenSci packages. We see that our ﬁndings
are mostly congruent to theirs with a few exceptions. While the
most and the least prevalent types match in both studies (i.e.
documentation and versioning debt), dissimilarity is observed
in other cases. For example, according to Codabux et al. the
second-most prevalent TD type is code debt (14.5%) while
according to our study it is design debt (18.8% in rOpenSci
and 21.5% in overall). In summary, the overall percentages of
different types of TDs differ between our study and Codabux
et al. [21] from moderate to large extents. Therefore, we
complement Codabux et al. by offering a comprehensive
overview of the prevalence of 10 TD types based on the
excellent foundation laid out by Codabux et al. [21] (i.e., the
benchmark dataset and the deﬁnition of 10 TD types).

C. Threats to Validity

Internal validity threats relate to authors’ bias while con-
ducting the analysis. We mitigated the bias in our machine
learning models by training, testing, and evaluating them using
standard practices. There was no common data between the
training and test set. We followed existing literature about TD
and discussed among co-authors for listing different types of
TD and detecting them. Construct validity threats relate to the
difﬁculty in ﬁnding data for our study. Our data collection
was exhaustive, as we processed more than 13.5K review
comments from 1297 approved packages of two different
popular platforms (i.e. rOpenSci, BioConductor). External
validity threats relate to the generalizability of our ﬁndings.
We mitigated this threat by conducting our study on a large-
scale data. We experimented with the peer review documen-
tation of R packages to analyze TD. We used two different
platforms and compared our ﬁndings with previous work as
well. Moreover, the performance of our automated framework

that we used for our empirical study was satisfactory. Hence,
our ﬁndings are as generalized as possible and our ﬁnding can
be applied to other similar platforms and applications.

V. IMPLICATIONS

Our TD detection tools and empirical study ﬁndings can
be useful for the following stakeholders in SE: 1) R package
maintainers to continuously monitor the prevalence and evo-
lution of TDs in their R packages, 2) R package contributors
to stay aware of TDs in the open-source R packages and to
decide to contribute to ﬁx the TDs when needed, 3) R software
developers to decide which R packages to pick from among
multiple competing choices, 4) R software engineering re-
searchers to develop techniques to automatically ﬁx TDs to
improve the adoption of the R packages by R practitioners,
5) R package vendors and organizations to make decisions
on which R packages can be safer and/or more mature to be
integrated into their enterprise R-based software toolkit, and
6) R educators to educate and inform R practitioners of the
TDs in R packages. We discuss the implications below.

R Package Maintainers can use our TD detection models
to monitor the presence of TDs in their packages. As we noted
in Sections I, VI, packages with TDs are more prone to issues
like bugs and maintenance problems [30], [34], [37], [41],
[68]. Therefore, the presence of TDs can inform the package
maintainers of deeper underlying issues with their packages,
which then they can start analyzing to make proactive ﬁxing
instead of reactive ﬁxing. To assist R package maintainers, we
have developed a browser extension using TamperMonkey [3]
that will alert the users about any potential TD in a rOpenSci
package using our automated framework. In Figure 9, we
show screenshots of our browser extension. First, we go to
a website containing R packages (e.g., rOpenSci) 1 . Second,
we enable our browser extension 2 . Third, a button (“TD
Report”) will appear with every package available on the site
3 . By clicking the button, we can see the detailed TD report
(i.e. potential TD instances of different types) 4 . We can also
access the corresponding GitHub issue comment by clicking
on a particular TD instance 5 . The effectiveness analysis of
the browser extension using R practitioners is our future work.
R Package Contributors can utilize our browser extension
(Fig. 9) to determine which package needs immediate help
to reduce the number of TDs in it. Developer discussions
in crowd forums GitHub and Stack Overﬂow about software
to ﬁx bugs, enhance the
libraries are found to be useful
software library, and so on [79]. Therefore, the TD reports
produced by our browser extension can be useful to decide
which modules of a R package needs more attention. For
example, if an R package is showing a growing number of
architecture debt,
the contributor can collaborate with the
corresponding package creator to redesign the package source
code architecture. Indeed, we observe recommendations from
R package contributors in our studied review comments to
improve the architecture of an R package (Table V): “A
common solution is to split the general tool and the speciﬁc
application into separate packages”. R package contributors

Fig. 10: Perceived impact of the different types of TD. Circle
size denotes # of occurrences of corresponding TD

prevalent than others, e.g., documentation debts. Therefore, SE
researchers can develop techniques to automatically improve
the documentation debts in the R packages. This can be done
by automatically creating new documentation, by enhancing
the documentation with crowd-shared knowledge [20], [80],
[81], or by automatically analyzing and ﬁxing speciﬁc docu-
mentation smells in the package documentation [35]. During
the ﬁxing of the TDs, SE researchers can also beneﬁt from
the correlation between the TDs, i.e., when certain TD types
seem to correlate with each other more than they correlate with
other TDs. Intuitively, such correlation would denote that the
correlated TD types may trigger each other. Indeed, in Fig. 8,
we showed that design and code debts correlate more with
each other than they do with other debts (see Section IV).
Intuitively, this means that if SE researchers can inﬂuence the
development better code IDEs (with focus on module design)
for R packages, the R package creators may hope to reduce the
code and design debts in their packages. The SE researchers
can also beneﬁt from the analysis of prevalence vs severity of
the TDs in terms of how the TDs are observed empirically.
To assist with this analysis, we further analyzed the impact
of different types of TD with respect to the frequency and
the level of inﬂuence (i.e. trigger) it might cause on other
TD (see Figure 10). We computed the growth-rate of each
TD type (as described section III-C1) and plotted them along
x-axis. For example, the growth-rate of build debt is 3.78%.
For overall impact a type has towards other TD occurrences,
we calculated the average correlation of each type and plotted
them along y-axis. For example, we can compute the average
correlation among documentation debt and all other 9 types
from the ﬁrst row of Figure 8) which is 0.37. The circle
size indicates the total number of TD instances found in our
empirical study for that type. From Figure 10, we observe that
documentation debt is the most threatening type considering
all the aspects together (i.e. size, inﬂuence, growth). The other
types close to it in terms of overall impact are design, defect,
code, and requirement debts. We also see that design debt
has the most average correlation with others which indicates
that it contributes the most to occurrence of other TD. Such
analyses can inform SE researchers of the relative importance

Fig. 9: TD Alert Browser Plug-in in Existing Packages

can also help with testing the R packages, if they observed Test
related TDs. For example, we found the following suggestion
from a contributor in rOpenSci (Table V): “A more robust
test might also compare the values returned to the known ....”.
Indeed, design and architecture related TDs accounted for total
29.5% of all TDs across all packages in rOpenSci and Bio-
Conductor (see Fig. 4). Therefore, the detection and reporting
of various TDs can help package maintainers and contributors
work together to improve the quality of R packages.

R Software Developers are tasked with developing soft-
ware products and a crucial component to any modern day
software development is the use third-party software libraries
like the open-source R packages need to stay aware of the
potential problems and TDs in the R packages that
they
use, to ensure that they can make important decisions [75].
For example, research ﬁndings show that developers look for
APIs/libraries with good documentation [82], positive opinions
about key aspects like usability of the package [76]–[78], and
so on. From Fig. 4, we can observe that the most prevalent
TDs in the R packages (from rOpenSci and BioConductor) are
related to lack of documentation (26%). Therefore, R software
developers need to be aware of sub-optimal documentation
support in the R packages from rOpenSci and BioConductor,
in genral. However, if a given functionality can be provided
by multiple competing R packages provided in both rOpenSci
and BioConductor platforms, we ﬁnd from Table V that
rOpenSci packages have on average less proportion (23.8%)
of documentation debt than those from BiConductor (27%).
Such information can be useful for a R software developer to
determine which R package and platform to choose.

R Software Engineering (SE) Researchers can utilize the
ﬁndings from our study to determine the major areas of focus
for TDs in R packages and to develop tools and techniques to
ﬁx the TDs. As we noted in Fig. 4, several TD types are more

Access All Packages from rOpenScisiteEnable our browser extension‘TD Report’ button appears for every packageGenerate TD report clicking the button3Clicking a TD instance takes to corresponding issue          5142DocumentationBuildRequirementArchitectureDesignUsabilityCodeVersioningTestDefect-10-5051015200.050.150.250.350.45Growth Rate (%)Average Correlationof ﬁxing TDs like design debts (because these debts show high
correlation with many debts).

R Package Vendors now account for almost all major
cloud-based platform provider like Microsoft Azure as well as
different enterprise data science toolkit creator (e.g., Alteryx).
The growing adoption of ML-based solutions into diverse use
cases of our daily life has only accelerated the needs for
industrial-scale R packages. Therefore, R package vendors can
use our browser extension to stay aware of the quality of open-
source R packages and to decide which packages are safe to be
included into their enterprise toolkit offerings. In the process,
R package vendors can also collaborate with the open source
R package creators to improve their packages, e.g., by creating
test cases and by improving the code itself. Indeed, testing of
R packages is important as we observed in Fig. 10: though
the total number and inﬂuence of test debt are not high, it is
growing rapidly over the last few years with a growth rate of
15% which summons more attention in the future.

R Educators can develop tutorials and information sessions
to educate R package creators and practitioners about the
diverse TD types that can exist
in their packages. Given
that TDs can have long-term impact on the quality and bug-
proneness of the underlying R packages, such education can
help the R package creators to be mindful of the TDs and
to take active actions to ﬁx those. For example, during the
requirement analysis of an R package, the developers can
ensure the requirements are properly understood before being
implemented. This is important given that requirement debts
account for 8.4% of all TDs in our study (Fig. 4). In addition,
the R educators can also develop targeted information session
to show R package creators on how to document their code,
to design their module properly, etc. The documentation and
design debts accounted for total 47.6% of all TDs (see Fig. 4).

VI. RELATED WORK

Related works can broadly be divided into Studies to

understand and Techniques to analyze and detect TDs.

Studies. The phrase ‘Technical debt’ was ﬁrst introduced in
1992 by Ward Cunningham [24]. Existing literature deﬁnes TD
as an implementation construct that is proﬁtable in short term
but problematic for future work and changes [6], [10], [40],
[72], [73]. Alves et al. devised a TD taxonomy with some new
types i.e. people, process, service, usability debts [7]. Some
other common types of TD discussed in various studies are
social [70], data [22], database [4], infrastructure [26] debts.
Behutiye et al. analyzed the concept of TD in the context of
agile development [12]. Several researches also analyzed the
impacts of TDs on the software development process. Studies
have found that TDs are unavoidable and even desirable
sometimes [15], but may lead to development crises in the
long run [38], [42], [49]. TDs hinder the maintainability of
software [37], [93], cause bugs and errors [34], create software
vulnerabilities [68], and affect the productivity of software
developers [14]. Hence, the repayment of TDs becomes very
costly with time [8], [29]. Unlike us, very few research,
however, focused on TDs speciﬁc to R language except very

recent effort by Codabux et al. [21]. They investigated TD
in the peer-review of rOpenSci R packages and developed a
taxonomy of 10 types of TD (i.e. documentation) that persist
in R packages, which we used in this paper.

Techniques. Different techniques or strategies have been
proposed over the years to analyze and measure TDs, and
manage them efﬁciently [5], [52], [59]. One important step
to report and manage different types of TD is to detect their
existence automatically. Marinescu proposed a novel approach
for assessing technical debt based on some metrics-based
detection rules for design ﬂaws i.e. violations of well-known
design principles [48]. Automated approaches like code smells
detection, automated static analysis issues, and collection of
code metrics were used to identify TD [94], [95]. Recently,
Rantala explored natural language processing along with static
code analysis to detect TD efﬁciently [57]. Tsoukalas et al.
evaluated the ability of machine learning methods to model
and predict TD evolution in software application using source
code [74]. Unlike the TDs we detect that are not explicitly
labeled by a developer, SATD are debts that are intentionally
committed and admitted by the programmers [54]. Most of
the recent works have focused on detection of self-admitted
technical debts (SATD) [25], [44], [46], [58], [86], [87], [91].
In contrast, in this paper we focus on the detection and analysis
of non-SATDs in R,
i.e., TDs that are self-admitted, but
nevertheless, are prevalent and thus should be studied. Unlike
the existing papers, we focus speciﬁcally on R packages.

VII. CONCLUSIONS

R is a popular scientiﬁc programming language, with
growing adoption in analytics, statistical and mission-critical
software products. Therefore, the open source R packages
need to be studied for quality assurance like the presence of
Technical Debts (TDs). We developed ML models to detect
TD instances in existing packages from peer-review issue
comments. We then automatically labeled a large number of
R package review comments with our automated framework
and used them for our empirical study. Our distribution and
trend analyses show that TD frequency and growth-rate in R
packages varies from type to type. Our correlation analysis
provides strong evidence of interdependence among several
TD types. Further analysis reveals that documentation debt
is the most impactful one in terms of prevalence, growth,
and inﬂuence. We developed a browser extension using our
automated framework that alerts the users about TD instances
in existing rOpenSci packages. Our automated framework and
empirical study ﬁndings can be leveraged for similar study
involving diverse language and platforms. It can also be used
to detect TD in various existing packages using the issue
comments of their respective repositories.

ACKNOWLEDGMENTS

This research work was funded by grants and awards
from Natural Sciences and Engineering Research Council of
Canada (NSERC), University of Calgary, Alberta Innovates,
and Alberta Graduate Excellence Scholarship.

REFERENCES

[1] Bioconductor. https://github.com/Bioconductor. Accessed: 2021-10-20.
https://github.com/ropensci/
review.
[2] ropensci

software

peer

software-review. Accessed: 2021-10-20.

[3] Tamper monkey. https://www.tampermonkey.net/. Accessed: 2021-10-

20.

[4] M. Al-Barak and R. Bahsoon. Database design debts through examining
In 2016 IEEE 8th International Workshop on

schema evolution.
Managing Technical Debt (MTD), pages 17–23. IEEE, 2016.

[5] R. Alfayez, W. Alwehaibi, R. Winn, E. Venson, and B. Boehm. A
systematic literature review of technical debt prioritization. In Proceed-
ings of the 3rd International Conference on Technical Debt, pages 1–10,
2020.

[6] E. Allman. Managing technical debt. Communications of the ACM,

55(5):50–55, 2012.

[7] N. S. Alves, T. S. Mendes, M. G. de Mendonc¸a, R. O. Sp´ınola, F. Shull,
Identiﬁcation and management of technical debt:
Information and Software Technology,

and C. Seaman.
A systematic mapping study.
70:100–121, 2016.

[8] A. Ampatzoglou, A. Ampatzoglou, A. Chatzigeorgiou, and P. Avgeriou.
The ﬁnancial aspect of managing technical debt: A systematic literature
review. Information and Software Technology, 64:52–73, 2015.

[9] P. Arabie, L. Hubert, G. De Soete, and A. Gordon. Hierarchical
classiﬁcation. ArabieP., HubertL., De SoeteG., & GordonA., Clustering
and classiﬁcation, pages 65–121, 1996.

[10] P. Avgeriou, P. Kruchten, R. L. Nord, I. Ozkaya, and C. Seaman.
Ieee software, 33(1):66–

Reducing friction in software development.
73, 2015.

[11] P. Avgeriou, P. Kruchten, I. Ozkaya, and C. Seaman. Managing technical
In Dagstuhl
debt in software engineering (dagstuhl seminar 16162).
Reports, volume 6. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik,
2016.

[12] W. N. Behutiye, P. Rodr´ıguez, M. Oivo, and A. Tosun. Analyzing the
concept of technical debt in the context of agile software development:
Information and Software Technology,
A systematic literature review.
82:139–158, 2017.

[13] S. Bellomo, R. L. Nord, I. Ozkaya, and M. Popeck. Got technical debt?
surfacing elusive technical debt in issue trackers. In 2016 IEEE/ACM
13th Working Conference on Mining Software Repositories (MSR), pages
327–338. IEEE, 2016.

[14] T. Besker, A. Martini, and J. Bosch. Technical debt cripples software de-
veloper productivity: a longitudinal study on developers’ daily software
development work. In Proceedings of the 2018 International Conference
on Technical Debt, pages 105–114, 2018.

[15] T. Besker, A. Martini, R. E. Lokuge, K. Blincoe, and J. Bosch.
Embracing technical debt, from a startup company perspective. In 2018
IEEE International Conference on Software Maintenance and Evolution
(ICSME), pages 415–425. IEEE, 2018.

[16] R. Blagus and L. Lusa. Smote for high-dimensional class-imbalanced

data. BMC bioinformatics, 14:106, 03 2013.

[17] C. Boettiger, S. Chamberlain, E. Hart, and K. Ram. Building software,
building community: lessons from the ropensci project. Journal of open
research software, 3(1), 2015.

[18] F. Buschmann. To pay or not to pay technical debt.

IEEE software,

28(6):29–31, 2011.

[19] P. Chaitra and D. R. S. Kumar. A review of multi-class classiﬁcation

algorithms. Int. J. Pure Appl. Math, 118(14):17–26, 2018.

[20] P. Chakraborty, R. Shahriyar, A. Iqbal, and G. Uddin. How do developers
discuss and support new programming languages in technical q&a site?
an empirical study of go, swift, and rust in stack overﬂow. Information
and Software Technology (IST), page 19, 2021.

[21] Z. Codabux, M. Vidoni, and F. H. Fard. Technical debt in the peer-review
documentation of r packages: a ropensci case study. arXiv preprint
arXiv:2103.09340, 2021.

[22] Z. Codabux, B. J. Williams, G. L. Bradshaw, and M. Cantor. An
empirical assessment of technical debt practices in industry. Journal
of software: Evolution and Process, 29(10):e1894, 2017.

[23] F. Colas and P. Brazdil. Comparison of svm and some older classiﬁcation
In IFIP International Confer-
algorithms in text classiﬁcation tasks.
ence on Artiﬁcial Intelligence in Theory and Practice, pages 169–178.
Springer, 2006.

[24] W. Cunningham. The wycash portfolio management system. ACM

SIGPLAN OOPS Messenger, 4(2):29–30, 1992.

[25] E. da Silva Maldonado, E. Shihab, and N. Tsantalis. Using natural
language processing to automatically detect self-admitted technical debt.
IEEE Transactions on Software Engineering, 43(11):1044–1062, 2017.
[26] P. Debois. Agile infrastructure and operations: how infra-gile are you?

In Agile 2008 Conference, pages 202–207. IEEE, 2008.

[27] J. Devlin, M.-W. Chang, K. Lee, and K. Toutanova. BERT: Pre-training
of deep bidirectional transformers for language understanding. Technical
report, https://arxiv.org/abs/1810.04805, 2018.

[28] S. Dumais et al. Using svms for text categorization. IEEE Intelligent

Systems, 13(4):21–23, 1998.

[29] H. Erdogmus. Comparative evaluation of software development strate-
In International Workshop on
gies based on net present value.
Economics-Driven Software Engineering Research EDSER, volume 1,
1999.

[30] C. Fern´andez-S´anchez, J. D´ıaz, J. P´erez, and J. Garbajosa. Guiding
In 2014 47th Hawaii
ﬂexibility investment
in agile architecting.
International Conference on System Sciences, pages 4807–4816. IEEE,
2014.

[31] R. C. Gentleman, V. J. Carey, D. M. Bates, B. Bolstad, M. Dettling,
S. Dudoit, B. Ellis, L. Gautier, Y. Ge, J. Gentry, et al. Bioconductor: open
software development for computational biology and bioinformatics.
Genome biology, 5(10):1–16, 2004.

[32] S. Gonz´alez-Carvajal and E. C. Garrido-Merch´an. Comparing bert
against traditional machine learning text classiﬁcation. arXiv preprint
arXiv:2005.13012, 2020.

[33] A. Graves and J. Schmidhuber.

Framewise phoneme classiﬁcation
with bidirectional lstm and other neural network architectures. Neural
networks, 18(5-6):602–610, 2005.

[34] T. Hall, M. Zhang, D. Bowes, and Y. Sun. Some code smells have a
signiﬁcant but small effect on faults. ACM Transactions on Software
Engineering and Methodology (TOSEM), 23(4):1–39, 2014.

[35] J. Y. Khan, M. T. I. Khondaker, G. Uddin, and A. Iqbal. Automatic
detection of ﬁve api documentation smells: Practitioners’ perspectives.
In IEEE International Conference on Software Analysis, Evolution and
Reengineering (SANER), page 12, 2021.

[36] D. P. Kingma and J. Ba. Adam: A method for stochastic optimization.

arXiv preprint arXiv:1412.6980, 2014.

[37] P. Kruchten, R. L. Nord, and I. Ozkaya. Technical debt: From metaphor

to theory and practice. Ieee software, 29(6):18–21, 2012.

[38] P. Kruchten, R. L. Nord, I. Ozkaya, and D. Falessi. Technical debt:
towards a crisper deﬁnition report on the 4th international workshop on
managing technical debt. ACM SIGSOFT Software Engineering Notes,
38(5):51–54, 2013.

[39] X. Li, L. Bing, W. Zhang, and W. Lam. Exploiting bert for end-to-
end aspect-based sentiment analysis. arXiv preprint arXiv:1910.00883,
2019.

[40] Z. Li, P. Avgeriou, and P. Liang. A systematic mapping study on
technical debt and its management. Journal of Systems and Software,
101:193–220, 2015.

[41] Z. Li, P. Liang, and P. Avgeriou. Architectural technical debt identiﬁca-
tion based on architecture decisions and change scenarios. In 2015 12th
Working IEEE/IFIP Conference on Software Architecture, pages 65–74.
IEEE, 2015.

[42] E. Lim, N. Taksande, and C. Seaman. A balancing act: What software
practitioners have to say about technical debt. IEEE software, 29(6):22–
27, 2012.

[43] P. Liu, X. Wang, C. Xiang, and W. Meng. A survey of text data augmen-
tation. In 2020 International Conference on Computer Communication
and Network Security (CCNS), pages 191–195. IEEE, 2020.
[44] Z. Liu, Q. Huang, X. Xia, E. Shihab, D. Lo, and S. Li.

Satd
detector: A text-mining-based self-admitted technical debt detection
tool. In Proceedings of the 40th International Conference on Software
Engineering: Companion Proceeedings, pages 9–12, 2018.

[45] I. Loshchilov and F. Hutter. Decoupled weight decay regularization.

arXiv preprint arXiv:1711.05101, 2017.

[46] E. d. S. Maldonado, R. Abdalkareem, E. Shihab, and A. Serebrenik. An
empirical study on the removal of self-admitted technical debt. In 2017
IEEE International Conference on Software Maintenance and Evolution
(ICSME), pages 238–248. IEEE, 2017.

[47] C. D. Manning, P. Raghavan, and H. Sch¨utze. An Introduction to

Information Retrieval. Cambridge Uni Press, 2009.

[48] R. Marinescu. Assessing technical debt by identifying design ﬂaws in
software systems. IBM Journal of Research and Development, 56(5):9–
1, 2012.

[49] A. Martini, J. Bosch, and M. Chaudron.

Investigating architectural
technical debt accumulation and refactoring over time: A multiple-case
study. Information and Software Technology, 67:237–253, 2015.
[50] G. A. Miller. Wordnet: a lexical database for english. Communications

of the ACM, 38(11):39–41, 1995.

[51] A. Y. Ng, M. I. Jordan, and Y. Weiss. On spectral clustering: Analysis
and an algorithm. In Advances in neural information processing systems,
pages 849–856, 2002.

[52] N. Nikolaidis, D. Zisis, A. Ampatzoglou, A. Chatzigeorgiou, and
D. Soudris. Experience with managing technical debt in scientiﬁc
IEEE Access,
software development using the exa2pro framework.
9:72524–72534, 2021.

[53] J. Pennington, R. Socher, and C. D. Manning. Glove: Global vectors for
word representation. In Proceedings of the 2014 conference on empirical
methods in natural language processing (EMNLP), pages 1532–1543,
2014.

[54] A. Potdar and E. Shihab. An exploratory study on self-admitted technical
debt. In 2014 IEEE International Conference on Software Maintenance
and Evolution, pages 91–100. IEEE, 2014.

[55] L. Prechelt. Automatic early stopping using cross validation: quantifying

the criteria. Neural Networks, 11(4):761–767, 1998.

[56] L. Prechelt. Early stopping-but when? In Neural Networks: Tricks of

the trade, pages 55–69. Springer, 1998.

[57] L. Rantala. Towards better technical debt detection with nlp and machine
learning methods. In 2020 IEEE/ACM 42nd International Conference
on Software Engineering: Companion Proceedings (ICSE-Companion),
pages 242–245. IEEE, 2020.

[58] X. Ren, Z. Xing, X. Xia, D. Lo, X. Wang, and J. Grundy. Neural
network-based detection of self-admitted technical debt: From perfor-
mance to explainability. ACM transactions on software engineering and
methodology (TOSEM), 28(3):1–45, 2019.

[59] N. Rios, M. G. de Mendonc¸a Neto, and R. O. Sp´ınola. A tertiary study
on technical debt: Types, management strategies, research trends, and
base information for practitioners. Information and Software Technology,
102:117–145, 2018.

[60] N. Rios, L. Mendes, C. Cerdeiral, A. P. F. Magalh˜aes, B. Perez, D. Cor-
real, H. Astudillo, C. Seaman, C. Izurieta, G. Santos, et al. Hearing
the voice of software practitioners on causes, effects, and practices to
In International Working Conference
deal with documentation debt.
on Requirements Engineering: Foundation for Software Quality, pages
55–70. Springer, 2020.

[61] L. Rosasco, E. D. Vito, A. Caponnetto, M. Piana, and A. Verri. Are loss

functions all the same? Neural Computation, 16(5):1063–1076, 2004.

[62] C. Seaman and Y. Guo. Measuring and monitoring technical debt. In
Advances in Computers, volume 82, pages 25–46. Elsevier, 2011.
[63] F. Sebastiani. Machine learning in automated text categorization. ACM

computing surveys (CSUR), 34(1):1–47, 2002.

[64] G. Sierra, E. Shihab, and Y. Kamei. A survey of self-admitted technical

debt. Journal of Systems and Software, 152:70–82, 2019.

[65] C. N. Silla and A. A. Freitas. A survey of hierarchical classiﬁcation
across different application domains. Data Mining and Knowledge
Discovery, 22(1):31–72, 2011.

[66] D. Silva-Palacios, C. Ferri, and M. J. Ram´ırez-Quintana.

Improving
performance of multiclass classiﬁcation by inducing class hierarchies.
Procedia Computer Science, 108:1692–1701, 2017.

[67] C. Spearman. The proof and measurement of association between two

things. 1961.

[68] K. Z. Sultana, Z. Codabux, and B. Williams. Examining the relationship
of code and architectural smells with software vulnerabilities. In 2020
27th Asia-Paciﬁc Software Engineering Conference (APSEC), pages 31–
40. IEEE, 2020.

[69] C. Sun, X. Qiu, Y. Xu, and X. Huang. How to ﬁne-tune bert for text
classiﬁcation? In China National Conference on Chinese Computational
Linguistics, pages 194–206. Springer, 2019.

[70] D. A. Tamburri, P. Kruchten, P. Lago, and H. van Vliet. What is social
debt in software engineering? In 2013 6th International Workshop on
Cooperative and Human Aspects of Software Engineering (CHASE),
pages 93–96. IEEE, 2013.

[71] I. Tenney, D. Das, and E. Pavlick. Bert rediscovers the classical nlp

pipeline. arXiv preprint arXiv:1905.05950, 2019.

[72] E. Tom, A. Aurum, and R. Vidgen. A consolidated understanding of

technical debt. 2012.

[73] E. Tom, A. Aurum, and R. Vidgen. An exploration of technical debt.

Journal of Systems and Software, 86(6):1498–1516, 2013.

[74] D. Tsoukalas, D. Kehagias, M. Siavvas, and A. Chatzigeorgiou. Tech-
nical debt forecasting: an empirical study on open-source repositories.
Journal of Systems and Software, 170:110777, 2020.

[75] G. Uddin, O. Baysal, L. Guerroj, and F. Khomh. Understanding how
IEEE

and why developers seek and analyze api related opinions.
Transactions on Software Engineering, page 40, 2019.

[76] G. Uddin and F. Khomh. Automatic summarization of API reviews. In
Proc. 32nd IEEE/ACM International Conference on Automated Software
Engineering, page 12, 2017.

[77] G. Uddin and F. Khomh. Mining api aspects in api reviews. Tech-
nical report, https://swat.polymtl.ca/data/opinionvalue-technical-report.
pdf, 2017.

[78] G. Uddin and F. Khomh. Opiner: A search and summarization engine
for API reviews. In Proc. 32nd IEEE/ACM International Conference on
Automated Software Engineering, page 6, 2017.

[79] G. Uddin and F. Khomh. Automatic opinion mining from API reviews
IEEE Transactions on Software Engineering,

from stack overﬂow.
page 35, 2019.

[80] G. Uddin, F. Khomh, and C. K. Roy. Automatic api usage scenario
documentation from technical q&a sites. ACM Transactions on Software
Engineering and Methodology, page 43, 2020.

[81] G. Uddin, F. Khomh, and C. K. Roy. Automatic mining of api usage
Information and Software Technology

scenarios from stack overﬂow.
(IST), page 16, 2020.

[82] G. Uddin and M. P. Robillard. How api documentation fails.

IEEE

Softawre, 32(4):76–83, 2015.

[83] R. Verdecchia, P. Kruchten, and P. Lago. Architectural technical debt:
A grounded theory. In European Conference on Software Architecture,
pages 202–219. Springer, 2020.

[84] R. Verdecchia, P. Kruchten, P. Lago, and I. Malavolta. Building and
evaluating a theory of architectural technical debt in software-intensive
systems. Journal of Systems and Software, 176:110925, 2021.

[85] U. Von Luxburg. A tutorial on spectral clustering.

Statistics and

computing, 17(4):395–416, 2007.

[86] S. Wattanakriengkrai, R. Maipradit, H. Hata, M. Choetkiertikul,
T. Sunetnanta, and K. Matsumoto. Identifying design and requirement
self-admitted technical debt using n-gram idf. In 2018 9th International
Workshop on Empirical Software Engineering in Practice (IWESEP),
pages 7–12. IEEE, 2018.

[87] L. Xavier, F. Ferreira, R. Brito, and M. T. Valente. Beyond the
code: Mining self-admitted technical debt in issue tracker systems. In
Proceedings of the 17th International Conference on Mining Software
Repositories, pages 137–146, 2020.

[88] R. Xiang, E. Chersoni, Y. Long, Q. Lu, and C.-R. Huang. Lexical
data augmentation for text classiﬁcation in deep learning. In Canadian
Conference on Artiﬁcial Intelligence, pages 521–527. Springer, 2020.

[89] L. Xiao, Y. Cai, R. Kazman, R. Mo, and Q. Feng.

Identifying and
In 2016 IEEE/ACM 38th International
quantifying architectural debt.
Conference on Software Engineering (ICSE), pages 488–498. IEEE,
2016.

[90] M. Yan, X. Xia, E. Shihab, D. Lo, J. Yin, and X. Yang. Automating
change-level self-admitted technical debt determination. IEEE Transac-
tions on Software Engineering, 45(12):1211–1229, 2018.

[91] Z. Yu, F. M. Fahid, H. Tu, and T. Menzies. Identifying self-admitted
technical debts with jitterbug: A two-step approach. IEEE Transactions
on Software Engineering, 2020.

[92] N. Zazworka, M. A. Shaw, F. Shull, and C. Seaman. Investigating the
impact of design debt on software quality. In Proceedings of the 2nd
Workshop on Managing Technical Debt, pages 17–23, 2011.

[93] N. Zazworka, M. A. Shaw, F. Shull, and C. Seaman. Investigating the
impact of design debt on software quality. In Proceedings of the 2nd
Workshop on Managing Technical Debt, pages 17–23, 2011.

[94] N. Zazworka, R. O. Sp´ınola, A. Vetro’, F. Shull, and C. Seaman. A
In Proceedings
case study on effectively identifying technical debt.
of the 17th International Conference on Evaluation and Assessment in
Software Engineering, pages 42–47, 2013.

[95] N. Zazworka, A. Vetro, C. Izurieta, S. Wong, Y. Cai, C. Seaman, and
F. Shull. Comparing four approaches for technical debt identiﬁcation.
Software Quality Journal, 22(3):403–426, 2014.

[96] W. Zhang, T. Yoshida, and X. Tang. Text classiﬁcation based on
multi-word with support vector machine. Knowledge-Based Systems,
21(8):879–886, 2008.

