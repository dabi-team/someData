Data Programming by Demonstration:
A Framework for Interactively Learning Labeling Functions

Sara Evensen
Megagon Labs
Dongjin Choi*
Georgia Tech

Chang Ge*
University of Waterloo
Ça˘gatay Demiralp
Megagon Labs

0
2
0
2

p
e
S
5
1

]

G
L
.
s
c
[

3
v
4
4
4
1
0
.
9
0
0
2
:
v
i
X
r
a

ABSTRACT
Data programming is a programmatic weak supervision ap-
proach to efficiently curate large-scale labeled training data.
Writing data programs (labeling functions) requires, however,
both programming literacy and domain expertise. Many sub-
ject matter experts have neither programming proficiency nor
time to effectively write data programs. Furthermore, regardless
of one’s expertise in coding or machine learning, transferring
domain expertise into labeling functions by enumerating rules
and thresholds is not only time consuming but also inherently
difficult. Here we propose a new framework, data programming
by demonstration (DPBD), to generate labeling rules using in-
teractive demonstrations of users. DPBD aims to relieve the
burden of writing labeling functions from users, enabling them
to focus on higher-level semantics such as identifying relevant
signals for labeling tasks. We operationalize our framework with
RULER, an interactive system that synthesizes labeling rules for
document classification by using span-level annotations of users
on document examples. We compare RULER with conventional
data programming through a user study conducted with 10 data
scientists creating labeling functions for sentiment and spam
classification tasks. We find that RULER is easier to use and learn
and offers higher overall satisfaction, while providing discrim-
inative model performances comparable to ones achieved by
conventional data programming.

INTRODUCTION

1
Machine learning (ML) models used in practice today are pre-
dominantly supervised models and rely on large datasets labeled
for training. However, the cost of collecting and maintaining
labeled training data remains a bottleneck for training high-
capacity supervised models [26]. Data programming [5, 23, 24]
aims to address the difficulty of collecting labeled data by using
a programmatic approach to weak supervision by heuristics,
where domain experts are expected to provide data programs (la-
beling functions) incorporating their domain knowledge. Prior
work on data programming focuses on modeling and aggregat-
ing labeling functions written manually [23, 24] or generated
automatically [12, 39] to denoise labeling functions.

Writing data programs can be, however, challenging and time
consuming. Most domain experts or lay users have no or little
programming literacy, and even for those who are proficient
programmers, it is often difficult to convert domain knowledge
to a set of rules by writing programs.

To address these challenges, we introduce data programming
by demonstration (DPBD), a new framework that aims to make
creating labeling functions easier by learning them from users’
interactive visual demonstrations. DPBD moves the burden of
writing labeling functions to an intelligent synthesizer while

Figure 1: Overview of the data programming by demon-
stration (DPBD) framework. Straight lines indicate the
flow of domain knowledge, and dashed lines indicate the
flow of data.
enabling users to steer the synthesis process at multiple seman-
tic levels, from providing rationales relevant for their labeling
choices to interactively filtering the proposed functions. DPBD
draws from two lines of prior research; programming by demon-
stration (PBD) or example (PBE), e.g., [31, 35], which aims
to make programming easier by synthesizing them based on
user interactions or input and output examples, and interactive
learning from user-provided features or rationales [30, 41].

We operationalize our framework with RULER, an interac-
tive system that enables more accessible data programming
to create labeled training datasets for document classification.
RULER automatically generates document level labeling rules
from span-level annotations and their relations on specific ex-
amples provided by users. Through a user study conducted with
10 data scientists, we evaluate RULER alongside manual data
programming using Snorkel [24]. We measure the predictive
performances of models created by participants for two common
labeling tasks, sentiment classification and spam detection. We
also elicit ratings and qualitative feedback from participants
on multiple measures, including ease of use, ease of learning,
expressivity, and overall satisfaction. We find RULER facilitates
more accessible creation of labeling functions without a loss in
the quality of learned labeling models.

Tagging or token level classification in text documents is
another widely used task that can benefit from DPBD. Here
we also briefly discuss our work in progress on TAGRULER, a
DPBD system that learns token labeling functions through user
interaction to create training datasets for tagging models.

In summary, we contribute (1) DPBD, a general data inde-
pendent framework for learning labeling rules by interactive
demonstration; (2) RULER, an interactive system operational-
izing our framework for document classification tasks; and (3)
a comparative user study conducted with data scientists in per-
forming real world tasks to evaluate RULER and conventional
data programming. We have made our research artifacts, includ-
ing the RULER code and demo, publicly available 1.

*Work done during internship at Megagon Labs.

1https://github.com/megagonlabs/ruler

1

DataLabeling InterfaceTo label dataSynthesizerLabeler New record to labelLabeling functions Active Sampler Modeler Labeling modelExtended rulesModel qualityLabeling ruleStatistics  
 
 
 
 
 
2 DPBD FRAMEWORK
Problem Statement Given a dataset D = {d1,...,dm } of data
records and a set of labels L = {l1,...,ln }, we aim to develop a
framework that enables human labelers to interactively assign a
label from L for each data record efficiently sampled from D ′ ⊂ D
(|D ′| ≪ |D|), while demonstrating their rationales for label as-
signments through visual interaction. Given a triplet (d ′
i ,vi ,lj ) of
a data record, a visual interaction from the labeler, and the label
assigned, we want this framework to effectively synthesize and
propose labeling rules Ri j = {r1,...,rk } for the labeler to choose
from. Finally, we want the framework to optimally aggregate all
the chosen rules (labeling functions) in order to create a labeled
training set from D \ D ′ with probabilistic labels in order to
subsequently train discriminative models on it.
Framework Overview The data programming by demonstra-
tion (DPBD) framework (Figure 1) has two input sources: the hu-
man labeler, and the data that is to be labeled. The labeler is the
subject matter expert who has sufficient domain understanding to
extract useful signals from data. Given a dataset, our framework
enables the labeler to label each record with a categorical label,
while providing their labeling rationales by interactively mark-
ing relevant parts of the record and specifying semantics and
relationships among them. The output is a labeling model, which
is trained to automatically produce labels for the large set of un-
labeled data. The DPBD framework has four main components,
labeling interface, synthesizer, modeler, and active sampler.

2.1 Labeling Interface
The labeling interface is the workplace where the labeler en-
codes domain knowledge into labeling rules. It provides a way to
express noisy explanations for labeling decisions using a visual
interaction language, which allows the user to express domain
knowledge without having to formalize their ideas into com-
puter programs or natural language explanations. This allows
for more focus on patterns in the data while abstracting away
any implementation concerns.
Generalized Labeling Model Inspired by the entity-relationship
model [3] in database modeling, the generalized labeling model
(GLM) models the data records with concepts and relationships.
The GLM views the data record as a series of tokens, where a to-
ken is a continuous subset of a record with no semantics attached.
For example, in text data, a token can be any span (single char
to multiple words) of the data record; in an image data record, it
would be a 2D region, rectangular or free form; and in an audio
data record, it would be a 1D window of the data record (e.g.,
a phoneme). A concept is a group of tokens that the labeler be-
lieves share common semantics. For instance, over text data, the
labeler might define a concept of positive adjectives consisting
of a set of tokens, each of which can imply a positive review.
When labeling audio data, the labeler might create a concept
to aggregate all clips that express excitement, or of a specific
speaker. This abstraction allows the user to teach the GLM which
generalizations are relevant to the task. A relationship represents
a binary correlation between token-token, token-concept, or
concept-concept. Some examples are membership (e.g., a token
is in a concept), co-existence (e.g., opinion and aspect tokens),
and positional (e.g., a person is standing left to a table [10]).
Mapping GLM Elements to Operations Given the GLM spec-
ification described above, our framework also defines the opera-
tions that can be applied on GLM elements. Table 1 lists the GLM

2

Table 1: Mapping from GLM elements to operations in the
labeling interface.

GLM Element

Operations

token
concept
relationship

select, assign_concept
create, add, delete
link, direct_to

elements and the corresponding operations. The implementation
of both the labeling interface and the operations described in
Table 1 would vary across data types and token definitions. To
add expressivity, the GLM may also perform transformations
over the set of tokens, as we describe in the next section.

Compiling Operations into Labeling Rules Once the labeler
finishes annotating an example using the provided operations,
and selects a label, the tokens are extracted from the annotation
and used as the initial set of conditions from which to build rules.
The synthesizer combines these conditions into labeling rules by
selecting subsets of the conditions to be combined with different
conjunctive formulas, according to the relationships the user
has annotated. The synthesizer extends the initial set of labeling
rules and presents the extended labeling rules for the labeler to
select from, choosing desired ones based on domain knowledge.
A labeling rule serves as an intermediate language, inter-
pretable by both the labeler and the synthesizer. In our frame-
work, we adopt the notation of domain relational calculus [34]
to represent these rules, which can be expressed as: {tokens |
conditions} ⇒ label. The variable tokens is a sequence
of tokens with existential quantification, and conditions is
a conjunctive formula over boolean predicates that is tested over
tokens on a data record.

The predicates are first-order expressions, and each can be ex-
pressed as a tuple (T ,lhs,op,rhs). T is an optional transformation
function on a token identifier, a process of mapping the raw token
to more generalized forms. Some example transformations are
word lemmatization in text labeling, speech-to-text detection in
audio labeling, or object recognition in image labeling. lhs is
a token, while rhs is can be either token, literal or a set. If rhs
denotes a token, the transformation function T may also apply to
rhs. op is an operator whose type depends on the type of rhs. If
rhs is a token or literal, op detects a positional or an (in)equality
relationship. Otherwise, if rhs is a set, op is one of the set oper-
ators {∈,(cid:60)}. Since the conditions is in the conjunctive form,
the order of labeler’s interactions does not matter.
Example: Consider the following review for the binary senti-
ment classification (positive or negative) task:

This book was so great! I loved and read it

so many times that I will soon have to buy a
new copy.

If the labeler thinks this data record has a positive sentiment,
she can express her decision rationale using GLM. First, she
may select two tokens that are related to the sentiment: book
and great. Assume there are two concepts the labeler previ-
ously created: (1) item= {book, electronics}; and (2)
padj= {wonderful}. The labeler realizes the token great
can be generalized by the padj concept, which means that the
labeling rule will still be valid if this token is replaced by any
tokens in the concept, so she adds this token to the concept.

Finally, the labeler creates a positional relationship from
book to token great to indicate that they appear in the same

sentence, before completing the labeling process. These oper-
ations compile into the labeling rule r : {t1,t2 | t1 = book∧t2 ∈
□
padj∧idx(t1) <idx(t2)} ⇒ positive.
This rule is sent to the synthesizer for expansion and program

synthesis.

2.2 Synthesizer
Given the compiled labeling rule from the labeling interface, the
synthesizer extends one single labeling rule from labeler’s inter-
action to a set of more general labeling rules; and translates those
labeling rules into computer programs. It is straightforward to
translate the rules into executable computer programs (labeling
functions), so in this section, we focus on how to synthesize the
extended labeling rules.

Given the labeling rule compiled from a labeler’s interaction,
the synthesizer generates more labeling rules while optimizing
two competing goals: maximizing generalization, so that more
(unseen) data can be accurately labeled; and maximizing the
coverage of the labeler’s interaction, simply because labeler’s
interaction is the most valuable signal for labeling based on the
domain knowledge. Of course, the larger the set of annotations
in an interaction, the larger the set of labeling functions that can
be synthesized. To keep rule selection as easy as possible for
the user, in this case we prioritize rules that cover more of the
interaction, assuming that there is little redundancy.

We achieve generalization of the given rules using the fol-
lowing heuristics: (1) substituting tokens with concepts; (2) re-
placing general coexistence relationships with position-specific
ones; and (3) applying the available transformations over the
tokens (for example, object recognition in a section of an image).
Once the extended rules are generated, the rules are ranked by
their generalization score—a measurement of how applicable
a certain rule is. We define a data-independent generalization
score for a labeling rule r as: G(r ) = (cid:206)
c ∈r .conds |c.rhs |. Intu-
itively, G(r ) is calculated by counting how many different data
instances that r can be used.
Example: Continuing with our Amazon review example, the
synthesizer can derive the following labeling rules from r using
these heuristics:

(1) {t1,t2 | t1 ∈ item∧t2 ∈ padj} ⇒ positive
(2) {t1, t2 | t1 ∈ item ∧ t2 ∈ padj ∧ idx (t1) < idx (t2)} ⇒

positive

(3) {t1,t2 | t1 = book∧t2 ∈ padj} ⇒ positive

Note that labeling rule (1) is more general than (2) and (3) be-
cause all data records that can be labeled by (2) and (3) will be
□
labeled the same way using labeling rule (1).
The top-k candidates ranked by the generalization score are
displayed in the labeling interface for the labeler to accept or
reject.

2.3 Modeler
The modeler component trains a model that can be used to auto-
matically annotate unlabeled datasets. Naively aggregating the
labeling functions can be either inaccurate (since labeling func-
tions can be conflicting and correlated), or does not scale with
a large set of unlabeled data [24]. Instead, the modeler encap-
sulates the ideas from traditional data programming [5, 23–25]
to first build a generative model to denoise labeling functions,
and then train a discriminative model to leverage other features
beyond what are expressed by the labeling functions.

Figure 2: RULER user interface. RULER synthesizes labeling
rules based on rationales expressed by users by interac-
tively marking relevant parts of the example and specifying
implied group or pairwise semantic relations among them.

2.4 Active Sampler
To improve the model quality at faster rates, our framework uses
an active sampler to choose the next data record for labeling. The
active sampler can be plugged in with any custom active learning
policy. By default, it selects the data record x ∗ with the highest en-
tropy (i.e., the one that the labeling model is currently the most
uncertain about): x ∗ = argmaxx −(cid:205)|L |
i pθ (Li | x)logpθ (Li | x)
where pθ (Li | x) is the probability that example x belongs to
class Li , as predicted by the trained label model.

3 RULER
RULER is an interactive system that implements the data pro-
gramming by demonstration (DPBD) framework to facilitate
labeled training data preparation for document-level text clas-
sification models. For this, RULER leverages span-level features
and relations in text documents demonstrated through visual
interactions by users (labelers). To begin a labeling task, the data
owner needs to upload their unlabelled dataset, in addition to a
small labeled development set, and optionally a small test and
validation set. This mirrors the data requirements of Snorkel,
which the underlying DPBD modeler encapsulates. We next
discuss the user interface and interactions of RULER along with
its implementation details in operationalizing DPBD for text.

3.1 User Interface and Interactions
Recall that the purpose of the labeling interface in DPBD ( Sec-
tion 2.1) is to enable the labeler to encode domain knowledge into
rules through visual interaction. To this end, RULER interface
provides affordances through 6 basic views (Figure 2), which
we briefly describe below—the letters A-F refer to annotations
in Figure 2.
Labeling Pane (A) is the main view where the user interacts
with document text. Labeling Pane (Figure 3) shows contents of
a single document at a time and supports all the labeling oper-
ations defined by the GLM in the context of text data. The user
can annotate spans either by highlighting them directly with the
cursor or adding them to a concept. These spans can be linked
together if the relationship between them is significant to the

3

Figure 3: RULER Labeling Pane, where the user conveys do-
main knowledge using a visual interaction language. Anno-
tations are color coded by the concepts they are assigned to.

user. Once the user selects a document label (class) from the op-
tions displayed, the system synthesizes a diverse set of labeling
functions to suggest to the user.
Concepts Pane (B) allows users to create concepts, add and edit
tokens (whole words surrounded by non-alphabetical characters)
or regular expressions, and see annotations over their text auto-
matically added when a match is found (Figure 4). This interac-
tion allows users to abstract away details about specific language
use by grouping tokens or regular expressions into concepts.
Suggested Functions (C) shows the labeling functions sug-
gested by the system. The user can select any functions that
seem reasonable, and only then are they added to the underlying
labeling model that is iteratively built.
Labeling Statistics (D) displays current statistics of the label
model computed over the development set, and differential
changes incurred by the last data interaction. Because this panel
updates as the user interacts, they can quickly explore the space
of labeling functions with a very low cost in terms of time, com-
putation, and human effort.
End-model Statistics (E) shows the performance statistics for
an end model for which the user intends to collect training data.
For example, in our user study we used a logistic regression
model with a bag of words features on the generated training
data. This model is evaluated on a small held-out test set, and its
performance metrics are shown in this pane.
Selected Functions (F) lists of currently selected labeling rules
that make up the labeling model along and shows each rule’s
performance statistics based on the development set. The user
can click to open a details panel showing observed incorrect
labels and sample texts labeled by this function.

3.2 Server and Model
RULER’s backend comprises the synthesizer (Section 2.2), mod-
eler (Section 2.3) and active sampler (Section 2.4) components.
The backend components are all implemented in Python 3.6.

In addition to the function generation defined in Section 2.2,
RULER’s synthesizer also augments labeling rules using existing
text processing libraries. It enhances the text with transforma-
tions that recognize named entity types such as person and
location, extracted using the spaCy library [1]. These anno-
tations are made visible to the user, and annotations containing
named entities will generate functions that generalize to all in-
stances of that entity.

4

Figure 4: Left: Example concept created to capture nega-
tion. Right: example text highlighting as concept elements
are matched in the text, and annotations created once the
element is submitted.

In our implementation, relationships can include co-occurrence
in the same sentence as well as in the document. RULER encap-
sulates the Snorkel library [24] into its modeler to aggregate the
generated labeling functions.

4 EVALUATION
We evaluate RULER alongside manual data programming us-
ing Snorkel [24]. Our goal is to better understand the trade-offs
afforded by each method. To this end, we conducted a user
study with data scientists and measured their task performance
accuracy in completing two labeling tasks. In addition to task
performance, we also analyzed the accessibility and expressivity
of both methods using the qualitative feedback elicited from
participants.

Note that RULER can be used by programmers and non-
programmer domain experts alike, but a fair comparison with
Snorkel requires proficiency in conventional programming.
Participants We recruited 10 participants with Python program-
ming experience through our professional network. All partic-
ipants had significant programming experience (avg=12.1 years,
std=6.5). Their experience with Python programming ranged
from 2 to 10 years with an average of 5.2 years (std=2.8).
Experimental Design We carried out the study using a within-
subjects experiment design, where all participants performed
tasks using both conditions (tools). The sole independent vari-
able controlled was the method of creating labeling functions.
We counterbalanced the order in which the tools were used, as
well as which classification task we performed with which tool.
Tasks and Procedure We asked participants to write labeling
functions for two prevalent labeling tasks: spam detection and
sentiment classification. They performed these two tasks on
YouTube Comments and Amazon Reviews, respectively. Par-
ticipants received 15 mins of instruction on how to use each
tool, using a topic classification task (electronics vs. guns) over
a newsgroup dataset [38] as an example. We asked participants
to write as many functions as they considered necessary for the
goal of the task. There were given 30 mins to complete each
task and we recorded the labeling functions they created and
these functions’ individual and aggregate performances. After
completing both tasks, participants also filled out an exit survey,
providing their qualitative feedback.

For the manual programming condition, we provided a Jupyter
notebook interface based on the Snorkel tutorial. The notebook
had a section for writing functions, a section with diverse anal-
ysis tools, and a section to train a logistic regression model on
the labels generated.

Figure 5: Performances of the classifier models trained on
the probabilistic labels generated by participants’ labeling
models. Although manual programming allows partici-
pants to use existing packages (e.g., sentiment analysis
packages), RULER performs comparably with Snorkel in
both tasks.

5 RESULTS
To analyze the performance of the labeling functions created by
participants, for each participant and task, we select the labeling
model that achieved the highest f1 score on the development
set. For each labeling model, we then train a logistic regression
model on a training dataset generated by the model. We finally
evaluate the performance of the logistic regression model on
a heldout test set (400 examples). We also analyze the subjec-
tive ratings provided by participants on a Likert scale of 5 (1–5,
higher is better) in their exit surveys. We use the paired Wilcoxon
signed rank test to assess the significance of differences in predic-
tion metrics and subjective ratings between RULER and Snorkel.
We also report the effect size r for all our statistical comparisons.
Model Performance We find that RULER and Snorkel provide
comparable model performances (Figure 5). The logistic regres-
sion models trained on data produced by labeling models created
using RULER have slightly higher f1 (W = 35, p = 0.49, r = 0.24
), precision (W = 30, p = 0.85, r = 0.08), and recall (W = 25,
p = 0.85, r = 0.08) scores on average. Conversely, accuracy is
slightly higher (W = 17, p = 0.32, r = 0.15) for Snorkel mod-
els on average than RULER. However these differences are not
statistically significant.
Subjective Ratings and Preferences Participants find RULER
to be significantly easier to use (W = 34, p = 0.03 < 0.05, r = 0.72)
than Snorkel (Figure 6). Similarly, they consider RULER easier
to learn (W = 30, p = 0.1, r = 0.59) than Snorkel. On the other
hand, as we expected, participants report Snorkel to be more
expressive (W = 0, p = 0.05, r = 0.70) than RULER. However,
our participants appear to consider accessibility (ease of use and
ease of learning) to be more important criteria, rating RULER
higher (W = 43, p = 0.12, r = 0.51) than Snorkel for overall sat-
isfaction. These results show that RULER is more accessible and
offers better overall experience, while providing model perfor-
mance comparable to Snorkel. RULER can help data scientists
save time and create better models, either in conjunction with
traditional programming or alone. For the user who is not skilled
at programming, RULER is also the only tool available to help
leverage data programming with control over the functions.

6 RELATED WORK
We build on prior work on weak supervision, programming by
demonstration, and learning from feature annotations by users.
Weak Supervision To reduce the cost of labeled data collec-
tion, weak supervision methods leverage noisy, limited, or low

5

Figure 6: Participants’ subjective ratings on ease of use,
expressivity, ease of learning and overall satisfaction, on a
5-point Likert scale. RULER is considered by participants
to easier to use and learn, though using Snorkel alone is
considered to be more expressive.
precision sources such as crowdsourcing [14], distant supervi-
sion [19], and user-defined heuristics [32] to gather large training
data for supervised learning. Data programming [23, 24] is a
programmatic approach to weak supervision using heuristics,
where labeling functions provided by domain experts are used
to create training data at scale.
Program Synthesis by Demonstration Automated synthesis
of programs that satisfy a given specification is a classical ar-
tificial intelligence (AI) problem [40]. Generating programs
by examples or demonstration is an instance of this problem.
The terms programming by example (PBE), or programming
by demonstration (PBD) have often been used interchangeably,
though their adoption and exact meaning might diverge across
fields and applications. PBD systems aim to empower end user
programming in order to improve user productivity [4, 9, 11,
13, 16, 18, 37]. One of the core research questions in PBD is
how to generalize from seen examples or demonstrations. To
generalize, PBD systems need to resolve the semantic meaning
of user actions over relevant (e.g., data) items. Prior approaches
incorporate a spectrum of user involvement, from making no
inference (e.g., [33, 37]) to using AI models with no or min-
imal user involvement, to synthesize a generalized program
(e.g., [13, 15, 20, 31, 36]). Our framework takes a hybrid ap-
proach within the spectrum above and combines inference and
statistical ranking along with interactive demonstration.
Learning from Feature Annotations Prior work proposes meth-
ods for learning from user provided features [6, 17, 22], ratio-
nales [2, 29, 30, 41], and natural language explanations [12, 27].
BabbleLabble [12] uses a rule-based parser to turn natural lan-
guage explanations into labeling functions and aggregates these
functions using Snorkel. RULER also learns labeling functions
from high level imprecise explanations and aggregates them
using the Snorkel framework. However, RULER enables users to
supply their rationales through interactive visual demonstrations,
reducing the cognitive load to formalize one’s intuition.

7 TAGRULER
Another important task relevant to text documents is tagging,
the process of classifying token sequences in documents, e.g., as
name, person, organization, aspect, opinion, number, etc. Tag-
ging has many applications, including named entity recognition
(NER), information extraction, relation extraction, semantic role
labeling, and question answering. Curating training data for tag-
ging models can be a challenge, particularly in domains where
experts are needed for data labeling. Based on the DPBD frame-
work, we have been also developing TAGRULER (Figure 7), an

0.00.10.20.30.40.50.60.70.00.10.20.30.40.50.60.7f1accuracyprecisionrecallrulersnorkel1234512345ease of useexpressivityeaseoflearningoverallsatisfactionrulersnorkelREFERENCES
[1] Explosion AI. 2019.

Processing. https://spacy.io/

spaCy: Industrial-Strength Natural Language

[2] Shilpa Arora and Eric Nyberg. 2009. Interactive annotation learning with
indirect feature voting. In Proc. NAACL-HLT Student Research Workshop
and Doctoral Consortium.

[3] Peter P. Chen. 1976. The Entity-Relationship Model - Toward a Unified

View of Data. ACM Trans. Database Syst. (1976).

[4] Allen et al. 2007. Plow: A collaborative task learning agent. In AAAI, Vol. 7.

1514–1519.

[5] Bach et al. 2017. Learning the structure of generative models without

labeled data. In Proc. ICML.

[6] Druck et al. 2009. Active learning by labeling features. In Proc. EMNLP.
[7] Devlin et al. 2019. BERT: Pre-training of Deep Bidirectional Transformers

for Language Understanding. In Proc. NAACL-HLT.

[8] Fu et al. 2020. Fast and Three-rious: Speeding Up Weak Supervision with

Triplet Methods. arXiv:2002.11955

[9] Heer et al. 2015. Predictive Interaction for Data Transformation.. In Proc.

CIDR.

[10] Haldekar et al. 2017.

Identifying spatial relations in images using

convolutional neural networks. In IJCNN.

[11] Hanafi et al. 2017. SEER: Auto-Generating Information Extraction Rules

from User-Specified Examples. In Proc. CHI.

[12] Hancock et al. 2018. Training classifiers with natural language explanations.

In Proc. ACL.

[13] Jin et al. 2019. CLX: Towards verifiable PBE data transformation. In Proc.

EDBT.

[14] Karger et al. 2011. Iterative learning for reliable crowdsourcing systems.

In NIPS.

[15] Lau et al. 2003. Programming by demonstration using version space algebra.

Machine Learning (2003).

[16] Leshed et al. 2008. CoScripter: automating & sharing how-to knowledge

in the enterprise. In Proc. CHI.

[17] Liang et al. 2009. Learning from measurements in exponential families. In

Proc. ICML.

[18] Li et al. 2017. SUGILITE: creating multimodal smartphone automation

by demonstration. In Proc. CHI.

[19] Mintz et al. 2009. Distant supervision for relation extraction without labeled

data. In Proc. ACL.

[20] Menon et al. 2013. A machine learning framework for programming by

example. In Proc. ICML.

[21] Peters et al. 2018. Deep Contextualized Word Representations. In Proc.

NAACL-HLT.

[22] Raghavan et al. 2005. InterActive Feature Selection. In Proc. IJCAI.
[23] Ratner et al. 2016. Data programming: Creating large training sets, quickly.

In NIPS. 3567–3575.

[24] Ratner et al. 2017. Snorkel: Rapid training data creation with weak

supervision. Proc. VLDB (2017).

[25] Ratner et al. 2019. Training complex models with multi-task weak

supervision. In Proc. AAAI.

[26] Sculley et al. 2015. Hidden technical debt in machine learning systems. In

NIPS.

[27] Srivastava et al. 2017. Joint concept learning and semantic parsing from

natural language explanations. In Proc. EMNLP.

[28] Safranchik et al. 2020. Weakly Supervised Sequence Tagging from Noisy

Rules. In Proc. AAAI, Vol. 18. 1–67.

[29] Von Ahn et al. 2006. Peekaboom: a game for locating objects in images.

In Proc. CHI.

[30] Zaidan et al. 2007. Using “Annotator Rationales” to Improve Machine

Learning for Text Categorization. In Proc. NAACL-HLT.

[31] Sumit Gulwani. 2011. Automating String Processing in Spreadsheets Using

Input-output Examples. In Proc. POPL.

[32] Sonal Gupta and Christopher Manning. 2014. Improved pattern learning

for bootstrapped entity extraction. In Proc. CoNNL.

[33] Daniel C. Halbert. 1993. SmallStar: Programming by Demonstration in

the Desktop Metaphor. MIT Press.

[34] Michel Lacroix and Alain Pirotte. 1977. Domain-Oriented Relational

Languages. In Proc. VLDB.

[35] H. Lieberman. 2001. Your Wish is My Command: Programming by Example.

Morgan Kaufmann Publishers.

[36] Richard McDaniel and Brad Myers. 1999. Getting more out of programming-

by-demonstration. In Proc. CHI.

[37] Brad A Myers. 1998. Scripting graphical applications by demonstration.

In Proc. CHI.

[38] Jason Rennie and Ken Lang. 2008. The 20 Newsgroups data set.
[39] Paroma Varma and Christopher Ré. 2018. Snuba: automating weak

supervision to label training data.

[40] Richard J. Waldinger and Richard C. T. Lee. 1969. PROW: A Step Toward

Automatic Program Writing. In Proc. IJCAI.

[41] Omar Zaidan and Jason Eisner. 2008. Modeling annotators: A generative

approach to learning from annotator rationales. In Proc. EMNLP.

Figure 7: TAGRULER is a DPBD system that synthesizes
token level labeling functions based on user annotations.

interactive system for learning labeling functions by demonstra-
tion for document tagging. While TAGRULER shares the under-
lying framework and user interface characteristics with RULER,
it tackles a new set of challenges. First, the possibilities for in-
teractive demonstration, where the labeling task itself involves
span highlighting, are limited. This makes both intuitive visual
interaction design and effective automated inference based on
the context of user demonstrations critical. Second, the space of
labeling functions can be very large and therefore having fast and
effective synthesis and ranking is crucial. Third, due to the in-
creased number of labeling functions considered, computational
performance to sustain interactivity can be a bottleneck.

TAGRULER currently synthesizes two classes of rules based
on the semantic and syntactic analysis of the document context.
For semantic analysis, we use the pretrained language mod-
els BERT [7] and ELMo [21]. As for syntactic analysis, we
utilize part of speech (POS) and NER tags along with depen-
dency parsing. To aggregate functions synthesized, the system
provides four alternative models; a hidden Markov model [28],
FlyingSquid [8], Snorkel MeTaL [25], and a majority voting
based model. We are currently evaluating the tradeoffs among
these alternative models in the interactive setting of TAGRULER.

8 DISCUSSION
Accessibility is a key to wider adoption of any technology and
machine learning is no exception. Here we introduced data pro-
gramming by demonstration (DPBD), a general human-in-the-
loop framework that aims to ease writing labeling functions,
improving the accessibility and efficiency of data programming.
We then presented RULER, a DPBD system, for easily generating
labeling functions to create training datasets for document-level
classification tasks. RULER converts user rationales interactively
expressed as span-level annotations and relations among them
to labeling rules using the DPBD framework. We also reported
our progress in developing TAGRULER, a second DPBD system
focusing on labeling functions for tagging.

Through a user study with 10 data scientists performing real
world labeling tasks for classification, we evaluated RULER
together with conventional data programming and found that
RULER enables more accessible data programming without loss
in the performance of labeling models created. We believe DPBD
systems will be useful for data scientists as well as subject matter
experts. We release RULER as open source software to support
future applications and extended research.

6

