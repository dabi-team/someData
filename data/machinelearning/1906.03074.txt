Modeling e-Learners’ Cognitive and Metacognitive
Strategy in Comparative Question Solving

Feng Tian, Member, IEEE, Jia Yue, Kuo-ming Chao, Member, IEEE, Buyue Qian, Nazaraf Shah, Longzhuang Li,
Haiping Zhu, Member, IEEE, Yan Chen, Bin Zeng, Qinghua Zheng, Member, IEEE

1

9
1
0
2

n
u
J

4

]

Y
C
.
s
c
[

1
v
4
7
0
3
0
.
6
0
9
1
:
v
i
X
r
a

Abstract—Cognitive and metacognitive strategy had demon-
strated a signiﬁcant role in self-regulated learning (SRL), and
an appropriate use of strategies is beneﬁcial to effective learning
or question-solving tasks during a human-computer interaction
process. This paper proposes a novel method combining Knowl-
edge Map (KM) based data mining technique with Thinking
Map (TM) to detect learner’s cognitive and metacognitive strat-
egy in the question-solving scenario. In particular, a graph-
based mining algorithm is designed to facilitate our proposed
method, which can automatically map cognitive strategy to
metacognitive strategy with raising abstraction level, and make
the cognitive and metacognitive process viewable, which acts
like a reverse engineering engine to explain how a learner
thinks when solving a question. Additionally, we develop an
online learning environment system for participants to learn
and record their behaviors. To corroborate the effectiveness of
our approach and algorithm, we conduct experiments recruiting
173 postgraduate and undergraduate students, and they were
asked to complete a question-solving task, such as “What
are similarities and differences between array and pointer?”
from “The C Programming Language” course and “What are
similarities and differences between packet switching and circuit
switching?” from “Computer Network Principle” course. The
mined strategies patterns results are encouraging and supported
well our proposed method.

Index Terms—Cognitive Strategy, Metacognitive Strategy,
Knowledge Map, Thinking Map, Question-Solving, Online Learn-
ing System.

I. INTRODUCTION

I N recent years, cognition, metacognition and their strategies

have attracted a great deal of research interests from
academia and industry [1]–[3]. Cognition is about a think-
ing process, and metacognition is deﬁned as thoughts about
thoughts or cognition about cognitions [4]. The lack of e-
learners’ cognitive and metacognitive strategy monitoring or
without self-monitoring/self-assessment often leads to lower
learning efﬁciency [5], [6]. Hence, it is crucial to detect and
model cognitive/metacognitive strategies, in order to make
better human-computer interaction, such as providing a means

F. Tian, J. Yue, B. Qian, H. Zhu, Y. Chen, B. Zeng and Q. Zheng are with
the MOEKLINNS Lab, School of Electronic and Information Engineering,
Xi’an Jiaotong University, Xi’an 710049, P. R. China.
feng-
tian@mail.xjtu.edu.cn; yuejiayyzz@gmail.com; qianbuyue@mail.xjtu.edu.cn;
zeng-
zhuhaiping@mail.xjtu.edu.cn;
bin23@126.com; qhzheng@mail.xjtu.edu.cn).

chenyan@mail.xjtu.edu.cn;

(e-mail:

K.M. Chao and N. Shah are with the Faculty of Engineering and Comput-
ing, Coventry University, Priory Street, Coventry CV1 5FB, United Kingdom.
(e-mail: csx240@coventry.ac.uk; aa0699@coventry.ac.uk)

L. Longzhuang is with the Department Of Computing Sciences,
(e-mail:

A&M University-Corpus

Christi,

USA.

TX,

Texas
longzhuang.li@tamucc.edu)

for intelligent tutors to assess learners’ current knowledge and
skill levels, or helping students improve learning experience
and effectiveness. Traditionally, self-report questionnaires [7],
[8] and process tracing methodologies [9], [10] are adopted
to analyze the learners’ learning behaviors or cognition.
More recently, researchers have been developing data-mining
techniques, including hidden Markov models [11], sequential
pattern mining approaches [12], [13], coherence analysis [14],
clustering [15]–[17] and fuzzy decision trees method [18].

However, in most extant research aforementioned modeling
cognitive and metacognitive strategy [19], [20], and cognitive
activities (goal-setting & planning, knowledge construction,
monitoring and help-seeking) [12], [21] were usually modeled
in a general cognitive strategy level along with its procedural
knowledge (e.g., cognitive activity-based sequence pattern),
while the metacognitive strategy sits at the same level with
cognitive activities absence of hierarchical model hinders
manifestation of their relationships. We agree with the idea,
proposed by Kinnebrew et al. [22], that raising the level of
abstraction with context summarization from raw log events
to a canonical set of distinct actions is a vital ﬁrst step for
effective analysis. Even though the issue with hierarchy has
been resolved, there still exist three main obstacles. Firstly,
cognitive strategies can be developed in a generic way to serve
different domains or speciﬁc to a domain, but the current
approaches of modeling speciﬁc cognitive strategy seldom
consider the domain knowledge presentation or construction
for question solving when they apply general cognitive strat-
egy. Secondly, metacognitive strategies are in form of complex
constructs, not directly observable and problematic to extract.
Current research mainly focuses on human expert’s interpre-
tation and manual mapping between cognitive strategies and
metacognitive strategies [12], [21], [23], [24]. There is a lack
of systematic enabling method that automates mapping of
cognitive strategies to these metacognitive strategies by con-
sidering knowledge constructions in the context of the selected
subject, scope, and sequence (cognition strategy knowledge
and domain knowledge itself), when abstracting learner cog-
nitive strategies from a raw log. Thirdly, there lacks a visual
language to help portray cognitive and metacognition process
and their characteristics, especially for learning approaches.

Aimed at addressing these three problems, an approach to
combine Thinking Maps (TM) [25] with Knowledge Maps
(KM) [26], [27] is proposed to explore the structure and
process of e-learner cognitive strategy by applying TM-based
high-level abstraction in the context of KM. Generally, TM
is a common visual language for learning communities to

 
 
 
 
 
 
describe and visualize the thinking process, and a KM is a
directed graph as well as a semantic network composed of
nodes and edges. Each node is a knowledge unit, and each
edge represents a semantic relation between two knowledge
units. More detail on this will be discussed in Section III-C.
Combining TM and KM may throw a light on detecting
or recognizing individual cognitive and metacognitive strategy
simultaneously, especially in the scenarios of question solving.
Inspired by this idea and based on our team’s prior works
[19], [26], [28]–[30], we introduced the theory of TM to
detect and model cognitive and metacognitive strategies with
learners’ question solving behaviors acquired from our KM-
based e-learning system which includes the proposed mining
methods for cognitive and metacognitive strategies. This paper
mainly focuses on how learners solve questions by using their
cognitive and metacognitive strategies, so we eliminate factors
such as ambiguity of natural language, and complexity of
Natural Language Processing (NLP) to obtain the effectiveness
of the proposed methods and algorithms. In the experiments,
simple questions, like “What are similarities and differences
between array and pointer?” and “What are similarities and
differences between packet switching and circuit switching?”
are used to test learners and the system.

Below, we summarize our major contributions in this paper.

1) Propose a novel method that introduces a theory of
thinking maps into the KM-based data mining frame-
work to detect and model cognitive and metacognitive
strategies in scenario of question solving. In which,
a Knowledge Map is considered as a domain-speciﬁc
semantic knowledge structure that is not only a kind
of knowledge construction used for learning, but also a
knowledge base which an e-learner selects the learning
scope by using his/her cognitive strategies to solve
questions. Thinking Maps is a set of generic cognition
strategies with speciﬁc knowledge units and it acts as a
bridge for mapping cognition strategies to metacognitive
strategy that can be automated.

2) Provide a graph-shape description to different cogni-
tive strategies based on TM (cognitive planning with
speciﬁc knowledge units) as well as a sequence-style
metacognitive strategy (procedural knowledge of indi-
vidual cognitive strategy) based on mined results. The
TM theory provides a visual language to help reveal
e-learners’ question-solving behaviors and process of
cognitive and metacognitive. Their characteristics are
not only exhibited in a general-level but also in a
domain-speciﬁc-level, simultaneously. The mined results
are comprehensive so that they can help other students
with learning difﬁculties to compare and evaluate their
cognitive and metacognitive strategies with others.
3) Coin the corresponding deﬁnitions for designed data
mining algorithms. We developed an online learning
environment for learners and logged their learning be-
haviors when they carry out assignments task or solving
questions. The experimental results are quite encour-
aging, as they demonstrate the effectiveness of our
proposed frameworks and corresponding methods.

2

The rest of the paper is organized as follows. Section II
introduces some of related terminology of cognitive psychol-
ogy, and then reviews the state-of-the-arts methods of detecting
cognitive and metacognitive strategy and their limitations, and
then proposes our method. Section III is devoted to explaining
the motivation of this paper with the deﬁnition of 11 key
concepts through a representative example, presenting our
algorithm for modeling and detecting cognitive and metacog-
nitive strategy. Section IV describes the experimental setups
and summarizes the important results. Section V presents the
conclusion, discuss the limitation and future works.

II. BACKGROUND AND STATE OF THE ART REVIEW

First, we will brieﬂy introduce the basic notions, including
cognition, metacognition, cognitive strategy and metacognitive
strategy, general cognitive strategy and domain-speciﬁc cog-
nitive strategy, as well as their comparison. After that, related
works and detecting methods are reviewed in Section II-D.

A. Cognition and Cognitive Strategy

Cognition is a “mental process of acquiring knowledge and
understanding through thought, experience, and the senses”
[31]. The thinking processes analyzed from different per-
spectives within different contexts, notably discussed in the
ﬁelds of psychology, education and philosophy, etc. The term
“cognitive strategies” in its simplest form is the use of the mind
(cognition) to solve a question or complete a task. Pressley and
Woloshyn [32] hold the view that cognitive strategies can be
general or speciﬁc. General cognitive strategies can be applied
across many different disciplines and situations, such as sum-
marization or setting goals for what to accomplish, whereas
speciﬁc cognitive strategies tend to be narrow, and they are
speciﬁc to a task or a domain, such as drawing a picture to help
one see how to tackle a physics problem. A speciﬁc cognitive
strategy should also include the representation or construction
of domain knowledge.

B. Metacognition

In the 1970s, Flavell et al. [4] coined the deﬁnition of
metacognition as “cognition about cognitive phenomena,” or
more simply “thinking about thinking”. Metacognition refers
to higher order thinking that involves active control over the
cognitive processes involved in learning. Metacognition has
two constituent parts: knowledge about cognition and cognitive
regulation [33]–[35]. Knowledge of cognition includes declar-
ative cognitive knowledge and procedural cognitive knowledge
[36], [37].

Procedural knowledge involves awareness and management
of cognition, including knowledge about strategies [36]. Cog-
nitive regulation concerned individual ability of planning,
monitoring or regulating, and evaluating is a component of
metacognition. Especially, the ability of planning means that
learner can identify and select appropriate strategies and
allocate resources for learning. This feature enables procedu-
ral knowledge to interact with strategy knowledge to apply
different types of knowledge according to ﬁndings [4] (e.g.,

according to the current outcome, it is better to use strategy
A over strategy B to carry out task X). Researchers have
found that problem-solving activities require self-regulated
learning to be aware of the problem itself and to manage one’s
cognitive processes, and they suggested that metacognition can
guide goal-directed thinking when people are learning about
or solving their problems [1].

C. Comparison of Cognitive Strategy and Metacognitive Strat-
egy

Cognitive strategies are the basic mental abilities we use
to think, study, and learn (e.g., making associations between
or comparing different pieces of information), which provide
a structure for learning how to solve non-intuitive problems.
The strategies help an individual achieve a goal (e.g., solving
a math question) by analyzing and evaluating the required
information individually. In contrast, metacognitive strategies
are used to ensure that an overarching learning goal can be
achieved. Examples [38] of metacognitive activities include
planning of how to approach a learning task, using appropriate
skills and strategies to solve a problem, utilizing self-assessing
and self-correcting in response to the self-regulation, evaluat-
ing progress toward the completion of a task, and becoming
aware of distracting stimuli etc. The required procedural
knowledge of cognition to fulﬁll these abilities, however, is
more complex than a sequence-shape structure.

One of cognitive strategies, self-monitoring, can be used
to monitor metacognitive strategies. For example, one of the
major functions of self-regulation is to check themselves if
they have solved questions. However, metacognitive strategies
with complex constructs are not easy to extract due to their im-
plicit semantics. This leads to that the existing research cannot
automate the process of mapping between cognitive strategies
and metacognitive strategies [21], [24], but manually.

D. Modeling and Detecting Methods Review

The traditional approaches to measuring learner’s cognitive
and metacognitive strategies are based on questionnaires. For
example, Zimmerman and Martinez-Pons [39] conducted pilot
interviews with high school students. They were asked to
indicate in each topic which approaches they used to partic-
ipate, to study, and to complete their assignments. Though
the questionnaire approach that achieved 93% accuracy using
self-regulated learning (SRL) strategies, it failed to capture the
dynamic and adaptive nature of SRL, as it did not consider
the learning processes of students’ knowledge-building, and
problem-solving. Increasingly, researchers have focused more
attention on analyzing the data collected from tracing students’
learning process in a computer-based learning environment.
For example, Perry and Winne [10] categorized the activity
traces into four statistical ways, which are frequency of study
events, patterns of study activity, time and sequence of events,
and content analysis of students’ notes and summaries. Results
suggest that analytic on trace data give better comprehension
about how learners select, monitor, assemble, rehearse, and
translate information. This provides useful raw materials for
mapping SRL to learning effects.

3

In order to better understand learning process, data mining
techniques have been adopted to measure learning or question-
solving behaviors. Perera et al. [15] applied k-means clustering
to ﬁnd groups of similar teams and similar individual mem-
bers, and then used sequential pattern mining algorithms to
extract sequences of frequent events. Specially, Kinnebrew and
Biswas have been researching metacognitive and SRL strategy
in the past decade, which includes a series of methods to
analyze learning behaviors. In 2011, they incorporated HMMs
and exploratory data mining methodology for assessing and
comparing students’ learning behaviors from traces [11]. They
employed a combination of sequence mining techniques to
identify differential frequent patterns between groups of stu-
dents in [22], analyzed the evolution of students’ frequent
behavior patterns over time in [13], used coherence analysis
to characterize SRL behaviors in [14], developed a framework
that combines model-driven strategy detection with data-driven
pattern discovery for analyzing students’ learning activity
data in [40], etc. Segedy et al. [21] proposed an integrated
cognitive and metacognitive model for effective, self-regulated
student
learning in the Betty’s Brain environment, while
manually designing the mapping between the metacognitive
and cognitive activities in their project
includes four
aspects: goal-setting and planning, knowledge construction,
monitoring and help-seeking. Particularly, in order to evaluate
metacognition while individuals are learning a new task, Kim
et al. [1] proposed a fuzzy linear regression model to analyze
the relationship between retrospective conﬁdence judgments
(RCJ) and situation awareness (SA).

that

However, most of the existing researches seldom consider
domain-speciﬁc knowledge constructions, they lack an auto-
matic mapping mechanism between metacognitive strategies
and activities, or fail to make the cognitive and metacognitive
process visualized. These challenges have not been addressed.
For example, the research from Kinnebrew et al. have a visual
causal map that represents the relevant science phenomena as a
set of entities connected by directed links that represent causal
relations, called Betty’s Brain [41]. It, however, was unable to
overcome the other two challenges [42], [43].

In the constructivist’s viewpoint, an integrated approach to
the construction of procedural knowledge that should include
discovery and acquisition of appropriate domain knowledge
as well as subject choice, content scope selection, and se-
the challenges of forming
quence of learning. Therefore,
metacognition are not only to elicit procedural knowledge, but
also to determine the domain scope and acquire appropriate
knowledge.

With the development of knowledge engineering and edu-
cational psychology research, some recent outcomes, such as
Thinking Maps (TM) and Knowledge Maps (KM), provide
some basis of recognizing cognitive and metacognitive strate-
gies. A knowledge map consists of the knowledge units of
a given domain and the learning dependencies among them,
which is a directed graph [26] (a kind of domain knowledge
structure). A KM is known to be correlated with a range
of human endeavors [27] and one emerging discipline that
integrates different disciplines (e.g. economic, psychology, en-
gineering etc.). Liu et al. had indicated that understanding the

4

Fig. 1. Detecting e-learners’ cognitive and metacognitive strategy framework in actual question-solving scenario.

topological properties of knowledge maps may help gain better
insights into human cognition structure and its mechanism
[26]. Only few research efforts utilizing KM to explore human
cognition and metacognition process and the corresponding
strategies, have been reported until now. Meanwhile, Thinking
Maps claim to be a method to exploit higher order thinking
skills and acts as a visual
language to enhance learning
experiences [25]. Therefore, the above research inspired us
to combine KM with TM to explore the structure and process
of e-learner’s cognitive strategy by applying TM-based high-
level abstraction in the context of KM. This could reveal
how students use their cognitive and metacognitive strategies
during question solving, especially in a kind of scenario of
problem-based learning [44]. This paper provides an effective
framework for detecting cognitive and metacognitive strategy
in the context of comparative question solving.

III. FRAMEWORK AND ALGORITHM

A. Motivation

Our proposed framework is shown in Fig. 1, which tries
to explain how e-learners think, when solving questions, and
illustrates our motivation inspired by a three-layer reverse
engineering. The three-layer diagram consists of “Learning
Activity Sequences” layer, “Cognitive Procedure” layer and
“Metacognitive Strategy” layer. The hierarchical relationship
from “Learning Activity Sequences” to “Metacognitive Strat-
egy” abstractly describes a data-mining-based analysis process
that maps speciﬁc behaviors and sequences of learning into
cognitive elements and procedure by applying a bottom-
up method. For example, an e-learner’s knowledge units of
learning activity sequence is generated when solving the
comparative question “What are similarities and differences
between array and pointer?”, Array Deﬁnition, Array Type,...,
2D Array Initialization, etc., shown in Fig. 1, are recorded
into a learning log,
then a data-mining-based method on
KMs and TMs analyzes these learning activity sequences and
automatically maps them into different cognitive strategies,
such as “Description of Array” and “Comparison of Array
and Pointer”, sequentially. This forms an instance of cog-
nitive procedure for solving a comparative question, i.e. an
instance of cognitive planning with speciﬁc knowledge units.
After that, another method from the Thinking Map can be
applied to map the cognitive procedure into the procedural

Fig. 2. Semantic relation between knowledge units.

cognitive knowledge comprised of “Description-Comparison-
Description” without speciﬁc knowledge units, which is a
metacognitive strategy the learner used before or stored in
individual mind. Therefore, we can acquire the e-learner’s
cognitive and metacognitive strategy at different layers.

B. Notation and Deﬁnition

This section introduces notations and deﬁnitions used

throughout this paper.

integral

Deﬁnition 1 (Knowledge Unit): A knowledge unit (denoted
as ku) is the smallest
learning object, such as a
deﬁnition, a theorem or an algorithm [28]. It is a node or
entity in a graph, which usually composed of both name and
content, and a core term of a ku is its name. Note that one
knowledge unit may only have one core term.

For example, a ku Array Deﬁnition in “The C Programming
Language” course knowledge map can be described as “Name:
Array Deﬁnition; Content: An array is a group of variables of
a type occupying a contiguous region of memory [45]”, and
the core term of the knowledge unit is “array deﬁnition”.

Deﬁnition 2 (Semantic Relation Between Two Kus): A se-
mantic relation (denoted as r) is a directed edge in graph/map,
which indicates a relationship from one ku to another ku.

The type of semantic relation is diverse, commonly occur-
ring are: “a part of”, “an attribute”, “a deﬁnition”, “a kind
of”, “a type of”, “an association”, “similar to”, “an initial
cause”, and “a result”, etc. For example, as shown in Fig. 2, a
circle can be divided into two different types: inscribed circles
and circumscribed circles. Therefore, the semantic relation
between Circle ku and Inscribed Circle ku (or Circumscribed
Circle ku) can be called “a kind of”.

Deﬁnition 3 (Knowledge Map): A knowledge map is a
knowledge structure of a course or discipline organized and

Array Initialization ArrayDefinition Array TypeArray PointerPointer ArrayPointerDefinition  Pointer Initialization LearningActivity SequencesDescription of ArrayComparison of Array and PointerDescription of PointerCognitive ProcedureDescriptionComparison DescriptionMeTa- cognitive StrategyDomain specific knowledge Raising the level of abstractiona kind ofa kind ofCircleInscribed CircleCircumscribedCircle5

Fig. 3. A partial knowledge map of “The C Programming Language” course.

Fig. 4. An instance of learner’s learning activity sequence.

managed its knowledge unit in a graph-based manner [26]
(denoted as KM). A KM is a directed graph composed of
entities (nodes) and relations (edges). Besides, it can be viewed
as a semantic network, in which each node is a knowledge
unit and edge is represented as a triple of the form (head ku,
semantic relation, tail ku), denoted as ke. Formally, we deﬁne
a KM: K M = (KU, K E), in which, ku ∈ KU and ke ∈ K E.

Fig. 3 depicts a partial KM of “The C Programming
Language” course, in which, each edge has a semantic relation,
for example, the edge between Function and Body will be
represented as (Function, “a part”, Body).

Deﬁnition 4 (Learning Activity Sequence): A learning activ-
ity sequence obtained from a learning log reﬂects a track of a
student’s learning process during a period, which is an output
of the ﬁrst layer in Fig. 1. A L AS containing n kus can be
represented as follow:

L AS =< ku1, ku2, . . . , kun >

For example, an instance of a speciﬁc student’s L AS may be
<Array Deﬁnition, Array Type, 2D Array, 2D Array Initializa-
tion, Array Pointer, Array Pointer Structure, Pointer Array> to
answer “What are similarities and differences between array
and pointer?” question, shown in Fig. 4.

Deﬁnition 5 (Thinking Map): Thinking Map (denoted as
TM) is a common visual language for learning communities
to describe and visualize the thinking process [25].

Fig. 5 shows eight kinds of graph methods: Brace Map,
Bubble Map, Circle Map, Tree Map, Bridge Map, Multi-Flow
Map, Double Bubble Map and Flow Map. Each map represents
a basic thinking process when thinking about questions, and
the corresponding eight thinking processes are Whole/Part,
Describing Qualities, Context/Frame of Reference, Classiﬁca-
tion, Analogies, Cause and Effect, Compare and Contrast and
Sequencing.

A KM describes the knowledge units and their semantic
relationships within a speciﬁc domain. While each thinking
map means nothing if the corresponding process does not

Fig. 5. Thinking Map [25].

include the speciﬁc knowledge, especially when a person is
thinking about how to answer the domain speciﬁc questions.
Hence, the methodology of combining KMs with TMs can
model a person’s thinking process in solving questions, when
they ponder about them.

To deal with this, there are three things that need to be
considered: questions, mapping from questions to KM, and
mapping from question-oriented KM to TM.

In this paper, we concentrate on how e-learners solve
problems by using their cognitive and metacognitive strategies.
To gain better understanding this research and its result, we
adopt less complex questions to test e-learners. For mapping
from questions to KM, the core terms will help to locate
the corresponding knowledge units, according to Deﬁnition
6. For mapping from question-oriented KM to TM, we utilize
a mapping relationship between KM and TM. Particularly, in
Fig. 6, we illustrated the eight kinds of Thinking Maps with
speciﬁc questions in the context of the KM of “Computer
Network Principle” course.

Take the Bubble Map in Fig. 6 as an example. Given a
question, such as “How do you know about protocol?”, then
a learner may invoke the knowledge related to “protocol” and
construct the bubble-like map. In this scenario, ﬁrstly, abstract
the core term “protocol” from the question; secondly, extract
the knowledge units corresponding to the “protocol” course
located in KM; thirdly, mine or ﬁnd a speciﬁc knowledge
submap in the KM by using the relation mapping between
KM and TM. In this process, we call knowledge unit Protocol
a core knowledge unit, and the speciﬁc knowledge submap
mined in KM is deem to a thinking map with core knowledge
units.

Based on the above, we coin some important deﬁnitions as

followings.

Deﬁnition 6 (Core knowledge Unit): A core knowledge unit
(denoted as cku) is a centric phrase of a question sentence,
which builds a bridge between a question and knowledge units.
For example, given a speciﬁc question, “What is the deﬁni-
tion of array?”, it can be inferred that “array” is the core item
and “deﬁnition” denotes an attribute of “array”, so that, we
can call Array is a core knowledge unit, and Array Deﬁnition
is a subordinate ku of Array. Similarly, the core knowledge
units of this question “What are similarities and differences
between array and pointer?” are Array and Pointer. The ckus
are all colored in yellow this paper.

Deﬁnition 7 (Thinking Maps with cku): A Thinking Map
with cku is a special knowledge submap, which can be

Knowledge MapIntroductionArithmeticPointerArrayOperationData TypeFunctionTypeFunctionC Program DesigncharintfloatdoubleBasic TypeRelationalLogicalBitwiseDeclarationBodyFunctionDefinition StatementPointerArrayArrayPointerArrayDefinitionArraySortPointerDefinitionPointerVariablea partan attributea typea parta parta parta typea typea typea typean attributean instancean instancean associationan associationArray Initializa-tiona part6

(a) Descriptive knowl-
edge submap of Array

(b) Connective Knowl-
edge Submap of Array
and Pointer

(c) Descriptive knowl-
edge submap of Pointer

(d) Double Buble Map with Array and Pointer

Fig. 7. Knowledge submaps searched in KM.

Similarly, a Connective Knowledge Submap can be deﬁned

by:

Fig. 6. Thinking Maps with speciﬁc questions in the context of “Computer
Network Principle” KM.

K M connective
sub

= (KUconn

sub , K E conn
sub )

found in a domain-speciﬁc KM by the presented algorithm,
in Section III-C.

For instance, we can follow the “a type of” or “a kind of”
semantic relation to construct a Tree Map with Protocol cku
submap, and follow the “an association” semantic relation to
build a Circle Map with Protocol cku submap, depicted in
Fig. 6. Consequently, more than one submap is built with the
Protocol cku. Moreover, We provide a description of TM with
cku submap searched algorithm discussed in Algorithm 2.

Particularly, we introduce two speciﬁc knowledge submaps:
Descriptive Knowledge Submap and Connective Knowledge
Submap, which are the basic elements of Bubble Map and
Double Bubble Map with cku, the detailed description of these
submaps are as follow.

A Descriptive Knowledge Submap can be deﬁned by:

K M descriptive

sub

= (KU desc

sub , K E desc
sub )

Where KU desc
is a set of kus, which are ﬁrst-order neighbor
sub
vertices of a cku colored in blue, and K E desc
is a set of
sub
semantic relations between cku colored in yellow and other
ku. That is, it satisﬁes ∀ku ∈ KU desc
sub , (cku, r, ku) ∈ K E desc
sub .
For example, we searched two submaps from “The C Program-
ming Language” course KM, which are descriptive knowledge
submap of Array K M desc(arr ay)
and descriptive knowledge
submap of Pointer K M desc(pointer)
, illustrated within the light
yellow area of Fig. 7a and 7c, and the overrange kus are
colored in white.

sub

sub

A connective knowledge submap usually contains two core
such as Ar-
knowledge units mapped by core terms,
ray and Pointer units colored in yellow, as shown in
the connective knowledge submap of Array and Pointer
K M conn(arr ay, pointer)
, Fig. 7b. In which, the connective kus
of two ckus are Array Pointer and Pointer Array.

sub

To integrate descriptive submap and connective submap, i.e.,
merging the Array descriptive knowledge submap, the Pointer
descriptive knowledge submap and the connective knowledge
submap of the two kus, we can obtain a Double Bubble Map
with Array and Pointer, exhibited in Fig. 7d, which illustrates
the similarities and differences between array and pointer.

Next, we will proposed Cognition Control Measure, Cog-
nition Control Sequence, Cognitive Procedure and Metacog-
nitive Strategy Sequence,
to analysis the learning activity
sequence and measure the individual question-solving process.
Deﬁnition 8 (Cognition Control Measure): Cognition con-
trol measure (denoted as CCM) is a coverage rate of knowl-
edge submaps, which provides a quantitative calculation of
cognition. The deﬁnition is as below:

CCM = (

N1
|KUsub1| − k

,

N2
|KUsub2| − k

, . . . ,

Ni
|KUsubi | − k

)

Where, Ni denotes the number of ku which belong to the
responding K Msubi at a learning moment; |KUsubi | denotes
the numbers of units in K Msub; k ∈ {1, 2}, denotes the number
of core knowledge units in its submap; i denotes the number
of searched knowledge submaps, in addition, the type and
order of these submaps can be extracted from learning activity
sequence.

………………Brace Map——Whole-PartsComputer network principlesOverview of computer networkInternet interconnect layerDevelopment of computer networkcomposition and structure of computer networkRelevant standards for computer networksComputer network protocol and architecturesComputer network protocolComputer network architecturesTCP/IP reference model Model profileFour layer protocols of TCP/IP modelComparison of TCP/IP model and OSI modelApplication layerTransport layerNetwork access layerPhysical layer protocolApplicati-on layer protocolThree elements of protocolTransport layer protocolData link layer protocolProtocol featuresProtocolBubble Map——DescribingNetwork layer protocolProtocolCircle Map——Defining in ContexGrammarSemanticSequential (Synchronization)Communication partiesStrict complianceRuleProtocolNetwork layer protocolTransport layer protocolIP protocolTCP protocolUDP protocol……IPV4IPV6ICMP protocol…………Tree Map——ClassifyingLANCoverage of a dozen kilometersBridge  Map——Seeing AnalogiesWANCoverage can reach hundreds of kilometers or even thousands of kilometersCircuit switching principleCircuit switching featuresCircuit switching applicationAdvantages of circuit switchingData Switching TechniqueData transmiss-ion efficiencyCircuit switchingStore and forwardPacket switching principleAdvantages of packet switchingPacket switching featuresPacket switchingPacket switching applicationDouble Bubble Map——Compering and ContrastingRAP protocolICMP protocolRARP protocolIP protocolIGMP  protocolMulti Flow Map——Cause-EffectARPANETNSFNETNSFNET(ANS)InternetFlow Map——Sequencing Array DefinitionArray Initializa-tionArraySort2D ArrayArray TypeArray AccessMethodArrayBubble SortPointer Descriptive Knowledge Submap2D Array InitializationArrayPointer PointerArray ElementSearchConnective Knowledge SubmapPointer Array FunctionPointer ArrayArray PointerVariableArray PointerPointer Array StructureArrayPointer 2D PointerPointerInitializa-tionPointerVariablePointer DefinitionPointer TypePointerArrayDescriptive Knowledge SubmapArrayPointer PointerArray 2D Pointer InitializationArrayArrayDefinitionArraySortArrayInitializationPointerArrayFunctionPointerArray2DArrayPointerPointerInitializationArrayPointerPointerVariblePointerDefinitionPointerStructureArrayAccessMethodPointerArrayStructureArrayPointerVariableArrayTypeDescriptiveConnectiveDescriptivePointerTypesub

sub

sub

is 6 (not

Take the L AS in Fig. 4 as an example, assuming that the
corresponding knowledge submaps are searched and repre-
sented in Fig. 7a, 7b and 7c. As can be seen, the number
of kus in K M desc(arr ay)
including Array cku),
and there are 3 kus in current learning activity sequence,
so the knowledge unit coverage rate of K M desc(arr ay)
is:
RatioSubdesc(arr ay) = 1
the number of kus
2 . Similarly,
in K M conn(arr ay, pointer)
is 5 (not including Array cku and
Pointer cku), and there are 3 kus in current learning ac-
tivity sequence, so the knowledge unit coverage rate of
K M conn(arr ay, pointer)
is: RatioSubconn(arr ay, pointer) = 3
5 .
However, there are no learning activities in the Knowledge
Submap describing Pointer, so the knowledge unit coverage
rate of Pointer K M desc(pointer)
is: RatioSubdesc(arr ay) = 0
. Hence, the CCM of this learning sequences in Fig. 4 is
2, 3
( 1
5, 0).
Deﬁnition 9 (Cognition Control Sequence): Cognition Con-
trol Sequence (denoted as Scog ) reﬂects the dynamic process
of completing a certain task, hence, a Scog consists of CCM s
of different moments. The representation of Scog is given
below:

sub

sub

Scog =< CCM1, CCM2, . . . , CCMn >

Deﬁnition 10 (Cognitive Procedure): Cognitive Procedure
also called cognitive planning with speciﬁc knowledge units.
It reﬂects the dynamic changes of the learners’ cognitive
strategies, which is an output of the second layer in Fig. 1.

Based on TM with cku and the Scog, we can abstracted
that “Description of Array” and “Description of Pointer” are
speciﬁc cognitive strategies depicted by Bubble Maps with
Array and Pointer respectively, and “Comparison of Array and
Pointer” cognitive strategy is depicted by a Double Bubble
Map with the two core knowledge units.

Deﬁnition 11 (Metacognitive Strategy Sequence): A

metacognitive strategy sequence is represented by:

Smet a−cog = (cog1, cog2, . . . , cogn)

Where, cog is the selected cognitive strategy, and the order
of sequence is combinations of cognitive strategies. Smet a−cog
is the output of the third layer in our framework. From
which, generally under the scenario of solving a complex
question, a combination of different metacognitive strategies
can be mined through further abstraction. Therefore,
the
metacognitive strategy of solving “What are similarities and
differences between array and pointer?” may be represented
as (Description, Comparison, Description).

C. The Proposed Pattern Mining Algorithm

This section presents our cognitive strategy and metacogni-
tion strategy patterns mining algorithm under the scenario of
question solving. Algorithm 1 describes a main structure of
our mining algorithm, which follows the reverse engineering
engine idea to raise the abstraction level from learning activ-
ities to metacognitive strategy pattern. Algorithm 2 ﬁnds the
candidate submaps through a heuristic search method, which
is guided by Thinking Map. Given speciﬁc core knowledge
units, the corresponding candidate submaps with cku will be

7

found. Algorithm 3 transforms a three-dimensional vector into
a one-dimensional sequence, to reduce the time and space
complexity. Algorithm 4 encodes the knowledge unit coverage
rate and Algorithm 5 decodes the Cognition Control Sequence.

Algorithm 1 Cognitive Strategy and Metacognitive Strategy
Pattern Mining.
Input: Paramset {courseId, CI, k-depth}, in which, cour-
seId points to a speciﬁc knowledge map which the ques-
tion belongs to; CI refers to a core item set; k-depth
denotes the max hop visited in KM. Note that courseId
and CI are extracted from the given question for solving.

Output: Cognitive Strategy

Metacognition Strategy Pattern: {Smet a−cog};

1: Acquire a related domain-speciﬁc according to cour seId.

2: Mapping CI into CKU /*CKU = {cku} or CKU =

{cku1, cku2}*/
3: while (i > n) do
4:
5: end while
6: Call SubmapSearch(CKU, k − depth) to obtain the can-

ﬁnd ckui in K M

didate submaps

Remove the irrelevant submaps
Calculate CCMi

7: for each L ASi in {L AS} do
8:
9:
10: end for
11: Generate the cognition control sequence: Scog =<

CCM1, CCM2, . . . , CCMn >

Sequence with
−

12: Obtain

the

Strategy

Cognitive
−

cku:(Cognitive
Strategy(cku)2, . . . , Cognitive − Strategy(cku)i, . . . )

Strategy(cku)1, Cognitive

ˆScog = EncodeCogSeq(Scog)

13: for Scog in {Scog} do
14:
15: end for
ˆ
16: {
17: {Patterncog} = DecodeCogPattern(
18: Obtain {Smet a−cog} from {Patterncog} through raising

Patterncog} = GSP(

ˆScog, minsup)

ˆ
Patterncog)

the level of abstraction

19: return {Smet a−cog}

In Algorithm 1, Step 1 ﬁnds the domain Knowledge Map
based cour seId that points to a speciﬁc knowledge map;
Step 2 to 5 aim to search the core knowledge unit in KM
mapped by CI representing a core item set; Step 6 searches
the candidate submaps by calling SubmapSearch algorithm
presented in Algorithm 2; Step 7 to 11 generates the cognition
control sequence by calculating knowledge unit coverage rate
in K Msub, and get rid of the irrelevant submaps, so that we
obtain the cognitive strategy sequence in step 12; Step 13 to 15
encode the dimensional cognition control sequence described
speciﬁcally in Algorithm 3 EncodeCogSeq; Step 16 mines
frequent patterns from the encoded cognition control sequence
by the sequential pattern mining algorithm GSP (Generalized
Sequential Patterns) [46]. From the deﬁnition of knowledge
unit coverage rate, the cognition control sequence of compar-
ison question is a three-dimensional vector, we transform the
cognition control sequence into a one-dimensional sequence

8

relevant submaps with speciﬁc cku from the eight Thinking
Maps deﬁned in Deﬁnition 5.

Algorithm 3 Cognition Control Sequence Encoding Algo-
rithm EncodeCogSeq.
Input: Dimensional cognition control sequence:

Scog =< CCM1, CCM2, . . . , CCMn >

Output: One-dimensional sequence:

ˆCCMn >

ˆScog =<

ˆCCM2, . . . ,
ˆCCM1,
1: for all CCMi in {Scog} do
for xi, j in CCMi do
2:
3:

f (xi, j) =

1
0
0.5





j=1 ˆxi, j ∗ 107−2j

ˆxi, j = f (xi, j)
ˆCCM = (cid:205)n

end for
ˆScog.add(

ˆCCMi)

4:
5:
6:
7:
8: end for
9: return

ˆScog

xi, j = 1
xi, j = 0
xi, j ∈ (0, 1)

Algorithm 4 Cognition Control Sequence Decoding Algo-
rithm DecodeCogPattern.

ˆScog

ˆScog do

ˆCCMi in
ˆXi = Seg(
ˆCCMi)
CCMi = ˆXi/100

Input: One-dimensional sequence:
Output: Strategy pattern sequence: {Patterncog}
1: for
2:
3:
4: end for
5: Scog.add(CCMi)
6: return Scog

Algorithm 5 Encoded Knowledge Unit Coverage Rate Seg-
ment Algorithm Seg.

ˆCCMi
ˆxi,n)

Input: Encoded knowledge unit coverage rate:
Output: Truncated vector: ˆXi = ( ˆxi,1,
ˆxi,2, . . . ,
1: N = |max
ˆCCMi |
j ←− 1
2:
3: while j ≤ N do
ˆCC Mi
ˆxi, j =
4:
10N − j−1
5: end while
6: return ˆXi

IV. EXPERIMENTS
The following experiments were carried out to validate the
proposed method in the context of simple questions, where
“simple” means the core items of a question are explicit and
without any ambiguity. This paper selects two simple and
typical comparison questions from two courses. Question I
is “What are similarities and differences between array and
pointer?”. Question II is “What are similarities and differences
between packet switching and circuit switching?”.

(a) â ˘AIJThe C Programming Lan-
guageâ ˘A˙I course.

(b) â ˘AIJComputer Network Princi-
pleâ ˘A˙I course.

Fig. 8. Online learning prototype system.

deﬁned by the algorithm in Algorithm 4 Seg; Step 17 decodes
the frequent patterns to get the metacognition strategy pattern
in Algorithm 5 DecodeCogPattern. Therefore, we obtain the
metacognition strategy pattern in the last Step.

Algorithm 2 Heuristic Submaps Search in Thinking Maps
Algorithm SubmapSearch.
Input: Paramset {CKU, k-depth}
Output: Candidate knowledge submaps set: {K Msub }
1: KUsub ←− {}, K Esub ←− {}
2: if |CKU| == 1 then
cku ←− CKU[0]
3:
while hop≤1 do
4:
5:

into KUsub, and save (kui, r, kuj) into

Find candidate kui through semantic relation r start
from cku
Save kui
K Esub
end while
Obtain KUsub = {ku1, ku2, . . . , kun}, K Esub =
{(cku, r, kum, (kun, r, cku), . . . )}, m, n = 1, 2, . . .
Repeat step 5-6 to construct the one hop submap of cku,
K MBub ←− ran attribute, K MCir ←− ran association,
K MM f ←− ran cause/result , thus obtain Bubble Map,
Circle Map and Multi-Flow Map with cku submaps.
Repeat step 5-6 to construct the k − depth hop submap
of cku, K MT ree ←− ran type, K MBr ace ←− ran part thus
obtain Tree Map and Brace Map with cku submaps.
return {K MBub, K MCir, K MM f , K MT ree, K MBr ace}

to

obtain K MBub(cku1)

cku1 ←− CKU[0], cku2 ←− CKU[1]
Repeat
5-6
step
K MBub(cku2)
Obtain part of connective submap with two ckus,
ˆK Mconn = K MBub(cku1) ∩ K MBub(cku2)
Build {kusconn} = KUBub(cku1) ∪ KUBub(cku2)
for each kui in {kusconn} do

and

Repeat step 5-6 to Obtain K Mi(kui)
ˆK Mconn =

ˆK Mconn ∪ K Mi(kui)

end for
Obtain
K Mconn(cku1, cku2) =
return K Mconn(cku1, cku2)

connective

submap with
ˆK Mconn

22:
23: end if

two

ckus,

6:

7:
8:

9:

10:

15:

16:
17:
18:

19:
20:
21:

11:
12: else
13:
14:

Algorithm 2 detailedly describes the process of ﬁnding

TABLE I
SPECIFICATION OF LOG DATA

Comparision Questions
Question I
Question II

Number of Subjects
104
69

Number of Records
7664
3208

A. Data and Online Learning System

A developed online learning environment system based on
KM is shown in Fig. 8, where Fig. 8a illustrates “The C Pro-
gramming Language” course, and Fig. 8b depicts “Computer
Network Principle” course. The left-hand side of â ˘AIJThe C
Programming Languageâ ˘A˙I interface presents a partial KM
of the course, while the right-hand side provides the speciﬁc
explanation of a ku in KM. Likewise,
the left-hand side
of “Computer Network Principle” interface shows related
teaching resources (e.g. PowerPoint), while the middle block
is the explanation of a ku, and the right-hand side is a partial
KM. Mappings between teaching resources and knowledge
units are associated at knowledge unit level, i.e., by clicking
a ku, a partial KM related to ku will display on the right-
the middle part will give the ku(cid:48)s
hand side. Moreover,
explanation regarding its source and speciﬁc meaning in order
to help learners better master the knowledge unit. The learning
behaviors of learners can be accurately acquired by a log
collection tool running in backend. A learning log contains id,
user_id, user_name, question_id, action_t ype, object_id,
action_object and timestamp.

The log data of these two comparison questions was col-
lected during two semesters from 173 participants from the
department of computer science and technology of Xi’an
Jiaotong University, and some students from Xi’an University
of Posts and Telecommunications. After preprocessing data,
such as removing records that are unrelated to the comparison
question learning, including log in, exit, submit and post,
we obtained 10,872 effective records. Table I shows learning
records of Question I and Question II, respectively.

B. Evaluation

records, which

“Comparison-Description-Description”

After conducting the experiments on 173 subjects, three
metacognitive strategy patterns are mined from 10,872
“Description-Comparison-
learning
are
and
Description”,
“Description-Description-Comparison”. Additionally, we
found that the most frequently occurred submaps are Bubble-
Map-like submaps and Double-Bubble-Map-like submaps
from participants’ learning activity sequences in the task of
solving Question I or II.

Three representative cases using cognitive and metacog-
nitive strategy to solve the two questions are visualized in
Fig. 9a, 9b and 9c, respectively. Each ﬁgure is comprised of
two parts, the top part is a chart consisting of three curves, and
the bottom part is a graph-based structure. The horizontal axis
of each curve denotes learning event sequence, and the vertical
axis denotes knowledge submap coverage rate. Specially, the
blue diamond curve represents the change of the descriptive
knowledge submap coverage rate of the ﬁrst ku (e.g., Array

9

or Packet Switching), DescRate1, and the kus of this submap
will be tinted with the same dye as soon as being visited; the
green x-mark curve represents the change of the descriptive
knowledge submap coverage rate of the second ku (e.g.,
Pointer or Circuit Switching), DescRate2, and the kus of this
submap will be tinted in green as well once being visited;
the brown square curve shows the change of the connective
knowledge submap coverage rate of two kus, CompRate,
similarily, the visited kus of this submap will be colored in
brown. What’s more, there is a coverage rate threshold line
with a value of 0.6, colored in red, which means a valid
cognitive strategy is recognized once the coverage rate beyond
the threshold.

As shown in Fig. 9a, within the interval [1,12], the de-
scriptive knowledge submap coverage rate of the ﬁrst ku,
DescRate1, changes from 0 to 1, which means the learner
ﬁnish the visit of all knowledge units describing the ﬁrst ku
during this phase. We can see in [3,5] interval, the knowledge
coverage rate stays the same value, which can be ascribed to
the subnodes learning (ku4 and ku5 are the subnodes of ku3).
However, the descriptive knowledge submap coverage rate of
the second ku, DescRate2, and the connective knowledge
submap coverage rate, CompRate, remain 0. This indicates
that learners do not visit the kus within the descriptive knowl-
edge submap of the second ku or the connective knowledge
submap of two kus. Meanwhile, the corresponding operations
on these submaps are illustrated in the bottom part of this
ﬁgure. Seen from the Double Bubble Map that the kus of
descriptive knowledge submap of the ﬁrst ku are visited ﬁrst
and colored in blue, and other kus are not. It is obvious that
this learner select learning activities well and the scope of
cognitive strategy called description of ﬁrst ku. Hence, this
phase is simply deemed “The First Description Stage”.

Within the interval [13,19], DescRate1 and DescRate2
keep unchanged, while CompRate changes from 0 to 0.8,
which implies learners merely visit the connective knowledge
submap of two kus. Synchronously, the kus of connective
knowledge submap of the ﬁrst ku and the second ku are visited
and colored in red. This phase concentrates on comparison of
two kus, so it can be called “Comparison Stage”.

Within the interval [20,24], DescRate1 and CompRate
remain invariable, while DescRate2 changes from 0 to 0.8,
concurrently, the kus of descriptive of the second ku are
visited and colored in green.Likewise, this phase is “The Sec-
ond Description Stage”. Consequently, the question-solving
process is accomplished.

The above three stages in Fig. 9a demonstrate that learners
control well in the selection of learning activities and the
scope of cognitive strategy, meanwhile, the cognition control
sequence is <descriptive of ﬁrst ku, connective of two kus,
descriptive of second ku>. Furthermore, this kind of metacog-
nition strategy pattern is named “Description-Comparison-
Description”. Similarly, from Fig. 9b and 9c, we can also
conclude the second and third kind of metacognition strategy
pattern can be called “Comparison-Description-Description”
and “Description-Description-Comparison”, respectively.

The experimental results of the three metacognition strategy
patterns are shown in Table II. We can see that the percentage

10

(a) Visualization of the ﬁrst strategy process.

(b) Visualization of the second strategy process.

(c) Visualization of the third strategy process.

Fig. 9. The Mined three metacognitive strategy patterns.

TABLE II
USE OF METACOGNITION STRATEGY PATTERNS

Metacognition Strategy Pattern
Description-Comparison-Description
Comparison-Description-Description
Description-Description-Comparison

Percentage
31.3%
31.0%
31.6%

Sum

93.9%

of students who adopted the three metacognition strategy
patterns are all close to 31%, meanwhile, the total sum of
these being 93.9%, which means the majority of students
tend to use metacognition strategies to solve the comparative
questions and successfully. Learners who adopt “Description-
Comparison-Description” pattern prefer a sequential manner,
and solve the questions step-by-step, however, learners who
use the other two patterns may be in a saltaory thinking, and
solve questions in general. Therefore, the mining patterns are
interpretable and useful in the context of comparative question
solving. At the same time, with regard to the experiment
results, the CCM of each description/comparison knowledge
submap that students visited is 100%. For knowing the reason
of this, we revisited the students, and they said that they tried
their best to ﬁnd all knowledge units possibly related to the
questions during the experiment. So, we believe that this is
the reason to have a high value to each CCM.

V. CONCLUSION AND FUTURE WORK

This study focuses on how learners solve questions by
adopting their cognitive and metacognitive strategies, which
follows an idea of reverse engineering. We propose a novel
method that combines Thinking Maps with Knowledge Maps
to detect and model the cognitive and metacognitive strategies
from the learning logs gathered from a computer-based e-
learning system. From the experimental results, the idea of
raising the level of abstraction is quite important, which
veriﬁes that cognitive strategies can be described with a
domain speciﬁc knowledge map, and metacognition strategies
which are complex constructs that are not directly observ-
able, can be obtained from a cognition control sequence that
consist of cognitive strategies. This shows that mapping be-
tween cognitive strategies and procedural cognitive knowledge

(metacognition) can be automated to provide their meaningful
interactions and supports. Meanwhile, the cognitive strategies
and three metacognitive strategy patterns can be represented in
a graph structure. Consequently, this graph data-driven method
is proved to be effective, as it provides a way to visualize the
thinking process of solving questions.

It should be noted that

this research has some limita-
tions. Firstly, we do not consider the differences in student’s
background, knowledge and their general cognitive ability.
Many researches indicated that the difference has played an
important role in the use of cognitive strategies and metacog-
nition strategies. Secondly, we only discuss use of cognitive
and metacognitive strategy within the scope of comparative
question-solving in this paper. Thirdly, we conduct experi-
ments on simple questions, not considering the ambiguity of
questions and reduce its complexity. In future work, we will
expand not only the number of participants including various
topics for comparison, but also the question types. Additional,
we will take natural language related contents into account,
to improve our methods and algorithms by natural language
processing techniques.

ACKNOWLEDGMENTS

This work was supported by the National Key Re-
search and Development Program of China under Grant No.
2016YFB1000903; the National Science Foundation of China
under Grant No. 61877048; Innovative Research Group of the
National Natural Science Foundation of China under Grant
No. 61721002; Innovation Research Team of Ministry of
Education (IRT_17R86); project of China Knowledge Centre
for Engineering Science and Technology.

REFERENCES

[1] J. H. Kim, L. Rothrock, and A. Tharanathan, “Applying fuzzy linear
regression to understand metacognitive judgments in a human-in-the-
loop simulation environment,” IEEE Transactions on Human-Machine
Systems, vol. 46, no. 3, pp. 360–369, 2016.

[2] N.-T. Le and L. Wartschinski, “A cognitive assistant for improving
human reasoning skills,” International Journal of Human-Computer
Studies, 2018.

[3] P. H. Winne, “Bootstrapping learner’s self-regulated learning,” Psycho-
logical Test and Assessment Modeling, vol. 52, no. 4, p. 472, 2010.

Phase IPhase IIPhase IIIPhase IPhase IIPhase IIIPhase IPhase IIPhase III11

[26] J. Liu, J. Wang, Q. Zheng, W. Zhang, and L. Jiang, “Topological analysis
of knowledge maps,” Knowledge-Based Systems, vol. 36, no. 6, pp. 260–
267, 2012.

[27] A. M. O’Donnell, D. F. Dansereau, and R. H. Hall, “Knowledge maps
as scaffolds for cognitive processing,” Educational Psychology Review,
vol. 14, no. 1, pp. 71–86, 2002.

[28] Q. Zheng, Y. Qian, and J. Liu, “Yotta: A knowledge map centric
e-learning system,” in IEEE International Conference on E-Business
Engineering, 2011, pp. 42–49.

[29] B. Zeng, F. Tian, B. Feng, Q. Zheng, F. Wu, and Y. Fu, “A study on
algorithm for mining subgraph in thinking maps,” in IEEE International
Conference on High PERFORMANCE Computing and Communications
& 2013 IEEE International Conference on Embedded and Ubiquitous
Computing, 2014, pp. 2368–2372.

[30] X. J. Huang, C. Zhang, and Q. H. Zheng, “Generating personalized nav-
igation learning path based on knowledge map,” International Journal
of Technology & Educational Marketing, vol. 4, no. 2, pp. 1–17, 2014.
[31] O. dictionary, “cognition - deﬁnition of cognition in english from the

oxford dictionary,” www.oxforddictionaries.com, 2016.

[32] M. Pressley, “Cognitive strategy instruction that really improves chil-

dren’s academic performance,” Academic Achievement, p. 266, 1995.

[33] D. R. Cross, “Developmental and instructional analyses of children’s
metacognition and reading comprehension.” Journal of Educational
Psychology, vol. 80, no. 2, pp. 131–142, 1988.

[34] S. G. Paris and P. Winograd, “Promoting metacognition and motivation
of exceptional children.” Remedial & Special Education, vol. 11, no. 6,
pp. 7–15, 1990.

[35] G. Schraw and D. Moshman, “Metacognitive theories,” Educational

Psychology Review, vol. 7, no. 4, pp. 351–371, 1995.

[36] G. Schraw, K. J. Crippen, and K. Hartley, “Promoting self-regulation
in science education: Metacognition as part of a broader perspective on
learning,” Research in Science Education, vol. 36, no. 1-2, pp. 111–139,
2006.

[37] D. Kuhn and J. David Dean, “Metacognition: A bridge between cognitive
psychology and educational practice.” Theory Into Practice, vol. 43,
no. 4, pp. 268–273, 2004.

[38] M. Montague, “The effects of cognitive and metacognitive strategy
instruction on the mathematical problem solving of middle school
students with learning disabilities.” Journal of Learning Disabilities,
vol. 25, no. 4, p. 230, 1992.

[39] B. J. Zimmerman and M. M. Pons, “Development of a structured
interview for assessing student use of self-regulated learning strategies,”
American educational research journal, vol. 23, no. 4, pp. 614–628,
1986.

[40] J. S. Kinnebrew, J. R. Segedy, and G. Biswas, “Integrating model-
driven and data-driven techniques for analyzing learning behaviors in
open-ended learning environments,” IEEE Transactions on Learning
Technologies, vol. 10, no. 2, pp. 140–153, April 2017.

[41] K. Leelawong, “Designing learning by teaching systems : The betty’s

brain system,” Int.j.artif.intell.in Education, 2008.

[42] R. J. Riding and G. Douglas, “The effect of cognitive style and mode of
presentation on learning performance.” British Journal of Educational
Psychology, vol. 63, no. 2, pp. 297–307, 1993.

[43] A. R. Rezaei and L. Katz, “Evaluation of the reliability and validity
of the cognitive styles analysis,” Personality & Individual Differences,
vol. 36, no. 6, pp. 1317–1327, 2004.

[44] C. E. Hmelo-Silver, “Problem-based learning: What and how do students
learn?” Educational Psychology Review, vol. 16, no. 3, pp. 235–266,
2004.

[45] T. Bailey, “An introduction to the c programming language and software

design,” 2005.

[46] R. Srikant and R. Agrawal, “Mining sequential patterns: Generaliza-
tions and performance improvements,” in International Conference on
Extending Database Technology, 1996, pp. 1–17.

[4] J. H. Flavell, “Metacognition and cognitive monitoring: A new area
of cognitiveâ ˘A ¸Sdevelopmental inquiry.” American Psychologist, vol. 34,
no. 10, pp. 906–11, 1979.

[5] S. Cassidy, “Learning styles: An overview of theories, models, and
measures,” Educational Psychology, vol. 24, no. 4, pp. 419–444, 2004.
[6] Metcalfe, Janet, Finn, and Bridgid, “Metacognition and control of study
choice in children,” Metacognition & Learning, vol. 8, no. 1, pp. 19–46,
2013.

[7] P. R. Pintrich, D. A. Smith, T. Garcia, and W. J. McKeachie, “Reliability
and predictive validity of the motivated strategies for learning ques-
tionnaire (mslq),” Educational and psychological measurement, vol. 53,
no. 3, pp. 801–813, 1993.

[8] C. E. Weinstein, A. C. Schulte, and A. W. Hoy, LASSI: Learning and

study strategies inventory. H & H Publishing Company, 1987.

[9] A. F. Hadwin, J. C. Nesbit, D. Jamieson-Noel, J. Code, and P. H. Winne,
“Examining trace data to explore self-regulated learning,” Metacognition
and Learning, vol. 2, no. 2-3, pp. 107–124, 2007.

[10] N. E. Perry and P. H. Winne, “Learning from learning kits: gstudy traces
of studentsâ ˘A ´Z self-regulated engagements with computerized content,”
Educational Psychology Review, vol. 18, no. 3, pp. 211–228, 2006.
[11] J. Kinnebrew and G. Biswas, “Comparative action sequence analysis
with hidden markov models and sequence mining,” in Proceedings of
the Knowledge Discovery in Educational Data Workshop at the 17th
ACM SIGKDD Conference on Knowledge Discovery and Data Mining
(KDD 2011). San Diego, CA, 2011.

[12] G. Biswas, J. Kinnebrew, and J. Segedy, “Analyzing students’ metacog-
nitive strategies in open-ended learning environments,” in Proceedings
of the Annual Meeting of the Cognitive Science Society, vol. 35, no. 35,
2013.

[13] J. S. Kinnebrew, J. R. Segedy, and G. Biswas, “Analyzing the temporal
evolution of studentsâ ˘A ´Z behaviors in open-ended learning environ-
ments,” Metacognition and learning, vol. 9, no. 2, pp. 187–215, 2014.
[14] J. R. Segedy, J. S. Kinnebrew, and G. Biswas, “Using coherence analysis
to characterize self-regulated learning behaviours in open-ended learning
environments,” Journal of Learning Analytics, vol. 2, no. 1, pp. 13–48,
2015.

[15] D. Perera, J. Kay, I. Koprinska, K. Yacef, and O. R. Zaïane, “Clustering
and sequential pattern mining of online collaborative learning data,”
IEEE Transactions on Knowledge and Data Engineering, vol. 21, no. 6,
pp. 759–772, 2009.

[16] D. Gaševic, J. Jovanovic, A. Pardo, and S. Dawson, “Detecting learning
strategies with analytics: Links with self-reported measures and aca-
demic performance.” Journal of Learning Analytics, vol. 4, no. 2, pp.
113–128, 2017.

[17] X. Fern, C. Komireddy, V. Grigoreanu, and M. Burnett, “Mining
problem-solving strategies from hci data,” ACM Transactions on
Computer-Human Interaction (TOCHI), vol. 17, no. 1, p. 3, 2010.
[18] K. Crockett, A. Latham, and N. Whitton, “On predicting learning styles
in conversational intelligent tutoring systems using fuzzy decision trees,”
International Journal of Human-Computer Studies, vol. 97, pp. 98–115,
2017.

[19] F. Tian, Q. Zheng, Z. Gong, J. Du, and R. Li, “Personalized learn-
ing strategies in an intelligent e-learning environment,” in Computer
Supported Cooperative Work in Design, 2007. CSCWD 2007. 11th
International Conference on.

IEEE, 2007, pp. 973–978.

[20] D. P. Josyula, H. Vadali, B. J. Donahue, and F. C. Hughes, “Modeling
metacognition for learning in artiﬁcial systems,” in Nature & Biolog-
ically Inspired Computing, 2009. NaBIC 2009. World Congress on.
IEEE, 2009, pp. 1419–1424.

[21] J. R. Segedy, J. S. Kinnebrew, and G. Biswas, “Modeling learner’s
cognitive and metacognitive strategies in an open-ended learning en-
vironment.” in AAAI Fall Symposium: Advances in Cognitive Systems,
2011.

[22] J. S. Kinnebrew, K. M. Loretz, and G. Biswas, “A contextualized, dif-
ferential sequence mining method to derive students’ learning behavior
patterns,” JEDM| Journal of Educational Data Mining, vol. 5, no. 1, pp.
190–219, 2013.

[23] G. Biswas, H. Jeong, J. S. Kinnebrew, B. Sulcer, and R. ROSCOE,
“Measuring self-regulated learning skills through social interactions in
a teachable agent environment,” Research and Practice in Technology
Enhanced Learning, vol. 5, no. 02, pp. 123–152, 2010.

[24] J. S. Kinnebrew, G. Biswas, B. Sulcer, and R. S. Taylor, “Investigating
self-regulated learning in teachable agent environments,” in International
handbook of metacognition and learning technologies. Springer, 2013,
pp. 451–470.

[25] D. Hyerle, Thinking MapsÂ˝o: A Visual Language for Learning. Springer

London, 2008.

Feng Tian was born in Xi’an, ShaanXi, China
in 1972. He received the B.S. degree in industrial
automation and the M.S. degree in computer sci-
ence and technology from the Xi’an University of
Architecture and Technology, Xi’an, China, in 1995
and 2000, respectively, and the Ph.D. degree in
control theory and application from Xi’an Jiaotong
University, Xi’an, in 2003.

He has been with Xi’an Jiaotong University since
2004, where he is currently with National Engineer-
ing Lab of Big Data Analytics and also with the
Systems Engineering Institute, as a Professor. He is a member of the Satellite-
Terrestrial Network Technology R&D Key Laboratory, Shaanxi Province.
His research interests include big data analytics, learning analytics, system
modelling and analysis, and cloud computing. He is a member of the IEEE.

Jia Yue received the B.S degree in automation from
Xidian University in 2014. He is currently pursing
in the PhD degree in Satellite-Terrestrial Network
Technology R&D Key Laboratory at Xi’an Jiaotong
University, focusing on data mining and multimodal
learning.

Kuo-Ming Chao is a professor of computing at
Coventry University, UK. His research interests in-
clude the areas of cloud computing and big data
etc as well as their applications. He has over 150
refereed publications. He is a member of the IEEE.

Buyue Qian received the BS degree in information
engineering from Xi’an Jiaotong University, in 2007,
and the Master of Science degree from Columbia
University, in 2009. He received the PhD degree
from the Department of Computer Science, Univer-
sity of California at Davis, in 2013. He is currently
a research scientist at IBM T.J. Watson Research.
He received the Yahoo! Research Award, the IBM
Eminence and Excellence Award, and the SIAM
Data Mining2013 Best Research Paper Runner Up
Award.

Nazaraf Shah
is a senior lecturer at Coventry
University, UK. He interested in intelligent agent
and cloud computing. He has over 50 publications
in various international conferences and journals.

12

Longzhuang Li
is a professor at Texas A&M
University-Corpus Christi. His research focuses on
data integration and data mining and has been
supported by National Science Foundation and Air
Force Research Lab.

Haiping Zhu received the B.S. degree in electronic
science from Northwest University in 1996, the M.S.
degree in information and communication engineer
from Chinese Academy of Sciences in 1999, and
the Ph.D. degree in computer science from Xi’an
Jiaotong University in 2009.

She is currently a Lecturer and graduate supervi-
sor with the Department of Computer Science and
Technology, Xi’an Jiaotong University. Her research
interests include educational data mining, learning
analytics and personalized recommendation.

Yan Chen received the B.S. degree in computer sci-
ence and technology from Xi’an Jiaotong University,
in 1993, the M.S. degree in computer science and
technology from Xi’an Jiaotong University, in 1996,
and the Ph.D. degree in computer science from Xi’an
Jiaotong University, China in 2005.

She is currently an Associate Professor and grad-
uate supervisor with the Department of Computer
Science and Technology, Xi’an Jiaotong University.
Her research interests include educational data min-
ing and learning analytics.

Bing Zeng received the B.S degree in mathematics
from Chang’an University and M.S degree from
Xi’an Jiaotong University, in 2012 and 2015 respec-
tively.

Qinghua Zheng received the B.S. degree in com-
puter software, the M.S. degree in computer orga-
nization and architecture, and the Ph.D. degree in
system engineering from Xi’an Jiaotong University,
China, in 1990, 1993, and 1997,respectively.

He did post-doctoral research at Harvard Uni-
versity in 2002 and was a Visiting Professor of
Research with the Hong Kong University from 2004
to 2005. Dr. Zheng received the First Prize for
National Teaching Achievement, State Education
Ministry in 2005 and the First Prize for Scientiﬁc
and Technological Development of Shanghai City and Shaanxi Province, in
2004 and 2003, respectively.

