Learned upper bounds for the Time-Dependent Travelling Salesman Problem

Tommaso Adamoa, Gianpaolo Ghiania, Pierpaolo Grecoa, Emanuela Guerrieroa,∗

aDipartimento di Ingegneria dell’Innovazione, Universit`a del Salento,
Via per Monteroni, 73100 Lecce, Italy

Abstract

Given a graph whose arc traversal times vary over time, the Time-Dependent Travelling Salesman Problem

consists in ﬁnding a Hamiltonian tour of least total duration covering the vertices of the graph. The main

goal of this work is to deﬁne tight upper bounds for this problem by reusing the information gained when

solving instances with similar features. This is customary in distribution management, where vehicle

routes have to be generated over and over again with similar input data. To this aim, we devise an

upper bounding technique based on the solution of a classical (and simpler) time-independent Asymmetric

Travelling Salesman Problem, where the constant arc costs are suitably deﬁned by the combined use of a

Linear Program and a mix of unsupervised and supervised Machine Learning techniques. The eﬀectiveness

of this approach has been assessed through a computational campaign on the real travel time functions of

two European cities: Paris and London. The overall average gap between our heuristic and the best-known

solutions is about 0.001%. For 31 instances, new best solutions have been obtained.

Keywords:

time-dependent routing, path ranking invariance, machine learning, travelling salesman

problem

1. Introduction

The purpose of this article is to present a Machine Learning (ML) enhanced upper-bound for the Time-

Dependent Travelling Salesman Problem (TDTSP), deﬁned as follows. Let G := (V ∪ {0}, A, τ ) denote

a time-dependent directed complete graph, where V = {1, . . . , n} is the set of customers, vertex 0 is the

depot and A := {(i, j) : i ∈ V, j ∈ V }

{(0, i) : i ∈ V }

{(i, 0) : i ∈ V } is the set of arcs. With each

1
2
0
2

l
u
J

8
2

]
I

A
.
s
c
[

1
v
1
4
6
3
1
.
7
0
1
2
:
v
i
X
r
a

arc (i, j) ∈ A is associated a travel time function τij(t), representing the travel time of (i, j) if the vehicle

S

S

leaves node i at time t. The TDTSP amounts to determine a least duration tour visiting each customer

∗Corresponding author
Email addresses: tommaso.adamo@unisalento.it (Tommaso Adamo), gianpaolo.ghiani@unisalento.it (Gianpaolo

Ghiani), pierpaolo.greco@unisalento.it (Pierpaolo Greco), emanuela.guerriero@unisalento.it (Emanuela
Guerriero)

Preprint submitted to Elsevier

July 30, 2021

 
 
 
 
 
 
once, with the vehicle leaving the depot at time 0.

In recent years there has been a ﬂourishing of scholarly works in time-dependent routing. See [12] for a

review of the ﬁeld. The contribution [22] was the ﬁrst to address the TDTSP and proposed a Mixed Integer

Programming (MIP) formulation. An approximate dynamic programming algorithm was devised in [23],

while two heuristics has been developed in [20]. A simulated annealing heuristic was proposed in [29] and

some metaheuristics were proposed in [17]. Cordeau et al. [10] derived some properties of the TDTSP as

well as lower and upper bounding procedures. They also represented the TDTSP as MIP model for which

they developed some families of valid inequalities. These inequalities were then used into a branch-and-cut

algorithm that solved instances with up to 40 vertices. Arigliano et al. [6] exploited some properties of the

problem and developed a branch-and-bound algorithm which outperformed the Cordeau et al. [10] branch-

and-cut procedure. In [24] a new global constraint was presented and used in a Constraint Programming

approach. This algorithm was able to solve instances with up to 30 customers. Recently, Adamo et al. [2]

proposed a parameterized family of lower bounds, where the parameters are chosen by ﬁtting the traﬃc

data. When embedded into a branch-and-bound procedure, their lower bounding mechanism allows to

solve to optimality a larger number of instances than Arigliano et al.

[6]. Variants of the TDTSP have

been examined in [5], [7], [27] and [33] (TDTSP with Time Windows), in [18] (Moving-Target TSP) and

in [26] (Robust TSP with Interval Data). Finally, it is worth noting that a scheduling problem, other than

the above deﬁned TDTSP, is also known as Time-Dependent TSP. It amounts to sequence a set of jobs

on a single machine in which the processing times depend on the position of the jobs within the schedule

([28], [11], [16], [32], [25], [30], [14],[1]).

In this paper, we propose an upper bounding technique inspired by the new ﬁndings of the recent paper

[3], where the authors studied a property of time-dependent graphs, dubbed path ranking invariance.

A time-dependent graph is path ranking invariant if the ordering of its paths (w.r.t.

travel time) is

independent of the start time. The authors showed that, if a graph is path ranking invariant, the solution

of a large class of time-dependent vehicle routing problems, including the TDTSP, can be determined by

solving suitably deﬁned (and simpler) time-independent routing problems. The authors demonstrated that

the ranking invariance property can be checked by solving a (large) Linear Programming (LP) problem. If

the ranking invariance check fails, they proved that a tight lower bound can be derived from the obtained

LP solution.

In this paper, we show how the new ﬁndings of [3] can be further generalized for determining tight

upper bounds for the TDTSP. The main idea is to determine a heuristic solution by solving the TDTSP

2

on an auxiliary time dependent graph, which satisﬁes the path ranking invariant property. The travel

time functions of the auxiliary graph are determined by generalizing the LP-based approach proposed in

[3]. In order to obtain a fast computation of the auxiliary travel time functions, we take advantage of the

predictive capabilities of a supervised ML technique. Indeed, the ultimate goal is the fast computation

of tight upper bounds, in those settings in which instances with similar features have to be solved over

and over again, as it is customary in distribution management. As stated in [8], a company does not care

about solving all possible TSPs, but only theirs. Therefore, instead of starting every time from scratch in

the deﬁnition of the auxiliary graph, we insert a learning mechanism in such a way the upper bounding

procedure can beneﬁt from previous runs on other instances with similar features. To this aim, we boost

our LP-based approach with a mix of supervised and unsupervised techniques in the spirit of [13]. To the

best of our knowledge, contribution [13] is the ﬁrst attempt to use ML to solve a time-dependent routing

problem. For a comparative analysis of machine learning heuristics for solving the classical (time-invariant)

Travelling Salesman Problem, see [31].

The paper is organized as follows. In Section 2 we provide a problem deﬁnition and some background

information on the study area. In Section 3 we introduce a parameterized family of upper bounds computed

by solving the TDTSP on suitably deﬁned auxiliary time-dependent graphs. Such family of upper bounds

gives rise to an optimization problem aiming to determine the parameter providing the best (minimum)

upper bounds.

In Section 4 we propose a ML-based heuristic approach for solving such optimization

problem.

In Section 5 we describe computational experiments on the graphs of two European cities

(London and Paris). Finally, we draw some conclusions in Section 6.

2. Problem deﬁnition and backgrounds

Let denote with [0, T ] the time interval associated to a single working day. Without loss of generality

we suppose that the travel time functions are constant in the long run, that is τij(t) := τij(T ) with t ≥ T .

For the sake of notational convenience, we also use τ (i, j, t) to designate τij(t). We suppose that traversal

time τij(t) satisfy the ﬁrst-in-ﬁrst-out (FIFO) property, i.e., leaving the vertex i later implies arriving later

at vertex j.

For any given path pk := (i0, i1, . . . , ik), the corresponding duration z(pk, t) can be computed recursively

as:

z(pk, t) := z(pk−1, t) + τik−1ik(z(pk−1, t)),

(1)

3

with the initialization z(p0, t) := 0. Therefore, a compact formulation of the TDTSP is :

min
p∈P

z(p, 0).

where P denotes the set of Hamiltonian tours on the time dependent graph G := (V ∪{0}, A, τ ). Algorithms

developed for the classical time-invariant TSP are not able to consider time-varying travel times without

essential structural modiﬁcations. Nevertheless, we observe that the absence of time constraints implies

that time-varying travel times have an impact on the ranking of solutions of the TDTSP, but they do not

pose any diﬃculty for feasibility check of solutions. A quite natural way of deﬁning a heuristic solution

approach is to determine the optimal solution of a classical Asymmetric TSP (ATSP), deﬁned on a graph
Gc = (V ∪ {0}, A, c) where c : A → R+ is a time-invariant (dummy) cost function. The main issue in this

approach is how to determine a time-invariant (dummy) cost function that mimics in an eﬀective manner

the solutions ranking of the original TDTSP. In this respect, it can be proved that there always exists

a time-invariant (dummy) cost function such that a least duration route of TDTSP is also a least cost

solution of the TSP deﬁned on the time-invariant graph Gc, which motivates the following deﬁnition.

Deﬁnition 1 (Valid cost function). A time-invariant cost function c : A → R+ is valid for the TDTSP

deﬁned on G = (V ∪ {0}, A, τ ), if the least duration solution p∗ = min
p∈P

z(p, 0) corresponds to a least cost

solution of the time-invariant ATSP deﬁned on Gc = (V ∪ {0}, A, c), that is:

arg min

p∈P X(i,j)∈P

τij(T ) = arg min
p∈P

z(p).

If we are given a cost function valid for an instance of the TDTSP deﬁned on a time-dependent

G = (V ∪ {0}, A, τ ), we can determine the least duration solution p∗ by exploiting algorithms developed

for (classical ) time invariant ATSP. In [3] the authors studied the relationship between the concept of valid

cost function and a property of time-dependent graphs called path ranking invariance.

Deﬁnition 2 (Path ranking invariance). A time-dependent graph G is path ranking invariant, if the

following relationship holds for any pair of paths p′ and p′′ of G:

z(p′, t) ≥ z(p′′, t) ∀t ≥ 0.

Since travel time functions are constant in the long run, if a time-dependent graph G = (V ∪ {0}, A, τ )

is path ranking invariant then a valid cost function is c(i, j) = τij(T ).

4

2.1. The auxiliary graph

The proposed heuristic algorithm is based on the deﬁnition of an auxiliary path ranking invariant

graph G = (V ∪ {0}, A, τ) where each τ ij(t) is an approximation of τij(t), with (i, j) ∈ A. Each continuous

piecewise linear function τ ij(t) is generated by the travel time model proposed in [19] (IGP model for

short), in which each arc (i, j) ∈ A is characterized by a constant stepwise speed function vij(t) and a

length Lij. We suppose that the horizon is partitioned into H subintervals [Th, Th+1] (h = 0, . . . , H − 1),

with T0 = 0 and TH = T . We assume that all arcs of the auxiliary graph G share a common speed

function, such that

vij(t) = vh,

with t ∈ [Th, Th+1], h = 0, . . . , H − 1 and (i, j) ∈ A. According to the IGP model, given a start time t the

travel time value τ ij(t) is computed by the following iterative procedure.

Algorithm 1 Computing the travel time τ ij(t)

k ← h : th ≤ t ≤ th+1

ℓ ← Lij;

t′ ← t + ℓ/vk;

while t′ > Tk+1 do

ℓ ← ℓ − vk(Tk+1 − t);

t ← Tk+1;

t′ ← t + ℓ/vk+1;

k ← k + 1
return t′ − t

In the IGP model the speed of a vehicle is not a constant over the entire length of arc (i, j) ∈ A but

it changes when the boundary between two consecutive time periods is crossed. Since the travel speed is

a constant stepwise function, the relationship between the input parameters and the output value of the

IGP model can be expressed in a compact fashion as follows:

t+τ ij(t)

v(µ)dµ.

Lij =

Z
t

(2)

We denote with z(pk, t) the traversal time of a path pk at time instant t on the time-dependent graph G,

that is

z(pk, t) = z(pk−1, t) + τ ik−1ik(z(pk−1, t)),

(3)

5

with the initialization z(p0, t) = 0.

Proposition 1. (Adamo et al.

[3] ) The time dependent graph G = (V ∪ {0}, A, τ) is path ranking

invariant.

Proof. We observe that from (2) it follows that given a path p we have that:

t+z(p,t)

v(µ)dµ,

Lij =

Z

t

X(i,j)∈p

where the notation (i, j) ∈ p means that the arc (i, j) ∈ A is traversed by the path p. This implies that if

a path p′ is shorter than a path p′′ then p′ is also quicker than p′′ for any start time t ∈ [0, T ]:

Lij ≤

X(i,j)∈p′

X(i,j)∈p′′

Lij ⇔ z(p′, t) ≤ z(p′′, t),

which proves the thesis.

The main implication of Proposition 1 is that an upper bound on the TDTSP deﬁned on the original

graph G can be obtained by solving a classical time invariant ATSP with cost coeﬃcients c(i, j) = τ ij(T ).

Clearly the quality of the obtained upper bound is correlated with the ﬁtting deviation between the

original travel time function τ and its approximation τ . Minimizing such ﬁtting deviation is the main idea

underlying the family of parameterized upper bounds presented in the following section.

3. A family of parameterized upper bounds

In this section we deﬁne a family of parameterized upper bounds zΩ, where parameters Ω constitute

an ordered set of time instants. Given set Ω, upper bound zΩ is determined by solving the TDTSP on an

auxiliary path ranking invariant graph GΩ = (V, A, τ Ω). The travel time function τ Ω is an approximation

of the original travel function τ . In particular τ Ω is generated by the IGP model and satisﬁes relationship

(2). We recall that the IGP parameters are: the set of speed breakpoints, the speed values and the length of

the arcs. We make use of the given upper-bound parameter Ω to model the set of IGP speed breakpoints,

i.e. Ω = {T0, . . . , TH}, with H = |Ω| − 1. Then speed values and length of arcs are prescribed by a

linear program, which aims to minimize the ﬁtting deviation between the original τ and its parameterized

approximation τ Ω. The main idea underlying the linear program is that the equalities (2) imply that the

travel time functions τ and τ Ω are perfect ﬁt if the following relationship holds for each arc (i, j) ∈ A and

time instant t ∈ T :

t+τij (t)

v(µ)dµ = 0.

Lij −

Z
t

6

(4)

The objective function aims to minimize a ﬁtting deviation given by the violations of equality constraints

(4). Due to the continuous time nature of (4), we deﬁne a surrogate of the ﬁtting deviation by evaluating

(4) only for time instants belonging to a set Ωij, that is:

Th+τij (Th)

Lij −

Z

Th

v(µ)dµ = 0,

(5)

with h = 0, . . . , |Ωij| − 1 and (i, j) ∈ A. The set Ω is deﬁned as the union set of Ωij, with (i, j) ∈ A, i.e.

Ω =

Ωij.

S(i,j)∈A

Let deﬁne the coeﬃcient aijkh as follows:

aijkh = 


min(Th+1 − Th, max(0, Tk + τij(Tk) − Th))

k ≤ h

0

otherwise

with (i, j) ∈ A, h, k = 0, . . . , |Ωij| − 1.



Since v(t) is constant stepwise, relationship (5) can be expressed by the following linear equality:

|Ωij |−1

Xh=0

aijkh × vh = Lij + sijk,

(6)

where the free-sign variable sijk models the violation of the right-hand-side of (5) with respect to Lij, with

(i, j) ∈ A, k = 0, . . . , |Ωij| − 1. The proposed linear program determines a speed function v(t) and the

corresponding right-hand-sides of (6), which we denote with xijk: since it represents a length we require

that xijk ≥ 0, with (i, j) ∈ A, k = 0, . . . , |Ωij| − 1. We model the maximum ﬁtting deviation between the

original travel time function τ (i, j, t) and τ Ω(i, j, t) as

ζij =

max
k∈[0,...,|Ωij|−1]

xijk −

min
k∈[0,...,|Ωij |−1]

xijk,

with (i, j) ∈ A. Quantity ζΩ =

ζij represents an approximated measure of the total ﬁtting deviation

associated to the auxiliary graph GΩ. We determine the auxiliary graph GΩ, so that the corresponding

P(i,j)∈A

travel time function τ Ω minimizes the value of ζΩ. To this aim, we formulate the following linear program

(7)-(14), where xij and xij model, respectively, the minimum and maximum value of the variables xijk,

with (i, j) ∈ A and k = 0, . . . , |Ωij| − 1. A solution of such linear programming model represents the

parameters of a constant piecewise function y(t) and constant values xijh, with h = 0, . . . , |Ωij| − 1 and

(i, j) ∈ A. The continuous variable yh represents the value of y(t) during the h − th time interval, that is:

y(t) = yh,

7

with t ∈ [th, th+1] and h = 0, . . . , |Ω| − 1.

ζ ∗
Ω := min

xij − xij

X(i,j)∈A

s.t.

|Ωij|−1

Xh=0

aijkh · yh = xijk

k = 0, . . . , |Ωij| − 1

(i, j) ∈ A

xij ≤ xijk

k = 0, . . . , |Ωij| − 1, (i, j) ∈ A

xij ≥ xijk

k = 0, . . . , |Ωij| − 1, (i, j) ∈ A

xijk ≥ 0,

k = 0, . . . , |Ωij| − 1, (i, j) ∈ A

xij ≥ 0

xij ≥ 0

yh ≥ ρ

(i, j) ∈ A

(i, j) ∈ A

h = 0, . . . , |Ω| − 1

(7)

(8)

(9)

(10)

(11)

(12)

(13)

(14)

Objective function (7) aims to determine a step function y∗(t) that minimizes the total maximum ﬁtting

deviation between the original travel time function τ and its approximation τ Ω. Constraints (8) state the

relationship between y(t) and x variables. Constraints (9) and (10) model the relationship between xij, xij

and continuous variables xijk. Constraints (11), (12), (13) and (14) describe the non-negative conditions

on the decision variables. In particular, in order to cut oﬀ the trivial (pointless) solution y(t) = 0 for

t ≥ 0, constraints (14) state that the constant stepwise linear function y(t) has to be greater or equal than

the input parameter ρ > 0.

Let y∗(t) and x∗ denote, respectively, the step function and the x values associated with the optimal solution

of the linear program (7)-(14). Moreover, we denote with ˜x∗

ij the average of the x values associated to arc

(i, j) ∈ A in the optimal solution, that is:

˜x∗
ij =

|Ωij|−1

Xh=0

x∗
ijh
|Ωij|

.

We observe that the linear program does not directly prescribe the IGP parameter Lij, with (i, j) ∈ A.

Indeed, according to (6) we have that:

x∗
ijk = Lij + sijk,

where, we recall, sijk quantiﬁes the violation of equality (5), with (i, j) ∈ A and k = 0, . . . , |Ωij| − 1. Since

8

Lij denotes the IGP length associated with τ Ω, from (6) we have that

tk+τ (i,j,tk)

tk+τ Ω (i,j,tk)

Z

tk

v(µ)dµ −

Z

tk

v(µ)dµ = sijk,

that is the lower the absolute value of equality (5) violation (i.e. |sijk|), the lower the absolute error made

by approximating τ (i, j, tk) with τ Ω(i, j, tk), with tk ∈ Ωij and (i, j) ∈ A. Since ˜x∗

ij minimizes the mean

squared violation of equality (5), i.e.

˜x∗
ij = arg min
Lij

|Ωij|−1

Xk=0

(x∗

ijk − Lij)2
|Ωij|

,

we (heuristically) minimize such travel time approximation errors by generating the travel time function

τ Ω(i, j, t) with the following IGP input parameters:

v(t) = y∗(t), Lij = ˜x∗
ij,

with (i, j) ∈ A. Finally, we recall that the travel time function τ Ω(i, j, t) satisﬁes relationship (2), and,

therefore, the auxiliary graph is path ranking invariant. Summing up, given a set of time instants Ω =

Ωij and a time dependent graph G, the proposed upper bounding procedure consists of three main

S(i,j)∈A
steps.

• STEP 1. Solve linear program (7)-(14). Set the travel speed function v(t) equal to y∗(t). Similarly

set Lij to ˜x∗

ij for each (i, j) ∈ A.

• STEP 2. Determine solution p∗

Ω as the least cost solution of the following time-independent ATSP:

min
p∈P X(i,j)∈p

τ Ω(i, j, T ).

• STEP 3. Compute upper bound zΩ by evaluating p∗

Ω w.r.t. the original travel time function τ that

is:

zΩ = z(p∗

Ω, 0)

We ﬁnally observe that in order to ﬁnd the least upper bound, the following optimization problem has

to be solved:

min
Ω

zΩ,

9

(15)

where zΩ is evaluated according to the proposed three-steps procedure. A simple heuristic for solving

(15) is to set each Ωij equal to a discretization D of the planning horizon. In this case we refer to the

three-steps procedure computing the upper bound zD as PL-enhanced heuristic (PL-HTSP for short). The

main drawback of the PL-HTSP heuristic is that the computation of a tight upper bound value zD might

require the solution of a large Linear Program.

In the following section we devise a machine learning

based heuristic for solving (15) aiming to overcome this drawback. In particular, we exploit the predictive

capabilities of machine learning in order to carefully select Ω as a (quite small) subset of time instants in

D. In this case, we refer to the three-steps upper bounding procedure computing zΩ as MLPL-enhanced

heuristic (MLPL-HTSP for short).

4. Learning to enhance upper bounds

In this section, we propose a learning mechanism for determining set Ω. Then upper bound zΩ is

computed according to the three-steps upper bounding procedure illustrated in the previous section. As

stated in Section 1, the goal is to determine ”good” upper bounds, in those settings in which instances

with similar features have to be solved over and over again, as it is customary in distribution management.

Instead of starting every time from scratch in the deﬁnition of the auxiliary graph GΩ, we devise a learning

mechanism so that our upper bounding procedure can beneﬁt from previous runs on other instances with

similar features.

The idea of bounds based on an auxiliary path ranking invariant graphs is inspired by [3], where the

authors devised a suﬃcient condition for determining the optimal solution of (15). They proposed an

iterative procedure to determine Ω. Then they considered a minimax variant of (7)-(14), where, basically,

relationship (6) is modeled as a lower approximation, i.e. sijk ≥ 0 with (i, j) ∈ A and k = 0, . . . , |Ωij| − 1.

The authors proved that if ζ ∗

Ω = 0, then τ Ω and τ are perfect ﬁt and, therefore, p∗

duration on G = (V

{0}, A, τ ). If the optimality check fails, i.e. ζ ∗

Ω is a tour of least total
Ω > 0, they proved that τ Ω is a lower

approximation of τ and the total duration of p∗

Ω on the less congested graph GΩ is a lower bound for the
optimal solution of TDTSP deﬁned on the original graph G. As stated by the authors in [3], their upper

S

bound was a by-product of the search for ”good” TDTSP lower bounds.

In this research work, we aim to devise a machine learning approach where the main goal is to enhance

the upper bound zΩ. In particular we propose a mechanism for learning the relationship between set Ω

and the optimal solutions of the TDTSP deﬁned on the original time-dependent graph G. We start by

observing that there exists a ﬁnite and discrete set Ω∗, consisting of all (feasible) arrival times: if t belongs

10

to Ω∗, then there exists on G a feasible tour p ∈ P with t corresponding to the arrival time at a node

i ∈ V . That such set Ω∗ exists is based on the observation that there is a ﬁnite number of feasible tours.

Remark 1. If ζ ∗

Ω∗ = 0, then for each arc (i, j) ∈ A and time instants t ∈ Ω∗, we have that:

and therefore, upper bound zΩ∗ is optimal, that is zΩ∗ = min
p∈P

z(p, 0).

τ Ω∗(i, j, t) = τ (i, j, t)

The main limit of the suﬃcient optimality condition stated in Remark 1 is that determining the entire

Ω∗ is computationally challenging. To overcome this drawback, we take advantage of the predictive capa-

bilities of supervised ML techniques, in order to determine a set Ω such that the arrival times associated

to optimal solutions have a good chance of being included in Ω. We denote with fi a prediction (obtained

through a supervised ML method) of the expected time of arrival (ETA) at customer i in an optimal so-

lution. We observe that the ranking among arcs might deeply changes during the planning horizon on the

original graph G. On the other hand, the path ranking invariance of the auxiliary graph GΩ implies also

an arc ranking invariance. The intuition is that, by taking a snapshot around the optimal arrival times

(of similar instances previously solved), we have a good chance of embedding in the auxiliary graph GΩ

the arc ranking associated to the set of quickest tours of the original graph. For this purpose, we require

that the maximum ﬁtting deviation between the original travel time function τ (i, j, t) and τ Ω(i, j, t) is

minimized for each arc (i, j) ∈ A in the time interval [fi − ǫi, fi + ǫi], where ǫi > 0 represents the mean

absolute error associated to fi, with i ∈ V .

In particular, we ﬁrst deﬁne a discretization D of the time horizon. Then for each node i we select the

subset Si of D as follows:

Si = {t ∈ [fi − ǫ, fi + ǫ] ∧ t ∈ D}

In the deﬁnition of the approximation travel time τ Ω, all arcs (i, j) ∈ A outgoing the node i ∈ V share a

common set Ωij corresponding to the set Si, i.e. Ωij = Si. Therefore in the MLPL-HTSP, the travel time

τ Ω is determined by solving the linear program (7)-(14), where the role of Ωij is played by the subset Si

in the constraints (8)-(11), with i = 1, . . . , n.

4.1. ETA estimation

In order to estimate the ETA of a customer i in an optimal solution, an artiﬁcial neural network (ANN)

is used in conjunction with an exact algorithm for the TDTSP [6]. The chosen ANN is a Multilayer

Perceptron Regressor (MPR) [4], consisting of at least three layers of nodes: an input layer, one or more

11

hidden layer and an output layer. Except for the input nodes, each node uses a nonlinear activation

function. Firstly customers are aggregated and the service territory is divided into a number of zones K.

The customer aggregation is an unsupervised learning technique that aims to partition the customers of

the training set into K clusters of equal variance, where the sum of intra-cluster Euclidean distances is

minimized. In our experimentation, we used a K-means algorithm [21]. For each training instance, an

average zone ETA, named ZET Ak, is determined, with k = 1, . . . , K. In particular, the arrival times

at the customers are computed by the exact algorithm of [6]. The neural network has K inputs and K

outputs: the inputs are constituted by the number nk of customers in each of the k zones (i.e. the customer

distribution in the network); the outputs are the K ZET Ak estimates (k = 1, . . . , K). It is worth noting

that, if K is large the predictions are expected to be more accurate but the training phase would require

a huge number of instances. On the other hand, a small value of K implies a large variability of the ETA

inside a zone, which has a disadvantageous eﬀect on the ETA estimation of individual customers. The

optimal number of zones K was determined in a preliminary experimentation.

5. Computational Experiments

The quality of the proposed upper bounding procedure was empirically assessed through a computa-

tional campaign. The machine learning component of the MLPL-HTSP algorithm was implemented in

Python (version 3.6). The Multilayer Perceptron Regressor implementation was taken from the sklearn

neural network library (method MLPRegressor) while the K-means implementation came from the sklearn

cluster library (K-means method). The training instances were solved to optimality (or near-optimality)

using a Java implementation of the branch-and-bound scheme proposed in [6] enhanced with the lower

bound proposed in [3]. A time limit of an hour was imposed. The linear program (7)-(14) was solved

with IBM ILOG CPLEX 12.10. The instances of the Asymmetric TSP have been solved by means of [9].

All the codes were tested on a Linux machine clocked at 2.67 GHz and equipped with 8 GB of RAM. We

considered the instances generated by Adamo et al.

[13] and based on the real travel time functions of

two major European cities: Paris and London.

5.1. Parameter tuning

In a preliminary tuning we have selected the most appropriate combination of parameters. Our datasets

contained approximately 6 − 700 instances with 50 customers each: 90% has been assigned to the training

set, while the remaining 10% to the test set. The neural network settings providing the best results, in

terms of strength of captured relationships were: three layers, hyperbolic tangent activation function, ﬁve

12

neurons in the hidden layer, LBFGS solver and constant learning rate. As far as customer aggregation is

concerned, Table 1 and Table 2 reports the neural network mean errors (in minutes) for each zone. For

London, 8 clusters gave the best results in terms of coeﬃcient of determination (R2), whilst for Paris 6

zones were the best case for neural network performance. It is worth noting that the R2 scores (= 0.53

for the London instances and = 0.60 for the Paris instances) suggest a moderate eﬀect size. We set

parameter ǫi equal to the mean absolute error of the zone, which the customer i ∈ V belongs to. We

considered a 5-minutes time unit for the discretization D of the planning horizon. Finally, we set ρ equal

to 1/ min

(Th+1 − Th).

h=0,...,|Ω|−1

Table 1: Mean errors in the London instances

Zone

Mean error Mean absolute error

Standard error

1

2

3

4

5

6

7

8

Average

7.68

-4.61

8.32

-1.93

-2.68

8.69

2.54

6.68

3.09

36.78

29.23

26.94

27.34

28.78

56.68

24.60

54.00

35.54

55.16

37.19

35.51

36.87

46.21

69.21

32.31

64.84

47.16

Table 2: Mean errors in the Paris instances

Zone

Mean error Mean absolute error

Standard error

1

2

3

4

5

6

Average

-1.02

2.40

0.74

-2.78

5.53

1.33

1.03

18.55

15.29

19.69

28.85

44.65

24.00

25.17

23.74

20.14

24.30

36.53

52.49

29.55

31.13

5.2. Computational results

As illustrated in the previous section, the predictive capabilities of the ML-techniques have been ex-

ploited for the fast computation of two Ω sets, associated to London and Paris respectively. Then the two

testsets were solved by the MLPL-HTSP algorithm. The computational results are presented in Tables 5

- Table 6, under the following headings:

• the name of the test instance,

13

• the objective value BK in minutes of the best-known solution determined by the exact algorithm

proposed in [6] enhanced with the lower bound proposed in [3], with a time limit of 1 hour;

• the objective value zΩ in minutes of the MLPL-HTSP solution;

• the percentage of improvement DEV of zΩ with respect to BK, computed as:

DEV =

zΩ − BK
BK

;

• T ime in seconds spent to determine zΩ.

If zΩ is a new best-known solution, it is indicated in bold. The average running times are 18.28 seconds

for London instances and 12.46 seconds for Paris instances. The average percentage deviation between

MLPL-HTSP result and the best-known solution is 0.23% for London instances and −0.18% for Paris

instances. In the worst case, the percentage deviation is 2.15% and in 31 cases a new best-known solution

is obtained. For 38 instances, the MLPL-HTSP heuristic also obtains the best known solution, whilst for

100 out of 140 instances the absolute value |BK − zΩ| is less or equal than 1 minute, which is the smallest

time unit normally considered in real vehicle routing problems inside large cities.

We have also examined the impact of both the linear program (7)-(14) and the machine learning

algorithm. For this purpose we have implemented a baseline heuristic HTSP, where the auxiliary graph G

is time-independent, with the constant value associated to each arc (i, j) ∈ A set equal to max
t∈[0,T ]

τij, for each

(i, j) ∈ A. Table 3 and Table 4 report results for all three heuristics: column headings are self explanatory.

Results associated to the PL-HTSP highlight that the computation of the approximation τ Ω provides a

remarkable increase of both the solution quality and the computing time w.r.t.

the baseline heuristic

HTSP. It is by leveraging the machine learning that the MLPL-HTSP heuristic obtains both solution

quality improvement and a reduction (by an order of magnitude) of the computing time w.r.t. the PL-

HTSP heuristic. Moreover we observe that the MLPL-HTSP heuristic provides remarkable improvements

in terms of both worst case and best case, i.e. the maximum and minimum values of DEV in Table 3.

As far as the computing time is concerned, Table 4 shows that MLPL-HTSP represents a good tradeoﬀ

between the baseline algorithm and the PL-HTSP. Indeed, the maximum computing time of MLPL-HTSP

is remarkably lower than the minimum time of PL-HTSP, whilst the minimum computing time of MLPL-

HTSP is only few seconds above the maximum time of HTSP.

These results clearly illustrate that high quality results are obtained by the MLPL-HTSP algorithm

for instances that correspond to realistic travel time functions.

14

Table 3: Impact of approximation τ and the machine learning algorithm on solution quality

Testset

Heuristic

Avg DEV% min DEV max DEV

London

HTSP

London

PL-HTSP

London MLPL-HTSP

Paris

Paris

Paris

HTSP

PL-HTSP

MLPL-HTSP

1.42%

0.35%

0.23%

0.72%

-0.14%

-0.18%

0.00

-0.90

-0.49

-9.45

-13.13

-12.52

16.44

8.36

8.16

11.04

13.13

3.93

Table 4: Impact of approximation τ and the machine learning algorithm on computing time

Testset

Heuristic

Avg Time min Time max Time

London

HTSP

1.26

London

PL-HTSP

128.52

London MLPL-HTSP

Paris

Paris

Paris

HTSP

PL-HTSP

MLPL-HTSP

18.28

1.94

83.12

12.46

0.08

91.72

14.95

0.06

57.11

8.73

7.18

195.34

26.40

10.90

105.93

37.47

6. Conclusions

The main contribution of this paper is an algorithm that learns from past data to solve the TDTSP

in an eﬃcient and eﬀective manner. Computational results on two European cities show that the average

gap with the best-known solutions is only 0.001% and the average computation time is 15 seconds. Fur-

thermore, new best solutions have been produced for several test instances. This is achieved by solving

a time-invariant Asymmetric TSP, where the arc (constant) costs are suitably deﬁned by the combined

use of an LP-based approach and a mix of unsupervised and supervised Machine Learning techniques. In

particular, we make use of the ETA predictions provided by a feedforward neural network trained on past

instances solved to optimality or near-optimality. With regard to future research we want to investigate the

deﬁnition of new features for the neural network as well as to exploit the use of deep learning methods [15].

Another noteworthy research goal concerns the study of a more eﬃcient algorithm for (approximately)

minimizing the ﬁtting deviation between the travel time function τ and its approximation τ Ω. Finally,

future research could be focused on the adaptation of the ideas introduced in this paper to other routing

problems.

Conﬂict of interest

The authors declare that they have no conﬂict of interest.

15

References

[1] Abeledo, H., Fukasawa, R., Pessoa, A., Uchoa, E.: The time dependent traveling salesman problem:

polyhedra and algorithm. Mathematical Programming Computation 5(1), 27–55 (2013)

[2] Adamo, T., Ghiani, G., Guerriero, E.: An enhanced lower bound for the time-dependent travelling

salesman problem. Computers & Operations Research 113, 104795 (2020). DOI https://doi.org/10.

1016/j.cor.2019.104795

[3] Adamo, T., Ghiani, G., Guerriero, E.: On path ranking in time-dependent graphs. Computers

& Operations Research 135, 105446 (2021). DOI https://doi.org/10.1016/j.cor.2021.105446. URL

https://www.sciencedirect.com/science/article/pii/S0305054821002008

[4] Aggarwal, C.C., et al.: Neural networks and deep learning. Springer (2018)

[5] Albiach, J., Sanchis, J., Soler, D.: An asymmetric TSP with time windows and with time-dependent

travel times and costs: An exact solution through a graph transformation. European Journal of

Operational Research 189, 789–802 (2008)

[6] Arigliano, A., Calogiuri, T., Ghiani, G., Guerriero, E.: A branch-and-bound algorithm for the time-

dependent travelling salesman problem. Networks 72(3), 382–392 (2018)

[7] Arigliano, A., Ghiani, G., Grieco, A., Guerriero, E., Plana, I.: Time-dependent asymmetric trav-

eling salesman problem with time windows: Properties and an exact algorithm. Discrete Ap-

plied Mathematics 261, 28–39 (2019). DOI https://doi.org/10.1016/j.dam.2018.09.017. URL

https://www.sciencedirect.com/science/article/pii/S0166218X18304827. GO X Meeting,

Rigi Kaltbad (CH), July 10–14, 2016

[8] Bengio, Y., Lodi, A., Prouvost, A.: Machine

learning

for

combinatorial

optimiza-

tion:

A methodological

tour

d’horizon.

European

Journal

of Operational Re-

search 290(2),

405–421 (2021).

DOI https://doi.org/10.1016/j.ejor.2020.07.063.

URL

https://www.sciencedirect.com/science/article/pii/S0377221720306895

[9] Carpaneto, G., Dell’Amico, M., Toth, P.: Exact solution of large-scale, asymmetric traveling salesman

problems. ACM Transactions on Mathematical Software (TOMS) 21(4), 394–409 (1995)

16

[10] Cordeau, J.F., Ghiani, G., Guerriero, E.: Analysis and Branch-and-Cut Algorithm for the Time-

Dependent Travelling Salesman Problem. Transportation Science (2014). DOI 10.1287/trsc.1120.0449

[11] Fox, K., Gavish, B., Graves, S.: An n-constraint formulation of the (time-dependent) traveling sales-

man problem. Operations Research 28, 1018–1021 (1980)

[12] Gendreau, M., Ghiani, G., Guerriero, E.: Time-dependent routing problems: A review. Computers

& Operations Research (2015). DOI 10.1016/j.cor.2015.06.001

[13] Ghiani, G., Adamo, T., Greco, P., Guerriero, E.: Lifting the performance of a heuristic for the

time-dependent travelling salesman problem through machine learning. Algorithms 13(12) (2020).

DOI 10.3390/a13120340. URL https://www.mdpi.com/1999-4893/13/12/340

[14] Godinho, M.T., Gouveia, L., Pesneau, P.: Natural and extended formulations for the time-dependent

traveling salesman problem. Discrete Applied Mathematics 164, 138–153 (2014)

[15] Goodfellow, I., Bengio, Y., Courville, A.: Deep learning. MIT press (2016)

[16] Gouveia, L., Voß, S.: A classiﬁcation of formulations for the (time-dependent) traveling salesman

problem. European Journal of Operational Research 83, 69–82 (1995)

[17] Harwood, K., Mumford, C., Eglese, R.: Investigating the use of metaheuristics for solving single

vehicle routing problems with time-varying traversal costs. J Oper Res Soc 64(1), 34–47 (2013)

[18] Helvig, C., Robins, G., Zelikovsky, A.: The moving-target traveling salesman problem. Journal of

Algorithms 49, 153–174 (2003)

[19] Ichoua, S., Gendreau, M., Potvin, J.Y.: Vehicle dispatching with time-dependent travel times. Euro-

pean Journal of Operational Research 144(2), 379–396 (2003). DOI 10.1016/S0377-2217(02)00147-9

[20] Li, F., Golden, B., Wasil, E.: Solving the time dependent traveling salesman problem. In: R. Sharda,

S. Voß, B. Golden, S. Raghavan, E. Wasil (eds.) The Next Wave in Computing, Optimization, and

Decision Technologies, Operations Research/Computer Science Interfaces Series, vol. 29, pp. 163–182.

Springer (2005)

[21] MacQueen, J., et al.: Some methods for classiﬁcation and analysis of multivariate observations. In:

Proceedings of the ﬁfth Berkeley symposium on mathematical statistics and probability, vol. 1, pp.

281–297. Oakland, CA, USA (1967)

17

[22] Malandraki, C., Daskin, M.S.:

Time Dependent Vehicle Routing Problems:

Formula-

tions, Properties and Heuristic Algorithms

(1992).

DOI 10.1287/trsc.26.3.185.

URL

http://pubsonline.informs.org/doi/abs/10.1287/trsc.26.3.185

[23] Malandraki, C., Dial, R.: A restricted dynamic programming heuristic algorithm for the time depen-

dent traveling salesman problem. European Journal of Operational Research 90, 45–55 (1996)

[24] Melgarejo, P.A., Laborie, P., Solnon, C.: A time-dependent no-overlap constraint: Application to

urban delivery problems.

In:

International Conference on AI and OR Techniques in Constriant

Programming for Combinatorial Optimization Problems, pp. 1–17. Springer (2015)

[25] Miranda-Bront, J., M´endez-D´ıaz, I., Zabala, P.: An integer programming approach for the time-

dependent TSP. Electronic Notes in Discrete Mathematics 36, 351–358 (2010)

[26] Montemanni, R., Barta, J., Mastrolilli, M., Gambardella, L.: The robust traveling salesman problem

with interval data. Transportation Science 41, 366–381 (2007)

[27] Montero, A., M´endez-D´ıaz, I., Miranda-Bront, J.J.: An integer programming approach for the time-

dependent traveling salesman problem with time windows. Computers & Operations Research 88,

280–289 (2017)

[28] Picard, J., Queyranne, M.: The time-dependent traveling salesman problem and its application to

the tardiness problem in one-machine scheduling. Operations Research 26, 86–110 (1978)

[29] Schneider, J.: The time-dependent traveling salesman problem. Physica A: Statistical Mechanics and

its Applications 314, 151–155 (2002)

[30] Stecco, G., Cordeau, J., Moretti, E.: A branch-and-cut algorithm for a production scheduling problem

with sequence-dependent and time-dependent setup times. Computers & Operations Research 35(8),

2635–2655 (2008)

[31] Uslan, V., Bucak, I.O.: A comparative study of machine learning heuristic algorithms to solve the

traveling salesman problem (2010)

[32] Vander Wiel, R., Sahinidis, N.: An exact solution approach for the time-dependent traveling-salesman

problem. Naval Research Logistics 43, 797–820 (1996)

18

[33] Vu, D.M., Hewitt, M., Boland, N., Savelsbergh, M.: Dynamic discretization discovery for solving

the time-dependent traveling salesman problem with time windows. Transportation Science 54(3),

703–720 (2020)

19

Table 5: Computational results of MLPL-HTSP for the London testset

Instance

BK

10 I 1

407.59

zΩ
407.59

DEV % time

Instance

BK

0.00%

17.90

10 I 6

399.36

zΩ
399.36

DEV % time

0.00%

15.70

10 I 10

379.27

387.43

2.15%

18.44

10 I 7

388.38

388.69

0.08%

19.75

10 I 11

400.62

403.28

0.66%

21.28

10 I 9

369.03

369.79

0.21%

18.84

10 I 12

401.17

402.09

0.23%

19.73

1 I 2

388.70

390.75

0.53%

18.53

10 I 13

463.42

463.42

0.00%

24.86

1 I 26

419.04

419.04

0.00%

16.68

10 I 14

399.75

399.77

0.01%

21.40

1 I 27

378.45

378.45

0.00%

16.43

10 I 15

415.50

418.84

0.80%

18.34

1 I 28

393.14

394.52

0.35%

16.37

10 I 16

401.62

401.81

0.05%

16.84

1 I 29

393.51

394.14

0.16%

23.73

10 I 17

402.36

402.36

0.00%

15.60

1 I 3

396.82

399.36

0.64%

15.48

10 I 19

436.13

436.13

0.00%

18.80

1 I 30

387.16

387.16

0.00%

15.33

10 I 2

372.64

372.31

-0.09% 15.25

1 I 31

363.90

363.90

0.00%

14.95

10 I 20

422.78

425.09

0.55%

17.53

1 I 32

408.21

408.21

0.00%

17.31

10 I 23

400.79

400.82

0.01%

18.75

1 I 33

414.32

415.26

0.23%

21.69

10 I 24

411.51

413.28

0.43%

18.93

1 I 34

365.65

365.94

0.08%

15.65

10 I 25

404.39

404.64

0.06%

17.52

1 I 35

412.53

412.53

0.00%

19.08

10 I 26

409.90

410.32

0.10%

18.72

1 I 36

369.79

374.14

1.18%

19.30

10 I 27

420.02

420.02

0.00%

19.97

1 I 37

410.90

410.91

0.00%

16.71

10 I 28

419.80

421.90

0.50%

19.94

1 I 39

406.39

407.94

0.38%

22.43

10 I 29

408.59

409.82

0.30%

20.94

1 I 4

402.54

402.65

0.03%

26.40

10 I 30

395.66

396.32

0.17%

15.70

1 I 40

396.62

396.62

0.00%

15.03

10 I 31

409.23

411.73

0.61%

24.82

1 I 42

408.81

408.81

0.00%

20.21

10 I 32

398.56

398.07

-0.12% 15.58

1 I 44

373.48

374.71

0.33%

21.97

10 I 33

345.61

350.94

1.54%

17.12

1 I 45

367.21

367.26

0.01%

15.16

10 I 34

353.48

353.52

0.01%

18.41

1 I 46

404.26

404.59

0.08%

17.55

10 I 36

394.61

394.61

0.00%

15.91

1 I 47

402.02

402.61

0.15%

18.54

10 I 37

416.03

416.59

0.13%

16.02

1 I 48

393.13

394.97

0.47%

16.31

10 I 38

453.65

453.79

0.03%

19.90

1 I 49

381.64

381.64

0.00%

16.16

10 I 39

426.38

426.49

0.03%

17.30

1 I 5

333.64

335.85

0.66%

15.96

10 I 40

416.32

417.37

0.25%

18.13

1 I 50

372.23

372.62

0.10%

16.18

10 I 41

398.48

398.48

0.00%

16.61

1 I 51

417.30

417.74

0.11%

18.47

10 I 5

393.85

395.13

0.32%

19.25

1 I 53

405.22

405.22

0.00%

16.08

20

Table 6: Computational results of MLPL-HTSP for the Paris testset

0 I 0

0 I 1

Instance

BK

zΩ
289.26

DEV % time

Instance

BK

0.00%

15.59

0 I 133

280.81

zΩ
280.81

DEV % time

0.00%

11.74

289.26

282.15

282.23

0.03%

11.54

0 I 134

287.89

288.53

0.22%

37.47

0 I 10

291.04

291.09

0.02%

9.98

0 I 135

305.73

304.78

-0.31% 11.78

0 I 100

285.31

285.31

0.00%

10.04

0 I 136

283.76

283.43

-0.12% 10.25

0 I 101

286.66

274.14

-4.37% 18.64

0 I 137

279.85

279.47

-0.14% 10.86

0 I 102

273.71

273.88

0.06%

9.55

0 I 138

275.06

275.06

0.00%

9.10

0 I 103

297.27

297.27

0.00%

11.36

0 I 139

300.82

300.41

-0.14% 11.04

0 I 104

289.87

290.07

0.07%

0 I 105

309.26

309.40

0.05%

0 I 106

286.73

286.82

0.03%

9.83

9.75

9.45

0 I 14

277.91

274.31

-1.30%

9.31

0 I 140

295.50

294.39

-0.38% 10.12

0 I 141

300.23

298.68

-0.52% 13.27

0 I 107

295.62

295.91

0.10%

10.71

0 I 142

285.36

281.75

-1.27% 11.91

0 I 108

279.18

278.58

-0.21%

9.67

0 I 143

287.65

287.65

0.00%

10.39

0 I 109

287.85

287.85

0.00%

15.48

0 I 144

277.19

276.35

-0.30%

0 I 11

310.77

310.77

0.00%

11.61

0 I 145

254.78

255.08

0.12%

9.32

8.79

0 I 110

274.52

278.46

1.44%

10.69

0 I 146

288.52

288.62

0.03%

12.47

0 I 111

301.50

300.51

-0.33% 14.62

0 I 147

295.02

292.48

-0.86% 11.59

0 I 112

306.67

305.80

-0.28% 15.94

0 I 148

276.02

276.24

0.08%

0 I 113

303.81

306.41

0.86%

14.32

0 I 149

289.43

289.69

0.09%

8.73

9.88

0 I 114

298.17

296.57

-0.54% 14.69

0 I 15

299.90

299.90

0.00%

10.92

0 I 115

293.19

294.04

0.29%

10.71

0 I 150

290.86

289.40

-0.50% 11.92

0 I 116

288.90

288.90

0.00%

24.52

0 I 151

283.60

283.77

0.06%

11.90

0 I 117

300.82

297.73

-1.03% 10.92

0 I 152

293.53

287.85

-1.94% 10.88

0 I 118

275.94

275.98

0.01%

10.36

0 I 153

273.22

273.22

0.00%

10.88

0 I 119

274.69

274.69

0.00%

9.65

0 I 154

289.59

288.51

-0.37% 10.20

0 I 12

301.23

302.65

0.47%

12.61

0 I 155

318.15

318.15

0.00%

10.41

0 I 120

295.00

295.08

0.03%

11.40

0 I 156

278.43

278.69

0.09%

9.34

0 I 121

289.19

289.31

0.04%

10.39

0 I 157

292.37

288.54

-1.31% 11.95

0 I 122

283.25

281.89

-0.48% 17.13

0 I 159

292.76

294.04

0.44%

12.60

0 I 123

312.11

312.12

0.00%

11.90

0 I 16

304.56

301.95

-0.86% 20.07

0 I 124

300.24

298.42

-0.61% 14.63

0 I 160

281.17

281.40

0.08%

12.63

0 I 125

285.50

285.64

0.05%

9.42

0 I 161

305.14

305.14

0.00%

11.13

0 I 126

296.42

297.22

0.27%

21.34

0 I 162

335.01

334.37

-0.19% 10.93

0 I 127

299.22

299.25

0.01%

10.28

0 I 163

289.14

287.52

-0.56% 15.06

0 I 128

285.49

285.64

0.05%

15.82

0 I 164

272.99

272.87

-0.04% 10.77

0 I 129

282.04

282.04

0.00%

9.48

0 I 165

290.55

290.73

0.06%

10.09

0 I 13

287.11

287.11

0.00%

13.10

0 I 166

308.36

308.57

0.07%

12.85

0 I 130

315.47

314.00

-0.47% 15.41

0 I 168

304.05

304.05

0.00%

0 I 131

271.56

271.57

0.00%

9.94

0 I 169

280.77

280.90

0.05%

9.78

9.83

0 I 132

259.81

259.75

-0.02% 14.29

0 I 17

309.58

309.05

-0.17% 22.79

21

