Optimal Stochastic Coded Computation Ofﬂoading
in Unmanned Aerial Vehicles Network

Wei Chong Ng1,2, Wei Yang Bryan Lim1,2, Jer Shyuan Ng1,2, Suttinee Sawadsitang3,
Zehui Xiong4, and Dusit Niyato5, IEEE Fellow
1Alibaba Group 2Alibaba-NTU JRI 3College of Arts, Media and Technology, Chiang Mai University
4Singapore University of Technology and Design, Singapore
5School of Computer Science and Engineering, Nanyang Technological University, Singapore

1
2
0
2

t
c
O
8
2

]
T
G
.
s
c
[

1
v
3
7
8
4
1
.
0
1
1
2
:
v
i
X
r
a

Abstract—Today, modern unmanned aerial vehicles (UAVs)
are equipped with increasingly advanced capabilities that can
run applications enabled by machine learning techniques, which
require computationally intensive operations such as matrix
multiplications. Due to computation constraints, the UAVs can
ofﬂoad their computation tasks to edge servers. To mitigate
stragglers, coded distributed computing (CDC) based ofﬂoading
can be adopted. In this paper, we propose an Optimal Task
Allocation Scheme (OTAS) based on Stochastic Integer Program-
ming with the objective to minimize energy consumption during
computation ofﬂoading. The simulation results show that amid
uncertainty of task completion, the energy consumption in the
UAV network is minimized.

Index Terms—Unmanned Aerial Vehicles, Coded Distributed

Computing, Stochastic Integer Programming, Task Allocation

I. INTRODUCTION

In recent years, UAVs are becoming smaller in size and
lower in production cost, thus increasing the popularity of
UAVs in the civil and commercial ﬁelds. UAVs’ applications
are also expanding in various areas, including package de-
livery [1] and trafﬁc monitoring [2]. In sensor networks, the
UAVs can act as an airborne base station to collect and process
data from terrestrial nodes [3]. UAV-based networked airborne
computing allows computation-intensive tasks to be executed
on-board of the UAV directly through networking [4].

Nevertheless, UAVs are faced with challenges in performing
computationally intensive tasks, due to limited battery lifetime
and processing power [5]. As such, the computation tasks can
be ofﬂoaded to edge servers for processing. In this paper,
we focus mainly on the matrix multiplication task as it is
central to many modern computing applications, including
machine learning and scientiﬁc computing [6]. The matrix
multiplication in the UAVs can be sped up by scaling them
out across many distributed computing nodes in base stations
(BSs) or edge servers [7] known as the workers. However,
there is a major performance bottleneck which is the latency
in waiting for the slowest workers, or “stragglers” to ﬁnish
their tasks [7]. Coded distributed computing is introduced to
deal with stragglers in distributed high-dimensional matrix
multiplication. In CDC, the computation strategy for each
worker is carefully designed so that the UAV only needs to
wait for the fastest subset of workers before recovering the
output [7]. The minimum number of workers that the UAV
has to wait to recover their results is known as the recovery
threshold. Nevertheless, there is still a probability that the

number of returned successful workers is less than the recovery
threshold.

To address this uncertainty, we introduce the Optimal Task
Allocation Scheme (OTAS) in this paper. In OTAS, with the
CDC technique such as PolyDot code [7], the UAVs can
choose to compute several copies locally or ofﬂoad to the
BSs, where each copy is a sub-portion of matrices involved
in the matrix multiplication operation. The UAVs can retrieve
the matrix multiplication output by decoding all the returned
copies. However, if the UAV decides to ofﬂoad to the BSs,
there is an uncertainty that the copies cannot be returned on
time to the UAV due to delays and link failure [8], and the total
copies that the UAV has is less than the recovery threshold.
The UAV has to pay a correction cost to re-compute the
number of shortfalls locally to match the recovery threshold.
Since the UAVs have to hover in the sky throughout the re-
computation, the correction cost is more expensive than the
local computation and ofﬂoading cost. OTAS can derive the
UAV optimal decision through Stochastic Integer Program-
ming (SIP) formulation with two-stage recourse [9]. Extensive
simulations are performed to evaluate the effectiveness of
OTAS. The results show that OTAS can minimize the total
cost and the UAVs’ energy consumption. The contributions of
this paper are summarized as follows.

• The proposed OTAS can minimize the overall costs
incurred by the UAVs. At the same time, it can also
minimize all the UAVs’ energy consumption.

• The formulated SIP model can ﬁnd and achieve an
the workers’
optimal solution by taking into account
uncertainty. Evidently, this is the ﬁrst work that utilizes
the capability of SIP to address unpredictable UAV-
enabled distributed computing environments.

• From the performance evaluation, we obtain a few in-
sights such as the optimal UAV task allocation. The
performance comparison among the OTAS and the other
approaches is also presented.

The remainder of the paper is organized as follows: In
Section II, we present the network model. In Section III we
formulate the problem. We discuss and analyze the simulation
result in Section IV. Section V concludes the paper.

II. NETWORK MODEL
We consider a network (Fig. 1) that consists of a set Y =
{1, . . . , y, . . . , Y } of UAVs to be deployed within the coverage

 
 
 
 
 
 
of a set F = {1, . . . , f, . . . , F } of macro BSs with the height
of Hf . All the UAVs will take off from their respective mobile
charging station which is located at (xy, yy). xy and yy are
the x-y coordinates of UAV y mobile charging station. UAV
y will take off vertically to the height of Hy and hover in the
sky for purposes such as trafﬁc monitoring [2]. (xy, yy, Hy)
and (xf , yf , Hf ) are the three-dimensional coordinates of the
UAV y and BS f respectively, where Hy > Hf to maintain a
line-of-sight (LoS) communication link between UAV y and
BS f . Due to the hovering capability, we consider only the
rotary-wing UAVs [10].

• The UAV can ofﬂoad a number of copies to the BS.
• The UAV can compute some copies locally and ofﬂoad

some copies to the BS.
M (l)
indicates the number of copies that UAV y computes
y
locally and M (o)
y,f denotes the number of copies that are
ofﬂoaded to BS f . The ﬁnal output can be decoded from all
the return copies (M (l)
y + M (o)
y,f ).
The deﬁnition of copy, successful workers, recovery thresh-

old, and shortfall are given as follows.
Deﬁnition 1. [Copy] m-th fraction of matrices A and B [6].
Deﬁnition 2. [Successful workers] Workers that ﬁnish their
computation task successfully and the task is received by the
UAV.
Deﬁnition 3. [Recovery threshold] The recovery threshold
is the worst-case minimum number of successful workers
required by the UAV to complete the computation success-
fully [6].
Deﬁnition 4. [Shortfall] There exists a shortfall when the
total returned copies from the local computation and from the
workers are less than the recovery threshold.

Fig. 1. An illustrative example of UAV network with Y = 6, F = 2.

After the UAVs reach their respective heights, they can
receive and process tasks that use the data, e.g., captured
and collected by their sensors. In this paper, we consider the
task that UAV y compute is the matrix-matrix product AB
involving the two matrices A and B. Matrix multiplication
plays an essential role in various scientiﬁc disciplines as it
is regarded as the primary tool for many other computations
in areas such as aerodynamic computations and machine
learning [6]. However, the UAV has limited computing and
storage capability [11]. Therefore, the UAV can choose to
ofﬂoad a portion or the whole matrix multiplication to the
independently owned BS [11].

the system model

In order to speed up matrix multiplication, massive par-
it has a
allelization has emerged as a solution. However,
computational bottleneck due to straggling or faults. Coded
computation is introduced to make matrix multiplications
resilient to faults and delays, i.e., Polynomial codes [7]. In
typically consists of a
PolyDot codes,
master node, multiple worker nodes, and a fusion node. In
our proposed OTAS, we consider that the UAV is the master
and the fusion node. BS f can partition its CPU computing
capability into nf portions. Each portion is treated as the
worker and has the computation capability of τf
, where τf
nf
denotes the CPU computation capability of the BS f (in CPU
cycles per second). Each worker has a storage constraint that
limits the worker to store only m fraction of matrices A and
B [6].

In general, three scenarios may occur.
• The UAV can compute all copies locally.

Following [6], two N × N square matrices A and B are
considered. Note that our model can be applied to other
matrices, e.g., Non square matrices. Each of the matrices A
and B is sliced both horizontally and vertically. For example,
s × N
A is sliced into N
t .
We choose s and t such that it satisﬁes st = m [6]. The
recovery threshold k is deﬁned [6] as:

s matrices and B is sliced into N

t × N

k = t2(2s − 1).

(1)

The processing by the workers may take a longer time when
it is currently occupied with some other tasks. Therefore, the
processing in the ofﬂoaded tasks are perceived to have failed if
the duration exceeds the threshold time limit [12]. To recover
the computed task, the sum of returned ofﬂoaded copies and
locally computed copies must be greater than or equal to the
recovery threshold k.

comm = N 2

Similar to [6], the UAV uses denc = N 2(M (l)

y + M (o)
y,f )
symbols for encoding of matrices and ddec = N 2t2(2s −
1) log2 t2(2s − 1) to decode the returned matrices. Each
copy contains m-th fraction of matrices A and B. UAV will
transmit dto
m symbols to each of the worker. Each
copy requires dcmp = N 3
mt symbols for computation. After
comm = N 2
computation is completed, the worker will send df r
t2
symbols back to the UAV.
As described earlier,

the UAV can choose to ofﬂoad a
portion of the task or the whole task to the workers. For
example, when the recovery threshold k = 4 and the UAV
decide to ofﬂoad two copies of the task for the workers to
compute M (o)
y,f = 2. Therefore, the UAV has to compute at
least two more copies locally to match the recovery threshold
M (l)
y = 2. The UAV will hover in the sky for a threshold
time limit tthresh
to wait for the ofﬂoaded copies to return. In
this paper, tthresh
is set as the worst-case scenario, i.e., time
required to compute all copies locally by the UAV. However,
the
there is a probability that

the workers may fail,

i.e.,

y

y

LegendUAV 3UAV 1UAV 4UAV 2UAV 5UAV 6Base Station 1Base Station 2Offloading signalTake-off and landing pathMobile charging stationy

computed task is not returned to the UAV after tthresh
. As
a result, the UAV cannot successfully complete the full task
if the total returned copies are less than 4. When the UAV
fails to receive a copy, it means that there exists a shortfall,
and hence, the UAV has to recompute the number of shortfalls
locally. In the meantime, the UAV has to continue hover in the
sky when performing the re-computation. In this paper, we use
SIP to model the uncertainty problem to optimize the number
of copies to compute locally M (l)
y,f . At the
y
same time, it will also minimize the overall cost incurred
by the UAVs. In the following, we discuss the propulsion,
computation, and communication related energy costs for the
UAVs.

and ofﬂoad M (o)

A. UAV Hovering Energy

The propulsion energy consumption is needed to provide
the UAV with sufﬁcient thrust to support its movement. The
propulsion power of a rotary-wing UAV with speed V can be
modeled as follows [10]:

P (V ) = P0(1+

(cid:18)(cid:115)

)+P1

1 +

3V 2
U 2
tip

V 4
4v4
0

−

V 2
2v2
0

(cid:19) 1

2

+

1
2

where

P0 =

δ
8

ρsA(cid:52)3R3,

P1 = (1 + k)

W 3/2
√
2Aρ

.

d0ρAV 3,

(2)

(3)

(4)

P0 and P1 are two constants related to UAV’s weight, rotor
radius, air density, etc. Utip denotes the tip speed of the
rotor blade, v0 is known as the mean rotor induced velocity
in hover, d0 and s are the fuselage drag ratio and rotor
solidity, respectively. ρ and A are the air density and rotor
disc area, respectively. W is the UAV weight, δ is the proﬁle
drag coefﬁcient, and (cid:52) denotes blade angular velocity. By
substituting V = 0 into (2) [10], we obtain the power
consumption for hovering status as follows:

After the UAV y obtains at least k copies, it will take tdec
is deﬁned as follows:

secs to decode. tdec

y

y
Cyd(N 2t2(2s − 1) log2 t2(2s − 1))
τy

tdec
y =

.

(8)

C. UAV Communication Model

We assume that each UAV is allocated with an orthogonal
spectrum resource block to avoid the co-interference among
the UAVs [14]. The transmission rate from UAV y to BS f
can be represented as [5]:

ry,f = By log2(1 + P C

y hy,f /No),

(9)

where the wireless transmission power of the UAV y is
expressed as P C
y . hy,f is the channel gains, and N0 is
the variance of complex white Gaussian noise. UAV to BS
communication is most likely to be dominated by LoS links.
Therefore, the air-to-ground channel power gain from UAV y
to BS f can be modeled as follows [15]:

hy,f =

β0
D2

y,f

,

(10)

where

D2

y,f = (xy − xf )2 + (yy − yf )2 + (Hy − Hf )2,
Dy,f denotes the distance between UAV y and BS f and β0
represents the reference channel gain at distance d0 = 1m in
an urban area [15]. The transmission time to ofﬂoad one copy
of matrix from UAV y to BS f can be given as follows:

(11)

tto
y,f =

d( N 2
m )
ry,f

.

(12)

The energy ey required by UAV y to receive data from the BS
f is deﬁned as follows [16]:

d( N 2
t2 )
rf,y
y is the receiving power of UAV y and rf,y is similar

ey = P r
y

(13)

,

where P r
to (9).

Ph = P0 + P1.

(5)

III. PROBLEM FORMULATION

B. Local Computing Model

When one copy is processed locally, the local computation

execution time of UAV y is expressed as [13]:

This section introduces the Deterministic Integer Program-
ming (DIP) and SIP to optimize the number of copies to
compute locally and ofﬂoad by minimizing the UAVs’ total
cost.

tlocal
y

=

Cyd( N 3
mt )
τy

,

where Cy is the number CPU cycles needed to process a bit,
τy denotes the total CPU computing capability of UAV y, and
d(·) is a function to translate the number of symbols to the
number of bits for computation. The UAV y takes tenc
seconds
to encode one copy of the matrices, and it is expressed as
follows:

y

tenc
y =

Cyd(N 2)
τy

.

(7)

A. Deterministic Integer Programming System Model

(6)

In an ideal case when the number of shortfalls is precisely
known, the UAVs can choose the exact number of copies to
compute locally or ofﬂoad. Therefore, the correction for the
shortfall is not needed, and the correction cost is zero. Similar
to [17], the cost function is proportional to their ofﬂoaded data
and to their demand for consuming computation resources. In
total, four types of payments are considered in DIP. It will
cost ¯Cy for UAV y to compute one copy locally. Cy is the
cost for UAV y to hover in the sky for tthresh
seconds. Since

y

Cy exists in all three scenarios as described in Section II, we
can completely remove this cost from the formulation. The BS
f charges the UAV with Cy,f for each copy that is ofﬂoaded.
ˆCy is the decoding cost to retrieve the ﬁnal output.

• ¯Cy denotes the UAV y local computational and encoding

cost for computing of one copy, i.e.,

¯Cy = α1(tlocal

y

+ tenc
y

),

(14)

where α1 is the cost coefﬁcient associated to the energy
consumption.

• Cy,f denotes the ofﬂoading cost and it consists of three
parts. The ﬁrst part is related to the transmission and
encoding delay. The second part is the UAV y receiving
energy cost and the last part Cf is the service cost for
BS f . It is modeled as follows:

Cy,f = α1(tto

y,f + tenc

y

) + α2ey + Cf ,

(15)

where α2 is the cost coefﬁcient with a similar role to α1.
• ˆCy denotes the UAV y decoding cost for the returned

matrices as follows:

the UAV receives is less than k. The second stage is the
correction stage. After the actual shortfall is observed, the
UAV will perform a correction action to compute the number
of shortfalls locally so that the total number of copies can
match with k. It costs the UAV ˜Cy to compute each copy
locally for the shortfall. Similar to DIP, in order to retrieve
the ﬁnal matrix multiplication output, it will cost UAV y ˆCy
for decoding.

Let ω = (F1, . . . , Fy) denotes the scenario of all UAVs
and a set of scenarios is denoted by Ω, i.e., ω ∈ Ω [1]. Fy
represents a binary parameter of the shortfall from UAV y.
When Fy = 1 means that, from the copies that UAV y had
ofﬂoaded, at least Ay copy did not return. As a result, the
total number of copies that it currently has is less than k, and
Fy = 0 otherwise. For example, suppose the service provider
owns three UAVs. In this case, the shortfall scenario is denoted
by ω = (F1, F2, F3) in which (1,0,0) indicates that UAV 1
have shortfall due to the copy failure to return while UAV 2
and 3 do not. Let A = (A1, . . . , AY ) be a list representing the
number of shortfalls whereby Ay ≤ k.

The objective function of SIP is the same as DIP with an

ˆCy = α1tdec
y .

(16)

additional correction cost.

A DIP can be formulated and minimize the total cost of the

UAVs as follows:
Minimise:

(M (l)
y

¯Cy + ˆCy) +

(cid:88)

y∈Y

(cid:88)

(cid:88)

y∈Y

f ∈F

M (o)

y,f Cy,f ,

(17)

subject to:

M (l)

y +

(cid:88)

f ∈F

M (o)

y,f − Sy ≥ k,

M (o)

y,f ≤ nf ,

(cid:88)

y∈Y

∀y ∈ Y,

(18)

∀f ∈ F.

(19)

The objective function in (17) is to minimize UAVs’ total
cost. The ﬁrst part is to minimize the UAVs’ local computation
cost and the second part is to minimize the UAVs’ ofﬂoading
cost. The constraint in (18) ensures that the number of copies
computed locally and ofﬂoaded have to be at least equal to or
larger than the recovery threshold k, and Sy is the number of
shortfalls. The constraint in (19) ensures that the total number
of copies ofﬂoaded to BSs must not exceed the total number
of workers.

B. Stochastic Integer Programming System Model

If the number of shortfalls cannot be known precisely, the
deterministic optimization formulation deﬁned in (17) - (19) is
no longer applicable. Therefore, SIP with two-stage recourse
is developed. The ﬁrst stage is the assignment stage, whereby
the UAV decides the number of copies to be computed
locally and ofﬂoaded. The decision will be made based on
the available cost information and the probability distribution
of the shortfall, which refers to at least one copy that fails
to return to the UAV after the copy has been ofﬂoaded. It
can lead to the situation that the total number of copies that

• ˜Cy is the correction cost, and it consists of two parts.
The ﬁrst part denotes the correction cost for one copy if
the UAV y has a shortfall. The second part is the penalty
cost for the UAV to stay hover in the sky when there
is a shortfall. The penalty cost can be from delay of
completing the task, additional computation energy and
some other opportunity costs, e.g., UAV cannot process
the next task immediately. The correction cost is given
as follows:

˜Cy = α1(tlocal

y

+ ty

enc) + α2Phtlocal

y

,

(20)

We formulate the task allocation as a two-stage SIP model.

There are three decision variables in this model.

• M (l)
y

indicates the number of copies to compute locally

by UAV y.

• M (o)

the BS f by UAV y.

y,f indicates the number of copies to be ofﬂoaded to

• M (L)
y

indicates the number of copies to compute locally

by UAV y when there is a shortfall.

The objective function given in (21) and (22) is to minimize
the total cost of UAVs. The expressions in (21) and (22) rep-
resent the ﬁrst stage and second stage objectives, respectively.
In (22), P(ω) denotes the probability if scenario ω ∈ Ω
is realized and in reality, P(ω) can be obtained from the
historical records. The SIP formulation can be expressed as
follows:
Minimise:

(M (l)
y

¯Cy + ˆCy) +

(cid:88)

y∈Y

(cid:88)

(cid:88)

y∈Y

f ∈F

M (o)

y,f Cy,f

(cid:20)
Q(M (o)
+E

(cid:21)
,
y,f (ω))

(21)

where

Q(M (o)

y,f (ω)) =

(cid:88)

(cid:88)

(Fy(ω)P(ω)M (L)

y

(ω) ˜Cy),

(22)

y∈Y

ω∈Ω

M (o)

y,f ≥ k,

M (o)

y,f + M (L)

y

subject to:

M (l)

y +

M (l)

y +

(cid:88)

f ∈F
(cid:88)

f ∈F

M (o)

y,f ≤ nf ,

(cid:88)

y∈Y

∀y ∈ Y,

(23)

(ω) − Ay(ω) ≥ k,

∀y ∈ Y, ∀ω ∈ Ω,

∀f ∈ F.

(24)

(25)

The constraint in (23) ensures that the number of copies
computed locally and ofﬂoaded should be at least k. The
constraint in (24) ensures that if the UAV has a shortfall, the
UAV has to compute the shortfall locally to match k. The
constraint (25) is the same as constraint (19).

IV. SIMULATION RESULT AND ANALYSIS

In this simulation, we consider the system model with ten
UAVs and two BSs. A conceptual illustration of the system
model is shown in Fig. 2. Figure 2 is an x-y plane that
shows the locations of the UAVs and the BSs. They are
randomly allocated in a 1000 × 1000 m2. Each small grid is
25 × 25 m2. We consider the case with m = 2 [6]. Therefore,
we can substitute s = 2
t into equation (1), and we obtain the
following:

k = 4t − t2,

(26)

by differentiating equation (26) with respect to the variable t
and equating the result to zero. Then, we are able to obtain
t = 2, s = 1, and k = 4. To solve SIP, We assume
that the probability distribution of all scenarios in set Ω are
known [18], then, the complexity of the problem depends on
the total number of scenarios in stage two [18]. For example in
Section III, the complexity for the formulated two-stage SIP is
|Ω|. The simulation parameters are summarized in Table I and
their values are from [5], [10]. For the presented experiments,
we implement the SIP model using GAMS script [19].

Fig. 2. x-y coordinates of all the UAVs and BSs.

First, the cost structure of the network is studied. As an
illustration, a primitive UAV network is considered with zero

TABLE I
EXPERIMENT PARAMETERS

Parameter
Length of the matrix, N
UAV weight in kg, W
Air density in kg/m3, ρ
Rotor radius in meter, R
Rotor disc area in m2, A
Blade angular velocity in radians/second, (cid:52)
Tip speed of the rotor blade, Utip
Number of blades, b
Blade or aerofoil chord length, c
Rotor solidity, deﬁned as the ratio of the
total blade area bcR to the disc area A, s
Fuselage drag ratio, d0
Mean rotor induced velocity in hover, v0
Proﬁle drag coefﬁcient, δ
Incremental correction factor
to induced power, k
UAV hover height in meter, Hy
BS height in meter, Hf
UAV bandwidth in M Hz, By
UAV transmit power in mW , P C
y
UAV receiving power in mW , P r
y
White Gaussian noise in dBm, N0
UAV computation power in GHz, τy
BS computation power in GHz, τf
Number of CPU cycles needed
to process a bit, Cy
Channel gains, β0
Number of workers in BSf , nf
Service cost for BS f , Cf in $
α1
α2

Values
1000
10.2
1.225
0.5
0.79
400
200
4
0.0196

0.05

0.3
7.2
0.012

0.1

100
20
2
32
32
-100
1
20

20

-60dB
15
0.2
0.6
0.0004

local computation, and n1 = n2 = 100. Furthermore, we ﬁrst
consider 10 UAVs and 1 BS. Since k = 4, the number of
copies that are ofﬂoaded begins with 4. In Fig. 3, the costs in
the ﬁrst and second stages and the total cost under the different
number of the ofﬂoaded copies are presented. As expected,
the ﬁrst stage’s cost increases as the number of copies that
are ofﬂoaded increases. However, the cost in the second stage
after knowing the actual shortfall decreases, as the number
of copies that are ofﬂoaded increases since the UAV needs
to perform fewer re-computation to match with the shortfall.
Figure 3 shows the optimal solution in this simple network.
It can be identiﬁed that even in this simple network, the
optimal solution is not trivial to obtain due to the uncertainty of
shortfall. Therefore, SIP formulation is required to guarantee
the minimum cost to the UAVs.

Next, we evaluate the effect of number of UAVs in the
network. The network is initialized with only U AV1. The
total cost of the network is monitored as the number of UAVs
joining the network increases. Figure 4 displays the result from
this set-up. When the number of UAVs in the network is more
than 6, we can observe a sharp increase in this network’s cost
far beyond the preceding trend, as indicated by the dotted line.
The total number of workers in each BS that can work on the
matrix multiplication is nf . In this case, all the workers from
the BSs are occupied when the number of UAVs exceeded 6.
Instead of ofﬂoading to the BSs, the rest of the UAVs have to
compute the copy locally, leading to a sharp increase in cost.

Fig. 3. The optimal solution in a simple UAV
network.

Fig. 4. Total cost of the network as the number
of UAVs is varied.

Fig. 5. EVF comparing with SIP.

Then, we compare the SIP with Expected-Value Formula-
tion (EVF) [20]. Expected-value formulation uses the average
values of shortfall and solves a DIP. We vary the price of the
correction action to compare the difference between EVF and
SIP. We set n1, n2 = 100. Figure 5 depicts the comparison
result. For EVF,
the number of copies in the ﬁrst stage
(M (l)
y + M (o)
y,f ) is ﬁxed using the average value of shortfall, an
approximation scheme. As shown in the result, EVF cannot
adapt to the change in cost. On the other hand, SIP can always
achieve the optimal solution to reduce the shortfall cost.

V. CONCLUSION

In this paper, we have proposed an OTAS with the objective
to minimize UAV energy consumption in the PolyDot code
based computation ofﬂoading. To account for the uncertainty
of task completion, we have formulated the OTAS as the two-
stage stochastic programming. The OTAS minimizes the total
cost and the UAVs’ energy consumption. As compared to DIP,
OTAS based on SIP can achieve the optimal solution as it is
able to adapt to changes in probability of task failure.

ACKNOWLEDGEMENT

This research is supported,

in part, by Alibaba Group
through Alibaba Innovative Research (AIR) Program and
Alibaba-NTU Singapore Joint Research Institute (JRI), the Na-
tional Research Foundation, Singapore under the AI Singapore
Programme (AISG) (AISG2-RP-2020-019), WASP/NTU grant
M4082187 (4080), Singapore Ministry of Education (MOE)
Tier 1 (RG16/20) and SUTD SRG-ISTD-2021-165.

REFERENCES

[1] S. Sawadsitang, D. Niyato, P. Tan, and P. Wang. Joint ground and aerial
IEEE
package delivery services: A stochastic optimization approach.
Transactions on Intelligent Transportation Systems, 20(6):2241–2254,
2019.

[2] Kapseong Ro, Jun-Seok Oh, and Liang Dong. Lessons learned: Appli-
cation of small uav for urban highway trafﬁc monitoring. In 45th AIAA
aerospace sciences meeting and exhibit, page 596, 2007.

[3] Haichao Wang, Jinlong Wang, Jin Chen, Yuping Gong, and Guoru Ding.
Network-connected uav communications: Potentials and challenges.
China Communications, 15(12):111–121, 2018.

[4] B. Wang, J. Xie, K. Lu, Y. Wan, and S. Fu. Coding for heterogeneous
In 2019 IEEE Globecom

uav-based networked airborne computing.
Workshops (GC Wkshps), pages 1–6, 2019.

[5] Jienan Chen, Siyu Chen, Siyu Luo, Qi Wang, Bin Cao, and Xiaoqian Li.
An intelligent task ofﬂoading algorithm (itoa) for uav edge computing
network. Digital Communications and Networks, 6(4):433–443, 2020.

[6] Sanghamitra Dutta, Mohammad Fahim, Farzin Haddadpour, Haewon
Jeong, Viveck Cadambe, and Pulkit Grover. On the optimal recovery
threshold of coded matrix multiplication. IEEE Transactions on Infor-
mation Theory, 66(1):278–301, 2019.

[7] Qian Yu, Mohammad Maddah-Ali, and Salman Avestimehr. Polynomial
codes: an optimal design for high-dimensional coded matrix multipli-
cation. In Advances in Neural Information Processing Systems, pages
4403–4413, 2017.

[8] Baoqian Wang, Junfei Xie, Kejie Lu, Yan Wan, and Shengli Fu. On
batch-processing based coded computing for heterogeneous distributed
computing systems. arXiv preprint arXiv:1912.12559, 2019.

[9] John R Birge and Francois Louveaux.

Introduction to stochastic

programming. Springer Science & Business Media, 2011.

[10] Yong Zeng, Jie Xu, and Rui Zhang. Energy minimization for wireless
IEEE Transactions on Wireless

communication with rotary-wing uav.
Communications, 18(4):2329–2345, 2019.

[11] Qiyu Hu, Yunlong Cai, Guanding Yu, Zhijin Qin, Minjian Zhao, and
Geoffrey Ye Li. Joint ofﬂoading and trajectory design for uav-enabled
IEEE Internet of Things Journal,
mobile edge computing systems.
6(2):1879–1892, 2018.

[12] Sanghamitra Dutta, Viveck Cadambe, and Pulkit Grover. Coded convo-
lution for parallel and distributed computing within a deadline. In 2017
IEEE International Symposium on Information Theory (ISIT), pages
2403–2407. IEEE, 2017.

[13] Quoc-Viet Pham, Ming Zeng, Rukhsana Ruby, Thien Huynh-The, and
Won-Joo Hwang. Uav communications for sustainable federated learn-
ing. arXiv preprint arXiv:2103.11073, 2021.

[14] Zhenyu Zhou, Junhao Feng, Zheng Chang, and Xuemin Shen. Energy-
efﬁcient edge computing service provisioning for vehicular networks: A
consensus admm approach. IEEE Transactions on Vehicular Technology,
68(5):5087–5099, 2019.

[15] Meng Hua, Yi Wang, Qingqing Wu, Haibo Dai, Yongming Huang,
and Luxi Yang. Energy-efﬁcient cooperative secure transmission in
multi-uav-enabled wireless networks. IEEE Transactions on Vehicular
Technology, 68(8):7761–7775, 2019.

[16] Jer Shyuan Ng, Wei Yang Bryan Lim, Hong-Ning Dai, Zehui Xiong,
Jianqiang Huang, Dusit Niyato, Xian-Sheng Hua, Cyril Leung, and
Chunyan Miao.
Joint auction-coalition formation framework for
communication-efﬁcient federated learning in uav-enabled internet of
IEEE Transactions on Intelligent Transportation Systems,
vehicles.
2020.

[17] Giorgos Mitsis, Eirini Eleni Tsiropoulou, and Symeon Papavassiliou.
Data ofﬂoading in uav-assisted multi-access edge computing systems:
A resource-based pricing and user risk-awareness approach. Sensors,
20(8):2434, 2020.

[18] Martin Dyer and Leen Stougie. Computational complexity of stochastic
programming problems. Mathematical Programming, 106(3):423–432,
December 2006.

[19] Debabrata Chattopadhyay. Application of general algebraic modeling
IEEE Transactions on Power

system to power system optimization.
Systems, 14(1):15–22, 1999.

[20] S. Chaisiri, Bu-Sung Lee, and D. Niyato. Optimal virtual machine
placement across multiple cloud providers. In 2009 IEEE Asia-Paciﬁc
Services Computing Conference (APSCC), pages 103–110, 2009.

45678The number of offloaded copies M(o)y,f05101520253035CostsOptimal solutionstage 1stage 2overall0246810The number of UAVs Y0510152025303540Total costAll the workers in BS 1are fully occupiedAll the workers in BS 2are fully occupied1x cost1.5x cost2x cost2.5x  costCost in correction phase354045505560Total costEVFSIP