A Multi-Perspective Architecture for Semantic Code Search

Rajarshi Haldar†, Lingfei Wu‡, Jinjun Xiong‡, Julia Hockenmaier†
†University of Illinois at Urbana-Champaign, Champaign, IL, USA
‡IBM Thomas J. Watson Research Center, Yorktown Heights, NY, USA
{rhaldar2, juliahmr}@illinois.edu, {wuli, jinjun}@us.ibm.com

0
2
0
2

y
a
M
6

]
E
S
.
s
c
[

1
v
0
8
9
6
0
.
5
0
0
2
:
v
i
X
r
a

Abstract

The ability to match pieces of code to their
corresponding natural language descriptions
and vice versa is fundamental for natural lan-
guage search interfaces to software reposito-
ries. In this paper, we propose a novel multi-
perspective cross-lingual neural framework for
code–text matching, inspired in part by a previ-
ous model for monolingual text-to-text match-
ing, to capture both global and local similari-
ties. Our experiments on the CoNaLa dataset
show that our proposed model yields better
performance on this cross-lingual text-to-code
matching task than previous approaches that
map code and text to a single joint embedding
space.

1

Introduction

In semantic code search or retrieval, the user pro-
vides a natural language query, and the system re-
turns a ranked list of relevant code snippets from
a database or repository for that query. This task
is usually performed using a matching model that
computes the similarity between code snippets and
natural language descriptions by mapping code and
natural language embeddings into a common space
where the distance between a piece of code and its
corresponding description is small (Gu et al., 2018;
Yao et al., 2019).

But current models do not explicitly model any
interactions between the code and the description
until the ﬁnal step when their global similarity is
calculated.

In this paper, we propose a novel multi-
perspective neural framework for code–text match-
ing that captures both global and local similarities.
We show that it yields improved results on semantic
code search.

We apply our model to the CoNaLa benchmark
dataset (Yin et al., 2018), which consists of Python
code snippets and their corresponding annotations

in English. We believe that our model could be ap-
plied to other programming languages as well. We
have made our code publicly available for research
purpose 1.

2 Background

Semantic code search is a cross-modal ranking
problem where items in one modality (code) need
to be ranked according to how well they match
queries in another (natural language). One stan-
dard way to compute the similarity of items drawn
from two different modalities or languages is to
map each modality into a common “semantic” vec-
tor space such that matching pairs are mapped to
vectors that are close to each other.

Gu et al. (2018) propose a code retrieval frame-
work that jointly embeds code snippets and NL
descriptions into a high dimensional embedding
space such that the vectors representing a code
snippet and its corresponding description have high
similarity.

A variety of different approaches for learning
embeddings for code have been proposed. Because
source code is less ambiguous than natural lan-
guage, there are ways to exploit the underlying
structure of code to obtain better representations.
Wan et al. (2019); LeClair et al. (2020) show that us-
ing features extracted from Abstract Syntax Trees
(AST’s) and Control Flow Graphs (CFG’s) lead to
creating better representations of code. Hu et al.
(2018); Haque et al. (2020) show that ASTs repre-
sented as compact strings can be used to represent
code. Following these approaches, we developed a
multi-modal framework that generates embeddings
for code using both the code tokens and an AST
representation.

1

https://github.com/rajarshihaldar/

codetextmatch

 
 
 
 
 
 
3 Models

We compare four models: a baseline model (CT)
that only considers text and source code, a (CAT)
model that also includes embedding of Abstract
Syntax Trees, a multi-perspective model (MP) that
leverages multi-perspective matching operations
as deﬁned in a bilateral multi-perspective model
(Wang et al., 2017), and our MP-CAT model that
combines both MP and CAT architectures.

3.1 CT: A Baseline Code and Text Model

Our baseline model (CT) is based on Gu et al.
(2018)’s CODEnn model. It maps both code and
natural language descriptions to vectors in the same
embedding space and then computes the similarity
between these vectors using the L2 distance metric.
These vectors are computed by two sets of three
layers (one set per modality):

The Word Embedding Module consists of two
independently pre-trained lookup tables that map
code tokens or natural language tokens to embed-
dings. We use FastText (Bojanowski et al., 2017))
for all embeddings in this paper.

The Context Representation Module consists
of bi-directional LSTM layers (one for code, one
for text) that map the word embedding sequences
into another pair of sequences of embeddings that
contain contextual information.

The Maxpool Layer performs max pool (sepa-
rately per dimension) over the Context Representa-
tion embedding sequences to obtain a single vector.
The Similarity Module computes the similar-
ity of the two vectors vc and vc produced by the
Maxpool Layers as

d(v1, v2) =

d
(cid:88)

i=1

(v1i − v2i)2

sim(vc, vd) = 1 − d(

vc
(cid:107)vc(cid:107)2

,

vd
(cid:107)vd(cid:107)2

)

where d returns the L2 distance between d-
dimensional vectors vc and vd.

3.2 CAT: An AST-Based Model

To capture both syntactic and semantic features,
we augment our baseline CT model with embed-
dings based on the Abstract Syntax Tree (AST)
representation of the code. Most programming lan-
guages, including Python, come with a determinis-
tic parser that outputs the AST representation of a
code snippet. Python has a library module called

ast that generates AST representations of code. We
convert this AST representation to a string using
structure-based traversal (SBT) (Hu et al., 2018).
The CAT model is similar to the CT model, except
that it extracts features from both the source code
tokens and its corresponding AST representation.
So the Word Embedding Module now contains
three lookup tables: for code, AST, and natural lan-
guage, respectively. Similarly, the Context Rep-
resentation Module has 3 bi-directional LSTM
layers which is followed by 3 Maxpool Layers.
Before the output is passed to the similarity mod-
ule, the output vectors of the two max pool layers
representing code and AST are concatenated to
form a single representation of the source code.
Because of this, the hidden dimension in the bidi-
rectional LSTM’s of the Context Representation
Module for the natural language sequence is dou-
ble that of code and AST sequences’ LSTM hidden
dimensions. This ensures that, after concatenation,
the vectors representing the candidate code snip-
pet and the natural language description are of the
same dimension. After that, the Similarity Mod-
ule computes the similarity of these vectors via the
same L2-distance-based operation as in CT.

3.3 MP: A Multi-Perspective Model

The CT and CAT models learn to map source code
and natural language tokens into a joint embedding
space such that semantically similar code-natural
language pairs are projected to vectors that are
close to each other. However, these two repre-
sentations interact only in the ﬁnal step when the
global similarity of the sequence embeddings is
calculated, but not during the ﬁrst step when each
sequence is encoded into its corresponding embed-
ding. Wang et al. (2017) show that, for tasks such
as paraphrase identiﬁcation and natural language
inference that require two pieces of texts from the
same language to compare, it is beneﬁcial to in-
clude a number of different (i.e., multi-perspective)
local matching operations between the two input
sequences when computing their vector representa-
tions. Given contextual sequence encodings P and
Q (computed, e.g., by biLSTMs) for the two se-
quences to be compared, Wang et al. (2017)’s Bilat-
eral Multi-Perspective Matching (BiMPM) model
includes a matching mechanism that compares P
and Q by matching each position in P with all po-
sitions in Q, and by matching each position in Q
with all positions in P , under four different match-

ing strategies. We will discuss these strategies in
more detail under the Bilateral Multi-Perspective
Matching (BiMPM) Module.

We apply the MP model to our cross-modal code-
text matching task as follows: The Word Embed-
ding Layer takes as input the code sequence, AST
sequence, and description sequence. The output of
this layer is three independent sequences of token
embeddings, one for each input sequence.

The Context Representation Module consists
of three sets of BiLSTM layers that each computes
a contextual representation of each token in the
corresponding input sequence. We concatenate
the hidden states of the sequences representing the
code and AST, respectively, to get one set of se-
quence embeddings representing the source code
input.

The Bilateral Multi-Perspective Matching
(BiMPM) Module compares the two sequences,
say P and Q, by matching each position in P with
all positions in Q, and by matching each position
in Q with all positions in P , under four different
matching strategies m that each produce new em-
m and Q(cid:48)
bedding sequences P (cid:48)
m that have the same
length as the original P and Q. Each matching
strategy is parameterized by a feedforward net-
work (e.g. P (cid:48)[i]m = f P →Q
))
m
that takes in a token embedding P [i] and a strategy-
speciﬁc single-vector representation of Qm, and
returns a new vector P (cid:48)[i]m for P [i]. For each to-
ken P [i] ∈ P (and conversely for any Q[j] ∈ Q),
Qm (Pm) is deﬁned as follows:

(P [i], Qm; W P →Q

m

Full matching sets Qm (Pm) to be the ﬁnal hid-

den state of Q (and vice versa for P ).

Maxpool matching obtains Qm by performing
maximum pooling (per dimension) across the ele-
ments of Q.

Attentive matching computes Qm as a
weighted average of all Q[j] ∈ Q, where Q[j]’s
weight is the cosine similarity of P [i] and Q[j].

Max-Attentive matching sets Qm to be the

Q[j] with the highest cosine similarity to P [i].

We concatenate the four P (cid:48)[i]m (Q(cid:48)[i]m) for each

token i to get two new sequences P (cid:48) and Q(cid:48).

The Local Aggregation Module aggregates
these sequence embeddings into two ﬁxed-length
multi-perspective hidden representations by pass-
ing them through two different bi-LSTM layers
(one for each sequence). For each sequence, we
concatenate the ﬁnal hidden states of both the for-
ward and reverse directions to get a vector repre-

sentation of that sequence.

The Similarity Module computes the similarity
of the two vectors returned by the Aggregation
Module as before.

3.4 MP-CAT: A Combined Model

Our ﬁnal model combines the MP and the CAT
models. It contains the following components:

The CAT module reads in the code sequence, the
AST sequence, and the natural language sequence
and outputs two vectors, one jointly representing
the code and the AST and the other representing
the natural language description.

The MP module also reads in the code sequence,
the AST sequence, and the natural language se-
quence. It returns two vectors, one for code and
AST, and the other for the natural language descrip-
tion. The difference between this module and the
previous is that MP contains local information that
is ignored in the global CAT embeddings.

The Global and Local Fusion Module concate-
nates the two CAT and MP vectors representing the
code to get the ﬁnal code representation, and does
the same for the CAT and MP vectors representing
the natural language description, before computing
their L2 distance in the same manner as the other
similarity modules. Figure 1 shows the pipeline of
the MP-CAT framework.

4 Experiments

The CoNaLa Dataset The CoNaLa dataset (Yin
et al., 2018) has two parts, a manually curated paral-
lel corpus of 2,379 training and 500 test examples,
and a large automatically-mined dataset with 600k
examples (which we ignore here). Each example
consists of a snippet of Python code and its corre-
sponding English description.

Pre-processing We pre-process the text repre-
senting both the source code and the natural lan-
guage descriptions using sub-word regularization
based on unigram language modeling (Kudo, 2018)
transforms the original tokens into sequences of
shorter (and hence more common) substrings. We
use the sentencepiece library (Kudo and Richard-
son, 2018) and follow the same approach as used
by Yin et al. (2018) for the CoNaLa dataset.

Training procedure During training, we use
triplets consisting of a code snippet, a correct de-
scription, and an incorrect description (obtained by

Figure 1: The MP-CAT framework that contains both global-level and local-level features for code–text matching

Framework Training Time (s) Evaluation Time (s)
CT
CAT
MP
MP-CAT

4663.10
6702.69
183393.47
240062.38

6755.62
11050.68
17374.14
25306.97

Table 1: Training and Evaluation times for all our mod-
els. The models were trained for 100 epochs and the
evaluation time was computed on 500 test queries.

Frameworks MRR R@1 R@5 R@10
CT
CAT
MP
MP-CAT

0.172
0.207
0.154
0.220

24.0
32.2
21.6
32.2

39.6
45.0
33.6
47.4

7.4
9.0
6.4
11.0

Table 2: Code Search Results

random sampling from the training set). We sam-
ple 5 incorrect descriptions for each code–text pair,
giving us ﬁve triplets for each training example.
During the evaluation phase, for every natural lan-
guage query D, we calculate the rank of its corre-
sponding code snippet C among all 500 candidates
in the test set.

4.1 Experimental Setup
We train our models on triplets (cid:104)C, D+, D−(cid:105) con-
sisting of a snippet of code C, a natural language
description D+ that correctly describes what the
code does (a positive example), and a description
D− that does not describe what the code does (a
negative example). We minimize the ranking loss
with margin (cid:15), following Gu et al. (2018):

L(θ) =

(cid:88)

max (cid:0)0, (cid:15) − cos(C, D+) + cos(C, D−)(cid:1)

(cid:104)C,D+,D−(cid:105)

In the CAT model, since we ﬁrst concatenate the
vectors for the code and AST before comparing
them with the vector for the natural language de-
scription, the ﬁrst two vectors are each half the
dimension size of the third one. Our models are
implemented in PyTorch (Paszke et al., 2017) and
trained using Adam (Kingma and Ba, 2014).

Each model is trained for 100 epochs, and during
the evaluation step, we use a set of 500 natural
language queries from the test set. The training and
evaluation times are shown in Table 2.

4.2 Results

Table 2 shows our test set results for code search.
We report Recall@K (K=1,5,10) and mean recipro-
cal rank (MRR) of the correct answer.

The Impact of Modeling ASTs:
In going from
the ﬁrst (CT) row to the second (CAT) row in Ta-
ble 2, we see that the AST features alone increase
MRR from 0.172 to 0.207. There is also an in-
crease in R@k for all values of k. In fact, its R@5
values are competitive with our best model.

Multi-Perspective Results: The results for the
multi-perspective models are both surprising and
interesting. Row 3 of Table 2 shows that the MP
model on its own under-performs and actually has
the worst results out of all the models we tested. On
the other hand, we see that combining the MP and
the CAT models into one framework gives the best
performance across the board. This shows that even
if we use a multi-perspective framework to model
local features, we still need encoders to capture the
global features of code and text in addition to the
local features; otherwise, we end up missing the
forest for the trees.

Query

MP-CAT

Sort dictionary ‘x‘ by value in
ascending order

sorted(list(x.items( )),
key = operator.itemgetter(1))

Run a command ‘echo hello world‘
in bash instead of shell

os.system
(/bin/bash -c ”echo hello world”)

CAT
for k in sorted(
foo.keys( )):
pass
os.system
( ’GREPDB=
”echo 123”;
/bin/bash -c ”$GREPDB”’)

Select records of dataframe
‘df‘ where the sum of column
’X’ for each value in column ’User’
is 0

df.groupby(’User’)[’X’].ﬁlter(
lambda x: x.sum() == 0)

print(df.loc[df[’B’].isin(
[’one’, ’three’])])

Table 3: The top hits returned by the MP-CAT and CAT
models for a natural language query.

Query
Concatenate elements of a
list ’x’ of multiple integers
to a single integer
convert pandas DataFrame
‘df‘ to a dictionary using
‘id‘ ﬁeld as the key

Replace repeated instances
of a character ’*’ with a
single instance in a string ’text’

MP-CAT
sum(d*10**i
for i, d in enumerate(
x[::-1]))

MP

[ﬂoat( i )
for i in lst]

df.set index( ’id’).to dict()

data[
data[’Value’] == True]

re.sub(’\\*\\*+’, ’*’, text)

re.sub(’ˆ((
?:(?!cat).)*cat(
?:(?!cat).)*)cat’,
’\\\\1Bull’, s)

Table 4: The top hits returned by the MP-CAT and MP
models for a natural language query.

Comparison of MP-CAT, MP and CAT Models
In Table 3, we present the retrieval results for select
natural language queries from the development set
returned by the MP-CAT and CAT models. We
do the same thing for MP-CAT and MP models
in Table 4. Comparing MP-CAT and CAT, we
observe that while CAT correctly identiﬁes the data
structures and libraries required to solve the user’s
problem, it ends up returning the wrong command.
MP, on the other hand, sometimes fails to identify
even the correct libraries required. In the second
example in Table 4, it fails to understand that there
is also a dictionary involved and ends up returning
the wrong command. MP-CAT successfully ﬁnds
the required code snippet when the user queries are
longer and have multiple data structures involved.

5 Conclusions

In this paper, we consider the task of semantic
code search or retrieval using a code–text simi-
larity model. We propose MP-CAT, a novel multi-
perspective deep neural network framework for this
task. In contrast to previous approaches, the multi-
perspective nature of our model allows it to capture
richer similarities between the two sequences.

Acknowledgement

References

Piotr Bojanowski, Edouard Grave, Armand Joulin, and
Tomas Mikolov. 2017. Enriching word vectors with
subword information. Transactions of the Associa-
tion for Computational Linguistics, 5:135–146.

Xiaodong Gu, Hongyu Zhang, and Sunghun Kim. 2018.
Deep code search. In Proceedings of the 2018 40th
International Conference on Software Engineering
(ICSE 2018). ACM.

Sakib Haque, Alexander LeClair, Lingfei Wu, and
Collin McMillan. 2020.
Improved automatic sum-
marization of subroutines via attention to ﬁle con-
text. ArXiv, abs/2004.04881.

Xing Hu, Ge Li, Xin Xia, David Lo, and Zhi Jin. 2018.
Deep code comment generation. In Proceedings of
the 26th Conference on Program Comprehension,
ICPC ’18, pages 200–210, New York, NY, USA.
ACM.

Diederik Kingma and Jimmy Ba. 2014. Adam: A
International

method for stochastic optimization.
Conference on Learning Representations.

Taku Kudo. 2018. Subword regularization: Improving
neural network translation models with multiple sub-
word candidates. In Proceedings of the 56th Annual
Meeting of the Association for Computational Lin-
guistics (Volume 1: Long Papers), pages 66–75, Mel-
bourne, Australia. Association for Computational
Linguistics.

Taku Kudo and John Richardson. 2018. SentencePiece:
A simple and language independent subword tok-
enizer and detokenizer for neural text processing. In
Proceedings of the 2018 Conference on Empirical
Methods in Natural Language Processing: System
Demonstrations, pages 66–71, Brussels, Belgium.
Association for Computational Linguistics.

Alexander LeClair, Sakib Haque, Linfgei Wu, and
Improved code sum-
ArXiv,

Collin McMillan. 2020.
marization via a graph neural network.
abs/2004.02843.

Adam Paszke, Sam Gross, Soumith Chintala, Gregory
Chanan, Edward Yang, Zachary DeVito, Zeming
Lin, Alban Desmaison, Luca Antiga, and Adam
Lerer. 2017. Automatic differentiation in pytorch.
In NIPS-W.

Yao Wan, Jingdong Shu, Yulei Sui, Guandong Xu,
Zhou Zhao, Jian Wu, and Philip S. Yu. 2019.
Multi-modal attention network learning for seman-
tic source code retrieval. 2019 34th IEEE/ACM In-
ternational Conference on Automated Software En-
gineering (ASE), pages 13–25.

This work is supported by the IBM-ILLINOIS Cen-
ter for Cognitive Computing Systems Research
(C3SR), a research collaboration as part of the IBM
AI Horizons Network.

Zhiguo Wang, Wael Hamza, and Radu Florian. 2017.
Bilateral multi-perspective matching for natural lan-
guage sentences. In Proceedings of the Twenty-Sixth
International Joint Conference on Artiﬁcial Intelli-
gence, IJCAI-17, pages 4144–4150.

Ziyu Yao, Jayavardhan Reddy Peddamail, and Huan
Sun. 2019. Coacor: Code annotation for code re-
In The World
trieval with reinforcement learning.
Wide Web Conference, WWW ’19, pages 2203–
2214, New York, NY, USA. ACM.

Pengcheng Yin, Bowen Deng, Edgar Chen, Bogdan
Vasilescu, and Graham Neubig. 2018. Learning to
mine aligned code and natural language pairs from
stack overﬂow. In International Conference on Min-
ing Software Repositories, MSR, pages 476–486.
ACM.

