0
2
0
2

l
u
J

9

]
I

A
.
s
c
[

1
v
1
8
0
5
0
.
7
0
0
2
:
v
i
X
r
a

Intelligent Warehouse Allocator for Optimal
Regional Utilization

Girish Sathyanarayana
girish.sathyanarayana@myntra.com
Myntra Designs

Arun Patro
arun.patro@myntra.com
Myntra Designs

Abstract
In this paper, we describe a novel solution to compute opti-
mal warehouse allocations for fashion inventory. Procured
inventory must be optimally allocated to warehouses in pro-
portion to the regional demand around the warehouse. This
will ensure that demand is fulfilled by the nearest warehouse
thereby minimizing the delivery logistics cost and delivery
times. These are key metrics to drive profitability and cus-
tomer experience respectively. Warehouses have capacity
constraints and allocations must minimize inter warehouse
redistribution cost of the inventory. This leads to maximum
Regional Utilization (RU). We use machine learning and opti-
mization methods to build an efficient solution to this ware-
house allocation problem. We use machine learning models
to estimate the geographical split of the demand for every
product. We use Integer Programming methods to compute
the optimal feasible warehouse allocations considering the
capacity constraints. We conduct a back-testing by using
this solution and validate the efficiency of this model by
demonstrating a significant uptick in two key metrics Re-
gional Utilization (RU) and Percentage Two-day-delivery
(2DD). We use this process to intelligently create purchase
orders with warehouse assignments for Myntra, a leading
online fashion retailer.

Keywords: Fashion E-commerce; Inventory Allocation; Re-
gional Utilisation; Two-Day-Delivery, Warehouse Assign-
ment; Stock Keeping Unit (SKU); Integer Programming

ACM Reference Format:
Girish Sathyanarayana and Arun Patro. 2020. Intelligent Ware-
house Allocator for Optimal Regional Utilization. In Proceedings of
KDD 2020 workshop - AI for Fashion Supply Chain (KDD Fashion
2020). ACM, New York, NY, USA, 7 pages. https://doi.org/10.1145/
nnnnnnn.nnnnnnn

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies
are not made or distributed for profit or commercial advantage and that
copies bear this notice and the full citation on the first page. Copyrights
for components of this work owned by others than the author(s) must
be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee. Request permissions from permissions@acm.org.
KDD Fashion 2020, August 24–24, 2020, San Diego, CA
© 2020 Copyright held by the owner/author(s). Publication rights licensed
to ACM.
ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

1 Introduction
Buying and Replenishment is a major, throughout the year
activity in large fashion e-commerce firms. Fast changing
trends, seasonality, and just-in-time inventory models make
inventory procurement an everyday activity. Hundreds of
Purchase Orders (POs) are raised every day to procure styles
of different article types from vendors. Once the buying quan-
tity is fixed, typically using a demand forecasting model, the
next important task is to distribute the procured inventory
optimally between the principal warehouses. Logistics cost
is a significant cost component in e-commerce operations
and reduction in this by a few percentage points will result
in cost savings of the order of millions of dollars. This will
drive companies towards profitability. Optimal warehouse
stocking leads to lower logistics costs and faster delivery of
products and hence improved customer experience. An intel-
ligent solution, which can optimally distribute the inventory
between warehouses, is of great value.

The distribution must mirror the geographical demand
split. The quantity of the product (SKU) that gets located
in a warehouse must be in proportion to the regional de-
mand of the product. This is the localised demand from the
areas in the vicinity of the warehouse. Every postal pin-
code is mapped to the nearest warehouse. Sets of pincodes
mapped to the same warehouse partition the whole region
into geographical clusters with an associated unique nearest
warehouse. The quantity that gets located in a given ware-
house must be in proportion to the demand of the associated
cluster. The problem is to determine optimal stocking levels
for these warehouses.

Warehouses have capacity constraints and old inventory
which must be accounted while determining the new stock-
ing quantities. Geographical distribution of the demand can
be different for every SKU.

2 Related Work
Optimal allocation of resources is a well-studied problem
across e-commerce and supply chain management. There is
literature [5] for solving problems in production planning,
distribution planning, and transport planning using opti-
mization methods. Problems in logistics are modelled using
costs such as inventory holding cost, transport cost, etc, and
have realistic fixed limits to the variables. [1] have modelled

 
 
 
 
 
 
KDD Fashion 2020, August 24–24, 2020, San Diego, CA

Girish Sathyanarayana and Arun Patro

Supply Chain Networks using a general framework to sup-
port the operational decisions using a combination of an
optimization model and discrete-event simulation.

Although some variables are linearly relaxed, the addition
of integer constraints like knapsack constraints or capacity
in volume or number makes the problem partly discrete and
hence needs Mixed Integer Programming methods.

There has been work using Integer Programming methods
to allocate resources optimally between Brick and Mortar
and online stores [2]. [4] discuss in detail about a production
and distribution problem with boolean and general integer
variables, formulated as an Integer Linear Program. [3] study
an inventory planning problem where the procurement of
items and their quantity is modelled using a mixed 0/1 integer
program.

3 Problem Statement and Solution Outline
The objective is to determine the optimal stocking quantity
of each SKU for individual warehouses which will maximise
regional utilization. Regional Utilization (RU) is defined as
the fraction of total demand which is fulfilled from the near-
est warehouse. In cases when warehouses cannot inward
the recommended quantities due to capacity constraints, the
next nearest warehouse must be prioritised to minimise the
cost of redistribution.

We formalise these requirements by defining a penalty
matrix L for redistribution costs and expressing the require-
ments as a constrained optimization problem. Table 1 lists
down all the variables and notation used in the paper. We
can formally state the problem as follows.

3.1 Problem Statement
Given a Purchase Order (PO) specification: {(skui , Ni )|1 ≤
i ≤ M } which is just a set of (skui , quantity) pairs for M
unique SKUs and K warehouses with capacities [C1, C2, ...CK ]
and existing inventory of the SKUs in warehouses {Ei j |1 ≤
i ≤ M; 1 ≤ j ≤ K }, compute the optimal warehouse allo-
cations {(skui , [Xi1, ...XiK , Xil ])|1 ≤ i ≤ M } where Xi j is
the number of skui allocated to warehouse j. Xil denotes
the number of skui not assigned to any warehouse. This is
optionally allowed to handle cases where total SKU quan-
tity is more than the combined capacity of all warehouses.
Allocations must satisfy the following constraints.

K
(cid:213)

(

j=1

Xi j ) + Xil = Ni

1 ≤ i ≤ M

M
(cid:213)

i=1

Xi j ≤ Cj

1 ≤ j ≤ K

(1)

(2)

3.2 Solution Outline

The solution comprises 2 steps.

Table 1. Notation of Variables and Constants in the paper

PO

Purchase Order
{(skui , Ni )|1 ≤ i ≤ M }

Specification of

size M

POi A tuple of (skui , Ni )
Ni
M
K
PO ′ Exploded Purchase Order Specification of size N

Quantity of skui to be inwarded
The total number of unique SKUs in the PO
Number of Warehouses

+

+

Allocation Matrix

{(itemi )|1 ≤ i ≤ N }
Total quantity of all SKUs in PO
Existing Inventory Matrix ∈ Z (M ∗K )
The existing quantity of skui in warehouse j
Warehouse Capacity Vector ∈ Z K
+
Capacity of warehouse j
Optimal Warehouse
∈ Z (M ∗(K +1))
The quantity of skui to be inwarded to warehouse
j for 1 ≤ j ≤ K
The quantity of skui not assigned to any ware-
house
Ideal Split Probability Matrix ∈ [0, 1](M ∗K )
The probability that the purchase event for skui
is located in geographic region for which nearest
warehouse is j
Ideal Split Matrix ∈ Z (M ∗K ))
The ideal quantity of skui to be inwarded to ware-
house j
Binary Decision Variable Matrix ∈ {0, 1}(N ∗K ) (for-
mulation 1)
1 if itemi is inwarded to warehouse j else 0 (for-
mulation 1)
Redistribution Cost Penalty Matrix ∈ R(K ∗K +1)
The penalty for placing an item which is ideally
assigned to warehouse i in warehouse j for 1 ≤
i, j ≤ K
Truncated Penalty Matrix L′ = L[1 : K][1 : K] ∈
R(K ∗K )
A vector of 1s ∈ {1}(m,1)

+

N
E
Ei j
C
Cj
X

Xi j

Xil

P
Pi j

I
Ii j

Y

Yi j

L
Li j

L′

1m

1. Ideal Splits Computation: Predicting the ideal split
at the SKU level by a split prediction model and gen-
erating an ideal warehouse allocation given the order
quantity from a demand model for every SKU assum-
ing unlimited capacity in warehouses.

2. Optimal Feasible Allocations: Finding optimal fea-
sible allocations considering warehouse capacity con-
straints by defining an allocation penalty matrix and
solving the constrained optimization problem.

In the following sections, we will describe the above 2 steps
and results in detail.

Intelligent Warehouse Allocator for Optimal Regional Utilization

KDD Fashion 2020, August 24–24, 2020, San Diego, CA

Table 2. Ideal Split Classifier Log-loss Comparison

Article Type Gender

Log Loss

Classifier

Men’s T-shirts Dresses

Baseline 3-month mean estimate
Logistic Regression
Random Forest
Neural Network

1.395
1.356
1.283
1.040

1.474
1.392
1.317
1.062

4 Ideal Splits Computation
Given a purchase order specification: {(skui , Ni )|1 ≤ i ≤ M }
and K warehouses, we compute ideal splits {Ii j |1 ≤ j ≤ K }
among K warehouses for each skui :

K
(cid:213)

j=1

Ii j = Ni

1 ≤ i ≤ M

(3)

We assume unlimited capacity in warehouses. Ideal splits

Ii j are computed by estimating the split probabilities
{Pi j |1 ≤ j ≤ K } for each skui defined as follows.

Pi j = Probability(Purchase event f or skui is located in

дeoдraphical cluster with associated nearest warehouse
beinд warehousej)

K
(cid:213)

j=1

Pi j = 1.0

(4)

We estimate these probabilities by learning a classifier
that predicts the warehouse probabilities using predictors
like attributes of the style like colour, brand, fabric, size, age
group, price, sleeve length, neck-type, etc. We use around
10 - 12 relevant attributes for each article type and gender
group.

Every purchase event on the platform is associated with
a postal pin code that is mapped to the nearest warehouse.
This is used to create labelled training records on which the
classifier is trained. We tried different classifiers like logistic
regression, tree-based classifiers and feed-forward neural
network classifiers. Table 2 compares the performance of
these classifiers. The neural network model outperforms
other classifiers and we use a 3-layer MLP for each article
type, gender combination in our application. Table 3 lists the
log loss for these classifiers.

Using split probabilities, ideal split for skui is computed

using Eqn. 5

[Ii1, Ii2, ...Iik ] = Ni ∗ [Pi1, Pi2, ...Pik ]

(5)

Men
Men
Men
Men

Sweaters
Jackets
Jackets
Sweaters
Blazers
Suits

Women 0.660428
Women 0.701047
0.728329
0.781279
0.855442
0.879383
Sweatshirts Women 0.884996
Casual Shoes Women 0.924080
Sports Shoes Women 0.926811
0.938906
Sweatshirts
Sports Shoes
0.955780
Women 0.984653
Heels
0.986829
Women 0.990782
Handbags Women 0.991535
Women 0.993759
Jeggings
Trolley Bag
0.999156
Unisex
Kurta Sets Women 1.000210
1.005823
Trackpants
Men
1.014115
Formal Shoes Men

Casual Shoes Unisex

Men
Men

Jeans

Table 3. Log Loss for the three layer multi layer perceptron
for various article types and genders

of equations.

totalquantityi =

K
(cid:213)

j=1

Ii j +

K
(cid:213)

j=1

Ei j

K
(cid:213)

Ii j = Ni

j=1
Ii j + Ei j
totalquantityi

= Pi j

(6)

(7)

1 ≤ j ≤ K − 1

(8)

Solving these equations may sometimes result in negative
values for ideal splits Ii j which is obviously not admissi-
ble. In such cases, we can compute ideal splits by solving a
constrained optimization problem with constraints ensuring
that ideal splits are non-negative. It suffices to say that using
the classifier output, we can always compute the ideal splits
Ii j .

Ideal splits are rounded to the nearest integer and any
difference in total quantity arising due to rounding is offset
using heuristic based rules. At the end of step 1, we have
the ideal warehouse allocation matrix I . In the next step, we
optimally impose capacity constraints on ideal splits.

If we have existing inventory for the SKUs, Ei j being the
quantity of existing inventory for skui in warehouse j, we
compute the ideal splits Ii j by solving the following system

5 Optimal Feasible Allocations
In this step, we optimally impose warehouse capacity con-
straints on ideal splits computed in the previous section.

KDD Fashion 2020, August 24–24, 2020, San Diego, CA

Girish Sathyanarayana and Arun Patro

Optimality is with regard to the inter warehouse redistribu-
tion task. We formalise this by defining a redistribution cost
penalty matrix L ∈ R(K ∗K +1) where

Li j (j (cid:44) K + 1) is the penalty for placing an item which
is ideally assigned to warehouse i to warehouse j. We set
these penalties to mirror logistics cost involved in fulfilling
an order from warehouse j when the nearest warehouse is
warehouse i.

Non-assignment is allowed to handle cases where total
number of items in the PO is greater than the combined ca-
pacity of all warehouses. The (K +1)th column of L represents
the non-assigment penalty (Eqn . 9).
Li, K +1 = λN A

1 ≤ i ≤ K

(9)

However, we make sure that assignments are always pre-
ferred over non-assignments by setting λN A >> Li j , 1 ≤
i, j ≤ K.

Optimization algorithms will always choose assignment
over non-assignment because the non-assignment penalty
is greater than any assignment penalty.

The key idea behind these optimization formulations is
the following. Warehouse allocation implied by ideal splits
need not be always feasible because of warehouse capacity
constraints. By defining a redistribution penalty matrix, we
can compute an optimal re-arrangement of ideal allocations
which will be capacity feasible. We can think of the final allo-
cation as minimum distortion from the ideal splits allocation
which is feasible with distortion costs defined by the penalty
matrix.

Having defined the redistribution cost penalty matrix L,
we came up with two novel formulations of the optimization
problem. One is a Binary Integer Programming formulation
using item-level decision variables and the other is a standard
Integer Programming formulation using sku level decision
variables. Both are equivalent from an optimality perspec-
tive but differ in computational complexity. In the following
subsections, we will describe both the formulations.

5.1 Binary Integer Programming Formulation
Given a PO specification {(skui , Ni )|1 ≤ i ≤ M }, we can de-
fine an exploded PO Specification item set PO ′ by repeating
skui Ni number of times represented as itemi j .

PO ′ = {itemi, j(i)|1 ≤ i ≤ M; 1 ≤ j ≤ Ni }
itemi j are Ni identical SKUs of type skui . Size of the ex-

(10)

ploded item set is N = (cid:205)M

i=1 Ni

For every item in the exploded PO item set, we have an
ideal warehouse assignment from ideal split computation
from Step 1 (Sec. 4). Warehouse assignments implied by ideal
splits are not unique. Different permutations of assignments
leading to the same allocation quantities are possible. Dif-
ferent permutations of this warehouse assignments are all
equivalent from the point of view of optimization. We can
choose any one of them.

Ideal assignment for exploded PO item set =

{(itemi , wi )|1 ≤ i ≤ N } where wi denotes the warehouse as-
signed to item itemi . We can represent different warehouses
by K-dimensional one-hot vectors like w2 = [0, 1, ...0]. If an
item is not assigned to any warehouse, its warehouse vector
will be a K-dimensional zero vector.

Using these one hot representations, we can define an
ideal warehouse assignment matrix W ∈ {0, 1}(N ∗K ). Row
i of W i.e. W [i] is the ideal warehouse assignment one hot
encoding for itemi .

For each itemi we define K binary-decision variables, Yi =
[Yi1, ...YiK ] which represent the optimal feasible assignment
considering capacity constraints. These are determined by
solving the optimization problem.

This gives us the binary decision variable matrix:

Y ∈ {0, 1}(N ∗K ) to be determined by optimization. Lets define
the truncated penalty matrix L′ = L[1 : K][1 : K] ∈ R(K ∗K ) by
dropping the last column representing the non-assignment
penalties.

Let 1m denote a column vector of all 1s of dimension (m∗1).

We define the non-assigned vector Z as

Z = 1N − Y 1K

(11)

We determine the optimal feasible assignment Yopt by

solving the following optimization problem:

arg min
Y

trace(Y L′W T )
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)
(cid:124)
(cid:125)
(cid:123)(cid:122)
assiдnment loss

+ λN A
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)

N
(cid:213)

Zi
(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)(cid:32)

i=1
(cid:123)(cid:122)
non assignment loss

(cid:125)

(cid:124)

(12a)

subject to

K
(cid:213)

j=1

N
(cid:213)

i=1

Yi j ≤ 1

1 ≤ i ≤ N ,

(12b)

Yi j ≤ Cj

1 ≤ j ≤ K

(12c)

Optimization objective (Eqn. 12a) represents the total re-
distribution cost for all SKUs given an ideal allocation W and
final assignment Y . (Y L′W T )ii represents the redistribution
cost for itemi |i = 1, ...N . There are two constraints. Eqn 12b
constrains that we choose at most 1 warehouse per item.
Eqn. 12c constrains that total items assigned to warehouse j
is not more than the capacity of the warehouse j.

Using optimal feasible assignments Yopt , we compute op-

timal feasible warehouse splits for SKUs as follows.

Intelligent Warehouse Allocator for Optimal Regional Utilization

KDD Fashion 2020, August 24–24, 2020, San Diego, CA

The ideal assignments for skui is Y (skui ) given by:

Y (skui ) = [Yopt [j]|1 ≤ j ≤ N s.t . itemj = skui ]
Y (skui ) ∈ {0, 1}(Ni ∗K )
Ni(cid:213)

Xi j =

Y (skui )mj

1 ≤ j ≤ K

m=1

Xil = Ni −

K
(cid:213)

j=1

Xi j

(13)

(14)

(15)

{(skui , [Xi1, ...XiK , Xil ])|1 ≤ i ≤ M } are the desired opti-

mal feasible warehouse allocations.

Binary Integer Programming formulation works well for
small size orders. The number of decision variables is O(N ∗
K) where N is the total quantity of items and K is the total
number of warehouses. For large sized orders, the number of
decision variables will become too large and this will be very
cumbersome to solve. In the next subsection, we describe
an alternative formulation which can efficiently solve large
orders.

5.2 Integer Programming Formulation

From Step 1 (Sec. 4), we have computed ideal splits:
{(skui , [Ii1, Ii2, ...Iik ])|1 ≤ i ≤ M }. This gives us the ideal
split matrix: I ∈ Z (M ∗K )
where Ii j represents the quantity of
skui assigned to warehouse j. Penalty matrix L ∈ R(K ∗K +1)
is the same as before.

+

We define a final split Decision Variable Tensor

Y ∈ Z (M ∗K ∗K +1)

+

as follows:

Yiuv = number o f skui ideally allocated to warehouse u which
is f inally placed in warehouse v, 1 ≤ i ≤ M; 1 ≤ u ≤ K; 1 ≤
v ≤ K + 1(v = K + 1 implies not assiдned to any warehouse)

We determine optimal final split tensor Yopt by solving

the following integer programming problem.

arg min
Y

subject to

M
(cid:213)

i=1

trace(Yi ∗ LT )

(16a)

K +1
(cid:213)

m=1

M
(cid:213)

K
(cid:213)

i=1

j=1

Yi jm = Ii j

1 ≤ i ≤ M; 1 ≤ j ≤ K,

Yi jm ≤ Cm

1 ≤ m ≤ K

(16b)

(16c)

Optimization objective (16a) represents total redistribu-
tion cost for {skui |1 ≤ i ≤ M } given an ideal split and a final
split. The term trace(Yi ∗ LT ) is the redistribution cost for
skui as depicted in Figure 1. Eqn 16b and 16c are optimiza-
tion constraints for SKU order quantities and warehouse
capacities respectively.

Figure 1. This figure visualizes the matrices. Suppose we
have 4 warehouses (K = 4). Yi is the decision variable matrix
representing warehouse assignment for skui . L is the penalty
matrix. The (K + 1)th region is highlighted to represent non-
assignment region. jth row of Yi represents how ideal split
Ii j gets redistributed between K + 1 warehouses. jth column
of LT represents redistribution losses for a sku ideally bound
to warehouse j. Therefore, jth diagonal element in the Yi ∗LT
will have the total redistribution loss for items of skui which
were ideally bound to warehouse j.

Once we have Yopt by solving the optimization problem,

we compute final optimal feasible allocations as follows:

Xi j =

Xil =

K
(cid:213)

m=1
K
(cid:213)

m=1

(Yopt )imj

1 ≤ i ≤ M, 1 ≤ j ≤ K

(17)

(Yopt )im, K +1

1 ≤ i ≤ M

(18)

{(skui , [Xi1, ...XiK , Xil ])|1 ≤ i ≤ M } are the desired opti-

mal feasible warehouse allocations.

The second formulation (Sec. 5.2) is computationally more
efficient. The number of decision variables is O(M∗K 2) which
is usually much smaller than binary integer programming
case when K is not very large. With this we can efficiently
solve the optimization problem with total SKU quantity rang-
ing in millions, number of SKUs ranging in few thousands
and number of warehouses is less than 100 using open source
solvers like coin-or/Cbc.

Note that for this problem, we can always supply an initial
feasible solution to warm start the optimization. One trivial
feasible solution is the one which does not assign warehouses
to any sku. This also has the maximum objective value. Using
ideal splits and some heuristics, we can supply much better
initial feasible solutions to speed up the optimization.

We use this second formulation for our back-testing and

for optimization, we used the coin-or/Cbc solver at
https://github.com/coin-or/Cbc.

6 Evaluation and Results
In this section, we describe the back-testing set up and results.
We back-tested the model on purchase orders created during
an entire month at Myntra. We tested it on major business

KDD Fashion 2020, August 24–24, 2020, San Diego, CA

Girish Sathyanarayana and Arun Patro

Table 4. Warehouse capacity constraint - Scenario 1

Table 6. Apparel RU and 2DD Estimates

Month

April 19

May 19

Type

C1

C2

C3

C4

Metric

Scenario 1

Scenario 2

Apparel
Footwear
Personal Care

1005714
91429
102857

Apparel
Footwear
Personal Care

435810
76191
85714

502857
45714
-

217905
38095
-

377143
34286
17143

163429
28571
14286

754286
68571
-

326857
57143
-

RU (ideal splits)
RU (constrained splits)
RU (Heuristics based)

2DD (ideal splits)
2DD (constrained splits)
2DD (Heuristics based)

0.91
0.82
0.64

0.64
0.58
0.48

0.91
0.84
0.64

0.64
0.61
0.48

Table 5. Warehouse capacity constraint - Scenario 2

Table 7. Footwear RU and 2DD Estimates

Month

April 19

May 19

Type

C1

C2

C3

C4

Apparel
Footwear
Personal Care

Apparel
Footwear
Personal Care

550979
50089
56350

238758
21705
24418

721502
65591
-

312650
28423
-

844438
76768
38384

365923
33265
16634

546241
49658
-

236705
21518
-

units like Apparel, Footwear and Personal Care, covering 23
different Article types. Around 8,000 purchase orders were
created for 43,000 SKUs and a total quantity of 3.4 million.
We used two warehouse constraint scenarios (Table 4 and
Table 5) provided by the Supply-Chain-Management team.
We solved the optimization problem using constraints
depicted in tables 4 and 5. After every purchase order is
created, we deduct the total quantity of the order from the
capacities and update the constraints.

Using the optimal splits computed using our optimization
algorithm and the purchase data for these skus in subse-
quent months, we estimated Regional Utilization (RU) which
is the fraction of orders which are fulfilled by the nearest
warehouse. We also estimated percentage Two-Day-Delivery
which is the fraction of orders which are fulfilled within two
days of placing the order. Every warehouse has a set of pin-
codes for which delivery can be done within 2 days. Using
this, we can estimate the percentage Two-Day-Delivery. We
observed a substantial uptick in these two key metrics —
RU and 2DD over a heuristics based approach previously
followed. We compared the estimates with the numbers pro-
duced using simple business heuristics. Tables 6, 7 and 8
depict the results.

• RU (ideal splits): RU estimate using ideal splits with

unlimited warehouse capacities.

• RU (constrained splits): RU estimate using optimal

feasible splits considering capacity constraints.

• RU (Heuristics based): Actual realised RU using a heuris-

tics based warehouse allocation policy.

Metric

Scenario 1

Scenario 2

RU (ideal splits)
RU (constrained splits)
RU (Heuristics based)

2DD (ideal splits)
2DD (constrained splits)
2DD (Heuristics based)

0.9
0.87
0.38

0.69
0.66
0.34

0.9
0.9
0.38

0.69
0.69
0.35

Table 8. Personal Care RU and 2DD Estimates

Metric

Scenario 1

Scenario 2

RU (ideal splits)
RU (constrained splits)
RU (Heuristics based)

2DD (ideal splits)
2DD (constrained splits)
2DD (Heuristics based)

0.93
0.7
0.5

0.72
0.53
0.35

0.93
0.7
0.5

0.72
0.53
0.35

• 2DD (ideal splits): Percentage Two-Day-Delivery es-
timate using ideal splits with unlimited warehouse
capacities.

• 2DD (constrained splits): Percentage Two-Day-Delivery
estimate using optimal feasible splits considering ca-
pacity constraints.

• 2DD (Heuristics based): Actual realised Percentage
Two-Day-Delivery using a heuristics based warehouse
allocation policy.

Results clearly show a significant improvement in both
RU and 2DD. RU improves by around 27% over the naive
heuristic method and 2DD improves by around 20%. The
performance trend is consistent across all the 3 categories
and the 2 constraint scenarios.

7 Conclusion
We have developed an efficient solution to the problem of
optimal warehouse allocations from a Regional Utilization

Intelligent Warehouse Allocator for Optimal Regional Utilization

KDD Fashion 2020, August 24–24, 2020, San Diego, CA

perspective using machine learning and optimization meth-
ods. We have computed ideal allocations using predictive
ML models. We have formalised the requirements of optimal
warehouse allocation problem using 2 novel optimization
formulations. We have demonstrated the efficacy of the solu-
tion with an elaborate back-testing. We have demonstrated
a substantial uptick in key business metrics like Regional
Utilization and Two-Day-Delivery over a heuristics based
approach.

References
[1] Christian Almeder, Margaretha Preusser, and Richard F Hartl. 2009.
Simulation and optimization of supply chains: alternative or comple-
mentary approaches? OR spectrum 31, 1 (2009), 95–119.

[2] Amit Bhatnagar and Siddhartha S Syam. 2014. Allocating a hybrid
retailer’s assortment across retail stores: Bricks-and-mortar vs online.
Journal of Business Research 67, 6 (2014), 1293–1302.

[3] Amy HI Lee and He-Yau Kang. 2008. A mixed 0-1 integer programming

for inventory model. Kybernetes (2008).

[4] Miguel A Lejeune and François Margot. 2008. Integer programming
solution approach for inventory-production–distribution problems with
direct shipments. International Transactions in Operational Research 15,
3 (2008), 259–281.

[5] Hartmut Stadtler. 2005. Supply chain management and advanced
planning—-basics, overview and challenges. European journal of opera-
tional research 163, 3 (2005), 575–588.

