Article history:
Received: 26 August 2020
Accepted: 18 October 2020
Online: 24 October 2020

Keywords:
Language translation
Synthesis of things
JFA applications
SQL queries

INTRODUCTION

0
2
0
2

v
o
N
4
1

]

Y
C
.
s
c
[

1
v
6
7
3
7
0
1
.
1
1
0
2
:
v
i
X
r
a

Advances in Science, Technology and Engineering Systems Journal

Vol. 5, No. 5, 1189-1195 (2020)
www.astesj.com

ASTES Journal
ISSN: 2415-6698

Synthesis of SQL Queries from South African Local Language Narrations

George Obaido*,12, Abejide Ade-Ibijola2, Hima Vadapalli1

1School of Computer Science and Applied Mathematics, University of the Witwatersrand, Johannesburg, 2001, South Africa.

2School of Consumer Intelligence and Information Systems, University of Johannesburg, Johannesburg, 2001, South Africa.

A R T I C L E I N F O

A B S T R A C T

English remains the language of choice for database courses and widely used for instruc-
tion in nearly all South African universities, and also in many other countries. Novice
programmers of native origins are mostly taught Structured Query Language (SQL) through
English as the medium of instruction. Consequently, this creates a myriad of problems in
understanding the syntax of SQL as most native learners are not too proﬁcient in English.
This could aﬀect a learner’s ability in comprehending SQL syntaxes. To resolve this problem,
this work proposes a tool called local language narrations to SQL (Local-Nar-SQL) that
uses a type of Finite Machine, such as a Jumping Finite Automaton to translate local lan-
guage narratives into SQL queries. Further, the generated query extracts information from
a sample database and presents an output to the learner. This paper is an extension of work
originally presented in a previous study in this ﬁeld. A survey involving 145 participants
concluded that the majority found Local-Nar-SQL to be helpful in understanding SQL
queries from local languages. If the proposed tool is used as a learning aid, native learners
will ﬁnd it easier to work with SQL, which will eliminate many of the barriers faced with
English proﬁciencies in programming pedagogies.

According to Linguists, English has much of its vocabulary bor-
rowed from French and Latin, but it remains a Germanic language in
terms of structure and sounds [1, 2, 3]. English is the predominant
language of instruction used at most universities and remains the de
facto language of communication for many industry sectors [4, 5].
It is interesting to note that many of the world’s population do not
speak English as their ﬁrst language, but it is vastly used for commu-
nication and dissemination of knowledge [6, 7]. Most programming
and scripting languages, such as C, Java, Python and Structured
Query Language (SQL) have keywords, declarations and documen-
tations based in English [7, 8, 9]. Even online resources, such as
forums, blogs and developers communities that aid the learning of
programming are primarily in English [10, 11]. For example, Stack
Overﬂow, which is one of the largest online communities for devel-
opers, enforces that all questions and answers are posted in English.
Hence, for a novice programmer to be proﬁcient in programming,
English is a necessity [8].

performing operations on relational databases [12, 13]. As a stan-
dardised language, many of its syntaxes and statements are English-
like, and SQL has found numerous applications in both industry
and academia [14, 15]. Listing 1 shows examples of the SQL SE-
LECT query statements that depict English-like formation. These
set of queries would retrieve one or more records from a targeted
database’s table.

Listing 1: SQL SELECT statement query

SELECT * FROM myrecordinfo ;

SELECT DISTINCT firstname , lastname
FROM myrecordinfo ;

SELECT * FROM myrecordinfo
WHERE firstname =’karabo ’ AND lastname =’hlophe ’;

SELECT * FROM Customers
WHERE country =’South Africa ’
OR city = ’Pietermaritzburg ’;

SQL is the most popular query declarative language used for

*Corresponding Author: George Obaido, University of the Witwatersrand,

School of Computer Science and Applied Mathematics, Johannesburg, 2001, South Africa.
Email: rabeshi.george@gmail.com & Contact: +27832227427

www.astesj.com
https://dx.doi.org/10.25046/aj0505144

1

 
 
 
 
 
 
South Africa is a multilingual country with eleven oﬃcial lan-
guages [16, 17, 18]. Most South African learners prefer to communi-
cate in their local dialects, rather than English [17, 18]. Educational
instruction for learning programming requires a good proﬁciency
in English, which creates numerous challenges for a local student
whose native language is not English [7, 19, 20]. Just like any
other programming language, anecdotal evidence has shown that
SQL is hard for students [12, 13, 14, 21]. Even the straightforward,
English-like syntax of SQL is misleading [22, 23]. Other stud-
ies have identiﬁed that the burden of remembering SQL keywords
and database schemas are often challenging [21, 24]. These chal-
lenges have made it crucial for researchers and developers to create
culturally-agnostic aids that would assist learners to improve their
understanding of SQL. Such systems could be developed to enable
learners express their requests in free-forms using local language
narrations. To our knowledge, this is the ﬁrst study that attempts to
translate South African local language narrations into SQL queries.

Figure 1: The translation process (adapted from [12])

This paper is an extension of work originally presented in [12],
where natural language speciﬁcations were translated into SQL
queries. We extended the use of a Jumping Finite Automaton, a
type of Finite Machine for the translation of local language speciﬁ-
cations into SQL queries. This idea was further implemented into
a desktop-based application called Local-Nar-SQL. The process
of translating the local language speciﬁcations into SQL queries is
presented in Figure 1. Here, a user provides narrations in a local
language, that is then processed by Local-Nar-SQL. The system
preprocesses and passes the provided narrations to the JFA parser for
matches. Further, the tokens are matched and a query is generated,
which is made available to the user. In this paper, the following
contributions were made. This study has:

1. developed a method for the recognition of local language

www.astesj.com
https://dx.doi.org/10.25046/aj0505144

speciﬁcations using a JFA,

2. extended this approach into a tool, called Local-Nar-SQL,
for the translation of local language speciﬁcations into SQL
queries, and

3. evaluated this approach using human subjects and presented

initial results.

The rest of this paper is organised as follows: Section 2 highlights
the background and related works, Section 3 presents the method-
ology used for this study, Section 4 shows the implementation and
results details, the evaluation information is provided in Section 5
and Section 6 concludes the paper and highlights discussions for
future studies.

2 BACKGROUND

This section presents the problems as research questions, highlights
the motivation behind this work and discusses related work.

2.1 Research Questions

This study attempts to solve the following problems:

1. how can we successfully translate local language narrations

into SQL queries?

2. can we describe a JFA and implement this into a tool that

addresses the above problem?

3. what are human perceptions of the developed tool?

These problems were addressed in Section 3, 4 and 5.

2.2 Motivation

English proﬁciency is a problem in South Africa English proﬁ-
ciency remains a major concern for local students learning
programming [8]. Many programming language constructs,
keywords, API methods and libraries are mostly written in
English, which pose a great deal of diﬃculty for a local
learner [7, 19, 20].

Decolonisation of science Issues regarding the decolonisation of
the science curriculum is currently being debated in South
Africa and the rest of the world [25]. Many local learners
agree that the legacies of apartheid (entrenched colonialism)
are still evident in education sectors, built by western perspec-
tives, which might impinge access to learning [26, 27].

Comprehension problems in SQL Generally,

the English-like
syntax of SQL is misleading for learners [13, 15]. Similarly,
most query interfaces are built to report errors in English,
which might be confusing for learners to decipher [28, 29].

Abstract nature of programming From a novice learners’ per-
spective, the process of learning a new programming lan-
guage remains a daunting task [30, 31]. Even so, the abstract
nature of programming has resulted in high failure rates for
Computer Science (CS) disciplines [32, 33].

2

2.3 Why Local Language Narrations

3.1 Abstracting Local Languages to SQL

In Section 2.2, it was seen that English language poses numerous
diﬃculties for local language learners. An ideal approach would
be to enable such learners to express their intention, free from nat-
ural language ambiguities – in narrations. Narrations have been
shown to provide textual explanations for programming and script-
ing language paradigms [12, 14, 33]. This practice allows learners to
express their requests in free-forms, ignoring programming language
syntax. Such free-forms allow learners to express their requests in
their local language, free from English language ambiguities. For
programming languages, especially in low-resource settings, such
an approach has been tried in [9, 34, 35].

2.4 Related Work and Terms

This section presents similar work in the area of language transla-
tions and the applications of JFA.

Language Translation An evolutionary method for translating
Portuguese language into SQL query [36], a pattern matching
approach for translating Hindi language into SQL query [37],
Telugu language translation into SQL query [38], translating
Italian language to SQL query [39], translating Chinese lan-
guage into SQL query [40] and Arabic translation into SQL
queries [41, 42, 43].

JFA Applications Abstraction of

frequently asked questions
(FAQs) for comprehension purposes [44], synthesising SQL
queries from narratives [12] and the automatic comprehension
of tweets [45].

SQL Comprehension Generating narratives of SQL queries [13],
generating narratives of nested SQL queries [15], generating
SQL queries from visual speciﬁcations [14] and synthesising
SQL queries from verbal speciﬁcations [46].

The method used in this paper is a JFA, and deﬁnitions of this

term are as follows.

Deﬁnition 1 (A Jumping Finite Automaton (JFA) [47]) A JFA
is a ﬁve-tuple, M = (Q, Σ, R, s, F) where:

1. Q is a bounded set of states,

2. Σ is an input alphabet,

3. R is the bounded set of rules, where py → q (p,q ∈ Q, y∈Σ),

4. s∈Q is the start state, and

5. F⊆Q is the ﬁnal state.

3 METHODOLOGY

This section presents the methodology for this study. To begin, local
languages were abstracted into a JFA, then queries were normalised,
where irrelevant details were removed. Next, a query was generated.

www.astesj.com
https://dx.doi.org/10.25046/aj0505144

CT

For local language abstraction into a JFA, entities were identiﬁed
with colours, such as query types ((cid:80)
= ax) in green, attributes
QT
((cid:80)
= by) in red and relations ((cid:80)
= cz) in blue. This information
is presented in Table 1. The Chinook DB [48] was selected for
our use-case with a corpus containing a total of 120 diﬀerent local
languages conversions. This database contains a typical digital
music store, consisting of eleven tables and multiple records. Some
examples of the JFA abstractions are presented.

ET

ax
a0 Khombisa
a1 Ungitholele
a2 Ngitholela
a3 Ukuthola
a4 Usika
a5 Fumana
a6 Khetha
a7 Enta
a8 Faka
a9 Susa
a10 Funda
a11 Wys
a12 Vind
a13 Lys
a14 Kry
a15 Plaas
a16 Opdateer
a17 Verwyder
a18 Skep
a19 Lees
a20 Nghenisa
a21 Sula
a22 Susa
a23 Engetela
a24 Tumbuluxa
a25 Tlakusisa
a26 Ulonga
a27 Ubvisa
a28 Udadzisa
a29 Utomola
a30 Usika

Table 1: JFA symbols 1 - 30
by
b0 EmployeeID
b1 LastName
b2 FirstName
b3 Title
b4 ReportTo
b5 Address
b6 State
b7 City
b8 PostalCode
b9 Fax
b10 Country
b11 Email
b12 CustomerID
b13 SupportRepID
b14 TrackID
b15 ArtistID
b16 InvoiceID
b17 MediaTypeID
b18 InvoiceLineID
b19 Name
b20 UnitPrice
b21 Composer
b22 Company
b23 Al | Alle | Alles
b24 Konke | Yonke
b25 Yothe | Vhothe
b26 −
b27 −
b28 −
b29 −
b30 −

cz
c0 Employee
c1 Genre
c2 Customer
c3 Mediatype
c4 Track
c5 Invoice item
c6 Invoice
c7 Phone
c8 Playlist track
c9 Album
c10 Artist
−
−
−
−
−
−
−
−
−
−
−
−
−
−
−
−
−
−
−
−

• Ek will al die customer besonderhede vind

Example 1 above shows a query request sentence in Afrikaans.
The English translation for this sentence is: “I want to ﬁnd all the
customer’s details”. The equivalent JFA shows:

M = ({I, J, K, L}, {b23, c2, a12}, R, I; {L})

where {I, J, K, L} are the states,
{b23, c2, a12}, are the input alphabets,

3

R is the set of rules,
I is a start state, and
{L} is a ﬁnal state.

R = {Ia3 → J, Jb24 → K, Kc2 → L}

accepts

with

accepts

R = {Ib23 → J, Jc2 → K, Ka12 → L}

L(M) = {w ∈ {a3, b24, c2}*: |a3| = |b24| = |c2|}
i.e. a3 = ukuthola; b24 = yonke; c2 = customers

L(M) = {w ∈ {b23, c2, a12}*: |b23| = |c2| = |a23|}
i.e. b23 = al; c2 = customers; a12 = vind

b23c2a12a12c2Ib23 (cid:121) b23c2a12Ja12c2
(cid:121) b23c2a12Ka12
(cid:121) Lb23c2a12

[Ib23 → J]
[Jc2 → K]
[Ka12 → L]

b24a3c2b24c2Ia3 (cid:121) b24a3c2Jb24c2

(cid:121) b24a3c2Kc2
(cid:121) Kb24a3c2

[Ia3 → J]
[Jb24 → K]
[Kc2 → L]

Figure 2: An example of a sample JFA

Figure 2 shows an example of a sample JFA with three transi-
tions. The diagram consists of four states, labelled as {I, J, K, L},
where the start state is I and accepting state is L. Ib21 begins the
movement with the al keyword, then Jc2 shows the movement with
the customer keyword, and the transition, Ka12 ends with the vind
keyword. Since local languages are rich in vocabulary, the input
alphabet may diﬀer in another language, which might result in a
change in the states and transitions.

• Ngifuna ukuthola yonke imininingwane ya ma customer

The above sentence is the Zulu translation of: “I want to ﬁnd all the
customer’s details”. The equivalent JFA shows:

M = ({I, J, K, L}, {a3, b24, c2}, R, I; {L})

where {I, J, K, L} are the states,
{a3, b24, c2}, are the input alphabets,
R is the set of rules,
I is a start state, and
{L} is a ﬁnal state.

with

www.astesj.com
https://dx.doi.org/10.25046/aj0505144

Figure 3: An example of a sample JFA

Figure 3 shows an example of a JFA with three transitions. The
four states as shown in the diagram are {I, J, K, L}, with I represent-
ing the start state and L denoting the accepting state. Ia3 begins
the movement with the ukuthola keyword, then Jb24 shows the next
input label with the yonke keyword, Kc2 ends with the customer
keyword. It is interesting to note that these examples only cater
for a single relation. We may have situations of many states and
transitions, taking into account the input statement provided by the
learner.

3.2 Normalising Queries

At the normalisation phase, irrelevant details were removed and
keywords that appears in our JFA design were used to semantically
form a query. The normalisation process is passed to the SQL query
generator, which is then used to create and retrieve records from the
Chinook DB. As illustrated in Table 2, each local language word
is mapped to a query operation. This stage is useful for the SQL
generation phase.

Table 2: Mapping Local Language Keywords

4

Keywords
Ukuthola, Thola, Ngtholele,
Fumana, Ngitholela,
Vind, Kies
Al, Alle, Alles, Konke,
Yonke, Yothe, Vhothe
Skep, Usika, Dala
Faka, Plaas, Ulonga
Susa, Lees, Verywyder,
Utomola, Ubvisa Vhothe

Query Operation

SELECT

ALL

CREATE
INSERT

DELETE

3.3 Generating SQL Queries

This phase takes information from the normalisation phase to se-
mantically generate a query. The generated query is used against
the Chinook DB, which then produces an output. Since this task is
limited to a single relation, the JFA algorithm was useful for this
purpose. Similarly, the task was quite straightforward.

4

IMPLEMENTATION AND RESULTS

In Section 3, JFA technique was described which showed how a
query is generated. Here, the implementation and results of the local
language narration process are presented. The JFA approach was
implemented using the Microsoft C# .NET framework1, which was
developed into a software tool, called Local-Nar-SQL.

Local-Nar-SQL was created to allow a native learner to specify
a query request in any of the eleven local languages spoken in SA.
The software tool uses the learner’s input to generate a query and
retrieve records from the sample database. Further, the result is
made available to the learner. The sample database used for our
use-case was the ChinookDB2, which contains multiple records. A
sample output of this request is provided in Figure 4.

5 EVALUATION

A total of 145 participants participated in a survey that was con-
ducted online. The majority of the participants are native language
learners who are familiar with programming and have taken nu-
merous computer science courses. The questions for the survey
is available via https://forms.gle/uSXn8TZpBEWmnGk66. The
results are presented in Figure 5.

Of the responses received, 71% indicated familiarity with SQL,
whilst 9% of respondents claimed no familiarity with SQL and 20%
were unsure of their answers (Figure 5(a)). The participants were
asked about their native language proﬁciencies. Approximately 29%
of learners were proﬁcient in Zulu, 16.6% were proﬁcient in North-
ern and Southern Sotho, 15.2% claimed to be proﬁcient in Xhosa
and 13.1% admitted to being proﬁcient in Afrikaans. The remain-
ing respondents were proﬁcient in Venda (10.3%), Swati (9.7%) or
Tsonga (6.9%), and 1.4% of the participants did not list any of these
native languages (Figure 5(b)). Furthermore, the participants were
asked if the Local-Nar-SQL tool provided a correct translation of
local language narrative to SQL: 75.2% aﬃrmed that the tool was

1https://docs.microsoft.com/en-us/dotnet/framework/
2https://github.com/lerocha/chinook-database

www.astesj.com
https://dx.doi.org/10.25046/aj0505144

accurate, 23.4% were unsure and 1.4% indicated no (Figure 5(c)).
When the participants were asked if they think that the tool will
assist native learners work with SQL, about 73.8% aﬃrmed that the
tool would assist learners, 24.8% were unsure and 1.4% indicated
no (Figure 5(d)).

The survey showed that the majority of the learners found the
Local-Nar-SQL tool to be useful and helpful towards their interest
of learning SQL. If our proposed tool is used as a learning aid,
native learners will ﬁnd it easier to work with SQL, which will
eliminate many of the barriers faced with English proﬁciencies in
programming pedagogies.

6 CONCLUSION AND FUTURE WORK

This paper presented an extended version of a JFA for the auto-
matic synthesis of SQL queries from local language narrations. This
automata-based algorithm was further implemented into a software
tool called Local-Nar-SQL, designed for native learners to specify
query request in any of the eleven oﬃcial South African languages
of their choice. Local-Nar-SQL takes these requests, generates a
query and produces an output that is presented to the learner. If
implemented on a large scale, this tool will serve as:

1. a comprehension aid: With Local-Nar-SQL’s textual and
translation approaches, it can improve the cognitive workload
of a native learner towards understanding the SQL concept.

2. a learning aid: The free-form approach oﬀered by the tool
will enable native learners improve and enhance their SQL
query skills.

3. a solution to English language barriers: Native learners
are not required to attain a high English proﬁciency to use
Local-Nar-SQL. Since local languages are widely spoken in
South Africa, it is seen that this tool will stimulate a native
learner’s interests in becoming proﬁcient in SQL.

To this end, our evaluation results showed that the majority of learn-
ers agreed that this tool will be helpful to native learners yearning
to be proﬁcient in SQL. Our evaluation results are consistent with
the works of [39] where majority of the native participants agreed
that the developed tool helped serve their information needs . In the
future, we aim to improve this study to accommodate nested SQL
query and other query operation tasks. Also, it would be interesting
to conduct a performance evaluation on our proposed tool. Such in-
formation would provide us with the accuracy of Local-Nar-SQL.

Conﬂict of Interest The authors declare no conﬂict of interest.

Acknowledgment This work is based on research supported by
the National Research Foundation (NRF) of South Africa (Grant
Number: 119041). Any opinion, ﬁndings and conclusions or recom-
mendations expressed in this material are those of the authors and
therefore the NRF does not accept liability in regard thereto.

5

Figure 4: A sample output of Local-Nar-SQL

References

[1] R. D. Fulk, “English as a Germanic language,” Companion to

the history of the English language, 1–8, 2008.

[2] K. Bech, G. Walkden, “English is (still) a West Germanic lan-
guage,” Nordic Journal of Linguistics, 39(1), 65–100, 2016.

[3] D. Borodenko, “Formation of the English Language,” Science
progress in European countries: New concepts and modern
solutions, 304 – 427, 2019.

[4] F. Ndhlovu, L. Siziba, “English in Southern Africa,” in The
Social and Political History of Southern Africa’s Languages,
65–92, Springer, 2018.

[5] S. Passera, A. Kankaanranta, L. Louhiala-Salminen, “Dia-
grams in contracts: Fostering understanding in global business
communication,” IEEE Transactions on Professional Commu-
nication, 60(2), 118–146, 2017.

[6] O. Inbar-Lourie, “English only? The linguistic choices of
teachers of young EFL learners,” International Journal of Bilin-
gualism, 14(3), 351–367, 2010.

[9] A. G. Soosai Raj, E. Zhang, S. Mukherjee, J. Williams,
R. Halverson, J. M. Patel, “Eﬀect of Native Language on
Student Learning and Classroom Interaction in an Operating
Systems Course,” in Proceedings of the 2019 ACM Conference
on Innovation and Technology in Computer Science Education,
499–505, 2019.

[10] A. Nguyen, P. Rigby, T. Nguyen, D. Palani, M. Karanﬁl,
T. Nguyen, “Statistical translation of English texts to API code
templates,” in 2018 IEEE International Conference on Soft-
ware Maintenance and Evolution (ICSME), 194–205, IEEE,
2018.

[11] A. Barua, S. W. Thomas, A. E. Hassan, “What are develop-
ers talking about? an analysis of topics and trends in Stack
Overﬂow,” Empirical Software Engineering, 19(3), 619–654,
2014.

[12] G. Obaido, A. Ade-Ibijola, H. Vadapalli, “Synthesis of SQL
Queries from Narrations,” in 6th International Conference on
Soft Computing & Machine Intelligence (ISCMI), 195–201,
IEEE, 2019.

[7] P. J. Guo, “Non-native English speakers learning computer
programming: Barriers, desires, and design opportunities,” in
Proceedings of the 2018 CHI conference on human factors in
computing systems, 1–14, 2018.

[13] A. Ade-Ibijola, G. Obaido, “S-NAR: generating narrations of
SQL queries using regular expressions,” in Proceedings of the
South African Institute of Computer Scientists and Informa-
tion Technologists, 1–8, 2017.

[8] K. Reestman, B. Dorn, “Native Language’s Eﬀect on Java
Compiler Errors,” in Proceedings of the 2019 ACM confer-
ence on international computing education research, 249–257,
2019.

[14] G. Obaido, A. Ade-Ibijola, H. Vadapalli, “Generating SQL
queries from Visual Speciﬁcations,” in Annual Conference of
the Southern African Computer Lecturers’ Association, 315–
330, Springer, 2018.

www.astesj.com
https://dx.doi.org/10.25046/aj0505144

6

(a) Familiarity with SQL

(b) Proﬁciency in a local language

(c) A correct translation of a local language narrations

(d) Assist native learners work with SQL

Figure 5: The survey results

[15] G. Obaido, A. Ade-Ibijola and H. Vadapalli, “Generating nar-
rations of nested SQL queries using context-free grammars,” in
2019 Conference on Information Communications Technology
and Society (ICTAS), 1–6, IEEE, 2019.

[22] S. Prabhu, S. Jaidka, “SQL and PL-SQL: Analysing teaching
methods,” in The Proceedings of the Computing and Infor-
mation Technology Research and Education New Zealand
(CITRENZ), 105–109, 2019.

[16] H. Brookes, “Youth Language in South Africa: The Role of
English in South African Tsotsitaals,” English in multilingual
South Africa: The linguistics of contact and change, 176–195,
2020.

[17] S. Coetzee-Van Rooy, “Being English in multilingual South

Africa,” World Englishes, 2020.

[18] F. Banda, “The dilemma of the mother tongue: Prospects for
bilingual education in South Africa,” Language culture and
curriculum, 13(1), 51–66, 2000.

[19] Y. Pal, S. Iyer, “Classroom versus screencast for native lan-
guage learners: Eﬀect of medium of instruction on knowledge
of programming,” in Proceedings of the 2015 ACM conference
on innovation and technology in Computer Science Education,
290–295, 2015.

[20] A. K. Veerasamy, A. Shillabeer, “Teaching English based pro-
gramming courses to English language learners/non-native
speakers of English,” International Proceedings of Economics
Development and Research, 70, 1–6, 2014.

[21] A. Migler, A. Dekhtyar, “Mapping the SQL Learning Process
in Introductory Database Courses,” in Proceedings of the 51st
ACM Technical Symposium on Computer Science Education,
619–625, 2020.

[23] S. Ardeleanu, “SQL: Beauty and the Beast,” in Relational

Database Programming, 17–30, Springer, 2016.

[24] J. Heller, “Use SQL More Often with Basic Dynamic SQL,”

in Pro Oracle SQL Development, 339–353, Springer, 2019.

[25] J. de Beer, N. Petersen, “Decolonisation of the science cur-
riculum: a diﬀerent perspective (# cookbook-labs-must-fall),”
2016.

[26] V. Mudaly, “Decolonising the mind: Mathematics teachers
explore possibilities for indigenising the school curriculum,”
Journal of Education (University of KwaZulu-Natal), 74, 67–
84, 2018.

[27] L. Le Grange, “Decolonising the university curriculum: Lead-
ing article,” South African Journal of Higher Education, 30(2),
1–12, 2016.

[28] M. Llopis, A. Ferr´andez, “How to make a natural language
interface to query databases accessible to everyone: An ex-
ample,” Computer Standards & Interfaces, 35(5), 470–481,
2013.

[29] J. Barzdins, M. Grasmanis, E. Rencis, A. Sostaks, A. Steins-
bekk, “Towards a More Eﬀective Hospital: Helping Health
Professionals to Learn from their Own Practice by Develop-
ing an Easy to use Clinical Processes Querying Language,”
Procedia Computer Science, 100, 498–506, 2016.

www.astesj.com
https://dx.doi.org/10.25046/aj0505144

7

[30] A. Ade-Ibijola, S. Ewert, I. Sanders, “Introducing Code Ad-
viser: A DFA-driven electronic programming tutor,” in Inter-
national Conference on Implementation and Application of
Automata, 307–312, Springer, 2015.

[31] A. O. Ade-Ibijola, Automatic novice program comprehension

for semantic bug detection, Ph.D. thesis, 2016.

[32] M. Konecki, “Problems in programming education and means
of their improvement,” DAAAM international scientiﬁc book,
2014, 459–470, 2014.

[33] A. Ade-Ibijola, S. Ewert, I. Sanders, “Abstracting and narrat-
ing novice programs using regular expressions,” in Proceed-
ings of the Southern African Institute for Computer Scientist
and Information Technologists Annual Conference 2014 on
SAICSIT 2014 Empowered by Technology, 19–28, 2014.

[34] A. G. Soosai Raj, K. Ketsuriyonk, J. M. Patel, R. Halverson,
“Does Native Language Play a Role in Learning a Program-
ming Language?” in Proceedings of the 49th ACM technical
symposium on computer science education, 417–422, 2018.

[35] K. Varadarajan, M. L. Chu, “Declarative programming model
with a native programming language,” 2020, US Patent
10,585,653.

[36] A. Afonso, L. Brito, O. Vale, “An evolutionary method for
natural language to SQL translation,” in Asia-Paciﬁc Confer-
ence on Simulated Evolution and Learning, 432–441, Springer,
2008.

[37] R. Kumar, M. Dua, “Translating controlled natural language
query into SQL query using pattern matching technique,” in In-
ternational Conference for Convergence for Technology, 1–5,
IEEE, 2014.

[38] R. Reddy, N. Reddy, S. Bandyopadhyay, “Dialogue based
question answering system in Telugu,” in Proceedings of the
Workshop on Multilingual Question Answering-MLQA, 1–8,
2006.

[40] X. Meng, S. Wang, “Nchiql: The chinese natural language in-
terface to databases,” in International Conference on Database
and Expert Systems Applications, 145–154, Springer, 2001.

[41] B. Al-Johar, A portable natural language interface from Arabic

to SQL, Ph.D. thesis, University of Sheﬃeld, 1999.

[42] M. Otair, R. Al-Sardi, S. Al-Gialain, “An Arabic retrieval sys-
tem with native language rather than SQL queries,” in 2008
First International Conference on the Applications of Digital
Information and Web Technologies (ICADIWT), 84–89, IEEE,
2008.

[43] H. Bais, M. Machkour, L. Koutti, “An independent-domain
natural language interface for relational database: Case Arabic
language,” in 2016 IEEE/ACS 13th International Conference
of Computer Systems and Applications (AICCSA), 1–7, IEEE,
2016.

[44] N. E. Okwunma, “Automatic comprehension of customer

queries for feedback generation,” 2018, MSc thesis.

[45] S. Obare, A. Ade-Ibijola, G. Okeyo, “Jumping Finite Au-
tomata for Tweet Comprehension,” in 2019 International Mul-
tidisciplinary Information Technology and Engineering Con-
ference (IMITEC), 1–7, IEEE, 2019.

[46] G. Obaido, A. Ade-Ibijola, H. Vadapalli, “TalkSQL: A Tool
for the synthesis of SQL Queries from Verbal Speciﬁcations,”
in International Multidisciplinary Information Technology
and Engineering Conference (IMITEC) Vanderbijlpark, South
Africa, 1–9, 2019.

[47] A. Meduna, P. Zemek, “Jumping ﬁnite automata,” Interna-
tional Journal of Foundations of Computer Science, 23(07),
1555–1578, 2012.

[39] L. Siciliani, P. Basile, G. Semeraro, M. Mennitti, “An Italian
Question Answering System for Structured Data based on
Controlled Natural Languages.” in CLiC-it, 1–6, 2019.

[48] B. Schultheiss, A. Vollebregt, C. Hummelink, “Storing hetero-
geneous helicopter signal data: Advantages of using an XML
database,” in 2007 IEEE Autotestcon, 469–475, IEEE, 2007.

www.astesj.com
https://dx.doi.org/10.25046/aj0505144

8

