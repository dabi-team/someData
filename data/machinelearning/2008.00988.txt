1
2
0
2

n
u
J

8
2

]

C
O
.
h
t
a
m

[

3
v
8
8
9
0
0
.
8
0
0
2
:
v
i
X
r
a

An Exact Cutting Plane Method for k-submodular Function Maximization

Qimeng Yu

Simge Küçükyavuz

Department of Industrial Engineering and Management Sciences

Northwestern University, Evanston, IL, USA

{kim.yu@u.northwestern.edu, simge@northwestern.edu}

June 29, 2021

Abstract

A natural and important generalization of submodularity—k-submodularity—applies to set
functions with k arguments and appears in a broad range of applications, such as infrastruc-
ture design, machine learning, and healthcare. In this paper, we study maximization prob-
lems with k-submodular objective functions. We propose valid linear inequalities, namely
the k-submodular inequalities, for the hypograph of any k-submodular function. This class
of inequalities serves as a novel generalization of the well-known submodular inequalities.
We show that maximizing a k-submodular function is equivalent to solving a mixed-integer
linear program with exponentially many k-submodular inequalities. Using this represen-
tation in a delayed constraint generation framework, we design the ﬁrst exact algorithm,
that is not a complete enumeration method, to solve general k-submodular maximization
problems. Our computational experiments on the multi-type sensor placement problems
demonstrate the eﬃciency of our algorithm in constrained nonlinear k-submodular maxi-
mization problems for which no alternative compact mixed-integer linear formulations are
available. The computational experiments show that our algorithm signiﬁcantly outper-
forms the only available exact solution method—exhaustive search. Problems that would
require over 13 years to solve by exhaustive search can be solved within ten minutes using
our method.

Keywords – k-submodular maximization; cutting plane; multi-type sensor placement

1

Introduction

Submodularity is an important concept in integer and combinatorial optimization. Several functions of
great theoretical interest in combinatorial optimization are submodular, such as the set covering function
and the graph cut function. Submodularity also arises in numerous practical applications, including the
inﬂuence maximization problem [21], the sensor placement problem [23], and the hub location prob-
lem [10]. Submodularity is shown to be the discrete analogue of convexity [25], and the unconstrained
submodular minimization problem is polynomially solvable [18, 24, 32, 39]. However, submodular mini-
mization with simple constraints, such as cardinality constraints, is generally NP-hard [43]. Submodular
maximization is known to be NP-hard even in the unconstrained case. Nemhauser et al. [28] prove that
the greedy method for maximizing a monotone submodular function subject to a cardinality constraint
is a (1 − 1/e)-approximation algorithm.

In addition to the approximation algorithms, polyhedral approaches have been popular in submodular
optimization research. Edmonds [11] gives linear inequalities which fully describe the convex hull of the

1

 
 
 
 
 
 
epigraph for a submodular function (see also [12]). These inequalities are referred to as extended polyma-
troid inequalities, as they are closely related to a structure called extended polymatroid. Atamtürk and
Narayanan [6] establish a polarity result analogous to the relationship between extended polymatroids
and extended polymatroid inequalities for non-submodular functions. With this observation, Atamtürk
and Narayanan [7] present an alternative proof for the convex hull description of the epigraphs for sub-
modular functions. Nemhauser and Wolsey [30] give an exact method for submodular maximization
from a polyhedral perspective. They show that maximizing any submodular function is equivalent to
solving a mixed-integer linear program with exponentially many linear inequalities, referred to as the
submodular inequalities. Atamtürk and Narayanan [7] provide valid inequalities for general set functions
by exploiting their submodular-supermodular decomposition. Moreover, the polyhedral approach has
received renewed interest, both in terms of strengthening extended polymatroid inequalities [52, 54] and
submodular inequalities [2, 41, 51], as well as extending their use to stochastic settings [47, 48, 49, 50, 56].
In addition, submodular properties in mixed-binary convex quadratic and conic optimization problems
are discovered and exploited in [4, 5, 6, 15, 22].

Submodularity can be generalized to functions with k set arguments for any positive integer k, resulting
in the concept called k-submodularity. This term is introduced by Huber and Kolmogorov [17], and it en-
compasses submodularity and bisubmodularity [9, 35] as special cases when k = 1 and k = 2, respectively.
Researchers have studied k-submodular minimization, where k ≥ 2, using various approaches. Qi [35]
proves an analogue of Lovász extension for bisubmodular functions, implying that this class of functions
can be minimized in polynomial time using the ellipsoid method. Subsequently, weakly and strongly
polynomial-time algorithms are proposed for unconstrained bisubmodular minimization [13, 27]. Yu and
Küçükyavuz [53] take a polyhedral approach and present a complete linear convex hull description for the
epigraph of any bisubmodular function. Based on this polyhedral characterization, the authors propose
an eﬀective cutting plane algorithm to solve constrained bisubmodular minimization. Huber and Kol-
mogorov [17] generalizes the Min-Max Theorem for submodular and bisubmodular minimization to the
k-submodular case with k ≥ 3. Whether k-submodular functions can be minimized in polynomial-time
when k ≥ 3 is still an open problem.

The k-submodular maximization problem—a generalization of the NP-hard submodular maximization
problem—is also NP-hard. Extensive research has been devoted to developing approximation algorithms
and proving their guarantees. For example, Singh et al. [42] give a constant-factor approximation al-
gorithm for a class of bisubmodular functions. The authors refer to bisubmodularity that we consider
in this paper as directed bisubmodularity. They show that a bisubmodular function can be embedded
into a submodular function over an extended ground set, a set containing two copies of each element
in the original ground set. For each subset of the extended ground set that contains both copies of
an element, the submodular function value can be recursively obtained by solving discrete optimization
problems with exponentially sized decision spaces. Such construction is computationally expensive but
theoretically interesting. Iwata et al. [19], Ward and Živný [45] independently show that a randomized
greedy algorithm attains the approximation guarantee of 1/2 for unconstrained bisubmodular maxi-
mization (see also [46]). For k-submodular maximization with k ≥ 3, Ward and Živný [46] achieve a
(k − 1)/4). Iwata et al. [20] improve this result
max(1/3, 1/(1 + a))-approximation, where a = max(1,
to a factor of 1/2 and show that there is a (k/(2k − 1))-approximation algorithm for unconstrained
monotone k-submodular maximization. The authors further prove that their algorithms are asymptot-
ically tight. In terms of constrained k-submodular maximization, researchers predominantly focus on
non-negative monotone k-submodular functions. For example, Ohsaka and Yoshida [31] propose greedy
algorithms for maximizing non-negative monotone k-submodular functions subject to a total cardinal-
ity constraint on all selected items, and to individual cardinality constraints on each of the k subsets.

p

2

Their algorithm achieves a 1/2 approximation ratio under a total cardinality constraint, and this ratio
is asymptotically tight. For the latter, the proposed algorithm achieves 1/3-approximation. Sakaue [38]
studies maximization of non-negative monotone k-submodular functions under matroid constraints. The
proposed greedy algorithm yields a 1/2-approximate solution.

To the best of our knowledge, there is no algorithm for maximizing possibly non-monotone k-submodular
functions under general constraints. There has also been a paucity of research on exact solution methods
for k-submodular maximization, both constrained and unconstrained. Therefore, we are interested in
developing a versatile exact solution method. Practically, in situations where we have limited comput-
ing resources and an approximate solution suﬃces, approximation algorithms are extremely valuable.
On the other hand, for problems such as high capital investments and strategic decision-making, where
optimality is important and more computing resources are available, it is desirable to apply an exact
method that solves the problem within a reasonable amount of time. Given the formidable computational
burden of exhaustive search, there are no known eﬃcient exact methods for constrained k-submodular
maximization. To bridge this gap, our paper takes a polyhedral approach and proposes the ﬁrst compu-
tationally attractive exact solution method that handles non-monotone k-submodular functions, as well
as arbitrary linear constraints.

Before we summarize our results, we provide a few examples from a wide range of applications of k-
submodular maximization.

1.1 Multi-type sensor placement

Sensor networks—enabled by internet of things (IoT) technology—provide real-time monitoring and con-
trol of systems to operate smart cities [55], smart homes [14], and smart grids [1]. These applications
often call for multiple types of sensors in the network. For example, in smart water distribution net-
works, multiple types of sensors are placed to measure diﬀerent aspects of water quality in real time [34].
Suppose we have k types of sensors and a set N of n locations to place them. If at most one sensor is
allowed in each location, then every k-tuple of pairwise disjoint subsets of N corresponds to a multi-type
sensor placement plan. The eﬀectiveness of a sensor deployment plan can usually be evaluated using
k-submodular functions such as the entropy function. Thus a multi-type sensor placement problem can
be expressed in terms of constrained k-submodular maximization.

We provide more details of coupled sensor placement, in which we have two types of sensors for diﬀerent
measurements, such as temperature and humidity. Here, k = 2 is an arbitrary choice for illustration
purposes. The description below can be generalized to the cases with k ≥ 3. Every biset (S1, S2) ∈ 3N
corresponds to a coupled sensor placement plan, in which the type-1 sensors are placed at the locations
in S1 and the type-2 sensors are placed at S2. Due to a limited budget, we can place at most B1 type-1
and B2 type-2 sensors. We evaluate each sensor deployment plan using entropy, which measures how
much uncertainty in the environment the sensors can capture [31]. The entropy of a discrete random
variable X with support X is computed by

H(X) = −

P(X = x) log P(X = x).

Xx∈X

The entropy of X is high if multiple outcomes occur with similar probabilities, making it diﬃcult for
us to predict what we may observe. For instance, it is harder for us to guess the outcome of throwing
a fair dice correctly than that of a biased dice, so the entropy in the case of a fair dice is higher than
the latter. In the context of coupled sensor placement, a discrete random variable XS1,S2 captures the
possible observations reported by sensors installed at (S1, S2) ∈ 3N , and the set XS1,S2 contains all

3

possible observations. The entropy of XS1,S2 is

H(XS1,S2) = −

P(XS1,S2 = x) log P(XS1,S2 = x).

Xx∈XS1,S2

In an ideal coupled sensor placement plan, sensors are installed at locations where the corresponding ob-
servations are the most unpredictable. In other words, a placement (S∗
2 )
1 ,S∗
is maximal among all feasible (S1, S2) ∈ 3N .

2 ) is the best when H(XS∗

1 , S∗

As mentioned earlier, the description above holds for k ≥ 2 types of sensors. The function f : (k + 1)N →
R, deﬁned by f (S1, . . . , Sk) = H(XS1,...,Sk ) for all (S1, . . . , Sk) ∈ (k+1)N , is monotone and k-submodular
[31]. Thus the multi-type sensor placement problem is a cardinality-constrained k-submodular maximiza-
tion problem with objective function f .

1.2 Multi-topic inﬂuence maximization

Social networks have allowed information to be spread faster than ever. In applications such as viral
marketing, we may ﬁnd a class of k-submodular maximization problems in which we aim to maximize
the spread of information on k topics over a social network. Suppose one would like to promote k-
types of products. He or she may select inﬂuential network users to share their experiences of the
products with their followers. As these followers share again with their own followers, messages about
the products gradually diﬀuse across the network and reach a possibly large population. Kempe et al.
[21] propose a diﬀusion model called independent cascade to describe the diﬀusion mechanism of a single
type of inﬂuence. The authors also show that the expected total number of reached network users is a
submodular function of the initial source of the spread. Ohsaka and Yoshida [31] generalize this model to
allow k ≥ 2 types of inﬂuence. In their model, a social network is represented by a digraph G = (N, A),
in which N = {1, 2, . . . , n} is the set of network users, and the arcs A capture how the users interact
with each other. Every arc (i, j) ∈ A is associated with probabilities pq
(i,j) for every q ∈ {1, 2, . . . , k}.
Each probability pq
(i,j) is the likelihood of j accepting i’s information on the q-th topic. Once j adopts
a new piece of information, this user is ready to inﬂuence his or her own neighbors. Let Sq ⊆ N be the
group of inﬂuencers responsible for promoting the q-th type of products and Aq(Sq) be the individuals
inﬂuenced by the initial spreaders Sq about product q under the stochastic model described above. Each
inﬂuencer is restricted to accepting at most one type of sponsored product for fairness. Thus the initial
inﬂuencers form a k-tuple of pairwise disjoint subsets of N . The function f : (k + 1)N → R deﬁned by
k
f (S1, . . . , Sk) = E|
q=1 Aq(Sq)| computes the expected total number of inﬂuenced individuals given k
sets of initial inﬂuencers. This function is shown to be monotone and k-submodular [31].

S

1.3 Multi-class feature selection

Feature selection plays a key role in multiple ﬁelds of research including machine learning [40], bioinfor-
matics [37], and data mining [36]. This process improves the analysis of large datasets by reducing the
dimensionality of data. In the resulting multi-class feature selection problems, there are k uncorrelated
prediction variables, with their associated features mixed in a pool. The task is not only to ﬁnd the most
informative features, but also to classify the features with respect to the prediction variables, giving rise
to a k-submodular optimization problem.

With two prediction variables, such problem is referred to as coupled feature selection in [42]. More
formally, suppose that a Gaussian graphical model and a set of features N are given. Let C1, C2 be two
variables to be predicted. The goal is to partition the features in N into two sets S1 and S2, such that S1
is used to predict C1, and S2 is used to predict C2. It is assumed that S1, S2 are mutually conditionally
independent given C = {C1, C2}. The total number of selected features, |S1| + |S2|, is no more than a

4

given number k. Next, we describe the score function that evaluates the mutual information obtained by
a coupled feature selection. Suppose X and Y are discrete random variables, and X , Y are the respective
supports. Then the conditional entropy of X given Y is

H(X|Y ) = −

P(X = x, Y = y) log

Xx∈X ,y∈Y

P(X = x, Y = y)
P(Y = y)

.

The biset mutual information is computed by

I(S1, S2; C) = H(S1 ∪ S2) −

H(i | C1) −

H(j | C2),

Xi∈S1
where H is the entropy function discussed in Section 1.1 and the conditional entropy is deﬁned above.
Intuitively, the features with higher mutual information are more informative about both prediction
tasks. Let f (S1, S2) = I(S1, S2; C). The function f is monotone and bisubmodular [42], and the best
features can be found by maximizing f .

Xj∈S2

1.4 Drug-drug interaction detection

Drug-drug interactions (DDIs) detection is an important application in the healthcare domain which ex-
ploits bisubmodularity. DDIs are the reactions resulting from using multiple drugs concomitantly. DDIs
are a major cause of morbidity and mortality [26]—adverse drug events cause 770,000 injuries and deaths
every year, and as much as 30% of these adverse drug events are due to DDIs [33, 44]. Hu et al. [16]
show that the correlations among the combinations of drugs and associated symptoms can be captured
by a bisubmodular function, and the potential DDIs are determined by maximizing this function.

The aforementioned applications are solved using approximation algorithms due to the lack of exact
solution methods.

1.5 Our contributions

Despite the developments in approximation algorithms for unconstrained and a few classes of constrained
k-submodular maximization, there is no known exact method other than exhaustive search for general
k-submodular maximization. To bridge this gap, we propose the ﬁrst polyhedral approach to study
k-submodular function maximization and provide an exact algorithm to maximize any k-submodular
function subject to general constraints. We propose a new class of valid linear inequalities called k-
submodular inequalities. These inequalities are non-trivial extensions of the submodular inequalities
introduced by Nemhauser and Wolsey [30], in that the proposed k-submodular inequalities account for
the interchanges of elements among the k subsets. With these valid inequalities, we develop an exact
cutting-plane algorithm for constrained k-submodular maximization problems, which does not require
the k-submodular objective function to satisfy any restrictive assumptions, such as monotonicity and
non-negativity, nor does it restrict the structure of the constraints. We demonstrate the eﬀectiveness
of our algorithm by experimenting on the multi-type sensor placement problem, which has a highly
nonlinear k-submodular objective function. The computational experiments show that our algorithm
signiﬁcantly outperforms the exhaustive search method.

1.6 Outline

The outline of this paper is as follows. In Section 2, we provide formal deﬁnitions of k-submodularity
and review its known properties. In Section 3, we state and prove additional properties of k-submodular
functions that have not been studied in the literature. These properties are used to establish our main
results. Next, in Section 4, we propose a class of valid linear inequalities which we call the k-submodular

5

inequalities for the hypograph of any k-submodular function. In particular, we show that maximizing a
k-submodular function is equivalent to solving a mixed-integer linear program with exponentially many
In Section 5, we give a cutting plane algorithm to solve the constrained
k-submodular inequalities.
maximization problems with k-submodular objective functions. We demonstrate the eﬃciency of our
proposed algorithm and compare it against the exhaustive search method on the multi-type sensor
placement problem in Section 6. Lastly, we conclude with a few remarks in Section 7.

2 Preliminaries

Let N = {1, 2, . . . , n} be a non-empty ﬁnite set. For any integer k ≥ 1, we let

(k + 1)N = {(S1, S2, . . . , Sk) : Sq ⊆ N, Sq ∩ Sq′ = ∅, for all q, q′ ∈ {1, 2, . . . , k} with q 6= q′}

be the collection of all k-sets, which are k-tuples of pairwise disjoint subsets of N . For brevity, we
denote any (S1, S2, . . . , Sk) ∈ (k + 1)N by S. We call S ∈ (k + 1)N a partition, or an orthant, of N , if

k
q=1 Sq = N .

S
Deﬁnition 2.1. For any integer k ≥ 1, a function f : (k + 1)N → R is k-submodular if for any
X = (X1, X2, . . . , Xk), Y = (Y1, Y2, . . . , Yk) ∈ (k + 1)N ,

where

and

f (X) + f (Y) ≥ f (X ⊓ Y) + f (X ⊔ Y),

X ⊓ Y = (X1 ∩ Y1, X2 ∩ Y2, . . . , Xk ∩ Yk),

X ⊔ Y =

(X1 ∪ Y1)\

(Xq ∪ Yq), . . . , (Xk ∪ Yk)\

k

q=2
[

k−1

(Xq ∪ Yq)

!

.

q=1
[

In particular, the functions satisfying Deﬁnition 2.1 when k = 1 are called submodular functions, and
when k = 2 such functions are referred to as bisubmodular functions. In the following discussion, we
q′∈{1,...,k}\{q} Xq′ and
assume k ≥ 2 unless speciﬁed otherwise. For any q ∈ {1, 2, . . . , k}, i ∈ N \
X ∈ (k + 1)N , we deﬁne

S

ρq,i(X) = f (X1, . . . , Xq ∪ {i}, . . . , Xk) − f (X).

Intuitively, ρq,i(X) represents the marginal contribution of adding i ∈ N to the q-th subset of X.
Ando et al. [3] provide an alternative deﬁnition of bisubmodularity that involves the notion of marginal
contribution. Ward and Živný [46] generalize this result to k-submodularity. Before explaining this
equivalent deﬁnition of k-submodular functions, we ﬁrst establish a new term.

Deﬁnition 2.2. A function f : (k + 1)N → R is submodular over a partition S = (S1, S2, . . . , Sk) if the
function

ˆfS(X) := f (X ∩ S1, X ∩ S2, . . . , X ∩ Sk)

(1)

is submodular over X ⊆ N .

Lemma 2.3. [46] For an integer k ≥ 2, a function f : (k + 1)N → R is k-submodular if and only if

(C1) the function f is submodular over every partition of N , and

(C2) given any X ∈ (k + 1)N and any i ∈ N \

k
p=1 Xp, ρq,i(X) + ρq′,i(X) ≥ 0 for every pair of

q, q′ ∈ {1, 2, . . . , k} such that q 6= q′.

S

6

 
Although Ward and Živný [46] assume the k-set functions to be non-negative, shifting such functions
by a constant does not aﬀect their k-submodularity. The next corollary immediately follows from con-
dition (C1). It captures the diminishing marginal return property of k-submodular functions over every
partition.

Corollary 2.4. If f is a k-submodular function, then for any X, Y ∈ (k + 1)N that satisfy Xp ⊆ Yp for
all p ∈ {1, . . . , k}, ρq,i(X) ≥ ρq,i(Y) for all i ∈ N \

k
p=1 Yp and q ∈ {1, . . . , k}.

S
Deﬁnition 2.5. A k-submodular function f over a ground set N is monotone non-decreasing if for any
X, Y ∈ (k + 1)N such that Xq ⊆ Yq for all q ∈ {1, . . . , k}, the property f (Y) ≥ f (X) holds.

Equivalently, f is monotone non-decreasing if for any X ∈ (k + 1)N and i ∈ N \
for all q ∈ {1, . . . , k}. We call a monotone non-decreasing function simply a monotone function.

k
p=1 Xp, ρq,i(X) ≥ 0

S

Without loss of generality, we assume that f (∅) = 0 where ∅ is the k-set (∅, . . . , ∅). By slightly abusing
q ∈ {0, 1}n = Bn for every q ∈ {1, . . . , k}.
notation, we let f (X) = f (x), where x = [x1, . . . , xk]
To be more precise, xq
i = 0 otherwise for i ∈ N and q ∈ {1, . . . , k}. This is a unique
one-to-one mapping between (k + 1)N and {x ∈ Bkn :
i ≤ 1 for all i ∈ N }. The hypograph of f
is

i = 1 if i ∈ Xq, and xq

q=1 xq

and x⊤

⊤

k

P
(x, η) ∈ Bkn × R : η ≤ f (x),

k

Tf =

(

xq
i ≤ 1 for all i ∈ N

.

)

q=1
X

In this study, we consider maximization problems with k-submodular objective functions, namely

max
X∈X

f (X),

(2)

where f is k-submodular and X ⊆ (k + 1)N denotes the collection of feasible k-sets. When the problem
is unconstrained, X is (k + 1)N . Let K be the set of incidence vectors x that correspond to the feasible
k-sets in X . Problem (2) can be rewritten as

max{η : (x, η) ∈ Tf , x ∈ K}.

(3)

In Section 4, we propose a set of valid linear inequalities for Tf . By using these inequalities in a cutting
plane framework, we propose the ﬁrst computationally feasible exact method to solve problem (3) in
Section 5. Before we do so, we ﬁrst identify additional properties of k-submodular functions in the next
section.

3 New Properties of k-submodular Functions

In this section, we establish a few properties of k-submodular functions that are not previously discussed
in the literature to the best of our knowledge. These properties are useful for deriving valid linear
inequalities for Tf in Section 4.

Lemma 3.1. Given a ground set N = {1, 2, . . . , n}, a function f : (k + 1)N → R is k-submodular and
monotone if and only if

ˆfS(Y ) ≤ ˆfS(X) +

[ ˆfS(X ∪ {i}) − ˆfS(X)]

(4)

for any X, Y ⊆ N over any partition S of N .

Xi∈Y \X

Proof. Nemhauser and Wolsey [30] show that a set function g : 2N → R is submodular and monotone if
and only if

g(T ) ≤ g(S) +

[g(S ∪ {j}) − g(S)] for any S, T ⊆ N.

Xj∈T \S

7

Suppose f is k-submodular and monotone. Given any partition S, ˆfS is submodular by (C1). For any
P ⊆ Q ⊆ N , we construct P, Q such that Pq = P ∩ Sq and Qq = Q ∩ Sq for all q ∈ {1, . . . , k}. Since
Pq ⊆ Qq for all q and f is monotone, ˆfS(P ) = f (P) ≤ f (Q) = ˆfS(Q), which implies that ˆfS is monotone.
Thus property (4) holds. Conversely, suppose (4) is true. Then ˆfS is submodular and monotone over any
k
partition S of N , and (C1) immediately follows. Let any X ∈ (k + 1)N and i ∈ N \
p=1 Xp be given.
For any q ∈ {1, . . . , k}, we construct a partition Sq such that Sq
p = Xp for all p ∈ {1, . . . , k}\{q}, and
Sq
p∈{1,...,k}\{q} Xp. We note that X and (X1, . . . , Xq ∪ {i}, . . . , Xk) are both in the partition Sq.
q = N \
Now ρq,i(X) = ˆfSq (X ∪ {i}) − ˆfSq (X) ≥ 0. It follows that ρq,i(X) + ρq′,i(X) ≥ 0 for any q, q′ ∈ {1, . . . , k}
with q 6= q′. Therefore, f is monotone and (C2) holds. We conclude that f is k-submodular and
monotone.

S

S

Given a non-monotone submodular function g deﬁned over a ground set N , Nemhauser and Wolsey [30]
show that g∗(S) := g(S)−
i∈S(f (N )− f (N \{i})) is monotone and submodular. Lemma 3.2 generalizes
this result to non-monotone k-submodular functions.
P

Lemma 3.2. Let f : (k + 1)N → R be a k-submodular function. For every i ∈ N and q ∈ {1, . . . , k}, we
deﬁne

ξq
i = min

(

ρq,i(S) : S ∈ (k + 1)N \{i},

k

p=1
[

Sp = N \{i}

.

)

The function

f ∗(X) := f (X) −

k

ξq
i

q=1
X

Xi∈Xq

is k-submodular and monotone.

Proof. By Lemma 3.1, it suﬃces to show that ˆf ∗
T is submodular and monotone for any partition T.
Consider any X, Y ⊆ N and any partition T of N . Let X and Y be the corresponding k-sets over this
partition. In other words, Xq = X ∩ Tq and Yq = Y ∩ Tq for all q ∈ {1, . . . , k}. Then

[ ˆf ∗

T(X ∪ {i}) − ˆf ∗

T(X)]

ˆf ∗
T(X) +

Xi∈Y \X
k

= f ∗(X) +

[f ∗(X1, . . . , Xq ∪ {i}, . . . , Xk) − f ∗(X)]

Xi∈Yq\Xq

q=1
X
k

k

ξq
i +

= f (X) −

Xi∈Xq

q=1
X
k

q=1
X

Xi∈Yq \Xq
k

ρq,i(X) −

= f (X) +

[ρq,i(X) − ξq
i ]

ξq
i

q=1
X

Xi∈Yq\Xq

≥ f (X1 ∪ Y1, . . . , Xk ∪ Yk) −

q=1
X

Xi∈Xq ∪Yq

k

ξq
i

q=1
X

Xi∈Xq∪Yq

≥ f (Y) +

≥ f (Y) +

k

q=1
X
k

q=1
X
k

ρq,i(T1, . . . , Tq\{i}, . . . , Tk) −

Xi∈Xq \Yq

k

ξq
i −

ξq
i

Xi∈Xq \Yq

q=1
X

Xi∈Xq∪Yq

= f (Y) −

ξq
i

q=1
X

Xi∈Yq

8

k

ξq
i

q=1
X

Xi∈Xq∪Yq

(5a)

(5b)

(5c)

(5d)

(5e)

(5f)

(5g)

(5h)

= f ∗(Y) = ˆf ∗

T(Y ).

(5i)

Equations (5b)-(5d) rewrite f ∗ in terms of f . Inequality (5e) is a consequence of Corollary 2.4 as we show
next. For every q ∈ {1, . . . , k}, we ﬁx an ordering of the elements in Yq\Xq to be (αq(1), αq(2), . . . , αq(|Yq\Xq|)).
Then

f (X1 ∪ Y1, . . . , Xk ∪ Yk)

= f (X) +

k

|Yq\Xq |

q=1
X
k

j=1
X
|Yq\Xq |

ρq,αq (j)(X1 ∪ Y1, . . . , Xq ∪ {αq(r)}j−1

r=1, Xq+1, . . . , Xk)

≤ f (X) +

ρq,αq (j)(X)

q=1
X
k

j=1
X

= f (X) +

ρq,i(X).

q=1
X

Xi∈Yq\Xq

Similarly, inequality (5f) holds because

ρq,i(X1 ∪ Y1, . . . , Xq ∪ Yq\{i}, . . . , Xk ∪ Yk) ≥ ρq,i(T1, . . . , Tq\{i}, . . . , Tk)

for any i ∈ Xq ∪ Yq ⊆ Tq where q ∈ {1, . . . , k}. Inequality (5g) follows from the deﬁnitions of ξ1
Equations (5i) follow from the deﬁnitions of f ∗ and ˆf ∗.

i and ξ2
i .

Lemma 3.3. Let f be a monotone k-submodular function. Given any X, S ∈ (k + 1)N ,

f (X) ≤ f (S) +

k

k

ρq,i(S) +

ρq,i(∅).

q=1
X

Xi∈Xq \ Sk

r=1 Sr

q=1
X

Xp∈{1,...,k}\{q} Xi∈Xq ∩Sp

Proof. Let

k

k

Xq =

Lq

p ∪ Jq, Sp =

Lq

p ∪ Kp

where Jq, Kp, Lq
Jq = Xq\

p are pairwise disjoint subsets of N for all p, q ∈ {1, . . . , k}. Observe that Lq
k
r=1 Xr, for all p and q. Furthermore,

k
r=1 Sr, and Kp = Sp\

p = Xq ∩ Sp,

p=1
[

q=1
[

S

f (S) +

k

S

k

ρq,i(S) +

ρq,i(∅)

(6a)

q=1
X

Xi∈Xq \ Sk

r=1 Sr

k

Lq

1 ∪ K1, . . . ,

Lq

k ∪ Kk

q=1
[

k

q=1
X

Xp∈{1,...,k}\{q} Xi∈Xq∩Sp
k
k

k

+

!

q=1
X

Xi∈Jq

ρq,i(S) +

q=1
X

Xp=1,p6=q Xi∈Lq

p

ρq,i(∅)

(6b)

Lq

1 ∪ K1 ∪ J1, . . . ,

Lq

k ∪ Kk ∪ Jk

q=1
[

k

+ f

L1

p, . . . ,

p=2
[

k−1

!

k

k−1

p=1
[

Lk
p

!

= f

≥ f

≥ f

≥ f

k

q=1
[
k

q=1
[

(cid:0)

k

p=1
[
k

L1

1 ∪ K1 ∪ J1, . . . , Lk

k ∪ Kk ∪ Jk

+ f

L1

p, . . . ,

(cid:1)

p=2
[

Lk
p

!

p=1
[

k

L1

p ∪ K1 ∪ J1, . . . ,

Lk

p ∪ Kk ∪ Jk

p=1
[

k

!

≥ f

p=1
[
= f (X).

L1

p ∪ J1, . . . ,

Lk

p ∪ Jk

p=1
[

!

(6c)

(6d)

(6e)

(6f)

(6g)

Inequality (6c) follows from Corollary 2.4. Inequalities (6d) and (6f) are due to the monotonicity of f ,
and inequality (6e) holds because f is k-submodular.

9

 
 
 
 
 
 
Lemma 3.3 applies to all monotone k-submodular functions. By using the relationship between any
general k-submodular function f and its monotone counterpart f ∗ as stated in Lemma 3.2, we obtain
the following result.

Corollary 3.4. Let f be a k-submodular function. Given any X, S ∈ (k + 1)N ,

f (X) ≤ f (S) +

k

k

ρq,i(S) +

k

ρq,i(∅) −

ξq
i .

q=1
X

Xi∈Xq\ Sk

r=1 Sr

q=1
X

Xp∈{1,...,k}\{q} Xi∈Xq ∩Sp

q=1
X

Xi∈Sq\Xq

With these properties of k-submodular functions, we propose valid linear inequalities for the hypograph
of any k-submodular function in the next section.

4 k-submodular Inequalities

Let f be a k-submodular function deﬁned over N . Recall that Tf is the epigraph of f . In this section,
we propose two classes of valid linear inequalities for Tf depending on whether f is monotone. We refer
to these inequalities as the k-submodular inequalities.

Proposition 4.1. Let f be a monotone k-submodular function. For a given S ∈ (k + 1)N , the inequality

k

η ≤ f (S) +

k

ρq,i(S)xq

i +

ρq,i(∅)xq
i

(7)

q=1
X

Xi /∈Sk

r=1 Sr

q=1
X

Xp∈{1,...,k}\{q} Xi∈Sp

is valid for Tf .

Proof. Consider any (x, η) ∈ Tf . Recall that x = [x1, . . . , xk]
represented by x. For any S ∈ (k + 1)N ,

⊤

∈ Bkn. Let X ∈ (k + 1)N be the k-set

η ≤f (X)

≤f (S) +

k

q=1
X
k

Xi∈Xq \ Sk

r=1 Sr

ρq,i(S) +

k

q=1
X
k

ρq,i(∅)

Xp∈{1,...,k}\{q} Xi∈Xq∩Sp

=f (S) +

ρq,i(S)xq

i +

ρq,i(∅)xq
i

q=1
X

Xi /∈Sk

r=1 Sr

q=1
X

Xp∈{1,...,k}\{q} Xi∈Sp

(8a)

(8b)

(8c)

Inequality (8a) follows from the deﬁnition of Tf . Inequality (8b) holds by Lemma 3.3. Equation (8c) uses
the characteristic vector x to equivalently state the set relations. To see this, for every q ∈ {1, . . . , k}
and i ∈ N , xq

i = 1 exactly when i ∈ Xq.

Proposition 4.2. Let f be any k-submodular function. For a given S ∈ (k + 1)N , the inequality

k

η ≤ f (S) +

k

ρq,i(S)xq

i +

k

ρq,i(∅)xq

i −

ξq
i (1 − xq
i )

(9)

q=1
X

Xi /∈Sk

r=1 Sr

q=1
X

Xp∈{1,...,k}\{q} Xi∈Sp

q=1
X

Xi∈Sq

is valid for Tf .

Proof. Consider any (x, η) ∈ Tf . Let X ∈ (k + 1)N be the k-set represented by x. For any S ∈ (k + 1)N ,

η ≤f (X)

k

≤f (S) +

k

ρq,i(S) +

k

ρq,i(∅) −

ξq
i

(10a)

(10b)

q=1
X

Xi∈Xq\ Sk

r=1 Sr

q=1
X

Xp∈{1,...,k}\{q} Xi∈Xq ∩Sp

q=1
X

Xi∈Sq\Xq

10

k

=f (S) +

k

ρq,i(S)xq

i +

k

ρq,i(∅)xq

i −

i (1 − xq
ξq
i )

(10c)

q=1
X

Xi /∈Sk

r=1 Sr

q=1
X

Xp∈{1,...,k}\{q} Xi∈Sp

q=1
X

Xi∈Sq

Inequality (10a) holds due to the deﬁnition of Tf , and (10b) follows from Corollary 3.4. Lastly, for every
q ∈ {1, . . . , k} and i ∈ N , xq
i = 0, exactly when i ∈ Xq. This justiﬁes equation
(10c).

i = 1 or equivalently 1 − xq

We call inequalities (7) and (9) k-submodular inequalities associated with S ∈ (k + 1)N . Intuitively,
the ﬁrst summation term on the right-hand side of a k-submodular inequality represents the marginal
contribution made by appending additional elements to Sq, q ∈ {1, . . . , k}. The second nested summation
term gives the upper bounds for the change in functional value when some elements in Sq are switched
to Sq′ for any q′ 6= q. When k = 2, we call the proposed inequalities bisubmodular inequalities. In the
next remark, we show that our proposed inequalities subsume the submodular inequalities.

Remark 4.3. Notice that the submodular inequalities proposed by Nemhauser and Wolsey [29] is a special
case of the k-submodular inequalities when k = 1. Let g : 2N → R be a submodular function deﬁned on
N . We denote the hypograph of g by

{(y, ηg) ∈ Bn × R | ηg ≤ g(y)}.

For any j ∈ N and S ⊆ N , we let γj = g(N ) − g(N \{j}) and ρj(S) = g(S ∪ {j}) − g(S). The submodular
inequality associated with S is

ηg ≤ g(S) +

ρi(S)yi −

γj(1 − yj),

Xi /∈S

Xj∈S

which is exactly inequality (9) when k = 1. In this submodular inequality, the ﬁrst summation accounts for
marginal returns from appending items to S, and the second summation estimates the change in function
g if items are removed from S. The natural extension of a submodular inequality to the k-submodular
setting is an inequality that accounts for the change in function value by adding an unselected item to,
or removing an item from each of the k subsets. However, the resulting inequalities are usually invalid
because the function value also changes by switching a selected item from one subset to another. The
k-submodular inequalities account for this complication.

Now let us consider the polyhedron

Pf = {(x, η) ∈ Rkn+1 : η ≤ f (S) +

k

q=1
X
k

Xi /∈Sk

r=1 Sr

k

ρq,i(S)xq

i +

ρq,i(∅)xq
i

q=1
X

Xp∈{1,...,k}\{q} Xi∈Sp
k

−

i (1 − xq
ξq

i ), ∀S ∈ (k + 1)N ,

xq
i ≤ 1, ∀i ∈ N }.

q=1
X

Xi∈Sq

q=1
X

Theorem 4.4. Given any k-submodular (not necessarily monotone) function f and any (x, η) ∈ Bkn ×R,
we have (x, η) ∈ Pf if and only if η ≤ f (X), where X is the k-set represented by x.

Proof. Suppose (x, η) ∈ Pf . Due to the second set of constraints in Pf and the fact that x ∈ Bkn, xq
exactly when i ∈ Xq for any i ∈ N and q ∈ {1, . . . , k}. In addition, xp
Therefore,

i = 1
i = 0 for all p ∈ {1, . . . , k}\{q}.

k

η ≤ f (X) +

k

ρq,i(X) · 0 +

k

ρq,i(∅) · 0 −

ξq
i (1 − 1)

q=1
X

Xi /∈Sk

r=1 Xr

q=1
X

Xp∈{1,...,k}\{q} Xi∈Xp

q=1
X

Xi∈Xq

= f (X).

11

Conversely, suppose η ≤ f (X). Let x be the characteristic vector of the k-set X. The second set of
constraints in Pf trivially holds at (x, η). For any S ∈ (k + 1)N ,

η ≤ f (X)

≤ f (S) +

k

q=1
X
k

Xi∈Xq\ Sk

r=1 Sr

ρq,i(S) +

k

q=1
X
k

Xp∈{1,...,k}\{q} Xi∈Xq ∩Sp

k

ρq,i(∅) −

ξq
i

q=1
X

Xi∈Sq\Xq

k

= f (S) +

ρq,i(S)xq

i +

ρq,i(∅)xq

i −

i (1 − xq
ξq

i ),

q=1
X

Xi /∈Sk

r=1 Sr

q=1
X

Xp∈{1,...,k}\{q} Xi∈Sp

q=1
X

Xi∈Sq

which follows from the argument in the proof of Proposition 4.2. Thus (x, η) satisﬁes the ﬁrst set of
constraints in Pf as well. We conclude that (x, η) ∈ Pf .

Corollary 4.5. Problem (3) is equivalent to

max{η : (x, η) ∈ Pf ∩ Bkn × R, x ∈ K}.

Proof. This result directly follows from Theorem 4.4.

Remark 4.6. It may be diﬃcult to compute ξq
i , where i ∈ N and q ∈ {1, . . . , k}, for non-monotone
k-submodular functions in practice. However, we do not require exact ξq
i values in the construction of
the linear valid inequalities in our exact method. Proposition 4.2 still holds if we replace ξq
i by its lower
bound. One lower bound is ζ = f − f , where f and f are a lower and an upper bound of f , respectively.
This estimate can be improved depending on the problem context. Similarly, we can replace the ξq
i values
in Pf by their lower bounds that are cheaper to obtain. With the same proof, Theorem 4.4 and Corollary
4.5 hold for the modiﬁed Pf .

5 A Cutting Plane Algorithm for k-submodular Maximization

We incorporate our proposed k-submodular inequalities in a cutting plane algorithm to tackle constrained
k-submodular maximization problems in the form of (2), or equivalently (3). Following the results in
Section 4, problem (3) can be rewritten as

max η

s.t.

(x, η) ∈ C,

x ∈ K.

(11a)

(11b)

(11c)

The polyhedral set C in constraint (11b) is deﬁned by the k-submodular inequalities, which provide a
piecewise linear representation of the objective function f . The set K in constraint (11c) contains the
characteristic vectors x that are associated with the feasible k-sets in X . By abusing notation, K here
also embeds the binary restriction x ∈ Bkn and the constraints

i ≤ 1, for all i ∈ N .

q=1 xq

k

We propose Algorithm 1 to solve problem (11). In this algorithm, we start with a relaxed set C and
repeat the following subroutine until the optimality gap is within the given tolerance ǫ. We solve a
relaxed version of (11) to obtain x and η using a branch-and-bound algorithm. The current solution η
is an upper bound for the optimal objective, and f (x) serves as a lower bound. Let X be the k-set that
corresponds to x. If η overestimates f (x), then we restrict C by adding the k-submodular inequality (9)
associated with X. We repeat the same procedure in the next iteration.

P

Corollary 5.1. Algorithm 1 converges to an optimal solution of Problem (11) in ﬁnitely many iterations.

Proof. This result follows from the fact that the number of feasible solutions is ﬁnite and from Theorem
4.4.

12

Algorithm 1: Delayed Constraint Generation

1 Input initial C, LB = −∞, UB = ∞;
2 while (UB − LB)/UB > ǫ do
3

Solve problem (11) by a branch-and-bound algorithm to get (x, η);
if UB > η then
UB ← η;

end
compute f (x);
if η > f (x) then

Add a k-submodular inequality (9) associated with x to C;

end
if LB < f (x) then
LB ← f (x);
Update the incumbent solution to x ;

end

4

5

6

7

8

9

10

11

12

13

14

15 end
16 Output η, x.

6 Numerical Study

In this numerical study, we demonstrate the eﬀectiveness of our proposed Delayed Constraint Genera-
tion (DCG) Algorithm 1 by solving constrained k-submodular maximization problems with k = 2 and 3.
Speciﬁcally, we run computational experiments on the multi-type sensor placement problem, described
in Section 1.1. We refer the readers to Example 5.1 in [53] for a small numerical example. To summa-
rize, let a set N of n potential sensor deployment locations, and t pairs of measurements made by all
types of sensors at each location be given. Our goal is to determine a multi-type sensor placement plan
S ∈ (k + 1)N , subject to cardinality constraints |Sq| ≤ Bq for q ∈ {1, 2, . . . , k}, such that the entropy is
maximized. Since the entropy function is highly nonlinear, we cannot formulate the multi-type sensor
placement problem as a compact mixed-integer linear program. Therefore, we compare our DCG algo-
rithm against the exhaustive search (ES) method, which is the only available benchmark.

Using the DCG approach, we formulate the multi-type sensor placement problem as

max η
s.t. (x, η) ∈ C,

k

q=1
X

xq
i ≤ 1,

for all i ∈ N,

xq
i ≤ Bq,

for all q ∈ {1, 2, . . . , k},

Xi∈N
xq
i ∈ B,

for all i ∈ N, q ∈ {1, 2, . . . , k}.

(12a)

(12b)

(12c)

(12d)

(12e)

The variables xq and η are consistent with the notation in (11). Constraint (12b) gives the piecewise
linear representation of the entropy function by exploiting its k-submodularity. The inequalities (12d)
ensure that the cardinality requirements are satisﬁed.

13

We create random problem instances using the Intel Berkeley research lab dataset [8]. This dataset
includes the sensor readings of three environmental factors—light, temperature, and humidity—at 54
locations in the Intel Berkeley Research lab from February 28th to April 5th in 2004. We discretize the
temperature data into three equal-width bins. Both light and humidity data are discretized into two
equal-width bins. For the set of experiments with k = 2, we aim to ﬁnd the best placement plan for
light and temperature sensors. When k = 3, our goal is to determine the optimal placement plan for
light, temperature and humidity sensors. The experiments are executed on two threads of a Linux server
with Intel Haswell E5-2680 processor at 2.5GHz and 128GB of RAM. Our algorithms are implemented
in Python 3.6 and Gurobi Optimizer 7.5.1 with default settings and one-hour time limit for each instance.

First, we explore how the changes in the number of deployable locations, n, aﬀect the computational
performance of the DCG algorithm in both sets of experiments with k = 2 and 3. We randomly select
n ∈ {20, 30, 40, 50} out of the 54 locations in the dataset. At each of the n locations, we randomly
select t ∈ {50, 100, 150, 200} tuples of light, temperature and humidity measurements for evaluating the
entropy. We set Bq = ⌊n/10⌋ for q ∈ {1, . . . , k}, so that the cardinality bound for each type of sensors
increases proportionally with n. The computational results are summarized in Table 1 for k = 2 and Ta-
ble 2 for k = 3. The ﬁrst two columns in these tables list the numbers of deployable sensor locations and
the numbers of observations at each location. Columns 3-5 present the relevant computational statistics,
namely the running time in seconds, the number of k-submodular inequalities added, and the number of
branch-and-bound nodes visited when solving the relaxed master problems. The end optimality gap is
computed by (UB−LB)/UB, where UB and LB are the best upper and lower bounds on the objective
respectively. The last column reports the runtime of ES. At the time limit, ES does not provide end gap
information because it produces no lower bounds and has to essentially go through each feasible solution
to prove optimality.

Table 1: Computational performance of DCG and exhaustive search in the coupled sensor placement problem.
The statistics are averaged across 3 trials. The superscript ℓ means that out of the three trials, ℓ instances reach
the time limit of one hour.

n

20

30

40

50

t
50
100
150
200
50
100
150
200
50
100
150
200
50
100
150
200

time (s) # cuts # nodes
49.67
38.67
51.67
16.33
285.33
250.33
224.67
241.67
810.33
1783.33
1255.33
1676.67
1549.00
3559.33
6911.67
9268.67

53.00
42.33
54.00
20.00
289.67
253.67
230.00
245.00
814.67
1791.00
1261.00
1685.00
1560.00
3566.33
6920.67
9275.67

0.73
1.09
1.76
0.97
7.67
13.04
15.07
23.70
36.05
161.80
145.67
283.81
104.21
478.09
1372.18
2474.35

ES time (s)
9.01
17.68
21.89
34.07
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3

In this set of experiments, DCG solves all the instances when k = 2 and solves all but one test case when

14

Table 2: Computational performance of DCG and exhaustive search in the sensor placement problem with three
types of sensors. The statistics are averaged across 3 trials. The superscript ℓ means that out of the three trials,
ℓ instances reach the time limit of one hour.

n

20

30

40

50

t
50
100
150
200
50
100
150
200
50
100
150
200
50
100
150
200

time (s) # cuts # nodes
33.33
32.67
18.00
36.67
142.67
222.33
156.67
243.33
947.33
1043.00
1599.67
1902.67
1878.33
6907.67
6640.00
6496.00

35.33
35.33
21.33
40.00
147.33
226.67
160.33
248.33
952.67
1049.33
1606.33
1912.00
1886.00
6920.00
6646.33
6500.67

0.90
1.58
1.29
3.68
7.54
20.27
22.48
46.55
82.10
164.97
395.54
640.38
253.29
1779.49
2719.26
–3

end gap
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
6.10%

ES time (s)
1633.00
2953.18
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3

k = 3, within the one hour time limit. The test case that DCG fails to solve attains a small end gap of
6.1%. Based on the runtime diﬀerences, the instances with k = 3 are in general more challenging than
those with k = 2, when the other parameters are kept the same. Overall, the computational statistics
for k = 2 and k = 3 display the same trend. The runtime, the number of branch-and-bound nodes
as well as the number of k-submodular inequalities added increase as n increases. Variations in t for
small n values do not signiﬁcantly impact the computational statistics. When n = 50, all the statistics
increase at a greater rate in response to increments in t compared with the case of n = 20. On the other
hand, unsurprisingly, ES struggles for n ≥ 30 when k = 2 and 3. In the test cases with n = 20 that ES
solves, the computing time drastically increases as k goes from 2 to 3, reﬂecting the exponential growth
of the decision space. For n = 20, 30 and 40, all instances are solved by DCG under 11 minutes; while
ES hits the time limit for n ≥ 30. In fact, when k = 2, n = 50 and t = 100, exhaustive search needs
to enumerate 50!/(5!5!40!) ≈ 2.59 × 1012 feasible bisets to ﬁnd an exact optimal solution. We ﬁnd that
objective function evaluation alone takes 1.6 × 10−4 seconds on average when t = 100 for each biset.
Thus, the total function evaluation time is equivalent to 13.13 years. In contrast, our algorithm ﬁnds an
optimal solution in 8 minutes.

Next, we explore the eﬀects of the cardinality bounds Bq, q ∈ {1, . . . , k}, on the computational perfor-
mance of DCG. We consider all the placeable sensor locations; that is, n = 54. Again, at each location,
we randomly select t ∈ {50, 100, 150, 200} k-tuples of sensor readings. We set Bq = B for q ∈ {1, . . . , k},
where B is an integer between 1 and 5. The computational results are summarized in Table 3 for k = 2
and Table 4 for k = 3.
In either table, the ﬁrst column shows the upper bounds on the number of
each type of sensors. The second column lists the numbers of observations at each of the 54 locations
for entropy evaluations. The next four columns are the relevant computational statistics, including the
runtime in seconds, the number of k-submodular inequalities added, the number of branch-and-bound
nodes visited and the end optimality gaps. The last column reports the running time of ES in seconds.

15

Table 3: Computational performance of DCG and exhaustive search in the coupled sensor placement problem.
The statistics are averaged across 3 trials. The superscript ℓ means that out of the three trials, ℓ instances reach
the time limit of one hour.

B

1

2

3

4

5

t
50
100
150
200
50
100
150
200
50
100
150
200
50
100
150
200
50
100
150
200

time (s)
1.09
1.16
1.45
1.97
11.03
27.05
22.14
47.81
31.90
92.53
149.39
335.15
67.92
404.21
754.14
1308.30
149.37
636.18
2068.81
2941.301

# cuts
38.00
18.33
16.67
14.67
283.33
333.33
209.00
283.33
669.33
939.00
997.00
1535.67
1106.67
3422.33
3934.00
5154.00
1773.67
4467.33
8792.00
11385.00

# nodes
41.00
21.33
20.00
17.33
286.67
337.67
212.33
286.00
674.33
943.33
1000.00
1541.33
1114.33
3428.33
3940.00
5159.33
1782.33
4473.00
8800.33
11394.33

end gap
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
2.78%

ES time (s)
0.48
1.04
1.33
1.98
546.64
1158.15
1596.22
2307.06
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3

In both Tables 3 and 4, higher cardinality bounds B make the multi-type sensor placement problem more
challenging, with longer running time, more cuts added, and more branch-and-bound nodes visited. In
particular, when B ≥ 4, the computational statistics increase at a higher rate as t increases than that
with B ≤ 3. These trends are true for both k = 2 and k = 3, since the decision space consisting of all
the plausible deployment plans grows rapidly as more sensors are allowed. If, in addition, the number of
observations is high, then each entropy evaluation becomes expensive, resulting in a signiﬁcant increase
in the running time. When k = 2, even in the most challenging instances where B = 5 and t = 200, DCG
solves two test instances within one hour, and obtains a feasible solution within 3% optimality in the third
trial. Similarly, when k = 3, DCG attains small optimality gap under 6.26% for the most challenging test
case with B = 5 and t = 200. When the cardinality bounds are below three, DCG solves all the instances
within six minutes for k = 2 and nine minutes for k = 3. On the contrary, ES fails due to the time limit
for all the instances with B ≥ 3 and k = 2. ES struggles more when k = 3 and fails as soon as B exceeds 1.

7 Concluding Remarks

In this paper, we propose a polyhedral approach to solve constrained maximization problems with k-
submodular objective functions. We propose valid linear inequalities, referred to as k-submodular in-
equalities, for the hypograph of any k-submodular function. This development leads us to construct the
ﬁrst exact method—a delayed constraint generation algorithm based on k-submodular inequalities—to
solve general k-submodular maximization problems other than the trivially available exhaustive search
method. Our numerical experiments on a highly nonlinear multi-type sensor placement problem show

16

Table 4: Computational performance of DCG and exhaustive search in the sensor placement problem with three
types of sensors. The statistics are averaged across 3 trials. The superscript ℓ means that out of the three trials,
ℓ instances reach the time limit of one hour.

B

1

2

3

4

5

t
50
100
150
200
50
100
150
200
50
100
150
200
50
100
150
200
50
100
150
200

time (s) # cuts # nodes
19.33
31.00
34.00
26.00
267.33
294.33
246.00
308.67
923.00
1405.00
1315.33
1420.67
1624.00
3315.00
4851.67
5447.00
2330.33
5362.33
8067.00
7037.33

1.14
3.05
4.80
5.33
22.63
41.45
50.65
88.52
103.74
184.81
355.86
524.26
215.59
787.15
1618.03
2467.97
386.29
1449.97
2871.681
–3

22.00
33.67
36.67
28.00
271.00
297.00
248.67
311.67
927.67
1410.67
1319.67
1424.00
1630.67
3320.67
4857.00
5453.00
2339.67
5372.67
8073.00
7044.00

end gap
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
–
4.34%
6.26%

ES time (s)
37.56
64.11
94.67
134.80
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3
–3

that the proposed delayed constraint generation algorithm is eﬀective when handling challenging k-
submodular maximization problems that are unsolvable by existing methods.

Acknowledgements

We thank the editor and the reviewers for providing comments that improved this paper. This research
is supported, in part, by NSF grant 2007814. This research is also supported in part through the
computational resources and staﬀ contributions provided for the Quest high performance computing
facility at Northwestern University, which is jointly supported by the Oﬃce of the Provost, the Oﬃce
for Research, and Northwestern University Information Technology.

References

[1] Abujubbeh, M., Al-Turjman, F., and Fahrioglu, M. (2019). Software-deﬁned wireless sensor networks

in smart grids: An overview. Sustainable Cities and Society, 51:101754.

[2] Ahmed, S. and Atamtürk, A. (2011). Maximizing a class of submodular utility functions. Mathemat-

ical Programming, 128(1):149–169.

[3] Ando, K., Fujishige, S., and Naitoh, T. (1996). A characterization of bisubmodular functions. Discrete

Mathematics, 148(1-3):299–303.

[4] Atamtürk, A. and Gómez, A. (2020a). Submodularity in conic quadratic mixed 0–1 optimization.

Operations Research, 68(2):609–630.

17

[5] Atamtürk, A. and Gómez, A. (2020b). Supermodularity and valid inequalities for quadratic opti-

mization with indicators. arXiv preprint arXiv:2012.14633.

[6] Atamtürk, A. and Narayanan, V. (2008). Polymatroids and mean-risk minimization in discrete

optimization. Operations Research Letters, 36(5):618–622.

[7] Atamtürk, A. and Narayanan, V. (2021). Submodular function minimization and polarity. Mathe-

matical Programming, pages 1–11.

[8] Bodik, P., Hong, W., Guestrin, C., Madden, S., Paskin, M., and Thibaux, R. (2004). Intel lab data.

Online dataset. http://db.csail.mit.edu/labdata/labdata.html.

[9] Chandrasekaran, R. and Kabadi, S. N. (1988). Pseudomatroids. Discrete Mathematics, 71(3):205–

217.

[10] Contreras, I. and Fernández, E. (2014). Hub location as the minimization of a supermodular set

function. Operations Research, 62(3):557–570.

[11] Edmonds, J. (1970). Submodular functions, matroids, and certain polyhedra. In Guy, R., Hanani,
H., Sauer, N., and Schönheim, J., editors, Combinatorial Structures and Their Applications, pages
69–87, New York. Gordon and Breach.

[12] Edmonds, J. (2003). Submodular functions, matroids, and certain polyhedra. In Combinatorial

Optimization—Eureka, You Shrink!, pages 11–26. Springer.

[13] Fujishige, S. and Iwata, S. (2005). Bisubmodular function minimization. SIAM Journal on Discrete

Mathematics, 19(4):1065–1073.

[14] Ghayvat, H., Liu, J., Mukhopadhyay, S. C., and Gui, X. (2015). Wellness sensor networks: A
proposal and implementation for smart home for assisted living. IEEE Sensors Journal, 15(12):7341–
7348.

[15] Gómez, A. (2018). Submodularity and valid inequalities in nonlinear optimization with indicator

variables. http://www.optimization-online.org/DB_FILE/2018/11/6925.pdf.

[16] Hu, Y., Wang, R., and Chen, F. (2019). Bi-submodular optimization (BSMO) for detecting drug-
drug interactions (DDIs) from on-line health forums. Journal of Healthcare Informatics Research,
3(1):19–42.

[17] Huber, A. and Kolmogorov, V. (2012). Towards minimizing k-submodular functions. In Interna-

tional Symposium on Combinatorial Optimization, pages 451–462. Springer.

[18] Iwata, S., Fleischer, L., and Fujishige, S. (2001). A combinatorial strongly polynomial algorithm for

minimizing submodular functions. Journal of the ACM (JACM), 48(4):761–777.

[19] Iwata, S., Tanigawa, S.-i., and Yoshida, Y. (2013). Bisubmodular function maximization and ex-

tensions. Technical report, Technical Report METR 2013-16, The University of Tokyo.

[20] Iwata, S., Tanigawa, S.-i., and Yoshida, Y. (2016).

Improved approximation algorithms for k-
submodular function maximization. In Proceedings of the twenty-seventh annual ACM-SIAM sympo-
sium on Discrete algorithms, pages 404–413. SIAM.

[21] Kempe, D., Kleinberg, J., and Tardos, É. (2015). Maximizing the spread of inﬂuence through a

social network. Theory of Computing, 11(4):105–147.

18

[22] Kılınç-Karzan, F., Küçükyavuz, S., and Lee, D. (2020). Conic mixed-binary sets: Convex hull

characterizations and applications. arXiv preprint arXiv:2012.14698.

[23] Krause, A., Leskovec, J., Guestrin, C., VanBriesen, J., and Faloutsos, C. (2008). Eﬃcient sensor
placement optimization for securing large water distribution networks. Journal of Water Resources
Planning and Management, 134(6):516–526.

[24] Lee, Y. T., Sidford, A., and Wong, S. C.-W. (2015). A faster cutting plane method and its im-
In 2015 IEEE 56th Annual Symposium on

plications for combinatorial and convex optimization.
Foundations of Computer Science (FOCS), pages 1049–1065. IEEE.

[25] Lovász, L. (1983). Submodular functions and convexity. In Mathematical programming the state of

the art, pages 235–257. Springer.

[26] Lu, Y., Shen, D., Pietsch, M., Nagar, C., Fadli, Z., Huang, H., Tu, Y.-C., and Cheng, F. (2015).
A novel algorithm for analyzing drug-drug interactions from medline literature. Scientiﬁc Reports,
5:17357.

[27] McCormick, S. T. and Fujishige, S. (2010). Strongly polynomial and fully combinatorial algorithms

for bisubmodular function minimization. Mathematical Programming, 122(1):87–120.

[28] Nemhauser, G., Wolsey, L., and Fisher, M. (1978). An analysis of approximations for maximizing

submodular set functions—I. Mathematical Programming, 14(1):265–294.

[29] Nemhauser, G. L. and Wolsey, L. A. (1981). Maximizing submodular set functions: formulations and
analysis of algorithms. In North-Holland Mathematics Studies, volume 59, pages 279–301. Elsevier.

[30] Nemhauser, G. L. and Wolsey, L. A. (1988).

Integer and combinatorial optimization. Wiley-

Interscience, New York.

[31] Ohsaka, N. and Yoshida, Y. (2015). Monotone k-submodular function maximization with size
In Cortes, C., Lawrence, N. D., Lee, D. D., Sugiyama, M., and Garnett, R., editors,

constraints.
Advances in Neural Information Processing Systems 28, pages 694–702. Curran Associates, Inc.

[32] Orlin, J. B. (2009). A faster strongly polynomial time algorithm for submodular function minimiza-

tion. Mathematical Programming, 118(2):237–251.

[33] Pirmohamed, M. and Orme, M. (1998). Drug interactions of clinical importance. Davies’s textbook

of adverse drug reactions, pages 888–912.

[34] Public Utilities Board Singapore (2016). Managing the water distribution network with a smart

water grid. Smart Water, 1:1–13.

[35] Qi, L. (1988). Directed submodularity, ditroids and directed submodular ﬂows. Mathematical

Programming, 42(1-3):579–599.

[36] Rokach, L. and Maimon, O. Z. (2008). Data mining with decision trees: theory and applications,

volume 69. World scientiﬁc.

[37] Saeys, Y., Inza, I., and Larrañaga, P. (2007). A review of feature selection techniques in bioinfor-

matics. Bioinformatics, 23(19):2507–2517.

[38] Sakaue, S. (2017). On maximizing a monotone k-submodular function subject to a matroid con-

straint. Discrete Optimization, 23:105–113.

19

[39] Schrijver, A. (2000). A combinatorial algorithm minimizing submodular functions in strongly poly-

nomial time. Journal of Combinatorial Theory, Series B, 80(2):346–355.

[40] Shalev-Shwartz, S. and Ben-David, S. (2014). Understanding machine learning: From theory to

algorithms. Cambridge University Press.

[41] Shi, X., Prokopyev, O. A., and Zeng, B. (2020). Sequence independent lifting for the set of submod-
ular maximization problem. In International Conference on Integer Programming and Combinatorial
Optimization, pages 378–390. Springer.

[42] Singh, A., Guillory, A., and Bilmes, J. (2012). On bisubmodular maximization. In Artiﬁcial Intel-

ligence and Statistics, pages 1055–1063.

[43] Svitkina, Z. and Fleischer, L. (2011). Submodular approximation: Sampling-based algorithms and

lower bounds. SIAM Journal on Computing, 40(6):1715–1737.

[44] Tatonetti, N. P., Fernald, G. H., and Altman, R. B. (2012). A novel signal detection algorithm for
identifying hidden drug-drug interactions in adverse event reports. Journal of the American Medical
Informatics Association, 19(1):79–85.

[45] Ward, J. and Živný, S. (2014). Maximizing bisubmodular and k-submodular functions. In Proceed-
ings of the Twenty-Fifth Annual ACM-SIAM Symposium on Discrete Algorithms, pages 1468–1481.
SIAM.

[46] Ward, J. and Živný, S. (2016). Maximizing k-submodular functions and beyond. ACM Transactions

on Algorithms (TALG), 12(4):1–26.

[47] Wu, H.-H. and Küçükyavuz, S. (2018). A two-stage stochastic programming approach for inﬂuence

maximization in social networks. Computational Optimization and Applications, 69(3):563–595.

[48] Wu, H.-H. and Küçükyavuz, S. (2019). Probabilistic partial set covering with an oracle for chance

constraints. SIAM Journal on Optimization, 29(1):690–718.

[49] Wu, H.-H. and Küçükyavuz, S. (2020). An exact method for constrained maximization of the
conditional value-at-risk of a class of stochastic submodular functions. Operations Research Letters,
48(3):356–361.

[50] Xie, W. (2021). On distributionally robust chance constrained programs with Wasserstein distance.

Mathematical Programming, 186:115–155.

[51] Yu, J. and Ahmed, S. (2017a). Maximizing a class of submodular utility functions with constraints.

Mathematical Programming, 162(1-2):145–164.

[52] Yu, J. and Ahmed, S. (2017b). Polyhedral results for a class of cardinality constrained submodular

minimization problems. Discrete Optimization, 24:87–102.

[53] Yu, Q. and Küçükyavuz, S. (2021a). A polyhedral approach to bisubmodular function minimization.

Operations Research Letters, 49(1):5–10.

[54] Yu, Q. and Küçükyavuz, S. (2021b). Strong valid inequalities for a class of concave submodular

minimization problems under cardinality constraints. arXiv preprint arXiv:2103.04398.

[55] Zanella, A., Bui, N., Castellani, A., Vangelista, L., and Zorzi, M. (2014). Internet of things for

smart cities. IEEE Internet of Things Journal, 1(1):22–32.

[56] Zhang, Y., Jiang, R., and Shen, S. (2018). Ambiguous chance-constrained binary programs under

mean-covariance information. SIAM Journal on Optimization, 28(4):2922–2944.

20

