1
2
0
2

p
e
S
0
2

]

C
O
.
h
t
a
m

[

1
v
7
5
6
9
0
.
9
0
1
2
:
v
i
X
r
a

Convex Mixed-Integer Nonlinear Programs Derived
from Generalized Disjunctive Programming using
Cones

David E. Bernal
Department of Chemical Engineering
Carnegie Mellon University
Pittsburgh, PA 15213
bernalde@cmu.edu

Ignacio E. Grossmann
Department of Chemical Engineering
Carnegie Mellon University
Pittsburgh, PA 15213
grossmann@cmu.edu

Abstract

We propose the formulation of convex Generalized Disjunctive Pro-
gramming (GDP) problems using conic inequalities leading to conic
GDP problems. We then show the reformulation of conic GDPs into
Mixed-Integer Conic Programming (MICP) problems through both the
Big-M and Hull Reformulations. These reformulations have the advan-
tage that they are representable using the same cones as the original
conic GDP. In the case of HR, they require no approximation of the per-
spective function. Moreover, the MICP problems derived can be solved
by specialized conic solvers and oﬀer a natural extended formulation
amenable to both conic and gradient-based solvers. We present the
closed-form of several convex functions and their respective perspec-
tives in conic sets, allowing users to easily formulate their conic GDP
problems. We ﬁnally implement a large set of conic GDP examples and
solve them via the traditional and conic mixed-integer reformulations.
These examples include applications from Process Systems Engineer-
ing, Machine learning, and randomly generated instances. Our results
show that the conic structure can be exploited to solve these challeng-
ing MICP problems more eﬃciently.

1

 
 
 
 
 
 
1

Introduction

A Mixed-Integer Nonlinear Programming (MINLP) problem involves non-
linear algebraic inequalities describing the constraints and objectives, while
the variables are allowed to take either continuous or discrete values. MINLP
is a problem class of great interest, both theoretical [1] and practical [2, 3].
In particular, MINLP problems formulations allow modeling a wide range
of applications. Most industrial problems can be modeled using MINLP [4].
A particular class of MINLP problems is where the constraints are convex
functions. Although it is non-convex because of the nature of the discrete
variables, this problem is known as convex MINLP [5, 6]. This class of
MINLP is a subject of interest given the many applications that it can
represent.For a review on convex MINLP, refer to Kronqvist et al. [6].

A convex MINLP problem is deﬁned as

min
x,y

s.t.

f (x, y)

g(x, y) ≤ 0,
yl ≤ y ≤ yu,
x ∈ Rnx

+ , y ∈ Zny ,

(MINLP)

where the objective function f : Rnx+ny → R ∪ {∞} is convex and the con-
straints g : Rnx+ny → (R ∪ {∞})J deﬁne a convex set F = {x ∈ Rnx
+ , y ∈
Rny |g(x, y) ≤ 0}. Although it is not necessary, we will consider that each
constraint, gj(x, y) for j ∈ {1, . . . , J} =
, is a convex function. We con-
(cid:75)
sider bounded integer variables y. Without loss of generality, we will assume
that the objective function is linear, which can be achieved through the epi-
graph reformulation [6]. Notice that, although the continuous relaxation of
the feasible region F is convex, the original convex MINLP feasible region
is non-convex given the discrete nature of variables y.

J
(cid:74)

Among the solution techniques for convex MINLP, several have been
adapted from the Mixed-Integer Linear Programming (MILP), including
Branch & Bound [7] and Benders Decomposition [8]. In contrast, others gen-
eralize the solutions methods for convex continuous Nonlinear Programming
(NLP) problems, such as the Extended Cutting Plane methods [9]. A par-
ticularly successful approach to convex MINLP is the outer-approximation
(OA) method proposed by Duran and Grossmann [10], where an iterative so-
lution of a convex NLP and an MILP subproblems is performed. The MILP
is derived through ﬁrst-order Taylor approximations, or gradient-based lin-
earizations, of the nonlinear constraints at the NLP solutions, and the NLPs

2

stem from the problems appearing when ﬁxing the values of the discrete vari-
ables at the MILP solution [5, 10]. Many of the current commercial tools to
solve convex MINLP rely on the OA method [6].

In continuous convex programming, solutions methods have also been
derived by generalizing Linear Programming (LP) notions and techniques.
One of the most successful ones has been the proposal of convex optimiza-
tion problems as problems deﬁned over cones, or Conic Programming (CP)
problems [11]. CP is a numerically stable alternative for convex program-
ming [11], given that it exploits properties of the conic sets. Convex Pro-
gramming problems described via algebraic convex nonlinear constraints of
the form f (x) ≤ 0 can be equivalently posed as linear transformation of the
variables belonging to convex sets K, i.e., Ax − b ∈ K [11, 12]. A general-
ization of CP where some variables are required to take discrete values is
Mixed-Integer Conic Programming (MICP). MICP problems are highly ex-
pressible and can represent a wide range of optimization problem [13]. Many
of these applications have been gathered in the problem library CBLib [14].
The automatic identiﬁcation and translation of the two equivalent de-
scriptions of convex sets is a crucial feature for the development of algorith-
mic solution software, solvers. This is since the description of problems using
algebraic constraints is more natural for practitioners. However, the conic
description of the problem allows taking advantage of mathematical proper-
ties such as conic duality for more stable solution procedures. Generic solvers
have been designed to tackle CP problems, e.g., MOSEK [15], ECOS [16],
and Hypatia [17]. This translation is not trivial [18, 19, 20]. However, it has
been achieved for the quadratic case allowing for solution methods based on
conic programming to be used for these problems. An alternative to trans-
lating practical optimization problems into CP is via Disciplined Convex
Programming (DCP) [21], where strict rules of function deﬁnitions guaran-
tee the problem’s convexity and perform the translation such that they can
be solved through generic conic solvers.

In the mixed-integer setting, solvers have been designed to take as in-
put the MICP problem taking advantage of this form of the optimization
problem structure, e.g., Mosek [15], and Pajarito [22, 23, 24]. Even for
solvers that do not necessarily consider the conic representation of convex
problems, identifying such structures leads to improvements in its perfor-
mance, such as in SCIP [25, 26] and BARON [27]. There is a signiﬁcant
potential for MINLP solvers to perform automatic reformulations once they
identify correct structures [28]. An example of the automatic identiﬁcation
of conic structures is Mixed-Integer Quadratically-constrained Quadratic
Programming (MIQCQP) problems can now be tackled through Mixed-

3

Integer Second-Order Conic Programming (MISOCP) methods in commer-
cial solvers such as Knitro [29], Xpress [30], Gurobi [31], and CPLEX [32].
The discrete nature of the integer variables in mixed-integer program-
ming problems has been exploited to derive eﬃcient solution methods for
these problems.
In particular, deriving sets of extra inequalities, cutting
planes or cuts, has allowed a considerable speedup in the solution of these
problems, see [33]. One of the key disciplines for deriving such cutting planes
is Disjunctive Programming [34], which considers the optimization over dis-
junctive sets such as the one given by the domain of the discrete variables.
In the convex nonlinear setting, the conic structure has been exploited to
derive special cutting planes for MICP solution methods
[35, 36, 37]. A
source of these problems are those driven by indicator variables, that ac-
tivate or deactivate sets of constraints [28], see a review by Bonami et al.
[38].

Generalized Disjunctive Programming (GDP) was proposed by Gross-
mann and Lee [39] as an intuitive way of describing the logic behind appli-
cations. In this setting, sets of constraints are activated with logical vari-
ables linked to each other by logical constraints, including disjunctions. This
mathematical description of the problem can be tackled directly by logic-
based optimization methods [40], which generalize mixed-integer solution
methods to the logical domain. Another way of solving these problems is
through reformulations into mixed-integer programs, where the logical vari-
ables are mapped to binary or indicator variables. Depending on the linear-
ity of the constraints within the GDP, the reformulations can yield a MILP
or MINLP problem. The two most common reformulations are: the Big-M
reformulations, where a large coeﬃcient is added to make the constraints
redundant in the case their associated indicator variable is inactive; and the
Hull Reformulation (HR), where using Disjunctive Programming theory, a
set of constraints in an extended space are derived such that their projection
onto the space of the original variables is the convex hull of the disjunctive
sets. These two reformulations yield diﬀerent mixed-integer models, which
can be characterized by size and tightness. The tightness of a mixed-integer
model is measured through the diﬀerence of the optimal solution of the prob-
lem, ignoring the discrete constraints, known as the continuous relaxation,
and the original problem’s optimal solution [2]. The Big-M and Hull refor-
mulations oﬀer a tradeoﬀ between tightness and problem size. The HR is the
tightest possible model, while the Big-M formulation does not require any
additional continuous variables and constraints. Both the model size and
tightness are relevant to the eﬃciency of solution methods of mixed-integer
programs [41].

4

For convex GDPs, the HR requires modeling the perspective function of
the convex functions in the disjunctions, which can be complex for nonlinear
functions given its non-diﬀerentiability at 0 [41, 42]. Perspective functions
arise in formulations of convex MINLP since they are in general part of
the reformulation of disjunctive programs. Moreover, the MINLP formula-
tions involving the perspective function can be used either directly in tight
formulations of convex disjunctive programs, either in the original variable
space [38, 43] or in a higher dimensional space [39, 44] , or indirectly through
the generation of valid cutting-planes [45, 46]. A recent computational study
shows the positive impact of perspective cuts in the MINLP framework [26].
The importance of this perspective formulations and the challenges associ-
ated with their implementation have motivated its study, where customized
versions have been derived for special cases [28, 43, 47] or the proposal of
ε-approximations for general convex functions [42, 44].

2 Generalized Disjunctive Programming

The framework of Generalized Disjunctive Programming (GDP) was intro-
duced by Raman and Grossmann [48]. This modeling paradigm extends the
usual mathematical programming paradigm by allowing Boolean variables,
logical constraints, and disjunctions to appear in the optimization problem
formulation. We deﬁne a GDP as follows:

min
x,Y

f (x)

s.t. g(x) ≤ 0

(cid:35)

,

k ∈ K

(cid:34)

(cid:95)

Yik
hik(x) ≤ 0

k ∈ K

i∈Dk
(cid:89)i∈Dk Yik,
Ω(Y) = T rue
xl ≤ x ≤ xu
x ∈ Rn
Yik ∈ {F alse, T rue},

(GDP)

k ∈ K, i ∈ Dk,

where constraints g(x) ≤ 0 are called global constraints, the set K represents
the possible disjunctions in the problem, and each element i of the set Dk
represents a disjunctive term, also called disjunct, in that disjunction. In the
disjunction k ∈ K, each disjunct i ∈ Dk has a set of constraints hik(x) ≤ 0

5

(cid:75)

Jik
(cid:74)

which are activated when a Boolean variable associated with the disjunct is
equals to T rue, i.e., Yik = T rue. Each disjunct may contain a diﬀerent num-
ber of constraints Jik, i.e., hik(x) = (hik1(x), . . . , hikJik (x)) = (hik
(x)).
These constraints deﬁne set Cik = {x ∈ Rn|hik(x) ≤ 0}, to which the
point x belongs to when the disjunct is active, i.e., Yik = T rue. The
disjuncts within the disjunction are related through an inclusive-or op-
erator ∨, which means that at least one Boolean variable in every dis-
junction, Yik, k ∈ K, is set to T rue. Each disjunction deﬁnes a disjunc-
tive set,
like the ones introduced in the previous section. Ω(Y) repre-
sent logical propositions in terms of the Boolean variables Y. These log-
ical constraints can be written in Conjunctive Normal Form (CNF), i.e.,
Ω(Y) = (cid:86)
where for each logical clause
t ∈ T , the subset Rt ⊆ Y are non-negated Boolean variables and the subset
Qt ⊆ Y are the negated Boolean variables. We assume that the exclusive-
or operators among the Boolean variables for each disjunction k ∈ K, i.e.,
(cid:89)i∈Dk Yik, are included in Ω(Y) = T rue [49, 50]. It has been proved that
GDP is equivalent to Disjunctive programming in the case that the con-
straints are linear [51] and convex [52].

(¬Yik) (cid:87)(cid:105)

(Yik) (cid:87)

Yik∈Qt

Yik∈Rt

(cid:104)(cid:87)

t∈T

Besides oﬀering a more intuitive modeling paradigm of discrete prob-
lems through disjunctions, a GDP model can be used to inform computa-
tional solution tools, i.e., solvers, of the original problem’s underlying struc-
ture, thus leading to improved solving performance. The tailored solution
methods for GDP are usually based on generalizing algorithms for MINLP,
where the optimization problems are decomposed, so the discrete variables
are ﬁxed and allow to solve the problem only in terms of the continuous
variables. Diﬀerent methods are used to select the combination of these
discrete variables, including branching across the diﬀerent values the dis-
crete variables can take, i.e., Branch & Bound (B&B), or solving a linear
approximation of the original problem [6]. For GDP algorithms, contrary
to the case in MINLP, these Nonlinear Programming (NLP) subproblems
only include the constraints that concern the logical variable combinations.
We encounter the Logic-based Branch & Bound (LBB) and the Logic-based
Outer-Approximation (LOA) among these tailored algorithms. For more
information on general GDP algorithms, refer to [40].

Another route to solve these problems is through the reformulation to
k∈K |Dk| are
Mixed-integer problems, where binary variables y ∈ {0, 1}
added to the problem in exchange of the Boolean variables and constraints
within the disjunction are enforced subject to the binary variables’ value.
Notice that these reformulations yield problems of the form MINLP. The log-

(cid:80)

6

ical propositions Ω(Y) = T rue can be easily reformulated as a set of linear
inequality constraints, Ey ≤ e, in terms of the binary variables [48, 49, 53].
In the case that Ω(Y) is written in CNF, this reformulation is simply
(cid:80)
(1 − yik) ≥ 1, t ∈ T . An example is the exclusive-or
constraint (cid:89)i∈Dk Yik reformulated as a partitioning constraint (cid:80)
yik =
1, k ∈ K. These approaches take advantage of the more mature mixed-
integer solvers available commercially.

yik + (cid:80)

yik∈Qt

yik∈Rt

i∈Dk

The Big-M reformulation is among the best-known reformulation for
GDP problems. In this case, each disjunction’s constraints are relaxed by
adding a large term, M , if its corresponding binary variable is equal to zero.
The formulation of the Big-M reformulation is as follows:

min
x,y

f (x)

s.t. g(x) ≤ 0

hikj(x) ≤ Mikj(1 − yik),
(cid:88)

yik = 1,

k ∈ K

k ∈ K, i ∈ Dk, j ∈

Ji
(cid:74)

,
(cid:75)

(Big-M)

i∈Dk
Ey ≤ e
xl ≤ x ≤ xu
x ∈ Rn
yik ∈ {0, 1},

k ∈ K, i ∈ Dk,

where the coeﬃcient Mikj has to be large enough to guarantee the enforce-
ment of the original GDP logic, i.e., yik = 1 → hik(x) ≤ 0, but small enough
to avoid numerical problems related to solving accuracy [2]. This can be ac-
complished by setting Mikj = maxx∈{x:hik≤0} hikj(x), j ∈
. Although
(cid:75)
traditionally used, the Big-M reformulation is well-known for its often weak
continuous relaxation gap, i.e., the diﬀerence in the optimal objective func-
tion when solving the problem considering yik ∈ [0, 1] ⊂ R, k ∈ K, i ∈ Dk
compared to the original problem’s optimal objective.This is particularly
important for solution methods based on B&B, where this continuous relax-
ation gives the ﬁrst node in the search tree.

Ji
(cid:74)

Another valid transformation of problem GDP into a mixed-integer prob-
lem is the Hull Reformulation (HR). This reformulation uses the same map-
ping of Boolean into binary variables as in Big-M. On the other hand, it
introduces copies of the x variables, vik for each disjunct k ∈ K, i ∈ Dk and
uses the closure of the perspective function to enforce the constraints when
their corresponding binary variable is active. The formulation for the HR

7

of a GDP is as follows:

min
x,v,y

f (x)

s.t. g(x) ≤ 0

(cid:88)

x =

vik,

k ∈ K

(cid:16)

i∈Dk
(cid:17)
cl ˜hik
(cid:88)

(vik, yik) ≤ 0,

k ∈ K, i ∈ Dk

yik = 1,

k ∈ K

(HR)

i∈Dk
Ey ≤ e
xlyik ≤ vik ≤ xuyik
x ∈ Rn
vik ∈ Rn,
yik ∈ {0, 1},

k ∈ K, i ∈ Dk

k ∈ K, i ∈ Dk.

The problem formulation HR is derived by replacing each disjunction
with set H{0,1} (A.22), presented in Section A.3. Notice that in order to
guarantee the validity of the formulation, the condition on (A.23) is enforced
implicitly by having the bounds over x included in each disjunct, leading to
constraint xlyik ≤ vik ≤ xuyik.

In general, for GDP, no convexity assumptions are made for the func-
tions f, g, hik or the sets within the disjunctions Ci. This means that the
continuous relaxation of either Big-M or HR might not have convex feasible
regions. We refer the interested reader to the review by Ruiz and Gross-
mann [54] that covers the techniques to solve these challenging optimization
problems.

In order to use the theory from Conic Programming and Disjunctive
programming, covered in Appendices A.1 and A.3, respectively, we assume
here that functions f, g, hik are convex, hence the sets Ci are convex too.
These are known as convex GDP problems [55].

For a literature review on GDP, we refer the reader to Grossmann and

Ruiz [49].

3 Conic Generalized Disjunctive Programming

The ﬁrst step towards deﬁning easily solvable convex MINLP problems via
conic programming is to deﬁne a GDP with conic constraints. As mentioned

8

in Section A.1, we can use the tautological reformulation in (A.14) to write
any convex GDP of form GDP as follows:

min
x,Y

f (x)

s.t. g(x) ≤ 0

(cid:35)

,

k ∈ K

(cid:34)

(cid:95)

Yik
Aikx (cid:60)Kik bik

i∈Dk
Ω(Y) = T rue
xl ≤ x ≤ xu
x ∈ Rn
Yik ∈ {F alse, T rue},

(GDP-Cone)

k ∈ K, i ∈ Dk.

Since the objective function f (x) and the global constraints g(x) ≤ 0
are convex we can reformulate them to a conic program via (A.14) as in
problem (MINLP-Cone). The sets deﬁned within each disjunct

Pik := {x ∈ Rn : Aikx (cid:60)Kik bik}
are convex sets, where for every disjunct Aik ∈ Rmi×n, bik ∈ Rmi, and Kik
is a proper cone.

(3.1)

Although the derivation of speciﬁc solution algorithms for problem GDP-
Cone is a subject of active research, we focus on the reformulation of the
given problem into Mixed-integer Programming problems. These convex
GDP problems can be reformulated into a convex MINLP problem, which
in turn can be written down as a MICP problem.

The ﬁrst trivial reformulation is the Big-M reformulation, which yield

the following problem:

min
x,y

f (x)

s.t. g(x) ≤ 0

k ∈ K, i ∈ Dk,

(Big-M-Cone)

Aikx (cid:60)Kik bik + Mik(1 − yik),
(cid:88)

yik ≤ 1,

k ∈ K

i∈Dk
Ey ≤ e
xl ≤ x ≤ xu
x ∈ Rn
yik ∈ {0, 1},

k ∈ K, i ∈ Dk,

9

To derive the Hull Reformulation of GDP-Cone, we need to characterize
the convex hull of the disjunctive set (A.20) in the case that each convex
and bounded set is deﬁned using cones as in 3.1.

Theorem 1.
Rmi×n, bi ∈ Rmi, and Ki is a proper cone, and let

[37] Let Pi = {x ∈ Rn : Aix (cid:60)Ki bi} for i ∈ I, where Ai ∈

P =






x =

(cid:88)

(cid:88)

i∈I

vi,

λi = 1,

i∈I
Aivi (cid:60)Ki λibi,
vi ∈ Rn,
λi ∈ R+,






.

i ∈ I,

i ∈ I,

i ∈ I

(3.2)

Then conv((cid:83)
1. if Pi (cid:54)= ∅, ∀i ∈ I, then projx(P) ⊆ cl conv((cid:83)

i∈I Pi) ⊆ projx(P) and:

i∈I Pi)

2. if Pi = Si + W, ∀i ∈ I, where Si, i ∈ I is a closed, bounded, convex,

non-empty set and W is a convex closed set, then

conv

(cid:32)

(cid:91)

i∈I

(cid:33)

Pi

= projx(P) = cl conv

(cid:32)

(cid:91)

(cid:33)

Pi

.

i∈I

Proof. See [11, Proposition 2.3.5].

Using the characterization of the convex hull of the union of convex sets
deﬁned by cones, we can deﬁne the Hull Reformulation of the GDP-Cone as
follows:

10

The formulation for the HR of a GDP is as follows:

min
x,v,y

f (x)

s.t. g(x) ≤ 0

x =

(cid:88)

i∈Dk

vik,

k ∈ K

Aikvik (cid:60)Kik yikbik,
(cid:88)
yik = 1,

k ∈ K

k ∈ K, i ∈ Dk

(HR-Cone)

i∈Dk
Ey ≤ e
xlyik ≤ vik ≤ xuyik
x ∈ Rn
vik ∈ Rn,
yik ∈ {0, 1},

k ∈ K, i ∈ Dk

k ∈ K, i ∈ Dk.

This problem is of the form of MICP, and more notably uses the same
cones within the disjunctions, Kik in the extended formulation. Contrary to
problem HR, problem HR-Cone does not require an approximation of the
perspective function. Considering the HR reformulation as an optimization
problem deﬁned over convex cones allows exploiting the tight continuous
relaxation of these problems while eﬃciently addressing the perspective re-
formulation’s exact form.

To show several functions that appear in the normal context of convex
MINLP that can be reformulated as the standard cones described in Sec-
tion A.1, as well as their perspective function, we include Table 1. The conic
representations in Table 1 are not unique and are given as a practical guide
for implementing convex constraints using cones. Notice that applying the
perspective reformulation, we recover the results found by several authors
on stronger formulations for convex constraints activated through indicator
variables. Such examples include the epigraph of quadratic functions [28]
and the epigraph of power functions with positive rational exponents [56].
The conic reformulation gives a natural and systematic procedure to perform
extended reformulations [22], which have proved to be helpful in solution
methods for mixed-integer convex programs [43, 57].

To use the HR reformulation of GDP using conic constraints, it suﬃces
to perform the take the perspective on its cones, i.e., for variables z deﬁned
over the cone K its perspective becomes (y z
y ) ∈ K. This has a considerable
advantage, given that the HR reformulation is representable in the same

11

cones like the ones used within the disjunctions.

4 Computational results

The computational results in this manuscript include the comparison of
diﬀerent mixed-integer reformulations of GDP problems. The sources of
these GDP problems are applications in Process Systems Engineering (PSE)
and Machine Learning (ML), besides some randomly generated instances to
benchmark the diﬀerent solution methods. Each diﬀerent reformulation was
tackled using MINLP solvers. All the problems were implemented in the
General Algebraic Modeling Software GAMS [61] 28.2. The solvers used for
this comparison are BARON [57] 19.7, CPLEX [32] 12.9, and KNITRO [29]
11.1 for convex MINLP. We also use as a MICP solver MOSEK [15] 9.0.98,
using two diﬀerent algorithms implemented within it for solving relaxations
of the conic problems, either an interior-point solution or through an outer-
approximation approach (MSK IPAR MIO CONIC OUTER APPROXIMATION set as
MSK OFF or MSK ON), denoted MOSEK-IP and MOSEK-OA, respectively.
Given the sophistication of these solvers, the eﬀects of the diﬀerent problem
formulations can be shadowed by the use of heuristics within them. To better
observe the performance diﬀerence given by the problem formulation, we use
the Simple Branch & Bound SBB [62] implementation in GAMS and solve
the respective continuous subproblems using gradient-based interior-point
NLP solver KNITRO [29] 11.1, and MOSEK [15] 9.0.98 for the conic sub-
problems. All experiments were run on a single thread of an Intel® Xeon®
CPU (24 cores) 2.67 GHz server with 128GB of RAM running Ubuntu. The
termination criteria were a time limit of 3600 seconds or a relative optimal-
ity gap of (cid:15)rel = 10−5. Unless otherwise stated, the conic reformulation of
the constraints was written explicitly, meaning that the auxiliary variables
required by the reformulation were introduced to the problem directly. This
is a weakness identiﬁed in the conic programming interface in GAMS, where
the conic structure identiﬁcation is not made automatically. The deﬁnition
of the cones, although trivial, had to be done manually.

For all these GDP problems, the Big-M and HR reformulations are pre-
sented. When neccesary, the conic representations for both cases, i.e., Big-
M-Cone and HR-Cone, are presented separately from the algebraic descrip-
tion, i.e., Big-M and HR. The algebraic description of the HR included
the ε-approximation (A.19) proposed in [42] to avoid numerical diﬃculties,
denoted HR-ε. We use the recommended value of ε = 10−4 for all the cases
presented herein. We also implemented the perspective function directly

12

]
8
5

,
4
3
[

a
r
d
e
h
y
l
o
p

f
o

n
o
i
n
U

.
n
o
i
t
a
l
u
m
r
o
f
e
r

c
i
n
o
c

h
t
i
w
0
≤
)
y
,
z
(
˜h

s
n
o
i
t
c
n
u
f

e
v
i
t
c
e
p
s
r
e
p

d
n
a

0
≤
)
z
(
h

s
t
n
i
a
r
t
s
n
o
c

x
e
v
n
o
c

n
o
m
m
o
C

:
1

e
l
b
a
T

s
e
t
o
N

h
K
∈
)
zy
y
(
=
˜h
K
∈
)
y
,
z
(

0
≤
)
y
,
z
(
˜h

h
K
∈
z

0
≤
)
z
(
h

3r

r

3r

m+
R
∈
)
y
b
+
x
A
(

Q
∈
)
x

,
t
,
y
5
.
0
(

)
p
+
1
(
/
1
3
P
∈
)
y
,

2
+
n
Q
∈
)
x

√

,
t
,
y
5
.
0
(

Q
∈
)
y
2

p
/
1
3
P
∈
)
x

,
t
,

x
(

,
y
,
t
(

1
>
p
,
0
≤

t

−

1
−
p
y
/
p
|
x

|

0
>
x

,
0
≤
x
t

−

2
y

0
≤
y
b
+
x
A

0
≤
y
t

−

2
x

0
≤
y
t

−
x
(cid:62)
x

3r

r

3r

Q
∈
)
2

m+
R
∈
)
b
+
x
A
(

Q
∈
)
x

,
t
,
5
.
0
(

2
+
n
Q
∈
)
x

,
t
,
5
.
0
(

√

)
p
+
1
(
/
p
,
)
p
+
1
(
/
1
3
P
∈
)
1
,

p
/
1
−
1
,
p
/
1
3
P
∈
)
x

,
t
,

x
(

,
1
,
t
(

0
>
x

,
0
≤

1
>
p
,
0
≤

x

,
t
(

1
>
p
,
0
>
x

,
0
≤

t

t

t

−
x
/
1

−
p
|
x

|

−
p
x
/
1

0
≤
b
+
x
A

0
≤

t

−

2
x

0
≤

t

−
x
(cid:62)
x

r
e
w
o
p

l
a
n
o
i
t
a
r

r
o
f

g
n
i
n
e
h
t
g
n
e
r
t
s

t
u
C

]
7
4
[
s
r
o
t
a
c
i
d
n
i

h
t
i
w
s
t
n
i
a
r
t
s
n
o
c

a
/
b

3
P
∈
)
x

,
y
,
t
(

p
x
e
K
∈
)
x

,
y
,
t
(

,
3r

Q
∈
)
y
2

,
t
,

u
(

p
x
e
K
∈
)
t
,
y
,

x
(

√

,
3r

p
x
e
K
∈
)
u

,
y
,

x
(

Q
∈
)
x

,

u

,
y
5
.
0
(

p
x
e
K
∈
)
u

,

x

,
t
(

Z
∈
b
,
a
,
0
>
b
≥
a
,
0
>
x

,
0
≤

b
−
a
y
b
t

−
a
x

1
>
x

,
0
≤

t

−
)
y
/
x
(
g
o
l
/
y

0
≤
)
y
/
x
(
g
o
l
y
−

t

0
≤

t

−

y
/
x
e
y

0
≥
x

,
0
≤

t

−

y
/
x
e
x

a
/
b
−
1
,
a
/
b

3
P
∈
)
x

,
1
,
t
(

p
x
e
K
∈
)
x

,
1
,
t
(

,
3r

,
3r

Q
∈
)
2

p
x
e
K
∈
)
u

,
t
,

u
(

,
1
,

x
(

p
x
e
K
∈
)
t
,
1
,

x
(

√

Q
∈
)
x

,

u

,
5
.
0
(

p
x
e
K
∈
)
u

,

x

,
t
(

x

,
t
(

1
>
p
,
0
>
x

,
0
≤

t

−
p
x
/
p
+
1
y

]
9
5
[

y
p
o
r
t
n
e

e
v
i
t
a
l
e
r

d
n
a

y
p
o
r
t
n
E

n
o
i
t
c
n
u
f

t
s
o
c

c
i
t
s
i
g
o
L

,
p
x
e
K
∈
)
t

−
x
(cid:62)
θ
−

,
y
,

u
(

,
p
x
e
K
∈
)
t
−

,
y
,
v
(

y
≤
v
+
u

,
p
x
e
K
∈
)
u

,

x
+
y
,

x
(

,
p
x
e
K
∈
)
v
,

x

,
y
+
x
(

0
=
v
+
u
+

t

,
p
x
e
K
∈
)
t
−

,
y
,
v
(

p
x
e
K
∈
)
t
,

x

,
y
(

y
≤
v
+
u

0
≤

t

−
)
)
y
/
x
(cid:62)
θ
−
e
+
1
(
/
1
(
g
o
l
y
−

0
>
y
,

x

,
0
≤

t

−
)
x
/
y
+
1
(
g
o
l
y

0
≤

t

+
)
y
/
x
(
g
o
l

x

0
≤

t

−
)
y
/
x
e
+
1
(
g
o
l
y

,
p
x
e
K
∈
(cid:75)
)
t
(cid:74)

−
x

,
y
,

u
(

p
x
e
K
∈
)
i

a
g
o
l

i

x

n

∈
i

(cid:80)

,
y
,
t
(

0
>

1
a
,
0
≤

t

−

y
/
n
x

n
a
·

·

·

y
/
1
x

1
a
y

p
x
e
K
∈
)
i

a
g
o
l

i

x

,
p
x
e
K
∈
(cid:75)
)
t
(cid:74)

n

∈
i

(cid:80)

,
1
,
t
(

−
x

,
1
,

u
(

,
p
x
e
K
∈
)
t

−
x
(cid:62)
θ
−

,
1
,

u
(

,
p
x
e
K
∈
)
t
−

,
1
,
v
(

1
≤
v
+
u

,
p
x
e
K
∈
)
t
−

,
1
,
v
(

1
≤
v
+
u

√

,
3r

Q
∈
)
2

,

u

,
1
+
x
(

p
x
e
K
∈
)
t
,
1
,

u
−
1
(

]
0
6
[

t
e
s

y
t
n
i
a
t
r
e
c
n
u

l
a
d
i
o
s
p
i
l
l
e

h
t
i
w
t
n
i
a
r
t
s
n
o
c

t
s
u
b
o
R

1
+
m
Q
∈
)
b
+
x
A

,
y
d
+
x
(cid:62)
c
(

y
d
+
x
(cid:62)
c
−

2
|
|

b
+
x
A

|
|

1
+
m
Q
∈
)
b
+
x
A

,
d
+
x
(cid:62)
c
(

n
a
e
M

c
i
r
t
e
m
o
e
G
d
e
t
h
g
i
e

W

,
}
n

,

.

.

.

,
2
{
∈
i
,
)
j

α

t

h
p
a
r
g
i
p
e
m
r
o
n
-
1
(cid:96)

h
p
a
r
g
i
p
e
m
r
o
n
-
2
(cid:96)

h
p
a
r
g
i
p
e
m
r
o
n
-
p
(cid:96)

h
p
a
r
g
i
p
e
m
r
o
n
-
1
−
(cid:96)

n
a
e
m
c
i
n
o
m
r
a
H

n
a
e
m
c
i
r
t
e
m
o
e
G

p
x
e
-
m
u
s
-
g
o
L

,
}
n

,

.

.

.

,
2
{
∈
i
,

,

(cid:75)

n

(cid:74)

∈
i
,
p
x
e
K
∈
)
t

−

i

x

y
≤

i

u

n

∈
i

,
y
,
i

u
(

(cid:80)

,

(cid:75)

n

(cid:74)

∈
i
,
2

Q
∈
)
(cid:75)
i

x
(cid:74)

,
i

u
(

i

u

n

∈
i

(cid:80)
=

t

,

(cid:75)

n

(cid:74)

∈
i
,

p
/
1
3
P
∈
)
i

i

u

n

∈
i

x

,
t
,
i

u
(

(cid:80)
=

t

,

(cid:75)

n

(cid:74)

∈
i
,
3r

(cid:75)

Q
∈
(cid:74)
)
t
,
i

x

,
i

u
(

i

u

n

∈
i

(cid:80)
=
2
/
t
n

i
/
1
−
1
3
P
∈
)
1
+
u

i

(cid:74)

(cid:75)

,
i

x

,
i

u
(

,
i
β
−
1
3
P
∈
)
1
+
u

i

,
i

x

,
i

u
(

t

=

1
+
n
u

,
1
x
=

1
u

i

∈
j

(cid:80)

(
/
i
α
=

i

β

(cid:75)

=

(cid:74)

1
+
n
u

,
1
x
=

1
u

(cid:74)

1
+
n
(cid:75)
Q
∈
)
x

,
t
(

0
≤

t

−

2
/
1
)
2i
x

(cid:75)

(cid:74)

n

∈
i

(cid:75)

(cid:74)

n

∈
i

0
≥
x

,
0
≤

t

−

1
−
)

1
−
x

i

(cid:75)

(cid:74)

n

∈
i

(cid:80)
(
n
=

t

−

1
−

|
|

x

|
|

,

(cid:75)

n

(cid:74)

1
>
p
,
0
≤

t

−
p
/
1
)
pi
x

(cid:80)

(
=

t

−
p
|
|

x

|
|

,

(cid:75)

n

(cid:74)

0
≤

t

−

|
i

x

|

0
≤

t

−

(cid:17)
y
/
i
x
e

n

(cid:75)

(cid:74)

∈
i

(cid:80)
(cid:16)

g
o
l
y

,

(cid:75)

n

(cid:74)

∈
i
,
p
x
e
K
∈
)
t

−

i

x

1
≤

i

u

n

∈
i

,
1
,
i

u
(

(cid:80)

(cid:75)

(cid:74)

n

∈
i

(cid:80)
=

(cid:80)

(
=

t

−

1
|
|

x

|
|

t

−

2
|
|

x

|
|

,

(cid:75)

n

(cid:74)

∈
i
,
2

Q
∈
)
(cid:75)
i

x
(cid:74)

,
i

u
(

i

u

n

∈
i

(cid:80)
=

t

0
>
x

,
0
≤

|
t
|

−
n
/
1
)
i

x

n

(cid:75)

(cid:74)

∈
i

(cid:81)

(

,
}
n

,

.

.

.

,
2
{
∈
i
,

,

0
>
x

,
0
≤

|
t
|

−

i

1
=

i

α

(cid:75)

(cid:74)

n

∈
i

i

α
x

(cid:80)
,
(cid:75)
0
(cid:74)
>
α

n

∈
i

(cid:81)

,
}
n

,

.

.

.

,
2
{
∈
i
,
)
j

α

t

(cid:74)

1
+
n
(cid:75)
Q
∈
)
x

,
t
(

0
≤

t

−

2
/
1
)
2i
x

1
>
p
,
0
≤

t

−
p
/
1
)
pi
x

∈
i
,

p
/
1
3
P
∈
)
i

i

u

n

∈
i

x

,
t
,
i

u
(

(cid:80)
=

t

i
/
1
−
1
3
P
∈
)
1
+
u

i

(cid:74)

(cid:75)

,
i

x

,
i

u
(

,
i
β
−
1
3
P
∈
)
1
+
u

i

,
i

x

,
i

u
(

t

=

1
+
n
u

,
1
x
=

1
u

∈
i
,
3r

(cid:75)

Q
∈
(cid:74)
)
t
,
i

x

,
i

u
(

i

u

n

∈
i

(cid:80)
=
2
/
t
n

i

∈
j

(cid:80)

(
/
i
α
=

i

β

(cid:75)

=

(cid:74)

1
+
n
u

,
1
x
=

1
u

0
>
x

,
0
≤

t

−

1
−
)

1
−
x

i

n

(cid:75)

(cid:74)

∈
i

(cid:80)
(
n
=

t

−

1
−

|
|

x

|
|

0
>
x

,
0
≤

|
t
|

−
n
/
1
)
i

x

(cid:75)

n

(cid:74)

∈
i

(cid:81)

(

,

0
>
x

,
0
≤

|
t
|

−

i

1
=

i

α

(cid:75)

(cid:74)

n

∈
i

i

α
x

(cid:80)
,
(cid:75)
0
(cid:74)
>
α

n

∈
i

(cid:81)

0
≤

t

−

|
i

x

|

0
>
x

,
0
≤

t

−
)
x
/
1
+
1
(
g
o
l

0
≤
d
+
x
(cid:62)
c
−

2
|
|

b
+
x
A

|
|

0
≤

t

−

(cid:17)

i
x
e

(cid:75)

n

(cid:74)

∈
i

(cid:80)
(cid:16)

g
o
l

n

(cid:75)

(cid:74)

(cid:75)

(cid:74)

n

∈
i

(cid:75)

(cid:74)

n

∈
i

∈
i

(cid:80)
=

t

−

1
|
|

x

|
|

(cid:80)

(
=

(cid:80)

(
=

t

−

2
|
|

x

|
|

t

−
p
|
|

x

|
|

p
x
e
K
∈
)
t
,

x

,
1
(

0
≤

t

+
)
x
(
g
o
l

x

Z
∈
b
,
a
,
0
>
b
≥
a
,
0
>
x

,
0
≤

t

−

b
/
a
x

0
>

1
a
,
0
≤

t

−
n
n
x
a
·

·

·

1
x
1
a

0
≥
x

,
0
≤

t

−
x
e
x

1
>
x

,
0
≤

t

−
)
x
(
g
o
l
/
1

0
≤

t

−
)
x
e
+
1
(
g
o
l

0
≤
)
x
(
g
o
l

−

t

0
≤

t

−
x
e

0
≤

t

−
)
)
x
(cid:62)
θ
−
e
+
1
(
/
1
(
g
o
l

−

13

.
e
l
b
a
i
r
a
v

e
v
i
t
c
e
p
s
r
e
p

e
h
t

s
i

]
1
,
0
[

∈
y

.

n
o
i
t
a
l
u
m
r
o
f
e
r

c
i
n
o
c

e
h
t

r
o
f

d
e
d
d
a

s
e
l
b
a
i
r
a
v

l
a
n
o
i
t
i
d
d
a

r
o
f

d
n
a
t
s

v
,

u

d
n
a

,
s
e
l
b
a
i
r
a
v

e
r
a
R
∈
t

d
n
a

n
R
∈
x

,
s
r
e
t
e
m
a
r
a
p

r
o
t
c
e
v

e
r
a

θ
,

β

,

α

,
s
r
e
t
e
m
a
r
a
p

r
a
l
a
c
s

r
o
f

d
n
a
t
s

p
,
d
,
c
,
b
,
a

s
l
o
b
m
y
S

]
5
1
[

t
e
e
h
s
n
a
e
l
C
g
n
i
l
e
d
o
M

c
i
n
o
C
e
h
t

y
b

d
e
c
n
e
u
ﬂ
n
i

y
l
i
v
a
e
h

s
i

e
l
b
a
t

s
i
h
T

and used the ε-approximation (A.18). However, the results proved that, in
general, the numerical challenges associated with the perspective function
were better handled using the approximation in (A.19). Hence, we do not
include the results of the direct implementation of the perspective function
or the approximation given by (A.18), and only present those from using the
approximation in (A.19) in this manuscript. However, the interested reader
can ﬁnd the complete results in the online repository.

The mixed-integer Big-M and Hull reformulations of some of these in-

stances are present in the benchmarking libraries MINLPLib [63] and MINLP.org [64].
They have been widely used for MINLP solver benchmarks [6, 42, 65, 66].
This applies in particular for the PSE applications, Constrained Layout
(CLay*), Process Networks (proc*), and Retroﬁt Synthesis instances (RSyn*
and Syn*). This motivates the study on these well-known instances.

Moreover, there has been recent interest from the Machine Learning
(ML) community in using rigorous methods for non-convex optimization,
contrary to heuristics based on convex relaxations. Even considering the
performance cost of the rigorous methods, the optimal solution to the orig-
inal non-convex optimization problem is informative and valuable within
an ML framework [67]. Finding the optimal values of the parameters of a
probability distribution such that a likelihood estimator is maximized, i.e.,
training, is known as Expectation-Maximization (EM) in ML [68]. When
the data labels are incomplete, the general problem can be stated as learning
from weakly labeled data [69]. While performing the training, the assign-
ment of the labels is naturally representable through disjunctions, giving rise
to mixed-integer programs. For example, there has been a recent interest
in tackling the clustering problem using mixed-integer programming [67].
Optimally guaranteed solutions to a problem similar to 4.4 leads to bet-
ter results measured by the performance of the ML model arising from the
clustering compared to local-optimization approaches to the EM problem.
The ML instances on k-means clustering (kClus*) and logistic regression
(LogReg*) are inspired on problems proposed in the literature but are ran-
domly generated for this manuscript.

The following results are presented in two subsections, one considering
“quadratic” problems that can be formulated using second-order and rotated
second-order cones, and the second one with problems modeled through
the exponential cone. Each formulation includes linear constraints, which
can be managed by both gradient-based and conic mixed-integer convex
programming solvers. All the results from this manuscript are available in

14

an open-access repository1.

It is worth mentioning that we report the nodes required by each solver.
The deﬁnition of a node might vary for every solver, and a detailed descrip-
tion of each case is not widely available. To better control these reports,
we compare SBB as a central manager for the branching procedures.
In
this last procedure, we can guarantee that each node is the solution to a
continuous convex optimization problem.

4.1 Quadratic problems

The three families of instances presented herein are the Constrained Lay-
out problem, a k-means clustering optimization problem, and randomly
generated instances. All these problems share the characteristic that the
constraints within the disjunctions are representable via second-order and
rotated second-order cones.

The mixed-integer reformulations of these problems were implemented
as in Big-M and HR, both the HR-ε and HR-Cone. Notice that in the case
of second-order cone, the explicit deﬁnition of the cone can be replaced by
the inequality [28]

x2 − ty ≤ 0 ⇐⇒

(cid:112)

(2x)2 + (y − t)2 ≤ y + t,

(4.1)

that avoids the variable multiplication ty and improves the performance
of gradient-based solvers like IPOPT and KNITRO. When implementing
this alternative to the exact representation of the perspective function, it
improves the performance of KNITRO slightly, at the expense of a signiﬁcant
decrease in BARON’s performance. Therefore, the implementation results
are left out of this manuscript, although they are included in the repository
for reference.

The examples in this section had constraints in their disjunctions directly
identiﬁed as a cone by MOSEK in the GAMS interface. This might not be
the general case, with the cones needing to be explicitly written for MOSEK
to process them. This allowed the Big-M instances to be written in their
algebraic form. Simultaneously, the HR reformulation required the explicit
introduction of additional constraints for the conic form to be accepted
by the GAMS-MOSEK interface. CPLEX, on the other hand, can identify
and transform certain general quadratic constraints into general and rotated
second-order cones automatically.

Below we present the examples considered as convex quadratic GDPs.

1https://github.com/bernalde/conic_disjunctive

15

4.1.1 Constrained layout problem

The constrained layout problem is concerned with the minimization of the
connection costs among non-overlapping rectangular units. These units need
It can be formulated as the
to be packed within a set of ﬁxed circles.
following convex GDP [50]:

min
δx,δy,x,y,W,Y

(cid:88)

i,j∈N

cij(δxij + δyij)

s.t. δxij ≥ xi − xj
δxij ≥ xj − xi
δyij ≥ yi − yj
δyij ≥ yj − yi
(cid:34)
Y 1
ij
xi + Li/2 ≤ xj − Lj/2
(cid:34)

Y 3
ij
yi + Hi/2 ≤ yj − Hj/2


∨

∨
t∈T

(cid:34)

(cid:35)

∨

(cid:35)

(cid:35)

Y 2
ij
xj + Lj/2 ≤ xi − Li/2
(cid:34)

Y 4
ij
yj + Hj/2 ≤ yi − Hi/2

∨










Wit
(xi + Li/2 − xct)2 + (yi + Hi/2 − yct)2 ≤ r2
t
(xi + Li/2 − xct)2 + (yi − Hi/2 − yct)2 ≤ r2
t
(xi − Li/2 − xct)2 + (yi + Hi/2 − yct)2 ≤ r2
t
(xi − Li/2 − xct)2 + (yi − Hi/2 − yct)2 ≤ r2
t












(cid:89) Y 4
ij

(cid:89) Y 3
ij

(cid:89) Y 2
ij
Wit

Y 1
ij
(cid:89)
t∈T
0 ≤ xi ≤ xu
i
0 ≤ yi ≤ yu
i
δxij, δyij ∈ R+
xi, yi ∈ R
ij, Y 4
ij, Y 3
ij, Y 2
Y 1
Wit ∈ {F alse, T rue}

ij ∈ {F alse, T rue}

i ∈ N, t ∈ T
(4.2)
where the coordinate centers of each rectangle i ∈ N are represented through
variables xi, yi, the distance between two rectangles i, j ∈ N, i < j is given
by variables δxij and δyij, and cij is the cost associated with it. The ﬁrst

16

i, j ∈ N, i < j

i, j ∈ N, i < j

i, j ∈ N, i < j

i, j ∈ N, i < j

(cid:35)

i, j ∈ N, i < j

,

i ∈ N

i, j ∈ N, i < j

i ∈ N

i ∈ N

i ∈ N

i, j ∈ N, i < j

i ∈ N

i, j ∈ N, i < j

disjunction allows for the non-overlapping of the rectangles, while the second
one ensures that each rectangle is inside of one of the circles t ∈ T , whose
radius is given by rt and center speciﬁed by coordinates (xct, yct).

The constraints in the second disjunction are representable through a

quadratic cone as follows:

(xi ± Li/2 − xct)2 + (yi ± Hi/2 − yct)2 ≤ r2
t
⇐⇒ (rt, xi ± Li/2 − xct, yi ± Hi/2 − yct) ∈ Q3.

(4.3)

Seven diﬀerent problem instances are deﬁned through the variation of
the number of circular areas to ﬁt in the rectangle |T | and the number of
possible rectangles N , which each instance being denoted CLay|T||N|.

4.1.2

k-means clustering

The k-means clustering problem is an optimization problem that appears
in unsupervised learning. This problem minimizes the total distance of
a set of points to the center of k clusters, varying the center’s position
and the assignment of which center determines the distance to each point.
This problem is solved usually through heuristics, without guarantees of the
quality of the solution.

Recently, Papageorgiou and Trespalacios [70] proposed a GDP formu-
lation for the k-means clustering problem, also used in [71]. The problem
formulation reads as follows:

min
c,d,Y

s.t.

(cid:88)

di

i∈N
ck−1,1 ≤ ck,1,

k ∈ {2, . . . , |K|}



(cid:95)

k∈K




di ≥

Yik
(pij − ckj)2

(cid:88)




 ,

j∈D

i ∈ N, k ∈ K

(4.4)

i ∈ N

(cid:89)k∈K Yik,
d ∈ R|N |
+
c ∈ R|K|×|D|
Yik ∈ {F alse, T rue},

i ∈ N, k ∈ K,

where N is the set of points given in |D| dimensions, whose coordinates are
given by p ∈ R|N |×|D|. The variables are the center coordinates c, and the
squared distances of each point to its closest center are denoted by d. The

17

ﬁrst constraint is a symmetry-breaking constraint. An arbitrary increasing
ordering in the ﬁrst dimension is taken for the centers. The disjunctions
determine with which center k will the distance to point i be computed,
given that Yik = T rue.

The constraint for each disjunction i ∈ N, k ∈ K is naturally repre-

sentable as a rotated second-order cone

di ≥

(cid:88)

j∈D

(pij − ckj)2 ⇐⇒ (0.5, di, pi1 − ck1, . . . , pi|D| − ck|D|) ∈ Q2+|D|

r

.

(4.5)
We vary the number of clusters |K| ∈ {3, 5}, the number of given points
|N | ∈ {10, 20}, and the dimensions of those points |D| ∈ {2, 3, 5} leading
to instance kClus |K| |N| |D| x. x in this case denotes one of the random
instances generated. For this problem, we include 10 instances for each case
varying the point coordinates pij ∈ U [0, 1], i ∈ N, k ∈ K.

4.1.3 Random examples

We generate random quadratic GDP problems to test further the reformu-
lations proposed in this manuscript. The random quadratic GDP problems
are of the form,

c(cid:62)x

min
x,Y

(cid:95)

s.t.



Yik



(cid:88)

(cid:16)




(cid:48)
ijkx2
a

j + a

ijkxj

(cid:48)(cid:48)

(cid:17)

+ a

(cid:48)(cid:48)(cid:48)

ik ≤ 1


 ,

k ∈ K

j∈

k ∈ K

i∈Dk
n
(cid:74)
(cid:75)
(cid:89)i∈Dk Yik,
xl ≤ x ≤ xu
x ∈ Rn
Yik ∈ {F alse, T rue},

k ∈ K, i ∈ Dk,

(SOCP-rand-GDP)
where the lower and upper bounds of variables x, xl and xu, are set at -100
and 100, respectively.

The constraint in each disjunct is representable as a rotated second-order

18

cone,

(cid:88)

(cid:16)

a

(cid:48)

ijkx2

j + a

(cid:48)(cid:48)

ijkxj

(cid:17)

(cid:48)(cid:48)(cid:48)

+ a

ik ≤ 1

j∈

n
(cid:74)
(cid:75)
⇐⇒

(cid:18)

0.5, t,

(cid:113)

a(cid:48)
ijkxj, . . . ,

(cid:19)

(cid:113)

a(cid:48)
inkxn

∈ Qn+2
r

; t +

(cid:88)

a

j∈D

(cid:48)(cid:48)

ijkxj + a

ik ≤ 1.

(cid:48)(cid:48)(cid:48)

(4.6)
The diﬀerent random instances were generated by varying the number
of disjunctions |K| ∈ {5, 10}, the number of disjunctive terms at each dis-
junction |Dk| ∈ {5, 10}, and the dimensions of the x variables n ∈ {5, 10}
leading to instance socp random |K| |Dk| n x. x denotes the index of
the random variable generated. 10 instances are generated for each case
varying the parameters within bounds [l, u] by sampling the random uni-
form distributions U [l, b] as follows: a(cid:48)
ijk ∈ U [−1, 1], a(cid:48)(cid:48)(cid:48)
ik ∈
. We also include
U [−1, 1], cj ∈ U [−1000, 1000], i ∈ Dk, k ∈ K, j ∈
(cid:75)
instances socp random 2 2 2 x, that represent the illustrative example in
[70].

ijk ∈ U [0.01, 1], a(cid:48)(cid:48)
n
(cid:74)

Notice that the k-means clustering formulation is a particular case of
In particular, if we set a(cid:48) = 1, a(cid:48)(cid:48) =

these randomly generated GDPs.
2p, a(cid:48)(cid:48)(cid:48) = p(cid:62)p, c = 1 we recover the k-means clustering problem.

4.1.4 Results

We generate a total of 217 GDP problems, which are transformed through
a Big-M and HR, this last using both HR-ε and HR-Cone. The main results
are presented in Table 2, where the solution times and nodes for the Big-M,
HR, and HR-Cone reformulations using diﬀerent commercial solvers are
included. Consider that the HR-ε formulation introduces non-linearities in
the formulation, preventing CPLEX and MOSEK from addressing it.

In general, we can observe that CPLEX applied to the Big-M reformu-
lation has the best performance for the CLay* and kClus* instances when
considering runtime. BARON applied to the same Big-M formulation re-
turns the optimal solution with the least number of explored nodes for the
constrained layout problems. This shows how the mature solvers for mixed-
integer programming have implemented useful heuristics to work with Big-M
formulation; the ubiquity of these formulations among practitioners moti-
vates their development of techniques to work with these problems eﬃciently.
An example is that CPLEX identiﬁes the Big-M formulation and internally
treats its constraints through specialized branching rules derived from indi-

19

cator constraints [32]2.

When comparing only the Big-M formulation solution, BARON solves
all the problems with the least number of nodes for all instances. This
corresponds to the main focus of BARON on solving more “meaningful”
nodes for the problem. However, it might incur a performance cost [27]. This
observation also appears when comparing all the HR formulation results,
where BARON required the fewest number of nodes. This applied to the
HR-ε and the HR-Cone formulations.

In terms of runtime, when comparing the HR formulations, we observe
that CPLEX is the fastest solver for the CLay* instances, while MOSEK-
IP is the one for the kClus* and socp random* problems. Notice that
either of these solvers could be applied to the HR-ε formulation, proving
that using a conic formulation of the HR problem opens the possibility
of using solvers that can better exploit the problem structure. Even for
general nonlinear solvers, such as BARON, the use of the conic reformulation
provides a performance improvement, given that the lifted reformulation
can be exploited for tighter relaxations within the solver [57]. On the other
hand, solvers based on nonlinear B&B, where each node is solved with a
general NLP algorithm such as interior-point methods, such as KNITRO,
can worsen their performance when using the conic reformulation. The non-
diﬀerentiability of the cones, together with the larger subproblem sizes, can
cause such a negative impact. This can be alleviated by taking advantage
of the conic structure, something that KNITRO has implemented as part of
their presolve capabilities [29]3.

A better view of the general performance of the diﬀerent solvers is given
in Figure 1. These ﬁgures present performance proﬁles accounting for the
number of problems solved to a given gap of the optimal solution (0.1% in
this case) within a time or node limit. In general, as seen in the node proﬁle
of Figure 1, the performance concerning nodes is superior for all solvers when
using the HR, except for BARON. This is expected given the tightness of
this formulation. Moreover, in terms of solution time, both algorithms used
in MOSEK improve their performance when using a HR compared to the
Big-M case. This shows that when modeling disjunctive conic programs,
the Hull reformulation is preferable for this solver. The other solvers worsen
their performance when using the extended formulations in terms of solution
time.

Of the total 217 instances, the solver that solved the most instances

2IBM documentation
3KNITRO v11 presentation

20

to within 0.1% of the best-known solution was MOSEK-IP with 191, both
using the Big-M and HR-Cone formulations. The alternative that solved the
fewest instances was KNITRO applied to the HR-Cone formulation, solving
160.

4.2 Exponential problems

As examples of problems representable using the exponential cone Kexp,
we present four families of problems: Process networks, Retroﬁt Synthe-
sis Problems, Logistic Regression, and randomly generated instances. The
GAMS-MOSEK interface does not directly identify the exponential cone;
therefore, we include algebraic and extended conic formulations, Big-M and
Big-M-Cone respectively for Big-M. HR and HR-Cone are also tested for
these problems, denoted as HR-ε using the approximation in (A.19) and HR-
Cone formulation through the extended formulation required by MOSEK for
the exponential cones to be correctly identiﬁed. The solver CPLEX was not
used for these experiments since it has no capabilities to handle general
nonlinear constraints beyond quadratics or exponential cones.

4.2.1 Process Networks

In the process network problem, we seek to maximize the proﬁt from a pro-
cess by deciding the equipment to be installed to fabricate some valuable
product subject to material ﬂows between the equipment pieces. The total
cost is computed from the cost of raw materials and equipment subtracted
from the product’s sales. Alternative equipment pieces might induce a trade-
oﬀ in terms of cost and production, deﬁning the problem’s constraints. This
classical problem in process design usually considers complex models de-
scribing each equipment piece. For this simpliﬁed case [52, 72], we assume
input-output correlations for each equipment described by an exponential
function. This is a simpliﬁcation that still accounts for the non-linearity in-
herent to chemical processes. The constraint considered here is a relaxation
of the original equality constraints involving nonlinear terms, which is still
valid given the direction of the optimization [52, 72]. The problem can be

21

P
D
G

t
n
e
r
e
ﬀ
i
d

e
h
t

g
n
i
s
u

s
e
c
n
a
t
s
n
i

c
i
t
a
r
d
a
u
q

r
o
f

e
l
ﬁ
o
r
p

e
c
n
a
m
r
o
f
r
e
p

)
t
h
g
i
r
(

s
e
d
o
n

d
n
a

)
t
f
e
l
(

e
m
T

i

:
1

e
r
u
g
i
F

.
s
r
e
v
l
o
s

l
a
i
c
r
e
m
m
o
c

d
n
a

s
n
o
i
t
a
l
u
m
r
o
f
e
r

22

2468050100150200Instancessolvedwithin0.1%ofoptimalsolutionSolutiontime[s]103010030010003600BARONBig-MBARONHR-ConeBARONHR-εCPLEXBig-MCPLEXHR-ConeKNITROBig-MKNITROHR-ConeKNITROHR-εMOSEK-IPBig-MMOSEK-IPHR-ConeMOSEK-OABig-MMOSEK-OAHR-Cone2468050100150200Nodes101102103104105106modeled through the following convex GDP:

min
c,x,Y

s.t.

(cid:88)

k∈K
(cid:88)

j∈J

ck +

(cid:88)

j∈J

pjxj

rjnxj ≤ 0, n ∈ N

Yik

(cid:88)

dijk(exj /tijk − 1) −








(cid:95)

i∈Dk

j∈Jik

ck = γik

(cid:88)

j∈Jik

sijkxj ≤ 0








,

k ∈ K

(Proc)

k ∈ K

(cid:89)i∈Dk Yik,
Ω(Y) = T rue
ck, xj ∈ R+,
Yik ∈ {F alse, T rue},

j ∈ Jik, i ∈ Dk, k ∈ K

i ∈ Dk, k ∈ K.

In problem Proc, ck is the cost associated to the equipment chosen in
disjunction k ∈ K. The ﬂow quantity xj is deﬁned for each possible stream
j ∈ J, with an associated proﬁt. The global mass balances are described for
each node in the process n ∈ N by the linear constraint (cid:80)
j∈J rjnxj ≤ 0,
where rjn is the coeﬃcient of the mass balance for ﬂow j. Each disjunction
k ∈ K presents the choice between i ∈ Dk equipment alternatives. When
choosing each alternative (Yik = T rue) the corresponding input-output con-
straint in terms of the ﬂows j ∈ Jik and parameters dijk, tijk, sijk is active,
and the cost associated to that disjunction ck takes the value γik. The
topology of the superstructure and extra logical constraints are included in
Ω(Y) = T rue.

An interesting alternative is where the sets Dk yield a single element, and
there is a Disjunction for every equipment piece. This yields the following

23

formulation:

min
c,x,Y

s.t.

(cid:88)

k∈K
(cid:88)

j∈J


ck +

(cid:88)

j∈J

pjxj

rjnxj ≤ 0, n ∈ N

Yk

(cid:88)

djk(exj /tjk − 1) −






j∈Jk

ck = γk

(cid:88)

j∈Jk

sjkxj ≤ 0










¬Yk

∨

xj = 0,




j ∈ Jk

ck = 0




 ,

k ∈ K

Ω(Y) = T rue
ck, xj ∈ R+,
Yk ∈ {F alse, T rue},

j ∈ Jk, k ∈ K

k ∈ K.

(Procb)
This case allows several pieces of equipment to be built within each alterna-
tive as long as the objective is maximized. The fact that it represents the
disjunction of a convex set and a single point means that the HR formula-
tion will yield the convex hull of the union of these sets without requiring
an extended formulation [28, Corollary 1].

The exponential input-output constraint can be formulated in conic form

as follows:
(cid:88)

dj(exj /tj −1)−

(cid:88)

j∈J

j∈J

sjxj ≤ 0 ⇐⇒

(cid:88)

j∈J

(cid:88)

djuj−

j∈J

sjxj ≤ 0; (tjuj+1, tj, xj) ∈ Kexp.

(4.7)

We include 5 variants of the process problem with |K| ∈ {21, 31, 36, 48, 100}

possible units. The ﬁrst four cases are taken from [50, 52, 55]. The last
case was generated for this manuscript, given that commercial solvers can
trivially solve the smaller cases. The instances are denoted process|K| or
process|K|b when implementing problems Proc and Procb, respectively.
For the new instance, the parameters are chosen from the uniform distribu-
tions dijk ∈ U [1, 1.2], tijk ∈ U [1, 1.3], sijk ∈ U [0.8, 1.2], γik ∈ U [2, 3]

4.2.2 Simultaneous Retroﬁt and Synthesis problems

A generalization of the process network problem is the simultaneous retroﬁt
and synthesis problem. In this problem, there is an existing process net-
work that needs to be upgraded. To do so, one can consider either installing
new equipment or improving the existing one. The potential of this pro-
cess is to be maximized given a budget constraint. This problem was ﬁrst

24

proposed by Jackson and Grossmann [73] and its GDP implementation was
done by Sawaya [50]. In the synthesis problem, the problem is equivalent
to Proc with an extra index for the time periods when the problem is consid-
ered. The retroﬁt synthesis problem contains additional linear constraints
and disjunctions to represent the conditions associated with retroﬁtting the
existing process units. The complete formulation is available in [42].

The instances solved here are parametric to the number of synthesis
processes |S| ∈ {5, 10, 15, 30, 40}, the number of retroﬁt units |R| ∈ {8} and
the number of time periods considered |T | ∈ 1, 2, 3, 4, leading to instances
Syn|S|M|T| and RSyn|R||S|M|T|.

4.2.3 Logistic Regression

Logistic regression is a training technique for binary classiﬁcation. In this
training task, given a set of D-dimensional points pi ∈ RD, i ∈ I we will
assign a binary classiﬁer y ∈ {0, 1} to each point in the case that they lie
above or below a hyperline given by θ(cid:62)pi. This line needs to be determined
such that the logistic cost function is minimized. The logistic cost function
log(1/(1 + e−θ(cid:62)pi+θ0)) can be interpreted as the probability of a point be-
longing to the class given by y = 1. This problem can be modeled as a GDP
by encoding the binary classiﬁer y in a Boolean variable Y and writing the
constraints within the disjunctions as follows:

min
θ,t

(cid:88)

ti

i∈I


s.t.

ti ≥ log





Yi

(cid:16)

1 + e−θ(cid:62)pi+θ0

θ(cid:62)pi ≥ 0

(cid:17)







∨

i ∈ I

Ω(Y) = T rue
ti ∈ R+,
θ0 ∈ R
θj ∈ R,
Yk ∈ {F alse, T rue},

D
(cid:74)

j ∈

(cid:75)

i ∈ I,







ti ≥ log

¬Yi
1 + eθ(cid:62)pi+θ0

(cid:16)

(cid:17)







,

i ∈ I

θ(cid:62)pi ≤ 0

(LogReg)
where the logical constraints Ω(Y) = T rue can enforce symmetry-breaking
constraints to help in the solution process or other additional constraints
related to the regression task.

The logistic regression constraint can be expressed as the following conic

25

inequality:

t ≥ log

(cid:16)

1 + eθ(cid:62)pi+θ0

(cid:17)

⇐⇒ u+v ≤ 1; x = θ(cid:62)pi+θ0; (v, 1, −t) ∈ Kexp; (v, 1, x−t) ∈ Kexp,

(4.8)

and equivalently for the complementary disjunction.

In the examples presented herein, we generate ten random instances for
each one of the following settings. We set the value of the points’ dimen-
sions within D ∈ {2, 5, 10}, |I| = 20, and we choose to generate 2 clusters
of normally distributed points being at a Mahalanobis distance [74], i.e.,
a distance metric between points and distributions, such that the points
are at most σ ∈ {1, 2} standard deviations away from the center of the
distributions. This is computed via an inverse χ-squared distribution with
D degrees of freedom computed at probabilities {0.68,0.95} corresponding
to Mahalanobis distances of σ ∈ {1, 2} in the one-dimensional case. This
distance is then divided in 2
D, such that we place the centers of the distri-
butions at opposite corners of the D-dimensional hypercube. As mentioned
in [67], a natural advantage of the mathematical programming approach
to the training tasks in ML, compared to the heuristics, is that additional
constraints can be enforced through the problem formulation. In this case,
within Ω(Y) = T rue, we force the split between the data points to be within
45% and 55% and also force the farthest two points in the set from the origin
to belong to opposite classes as a symmetry breaking constraint. Instances
generated by this method are denominated LogReg D |I| σ x.

√

4.2.4 Random examples

Besides the applications-related instances listed above, we generate random
instances whose disjunctive constraints can be represented using Kexp. The

26

form of the GDP is:

c(cid:62)x

min
x,Y,z

(cid:95)

s.t.



Yik




(cid:48)

a

ik exp

(cid:88)

a

(cid:48)(cid:48)(cid:48)(cid:48)

ijkxj ≤ a

ikz + a

(cid:48)(cid:48)

(cid:48)(cid:48)(cid:48)
ik

n
j∈
(cid:74)
(cid:75)
k ∈ K

i∈Dk
(cid:89)i∈Dk Yik,
xl ≤ x ≤ xu
z ≤ zu
x ∈ Rn
z ∈ R
Yik ∈ {F alse, T rue},




 ,

k ∈ K

(EXP-rand-GDP)

k ∈ K, i ∈ Dk,

where the upper and lower bounds of variables x, xl and xu, are set at 0
and 10, respectively. An upper bound for z is given by

zu = max

i∈Dk,k∈K

(cid:34) a(cid:48)

ik exp (cid:80)

a(cid:48)(cid:48)(cid:48)(cid:48)
ijkxl

j − a(cid:48)(cid:48)(cid:48)

ik

(cid:35)

.

(4.9)

n
j∈
(cid:75)
(cid:74)
(a(cid:48)(cid:48)
ik)2

The exponential constraint can be written equivalently as a logarithmic

constraint and in a conic form as follows:

(cid:48)(cid:48)(cid:48)(cid:48)

(cid:48)(cid:48)

ijkxj ≤ a
a

ikz + a

(cid:48)(cid:48)(cid:48)
ik

(cid:48)
ik exp
a

(cid:88)

j∈

n
(cid:75)
(cid:74)
⇐⇒ log(a

(cid:88)

(cid:48)

ik) +

j∈

n
(cid:75)
(cid:74)

(cid:48)
⇐⇒ a

ikvik ≤ a

(cid:48)(cid:48)

ikz + a

(cid:48)(cid:48)(cid:48)

ik;

(cid:48)(cid:48)(cid:48)(cid:48)

ijkxj ≤ log(a
a

ikz + a

ik)

(cid:48)(cid:48)

(cid:48)(cid:48)(cid:48)

(4.10)



vik, 1,

(cid:88)

j∈

n
(cid:75)
(cid:74)



a

(cid:48)(cid:48)(cid:48)(cid:48)

ijkxj

 ∈ Kexp.

The generation of the random exponential GDPs use the same param-
eters as the random quadratic GDPs, i.e., |K| ∈ {5, 10}, Dk ∈ {5, 10}, and
n ∈ 5, 10. Ten instances, denoted exp random |K| |Dk| n x, are gener-
ated for each combination, besides a simple case with exp random 2 2 2 x
and the extra parameters are drawn from uniform distributions as a(cid:48)
ik ∈
U [0.01, 1], a(cid:48)(cid:48)
ik ∈ U [0.01, 1], a(cid:48)(cid:48)(cid:48)(cid:48)
Dk, k ∈ K, j ∈

ik ∈ U [0.01, 1], a(cid:48)(cid:48)(cid:48)

ijk ∈ U [0.01, 1], cj ∈ U [−1, −0.01], i ∈

n
(cid:74)

.
(cid:75)

27

4.2.5 Results

We solve 208 GDP instances that are representable through the exponen-
tial cone. These instances are transformed through Big-M and HR. Since
the exponential cone is not automatically identiﬁed through the constraints
deﬁning them, the explicit description of the cone was required, giving rise to
two diﬀerent versions of each reformulation. The Big-M results are summa-
rized in Table 3 and the HR results are included in Table 4 in the Appendix.
Depending on the family of instances, a given combination of solver and
reformulation was the best in runtime. For the LogReg* and RSyn* instances,
MOSEK-OA was the best solver when applied to the HR-Cone formulation.
The other algorithm for MOSEK, MOSEK-IP, was the best performance
solver for the proc* instances, with the outstanding solution of the proc 100
problems in less than 5 seconds when most other approaches could not solve
it within the 1-hour time limit. The closest non-conic approach was BARON
applied to the original Big-M formulation. A ≈ 80x and 6x speedup was
obtained with instances proc 100 and proc 100b, respectively. BARON
applied to the Big-M formulation was the best among all solvers for the Syn*
instances. This approach was the fastest for the exp random* instances,
with a pretty similar performance achieved when applied to the Big-M-Cone
formulation. This was not the case in general, where the conic formulation of
the Big-M problem led to considerable performance degradation for BARON
when solving the LogReg* and Syn* instances. When considering the Big-
M-Cone formulation, we see that both KNITRO and MOSEK-IP time out
for most instances.

When considering the HR, using a conic formulation severely aﬀected
the performance of BARON and KNITRO. This was a sign of the challenges
that gradient-based methods encounter when facing exponential constraints
such as the ones appearing in the conic reformulation. As an example, in
instance RSyn0805M02, the HR-Cone formulation led to KNITRO failing to
evaluate the gradients at every B&B node, given function overloads by the
evaluation of exponential functions. BARON, running its default version
with a dynamic NLP subsolver selection, could not ﬁnd a solution to this
problem either, while a solver that takes advantage of the exponential cone
such as MOSEK solved the problem in 2 seconds.

As with the quadratic instances, the most eﬃcient solver in terms of
nodes explored to ﬁnd the optimal solution is BARON, both in the Big-M
and HR.

Performance proﬁles are presented in Figure 2 for the exponential in-
In the time performance proﬁle in Figure 2, we observe a clear

stances.

28

dominance of both MOSEK algorithms applied to the HR-Cone formula-
tion, particularly within the ﬁrst seconds. Towards the end of the time
limit, BARON applied to both the Big-M and HR formulations solves more
instances to optimality. BARON applied to the HR-ε approximation can
solve all the exponential problems within the time limit. Except for BARON,
all solvers improve their performance when comparing the Big-M and HR
formulations. Having mentioned that, both BARON and KNITRO have
diﬃculties when solving the HR-Cone formulation, with the extreme case of
BARON failing on all instances.

When observing the node performance proﬁle for the exponential in-
stances in Figure 2, the HR formulations require fewer nodes than the Big-M
formulations, except for BARON. BARON proves that it generates strong
relaxation nodes, requiring fewer to solve the problems, clearly dominating
in this sense the other solvers. A similar observation was made regarding
the quadratic instances.

4.3 Controlling the Branch & Bound search

The implementations of modern solvers include an arsenal of heuristic meth-
ods to tackle more eﬃciently the challenging optimization problems at hand.
Although this leads to performance improvements, it obscures the eﬀect of
better formulations when solving the optimization problems. To that end,
we consider using the Simple Branch& Bound (SBB) implementation in
GAMS and solve the subproblems using both KNITRO and MOSEK. These
subproblems are continuous optimization problems, while SBB manages the
discrete variables’ exploration. We present below two performance proﬁles
in Figure 3 for all the problems solved in this manuscript, mainly including
results of SBB-KNITRO and SBB-MOSEK.

In Figure 3 we observe the performance proﬁles of the SBB implemen-
tation against the number of continuous convex subproblems solved. The
ﬁrst observation is that the HR tight formulation allows a more eﬃcient ex-
ploration of the subproblems solves than the Big-M formulation. The conic
formulation of HR aﬀects the performance of KNITRO when addressing the
subproblems, leading to poor performance in this case. Moreover, given
the same branching rules, the Big-M and HR formulations require approx-
imately the same number of subproblems solved using the original or the
extended formulations arising from the conic description of the problems.
This is an expected result given that the extended formulation does not
require additional binary variables.

Although the number of solved subproblems is similar, the time required

29

P
D
G

t
n
e
r
e
ﬀ
i
d

e
h
t

g
n
i
s
u

s
e
c
n
a
t
s
n
i

l
a
i
t
n
e
n
o
p
x
e

r
o
f

e
l
ﬁ
o
r
p

e
c
n
a
m
r
o
f
r
e
p

)
t
h
g
i
r
(

s
e
d
o
N

d
n
a

)
t
f
e
l
(

e
m
T

i

:
2

e
r
u
g
i
F

.
s
r
e
v
l
o
s

l
a
i
c
r
e
m
m
o
c

d
n
a

s
n
o
i
t
a
l
u
m
r
o
f
e
r

30

2468050100150200Instancessolvedwithin0.1%ofoptimalsolutionSolutiontime[s]103010030010003600BARONBig-MBARONBig-M-ConeBARONHR-ConeBARONHR-εKNITROBig-MKNITROBig-M-ConeKNITROHR-ConeKNITROHR-εMOSEK-IPBig-M-ConeMOSEK-IPHR-ConeMOSEK-OABig-M-ConeMOSEK-OAHR-Cone2468050100150200Nodes101102103104105106to solve them varies depending on the chosen solver, as observed in Figure 3.
In this ﬁgure, we include the time performance proﬁles for the SBB alter-
natives. For reference, we include the best commercial alternative to each
reformulation. This corresponds to BARON for the Big-M and HR-ε and
MOSEK-IP for the HR-Cone formulations. The solver that solved the most
instances was BARON applied to the Big-M formulation, solving 393 out of
the 425 problems, followed by MOSEK-IP applied to the HR-Cone formu-
lation solving 390 problems. In general, MOSEK is more eﬃcient at solving
the convex subproblems compared to KNITRO. The diﬀerence is exacer-
bated in the HR formulation. An interesting observation is that the gap in
time performance between SBB and the best alternative is smaller for HR-ε
than for HR-Cone. This indicates that the eﬃcient exploitation of the conic
constraints, in this case from MOSEK, can yield considerable performance
advantages together with a tight reformulation of disjunctive constraints.

5 Conclusions, discussion and future work

This work presents the formulation of convex Generalized Disjunctive Pro-
gramming (GDP) problems using conic sets. The convex GDP problem
can be solved through a reformulation into convex Mixed-Integer Nonlinear
Programming (MINLP) problems. Two of those reformulations are covered
in this manuscript, the Big-M and Hull Reformulations. The Hull refor-
mulation of a convex GDP problem requires implementing a perspective
function, whose algebraic form is challenging for gradient-based nonlinear
optimization solvers. We present the Big-M and Hull reformulations into
Mixed-Integer Conic Programming (MICP) problems through the conic for-
mulation of the problem. The MICP problems can be eﬃciently tackled
using specialized conic solvers, which take advantage of the properties of
the conic programs. We provide a guide to reformulate common convex
constraints through conic programming. If those constraints appear inside
disjunctions, we also provide a conic representation of its perspective, allow-
ing the exact representation of the Hull reformulation.

These reformulations were tested using a large set of convex GDP prob-
lems stemming from Process Systems Engineering, Machine Learning, and
randomly generated instances. These instances were classiﬁed as quadratic
and exponential and solved through diﬀerent reformulation alternatives and
solvers. Our results show how the conic reformulation gives a systematic
and natural extended formulation of the convex MINLP problems stem-
ming from GDP. These can be exploited by solvers, allowing a more eﬃcient

31

P
D
G

t
n
e
r
e
ﬀ
i
d

e
h
t

g
n
i
s
u

s
e
c
n
a
t
s
n
i

l
l
a

r
o
f

e
l
ﬁ
o
r
p

e
c
n
a
m
r
o
f
r
e
p

)
t
h
g
i
r
(

s

m
e
l
b
o
r
p
b
u
s

d
e
v
l
o
S

d
n
a

)
t
f
e
l
(

e
m
T

i

:
3

e
r
u
g
i
F

r
e
v
l
o
s

l
a
i
c
r
e
m
m
o
c

g
n
i
m
r
o
f
r
e
p

t
s
e
b

e
h
t

e
d
u
l
c
n
i

e
w
s
e
l
ﬁ
o
r
p

e
m

i
t

e
h
t

r
o
F

.

B
B
S

h
g
u
o
r
h
t

s
r
e
v
l
o
s

d
n
a

s
n
o
i
t
a
l
u
m
r
o
f
e
r

.
n
o
i
t
a
l
u
m
r
o
f
e
r

h
c
a
e

r
o
f

s
t
l
u
s
e
r

32

24680100200300400Instancessolvedwithin0.1%ofoptimalsolutionSolutiontime[s]103010030010003600SBB-KNITROBig-MSBB-KNITROHR-ConeSBB-KNITROHR-εSBB-MOSEKBig-M-ConeSBB-MOSEKHR-ConeBARONBig-MMOSEK-IPHR-ConeBARONHR-ε24680100200300400Continuoussubproblems101102103104105solution to these problems. Among the tested approaches, we identiﬁed
that BARON solving the Big-M formulation and MOSEK solving the HR-
Conic formulation, either with IP or OA, were the most eﬃcient solvers to
tackle these convex GDP reformulated problems. In general, we show how
the conic representation of convex constraints within disjunctions can result
in an exact and more eﬃciently solvable mixed-integer representation of a
convex GDP.

The results in this paper also point to speciﬁc improvement opportuni-
ties. In the ﬁrst place, the automatic reformulation of the convex constraints
into cones is a task worth pursuing. Previous success in the quadratic case
allows commercial solvers such as CPLEX or Gurobi to automatically de-
tect conic structures and address those more eﬃciently. An extension of
these routines to exponential cones is therefore of interest. Modeling exten-
sions that allow for disjunctive programming are the natural place to include
these automatic reformulations. Approaches have been made at the mod-
eling language level, e.g., in GAMS [75] Pyomo [40] 4, and Julia 5. These
could also be made at the solver level, with indicator constraints such as in
CPLEX [32] and MOSEK [15]. These techniques have also shown potential
for the global optimization of non-convex GDP or MINLP [76], motivating
further research into it.

Interesting future directions are the exploration of conic formulations
in more advanced reformulations of GDPs, such as intermediate Big-M /
Hull formulations [71] and basic steps reformulations [52]. Moreover, conic
programming tools can be used in more advanced solution methods of GDP
than the recasting of the problem into MINLP. Examples of those methods
are Lagrangean decomposition based on the disjunctive structure of the
problem [70] or logic-based algorithms [40]. The use of conic programming
has already shown the potential speedup for mixed-integer programming
solutions [24], and expanding those ﬁndings to GDP is of great interest.

Acknowledgments

The authors gratefully acknowledge ﬁnancial support from the Center of
Advanced Process Decision-making and from the US Department of En-
ergy, Oﬃce of Fossil Energy’s Crosscutting Research, Simulation Based En-
gineering Program through the Institute for the Design of Advanced Energy
Systems (IDAES).

4https://pyomo.readthedocs.io/en/latest/modeling_extensions/gdp/
5https://github.com/hdavid16/DisjunctiveProgramming.jl

33

References

[1] Leo Liberti. Undecidability and hardness in mixed-integer nonlinear

programming. RAIRO-Operations Research, 53(1):81–109, 2019.

[2] Francisco Trespalacios and Ignacio E Grossmann. Review of mixed-
integer nonlinear and generalized disjunctive programming methods.
Chemie Ingenieur Technik, 86(7):991–1012, 2014.

[3] Jon Lee and Sven Leyﬀer. Mixed Integer Nonlinear Programming, vol-

ume 154. Springer Science & Business Media, 2011.

[4] Leo Liberti. Mathematical Programming. Ecole Polytechnique, Paris,
2017. URL https://www.lix.polytechnique.fr/$\sim$liberti/
teaching/dix/inf580-15/mathprog.pdf.

[5] Roger Fletcher and Sven Leyﬀer. Solving mixed integer nonlinear pro-
grams by outer approximation. Mathematical Programming, 66(1):327–
349, 1994.

[6] Jan Kronqvist, David E Bernal, Andreas Lundell, and Ignacio E Gross-
mann. A review and comparison of solvers for convex MINLP. Opti-
mization and Engineering, 20(2):397–455, 2019.

[7] Robert J Dakin. A tree-search algorithm for mixed integer program-

ming problems. The Computer Journal, 8(3):250–255, 1965.

[8] Arthur M Geoﬀrion. Generalized Benders decomposition. Journal of

Optimization Theory and Applications, 10(4):237–260, 1972.

[9] Tapio Westerlund, Hans Skrifvars, Iiro Harjunkoski, and Ray P¨orn.
An extended cutting plane method for a class of non-convex MINLP
problems. Computers & Chemical Engineering, 22(3):357–365, 1998.

[10] Marco A Duran and Ignacio E Grossmann. An outer-approximation
algorithm for a class of mixed-integer nonlinear programs. Mathematical
Programming, 36(3):307–339, 1986.

[11] Aharon Ben-Tal and Arkadi Nemirovski. Lectures on modern convex op-
timization: analysis, algorithms, and engineering applications. SIAM,
2001.

[12] Fatma Kılın¸c-Karzan. On minimal valid inequalities for mixed integer
conic programs. Mathematics of Operations Research, 41(2):477–510,
2016.

34

[13] Miles Lubin, Ilias Zadik, and Juan Pablo Vielma. Mixed-integer convex
representability. In International Conference on Integer Programming
and Combinatorial Optimization, pages 392–404. Springer, 2017.

[14] Henrik A Friberg. CBLIB 2014: a benchmark library for conic mixed-
integer and continuous optimization. Mathematical Programming Com-
putation, 8(2):191–214, 2016.

[15] Mosek ApS. MOSEK modeling cookbook, 2018.

[16] Alexander Domahidi, Eric Chu, and Stephen Boyd. ECOS: An SOCP
In 2013 European Control Conference

solver for embedded systems.
(ECC), pages 3071–3076. IEEE, 2013.

[17] Chris Coey, Lea Kapelevich, and Juan Pablo Vielma. Towards practical
generic conic optimization. arXiv preprint arXiv:2005.01136, 2020.

[18] Robert J Vanderbei and Hande Yurttan. Using loqo to solve second-

order cone programming problems. Constraints, 1:2, 1998.

[19] Victor Zverovich, Robert Fourer, and AMPL Optimization. Automatic
Reformulation of Second-Order Cone Programming Problems Second-
order cone programming ( SOCP ). In INFORMS Computing Society
Conference, 2015. URL http://ampl.com/MEETINGS/TALKS/2015_01_
Richmond_2E.2.pdf.

[20] Jared Erickson and Robert Fourer. Detection and Transformation of
Second-Order Cone Programming Problems in a General-Purpose Al-
gebraic Modeling Language. Optimization Online, 2019.

[21] Michael Grant, Stephen Boyd, and Yinyu Ye. Disciplined convex pro-
gramming. In Global optimization, pages 155–210. Springer, 2006.

[22] Miles Lubin, Emre Yamangil, Russell Bent, and Juan Pablo Vielma.
Extended Formulations in Mixed-Integer Convex Programming.
In
Quentin Louveaux and Martin Skutella, editors, Integer Programming
and Combinatorial Optimization: 18th International Conference, IPCO
2016, pages 102–113. Springer, Springer International Publishing, 2016.
ISBN 978-3-319-33461-5.

[23] Miles Lubin, Emre Yamangil, Russell Bent, and Juan Pablo Vielma.
Polyhedral approximation in mixed-integer convex optimization. Math-
ematical Programming, 172(1-2):139–168, 2018.

35

[24] Chris Coey, Miles Lubin, and Juan Pablo Vielma. Outer approximation
with conic certiﬁcates for mixed-integer convex problems. Mathematical
Programming Computation, pages 1–45, 2020.

[25] Stefan Vigerske. Decomposition in multistage stochastic programming
and a constraint integer programming approach to mixed-integer non-
linear programming. PhD thesis, Humboldt-Universit¨at zu Berlin,
Mathematisch-Naturwissenschaftliche Fakult¨at II, 2013.

[26] Ksenia Bestuzheva, Ambros Gleixner, and Stefan Vigerske. A Compu-
tational Study of Perspective Cuts. arXiv preprint arXiv:2103.09573,
2021.

[27] Aida Khajavirad and Nikolaos V Sahinidis. A hybrid LP/NLP
paradigm for global optimization relaxations. Mathematical Program-
ming Computation, 10(3):383–421, 2018.

[28] Oktay G¨unl¨uk and Jeﬀ Linderoth. Perspective reformulations of mixed
integer nonlinear programs with indicator variables. Mathematical pro-
gramming, 124(1):183–205, 2010.

[29] RA Waltz and TD Platenga. KNITRO user’s manual. 2010, 2017.

[30] Pietro Belotti, Timo Berthold, and Kelligton Neves. Algorithms for
discrete nonlinear optimization in FICO Xpress. In 2016 IEEE Sensor
Array and Multichannel Signal Processing Workshop (SAM), pages 1–5.
IEEE, 2016.

[31] Inc. Gurobi Optimization. Gurobi Optimizer Reference Manual, 2016.

URL http://www.gurobi.com.

[32] IBM Corp. and IBM. V20.1: User’s Manual for CPLEX. International
Business Machines Corporation, 2020. URL https://www.ibm.com/
docs/en/icos/20.1.0?topic=cplex.

[33] Michele Conforti, G´erard Cornu´ejols, and Giacomo Zambelli. Integer
programming, volume 271 of Graduate Texts in Mathematics, 2014.

[34] Egon Balas. Disjunctive programming. Springer, 2018.

[35] Mehmet Tolga C¸ ezik and Garud Iyengar. Cuts for mixed 0-1 conic
programming. Mathematical Programming, 104(1):179–202, 2005.

36

[36] Pietro Belotti, Julio C G´oez, Imre P´olik, Ted K Ralphs, and Tam´as
Terlaky. A conic representation of the convex hull of disjunctive sets
and conic cuts for integer second order cone optimization. In Numerical
Analysis and Optimization, pages 1–35. Springer, 2015.

[37] Andrea Lodi, Mathieu Tanneau, and Juan Pablo Vielma. Dis-
junctive cuts in Mixed-Integer Conic Optimization. arXiv preprint
arXiv:1912.03166, 2019.

[38] Pierre Bonami, Andrea Lodi, Andrea Tramontani, and Sven Wiese. On
mathematical programming with indicator constraints. Mathematical
programming, 151(1):191–223, 2015.

[39] Ignacio E Grossmann and Sangbum Lee. Generalized convex disjunc-
tive programming: Nonlinear convex hull relaxation. Computational
optimization and applications, 26(1):83–100, 2003.

[40] Qi Chen, Emma S Johnson, David E Bernal, Romeo Valentin, Sun-
jeev Kale, Johnny Bates, John D Siirola, and Ignacio E Grossmann.
Pyomo. gdp: an ecosystem for logic based modeling and optimization
development. Optimization and Engineering, pages 1–36, 2021.

[41] Oktay G¨unl¨uk and Jeﬀ Linderoth. Perspective reformulation and ap-
In Mixed Integer Nonlinear Programming, pages 61–89.

plications.
Springer, 2012.

[42] Kevin C Furman, Nicolas W Sawaya, and Ignacio E Grossmann. A
computationally useful algebraic representation of nonlinear disjunctive
convex sets using the perspective function. Computational Optimization
and Applications, pages 1–26, 2020.

[43] Hassan Hijazi, Pierre Bonami, G´erard Cornu´ejols, and Adam Ouorou.
Mixed-integer nonlinear programs featuring “on/oﬀ” constraints. Com-
putational Optimization and Applications, 52(2):537–558, 2012.

[44] Sangbum Lee and Ignacio E Grossmann. New algorithms for nonlinear
generalized disjunctive programming. Computers & Chemical Engi-
neering, 24(9-10):2125–2141, 2000.

[45] Robert A Stubbs and Sanjay Mehrotra. A branch-and-cut method for
0-1 mixed convex programming. Mathematical programming, 86(3):
515–532, 1999.

37

[46] Antonio Frangioni and Claudio Gentile. Perspective cuts for a class of
convex 0–1 mixed integer programs. Mathematical Programming, 106
(2):225–236, 2006.

[47] M Selim Akt¨urk, Alper Atamt¨urk, and Sinan G¨urel. A strong conic
quadratic reformulation for machine-job assignment with controllable
processing times. Operations Research Letters, 37(3):187–191, 2009.

[48] Ramesh Raman and Ignacio E Grossmann. Modelling and computa-
tional techniques for logic based integer programming. Computers &
Chemical Engineering, 18(7):563–578, 1994.

[49] Ignacio E Grossmann and Juan P Ruiz. Generalized disjunctive pro-
gramming: A framework for formulation and alternative algorithms for
MINLP optimization. In Mixed Integer Nonlinear Programming, pages
93–115. Springer, 2012.

[50] Nicolas Sawaya. Reformulations, relaxations and cutting planes for gen-
eralized disjunctive programming. PhD thesis, Carnegie Mellon Univer-
sity, 2006.

[51] Nicolas Sawaya and Ignacio Grossmann. A hierarchy of relaxations
for linear generalized disjunctive programming. European Journal of
Operational Research, 216(1):70–82, 2012.

[52] Juan P Ruiz and Ignacio E Grossmann. A hierarchy of relaxations
for nonlinear convex generalized disjunctive programming. European
Journal of Operational Research, 218(1):38–47, 2012.

[53] H Paul Williams. Model building in mathematical programming. John

Wiley & Sons, 2013.

[54] Juan P Ruiz and Ignacio E Grossmann. Global optimization of non-
convex generalized disjunctive programs: a review on reformulations
and relaxation techniques. Journal of Global Optimization, 67(1-2):
43–58, 2017.

[55] Francisco Trespalacios and Ignacio E Grossmann. Cutting plane algo-
rithm for convex generalized disjunctive programs. INFORMS Journal
on Computing, 28(2):209–222, 2016.

[56] Alper Atamt¨urk and Andr´es G´omez. Strong formulations for quadratic
optimization with M-matrices and indicator variables. Mathematical
Programming, 170(1):141–176, 2018.

38

[57] Mohit Tawarmalani and Nikolaos V Sahinidis. A polyhedral branch-
and-cut approach to global optimization. Mathematical programming,
103(2):225–249, 2005.

[58] Egon Balas. Disjunctive programming. In Annals of Discrete Mathe-

matics, volume 5, pages 3–51. Elsevier, 1979.

[59] Venkat Chandrasekaran and Parikshit Shah. Relative entropy optimiza-
tion and its applications. Mathematical Programming, 161(1-2):1–32,
2017.

[60] Laurent El Ghaoui and Herv´e Lebret. Robust solutions to least-squares
problems with uncertain data. SIAM Journal on matrix analysis and
applications, 18(4):1035–1064, 1997.

[61] Michael R Bussieck and Alex Meeraus. General algebraic modeling
system (GAMS). In Modeling languages in mathematical optimization,
pages 137–157. Springer, 2004.

[62] Michael R Bussieck and Arne Drud. SBB: A new solver for mixed

integer nonlinear programming. Talk, OR, 2001.

[63] Michael R Bussieck, Arne Stolbjerg Drud, and Alexander Meeraus.
MINLPLib—a collection of test models for mixed-integer nonlinear pro-
gramming. INFORMS Journal on Computing, 15(1):114–119, 2003.

[64] Ignacio Grossmann and Jon Lee. CMU-IBM Cyber-Infrastructure for
MINLP. https://www.minlp.org/index.php, 2021. URL https://
www.minlp.org/index.php.

[65] Pierre Bonami, Lorenz T. Biegler, Andrew R. Conn, G´erard Cornu´ejols,
Ignacio E. Grossmann, Carl D. Laird, Jon Lee, Andrea Lodi, Fran¸cois
Margot, Nicolas Sawaya, and Andreas W¨achter. An algorithmic frame-
work for convex mixed integer nonlinear programs. Discrete Optimiza-
tion, 5(2):186–204, 2008. ISSN 15725286. doi: 10.1016/j.disopt.2006.
10.011.

[66] David E Bernal, Stefan Vigerske, Francisco Trespalacios, and Ignacio E
Grossmann. Improving the performance of DICOPT in convex MINLP
problems using a feasibility pump. Optimization Methods and Software,
35(1):171–190, 2020.

39

[67] Patrick Flaherty, Pitchaya Wiratchotisatian, Ji Ah Lee, Zhou Tang,
and Andrew C Trapp. MAP Clustering under the Gaussian Mix-
ture Model via Mixed Integer Nonlinear Optimization. arXiv preprint
arXiv:1911.04285, 2019.

[68] Yihua Chen and Maya R Gupta. Em demystiﬁed: An expectation-
maximization tutorial. In Electrical Engineering. Citeseer, 2010.

[69] Yu-Feng Li, Ivor W Tsang, James T Kwok, and Zhi-Hua Zhou. Con-
vex and scalable weakly labeled SVMs. Journal of Machine Learning
Research, 14(7), 2013.

[70] Dimitri J Papageorgiou and Francisco Trespalacios. Pseudo basic steps:
bound improvement guarantees from Lagrangian decomposition in con-
vex disjunctive programming. EURO Journal on Computational Opti-
mization, 6(1):55–83, 2018.

[71] Jan Kronqvist, Ruth Misener, and Calvin Tsay. Between steps: Inter-
mediate relaxations between big-M and convex hull formulations. arXiv
preprint arXiv:2101.12708, 2021.

[72] Francisco Trespalacios and Ignacio E Grossmann. Improved Big-M re-
formulation for generalized disjunctive programs. Computers & Chem-
ical Engineering, 76:98–103, 2015.

[73] Jennifer R Jackson and Ignacio E Grossmann. High-level optimiza-
tion model for the retroﬁt planning of process networks. Industrial &
engineering chemistry research, 41(16):3762–3770, 2002.

[74] Roy De Maesschalck, Delphine Jouan-Rimbaud, and D´esir´e L Massart.
The mahalanobis distance. Chemometrics and intelligent laboratory
systems, 50(1):1–18, 2000.

[75] Aldo Vecchietti and Ignacio E Grossmann. LOGMIP: a disjunctive 0–1
non-linear optimizer for process system models. Computers & chemical
engineering, 23(4-5):555–565, 1999.

[76] Ashutosh Mahajan and Todd Munson. Exploiting second-order cone
structure for global optimization. Argonne Nat. Lab., Lemont, IL, USA,
Tech. Rep. ANL/MCS-P1801-1010, 2010.

[77] Farid Alizadeh and Donald Goldfarb. Second-order cone programming.

Mathematical programming, 95(1):3–51, 2003.

40

[78] Robert Chares. Cones and interior-point algorithms for structured con-
vex optimization involving powers andexponentials. PhD thesis, Ph. D.
Thesis, UCL-Universit´e Catholique de Louvain, Louvain-la-Neuve, Bel-
gium, 2009.

[79] Hande Y Benson and Robert J Vanderbei. Solving problems with
semideﬁnite and related constraints using interior-point methods for
nonlinear programming. Mathematical Programming, 95(2):279–302,
2003.

[80] Jean-Baptiste Hiriart-Urruty and Claude Lemar´echal. Fundamentals of

convex analysis. Springer Science & Business Media, 2004.

[81] Sebasti´an Ceria and Jo˜ao Soares. Convex programming for disjunctive
convex optimization. Mathematical Programming, 86(3):595–614, 1999.

[82] Egon Balas. Disjunctive programming and a hierarchy of relaxations for
discrete optimization problems. SIAM Journal on Algebraic Discrete
Methods, 6(3):466–486, 1985.

[83] Egon Balas. Disjunctive programming: Properties of the convex hull of
feasible points. Discrete Applied Mathematics, 89(1-3):3–44, 1998.

[84] Hassan Hijazi, Pierre Bonami, and Adam Ouorou. An outer-inner
IN-
approximation for separable mixed-integer nonlinear programs.
FORMS Journal on Computing, 26(1):31–44, 2014.

[85] Jan Kronqvist, Andreas Lundell, and Tapio Westerlund. Reformula-
tions for utilizing separability when solving convex MINLP problems.
Journal of Global Optimization, 71(3):571–592, 2018.

[86] Robert G Jeroslow. Representability in mixed integer programmiing, I:
Characterization results. Discrete Applied Mathematics, 17(3):223–243,
1987.

A Background

In this manuscript we use a similar notation to the one used by Ben-Tal and
Nemirovski [11], Alizadeh and Goldfarb [77]. We use lower case boldface
letters, e.g., x, c, to denote column vector, and uppercase boldface letters,
e.g., A, X, to denote matrices. Sets are denoted with uppercase calligraphic

41

J
(cid:74)

letters, e.g., S, K. Subscripted vectors denote xi denote the ith block of x.
The jth component of the vectors x and xi are indicated as xj and xij. The
set {1, . . . , J} is represented by the symbol
J
. Moreover, the subscript
J
(cid:74)
(cid:75)
(cid:74)
(cid:75)
:= {x1, . . . , xJ }. We use 0 and 1
of a vector x is used to deﬁne the set x
for the all zeros and all ones vector, respectively, and 0 and I for the zero
and identity matrices, respectively. The vector ej will be the vector with a
single 1 in position j, and its remaining elements being 0. The dimensions
of the matrices and vectors will be clear from the context. We use Rk to
denote the set of real numbers of dimension k, and for set S ⊆ Rk, we use
cl(S) and conv(S) to denote the closure and convex hull of S, respectively.
For concatenated vectors, we use the notation that “,” is row concatena-
tion of vectors and matrices, and “;” is column concatenation. For vectors,
x, y and z, the following are equivalent.

(cid:75)


 = (x(cid:62), y(cid:62), z(cid:62))(cid:62) = (x; y; z).

(A.1)





x
y
z

The projection of a set S ⊆ Rk onto the vector x ∈ X ⊆ Rn, with n ≤ k

is denoted as projx(S) := {x ∈ X : ∃y : (x; y) ∈ S}.

If A ⊆ Rk and B ⊆ Rl we denote their Cartesian product as A × B :=

{(x; y) : x ∈ A, y ∈ B}.

For A1, A2 ⊆ Rk we deﬁne the Minkowski sum of the two sets as A1 +

A2 = {u + v : u ∈ A1, v ∈ A2}.

A.1 Cones

For a thorough discussion about convex optimization and conic program-
ming, we refer the reader to [11]. The following deﬁnitions are required for
the remainder of the manuscript.

The set K ⊆ Rk is a cone if ∀(z, λ) ∈ K × R+, λz ∈ K. The dual cone of

K ⊆ Rk is

K∗ =

(cid:110)

u ∈ Rk : uT z ≥ 0, ∀z ∈ K

(cid:111)

,

(A.2)

and it is self-dual if K = K∗. The cone is pointed if K ∩ (−K) = {0}. A cone
is proper if it is closed, convex, pointed, and with non-empty interior. If K
is proper, then its dual K∗ is proper too. K induces a partial order on Rk:

x (cid:60)K y ⇐⇒ x − y ∈ K,

which allows us to deﬁne a conic inequality as

Ax (cid:60)K b,

42

(A.3)

(A.4)

where A ∈ Rm×k, b ∈ Rm, and K a cone.

When using a cone that represents the Cartesian product of others, i.e.,
K = Kn1 × · · · × Knr with each cone Kni ⊆ Rni, its corresponding vectors
and matrices are partitioned conformally, i.e.,

where xi ∈ Rni,
x = (x1; . . . ; xr)
where yi ∈ Rni,
y = (y1; . . . ; yr)
where ci ∈ Rni,
c = (c1; . . . ; cr)
A = (A1; . . . ; Ar) where A ∈ Rm×ni.

Furthermore, if each cone Kni ⊆ Rni is proper, then K is proper too.

A Conic Programming (CP) problem is then deﬁned as:

min
x

c(cid:62)x

s.t. Ax = b,

x ∈ K ⊆ Rk.

Examples of proper cones are:

• The non-negative orthant

Rk

+ =

(cid:110)

z ∈ Rk : z ≥ 0

(cid:111)

.

(A.5)

(CP)

(A.6)

• The positive semi-deﬁnite cone

Sk
+ =

(cid:110)

Z ∈ Rk×k : Z = ZT , λmin(Z) ≥ 0

(cid:111)

,

(A.7)

where λmin(Z) denotes the smallest eigenvalue of Z.

• The second-order cone, Euclidean norm cone, or Lorentz cone

Qk =






z ∈ Rk : z1 ≥

(cid:118)
(cid:117)
(cid:117)
(cid:116)

k
(cid:88)

i=2






.

z2
i

(A.8)

• The exponential cone [78]
(cid:110)

Kexp = cl
(cid:110)

(z1, z2, z3) ∈ R3 : z1 ≥ z2ez3/z2, z1 ≥ 0, z2 > 0

(cid:111)

=

(z1, z2, z3) ∈ R3 : z1 ≥ z2ez3/z2, z1 ≥ 0, z2 > 0

(cid:110)

(z1, z2, z3) ∈ R3 : z1 ≥ z2ez3/z2, z2 ≥ 0

(cid:111)

.

=

43

(cid:111) (cid:91) R+ × {0} × (−R+)

(A.9)

Of these cones, the only one not being self-dual or symmetric is the expo-
nential cone.

Other cones that are useful in practice are

• The rotated second-order cone or Euclidean norm-squared cone

Qk

r =






z ∈ Rk : 2z1z2 ≥

(cid:118)
(cid:117)
(cid:117)
(cid:116)

k
(cid:88)

i=3

z2
i , z1, z2 ≥ 0






,

(A.10)

This cone can be written as a rotation of the second-order cone,


i.e., z ∈ Qk ⇐⇒ Rkz ∈ Qk

0
0
Ik−2
or by a linear transformation of the second-order cone, i.e., Qk
(cid:8)z ∈ Rk : (z1 + z2, z1, . . . , zk) ∈ Qk+1(cid:9).

√
2/2
√
2/2
0

2/2
2/2 −
0

r with Rk :=

r =

√
√

,





• The power cone, with l < k, (cid:80)

l
i∈
(cid:74)

(cid:75)

P α1,...,αn

k

=




z ∈ Rk :



l
(cid:89)

i=1

zαi
i ≥

αi = 1,

(cid:118)
(cid:117)
(cid:117)
(cid:116)

k
(cid:88)

i=l+1

z2
i ,

zi ≥ 0

i ∈

l
(cid:74)




.

(cid:75)

(A.11)

This cone can be decomposed using a second-order cone and l − 1
three-dimensional power cones

3 = (cid:8)(z1, z2, z3) ∈ R3 : zα
P α

1 z1−α

2 ≥ |z3|,

z1, z2 ≥ 0(cid:9) ,

(A.12)

through l − 1 additional variables (u, v1, . . . , vl−2),

z ∈ P α1,...,αn
k

⇐⇒



(u, zl+1, . . . , zk) ∈ Qk−l+1,

(z1, v1, u) ∈ P α1
3 ,
(zi, vi, vi−1) ∈ P ¯αi
3 ,

(zl−1, zl, vl−2) ∈ P ¯αl−1

3

i = 2, . . . , l − 1,
,

(A.13)

where ¯αi = αi/(αi+· · ·+αn) for i = 2, . . . , l−1. P α
3 can be represented
using linear and exponential cone constraints, i.e., limα→0(z1, z2, z2 +
αz3) ∈ P α

3 = (z1, z2, z3) ∈ Kexp

Most, if not all, applications-related convex optimization problems can
be represented by conic extended formulations using the these standard

44

cones [15], i.e., in problem CP, the cone K is a product K1 × · · · × Kr, where
each Ki is one of the recognized cones mentioned above. Equivalent conic
formulations for more exotic convex sets using unique cones can be formu-
lated with potential advantages for improved solution performance [17].

As mentioned in the introduction, an alternative to a convex optimiza-
tion problem’s algebraic description as in problem MINLP is the following
Mixed-Integer Conic Programming (MICP) problem:

min
z,y

cT z

s.t. Az + By = b,

yl ≤ y ≤ yu,
z ∈ K ⊆ Rk, y ∈ Zny ,

(MICP)

where K is a closed convex cone.

Without loss of generality, integer variables need not be restricted to
cones, given that corresponding continuous variables can be introduced via
equality constraints. Notice that for an arbitrary convex function f : Rk →
R ∪ {∞}, one can deﬁne a closed convex cone using its recession,

Kf = cl{(z, λ, t) : λf (z/λ) = ˜f (z, λ) ≤ t, λ > 0},
where the function ˜f (z, λ) is the perspective function of function f (z), and
whose algebraic representation is a central piece of this work. Closed convex
cones can also be deﬁned as the recession of convex sets. On the other hand,
a conic constraint is equivalent to a convex inequality,

(A.14)

Ax (cid:60)K b ⇐⇒ g(x) ≤ 0,

(A.15)

for appropriately chosen smooth convex functions g(x) [35, 79].

We can therefore reformulate problem MINLP in the following parsimo-

nious manner [22]:

min
x,y,s
J
(cid:74)
(cid:75)
xf ,yf ,tf ,
,y
x
J

J

(cid:74)

(cid:75)

(cid:75)

(cid:74)
s.t.

tf

x = xf , y = yf ,
((xf ; yf ), 1, tf ) ∈ Kf ,
x = xj, y = yj,
((xj; yj), 1, sj) ∈ Kgj , sj ∈ R+, j ∈
yl ≤ y ≤ yu,
x ∈ Rnx

+ , y ∈ Zny ,

J
(cid:74)

,
(cid:75)

45

(MINLP-Cone)

where copies of the original variables x and y are introduced for the objective
function and each constraints, xf , yf , xj, yj, j ∈
, such that each belongs
(cid:75)
to the recession cone of each constraint deﬁned as in (A.14). Each conic set
requires the introduction of an epigraph variable t and a recession variable
λ. The epigraph variable from the objective function, tf , is used in the
new objective, and the ones corresponding to the constraints are set as non-
negative slack variables sj. The recession variables λ in (A.14) are ﬁxed to
one in all cases.

J
(cid:74)

Notice that problem MINLP-Cone is in MICP form with K = Rnx+J
×
Kf × Kg1 × · · · × KgJ . As mentioned above, the case when K = K1 ×
· · · × Kr where each Ki is a recognized cone is more useful from practical
purposes. Lubin et al. [22] showed that all the convex MINLP instances
at the benchmark library MINLPLib [63] could be represented with these
recognized cones.

+

A.2 Perspective function
For a convex function h(x) : Rn → R∪{∞} its perspective function ˜h(x, λ) :
Rn+1 → R ∪ {∞} is deﬁned as

˜h(x, λ) =

(cid:40)

λh(x/λ)
∞

if λ > 0
otherwise

(A.16)

The perspective of a convex function is convex, but not closed. Hence,

consider the closure of the perspective function (cl˜h)(x, λ) deﬁned as

(cid:16)

cl ˜h

(cid:17)

(x, λ) =






λh(x/λ)
h(cid:48)
∞(x)
∞

if λ > 0
if λ = 0
otherwise

,

(A.17)

where h(cid:48)

∞(x) is the recession function of function h(x)[80, Section B

Proposition 2.2.2], and which in general does not have a closed-form.

The closure of the perspective function of a convex function is relevant for
convex MINLP on two ends. On the one hand, it appears when describing
the closure of the convex hull of disjunctive sets. On the other hand, as seen
above, it can be used to deﬁne closed convex cones K, that determine the
feasible region of conic programs. Relying on amenable properties of convex
cones, conic programs can be addressed with specialized algorithms allowing
for more eﬃcient solution methods.

The closure of the perspective function presents a challenge when imple-
menting it for nonlinear optimization models, given that it is not deﬁned at

46

λ = 0. Modeling this function becomes necessary when writing the convex
hull of the union of convex sets, as seen below. This diﬃculty has been ad-
dressed by several authors in the literature through ε-approximations. The
ﬁrst proposal was made by Lee and Grossmann [44], where

(cid:16)

(cid:17)
cl ˜h

(x, λ) ≈ (λ + ε)h

(cid:18) x

λ + ε

(cid:19)

.

(A.18)

This approximation is exact when ε → 0. However, it requires values for
ε, which are small enough to become numerically challenging when imple-
mented in a solution algorithm.

Furman et al. [42] propose another approximation for the perspective

function such that

(cid:16)

(cid:17)
cl ˜h

(x, λ) ≈ ((1 − ε)λ + ε)h

(cid:18)

x
(1 − ε)λ + ε

(cid:19)

− εh(0)(1 − λ),

(A.19)

which is exact for values of λ = 0 and λ = 1, is convex for h(x) convex, and
is exact when ε → 0 as long as h(0) is deﬁned. Using this approximation
in the set describing the system of equations of the closed convex hull of
a disjunctive set also has properties that are beneﬁcial for mathematical
programming.

This approximation is used in software implementations when reformu-
lating a disjunctive set using its hull relaxation [40, 75]. Notice that even
with its desirable properties, the approximation introduces some error for
values ε > 0; hence it is desirable to circumvent its usage. As shown in [41]
and the Section 4, using a conic constraint to model the perspective function
allows for a more eﬃcient solution of convex MINLP problems.

A.3 Disjunctive Programming

Optimization over disjunctive sets is denoted as Disjunctive Programming [34,
58]. A disjunctive set is given by the system of inequalities joined by logical
operators of conjunction (∧, “and”) and disjunction (∨, “or”). These sets
are non-convex and represent usually the union of convex sets. The main
reference on Disjunctive Programming is the book by Balas [34].

Consider the following disjunctive set

(cid:40)

C =

x ∈ Rn : x ∈

(cid:41)

Ci

=

(cid:95)

i∈I

(cid:91)

i∈I

{x ∈ Rn : x ∈ Ci} ,

(A.20)

where |I| is ﬁnite. Each set deﬁned as Ci := {x ∈ Rn|hi(x) ≤ 0} is a
convex, bounded, and non-empty set deﬁned by a vector valued function

47

hi : Rn → (R ∪ {∞})Ji. Notice that is it suﬃcient for Ci to be convex
that each component of hi, hij, j ∈ {1, · · · , Ji}, is a proper closed convex
function, although it is not a necessary condition.

Ceria and Soares [81] characterize the closure of the convex hull of C,

cl conv(C), with the following result.

Theorem 2.
component of hi, hi

[81] Let Ci = {x ∈ Rn|hi(x) ≤ 0} (cid:54)= ∅, assume that each
, is a proper closed convex function, and let

Ji
(cid:74)

(cid:75)

H =






x =

(cid:88)

(cid:88)

i∈I

vi,

λi = 1,

(cid:17)

i∈I
(cid:16)
cl ˜hi
vi ∈ Rn,
λi ∈ R+,

(vi, λi) ≤ 0,






.

i ∈ I,

i ∈ I,

i ∈ I

(A.21)

Then cl conv((cid:83)

i∈I Ci) = projx(H).

Proof. See [81, Theorem 1] and [38, Theorem 1].

Theorem 2 provides a description of cl conv(C) in a higher dimensional
space, an extended formulation. This Theorem generalizes the result by [34,
58, 82, 83] where all the convex sets Ci are polyhedral. Even though the
extended formulations induce growth in the size of the optimization problem,
some of them have shown to be amenable for MINLP solution algorithms [22,
57, 84, 85].

A similar formulation was derived by Stubbs and Mehrotra [45] in the
context of a Branch-and-cut method for Mixed-binary convex programs.
These authors notice that the extended formulation might not be compu-
tationally practical, hence they derive linear inequalities or cuts from this
formulation to be later integrated into the solution procedure. Similar ideas
have been explored in the literature [46]. In particular cases, the dimension
of the extended formulation can be reduced to the original size of the prob-
lem, e.g., when there are only two terms in the disjunction, i.e., |I| = 2, and
one of the convex sets Ci is a point [41]. A description in the original space
of variables has also been given for the case when one set C1 is a box and the
constraints deﬁning the other C2 is deﬁned by the same bounds as the box
and nonlinear constraints being isotone [43]. This has been extended even
In other
further by Bonami et al. [38] with complementary disjunctions.

48

words the activation of one disjunction implies that the other one is deacti-
vated, in the case that the functions that deﬁne each set h{1,2} are isotone
and share the same indices on which they are non-decreasing. The last two
cases present the formulation in the original space of variables by paying a
prize of exponentially many constraints required to represent cl conv(C).

In the case that Ci is compact, its recession cone is the origin, i.e.,
Ci∞ = {x ∈ Rn|h(cid:48)
i∞(x) ≤ 0} = {0} [80, Section A, Proposition 2.2.3].
This fact, together with (A.17) and Theorem 2, forces that for a compact
Ci, a value of λi = 0 implies vi = 0. This fact has been used to pro-
pose mixed-integer programming formulations for expressing the disjunctive
choice between convex sets, by setting the interpolation variables to be bi-
nary λi ∈ {0, 1}, i ∈ I [44, 86], i.e.,

H{0,1} =






x =

(cid:88)

(cid:88)

i∈I

vi,

λi = 1,

(cid:17)

i∈I
(cid:16)
cl ˜hi
vi ∈ Rn,
λi ∈ {0, 1},

(vi, λi) ≤ 0,






.

i ∈ I,

i ∈ I,

i ∈ I

(A.22)

An interesting observation is that using the approximation of the closure
of the perspective function from Furman et al. [42], for any value of ε ∈ (0, 1),
projx(H{0,1}) = C when hi(0) is deﬁned ∀i ∈ I and

{x ∈ Rn : hi(x) − hi(0) ≤ 0} = {0}, ∀i ∈ I

(A.23)

see [42, Proposition 1].

The condition on (A.23) is required to ensure that if λi = 1, then vi(cid:48) =
0, ∀i(cid:48) ∈ I \ {i}. This condition is not valid in general for a disjunctive set
C, but it is suﬃcient to have a bounded range on x ∈ Ci, i ∈ I. Moreover,
when these conditions are satisﬁed, C ⊆ projx(H) using the approximation
in (A.19) for ε ∈ (0, 1), with cl convC = projx(H) in the limit when ε →
0 [42, Proposition 3].

B Detailed computational results

49

d
n
a

e
m

i
t

t
s
a
e
l

e
h
T

.
s
r
e
v
l
o
s

d
n
a

s
n
o
i
t
a
l
u
m
r
o
f
e
r

r
e
g
e
t
n
i
-
d
e
x
i
m

t
n
e
r
e
ﬀ
i
d

g
n
i
s
u

s
P
D
G
c
i
t
a
r
d
a
u
Q
r
o
f

s
t
l
u
s
e
R

:
2

e
l
b
a
T

.
d
e
d
l
o
b

e
r
a

l
l
a
r
e
v
o

s
t
l
u
s
e
r

t
s
e
b

e
h
T

.
d
e
z
i
c
i
l
a
t
i

e
r
a

n
o
i
t
a
l
u
m
r
o
f
e
r

a

n
i
h
t
i
w
e
c
n
a
t
s
n
i

h
c
a
e

r
o
f

s
t
l
u
s
e
r

s
e
d
o
n

t
s
e
w
e
f

P
I
-

K
E
S
O
M

-

A
O
K
E
S
O
M

M
-
g
i
B

O
R
T
N
K

I

X
E
L
P
C

N
O
R
A
B

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

8
0
2
8
±
8
1
1
3
1

9
8
1
1
±
2
2
3
4

1
4
6
±
9
8
5
1

6
0
2
±
6
1
9

8
8
9
1
6
1
±
3
9
0
3
3
1

1
1
9
8
±
9
7
6
4
5
4

6
7
1
6
±
4
0
2
0
1

0
8
5
1
±
9
9
9
4

8
0
0
4
2
±
1
0
0
2
4

7
6
0
0
1
1
±
1
1
1
8
0
2

2
6
7
0
6
±
1
8
8
5
3
3

0
4
2
3
±
9
5
2
5
5
2

2
2
2
2
±
3
7
2
5

2
9
0
2
±
1
0
6
4

6
3
7
±
4
3
7
1

7
4
3
±
6
3
8

3
0
4
±
4
3
0
1

1
5
2
±
8
4
5

8
7
±
8
0
2

6
6
±
5
8
1

1
±
5

7
5
3
2

1
6
2

5
1
1
0
2

5
6
8
6

1
7
2

1
0
6
2
1

1
0
6
2
1

)

%
1
9
.
5
3
(

7
9
.
7
1
±
0
3
.
4
9
5
3

8
6
.
4
7
1
±
4
4
.
2
0
3

0
3
.
1
3
±
4
5
.
1
5

0
7
.
6
±
3
3
.
1
2

)

%
7
6
.
7
6
(

2
1
.
0
0
6
±
4
1
.
0
0
4
3

)

%
3
3
.
3
(

5
3
.
5
1
9
±
9
4
.
8
5
7
1

)

%
2
8
.
3
3
2
(
+
0
0
6
3

0
6
.
1
5
±
7
5
.
7
2
1

2
4
.
9
6
±
9
6
.
1
4
1

5
4
.
0
4
±
5
6
.
5
6

6
9
.
4
±
3
3
.
8
1

6
5
.
0
±
6
5
.
2

6
0
.
2
±
7
1
.
5

9
4
.
6
7
9
±
2
7
.
2
1
8

1
8
.
7
±
2
1
.
7
1

5
4
.
3
±
7
3
.
8

1
0
.
0
±
4
0
.
0

0
8
.
3
±
6
6
.
0
1

0
0
.
2
±
9
1
.
5

4
2
.
0
±
0
9
.
0

3
4
.
±
8
1
.
1

8
8
.
0
1

8
7
.
0

5
2
.
7
7
1

0
3
.
9
5

7
0
.
1

1
4
.
9
3
1

1
1
.
8
3
1

3
9
0
1
±
5
4
4
3

7
2
9
2
±
4
5
3
8

4
5
5
±
6
4
8
1

5
0
5
6
2
±
5
4
6
6
6

4
6
5
2
1
±
0
3
0
1
6

4
3
2
4
±
5
8
0
4
2

9
6
3
3
±
1
9
3
1
1

5
8
9
6
±
2
4
7
7
1

1
5
1
2
±
7
3
0
5
1

1
1
3
9
±
9
4
5
7
4

1
3
5
3
±
4
9
3
9
1

4
2
3
8
±
9
6
3
9
2

5
9
2
1
±
2
3
8
7

7
4
9
5
1
±
8
8
6
2
2

1
1
5
4
±
2
1
1
9

5
6
8
±
2
1
9
1

9
3
9
±
8
3
1
3

3
2
5
±
6
2
5
1

2
9
1
±
9
6
5

4
8
±
4
4
3

1
±
5

9
8
5
2

5
4
1

9
5
5
5
1

3
1
3
3

7
6
3

9
8
5
8
3

9
8
5
8
3

7
9
.
4
3
2
±
3
1
.
8
5
5

8
8
.
6
3
±
3
9
.
8
8

1
4
.
9
±
1
5
.
8
1

8
2
9
±
3
1
6
1

8
0
3
±
8
9
6

3
9
8
1
±
9
1
1
5

)

%
5
0
.
(

4
1
.
2
±
0
1
.
4

)

%
7
0
.
(

0
7
.
±
4
7
.
1

)

%
4
0
.
(

2
6
.
5
±
7
3
.
5
1

7
0
5
±
3
5
0
1

1
6
9
±
7
9
9
1

8
1
2
3
±
5
5
5
7

5
6
.
4
1
7
±
6
8
.
6
8
6
1

5
6
1
0
1
±
9
1
2
0
2

)

%
1
1
.
(

1
4
.
2
5
±
0
7
.
1
9

4
9
1
1
1
±
6
2
3
9
1

2
3
.
0
±
4
5
.
0

8
2
.
0
±
3
8
.
0

2
6
.
3
±
6
3
.
4

7
1
.
3
±
2
9
.
5

2
0
1
±
6
8
1

7
0
4
±
2
1
4

1
1
5
±
0
8
8

8
4
9
±
7
3
5
1

)

%
9
0
.
6
5
1
(
+
0
0
6
3

6
8
2
1
7
±
7
3
6
0
3
1

)

%
8
4
.
2
1
(

1
2
.
4
2
8
±
2
8
.
9
7
1
1

3
2
8
8
6
2
±
4
0
4
1
6
2

)
%
1
5
.
(

0
6
.
7
8
±
9
2
.
5
8

1
0
4
6
1
±
1
8
4
2
1

1
6
.
0

4
7
.
4

6
9
.
7
2

9
1
.
5
1

6
3
.
1

2
4
.
2
1
1

2
2
.
2
1
1

1
2
9
1

5
7
1

0
4
5
6
1

7
4
6
1

7
4
3

8
7
8
4
1

8
7
8
4
1

6
7
.
2
0
1

0
8
.
0

9
1
.
7

3
3
.
5
1

8
6
.
9
9

3
8
.
7
9

2
2
.
2

7
5
5

6
5

2
7
9
3

3
0
2

2
4
8

9
2
6
4

9
2
6
4

5
3
.
0

8
5
.
0

6
9
.
3

1
6
.
0

1
7
.
1

4
0
.
4

7
0
.
4

9

4

1
6

9
7

5
5
1

1
4

1
4

0
8
.
3
1
±
6
4
.
8
2

1
6
.
5
2
±
6
8
.
0
5

8
6
.
1
±
2
0
.
4

2
3
.
8
±
7
8
.
9

7
6
.
1
4
6
±
4
5
.
4
6
5

9
4
.
0

3
7
.
0

8
7
.
5

3
4
.
1

8
9
.
5

4
8
.
7

6
9
.
7

)

%
0
7
.
0
3
4
(
+
0
0
6
3

9
4
8
0
3
±
7
2
8
7
5

)

%
4
1
.
(

0
5
.
3
4
2
±
7
4
.
6
0
4

)

%
2
4
.
1
7
5
(
+
0
0
6
3

1
2
.
3
2
6
±
8
5
.
7
3
3
1

1
4
.
4
7
1
±
1
2
.
3
8
3

6
8
6
5
±
8
9
8
2
1

8
6
0
3
±
2
8
3
7

+
0
0
0
0
0
2

)

%
9
3
.
5
8
(

0
1
.
1
4
±
1
0
.
0
5
9
2

+
0
0
0
0
0
0
1

)
%
3
0
.
2
4
(

4
5
.
9
4
±
3
7
.
6
1
5

6
6
9
7
1
±
9
2
5
7
2

)

%
1
7
.
7
6
(

2
0
.
1
9
5
±
8
2
.
2
0
3
3

)

%
4
9
.
(

5
1
.
3
1
±
1
2
.
1
3

)

%
6
3
.
(

9
1
.
5
2
±
3
2
.
7
5

1
5
9
3
2
±
2
4
1
5
2

2
9
7
2
4
±
9
3
9
0
8

4
6
7
9
±
7
0
5
3
1

3
7
.
6
1
±
0
0
.
5
1

8
1
.
3
±
2
2
.
5

0
4
0
1
±
6
6
7
1

8
8
9
2
±
8
6
7
3

8
2
.
8
5
±
0
8
.
4
6

4
0
6
2
1
±
7
0
5
6
1

1
6
.
1
3
3
±
9
5
.
9
3
4

6
9
.
3
1
±
1
8
.
3
2

1
4
.
4
5
±
6
2
.
5
6

)

%
1
7
.
3
5
8
(
+
0
0
6
3

5
2
4
4
2
±
7
3
8
1
9
1

)

%
8
8
.
0
6
5
(

1
3
.
9
1
5
±
7
4
.
0
3
8
2

3
4
6
1
8
2
±
0
6
4
0
5
5

)
%
9
3
.
9
(

7
7
.
8
0
1
±
8
8
.
6
2
2

4
5
6
8
4
±
2
6
7
6
8

)

%
5
1
.
3
9
(

4
2
.
1
5
2
1
±
0
5
.
7
0
6
2

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

9
4
3
2
±
6
2
2
9
8
1

)

%
2
5
.
4
7
6
(
+
0
0
6
3

+
0
0
0
0
0
2

)

%
4
9
.
4
1
5
(

1
7
.
3
6
±
2
9
.
2
3
2
3

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

)
%
1
2
.
9
5
5
(

3
3
.
3
7
±
1
6
.
5
9
7

)
%
8
1
.
6
2
1
(

6
7
.
7
7
2
±
2
0
.
1
9
5

7
2
1
2
1
±
2
9
1
1
5

)

%
2
0
.
9
0
5
(
+
0
0
6
3

)

%
7
8
.
4
(

9
3
.
9
2
8
±
7
2
.
2
7
7
2

9
4
.
0
4
5
±
6
7
.
6
7
7

4
2
.
2
5
3
±
4
0
.
4
8
6

7
3
.
8
2
±
9
3
.
2
5

2
0
.
0
±
1
1
.
0

8
0
.
2
4
±
1
1
.
9
2
1

6
6
.
9
±
8
0
.
4
3

0
0
.
5
±
5
4
.
7
1

2
9
.
0
±
9
7
.
3

5
2
6
1
±
3
3
2
4

5
7
1
1
±
7
7
7
1

1
8
5
±
3
3
2
2

5
0
3
±
9
5
5

9
9
4
±
0
8
6

6
5
1
±
0
3
3

4
6
±
0
6
1

8
6
±
7
3
1

1
±
4

8
4
.
2
1
±
8
9
.
3
3

8
2
9
3
9
2
±
9
0
2
0
6
1

3
5
.
6
2
9
±
1
8
.
2
8
4

1
0
.
3
±
5
5
.
2
1

0
1
.
5
±
4
9
.
7

0
0
.
0
±
2
0
.
0

5
8
.
±
5
0
.
2

6
9
.
1
±
5
3
.
3

0
2
.
0
±
2
7
.
0

4
1
.
0
±
3
5
.
0

6
4
.
±
2
4
.
1

7
7
4
1
±
8
7
0
3

2
6
5
1
±
9
4
7
3

1
1
3
±
4
9
4

5
3
6
±
0
7
3
1

1
2
2
±
8
7
3

0
3
1
±
9
1
2

2
3
±
6
6

1
±
1

1
6
.
4
±
5
2
.
4
1

7
7
.
6
±
3
2
.
7
1

5
3
.
1
±
3
7
.
5

1
0
.
±
2
0
.
0

0
8
.
1
±
8
1
.
6

6
5
.
1
±
5
9
.
3

8
8
.
±
5
9
.
3

6
6
.
±
1
9
.
1

3
3
2
3
±
3
9
8
1
1

7
2
9
2
±
3
8
4
3

7
5
3
±
5
2
3

1
7
3
±
5
5
4

2
0
2
±
5
0
3

6
3
±
5
3

0
±
1

8
5
±
6
5

2
3
±
9
3

6
1
±
9
1

2
7
.
±
6
3
.
1

1
0
.
0
±
3
0
.
0

1
3
.
3
±
8
3
.
7

1
8
.
±
1
4
.
1

4
6
.
±
9
2
.
1

7
2
.
0
±
6
5
.
0

+
0
0
6
3

5
7
.
1
8
±
4
8
.
6
0
1

*

0
1

9
9
.
5
±
8
9
.
8

4
1
.
8
±
5
5
.
2
1

*

*

5

0
1

0
1

0
1

*

5

5

5

0
1

0
1

0
1

0
1

*

0
1

*

*

5

0
1

*

5

5

5

0
1

0
1

*

2

2

2

5

5

5

5

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

50

9
8
0
8
±
6
0
7
0
2

7
4
1
1
±
5
1
0
4

6
1
9
±
1
3
7
1

6
7
2
±
9
8
7

)

%
7
0
.
(

1
1
.
7
±
2
5
.
5
1

)

%
7
0
.
(

6
9
.
1
±
2
0
.
6

)

%
4
0
.
(

9
2
.
2
1
±
0
3
.
8
4

)

%
1
1
.
(

6
6
.
5
2
1
±
9
9
.
8
1
3

8
3
2
3
4
±
1
8
8
3
0
1

)

%
8
8
.
2
4
(

1
9
.
0
9
1
1
±
4
2
.
0
4
5
2

1
7
7
1

9
7
1

2
0
9
5
1

7
5
4
1

3
2
2

7
2
2
2
1

7
2
2
2
1

3
7
.
8
1

3
2
.
4

4
8
.
6
4
2

8
2
.
7
4

7
2
.
6

3
4
.
5
9
2

5
4
.
2
9
2

)

%
9
3
.
(

4
8
.
4
7
±
3
7
.
0
7
1

)

%
7
9
.
(

6
6
.
7
3
±
9
3
.
4
7

)

%
3
2
.
6
1
1
(
+
0
0
6
3

7
8
2

7

7
9
2
4

7
7
1

5
8
1
3
1

1
3
2

1
3
2

1
5
4
1
±
6
8
0
2

6
6
0
5
±
5
1
5
5

2
9
0
3
±
0
9
6
9

1
0
6
1
±
5
9
4
3

4
8
8
1
±
5
8
6
3

0
7
4
4
±
3
2
8
7

8
7
2
±
7
5
3

0
5
4
±
5
5
6

9
7
.
5
4
2
±
5
1
.
6
1
5

1
1
.
4
8
±
8
2
.
7
7
1

)

%
0
5
.
1
7
4
(
+
0
0
6
3

3
1
6
8
1
±
8
9
6
6
6
2

)
%
0
2
.
3
5
(
+
0
0
6
3

4
5
.
7
1
±
1
4
.
8
4

5
7
.
6
±
7
4
.
3
2

5
9
5
9
±
2
6
4
2
4

3
4
3
3
±
5
6
6
8

6
4
1
4
±
8
3
4
1
1

)

%
7
9
.
6
2
2
(
+
0
0
6
3

4
4
.
1
0
1
±
6
7
.
7
8
2

5
1
.
0
3
±
7
1
.
4
9

)

%
4
8
.
(

5
1
.
4
0
1
±
4
7
.
8
8
2

)

%
6
3
.
(

5
3
.
5
7
2
±
8
8
.
0
3
5

3
5
6
6
±
2
0
0
2
1

1
2
8
1
±
7
5
8
5

)

%
8
1
.
1
5
1
(
+
0
0
6
3

1
3
6
4
2
±
5
1
0
3
2
1

1
9
9
7
±
6
0
1
0
5

2
2
6
1
±
9
5
0
6
3

5
3
7
7
±
7
1
5
2
1

7
6
4
3
±
6
6
1
8

)

%
2
3
.
9
2
1
(

9
6
.
8
7
5
±
5
4
.
6
3
2
3

9
7
1
0
0
1
±
0
9
1
7
0
1

)
%
6
5
.
2
(

4
1
.
0
4
9
±
5
8
.
8
8
0
1

5
3
0
8
1
±
6
3
6
7
0
1

)

%
7
1
.
9
3
(

8
2
.
8
7
4
±
3
8
.
0
7
3
3

)

%
7
7
.
9
7
(

4
9
.
0
9
5
±
0
3
.
4
2
2
3

0
3
0
0
1
1
±
9
8
1
3
6
1

)

%
1
3
.
6
(

8
0
.
7
3
1
1
±
6
3
.
8
6
5
1

3
4
4
3
±
4
9
4
3
1

)

%
9
6
.
9
2
1
(

5
1
.
4
5
2
±
3
4
.
6
9
4
3

2
9
.
7
3
1
±
2
9
.
7
8
2

9
6
.
8
3
5
±
4
8
.
3
8
7

0
8
.
1
1
±
5
7
.
2
2

1
5
.
7
2
±
3
5
.
8
5

7
0
5
3
±
1
4
4
0
1

7
7
3
1
±
6
4
1
3

8
6
3
±
4
2
1
1

7
7
1
±
1
5
5

9
7
.
1
±
1
0
.
6

7
7
.
±
1
5
.
2

6
4
.
9
±
2
9
.
2
2

0
9
3
±
7
8
1
1

0
0
8
±
5
6
3
2

8
3
5
2
±
1
8
3
6

9
9
.
9
5
±
8
6
.
7
9
1

5
1
.
5
1
±
0
9
.
4
3

6
7
.
2
±
7
1
.
8

9
0
8
±
0
3
6
1

7
3
3
±
6
5
7

1
5
3
1
±
9
0
0
4

)

%
3
1
.
(

4
8
.
7
1
±
6
2
.
6
5

)

%
6
0
.
(

8
1
.
4
2
±
0
0
.
5
6

)

%
4
0
.
(

6
7
.
0
4
±
7
9
.
5
3
1

4
7
.
9
2
±
1
0
.
0
9

9
6
0
5
1
±
6
9
4
8
2

8
6
.
4
0
2
±
2
5
.
5
1
4

1
2
1
0
1
±
7
4
6
1
2

)

%
1
1
.
(

5
3
.
5
4
4
±
8
5
.
8
2
0
1

4
3
.
2

9
2
.
2

8
3
.
2
1

5
8
.
1
1

0
0
.
8
6

4
7
.
4
2

8
8
.
4
2

9
7
5
1

3
3
4
9

1
8
0
6

3
0
3

9
9
1

3
9
0
0
1

3
9
0
0
1

4
6
.
0

1
4
.
5

0
2
.
7
6

6
7
.
1

8
0
.
9
4

2
2
.
7
9

9
9
.
5
9

5
5
8
6
1

5
9
3
1

1
0
8
1

9
2
3

9
6
2
1
2

9
6
2
1
2

9
6

)

%
4
.
1
9
(

*
4
1
.
0

1
5
.
2
3

0
0
.
2

9
7
.
0

2
4
.
5

9
1
.
8
4

1
2
.
8
4

5
7
7
1

9
3
2

1
1
1
3
1

3
1
7
1

7
5
2

5
5
9
5
1

5
5
9
5
1

8
8
.
3
1

7
2
.
4

9
7
.
7
8
1

2
3
.
5
1

1
8
.
5
6

8
5
.
5
1
5

1
5
.
5
1
5

7
2
1

2
4
8

2
5
5
7

6
8
1

6
4
0
1

0
9
5
0
1

0
9
5
0
1

4
2
4
9
±
6
7
1
9
1

2
4
6
1
±
5
3
1
5

7
6
5
±
9
2
5
1

0
9
2
±
6
3
9

4
4
.
5
1
±
7
9
.
5
4

4
9
.
6
1
±
3
2
.
9
3

8
2
.
0
±
1
3
.
1

4
2
.
2
±
7
1
.
7

8
9
8
±
8
4
1
1

3
8
4
±
5
2
5

1
9
1
2
±
0
2
2
4

2
2
2
5
±
3
7
7
6

2
9
.
4
9
1
±
3
7
.
9
7
4

3
5
.
2
8
5
±
9
8
.
1
2
8

3
3
.
5
1
±
2
2
.
9
2

0
7
.
8
4
±
0
1
.
7
8

3
3
.
0

8
6
.
0

8
3
.
6

1
4
.
0

9
8
.
1

8
7
.
3
1

8
7
.
3
1

9
0
1

5
4

1
5
2

1

1
5
3
2

3
3
1

3
3
1

6
4
.
2

6
2
.
2

3
0
.
8
1

0
7
.
4

6
1
.
8
4

1
1
.
0
3

0
1
.
0
3

n
o
i
t
a
m
i
x
o
r
p
p
a
-
ε
R
H

O
R
T
I
N
K

N
O
R
A
B

P
I
-

K
E
S
O
M

-

A
O
K
E
S
O
M

e
n
o
C
R
H

-

O
R
T
N
K

I

X
E
L
P
C

N
O
R
A
B

s
e
d
o
N

)

%
p
a
g

i

g
n
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

i

g
n
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

5
4
3
1
±
1
9
8
1
0
1

1
1
6
5
±
2
3
4
2
1

8
3
4
3
±
1
8
7
6

4
7
3
6
3
±
8
3
5
0
6

8
4
9
4
±
8
8
4
8
1
1

1
6
5
2
±
2
1
0
8
8

3
1
7
1
±
9
3
1
4
5

5
2
0
3
±
6
7
7
2

0
3
3
±
6
1
5

5
9
1
±
0
4
4

0
7
3
±
8
5
2

7
0
3
±
5
0
2

2
±
4

8
5
±
3
7

7
3
±
5
5

7
2
±
0
4

)

%
1
4
.
4
9
6
(

1
8
.
4
5
±
2
1
.
2
8
5
3

8
7
3
3
±
0
9
4
6
1

)

%
1
1
.
3
8
6
(
+
0
0
6
3

3
9
8
1
±
6
7
9
3

)

%
8
2
.
9
5
7
(
+
0
0
6
3

1
9
.
4
6
1
±
7
9
.
5
8
1

4
9
.
1
1
±
1
4
.
7
2

3
3
.
6
±
8
0
.
0
2

7
2
.
6
±
2
2
.
8

0
0
.
0
±
3
0
.
0

7
5
.
7
±
9
1
.
6
1

9
9
.
1
±
4
7
.
5

7
8
.
±
7
3
.
3

2
2
.
±
1
9
.
1

6
4
1
±
6
5
3

1
7
2
±
4
5
6

9
0
2
±
2
4
2

3
0
6
±
6
9
9

9
4
±
8
2

0
6
1
±
2
9
1

1
±
1

8
2
±
0
3

1
3
±
9
3

6
±
7

)

%
8
2
.
0
0
1
(

8
8
.
1
9
3
±
4
7
.
9
6
4
3

)

%
2
8
.
2
(

6
5
.
4
5
7
±
7
0
.
2
0
5
2

3
8
.
0
6
3
±
8
8
.
1
6
1
1

)

%
7
4
.
9
4
7
(
+
0
0
6
3

)

%
8
7
.
7
4
9
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

5
2
.
6
0
3
±
5
7
.
1
1
0
1

3
8
.
2
1
1
±
7
0
.
0
5
1

9
4
.
9
0
1
±
0
5
.
3
4
1

1
4
.
2
1
±
9
5
.
9
1

2
9
.
0
7
±
0
1
.
5
9

2
0
.
0
±
5
0
.
0

)

%
4
1
.
(

5
4
.
8
6
7
±
2
4
.
7
3
2
1

7
7
1
6
±
6
1
5
7
1

)

%
4
3
.
6
7
1
(

7
9
.
4
3
7
±
0
3
.
1
1
9
2

7
3
8
8
7
±
0
9
4
4
5
1

4
4
4
6
1
±
4
7
2
7
0
2

6
5
1
4
2
±
0
6
6
2
3

2
4
7
5
±
1
6
8
1
2
1

9
7
1
1
±
7
8
8
3

3
0
5
2
±
4
1
2
6

5
5
8
±
7
9
0
1

0
5
2
±
9
2
4

5
1
2
±
7
9
4

6
8
±
0
5
1

5
4
1
±
1
6
1

1
±
0

4
6
±
0
8

1
3
±
5
5

5
1
±
0
3

5
6
.
6
6
2
±
1
0
.
6
8
3

4
4
0
4
1
±
7
5
3
2
4

)

%
7
3
.
8
2
(

1
7
.
2
5
8
±
9
3
.
1
7
7
2

7
9
8
3
1
±
0
8
6
8
4

)

%
8
8
.
5
(

0
7
.
4
5
7
±
1
7
.
1
8
6
2

7
1
3
8
4
±
2
3
6
6
7

)

%
1
2
.
8
(

5
0
.
4
8
9
±
6
7
.
9
8
0
2

9
9
5
3
2
±
0
9
7
0
2
1

)
%
9
1
.
3
0
3
(
+
0
0
6
3

)
%
8
2
.
3
7
(
+
0
0
6
3

3
6
.
3
4
±
3
3
.
4
5

4
7
.
4
±
7
0
.
0
1

5
8
.
3
±
3
8
.
9

3
7
.
±
6
9
.
1

1
0
.
±
4
0
.
0

9
9
.
2
±
3
3
.
4

5
5
.
±
1
3
.
1

2
3
.
0
±
8
9
.
0

2
1
.
0
±
8
3
.
0

9
9
0
6
±
2
6
4
9
3

6
8
0
2
±
9
5
6
2
1

4
0
0
1
±
1
7
2
2

0
6
2
1
±
6
1
9
1

7
3
8
±
7
3
0
1

6
3
1
±
2
7
2

5
8
5
±
9
4
5

4
9
1
±
6
6
2

1
±
0

1
5
±
7
9

5
2
±
9
5

)

%
6
0
.
4
(

3
4
.
2
8
0
1
±
6
9
.
4
4
3
2

)

%
5
5
.
6
7
1
(
+
0
0
6
3

)

%
9
7
.
9
2
7
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

3
3
.
7
4
1
±
8
5
.
1
0
2

7
9
.
5
1
3
±
7
2
.
4
3
4

8
2
.
6
±
0
2
.
4
1

2
0
.
0
±
4
0
.
0

2
3
.
1
8
1
±
8
9
.
8
3
2

4
5
.
0
1
±
1
1
.
4
2

8
6
.
6
±
9
0
.
3
1

3
7
.
±
2
7
.
2

9
5
4
2
±
3
9
2
7
3

8
6
9
1
±
5
5
3
5
1

9
1
9
1
±
3
4
6
1

9
3
9
±
5
8
8
4

2
7
1
±
0
9
3

5
1
3
±
8
1
2

2
1
3
±
9
3
5

1
9
2
±
9
9
1

0
±
1

7
7
±
8
7

6
2
±
7
4

8
2
±
1
4

)

%
1
1
.
6
5
6
(
+
0
0
6
3

2
4
6
5
7
2
±
3
3
2
7
4
4

)
%
7
5
.
0
2
(

8
4
.
9
1
0
1
±
0
8
.
2
8
7
1

)

%
8
7
.
0
5
8
(
+
0
0
6
3

0
7
2
2
7
±
8
8
6
9
6
1

6
6
.
5
6
0
1
±
2
5
.
7
6
9
1

9
9
7
6
±
8
4
9
7

)

∞

(
+
0
0
6
3

9
1
5
9
1
±
8
7
8
1
4

7
1
.
3
7
±
7
8
.
1
3
1

2
2
.
9
2
±
0
1
.
2
9

9
4
.
0
2
±
2
9
.
5
2

3
8
.
6
7
±
5
7
.
2
9

1
0
.
9
±
1
9
.
0
2

0
0
.
0
±
3
0
.
0

7
2
.
3
±
5
2
.
9

1
1
.
1
±
5
5
.
4

5
5
3
±
5
3
7

5
0
5
±
7
2
9

7
9
±
6
6
1

0
8
5
±
4
4
9

8
7
±
6
0
1

9
1
1
±
6
2
1

1
3
±
2
4

0
±
0

)

%
5
0
.
2
2
2
(
+
0
0
6
3

)

%
6
1
.
1
8
8
(
+
0
0
6
3

8
8
.
1
9
2
±
2
4
.
4
5
4

3
0
.
7
1
±
2
2
.
7
2

1
5
.
4
2
±
5
1
.
0
5

4
4
.
2
±
2
9
.
3

0
0
.
0
±
1
0
.
0

4
6
.
8
1
±
9
5
.
3
4

6
0
.
2
±
8
3
.
3

8
2
.
5
±
7
1
.
6

3
5
.
1
±
3
8
.
1

)

%
7
9
.
4
7
(
+
0
0
6
3

3
1
.
7
1
5
±
0
6
.
6
8
8

1
1
.
3
3
±
2
2
.
5
2

1
3
.
5
3
±
9
8
.
7
6

3
7
5
1
±
0
6
7
5

4
0
5
2
±
0
5
2
5

6
1
4
9
±
4
3
3
3
1

2
4
0
5
±
7
9
2
3
2

7
7
6
3
±
2
3
7
9
1

1
4
8
2
±
5
2
4
7

6
0
4
1
±
1
3
5
1

8
9
1
±
1
9
1

5
2
3
1
±
8
3
0
1

6
3
9
±
0
0
2
2

6
1
2
±
6
4
1

8
8
±
4
4

0
±
1

1
3
±
9
2

4
3
±
1
2

6
±
5

)

%
2
1
.
6
6
(

1
3
.
4
6
6
±
8
6
.
9
8
2
3

)

%
3
6
.
1
1
5
(

6
0
.
±
7
1
.
0
0
6
3

)

%
3
5
.
2
5
4
(
+
0
0
6
3

3
5
.
4
3
5
±
7
5
.
4
7
7

4
4
.
9
9
±
8
2
.
4
2
2

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

%
6
6
.
4
(

4
7
.
9
8
8
±
0
5
.
5
6
3
2

*

0
1

4
1
.
3
3
7
±
8
4
.
1
2
0
1

9
8
.
6
2
1
±
9
0
.
1
3
2

*

*

3
8
.
6
3
±
3
8
.
2
4

2
0
.
0
±
5
0
.
0

0
3
.
9
5
±
5
3
.
8
4
2

*

0
1

1
5
.
2
2
±
9
8
.
6
3

3
2
.
6
1
±
6
8
.
0
4

9
3
.
3
±
8
3
.
8

*

*

5

0
1

0
1

0
1

*

5

5

5

0
1

0
1

0
1

0
1

*

2

2

5

0
1

0
1

0
1

*

5

5

5

2

5

5

5

5

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

m
o
d
n
a
r

p
c
o
s

.
d
n
u
o
f

s
a
w
n
o
i
t
u
l
o
s

e
l
b
i
s
a
e
f

o
n

t
a
h
t

s
e
t
o
n
e
d
∞

f
o

p
a
g
A

.
s
t
i

m

i
l

n
o
i
t
a
r
e
t
i

r
o

e
m

i
t

i

g
n
h
c
a
e
r

r
o
f

n
o
i
t
a
n
m
r
e
t

i

e
h
t

e
t
o
n
e
d
+
h
t
i
w
s
e
u

l
a
v

d
n
a

,
e
r
u

l
i
a
f

r
e
v
l
o
s

e
t
o
n
e
d

*

h
t
i
w
s
e
u

l
a
V

.
s
e
c
n
a
t
s
n

i

d
e
t
a
r
e
n
e
g

y
l
m
o
d
n
a
r

0
1

r
e
v
o

n
o
i
t
a
i
v
e
d

d
r
a
d
n
a
t
s

d
n
a

e
g
a
r
e
v
a

e
h
t

e
r
a

m
o
d
n
a
r

p
c
o
s

s
e
c
n
a
t
s
n
i

m
o
d
n
a
r

d
n
a

s
u
l
C
k

g
n
i
r
e
t
s
u
l
c

n
a
e
m
-
k

o
t

g
n
i
d
n
o
p
s
e
r
r
o
c

s
t
l
u
s
e
R

e
c
n
a
t
s
n
I

3
0
2
0
y
a
L
C

4
0
2
0
y
a
L
C

5
0
2
0
y
a
L
C

3
0
3
0
y
a
L
C

4
0
3
0
y
a
L
C

5
0
3
0
y
a
L
C

5
0
4
0
y
a
L
C

*

*

*

*

*

*

*

*

*

*

*

*

2

3

5

2

3

5

2

3

5

2

3

5

0
1

0
1

0
1

0
2

0
2

0
2

0
1

0
1

0
1

0
2

0
2

0
2

3

3

3

3

3

3

5

5

5

5

5

5

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

e
c
n
a
t
s
n
I

3
0
2
0
y
a
L
C

4
0
2
0
y
a
L
C

5
0
2
0
y
a
L
C

3
0
3
0
y
a
L
C

4
0
3
0
y
a
L
C

5
0
3
0
y
a
L
C

5
0
4
0
y
a
L
C

*

*

*

*

*

*

*

*

*

*

*

*

2

3

5

2

3

5

2

3

5

2

3

5

0
1

0
1

0
1

0
2

0
2

0
2

0
1

0
1

0
1

0
2

0
2

0
2

3

3

3

3

3

3

5

5

5

5

5

5

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

s
u
l
C
k

d
n
a

e
m

i
t

t
s
a
e
l

e
h
T

.
s
r
e
v
l
o
s

t
n
e
r
e
ﬀ
i
d

d
n
a

n
o
i
t
a
l
u
m
r
o
f
e
r

M
-
g
i
B

e
h
t

g
n
i
s
u

s
P
D
G

l
a
i
t
n
e
n
o
p
x
E

r
o
f

s
t
l
u
s
e
R

:
3

e
l
b
a
T

.
d
e
d
l
o
b

e
r
a

l
l
a
r
e
v
o

s
t
l
u
s
e
r

t
s
e
b

e
h
T

.
d
e
z
i
c
i
l
a
t
i

e
r
a

n
o
i
t
a
l
u
m
r
o
f
e
r

a

n
i
h
t
i
w
e
c
n
a
t
s
n
i

h
c
a
e

r
o
f

s
t
l
u
s
e
r

s
e
d
o
n

t
s
e
w
e
f

P
I
-

K
E
S
O
M

-

A
O
K
E
S
O
M

O
R
T
I
N
K

N
O
R
A
B

O
R
T
I
N
K

N
O
R
A
B

-

e
n
o
C
M
-
g
i
B

M
-
g
i
B

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n

i

n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n

i

n

i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

i

g
n
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

e
c
n
a
t
s
n
I

3
1
5
1
±
9
5
7
3
2

0
2
8
1
±
8
7
2
4
2

9
9
9
4
4
±
6
6
5
5
7

5
2
8
1
3
±
1
1
4
7
5

6
6
0
1
±
4
6
8
7

6
4
7
1
±
4
3
1
7

5
4
6
1

7
8
6
7
1

3
1
2
2
1

1
2
8
7
2

9
6
9
3

5
4
5
7
7
1

9
7
3
6
7
1

8
9
2
1
2
1

7
1
1
3
1

9
9
7
4
0
3

5
2
7
9
9
1

0
7
0
5
3
1

9
4
6
9
3

0
2
6
9
4
2

7
2
1
1
7
1

2
5
1
4
1
1

7
4
5
8
3

7
8
1
2
9
1

8
6
9
5
1
1

2
9
3
5
7

5
9
6
3
4
1

4
5
0
2
2
1

4
4
6
7
9

2
5
9
1
4

5

7

9

1
1

7
1

5
5
1

1
8
2

7
0
6

9
7

9
9
3

3
4
5
1

5
4
4
4

3
4
4

5
8
2
3

7
2
1
4
4

-

9
8
1
2

5
8
5
9
5

-

-

3
3
2
8
1

-

-

-

3
1
7
±
3
0
1
3

1
4
3
1
±
2
6
0
2

4
4
4
±
1
2
7

8
8
1
±
3
2
4

0
±
0

2
4
1
±
1
0
5

1
6
2
±
2
3
3

7
6
±
7
5
1

9
4
±
6
8

4
3
1
0
3
2

1
2
5
0
3
2

7
4
4

9
2
6
1

3
7
2

9
2
3
0
1

9
4
5

1
7
7
9
3

1
3
3
1

3
2
6
5
4
1

7
0
.
0
2
±
5
5
.
4
4
2

2
2
.
7
1
±
2
6
.
8
3
2

1
8
.
8
2
2
±
9
5
.
8
5
3

4
2
.
8
5
1
±
5
4
.
2
7
2

9
0
.
7
±
2
7
.
2
6

3
0
.
2
1
±
5
5
.
7
5

7
1
.
5

7
0
.
8
7
1

3
1
.
2
8
1

2
.
0
3
6

2
5
.
5
1

7
9
.
5
7
0
2

5
.
5
4
3
3

)

%
6
1
(

+
0
0
6
3

1
.
6
5

)

%
0
1
(

+
0
0
6
3

)

%
6
1
(

+
0
0
6
3

)

%
5
4
(

+
0
0
6
3

9
4
.
4
1
2

)

%
9
7
(

+
0
0
6
3

)

%
2
6
(

+
0
0
6
3

)

%
1
2
1
(

+
0
0
6
3

7
1
.
9
8
2

)

%
3
5
1
(

+
0
0
6
3

)

%
2
3
1
(

+
0
0
6
3

)

%
3
4
1
(

+
0
0
6
3

2
5
.
2
3
3
1

)

%
0
9
1
(

+
0
0
6
3

)

%
5
5
(

+
0
0
6
3

)

%
9
9
1
(

+
0
0
6
3

6
0
.
0

2
1
.
0

5
1
.
0

5
2
.
0

2
1
.
0

6
6
.
0

2
6
.
1

2
1
.
4

2
3
.
0

8
2
.
2

9
2
.
0
1

1
9
.
8
3

5
7
.
1

4
6
.
9
1

9
2
.
1
6
3

-

7
5
.
0
1

7
2
.
7
6
5

-

-

3
2
.
9
0
1

-

-

-

1
7
.
9
1
±
4
8
.
1
7

7
1
.
4
3
±
4
1
.
0
5

4
5
.
4
±
9
6
.
8

4
7
.
2
±
4
0
.
5

2
0
.
±
7
0
.

9
7
.
1
±
2
1
.
6

2
2
.
3
±
4
8
.
3

3
2
.
±
8
7
.

6
2
.
±
7
4
.

)

%
4
6
6
(

+
0
0
6
3

)

%
6
8
4
(

+
0
0
6
3

7
5
.
2

1
2
.
7

9
0
.
3

4
1
.
6
5

2
0
.
4

7
1
.
6
0
2

2
2
.
3
1

5
.
4
9
9

2
4
7
1
±
1
4
9
1
2

3
4
4
1
±
4
5
4
2
2

6
4
5
8
4
±
3
4
1
0
8

3
3
6
4
3
±
0
3
0
9
5

4
3
5
1
±
4
3
8
8

9
2
6
2
±
1
7
1
9

1
3
.
0
2
±
6
7
.
3
1
1

3
6
.
8
1
±
8
6
.
1
1
1

1
4
.
0
0
1
±
4
1
.
7
5
1

5
2
.
9
7
±
2
2
.
0
2
1

0
5
.
7
±
0
5
.
3
3

0
3
.
2
1
±
6
5
.
4
3

3
6
1
2
±
8
7
4
6
4

3
5
3
2
±
8
6
3
5
4

5
7
4
5
4
±
9
0
7
3
7

0
4
8
9
2
±
9
3
2
3
5

4
9
6
1
±
1
1
1
7

2
4
8
1
±
6
8
5
6

5
6
6

9
3
3
9
1

1
5
4
0
4

7
1
4
9
1

7
0
3

9
5
7
3
0
1

5
7
9
0
4
5

3
8
8
1
5

9
9
6

1
3
9
6
2

1
4
9
4
4

7
5
3
4
7
5

5
7
2
4

5
1
7
0
5
1

5
0
7
1
6
8

0
0
3
1
7
4

3
3
1
1

3
5
5
1
1

1
6
4
2
6
2

7
3
7
2
9
2

7
6
3

3
1
5
8
3

9
4
4
5
6

5
3
0
5
2
2

5

5

5

7

7

7
9

5
2
1

1
4
5

7
1

7
4

5
0
4

9
1
4

9
8

3
4
1

3
6
9

7
2
5
6

9
1

9
9
2

1
4
8

3
0
8
2

3
7

3
0
6

1
1
4
6

-

5
0
5
2
±
4
2
9
5

1
2
3
1
±
4
8
6
1

1
7
3
±
4
8
0
1

2
2
3
±
1
9
6

0
±
0

0
4
3
±
1
5
6

3
5
1
±
8
5
3

3
5
1
±
4
4
2

5
4
±
2
0
1

8
1
2
2
0
7

5
0
6
2
3
6

1
9
4

5
5
3
1

9
3
1

9
3
4
4

3
7
3

7
8
3
4
1

5
8
8

9
3
7
3
4

1
6
.
0

1
8
.
7
3

2
1
.
8
0
1

6
3
.
0
8

2
4
.
0

1
0
.
3
6
2

3
2
.
9
2
1
2

1
9
.
5
5
2

2
9
.
0

4
6
.
7
7

7
4
.
4
5
2

)

%
5
(

+
0
0
6
3

6
9
.
5

6
0
.
8
5
4

)

%
2
1
(

3
.
1
0
6
3

)

%
9
2
(

+
0
0
6
3

1
0
.
2

5
5
.
3
5

1
5
.
0
1
6
2

)

%
6
(

+
0
0
6
3

7
8
.
0

1
7
.
9
5
2

7
.
2
6
7

)

%
2
2
(

+
0
0
6
3

7
0
.
0

3
1
.
0

9
1
.
0

4
2
.
0

9
0
.
0

5
3
.
0

7
4
.
0

6
1
.
1

9
1
.
0

1
3
.
0

7
2
.
1

6
6
.
1

3
2
.
0

7
4
.
0

2
3
.
3

6
3
.
0
2

7
2
.
0

5
.
1

3
0
.
6

8
6
.
5
2

4
.
0

8
5
.
2

7
7
.
4
5

-

8
6
.
2
±
9
4
.
8

4
5
.
1
±
4
7
.
2

7
3
.
±
1
2
.
1

0
3
.
±
0
0
.
1

1
0
.
±
5
0
.

5
2
.
±
1
0
.
1

5
1
.
±
2
6
.

6
0
.
±
0
4
.

7
0
.
±
9
2
.

)

%
2
9
2
(

5
5
.
2
8
6
2

)

%
4
5
2
(

2
7
.
5
2
2
2

1
9
.
0

9
1
.
1

2
5
.
0

1
5
.
5

7
8
.
0

6
9
.
0
1

5
9
.
1

4
1
.
8
4

9
2
2
2
1

1
0
3
5
7

4
1
9
1
8

0
3
5
1
5

3
6
8
5
4

1
3
4
8
8

7
0
8
0
6

6
9
4
3
3

5
5
1
2
4

1
4
7
6
8

8
2
5
5
5

6
7
2
0
3

1
7
5
4
9
1

4
8
3
4
6

9
9
1
2
4

0
7
6
7
2

1
1
0
5
6
1

7
8
6
4
5

6
2
2
0
3

2
6
8
9
1

4
0
7
0
5
1

2
4
1
3
4

4
8
3
1
2

9
8
3
4
1

9

7
4

9
7

5
7

3
6

9
1
8

7
9
4
2

3
7
5
5

1
0
1

9
1
3
1

5
2
2
3

9
5
6
3
1

7
2
7

5
2
9
4
0
1

4
9
0
7
3
1

8
6
0
5
9

1
3
8
3
3

1
3
2
6
4
1

9
8
9
2
9

0
2
1
5
4

3
3
4
6
7
1

3
6
3
9
0
1

1
6
1
8
5

-

8
9
2
4
±
8
4
6
7

0
6
4
1
±
5
5
1
3

4
2
4
±
0
2
0
1

1
1
4
±
4
2
1
1

1
±
5

7
8
1
±
1
5
6

9
5
1
±
3
1
4

0
7
±
4
0
2

3
6
±
6
4
1

4
0
5
1
6
1

2
6
7
6
7
1

3
6
8

3
3
8
1
1

5
5
5

+
0
0
0
0
0
2

9
1
7

+
0
0
0
0
0
2

9
9
8
5

+
0
0
0
0
0
2

3
8
.
3
3
±
2
8
.
0
2
7

0
7
.
4
4
±
1
0
.
9
1
7

5
2
.
3
5
4
±
4
9
.
0
1
7

1
7
.
1
2
4
±
4
4
.
0
9
6

7
0
.
0
2
±
1
8
.
8
9

5
7
.
3
2
±
6
1
.
8
9

9
4
.
4
9

2
4
.
5
9
9
1

)

%
2
5
(
+
0
0
6
3

)

%
6
6
(
+
0
0
6
3

4
7
.
9
3
4

)

%
7
3
3
(
+
0
0
6
3

)

%
4
3
1
(
+
0
0
6
3

)

%
1
2
1
(
+
0
0
6
3

4
8
.
0
3
4

)

%
4
4
7
(
+
0
0
6
3

)

%
1
9
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

7
9
.
7
1
2
3

)

∞

(
+
0
0
6
3

)

%
3
1
6
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

%
0
6
6
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

%
1
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

%
7
3
3
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

4
0
.
0

3
3
.
0

7
4
.
0

9
8
.
0

5
1
.
0

5
5
.
5

1
2
.
4
2

6
0
.
6
9

5
3
.
0

3
9
.
4
1

4
1
.
8
5

3
4
.
4
7
3

1
6
.
2

6
9
.
4
3
4
1

)

%
6
(
+
0
0
6
3

)

%
7
0
2
(
+
0
0
6
3

7
9
.
6
0
2

)

∞

(
+
0
0
6
3

)

%
7
0
5
(
+
0
0
6
3

)

%
7
7
5
(
+
0
0
6
3

1
0
.
8
7
0
2

)

%
7
6
2
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

-

2
8
.
1
5
±
1
0
.
5
9

1
5
.
8
1
±
2
2
.
3
4

1
1
.
3
±
0
9
.
8

5
7
.
2
±
8
3
.
8

0
0
.
±
3
0
.

7
3
.
1
±
6
4
.
5

4
0
.
1
±
2
3
.
3

6
3
.
±
7
2
.
1

8
4
.
±
7
1
.
1

1
6
0
3
±
9
9
6
3
1

5
6
3
2
±
4
8
8
3
1

8
2
±
9
6

8
2
2
±
0
8
1

6
2
±
4
6

8
3
±
8
6

6
5
.
6
7
±
2
0
.
1
7
4

4
5
.
7
4
±
9
5
.
3
5
4

4
8
.
0
1
±
4
5
.
2
2

8
9
.
9
1
±
4
3
.
7
3

3
2
.
3
±
5
5
.
2
1

1
7
.
3
±
7
4
.
2
1

1
6
2
2
±
4
8
3
5
4

7
0
5
2
±
8
1
4
5
4

3
7
4
5
4
±
1
1
7
3
7

2
3
8
9
2
±
7
4
2
3
5

8
6
6
1
±
1
9
8
6

3
9
8
1
±
3
7
6
6

3
3

7
5
1

7
5

1
4

1

9
1
4

8
9
6

5
2
2

7
1

8
1
4
1

3
9

6
1
8
1

3
7

9
2
2

7
1
3

4
9
2

3
1
1

7
7
1

7
9
5

1
0
0
1

5
7

9
0
2
1

8
3
7

4
3
1
6

3

1

1

1

1

7
1

3
2

5
3

9

1
1

7
1

3
2

3
1

1
1

3
4

5
8

1
6

9
2
1

3
6
1

6
5
4

7
4
1

1
8
4

5
1
8
1

6
8
6
2

0
±
1

0
±
1

0
±
1

0
±
1

0
±
1

0
±
1

0
±
1

0
±
1

0
±
1

2
9
.
0

2
2
.
7
1

9
2
.
5
1

5
0
.
7
1

6
1
.
0

5
7
.
2
4

5
2
.
9
3
1

1
7

1
3
.
1

4
9
.
4
9

7
4
.
2
3

2
0
.
4
2
7

2
4
.
3

6
5
.
4
2

3
1
.
3
9

7
8
.
0
6
1

9
.
4

2
4
.
7
3

7
3
.
7
8
1

2
3
.
6
6
4

3
.
4

9
4
.
5
3
2

3
4
.
0
1
2

)

%
8
0
.
4
(
+
0
0
6
3

4
0
.
0

3
1
.
0

1
1
.
0

4
1
.
0

4
0
.
0

1
6
.
0

2
0
.
1

2

2
2
.
0

5
8
.
0

1
8
.
1

6
4
.
3

4
3
.
0

5
1
.
1

7
6
.
5

5
4
.
2
1

8
3
.
2

5
3
.
0
1

9
3
.
0
2

2
6
.
5
6

8
3
.
5

8
6
.
0
4

7
7
.
4
4
2

4
8
.
3
9
4

5
2
.
±
5
1
.
1

4
2
.
±
8
6
.

6
1
.
±
4
5
.

4
0
.
±
2
3
.

2
0
.
±
4
0
.

5
1
.
±
5
6
.

9
0
.
±
8
2
.

5
0
.
±
3
2
.

3
0
.
±
6
1
.

7
2
4
4
1

1
1
5
7
8

8
1
4
6
8

8
3
7
9
5

1
2
0
4
3

1
4
3
8
9

0
2
4
9
6

0
7
8
9
3

7
0
5
5
3

2
9
1
9
9

6
9
1
4
6

3
9
8
2
3

5
4
0
9
8
1

7
1
1
9
7

7
5
5
0
5

2
3
6
0
3

4
1
7
9
7
1

6
6
7
6
6

5
7
9
3
3

3
1
7
0
2

6
8
3
5
6
1

3
5
5
3
5

9
6
7
5
2

2
0
4
6
1

9

5
5

5
8

5
0
1

3
6

7
1
2
1

3
5
3
2

7
2
7
5

1
0
1

3
6
5
1

9
1
2
3

7
5
8
3
1

7
2
7

3
1
0
9
5

8
2
8
4
6
1

2
4
2
4
1
1

7
5
4
3
3

7
2
5
9
5
1

8
2
7
8
0
1

2
6
8
8
6

5
5
3
4
5
1

7
5
0
8
2
1

2
5
7
4
7

-

4
4
1
3
±
3
5
5
4

5
8
4
1
±
2
9
7
2

1
8
3
±
8
4
0
1

0
0
4
±
6
4
1
1

1
±
5

1
0
2
±
4
9
5

4
3
1
±
2
6
3

0
8
±
6
9
1

0
4
1
±
1
7
1

+
0
0
0
0
0
2

+
0
0
0
0
0
2

1
2
9

5
7
5
1
1

5
9
5

+
0
0
0
0
0
2

9
7
7

+
0
0
0
0
0
2

9
9
9
5

+
0
0
0
0
0
2

6
7
.
1
4
±
4
4
.
6
3
4

3
2
.
3
4
±
2
8
.
1
4
4

1
5
.
9
1
4
±
1
6
.
2
1
6

8
0
.
0
7
2
±
8
3
.
3
5
4

1
0
.
1
1
±
9
6
.
9
3

1
2
.
0
1
±
2
9
.
6
3

5
7
.
4
0
1

7
7
.
8
7
2
2

)

%
6
4
(
+
0
0
6
3

)

%
4
6
(
+
0
0
6
3

7
2
.
9
9
2

)

%
4
1
3
(
+
0
0
6
3

)

%
2
4
1
(
+
0
0
6
3

)

%
0
2
1
(
+
0
0
6
3

1
2
.
7
2
3

)

∞

(
+
0
0
6
3

)

%
7
8
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

3
6
.
8
0
0
3

)

∞

(
+
0
0
6
3

)

%
9
0
6
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

%
6
4
6
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

%
4
3
3
(
+
0
0
6
3

)

%
2
1
8
(
+
0
0
6
3

3
0
.
0

1
3
.
0

5
4
.
0

9
.
0

5
1
.
0

9
3
.
6

1
9
.
8
1

5
9
.
4
7

2
3
.
0

3
1

8
2
.
6
4

1
8
.
4
9
2

5
0
.
2

6
7
.
1
4
6

)

%
2
(
+
0
0
6
3

)

%
5
9
1
(
+
0
0
6
3

4
7
.
5
5
1

)

%
9
5
5
(
+
0
0
6
3

)

%
4
1
5
(
+
0
0
6
3

)

%
5
8
5
(
+
0
0
6
3

7
6
.
2
1
4
1

)

%
8
4
2
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

8
0
.
0
2
±
2
6
.
9
2

0
2
.
7
±
7
8
.
4
1

0
8
.
1
±
3
3
.
5

2
3
.
1
±
4
1
.
4

1
0
.
±
3
0
.

0
1
.
1
±
7
2
.
3

2
4
.
±
2
6
.
1

4
2
.
±
1
8
.

2
3
.
±
7
6
.

)

%
7
3
6
(

9
7
.
5
6
1
3

)

%
1
1
7
(

8
2
.
6
5
7
2

6
.
4

5
9
.
3
4

9
5
.
3

)

%
1
(

2
4
.
6
0
2
1

4
.
5

)

%
2
4
(

1
.
1
4
7
1

9
5
.
5
4

)

%
1
8
(

9
8
.
0
7
0
2

0
±
1

2
±
2

6
2
±
1
7

1
2
±
1
5

1
8
±
7
8
1

5
7
±
2
7
1

5
0
.
±
8
2
.

3
5
.
±
2
4
.

5
5
.
6
±
9
7
.
4
1

4
7
.
3
±
1
9
.
9

6
5
.
8
±
1
6
.
6
2

1
7
.
8
±
0
9
.
4
2

*

*

1

2

0
2

0
2

0
1

0
1

*

*

*

*

1

2

1

2

0
2

0
2

0
2

0
2

2

2

5

5

g
e
R
g
o
L

g
e
R
g
o
L

g
e
R
g
o
L

g
e
R
g
o
L

g
e
R
g
o
L

g
e
R
g
o
L

5
3

9
5

1
5

7
3

1

7
5

5
5

9
3

5
1

9
4

3
5

9
4

1
4

7
6

3
8

5
7

5
4

3
3

1
6

7
1
1

9
3

5
4

3
4

1
3
1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

1

5

7

7

5

5

5

1
1

9
3

0
±
1

0
±
1

0
±
1

0
±
1

1
±
1

0
±
1

0
±
1

0
±
1

0
±
1

6
7
9

2
5
9

9
4

5
2

9

1
3

1
1

7
6

3
1

7
3

3
8
.
0

3
7
.
8

3
6
.
2
1

8
0
.
4
1

6
1
.
0

1
6
.
0
1

5
7
.
1
2

8
1
.
0
2

8
7
.
0

4
6
.
8

5
8
.
6
1

6
9
.
0
3

8
5
.
1

7
2
.
4
1

1
4
.
7
2

3
3
.
2
4

8
5
.
1

6
.
8

9
1
.
7
2

1
8
.
7
6

8
8
.
1

3
2
.
2
1

5
2
.
2
2

8
9
.
3
6

4
0
.
0

8
0
.
0

2
1
.
0

9
0
.
0

4
0
.
0

1
1
.
0

7
1
.
0

4
2
.
0

5
0
.
0

6
1
.
0

2
2
.
0

6
3
.
0

1
.
0

7
2
.
0

9
4
.
0

7
8
.
0

1
3
.
0

4
4
.
1

7
0
.
3

7
6
.
5

4
3
.
0

3
6
.
1

3
.
5

4
2
.
4
1

9
3
.
±
6
6
.

4
2
.
±
9
6
.

8
1
.
±
7
6
.

0
1
.
±
5
2
.

2
0
.
±
3
0
.

0
2
.
±
6
6
.

2
1
.
±
3
2
.

2
0
.
±
7
2
.

3
0
.
±
5
1
.

)

%
3
3
.
7
2
6
(
+
0
0
6
3

)
6
5
.
9
7
5
(
+
0
0
6
3

7
2
.
1

3
8
.
0

6
.
0

3
.
1

1

5
.
4

3
.
1

9
7
.
7

2
0
M
5
0
8
0
n
y
S
R

3
0
M
5
0
8
0
n
y
S
R

4
0
M
5
0
8
0
n
y
S
R

0
1
8
0
n
y
S
R

2
0
M
0
1
8
0
n
y
S
R

3
0
M
0
1
8
0
n
y
S
R

4
0
M
0
1
8
0
n
y
S
R

2
0
M
5
1
8
0
n
y
S
R

3
0
M
5
1
8
0
n
y
S
R

4
0
M
5
1
8
0
n
y
S
R

0
2
8
0
n
y
S
R

2
0
M
0
2
8
0
n
y
S
R

3
0
M
0
2
8
0
n
y
S
R

4
0
M
0
2
8
0
n
y
S
R

0
3
8
0
n
y
S
R

2
0
M
0
3
8
0
n
y
S
R

3
0
M
0
3
8
0
n
y
S
R

4
0
M
0
3
8
0
n
y
S
R

0
4
8
0
n
y
S
R

2
0
M
0
4
8
0
n
y
S
R

3
0
M
0
4
8
0
n
y
S
R

4
0
M
0
4
8
0
n
y
S
R

5
1
8
0
n
y
S
R

5
0
8
0
n
y
S
R

*

*

*

0
1

5

0
1

0
1

0
1

*

5

5

5

0
1

0
1

0
1

0
1

*

0
1

*

*

5

0
1

*

5

5

5

0
1

0
1

*

2

2

2

5

5

5

5

2
0
M
5
0
n
y
S

3
0
M
5
0
n
y
S

4
0
M
5
0
n
y
S

5
0
n
y
S

0
1
n
y
S

2
0
M
0
1
n
y
S

3
0
M
0
1
n
y
S

4
0
M
0
1
n
y
S

5
1
n
y
S

2
0
M
5
1
n
y
S

3
0
M
5
1
n
y
S

4
0
M
5
1
n
y
S

2
0
M
0
2
n
y
S

3
0
M
0
2
n
y
S

4
0
M
0
2
n
y
S

0
2
n
y
S

2
0
M
0
3
n
y
S

3
0
M
0
3
n
y
S

4
0
M
0
3
n
y
S

0
4
n
y
S

2
0
M
0
4
n
y
S

3
0
M
0
4
n
y
S

4
0
M
0
4
n
y
S

0
3
n
y
S

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

b
0
0
1

c
o
r
p

0
0
1

c
o
r
p

b
1
2

c
o
r
p

1
2

c
o
r
p

1
3

c
o
r
p

b
1
3

c
o
r
p

6
3

c
o
r
p

b
6
3

c
o
r
p

b
8
4

c
o
r
p

8
4

c
o
r
p

51

7
5
.
5

7
4
.
4
6

2
0
.
5

)

%
0
1
(

2
9
.
7
3
8
1

6
0
.
8

)

%
7
3
(

1
.
6
4
4
2

3
8
.
4
7

)

%
8
7
(

1
4
.
7
2
6
2

5
5

3
2
1

9

9
1

9

1
3

3
1

5
2

1
2
.
1

2
.
2

2
2
.
1

2
5
.
1

5
4
.
1

2
3
.
3

5
8
.
1

4
2
.
8

)

%
1
4
7
(
+
0
0
6
3

)

%
3
5
8
(
+
0
0
6
3

8
9
8
9
2
2

9
6
9
9
4
2

)

%
9
.
4
8
4
(
+
0
0
6
3

)

%
6
.
0
3
5
(
+
0
0
6
3

d
n
a

e
m

i
t

t
s
a
e
l

e
h
T

.
s
r
e
v
l
o
s

t
n
e
r
e
ﬀ
i
d

d
n
a

n
o
i
t
a
l
u
m
r
o
f
e
r

l
l
u
H

e
h
t

g
n
i
s
u

s
P
D
G

l
a
i
t
n
e
n
o
p
x
E

r
o
f

s
t
l
u
s
e
R

:
4

e
l
b
a
T

.
d
e
d
l
o
b

e
r
a

l
l
a
r
e
v
o

s
t
l
u
s
e
r

t
s
e
b

e
h
T

.
d
e
z
i
c
i
l
a
t
i

e
r
a

n
o
i
t
a
l
u
m
r
o
f
e
r

a

n
i
h
t
i
w
e
c
n
a
t
s
n
i

h
c
a
e

r
o
f

s
t
l
u
s
e
r

s
e
d
o
n

t
s
e
w
e
f

P
I
-

K
E
S
O
M

-

A
O
K
E
S
O
M

O
R
T
I
N
K

N
O
R
A
B

O
R
T
I
N
K

N
O
R
A
B

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
i
n
i
a
m
e
R
(

]
s
[

e
m
T

i

s
e
d
o
N

)

%
p
a
g

g
n
n

i

i
a
m
e
R
(

]
s
[

e
m
T

i

e
c
n
a
t
s
n
I

e
n
o
C
R
H

-

ε
-
R
H

5
4
±
2
7

2
4
±
9
6

0
4
±
2
6
1

5
4
±
8
7
1

0
9
1
±
8
7
8

5
4
2
±
9
7
8

2
3
.
±
1
0
.
1

6
4
±
6
9

9
3
.
±
6
8
.

3
0
1
±
2
4
1

1
4
.
±
7
9
.
1

8
4
.
±
0
2
.
2

5
1
.
2
±
8
8
.
9

9
6
.
2
±
1
7
.
9

6
3
±
1
3
2

8
6
±
8
6
1

6
5
2
±
9
2
9

4
4
2
±
4
4
9

1
6
.
±
6
2
.
1

6
2
.
±
4
7
.

3
3
.
±
7
2
.
1

5
3
.
±
6
1
.
1

0
1
.
1
±
8
1
.
3

6
3
.
1
±
8
4
.
3

-

-

-

-

-

-

6
3
4
1
1
±
1
5
9
1
9
2

9
5
1
7
2
±
0
5
1
4
5
3

9
8
1
4
2
±
5
6
9
5
4
3

6
4
3
8
1
±
8
6
0
7
3
3

3
4
1
5
1
±
0
4
5
0
3
3

2
0
3
7
±
1
5
6
9
9
2

5
4
.
1

+
0
0
0
0
0
0
1

+
0
0
6
3

+
0
0
6
3

+
0
0
6
3

+
0
0
6
3

+
0
0
6
3

+
0
0
6
3

1
6
2
2
±
4
8
3
5
4

7
0
5
2
±
8
1
4
5
4

3
7
4
5
4
±
1
1
7
3
7

2
3
8
9
2
±
7
4
2
3
5

8
6
6
1
±
1
9
8
6

3
9
8
1
±
3
7
6
6

)

%
0
0
.
(

0
1
.
4
4
±
1
8
.
8
4
4

9
0
.
1
4
±
2
3
.
1
5
4

)

%
0
0
.
(

0
3
.
1
1
±
3
3
.
0
4

)

%
0
0
.
(

2
7
.
0
1
±
0
8
.
8
3

9
8
.
7
6
4
±
9
6
.
2
2
6

3
8
.
8
8
2
±
0
2
.
2
6
4

6
2
±
1
7

1
2
±
1
5

1
8
±
7
8
1

5
7
±
2
7
1

0
±
1

2
±
2

8
7
.
8
±
1
3
.
0
2

7
0
.
5
±
0
0
.
3
1

5
1
.
1
1
±
1
1
.
2
3

8
8
.
9
±
4
6
.
9
2

7
0
.
±
9
2
.

6
7
.
±
2
5
.

*

*

1

2

0
2

0
2

0
1

0
1

*

*

*

*

1

2

1

2

0
2

0
2

0
2

0
2

2

2

5

5

g
e
R
g
o
L

g
e
R
g
o
L

g
e
R
g
o
L

g
e
R
g
o
L

g
e
R
g
o
L

g
e
R
g
o
L

5
1

3
9

3
2

1
1

9

7
8

9
9
2

9
4
2

3
2

7
1
2

9
5
3

3
2

9
3

1
5
1

5
5
4

5
5
1

5
4

3
8
1

3
0
2

9
6
7

5
1

5
9

9
4
1

3
2
8

5

3

3

3

0

3

3

3

3

3

3

3

3

5

3
1

3
1

7

9

1
2

7
2

1
1

5
1

9
3

0
8
1
±
9
1
3

9
8
±
5
5
1

7
5
±
5
0
1

6
7
±
9
3
1

5
1
1

8
2
±
4
4

9
2
±
4
4

2
2
±
3
3

6
1
±
8
2

1
±
1

7
3

7
4

1
9

9

3

3

5

3

5

9
2

8
0
.
2

8
2
.
1

3
5
.
1

4
4
.
0

2
9
.
1

2
.
8

3
.
0

8
1
.
0
1

6
4
.
0

6
8
.
4

1
4
.
2
1

2
5
.
2

4
6
.
0

6
1
.
4

8
5
.
6
1

9
4
.
1
1

5
8
.
0

4
6
.
5

8
3
.
0
1

1
6
.
5
5

7
6
.
0

2
0
.
4

6
2
.
0
1

5
3
.
3
7

5
0
.
0

3
1
.
0

1
.
0

2
1
.
0

1
0
.
0

5
1
.
0

6
1
.
0

6
2
.
0

1
1
.
0

6
1
.
0

4
2
.
0

9
3
.
0

1
1
.
0

4
4
.
0

8
6
.
0

7
1
.
0

8
3
.
0

2
8
.
0

3
8
.
1

2
2
.
0

9
6
.
0

9
7
.
1

8
1
.
6

2
.
0

9
5
.
0
1
±
8
4
.
2
2

0
2
.
3
±
7
0
.
7

9
4
.
1
±
0
8
.
3

2
3
.
1
±
6
1
.
3

9
9
.
±
4
5
.
2

0
5
.
±
5
3
.
1

2
0
.
±
4
0
.

4
2
.
±
4
9
.

3
1
.
±
9
5
.

7
4
.
1

7
9
.
4

9
5
.
0

7
4
.
0

3
1
.
0

8
3
.
0

9
2
.
0

2
2
.
0

5
3
.
0

8
.
0

0

9
1

9
1

7

7

7
1

9
8

9

7
2

9
2

9
9

7
1

1
5

5

9
1
1

5
4

9
4

1
5

9
7
1

9
1
1

7
1

7
3

1
4

3
5
1

0

3

3

3

0

3

3

3

3

3

3

0

3

3

3

5

7

1
1

1
2

7
3

1
1

1
3

7
5

3
8
1
±
4
6
2

0
5
7
±
7
5
4

0
7
±
7
0
1

1
5
±
3
7

7
2
1

4
3
1
±
1
6

0
4
±
4
4

5
1
±
3
2

0
1
±
6
1

0
±
0

1
3
8
1

9
9
1
5

5
5

7
9

3

3

5

9
1

7

7
2

2
1
.
0

5
5
.
0

2
7
.
0

9
.
0

6
3
.
0

7
5
.
0

7
6
.
1

9
1
.
1

3
2
.
0

6
6
.
0

9
3
.
1

4
2
.
1

1
3
.
0

2
7
.
0

8
8
.
1

7
6
.
1

8
3
.
0

6
9
.
0

2
2
.
2

5
9
.
2

3
3
.
0

8
9
.
0

5
6
.
1

5
9
.
3

4
0
.
0

2
1
.
0

4
1
.
0

9
1
.
0

1
0
.
0

2
2
.
0

3
3
.
0

5
3
.
0

8
0
.
0

5
1
.
0

2
2
.
0

2
.
0

8
1
.
0

3
2
.
0

1
3
.
0

4
4
.
0

8
1
.
0

6
3
.
0

9
6
.
0

7
0
.
1

3
2
.
0

8
5
.
0

7
1
.
1

1
9
.
1

0
0
0
0
0
1

0
0
0
0
0
1

0
0
0
0
0
1

6
6
7
9
9
1

0
0
0
0
0
1

0
0
0
0
0
1

0
0
0
0
0
1

9
8
9
9
9
1

0
0
0
0
0
1

0
0
0
0
0
1

0
0
0
0
0
1

9
8
9
9
9
1

0
0
0
0
0
1

0
0
0
0
0
1

0
0
0
0
0
1

7
3
1

+
0
0
0
0
0
2

+
0
0
0
0
0
2

0
0
0
0
0
1

0
0
0
0
0
1

0
0
0
0
0
1

0
0
0
0
0
1

2
0
0
2

8
9
4
1

-

-

-

-

-

-

3

3

3

3

3

5

7

7

7
9
9
9
9
1

7
9
9
9
9
1

8
7
9
9
9
1

1
1

7

8
9
9
9
9
1

7
3

+
0
0
0
0
0
2

8
9
9
9
9
1

+
0
0
0
0
0
2

9
3

3

5

3

5

)

∞

(

9
0
.
0

5
2
.
0

1
3
.
0

8
0
.
0

6
3
.
8
5
2

)

∞

(

4
3
.
2
3
9

)

∞

(

2
5
.
9
3
8

)

%
0
(

4
1
.
0

)

∞

(

3
3
.
5
0
6

8
6
.
0

3
4
.
4

)

∞

(

3
5
.
3
1
1

)

∞

(

2
4
.
2
1
5

)

%
0
(

9
7
.
4
1

)

∞

(

6
9
.
3
7
7
1

7
8
3
6
1

)

%
2
(

5
8
.
4

1
7
.
2
1
±
8
9
.
7
2

0
±
+
0
0
0
0
0
2

6
4
.
6
±
9
3
.
8

2
8
.
1
±
7
3
.
5

0
±
+
0
0
0
0
0
2

0
±
+
0
0
0
0
0
2

0
6
.
±
9
8
.
1

0
±
+
0
0
0
0
0
2

4
2
.
2
±
0
6
.
5

1
0
.
1
±
5
6
.
1

2
0
.
±
4
0
.

3
6
.
±
2
7
.
1

9
1
.
±
1
6
.

2
1
.
6
1

3
2
.
2
3

6
3
.
0

4
2
.
0

8
2
.
0

2
6
.
0

6
4
.
0

7
6
.
0

9
9
.
0

1
4
.
1

+
0
0
0
0
0
2

+
0
0
0
0
0
2

-

+
0
0
0
0
0
2

+
0
0
0
0
0
2

+
0
0
0
0
0
2

+
0
0
0
0
0
2

+
0
0
0
0
0
2

+
0
0
0
0
0
2

+
0
0
0
0
0
2

-

-

-

-

-

3
2
.
9
4
±
6
6
.
8
4
8

9
4
3
1
1
±
2
2
0
5
7

5
9
.
4
±
1
7
.
7
0
5

2
3
5
0
2
±
8
3
0
1
3
2

8
6
.
3
±
2
5
.
7
6
3

4
0
5
6
1
±
4
2
5
9
2
2

5
8
.
±
6
5
.
5
3
2

5
0
6
3
3
±
5
2
5
1
5
4

-

-

-

-

-

7
4
7
2
4
±
5
1
5
3
2
3

5
1
2
7
5
±
1
1
3
1
6
5

7
3
7
6
5
±
0
0
3
4
6
6

2
9
3
7
4
±
6
7
6
2
7
9

0
±
+
0
0
0
0
0
0
1

)

∞

(

3
5
.
4
7
4

)

∞

(

3
6
.
0
5
1

)

∞

(

4
8
.
2
4
1

)

∞

(

4
9
.
6
6
1

)

∞

(

1
0
.
1
6
1

)

∞

(

7
4
.
1
4
2

)

∞

(

7
7
.
3
2
2

)

∞

(

3
9
.
9
8

)

∞

(

2
7
4

-

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

2
6
3
4
6
8

4
7
7
9
5
2

3
4
6
4
0
2

)

∞

(

3
8
.
4
5
6

)

∞

(

1
0
.
5
4
8

)

∞

(

6
.
1
5
2

)

%
5
(

1
1
.
1
4
2

)

∞

(

8
3
.
0
6
3

)

∞

(

3
0
.
8
9
5

)

∞

(

8
2
.
2
1
9

)

∞

(

9
0
.
8
5
1

)

∞

(

9
1
.
3
4
3

)

∞

(

5
7
.
6
5
7

)

∞

(

5
.
7
1
1
1

)

∞

(

4
9
.
7
6
1

)

∞

(

7
1
.
8
6
3

)

∞

(

6
4
.
6
4
7

)

∞

(

3
6
.
3
6
3
1

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(

8
.
3
0
2

)

∞

(

4
9
.
8
9
2
2

)

∞

(

9
0
.
9
7
2
1

)

∞

(

4
3
.
8
9
3
1

)

∞

(

1
1
.
0
1
7
2

)

∞

(

8
2
.
4
3
2

4
0
.
0

5
0
.
0

6
0
.
0

4
0
.
0

8
0
.
0

5
1
.
0

2
2
.
0

1
.
0

+
0
0
0
0
0
0
1

8
8
8
8
6
3

8
9
9
1
4
4

6
6
1
5
7
2

0
0
4
6
6
2

5
0
1
1
6
1

1
8
5
7
5

7
6
0
1
0
6

8
6
6
1
3
2

6
7
1
2
1
1

8
3
2
6
5

0
1
5
2
9
1

2
8
8
6
7

4
0
9
0
3

7
8
3
4
0
5

4
9
0
5
2
1

8
4
6
2
6

0
8
2
9
3

2
3
8
0
2
4

9
5
8
3
9

7
0
6
0
4

8
0
9
7
2

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

+
0
0
0
0
0
0
1

0
2
6
5
3
6

0
9
4
5
8
7

+
0
0
0
0
0
0
1

9
1
6
9
1
9

3
5
7
0
0
5

8
7
3
6
9
2

7
6
0
5
7
9

7
6
0
0
0
3

0
9
0
8
0
2

+
0
0
0
0
0
0
1

2
4
9
2
9
2

6
3
0
8
4
1

9
1
4
9
9

4
5
8
7
2
8

6
5
7
1
5
2

8
8
0
5
1
1

0
0
6
2
6

+
0
0
0
0
0
0
1

)

%
8
(

5
5
.
4
1
5
3

)

%
1
(

6
8
.
2
8
1
2

)

∞

(
+
0
0
6
3

)

%
1
(
+
0
0
6
3

)

%
1
(
+
0
0
6
3

)

∞

(

7
5
.
0
0
4
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(

0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

%
7
8
(

7
4
.
4
6
1
1

)

∞

(

7
1
.
7
4
0
3

)

∞

(

4
9
.
9
1
8

)

%
6
(

8
2
.
3
0
1
2

)

%
1
(

5
5
.
7
5
3
3

)

∞

(
+
0
0
6
3

)

∞

(

8
.
1
2
3
1

)

%
2
(
+
0
0
6
3

)

∞

(

3
4
.
0
0
9
1

)

%
5
(
+
0
0
6
3

)

%
7
(
+
0
0
6
3

)

%
1
(
+
0
0
6
3

)

%
7
(

5
7
.
7
3
5
2

)

%
3
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(

1
2
.
5
3
7
2

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

6
3
.
4
2
1
±
6
5
.
3
5
0
1

+
0
0
6
3

+
0
0
6
3

+
0
0
6
3

8
1
.
4
1
1
±
3
7
.
1
1
5
3

)

%
9
.
4
8
4
(
+
0
0
6
3

)

%
6
.
0
3
5
(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(

6
1
.
2
3
8
1

)

∞

(

7
6
.
4
2
4
1

)

∞

(

2
3
.
3
2
1
2

)

∞

(

7
3
.
0
4
9
1

)

∞

(

9
2
.
8
1
6
2

)

∞

(

2
6
.
4
4
4
2

+
0
0
6
3

+
0
0
6
3

+
0
0
6
3

+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

)

∞

(
+
0
0
6
3

7
1
1

3
0
1

1
8

1
4

1
1
1

5
7
1

9
8
4

1
7

9
3
1

7
6

9
6
4

1
7
1

7
2
1

9
9
2

1
7
1
2

5
9
3

2
6
1

3
1
2

5
4
4

5
6
2
1

3
0
1

3
2
3

7
2

9
3
3
2

3

3

3

3

3

9

7

7

3

5

5

6

5

3
1

7
2

7
2

7

1
1

3
2

7
3

3
1

3
2

9
9

7
5
3
±
8
9
3

8
2
1
±
3
3
1

9
9
±
4
5
1

2
0
1
±
5
5
1

0
1
2

3
2
±
5
3

1
1
±
8
1

4
2
±
0
3

2
1
±
9
1

0
±
1

1
2

7
8

9
7

5
2
2

7
1

7
2

1
1

7
5

7

9

7
5
.
9
3

1
9
.
7
1

2
6
.
1

4
3
.
5

6
7
.
1

3
8
.
1
3

7
9
.
2
4

3
9
.
2
2

1
3
.
4

4
1
.
3
1

8
4
.
6
4

5
3
.
9
3

8
6
.
8
9

4
4
.
2

4
2
.
9
4
2

5
7
.
2
7

7
2
.
4

9
3
.
1
2

1
9
.
5
8

7
2
.
9
5
2

2
5
.
2
1

2
9
.
2
7

1
4
.
1

4
4
.
7
5
6

3
0
.
0

5
0
.
0

6
0
.
0

8
0
.
0

3
0
.
0

4
1
.
0

9
2
.
0

7
2
.
0

5
0
.
0

4
1
.
0

1
2
.
0

5
3
.
0

6
0
.
0

5
3
.
0

2
0
.
1

5
7
.
1

)

%
0
(

3
1
.
0

2
4
.
0

6
5
.
1

6
5
.
3

8
2
.
0

9
3
.
1

4
.
8

1
6
.
4
6

5
4
.
6
3
±
5
2
.
6
4

0
6
.
5
±
6
9
.
5
1

3
5
.
6
±
3
3
.
4
1

6
6
.
2
±
2
1
.
7

3
3
.
3
±
7
1
.
7

7
4
.
1
±
2
2
.
3

2
1
.
1
±
6
4
.
2

9
5
.
±
0
1
.
1

0
0
.
±
3
0
.

)

%
0
(

8
1
.
0

)

%
0
(

1
3
.
0

8
1
.
0

8
2
.
0

3
2
.
1

6
.
0

5
2
.
1

6
4
.
5

5
1
.
1

3
3
.
2

3

5

5

5

1

1
2
1

1
0
1

1
8

9
8

5
5

1
4
1

9
5
1

7
3

7
7

7
1
1

1
3
1

5
0
1

1
1
3

5
3
2

7
2
0
1

3
2
2

4
5
4

3
1
4

9
2

1

1

1

1

1

3

5

5
1

5

1

3

5

1
1

1
2

1
2

5
1

9
1

9
4

7
4

5
1

1
7

5

5
5
1

7
1
3

0
±
1

0
±
1

0
±
1

0
±
1

0
±
1

5
±
3

0
±
1

0
±
1

0
±
1

7
8
2

7

6

5

1

1

3

1

1

3

1
5
.
0

4
8
.
2

5
4
.
5

8
2
.
8

4
1
.
0

3
9
.
4
1

4
5
.
0
4

6
8
.
6
5

8
0
.
6

3
3
.
6
1

3
4
.
9
6

7
7
.
9
4

1
2
.
2
1

5
9
.
7
2

8
4
.
1
8

7
.
7
5
1

7
5
.
9

)

%
1
(
+
0
0
6
3

4
2
.
7
1
1

5
0
.
9
4
2

2
9
.
4

1
2
2

)

%
2
(
+
0
0
6
3

6
3
.
4
3
0
2

6
0
.
0

2
1
.
0

8
2
.
0

5
1
.
0

5
0
.
0

4
4
.
0

1
7
.
0

1
.
2

2
.
0

6
2
.
0

6
0
.
1

9
.
1

8
5
.
0

2
4
.
1

6
2
.
7

2
8
.
6
1

1
1
.
6

1
.
2

8
8
.
5
6

4
1
.
5
8

1
1
.
2
3

7
2
.
3

6
1
.
8
0
1
1

2
4
.
6
7
2

0
4
.
8
±
3
4
.
5
1

*

0
1

1
2
.
4
±
2
9
.
2
1

4
8
.
4
±
2
3
.
7

4
3
.
1
±
0
3
.
2

1
0
.
±
3
0
.

*

*

7
8
.
5
±
9
9
.
0
1

*

0
1

1
5
.
1
±
1
1
.
2

8
1
.
2
±
7
9
.
1

3
5
.
±
2
7
.

9
7
.
9
2
1

3
3
.
1
3

1
9
.
2

6
1
.
2

2
3
.
1

5
5
.
1

1
6
.
3

6
3
.
4

7
3
.
3

8
0
.
5

5

0
1

0
1

0
1

*

5

5

5

0
1

0
1

0
1

0
1

*

*

5

0
1

*

5

5

5

0
1

0
1

*

2

2

2

5

5

5

5

2
0
M
5
0
8
0
n
y
S
R

3
0
M
5
0
8
0
n
y
S
R

4
0
M
5
0
8
0
n
y
S
R

5
0
8
0
n
y
S
R

0
1
8
0
n
y
S
R

2
0
M
0
1
8
0
n
y
S
R

3
0
M
0
1
8
0
n
y
S
R

4
0
M
0
1
8
0
n
y
S
R

2
0
M
5
1
8
0
n
y
S
R

3
0
M
5
1
8
0
n
y
S
R

4
0
M
5
1
8
0
n
y
S
R

5
1
8
0
n
y
S
R

0
2
8
0
n
y
S
R

2
0
M
0
2
8
0
n
y
S
R

3
0
M
0
2
8
0
n
y
S
R

4
0
M
0
2
8
0
n
y
S
R

2
0
M
0
3
8
0
n
y
S
R

3
0
M
0
3
8
0
n
y
S
R

4
0
M
0
3
8
0
n
y
S
R

0
4
8
0
n
y
S
R

2
0
M
0
4
8
0
n
y
S
R

3
0
M
0
4
8
0
n
y
S
R

4
0
M
0
4
8
0
n
y
S
R

0
3
8
0
n
y
S
R

2
0
M
5
0
n
y
S

3
0
M
5
0
n
y
S

4
0
M
5
0
n
y
S

5
0
n
y
S

0
1
n
y
S

2
0
M
0
1
n
y
S

3
0
M
0
1
n
y
S

4
0
M
0
1
n
y
S

5
1
n
y
S

2
0
M
5
1
n
y
S

3
0
M
5
1
n
y
S

4
0
M
5
1
n
y
S

2
0
M
0
2
n
y
S

3
0
M
0
2
n
y
S

4
0
M
0
2
n
y
S

0
2
n
y
S

0
3
n
y
S

2
0
M
0
3
n
y
S

3
0
M
0
3
n
y
S

4
0
M
0
3
n
y
S

2
0
M
0
4
n
y
S

3
0
M
0
4
n
y
S

4
0
M
0
4
n
y
S

0
4
n
y
S

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

m
o
d
n
a
r

p
x
e

b
0
0
1

c
o
r
p

0
0
1

c
o
r
p

b
1
2

c
o
r
p

b
1
3

c
o
r
p

6
3

c
o
r
p

b
6
3

c
o
r
p

1
3

c
o
r
p

8
4

c
o
r
p

b
8
4

c
o
r
p

1
2

c
o
r
p

52

