Deep Reinforcement Learning for Field Development Optimization

Yusuf Nasir
Energy Resources Engineering
Stanford University
nyusuf@stanford.edu

0
2
0
2

g
u
A
5

]
P
S
.
s
s
e
e
[

1
v
7
2
6
2
1
.
8
0
0
2
:
v
i
X
r
a

Abstract

The ﬁeld development optimization (FDO) problem rep-
resents a challenging mixed-integer nonlinear program-
ming (MINLP) problem in which we seek to obtain the num-
ber of wells, their type, location, and drilling sequence that
maximizes an economic metric. Evolutionary optimization
algorithms have been effectively applied to solve the FDO
problem, however, these methods provide only a determin-
istic (single) solution which are generally not robust to-
wards small changes in the problem setup.
In this work,
the goal is to apply convolutional neural network-based
(CNN) deep reinforcement learning (DRL) algorithms to
the ﬁeld development optimization problem in order to ob-
tain a policy that maps from different states or represen-
tation of the underlying geological model to optimal deci-
sions. The proximal policy optimization (PPO) algorithm is
considered with two CNN architectures of varying number
of layers and composition. Both networks obtained policies
that provide satisfactory results when compared to a hybrid
particle swarm optimization - mesh adaptive direct search
(PSO-MADS) algorithm that has been shown to be effective
at solving the FDO problem.

1. Introduction

The oil and gas industry is faced with the dual energy
challenge of extracting oil and gas in a cost effective manner
and also seeking ways to reduce the carbon footprint. This
presents challenging subsurface optimization problems that
appear in different forms. On one hand, we have the ﬁeld
development optimization (FDO) problem where decisions
on the number of wells, their type (extraction/injection), lo-
cation, drilling sequence, and well operational settings need
to be made to optimally extract hydrocarbon in order to
maximize an economic metric. On the other hand, there is
the optimization problem related to carbon-capture and se-
questration (CCS) where the goal is to optimally ﬁnd ’sites’
where carbon dioxide (CO2) can be optimally injected and
stored to prevent leakage from the subsurface in the future.

The goal of this work is to investigate the performance of
convolutional neural network-based (CNN) deep reinforce-
ment learning (DRL) algorithm to the ﬁeld development op-
timization problem (with ﬁxed well operational settings).
In the ﬁeld development problem, the production life-cycle
is divided into a number of discrete drilling stages. Our
goal in each stage is to decide if to drill a well or not. If
the optimal decision is to drill a well, the decision on the
well type and well location will also need to be made. This
is a very challenging mixed-integer nonlinear programming
(MINLP) problem that requires a signiﬁcant number of ex-
pensive ﬂow simulations. Although the ﬁeld development
optimization problem is considered in this work, the pro-
cedures to be developed could be applicable to the carbon
capture and sequestration (CCS) problem.

Several approaches have been proposed to solve different
variants of the ﬁeld development problem. Evolutionary op-
timization algorithms, such as particle swarm optimization
[15, 9], genetic algorithm [13] etc., have been applied to
the ﬁeld development optimization problem. As the number
of drilling stages increases, the performance of these algo-
rithms deteriorate, due to increase in the number of decision
variables. Also they provide a single solution for the spe-
ciﬁc problem deﬁnition and hence cannot be generalized.
Thus, for a small change in the optimization setup, a new
optimization problem need to be solved (although previous
solutions can be used to improve efﬁciency). However, if
an optimal policy is obtained using DRL, it might be robust
to small changes in the optimization setup.

For this reason, the proximal policy optimization (PPO)
[18] algorithm that have been shown to perform satisfac-
torily for problems with large action/decision spaces and
easily parallelizable is proposed to solve the ﬁeld develop-
ment optimization problem in this work. The performance
of PPO is investigated using two different CNN architec-
tures of varying number of layers and composition. An efﬁ-
cient hybrid derivative-free optimization strategy that com-
bines particle swarm optimization (PSO) and mesh adaptive
direct search (MADS), for global exploration and local ex-
ploitation of the search space will be used to benchmark

1

 
 
 
 
 
 
the performance of the CNN-based DRL algorithm. Specif-
ically, the computational cost and objective function value
(net present value, NPV in this work) will be compared for
the different algorithms.

2. Related Work

There have been a number of studies that have applied
different optimization algorithms to some aspects of the
ﬁeld development optimization problem. Gradient-based
optimization approaches [4, 17] have been used to efﬁ-
ciently optimize the well control/operational settings (pa-
rameterized by continuous variables) with ﬁxed well lo-
cations. Other work have considered the separate well
placement optimization problem [15, 2] and the joint op-
timization of both the well placement and control problem
[1, 9, 14]. Due to the presence of multiple local optima
in the search space of the well placement problem, deriva-
tive free (DF) approaches have been shown to provide bet-
ter performance. DF approaches also provide satisfactory
results when the number of wells, their type and drilling
sequence are considered in the optimization [9]. As noted
earlier, in all of these studies, the goal is to obtain a single
solution that maximizes an objective function, typically the
net present value (NPV).

Reinforcement learning algorithm have been applied to
solve the well control optimization problem [8]. Deep re-
inforcement learning has also been applied to the well con-
trol optimization problem [11, 12]. In [11], they evaluated
the performance of deep Q-network (DQN), double DQN
(DDQN), dueling DDQN, and deep deterministic policy
gradient (DDPG) on the well control optimization problem
with fully connected neural networks (FCNN). The state
space which are two-dimensional maps are ﬂattened and
used as input and thus not retaining the spatial information
inherent in the data. An FCNN-based PPO was also used in
[12].

The focus in this work is on the more challenging ﬁeld
development optimization problem in which the decision to
be made include the number of wells, their locations, types
and drilling sequence. A CNN-based PPO is considered in
order to retain the spatial information present in the obser-
vation space (dynamic state and static maps).

3. Optimization Problem and Data

Our goal in this work is to use DRL to ﬁnd a policy
(π) that maps from states (representation of the environ-
ment/reservoir model) to optimal actions/decisions for the
ﬁeld development problem. In general, the DRL problem
can be represented as follows:

where J is the cumulative reward/objective function to be
optimized, θ is the weights of the neural network that de-
ﬁnes the policy. The variables s and a are the states and ac-
tions, respectively. The policy π(a | s, θ) deﬁnes the action
conditioned on the neural network weight and environment
(reservoir model) state.

In this work, the cumulative reward J is deﬁned as the
net present value (NPV). Following [19], we compute NPV
as follows:

Nt(cid:88)

NPV(π) =

Np
(cid:88)





k=1

i=1

(cid:16)
po qi

o,k − cpw qi

pw,k



ciw qi

iw,k

 ×

(cid:17)

−

Ni(cid:88)

i=1

∆tk
(1 + b)tk/365

−

Nw(cid:88)

i=1

|wi| cw
(1 + b)ti/365

.

(2)

Here Ni and Np are the number of injection and production
wells, respectively, Nt is the number of time steps in the
ﬂow simulation, tk and ∆tk are the time and time step size
at time step k, ti is the time at which well i is drilled, and po,
cpw, and ciw represent the oil price and the cost of produced
and injected water. The variables po, cpw, and ciw are set to
$55/STB, $6/STB, and $2/STB, respectively. The variables
cw and b represent the well drilling cost and annual discount
rate which are set to $25 million and 8% respectively. The
rates of oil/water production and water injection, for well i
at time step k are, respectively, qi
iw,k. Sim-
ilar equation can be written for a speciﬁc drilling stage by
considering only the production, injection and drilling in-
formation at that stage.

pw,k, and qi

o,k, qi

In this work, the Stanford’s Automatic Differentiation-
based General Purpose Simulator (AD-GPRS) [20] is used
for the ﬂow simulation to obtain quantities from which
the objective function is computed and also the dynamic
state maps (described later) that are components of the state
space. A restart strategy is used to improve the efﬁciency
of the overall ﬂow simulation. This entails saving informa-
tion of previous ﬂow simulations (due to actions taken in
previous drilling stages) that allows for the simulation to be
restarted at the beginning of the next drilling stage without
the need to run the ﬂow simulation from scratch.
In this
work, ﬁve drilling stages are considered each of length 150
days.

4. Methodology

In this section, the action and observation space are de-
scribed. Finally, the CNN and PPO DRL algorithm are also
discussed.

4.1. Action and state space

max
θ

J(π(a | s, θ))

(1)

The key components of deep reinforcement learning in-
cludes the action, observation (or state) spaces, and reward.

2

(a) Permeability map (in log scale)

(b) Pressure map

Figure 1. The four 2D maps that make op the map component of the state space. The red circles in the well location map denotes injectors
(1) and blue denotes producers (-1).

(c) Saturation map

(d) Well location map

The reinforcement learning agent performs certain actions
in the environment. This results in a new state for the en-
vironment and a reward signal that indicates the quality of
the action. The action and observation spaces for the FDO
problem are now described. In the action space, the well
type and drill/do not drill decision at drilling stage k is rep-
resented by a ternary variable wk ∈ {−1, 0, 1} where -1
represents the decision to drill a producer, 1 the decision to
drill an injector, and 0 the decision to not drill the well. This
is however implemented with a shift of one in the OpenAi
gym environment [3] because it does not take on negative
values. The second action (active only when the agent de-
cides to drill a well) which represents where the well should
be drilled is represented by a discrete variable u ∈ ZNxNy ,
where Nx and Ny represents the number of grid blocks in
the areal x and y directions. The reservoir model in this
work has Nx = Ny = 60. Fig. 1 shows a typical repre-
sentation of the state space maps at a particular stage of the
development.

At each drilling stage, the state/observation space is rep-
resented by both two-dimensional maps and a vector. The
2D maps in the state space include the permeability, pres-
sure, saturation and location maps. The permeability map
is a static (in this work) measure that indicates the conduc-

tivity of ﬂuid in different section of the subsurface model.
The dynamic pressure and saturation maps are generated by
the reservoir simulator. They depend on the action taken
by the agent. For example, the regions in which an injec-
tion well is drilled (for pressure support) will have a rela-
tively higher pressure than regions where a production well
is drilled. Accordingly, since water is injected, the injection
regions should have high water saturation. The well loca-
tion map indicates the location of wells that have already
been drilled and their type.

The permeability and pressure map are normalized to
values between 0 and 1. The saturation which is a percent-
age is given between 0 and 1 and hence do not need to be
normalized. The well location map however is more like
a mask with zeros and have value of -1 where a producer
is drilled and 1 where an injector is drilled. Although the
effect of the use of numbers on opposite side of the num-
ber line is not isolated and studied, the goal is to allow the
agent to easily capture the opposite effects of producing and
extracting wells (pressure decrease and increase). The spa-
tial component of the state space sm ∈ RNy×Nx×c, where c
deﬁnes the number of 2D maps (c = 4 in this work).

The vector component of the state space at each drilling
stage sv ∈ R3 contains the normalized (between zero and

3

(a) Small network

(b) Large network

Figure 2. Small and large CNN architectures. The ﬁrst number in the convolutional layers represent the number of ﬁlters and the number
in parenthesis of the fully connected layers denote the number of neurons. All convolution are of stride one with no padding (except in
residual blocks with same padding).

one) drilling stage number, number of producers and in-
jectors that have been drilled at that stage. The number
of producer and injectors which are key quantities in FDO
are explicitly deﬁned in the vector component, even though
they are implicitly deﬁned in the well location map, in or-
der to accelerate learning. Following [16] that showed the
importance of incorporating time in reinforcement learning
problems, the drilling stage number (which also deﬁnes the
remaining time in the ﬁnite horizon ﬁeld development prob-
lem) was included in the vector component of the observa-
tion space in order to satisfy the Markov property.

4.2. DRL algorithm and CNN architecture

As noted earlier, in this work the proximal policy op-
timization (PPO) [18] deep reinforcement learning algo-
rithm is considered. PPO is an on-policy DRL algorithm
that can be used with either discrete or continuous action
spaces. The PPO with clipped surrogate objective (PPO-
clip) is used in this work. The policy update for PPO-clip
using multiple steps of stochastic gradient descent is given
by:

θk+1 = arg max

θ

E
s,a∼πθk

(cid:2)L(s, a, θk, θ)(cid:3)

(3)

where L is given by

L(s, a, θk, θ) = min

(cid:18) πθ(a|s)
πθk (a|s)

Aπθk (s, a),

(cid:18) πθ(a|s)
πθk (a|s)

(cid:19)

, 1 − (cid:15), 1 + (cid:15)

(cid:33)

Aπθk (s, a))

(4)

Here, (cid:15) is a hyperparameter that determines the trust region
(around the old policy) during the policy update and the new

4

policy is not allowed to go outside this region. The advan-
tage function, A, deﬁnes the ’quality’ of an action without
considering the ’quality’ of its state. In addition to the pol-
icy output the deﬁnes the probability distribution of the ac-
tion space at a speciﬁc state, the agent will need to compute
the value/quality of the state V (s) in order to calculate the
advantage function. RLLib’s [10] implementation of PPO-
clip is used in this project.

Two CNN architectures of varying number of layers and
composition, shown in Fig. 2, are considered. In the small
network shown in Fig. 2(a), the state maps are convolved
through three convolutional layers. The output of the third
layer is shared by the policy and value arms of the network.
The vector components of the state space which include
the drilling stage index (Dk), number of producers(Np) and
injectors(Ni), are processed by two fully connected layers.
The output of the second fully connected layer is concate-
nated (individually) with both the output of the ﬁrst convo-
lution in the value and policy arms of the network. The in-
dividual concatenated tensors are further processed by fully
connected layers to produce the probability distribution of
the action space condition on the state space (π(a|s) for the
policy network) and a single digit that indicated the value of
the state (V (s) for the value network). The large network
shown in Fig. 2(b) is similar to the small network except
three residual blocks are introduced to replace the last con-
volution in the shared layers by the policy and value arms.
A sample size of 320 episodes (full ﬂow simulation) is
speciﬁed to collect experiences by rolling out the policy un-
til the terminal state is reached using 40 CPU processors.
This means the effective computational cost (neglecting IO
processing for reading and saving restart ﬁles) to collect ex-
periences at each iteration is the cost of eight ﬂow simula-
tions. Adam optimizer is used with an initial learning rate

Figure 3. Evolution of the mean cumulative reward with number
of iterations

of 0.001 and a batch size of 160 episodes is used for train-
ing. A single Nvidia V100 GPU is used to train the CNN
network. The RLlib package [10] handles the communica-
tion between the GPU and CPUs and the parallel execution
of the ﬂow simulation with the CPUs using a custom ﬁeld
development gym environment developed in this work.

5. Results

The results for the optimization problem using the small
and large CNN architectures are now presented. Fig. 3
shows the evolution of the cumulative reward with number
of iterations. The red and blue curves shows the evolution
of the mean reward for the small and large networks, respec-
tively. From the result it is evident that the agent is learning
how to perform the task due to the consistent increase in
the mean reward. Additionally, the mean reward for both
networks at later stage of the optimization has about same
value as the maximum reward. The result shows that the
small network has a relatively faster convergence rate com-
pared to the large network, but the large network obtained
the highest cumulative reward.

PSO-MADS algorithm is also used to benchmark the
performance of PPO. The optimization consists of 15 de-
cision variables, a PSO population size of 40 and a termina-
tion criteria of 10,000 ﬂow simulations. The optimization
is fully parallelized using 40 CPUs. As noted earlier, us-
ing PSO-MADS we obtain a single solution (and not a pol-
icy) that (potentially) maximizes the NPV. Fig. 4(a) and 4(b)
shows the ’optimal’ solutions obtained by following the pol-
icy of the small and large networks, respectively. The re-
sults for PSO-MADS is shown in Fig. 4(c). Although, the
DRL-based solutions obtained similar number of wells, the
solution of the small network entails a development with
three producers and one injector, while the large network’s

(a) Small network ($249.80 million)

(b) Large network ($271.86 million)

(c) PSO-MADS ($272.12 million)

Figure 4. Optimal solutions (with cumulative reward, NPV) ob-
tained by following the policy of the small and large network. The
best PSO-MADS solution from three runs is also shown. The blue
circles represent injectors, red represent producers, and the num-
ber denotes the drilling stage in which the well is drilled.

solution includes two injectors and two producers. In both
solutions, however, an injector is drilled in the ﬁrst stage.

PSO-MADS obtained a solution with a cumulative re-
ward of $272.12 million. The cumulative reward obtained

5

020406080100Number of iterations-50050100150200250300Cumulative reward (million USD)mean (small network)mean (large network)1234102030405060x102030405060y1234102030405060x102030405060y12345102030405060x102030405060y44.555.566.57log kby both the small and large network policies are $249.80
and $271.86 million, respectively. Although PSO-MADS
obtained a higher cumulative reward than that obtained by
following the policy of the large network, the PSO-MADS
solution includes a total of ﬁve wells while that of the large
networks solution has four wells (less capital cost) and com-
parable NPV. This results suggests that the policy obtained
by DRL are applicable for ﬁeld development optimization.

Policy generalization

It is evident from the results that PSO-MADS have a
lower computational cost than the DRL approach. This
is mainly because PSO-MADS solves a relatively simple
problem of ﬁnding the optimal solution that maximizes the
NPV, while in DRL our goal is to ﬁnd a policy that maps
from varying states to optimal actions. Thus, the main goal
of applying DRL to ﬁeld development optimization is to
obtain a policy that is robust towards small changes in the
problem setup. The generalization of the policy obtained
from the large network is now investigated.

The action proposed by the policy of the large network
in the second drilling stage, which is to drill a producer (in
the northwestern region) is executed in the ﬁrst stage. This
means the state after the ﬁrst drilling stage will be differ-
ent from what would have been obtained if an injector is
drilled ﬁrst as recommended by the policy. Interestingly, in
the PSO-MADS solution the ﬁrst action involves a producer
drilled in approximately same area in the northwestern re-
gion. After choosing this ﬁrst action, the policy of the large
network is followed from the second to ﬁfth stage. The re-
sult obtained is shown in Fig. 5 shows the solution obtained
with an NPV of $269.06 million. The policy maintained the
location of the subsequent wells (except the slight alteration
of the location of the producer drilled in the third drilling
stage), while drilling an injector in drilling stage two as will
be expected.

Figure 5. Optimal solutions (with an NPV of $269.06 million) ob-
tained by following the policy of the large network after user de-
ﬁned initial action.

nary investigation of the generalization ability of the policy
obtained was successful.

In future work, the sampling efﬁciency of the DRL al-
gorithm should be improved by tuning both the PPO and
neural network hyperparameters. The performance of other
DRL algorithms, such as soft actor critic (SAC) [6], impor-
tance weighted actor-learner architectures (IMPALA) [5]
(and PPO variant of IMPALA), distributed prioritized expe-
rience replay (APEX) [7], and model-based reinforcement
learning that have demonstrated great sample and computa-
tional efﬁciency in other domains, should be investigated on
the ﬁeld development optimization problem. The general-
ization of the DRL policy should also be further investigated
on cases with varying model parameters. It will be of inter-
est to also incorporate varying well operational settings into
the DRL policy by including an additional well settings de-
cision variable during training. Finally, the DRL algorithm
should be extended to ﬁeld development under uncertainty
where several realizations of the reservoir model are used to
capture geological uncertainty.

6. Conclusion

Acknowledgement

In this work, CNN-based DRL algorithm was applied to
the ﬁeld development optimization problem. Two differ-
ent CNN architectures of varying layers and composition
were considered. The proximal policy optimization (PPO)
[18] deep reinforcement learning algorithm was considered.
The performance of PPO was bench marked with a hybrid
derivative-free PSO-MADS [9] optimization algorithm that
has been shown to be effective for the ﬁeld development
optimization problem.

The policy obtained by using the large network consid-
ered in this work provided better solution than that obtained
from the policy of the small network. However, the small
network has a faster convergence rate which may be due to
the fewer number of parameters in the network. Prelimi-

Thanks to Meng Tang for directing me to the RLlib pack-
age used in this work. The computational resources pro-
vided by Stanford’s Center for Computational Earth and En-
vironmental Sciences (CEES) is greatly appreciated.

References

[1] Mathias C Bellout, David Echeverr´ıa Ciaurri, Louis J Durlof-
sky, Bjarne Foss, and Jon Kleppe. Joint optimization of oil
well placement and controls. Computational Geosciences,
16(4):1061–1079, 2012.

[2] Zyed Bouzarkouna, Didier Yu Ding, and Anne Auger. Well
placement optimization with the covariance matrix adapta-
tion evolution strategy and meta-models. Computational
Geosciences, 16(1):75–92, 2012.

6

1234102030405060x102030405060y44.555.566.57log kadjoint-based optimal control and model updating. Compu-
tational Geosciences, 10(1):3–36, 2006.

[18] John Schulman, Filip Wolski, Prafulla Dhariwal, Alec Rad-
ford, and Oleg Klimov. Proximal policy optimization algo-
rithms, 2017.

[19] Mehrdad G Shirangi and Louis J Durlofsky. Closed-loop
ﬁeld development under uncertainty by use of optimization
with sample validation. SPE Journal, 20(05):908–922, 2015.
[20] Y. Zhou. Parallel general-purpose reservoir simulation with
coupled reservoir models and multisegment wells. PhD the-
sis, Stanford University, 2012.

[3] Greg Brockman, Vicki Cheung, Ludwig Pettersson, Jonas
Schneider, John Schulman, Jie Tang, and Wojciech Zaremba.
Openai gym, 2016.

[4] Dirk Roelof Brouwer and JD Jansen. Dynamic optimiza-
tion of water ﬂooding with smart wells using optimal con-
trol theory. In European Petroleum Conference. Society of
Petroleum Engineers, 2002.

[5] Lasse Espeholt, Hubert Soyer, Remi Munos, Karen Si-
monyan, Volodymir Mnih, Tom Ward, Yotam Doron, Vlad
Firoiu, Tim Harley, Iain Dunning, Shane Legg, and Koray
Kavukcuoglu. Impala: Scalable distributed deep-rl with im-
portance weighted actor-learner architectures, 2018.

[6] Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey
Levine. Soft actor-critic: Off-policy maximum entropy deep
reinforcement learning with a stochastic actor, 2018.

[7] Dan Horgan, John Quan, David Budden, Gabriel Barth-
Maron, Matteo Hessel, Hado van Hasselt, and David Silver.
Distributed prioritized experience replay, 2018.

[8] Farzad Hourfar, Hamed Jalaly Bidgoly, Behzad Moshiri,
Karim Salahshoor, and Ali Elkamel. A reinforcement learn-
ing approach for waterﬂooding optimization in petroleum
reservoirs. Engineering Applications of Artiﬁcial Intelli-
gence, 77:98–116, 2019.

[9] Obiajulu J Isebor, D. Echeverr´ıa Ciaurri, and Louis J
Durlofsky. Generalized ﬁeld-development optimization with
derivative-free procedures. SPE Journal, 19(05):891–908,
2014.

[10] Eric Liang, Richard Liaw, Philipp Moritz, Robert Nishihara,
Roy Fox, Ken Goldberg, Joseph E. Gonzalez, Michael I. Jor-
dan, and Ion Stoica. Rllib: Abstractions for distributed rein-
forcement learning, 2017.

[11] Hongze Ma, Gaoming Yu, Yuehui She, and Yongan Gu.
Waterﬂooding optimization under geological uncertainties
In SPE
by using deep reinforcement learning algorithms.
Annual Technical Conference and Exhibition. Society of
Petroleum Engineers, 2019.

[12] Ruslan Miftakhov, Abdulaziz Al-Qasim, and Igor Efremov.
Deep reinforcement learning: Reservoir optimization from
pixels. In International Petroleum Technology Conference.
International Petroleum Technology Conference, 2020.
[13] Guillermo Montes, Pablo Bartolome, and Angel L Udias.
The use of genetic algorithms in well placement optimiza-
tion. In SPE Latin American and Caribbean petroleum engi-
neering conference. Society of Petroleum Engineers, 2001.

[14] Yusuf Nasir, Wei Yu, and Kamy Sepehrnoori. Hybrid
derivative-free technique and effective machine learning sur-
rogate for nonlinear constrained well placement and produc-
tion optimization. Journal of Petroleum Science and Engi-
neering, 186:106726, 2020.

[15] J´erˆome E Onwunalu and Louis J Durlofsky. Application of
a particle swarm optimization algorithm for determining op-
timum well location and type. Computational Geosciences,
14(1):183–198, 2010.

[16] Fabio Pardo, Arash Tavakoli, Vitaly Levdik, and Petar Kor-
mushev. Time limits in reinforcement learning, 2017.
[17] Pallav Sarma, Louis J Durlofsky, Khalid Aziz, and Wen H
Efﬁcient real-time reservoir management using

Chen.

7

