1
2
0
2

b
e
F
2
1

]
n
y
d
-
u
l
f
.
s
c
i
s
y
h
p
[

2
v
1
6
6
6
0
.
1
1
0
2
:
v
i
X
r
a

This draft was prepared using the LaTeX style ﬁle belonging to the Journal of Fluid Mechanics

1

Stabilization of the ﬂuidic pinball with
gradient-enriched machine learning control

Guy Y. Cornejo Maceda1, Yiqing Li2, Fran¸cois Lusseyran1, Marek
Morzy´nski3 and Bernd R. Noack2,4†

1Universit´e Paris-Saclay, CNRS, Laboratoire Interdisciplinaire des Sciences du Num´erique,
91400, Orsay, France.
2Center for Turbulence Control, Harbin Institute of Technology (Shenzhen), Room 312,
Building C, University Town, Xili, Shenzhen 518058, People’s Republic of China.
3Department of Virtual Engineering, Pozna´n University of Technology, Jana Pawla II 24, PL
60-965 Pozna´n, Poland.
4Institut f¨ur Str¨omungsmechanik und Technische Akustik (ISTA), Technische Universit¨at
Berlin, M¨uller-Breslau-Straße 8, D-10623 Berlin, Germany.

(Received xx; revised xx; accepted xx)

We stabilize the ﬂow past a cluster of three rotating cylinders—the ﬂuidic pinball—with
automated gradient-enriched machine learning algorithms. The control laws command
the rotation speed of each cylinder in an open- and closed-loop manner. These laws
are optimized with respect to the average distance from the target steady solution
in three successively richer search spaces. First, stabilization is pursued with steady
symmetric forcing. Second, we allow for asymmetric steady forcing. And third, we
determine an optimal feedback controller employing nine velocity probes downstream.
As expected, the control performance increases with every generalization of the search
space. Surprisingly, both open- and closed-loop optimal controllers include an asymmetric
forcing, which surpasses symmetric forcing. Intriguingly, the best performance is achieved
by a combination of phasor control and asymmetric steady forcing. We hypothesize that
asymmetric forcing is typical for pitchfork bifurcated dynamics of nominally symmetric
conﬁgurations. Key enablers are automated machine learning algorithms augmented with
gradient search: explorative gradient method for the open-loop parameter optimization
and a gradient-enriched machine learning control (gMLC) for the feedback optimiza-
tion. gMLC learns the control law signiﬁcantly faster than previously employed genetic
programming control. The gMLC source code is freely available online.

1. Introduction

We stabilize the wake behind a ﬂuidic pinball using a hierarchy of model-free self-
learning control methods from a one-parametric study of open-loop control to a gradient-
enriched machine learning feedback control. Flow control is at the heart of many engineer-
ing applications. Traﬃc alone proﬁts from ﬂow control via drag reduction of transport
vehicles (Choi et al. 2008), lift increase of wings (Semaan et al. 2016), mixing control
for more eﬃcient combustion (Dowling & Morgans 2005), and noise reduction (Jordan
& Colonius 2013).

The control logic is a critical component for performance increases after the actuators
and sensors have been deployed. The hardware is typically determined from engineering
wisdom (Cattafesta & Shelpak 2011). The control law may be designed with a rich

† Email address for correspondence: bernd.noack@hit.edu.cn

 
 
 
 
 
 
2

G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

arsenal of mathematical methods. Control theory oﬀers powerful methods for control
design with large success for model-based stabilization of low-Reynolds number ﬂows
or simple ﬁrst and second order dynamics (Rowley & Williams 2006). Transport-related
engineering applications are at high Reynolds numbers and thus associated with turbulent
ﬂows. So far, turbulence has eluded most attempts for model-based control albeit for
few simple exceptions (Brunton & Noack 2015). Examples relate to ﬁrst and second
order dynamics, e.g., the quasi-steady response to quasi-steady actuation (Pfeiﬀer &
King 2012), opposition control near walls (Choi et al. 1994; Fukagata & Nobuhide 2003),
stabilizing phasor control of oscillations (Pastoor et al. 2008), and two-frequency crosstalk
(Glezer et al. 2005; Luchtenburg et al. 2009). In general, control design is challenged by
the high-dimensionality of the dynamics, the nonlinearity with many frequency crosstalk
mechanisms, and the large time-delay between actuation and sensing.

Hence, most closed-loop control studies of turbulence resort to a model-free approach.
A simple example is extremum seeking (Gelbert et al. 2012) for online tuning of one
or few actuation parameters, like amplitude and frequency of periodic actuation. More
complex examples involve high-dimensional parameter optimization with methods of
machine learning, like evolutionary strategies (Koumoutsakos et al. 2001) and genetic
algorithms (Benard et al. 2016). Even regression problems for nonlinear feedback laws
have been learned by genetic programming (Ren et al. 2020) and reinforcement learning
(Rabault et al. 2019).

Genetic programming control (GPC) has been pioneered by Dracopoulos (1997) over
20 years ago and has been proven to be particularly successful for nonlinear feedback
turbulence control in experiments. Examples include the drag reduction of the Ahmed
body (Li et al. 2018) and the same obstacle under yaw angle (Li et al. 2019), mixing
layer control (Parezanovi´c et al. 2016), separation control of a turbulent boundary layer
(Debien et al. 2016), recirculation zone reduction behind a backward facing step (Gautier
et al. 2015), and jet mixing enhancement (Zhou et al. 2020), just to name a few.
GPC has consistently outperformed existing optimized control approaches, often with
unexpected frequency crosstalk mechanisms (Noack 2019). GPC has a powerful capability
to ﬁnd new mechanisms (exploration) and populate the best minima (exploitation). Yet,
the exploitation is ineﬃcient leading to increasing redundant testing of similar control
laws with poor convergence to the minimum. This challenge is well known and will be
addressed in this study.

As benchmark control problem, we chose the ﬂuidic pinball, the ﬂow around three
parallel cylinders one radius apart from each other (Noack et al. 2016; Deng et al.
2020; Chen et al. 2020). The triangle of centers points in the direction of the ﬂow. The
actuation is performed by rotating each cylinder independently. The ﬂow is monitored
by 9 velocity probes downstream. The control goal is the complete stabilization of the
unstable symmetric steady Navier-Stokes solution. This choice is motivated by several
reasons. First, already the unforced ﬂuidic pinball shows a surprisingly rich dynamics.
With increasing Reynolds number the steady wake becomes successively unstable in a
Hopf bifurcation, a pitchfork bifurcation, another Hopf bifurcation before, eventually,
a chaotic state is reached. Second, the cylinder rotations may encapsulate the most
common wake stabilization approaches, like Coanda forcing (Geropp & Odenthal 2000),
base bleed (Wood 1964; Bearman 1967), low-frequency forcing (Pastoor et al. 2008), high-
frequency forcing (Thiria et al. 2006), phasor control (Roussopoulos 1993), and circulation
control (Cortelezzi et al. 1994). Third, the rich unforced and controlled dynamics mimics
nonlinear behaviour of turbulence while the computation of the two-dimensional ﬂow is
manageable on workstations. To summarize, the ﬂuidic pinball is an attractive all-weather
plant for non-trivial multiple-input multiple-output control dynamics.

Stabilization with gradient-enriched machine learning control

3

EGM
gMLC
GPC
LGP
LHS
MC
MIMO
MLC
PSD

Explorative Gradient Method
Gradient-enriched Machine Learning Control
Genetic Programming Control
Linear Genetic Programming
Latin Hypercube Sampling
Monte Carlo
Multiple-Input Multiple-Output
Machine Learning Control
Power Spectral Density

Table 1: Table of acronyms.

This study focuses on the stabilization of the unstable symmetric steady solution of
the ﬂuidic pinball in the pitchfork regime, i.e., for asymmetric vortex shedding. This goal
is pursued under symmetric steady actuation, general non-symmetric steady actuation
and general nonlinear feedback control. We aim to physically explore the actuation
mechanisms in a rich search space and to eﬃciently exploit the performance gains from
gradient-based approaches. This multi-objective optimization leads to innovations of
hitherto employed parameter optimizations and regression solvers as a beneﬁcial side
eﬀect.

The manuscript is organized as follows. § 2 introduces the ﬂuidic pinball problem
and the corresponding direct numerical simulation. § 3 reviews and augments machine
learning control strategies. In § 4, a hierarchy of increasingly more complex control
laws is optimized for wake stabilization. § 5 discusses design aspects of the proposed
methodology. § 6 summarizes the results and indicates directions for future research.
Table 1 lists all the acronyms used in the manuscript.

2. The ﬂuidic pinball—A benchmark ﬂow control problem

In this section, we describe the ﬂuid system studied for the control optimization—the
ﬂuidic pinball. First we present the ﬂuidic pinball conﬁguration and the unsteady 2D
Navier-Stokes solver in § 2.1, then the unforced ﬂow spatio-temporal dynamics in § 2.2
and ﬁnally the control problem for the ﬂuidic pinball in § 2.3.

2.1. Conﬁguration and numerical solver

The test case is a two-dimensional uniform ﬂow past a cluster of three cylinders of same
diameter D. The center of the cylinders form an equilateral triangle pointing upstream.
The ﬂow is controlled by the independent rotation of the cylinders along their axis. The
rotation of the cylinders enables the steering of incoming ﬂuid particles, like a pinball
machine. Thus, we refer this conﬁguration as the ﬂuidic pinball. In our study, we choose
the side length of the equilateral triangle equal to be 1.5D. The distance of one radius
gives rise to an interesting ﬂip-ﬂopping dynamics (Chen et al. 2020).

The ﬂow is described in a Cartesian coordinate system, where the origin is located
midway between the two rearward cylinders. The x-axis is parallel to the streamwise
direction and the y-axis is orthogonal to the cylinder axis. The velocity ﬁeld is denoted
by u = (u, v) and the pressure ﬁeld by p. Here, u and v are, respectively, the streamwise
and transverse components of the velocity. We consider a Newtonian ﬂuid of constant
density ρ and kinematic viscosity ν. For the direct numerical simulation, the unsteady
incompressible viscous Navier-Stokes equations are non-dimensionalized with cylinder

4

G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

(a) Symmetric steady solution.

(b) Unforced ﬂow at t = 400.

Figure 1: Vorticity ﬁelds for the unforced ﬂuidic pinball at Re D = 100. Blue (red) regions
bounded by dashed lines represent negative (positive) vorticity. Darker regions indicate
higher values of vorticity magnitude.

diameter D, the incoming velocity U∞ and the ﬂuid density ρ. The corresponding
Reynolds number is Re D = U∞D/ν. Throughout this study, only Re D = 100 is
considered.

The computational domain Ω is a rectangle bounded by [−6, 20] × [−6, 6] and excludes

the interior of the cylinders:
Ω = {[x, y](cid:124) ∈ R2 : [x, y](cid:124) ∈ [−6, 20] × [−6, 6] ∧ (x − xi)2 + (y − yi)2 (cid:62) 1/4, i = 1, 2, 3}.
Here, [xi, yi](cid:124) with i = 1, 2, 3, are the coordinates of the cylinder centers, starting from
the front cylinder and numbered in mathematically positive direction,

x1 = −3/2 cos(30◦)
x2 = 0
x3 = 0

y1 = 0,
y2 = −3/4,
3/4.
y3 =

The computational domain Ω is discretized on an unstructured grid comprising 4225
triangles and 8633 nodes. The grid is optimized to provide a balance between computation
speed and accuracy. Grid independence of the direct Navier-Stokes solutions has been
established by Deng et al. (2020).

The boundary conditions for the inﬂow, upper and lower boundaries are U∞ = ex while
a stress-free condition is assumed for the outﬂow boundary. The control of the ﬂuidic
pinball is carried out by the rotation of the cylinders. A non-slip condition is adopted
on the cylinders: the ﬂow adopts the circumferential velocities of the front, bottom and
top cylinder speciﬁed by b1 = UF , b2 = UB and b3 = UT . The actuation command
comprises these velocities, b = [b1, b2, b3](cid:124). A positive (negative) value of the actuation
command corresponds to counter-clockwise (clockwise) rotation of the cylinders along
their axis. The numerical integration of the Navier-Stokes equations is carried by an
in-house solver using a fully implicit Finite-Element Method. The time integration is
performed with an iterative Newton-Raphson-like approach. The chosen time step of 0.1
corresponds to about 1% of the characteristic shedding period. The method is third order
accurate in time and space and employs a pseudo-pressure formulation. The solver has
been employed in recent ﬂuidic pinball investigations for reduced-order modeling (Deng
et al. 2020; Noack et al. 2016) and for control (Ishar et al. 2019). We refer to Noack et al.
(2003, 2016) for further information on the numerical method. The code is accessible on
GitLab on email request.

The initial condition for the numerical simulations is the symmetric steady solution.
The symmetrical steady solution is computed with a Newton-Raphson method on the
steady Navier-Stokes. An initial short and small rotation of the front cylinder is used
to kick-start the transient to natural vortex shedding in the ﬁrst period (Deng et al.
2020). This rotation has a circumferential velocity of +0.5 at t < 6.25 and of −0.5 at
6.25 < t < 12.5. The transient regime lasts around 400 convective time units. Figure

Stabilization with gradient-enriched machine learning control

5

(a)

(c)

(b)

(d)

Figure 2: Characteristics of the unforced natural ﬂow starting from the steady solution
(t = 0). The transient spans until t ≈ 400. (a) Time evolution of the lift coeﬃcient CL,
(b) phase portrait, (c) time evolution of the instantaneous cost function ja and (d) Power
Spectral Density (PSD) showing the natural frequency f0 = 0.116 and its ﬁrst harmonic.
The phase portrait is computed during the post-transient regime t ∈ [900, 1400] and the
PSD is computed over the last 1000 convective time units, t ∈ [400, 1400].

1 shows the vorticity ﬁeld for the symmetric steady solution and the natural unforced
ﬂow after 400 convective units. The snapshot at t = 400 in ﬁgure 1b will be the initial
condition for all the following simulations.

2.2. Flow characteristics

The ﬂuidic pinball is a geometrically simple conﬁguration that comprises key features
of real-life ﬂows such as successive bifurcations and frequency crosstalk between modes.
Deng et al. (2020) shows that the unforced ﬂuidic pinball undergoes successive bifurca-
tions with increasing Reynolds number before reaching a chaotic regime. The ﬁrst Hopf

0200400600800100012001400-0.1-0.0500.050.102004006008001000120014000510152025303540456

G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

(a) t + T0/8

(b) t + 2T0/8

(c) t + 3T0/8

(d) t + 4T0/8

(e) t + 5T0/8

(f) t + 6T0/8

(g) t + 7T0/8

(h) t + T0

(i) Symmetric steady solution

(j) Mean ﬁeld

Figure 3: Vorticity ﬁelds of the unforced ﬂow. (a)-(f) Time evolution of the vorticity
ﬁeld in the last period of the simulation, (i) the objective symmetric steady solution and
(j) the mean ﬁeld of the unforced ﬂow. The color code is the same as ﬁgure 1. T0 is the
natural period associated to the natural frequency f0. The mean ﬁeld has been computed
by averaging the ﬂow over 100 periods.

bifurcation at Reynolds number Re ≈ 18 breaks the symmetry in the ﬂow and initiates
the von K´arm´an vortex shedding. The second bifurcation at Reynolds number Re ≈ 68 is
of pitchfork type and gives rise to a transverse deﬂection of jet-like ﬂow between the two
rearward cylinders. The bi-stability of the jet deﬂection has been reported by Deng et al.
(2020). At a Reynolds number Re = 100 the jet deﬂection is rapid and occurs before the
vortex shedding is fully established. Figure 2a shows an increase of the lift coeﬃcient CL
before oscillations set in and the lift coeﬃcient converges against a periodic oscillation
around a slightly reduced mean value. Those bifurcations are a consequence of multiple
instabilities present in the ﬂow: there are two shear instabilities, on the top and bottom
cylinder, and a jet bi-stability originating from the gap between the two back cylinders.
The shear-layer instabilities synchronize to a von K´arm´an vortex shedding.

Figure 2 illustrates the dynamics of the unforced ﬂow from the unstable steady

Stabilization with gradient-enriched machine learning control

7

symmetric solution to the post-transient periodic ﬂow. The phase portrait in ﬁgure 2b
and the power spectral density (PSD) in ﬁgure 2d show a periodic regime with frequency
f0 = 0.116 and its harmonic. Figure 2a shows that the mean value of the lift coeﬃcient
CL is not null. This is due to the deﬂection of the jet behind the two rearward cylinders
during the post-transient regime. During this regime, the deﬂection of the jet stays on
one side as it is illustrated in ﬁgure 3a-3h over one period and in ﬁgure 3j in the mean
ﬁeld. This deﬂection explains the asymmetry of the lift coeﬃcient CL. Indeed, the upward
oriented jet increases the pressure on the lower part of the top cylinder leading to an
increase of the lift coeﬃcient. In ﬁgure 2a, the initial downward spike on the lift coeﬃcient
is due to the initial kick. The unforced natural ﬂow is our reference simulation for future
comparisons.

Thanks to the rotation of the cylinders, the ﬂuidic pinball is capable of reproducing six
actuation mechanisms inspired from wake stabilization literature and exploiting distinct
physics. Examples of those mechanisms can be found in Ishar et al. (2019). First, the wake
can be stabilized by shaping the wake region more aerodynamically—also called ﬂuidic
boat tailing. Here, shear layer is vectored towards the center region with passive devices,
like vanes (Fl¨ugel 1930) or active control through Coanda blowing (Geropp 1995; Geropp
& Odenthal 2000; Barros et al. 2016). In the case of the ﬂuidic pinball, we can mimic
this eﬀect by a counter-rotating rearward cylinders which accelerates the boundary layer
and delays separation. This ﬂuidic boat tailing is typically associated with signiﬁcant
drag reduction. Second, the two rearward cylinders can also rotate oppositely ejecting a
ﬂuid jet on the centerline. Thus, interaction between the upper and lower shear layer is
suppressed, preventing the development of a von K´arm´an vortex in the vicinity of the
cylinders. Such base-bleeding mechanism has a similar physical eﬀect as a splitter plate
behind a bluﬀ body and has been proved to be an eﬀective means for wake stabilization
(Wood 1964; Bearman 1967). Third, phasor control can be performed by estimating the
oscillation phase and feeding it back with a phase shift and gain (Protas 2004). Fourth,
uniﬁed rotation of the three cylinders in the same direction gives rise to higher velocities,
and thus larger vorticity, on one side at the expense of the other side, destroying the vortex
shedding. This eﬀect relates to the Magnus eﬀect and stagnation point control (Seifert
2012). Fifth, high-frequency forcing can be eﬀected by symmetric periodic oscillation of
the rearward cylinders. With a vigorous cylinder rotation (Thiria et al. 2006), the upper
and lower shear layer are re-energized, reducing the transverse wake proﬁle gradients
and thus the instability of the ﬂow. Thus, the eﬀective eddy viscosity in the von K´arm´an
vortices increases, adding a damping eﬀect. Sixth and ﬁnally, a symmetrical forcing at a
lower frequency than the natural vortex shedding may stabilize the wake (Pastoor et al.
2008). This is due to the mismatch between the anti-symmetric vortex shedding and the
forced symmetric dynamics whose clock-work is distinctly out of sync with the shedding
period. High- and low-frequency forcing lead to frequency crosstalk between actuation
and vortex shedding over the mean ﬂows, as described by low-dimensional generalized
mean-ﬁeld model (Luchtenburg et al. 2009).

The ﬂuidic pinball is an interesting Multiple-Input Multiple-Output (MIMO) control
benchmark. The conﬁguration exhibits well-known wake stabilization mechanisms in
physics. From a dynamical perspective, nonlinear frequency crosstalk can easily be
enforced. In addition, even long-term simulations can easily be performed on a laptop
within an hour.

2.3. Control objective and optimization problem

Several control objectives related to the suppression or reduction of undesired forces
can be considered for the ﬂuidic pinball. We can reduce the net drag power, increase the

8

G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

recirculation bubble length, reduce lift ﬂuctuations or even mitigate the total ﬂuctuation
energy.

In this study, we aim to stabilize the unstable steady symmetric Navier-Stokes solution
at Re D = 100. The associated objectives are Ja, quantifying the closeness to the
symmetric steady solution and Jb, the actuation power. The cost Ja is deﬁned as the
temporal average of the residual ﬂuctuation energy of the actuated ﬂow ﬁeld ub with
respect to the symmetric steady ﬂow us:
ˆ

Ja =

with the instantaneous cost function

1
Tev

t0+Tev

ja(t) dt

t0

based on the L2-norm

ja(t) = (cid:107)ub(t) − us(cid:107)2
Ω

(cid:107)u(cid:107)Ω =

¨

(cid:118)
(cid:117)
(cid:117)
(cid:116)

u2 + v2 dx.

(2.1)

(2.2)

(2.3)

Ω
The control is activated at t0 = 400 convective time units after the starting kick on
the steady solution. Thus, we have a fully established post-transient regime. The cost
function is evaluated until Tev = 1400 convective time units. Thus, the time average
is eﬀected over 1000 convective time units to make sure that the transient regime has
far less weight as compared to the actuated regime. Yet, a faster stabilizing response to
actuation is clearly desirable and factors positively into the cost.

Jb is naturally chosen as a measurement of the actuation energy investment. Evidently,
a low actuation energy is desirable. The actuation power is computed as the power of
the torque applied by the ﬂuid on the cylinders. Jb is the time-averaged actuation power
over Tev = 1000 time units:

Jb(b) =

1
Tev

ˆ

t0+Tev

t0

3
(cid:88)

i=1

Pact,i dt

(2.4)

where Pact,i is the actuation power supplied integrated over cylinder i:

‹

Pact,i = −

biF θ

si ds

sids(cid:1) is the azimuthal component of the local ﬂuid forces applied to cylinder i.
where (cid:0)F θ
The negative sign denotes that the power is supplied and not received by the cylinders.
The numerical value of Jb may be compared with the unforced drag coeﬃcient cD = 3.57
which is also the non-dimensionalized parasitic drag power.

In this study, optimization is based on the cost function J = Ja and the actuation
investment Jb is evaluated separately. We refrain from a cost function J which employs the
objective function Ja and penalizes the actuation investment Jb with suitable weight γ,
i.e., J = Ja + γJb. The procedure has three reasons. First, the distance between two ﬂows
and actuation energy belong to two diﬀerent worlds, kinematics and dynamics. Any choice
of the penalization parameter γ will be subjective and implicate a sensitivity discussion.
Moreover, a strong penalization would constraint the search space and may rule out
relevant actuation mechanisms. In this study, we look for stabilization mechanisms rather
than the most power-eﬃcient solutions. Second, the complete stabilization of the steady
solution would lead to a vanishing actuation b ≡ 0 and thus vanishing energy Jb. Thus,
the optimization problem without actuation energy can be expected to be well-posed.

Stabilization with gradient-enriched machine learning control

9

Third, a Pareto front of Ja, Jb reveals how much actuation power is required for which
closeness to the steady solution. Using Pareto optimality, there is no need to decide in
advance on the subjective weight γ. Foreshadowing the results, the best performance Ja
turns out to be achieved with the least actuation energy Jb. This result corroborates a
posteriori the decision not to include actuation energy in the cost.

The instantaneous cost function ja of the unforced ﬂow is shown in ﬁgure 2c. We
notice a slight overshoot around t = 200 before converging to a post-transient ﬂuctuating
regime. The post-transient regime shows the expected periodic behaviour from von
K´arm´an vortex shedding. The cost averaged over 1000 convective time units is J0 = 39.08
and serves as reference to actuation success.

To reach the steady symmetric solution, the ﬂow is controlled by the rotation of the
three cylinders. The actuation command b = [b1, b2, b3](cid:124) is determined by control law
K. This control law may operate open-loop or closed-loop with ﬂow input. Considered
open-loop actuations are steady or harmonic oscillation around a vanishing mean. Con-
sidered feedback includes velocity sensor signals in the wake. Thus, in the most general
formulation, the control law reads

b(t) = K(h(t), s(t))

(2.5)

with h(t) and s(t) being vectors comprising respectively time dependent harmonic
functions and sensor signals. The sensor signals include the instantaneous velocity signals
as well as three recorded values over one period as elaborated in the result section § 4.3.
In the following, Nb represents the number of actuators, Nh for the number of time-
dependent functions and Ns for the number of sensor signals. Then optimal control
problem determines the control law which minimizes the cost:

K∗ = arg min

J(K)

K∈K

(2.6)

with K : X (cid:55)→ Y being the space of control laws. Here, X is the input space, e.g., sensor
signals and Y is the output for actuation commands. In general, (2.6) is a challenging
non-convex optimization problem.

3. Control optimization framework

In this section, we present the control optimization for stabilizing the ﬂuidic pinball.
This constitutes a challenging nonlinear non-convex optimization problem in which the
possibility of several local minima must be expected. Hence, we speciﬁcally address how to
explore new minima while keeping the convergence rate and eﬃciency of gradient-based
approaches. In § 3.1, the principles of exploration and exploitation are discussed for
parameter and control law optimization. Then, the employed algorithms are described:
the Explorative Gradient Method (EGM) for parametric optimization (§ 3.2) and the
gradient-enriched Machine Learning Control (gMLC) for control law optimization (§ 3.3).

3.1. Optimization principles—Exploration versus exploitation

The two algorithms, EGM and gMLC, enable model-free control optimization. These
algorithms combine the advantages of exploitation and exploration. Exploitation is based
on a downhill simplex method with the best performing of all tested control laws, also
called ‘individuals’. The goal is to ‘slide down’ the best identiﬁed minimum.

Exploration is performed with another algorithm using all previously tested individu-
als. The goal is to ﬁnd potentially new and better minima, ideally the global minimum.

10 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

The method for exploration depends on the search space. For a low-dimensional param-
eter space, a space-ﬁlling version of the Latin Hypercube Sampling (LHS) guarantees
optimal geometric coverage of the search space. For a high-dimensional function space,
genetic programming is found to be eﬃcient.

EGM and gMLC start with an initial set of individuals to be evaluated. Then, exploitive
and explorative phases iterate until a convergence criterion is reached. The iteration
hedges against several worst-case scenarios. The control landscape may have only a single
minimum accessible from any other point by steepest descend. In this case, exploration
is often ineﬃcient, although it might help in avoiding slow marches through long shallow
valleys (Li et al. 2020b). The control landscape may also have many minima accessible
by gradient-based searches. In this case, exploitation is likely to incrementally improve
performance in suboptimal minima and the search strategy should have a signiﬁcant
investment in exploration. The minima of the control landscape may also have narrow
basins of attractions for gradient-based iterations and extended plateaus. This is another
scenario where iteration between exploitation and exploration is advised.

Many optimizers balance exploration and exploitation and gradually shift from the
former to the latter. This strategy sounds reasoning but is not a good hedge against
the described worst case scenarios where almost all exploitative or almost all explorative
algorithms are doomed to fail.

Note that the chances of exploration landing close to a new better minimum are small.
Yet, the explorative phases may ﬁnd new basins of attractions for successful gradient-
based descends. This is another argument for the alternating execution of exploration
and exploitation.

Finally, we note that the proposed explorative-exploitive schemes allows that both
kinds of iterations may be adjusted to the control landscape. For instance, LHS in a
high-dimensional search space will initially explore only the boundary and may better
be replaced by Monte-Carlo or a genetic algorithm. We refer to Li et al. (2020b) for a
thorough comparison of EGM and ﬁve common optimizers and to Duriez et al. (2016) for
genetic programming control. The next two sections detail both optimizers, EGM and
gMLC.

3.2. Parameter optimization with the explorative gradient method
The Explorative Gradient Method (EGM) optimizes Np parameters b = (cid:2)b1, . . . , bNp
with respect to cost J(b) and comprises exploration and exploitation phases. In the
context of parameter optimization, we do not diﬀerentiate between the control law K =
const and the associated actuation command b = K. The search space, or actuation
domain, is a compact subset B of RNp , typically deﬁned by upper and lower bounds
for each parameter. The exploration phase is based on a space-ﬁlling variant of Latin
hypercube sampling (LHS) (McKay et al. 1979) whereas the exploitation phase is carried
out by Nelder-Mead’s downhill simplex (Nelder & Mead 1965).

(cid:3)(cid:124)

The ﬁrst Np + 1 initial individuals bm, m = 1, . . . , Np + 1 deﬁne the ﬁrst ‘amoeba’ of
the downhill simplex method. The ﬁrst individual b1 is typically placed at the center of
B. The Np remaining vertices are slightly displaced along the bm axes. In other words,
bm = b1 + hmem−1 for m = 2, . . . , Np + 1. Here, em := (cid:2)δm,1, ..., δm,Np
is the unit
vector in the mth direction and hm is the corresponding step size. The increment hm is
chosen to be small compared to the range of the corresponding dimension.

(cid:3)(cid:124)

The exploitation phase employs the downhill simplex method. This method is robust
and widely used for data-driven optimization in low and moderate-dimensional search
spaces that requires neither analytical expression of the cost function nor local gradient
information. The new individual is a linear combination of the simplex individuals

Stabilization with gradient-enriched machine learning control

11

and follows a geometric reasoning. The vertex with the worst performance is replaced
by a point reﬂected at the centroid of the opposite side of the simplex. This step
leads to a mirror-symmetric version of the simplex where the new vertex has the best
performance if the cost function depends linearly on the input. Subsequent operations,
like expansion, single contraction, and global shrinking ensure that iterations exploit a
favourable downhill behaviour and avoid getting stuck by nonlinearities. We refer to Li
et al. (2020b) for a detailed description.

The explorative phase of EGM is inspired by the LHS method. LHS aims to ﬁll the
complete domain B optimally. The pre-deﬁned number m of individuals maximizes the
minimum distance of its neighbours:
(cid:8)bLHS

, . . . , bLHS

(cid:107)bi − bj(cid:107) .

1

m

(cid:9) := arg max
b1,...,bm∈B

min
i∈{1,...,m−1},
j∈{i+1,...,m}

Here, (cid:107)·(cid:107) denotes the Euclidean norm. The number of individuals has to be determined in
advance and cannot be augmented. This static feature is incompatible with the iterative
nature of the EGM algorithm. Thus, we resort to a recursive ‘greedy’ version. Let b•
1 be
the ﬁrst individual. Then, b•

2 maximizes the distance from b•
1,

b•
2 := arg max

b∈B

(cid:107)b − b•

1(cid:107).

The mth individual maximizes the minimum distance to all previous individuals,

b•
m := arg max

b∈B

min
i∈{1,...,m−1}

(cid:107)b − b•

i (cid:107).

This recursive deﬁnition allows adding explorative phases from any given set of individ-
uals.

Exploitation and exploration are iteratively continued until the stopping criterion
is reached. In our study, the stopping criterion is the total number of cost function
evaluations, i.e., a given budget of simulations. This criterion is validated after the run by
checking the convergence of the performance. The Explorative Gradient Method (EGM)
phases are summarized in algorithm 1.

3.3. Multiple-input multiple-output control optimization with gradient-enriched machine

learning control

In this section, we cure a challenge of linear genetic programming control—the sub-
optimal exploitation of gradient information. Starting point is machine learning con-
trol (MLC) based on linear genetic programming (LGP). MLC optimizes a control
law without assuming a polynomial or other structure of the mapping from input to
output. The only assumption is that the law can be expressed by a ﬁnite number of
mathematical operations with a ﬁnite memory, i.e., is computable. The optimization
process relies on a stochastic recombination of the control laws, also called evolution.
MLC has been amazingly eﬃcient in outperforming existing optimal control laws—often
with surprising frequency crosstalk mechanisms—in dozens of experiments (Noack 2019).
MLC demonstrates a good exploration of actuation mechanisms but a slow convergence
to an optimum despite an increasing testing of redundant similar control laws.

The proposed gradient-enriched MLC departs in two aspects from MLC. First, the
concept of evolution from generation to generation is not adopted. The genetic operations
include all tested individuals. One can argue that the neglection of previous generations
might imply loss of important information. Second, the exploitation is accelerated by
downhill subplex iteration (Rowan 1990). The best k + 1 individuals are chosen to deﬁne

12 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

Algorithm 1: Explorative Gradient Method
Result: b∗, the best individual
Initialize the Np + 1 individuals of the dataset BI ;
Test all the individuals;
Build the simplex S by taking the Np + 1 best individuals;
while Stopping criterion is not reached do

Exploration phase—Latin hypercube sampling

Select bLHS by solving:

bLHS := arg max

b∈B

min
bi∈BI

(cid:107)b − bi(cid:107)

Test bLHS;
Augment dataset: BI := BI ∪ (cid:8)bLHS(cid:9) ;
Update simplex: replace the worst individual of S by bLHS;

end
Exploitation phase—Downhill simplex

Sort and relabel S such as: J S
1
Compute the centroid c = 1
Np
Reﬂection: compute and test br := c + (c − bNp+1);
if J S

(cid:54) J S
2
(cid:80)Np

(cid:54) . . . (cid:54) J S

Np+1;

i=1 bi of S excluding bNp+1;

r < J S

Np+1 then

1 < J S
Update simplex: bNp+1 := br;
1 then

r < J S

else if J S

Expansion: compute and test be := c + 2 (c − bNp+1) ;
Update simplex: bNp+1 := min {br, be};

else if J S

Np+1

(cid:54) J S

r then

Contraction: compute and test bc := 1/2 (c + bNp+1);
if J S

Np+1 then

c < J S
Update simplex: bNp+1 := bc;

else

Shrink: compute and test bs,i := 1/2 (b1 + bi), i = 2, . . . , Np + 1;
Update simplex: bi := bs,i, i = 2, . . . , Np + 1;

end

end
Augment dataset: add all the new individuals to BI ;

end

end

a k-dimensional subspace and a downhill simplex algorithm optimizes the control law in
this subspace.

MLC and gMLC share a representation of the control laws used for LGP (Brameier
& Banzhaf 2006). The individuals are considered as little computer programs, using a
ﬁnite number Ninst of instructions, a given register of variables and a set of constants.
The instructions employ basic operations (+, −, ×, ÷, cos, sin, tanh, etc.) using inputs
(hi time-dependent functions and si sensor signals) and yielding the control commands
as outputs. A matrix representation conveniently comprises the operations of each
individual. Every row describes one instruction. The ﬁrst two columns deﬁne the register
indices of the arguments, the third column the index of the operation and the fourth

Stabilization with gradient-enriched machine learning control

13

column the output register. Before execution, all registers are zeroed. Then, the ﬁrst
registers are initialized with the input arguments, while the output is read from the
last registers after the execution of all instructions. This leads to a Ninst × 4 matrix
representing the control law K. We refer to Li et al. (2018) for details.

The algorithm begins with a Monte Carlo initialization of NMC individuals, i.e., the
indices of the matrix. The cost of these randomly generated functions are evaluated in the
plant. The number of individuals NMC needs to balance exploration and cost. Too few
individuals may lead to descend in a suboptimal local minimum. Too many individuals
may lead to unnecessary ineﬃcient testing, as Monte Carlo sampling is purely explorative.
Once the initial individuals are evaluated, an exploration phase is carried out. New
individuals are generated thanks to crossover and mutation operations. Thus, this phase
is also referred as evolution phase. These operations are performed on the matrix
representation of the individuals. As for MLC, crossover combines two individuals by
exchanging lines in their matrix representation, whereas mutation randomly replaces
values of some lines by new ones. In this approach, we no longer consider a population
but the database of all the individuals evaluated so far. Thus, we no longer need the
replication and elitism operators of MLC. This choice is justiﬁed by the fact that we
want to learn as much as possible from what we already know and avoid reevaluating
individuals. To perform the crossover and mutation operation, individuals are selected
from the database thanks to a tournament selection. A tournament selection of size 7
for a population of 100 individuals is used in Duriez et al. (2016). That means that
for a population of 100 individuals, 7 individuals are selected randomly and the among
the 7, the best one is chosen for the crossover or mutation operation. For gMLC, as
the individuals are selected among all the evaluated individuals, the tournament size
is properly scaled at each call to preserve the 7/100 ratio between the tournament
size and the size of the database. The crossover and mutation operation are repeated
randomly following Pc, the crossover probability, and Pm, the mutation probability, until
NG individuals are generated. The probabilities Pc and Pm are such as Pm + Pc = 1.

Once the evolution phase is achieved, NG new individuals are generated thanks to
downhill subplex iterations. Being in an inﬁnite dimension function space, Nelder-Mead’s
downhill simplex is impractical as an exploitation tool. Thus, we propose a variant of
downhill simplex inspired by Rowan (1990), commonly called downhill subplex. Just as
downhill simplex, the strength of this approach is to exploit local gradients to explore
the search space. In the original approach of Rowan (1990), downhill simplex is applied
to several orthogonal subspaces. However, in order to limit the number of cost function
evaluations, we apply downhill simplex to only one subspace. This subspace is initialized
by selecting Nsub individuals. Two ways to build the subspace after the Monte Carlo
process are listed below:

• Choose the best individual: select the best Nsub individuals evaluated so-far in

the whole database.

• Individuals near a minimum: select the best individual evaluated so-far and the

Nsub − 1 individuals closest to the best one.
The ﬁrst approach has the beneﬁt to comprise several minima candidates, whereas the
second one is bound to lead to a minimum in the neighborhood of the best individual
and relies on a given metric. Once the subspace is built, the next steps are similar to
the downhill simplex method. As subplex and simplex are essentially the same algorithm
applied to diﬀerent spaces, we will not designate them diﬀerently.

Following the situation, downhill subplex may call 1 (only reﬂection), 2 (expansion
or single contraction) or Nsub + 1 (shrink) times the cost function. Several iterations of
downhill subplex are repeated until at least NG individuals are generated. In this study,

14 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

the same number of individuals generated with the evolution phase and the downhill
subplex phase is chosen to balance exploration and exploitation.

If the stopping criterion is reached, the most eﬃcient individual in the database is
given back. Otherwise, we restart a new cycle by generating new individuals with a
new evolution phase, combining and modifying individuals derived by evolution and
downhill subplex. However, the individuals built thanks to downhill subplex are linear
combination of the original Nsub individuals. These new individuals do not have a matrix
representation which is necessary to generate new individuals with genetic operators in
the exploitation phase. To overcome this problem, we introduce a new phase to compute a
matrix representation for the linearly-combined control laws. The matrix representation
is computed by solving a regression problem of the ﬁrst kind, similar to a function
ﬁtting problem, for all the linearly-combined control laws. First, each control law Ki is
evaluated on randomly sampled inputs srand. The resulting output Ki(srand) is used to
solve a secondary optimization problem:

K∗

M = arg min

KM

(cid:107)(KM (srand) − Ki(srand))(cid:107)2

(3.1)

where (cid:107) · (cid:107) denotes the Euclidean norm. This optimization problem is a function ﬁtting
problem that we solve with linear genetic programming. The LGP parameters are the
same used for the gMLC so the computed individuals are compatible with the ones in the
database. The best ﬁtting control law K∗
M has then a matrix representation and is used
as a substitute for the original linear combination of control laws. The substitutes are
then employed for the evolution phase even though they may not be perfect substitutes
of the original control laws. Indeed, following the stopping criterion and population
size of the secondary LGP optimization, the control law substitutes may not be able
to reproduce all the characteristics of the linearly-combined control laws. An accurate
but costly representation may not be needed as the control laws will be recombined
afterwards. Moreover, the introduction of some error may be beneﬁcial to improve the
exploration phase and enrich our database.

Once the matrix representations are computed, a new cycle may begin with a new
evolution phase. In this phase, if any individual has a better performance than the
Nsub individuals in the simplex, then the least performing individuals among the Nsub
individuals are replaced. Thus, each evolution phase replaces elements in the simplex,
allowing exploration beyond the initial subspace. Then, the optimization continues with
the exploitation phase on the updated Nsub individuals.

Figure 4 illustrates the initialization, exploration and exploitation of gMLC. The
exploration is based on LGP. Also the exploitation requires LGP. In the downhill simplex
method, the individuals are linear combinations of the subplex basis and are ﬁnally
approximated as matrices. This process is repeated until the stopping criterion is reached.
The Gradient-enriched Machine Learning Control (gMLC) is summarized by pseudo code
in algorithm 2. The source code is freely available at https://github.com/gycm134/
gMLC. Finally, ﬁgure 5 summarizes the exploration and exploitation phases for EGM and
gMLC.

4. Flow stabilization

In this section, we stabilize the ﬂuidic pinball with optimized control laws in increas-
ingly more general search spaces. First (§ 4.1), we consider symmetric steady actuation
with a parametric study reduced to one parameter b2 = −b3 = const. Then (§ 4.2), we
optimize steady actuation allowing also for non-symmetric forcing, i.e., 3 independent

Stabilization with gradient-enriched machine learning control

15

Algorithm 2: Gradient-enriched Machine Learning Control
Result: K∗, the best individual
Monte Carlo initialization: generate NMC individuals;
Test all the individuals;
Build the subplex S by taking the Nsub best individuals;
while Stopping criterion is not reached do
Exploration phase—Evolution

Generate and test NG individuals from all the individuals evaluated so far
thanks to crossover and mutation;
Update subplex S: choose the Nsub best individuals among the new NG
individuals and the Nsub subplex individuals;

end
Exploitation phase—Downhill subplex

while The number of subplex individuals generated < NG do

Perform a downhill subplex iteration in the subspace spanned by linear
combinations of Nsub subplex control laws
(Downhill simplex method like in algorithm 1);

end
Reconstruction phase—Linear genetic programming
Compute a matrix representation for each new downhill subplex individual

(replace linearly-combined individuals by matrices using LGP);

end

end

inputs b1, b2, b3. Finally (§ 4.3), we optimize sensor-based feedback from 9 downstream
sensor signals driving the 3 cylinder rotations. Evidently, the three search spaces are
successive generalizations.

4.1. Symmetric steady actuation—Parametric study

This section describes the behaviour of the ﬂuidic pinball under a symmetric steady
actuation. In this conﬁguration, only the two rearward cylinders rotate at equal but
opposite rotation speeds, b2 = −b3. When b2 is positive, the rearward cylinders ac-
celerate the outer boundary layers and suck near-wake ﬂuid upstream. This forcing
delays separation, mimics Coanda forcing and leads to a ﬂuidic boat tailing. When b2
is negative, the cylinders eject ﬂuid in the near wake like in base bleed and oppose the
outer boundary-layer velocities. Figure 6 shows the evolution of Ja/J0 (top), Jb (middle)
and the bifurcation diagram (bottom) as a function of b2.

We limited our study to b2 ∈ [−5, 6]. The trends are resolved with a discretization
step of 0.25 and a ﬁner resolution in the ranges [−2.5, 0] and [1, 2]. For each parameter,
the cost Ja and actuation power Jb have been computed over 1000 convective time units.
The bifurcation diagram has been built by detecting the extrema of the lift coeﬃcient
over the last 600 convective time units. The bifurcation diagram reveals ﬁve regimes:

Regime b2 < −4: the lift amplitude decreases to zero and the cost decreases to the

ﬁrst minimum.

Regime −4 < b2 < −2.5: the extremal lift values increase and decrease to zero again.

The cost approaches another local minimum near b ≈ −2.5.

Regime −2.54 < b2 < 0: a period doubling cascade is observed for decreasing b2
leading to a chaotic regime. At b2 ≈ 0.375, the cost assumes it global minimum with
residual ﬂuctuation of the lift coeﬃcient.

16 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

Figure 4: Schematic of the gradient-enriched MLC algorithm (bottom) and distribution of
individuals in the search space (top) . First (1), Monte Carlo initialization performs a ﬁrst
coarse exploration of the search space. Second (2), further exploration is performed thanks
to genetic programming. Individuals are selected in the whole dataset and combined
thanks to genetic operators to generate new individuals (blue dots). Then the database
is augmented with the new individuals. Third (3), exploitation focuses on a subspace
(represented in yellow) of ﬁnite dimension where downhill simplex iterations builds new
individuals by linear combination (yellow dots). A matrix representation is computed
for the downhill subplex individuals thanks to linear genetic programming , allowing the
downhill subplex individuals to be included in the database.

Regime 0 < b2 < 2.375: the cost and the extremal lift values monotonically increase.
Regime 2.375 < b2: the Coanda forcing completely stabilizes a symmetric steady

solution. The cost increases with the rotation speed.
Interestingly, the boat tailing discontinuity at b2 = 2.375 does not appear in the graph
of the cost function Ja/J0. This continuity, even in the derivative, corresponds to a
continuous passage from a periodic symmetrical solution to a stationary solution which
is itself symmetrical. As the value of the cost function indicates, this stationary solution is
quite far from the unforced symmetric steady solution. The global minimum of Ja/J0 =
0.51 is reached near b2 = −0.375, i.e., for a base bleeding conﬁguration, corresponding
to a small actuation power Jb = 0.0490, roughly 0.1% of the J0.

The characteristics of the best base bleeding solution leading closest to the symmetric
steady solution are depicted in ﬁgure 7. In ﬁgure 7a, the lift coeﬃcient is displayed
for the unforced transient (blue curve) and the forced ﬂow (red curve). The unforced
ﬂow terminates in an asymmetric shedding with positive lift values. After the start of

Stabilization with gradient-enriched machine learning control

17

Figure 5: Summary of the explorative gradient method (EGM) (left column) and
gradient-enriched machine learning control (gMLC) (right column). The level plots
are a schematic representation of the control landscape. Darker regions depict poor
performances and light regions depict good performances. Three minima are shown, two
on the top left and the global one in the top right. The map represents an aﬃne space
(of ﬁnite dimension) for EGM and a Hilbert function space for gMLC. The initialization
step is depicted with black diamonds for EGM and black dots for gMLC. The individuals
generated thanks to an exploration phase are represented by blue dots. Exploration is
carried out with LHS for EGM and evolution with genetic operators (crossover and
mutation) for gMLC. The individuals generated thanks to an exploitation phase are
represented in yellow. For EGM, downhill simplex steps are carried out. The associated
level plot depicts one iteration of downhill simplex: the reﬂected individual (yellow
triangle) and the expanded individual (reversed yellow triangle), the star is the centroid of
the two best black diamonds. For gMLC, the simplex steps are carried out in a subspace
(downhill subplex) of ﬁnite dimension. The associated level plot depicts two distinct
simplex steps: ﬁrst, a reﬂection step (yellow triangle) with the two best black dots and
the best blue dot; then a contraction step (yellow diamond) with the same black dots
and the newly evaluated yellow triangle. The stars are the centroids for each step. This
process is repeated until the stopping criterion is reached. In this ﬁgure, only one iteration
of the loop is depicted. The reconstruction phase is not depicted for the sake of clarity.

18 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

Figure 6: Parametric study for symmetric steady forcing. b2 = −b3 is the velocity
of the bottom cylinder. The normalized distance to the steady solution Ja/J0 (top)
and the actuation power Jb (middle) are plotted as a function of b2. The bifurcation
diagram (bottom) comprises all local maximum and minimum lift values. The vertical
red dashed line corresponds to b2 = 0 and separates the base bleeding and the boat tailing
conﬁgurations. The global minimum of Ja/J0 is reached at b2 = −0.375, as indicated by
a vertical blue dashed line.

forcing, the lift coeﬃcient oscillates vigorously around its vanishing mean value. This
forced statistical symmetry is corroborated by the oscillating jet in ﬁgures 8a-8h. Base
bleed increases the velocity of the rearward jet compared to the unforced ﬂow. This
jet instability mitigates the Coanda eﬀect on the bottom and top cylinder, i.e., the jet
neither stays long at either side.

The vortex shedding persists similar to the unforced ﬂow. However, the dominant
frequency is increase from f0 = 0.116 to f1 = 0.132. The instantaneous cost function ja
in ﬁgure 7c shows an unsteady non-periodic behavior, reaching intermittently low levels.
The broad spectral peak in ﬁgure 7d is a characteristic of a chaotic regime. The phase

Stabilization with gradient-enriched machine learning control

19

(a)

(c)

(b)

(d)

Figure 7: Characteristics of the best base bleeding solution. (a) Time evolution of the
lift coeﬃcient CL, (b) phase portrait (c) time evolution of instantaneous cost function
ja and (d) Power Spectral Density (PSD) showing a broad spectral peak at f1 = 0.132.
The control starts at t = 400. The unforced phase is depicted in blue and the forced one
in red. The phase portrait is computed over t ∈ [900, 1400] and the PSD is computed on
the forced regime t ∈ [400, 1400].

portrait in ﬁgure 7b corroborates the non-periodic oscillatory behaviour. The mean ﬁeld
in ﬁgure 8j, shows that actuated mean jet is symmetric unlike the mean ﬁeld of the
unforced ﬂow. Moreover, the shear-layer on the upper and lower sides extend further
downstream as compared to the unforced state.

This parametric study reveals that base bleeding is the best symmetric steady forcing
strategy to bring the ﬂow close to the symmetric steady solution. However, even though
the cost Ja/J0 is almost halved, the best base bleeding control fails to stabilize the ﬂow.

0200400600800100012001400-0.2-0.100.10.2forcedunforced0200400600800100012001400051015202530354045forcedunforced20 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

(a) t + T1/8

(b) t + 2T1/8

(c) t + 3T1/8

(d) t + 4T1/8

(e) t + 5T1/8

(f) t + 6T1/8

(g) t + 7T1/8

(h) t + T1

(i) Symmetric steady solution

(j) Mean ﬁeld

Figure 8: Vorticity ﬁelds of the best base bleeding solution. (a)-(f) Time evolution of
the vorticity ﬁeld throughout the last period of the 1400 convective time units, (i) the
objective symmetric steady solution and (j) the mean ﬁeld of the forced ﬂow. The color
code is the same as ﬁgure 1. T1 is the period associated to the main frequency f1 of the
forced ﬂow. The mean ﬁeld has been computed by averaging 100 periods.

4.2. General non-symmetric steady actuation—Explorative gradient method

In this section we aim to stabilize the symmetric steady solution by commanding
the three cylinders with constant actuation without symmetry constraint. This three-
dimensional parameter space is explored with the explorative gradient method presented
in section § 3.2. The symmetry along the x-axis of the ﬂuidic pinball allows us to reduce
our search space and to explore only positive values of b1. A coarse initial parametric
study carried on b1, b2 and b3 by steps of unity indicates that the global minimum of
Ja/J0 should be near [b1, b2, b3](cid:124) = [1, 0, 0](cid:124). Thus, we limit our research to the actuation
domain B = [0, 2] × [−2, 2] × [−2, 2]. The limitation of b1 to positive values exploits the
mirror symmetry of the conﬁguration. Figure 9 (bottom) depicts the cost function in the
actuation domain B. Three planes (b1 = const) are computed by interpolating parameters

Stabilization with gradient-enriched machine learning control

21

Figure 9: Contour map of Ja/J0 at the optimal plane b3 = bEGM = −0.156 found
with EGM (top) and at diﬀerent levels of b1: b1 = 0, b1 = 1, b1 = 2 (bottom). The
color code denotes white for Ja/J0 = 1, blue for better performances and red for worse
performances. The planes are shown with 75% transparency. The four initial conditions
[1, 0, 0](cid:124), [1.2, 0, 0](cid:124), [1, 0.4, 0](cid:124) and [0, 0, 0.4](cid:124) are represented by black diamonds. Blue
dots are the control laws build with the exploration phases and yellow dots are the
individuals build with the exploitation phases. All the individuals have been projected
on the plane b3 = −0.156. The arrows, on plane b1 = 0, depict the base bleeding/boat
tailing diagonal studied in section § 4.1. A parametric study shows that the minimum is
close to [b1, b2, b3](cid:124) = [1, 0, 0](cid:124) whose cost is Ja/J0=0.93.

on a coarse grid. The individuals computed with EGM are all shown in the 3D space. The
four initial control laws for EGM are the center of the box and shifted points from this
center. The shift is 10% of the box size in positive coordinate direction. Thus, the four
initial control laws are: [1, 0, 0](cid:124), [1.2, 0, 0](cid:124), [1, 0.4, 0](cid:124) and [1, 0, 0.4](cid:124). The exploration
phase is then performed in B. For algorithmic reasons, the explorative points are chosen
from 1 million points obtained from a space ﬁlling LHS. In the following, Ni denotes
the number of evaluations. The optimization processes stops after Ni = 100 evaluations.
This corresponds to 25 iterations of the exploration/exploitation process. Convergence
is already reached around Ni ≈ 50. On one hand, we notice that the exploration phases
(LHS in blue) focus on the boundary of the search space. This is consistent with the goal
of LHS, as the furthest initial individuals are on the boundary of the box. On the other
hand, the exploitation phases (simplex in yellow) stay in the same neighborhood near
the initial individuals, crawling along the local gradient to ﬁnd the minimum.

Figure 10 shows the progression of the best control laws throughout the evaluations

012-2-101222 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

(a)

(b)

Figure 10: Evolution of b1, b2 and b3 (left) for each new simplex step indicated by the
scattered squares and Ja/J0 (right) according to the number of evaluations i for the
EGM optimization process. The red line on (b) shows the evolution of the best cost.
The color code of the dots on (b) is the same as ﬁgure 9. The best control law is
[bEGM
1

](cid:124) = [1.11207, −0.20025, −0.15588](cid:124) with Ja/J0 = 0.28.

, bEGM
3

, bEGM
2

after 25 iterations of the exploration/exploitation process. The progression is plotted
according to the number of cost function evaluations counted with the dummy index i.
Figure 10a depicts the progression of the best control law after each downhill simplex
step. We notice that a plateau is reached after 50 evaluations and there are only small
variations afterwards. The ﬁnal control law after 100 evaluations reads

(cid:2)bEGM

1

, bEGM
2

, bEGM
3

(cid:3)(cid:124)

= [1.11207, −0.20025, −0.15588](cid:124) with Ja = 10.85

(4.1)

From visualizations of the control landscape of Ja in ﬁgure 9, we can safely infer that
(4.1) describes the global minimum of our search space. Figure 10b shows convergence
after 70 evaluations. Thereafter, the downhill simplex iterations show negligible improve-
ments. In the whole EGM optimization, the exploration appears to be ineﬀective as the
initial individuals are close to the minimum. An EGM run with diﬀerent initial individuals
( [1, 0, 0](cid:124), [1.5, 0, 0](cid:124), [1, 1, 0](cid:124) and [1, 0, 1](cid:124), corresponding to a 25% of the box size shift)
have been tested. After a few iterations, this new run started sliding down towards the
same minimum. This can be explained by the fact that the neighborhood around the
minimum is smooth enough for a downhill slide of the exploitation individuals.

The control law (4.1) shows that the front cylinder rotates almost ﬁve times faster
than the two other cylinders and in opposite directions. The asymmetry in the control
law corresponds to the asymmetry in the lift coeﬃcient in ﬁgure 11a, where the mean
value is close to -0.7. The ﬂow asymmetry can be visualized in the mean ﬁeld (ﬁgure 12j).
The vorticity in the vicinity of the cylinder is directly related to the actuation; thus the
upward deﬂection near the front cylinder is explained by its fast rotation, around 1.1
times the incoming velocity. In addition, the tip of the positive vorticity lobe in the jet
is slightly deﬂected downwards. Figure 12a-12h show that EGM control (4.1) enables a
jet ﬂuctuation around vanishing mean, like the best base bleeding solution. Moreover,
the phase portrait and the PSD in ﬁgure 11 reveal that the ﬂow is purely harmonic. The
main frequency f2 = 0.140 is close to the main frequency f1 = 0.132 of the base bleeding

Stabilization with gradient-enriched machine learning control

23

(a)

(c)

(b)

(d)

Figure 11: Characteristics of the best steady actuation found by EGM. (a) Time evolution
of the lift coeﬃcient CL, (b) phase portrait (c) time evolution of instantaneous cost
function ja and (d) Power Spectral Density (PSD) showing the only frequency f2 = 0.140
of the forced ﬂow. The control starts at t = 400. The unforced phase is depicted in
blue and the forced one in red. The phase portrait and the PSD are computed over
t ∈ [900, 1400] the post-transient regime.

solution. Contrary to the best base bleeding solution, the instantaneous cost function
ja stays at low levels with a mean value around 9. The associated normalized cost is
Ja/J0 = 0.28. It is worth noting that, even though the control law [b1, b2, b3](cid:124) = [1, 0, 0](cid:124)
is close to the best one found with EGM, its cost, Ja/J0 = 0.93, is much higher. Moreover,
the coarse description of the optimal plane b3 = bEGM = −0.15588, in ﬁgure 9 (top), does
not show any minimum a priori. This reveals large gradients in the control landscape,
near the EGM solution, where a small change in the control amplitude can drastically
change the associated cost Ja/J0.

In addition to the less deﬂected jet, we notice in ﬁgure 12 that the vortex shedding

0200400600800100012001400-1-0.8-0.6-0.4-0.200.1forcedunforced0200400600800100012001400051015202530354045forcedunforced24 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

(a) t + T2/8

(b) t + 2T2/8

(c) t + 3T2/8

(d) t + 4T2/8

(e) t + 5T2/8

(f) t + 6T2/8

(g) t + 7T2/8

(h) t + T2

(i) Symmetric steady solution

(j) Mean Field

Figure 12: Vorticity ﬁelds of the best steady actuation found with EGM. (a)-(f) Time
evolution of the vorticity ﬁeld throughout the last period of the 1400 convective time
units, (i) the objective symmetric steady solution and (j) the mean ﬁeld of the forced
ﬂow. The color code is the same as ﬁgure 1. T2 is the period associated to the frequency
f2 of the forced ﬂow. The mean ﬁeld has computed by averaging over 100 periods.

diﬀers from the previous solution leading to a more symmetric ﬂow. There are now two
vortex shedding of the shear layers, one on the upper side and one on the lower side of the
ﬂow. These shear layer dynamics hardly interact in the whole domain. Indeed, we notice
that the distance between two consecutive vortices increases signiﬁcantly only before
leaving the computational domain which goes along with a slightly upward deﬂection of
the wake. This results in extended vorticity branches in the mean ﬁeld (ﬁgure 12j) but
with a lower vorticity level compared to the symmetric steady solution.

As expected, exploring a richer search space improved the stabilization of the ﬂow.
However, surprisingly, an asymmetric forcing managed to bring partial symmetry to the
ﬂow and reduces the cost function even further compared to the best base bleeding
solution. Experimentally, the optimization of the steady ﬂuid pinball actuation also lead
to asymmetric forcing Raibaudo et al. (2019). The explorative gradient method managed

Stabilization with gradient-enriched machine learning control

25

sensor x-coordinate y-coordinate velocity component

s1
s2
s3
s4
s5
s6
s7
s8
s9

5
6.5
8
5
6.5
8
5
6.5
8

1.25
1.25
1.25
0
0
0
-1.25
-1.25
-1.25

u
u
u
v
v
v
u
u
u

Table 2: Summary of sensor information.

to converge to the global minimum in less than Ni = 100 evaluations. The exploration
phases had a lesser impact during the optimization process as we initiated the algorithm
close to the global minimum. We can expect the exploration phases to play a major role
for more complex search space, comprising several minima.

4.3. Feedback control optimization—Gradient-enriched machine learning control

In this section, we optimize a feedback control law again to stabilize the unforced
symmetric steady solution. The feedback is provided by 9 velocity signals in the wake
as discussed in § 2.3. Several function optimizers can be used to solve the regression
problem of equation 2.6. However, a comparison between classical MLC (Duriez et al.
2016) and gMLC has been carried out, showing that gradient-enriched MLC not only
converges faster than MLC but also towards a better solution. The comparison between
MLC and gMLC is detailed in appendix A.

In the case of the ﬂuidic pinball, the three cylinders are our three controllers thus Y ⊂
R3. For the control input space X, we choose a grid of nine sensor downstream measuring
either x or y velocity component. The coordinates of the sensors are x = 5, 6.5, 8 and
y = 1.25, 0, −1.25. The downstream position of the sensors have been chosen so that good
performance of stabilizing feedback control can be expected (Roussopoulos 1993): The
position is far enough for pronounced vortex shedding but close enough to avoid phase
decorrelation between actuation and sensing. Moreover, sensors at diﬀerent x locations
allow to exploit phase diﬀerences between the sensors. The six exterior sensors are u
sensors while v sensors are chosen for the ones on the symmetry line y = 0, so that the
signals vanish when the symmetric steady solution is reached. Experimental realizations
are typically based on one or few sensor positions. The large number of 9 positions has the
advantage that gMLC may indicate not only the near-optimal control law but also the
best sensor location. The information of sensors is summarized in table 2. We introduce
time-delayed sensor signals as inputs to enrich the search space and allow ARMAX-based
controllers (Herv´e et al. 2012). The delays are a quarter, half and three-quarters of the
natural shedding period, yielding following additional lifted sensor signals and allowing
to reconstruct the phase of the ﬂow:

si+9(t) = si(t − T0/4),

si+18(t) = si(t − T0/2),

si+27(t) = si(t − 3T0/4).

For oscillatory signals, the chosen time delay corresponds to the ﬁrst zero of the auto-
correlation function which is a common practice for construction of phase spaces. The

26 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

four time-delay coordinates is the minimum information to determine the mean value,
the amplitude and the phase of each signal at every time step.

Summarizing, the dimension of the sensor vector s is 9 × 4 = 36 and X ⊂ R36. We do
not include time dependent functions in the input space as we aim to stabilize the ﬂow
towards the steady solution so an open-loop strategy is not pursued. In appendix B, we
detail an open-loop optimization including periodic functions. We show that a symmetric
periodic forcing at ≈ 3.5 times the natural frequency, manages to stabilize the ﬂow but at
the expense of high actuation power. So periodic functions are not included as inputs in
order to avoid costly solution. Thus, Nb = 3, Ns = 36 and Nh = 0. The control laws are
then built from 9 basic operations (+, −, ×, ÷, cos, sin, tanh, exp and log), 36 sensors
signals si=1..36 and 10 constants. The control laws are restricted to the range [−5, 5] to
avoid excessive actuation. The basic operations ÷ and log are protected in order to be
deﬁned on R in its entirety. The cost function has been computed over 1000 convective
time units, so that the post-transient regime is fully established and the transient phase
has a lesser weight.

For the implementation of the gMLC algorithm on the ﬂuidic pinball, we start with
a Monte Carlo step of NMC = 100 individuals, the crossover probability and mutation
probability are both set at Pc = Pm = 0.5. Indeed, as the evolution phase is mostly an
explorative phase, the mutation probability is increased, from 0.3, in previous studies,
to 0.5, to improve the exploration capability. Moreover, even though crossover is an
exploitative operator, it is likely to ﬁnd new minima thanks to recombinations of radically
diﬀerent control laws. That is why, the crossover and mutation probabilities are both
set to 0.5. The dimension of the subspace is set to Nsub = 10, so it is large enough
to explore a rich subspace but not too large to avoid a slowdown in the optimization
process. Evidently with a subspace of higher dimension the control law can be more
ﬁnely tuned. To assure that the subplex step eﬀectively goes down the local minimum,
we choose to evaluate NG = 50 individuals during the exploitation phase. Test runs with
NG = 5 have been carried out and showed that the learning process was slower. We
believe one reason is that each exploration phase changes systematically the subspace,
which makes it diﬃcult for the subplex to improve eﬀectively in only a few steps, thus,
subplex has almost no beneﬁt in the early phases. Table 3 summarizes all the parameters
for gMLC. The secondary optimization problem (equation 3.1) used to build a matrix
representation for the control laws, is solved with LGP. To speed up the computation,
we choose to solve the secondary optimization problem with 100 individuals evolving
through 10 generations. Finally, our implementation is enhanced by a screening of the
individuals to avoid reevaluating individuals that have diﬀerent mathematical expressions
but are numerically equivalent, just as (Cornejo Maceda et al. 2019). This screening is
used only in steps where the individuals are generated stochastically, meaning in the
Monte Carlo step and in the exploration phases. This improvement is also used in LGP
to solve the secondary optimization problem. We choose our stopping criterion to be a
total number of evaluations to mimic experimental conditions. In this study, the limit
is set to 1000 following prior experience and practical considerations. The authors have
observed convergence within this limit for all MLC studies with dozens of conﬁgurations.
In addition, wind tunnel experiments with 1000 evaluations and 5–20 seconds testing
time can easily be performed in one day.

Figure 13 presents the learning process of gMLC for the stabilization of the ﬂuidic
pinball. We notice that the ﬁrst exploration phase, individuals i = 101, . . . , 150, already
improved the best cost compared to the Monte Carlo phase. The following exploitation,
individuals i = 151, . . . , 200, present a steep descent, improving the best solution even
further. During this phase, we notice a clear trend for the cost of the new individuals. This

Stabilization with gradient-enriched machine learning control

27

parameter

description

value

Nb
Ns
Nh
NMC
Nsub
Pc
Pm
NG
Nc

number of actuators
number of sensors
number of periodic functions
number of Monte Carlo individuals
subplex size
crossover probability
mutation probability
number of individuals per phase
number of constants
constant range
operations

3
9 sensors × 4 delays = 36
0
100
10
0.5
0.5
50
10
[-1,1]
+, −, ×, ÷, cos, sin, tanh, exp, log

Table 3: gMLC parameters for the ﬂuidic pinball.

trend indicates that the simplex is going down towards a minimum. But this descent is
interrupted by the next exploration phase. Individuals i = 201, . . . , 250, greatly improve
the best solution. Particularly, two individuals have a much lower cost that the ones in
the simplex, suggesting that a new minima have been found. The next exploitation phase
with individuals i = 251, . . . , 300 brings no improvement. The high values of cost in the
exploitation steps following the exploration phases is explained by the fact that as we
are exploring new minima, shrink steps must be performed to bring the simplex towards
the new minima; and the shrink steps replaces all individuals in the simplex except the
best one. As we are leaving one minimum for another one, the intermediate values can
be arbitrarily high until the simplex reached the neighborhood of the new minimum.
The next exploration phase with individuals i = 301, . . . , 350 also give good individuals
that have been included in the simplex. After 350 evaluations, the only improvements
are performed by exploitation phases. Even if the best cost keeps decreasing slowly, the
improvements are small, indicating that we are close to the minimum. Once we reach
a plateau, further improvement can only be performed if an exploration phase ﬁnds an
individual close to a better minimum. That is why after 800 individuals, we performed
only exploration phases. The ﬁnal control law build with gMLC reads

bgMLC
1

bgMLC
2
bgMLC
3

= = −0.0004 sin(cos(s30)) − 0.0034(s6 + s22) − 0.0033(log(s11)) − 0.0305(s3)

−0.0098(s16 + s15) + 0.0055s35(s16 + 0.31016) − 0.0091(s3 − s23)
+0.9206 tanh(s16) − 0.1238 cos(s31) + 0.1907,

= −0.0459(log(log(s31))) − 0.1946,
= −0.0004(0.841471s34 − s36) − 0.0043 log(s9) − 0.0022(s25 − s16)
−0.0098(cos(s3) − s16) + 0.9206 log(tanh(exp(s2))) − 0.0295

Ja

= 7.82.

(4.2)
Figure 14 presents the characteristics of the ﬂow controlled by the best control law
KgMLC built with gMLC. This control law is detailed later specially in table 4. In
ﬁgure 14a, we can see that even if the resulting lift coeﬃcient is still asymmetric, the
mean value (around −0.1) is closer to 0 as compared to the EGM solution. The PSD in
ﬁgure 14d shows a dominant frequency at f3 = 0.144 and one of its higher harmonics. A
small peak can be seen for f4 ≈ 0.016. The nonlinear interaction between the frequencies
f3 = 0.144 and f4 = 0.016 gives rise to another small peak at f5 = 0.160. The phase
portrait in ﬁgure 14b reveals drifts in pronounced oscillations due to the low frequency

28 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

Figure 13: Distribution of the costs during the gMLC optimization process. Each dot
represents the cost Ja/J0 of one individual. The color of the dots represents how the
individuals have been generated. Black dots denote the individuals which are randomly
generated (Monte Carlo). Blue dots refer to individuals which are generated from a
genetic operator (exploration). And yellow dots correspond to individuals arising from
the subplex method (exploitation). The individuals from the Monte Carlo step and the
exploration phase have been sorted following their costs. The red line shows the evolution
of the best cost. The vertical axis is in log scale.

modulation. The presence of the dominant frequency f3 = 0.144 and its harmonic in the
spectrum is consistent with the periodic behavior of the ﬂow. The f4 = 0.016 peak is
responsible for the width of a predominant limit-cycle dynamics in the phase portrait.

The evolution of the instantaneous cost function ja in ﬁgure 14c shows a plateau after
200 convective time units, reaching an even lower level (around 6), compared to the EGM
solution (around 9). The associated cost Ja/J0 = 0.20 is better than the EGM solution
at Ja/J0 = 0.28.

Table 4, 5 and ﬁgure 16a give more details on the control law KgMLC built with gMLC.
Firstly, we can see that even though the simplex comprises Nsub = 10 individuals, subplex
build the control law KgMLC by linearly combining 14 control laws. Indeed after a few
iterations of simplex, all the individuals are eventually a linear combination of the initial
individuals forming simplex. When a new individual is introduced in the basis thanks
to the exploration phase, the exploitation phase will combine the remaining individuals
with the new one, making the next individual a linear combination of more than 10
individuals. It is important to note that even after the introduction of new individuals
with the exploration phase, the subspace to explore changes but the dimension remains.
In this case, with Nsub = 10, the dimension of the subspace is 9. The repetition of
this process builds each time more complex control laws. Thus, in table 4, individuals
i = 11, 12, 13, 14 have been introduced thanks to exploration phases. The control laws
with the strongest weights are i = 11, 13 and 14, whereas the weight associated with
the other control laws are at least one order of magnitude lower. Control law i = 11 is
also the one with the lowest cost Ja/J0 = 0.26. KgMLC is then mainly based on i = 11
and corrected by the remaining control laws. This indicates that on the last phase of the
learning, it is the minimum in the neighborhood of i = 11 that has been found.

Stabilization with gradient-enriched machine learning control

29

(a)

(b)

(c)

(d)

Figure 14: Characteristics of the ﬂow controlled by the best feedback control law found
with gMLC. (a) Time evolution of the lift coeﬃcient CL, (b) phase portrait, (c) time
evolution of instantaneous cost function ja and (d) Power Spectral Density (PSD)
showing the frequency f3 = 0.144 of the forced ﬂow, one of its harmonics and two
low-power frequencies f4 = 0.016 and f5 = 0.160. The control starts at t = 400. The
unforced phase is depicted in blue and the forced one in red. The phase portrait and the
PSD are computed over t ∈ [900, 1400], during the post-transient regime.

Moreover, table 4 shows that all three control components bgMLC

and bgMLC
3
of the gMLC control law include sensor information. However, ﬁgure 16a shows that the
actuation command associated with KgMLC for the two rearward cylinders (b2 and b3)
are nearly constant. This is partially due to the low weights associated to the control
laws with sensor signals. We can also assume that the sensor signals cancel each other,
leading to such low peak-to-peak amplitudes. Table 5 shows the characteristics of the
actuation command during the post-transient regime. A spectral analysis shows that the
main frequency of the actuation command for the front and bottom cylinder are twice
the main frequency of the ﬂow f3, revealing that the actuation is a function of the ﬂow.

, bgMLC
2

1

0200400600800100012001400-0.5-0.4-0.3-0.2-0.100.1forcedunforced0200400600800100012001400051015202530354045forcedunforced30 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

(a) t + T3/8

(b) t + 2T3/8

(c) t + 3T3/8

(d) t + 4T3/8

(e) t + 5T3/8

(f) t + 6T3/8

(g) t + 7T3/8

(h) t + T3

(i) Symmetric steady solution

(j) Mean ﬁeld

Figure 15: Vorticity ﬁelds of the best feedback control found with gMLC. (a)-(f) Time
evolution of the vorticity ﬁeld throughout the last period of the 1400 convective time
units, (i) the objective symmetric steady solution and (j) the mean ﬁeld of the forced
ﬂow. The color code is the same as ﬁgure 1. T3 is the period associated to the frequency
f3. The mean ﬁeld has been computed by averaging 100 periods.

Thus, gMLC managed to build a combination between asymmetric steady forcing and
feedback control. Finally, like EGM, the best solution found is asymmetric but with lower
amplitudes. Consequently, the associated actuation power is lower compared to general
steady actuation found with EGM: Jb = 0.2018 for the general steady actuation and
Jb = 0.0391 for the feedback control law found with gMLC.

The controlled ﬂow is depicted over one period in ﬁgure 15a-15h. First, we notice that
the jet ﬂuctuates around a vanishing mean, as for the EGM actuation. Also, the vortex
shedding of the upper and lower shear layers hardly interact. Compared to the EGM
solution, the stability of the wake is improved as the two Kelvin-Helmholtz vortices keep
their transverse distance to the symmetry line until the very end of the computational
domain. This is explained by the re-energization of the shear layers thanks to the vigorous
rotation of the front cylinder at twice the main frequency f3 of the controlled ﬂow, like

Stabilization with gradient-enriched machine learning control

31

#

1
2
3
4
5
6
7
8
9
10
11
12
13
14

b1

b2

b3

weight

Ja/J0

sin(cos(s30))
s6 + s22
0
0
log(s11)
s3
s16 + s15
s35(s16 + 0.31016)
s3 − s23
1
tanh (s16)
0.540302
cos (s31)
0.949948

0
0
0
0
0
0
0
0
0
log(log(s31))
−0.187071
−0.144304
−0.144304
−0.144304

0.841471s34 − s36
0
log(s9)
s25 − s16
0
0
cos(s3) − s16
0
0
0
log ( tanh ( exp (s2)))
−0.0144074
−0.0144074
−0.0144074

−4 × 10−4
−3.4 × 10−3
−4.3 × 10−3
−2.2 × 10−3
−3.3 × 10−3
−3.05 × 10−2
−9.8 × 10−3
5.5 × 10−3
−9.1 × 10−3
−4.59 × 10−2
9.206 × 10−1
6.87 × 10−2
−1.238 × 10−1
2.100 × 10−1

0.91
0.94
0.97
0.97
0.95
0.92
0.97
0.80
0.88
0.93
0.26
0.34
0.36
0.39

Table 4: Summary of the 14 control laws composing KgMLC described in equation (4.2).
For each control law, we present b1, b2, b3, the associated weight and the reduced cost
Ja/J0. The three best control laws are #11, #13 and #14.

cylinder

mean value main frequency peak-to-peak amplitude

front (b1, green)
bottom (b2, blue)
top (b3, red)

0.48
-0.19
-0.02

2f3
2f3
f3

0.12
0.03
< 0.01

Table 5: Summary of control
amplitude have been computed on the post-transient regime.

law information. The frequencies and peak-to-peak

Protas (2004). The mean ﬁeld, in ﬁgure 15j, is similar to the symmetric steady solution.
Indeed, we notice that the vorticity regions extend to the end of the computation domain,
like the symmetric steady solution. Also, like for the best general steady actuation, the
region near the cylinders is non-symmetrical due to the action. However, contrary to the
symmetric steady solution, the mean ﬁeld of the feedback control has a narrower region
between the vorticity regions upstream and a wider region downstream.

As expected, gMLC manages to ﬁnd a new solution that surpasses the best general
steady actuation found with EGM. Surprisingly, gMLC built a non-trivial solution, com-
bining asymmetric steady forcing and feedback control for the front cylinder, controlling
the ﬂow with a direct feedback of the phase of the ﬂow, i.e., phasor control (Brunton &
Noack 2015). Interestingly, gMLC composed a control law that forces the ﬂow at twice
the main frequency. In addition, compared to the best general steady actuation, the
actuation power is signiﬁcantly reduced. Lastly, the learning process of gMLC exploited
both the evolution phases and the simplex steps to rapidly build better solutions. Thanks
to the evolution phases, new minima have been successfully found and thanks to the
simplex steps, the solutions have been improved even more. The progress of the subplex
steps show that local gradient information can be exploited in a subspace of an inﬁnite
dimension space to minimize a cost function. Building on this success, we believe that

32 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

Figure 16: Time series of the actuation command b = [b1, b2, b3](cid:124) and the instantaneous
cost ja for the best feedback control law found with gMLC (a) and (b) for the ﬂow
controlled by a steady control law whose values are the averaged gMLC control during
the post-transient regime.

gradient-enriched MLC will greatly accelerate the optimization of control laws for MIMO
control as compared to the linear genetic programming control.

5. Discussion

This section discusses design aspects of the proposed methodology which are of
relevance to this and other conﬁgurations. In § 5.1, the role of feedback is assessed. § 5.2
discusses the role of the number of actuators and sensors for the the learning process.
In § 5.3, the eﬀect of the dynamics complexity and noise on learning speed is discussed.
Finally, robustness for other operating conditions is elaborated in § 5.4.

5.1. The need for feedback

Feedback plays an important role in the gMLC control. Figure 16a shows the cor-
responding evolution of the actuation commands and instantaneous cost function ja.
The actuation commands lead to constant cylinder rotation with small ﬂuctuation
from the sensor signal. The cost function converges to a steady value after some 200
non-dimensional time units. In ﬁgure 16b, the actuation commands are replaced by
their respective post-transient averaged value of the last 500 time units. Now, the
cost function ﬂuctuates periodically between the optimal and the unforced value. The
associated averaged cost is Ja/J0 = 0.59 and about three times the optimal gMLC
value Ja/J0 = 0.20. The important role of feedback is corroborated with another test.
The actuation commands of the gMLC control are recorded and applied in an open-
loop manner to the ﬂow with a random initial condition. Again, the performance ja
largely ﬂuctuates. Evidently, the small feedback ﬂuctuations play an important role in
the stabilization. Intriguingly, similar observations are made by the authors for stabilizing
experimental cavity ﬂuctuations and will be described in the dissertation of the ﬁrst
author (Cornejo Maceda 2021).

0200400600800100012001400-0.500.5102550-0.500.51b1b2b302550Stabilization with gradient-enriched machine learning control

33

5.2. Number of sensors and actuators

The control performance is found to increase as the search space is generalized from
single parameter steady base bleeding forcing to three parameter steady actuation to
feedback with 9 sensors. Generally, increasing the number of actuators and sensors
can be expected to enhance the maximum control performance albeit with eventually
diminishing returns. On the other hand, the learning time will also increase with the
number of actuators and sensors and with the complexity of control laws, e.g., inclusion
of time-delay coordinates. Evidently, there is a trade-oﬀ between performance gains
from increasing the search space and the limitations of the testing time. Like in model
identiﬁcation (see, e.g., Abu-Mostafa et al. 2012), one can expect an optimal level of
complexity for given testing time. From MLC with dozen’s of conﬁgurations (see, e.g.,
Noack 2019), our observation is that the learning time is weakly aﬀected by the number
of control law inputs but increases with the number of uncorrelated actuation commands.
The subplex iteration of gMLC is found to signiﬁcantly accelerate the learning process.
Evolutionary methods are known to underperform for convergence of identiﬁed minima,
i.e., a strength of gradient-based approaches. Gradient-based methods have another
advantage of staying in well-performing subspaces. In contrast, genetic operations, like
mutation and crossover, tend to bread new individuals leaving these subspaces. These
observations are particularly relevant when a symmetry or invariant of the control law
is performance critical. The inclusion of known symmetries or invariants in gMLC might
be achieved by pre-testing and excluding individuals which strongly depart from these
constraints. An example of self-discovery of such symmetries and invariants is reported
in Belus et al. (2019) for deep reinforcement learning.

5.3. Complexity of dynamics and noise

The applicability of gMLC to turbulent ﬂows will be addressed in future works starting
with Cornejo Maceda (2021). Already MLC has been successfully applied to learning
distributed actuation for mixing optimization of a turbulent jet (Zhou et al. 2020).
Recent experimental applications of gMLC include mitigation of cavity oscillations, drag
reduction of a generic truck model under yaw and lift increase of airfoil under angle
of attack at a Reynolds number near one million. Performance and reproducibility of
gMLC control are encouraging and outperform other methods, including MLC. Hence,
the very optimization principle of iterating between exploration (for discovering new
minima) and exploitation (for a fast descent towards the minimum) seems sound. Yet,
numerical studies of multi-frequency forcing of the ﬂuidic pinball foreshadow challenges
for asymptotic regimes. When the actuation space has many ‘idle’ direction with near
constant performance, the gradient-based descent may be trapped in local minima. One
cure is a subplex method on ‘active subspaces’ aligned with direction of performance
gradients.

Genetic programming is a powerful regression solver which is successfully validated
in dozens of experiments, Navier-Stokes simulations, and dynamical systems (Ren et al.
2020; Noack 2019). It can learn complex laws for O(10) signals and O(10) actuation
commands by testing O(1000) individuals over O(1000) characteristic times each, i.e.,
O(1, 000, 000) characteristic times in total (Wu et al. 2018; Zhou et al. 2020). Yet, it
may not be the most eﬀective choice under several conditions: (1) the total testing
time is restricted to much smaller budgets typical for three-dimensional simulations;
(2) the control law is smooth or can be expected to depend linearly or aﬃnely to
the sensor signals, (3) the ﬂow performance responds immediately to good or bad
actuation. Smoothness is well exploited in cluster-based control (Nair et al. 2019).

34 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

Deep reinforcement learning may learn quickly the optimal actuation in case of fast
performance response (Fan et al. 2020; Rabault et al. 2019). A combination of techniques
may also beneﬁt a quick learning such as the merging of genetic algorithm and downhill
simplex in Maehara & Shimoda (2013). Future work will give more indications about
good choices or combinations of machine learning algorithms.

5.4. Robustness of the control

The current study optimizes control for a single Reynolds number. Its robustness will
be addressed in future work. We can distill few rules of thumb for robustness from past
experience with experiments. First, if the actuation mechanism relies on changing large-
scale coherent structures, like synchronizing vortex formation (Parezanovi´c et al. 2016),
the control learned for one condition is likely to be robust for a range of conditions.
Second, the control law should be learned in a non-dimensional form. For instance,
the Strouhal number of an actuation can be expected to be more relevant for diﬀerent
velocities than the value in Hertz unrelated to the velocity change (Gautier et al. 2015).
Third, in an ideal scenario, the intended range of operating conditions is already included
in the cost function. For instance, a control law may be evaluated at diﬀerent operating
conditions or in a slow transient between them (Asai et al. 2019; Ren et al. 2019). This
will, however, dramatically increase the testing time. The learning time saved by smarter
algorithms, like gMLC, may be invested in assuring robustness for multiple operating
conditions. Tang et al. (2020) provide an inspiring example for deep reinforcement
learning.

6. Conclusions

We have stabilized the wake behind a ﬂuidic pinball with three independent cylinder
rotations in successively larger search spaces for control laws. Table 17 summarizes the
corresponding performances quantiﬁed by the average distance between the controlled
ﬂow and the steady symmetric solution. First, steady symmetric forcing is employed. A
base bleed solution with a cylinder rotation of 28% of the oncoming velocity leads to a
ﬂow which is 49% closer to the symmetric solution than the unforced attractor. Other
studies also report about a stabilizing eﬀect of base bleed on bluﬀ body wakes (Wood
1964; Bearman 1967). In contrast, Coanda forcing, i.e., two symmetric cylinder rotations
which accelerate the outer ﬂow, may completely stabilize the ﬂow. Yet, this new wake
has no long vortex bubble and is further away from the symmetric steady solution than
the unforced vortex shedding.

Second, a general non-symmetric actuation is optimized with the explorative gradient
method. Surprisingly, an asymmetric actuation reduces the average distance between
the ﬂow and the steady target solution further to 28% of the unforced value. This
asymmetric actuation leads to shear layer vortices which do not interact and thus do
not form von K´arm´an vortices. The mean ﬂow is slightly asymmetric, but largely mimics
the elongated steady symmetric solution. The price for the better performance is a
larger actuation power (see table 17). Intriguingly, machine learning control also leads to
distinctly asymmetric actuation in experiments (Raibaudo et al. 2019) and simulations
(Cornejo Maceda et al. 2019) for other cost functions.

Third, a feedback actuation obtained from gradient-enriched machine learning control
brings the ﬂow even closer to the steady target solution. The associated actuation power
is smaller than the previous optimized steady actuations (see table 17). The actuation is
a combination of asymmetric steady forcing and phasor control. The resulting ﬂow looks

Stabilization with gradient-enriched machine learning control

35

search space

dimension

method

unforced natural

symmetric steady

general steady

feedback control

feedback control

periodic forcing

-

1

3

∞

∞

2

-

param. study

EGM

gMLC

MLC

EGM

Ja/J0, Jb

Ni

-

-

77

800
250 for Ja/J0 < 0.26

900

74

Figure 17: Summary of the performances for the best solutions of each search space.
The ﬁrst column describes the search space. The second column contains the respective
dimension of the studied search space. The method and the number of evaluations needed
to arrive at the presented solution are listed in the third and fourth column, respectively.
The ﬁfth column shows the relative distance to the symmetric steady solution Ja/J0
(in blue) and the actuation power Jb (in yellow). For the gMLC feedback control
optimization, the best control law studied has been found after 800 evaluations but the
cost Ja/J0 was already under 0.26 already after 250 individuals. The ﬁfth row corresponds
to the solution found with standard MLC after 1000 evaluations as elaborated in appendix
A. The last row shows the results for a periodic forcing optimization performed with
EGM, see appendix B.

similar to the optimal asymmetric steady forcing. Figure 18 summarizes the results for
the hierarchy of control search spaces.

The feedback control does not seem to have the authority to completely stabilize
the symmetric target solution, like for the cylinder wake controlled by a volume force
(Gerhard et al. 2003). The wake can be ‘almost’ stabilized for short periods of time,
starting from the unforced ﬂow. Then, new coherent structures emerge and lead to
residual shear-layer shedding. This lack of complete authority for stabilization may be
explained by the complexity of the dynamics. The ﬂuidic pinball has a primary instability
associated with von K´arm´an vortex shedding, a secondary pitchfork instability associated
with the centerline jet, and two Kelvin-Helmholtz instabilities of the top and bottom
shear layer.

Intriguingly, symmetric high-frequency forcing can bring the ﬂow even closer to the
steady target solution but with an actuation power which is roughly two orders of
magnitude larger than the previous control laws (see table 17). Protas (2004) and Thiria
et al. (2006) also ﬁnd a stabilizing eﬀect of high-frequency forcing on vortex shedding. The
thickening of the shear layers by high-frequency vortices reduces the gradients and thus
the instability. To summarize, machine learning control has automatically discovered
well known stabilizing mechanisms, like base bleed and phasor control, but added an
unexpected asymmetric forcing and combination of this open-loop actuation and phasor
feedback for improved performance.

The presented stabilizations are expected to be independent of the employed optimizer
as diﬀerent approaches lead to very similar results. The chosen optimizers balance
exploitation (downhill descend of found minima) and exploration (search for better
minima). The optimization has been eﬀected in a three-dimensional parameter space

36 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

Figure 18: Summary of the optimized stabilization solutions obtained for each search
space. The Venn diagram (left) depicts the hierarchy of the control law spaces. The
corresponding optimal solutions are presented along with their performances, control
laws (center) and mean ﬁelds (right). The mean ﬁeld of the statistically asymmetric
unforced ﬂow is depicted in the top row and the symmetric target solution in the bottom
row.

for steady forcing and a feedback space with three actuation inputs and nine sensing
outputs. Starting point is Latin hypercube sampling as exhaustive exploration of the
parameter space and linear genetic programming control as eﬀective regression solver
with explorative and exploitive features. The search has been signiﬁcantly accelerated
by intermittently adding gradient-based descends. The resulting explorative gradient
method and gradient-enriched machine learning control seem eﬃcient for both explo-
ration and exploitation. Future research shall focus on accelerated learning.

The control performance may be further improved by allowing for more general
control laws comprising the history of the sensor signals, like in ARMAX-based control
(Herv´e et al. 2012). Other generalizations of machine learning control include multiple
pre-deﬁned operating conditions, adaptive control for unknown operating conditions,
automated learning of the response model from the control law to performance following
Fernex et al. (2020) and automated learning of control-oriented modeling based on Li
et al. (2020a). The ﬂuidic pinball represents an attractive plant of suﬃcient dynamic
complexity with manageable computational load for these developments.

Acknowledgements

The authors thank Antoine Blanchard, Nan Deng, Luc Pastur and Themis Sapsis for
fruitful discussions and enlightening comments. We also thank the anonymous referees

Stabilization with gradient-enriched machine learning control

37

for their insightful suggestions. This work is supported by the French National Research
Agency (ANR) via FLOwCON project “Contrˆole d’´ecoulements turbulents en boucle
ferm´ee par apprentissage automatique” funded by the ANR-17-ASTR-0022, the German
National Science Foundation (DFG grants SE 2504/1-1 and SE 2504/3-1), the iCODE
Institute, research project of the IDEX Paris-Saclay and by the Hadamard Mathematics
LabEx (LMH) through the grant number ANR-11-LABX-0056-LMH in the “Programme
des Investissements d’Avenir”.

Declaration of interests

The authors report no conﬂict of interest.

Appendix A. Comparison between MLC and gMLC

In this appendix, we compare the performances of a machine learning control (MLC),
based on linear genetic programming control (Li et al. 2018; Zhou et al. 2020), and
the proposed gradient-enriched MLC (gMLC) variant for the stabilization of the ﬂuidic
pinball. gMLC is described in section § 4.3. MLC diﬀers from gMLC in two respects.
First, the evolution is from generation to generation, i.e., groups of individuals. Second,
unlike gMLC, no gradient information is employed. The ﬁrst generation of randomly
generated individuals evolves through generations thanks to three genetic operations:

• Crossover : a stochastic recombination of two individuals, giving two new individuals

exploiting parts of the ﬁrst two individuals;

• Mutation: a stochastic change in one individual, giving one new individual more or

less diﬀerent from the previous one;

• Replication: an identical copy of one individual, assuring memory of good individuals

throughout the generations.
During the evolution process, the better-performing individuals are selected with larger
probability to build new individuals thanks to the genetic operators. The best individuals
are selected thanks to a tournament selection method. As in Duriez et al. (2016), we
choose a tournament selection of size 7 for 100 individuals. A genetic operation is
chosen randomly following given probabilities: the crossover probability Pc, the mutation
probability Pm and the replication probability Pr. The probabilities add up to unity
Pc + Pm + Pr = 1. The set of parameters [Pc, Pm, Pr](cid:124) = [0.6, 0.3, 0.1](cid:124) suggested in
Duriez et al. (2016) have been chosen for MLC. A parametric study varying Pc, Pm
and Pr with a 0.1 step has been carried out on the stabilization of a Landau oscillator
by forcing only on one of its components. As MLC is a stochastic process, we perform
100 test runs for each probability combination. This parametric study reveals that this
probability combination [Pc, Pm, Pr](cid:124) = [0.6, 0.3, 0.1](cid:124) is one of the best. Among all the
probability combinations, this combination is one of those that converges towards better
solutions in average, with one of the lowest dispersion of the ﬁnal solutions over the 100
test runs, showing that this combination is also one of the more robust. This or a very
similar probability combination has already been used in Duriez et al. (2016) and dozens
of experiments (Noack 2019).

In addition to crossover, mutation and replication, we transfer the best individual of
the previous generation to the next one via the elitism operation. This operation assures
that the best individual is always in the latest generation so that ‘the winner does not
get lost’.

The architecture of the linear programming control laws are the same for MLC and

38 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

Figure 19: Distribution of the costs during the MLC optimization process. Each dot
represents the cost Ja/J0 of one individual. The color of the dots represent how the
individuals have been generated. Black dots for the individuals randomly generated
by a Monte Carlo process (individuals i = 1, . . . , 100), blue dots for the individuals
generated from a genetic operator (individuals i = 101, . . . , 1000). For each generation
the individuals have been sorted according to their cost. The red line shows the evolution
of the best cost for the MLC optimization process. The green curve corresponds to the
gMLC optimization process. The vertical axis is in log scale.

gMLC, including the mathematical operations, number of constants, number of registers,
as well as inputs and outputs (see table 3).

The cost function is evaluated over 1000 convective time units, both in MLC and
gMLC. The MLC and gMLC algorithms are compared over 1000 evaluations. For MLC,
a population of 100 individuals is chosen to evolve over 10 generations. For a fair
comparison, MLC and gMLC share the same initial Monte Carlo generation, comprising
the ﬁrst 100 randomly generated individuals. Figure 19 shows the distribution of the
costs Ja/J0 as a function of the evaluations. We notice that for both algorithms the
ﬁrst exploration phase makes great improvement. In the second generation, the best
cost is 0.80 for gMLC and 0.70 for MLC. Note that MLC’s better performance is
understandable as 100 individuals have been evaluated for the second generation whereas
only 50 individuals have been evaluated for gMLC. After testing 200 individuals, gMLC
surpasses MLC thanks to the subplex steps, reaching a cost Ja/J0 = 0.36. For the
second evolution phase, both MLC and gMLC perform well reaching low levels of Ja/J0:
0.36 for MLC and 0.26 for gMLC. Then, MLC achieves only small progress after 900
evaluations, the cost improves from 0.36 to 0.33. The series of blue dots at Ja/J0 = 0.36
from i = 201 to i = 900 represents several instances of the best individual of generation
3, duplicated thanks to elitism. For gMLC, ﬁgure 13 shows that evolution phases do
not bring any progress after 250 evaluations and further improvement is made thanks
to the subplex steps. As described in section § 4.3, the evolution phases help to enrich
the simplex subspace. The subplex steps manage to reduce the cost function from 0.26
to 0.20. We notice that after 600 evaluations all new subplex individuals have the same
cost. Hence, gMLC surpasses MLC with a smaller number of evaluations and enables
improvement/ﬁne-tuning of the control laws in the ﬁnal phase.

Stabilization with gradient-enriched machine learning control

39

(a) Ja/J0.

(b) Jb.

Figure 20: Contour plot for Ja/J0 (a) and Jb (b) as a function of the amplitude B and the
normalized frequency F/f0. For (a), blue (red) regions denote good (bad) performances
while white regions correspond to costs that are equivalent to the natural ﬂow. For (b), the
color code describes the actuation energy. The symbols represent the individuals tested
with EGM: black diamonds for the initial conditions, blue solid circles for exploration
phases and yellow solid circles for the exploitation phases. For the legend, refer to ﬁgure 9.

Appendix B. Optimal periodic forcing

In this appendix we aim to stabilize the symmetric steady solution thanks to a
symmetric periodic forcing. In this case, the two back cylinders oscillate in opposite
directions whereas the front cylinder stays still. The control ansatz is the following:

0
b1 =
b2 =
B cos(2πF t)
b2 = −B cos(2πF t)

with B, the amplitude of the oscillations, and F , the frequency, being the two parameter
to optimize. The search space is limited to [B, F/f0](cid:124) ∈ [0, 5]×[0, 10] as higher amplitudes
and frequencies would be beyond our solver capabilities. This two-dimensional search
space is explored with EGM. The contour plot in ﬁgure 20 depicts the search space
based on Ja/J0 and Jb. The contour plot has been produced thanks to simulations for
B ∈ {0.1, 0.5, 1, 2, 3.5, 5} and F/f0 ∈ {0.1, 0.5, 1, 2, 3.5, 5, 7.5, 10}. The steps are
ﬁner for low frequencies and low amplitudes. The individuals have been evaluated over
250 convective time units. We notice that there is only one minimum on the plane, close
to [B, F/f0](cid:124) = [3.51, 3.19](cid:124). Also, forcing at frequencies close to the natural frequency
resonates with the ﬂow and drastically increases the distance to the steady solution
for high amplitudes. For Jb, the contour map expectedly displays high values at high
frequencies and large amplitudes. The three initial control laws for EGM are the center
of the box and increments of 1/5 of the box size in each direction: [2.5, 5](cid:124), [3, 5](cid:124), [2.5, 6](cid:124).
As expected, the LHS steps (in blue) spread rather evenly in the domain whereas the
simplex steps (in yellow) quickly descend into the global minimum.

Figure 21 shows the progression of the best individual throughout the evaluations.
The EGM optimization process converges after few tests as Ja/J0, the amplitude and
the frequency reach asymptotic values, without any signiﬁcant improvement afterwards.
The parameters of the best symmetric periodic forcing are denoted by the superscript

40 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

(a)

(b)

Figure 21: Evolution of (a) the amplitude B and the normalized frequency F/f0 and
(b) the reduced cost Ja/J0 as a function of the number of evaluations i, for the EGM
optimization process. The red line in (b) shows the evolution of the best cost. The
evaluation time is 250 convective time units.

‘EGM’ and read

BEGM = 3.51,
F EGM/f0 = 3.19.
The proximity between the initial values and the aimed minimum certainly accelerates
the observed convergences. Figure 22 shows the evolution of the lift coeﬃcient, the
phase portrait, the power spectral density and the instantaneous cost function ja for the
controlled ﬂow. The lift coeﬃcient presents rather symmetric low amplitude oscillations,
see ﬁgure 22a. This goes along with the ﬂow symmetry in ﬁgure 23a-23h. The oscillations
are explained by the remaining vortex shedding on both, the upper and lower side of the
ﬂuidic pinball. Even though the far ﬁeld is close to the symmetric steady solution, this
periodic solution changes radically the near ﬁeld proﬁle. The jet is completely ﬂattened.
We can identify parts of the two vorticity branches close to the cylinders in ﬁgure 23c,
23d and 23e. Moreover, the vorticity around the cylinders is more intense compared
to the initial steady solution. This diﬀerence is present in the ﬁnal mean value ja in
ﬁgure 22c and is responsible for the high actuation power expense, Jb = 5.2799. The
phase portrait shows a periodic regime, though deformed by the harmonics. The mean
frequency f6 = 0.398 is slightly lower than the forcing frequency F EGM = 0.37 and much
lower than the natural frequency, showing that it is not just a simple frequency locking,
but a nonlinear frequency crosstalk. The non-centered phase portrait indicates that there
is still an asymmetry in the ﬂow, that may be a residual eﬀect of the grid’s asymmetry.
The mean ﬁeld in ﬁgure 23j is similar to the symmetric steady solution, however the
jet completely vanishes. In addition, the distance between the upper and lower vorticity
branches is wider compared to the symmetric steady solution.

REFERENCES
Abu-Mostafa, Y. S., Magndon-Ismail, M. & Lin, H.-T. 2012 Learning from Data. A Short

Course. AMLBook.

Stabilization with gradient-enriched machine learning control

41

(a)

(b)

(c)

(d)

Figure 22: Characteristics of the best periodic forcing found with EGM. (a) Time
evolution of the lift coeﬃcient CL, (b) phase portrait (c) time evolution of instantaneous
cost function ja and (d) Power Spectral Density (PSD) showing the main frequency
f6 = 0.398 of the forced ﬂow and six harmonics. The control starts at t = 400. The
unforced phase is depicted in blue and the forced one in red. The phase portrait and the
PSD are computed over t ∈ [900, 1400], during the post-transient regime.

Asai, S., Yamato, H., Sunada, Y. & Rinoie, K. 2019 Designing machine learning control
law of dynamic bubble burst control plate for stall suppression. In 2019 AIAA SciTech
Forum. San Diego, CA.

Barros, D., Bor´ee, J., Noack, B. R., Spohn, A. & Ruiz, T. 2016 Bluﬀ body drag
manipulation using pulsed jets and Coanda eﬀect. J. Fluid Mech. 805, 442–459.
Bearman, P. W. 1967 The eﬀect of base bleed on the ﬂow behind a two-dimensional model

with a blunt trailing edge. Aeronautical Quarterly 18 (03), 207–224.

Belus, V., Rabault, J., Viquerat, J., Che, Z., Hachem, E. & Reglade, U. 2019 Exploiting
locality and translational invariance to design eﬀective deep reinforcement learning control
of the 1-dimensional unstable falling liquid ﬁlm. AIP Advances 9 (12), 125014, arXiv:
https://doi.org/10.1063/1.5132378.

0200400600800100012001400-0.1-0.0500.050.10.150.20.250.3forcedunforced0200400600800100012001400051015202530354045forcedunforced42 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

(a) t + T6/8

(b) t + 2T6/8

(c) t + 3T6/8

(d) t + 4T6/8

(e) t + 5T6/8

(f) t + 6T6/8

(g) t + 7T6/8

(h) t + T6

(i) Symmetric steady solution

(j) Mean ﬁeld

Figure 23: Vorticity ﬁelds of the best periodic forcing found with EGM. (a)-(f) Time
evolution of the vorticity ﬁeld throughout the last period of the 1400 convective time
units, (i) the objective symmetric steady solution and (j) the mean ﬁeld of the forced
ﬂow. The color code is the same as ﬁgure 1. T6 is the period associated to the frequency
f6. The mean ﬁeld is computed by averaging 200 periods.

Benard, N., Pons-Prats, J., Periaux, J., Bugeda, G., Braud, P., Bonnet, J.P. &
Moreau, E. 2016 Turbulent separated shear ﬂow control by surface plasma actuator:
experimental optimization by genetic algorithm approach. Exp. Fluids 57 (2), 22:1–17.

Brameier, M. & Banzhaf, W. 2006 Linear Genetic Programming. Springer Science & Business

Media.

Brunton, S. L. & Noack, B. R. 2015 Closed-loop turbulence control: Progress and challenges.

Appl. Mech. Rev. 67 (5), 050801:01–48.

Cattafesta, L. & Shelpak, M. 2011 Actuators for active ﬂow control. Ann. Rev. Fluid Mech.

43, 247–272.

Chen, W., Ji, C., Alam, Md M., Williams, J. & Xu, D. 2020 Numerical simulations of
ﬂow past three circular cylinders in equilateral-triangular arrangements. Journal of Fluid
Mechanics 891, 1–44.

Stabilization with gradient-enriched machine learning control

43

Choi, H., Jeon, W.-P. & Kim, J. 2008 Control of ﬂow over a bluﬀ body. Ann. Rev. Fluid

Mech. 40, 113–139.

Choi, H., Moin, P. & Kim, J. 1994 Active turbulence control for drag reduction in wall-

bounded ﬂows. J. Fluid Mech. 262, 75–110.

Cornejo Maceda, G. Y. 2021 Gradient-enriched machine learning control exempliﬁed for
shear ﬂows in simulations and experiments. PhD thesis, Universit´e Paris-Saclay.

Cornejo Maceda, G. Y., R., Noack B., Lusseyran, F., Deng, N., Pastur, L. &
Morzy´nski, M. 2019 Artiﬁcial intelligence control applied to drag reduction of the ﬂuidic
pinball. Proc. Appl. Math. Mech. 19 (1), e201900268:1–2.

Cortelezzi, L., Leonard, A. & Doyle, J.C. 1994 An example of active circulation control

of the unsteady separated ﬂow past a semi-inﬁnite plate. J. Fluid Mech. 260, 127–154.

Debien, A., von Krbek, K. A. F. F., Mazellier, N., Duriez, T., Cordier, L., Noack,
B. R., Abel, M. W. & Kourta, A. 2016 Closed-loop separation control over a sharp-edge
ramp using genetic programming. Exp. Fluids 57 (3), 40:1–19.

Deng, N., Noack, B. R., Morzy´nski, M. & Pastur, L. R. 2020 Low-order model for

successive bifurcations of the ﬂuidic pinball. J. Fluid Mech. 884, A37.

Dowling, A. P. & Morgans, A. S. 2005 Feedback control of combustion oscillations. Annual

Review of Fluid Mechanics 37 (151–182).

Dracopoulos, D. C. 1997 Evolutionary Learning Algorithms for Neural Adaptive Control .

London, etc.: Springer-Verlag.

Duriez, T., Brunton, S. L. & Noack, B. R. 2016 Machine Learning Control — Taming

Nonlinear Dynamics and Turbulence, Fluid Mech. its Appl., vol. 116. Springer-Verlag.

Fan, S. L., Yang, L., Wang, Z. C., Triantafyllou, M. S. & Karniadakis, G. M. 2020
Reinforcement learning for bluﬀ body active ﬂow control in experiments and simulations.
Proc. Natl. Acad. Sci. USA 117 (42), 26091–26098.

Fernex, D., Semann, R., Albers, M., Meysonnat, P. S, Schr¨oder, W. & Noack, B. R.
2020 Self-similar drag reduction formula from sparse data—Optimization of turbulent
skin-friction via spanwise travelling surface waves. Phys. Rev. Fluids 5 (7), 073901:1–18.
Fl¨ugel, G. 1930 Ergebnisse aus dem Str¨omungsinstitut der Technischen Hochschule Danzig.

In Jahrbuch der Schiﬀbautechnischen Gesellschaft, pp. 87–113. Springer.

Fukagata, K. & Nobuhide, K. 2003 Drag reduction in turbulent pipe ﬂow with feedback

control applied partially to wall. Int. J. Heat Fluid Flow 24, 480–490.

Gautier, N., Aider, J.-L., Duriez, T., Noack, B. R., Segond, M. & Abel, M. W. 2015
Closed-loop separation control using machine learning. J. Fluid Mech. 770, 424–441.
Gelbert, G., Moeck, J. P., Paschereit, C. O. & King, R. 2012 Advanced algorithms for
gradient estimation in one-and two-parameter extremum seeking controllers. J. Process
Control 22 (4), 700–709.

Gerhard, J., Pastoor, M., King, R., Noack, B. R., Dillmann, A., Morzy´nski, M. &
Tadmor, G. 2003 Model-based control of vortex shedding using low-dimensional Galerkin
models. In 33rd AIAA Fluids Conference and Exhibit. Orlando, Florida, USA, June 23–26,
2003, paper 2003-4262.

Geropp, D. 1995 Process and device for reducing the drag in the rear region of a vehicle, for
example, a road or rail vehicle or the like. United States Patent US 5407245 A.
Geropp, D. & Odenthal, H.-J. 2000 Drag reduction of motor vehicles by active ﬂow control

using the Coanda eﬀect. Exp. Fluids 28 (1), 74–85.

Glezer, A., Amitay, M. & Honohan, A.M. 2005 Aspects of low- and high-frequency actuation

for aerodynamic ﬂow control. AIAA Journal 43 (7), 1501–1511.

Herv´e, A., Sipp, D., Schmid, P. J. & Samuelides, M. 2012 A physics-based approach to

ﬂow control using system identiﬁcation. J. Fluid Mech. 702, 26–58.

Ishar, R., Kaiser, E., Morzynski, M., Albers, M., Meysonnat, P., Schr¨oder, W. &

Noack, B. R. 2019 Metric for attractor overlap. J. Fluid Mech. 874, 720–752.

Jordan, P. & Colonius, T. 2013 Wave packets and turbulent jet noise. Ann. Rev. Fluid Mech.

45, 173–195.

Koumoutsakos, P., Freund, J. & Parekh, D. 2001 Evolution strategies for automatic

optimization of jet mixing. AIAA J. 39 (5), 967–969.

Li, H., Fernex, D., Tan, J., Morzy´nski, M. & Noack, B. R. 2020a Cluster-

44 G. Y. Cornejo Maceda, Y. Li, F. Lusseyran, M. Morzy´nski and B. R. Noack

based network model of an incompressible mixing layer. J. Fluid Mech. submitted,
http://arxiv.org/abs/2001.02911.

Li, R., Bor´ee, J., Noack, B. R., Cordier, L. & Harambat, F. 2019 Drag reduction
mechanisms of a car model at moderate yaw by bi-frequency forcing. Phys. Rev. Fluids
4 (3), 034604.

Li, R., Noack, B. R., Cordier, L., Bor´ee, J., Kaiser, E. & Harambat, F. 2018 Linear
genetic programming control for strongly nonlinear dynamics with frequency crosstalk.
Archives of Mechanics 70 (6), 505–534.

Li, Y., Cui, W., Jia, Q., Li, Q., Yang, Z., Morzy´nski, M. & Noack, B. R. 2020b Explorative
gradient method for active drag reduction of the ﬂuidic pinball and slanted ahmed body.
J. Fluid Mech. (in revision, see arXiv).

Luchtenburg, D. M., G¨unter, B., Noack, B. R., King, R. & Tadmor, G. 2009 A
generalized mean-ﬁeld model of the natural and actuated ﬂows around a high-lift
conﬁguration. J. Fluid Mech. 623, 283–316.

Maehara, N. & Shimoda, Y. 2013 Application of the genetic algorithm and downhill simplex
methods (nelder–mead methods) in the search for the optimum chiller conﬁguration.
Applied Thermal Engineering 61 (2), 433 – 442.

McKay, M. D., Beckman, R. J. & Conover, W. J. 1979 A comparison of three methods
for selecting values of input variables in the analysis of output from a computer code.
Technometrics 21 (2), 239–245.

Nair, A., Yeh, C.-A., Kaiser, E., Noack, B. R., Brunton, S. L. & Tiara, K. 2019
Cluster-based feedback control of turbulent post-stall separated ﬂows. J. Fluid Mech.
875, 345–375.

Nelder, J. A. & Mead, R 1965 A simplex method for function minimization. Computer

Journal 7 (4), 308–313.

Noack, B. R. 2019 Closed-loop turbulence control—From human to machine learning (and
retour). In Proceedings of the 4th Symposium on Fluid Structure-Sound Interactions and
Control (FSSIC), Tokyo, Japan (ed. Y. Zhou, M. Kimura, G. Peng, A. D. Lucey &
L. Hung), pp. 23–32. Springer.

Noack, B. R., Afanasiev, K., Morzy´nski, M., Tadmor, G. & Thiele, F. 2003 A hierarchy
of low-dimensional models for the transient and post-transient cylinder wake. J. Fluid
Mech. 497, 335–363.

Noack, B. R., Stankiewicz, W., Morzy´nski, M. & Schmid, P. J. 2016 Recursive dynamic
mode decomposition of transient and post-transient wake ﬂows. J. Fluid Mech. 809, 843–
872.

Parezanovi´c, V., Cordier, L., Spohn, A., Duriez, T., Noack, B. R., Bonnet, J.-P.,
Segond, M., Abel, M. & Brunton, S. L. 2016 Frequency selection by feedback control
in a turbulent shear ﬂow. J. Fluid Mech. 797, 247–283.

Pastoor, M., Henning, L., Noack, B. R., King, R. & Tadmor, G. 2008 Feedback shear

layer control for bluﬀ body drag reduction. J. Fluid Mech. 608, 161–196.

Pfeiffer, J. & King, R. 2012 Multivariable closed-loop ﬂow control of drag and yaw moment
for a 3d bluﬀ body. In 6th AIAA Flow Control Conference, pp. 1–14. Atlanta, Georgia,
USA.

Protas, B. 2004 Linear feedback stabilization of laminar vortex shedding based on a point

vortex model. Phys. Fluids 16 (12), 4473–4488.

Rabault, J., Kuchta, M., Jensen, A., R´eglade, U. & Cerardi, N. 2019 Artiﬁcial neural
networks trained through deep reinforcement learning discover control strategies for active
ﬂow control. J. Fluid Mech. 865, 281–302.

Raibaudo, C., Zhong, P., Noack, B. R. & Martinuzzi, R. J. 2019 Machine learning

strategies applied to the control of a ﬂuidic pinball. Phys. Fluids 32, 015108.

Ren, F., Hu, H.-B. & Tang, H. 2020 Active ﬂow control using machine learning: A brief

review. J. Hydrodyn. 32 (2), 247–253.

Ren, F., Wang, C. & Tang, H. 2019 Active control of vortex-induced vibration of a
circular cylinder using machine learning. Physics of Fluids 31 (9), 093601, arXiv:
https://doi.org/10.1063/1.5115258.

Roussopoulos, K. 1993 Feedback control of vortex shedding at low Reynolds numbers. J. Fluid

Mech. 248, 267–296.

Stabilization with gradient-enriched machine learning control

45

Rowan, T. 1990 The subplex method for unconstrained optimization. PhD thesis, PhD thesis,

Department of Computer Sciences, University of Texas.

Rowley, C. W. & Williams, D. R. 2006 Dynamics and control of high-Reynolds number

ﬂows over open cavities. Ann. Rev. Fluid Mech. 38, 251–276.

Seifert, J. 2012 A review of the Magnus eﬀect in aeronautics. Prog. Aerosp. Sci. 55, 17–45.
Semaan, R., Kumar, P., Burnazzi, M., Tissot, G., Cordier, L. & Noack, B. R. 2016
Reduced-order modeling of the ﬂow around a high-lift conﬁguration with unsteady Coanda
blowing. J. Fluid Mech. 800, 71–110.

Tang, H., Rabault, J., Kuhnle, A., Wang, Y. & Wang, T. 2020 Robust active
ﬂow control over a range of reynolds numbers using an artiﬁcial neural network
trained through deep reinforcement learning. Physics of Fluids 32 (5), 053605, arXiv:
https://doi.org/10.1063/5.0006492.

Thiria, B., Goujon-Durand, S. & Wesfreid, J. E. 2006 The wake of a cylinder performing

rotary oscillations. J. Fluid Mech. 560, 123–147.

Wood, C. J. 1964 The eﬀect of base bleed on a periodic wake. J. R. Soc. Interface 68 (643),

477–482.

Wu, Z., Fan, D., Zhou, Y., Li, R. & Noack, B. R. 2018 Jet mixing enhancement using

machine learning control. Exp. Fluids 59, 131:1–17.

Zhou, Y., D., Fan, Zhang, B., , Li, R. & Noack, B. R. 2020 Artiﬁcial intelligence control

of a turbulent jet. J. Fluid Mech. 897, 1–46.

