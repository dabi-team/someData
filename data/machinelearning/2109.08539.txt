1
2
0
2

p
e
S
7
1

]
L
D
.
s
c
[

1
v
9
3
5
8
0
.
9
0
1
2
:
v
i
X
r
a

Preprint from https://www.gipp.com/pub/

A. Greiner-Petter et al. “MathTools: An Open API for Convenient MathML
Handling”. In: Proceedings of the 11th International Conference on Intelligent
Computer Mathematics (CICM). Ed. by F. Rabe et al. Vol. 11006. Springer,
2018. doi: 10.1007/978-3-319-96812-4\_9

MathTools:
An Open API for Convenient MathML Handling

Andr´e Greiner-Petter 1, Moritz Schubotz 1, Howard S. Cohl 2, and Bela Gipp 1

1 Dept. of Computer and Information Science,
University of Konstanz, Box 76, 78464 Konstanz, Germany,
{first.last}@uni-konstanz.de
2 Applied and Computational Mathematics Division, National Institute
of Standards and Technology, Mission Viejo, CA 92694, U.S.A., howard.cohl@nist.gov

Abstract. Mathematical formulae carry complex and essential semantic
information in a variety of formats. Accessing this information with different
systems requires a standardized machine-readable format that is capable of
encoding presentational and semantic information. Even though MathML
is an official recommendation by W3C and an ISO standard for representing
mathematical expressions, we could identify only very few systems which
use the full descriptiveness of MathML. MathML’s high complexity re-
sults in a steep learning curve for novice users. We hypothesize that this
complexity is the reason why many community-driven projects refrain from
using MathML, and instead develop problem-specific data formats for their
purposes. We provide a user-friendly, open-source application programming
interface for controlling MathML data. Our API is written in JAVA and
allows to create, manipulate, and efficiently access commonly needed informa-
tion in presentation and content MathML. Our interface also provides tools
for calculating differences and similarities between MathML expressions. The
API also allows to determine the distance between expressions using different
similarity measures. In addition, we provide adapters for numerous conversion
tools and the canonicalization project. Our toolkit facilitates processing of
mathematics for digital libraries, without the need to obtain XML expertise.

Keywords: MathML, API, Toolkit, Java

1 Introduction

MathML has the ability to represent presentational and content information. Several
optional features and markup options make MathML a highly versatile, but complex
format. MathML’s ability to mix presentation and content markup for an expression
(hereafter called fully descreptive MathML) makes MathML increasingly important
for mathematical digital libraries. For example, Listing 1 shows a simple example
of a cross-referenced parallel markup MathML document generated from the LATEX
string \frac{a}{b}.

Although MathML is an official recommendation of the World Wide Web Con-
sortium since 1998, has been an ISO standard (ISO/IEC 40314) since 2015, and is

1

 
 
 
 
 
 
Listing 1. Parallel markup MathML with examples of cross-references.

<math><semantics>

<mfrac id=”p.2” xref=”c.1”>
<mi id=”p.1” xref=”c.2”>a</mi>
<mi id=”p.3” xref=”c.3”>b</mi></mfrac>

<annotation−xml encoding=”MathML−Content”><apply>

<divide id=”c.1” xref=”p.2”/>
<ci id=”c.2” xref=”p.1”>a</ci>
<ci id=”c.3” xref=”p.3”>b</ci></apply></annotation−xml>

<annotation encoding=”application/x−tex”>\frac{a}{b}</annotation>
</semantics></math>

also part of HTML5, it is still a rarely used format. For example, the prominent
browser Microsoft Internet Explorer3 does not support MathML. Google Chrome
supported MathML only in version 24 and dropped it again in newer versions in
favor of MathJax4. Furthermore, we were only able to identify few databases that
use fully descriptive MathML. Most databases use basic MathML instead, such
as the DLMF [4] that only provides presentational MathML. Numerous tools that
process math allow MathML as an input or export format. Most of these tools avoid
MathML as an internal data representation. Instead, many systems create their own
problem-specific data representation and implement custom tools to parse MathML
for internal processing. This workaround causes problems in regard to reusability,
restricts applicability, and decreases efficiency for processing mathematics.

During our research of a MathML benchmark [19], we realized that parsing
MathML data is an error-prone endeavor. Even small changes, such as missing
default namespaces, can cause the parsing process to fail.

With MathTools, we provide a collection of tools that overcomes the issues of
complexity and simplifies the access to MathML data. MathTools also contains an
open API for easy access to useful services that we used in several of our previous
projects, such as for similarity calculations or for LATEX to MathML conversion
tools [3, 10, 11, 13, 17, 18, 19, 20, 21]. The tools we have developed are able to parse
fully descriptive MathML and to a certain degree, invalid MathML. Furthermore,
we provide easy access to several useful features implemented in MathML related
projects. These features include similarity metrics, distance calculations, and Java
imports for state-of-the-art conversion tools.

2 Related Work

Many digital libraries do not use MathML but favor their custom internal formats to
process mathematics. The conversion tool LATExml [12] is able to generate presenta-
3 The mention of specific products, trademarks, or brand names is for purposes of iden-
tification only. Such mention is not to be interpreted in any way as an endorsement or
certification of such products or brands by the National Institute of Standards and Tech-
nology, nor does it imply that the products so identified are necessarily the best available
for the purpose. All trademarks mentioned herein belong to their respective owners.

4 https://bugs.chromium.org/p/chromium/issues/detail?id=152430#c43

tion and content MathML using LATEX input. Instead of processing the input directly
to MathML, LATExml uses a customized XML format, and creates MathML in
a post-processing step. The Speech Rule Engine (SRE) implemented in MathJax [2]
is able to translate presentation MathML expressions to speech. Translations of
the SRE ause a set of rules that are applied to a nonstandard tree representation of
the original MathML input. Computer Algebra Systems (CAS) allow for complex
computations of mathematical expressions. These systems usually create their own
internal data format, but typically allow for MathML export. For example, the CAS
MAPLE parses inputs to a directed acyclic graph (DAG) presentation [1, Chapter 2],
whereas Mathematica uses a custom tree representation [22, Chapter 33].

There are other tools that internally use MathML in combination with cus-
tomized implementations for parsing MathML. Examples of such tools include
MathMLCan [5], a canonicalization tool for MathML data; the Visualization of
Mathematical Expression Trees (VMEXT) [21] for MathML data; and dependency
graphs [8] for analyzing relationships between math expressions.

3 MathTools

We provide MathTools, a collection of tools for convenient handling of MathML
data and an open Java API to access useful services related to MathML data.
MathToolsallows to parse, manipulate, and analyze fully descriptive MathML data
conveniently. We haven chosen Java to realize MathTools, because the majority of
related work is also implemented in Java. Java also is the most frequently used
programming language. The source of this project is publicly available on GitHub5
and on maven-central under an Apache 2 license.

The project is organized in multiple modules, of which the core module provides
the main functionality. Figure 1 illustrates possible workflows for processing the input
and shows the interaction of different modules. The core module is designed for pars-
ing, loading, storing, and manipulating presentation and content MathML data. The
core also provides helper functions for easy access to specific information. Examples
of supported operations include splitting presentation and content trees; accessing orig-
inal TEX data if available; and extracting all of the identifiers, e.g., mi or ci elements
from the data. The core module also allows to ‘clean’ MathML of unwanted features.
Such features include cross-references or entire content subtrees. This functionality is
particularly helpful for obtaining simple MathML for testing and learning purposes.
We equipped MathTools with several extra modules, which we consider useful
for typical use cases related to processing MathML data. MathTools contains the
following modules.
Gold: is part of the MathMLBen project [19], whose purpose is to provide a
comfortable interface to MathML gold standards within Java. The module uses
Plain Old Java Objects (POJOs) for representing entries of the gold standard. The
gold module can be used to implement benchmarks that use MathML.
Converters: is an outgrowth of the MathMLBen project and provides fast access to
state-of-the-art conversion tools. We implemented a Java interface for each supported

5 https://github.com/ag-gipp/MathMLTools

tool and the MathMLCan [5] that allows canocalization of the tool’s outputs. The
module allows to: (1) embed uniform MathML data into translation workflows; (2)
conveniently change the translation engines; (3) add new conversion tools to the API.
Libraries: is a collection of reliable XPath and XQuery expressions for accessing
elements in MathML data. Due to the XML structure of MathML documents,
MathTools uses data query languages to access specific elements. The library
module can be used to reliably query data from MathML documents independently
of programming languages.
Similarity: implements several distance and similarity measures for MathML
documents. Comparing MathML data is a common task for many mathematical
information retrieval systems, e.g., for mathematical search engines and for plagiarism
detection systems that analyze mathematical expressions as well as for many evaluation
and benchmark scenarios. All measures included in the module, except the tree edit
distance, produce histograms for MathML elements using the names of the elements
and their accumulated frequency of occurrence. Frequency histograms of MathML
elements have been successfully applied as part of plagiarism detection methods to
determine the similarity of mathematical expressions, see [10, 11] for a more detailed
explanation. We implemented the following similarity measures.

• Histogram Distance: calculates the absolute and relative differences of his-
tograms formed from MathML data. A small histogram distance indicates
semantic similarity between MathML expressions.

• Tree Edit Distance: calculates the number of changes that must be performed
to transform one MathML tree into another. The user can control the weights
for insertions, deletions, and renaming of elements. We use an implementation
of RTED [14] to perform these calculations. Tree edit distances are helpful for
detecting structural changes of MathML trees.

Fig. 1. The pipeline schema of MathTools and the modules. The orange arrow indicates
the general workflow for processing a MathML input to a valid MathML output. The
converters also allow mathematical LATEX input, while the MathML feature requires valid
MathML input. The gold module provides valid MathML without the core module.
Distances and similarities can be calculated using the similarity module. Single elements
or subtrees from valid MathML can be accessed through the core module.

LaTeXMLLaTeXMLCONVERTERSCORECORECOREINPUTlatex2mathmllatex2mathmlMathematicalMathematicalMathToWebMathToWebSnuggleTeXSnuggleTeXMathoidMathoidTeXZillaTeXZillaPoM-TaggerPoM-TaggerMathMLCanMathMLCanSIMILARITYEarth MoverDistanceEarth MoverDistanceHistogramDistancesHistogramDistancesTree EditDistanceTree EditDistanceCosineSimilarityCosineSimilarityGOLDMathMLBenMathMLBenPOJOsPOJOsValid MMLLIBSXPathXPathXQueryXQuery• Earth Mover Distance (EMD): is originally a distance measure for comparing
probability distributions. The measure models a cost function for changing one
distribution to another. In our case, the probability distribution is the histogram of
the MathML data. Our calculations are performed using a Java implementation
of [15]. EMD is widely used in multimedia information retrieval and for pattern
recognition algorithms.

• Cosine Similarity: is a distance measure between two non-zero vectors. In our

case, the vectors are represented by the histogram of the MathML data.

Note that EMD and Cosine similarity can be used for entire documents. In this case,
the histograms are an accumulation of all MathML expressions in the document. In
this scenario, EMD and Cosine similarities provide a strong measure of how similar
documents are in terms of their semantics.

4 Conclusion and Future Work

The MathTools project is a unified toolkit to facilitate working with MathML. By
using MathTools, other researchers will no longer need to develop their own data
representations, nor will they have to deal with the full complexity of XML. The de-
veloped tools are actively being used in our own projects, such as MathMLBen [19],
VMEXT [21], the Mathematical Language Processing (MLP) Project [13], and
HyPlag [6, 9, 11] for mathematical plagiarism detection. Our hope is that the tools pre-
sented in this paper will help others to realize MathML related projects in the future.
Our goal is to actively maintain and extend MathTools. Plans for current and
future work include enlarging the libraries of XPath and XQuery expressions and
providing transformation tools for MathML trees. Furthermore, we are currently
working on semantic enhancements of MathML through the use of WikiData (as
proposed in the MathMLBen project). This semantic enhanced MathML data can
be used to calculate semantic distances through the calculation of distances between
WikiData links. Moreover, we will consider the development of convienient interfaces
to other tools that deal with similar standars such as OpenMath. For instance Py-
OpenMath6 is a project written in Python that allows one to parse XML formats
and provides for conversion between Python objects to OpenMath representations.
Additionaly, we are considering to take advantage of tools for processing semantics
on the document level. In particular MMT [16], which is a framework for creation
of a new language for partially formal mathematical knowledge. We plan to maintain
the current API for the foreseeable future.
Acknowledgements We would like to thank Felix Hamborg, Vincent Stange, Jimmy
Li, Telmo Menezes, and Michael Kramer for contributing to the MathTools project.
We are also indebted to Akiko Aizawa for her advice and for hosting us as visiting
researchers at the National Institute of Informatics (NII) in Tokyo. This work was
supported by the FITWeltweit program of the German Academic Exchange Service
(DAAD) as well as the German Research Foundation (DFG) grant no. GI 1259/1.

6 https://github.com/OpenMath/py-openmath

References

[1] L. Bernardin et al. Maple 2016 Programming Guide. Maplesoft, a division of Waterloo

Maple Inc., 2016. isbn: 978-1-926902-46-3.

[2] D. Cervone, P. Krautzberger, and V. Sorge. “Towards universal rendering in MathJax”.

In: Proc. W4A ’16. ACM Press, 2016. doi: 10.1145/2899475.2899494.

[3] H. S. Cohl et al. “Growing the Digital Repository of Mathematical Formulae with
Generic Sources”. In: Proc. CICM. Ed. by M. Kerber et al. Vol. 9150. Springer, 2015.
doi: 10.1007/978-3-319-20615-8_18.

[4] F. W. J. Olver et al., eds. NIST Digital Library of Mathematical Functions. http:

//dlmf.nist.gov/, Release 1.0.17 of 2017-12-22.

[5] D. Form´anek et al. “Normalization of Digital Mathematics Library Content”. In:
Proc. OpenMath/MathUI/CICM-WiP (Bremen, Germany, July 9–13, 2012). Ed. by
J. Davenport et al. 921. Aachen, 2012.

[6] B. Gipp et al. “Web-based Demonstration of Semantic Similarity Detection Using
Citation Pattern Visualization for a Cross Language Plagiarism Case”. In: ICEIS
2014. 2014. doi: 10.5220/0004985406770683.

[7] A. Greiner-Petter et al. “MathTools: An Open API for Convenient MathML Handling”.
In: Proceedings of the 11th International Conference on Intelligent Computer Mathe-
matics (CICM). Ed. by F. Rabe et al. Vol. 11006. Springer, 2018. doi: 10.1007/978-
3-319-96812-4\_9.

[8] G. Y. Kristianto, G. Topic, and A. Aizawa. “Utilizing dependency relationships
between math expressions in math IR”. In: Inf. Retr. Journal 20.2 (2017). doi:
10.1007/s10791-017-9296-8.

[9] N. Meuschke, B. Gipp, and C. Breitinger. “CitePlag: A Citation-based Plagiarism

Detection System Prototype”. In: Proc. 5th Int. Plagiarism Conf. 2012.

[10] N. Meuschke et al. “Analyzing Mathematical Content to Detect Academic Plagiarism”.

In: Proc. ACM CIKM. ACM, 2017. doi: 10.1145/3132847.3133144.

[11] N. Meuschke et al. “HyPlag: A Hybrid Approach to Academic Plagiarism Detection”.

In: Proc. SIGIR. Ann Arbor, MI, USA, 2018.

[12] B. R. Miller. LaTeXML: A LATEX to XML Converter. http : / / dlmf . nist . gov /

LaTeXML/. Accessed: 2018-01-18.

[13] R. Pagel and M. Schubotz. “Mathematical Language Processing Project”. In: Proc.
MathUI/OpenMath/ThEdu/CICM-WiP. Ed. by M. England et al. 1186. 2014.
[14] M. Pawlik and N. Augsten. “RTED: A Robust Algorithm for the Tree Edit Distance”.

In: CoRR abs/1201.0230 (2012). arXiv: 1201.0230.

[15] O. Pele and M. Werman. “Fast and robust Earth Mover’s Distances”. In: IEEE 12th

ICCV. 2009. doi: 10.1109/ICCV.2009.5459199.

[16] F. Rabe. “The MMT API: A Generic MKM System”. In: Proc. CICM. Ed. by J.
Carette et al. Vol. 7961. Springer, 2013. doi: 10.1007/978-3-642-39320-4_25.
[17] M. Schubotz. Augmenting Mathematical Formulae for More Effective Querying &

Efficient Presentation. Berlin: epubli, 2017. isbn: 9783745062083.

[18] M. Schubotz et al. “Evaluating and Improving the Extraction of Mathematical
Identifier Definitions”. In: CLEF 2017. 2017. doi: 10.1007/978-3-319-65813-1_7.
[19] M. Schubotz et al. “Improving the Representation and Conversion of Mathematical
Formulae by Considering their Textual Context”. In: Proc. ACM/IEEE-CS JCDL.
Fort Worth, USA, June 2018. doi: 10.1145/3197026.3197058.

[20] M. Schubotz et al. “Semantification of Identifiers in Mathematics for Better Math
Information Retrieval”. In: Proc. 39th Int. ACM SIGIR. Pisa, Italy: ACM, 2016. isbn:
978-1-4503-4069-4. doi: 10.1145/2911451.2911503.

[21] M. Schubotz et al. “VMEXT: A Visualization Tool for Mathematical Expression Trees”.
In: Proc. CICM. Vol. 10383. Springer, 2017. doi: 10.1007/978-3-319-62075-6_24.
[22] S. Wolfram. An Elementary Introduction to the Wolfram Language - Second Edition.

Wolfram Media, 2017. isbn: 978-1944183059.

Listing 2. Use the following BibTeX code to cite this article

@InProceedings{GreinerPetter2018,

author = {Andr{\’{e}} Greiner{-}Petter and
Moritz Schubotz and
Howard S.~Cohl and
Bela Gipp},

editor = {Florian Rabe and

William M. Farmer and
Grant O. Passmore and
Abdou Youssef},

title = {MathTools: An Open API for Convenient MathML Handling},
booktitle = {Proceedings of the 11th International

Conference on Intelligent Computer Mathematics (CICM)},

volume = {11006},
pages = {104--110},
publisher = {Springer},
doi = {10.1007/978-3-319-96812-4\_9},
year = {2018},
url = {http://link.springer.com/10.1007/978-3-319-96812-4_9}

}

