Noname manuscript No.
(will be inserted by the editor)

Software Training in HEP

Sudhir Malik (editor) 1 · Samuel Meehan 2 · Kilian Lieret3 · Meirin
Oan Evans4 · Michel H. Villanueva5 · Daniel S. Katz6 · Graeme A.
Stewart2 · Peter Elmer7 · Sizar Aziz8 · Matthew Bellis18 · Riccardo
Maria Bianchi25 · Gianluca Bianco30,31 · Johan Sebastian Bonilla23 ·
Angela Burger24 · Jackson Burzynski27 · David Chamont8 · Matthew
Feickert6 · Philipp Gadow12 · Bernhard Manfred Gruber2,35,36 · Daniel
Guest15 · Stephan Hageboeck2 · Lukas Heinrich2 · Maximilian M.
Horzela16 · Marc Huwiler26 · Clemens Lange2 · Konstantin Lehmann17 ·
Ke Li19 · Devdatta Majumder28 · Judita Mamužić10 · Kevin Nelson22 ·
Robin Newhouse13 · Emery Nibigira14 · Scarlet Norberg1 · Arturo
Sánchez Pineda11 · Mason Proﬃtt19 · Brendan Regnery23 · Amber
Roepe34 · Stefan Roiser2 · Henry Schreiner7 · Oksana Shadura21 ·
Giordon Stark9 · Stephen Nicholas Swatman2,20 · Savannah Thais7 ·
Andrea Valassi2 · Stefan Wunsch2,16 · David Yakobovitch32 · Siqi
Yuan29

Received: 1 August 2021 / Accepted: date

Sudhir Malik
sudhir.malik@upr.edu

IJCLab, Orsay,

1University of Puerto Rico Mayaguez, USA
2CERN, Geneva, Switzerland
3Ludwig Maximilian University of Munich, Germany
4University of Sussex, Brighton, UK
5University of Mississippi, Oxford, MS, USA
6University of Illinois at Urbana-Champaign, IL, USA
7Princeton University, Princeton, NJ, USA
8Université Paris-Saclay, CNRS/IN2P3,
France
9Santa Cruz Institute for Particle Physics, UC Santa Cruz,
CA, USA
10Instituto de Fśsica Corpuscular / Consejo Superior de
Investigaciones Cientíﬁcas - University of Valencia (IFIC /
CSIC - UV), Spain
11LAPP, Université Savoie Mont Blanc, CNRS/IN2P3,
Annecy, France
12Deutsches Elektronen-Synchrotron DESY, Hamburg,
Germany
13University of British Columbia, Vancouver, Canada
14Université de Strasbourg, CNRS,
Strasbourg, France
15Humboldt University of Berlin, Berlin, Germany
16Karlsruhe Institute of Technology (KIT), Karlsruhe,
Germany
17Simon Fraser University, Burnaby BC, Canada
18Siena College, Loudonville, NY, USA
19University of Washington, Seattle, WA, USA
20University of Amsterdam, Amsterdam, The Netherlands
21University of Nebraska, Lincoln, NE, USA
22University of Michigan, Ann Arbor, MI, USA
23University of California Davis, Davis, CA, USA
24Oklahoma State University, Stillwater, OK 74078, USA

IPHC UMR 7178,

Abstract The long term sustainability of the high en-
ergy physics (HEP) research software ecosystem is es-
sential to the ﬁeld. With new facilities and upgrades
coming online throughout the 2020s, this will only be-
come increasingly important. Meeting the sustainabil-
ity challenge requires a workforce with a combination of
HEP domain knowledge and advanced software skills.
The required software skills fall into three broad groups.
The ﬁrst is fundamental and generic software engineer-
ing (e.g., Unix, version control, C++, continuous in-
tegration). The second is knowledge of domain-speciﬁc
HEP packages and practices (e.g., the ROOT data for-
mat and analysis framework). The third is more ad-
vanced knowledge involving specialized techniques, in-
cluding parallel programming, machine learning and
data science tools, and techniques to maintain software
projects at all scales. This paper discusses the collective

25University of Pittsburgh, Pittsburgh, PA, USA
26Universität Zürich, Zürich, Switzerland
27University of Massachusetts, Amherst MA, USA
28Institut Ruđer Bošković, Zagreb, Croatia
29Boston University, Boston, USA
30University of Bologna, Bologna, Italy
31INFN (Istituto Nazionale di Fisica Nucleare), Italy
32SingleStore, New York
34University of Oklahoma, Norman, OK, USA
35Center for Advanced Systems Understanding, Saxony,
Germany
36Technische Universität Dresden, Dresden, Germany

1
2
0
2

g
u
A
6

]
x
e
-
p
e
h
[

2
v
9
5
6
0
0
.
3
0
1
2
:
v
i
X
r
a

 
 
 
 
 
 
2

The HSF Training WG

software training program in HEP led by the HEP Soft-
ware Foundation (HSF) and the Institute for Research
and Innovation in Software in HEP (IRIS-HEP). The
program equips participants with an array of software
skills that serve as ingredients for the solution of HEP
computing challenges. Beyond serving the community
by ensuring that members are able to pursue research
goals, the program serves individuals by providing in-
tellectual capital and transferable skills important to
careers in the realm of software and computing, inside
or outside HEP.

Keywords Software · Training · HEP

1 Introduction

Particle physics in the coming decades will continue
to explore the fundamental workings of the universe.
This requires upgrading existing major facilities like
the Large Hadron Collider (LHC) to the High Luminos-
ity LHC [1] and building new facilities like the Long-
Baseline Neutrino Facility (LBNF) [2] and Deep Under-
ground Neutrino Experiment (DUNE) [3], among many
others. To realise the full physics potential of this work,
an equivalent investment must be made into the soft-
ware required to collect, process, and analyse the deluge
of the data recorded. Recent eﬀorts like the HSF [4] and
IRIS-HEP [5] are facilitating cooperation and common
eﬀorts in HEP software and computing worldwide to
develop state-of-the-art software cyberinfrastructure re-
quired to meet the challenges of the upcoming HEP ex-
periments’ data-intensive scientiﬁc research. The rapid
evolution of computing technology with a concomitant
increase in the complexity of software algorithms for
analysis requires developers to acquire a broad port-
folio of programming skills in order to enable future
discoveries.

It is critical that all stakeholders across HEP make
a major eﬀort to provide a strong foundation for new
researchers entering the ﬁeld. The researchers must be
brought up to date with new software technologies, con-
current programming, and artiﬁcial intelligence, and
must maintain, improve, and sustain the existing HEP
software. However, young researchers graduating from
universities worldwide currently do not receive adequate
preparation in modern computing practices to respond
to the growing needs related to the above experimen-
tal challenges. A community white paper [6] outlined
the initiatives to address training needs and issues that
need to be taken into account for these to be success-
ful. In the last two years, the HSF Training working
group, together with IRIS-HEP and FIRST-HEP [7]
and partnering with The Carpentries [8], has begun de-

velopment of a software training program. The eﬀorts
of this group have been focused on two speciﬁc goals:
(1) developing material for an introductory HEP soft-
ware curriculum, and (2) teaching this curriculum to
HEP scientists. Thus far, over 1000 people in HEP and
related computing areas have been trained. This paper
describes the activities, the curriculum, and future di-
rections of HEP software training.

2 Organization

The HSF Training working group, which is led by three
co-conveners, engages with diﬀerent experimental col-
laborations and initiatives such as IRIS-HEP, FIRST-
HEP, and The Carpentries. The training group has
weekly public meetings [9] to plan and assess progress.
This is where ideas and proposals are discussed and
events are planned. These meetings are held remotely
using Zoom and live notes are maintained for anyone
unable to join. Training events are announced via sev-
eral email lists, with registration and timetables orga-
nized using Indico [10].

The style and pedagogy of the training is heavily
inspired by The Carpentries. The training is student-
centric, suitable for self-study, and experiment agnostic,
with reusable study material that is open source and
open access, and hosted in the HSF’s Training repos-
itories on GitHub [11]. We encourage participants to
provide feedback and suggestions for improvement by
opening issues in these repositories or to directly help
with the development by opening pull requests. In most
cases the training material is in the form of a web-
site that is built from ﬁles written in the easy-to-learn
Markdown language. The website is automatically built
using the static site generator Jekyll [12] via GitHub
Pages [13] and an adapted and extended template from
The Carpentries [14,15]. Thus the entry barrier to con-
tribute to the material is fairly low, as only basic knowl-
edge of git is required (and in most cases, all necessary
steps can be performed via the GitHub web interface).
All lessons are listed in the HSF Training Center [16],
which provides an overview of the available training
modules and serves as an entry point for anyone wish-
ing to learn.

Based on our experiences, we have also formalized
the procedure used to organize a training event and
have compiled our knowledge in a compact guide [17].
As organization is all about dividing work, we distin-
guish between three relevant roles at our events:

– Instructors are subject-matter experts who develop
training material and then teach it, either in per-
son, in recorded live sessions, or by recording videos

Software Training in HEP

3

before the event. Instructors are the primary aca-
demic drivers of the program at large and provide
guidance to mentors and students alike. They gain
experience in curriculum design with a focus on op-
timizing pedagogy for all learning styles.

– Mentors work closely with participants, for exam-
ple, by conducting small group mentoring sessions
with ideally only ﬁve students per mentor. They op-
timize the learning environment for individual par-
ticipants and help them persevere. They are crit-
ical to the success of any event and through par-
ticipation as a mentor not only serve the commu-
nity, but develop pedagogical communication skills
that are transferable to other aspects of their re-
search/teaching portfolio.

– Facilitators take care of organizational aspects. They
are responsible for putting together all of the pieces
of the puzzle to successfully execute the full event
while serving as the primary point of reference for
participants to communicate. They take on a dy-
namic responsibility beyond the “core content” of
the training event itself, and they also learn the es-
sential “soft skills” necessary to be a leader in the
academic community and beyond.

All three groups are collectively referred to as educators.
As creating training material and teaching requires a lot
of commitment and time, it is of great importance to
acknowledge the eﬀorts of everyone involved. Currently
this is is mostly achieved by listing helping community
members on the pages of the relevant training and on
a central community page [18].

Finally, Blueprint workshops [19] and hackathons
[20] are organised to brainstorm new training events,
develop content, and discuss improvements. The travel
cost for educators and video captioning of training ma-
terial have been supported by IRIS-HEP and FIRST-
HEP.

3 Curriculum

An initial survey of the software and training needs of
the HEP community was conducted in February of 2019
[21]. This was followed by the development of “proto-
type” course modules and pilot training events from
which feedback from participants was solicited.

Based on the surveys and the experiences gathered
at the events, the course structure was extended into a
full curriculum consisting of a variety of training mod-
ules. Each training module is independent from the oth-
ers (except for some clearly marked requirements), so
that students can prioritize certain skills before oth-
ers. This is especially important in academia because

students are often expected to work directly towards
scientiﬁc results with minimal time given for acquiring
software knowledge or best practices.

The most basic skill set (Unix shell, Python, git)
is covered by modules directly developed by the Soft-
ware Carpentry [22]. A large module that covers the
basics of modern C++ is currently in development and
other modules focusing on development in C++ such
as CMake have already been taught with great success.
This is complemented by a series of broader software
engineering topics, such as continuous integration and
deployment using both GitHub Actions and GitLab CI
as examples. These modules are also particularly rele-
vant for analysis preservation, for which modules cov-
ering domain speciﬁc software such as REANA [23] are
in development.

A lesson on machine learning and a lesson speciﬁ-
cally targeting machine learning with GPUs started a
data analysis techniques curriculum section. Similarly
important are HEP speciﬁc tools, especially ROOT [24]
and integration such as uproot [25].

Finally, development is ongoing of modules that cover
advanced topics that are important for students striving
to become core developers, such as code documentation,
performance optimization and parallel programming.

The module list [16] and the material evolves con-
tinuously depending on input from participants and
person-power available; as it is open source, any inter-
ested stakeholder can contribute.

4 Training Events

During the initial period of training, 150 people re-
ceived “introductory” software skills training at Fermi-
lab (FNAL), Argonne National Lab (ANL), Lawrence
Berkeley Lab (LBNL), and CERN [26,27,28,29]. Na-
tional labs are the hub of the HEP community and pro-
vide an environment where it is easier to reach a diverse
population of participants with good infrastructure for
in-person training. At the CoDaS-HEP school [30], over
50 people participated in the advanced “computing boot-
camp” software training. These training events were in-
person.

However, the COVID-19 pandemic necessitated a
rapid adjustment to virtual platforms, which evolved
throughout the course of 2020 as we gained experience.
The events that we had to pivot to use a virtual en-
vironment include training on continuous integration
and deployment [31,32], Docker [33], machine learning
on GPUs [34] and C++ [35] (organized together with
SIDIS [36]).

To date, nearly 100 educators have taught over 1000
participants in about a dozen training events. Valuable

4

The HSF Training WG

lessons have been learned regarding in-person and vir-
tual training. There is very clear and detailed guidance
for anyone willing to host, request or organize a train-
ing while staying aligned with the approach, philosophy,
and code of conduct of the HSF Training group so as
to make the tools and techniques that are developed
persistent, reuseable, and broadly accessible [17].

While in-person events oﬀer more opportunities for
active and eﬃcient engagement of participants and com-
munity building, they are generally more exclusive: Par-
ticipants need suﬃcient funding and extra preparation
time to arrange travel to the venue. Hosts have to book
specially arranged/equipped rooms with multiple pro-
jectors and screens to simultaneously show teaching ma-
terials and slides. The space constraints typically limit
the number of participants to a few dozen and a long
lead time is required for the logistics. Our in-person
events have been managed by about ﬁve educators,
which is necessary for the “hands-on” aspect to be suc-
cessful. These educators also need to make a large time
commitment; they cannot just present their material
and leave. Virtual events have a broader reach of par-
ticipant attendance that is much higher compared to in-
person events and enable a considerably more equitable
service to the community. Because the teaching materi-
als are fully preserved via lesson creation and YouTube
videos beforehand, an inability to attend during the
scheduled time does not considerably degrade learning.
Finally, these video materials are captioned to be in-
clusive of those with hearing impairments. Captioning
videos for a week-long event (∼$50/day) is considerably
more economical than the cost of a hired sign language
interpreter (∼$1000/day).

The disadvantage of virtual events, however, is that
it is diﬃcult for educators and participants to inter-
act closely – you just can’t recreate the in-person en-
vironment on Zoom. Educators and participants have
to plan and act upon their spread across time zones
in the best possible way. It is also challenging to keep
everyone engaged and on the same page due to the per-
vasive culture of “multi-tasking” within HEP. Due to
this issue, although initial registrations for these events
are very high, the actual attendance is typically only
50% of those who have registered. The online experi-
ence is more prone to be distracted by other profes-
sional duties. However, it should be noted that this
does not mean that there is a lesser degree of learn-
ing occurring at the training event. Tools like Matter-
most, discord, and Slack have been eﬀectively deployed
for asynchronous communication, both during and after
the event.

In general, devoting full time to training is always
challenging because of a combination of two factors.

Though there is widespread desire to engage in training,
there is an institutional culture that prioritizes imme-
diate research activity over dedicated professional de-
velopment, even though the latter will lead to higher
productivity in the long term.

5 Feedback

Feedback is required for us to evaluate if we are ef-
fectively facilitating learning and to ensure the success
of future training. Every training has a pre- and post-
survey to collect feedback from the participants. This
includes a set of baseline questions pertaining to demo-
graphics and questions to assess the quality and method
of training. These questions can be adapted to the na-
ture and topic of each training event. Additionally we
organize a “post-mortem” session among the educators
to internally discuss the successes and failures. This
typically occurs after completion of the results of the
post- (and pre-) workshop surveys, which guide the dis-
cussion. Finally, a short presentation about the train-
ing experience is presented at the HSF Training weekly
meeting and/or at the HSF all-working-groups planning
meeting.

Figure 1 shows feedback on a training event involv-
ing containerization with Docker [37]: clearly the train-
ing made a diﬀerence. However, we are aware that this
type of “learning evaluation” does not fully encompass
the impact of our training. It only probes the perceived
and self-reported learning of a skill. Instead, what is
needed is a survey that is conducted suﬃciently later
to understand how well the learned skill is being applied
in the context of research.

6 Community

The solutions to future computing challenges require
a large workforce trained in a wide range of software
skills. In order to train this workforce, we rely on an
active community whose members are enthusiastic and
motivated to teach. Our members include people with
various roles and backgrounds in HEP, such as experi-
mental physicists from diﬀerent collaborations, as well
as software engineers from diﬀerent institutes. As we
scale our training activities, we also have members from
nuclear physics and computer science as well. Members
of The Carpentries teach part of our very basic cur-
riculum by an agreement via membership subscription
through IRIS-HEP. The overall diversity of the back-
ground of the instructors and mentors adds great value
to the training. Each educator brings their own ﬂavor
of experience from a diﬀerent computing environment

Software Training in HEP

5

Fig. 1 The self-reported pre- and post- training level of knowledge on the topic of Docker (a software container technology)

with a common goal of creating, teaching, and sustain-
ing a common set of software skills.

As the success of our mission depends crucially on
the motivation and participation of the community, we
cultivate a strong sense of community ownership and
pay special attention to acknowledge contributions of
all kinds. We also encourage the participants in our
training events to remain active or become more ac-
tive, share feedback, and in particular, to sign up to
be a mentor in one of the next iterations of the same
training module. If former participants do not yet feel
conﬁdent about their mentoring skills, we oﬀer to match
them with a more senior mentor. In the same way, we
encourage mentors to become instructors or facilitators
and to become more and more active in our organiza-
tion. By actively engaging participants and educators
throughout the training community, we can sustain and
nurture a culture of intentional learning and grow our
community in an organic fashion [38].

Educators not only provide an invaluable service
to the HEP community, but they also get the oppor-
tunity to develop and sharpen their pedagogical skills
and enhance their professional portfolio. About two-
thirds of the HEP workforce eventually works outside
of HEP, such as in the software industry and in data
science. The training makes a meaningful diﬀerence in
the preparation for such careers in terms of software
knowledge and experience, and enhances the employa-
bility for both the educators and participants. The skills
taught and learned, like Python, machine learning, and
data analysis, align with the needs of the software in-
dustry and strengthen the job proﬁle of a physicist to
work in industry. At the same time, recognizing the

importance of software skills within HEP may hope-
fully help to provide more incentives and clearer career
paths in academia to those who want to pursue their
career within HEP, or in other scientiﬁc research ﬁelds.
In particular, strengthening the research software engi-
neer career path [39,40] could signiﬁcantly help retain
the expertise within the HEP community.

7 Sustainability

Sustainable software [41] is essential for HEP. A sus-
tainable training program [42] is key to pursuing this
goal. While continuing the existing work, it will be es-
sential to spread the training events and training exper-
tise geographically to keep the costs low and move to an
online training model to reduce ﬁnancial burdens that
accompany in-person training. In parallel, it is impor-
tant that as the curriculum grows, it begins to include
material speciﬁcally aimed at making software sustain-
able.

Training should be structured so that a minimal
set of people are needed for maintenance and costs per
event are minimized. Growing the community is an im-
portant aspect of sustaining the workforce. Providing
recognition and possible ﬁnancial incentives can keep
the community vibrant and motivated. The commu-
nity should recognize and appreciate the broader value
of our software training, which prepares a workforce to
solve computing challenges that are essential to advance
our ﬁeld and society at large.

To lead software training across HEP and related
communities over the long run, we need a core team
whose main focus is to support the overall mission of

1(Beginner)2345(Expert)010203040506070Percent of participants216215139How do you rate your knowledge and abilities when using Docker?Before trainingAfter training6

The HSF Training WG

HEP software training. To scale up training eﬀorts, we
need to build mentorship and leadership at the local
and regional level supported by the core team. Speciﬁ-
cally, while we have started the following set of activi-
ties, we need to scale up by:

– Engaging more HEP labs, institutes, and universi-

ties in this endeavor.

– Promoting equity, diversity, inclusion, and accessi-
bility in participation across HEP communities and
being mindful of under-resourced institutions in dif-
ferent geographical regions.

– Establishing a mechanism to get feedback from our

communities and improve the training.

– Ensuring that our core team and volunteers are af-
forded opportunities to grow professionally and have
career paths.

– Exploring ways to manage a ﬁnancial support model

to share costs in the long term.

8 Broader Impacts

HSF-led training is multilayered, with a basic HEP soft-
ware curriculum progressing to HEP-speciﬁc physics
tools. Integrated with this is a growing outreach pro-
gram that is essential to building an inﬂux of software
workforce and training young minds, catching them early
in their educational development. For example, several
outreach events are organised on introducing Python
programming to K-12 teachers [43] under IRIS-HEP
and FIRST-HEP. The teachers can turn this into a
classroom experience for their students where physics,
astronomy, and math courses can have problem solving
components that integrate programming with Python.
In outreach events, the teachers analyze and interpret
physics data with Python using Google Colab [44], which
allows them to work directly in the web browser with-
out requiring any additional setup. Workshops teaching
the basics of machine learning to school teachers are
also organized [45]. We plan to scale this experience by
partnering with other stakeholders in HEP outreach,
for example, Quarknet [46], which already has a well
developed network of teachers and schools taking part
in HEP outreach programs.

9 Summary

HSF and IRIS-HEP are creating software training and
ensuring sustainability of software in HEP for years to
come. The training material is open source and open
access, shared publicly via GitHub. This allows any-
one to join the discussion and make contributions by

proposing changes, thereby continuously improving the
available material. This process is guided by continual
feedback solicited from the participants of the training
events. Finally, we have established a growing commu-
nity of educators to broadly promote a culture within
HEP that goes beyond valuing software skills, but also
values the teaching of those skills to others. In doing so,
we aim to foster a more active, inclusive, and diverse sci-
entiﬁc community. By leading software training across
HEP and related communities, we will be able to meet
the challenges in the ﬁeld and beyond.

Declarations

Funding: This work is supported in part by National
Science Foundation Cooperative Agreement OAC-
1836650 and grants OAC-1829707 and OAC-1829729.
Conﬂicts of interest: The authors have no conﬂicts of
interest to declare that are relevant to the content
of this article.

Availability of data and material: Data sharing not ap-
plicable to this article as no datasets were generated
or analysed during the current study.

Code availabiliy: Not applicable.

References

1. High-luminosity LHC.

https://home.cern/science/

accelerators/high-luminosity-lhc

2. V. Papadimitriou, K. Ammigan, J.A.J. au2, K.E. An-
derson, R. Andrews, V. Bocean, C.F. Crowley, N. Eddy,
B.D. Hartsell, S. Hays, P. Hurh, J. Hylen, J.A. Johnstone,
P. Kasper, T. Kobilarcik, G.E. Krafczyk, B. Lundberg,
A. Marchionni, N.V. Mokhov, C.D. Moore, D. Pushka,
I. Rakhno, S.D. Reitzner, P. Schlabach, V. Sidorov, A.M.
Stefanik, S. Tariq, L. Valerio, K. Vaziri, G. Velev, G. Vo-
gel, K. Williams, R.M. Zwaska, C. Densham. Design
of the LBNF beamline. https://arxiv.org/abs/1704.
04471 (2017)

3. Deep Underground Neutrino Experiment.

https://

lbnf-dune.fnal.gov/

4. High Energy Physics Software Foundation.

https://

hepsoftwarefoundation.org/

5. Institute for Research and Innovation in Software for
High Energy Physics (IRIS-HEP). https://iris-hep.
org

6. HEP Software Foundation, D. Berzano, R.M. Bianchi,
P. Elmer, S.V. Gleyzer, J. Harvey, R. Jones, M. Jou-
vin, D.S. Katz, S. Malik, D. Menasce, M. Neubauer,
F. Psihas, A.P. Navarro, G.A. Stewart, C. Tunnell, J.A.
Vasel, S.J. Wang. HEP Software Foundation community
white paper working group - training, staﬃng and ca-
reers. https://arxiv.org/abs/1807.02875 (2019)

7. Framework for Integrated Research Software Training in

High Energy Physics. https://first-hep.org

8. The Carpentries. https://carpentries.org/
9. HSF Training and Careers Working Group meetings.

https://indico.cern.ch/category/10294/

Software Training in HEP

7

40. Building a career path for research software engineers.
https://iris-hep.org/2021/05/12/career-path-rse.
html (2021)

41. D.S. Katz, S. Malik, M.S. Neubauer, G.A. Stewart, K.A.
Assamagan, E.A. Becker, N.P. Chue Hong, I.A. Cos-
den, S. Meehan, E.J.W. Moyse, A.M. Price-Whelan,
E. Sexton-Kennedy, M.O. Evans, M. Feickert, C. Lange,
K. Lieret, R. Quick, A. Sánchez Pineda, C. Tunnell.
Software sustainability & high energy physics. https:
//doi.org/10.5281/zenodo.4095837 (2020). DOI 10.
5281/zenodo.4095837

42. S. Malik, S. Thais, M. Villanueva, K. Lieret, G. Stark,
E.N. Nibigira, M.O. Evans, C. David. Software training
and Sustainable HEP. https://indico.cern.ch/event/
1004432/contributions/4377762/ (2021). Sustainable
HEP Workshop

43. Data analysis for STEM teachers. https://indico.cern.

ch/event/927162/ (2020)

44. Google Colaboratory. https://colab.research.google.

com/

45. Machine learning basics for STEM teachers. https://

indico.cern.ch/event/998732/ (2021)

46. Quarknet. https://quarknet.org/

10. HSF training

events.

https://indico.cern.ch/

category/11386/

11. HSF training and educational material GitHub organiza-

tion. https://github.com/hsf-training

12. Jekyll: Transform your plain text into static websites and

blogs. https://jekyllrb.com/

13. GitHub Pages: Websites for you and your projects.

https://pages.github.com/

14. HSF Training module template repository.
github.com/hsf-training/hsf-styles

https://

15. The Carpentries training module template repository.

https://github.com/carpentries/styles

16. Hsf training center. https://hepsoftwarefoundation.

org/training/curriculum.html

17. How to host an HSF training event.

https:
//hepsoftwarefoundation.org/training/howto-event.
html
18. The

https://
hepsoftwarefoundation.org/training/community.html
19. IRIS-HEP and HSF training blueprint meeting. https:

community.

training

HSF

//indico.cern.ch/event/889665/ (2020)

20. The HSF training hackathon. https://indico.cern.ch/

event/997485/ (2021)

Selected results
from HSF training
https://indico.cern.ch/event/759388/

21. D. Lange.
survey.
contributions/3315848/attachments/1816082/
2968198/training_how2019.pdf (2019).
HSF/OSG/WLCG Workshop HOW2019

2019 Joint

22. Software Carpentry – Teaching Basic Lab Skills for re-
search computing. https://software-carpentry.org/
lessons/

23. Reproducible Research Data Analysis Platform (RE-

ANA). https://reanahub.io/

24. ROOT: analyzing petabytes of data, scientiﬁcally. https:

//root.cern/ (2021)

25. Getting

started with uproot.

https://uproot.

readthedocs.io/ (2021)

26. Software carpentry workshop (Fermilab).
indico.fnal.gov/event/20233/ (2019)
27. FIRST-HEP/ATLAS training (Argonne).
indico.cern.ch/event/827231/ (2019)
28. FIRST-HEP/ATLAS training (LBNL).
indico.cern.ch/event/827232/ (2019)

https://

https://

https://

29. Software carpentry workshop (CERN). https://indico.

cern.ch/event/834411/ (2019)

30. Computational and Data Science Training for High En-

ergy Physics. http://codas-hep.org/

31. Virtual pipelines training with GitLab. https://indico.

cern.ch/event/904759/ (2020)

32. Virtual pipelines training with GitHub. https://indico.

cern.ch/event/1001128/ (2020)

33. Virtual Docker training.
event/934651/ (2020)

https://indico.cern.ch/

34. Machine learning on GPUs training. https://indico.

cern.ch/event/958112/ (2020)

35. 1st HEP C++ course and hands-on training. https://

indico.cern.ch/event/946584/ (2020)

36. Software Institute for Data-Intensive Sciences. https:

//sidis.web.cern.ch/

37. HSF virtual Docker training. https://indico.cern.ch/

event/934651/ (2020)

38. K. Lieret. Community building. https://indico.cern.
ch/event/941278/contributions/4084356/ (2021). HSF
WLCG Virtual Workshop

39. D.S. Katz, K. McHenry, C. Reinking, R. Haines. Re-
search Software Development & Management in Univer-
sities: Case Studies from Manchester’s RSDS Group, Illi-
nois’ NCSA, and Notre Dame’s CRC. https://doi.org/
10.1109/SE4Science.2019.00009 (2019)

