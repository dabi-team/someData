1
2
0
2

g
u
A
3
2

]

G
L
.
s
c
[

1
v
6
6
2
0
1
.
8
0
1
2
:
v
i
X
r
a

2LM-M ANN grid search v8 A2: August 24, 2021

1

Molecular Design Based on Artiﬁcial Neural Networks,
Integer Programming and Grid Neighbor Search

Naveed Ahmed Azam1, Jianshen Zhu1, Kazuya Haraguchi1, Liang Zhao2, Hiroshi Nagamochi1
and Tatsuya Akutsu3

1 Department of Applied Mathematics and Physics, Kyoto University, Kyoto 606-8501, Japan
2 Graduate School of Advanced Integrated Studies in Human Survavibility (Shishu-Kan), Kyoto Univer-
sity, Kyoto 606-8306, Japan
3 Bioinformatics Center, Institute for Chemical Research, Kyoto University, Uji 611-0011, Japan

Abstract
A novel framework has recently been proposed for designing the molecular structure
of chemical compounds with a desired chemical property using both artiﬁcial neural
networks and mixed integer linear programming. In the framework, a chemical graph
with a target chemical value is inferred as a feasible solution of a mixed integer linear
program that represents a prediction function and other requirements on the structure
of graphs. In this paper, we propose a procedure for generating other feasible solutions
of the mixed integer linear program by searching the neighbor of output chemical graph
in a search space. The procedure is combined in the framework as a new building block.
The results of our computational experiments suggest that the proposed method can
generate an additional number of new chemical graphs with up to 50 non-hydrogen
atoms.

Keywords: Machine Learning, Integer Programming, Cheminformatics, Materials
Informatics, QSAR/QSPR, Molecular Design.

1

Introduction

Background Analysis of chemical compounds is one of the important applications of intelligent
Indeed, various machine learning methods have been applied to the prediction of
computing.
chemical activities from their structural data, where such a problem is often referred to as quan-
titative structure activity relationship (QSAR) [1, 2]. Recently, neural networks and deep-learning
technologies have extensively been applied to QSAR [3].

In addition to QSAR, extensive studies have been done on inverse quantitative structure ac-
tivity relationship (inverse QSAR), which seeks for chemical structures having desired chemical
activities under some constraints. Since it is diﬃcult to directly handle chemical structures in both
QSAR and inverse QSAR, chemical compounds are usually represented as vectors of real or integer
numbers, which are often called descriptors in chemoinformatics and correspond to feature vectors
in machine learning. One major approach in inverse QSAR is to infer feature vectors from given
chemical activities and constraints and then reconstruct chemical structures from these feature
vectors [4, 5, 6], where chemical structures are usually treated as undirected graphs. However, the
reconstruction itself is a challenging task because the number of possible chemical graphs is huge.
For example, chemical graphs with up to 30 atoms (vertices) C, N, O, and S may exceed 1060 [7].

 
 
 
 
 
 
2LM-M ANN grid search v8 A2: August 24, 2021

2

Indeed, it is NP-hard to infer a chemical graph from a given feature vector except for some simple
cases [8]. Due to this inherent diﬃculty, most existing methods for inverse QSAR do not guarantee
optimal or exact solutions.

As a new approach, extensive studies have recently been done for inverse QSAR using artiﬁcial
neural networks (ANNs), especially using graph convolutional networks [9]. For example, recurrent
neural networks [11, 12], variational autoencoders [10], grammar variational autoencoders [13], gen-
erative adversarial networks [14], and invertible ﬂow models [15, 16] have been applied. However,
these methods do not yet guarantee optimal or exact solutions.

G : class of chemical

  graphs

Stage 1

Stage 5

Stage 2

f : feature 
    function 

  1
*
  2
*

.
.
.

   (cid:842)

f(   *)
i

.
.
.

(cid:842)
f(    )

a: property 
    function 

 RK

x:=f(  )

(cid:66)

(cid:66)
(cid:66)
y*<h(x*)<y*
(cid:66)
x* 

Stage 3
h: prediction 
        function 

R
a(  )
h(x)
(cid:66)
y*,y*
(cid:66)

 input

ANN 

N

Stage 4

s: topological
  specification

   (cid:842)
g  :
(cid:66)
(cid:66)
(cid:66)
no    *    G s.t.  y*<h(f(   *))<y*
(cid:66)

   (cid:842)

x*

deliver

detect

output

C1:

C2:

function

h  
function f
graph constraints

MILP

M(g,x,y;C1,C2)

M(x,y;C1)

M(g,x;C2)

Figure 1: An illustration of a framework for inferring a set of chemical graphs C∗.

Framework Akutsu and Nagamochi [17] proved that the computation process of a given ANN can
be simulated with a mixed integer linear programming (MILP). Based on this, a novel framework
for inferring chemical graphs has been developed and revised [18, 24], as illustrated in Figure 1.
It constructs a prediction function in the ﬁrst phase and infers a chemical graph in the second
phase. The ﬁrst phase of the framework consists of three stages. In Stage 1, we choose a chemical
property π and a class G of graphs, where a property function a is deﬁned so that a(C) is the value
of π for a compound C ∈ G, and collect a data set Dπ of chemical graphs in G such that a(C) is
available for every C ∈ Dπ. In Stage 2, we introduce a feature function f : G → RK for a positive
integer K. In Stage 3, we construct a prediction function η with an ANN N that, given a vector
x ∈ RK, returns a value y = η(x) ∈ R so that η(f (C)) serves as a predicted value to the real value
a(C) of π for each C ∈ Dπ. Given two reals y∗ and y∗ as an interval for a target chemical value,
the second phase infers chemical graphs C∗ with y∗ ≤ η(f (C∗)) ≤ y∗ in the next two stages. We
have obtained a feature function f and a prediction function η and call an additional constraint
on the substructures of target chemical graphs a topological speciﬁcation. In Stage 4, we prepare
the following two MILP formulations:
- MILP M(x, y; C1) with a set C1 of linear constraints on variables x and y (and some other

auxiliary variables) simulates the process of computing y := η(x) from a vector x; and

- MILP M(g, x; C2) with a set C2 of linear constraints on variable x and a variable vector g that
represents a chemical graph C (and some other auxiliary variables) simulates the process of

 
2LM-M ANN grid search v8 A2: August 24, 2021

3

computing x := f (C) from a chemical graph C and chooses a chemical graph C that satisﬁes
the given topological speciﬁcation σ.

Given an interval with boundaries y∗, y∗ ∈ R, we solve the combined MILP M(g, x, y; C1, C2) to ﬁnd
a feature vector x∗ ∈ RK and a chemical graph C† with the speciﬁcation σ such that f (C†) = x∗
and y∗ ≤ η(x∗) ≤ y∗ (where if the MILP instance is infeasible then this suggests that there does
not exist such a desired chemical graph). In Stage 5, we generate other chemical graphs C∗ such
that y∗ ≤ η(f (C∗)) ≤ y∗ based on the output chemical graph C†.

MILP formulations required in Stage 4 have been designed for chemical compounds with cycle
index at most 2 [20]. Afterwards, a modeling of chemical compounds together with an MILP
formulation has been improved so that a chemical compound with any graph structure can treated
(see Shi et al. [22]). Not only ANNs but also other machine learning methods have been used to
construct a prediction function η in Stage 3 recently. Tanaka et al. [23] (resp., Zhu et al. [24])
used a decision tree (resp., linear regression) to construct a prediction function η in Stage 3 in the
framework and derived an MILP M(x, y; C1) that simulates the computation process of a decision
tree (resp., linear regression).
Contribution In the current framework, a chemical graph C† with a desired chemical prop-
erty π in Stage 4 is constructed as a feasible solution of an MILP M(g, x, y; C1, C2) before we
generate isomers C∗ of C† by an algorithm such as the dynamic programming algorithm due to
Azam et al. [19]. In this paper, we design a procedure of generating solutions of the same MILP
as a new building block in Stage 4 of the framework of inferring chemical graphs. When a fea-
sible solution C† of the MILP is constructed in Stage 4, we try to ﬁnd other feasible solutions
C∗ of the same MILP by solving the MILP with additional pmax linear constraints for some in-
teger pmax. For this, we ﬁrst prepare arbitrary linear functions θp : RK → R, p ∈ [1, pmax] and
consider a neighbor of C† deﬁned by a set of chemical graphs C∗ that satisfy linear constraints
δ1 ≤ |θp(f (C∗)) − θp(f (C†))| ≤ δ2, p ∈ [1, pmax] for small reals δ2 > δ1 > 0. By changing the reals
δ2 and δ1 systematically, we can search for new solutions of the same MILP other than C†. As a
candidate for a function θp, we can use a linear prediction function ητ : RK → R for a diﬀerent
chemical property τ such as a function ητ that has been obtained by linear regression. With a
linear prediction function θp = ητ , we can search for other chemical graphs C∗ by specifying a
predicted value of C∗ for the property τ .

We implemented the framework with the new building block based on the two-layered model and
the feature function proposed by Zhu et al. [24]. We used the same MILP M(g, x; C2) formulation
proposed by Zhu et al. [24] and omit the details in this paper. From the results of our computational
experiments, we observe that the proposed method can generate an additional number of chemical
graphs C∗ in Stage 4 with up to 50 non-hydrogen atoms.

The paper is organized as follows. Section 2 introduces some notions on graphs, a modeling of
chemical compounds and a choice of descriptors. Section 3 reviews the two-layered model. Sec-
tion 4 introduces a new method of generating solutions of an MILP in Stage 4. Section 5 reports
the results on computational experiments conducted for 47 chemical properties such as biological
half life and boiling point for monomers and characteristic ratio and refractive index for poly-
mers. Section 6 makes some concluding remarks. Some technical details are given in Appendices:
Appendix A for all descriptors in our feature function; Appendix B for a full description of a topo-

2LM-M ANN grid search v8 A2: August 24, 2021

4

logical speciﬁcation; and Appendix C for the detail of test instances used in our computational
experiment for Stages 4 and 5.

2 Preliminary

This section introduces some notions and terminologies on graphs, modeling of chemical compounds
and our choice of descriptors.

Let R, R+, Z and Z+ denote the sets of reals, non-negative reals, integers and non-negative
integers, respectively. For two integers a and b, let [a, b] denote the set of integers i with a ≤ i ≤ b.
For a vector x ∈ Rp, the j-th entry of x is denoted by x(j).

Graph Given a graph G, let V (G) and E(G) denote the sets of vertices and edges, respectively.
For a subset V ′ ⊆ V (G) (resp., E′ ⊆ E(G)) of a graph G, let G − V ′ (resp., G − E′) denote
the graph obtained from G by removing the vertices in V ′ (resp., the edges in E′), where we
remove all edges incident to a vertex in V ′ in G − V ′. An edge subset E′ ⊆ E(G) in a connected
graph G is called separating (resp., non-separating) if G − E′ becomes disconnected (resp., G − E′
remains connected). The rank r(G) of a graph G is deﬁned to be the minimum |F | of an edge
subset F ⊆ E(G) such that G − F contains no cycle, where r(G) = |E(G)| − |V (G)| + 1 for a
connected graph G. Observe that r(G − E′) = r(G) − |E′| holds for any non-separating edge subset
E′ ⊆ E(G). An edge e ∈ E(G) in a connected graph G is called a bridge if {e} is separating. For
a connected cyclic graph G, an edge e is called a core-edge if it is in a cycle of G or is a bridge
e = u1u2 such that each of the connected graphs Gi, i = 1, 2 of G − e contains a cycle. A vertex
incident to a core-edge is called a core-vertex of G. A path with two end-vertices u and v is called
a u, v-path.

We deﬁne a rooted graph to be a graph with a designated vertex, called a root. For a graph
G possibly with a root, a leaf-vertex is deﬁned to be a non-root vertex with degree 1. We call
the edge uv incident to a leaf vertex v a leaf-edge, and denote by Vleaf(G) and Eleaf (G) the sets of
leaf-vertices and leaf-edges in G, respectively. For a graph or a rooted graph G, we deﬁne graphs
Gi, i ∈ Z+ obtained from G by removing the set of leaf-vertices i times so that

G0 := G; Gi+1 := Gi − Vleaf(Gi),

where we call a vertex v a tree vertex if v ∈ Vleaf(Gi) for some i ≥ 0. Deﬁne the height ht(v) of
each tree vertex v ∈ Vleaf(Gi) to be i; and ht(v) of each non-tree vertex v adjacent to a tree vertex
to be ht(u) + 1 for the maximum ht(u) of a tree vertex u adjacent to v, where we do not deﬁne
height of any non-tree vertex not adjacent to any tree vertex. We call a vertex v with ht(v) = k
a leaf k-branch. The height ht(T ) of a rooted tree T is deﬁned to be the maximum of ht(v) of a
vertex v ∈ V (T ). For an integer k ≥ 0, we call a rooted tree T k-lean if T has at most one leaf
k-branch. For an unrooted cyclic graph G, we regard that the set of non-core-edges in G induces
a collection T of trees each of which is rooted at a core-vertex, where we call G k-lean if each of
the rooted trees in T is k-lean.

2LM-M ANN grid search v8 A2: August 24, 2021

5

2.1 Modeling of Chemical Compounds

We review a modeling of chemical compounds introduced by Zhu et al. [24].

To represent a chemical compound, we introduce a set of chemical elements such as H (hydro-
gen), C (carbon), O (oxygen), N (nitrogen) and so on. To distinguish a chemical element a with
multiple valences such as S (sulfur), we denote a chemical element a with a valence i by a(i), where
we do not use such a suﬃx (i) for a chemical element a with a unique valence. Let Λ be a set
of chemical elements a(i). For example, Λ = {H, C, O, N, P, S(2), S(4), S(6)}. Let val : Λ → [1, 6] be
a valence function. For example, val(H) = 1, val(C) = 4, val(O) = 2, val(P) = 5, val(S(2)) = 2,
val(S(4)) = 4 and val(S(6)) = 6. For each chemical element a ∈ Λ, let mass(a) denote the mass of
a.

A chemical compound is represented by a chemical graph deﬁned to be a tuple C = (H, α, β) of
a simple, connected undirected graph H and functions α : V (H) → Λ and β : E(H) → [1, 3]. The
set of atoms and the set of bonds in the compound are represented by the vertex set V (H) and the
edge set E(H), respectively. The chemical element assigned to a vertex v ∈ V (H) is represented by
α(v) and the bond-multiplicity between two adjacent vertices u, v ∈ V (H) is represented by β(e) of
the edge e = uv ∈ E(H). We say that two tuples (Hi, αi, βi), i = 1, 2 are isomorphic if they admit
an isomorphism φ, i.e., a bijection φ : V (H1) → V (H2) such that uv ∈ E(H1), α1(u) = a, α1(v) =
b, β1(uv) = m ↔ φ(u)φ(v) ∈ E(H2), α2(φ(u)) = a, α2(φ(v)) = b, β2(φ(u)φ(v)) = m. When Hi
is rooted at a vertex ri, i = 1, 2, these chemical graphs (Hi, αi, βi), i = 1, 2 are rooted-isomorphic
(r-isomorphic) if they admit an isomorphism φ such that φ(r1) = r2.

For a notational convenience, we use a function βC : V (H) → [0, 12] for a chemical graph
C = (H, α, β) such that βC(u) means the sum of bond-multiplicities of edges incident to a vertex
u; i.e.,

βC(u) , X

uv∈E(H)

β(uv) for each vertex u ∈ V (H).

For each vertex u ∈ V (H), deﬁne the electron-degree eledegC(u) to be

eledegC(u) , βC(u) − val(α(u)).

For each vertex u ∈ V (H), let degC(v) denote the number of vertices adjacent to u in C.

For a chemical graph C = (H, α, β), let Va(C), a ∈ Λ denote the set of vertices v ∈ V (H)
such that α(v) = a in C and deﬁne the hydrogen-suppressed chemical graph hCi to be the graph
obtained from H by removing all the vertices v ∈ VH(C).

2.2 Evaluating prediction function

We review the deﬁnition of coeﬃcient of determination.

Let D be a data set of chemical graphs C with an observed value a(C) ∈ R, where we denote

by ai = a(Ci) for an indexed graph Ci.

Let f be a feature function that maps a chemical graph C to a vector f (C) ∈ RK where we
denote by xi = f (Ci) for an indexed graph Ci. For a prediction function η : RK → R, deﬁne an
error function

Err(η; D) , X
Ci∈D

(ai − η(f (Ci)))2 = X
Ci∈D

(ai − η(xi))2,

2LM-M ANN grid search v8 A2: August 24, 2021

6

and deﬁne the coeﬃcient of determination R2(η, D) to be

R2(η, D) , 1 −

Err(η; D)
PCi∈D(ai −

a)2 for
e

1
|D| X
C∈D

a =
e

a(C).

-N
u1
u14

C

Pa2

w15
C

w1
C

O
w2

w3
O

S(6)

Pa1
C

C
u13

u3
C

u2
a8
a9
C
u4
u15

w4
C

C

w16

u24

O
Qu5
C
a11
u5
u6

a10

C

a16
N
u8

Pa3

u16
C

a14

a12

u7 u9
C
a13

O

u10
C
a15

w5

C

u27

O

Qu18
C

C
w17

u26
C

u25

u19
C

u17
C

u18

C

Pa4

C
w7

w8

O

w6N

w9
C

a6

C
a17

w12
-
O

w13
C

+
N
u28

C
w19

C
w14

P

O
w11

Qu22

C
u22

u21

C
u12
u11

u20
C

Pa5

C
w10

S(2)

u23

C
w18

Figure 2: An illustration of a hydrogen-suppressed chemical graph hCi obtained from a chemical
graph C with r(C) = 4 by removing all the hydrogens, where for ρ = 2, V ex(C) = {wi | i ∈ [1, 19]}
and V int(C) = {ui | i ∈ [1, 28]}.

3 Two-layered Model

This section reviews the two-layered model introduced by Zhu et al. [24].

Let C = (H, α, β) be a chemical graph and ρ ≥ 1 be an integer, which we call a branch-

parameter.

A two-layered model of C is a partition of the hydrogen-suppressed chemical graph hCi into
an “interior” and an “exterior” in the following way. We call a vertex v ∈ V (hCi) (resp., an edge
e ∈ E(hCi)) of C an exterior-vertex (resp., exterior-edge) if ht(v) < ρ (resp., e is incident to an
exterior-vertex) and denote the sets of exterior-vertices and exterior-edges by V ex(C) and Eex(C),
respectively and denote V int(C) = V (hCi) \ V ex(C) and Eint(C) = E(hCi) \ Eex(C), respectively.
We call a vertex in V int(C) (resp., an edge in Eint(C)) an interior-vertex (resp., interior-edge).
The set Eex(C) of exterior-edges forms a collection of connected graphs each of which is regarded
as a rooted tree T rooted at the vertex v ∈ V (T ) with the maximum ht(v). Let T ex(hCi) denote
the set of these chemical rooted trees in hCi. The interior Cint of C is deﬁned to be the subgraph
(V int(C), Eint(C)) of hCi.

Figure 2 illustrates an example of a hydrogen-suppressed chemical graph hCi. For a branch-
parameter ρ = 2, the interior of the chemical graph hCi in Figure 2 is obtained by removing the set
of vertices with degree 1 ρ = 2 times; i.e., ﬁrst remove the set V1 = {w1, w2, . . . , w14} of vertices of
degree 1 in hCi and then remove the set V2 = {w15, w16, . . . , w19} of vertices of degree 1 in hCi − V1,
where the removed vertices become the exterior-vertices of hCi.

2LM-M ANN grid search v8 A2: August 24, 2021

7

For each interior-vertex u ∈ V int(C), let Tu ∈ T ex(hCi) denote the chemical tree rooted at u
(where possibly Tu consists of vertex u) and deﬁne the ρ-fringe-tree C[u] to be the chemical rooted
tree obtained from Tu by putting back the hydrogens originally attached with Tu in C. Let T (C)
denote the set of ρ-fringe-trees C[u], u ∈ V int(C). Figure 3 illustrates the set T (C) = {C[ui] | i ∈
[1, 28]} of the 2-fringe-trees of the example C with hCi in Figure 2.

-

N
 [u1]
y4

C

C

C

C

H H
 [u2]
y11

H

H
 [u3]  [u4]
y6
y6

H
 [u5]
y6

C
 [u6]
y1

C
 [u7]
y1

N

H
 [u8]
y8

O
 [u9]
y2

C

H
 [u10]
y6

C
 [u11]
y1

C

C

C

C

C

P

C

H H
 [u16]
y11

H H
 [u17]
y11

 [u18]
y1

H
 [u19]
y6

H H
 [u20]
y11

O
C
 [u21]
y23

H
 [u22]
y6

S(2)

C

O

C

O
C
 [u23]
y26

C
 [u24]
y24

C

C

H

C
 [u12]
y15

H H
 [u13]
y11

C

C

C

C

H

O
C
 [u14]
y27

O

S(6)

H H

O
 [u15]
y19

+

N

O-

C

H
 [u25]
y6

H
 [u26]
y6

C

C
N
 [u27]
y25

C

C
 [u28]
y30

Figure 3: The set T (C) of 2-fringe-trees C[ui], i ∈ [1, 28] of the example C with hCi in Figure 2,
where the root of each tree is depicted with a gray circle and the hydrogens attached to non-root
vertices are omitted in the ﬁgure.

Feature Function The feature of an interior-edge e = uv ∈ Eint(C) such that α(u) = a,
deghCi(u) = d, α(v) = b, deghCi(v) = d′ and β(e) = m is represented by a tuple (ad, bd′, m), which
is called the edge-conﬁguration of the edge e, where we call the tuple (a, b, m) the adjacency-
conﬁguration of the edge e.

For an integer K, a feature vector f (C) of a chemical graph C is deﬁned by a feature function

f that consists of K descriptors. We call RK the feature space.

Tanaka et al. [23] deﬁned a feature vector f (C) ∈ RK to be a combination of the frequency of
edge-conﬁgurations of the interior-edges and the frequency of chemical rooted trees among the set
of chemical rooted trees C[u] over all interior-vertices u.
Topological Speciﬁcation A topological speciﬁcation is described as a set of the following rules
proposed by Shi et al. [22] and modiﬁed by Tanaka et al. [23]:

(i) a seed graph GC as an abstract form of a target chemical graph C;
(ii) a set F of chemical rooted trees as candidates for a tree C[u] rooted at each interior-vertex

u in C; and

(iii) lower and upper bounds on the number of components in a target chemical graph such as

chemical elements, double/triple bonds and the interior-vertices in C.

Figure 4(a) and (b) illustrate examples of a seed graph GC and a set F of chemical rooted
trees, respectively. Given a seed graph GC, the interior of a target chemical graph C is constructed
from GC by replacing some edges a = uv with paths Pa between the end-vertices u and v and by
attaching new paths Qv to some vertices v. For example, a chemical graph C with hCi in Figure 2
is constructed from the seed graph GC in Figure 4(a) as follows.

2LM-M ANN grid search v8 A2: August 24, 2021

8

u1

a2

a1

a8
u3

u2

a9

u4
a10

a12

a3

a7

a11
u6

u7
a13

: E(＞2)={a1,a2,...,a5}

- 

: E(＞1)={a6}

- 

: E(0/1)={a7} 

: E(=1)={a8,a9,...,a17}

u5

a16
u8

u9

u10
a15

a14

a4

a17

u12

a5

a6

u11

u23

(a) A seed graph GC=(VC,EC) 

C

O

N

y1

y2

y3

-

N

y4

+

N

y5

C

O

N

S(2)

P

C

N

S(6)

P

H
y6

H
y7

H
y8

H
y9

H
y10

N

H H
H H
y11 y12
C

H H
y13

H H
y14
P

C

C

C

C

S(6)

C

H

C
y15

O

C

H H

C
y16

O

C

H H

C
y17

O
y18

O
y19

C
C
y20

C

C
y21

S(2)

C

C

C

H

C

C

H H

O
y22

C

C

C

O
y23

+

N

N

C

C

O-

C
y24

C

N
y25

C

C

C

O

O

C
y29
y26
(b) A set      of chemical rooted trees 

O
y28

y27

C

C

C
y30

Figure 4: (a) An illustration of a seed graph GC with r(GC) = 5, where the vertices in VC are
depicted with gray circles, the edges in E(≥2) are depicted with dotted lines, the edges in E(≥1) are
depicted with dashed lines, the edges in E(0/1) are depicted with gray bold lines and the edges in
E(=1) are depicted with black solid lines; (b) A set F = {ψ1, ψ2, . . . , ψ30} ⊆ F (Dπ) of 30 chemical
rooted trees ψi, i ∈ [1, 30], where the root of each tree is depicted with a gray circle, where the
hydrogens attached to non-root vertices are omitted in the ﬁgure.

- First replace ﬁve edges a1 = u1u2, a2 = u1u3, a3 = u4u7, a4 = u10u11 and a5 = u11u12 in
GC with new paths Pa1 = (u1, u13, u2), Pa2 = (u1, u14, u3), Pa3 = (u4, u15, u16, u7), Pa4 =
(u10, u17, u18, u19, u11) and Pa5 = (u11, u20, u21, u22, u12), respectively to obtain a subgraph G1
of hCi.

- Next attach to this graph G1 three new paths Qu5 = (u5, u24), Qu18 = (u18, u25, u26, u27) and

Qu22 = (u22, u28) to obtain the interior of hCi in Figure 2.

- Finally attach to the interior 28 trees selected from the set F and assign chemical elements
and bond-multiplicities in the interior to obtain a chemical graph C with hCi in Figure 2. In
Figure 3, ψ1 ∈ F is selected for C[ui], i ∈ {6, 7, 11}. Similarly ψ2 for C[u9], ψ4 for C[u1], ψ6
for C[ui], i ∈ {3, 4, 5, 10, 19, 22, 25, 26}, ψ8 for C[u8], ψ11 for C[ui], i ∈ {2, 13, 16, 17, 20}, ψ15 for
C[u12], ψ19 for C[u15], ψ23 for C[u21], ψ24 for C[u24], ψ25 for C[u27], ψ26 for C[u23], ψ27 for C[u14]
and ψ30 for C[u28].
Our deﬁnition of a topological speciﬁcation is analogous with the one by Tanaka et al. [23] except
for a necessary modiﬁcation due to the introduction of multiple valences of chemical elements,
cations and anions (see Appendix B for a full description of topological speciﬁcation).

4 Grid Neighbor Search

This section introduces a procedure of generating solutions of an MILP as a new building block of
the framework of inferring chemical graphs.

For a notational convenience, let (x, 1) for a vector x ∈ RK denote the vector y ∈ RK+1 such

2LM-M ANN grid search v8 A2: August 24, 2021

9

that y(j) = x(j), j ∈ [1, K] and y(K + 1) = 1.

Choose an integer pmax ≥ 1 as the dimension of a search space Rpmax, a vector s∗ ∈ Rpmax as
the center of Rpmax and a vector δ ∈ Rpmax
+ with δ(p) > 0, p ∈ [1, pmax] as the width of a grid in the
space Rpmax. A grid is deﬁned to be an integer vector z ∈ Zpmax for which we deﬁne a subspace
S(z) ⊆ Rpmax to be

S(z) , {s ∈ Rpmax | s∗(p) + (z(p) − 0.5)δ(p) ≤ s(p) ≤ s∗(p) + (z(p) + 0.5)δ(p), p ∈ [1, pmax]}.

We call a grid z ∈ Zpmax with z(p) = 0, p ∈ [1, pmax] the center grid. A neighbor N(r) of the center
with a radius vector r ∈ Zpmax

is deﬁned to be a set of grids such that

+

N(r) , {z ∈ Zpmax | −r(p) ≤ z(p) ≤ r(p), p ∈ [1, pmax]}.

Let us introduce a partial order (cid:22) over the set Zpmax of grids. For two grids z, z′ ∈ Zpmax, z′ (cid:22) z if
0 ≤ z′(p) ≤ z(p) or 0 ≥ z′(p) ≥ z(p) for each p ∈ [1, pmax], where we let z′ ≺ z mean that z′ (cid:22) z
and z′ 6= z.

We introduce a linear function θp : RK → R for each p ∈ [1, pmax], called a projection function

such that

θp(x) , wp · (x, 1) = X

wp(j)x(j) + wp(K + 1)

j∈[1,K]
by choosing a vector wp ∈ RK+1. For a notational convenience, let θ(x), x ∈ RK denote the vector
(θ1(x), θ2(x), . . . , θpmax(x)) ∈ Rpmax.

In the framework of inferring chemical graphs, we formulate an MILP M(g, x, y; C1, C2) that
consists of two MILPs M(x, y; C1) and M(g, x; C2), where the former simulates the computation
process of a prediction function η for a chemical property π and the latter simulates the computa-
tion process of a feature function f and describes construction of a chemical graph that satisﬁes
a given topological speciﬁcation σ. By solving the MILP for lower and upper bounds on a target
value of π, we obtain a desired chemical graph C† when the MILP instance is feasible (or we detect
that there is no such chemical graph when the instance is infeasible).

We design a procedure for ﬁnding other solutions of the MILP by searching the neighbor of the
output chemical graph C†. Suppose that we have chosen a dimension pmax, a width vector δ ∈ Rpmax
with δ(p) > 0, p ∈ [1, pmax], a radius vector r ∈ Zpmax

+
and projection functions θp, p ∈ [1, pmax].

+

1. Let y∗ and y∗ be lower and upper bounds on the value of property π of a chemical graph to
be inferred. We ﬁrst solve M(g, x, y; C1, C2) with the input values (y∗, y∗) to ﬁnd a desired
chemical graph C†. (When the MILP instance is infeasible, we halt.) Let x∗ := f (C†) ∈ RK.

2. Set the center of the space Rpmax to be s∗ := θ(x∗). For each grid z ∈ N(r), we solve an
MILP M(g, x, y; C1, C2) with an additional linear constraint θ(x) ∈ S(z) for (y∗, y∗), where
we call a grid z feasible (resp., infeasible) if the augmented MILP instance is feasible (resp.,
infeasible).

3. For each feasible grid z ∈ N(r), output a feasible solution C†

z of the augmented MILP in-

stance. We check the feasibility of grids z ∈ N(r) in a non-decreasing order of maxp∈[1,pmax] |z(p)|,

2LM-M ANN grid search v8 A2: August 24, 2021

10

and discard any grid z ∈ N(r) without testing the feasibility of z if we ﬁnd an infeasible
z and C†
grid z′ ∈ N(r) with z′ ≺ z. Note that C†
z)) and
θ(f (C†

z′)) happen to belong to the common boundary S(z) ∩ S(z′).

z′ are not isomorphic unless θ(f (C†

In the above method, we can choose arbitrarily many grids in the space of Rpmax around the
center s∗ by choosing small δ(p) and large r(p), p ∈ [1, pmax], where each δ(p) needs to be large
enough to avoid a possible numerical error.

We can also choose arbitrary linear functions as projection functions θp, p ∈ [1, pmax]. When
we have constructed a prediction function ητ as a linear function with linear regression for several
chemical properties τ other than the current target property π, we can use such functions as
projection functions. For example, if a linear prediction function ητ is available for a chemical
property τ such as solubility (Sl) and lipophilicity (Lp), then we can infer chemical graphs C†
z
with slightly diﬀerent values of these properties τ1 = Sl and τ2 = Lp by setting θp := ητp, p = 1, 2.

5 Results

We implemented our method of Stages 1 to 5 for inferring chemical graphs under a given topological
speciﬁcation and conducted experiments to evaluate the computational eﬃciency. We executed
the experiments on a PC with Processor: Core i7-9700 (3.0GHz; 4.7 GHz at the maximum) and
Memory: 16 GB RAM DDR4. To construct an ANN, we used scikit-learn version 0.23.2 with
Python 3.8.5, MLPRegressor and ReLU activation function.

Results on Phase 1. We implemented Stages 1, 2 and 3 in Phase 1 as follows.

We have conducted experiments of Lasso linear regression and for 37 chemical properties of
monomers (resp., ten chemical properties of polymers) using the same feature function in this
paper and we found that the test coeﬃcient of determination R2 exceeds 0.927 for the following
11 properties of monomers: octanol/water partition coeﬃcient (Kow), heat of combustion (Hc),
vapor density (Vd), electron density on the most positive atom (EDPA), heat of atomization
(Ha), heat of formation (Hf), internal energy at 0K (U0), isotropic polarizability (Alpha), heat
capacity at 298.15K (Cv), isobaric heat capacities in liquid phase (IhcLiq) and isobaric heat
capacities in solid phase (IhcSol) (see [24] for the details) and that the test coeﬃcient of deter-
mination R2 exceeds 0.9 for the following ﬁve properties of polymers: experimental amorphous
density (AmD), heat capacity liquid (HcL), heat capacity solid (HcS), mol volume (MlV) and
glass transition (Tg) (see [25] for the details). We excluded the above properties in our experiment
of constructing prediction functions with ANNs.

We have conducted experiments of ANNs for the rest of 26 chemical properties of monomers
(resp., ﬁve chemical properties of polymers) among which we report the following 12 properties
of monomers (resp., two properties of polymers) to which the test coeﬃcient of determination
R2 by ANNs is better than that by Lasso linear regression: biological half life (BHL), boiling
point (Bp), critical pressure (Cp), dissociation constants (Dc), ﬂash point (Fp), Kovats retention
index (Kov), lipophilicity (Lp), energy of lowest unoccupied molecular orbital (Lumo), optical
rotation (OptR), solubility (Sl), surface tension (SfT) and viscosity (Vis) (resp., characteristic
ratio (ChaR) and refractive index (RfId)). We explain the data set and the results for these 14
properties in detail below.

2LM-M ANN grid search v8 A2: August 24, 2021

11

We used data sets of monomers provided by HSDB from PubChem [26] for BHL, Cp, Dc,
Fp and OptR, M. Jalali-Heravi and M. Fatemi [27] for Kov, Roy and Saha [28] for Bp, Molecu-
leNet [34] for Lumo, Goussardet al. [30] for SfT, Goussard et al. [31] for Vis and Figshare [33]
for Lp. Property Lumo has the original data set D∗ with more than 130,000 compounds, and we
used a set Dπ of 1,000 graphs randomly selected from D∗ as a data set of property Lumo in this
experiment.

We used data sets of polymers provided by Bicerano [35], where we did not include any polymer
whose chemical formula could not be found by its name in the book. For property ChaR (resp.,
RfId), we remove the following polymer as an outlier from the original data set:
ethyleneTerephthalate, oxy(2-methyl-6-phenyl-1 4-phenylene) and N-vinylCarbazole (resp., 2-decyl-
1 4-butadiene).

Stage 1. We set a graph class G to be the set of all chemical graphs with any graph structure,
and set a branch-parameter ρ to be 2.

For each of the properties, we ﬁrst select a set Λ of chemical elements and then collect a data
set Dπ on chemical graphs over the set Λ of chemical elements. To construct the data set Dπ, we
eliminated chemical compounds that do not satisfy one of the following: the graph is connected,
the number of carbon atoms is at least four, and the number of non-hydrogen neighbors of each
atom is at most 4.

Stage 2. We used the new feature function deﬁned in our chemical model without suppressing
hydrogen (see Appendix A for the detail). We normalize the range of each descriptor and the
range {t ∈ R | a ≤ t ≤ a} of property values a(C), C ∈ Dπ.

Table 1 shows the size and range of data sets that we prepared for each chemical property in

Stages 1 and 2, where we denote the following:
- Λ: the set of elements used in the data set Dπ; Λ is one of the following nine sets: Λ1 = {H, C, O};
Λ2 = {H, C, O, N}; Λ3 = {H, C, O, Si(4)}; Λ4 = {H, C, O, N, S(2), F}; Λ5 = {H, C, O, N, Cl, Pb}; Λ6 =
{H, C, O, N, S(2), S(6), Cl}; Λ7 = {H, C, O, N, S(2), S(4), S(6), Cl}; Λ8 = {H, C(2), C(3), C(4), C(5), O, N(1), N(2),
N(3), F}; Λ9 = {H, C, O(1), O(2), N}; Λ10 = {H, C, O, N, Si(4), Cl, Br}; Λ11 = {H, C, O(1), O(2), N, Si(4), Cl, F};
and Λ12 = {H, C, O(1), O(2), N, Si(4), Cl, F, S(2), S(6), Br}, where a(i) for a chemical element a and an
integer i ≥ 1 means that a chemical element a with valence i.

- |Dπ|: the size of data set Dπ over Λ for the property π.
- n, n: the minimum and maximum values of the number n(C) of non-hydrogen atoms in the

compounds C in Dπ.

- a, a: the minimum and maximum values of a(C) for π over the compounds C in Dπ.
- |Γ|: the number of diﬀerent edge-conﬁgurations of interior-edges over the compounds in Dπ.
- |F |: the number of non-isomorphic chemical rooted trees in the set of all 2-fringe-trees in the

compounds in Dπ.

- K: the number of descriptors in the original feature vector f (C).

Stage 3. For each chemical property π, we conducted a preliminary experiment to choose the
following: a subset Sπ of the original set of K descriptors; an architecture Aπ with at most ﬁve
π and itestp
π ≤ 1; and an integer itestp
hidden layers; a nonnegative real ρstp
π
as parameters to execute an early stopping in constructing a prediction function with a training
data set. Let fπ denote the feature vector that consists of the descriptors in the set Sπ.

π , where we will use ρstp

2LM-M ANN grid search v8 A2: August 24, 2021

12

π , k ∈ [1, 5] randomly. For each k ∈ [1, 5], use the set Dtrain := Dπ \ D(k)
π

For each property π, we conducted ten 5-fold cross-validations. In a 5-fold cross-validation,
we construct ﬁve prediction functions η(k), k ∈ [1, 5] as follows. Partition data set Dπ into ﬁve
subsets D(k)
as a
training set and construct an ANN on the selected architecture Aπ with the feature vector fπ
by the MLPRegressor of scikit-learn, where we stop updating weights/biases on Aπ during
an execution of the iterative algorithm when the coeﬃcient of determination R2(η, Dtrain) of the
prediction function η by the current weights/biases exceeds ρstp
(where we terminate the execution
π
when the number of iterations exceeds 1.5 × itestp
π ). Set η(k)
to be the prediction function η by the resulting weights/biases on Aπ. We evaluate the performance
of the prediction function η(k) with the coeﬃcient R2(η(k), Dtest) of determination for the test set
Dtest := D(k)
π . The running time per trial in a cross-validation was at most 8.4 seconds.

π even if R2(η, Dtrain) does not reach ρstp

Table 1: Results of Stages 1 and 2 in Phase 1.

π
BHL
BHL
Bp
Bp
Cp
Cp
Dc
Dc
Fp
Fp
Kov
Lp
Lp

Λ
Λ2
Λ7
Λ2
Λ6
Λ2
Λ5
Λ2
Λ6
Λ2
Λ6
Λ1
Λ2
Λ7
Lumo Λ8
OptR Λ2
OptR Λ4
Λ2
Λ7
Λ3
Λ3
ChaR Λ2
ChaR Λ10
RfId
Λ9
RfId Λ11
RfId Λ12

Sl
Sl
SfT
Vis

|Dπ|
300
514
370
444
125
131
141
161
368
424
52
615
936
977
147
157
673
915
247
282
27
32
91
124
134

n, n
5, 36
5, 36
4, 67
4, 67
4, 63
4, 63
5, 44
5, 44
4, 67
4, 67
11, 16
6, 60
6, 74
6, 9
5, 44
5, 69
4, 55
4, 55
5, 33
5, 36
4, 18
4, 18
4, 29
4, 29
4, 29

a, a
0.03, 732.99
0.03, 732.99
-11.7, 470.0
-11.7, 470.0
4.7×10−6, 5.52
4.7×10−6, 5.52
0.5, 17.11
0.5, 17.11
-82.99, 300.0
-82.99, 300.0
1422.0, 1919.0
-3.62, 6.84
-3.62, 6.84
-0.1144, 0.1026
-117.0, 165.0
-117.0, 165.0
-9.332, 1.11
-11.6, 1.11
12.3, 45.1
-0.64, 1.63
5.5, 13.2
5.5, 13.2
1.339, 1.683
1.339, 1.683
1.339, 1.71

|Γ|
20
26
22
26
8
8
20
25
20
25
9
32
44
59
21
25
27
42
11
12
22
26
26
32
38

|F | K
120
70
166
101
184
130
230
163
112
75
119
79
111
62
130
69
183
131
229
161
64
33
186
116
231
136
297
190
107
55
123
62
217
154
300
207
128
91
126
88
67
17
82
21
96
35
124
50
144
56

Table 2 shows the results on Stage 3, where we denote the following:

2LM-M ANN grid search v8 A2: August 24, 2021

13

Table 2: Results of Stage 3 in Phase 1.

|Dπ|
π
BHL
300
BHL
514
Bp
370
Bp
444
Cp
125
Cp
131
Dc
141
Dc
161
Fp
368
Fp
424
Kov
52
Lp
615
Lp
936
Lumo
977
OptR 147
OptR 157
673
915
247
282
27
32
91
124
134

Sl
Sl
SfT
Vis
ChaR
ChaR
RfId
RfId
RfId

Aπ
(108, 64, 64, 64, 64, 64, 1)
(46, 10, 8, 1)
(71, 28, 22, 17, 13, 10, 1)

(19, 10, 10, 10, 1)
(19, 10, 10, 10, 1)
(53, 10, 8, 1)
(109, 87, 87, 87, 87, 1)
(30, 10, 10, 10, 10, 10, 1)
(42, 16, 16, 16, 16, 1)
(28, 10, 10, 1)
(186, 74, 74, 74, 74, 74, 1)

ρstp
π
0.86
0.71
0.93
(225, 135, 135, 135, 135, 135, 1) 0.98
0.66
0.66
0.93
0.94
0.88
0.90
0.92
0.98
(197, 157, 157, 157, 157, 157, 1) 0.81
(241, 192, 192, 192, 192, 192, 1) 0.99
0.97
0.96
0.94
0.95
0.91
0.97
0.98
0.90
0.95
0.90
0.94

(107, 64, 51, 40, 32, 1)
(114, 20, 10, 1)
(205, 10, 5, 1)
(126, 25, 25, 25, 1)
(19, 15, 12, 9, 1)
(19, 11, 8, 6, 5, 1)
(38, 22, 22, 22, 22, 22, 1)
(38, 15, 15, 15, 1)
(31, 18, 14, 11, 8, 6, 1)
(60, 48, 38, 30, 24, 1)
(53, 42, 33, 26, 1)

ANN R2 LLR R2
0.364
0.483
0.599
0.663
0.445
0.556
0.489
0.574
0.589
0.571
0.677
0.856
0.840
0.841
0.823
0.825
0.772
0.808
0.804
0.893
0.431
0.235
0.852
0.832
0.832

0.630
0.622
0.765
0.720
0.694
0.727
0.651
0.622
0.746
0.733
0.727
0.867
0.859
0.860
0.919
0.894
0.819
0.822
0.834
0.929
0.641
0.622
0.871
0.891
0.866

- Aπ: an architecture Aπ used to construct a prediction function for property π, where (K ′, p1, p2,
. . . , pℓ, 1) means an architecture with an input layer with K ′ nodes, ℓ hidden layers with pi, i ∈
[1, ℓ] nodes and an output layer with a single node, where K ′ is the size |Sπ| of the set Sπ of
selected descriptors from the original set of K descriptors.
π : a nonnegative real with 0 ≤ ρstp
a prediction function with a training data set.

π ≤ 1 by which we execute an early stopping in constructing

- ρstp

- ANN R2: the median of test R2 over all 50 trials in ten 5-fold cross-validations for prediction

functions constructed with ANNs in this paper.

- LLR R2: the median of test R2 over all 50 trials in ten 5-fold cross-validations for prediction

functions constructed with Lasso linear regression [24].

Results on Phase 2. To execute Stages 4 and 5 in Phase 2, we used a set of seven instances Ia,
I i
b, i ∈ [1, 4], Ic and Id based on the seed graphs prepared by Zhu et al. [24]. We here present their

2LM-M ANN grid search v8 A2: August 24, 2021

14

seed graphs GC (see Appendix B for the details of Ia and Appendix C for the details of I i
Ic and Id).

b, i ∈ [1, 4],

The seed graph GC of Ia is given by the graph in Figure 4(a). The seed graph G1

C of I 1

b (resp.,

Gi

C, i = 2, 3, 4 of I i

b, i = 2, 3, 4) is illustrated in Figure 5.

u1

a1

a2

1
(i) GC

u2

u1

a1

a4

a3

u2

u3

2
(ii) GC

a2

a5

u4

u1

a1

a4

a2

a3

u3

u2

3
(iii) GC

u4

u1

a5

a4

a1

a2

a3

u3
u2
4
(iv) GC

u4

a5

Figure 5: (i) Seed graph G1
(iv) Seed graph G4

C for I 4
b.

C for I 1

b and Id; (ii) Seed graph G2

C for I 2

b; (iii) Seed graph G3

C for I 3
b;

Instance Ic has been introduced in order to infer a chemical graph C† such that the core of C†
is equal to the core of chemical graph CA: CID 24822711 in Figure 6(a) and the frequency of each
edge-conﬁguration in the non-core of C† is equal to that of chemical graph CB: CID 59170444 in
Figure 6(b). This means that the seed graph GC of Ic is the core of CA which is indicated by a
shaded area in Figure 6(a).

Instance Id has been introduced in order to infer a chemical monocyclic graph C† such that the
frequency vector of edge-conﬁgurations in C† is a vector obtained by merging those of chemical
graphs CA: CID 10076784 and CB: CID 44340250 in Figure 6(c) and (d), respectively. The seed
graph GC of Id is given by G1

C in Figure 5(i).

Stage 4. We executed Stage 4 for three properties π ∈ {FP, OptR, SfT}.

For the MILP formulation M(x, y; C1), we use the prediction function that attained the median
test R2 in Table 2. To solve an MILP in Stage 4, we used CPLEX version 12.10. Tables 3 and 5 show
the computational results of the experiment in Stage 4 for the ﬁve properties, where we denote
the following:
- nLB: a lower bound on the number of non-hydrogen atoms in a chemical graph C to be inferred;
lower and upper bounds y∗, y∗ ∈ R on the value a(C) of a chemical graph C to be
- y∗, y∗:

inferred;

- #v (resp., #c): the number of variables (resp., constraints) in the MILP in Stage 4;
- I-time: the time (sec.) to solve the MILP in Stage 4;
- n: the number n(C†) of non-hydrogen atoms in the chemical graph C† inferred in Stage 4;
- nint: the number nint(C†) of interior-vertices in the chemical graph C† inferred in Stage 4; and
- η: the predicted property value η(f (C†)) of the chemical graph C† inferred in Stage 4.

Figure 7(a) illustrates the chemical graph C† inferred from Ia with (y∗, y∗) = (130, 133) of Fp

in Table 3.

Figure 7(b) illustrates the chemical graph C† inferred from I 2

b with (y∗, y∗) = (50, 52) of OptR

in Table 4.

Figure 7(c) illustrates the chemical graph C† inferred from Ic with (y∗, y∗) = (44, 45) of SfT

in Table 5.

2LM-M ANN grid search v8 A2: August 24, 2021

15

(a)    A: CID 24822711

(b)    B: CID 59170444

(c)    A: CID 10076784

(d)    B: CID 44340250

Figure 6: An illustration of chemical compounds for instances Ic and Id: (a) CA: CID 24822711;
(b) CB: CID 59170444; (c) CA: CID 10076784; (d) CB: CID 44340250, where hydrogens are
omitted.

Table 3: Results of Stages 4 and 5 for Fp.

inst. nLB
Ia
30
I 1
10
b
I 2
20
b
I 3
30
b
I 4
40
b
Ic
40
Id
40

y∗, y∗
130, 133
110, 113
215, 218
110, 113
137, 140
150, 153
-63, -61

#v
10877
10773
13217
12993
12767
7900
6507

#c
10604
8255
11366
11346
11324
8629
8106

I-time n nint
25
42
13.7
7
10
1.99
25
49
44.1
30
48
43.6
25
44
148.0
34
50
4.38
23
45
33.2

η
132.827
112.428
217.597
110.193
138.116
151.133
-61.733

D-time C-LB #C
1
0.0703
2
0.0234
100
0.594
100
17.2
100
0.16
1
0.0197
100
251.0

1
2
1.9E4
2.4E7
948
1
4.9E9

In this experiment, we prepared several diﬀerent types of instances: instances Ia and Ic have
restricted seed graphs, the other instances have abstract seed graphs and instances Ic and Id have

2LM-M ANN grid search v8 A2: August 24, 2021

16

Table 4: Results of Stages 4 and 5 for OptR.

inst. nLB
Ia
30
I 1
10
b
I 2
20
b
I 3
30
b
I 4
40
b
Ic
40
Id
40

y∗, y∗
81, 83
-78, -76
50, 52
30, 32
116, 118
-30, -28
40, 42

#v
10036
10570
12952
12722
12491
7885
6495

#c
10396
8128
11231
11201
11171
8493
7976

I-time n nint
26
47
4.32
15
19
103.52
25
49
41.2
25
50
37.3
25
49
17.7
33
49
4.84
23
40
10.5

η
81.587
-78.0
51.452
31.261
117.918
-29.163
40.152

D-time C-LB #C
2
0.066
60
0.176
100
0.21
100
0.186
100
0.883
1
0.0159
100
2.52

2
60
1616
210
3.7E4
1
7.3E5

Table 5: Results of Stages 4 and 5 for SfT.

inst. nLB
Ia
30
I 1
10
b
I 2
20
b
I 3
30
b
I 4
40
b
Ic
40
Id
40

y∗, y∗ #v
9288
40, 41
7965
28, 29
9583
42, 43
9326
36, 37
9069
43, 44
7777
44, 45
6385
39, 40

#c
10207
7599
10719
10700
10682
8378
7857

I-time n nint
22
41
2.10
5
11
2.28
25
48
12.0
25
42
9.87
25
46
13.4
32
45
4.37
23
44
6.72

η
40.231
28.488
42.998
36.358
43.857
44.557
39.55

D-time C-LB #C
1
0.0638
0.00927
1
100
0.163
100
9.39
100
0.123
1
0.0158
100
29.9

1
1
200
9.2E4
116
1
2.8E7

(a)

(b)

(c)

Figure 7: (a) C† with η(f (C†)) = 132.827 inferred from Ia with (y∗, y∗) = (137, 140) of Fp; (b)
C† with η(f (C†)) = 51.452 inferred from I 2
b with (y∗, y∗) = (50, 52) of OptR; and (c) C† with
η(f (C†)) = 44.557 inferred from Ic with (y∗, y∗) = (44, 45) of SfT.

restricted set of fringe-trees. From Tables 3 and 5, we observe that an instance with a large number
of variables and constraints takes more running time than those with a smaller size in general. All

2LM-M ANN grid search v8 A2: August 24, 2021

17

instances in this experiment are solved in a few seconds to around 150 seconds with our MILP
formulation.
Stage 5. We executed Stage 5 to generate a more number of target chemical graphs C∗, where
we call a chemical graph C∗ a chemical isomer of a target chemical graph C† of a topological
speciﬁcation σ if f (C∗) = f (C†) and C∗ also satisﬁes the same topological speciﬁcation σ. We
computed chemical isomers C∗ of each target chemical graph C† inferred in Stage 4. We execute
an algorithm for generating chemical isomers of C† up to 100 when the number of all chemical
isomers exceeds 100. For this, we use a dynamic programming dynamic programming [24]. The
algorithm ﬁrst decomposes C† into a set of acyclic chemical graphs, next replaces each acyclic
chemical graph T with another acyclic chemical graph T ′ that admits the same feature vector as
that of T and ﬁnally assembles the resulting acyclic chemical graphs into a chemical isomer C∗
of C†. The algorithm can compute a lower bound on the total number of all chemical isomers C†
without generating all of them.

Tables 3 and 5 show the computational results of the experiment in Stage 5 for the ﬁve prop-

erties, where we denote the following:
- D-time: the running time (sec.) to execute the dynamic programming algorithm in Stage 5 to
compute a lower bound on the number of all chemical isomers C∗ of C† and generate all (or up
to 100) chemical isomers C∗;

- C-LB: a lower bound on the number of all chemical isomers C∗ of C†, where aEb means a ×

10b; and

- #C: the number of all (or up to 100) chemical isomers C∗ of C† generated in Stage 5.

From Tables 3 and 5, we observe the running time and the number of generated isomers in
Stage 5. The chemical graph C† in Ib3 and Id admits a large number of chemical isomers C∗ in some
cases, where a lower bound C-LB on the number of chemical isomers is derived without generating
all of them. For the other instances, the running time for generating up to 100 target chemical
graphs in Stage 5 is less than one second. For some chemical graph C†, no chemical isomer was
found by our algorithm. This is because each acyclic chemical graph in the decomposition of C†
has no alternative acyclic chemical graph than the original one. For such an instance, we generate
other desired chemical graphs by applying our new method of grid neighbor search.

Grid Neighbor Search. As a new building block of the framework of inferring chemical graphs,
we conducted an experiment of applying our grid neighbor search to generate other solutions of
an MILP in Stage 4. We select the MILP such that a solution C† of the MILP admits at most
two isomers C∗ in Stage 5; i.e., Ia with properties Fp, OptR and SfT; I 1
b with properties Fp
and SfT; and Ic with properties Fp, OptR and SfT. In this experiment, we set pmax := 2,
δ := (0.1, 0.1), r := (3, 3) and projection functions θ1 and θ2 to be linear prediction functions
for properties solubility (Sl) and lipophilicity (Lp), respectively, constructed by Zhu et al. [24].
The number of non-center grids in the neighbor N(r) is 7 × 7 − 1 = 48, where the center grid
z = (0, 0) is always feasible for the selected instances. For each instance, we check the feasibility
of grids z ∈ N(r) in a non-decreasing order of maxp∈[1,pmax] |z(p)|. For each feasible grid z ∈ N(r),
output a feasible solution C†
z of the augmented MILP instance. We set a time limit for checking
the feasibility of a grid to be 300 seconds, and we skip a grid when the corresponding MILP is not
solved within the time limit. We also discard any grid z ∈ N(r) without testing the feasibility of

2LM-M ANN grid search v8 A2: August 24, 2021

18

z if we ﬁnd an infeasible grid z′ ∈ N(r) with z′ ≺ z.

Tables 6 shows the computational results of the experiment in the grid neighbor search for the

eight instances, where we denote the following:
- instance: a pair (I, π) of topological speciﬁcation I and a property π in the tested instance;
- n: the number of non-hydrogen atoms in the tested instance;
- #feasible: the number of non-center grids in N(r) that are found to be feasible during the

search procedure;

- #solutions: the number of chemical graphs obtained from the feasible non-center grids in N(r),
where diﬀerent feasible girds provide the same solutions and #feasible > #solutions holds in
such a case;

- #infeasible: the number of non-center grids in N(r) that are found to be infeasible during the

search procedure;

- #ignored: the number of non-center grids z ∈ N(r) that are ignored due to an infeasible grid

z′z ∈ N(r) with z′ ≺ z during the search procedure;

- #time out: the number of non-center grids in N(r) such that the time for feasibility check

exceeds the time limit of 300 seconds during the search procedure;

- time: the average time for checking the feasibility of a non-center grid z ∈ N(r) whose feasibility

can be detected within the time limit.

Table 6: Results of Grid Neighbor Search.

instance
(Ia,Fp)
(Ia,OptR)
(Ia,SfT)
(I 1
b,Fp)
(I 1
b,SfT)
(Ic,Fp)
(Ic,OptR)
(Ic,SfT)

n #feasible #solutions #infeasible #ignored #time out
42
47
41
10
11
50
49
45

33
30
45
21
22
33
25
17

33
30
45
21
22
33
25
17

15
15
3
21
26
15
21
24

0
1
0
3
0
0
1
3

0
2
0
3
0
0
1
4

time
72.96
44.00
11.91
69.48
30.78
71.84
13.29
65.85

From Tables 6, we observe that our new method of grid neighbor search successfully infers other
solutions than the chemical graphs C† inferred by the standard Stage 4 even though Stage 5 could
not ﬁnd many chemical isomers C∗ of C†. The branch-and-bound method for solving an MILP
sometimes takes an extremely large execution time for the same size of instances. We introduce a
time limit to bound an entire running time to skip such instances during an execution of testing
the feasibility of grids in the neighbor N(r). From Tables 6, we see that at least around a half
number of grids in N(r) were feasible and provided new solutions.

2LM-M ANN grid search v8 A2: August 24, 2021

19

6 Concluding Remarks

In this paper, we designed a procedure for generating chemical graphs as a new building block in
Stage 4 of the framework for inferring a desired chemical graph. The main task of Stage 4 is to ﬁnd
a feasible solution C† of an MILP that represents a feature function and a topological speciﬁcation.
In the framework, isomers C∗ of C† are generated in Stage 5 by a dynamic programming algorithm.
However, the number of isomers of C† is sometimes small. Our new procedure searches the neighbor
of C† in a search space deﬁned with a set of linear functions. We divide the neighbor of C† into
subspaces and solve the MILP in Stage 4 for each subspace imposing a set of linear constraints
that represents the subspace. From the results of our computational experiments, we observe that
an additional number of solutions C∗ can be found in the neighbor of C† by our new procedure.

References

[1] Lo, Y-C., Rensi, S.E., Torng, W., Altman, R.B.: Machine learning in chemoinformatics and

drug discovery. Drug Discovery Today 23, 1538–1546 (2018)

[2] Tetko, I.V., Engkvist, O.: From Big Data to Artiﬁcial Intelligence: chemoinformatics meets

new challenges. J. Cheminformatics 12, 74 (2020)

[3] Ghasemi, F., Mehridehnavi, A., P´erez-Garrido, A., P´erez-S´anchez, H.: Neural network and
deep-learning algorithms used in QSAR studies: merits and drawbacks. Drug Discovery
Today 23, 1784–1790 (2018)

[4] Miyao, T., Kaneko, H., Funatsu, K.:

Inverse QSPR/QSAR analysis for chemical structure

generation (from y to x). J. Chem. Inf. Model. 56, 286–299 (2016)

[5] Ikebata, H., Hongo, K., Isomura, T., Maezono, R., Yoshida, R.: Bayesian molecular design

with a chemical language model. J. Comput. Aided Mol. Des. 31, 379–391 (2017)

[6] Rupakheti, C., Virshup, A., Yang, W., Beratan, D.N.: Strategy to discover diverse optimal

molecules in the small molecule universe. J. Chem. Inf. Model. 55, 529–537 (2015)

[7] Bohacek, R.S., McMartin, C., Guida, W.C.: The art and practice of structure-based drug

design: A molecular modeling perspective. Med. Res. Rev. 16, 3–50 (1996)

[8] Akutsu, T. , Fukagawa, D., Jansson, J., Sadakane, K.: Inferring a graph from path frequency.

Discrete Appl. Math. 160, 10-11, 1416–1428 (2012)

[9] Kipf, T. N., Welling, M.: Semi-supervised classiﬁcation with graph convolutional networks,

arXiv:1609.02907 (2016)

[10] G´omez-Bombarelli, R., Wei, J.N., Duvenaud, D., Hern´andez-Lobato, J.M., S´anchez-Lengeling,
B., Sheberla, D., Aguilera-Iparraguirre, J., Hirzel, T.D., Adams, R.P., Aspuru-Guzik, A.:
Automatic chemical design using a data-driven continuous representation of molecules. ACS
Cent. Sci. 4, 268–276 (2018)

2LM-M ANN grid search v8 A2: August 24, 2021

20

[11] Segler, M.H.S., Kogej, T., Tyrchan, C., Waller, M.P.: Generating focused molecule libraries
for drug discovery with recurrent neural networks. ACS Cent. Sci. 4, 120–131 (2017)

[12] Yang, X., Zhang, J., Yoshizoe, K., Terayama, K., Tsuda, K.: ChemTS: an eﬃcient python

library for de novo molecular generation. STAM 18, 972–976 (2017)

[13] Kusner, M.J., Paige, B., Hern´andez-Lobato, J.M.: Grammar variational autoencoder. Proc.
of the 34th International Conference on Machine Learning-Volume 70, 1945–1954 (2017)

[14] De Cao, N., Kipf, T.: MolGAN: An implicit generative model for small molecular graphs.

arXiv:1805.11973 (2018)

[15] Madhawa, K., Ishiguro, K., Nakago, K., Abe, M.: GraphNVP: an invertible ﬂow model for

generating molecular graphs. arXiv:1905.11600 (2019)

[16] Shi, C., Xu, M., Zhu, Z., Zhang, W., Zhang, M., Tang, J.: GraphAF: a ﬂow-based autore-

gressive model for molecular graph generation. arXiv:2001.09382 (2020)

[17] Akutsu, T., Nagamochi, H.: A mixed integer linear programming formulation to artiﬁcial
neural networks. Proc. of the 2nd Int. Conf. on Information Science and Systems, 215–220
(2019)

[18] Azam, N. A., Chiewvanichakorn, R., Zhang, F., Shurbevski, A., Nagamochi, H., Akutsu,
T.: A method for the inverse QSAR/QSPR based on artiﬁcial neural networks and mixed
integer linear programming. Proc. of the 13th International Joint Conference on Biomedical
Engineering Systems and Technologies – Volume 3: BIOINFORMATICS, 101–108 (2020)

[19] Azam, N. A., Zhu, J., Sun, Y., Shi, Y., Shurbevski, A., Zhao, L., Nagamochi, H., Akutsu,
T.: A novel method for inference of acyclic chemical compounds with bounded branch-
height based on artiﬁcial neural networks and integer programming. Algorithms for Molecular
Biology, 16, 18 (2021)

[20] Zhu, J., Wang, C., Shurbevski, A., Nagamochi, H., Akutsu, T.: A novel method for inference
of chemical compounds of cycle index two with desired properties based on artiﬁcial neural
networks and integer programming. Algorithms 13, 5, 124 (2020)

[21] Zhu, J., Azam, N. A., Zhang, F., Shurbevski, A., Haraguchi, K., Zhao, L. , Nagamochi, H.,
Akutsu, T.: A novel method for inferring of chemical compounds with prescribed topological
substructures based on integer programming. IEEE/ACM Trans. Comput. Biol. Bioinform
(submitted).

[22] Shi, Y., Zhu, J., Azam, N. A., Haraguchi, K., Zhao, L., Nagamochi, H., Akutsu, T.: An
inverse QSAR method based on a two-layered model and integer programming. International
Journal of Molecular Sciences. 22, 2847 (2021)

[23] Tanaka, K., Zhu, J., Azam, N. A., Haraguchi, K., Zhao, L., Nagamochi, H., Akutsu, T.:
An inverse QSAR method based on decision tree and integer programming. The 17th Inter-
national Conference on Intelligent Computing, August 12-15, 2021, in Shenzhen, China, In:

2LM-M ANN grid search v8 A2: August 24, 2021

21

Huang D.S., Jo K.H., Li J., Gribova V., Hussain A. (eds) Intelligent Computing Theories and
Application, ICIC 2021, Lecture Notes in Computer Science, vol. 12837. Springer, Cham.

[24] Zhu, J., Azam, N. A., Haraguchi, K., Zhao, L., Nagamochi, H., Akutsu, T.: A method
for molecular design based on linear regression and integer programming. 12th International
Conference on Bioscience, Biochemistry and Bioinformatics (ICBBB 2022), Tokyo, Japan
during January 7-10, 2022 (to appear)

[25] Ido, R., Cao, S., Zhu, J., Azam, N. A., Haraguchi, K., Zhao, L., Nagamochi, H., Akutsu, T.:
A method for inferring polymers based on linear regression and integer programming. arXiv:
(to be registered) (2021)

[26] Annotations from HSDB (on pubchem): https://pubchem.ncbi.nlm.nih.gov/

[27] Jalali-Heravi, M., Fatemi, M.: Artiﬁcial neural network modeling of Kovats retention indices
for noncyclic and monocyclic terpenes (2001) https://doi.org/10.1016/S0021-9673(00)
01274-7/

[28] Roy, K., Saha, A.: Comparative QSPR studies with molecular connectivity, molecular negen-

tropy and TAU indices (2003) https://doi.org/10.1007/s00894-003-0135-z/

[29] QM9 at MoleculeNet: http://moleculenet.ai

[30] Goussard, V., Duprat, F., Gerbaud, V., Ploix, J.-J., Dreyfus, G., Nardello-Rataj, V., Aubry,
J.-M.: Predicting the surface tension of liquids: comparison of four modeling approaches
and application to cosmetic oils, J. Chem. Inf. Model., 57, 12, 2986–2995 (2017) https:
//pubs.acs.org/doi/full/10.1021/acs.jClm.7b00512

[31] Goussard, V., Fran¸cois Duprat F., Ploix, J.-L., Dreyfus, G., Nardello-Rataj, V., Aubry, J.-M.:
A new machine-learning tool for fast estimation of liquid viscosity. application to cosmetic
oils. J. Chem. Inf. Model., 60, 4, 2012–2023 (2020) https://pubs.acs.org/doi/10.1021/
acs.jcim.0c00083

[32] Naef, R.: Calculation of the isobaric heat capacities of the liquid and solid phase of organic
compounds at and around 298.15 K based on their “true” molecular volume. Molecules, 24
(8) (2019), https://www.mdpi.com/1420-3049/24/8/1626/

[33]

https://figshare.com/articles/dataset/Lipophilicity_Dataset_-_logD7_4_of_1_

130_Compounds/5596750/1

[34] ESOL at MoleculeNet: http://moleculenet.ai/datasets-1

[35] Bicerano, J.: Prediction of Polymer Properties. 3rd Edition, Revised and Expanded. CRC

Press (2002)

2LM-M ANN grid search v8 A2: August 24, 2021

22

Appendix

A A Full Description of Descriptors

Associated with the two functions α and β in a chemical graph C = (H, α, β), we introduce
functions ac : V (E) → (Λ \ {H}) × (Λ \ {H}) × [1, 3], cs : V (E) → (Λ \ {H}) × [1, 6] and ec : V (E) →
((Λ \ {H}) × [1, 6]) × ((Λ \ {H}) × [1, 6]) × [1, 3] in the following.

To represent a feature of the exterior of C, a chemical rooted tree in T (C) is called a fringe-

conﬁguration of C.

We also represent leaf-edges in the exterior of C. For a leaf-edge uv ∈ E(hCi) with deghCi(u) =

1, we deﬁne the adjacency-conﬁguration of e to be an ordered tuple (α(u), α(v), β(uv)). Deﬁne

Γlf
ac

, {(a, b, m) | a, b ∈ Λ, m ∈ [1, min{val(a), val(b)}]}

as a set of possible adjacency-conﬁgurations for leaf-edges.

To represent a feature of an interior-vertex v ∈ V int(C) such that α(v) = a and deghCi(v) = d
(i.e., the number of non-hydrogen atoms adjacent to v is d) in a chemical graph C = (H, α, β),
we use a pair (a, d) ∈ (Λ \ {H}) × [1, 4], which we call the chemical symbol cs(v) of the vertex
v. We treat (a, d) as a single symbol ad, and deﬁne Λdg to be the set of all chemical symbols
µ = ad ∈ (Λ \ {H}) × [1, 4].

We deﬁne a method for featuring interior-edges as follows. Let e = uv ∈ Eint(C) be an
interior-edge e = uv ∈ Eint(C) such that α(u) = a, α(v) = b and β(e) = m in a chemical graph
C = (H, α, β). To feature this edge e, we use a tuple (a, b, m) ∈ (Λ \ {H}) × (Λ \ {H}) × [1, 3],
which we call the adjacency-conﬁguration ac(e) of the edge e. We introduce a total order < over
the elements in Λ to distinguish between (a, b, m) and (b, a, m) (a 6= b) notationally. For a tuple
ν = (a, b, m), let ν denote the tuple (b, a, m).

Let e = uv ∈ Eint(C) be an interior-edge e = uv ∈ Eint(C) such that cs(u) = µ, cs(v) = µ′ and
β(e) = m in a chemical graph C = (H, α, β). To feature this edge e, we use a tuple (µ, µ′, m) ∈
Λdg×Λdg×[1, 3], which we call the edge-conﬁguration ec(e) of the edge e. We introduce a total order
< over the elements in Λdg to distinguish between (µ, µ′, m) and (µ′, µ, m) (µ 6= µ′) notationally.
For a tuple γ = (µ, µ′, m), let γ denote the tuple (µ′, µ, m).

Let π be a chemical property for which we will construct a prediction function η from a feature

vector f (C) of a chemical graph C to a predicted value y ∈ R for the chemical property of C.

We ﬁrst choose a set Λ of chemical elements and then collect a data set Dπ of chemical com-
pounds C whose chemical elements belong to Λ, where we regard Dπ as a set of chemical graphs
C that represent the chemical compounds C in Dπ. To deﬁne the interior/exterior of chemical
graphs C ∈ Dπ, we next choose a branch-parameter ρ, where we recommend ρ = 2.

Let Λint(Dπ) ⊆ Λ (resp., Λex(Dπ) ⊆ Λ) denote the set of chemical elements used in the set
V int(C) of interior-vertices (resp., the set V ex(C) of exterior-vertices) of C over all chemical graphs
C ∈ Dπ, and Γint(Dπ) denote the set of edge-conﬁgurations used in the set Eint(C) of interior-
edges in C over all chemical graphs C ∈ Dπ. Let F (Dπ) denote the set of chemical rooted trees ψ
r-isomorphic to a chemical rooted tree in T (C) over all chemical graphs C ∈ Dπ, where possibly a
chemical rooted tree ψ ∈ F (Dπ) consists of a single chemical element a ∈ Λ \ {H}.

2LM-M ANN grid search v8 A2: August 24, 2021

23

We deﬁne an integer encoding of a ﬁnite set A of elements to be a bijection σ : A → [1, |A|],
where we denote by [A] the set [1, |A|] of integers. Introduce an integer coding of each of the sets
Λint(Dπ), Λex(Dπ), Γint(Dπ) and F (Dπ). Let [a]int (resp., [a]ex) denote the coded integer of an
element a ∈ Λint(Dπ) (resp., a ∈ Λex(Dπ)), [γ] denote the coded integer of an element γ in Γint(Dπ)
and [ψ] denote an element ψ in F (Dπ).

Over 99% of chemical compounds C with up to 100 non-hydrogen atoms in PubChem have
degree at most 4 in the hydrogen-suppressed graph hCi [19]. We assume that a chemical graph C
treated in this paper satisﬁes deghCi(v) ≤ 4 in the hydrogen-suppressed graph hCi.
In our model, we use an integer mass∗(a) = ⌊10 · mass(a)⌋, for each a ∈ Λ.
We deﬁne the feature vector f (C) of a chemical graph C = (H, α, β) ∈ Dπ to be a vector
that consists of the following non-negative integer descriptors dcpi(C), i ∈ [1, K], where K =
14 + |Λint(Dπ)| + |Λex(Dπ)| + |Γint(Dπ)| + |F (Dπ)| + |Γlf

ac|.

1. dcp1(C): the number |V (H)| − |VH| of non-hydrogen atoms in C.

2. dcp2(C): the rank r(C) of C.

3. dcp3(C): the number |V int(C)| of interior-vertices in C.

4. dcp4(C): the average ms(C) of mass∗ over all atoms in C;
|V (H)| Pv∈V (H) mass∗(α(v)).

i.e., ms(C) , 1

5. dcpi(C), i = 4 + d, d ∈ [1, 4]: the number dg

d(C) of non-hydrogen vertices v ∈ V (H) \ VH of

H

degree deghCi(v) = d in the hydrogen-suppressed chemical graph hCi.

6. dcpi(C), i = 8 + d, d ∈ [1, 4]: the number dgint

d (C) of interior-vertices of interior-degree

degCint(v) = d in the interior Cint = (V int(C), Eint(C)) of C.

7. dcpi(C), i = 12 + m, m ∈ [2, 3]: the number bdint
m (C) , {e ∈ Eint(C) | β(e) = m}.

m in C; i.e., bdint

m (C) of interior-edges with bond multiplicity

8. dcpi(C), i = 14 + [a]int, a ∈ Λint(Dπ): the frequency naint
element a in the set V int(C) of interior-vertices in C.

a (C) = |Va(C) ∩ V int(C)| of chemical

9. dcpi(C), i = 14 + |Λint(Dπ)| + [a]ex, a ∈ Λex(Dπ): the frequency naex
of chemical element a in the set V ex(C) of exterior-vertices in C.

a (C) = |Va(C) ∩ V ex(C)|

10. dcpi(C), i = 14 + |Λint(Dπ)| + |Λex(Dπ)| + [γ], γ ∈ Γint(Dπ): the frequency ecγ(C) of edge-

conﬁguration γ in the set Eint(C) of interior-edges in C.

11. dcpi(C), i = 14 + |Λint(Dπ)| + |Λex(Dπ)| + |Γint(Dπ)| + [ψ], ψ ∈ F (Dπ): the frequency fcψ(C)

of fringe-conﬁguration ψ in the set of ρ-fringe-trees in C.

12. dcpi(C), i = 14 + |Λint(Dπ)| + |Λex(Dπ)| + |Γint(Dπ)| + |F (Dπ)| + [ν], ν ∈ Γlf
ν (C) of adjacency-conﬁguration ν in the set of leaf-edges in hCi.

aclf

ac: the frequency

2LM-M ANN grid search v8 A2: August 24, 2021

24

B Specifying Target Chemical Graphs

Given a prediction function η and a target value y∗ ∈ R, we call a chemical graph C∗ such that
η(x∗) = y∗ for the feature vector x∗ = f (C∗) a target chemical graph. This section presents a set of
rules for specifying topological substructure of a target chemical graph in a ﬂexible way in Stage 4.
We ﬁrst describe how to reduce a chemical graph C = (H, α, β) into an abstract form based
on which our speciﬁcation rules will be deﬁned. To illustrate the reduction process, we use the
chemical graph C = (H, α, β) such that hCi is given in Figure 2.

R1 Removal of all ρ-fringe-trees: The interior H int = (V int(C), Eint(C)) of C is obtained
by removing the non-root vertices of each ρ-fringe-trees C[u] ∈ T (C), u ∈ V int(C). Figure 8
illustrates the interior H int of chemical graph C with ρ = 2 in Figure 2.

R2 Removal of some leaf paths: We call a u, v-path Q in H int a leaf path if vertex v is a leaf-
vertex of H int and the degree of each internal vertex of Q in H int is 2, where we regard that
Q is rooted at vertex u. A connected subgraph S of the interior H int of C is called a cyclical-
base if S is obtained from H by removing the vertices in V (Qu) \ {u}, u ∈ X for a subset X
of interior-vertices and a set {Qu | u ∈ X} of leaf u, v-paths Qu such that no two paths Qu
and Qu′ share a vertex. Figure 9(a) illustrates a cyclical-base S = H int − Su∈X (V (Qu) \ {u})
of the interior H int for a set {Qu5 = (u5, u24), Qu18 = (u18, u25, u26, u27), Qu22 = (u22, u28)} of
leaf paths in Figure 8.

R3 Contraction of some pure paths: A path in S is called pure if each internal vertex of
the path is of degree 2. Choose a set P of several pure paths in S so that no two paths
share vertices except for their end-vertices. A graph S′ is called a contraction of a graph
S (with respect to P) if S′ is obtained from S by replacing each pure u, v-path with a
single edge a = uv, where S′ may contain multiple edges between the same pair of adjacent
vertices. Figure 9(b) illustrates a contraction S′ obtained from the chemical graph S by
contracting each uv-path Pa ∈ P into a new edge a = uv, where a1 = u1u2, a2 = u1u3, a3 =
u4u7, a4 = u10u11 and a5 = u11u12 and P = {Pa1 = (u1, u13, u2), Pa2 = (u1, u14, u3), Pa3 =
(u4, u15, u16, u7), Pa4 = (u10, u17, u18, u19, u11), Pa5 = (u11, u20, u21, u22, u12)} of pure paths in
Figure 9(a).

We will deﬁne a set of rules so that a chemical graph can be obtained from a graph (called
a seed graph in the next section) by applying processes R3 to R1 in a reverse way. We specify
topological substructures of a target chemical graph with a tuple (GC, σint, σce) called a target
speciﬁcation deﬁned under the set of the following rules.

Seed Graph

A seed graph GC = (VC, EC) is deﬁned to be a graph (possibly with multiple edges) such that the
edge set EC consists of four sets E(≥2), E(≥1), E(0/1) and E(=1), where each of them can be empty.
A seed graph plays a role of the most abstract form S′ in R3. Figure 4(a) illustrates an example
of a seed graph GC with r(GC) = 5, where VC = {u1, u2, . . . , u12, u23}, E(≥2) = {a1, a2, . . . , a5},
E(≥1) = {a6}, E(0/1) = {a7} and E(=1) = {a8, a9, . . . , a16}.

2LM-M ANN grid search v8 A2: August 24, 2021

25

N
u1
u14

C

C
u13

u3
C

C

u2
a8
a9
C
u4

a10

C

u24
O
Qu5
C
a11
u5
u6

a16
N
u8

S(6)

u15

a12

u16
C

u7 u9
C
a13

O

u10
C
a15

a14

u27
O

Qu18
C

u26
C

u25

u19
C

u17
C

C
u18

u28
N

P

Qu22

C
u22

u21

u20
C

C
u12
u11

a6

C
a17

Figure 8: The interior H int of chemical graph C with hCi in Figure 2 for ρ = 2.

S(2)

u23

N
u1
u14

C

Pa2

Pa1
C

C
u13

u3
C

u2
a8
a9
C
u4
u15

u16
C

S(6)

Pa3

a10

a12

C
u5

a11
u6

C

a16
N
u8

a14

u7 u9
C
a13

O

u10
C
a15

u17
C

u19
C

Pa4

u18
C

a6

C
a17

C
u22

C
u12
u11

u21

P

u20
C

Pa5

S(2)

u23

u1
N

a1

a2

a8
C

u3

u2

C

a9

C

u4
a10

a11
C
u6

C
u5

a16
N
u8

a12

a3

a14
u10
C
a15

u7
C
a13

u9
O

a6

C

u12

u11

a5

a4

C
a17

S(2)

u23

(a) A cyclical-base S of  Hint

(b) A contraction S’ of  S

Figure 9: (a) A cyclical-base S = H int −Su∈{u5,u18,u22}(V (Qu)\{u}) of the interior H int in Figure 8;
(b) A contraction S′ of S for a pure path set P = {Pa1, Pa2, . . . , Pa5} in (a), where a new edge
obtained by contracting a pure path is depicted with a thick line.

A subdivision S of GC is a graph constructed from a seed graph GC according to the following

rules:

- Each edge e = uv ∈ E(≥2) is replaced with a u, v-path Pe of length at least 2;

- Each edge e = uv ∈ E(≥1) is replaced with a u, v-path Pe of length at least 1 (equivalently e is

directly used or replaced with a u, v-path Pe of length at least 2);

- Each edge e ∈ E(0/1) is either used or discarded, where E(0/1) is required to be chosen as a
non-separating edge subset of E(GC) since otherwise the connectivity of a ﬁnal chemical graph
C is not guaranteed; r(C) = r(GC) − |E′| holds for a subset E′ ⊆ E(0/1) of edges discarded in a
ﬁnal chemical graph C; and

2LM-M ANN grid search v8 A2: August 24, 2021

26

- Each edge e ∈ E(=1) is always used directly.

We allow a possible elimination of edges in E(0/1) as an optional rule in constructing a target
chemical graph from a seed graph, even though such an operation has not been included in the
process R3. A subdivision S plays a role of a cyclical-base in R2. A target chemical graph
C = (H, α, β) will contain S as a subgraph of the interior H int of C.

Interior-speciﬁcation

A graph H ∗ that serves as the interior H int of a target chemical graph C will be constructed as
follows. First construct a subdivision S of a seed graph GC by replacing each edge e = uu′ ∈
E(≥2) ∪ E(≥1) with a pure u, u′-path Pe. Next construct a supergraph H ∗ of S by attaching a leaf
path Qv at each vertex v ∈ VC or at an internal vertex v ∈ V (Pe) \ {u, u′} of each pure u, u′-path
Pe for some edge e = uu′ ∈ E(≥2) ∪ E(≥1), where possibly Qv = (v), E(Qv) = ∅ (i.e., we do not
attach any new edges to v). We introduce the following rules for specifying the size of H ∗, the
length |E(Pe)| of a pure path Pe, the length |E(Qv)| of a leaf path Qv, the number of leaf paths
Qv and a bond-multiplicity of each interior-edge, where we call the set of prescribed constants an
interior-speciﬁcation σint:

- Lower and upper bounds nint

LB, nint

UB ∈ Z+ on the number of interior-vertices of a target chemical

graph C.

- For each edge e = uu′ ∈ E(≥2) ∪ E(≥1),

a lower bound ℓLB(e) and an upper bound ℓUB(e) on the length |E(Pe)| of a pure u, u′-path
Pe. (For a notational convenience, set ℓLB(e) := 0, ℓUB(e) := 1, e ∈ E(0/1) and ℓLB(e) := 1,
ℓUB(e) := 1, e ∈ E(=1).)

a lower bound blLB(e) and an upper bound blUB(e) on the number of leaf paths Qv attached

at internal vertices v of a pure u, u′-path Pe.

a lower bound chLB(e) and an upper bound chUB(e) on the maximum length |E(Qv)| of a leaf

path Qv attached at an internal vertex v ∈ V (Pe) \ {u, u′} of a pure u, u′-path Pe.

- For each vertex v ∈ VC,

a lower bound chLB(v) and an upper bound chUB(v) on the number of leaf paths Qv attached

to v, where 0 ≤ chLB(v) ≤ chUB(v) ≤ 1.

a lower bound chLB(v) and an upper bound chUB(v) on the length |E(Qv)| of a leaf path Qv

attached to v.

- For each edge e = uu′ ∈ EC, a lower bound bdm,LB(e) and an upper bound bdm,UB(e) on
the number of edges with bond-multiplicity m ∈ [2, 3] in u, u′-path Pe, where we regard Pe,
e ∈ E(0/1) ∪ E(=1) as single edge e.

We call a graph H ∗ that satisﬁes an interior-speciﬁcation σint a σint-extension of GC, where the

bond-multiplicity of each edge has been determined.

2LM-M ANN grid search v8 A2: August 24, 2021

27

Table 7: Example 1 of an interior-speciﬁcation σint.

LB = 20 nint
nint

UB = 28
a3
a2
2
2
3
4
0
0
0
1
0
1
1
3

a6
1
4
0
0
0
2

a5
2
4
1
1
3
5

a4
3
5
1
2
4
6

a1
2
3
0
1
0
3
u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u23
0
0
0
1
0
0
1
1
a13
a1
0
0
0
1
0
0
0
0

0
1
0
0
a2
0
1
0
0

0
0
0
4
a12
1
1
0
0

0
0
0
1
a10
0
0
0
0

0
0
0
2
a11
0
0
0
0

0
1
0
0
a3
0
0
0
0

0
1
0
0
a4
1
2
0
0

0
1
1
3
a5
0
2
0
1

0
0
0
0
a6
0
0
0
0

0
0
0
1
a7
0
0
0
0

0
0
0
1
a8
0
0
0
0

0
0
0
0
a9
0
0
0
0

ℓLB(ai)
ℓUB(ai)
blLB(ai)
blUB(ai)
chLB(ai)
chUB(ai)

blLB(ui)
blUB(ui)
chLB(ui)
chUB(ui)

bd2,LB(ai)
bd2,UB(ai)
bd3,LB(ai)
bd3,UB(ai)

a14
0
0
0
0

a15
0
0
0
0

a16
0
0
0
0

a17
0
0
0
0

Table 7 shows an example of an interior-speciﬁcation σint to the seed graph GC in Figure 4.
Figure 10 illustrates an example of an σint-extension H ∗ of seed graph GC in Figure 4 under

the interior-speciﬁcation σint in Table 7.

u1
u14

u13

u2
a8

u3

u24

a9

u4

a10

u15

a12

u16

a11
u6

u5

a16
u8

u7 u9
a13

u10
a15

a14

u27

u26

u25

u18

u17

u28

u22

u12
u11

u21

u20

a6

u19

a17

u23

Figure 10: An illustration of a graph H ∗ that is obtained from the seed graph GC in Figure 4
under the interior-speciﬁcation σint in Table 7, where the vertices newly introduced by pure paths
Pai and leaf paths Qvi are depicted with white squares and circles, respectively.

2LM-M ANN grid search v8 A2: August 24, 2021

28

Chemical-speciﬁcation

Let H ∗ be a graph that serves as the interior H int of a target chemical graph C, where the
bond-multiplicity of each edge in H ∗ has be determined. Finally we introduce a set of rules
for constructing a target chemical graph C from H ∗ by choosing a chemical element a ∈ Λ and
assigning a ρ-fringe-tree ψ to each interior-vertex v ∈ V int. We introduce the following rules for
specifying the size of C, a set of chemical rooted trees that are allowed to use as ρ-fringe-trees
and lower and upper bounds on the frequency of a chemical element, a chemical symbol, and an
edge-conﬁguration, where we call the set of prescribed constants a chemical speciﬁcation σce:

- Lower and upper bounds nLB, n∗ ∈ Z+ on the number of vertices, where nint

LB ≤ nLB ≤ n∗.

- Subsets F (v) ⊆ F (Dπ), v ∈ VC and FE ⊆ F (Dπ) of chemical rooted trees ψ with ht(hψi) ≤ ρ,
where we require that every ρ-fringe-tree C[v] rooted at a vertex v ∈ VC (resp., at an internal
vertex v not in VC) in C belongs to F (v) (resp., FE). Let F ∗ := FE ∪ Sv∈VC F (v) and Λex
denote the set of chemical elements assigned to non-root vertices over all chemical rooted trees
in F ∗.

- A subset Λint ⊆ Λint(Dπ), where we require that every chemical element α(v) assigned to an
a (C) and
a (C)) denote the number of vertices (resp., interior-vertices and exterior-vertices) v such

interior-vertex v in C belongs to Λint. Let Λ := Λint ∪ Λex and naa(C) (resp., naint
naex
that α(v) = a in C.

- A set Λint

dg ⊆ Λ × [1, 4] of chemical symbols and a set Γint ⊆ Γint(Dπ) of edge-conﬁgurations
(µ, µ′, m) with µ ≤ µ′, where we require that the edge-conﬁguration ec(e) of an interior-edge e
in C belongs to Γint. We do not distinguish (µ, µ′, m) and (µ′, µ, m).

- Deﬁne Γint

ac to be the set of adjacency-conﬁgurations such that Γint

ac := {(a, b, m) | (ad, bd′, m) ∈

Γint}. Let acint

ν (C), ν ∈ Γint

ac denote the number of interior-edges e such that ac(e) = ν in C.

- Subsets Λ∗(v) ⊆ {a ∈ Λint | val(a) ≥ 2}, v ∈ VC, we require that every chemical element α(v)

assigned to a vertex v ∈ VC in the seed graph belongs to Λ∗(v).

- Lower and upper bound functions naLB, naUB : Λ → [1, n∗] and naint

LB, naint

UB : Λint → [1, n∗] on

the number of interior-vertices v such that α(v) = a in C.

- Lower and upper bound functions nsint

LB, nsint

UB : Λint

dg → [1, n∗] on the number of interior-vertices

v such that cs(v) = µ in C.

- Lower and upper bound functions acint

LB, acint

UB : Γint

ac → Z+ on the number of interior-edges e such

that ac(e) = ν in C.

- Lower and upper bound functions ecint

LB, ecint

UB : Γint → Z+ on the number of interior-edges e such

that ec(e) = γ in C.

- Lower and upper bound functions fcLB, fcUB : F ∗ → [0, n∗] on the number of interior-vertices v

such that C[v] is r-isomorphic to ψ ∈ F ∗ in C.

2LM-M ANN grid search v8 A2: August 24, 2021

29

- Lower and upper bound functions aclf
acC with adjacency-conﬁguration ν.

LB, aclf

UB : Γlf

ac → [0, n∗] on the number of leaf-edges uv in

We call a chemical graph C that satisﬁes a chemical speciﬁcation σce a (σint, σce)-extension of

GC, and denote by G(GC, σint, σce) the set of all (σint, σce)-extensions of GC.

Table 8 shows an example of a chemical-speciﬁcation σce to the seed graph GC in Figure 4.

Table 8: Example 2 of a chemical-speciﬁcation σce.

nLB = 30, n∗ = 50.
branch-parameter: ρ = 2
Each of sets F (v), v ∈ VC and FE is set to be
the set F of chemical rooted trees ψ with ht(hψi) ≤ ρ = 2 in Figure 4(b).
Λ = {H, C, N, O, S(2), S(6), P = P(5)} Λint
Γint
ac
Γint

dg = {C2, C3, C4, N2, N3, O2, S(2)2, S(6)3, P4}

ν1 = (C, C, 1), ν2 = (C, C, 2), ν3 = (C, N, 1), ν4 = (C, O, 1), ν5 = (C, S(2), 1), ν6 = (C, S(6), 1), ν7 = (C, P, 1)
γ1 = (C2, C2, 1), γ2 = (C2, C3, 1), γ3 = (C2, C3, 2), γ4 = (C2, C4, 1), γ5 = (C3, C3, 1), γ6 = (C3, C3, 2),
γ7 = (C3, C4, 1), γ8 = (C2, N2, 1), γ9 = (C3, N2, 1), γ10 = (C3, O2, 1), γ11 = (C2, C2, 2), γ12 = (C2, O2, 1),
γ13 = (C3, N3, 1), γ14 = (C4, S(2)2, 2), γ15 = (C2, S(6)3, 1), γ16 = (C3, S(6)3, 1), γ17 = (C2, P4, 2),
γ18 = (C3, P4, 1)

Λ∗(u1) = Λ∗(u8) = {C, N}, Λ∗(u9) = {C, O}, Λ∗(u) = {C}, u ∈ VC \ {u1, u8, u9}
P
P
0
0
1
1

N O S(2)
0
0
1
1
5
4

naLB(a)
naUB(a)

S(6)
0
1

0
1

C
27
37

naint
naint

S(6)
0
1

LB(a)
UB(a)

N O S(2)
0
1
1
1
8
4

C
H
9
40
65
23
C2 C3 C4 N2 N3 O2 S(2)2 S(6)3 P4
0
3
0
8
1
5
ν1
ν6
0
0
30
1
γ1
γ6
0
0
4
5
ψ ∈ {ψi | i = 1, 6, 11} ψ ∈ F ∗ \ {ψi | i = 1, 6, 11}

5
15
ν2
0
10
γ2
0
15

0
2
ν4
0
10
γ4
0
4

0
3
ν5
0
1
γ5
0
10

0
2
ν3
0
10
γ3
0
4

ν7
0
1
γ7
0
4

γ10
0
4

γ11
0
4

γ9
0
6

γ8
0
4

0
1

1
10

0
3

ν ∈ {(C, C, 1), (C, C, 2)} ν ∈ Γlf

ac \ {(C, C, 1), (C, C, 2)}

0
10

0
8

nsint
nsint

LB(µ)
UB(µ)

acint
acint

LB(ν)
UB(ν)

ecint
ecint

LB(γ)
UB(γ)

fcLB(ψ)
fcUB(ψ)

aclf
aclf

LB(ν)
UB(ν)

γ12
0
4

γ13
0
2

γ14
0
2

γ15
0
2

γ16
0
2

γ17
0
2

γ18
0
2

Figure 2 illustrates an example C of a (σint, σce)-extension of GC obtained from the σint-extension
H ∗ in Figure 10 under the chemical-speciﬁcation σce in Table 8. Note that r(C) = r(H ∗) =
r(GC) − 1 = 4 holds since the edge in E(0/1) is discarded in H ∗.

2LM-M ANN grid search v8 A2: August 24, 2021

30

C Test Instances for Stages 4 and 5

We prepared the following instances (a)-(d) for conducting experiments of Stages 4 and 5 in
Phase 2.

In Stages 4 and 5, we use three properties π ∈ {OptR, SfT, Vis} and deﬁne a set Λ(π) of
chemical elements as follows: Λ(OptR) = Λ5 = {H, C, O, N, S(2), F} and Λ(SfT) = Λ(Vis) = Λ4 =
{H, C, O, Si(4)}.

(a) Ia = (GC, σint, σce): The instance introduced in Section B to explain the target speciﬁ-
cation. For each property π, we replace Λ = {H, C, N, O, S(2), S(6), P(5)} in Table 8 with
Λ(π) ∩ {S(2), S(6), P(5)} and remove from the σce all chemical symbols, edge-conﬁgurations
and fringe-conﬁgurations that cannot be constructed from the replaced element set (i.e.,
those containing a chemical element in {S(2), S(6), P(5)} \ Λ(π)).

(b) I i

C, σi

b = (Gi
int, σi
2. In the four instances I i

ce), i = 1, 2, 3, 4: An instance for inferring chemical graphs with rank at most
b, i = 1, 2, 3, 4, the following speciﬁcations in (σint, σce) are common.

Set Λ := Λ(π) for a given property π ∈ {OptR, SfT, Vis}, set Λint
dg to be the set of
all possible symbols in Λ × [1, 4] that appear in the data set Dπ and set Γint to be the
set of all edge-conﬁgurations that appear in the data set Dπ. Set Λ∗(v) := Λ, v ∈ VC.
The lower bounds ℓLB, blLB, chLB, bd2,LB, bd3,LB, naLB, naint
LB and aclf
LB
are all set to be 0.
Set upper bounds naUB(a) := n∗, na ∈ {H, C}, naUB(a) := 5, na ∈ {O, N}, naUB(a) :=
2, na ∈ Λ \ {H, C, O, N}. The other upper bounds ℓUB, blUB, chUB, bd2,UB, bd3,UB, naint
UB,
nsint
We specify nLB as a parameter and set n∗ := nLB + 10, nint
⌊(3/4)nLB⌋.

UB are all set to be an upper bound n∗ on n(G∗).

LB := ⌊(1/4)nLB⌋ and nint

UB and aclf

UB, acint

UB, ecint

LB, nsint

LB, acint

LB, ecint

LB :=

For each property π, let F (Dπ) denote the set of 2-fringe-trees in the compounds in Dπ,
and select a subset F i
π| = 45 − 5i, i ∈ [1, 5]. For each instance I i
b,
set FE := F (v) := F i

π ⊆ F (Dπ) with |F i
π, v ∈ VC and fcLB(ψ) := 0, fcUB(ψ) := 10, ψ ∈ F i
π.

Instance I 1
are given by the rank-2 seed graph Gi

b is given by the rank-1 seed graph G1

C, i = 2, 3, 4 in Figure 5(ii)-(iv).

C in Figure 5(i) and Instances I i

b, i = 2, 3, 4

(i) For instance I 1

b, select as a seed graph the monocyclic graph G1

C = (VC, EC = E(≥2) ∪
E(≥1)) in Figure 5(i), where VC = {u1, u2}, E(≥2) = {a1} and E(≥1) = {a2}. We include a
linear constraint ℓ(a1) ≤ ℓ(a2) and 5 ≤ ℓ(a1) + ℓ(a2) ≤ 15 as part of the side constraint.
C = (VC, EC = E(≥2) ∪ E(≥1) ∪ E(=1))
in Figure 5(ii), where VC = {u1, u2, u3, u4}, E(≥2) = {a1, a2}, E(≥1) = {a3} and E(=1) =
{a4, a5}. We include a linear constraint ℓ(a1) ≤ ℓ(a2) and ℓ(a1) + ℓ(a2) + ℓ(a3) ≤ 15.

b, select as a seed graph the graph G2

(ii) For instance I 2

(iii) For instance I 3

b, select as a seed graph the graph G3

C = (VC, EC = E(≥2) ∪ E(≥1) ∪
E(=1)) in Figure 5(iii), where VC = {u1, u2, u3, u4}, E(≥2) = {a1}, E(≥1) = {a2, a3} and
E(=1) = {a4, a5}. We include linear constraints ℓ(a1) ≤ ℓ(a2) + ℓ(a3), ℓ(a2) ≤ ℓ(a3) and
ℓ(a1) + ℓ(a2) + ℓ(a3) ≤ 15.

2LM-M ANN grid search v8 A2: August 24, 2021

31

(iv) For instance I 4

b, select as a seed graph the graph G4

C = (VC, EC = E(≥2) ∪ E(≥1) ∪ E(=1))
in Figure 5(iv), where VC = {u1, u2, u3, u4}, E(≥1) = {a1, a2, a3} and E(=1) = {a4, a5}.
We include linear constraints ℓ(a2) ≤ ℓ(a1) + 1, ℓ(a2) ≤ ℓ(a3) + 1, ℓ(a1) ≤ ℓ(a3) and
ℓ(a1) + ℓ(a2) + ℓ(a3) ≤ 15.

We deﬁne instances in (c) and (d) in order to ﬁnd chemical graphs that have an intermediate
structure of given two chemical cyclic graphs GA = (HA = (VA, EA), αA, βA) and GB = (HB =
A and Λint
(VB, EB), αB, βB). Let Λint
dg,A denote the sets of chemical elements and chemical symbols
of the interior-vertices in GA, Γint
A denote the sets of edge-conﬁgurations of the interior-edges in
GA, and FA denote the set of 2-fringe-trees in GA. Analogously deﬁne sets Λint
B and
FB in GB.

dg,B, Γint

B , Λint

B and Λ∗(v) := {αA(v)}, v ∈ VC.

LB := min{nint(GA), nint(GB)}, nint

dg to be the set of all possible chemical symbols in Λ × [1, 4].

(c) Ic = (GC, σint, σce): An instance aimed to infer a chemical graph G† such that the core of G†
is equal to the core of GA and the frequency of each edge-conﬁguration in the non-core of
G† is equal to that of GB. We use chemical compounds CID 24822711 and CID 59170444 in
Figure 6(a) and (b) for GA and GB, respectively.
Set a seed graph GC = (VC, EC = E(=1)) to be the core of GA.
Set Λ := {H, C, N, O}, and set Λint
Set Γint := Γint
A ∪ Γint
Set nint
nLB := min{n(GA), n(GB)} − 10 = 40 and n∗ := max{n(GA), n(GB)} + 5.
Set lower bounds ℓLB, blLB, chLB, bd2,LB, bd3,LB, naLB, naint
Set upper bounds naUB(a) := n∗, na ∈ {H, C}, naUB(a) := 5, na ∈ {O, N}, naUB(a) := 2, na ∈
UB, nsint
Λ \ {H, C, O, N} and set the other upper bounds ℓUB, blUB, chUB, bd2,UB, bd3,UB, naint
UB,
acint
Set ecint
interior-edges in GA and GB with edge-conﬁguration γ.
Let F (p)
Set FE := F (v) := F (1)

B , p ∈ [1, 2] denote the set of chemical rooted trees r-isomorphic p-fringe-trees in GB;

LB(γ) to be the number of core-edges in GA with γ ∈ Γint and ecint

B , v ∈ VC and fcLB(ψ) := 0, fcUB(ψ) := 10, ψ ∈ F (1)

UB := max{nint(GA), nint(GB)},

UB(γ) to be the number

UB to be n∗.

B ∪ F (2)
B .

UB and aclf

LB and aclf

B ∪ F (2)

LB to be 0.

LB, acint

LB, nsint

(d) Id = (G1

C, σint, σce): An instance aimed to infer a chemical monocyclic graph G† such that
the frequency vector of edge-conﬁgurations in G† is a vector obtained by merging those of
GA and GB. We use chemical monocyclic compounds CID 10076784 and CID 44340250 in
Figure 6(c) and (d) for GA and GB, respectively. Set a seed graph to be the monocyclic seed
graph G1
C = (VC, EC = E(≥2) ∪ E(≥1)) with VC = {u1, u2}, E(≥2) = {a1} and E(≥1) = {a2} in
Figure 5(i).
Set Λ := {H, C, N, O}, Λint
Set nint
nLB := min{n(GA), n(GB)} = 40 and n∗ := max{n(GA), n(GB)}.
Set lower bounds ℓLB, blLB, chLB, bd2,LB, bd3,LB, naLB, naint
LB, nsint
Set upper bounds naUB(a) := n∗, na ∈ {H, C}, naUB(a) := 5, na ∈ {O, N}, naUB(a) := 2, na ∈
Λ \ {H, C, O, N} and set the other upper bounds ℓUB, blUB, chUB, bd2,UB, bd3,UB, naint
UB, nsint
UB,
acint
For each edge-conﬁguration γ ∈ Γint, let x∗

dg,A ∪ Λint
LB := min{nint(GA), nint(GB)}, nint

dg,B and Γint := Γint
UB := max{nint(GA), nint(GB)},

B(γint)) denote the number of

A(γint) (resp., x∗

UB to be n∗.

UB and aclf

LB and aclf

LB to be 0.

dg := Λint

A ∪ Γint
B .

LB, acint

2LM-M ANN grid search v8 A2: August 24, 2021

32

A(γ), x∗
min(γ) + (1/4)x∗
min(γ) + (3/4)x∗

interior-edges with γ in GA (resp., GB), γ ∈ Γint and set
A(γ), x∗
B(γ)}, x∗
min(γ) := min{x∗
x∗
LB(γ) := ⌊(3/4)x∗
ecint
ecint
UB(γ) := ⌈(1/4)x∗
Set FE := F (v) := FA ∪ FB, v ∈ VC and fcLB(ψ) := 0, fcUB(ψ) := 10, ψ ∈ FA ∪ FB.
We include a linear constraint ℓ(a1) ≤ ℓ(a2) and 5 ≤ ℓ(a1) + ℓ(a2) ≤ 15 as part of the side
constraint.

max(γ) := max{x∗
max(γ)⌋ and
max(γ)⌉.

B(γ)},

