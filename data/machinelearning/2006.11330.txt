0
2
0
2

n
u
J

9
1

]

M
Q
.
o
i
b
-
q
[

1
v
0
3
3
1
1
.
6
0
0
2
:
v
i
X
r
a

Pycro-manager: open-source software for integrated
microscopy hardware control and image processing

Henry Pinkard1,2,3,4*, Nico Stuurman5, and Laura Waller2,3

1Computational Biology Graduate Group, University of California, Berkeley, CA 94720, USA
2Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, CA 94720, USA
3Berkeley Institute for Data Science
4University of California San Francisco Bakar Computational Health Sciences Institute
5Howard Hughes Medical Institute and University of California San Francisco, San Francisco, CA 94158
*Correspondence: hbp [at] berkeley.edu

µManager, an open-source microscopy ac-
quisition software, has been an essen-
tial tool for many microscopy experiments
over the past 15 years, but is not easy
to use for experiments in which image
acquisition and analysis are closely cou-
pled. This is because µManager libraries
are written in C++ and Java, whereas
image processing is increasingly carried
out with data science and machine learn-
ing tools most easily accessible through
the Python programming language. We
present Pycro-Manager, a tool that en-
ables rapid development of such experi-
ments, while also providing access to the
wealth of existing tools within µManager
through Python.

Cutting-edge innovations in biological mi-
croscopy are increasingly blurring the line be-
tween data acquisition and data analysis. Of-
ten, the captured image requires signiﬁcant im-
age processing to produce the ﬁnal image, and
users rely on pipelines of multiple programs or
software libraries to get from the capture stage
to the ﬁnal image. Computational microscopy
and machine learning-based methods take this
paradigm to an extreme, often producing raw
measurements that aren’t human-interpretable
without post-processing [1, 5, 10, 4] Furthermore,
new ”adaptive” methods rely on image process-
ing during acquisition to actively control various
parameters of the microscope [8, 6]. Testing new
ideas and applying them for biological discovery
is often impeded by the lack of powerful yet suﬃ-
ciently ﬂexible control software, necessitating the
development of bespoke solutions that work only
with a speciﬁc instrument.

In situations where the close coupling of data
acquisition and image analysis are not required,
µManager [2, 3] has often been the de facto so-
lution. This owes to the existence of a hardware
abstraction layer and an extensive library of ‘de-
vice adapters’, which allow control of hundreds
of diﬀerent types of hardware ranging from cam-
eras to complete microscopes. Community con-
tributions of device adapters, plugins, and scripts
provide a treasure trove of hundreds of developer-
years of microscopy automation. However, de-
spite the power of these libraries, which are writ-
ten in C++ and Java, they are often diﬃcult to
integrate with the latest developments in com-
puter vision and scientiﬁc computing, which are
most readily available through the Python pro-
gramming language [9].

To address this need, we developed Pycro-
Manager. The foundation of Pycro-Manager is a
high-speed data transfer layer that dynamically
translates between Java and Python (Fig. 1a),
enabling users to call Java libraries as if they had
been written in Python. This creates an easy ac-
cess point through Python for all the existing ca-
pabilities of µManager, without requiring rewrit-
ing of any code or developers in the Java and
Python communities to switch languages. The
transfer layer can also be run over a network, en-
abling, for example, splitting out of control and
processing to a diﬀerent machine than the one
connected to the microscope.

On top of this layer, Pycro-Manager imple-
ments an acquisition API with the ﬂexibility to
independently customize what is acquired (”ac-
quisition events”), what happens while it is be-
ing acquired (”acquisition hooks”), and what
happens to the data after it is acquired (”im-

1

 
 
 
 
 
 
age processors”), without having to write all
the boilerplate code that usually accompanies
such customized experiments (Fig. 1b). This
API can be used, for example, to synchronize
external hardware with the acquisition process,
modify acquired images on-the-ﬂy before sav-
ing/visualization, or implement customized data
saving/visualization. Combining these features
can be used for even more powerful applications,
such as data-adaptive microscopy.

Acquisition events describe what to acquire.
For example, a z-stack would be a series of ac-
quisition events, each corresponding to a single
image and containing the position of the focus
drive. They can be created either from a GUI
(such as Micro-Magellan [7]) or programmati-
cally through the acquisition event API.

Acquisition hooks enable the synchronization
of arbitrary code with acquisition operations. For
example, they can be used to add in control of ex-
ternal devices, or apply auto-focusing operations
before proceeding with acquisition.

Image processors give access to image data and
metadata as soon it is acquired. They can be
used to modify data before reentering the de-
fault saving/visualization pipeline, or to divert
it to custom alternatives. They can also be used
in conjunction with acquisition hooks to create
feedback loops for updating hardware based on
data, or with acquisition events for controlling
future data acquisition.

References

[1] Eric M Christiansen, Samuel J Yang,
D Michael Ando, Lee L Rubin, Philip
Nelson, Steven Finkbeiner, Eric M Chris-
tiansen, Samuel J Yang, D Michael Ando,
Ashkan Javaherian, and Gaia Skibinski. In
Silico Labeling: Predicting Fluorescent La-
bels in Unlabeled Images. Cell, pages 1–12,
2018.

[2] Arthur Edelstein, Nenad Amodaj, Karl
Hoover, Ron Vale, and Nico Stuurman.
Computer control of microscopes using man-
ager, 2010.

[3] Arthur D Edelstein, Mark a Tsuchida, Ne-
nad Amodaj, Henry Pinkard, Ronald D
Vale, and Nico Stuurman. Advanced meth-
ods of microscope control using Micro-
Journal of Biological
Manager software.
Methods, 1(2):10, 11 2014.

[4] Syuan-Ming Guo, Li-Hao Yeh,

Jenny
Folkesson,
Ivan E Ivanov, Anitha Priya
Krishnan, Matthew G Keefe, David Shin,
Bryant Chhun, Nathan Cho, Manuel
Leonetti, Tomasz J Nowakowski, Shalin B
Mehta, Chan Zuckerberg Biohub, and J F
Contributed. Revealing architectural or-
der with quantitative label-free imaging and
deep learning. bioRxiv, pages 1–26, 2019.

In summary, Pycro-Manager provides a much
needed interface between over a decade’s worth of
open source microscopy development compatible
with the cutting edge of scientiﬁc computing. It
removes the need to write boilerplate code when
developing new types of smart microscopes, free-
ing developers to rapidly test new ideas. Finally,
it does this in a hardware-agnostic way to max-
imize the portability of code across diﬀerent mi-
croscopes.
The
Manager
https://github.com/micro-manager/pycro-manager,
and
https://pycro-manager.readthedocs.io/en/latest/#

source
can

documentation

Pycro-
at:

for
found

code
be

the

at:

is

Acknowledgements We thank Stfan van der
Walt for helpful discussion during development
and and Kyle Marchuk for early beta testing.

2

[5] Chawin Ounkomol, Sharmishtaa Seshamani,
Mary M. Maleckar, Forrest Collman, and
Gregory R. Johnson. Label-free prediction of
three-dimensional ﬂuorescence images from
transmitted-light microscopy. Nature Meth-
ods, 15(11):917–920, 2018.

[6] Henry Pinkard, Zachary Phillips, Arman
Babakhani, Daniel A. Fletcher, and Laura
Waller. Deep learning for single-shot auto-
focus microscopy. Optica, 6(6):794, 2019.

[7] Henry Pinkard, Nico Stuurman, Kaitlin
Corbin, Ronald Vale, and Matthew F Krum-
mel. Micro-Magellan: open-source, sample-
adaptive, acquisition software for optical mi-
croscopy. Nature Methods, 13(10):807–809,
9 2016.

[8] Loc A. Royer, William C. Lemon, Raghav K.
Chhetri, Yinan Wan, Michael Coleman, Eu-

a) Overview 

Micro-Manager

Micro-
manager 
plugins

GUI

Micro-
Manager 
APIs

Hardware 
abstraction 
layer

Device 
drivers

b) Acquisition API

Acquisition 
engine 
thread

Hardware-
optimized 
events

Pycro-Manager

Low and high level APIs for 
easily integrating other Python 
libraries with data acquisition

High-speed data 
transfer layer 
(single machine 
or network)

Additional 
hardware 
control

Data 
visualization

Scientific 
computing

Machine 
learning

Adjust 
hardware

Acquire 
image(s)

Acquisition 
event queue

Acquisition hooks
Synchronously run custom code during 
acquisition

Images

Default 
saving and 
display

Image processing and 
saving thread

Micro-Magellan 
acquisitions

Acquisition 
event API

Acquisition events
Flexible system for 
acquisition instructions

Adapt settings in 
response to images

Image processors
Modify or analyze 
acquired images

Acquire data based on analyzed images

Figure 1: a) Pycro-manager overview. The grey boxes denote the C++ and Java components
of µManager, including the GUI, Java APIs, and a hardware abstraction layer that enables generic
microscope control code to work on a variety of hardware components. The red box shows Pycro-
Manager, which consists of a high speed data transfer layer that can operate within a machine or
over a network. This layer enables access to all the existing capabilities of µManager as if they were
written in Python, so that they can inter-operate with Python libraries (purple boxes) for hardware
control, data visualization, scientiﬁc computing, etc. b) Pycro-Manager Acquisition API. The
blue boxes show acquisitions starting with some source of ”acquisition events”, instructions for
image collection and associated hardware changes. Green boxes represent acquisition events that
are optimized, then used to move hardware and collect images. ”Acquisition hooks” can be used
to execute arbitrary code synchronously or modify/delete instructions on-the-ﬂy. Magenta boxes
represent acquired images going straight to the default image saving and display, or being diverted
through ”image processors”, which allow for modiﬁcation of images or diversion to external saving
and visualization.

3

Tim Leslie, Tiziano Zito, Tom Krauss,
Utkarsh Upadhyay, Yaroslav O. Halchenko,
and Yoshiki V´azquez-Baeza. SciPy 1.0: fun-
damental algorithms for scientiﬁc computing
in Python. Nature Methods, 17(3):261–272,
2020.

[10] Martin Weigert, Uwe Schmidt, Tobias
Boothe, Andreas M¨uller, Alexandr Dibrov,
Akanksha Jain, Benjamin Wilhelm, Debo-
rah Schmidt, Coleman Broaddus, Sin Cul-
ley, Mauricio Rocha-Martins, Fabin Segovia-
Miranda, Caren Norden, Ricardo Henriques,
Marino Zerial, Michele Solimena, Jochen
Rink, Pavel Tomancak, Loic Royer, Flo-
rian Jug, and Eugene W. Myers. Content-
aware image restoration: pushing the limits
of ﬂuorescence microscopy. Nature Methods,
15(12):1090–1097, 2018.

gene W. Myers, and Philipp J. Keller. Adap-
tive light-sheet microscopy for long-term,
high-resolution imaging in living organ-
isms. Nature Biotechnology, 34(12):1267–
1278, 2016.

[9] Pauli Virtanen, Ralf Gommers, Travis E.
Oliphant, Matt Haberland, Tyler Reddy,
David Cournapeau, Evgeni Burovski, Pearu
Peterson, Warren Weckesser,
Jonathan
Bright, Stfan J. van der Walt, Matthew
Brett, Joshua Wilson, K. Jarrod Mill-
man, Nikolay Mayorov, Andrew R.J. Nel-
son, Eric Jones, Robert Kern, Eric Lar-
son, C. J. Carey,
lhan Polat, Yu Feng,
Eric W. Moore, Jake VanderPlas, De-
nis Laxalde, Josef Perktold, Robert Cim-
rman,
Ian Henriksen, E. A. Quintero,
Charles R. Harris, Anne M. Archibald,
Antnio H. Ribeiro, Fabian Pedregosa, Paul
van Mulbregt, Aditya Vijaykumar, Alessan-
dro Pietro Bardelli, Alex Rothberg, Andreas
Hilboll, Andreas Kloeckner, Anthony Sco-
patz, Antony Lee, Ariel Rokem, C. Nathan
Woods, Chad Fulton, Charles Masson,
Christian H¨aggstr¨om, Clark Fitzgerald,
David A. Nicholson, David R. Hagen,
Dmitrii V. Pasechnik, Emanuele Olivetti,
Eric Martin, Eric Wieser, Fabrice Silva, Fe-
lix Lenders, Florian Wilhelm, G. Young,
Gavin A. Price, Gert Ludwig Ingold, Gre-
gory E. Allen, Gregory R. Lee, Herv Au-
Irvin Probst, Jrg P. Dietrich, Ja-
dren,
cob Silterra, James T. Webber, Janko
Slaviˇc, Joel Nothman, Johannes Buchner,
Johannes Kulick, Johannes L. Sch¨onberger,
Jos Vincius de Miranda Cardoso, Joscha
Reimer, Joseph Harrington, Juan Luis Cano
Rodr´ıguez,
Justin
Kuczynski, Kevin Tritz, Martin Thoma,
Matthew Newville, Matthias K¨ummerer,
Maximilian Bolingbroke, Michael Tartre,
Mikhail Pak, Nathaniel J. Smith, Niko-
lai Nowaczyk, Nikolay Shebanov, Olek-
sandr Pavlyk, Per A. Brodtkorb, Perry Lee,
Robert T. McGibbon, Roman Feldbauer,
Sam Lewis, Sam Tygier, Scott Sievert, Se-
bastiano Vigna, Stefan Peterson, Surhud
More, Tadeusz Pudlik, Takuya Oshima,
Thomas J. Pingel, Thomas P. Robitaille,
Thomas Spura, Thouis R. Jones, Tim Cera,

Juan Nunez-Iglesias,

4

