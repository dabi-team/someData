Identifying Algorithm Names in Code Comments

Jakapong Klainongsuangb, Yusuf Sulistyo Nugrohoa, Hideaki Hataa, Bundit
Manaskasemsakb, Arnon Rungsawangb, Pattara Leelapruteb, Kenichi Matsumotoa

aNara Institute of Science and Technology, Japan
bKasetsart University, Thailand

9
1
0
2

l
u
J

0
1

]
E
S
.
s
c
[

1
v
7
5
5
4
0
.
7
0
9
1
:
v
i
X
r
a

Abstract

For recent machine-learning-based tasks like API sequence generation, comment generation,
and document generation, large amount of data is needed. When software developers imple-
ment algorithms in code, we ﬁnd that they often mention algorithm names in code comments.
Code annotated with such algorithm names can be valuable data sources. In this paper, we
propose an automatic method of algorithm name identiﬁcation. The key idea is extracting
important N-gram words containing the word ‘algorithm’ in the last. We also consider part
of speech patterns to derive rules for appropriate algorithm name identiﬁcation. The result
of our rule evaluation produced high precision and recall values (more than 0.70). We apply
our rules to extract algorithm names in a large amount of comments from active FLOSS
projects written in seven programming languages, C, C++, Java, JavaScript, Python, PHP,
and Ruby, and report commonly mentioned algorithm names in code comments.

Keywords: Code comments, Algorithms, FLOSS, N-gram IDF

1. Introduction

The importance of annotated data is increasing for various machine-learning-based tasks,
such as generating API sequences [1], comment generation [2], pseudo-code generation [3],
and document generation [4, 5]. For preparing annotated data, manual annotation is con-
sidered to be an eﬀective approach for high quality data (for example, collecting code and
comment pairs [3]). However, because of required human eﬀort, increasing annotated data
is costly and not easy. For automating preparation of annotated data, Yin et al. proposed
a method to mine aligned code and natural language pairs from Stack Overﬂow [6].

In this paper, we focus on algorithms as annotations of code.

In the ﬁeld of mathe-
matics and computer science, algorithms denote one of the main subjects of study that are
used to processing a set of input data to obtain the output, operating computation, or even
automatically ﬁnishing the task of reasoning1. Indeed, they are very essential due to their
problem-independence but obscure in control strategy applications, or the programming lan-
guage allocation as well [7]. Toward automatically preparing code annotated with algorithm
names, this paper addresses identifying algorithm names in code comments. To the best of
our knowledge, this is the ﬁrst study of mining algorithm names from code comments.

1https://en.wikipedia.org/wiki/Algorithm

Preprint submitted to The Journal of Systems and Software

March 8, 2021

 
 
 
 
 
 
Listing 1: A code comment containing an algorithm name (Insertion Sort algorithm)

Sorts the array of size count using comparator lessThan using an Insertion
Sort algorithm.

To explain the design of implemented code, we ﬁnd that developers sometimes explicitly
mention algorithm names in the associated code. Listing 1 shows an example of the algorithm
provision inline with a code comment2. The comment mentions the name of the algorithm,
insertion Sort algorithm.

In this paper, we propose a method of identifying algorithm names and report the fre-
quencies of algorithm names appear in code comments of free/libre and open source software
(FLOSS). The key idea of our identiﬁcation is extracting important N-gram words contain-
ing the word ‘algorithm’ in the last. We also consider part of speech patterns to derive rules
for appropriate algorithm name identiﬁcation. The result of our rule evaluation produced
high precision and recall values (more than 0.70). We apply our rules to extract algorithm
names in a large amount of comments from active FLOSS projects written in seven program-
ming languages, C, C++, Java, JavaScript, Python, PHP, and Ruby, and report commonly
mentioned algorithm names in code comments.

Our contributions can be summarized as follows.

• We propose a method to identify algorithm names in code comments.

• Proposed method is manually evaluated with preliminary data containing 1,581 iden-

tiﬁed N-gram terms and 458 summarized distinct N-gram terms.

• By applying our method to large-scale FLOSS data, we report commonly used algo-
rithms in for seven languages (C, C++, Java, JavaScript, Python, PHP, and Ruby).

2. Algorithm Name Identiﬁcation

2.1. Overview

In this section, we give an overview of our proposed method. Fig. 1 shows the main steps
of our method. In this study, we obtained the preliminary code comment data from FLOSS
projects hosted in GitHub to create rules to identify the algorithm names.

From code comments, we extract word terms using N-gram IDF similar to the study [8].
First, to identify the algorithm name, we obtain N-gram terms containing keywords ‘algo-
rithm’ in the last position (e.g. quick sort algorithm, search algorithm). Second, the part
of speech (POS) tagging process is applied for all code comments. Finally, we subsequently
remove the unnecessary words in head position of the N-gram word terms by considering
POS tags. With the above process, We create Inclusive and Exclusive criteria to identify
appropriate algorithm names.

As the processes show, we do not target algorithm names that do not include ‘algorithm’
in the bottom. We consider this makes our identiﬁcation method precise by ignoring inap-
propriate terms including words similar to algorithm names. In addition, our method do not
need a list of algorithm names, which make our method robust.

2https://github.com/servo/skia/blob/v0.30000019.0/src/core/SkTSort.h#L95

2

Figure 1: Overview of our FLOSS in creating the rule

2.2. Text Preprocessing, N-gram Extraction, and POS tagging

To create our inclusive and exclusive criteria, we use our preliminary data of code com-
ments containing the keywords of the algorithms from two repositories of C programming
language (i.e. gecko-dev and linux). Special characters such as ‘*’, ‘#’, ‘/’ were removed
and the part of speech to all code comments were tagged using the spacy library [9].

We applied N-gram IDF, a theoretical extension of Inverse Document Frequency (IDF)
introduced by Shirakawa [10, 11], to capture N-gram terms and obtained terms that contain
‘algorithm’ in the last position. Each N-gram word terms were then searched in all code
comments. If they match the words in each comment, they will be tagged with the same
part of speech.

2.3. Remove Unnecessary Words and Summarize Same N-gram Terms

In this step, we recursively remove the unnecessary words shown in Table 1 in the head
position, as those words cannot be algorithm names. If in a single comment contains the
terms of “quick sort algorithm”, we can extract both sort algorithm and quick sort algorithm.
In this case we select the longest one, “quick sort algorithm”.

Table 1: Unnecessary words in the head position

Part of speech Description
VERB ADP
ADP
NUM
DET

verb with conjunction, subordinating or preposition
conjunction, subordinating or preposition
number
determine

Because the same N-gram word terms can be tagged in diﬀerent part of speech depend
on the position of the words in each code comment, we summarize them by the majority of
part of speech. Table 2 shows “sort algorithm” from four diﬀerent code comments. There are
three terms tagged as NOUN NOUN while the last one is tagged as VERB NOUN. Because
the sorting algorithm has a majority of 3 out of 4 candidate parts of speech, thus we set the
majority of sort algorithm as NOUN NOUN. Meanwhile, the term “blur algorithm” has no
majority in this case, we ignore such algorithm name candidates.

3

Raw Code CommentsText ProcessingCode CommentsN-gram ExtractionN-gram TermsAlgorithm Terms ExtractionPOS TaggingCode Comments with POSSearch Terms in Code Comments and Extract POSRemove Unnecessary Words in Head Positions of TemsSummarize Same N-gram TermsRuleManual Inspect N-gram Terms with POSTable 2: Example of N-gram terms and their part of speech

N-gram term Part of speech
NOUN NOUN
sort algorithm
NOUN NOUN
sort algorithm
NOUN NOUN
sort algorithm
VERB NOUN
sort algorithm
NOUN NOUN
blur algorithm
ADJ NOUN
blur algorithm

2.4. Creating Rules

In this step, we classify the N-gram word terms using POS tag and manually create
identiﬁcation rules. We focus only on the reliable N-gram word terms; terms that do not
have majority nor the number of candidate is 1 are excluded. We manually veriﬁed correct
algorithm names or not for all obtained algorithm name candidates in the preliminary data
and labeled valid or invalid.

If the number of valid algorithm name in the part of speech is larger than the invalid one,
it will be included in the Inclusive rule sets. Otherwise, if the number of valid algorithm
name in the part of speech is lesser than the invalid, this will be considered to be an Exclusive
rule. Inclusive rule means the unlabeled term is marked as a valid algorithm name, while
the exclusive rule means the unlabeled term is assigned as an invalid algorithm name.

Next, we build a program to implement the rule automatically with bigger data. The
procedure we used in the code is shown in Algorithm 1 with the all created rules. Description
of part of speech is shown in Table 3.

Table 3: Description of Part of Speech

Part of speech Description
VERB
VERB(-ing)
NOUN
PART
CONJ
ADJ
ADV

verb
verb end with suﬃx “ing”
noun
particle
conjunction, coordinating
adjective
adverb

3. Identiﬁcation Evaluation with Preliminary Data

In this section, we evaluate our method shown in Algorithm 1 with the preliminary data.
One of the authors manually created an oracle of all algorithm name candidates with valid
and invalid labels. All algorithm name candidates in the preliminary data are classiﬁed into
valid or invalid with our method and are compared with the oracle. We present Precision,
Recall, and F-measure in Table 4. Precision measures accuracy of Algorithm 1 to to correctly
identify valid algorithm names. Recall is the fraction of the valid algorithm name that are
successfully retrieved. F-measure is the harmonic mean of Precision and Recall. We obtained
considerably high accuracy (more than 0.7 in Precision, Recall, and F-measure).

4

return valid

return valid

return valid

return valid

return invalid

return invalid

return invalid

if P OS = ADJ ADJ NOUN then

else if P OS is included DET then

else if P OS is included CONJ then

else if P OS is included VERB then

else if P OS = ADJ NOUN NOUN then

else if P OS is included only ADJ and NOUN then

else if P OS = VERB ADJ NOUN NOUN NOUN then

POS ← part of speech of unlabeled term
if P OS is included only NOUN then

if P OS = VERB(-ing) NOUN then
else if P OS = NOUN VERB NOUN then

Algorithm 1 Algorithm Name Identiﬁcation
1: procedure rule checking (part of speech of unlabeled term)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34:
35:
36:
37:
38:
39:
40:
41:

else if P OS is included ADV then
if P OS = ADV NOUN then

else if P OS = ADV ADJ ADJ NOUN NOUN then

else if P OS = ADJ NOUN ADJ NOUN then

else if P OS = ADJ ADJ NOUN NOUN then

else if P OS = ADV ADJ ADJ NOUN then

else if P OS = NOUN ADJ NOUN then

else if P OS = ADV PART NOUN then

else if P OS is included ADP then

if P OS = ADV ADP NOUN then

return invalid

return invalid

return invalid

return valid

return valid

return valid

return valid

return valid

return valid

return valid

return valid

return valid

5

Table 4: Performance of algorithm name identiﬁcation

Metric
Precision
Recall
F-measure

Score
0.76
0.70
0.73

4. Applying to Large-scale FLOSS Data

There are some Web articles indicating that developers and students are interested in
knowing important algorithms [12, 13, 14]. Although there are such interests in understand-
ing algorithm usages in practice, there is no empirical study for algorithm uses in FLOSS as
far as we know.

To investigate the frequencies of algorithm names in FLOSS code comments, we collect
repositories in GitHub that have more than 500 commits in entire histories, and at least
100 commits in the most active two years, which is set to ignore long-term inactive projects
and very short term active projects (university classes, for example). Code comments are
extracted from those identiﬁed repositories: C 2,771, C++ 3,563, Java 4,995, JavaScript
7,130, Python 5,263, Ruby 2,233, and PHP 3,279.

Table 5 is the obtained top 10 results after applying our rules by frequency (the numbers
below algorithm names). In the 70 algorithm names, identiﬁed 15 names were not appro-
priate algorithm names, such as “learning algorithm”, “following algorithm”, and “legacy
algorithm”, which is 0.786 (55/70) precision. Since we can immediately observe such inap-
propriate algorithm names, we exclude them in the results.

Table 5: Top ranked algorithms found in seven programming languages. The term ‘algorithm’ is abbreviated.

Programming Language

PHP

C

Cpp

JavaScript

Rank

1

2

3

4

5

6

7

8

9

10

Java

Search
3,142
Optimization
493

Ruby

Encryption
537
Compression
22

Neighbour search Audionormalizationsettings

454
Estimation
451
Signature
379
Sorting
377
Encryption
370
Binary search
266
Stemming
238
Hash
223

22
Hash
15
Search
12
Kex
12
Serverside encryption
10
Tarjans
9
Matching
9
Signature
5

Python

Nagles
123
Signature
119
SBO
86
Parsing
74
Hashing
70
Exchange
67
Encryption
66

Encryption
213
RC4
206
Fragment parsing
157
Search
137
Depthﬁrst search
87
Ordering
84
Signing
51

Generation Header canonicalization

61
Nagle
56
Matching
55

51
Body canonicalization
51
Canonicalization
50

Hash
3,193
Compression
2,592
Scheduling
2,472
Sfrcacc
2,363
Search
1,939
Encryption
1,774
Auth
1,397
Rate control
1,340
Public key
1,073
Authentication
1,070

Compression
925
Unicode Bidirectional
711
Slow iterative
597
Sorting
523
Dct
448
Hash
428
MD5
415
LLM
410
Euclids
391
Clipping
389

Ordering
799
Sort
599
Diﬀ
534
Parsing
513
Ritters
448
O(nd) Diﬀerence
448
Search
406
Clipping
351
Iteration
322
Ray casting
284

We see that words of search algorithm appear frequently in Java, Ruby, PHP, C, and
JavaScript. Encryption algorithms appear in Java, Ruby, Python, PHP, and C. In C pro-
gramming language, most of top 10 algorithm related to security. Some group of algorithms
such as search, parsing, hash, sorting are implemented in many programming languages.
PHP and JavaScript programming language have some algorithm related to Web.

6

Table 6 shows example of code comments including identiﬁed algorithm names as well as
programming languages, organization, repository, and ﬁle names. By extracting associated
code with the identiﬁed algorithm names, it seems possible to automatically collect annotated
code, in the future.

Table 6: Example of Results

Language, Organization/Repository, Filename Example of Comment
C,
dorimanx/Dorimanx-LG-G2-D802-Kerne,
wiﬁ.h
Ruby,
openshift/openshift-extras,
algorithms.rb
Java,
codenameone/CodenameOne,
BidiFormatter.java
C++,
hwine/test-mc-ma-cvs,
md5.cc
Python,
Andersh75/resurseﬀektivitet,
connectionpool.py
PHP,
DerDu/SPHERE-Framework,
tcpdf static.php
JavaScript,
CartoDB/d3.cartodb,
leaﬂet.js

/*Encryption Algorithm for Unicast Packet */

# Instantiates one of the Transport::Kex classes (based on the negotiated
# kex algorithm), and uses it to exchange keys. */

// The reason for this method name, as opposed to getFirstStrongDir(), is that
// “ﬁrst strong” is a commonly used description of Unicode’s estimation algorithm

/* This is the central step in the MD5 algorithm

# Enable Nagle’s algorithm for proxies, to avoid packet fragmentation.
# We cannot know if the user has added default socket options, so we cannot replace the
# list.
* Returns the input text encrypted using RC4 algorithm and the speciﬁed key.
* RC4 is the standard encryption algorithm used in PDF format

// ray casting algorithm for detecting if point is in polygon

5. Related Work

5.1. Beneﬁts of code comments

Some studies were undertaken to analyze the importance of code comments in maintain-
ing a software. According to Tenny [15], the comprehension of a programmer to acquire such
important information of a source code relies on the readability of the program. This is very
crucial in software maintenance. The more readable of a code, the easier the developers to
maintain the program. The experiment was designed by comparing the eﬀect of procedures
and code comments tested to more than 100 software engineering students. From the analy-
sis, it shows that code comments written by authors improve the ability to read the program.
It is more signiﬁcant if there are no procedures provide in the source code. Conversely, the
procedures aﬀect slightly to the readability of a program.

Similar work also performed by [16] in searching the advantage of comments in a code.
In this study, the authors analyzed the relationship between the types of modularization
and comments and the ability of programmers to comprehend the codes. Several questions
were asked to some programmers based on four diﬀerent modularization types (monolithic,
functional, super, and abstract data type) of the same program with and without comments.
The results of the observation indicate that programmers were easier to provide the answers
if the source code contains comments. Furthermore, the version of modularization which
makes the subjects able to perform better is the abstract data type.

7

5.2. Measurement of code comments

Hu et al.

[17] investigated the eﬀectiveness of the code comments used by developers.
They argued that comments in the code are very essential to guide the programmers to un-
derstand the source code and make them easier and faster to analyze the programs. However,
these comments are frequently incompatible, old-fashioned or even misplaced in a project.
By applying the NLP on FLOSS projects, the authors propose an automatic tool to gener-
ate comments for methods written in Java. The ﬁnding shows that the proposed method
surpasses the existing techniques with prominent divergent.

An analysis and assessment of code comment quality were also conducted by [18]. The
authors state that software developers rely on their understanding of the source code in
terms of development and maintenance. Nevertheless, their capabilities on the comprehen-
sion of the programs depend on how high the quality of the code comments. In the study,
the FLOSS taken to address the problems consists of comments classiﬁcation, quality model
development, model assessment, and validity evaluation. The study indicates that the pro-
posed method oﬀers the analysis more detail compared to the existing techniques on the
classiﬁcation of code comment.

6. Threats to Validity

Threats to the construct validity exist in our rule creation approach with the preliminary
data. Since rules were created only with the limited data, it may have limitations to gener-
alize. As seen in good precision from the result of large-scale data (Section 4), we consider
that the rules are robust and not limited to speciﬁc projects.

Threats to the external validity exist in our data preparation. Although we analyzed
a large amount of repositories on GitHub, we cannot generalize our ﬁndings to industry
nor open source projects in general; some of open source repositories are hosted outside of
GitHub, e.g., on GitLab or private servers. Further studies are required.

7. Conclusion

In this paper, we have presented a method to identify algorithm names from code com-
ment by creating rules using N-gram IDF and part of speech tagging. We ﬁnd major part
of speech of N-gram word terms by a majority of them. Our evaluation shows our method
accurately identify algorithm names in FLOSS code comments. In the future, we plan to
identify associated algorithm implementation code as well as algorithm names. Using such
data, we could try helping developers by recommending actual code implementing algorithms
from active FLOSS projects.

References

References

[1] X. Gu, H. Zhang, D. Zhang, S. Kim, Deep api learning,

in: Proceedings of the 2016
24th ACM SIGSOFT International Symposium on Foundations of Software Engineering,
FSE 2016, ACM, New York, NY, USA, 2016, pp. 631–642.

8

[2] S. Jiang, A. Armaly, C. McMillan, Automatically generating commit messages from diﬀs
using neural machine translation, in: Proceedings of the 32Nd IEEE/ACM International
Conference on Automated Software Engineering, ASE 2017, IEEE Press, Piscataway,
NJ, USA, 2017, pp. 135–146.

[3] Y. Oda, H. Fudaba, G. Neubig, H. Hata, S. Sakti, T. Toda, S. Nakamura, Learning
to generate pseudo-code from source code using statistical machine translation (t), in:
Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Soft-
ware Engineering (ASE), ASE ’15, IEEE Computer Society, Washington, DC, USA,
2015, pp. 574–584.

[4] E. Wong, J. Yang, L. Tan, Autocomment: Mining question and answer sites for au-
tomatic comment generation,
in: Proceedings of the 28th IEEE/ACM International
Conference on Automated Software Engineering, ASE’13, IEEE Press, Piscataway, NJ,
USA, 2013, pp. 562–567.

[5] D. Takata, A. Alhefdhi, M. Rungroj, H. Hata, H. K. Dam, T. Ishio, K. Matsumoto,
Catalogen: Generating catalogs of code examples collected from oss,
in: 2018 IEEE
Third International Workshop on Dynamic Software Documentation (DySDoc3), pp.
11–12.

[6] P. Yin, B. Deng, E. Chen, B. Vasilescu, G. Neubig, Learning to mine aligned code and
in: Proceedings of the 15th International
natural language pairs from stack overﬂow,
Conference on Mining Software Repositories, MSR ’18, ACM, New York, NY, USA,
2018, pp. 476–486.

[7] D. R. Smith, M. R. Lowry, Algorithm theories and design tactics, Science of Computer

Programming 14 (1990) 305 – 321.

[8] P. Terdchanakul, H. Hata, P. Phannachitta, K. Matsumoto, Bug or not? bug report
in: 2017 IEEE International Conference on Software

classiﬁcation using n-gram idf,
Maintenance and Evolution (ICSME), pp. 534–538.

[9] F. N. A. A. Omran, C. Treude, Choosing an nlp library for analyzing software docu-
mentation: A systematic literature review and a series of experiments, in: Proceedings
of the 14th International Conference on Mining Software Repositories, MSR ’17, IEEE
Press, Piscataway, NJ, USA, 2017, pp. 187–197.

[10] M. Shirakawa, T. Hara, S. Nishio, N-gram idf: A global term weighting scheme based
on information distance, in: Proceedings of the 24th International Conference on World
Wide Web, WWW ’15, International World Wide Web Conferences Steering Committee,
Republic and Canton of Geneva, Switzerland, 2015, pp. 960–970.

[11] M. Shirakawa, T. Hara, S. Nishio,

Idf for word n-grams, ACM Trans. Inf. Syst. 36

(2017) 5:1–5:38.

[12] R. Ojha, Top 7 algorithms and data structures

should
know about, https://www.hackerearth.com/blog/algorithms/top-7-algorithms-data-
structures-every-programmer-know/, 2015.

every programmer

9

[13] Quora, What are the top 10 algorithms every software engineer should know
by heart?, https://www.quora.com/What-are-the-top-10-algorithms-every-software-
engineer-should-know-by-heart, 2016.

[14] R. Ojha, Top 10 algorithms every software engineer

should know by heart,

https://www.freelancinggig.com/blog/2017/05/09/top-10-algorithms-every-software-
engineer-know-heart/, 2017.

[15] T. Tenny, Program readability: procedures versus comments, IEEE Transactions on

Software Engineering 14 (1988) 1271–1279.

[16] S. N. Woodﬁeld, H. E. Dunsmore, V. Y. Shen, The eﬀect of modularization and com-
ments on program comprehension, in: Proceedings of the 5th International Conference
on Software Engineering, ICSE ’81, IEEE Press, Piscataway, NJ, USA, 1981, pp. 215–
223.

[17] X. Hu, G. Li, X. Xia, D. Lo, Z. Jin, Deep code comment generation, in: Proceedings
of the 26th Conference on Program Comprehension, ICPC ’18, ACM, New York, NY,
USA, 2018, pp. 200–210.

[18] D. Steidl, B. Hummel, E. Juergens, Quality analysis of source code comments, in: 2013

21st International Conference on Program Comprehension (ICPC), pp. 83–92.

10

