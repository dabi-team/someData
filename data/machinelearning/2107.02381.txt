1
2
0
2

g
u
A
3
2

]

G
L
.
s
c
[

3
v
1
8
3
2
0
.
7
0
1
2
:
v
i
X
r
a

2LM-M LLR monomer v7: August 25, 2021

1

An Inverse QSAR Method Based on Linear Regression
and Integer Programming

Jianshen Zhu1, Naveed Ahmed Azam1, Kazuya Haraguchi1, Liang Zhao2, Hiroshi Nagamochi1
and Tatsuya Akutsu3

1. Department of Applied Mathematics and Physics, Kyoto University, Kyoto 606-8501, Japan
2. Graduate School of Advanced Integrated Studies in Human Survavibility (Shishu-Kan), Kyoto Univer-
sity, Kyoto 606-8306, Japan
3. Bioinformatics Center, Institute for Chemical Research, Kyoto University, Uji 611-0011, Japan

Abstract
Recently a novel framework has been proposed for designing the molecular structure of
chemical compounds using both artiﬁcial neural networks (ANNs) and mixed integer
linear programming (MILP). In the framework, we ﬁrst deﬁne a feature vector f (C) of
a chemical graph C and construct an ANN that maps x = f (C) to a predicted value
η(x) of a chemical property π to C. After this, we formulate an MILP that simulates
the computation process of f (C) from C and that of η(x) from x. Given a target value
y∗ of the chemical property π, we infer a chemical graph C† such that η(f (C†)) = y∗
by solving the MILP. In this paper, we use linear regression to construct a prediction
function η instead of ANNs. For this, we derive an MILP formulation that simulates
the computation process of a prediction function by linear regression. The results of
computational experiments suggest our method can infer chemical graphs with around
up to 50 non-hydrogen atoms.

Keywords: Machine Learning, Linear Regression, Integer Programming, Chemin-
formatics, Materials Informatics, QSAR/QSPR, Molecular Design.

1

Introduction

Background Analysis of chemical compounds is one of the important applications of intelligent
computing.
Indeed, various machine learning methods have been applied to the prediction of
chemical activities from their structural data, where such a problem is often referred to as quan-
titative structure activity relationship (QSAR) [1, 2]. Recently, neural networks and deep-learning
technologies have extensively been applied to QSAR [3].

In addition to QSAR, extensive studies have been done on inverse quantitative structure ac-
tivity relationship (inverse QSAR), which seeks for chemical structures having desired chemical
activities under some constraints. Since it is diﬃcult to directly handle chemical structures in both
QSAR and inverse QSAR, chemical compounds are usually represented as vectors of real or integer
numbers, which are often called descriptors in chemoinformatics and correspond to feature vectors
in machine learning. One major approach in inverse QSAR is to infer feature vectors from given
chemical activities and constraints and then reconstruct chemical structures from these feature
vectors [4, 5, 6], where chemical structures are usually treated as undirected graphs. However, the
reconstruction itself is a challenging task because the number of possible chemical graphs is huge.

 
 
 
 
 
 
2LM-M LLR monomer v7: August 25, 2021

2

For example, chemical graphs with up to 30 atoms (vertices) C, N, O, and S may exceed 1060 [7].
Indeed, it is NP-hard to infer a chemical graph from a given feature vector except for some simple
cases [8]. Due to this inherent diﬃculty, most existing methods for inverse QSAR do not guarantee
optimal or exact solutions.

As a new approach, extensive studies have recently been done for inverse QSAR using artiﬁcial
neural networks (ANNs), especially using graph convolutional networks [9]. For example, recurrent
neural networks [11, 12], variational autoencoders [10], grammar variational autoencoders [13], gen-
erative adversarial networks [14], and invertible ﬂow models [15, 16] have been applied. However,
these methods do not yet guarantee optimal or exact solutions.

G : class of chemical

  graphs

Stage 1

Stage 5

Stage 2

f : feature 
    function 

  1
*
  2
*

.
.
.

   (cid:842)

f(   *)
i

.
.
.

(cid:842)
f(    )

a: property 
    function 

 RK

x:=f(  )

h(x*)=y*
x* 

Stage 3
h: prediction 
        function 

R
a(  )
h(x)

y*

 input

ANN 

N

Stage 4

s: topological
  specification

   (cid:842)
g  :

   (cid:842)

no    *   G s.t.  

h(f(   *))=y*

x*

deliver

detect

output

C1:

C2:

function

h  
function f
graph constraints

MILP

M(g,x,y;C1,C2)

M(x,y;C1)

M(g,x;C2)

Figure 1: An illustration of a framework for inferring a set of chemical graphs C∗.

Framework Akutsu and Nagamochi [17] proved that the computation process of a given ANN can
be simulated with a mixed integer linear programming (MILP). Based on this, a novel framework
for inferring chemical graphs has been developed [18, 19], as illustrated in Figure 1. It constructs
a prediction function in the ﬁrst phase and infers a chemical graph in the second phase. The
ﬁrst phase of the framework consists of three stages. In Stage 1, we choose a chemical property
π and a class G of graphs, where a property function a is deﬁned so that a(C) is the value of
π for a compound C ∈ G, and collect a data set Dπ of chemical graphs in G such that a(C) is
available for every C ∈ Dπ. In Stage 2, we introduce a feature function f : G → RK for a positive
integer K. In Stage 3, we construct a prediction function η with an ANN N that, given a vector
x ∈ RK, returns a value y = η(x) ∈ R so that η(f (C)) serves as a predicted value to the real value
a(C) of π for each C ∈ Dπ. Given a target chemical value y∗, the second phase infers chemical
graphs C∗ with η(f (C∗)) = y∗ in the next two stages. We have obtained a feature function f and
a prediction function η and call an additional constraint on the substructures of target chemical
graphs a topological speciﬁcation. In Stage 4, we prepare the following two MILP formulations:
- MILP M(x, y; C1) with a set C1 of linear constraints on variables x and y (and some other

auxiliary variables) simulates the process of computing y := η(x) from a vector x; and

- MILP M(g, x; C2) with a set C2 of linear constraints on variable x and a variable vector g that
represents a chemical graph C (and some other auxiliary variables) simulates the process of

 
2LM-M LLR monomer v7: August 25, 2021

3

computing x := f (C) from a chemical graph C and chooses a chemical graph C that satisﬁes
the given topological speciﬁcation σ.

Given a target value y∗ ∈ R, we solve the combined MILP M(g, x, y; C1, C2) to ﬁnd a feature vector
x∗ ∈ RK and a chemical graph C† with the speciﬁcation σ such that f (C†) = x∗ and η(x∗) = y∗
(where if the MILP instance is infeasible then this suggests that there does not exist such a desired
chemical graph). In Stage 5, we generate other chemical graphs C∗ such that η(f (C∗)) = y∗ based
on the output chemical graph C†.

MILP formulations required in Stage 4 have been designed for chemical compounds with cycle
index 0 (i.e., acyclic) [19, 20], cycle index 1 [21] and cycle index 2 [22], where no sophisticated topo-
logical speciﬁcation was available yet. Azam et al. [20] introduced a restricted class of acyclic graphs
that is characterized by an integer ρ, called a “branch-parameter” such that the restricted class
still covers most of the acyclic chemical compounds in the database. Akutsu and Nagamochi [23]
extended the idea to deﬁne a restricted class of cyclic graphs, called “ρ-lean cyclic graphs” and in-
troduced a set of ﬂexible rules for describing a topological speciﬁcation. Recently, Tanaka et al. [26]
used a decision tree to construct a prediction function η in Stage 3 in the framework and derived
an MILP M(x, y; C1) that simulates the computation process of a decision tree.
Two-layered Model Recently Shi et al. [25] proposed a new model, called a two-layered model
for representing the feature of a chemical graph in order to deal with an arbitrary graph in the
framework and reﬁned the set of rules for describing a topological speciﬁcation so that a prescribed
structure can be included in both of the acyclic and cyclic parts of C. In the two-layered model, a
chemical graph C with a parameter ρ ≥ 1 is regarded as two parts: the exterior and the interior of
the hydrogen-suppressed chemical graph hCi obtained from C by removing hydrogen. The exterior
consists of maximal acyclic induced subgraphs with height at most ρ in hCi and the interior is
the connected subgraph of hCi obtained by ignoring the exterior. Shi et al. [25] deﬁned a feature
vector f (C) of a chemical graph C to be a combination of the frequency of adjacent atom pairs in
the interior and the frequency of chemical acyclic graphs among the set of chemical rooted trees
Tu rooted at interior-vertices u. Recently, Tanaka et al. [26] extend the model to treat a chemical
graph with hydrogens directly so that more variety of chemical rooted trees represent the feature
of the exterior.

Contribution In this paper, we ﬁrst make a slight modiﬁcation to a model of chemical graphs
proposed by Tanaka et al. [26] so that we can treat a chemical element with multi-valence such as
sulfur S and a chemical graph with cations and anions.

The quality of a prediction function η constructed in Stage 3 is one of the most important factors
in the framework. It is also pointed out that overﬁtting is a major issue in ANN-based approaches
for QSAR because ANNs have many parameters to be optimized [3]. Tanaka et al. [26] observed
that decision trees perform better than ANNs for some chemical properties and used a decision
tree for constructing a prediction function η in Stage 3. In this paper, we use linear regression
to construct a prediction function in Stage 3. Linear regression is much simpler than ANNs and
decision trees and thereby we regard the performance of a prediction function by linear regression
as the basis for other more sophisticated machine learning methods. In this paper, we derive an
MILP formulation M(x, y; C1) that simulates the computation process of a prediction function by
linear regression. For an MILP formulation M(g, x; C2) that represents a feature function f and a

2LM-M LLR monomer v7: August 25, 2021

4

speciﬁcation σ in Stage 4, we can use the same formulation proposed by Tanaka et al. [26] with a
slight modiﬁcation (the detail of the MILP M(g, x; C2) can be found in Appendix D). To generate
target chemical graphs C∗ in Stage 5, we can also use the dynamic programming algorithm due to
Tanaka et al. [26] with a slight modiﬁcation and omit the details in this paper.

We implemented the framework based on the reﬁned two-layered model and a prediction func-
tion by linear regression. The results of our computational experiments reveal a set of chemical
properties to which a prediction function constructed with linear regression on our feature function
performs well. We also observe that the proposed method can infer chemical graphs with up to 50
non-hydrogen atoms.

The paper is organized as follows. Section 2 introduces some notions on graphs, a modeling of
chemical compounds and a choice of descriptors. Section 3 describes our modiﬁcation to the two-
layered model. Section 4 reviews the idea of linear regression and formulates an MILP M(x, y; C1)
that simulates a process of computing a prediction function constructed by linear regression. Sec-
tion 5 reports the results on some computational experiments conducted for 18 chemical properties
such as vapor density and optical rotation. Section 6 makes some concluding remarks. Some tech-
nical details are given in Appendices: Appendix A for all descriptors in our feature function;
Appendix B for a full description of a topological speciﬁcation; Appendix C for the detail of test
instances used in our computational experiment for Stages 4 and 5; and Appendix D for the details
of our MILP formulation M(g, x; C2).

2 Preliminary

This section introduces some notions and terminologies on graphs, modeling of chemical compounds
and our choice of descriptors.

Let R, R+, Z and Z+ denote the sets of reals, non-negative reals, integers and non-negative
integers, respectively. For two integers a and b, let [a, b] denote the set of integers i with a ≤ i ≤ b.

Graph Given a graph G, let V (G) and E(G) denote the sets of vertices and edges, respectively.
For a subset V ′ ⊆ V (G) (resp., E′ ⊆ E(G)) of a graph G, let G − V ′ (resp., G − E′) denote the
graph obtained from G by removing the vertices in V ′ (resp., the edges in E′), where we remove
all edges incident to a vertex in V ′ in G − V ′. An edge subset E′ ⊆ E(G) in a connected graph
G is called separating (resp., non-separating) if G − E′ remains connected (resp., G − E′ becomes
disconnected). The rank r(G) of a graph G is deﬁned to be the minimum |F | of an edge subset
F ⊆ E(G) such that G − F contains no cycle, where r(G) = |E(G)| − |V (G)| + 1 for a connected
graph G. Observe that r(G−E′) = r(G)−|E′| holds for any non-separating edge subset E′ ⊆ E(G).
An edge e ∈ E(G) in a connected graph G is called a bridge if {e} is separating. For a connected
cyclic graph G, an edge e is called a core-edge if it is in a cycle of G or is a bridge e = u1u2 such
that each of the connected graphs Gi, i = 1, 2 of G − e contains a cycle. A vertex incident to a
core-edge is called a core-vertex of G. A path with two end-vertices u and v is called a u, v-path.
A vertex designated in a graph G is called a root. In this paper, we designate at most two
vertices as roots, and denote by Rt(G) the set of roots of G. We call a graph G rooted (resp.,
bi-rooted) if |Rt(G)| = 1 (resp., |Rt(G)| = 2), where we call G unrooted if Rt(G) = ∅.

2LM-M LLR monomer v7: August 25, 2021

5

For a graph G possibly with roots a leaf-vertex is deﬁned to be a non-root vertex v ∈ V (G) \
Rt(G) with degree 1, call the edge uv incident to a leaf vertex v a leaf-edge, and denote Vleaf(G)
and Eleaf(G) the sets of leaf-vertices and leaf-edges in G, respectively. For a graph or a rooted
graph G, we deﬁne graphs Gi, i ∈ Z+ obtained from G by removing the set of leaf-vertices i times
so that

G0 := G; Gi+1 := Gi − Vleaf(Gi),

where we call a vertex v ∈ Vleaf (Gk) a leaf k-branch and we say that a vertex v ∈ Vleaf(Gk) has
height height ht(v) = k in G. The height ht(T ) of a rooted tree T is deﬁned to be the maximum
of ht(v) of a vertex v ∈ V (T ). For an integer k ≥ 0, we call a rooted tree T k-lean if T has at
most one leaf k-branch. For an unrooted cyclic graph G, we regard the set of non-core-edges in G
induces a collection T of trees each of which is rooted at a core-vertex, where we call G k-lean if
each of the rooted trees in T is k-lean.

2.1 Modeling of Chemical Compounds

To represent a chemical compound, we introduce a set of chemical elements such as H (hydrogen),
C (carbon), O (oxygen), N (nitrogen) and so on. To distinguish a chemical element a with multiple
valences such as S (sulfur), we denote a chemical element a with a valence i by a(i), where we do
not use such a suﬃx (i) for a chemical element a with a unique valence. Let Λ be a set of chemical
elements a(i). For example, Λ = {H, C, O, N, P, S(2), S(4), S(6)}. Let val : Λ → [1, 6] be a valence
function. For example, val(H) = 1, val(C) = 4, val(O) = 2, val(P) = 5, val(S(2)) = 2, val(S(4)) = 4
and val(S(6)) = 6. For each chemical element a ∈ Λ, let mass(a) denote the mass of a.

A chemical compound is represented by a chemical graph deﬁned to be a tuple C = (H, α, β) of
a simple, connected undirected graph H and functions α : V (H) → Λ and β : E(H) → [1, 3]. The
set of atoms and the set of bonds in the compound are represented by the vertex set V (H) and the
edge set E(H), respectively. The chemical element assigned to a vertex v ∈ V (H) is represented
by α(v) and the bond-multiplicity between two adjacent vertices u, v ∈ V (H) is represented by
β(e) of the edge e = uv ∈ E(H). We say that two tuples (Hi, αi, βi), i = 1, 2 are isomorphic if
they admit an isomorphism φ, i.e., a bijection φ : V (H1) → V (H2) such that uv ∈ E(H1), α1(u) =
a, α1(v) = b, β1(uv) = m ↔ φ(u)φ(v) ∈ E(H2), α2(φ(u)) = a, α2(φ(v)) = b, β2(φ(u)φ(v)) = m.
When Hi is rooted at a vertex ri, i = 1, 2, (Hi, αi, βi), i = 1, 2 are rooted-isomorphic (r-isomorphic)
if they admit an isomorphism φ such that φ(r1) = r2.

For a notational convenience, we use a function βC : V (H) → [0, 12] for a chemical graph
C = (H, α, β) such that βC(u) means the sum of bond-multiplicities of edges incident to a vertex
u; i.e.,

βC(u) , X

uv∈E(H)

β(uv) for each vertex u ∈ V (H).

For each vertex u ∈ V (H), deﬁne the electron-degree eledegC(u) to be

eledegC(u) , βC(u) − val(α(u)).

For each vertex u ∈ V (H) and each chemical element a ∈ Λ, let degC(v; a) denote the number of
atoms with a adjacent to a vertex v in C.

2LM-M LLR monomer v7: August 25, 2021

6

For a chemical graph C = (H, α, β), let Va(C), a ∈ Λ denote the set vertices v ∈ V (H) such
that α(v) = a in C and deﬁne the hydrogen-suppressed chemical graph hCi to be the graph obtained
from H by removing all the vertices v ∈ VH(C).

-N
u1
u14

C

Pa2

w15
C

w1
C

O
w2

w3
O

S(6)

Pa1
C

C
u13

u3
C

u2
a8
a9
C
u4
u15

w4
C

C

w16

u24

O
Qu5
C
a11
u5
u6

a10

C

a16
N
u8

Pa3

u16
C

a14

a12

u7 u9
C
a13

O

u10
C
a15

w5

C

u27

O

Qu18
C

C
w17

u26
C

u25

u19
C

u17
C

u18

C

Pa4

C
w7

w8

O

w6N

w9
C

a6

C
a17

w12
-
O

w13
C

+
N
u28

C
w19

C
w14

P

O
w11

Qu22

C
u22

u21

C
u12
u11

u20
C

Pa5

C
w10

S(2)

u23

C
w18

Figure 2: An illustration of a hydrogen-suppressed chemical graph hCi obtained from a chemical
graph C with r(C) = 4 by removing all the hydrogens, where for ρ = 2, V ex(C) = {wi | i ∈ [1, 19]}
and V int(C) = {ui | i ∈ [1, 28]}.

3 Two-layered Model

This section reviews the two-layered model and describes our modiﬁcation to the model.

Let C = (H, α, β) be a chemical graph and ρ ≥ 1 be an integer, which we call a branch-

parameter.

A two-layered model of C is a partition of the hydrogen-suppressed chemical graph hCi into
an “interior” and an “exterior” in the following way. We call a vertex v ∈ V (hCi) (resp., an edge
e ∈ E(hCi)) of G an exterior-vertex (resp., exterior-edge) if ht(v) < ρ (resp., e is incident to an
exterior-vertex) and denote the sets of exterior-vertices and exterior-edges by V ex(C) and Eex(C),
respectively and denote V int(C) = V (hCi) \ V ex(C) and Eint(C) = E(hCi) \ Eex(C), respectively.
We call a vertex in V int(C) (resp., an edge in Eint(C)) an interior-vertex (resp., interior-edge).
The set Eex(C) of exterior-edges forms a collection of connected graphs each of which is regarded
as a rooted tree T rooted at the vertex v ∈ V (T ) with the maximum ht(v). Let T ex(hCi) denote
the set of these chemical rooted trees in hCi. The interior Cint of C is deﬁned to be the subgraph
(V int(C), Eint(C)) of hCi.

Figure 2 illustrates an example of a hydrogen-suppressed chemical graph hCi. For a branch-
parameter ρ = 2, the interior of the chemical graph hCi in Figure 2 is obtained by removing the set
of vertices with degree 1 ρ = 2 times; i.e., ﬁrst remove the set V1 = {w1, w2, . . . , w14} of vertices of
degree 1 in hCi and then remove the set V2 = {w15, w16, . . . , w19} of vertices of degree 1 in hCi − V1,
where the removed vertices become the exterior-vertices of hCi.

2LM-M LLR monomer v7: August 25, 2021

7

For each interior-vertex u ∈ V int(C), let Tu ∈ T ex(hCi) denote the chemical tree rooted at u
(where possibly Tu consists of vertex u) and deﬁne the ρ-fringe-tree C[u] to be the chemical rooted
tree obtained from Tu by putting back the hydrogens originally attached Tu in C. Let T (C) denote
the set of ρ-fringe-trees C[u], u ∈ V int(C). Figure 3 illustrates the set T (C) = {C[ui] | i ∈ [1, 28]}
of the 2-fringe-trees of the example C in Figure 2.

-

N
 [u1]
y4

C

C

C

C

H H
 [u2]
y11

H

H
 [u3]  [u4]
y6
y6

H
 [u5]
y6

C
 [u6]
y1

C
 [u7]
y1

N

H
 [u8]
y8

O
 [u9]
y2

C

H
 [u10]
y6

C
 [u11]
y1

C

C

C

C

C

P

C

H H
 [u16]
y11

H H
 [u17]
y11

 [u18]
y1

H
 [u19]
y6

H H
 [u20]
y11

O
C
 [u21]
y23

H
 [u22]
y6

S(2)

C

O

C

O
C
 [u23]
y26

C
 [u24]
y24

C

C

H

C
 [u12]
y15

H H
 [u13]
y11

C

C

C

C

H

O
C
 [u14]
y27

O

S(6)

H H

O
 [u15]
y19

+

N

O-

C

H
 [u25]
y6

H
 [u26]
y6

C

C
N
 [u27]
y25

C

C
 [u28]
y30

Figure 3: The set T (C) of 2-fringe-trees C[ui], i ∈ [1, 28] of the example C in Figure 2, where the
root of each tree is depicted with a gray circle and the hydrogens attached to non-root vertices are
omitted in the ﬁgure.

Feature Function The feature of an interior-edge e = uv ∈ Eint(C) such that α(u) = a,
deghCi(u) = d, α(v) = b, deghCi(v) = d′ and β(e) = m is represented by a tuple (ad, bd′, m), which
is called the edge-conﬁguration of the edge e, where we call the tuple (a, b, m) the adjacency-
conﬁguration of the edge e.

For an integer K, a feature vector f (C) of a chemical graph C is deﬁned by a feature function

f that consists of K descriptors. We call RK the feature space.

Tanaka et al. [26] deﬁned a feature vector f (C) ∈ RK to be a combination of the frequency
of edge-conﬁgurations of the interior-edges and the frequency of chemical rooted trees among the
set of chemical rooted trees C[u] over all interior-vertices u. In this paper, we introduce the rank
and the adjacency-conﬁguration of leaf-edges as new descriptors in a feature vector of a chemical
graph.

Topological Speciﬁcation A topological speciﬁcation is described as a set of the following rules
proposed by [25] and modiﬁed by Tanaka et al. [26]:

(i) a seed graph GC as an abstract form of a target chemical graph C;
(ii) a set F of chemical rooted trees as candidates for a tree C[u] rooted at each interior-vertex

u in C; and

(iii) lower and upper bounds on the number of components in a target chemical graph such as

chemical elements, double/triple bonds and the interior-vertices in C.

Figure 4(a) and (b) illustrate examples of a seed graph GC and a set F of chemical rooted
trees, respectively. Given a seed graph GC, the interior of a target chemical graph C is constructed

2LM-M LLR monomer v7: August 25, 2021

8

u1

a2

a1

a8
u3

u2

a9

u4
a10

a12

a3

a7

a11
u6

u7
a13

: E(＞2)={a1,a2,...,a5}

- 

: E(＞1)={a6}

- 

: E(0/1)={a7} 

: E(=1)={a8,a9,...,a17}

u5

a16
u8

u9

u10
a15

a14

a4

a17

u12

a5

a6

u11

u23

(a) A seed graph GC=(VC,EC) 

C

O

N

y1

y2

y3

-

N

y4

+

N

y5

C

O

N

S(2)

P

C

N

S(6)

P

H
y6

H
y7

H
y8

H
y9

H
y10

N

H H
H H
y11 y12
C

H H
y13

H H
y14
P

C

C

C

C

S(6)

C

H

C
y15

O

C

H H

C
y16

O

C

H H

C
y17

O
y18

O
y19

C
C
y20

C

C
y21

S(2)

C

C

C

H

C

C

H H

O
y22

C

C

C

O
y23

+

N

N

C

C

O-

C
y24

C

N
y25

C

O

C

O

C

C
y29
y26
(b) A set      of chemical rooted trees 

O
y28

y27

C

C

C
y30

Figure 4: (a) An illustration of a seed graph GC with r(GC) = 5 where the vertices in VC are
depicted with gray circles, the edges in E(≥2) are depicted with dotted lines, the edges in E(≥1) are
depicted with dashed lines, the edges in E(0/1) are depicted with gray bold lines and the edges in
E(=1) are depicted with black solid lines; (b) A set F = {ψ1, ψ2, . . . , ψ30} ⊆ F (Dπ) of 30 chemical
rooted trees ψi, i ∈ [1, 30], where the root of each tree is depicted with a gray circle, where the
hydrogens attached to non-root vertices are omitted in the ﬁgure.

from GC by replacing some edges a = uv with paths Pa between the end-vertices u and v and
by attaching new paths Qv to some vertices v. For example, a chemical graph C in Figure 2 is
constructed from the seed graph GC in Figure 4(a) as follows.
- First replace ﬁve edges a1 = u1u2, a2 = u1u3, a3 = u4u7, a4 = u10u11 and a5 = u11u12 in
GC with new paths Pa1 = (u1, u13, u2), Pa2 = (u1, u14, u3), Pa3 = (u4, u15, u16, u7), Pa4 =
(u10, u17, u18, u19, u11) and Pa5 = (u11, u20, u21, u22, u12), respectively to obtain a subgraph G1
of hCi.

- Next attach to this graph G1 three new paths Qu5 = (u5, u24), Qu18 = (u18, u25, u26, u27) and

Qu22 = (u22, u28) to obtain the interior of hCi in Figure 2.

- Finally attach to the interior 28 trees selected from the set F and assign chemical elements and
bond-multiplicities in the interior to obtain a chemical graph C in Figure 2. In Figure 3, XXX
Check the next again XXXX ψ1 ∈ F is selected for C[ui], i ∈ {6, 7, 11}. Similarly ψ2 for C[u9],
ψ4 for C[ui], i ∈ {3, 4, 5, 10, 18, 19, 22, 25, 26}, ψ5 for C[ui], i ∈ {2, 13, 16, 17, 20}, ψ7 for C[ui],
i ∈ {1, 8}, ψ9 for C[u12], ψ11 for C[u15], ψ13 for C[u21], ψ16 for C[u24], ψ17 for C[u27], ψ18 for
C[u14], ψ19 for C[u23] and ψ21 for C[u28].
Our deﬁnition of a topological speciﬁcation is analogous with the one by Tanaka et al. [26] except
for a necessary modiﬁcation due to the introduction of multiple valences of chemical elements,
cations and anions (see Appendix B for a full description of topological speciﬁcation).

2LM-M LLR monomer v7: August 25, 2021

9

4 Linear Regressions

For an integer p ≥ 1 and a vector x ∈ Rp, the j-th entry of x is denoted by x(j), j ∈ [1, p].

Let D be a data set of chemical graphs C with an observed value a(C) ∈ R, where we denote

by ai = a(Ci) for an indexed graph Ci.

Let f be a feature function that maps a chemical graph C to a vector f (C) ∈ RK where we
denote by xi = f (Ci) for an indexed graph Ci. For a prediction function η : RK → R, deﬁne an
error function

Err(η; D) , X
Ci∈D

(ai − η(f (Ci)))2 = X
Ci∈D

(ai − η(xi))2,

and deﬁne the coeﬃcient of determination R2(η, D) to be

R2(η, D) , 1 −

a)2 for
e
For a feature space RK, a hyperplane is deﬁned to be a pair (w, b) of a vector w ∈ RK and a
real b ∈ R. Given a hyperplane (w, b) ∈ RK+1, a prediction function ηw,b : RK → R is deﬁned by
setting

a =
e

a(C).

Err(η; D)
PCi∈D(ai −

1
|D| X
C∈D

ηw,b(x) , w · x + b = X

w(j)x(j) + b.

j∈[1,K]

We can observe that such a prediction function can be represented as an ANN with an input layer
with K nodes uj, j ∈ [1, K] and an output layer with a single node v such that the weight of edge
arc (uj, v) is set to be w(j), the bias of node u is set to be b and the activation function at node
u is set to be a linear function. However, a learning algorithm for an ANN may not ﬁnd a set
of weights w(j), j ∈ [1, K] and b that minimizes the error function, since the algorithm simply
iterates modiﬁcation of the current weights and biases until it terminates at a local optima in the
minimization.

We wish to ﬁnd a hyperplane (w, b) that minimizes the error function Err(ηw,b; D). In many
cases, a feature vector f contains descriptors that do not play an essential role in constructing
a good prediction function. When we solve the minimization problem, the entries w(j) for some
descriptors j ∈ [1, K] in the resulting hyperplane (w, b) become zero, which means that these
descriptors were not necessarily important for ﬁnding a prediction function ηw,b. It is proposed that
solving the minimization with an additional penalty term τ to the error function often results in a
more number of entries w(j) = 0, reducing a set of descriptors necessary for deﬁning a prediction
function ηw,b. For an error function with such a penalty term, a Ridge function 1
2|D| Err(ηw,b; D) +
λ[Pj∈[1,K] w(j)2 + b2] [27] and a Lasso function 1
2|D| Err(ηw,b; D) + λ[Pj∈[1,K] |w(j)| + |b|] [28] are
known, where λ ∈ R is a given real number.

Given a prediction function ηw,b, we can simulate a process of computing the output ηw,b(x)
for an input x ∈ RK as an MILP M(x, y; C1) in the framework. By solving such an MILP for
a speciﬁed target value y∗ , we can ﬁnd a vector x∗ ∈ RK such that ηw,b(x∗) = y∗. Instead of
specifying a single target value y∗, we use lower and upper bounds y∗, y∗ ∈ R on the value a(C)
of a chemical graph C to be inferred. We can control the range between y∗ and y∗ for searching a
chemical graph C by setting y∗ and y∗ to be close or diﬀerent values. A desired MILP is formulated
as follows.

2LM-M LLR monomer v7: August 25, 2021

10

M(x, y; C1): An MILP formulation for the inverse problem to prediction function

constants:
- A hyperplane (w, b) with w ∈ RK and b ∈ R;
- Real values y∗, y∗ ∈ R such that y∗ < y∗;
- A set IZ of indices j ∈ [1, K] such that the j-th descriptor dcpj(C) is always an integer;
- A set I+ of indices j ∈ [1, K] such that the j-th descriptor dcpj(C) is always non-negative;
- ℓ(j), u(j) ∈ R, j ∈ [1, K]: lower and upper bounds on the j-th descriptor;
variables:
- Non-negative integer variable x(j) ∈ Z+, j ∈ IZ ∩ I+;
- Integer variable x(j) ∈ Z, j ∈ IZ \ I+;
- Non-negative real variable x(j) ∈ Z+, j ∈ I+ \ IZ;
- Real variable x(j) ∈ Z, j ∈ [1, K] \ (IZ ∪ I+);
constraints:

ℓ(j) ≤ x(j) ≤ u(j), j ∈ [1, K],

y∗ ≤ X

w(j)x(j) + b ≤ y∗,

j∈[1,K]

(1)

(2)

objective function:
none.

The number of variables and constraints in the above MILP formulation is O(K). It is not

diﬃcult to see that the above MILP is an NP-hard problem.

The entire MILP for Stage 4 consists of the two MILPs M(x, y; C1) and M(g, x; C2) with no
objective function. The latter represents the computation process of our feature function f and a
given topological speciﬁcation. See Appendix D for the details of MILP M(g, x; C2).

2LM-M LLR monomer v7: August 25, 2021

11

5 Results

We implemented our method of Stages 1 to 5 for inferring chemical graphs under a given topological
speciﬁcation and conducted experiments to evaluate the computational eﬃciency. We executed
the experiments on a PC with Processor: Core i7-9700 (3.0 GHz; 4.7 GHz at the maximum) and
Memory: 16 GB RAM DDR4.

Results on Phase 1. We have conducted experiments of linear regression for 37 chemical
properties among which we report the following 18 properties to which the test coeﬃcient of de-
termination R2 attains at least 0.8: octanol/water partition coeﬃcient (Kow), heat of combustion
(Hc), vapor density (Vd), optical rotation (OptR), electron density on the most positive atom
(EDPA), melting point (Mp), heat of atomization (Ha), heat of formation (Hf), internal en-
ergy at 0K (U0), energy of lowest unoccupied molecular orbital (Lumo), isotropic polarizability
(Alpha), heat capacity at 298.15K (Cv), solubility (Sl), surface tension (SfT), viscosity (Vis),
isobaric heat capacities in liquid phase (IhcLiq), isobaric heat capacities in solid phase (IhcSol)
and lipophilicity (Lp).

We used data sets provided by HSDB from PubChem [29] for Kow, Hc, Vd and OptR,
M. Jalali-Heravi and M. Fatemi [30] for EDPA, Roy and Saha [31] for Mp, Ha and Hf, Molecu-
leNet [32] for U0, Lumo, Alpha, Cv and Sl, Goussard et al. [33] for SfT and Vis, R. Naef [34]
for IhcLiq and IhcSol, and Figshare [35] for Lp.

Properties U0, Lumo, Alpha and Cv share a common original data set D∗ with more than
130,000 compounds, and we used a set Dπ of 1,000 graphs randomly selected from D∗ as a common
data set of these four properties π in this experiment.

We implemented Stages 1, 2 and 3 in Phase 1 as follows.

Stage 1. We set a graph class G to be the set of all chemical graphs with any graph structure,
and set a branch-parameter ρ to be 2.

For each of the properties, we ﬁrst select a set Λ of chemical elements and then collect a data
set Dπ on chemical graphs over the set Λ of chemical elements. To construct the data set Dπ, we
eliminated chemical compounds that do not satisfy one of the following: the graph is connected,
the number of carbon atoms is at least four, and the number of non-hydrogen neighbors of each
atom is at most 4.

Table 1 shows the size and range of data sets that we prepared for each chemical property in

Stage 1, where we denote the following:
- Λ: the set of elements used in the data set Dπ; Λ is one of the following 11 sets: Λ1 = {H, C, O};

Λ2 = {H, C, O, N}; Λ3 = {H, C, O, S(2)}; Λ4 = {H, C, O, Si};
Λ5 = {H, C, O, N, Cl, P(3), P(5)}; Λ6 = {H, C, O, N, S(2), F}; Λ7 = {H, C, O, N, S(2), S(6), Cl}; Λ8 =
{H, C(2), C(3), C(4), O, N(2), N(3)}; Λ9 = {H, C, O, N, S(2), S(4), S(6), Cl};
Λ10 = {H, C(2), C(3), C(4), C(5), O, N(1), N(2), N(3), F}; and
Λ11 = {H, C(2), C(3), C(4), O, N(2), N(3), S(2), S(4), S(6), Cl}, where e(i) for a chemical element e and an
integer i ≥ 1 means that a chemical element e with valence i.

- |Dπ|: the size of data set Dπ over Λ for the property π.
- n, n: the minimum and maximum values of the number n(C) of non-hydrogen atoms in com-

pounds C in Dπ.

2LM-M LLR monomer v7: August 25, 2021

12

- a, a: the minimum and maximum values of a(C) for π over compounds C in Dπ.
- |Γ|: the number of diﬀerent edge-conﬁgurations of interior-edges over the compounds in Dπ.
- |F |: the number of non-isomorphic chemical rooted trees in the set of all 2-fringe-trees in the

compounds in Dπ.

- K: the number of descriptors in a feature vector f (C).

Stage 2. We used the new feature function deﬁned in our chemical model without suppressing
hydrogen (see Appendix A for the detail). We standardize the range of each descriptor and the
range {t ∈ R | a ≤ t ≤ a} of property values a(C), C ∈ Dπ.

Stage 3. For each chemical property π, we select a penalty value λπ in the Lasso function from
36 diﬀerent values from 0 to 100 by conducting linear regression as a preliminary experiment.

We conducted an experiment in Stage 3 to evaluate the performance of the prediction function
based on cross-validation. For a property π, an execution of a cross-validation consists of ﬁve trials
of constructing a prediction function as follows. First partition the data set Dπ into ﬁve subsets
D(k), k ∈ [1, 5] randomly. For each k ∈ [1, 5], the k-th trial constructs a prediction function η(k)
by conducting a linear regression with the penalty term λπ using the set Dπ \ D(k) as a training
data set. We used scikit-learn version 0.23.2 with Python 3.8.5 for executing linear regression with
Lasso function. For each property, we executed ten cross-validations and we show the median of
test R2(η(k), D(k)), k ∈ [1, 5] over all ten cross-validations. Recall that a subset of descriptors is
selected in linear regression with Lasso function and let K ′ denote the average number of selected
descriptors over all 50 trials. The running time per trial in a cross-validation was at most one
second.

Table 1 shows the results on Stages 2 and 3, where we denote the following:

- λπ: the penalty value in the Lasso function selected for a property π, where aEb means a × 10b.
- K ′: the average of the number of descriptors selected in the linear regression over all 50 trials

in ten cross-validations.

- test R2: the median of test R2 over all 50 trials in ten cross-validations.

Recall that the adjacency-conﬁguration for leaf-edges was introduced as a new descriptor in
this paper. Without including this new descriptor, the test R2 for property Vis was 0.790, that
for Lumo was 0.799 and that for Mp was 0.796, while the test R2 for each of the other properties
in Table 1 was almost the same.

From Table 1, we observe that a relatively large number of properties admit a good prediction
function based on linear regression. The number K ′ of descriptors used in linear regression is
considerably small for some properties. For example of property Vd,

the four descriptors most frequently selected in the case of Λ = {H, O, C, N} are the number
of non-hydrogen atoms; the number of interior-vertices v with degCint(v) = 1; the number
of fringe-trees r-isomorphic to the chemical rooted tree ψ1 in Figure 5; and the number of
leaf-edges with adjacency-conﬁguration (O, C, 2).

the eight descriptors most frequently selected in the case of Λ = {H, O, C, N, Cl, P(3), P(5)} are
the number of non-hydrogen atoms; the number of interior-vertices v with degCint(v) = 1;
the number of exterior-vertices v with α(v) = Cl; the number of interior-edges with edge-

2LM-M LLR monomer v7: August 25, 2021

13

Table 1: Results in Phase 1.

π

Λ

|Dπ|

n, n

a, a

|Γ|

|F | K

λπ

K ′

test R2

Mp
Ha
Hf
U0

Kow
Kow
Hc
Hc
Vd
Vd

Λ2
Λ9
Λ2
Λ7
Λ2
Λ5
OptR Λ2
OptR Λ6
EDPA Λ1
Λ2
Λ3
Λ1
Λ10
Lumo Λ10
Alpha Λ10
Λ10
Λ9
Λ4
Λ4
IhcLiq Λ2
IhcLiq Λ7
IhcSol Λ8
IhcSol Λ11
Λ2
Λ9

Cv
Sl
SfT
Vis

Lp
Lp

684
899
255
282
474
551
147
157
52
467
115
82
977
977
977
977
915
247
282
770
865
581
668
615
936

4, 58
4, 69
4, 63
4, 63
4, 30
4, 30
5, 44
5, 69
11, 16
4, 122
4, 11
4, 16
4, 9
4, 9
4, 9
4, 9
4, 55
5, 33
5, 36
4, 78
4, 78
5, 70
5, 70
6, 60
6, 74

-7.5, 15.6
-7.5, 15.6
49.6, 35099.6
49.6, 35099.6
0.7, 20.6
0.7, 20.6
-117.0, 165.0
-117.0, 165.0
0.80, 3.76
-185.33, 300.0
1100.6, 3009.6
30.2, 94.8
-570.6, -272.8
-0.11, 0.10
50.9, 99.6
19.2, 44.0
-11.6, 1.11
12.3, 45.1
-0.64, 1.63
106.3, 1956.1
106.3, 1956.1
67.4, 1220.9
67.4, 1220.9
-3.62, 6.84
-3.62, 6.84

25
37
17
21
21
24
21
25
9
23
8
5
59
59
59
59
42
11
12
23
29
33
40
32
44

166
219
106
118
160
191
55
62
33
142
83
50
190
190
190
190
207
91
88
200
246
124
140
116
136

223
303
154
177
214
256
107
123
64
197
115
74
297
297
297
297
300
128
126
256
316
192
228
186
231

6.4E−5
5.5E−5
1.9E−4
1.9E−4
1.0E−3
5.5E−4
4.6E−4
7.3E−4
1.0E−4
3.7E−5
3.7E−5
1.0E−4
1.0E−7
6.4E−5
1.0E−5
1.0E−5
7.3E−5
6.4E−4
8.2E−4
1.9E−5
8.2E−6
2.8E−5
2.8E−5
1.0E−4
6.4E−5

80.3
112.1
19.2
20.5
3.6
8.0
39.2
41.7
10.9
82.5
39.0
34.0
246.7
133.9
125.5
165.3
130.6
20.9
16.3
82.2
139.1
75.9
86.7
98.5
130.4

0.953
0.927
0.946
0.951
0.927
0.942
0.823
0.825
0.999
0.817
0.997
0.987
0.999
0.841
0.961
0.961
0.808
0.804
0.893
0.987
0.986
0.985
0.982
0.856
0.840

conﬁguration γi, i = 1, 2, where γ1 = (C2, C2, 2) and γ2 = (C3, C4, 1); and the number of
fringe-trees r-isomorphic to the chemical rooted tree ψi, i = 1, 2, 3 in Figure 5.

2LM-M LLR monomer v7: August 25, 2021

14

C

H

y2

C

C

O

C

C

H

H H

H H

y1

O

C

C

H H

H

HH
y3

Figure 5: An illustration of chemical rooted trees ψ1, ψ1 and ψ3 that are selected in Lasso linear
regression for constructing a prediction function to property Vd, where the root is depicted with
a gray circle.

2LM-M LLR monomer v7: August 25, 2021

15

Results on Phase 2. To execute Stages 4 and 5 in Phase 2, we used a set of seven instances Ia,
I i
b, i ∈ [1, 4], Ic and Id based on seed graphs prepared by Shi et al. [25]. We here present their seed
graphs GC (see Appendix B for the details of Ia and Appendix C for the details of I i
b, i ∈ [1, 4], Ic
and Id). The seed graph GC of instance Ia is given by the graph in Figure 4(a). The seed graph
b and Id (resp., I i
G1

b, i = 2, 3, 4) is illustrated in Figure 6.

C, i = 2, 3, 4) of instances I 1

C (resp., Gi

u1

a1

a2

1
(i) GC

u2

u1

a1

a4

a3

u2

u3

2
(ii) GC

a2

a5

u4

u1

a1

a4

a2

a3

u3

u2

3
(iii) GC

u4

u1

a5

a4

a1

a2

a3

u3
u2
4
(iv) GC

u4

a5

Figure 6: (i) Seed graph G1
(iv) Seed graph G4

C for I 4
b.

C for I 1

b and Id; (ii) Seed graph G2

C for I 2

b; (iii) Seed graph G3

C for I 3
b;

Instance Ic has been introduced in order to infer a chemical graph C† such that the core of C†
is equal to the core of chemical graph CA: CID 24822711 in Figure 7(a) and the frequency of each
edge-conﬁguration in the non-core of C† is equal to that of chemical graph CB: CID 59170444 in
Figure 7(b). This means that the seed graph GC of Ic is the core of CA which is indicated by a
shaded area in Figure 7(a).

Instance Id has been introduced in order to infer a chemical monocyclic graph C† such that the
frequency vector of edge-conﬁgurations in C† is a vector obtained by merging those of chemical
graphs CA: CID 10076784 and CB: CID 44340250 in Figure 7(c) and (d), respectively.

Stage 4. We executed Stage 4 for ﬁve properties π ∈ {Hc, Vd, OptR, IhcLiq, Vis}.

For the MILP formulation M(x, y; C1) in Section 4, we use the prediction function ηw,b that
attained the median test R2 in Table 1. To solve an MILP in Stage 4, we used CPLEX version 12.10.
Tables 2 to 6 show the computational results of the experiment in Stage 4 for the ﬁve properties,
where we denote the following:
- y∗, y∗:

lower and upper bounds y∗, y∗ ∈ R on the value a(C) of a chemical graph C to be

inferred;

- #v (resp., #c): the number of variables (resp., constraints) in the MILP in Stage 4;
- I-time: the time (sec.) to solve the MILP in Stage 4;
- n: the number n(C†) of non-hydrogen atoms in the chemical graph C† inferred in Stage 4; and
- nint: the number nint(C†) of interior-vertices in the chemical graph C† inferred in Stage 4;
- η(f (C†)): the predicted property value η(f (C†)) of the chemical graph C† inferred in Stage 4.
Figure 8(a) illustrates the chemical graph C† inferred from Ic with (y∗, y∗) = (13700, 13800) of

Hc in Table 2.

Figure 8(b) illustrates the chemical graph C† inferred from I 2

b with (y∗, y∗) = (21, 22) of Vd in

Table 3.

Figure 8(c) illustrates the chemical graph C† inferred from I 4

b with (y∗, y∗) = (70, 71) of OptR

in Table 4.

Figure 8(d) illustrates the chemical graph C† inferred from Id with (y∗, y∗) = (1190, 1210) of

IhcLiq in Table 5.

2LM-M LLR monomer v7: August 25, 2021

16

(a)    A: CID 24822711

(b)    B: CID 59170444

(c)    A: CID 10076784

(d)    B: CID 44340250

Figure 7: An illustration of chemical compounds for instances Ic and Id: (a) CA: CID 24822711;
(b) CB: CID 59170444; (c) CA: CID 10076784; (d) CB: CID 44340250, where hydrogens are
omitted.

Table 2: Results of Stages 4 and 5 for Hc.

inst.

y∗, y∗

#v

#c

I-time n nint

η(f (C†)) D-time

C-LB #C

Ia
I 1
b
I 2
b
I 3
b
I 4
b
Ic
Id

5950, 6050
5950, 6050
5950, 6050
5950, 6050
5950, 6050
13700, 13800
13700, 13800

9902
9404
11729
11510
11291
6915
5535

9255
6776
9891
9894
9897
7278
6781

4.6
1.7
16.7
16.3
9.0
0.7
4.9

44
36
50
47
49
50
44

25
10
25
25
26
33
23

5977.9
6007.1
6043.7
6015.4
5971.6
13703.3
13704.7

0.068
0.048
38.7
0.353
0.304
0.016
0.564

1
6
2.4×105
8724
84
1
4.3×105

1
6
100
100
84
1
100

Figure 8(e) illustrates the chemical graph C† inferred from I 3

b with (y∗, y∗) = (1.85, 1.90) of

2LM-M LLR monomer v7: August 25, 2021

17

Table 3: Results of Stages 4 and 5 for Vd.

inst.

y∗, y∗

#v

#c

I-time n nint

η(f (C†)) D-time

C-LB #C

Ia
I 1
b
I 2
b
I 3
b
I 4
b
Ic
Id

16, 17
16, 17
21, 22
21, 22
21, 22
21, 22
17, 18

9481
9928
12373
12159
11945
7073
5693

9358
6986
10101
10104
10107
7438
6942

1.6
1.5
10.0
6.5
8.1
0.7
2.1

38
35
48
48
48
50
41

23
12
25
25
25
34
23

16.83
16.68
21.62
21.95
21.34
21.89
17.94

0.070
0.206
0.104
3.65
0.057
0.016
0.161

1
48
20
8.6×105
6
1
216

1
48
20
100
6
1
100

Table 4: Results of Stages 4 and 5 for OptR.

inst.

y∗, y∗

#v

#c

I-time n nint

η(f (C†)) D-time

C-LB #C

Ia
I 1
b
I 2
b
I 3
b
I 4
b
Ic
Id

70, 71
70, 71
70, 71
70, 71
70, 71
-112, -111
70, 71

8962
9432
11818
11602
11386
6807
5427

9064
6662
9773
9776
9779
7170
6673

3.5
2.7
10.0
10.2
24.7
1.8
6.1

40
37
50
50
49
50
42

23
14
25
25
25
32
23

70.1
70.1
70.8
70.2
70.9
-111.9
70.2

0.061
0.185
0.041
0.241
6.39
0.016
0.127

1
2622
4
60
4.6×105
1
78768

1
100
4
60
100
1
100

Table 5: Results of Stages 4 and 5 for IhcLiq.

inst.

y∗, y∗

#v

#c

I-time n nint

η(f (C†)) D-time

C-LB #C

Ia
I 1
b
I 2
b
I 3
b
I 4
b
Ic
Id

1190, 1210
1190, 1210
1190, 1210
1190, 1210
1190, 1210
1190, 1210
1190, 1210

10180
10784
13482
13275
13128
7193
5813

9538
7191
10302
10301
10306
7560
7063

3.9
2.4
14.1
9.0
16.5
0.8
2.2

48
35
47
49
50
50
44

26
14
25
27
25
33
23

1208.5
1206.7
1206.7
1209.9
1208.4
1196.5
1198.8

0.071
0.082
0.11
0.090
0.424
0.016
5.63

2
12
12
24
2388
1
5.2×105

2
12
12
24
100
1
100

Vis in Table 6.

From Tables 2 to 6, we observe that an instance with a large number of variables and constraints
takes more running time than those with a smaller size in general. In this experiment, we prepared
instances Ia and Ic have restricted seed graphs, the other
several diﬀerent types of instances:

2LM-M LLR monomer v7: August 25, 2021

18

Table 6: Results of Stages 4 and 5 for Vis.

inst.

y∗, y∗

#v

#c

I-time n nint

η(f (C†)) D-time C-LB #C

Ia
I 1
b
I 2
b
I 3
b
I 4
b
Ic
Id

1.25, 1.30
1.25, 1.30
1.85, 1.90
1.85, 1.90
1.85, 1.90
2.75, 2.80
1.85, 1.90

6847
7270
8984
8741
8498
6813
5433

8906
6397
9512
9515
9518
7162
6665

1.3
2.5
8.9
16.2
8.1
1.0
2.7

38
36
45
45
45
50
41

22
15
25
26
25
33
23

1.295
1.272
1.879
1.880
1.851
2.763
1.881

0.042
0.155
0.149
0.137
0.13
0.025
0.138

2
140
288
4928
660
4
4608

2
100
100
100
100
4
100

(a)

(b)

(c)

(d)

(e)

(f)

Figure 8: (a) C† with η(f (C†)) = 13703.3 inferred from Ic with (y∗, y∗) = (13700, 13800) of
b with (y∗, y∗) = (21, 22) of Vd; (c) C† with
Hc; (b) C† with η(f (C†)) = 21.62 inferred from I 2
η(f (C†)) = 70.9 inferred from I 4
b with (y∗, y∗) = (70, 71) of OptR; (d) C† with η(f (C†)) = 1198.8
inferred from Id with (y∗, y∗) = (1190, 1210) of IhcLiq; (e) C† with η(f (C†)) = 1.880 inferred
from I 3
b with lower and upper bounds
on the predicted property value ηπ(f (C†)) of property π ∈ {Kow, Lp, Sl} in Table 7.

b with (y∗, y∗) = (1.85, 1.90) of Vis; (f) C† inferred from I 4

2LM-M LLR monomer v7: August 25, 2021

19

instances have abstract seed graphs and instances Ic and Id have restricted set of fringe-trees. All
instances in this experiment are solved in a few seconds to around 30 seconds with our MILP
formulation.

Inferring a chemical graph with target values in multiple properties Once we obtained
prediction functions ηπ for several properties π, it is easy to include MILP formulations for these
functions ηπ into a single MILP M(x, y; C1) so as to infer a chemical graph that satisﬁes given
target values y∗ for these properties at the same time. As an additional experiment in Stage 4, we
inferred a chemical graph that has a desired predicted value each of three properties Kow, Lp and
Sl, where we used the prediction function ηπ for each property π ∈ {Kow, Lp, Sl} constructed
in Stage 3. Table 7 shows the result of Stage 4 for inferring a chemical graph C† from instances
I 2
b, I 3
- π: one of the three properties Kow, Lp and Sl used in the experiment;
- y∗
π
property π ∈ {Kow, Lp, Sl} for a chemical graph C† to be inferred;

b with Λ = {H, C, N, O, S(2), S(6), Cl}, where we denote the following:

π ∈ R on the predicted property value ηπ(f (C†)) of

lower and upper bounds y∗
π

b and I 4

, y∗
π:

, y∗

- #v (resp., #c): the number of variables (resp., constraints) in the MILP in Stage 4;
- I-time: the time (sec.) to solve the MILP in Stage 4;
- n: the number n(C†) of non-hydrogen atoms in the chemical graph C† inferred in Stage 4;
- nint: the number nint(C†) of interior-vertices in the chemical graph C† inferred in Stage 4; and
- ηπ(f (C†)): the predicted property value ηπ(f (C†)) of property π ∈ {Kow, Lp, Sl} for the

chemical graph C† inferred in Stage 4.

Table 7: Results of Stage 4 for instance I i
Kow, Lp and Sl.

b, i = 2, 3, 4 with speciﬁed target values of three properties

inst.

π

y∗
π

, y∗
π

#v

#c

I-time n

nint

ηπ(f (C†))

I 2
b

I 3
b

I 4
b

Kow -7.50, -7.40
Lp
-1.40, -1.30
Sl
-11.6, -11.5
Kow -7.40, -7.30
Lp
-2.90, -2.80
Sl
-11.6, -11.4
Kow -7.50, -7.40
Lp
-0.70, -0.60
Sl
-11.4, -11.2

14574

11604

62.7

50

30

14370

11596

35.5

48

25

14166

11588

71.7

49

26

-7.41
-1.33
-11.52
-7.38
-2.81
-11.52
-7.48
-0.63
-11.39

π2) = (−0.70, −0.60) and (y∗
π3

Figure 8(f) illustrates the chemical graph C† inferred from I 4
, y∗
(y∗
π2
respectively.
Stage 5. We executed Stage 5 to generate a more number of target chemical graphs C∗, where
we call a chemical graph C∗ a chemical isomer of a target chemical graph C† of a topological

b with (y∗
π1) = (−7.50, −7.40),
π1
π3) = (−11.4, −11.2) for π1 =Kow, π2 =Lp and π3 =Sl,

, y∗

, y∗

2LM-M LLR monomer v7: August 25, 2021

20

speciﬁcation σ if f (C∗) = f (C†) and C∗ also satisﬁes the same topological speciﬁcation σ. We
computed chemical isomers C∗ of each target chemical graph C† inferred in Stage 4. We execute
an algorithm for generating chemical isomers of C† up to 100 when the number of all chemical
isomers exceeds 100. Such an algorithm can be obtained from the dynamic programming proposed
by Tanaka et al. [26] with a slight modiﬁcation. The algorithm ﬁrst decomposes C† into a set of
acyclic chemical graphs, next replaces each acyclic chemical graph T with another acyclic chemical
graph T ′ that admits the same feature vector as that of T , and ﬁnally assembles the resulting
acyclic chemical graphs into a chemical isomer C∗ of C†. The algorithm can compute a lower
bound on the total number of all chemical isomers of C† without generating all of them.

Tables 2 to 6 show the computational results of the experiment in Stage 5 for the ﬁve properties,

where we denote the following:
- D-time: the running time (sec.) to execute the dynamic programming algorithm in Stage 5 to
compute a lower bound on the number of all chemical isomers C∗ of C† and generate all (or up
to 100) chemical isomers C∗;

- C-LB: a lower bound on the number of all chemical isomers C∗ of C†; and
- #C: the number of all (or up to 100) chemical isomers C∗ of C† generated in Stage 5.

From Tables 2 to 6, we observe that the running time for generating up to 100 target chem-
ical graphs in Stage 5 is less than 0.4 second for many cases. For some chemical graph C†, no
chemical isomer was found by our algorithm. This is because each acyclic chemical graph in the
decomposition of C† has no alternative acyclic chemical graph than the original one. On the other
hand, some chemical graph C† such as the one in Id in Tables 2 admits extremely large number
of chemical isomers C∗. Remember that we know such a lower bound C-LB on the number of
chemical isomers without generating all of them.

6 Concluding Remarks

In the previous applications of the framework of inferring chemical graphs, artiﬁcial neural network
(ANN) and decision tree have been used for the machine learning of Stage 3. In this paper, we
used linear regression in Stage 3 for the ﬁrst time and derived an MILP formulation that simulates
the computation process of linear regression. We also extended a way of specifying a target value
y∗ in a property so that the predicted value η(f (C†)) of a target chemical graph C† is required
to belong to an interval between two speciﬁed values y∗ and y∗.
In this paper, we modiﬁed
a model of chemical compounds so that multi-valence chemical elements, cation and anion are
treated, and introduced the rank and the adjacency-conﬁguration of leaf-edges as new descriptors
in a feature vector of a chemical graph. We implemented the new system of the framework and
conducted computational experiments for Stages 1 to 5. We found 18 properties for which linear
regression delivers a relatively good prediction function by using our feature vector based on the
two-layered model. We also observed that an MILP formulation for inferring a chemical graph in
Stage 4 can be solved eﬃciently over diﬀerent types of test instances with complicated topological
speciﬁcations. The experimental result suggests that our method can infer chemical graphs with
up to 50 non-hydrogen atoms.

It is left as a future work to use other learning methods such as random forest, graph convolution

2LM-M LLR monomer v7: August 25, 2021

21

networks and an ensemble method in Stages 3 and 4 in the framework.

References

[1] Lo, Y-C., Rensi, S.E., Torng, W., Altman, R.B.: Machine learning in chemoinformatics and

drug discovery. Drug Discovery Today 23, 1538–1546 (2018)

[2] Tetko, I.V., Engkvist, O.: From Big Data to Artiﬁcial Intelligence: chemoinformatics meets

new challenges. J. Cheminformatics 12, 74 (2020)

[3] Ghasemi, F., Mehridehnavi, A., P´erez-Garrido, A., P´erez-S´anchez, H.: Neural network and
deep-learning algorithms used in QSAR studies: merits and drawbacks. Drug Discovery
Today 23, 1784–1790 (2018)

[4] Miyao, T., Kaneko, H., Funatsu, K.:

Inverse QSPR/QSAR analysis for chemical structure

generation (from y to x). J. Chem. Inf. Model. 56, 286–299 (2016)

[5] Ikebata, H., Hongo, K., Isomura, T., Maezono, R., Yoshida, R.: Bayesian molecular design

with a chemical language model. J. Comput. Aided Mol. Des. 31, 379–391 (2017)

[6] Rupakheti, C., Virshup, A., Yang, W., Beratan, D.N.: Strategy to discover diverse optimal

molecules in the small molecule universe. J. Chem. Inf. Model. 55, 529–537 (2015)

[7] Bohacek, R.S., McMartin, C., Guida, W.C.: The art and practice of structure-based drug

design: A molecular modeling perspective. Med. Res. Rev. 16, 3–50 (1996)

[8] Akutsu, T. , Fukagawa, D., Jansson, J., Sadakane, K.: Inferring a graph from path frequency.

Discrete Appl. Math. 160, 10-11, 1416–1428 (2012)

[9] Kipf, T. N., Welling, M.: Semi-supervised classiﬁcation with graph convolutional networks,

arXiv:1609.02907 (2016)

[10] G´omez-Bombarelli, R., Wei, J.N., Duvenaud, D., Hern´andez-Lobato, J.M., S´anchez-Lengeling,
B., Sheberla, D., Aguilera-Iparraguirre, J., Hirzel, T.D., Adams, R.P., Aspuru-Guzik, A.:
Automatic chemical design using a data-driven continuous representation of molecules. ACS
Cent. Sci. 4, 268–276 (2018)

[11] Segler, M.H.S., Kogej, T., Tyrchan, C., Waller, M.P.: Generating focused molecule libraries
for drug discovery with recurrent neural networks. ACS Cent. Sci. 4, 120–131 (2017)

[12] Yang, X., Zhang, J., Yoshizoe, K., Terayama, K., Tsuda, K.: ChemTS: an eﬃcient python

library for de novo molecular generation. STAM 18, 972–976 (2017)

[13] Kusner, M.J., Paige, B., Hern´andez-Lobato, J.M.: Grammar variational autoencoder. Proc.
of the 34th International Conference on Machine Learning-Volume 70, 1945–1954 (2017)

[14] De Cao, N., Kipf, T.: MolGAN: An implicit generative model for small molecular graphs.

arXiv:1805.11973 (2018)

2LM-M LLR monomer v7: August 25, 2021

22

[15] Madhawa, K., Ishiguro, K., Nakago, K., Abe, M.: GraphNVP: an invertible ﬂow model for

generating molecular graphs. arXiv:1905.11600 (2019)

[16] Shi, C., Xu, M., Zhu, Z., Zhang, W., Zhang, M., Tang, J.: GraphAF: a ﬂow-based autore-

gressive model for molecular graph generation. arXiv:2001.09382 (2020)

[17] Akutsu, T., Nagamochi, H.: A mixed integer linear programming formulation to artiﬁcial
neural networks. Proc. of the 2nd Int. Conf. on Information Science and Systems, 215–220
(2019)

[18] Azam, N. A., Chiewvanichakorn, R., Zhang, F., Shurbevski, A., Nagamochi, H., Akutsu,
T.: A method for the inverse QSAR/QSPR based on artiﬁcial neural networks and mixed
integer linear programming. Proc. of the 13th International Joint Conference on Biomedical
Engineering Systems and Technologies – Volume 3: BIOINFORMATICS, 101–108 (2020)

[19] Zhang, F., Zhu, J., Chiewvanichakorn, R., Shurbevski, A., Nagamochi, H., Akutsu, T.: A
new integer linear programming formulation to the inverse QSAR/QSPR for acyclic chemical
compounds using skeleton trees. The 33rd International Conference on Industrial, Engineering
and Other Applications of Applied Intelligent Systems, September 22-25, 2020, Kitakyushu,
Japan, Springer LNCS 12144, 433–444 (2020)

[20] Azam, N. A., Zhu, J., Sun, Y., Shi, Y., Shurbevski, A., Zhao, L., Nagamochi, H., Akutsu,
T.: A novel method for inference of acyclic chemical compounds with bounded branch-height
based on artiﬁcial neural networks and integer programming. Algorithms for Molecular Biology
(to appear)

[21] Ito, R., Azam, N. A., Wang, C., Shurbevski, A., Nagamochi, H., Akutsu, T.: A novel method
for the inverse QSAR/QSPR to monocyclic chemical compounds based on artiﬁcial neural
networks and integer programming. BIOCOMP2020, Las Vegas, Nevada, USA, 27-30 July
(2020)

[22] Zhu, J., Wang, C., Shurbevski, A., Nagamochi, H., Akutsu, T.: A novel method for inference
of chemical compounds of cycle index two with desired properties based on artiﬁcial neural
networks and integer programming. Algorithms 13, 5, 124 (2020)

[23] Akutsu, T., Nagamochi, H.: A novel method for inference of chemical compounds with
prescribed topological substructures based on integer programming. arXiv: 2010.09203 (2020)

[24] Zhu, J., Azam, N. A., Zhang, F., Shurbevski, A., Haraguchi, K., Zhao, L. , Nagamochi, H.,
Akutsu, T.: A novel method for inferring of chemical compounds with prescribed topological
substructures based on integer programming. IEEE/ACM Trans. Comput. Biol. Bioinform
(submitted).

[25] Shi, Y., Zhu, J., Azam, N. A., Haraguchi, K., Zhao, L., Nagamochi, H., Akutsu, T.: An
inverse QSAR method based on a two-layered model and integer programming. International
Journal of Molecular Sciences. 22, 2847 (2021)

2LM-M LLR monomer v7: August 25, 2021

23

[26] Tanaka, K., Zhu, J., Azam, N. A., Haraguchi, K., Zhao, L., Nagamochi, H., Akutsu, T.: An
inverse QSAR method based on decision tree and integer programming, The 17th International
Conference on Intelligent Computing, August 12-15, 2021, in Shenzhen, China (to appear).

[27] Hoerl, A. and Kennard, R., Ridge regression. In Encyclopedia of Statistical Sciences, New

York: Wiley, 1988, vol. 8, pp. 129–136

[28] Tibshirani, R., Regression shrinkage and selection via the lasso. J. R. Statist. Soc. B. 1996,

58, 267–288

[29] Annotations from HSDB (on pubchem): https://pubchem.ncbi.nlm.nih.gov/.

[30] Jalali-Heravi, M., Fatemi, M.

: H.Artiﬁcial neural network modeling of Kovats reten-
tion indices for noncyclic and monocyclic terpenes (2001) https://doi.org/10.1016/
S0021-9673(00)01274-7/.

[31] Roy, K., Saha, A.: Comparative QSPR studies with molecular connectivity, molecular negen-

tropy and TAU indices (2003) https://doi.org/10.1007/s00894-003-0135-z/.

[32] MoleculeNet: http://moleculenet.ai.

[33] Goussard, V., Fran¸cois Duprat F., Ploix, J.-L., Dreyfus, G., Nardello-Rataj, V., Aubry, J.-M.:
A new machine-learning tool for fast estimation of liquid viscosity. application to cosmetic
oils, J. Chem. Inf. Model., 60, 4, 2012–2023 (2020) https://pubs.acs.org/doi/10.1021/
acs.jcim.0c00083.

[34] Naef, R. : Calculation of the isobaric heat capacities of the liquid and solid phase of organic
compounds at and around 298.15 K based on their “true” molecular volume. Molecules, 24
(8) (2019), https://www.mdpi.com/1420-3049/24/8/1626/.

[35] https://figshare.com/articles/dataset/. https://figshare.com/articles/dataset/

Lipophilicity_Dataset_-_logD7_4_of_1_130_Compounds/5596750/1.

2LM-M LLR monomer v7: August 25, 2021

24

Appendix

A A Full Description of Descriptors

Associated with the two functions α and β in a chemical graph C = (H, α, β), we introduce
functions ac : V (E) → (Λ \ {H}) × (Λ \ {H}) × [1, 3], cs : V (E) → (Λ \ {H}) × [1, 6] and ec : V (E) →
((Λ \ {H}) × [1, 6]) × ((Λ \ {H}) × [1, 6]) × [1, 3] in the following.

To represent a feature of the exterior of C, a chemical rooted tree in T (C) is called a fringe-

conﬁguration of C.

We also represent leaf-edges in the exterior of C. For a leaf-edge uv ∈ E(hCi) with deghCi(u) =

1, we deﬁne the adjacency-conﬁguration of e to be an ordered tuple (α(u), α(v), β(uv)). Deﬁne

Γlf
ac

, {(a, b, m) | a, b ∈ Λ, m ∈ [1, min{val(a), val(b)}]}

as a set of possible adjacency-conﬁgurations for leaf-edges.

To represent a feature of an interior-vertex v ∈ V int(C) such that α(v) = a and deghCi(v) = d
(i.e., the number of non-hydrogen atoms adjacent to v is d) in a chemical graph C = (H, α, β),
we use a pair (a, d) ∈ (Λ \ {H}) × [1, 4], which we call the chemical symbol cs(v) of the vertex
v. We treat (a, d) as a single symbol ad, and deﬁne Λdg to be the set of all chemical symbols
µ = ad ∈ (Λ \ {H}) × [1, 4].

We deﬁne a method for featuring interior-edges as follows. Let e = uv ∈ Eint(C) be an
interior-edge e = uv ∈ Eint(C) such that α(u) = a, α(v) = b and β(e) = m in a chemical graph
C = (H, α, β). To feature this edge e, we use a tuple (a, b, m) ∈ (Λ \ {H}) × (Λ \ {H}) × [1, 3],
which we call the adjacency-conﬁguration ac(e) of the edge e. We introduce a total order < over
the elements in Λ to distinguish between (a, b, m) and (b, a, m) (a 6= b) notationally. For a tuple
ν = (a, b, m), let ν denote the tuple (b, a, m).

Let e = uv ∈ Eint(C) be an interior-edge e = uv ∈ Eint(C) such that cs(u) = µ, cs(v) = µ′ and
β(e) = m in a chemical graph C = (H, α, β). To feature this edge e, we use a tuple (µ, µ′, m) ∈
Λdg×Λdg×[1, 3], which we call the edge-conﬁguration ec(e) of the edge e. We introduce a total order
< over the elements in Λdg to distinguish between (µ, µ′, m) and (µ′, µ, m) (µ 6= µ′) notationally.
For a tuple γ = (µ, µ′, m), let γ denote the tuple (µ′, µ, m).

Let π be a chemical property for which we will construct a prediction function η from a feature

vector f (C) of a chemical graph C to a predicted value y ∈ R for the chemical property of C.

We ﬁrst choose a set Λ of chemical elements and then collect a data set Dπ of chemical com-
pounds C whose chemical elements belong to Λ, where we regard Dπ as a set of chemical graphs
C that represent the chemical compounds C in Dπ. To deﬁne the interior/exterior of chemical
graphs C ∈ Dπ, we next choose a branch-parameter ρ, where we recommend ρ = 2.

Let Λint(Dπ) ⊆ Λ (resp., Λex(Dπ) ⊆ Λ) denote the set of chemical elements used in the set
V int(C) of interior-vertices (resp., the set V ex(C) of exterior-vertices) of C over all chemical graphs
C ∈ Dπ, and Γint(Dπ) denote the set of edge-conﬁgurations used in the set Eint(C) of interior-
edges in C over all chemical graphs C ∈ Dπ. Let F (Dπ) denote the set of chemical rooted trees ψ
r-isomorphic to a chemical rooted tree in T (C) over all chemical graphs C ∈ Dπ, where possibly a
chemical rooted tree ψ ∈ F (Dπ) consists of a single chemical element a ∈ Λ \ {H}.

2LM-M LLR monomer v7: August 25, 2021

25

We deﬁne an integer encoding of a ﬁnite set A of elements to be a bijection σ : A → [1, |A|],
where we denote by [A] the set [1, |A|] of integers. Introduce an integer coding of each of the sets
Λint(Dπ), Λex(Dπ), Γint(Dπ) and F (Dπ). Let [a]int (resp., [a]ex) denote the coded integer of an
element a ∈ Λint(Dπ) (resp., a ∈ Λex(Dπ)), [γ] denote the coded integer of an element γ in Γint(Dπ)
and [ψ] denote an element ψ in F (Dπ).

Over 99% of chemical compounds C with up to 100 non-hydrogen atoms in PubChem have
degree at most 4 in the hydrogen-suppressed graph hCi [20]. We assume that a chemical graph C
treated in this paper satisﬁes deghCi(v) ≤ 4 in the hydrogen-suppressed graph hCi.
In our model, we use an integer mass∗(a) = ⌊10 · mass(a)⌋, for each a ∈ Λ.
We deﬁne the feature vector f (C) of a chemical graph C = (H, α, β) ∈ Dπ to be a vector
that consists of the following non-negative integer descriptors dcpi(C), i ∈ [1, K], where K =
14 + |Λint(Dπ)| + |Λex(Dπ)| + |Γint(Dπ)| + |F (Dπ)| + |Γlf

ac|.

1. dcp1(C): the number |V (H)| − |VH| of non-hydrogen atoms in C.

2. dcp2(C): the rank r(C) of C.

3. dcp3(C): the number |V int(C)| of interior-vertices in C.

4. dcp4(C): the average ms(C) of mass∗ over all atoms in C;
|V (H)| Pv∈V (H) mass∗(α(v)).

i.e., ms(C) , 1

5. dcpi(C), i = 4 + d, d ∈ [1, 4]: the number dg

d(C) of non-hydrogen vertices v ∈ V (H) \ VH of

H

degree deghCi(v) = d in the hydrogen-suppressed chemical graph hCi.

6. dcpi(C), i = 8 + d, d ∈ [1, 4]: the number dgint

d (C) of interior-vertices of interior-degree

degCint(v) = d in the interior Cint = (V int(C), Eint(C)) of C.

7. dcpi(C), i = 12 + m, m ∈ [2, 3]: the number bdint
m (C) , {e ∈ Eint(C) | β(e) = m}.

m in C; i.e., bdint

m (C) of interior-edges with bond multiplicity

8. dcpi(C), i = 14 + [a]int, a ∈ Λint(Dπ): the frequency naint
element a in the set V int(C) of interior-vertices in C.

a (C) = |Va(C) ∩ V int(C)| of chemical

9. dcpi(C), i = 14 + |Λint(Dπ)| + [a]ex, a ∈ Λex(Dπ): the frequency naex
of chemical element a in the set V ex(C) of exterior-vertices in C.

a (C) = |Va(C) ∩ V ex(C)|

10. dcpi(C), i = 14 + |Λint(Dπ)| + |Λex(Dπ)| + [γ], γ ∈ Γint(Dπ): the frequency ecγ(C) of edge-

conﬁguration γ in the set Eint(C) of interior-edges in C.

11. dcpi(C), i = 14 + |Λint(Dπ)| + |Λex(Dπ)| + |Γint(Dπ)| + [ψ], ψ ∈ F (Dπ): the frequency fcψ(C)

of fringe-conﬁguration ψ in the set of ρ-fringe-trees in C.

12. dcpi(C), i = 14 + |Λint(Dπ)| + |Λex(Dπ)| + |Γint(Dπ)| + |F (Dπ)| + [ν], ν ∈ Γlf
ν (C) of adjacency-conﬁguration ν in the set of leaf-edges in hCi.

aclf

ac: the frequency

2LM-M LLR monomer v7: August 25, 2021

26

B Specifying Target Chemical Graphs

Given a prediction function η and a target value y∗ ∈ R, we call a chemical graph C∗ such that
η(x∗) = y∗ for the feature vector x∗ = f (C∗) a target chemical graph. This section presents a set of
rules for specifying topological substructure of a target chemical graph in a ﬂexible way in Stage 4.
We ﬁrst describe how to reduce a chemical graph C = (H, α, β) into an abstract form based
on which our speciﬁcation rules will be deﬁned. To illustrate the reduction process, we use the
chemical graph C = (H, α, β) such that hCi is given in Figure 2.

R1 Removal of all ρ-fringe-trees: The interior H int = (V int(C), Eint(C)) of C is obtained
by removing the non-root vertices of each ρ-fringe-trees C[u] ∈ T (C), u ∈ V int(C). Figure 9
illustrates the interior H int of chemical graph C with ρ = 2 in Figure 2.

R2 Removal of some leaf paths: We call a u, v-path Q in H int a leaf path if vertex v is a leaf-
vertex of H int and the degree of each internal vertex of Q in H int is 2, where we regard that Q
is rooted at vertex u. A connected subgraph S of the interior H int of C is called a cyclical-base
if S is obtained from H by removing the vertices in V (Qu) \ {u}, u ∈ X for a subset X of
interior-vertices and a set {Qu | u ∈ X} of leaf u, v-paths Qu such that no two paths Qu and
Qu′ share a vertex. Figure 10(a) illustrates a cyclical-base S = H int − Su∈X(V (Qu) \ {u})
of the interior H int for a set {Qu5 = (u5, u24), Qu18 = (u18, u25, u26, u27), Qu22 = (u22, u28)} of
leaf paths in Figure 9.

R3 Contraction of some pure paths: A path in S is called pure if each internal vertex of
the path is of degree 2. Choose a set P of several pure paths in S so that no two paths
share vertices except for their end-vertices. A graph S′ is called a contraction of a graph
S (with respect to P) if S′ is obtained from S by replacing each pure u, v-path with a
single edge a = uv, where S′ may contain multiple edges between the same pair of adjacent
vertices. Figure 10(b) illustrates a contraction S′ obtained from the chemical graph S by
contracting each uv-path Pa ∈ P into a new edge a = uv, where a1 = u1u2, a2 = u1u3, a3 =
u4u7, a4 = u10u11 and a5 = u11u12 and P = {Pa1 = (u1, u13, u2), Pa2 = (u1, u14, u3), Pa3 =
(u4, u15, u16, u7), Pa4 = (u10, u17, u18, u19, u11), Pa5 = (u11, u20, u21, u22, u12)} of pure paths in
Figure 10(a).

We will deﬁne a set of rules so that a chemical graph can be obtained from a graph (called
a seed graph in the next section) by applying processes R3 to R1 in a reverse way. We specify
topological substructures of a target chemical graph with a tuple (GC, σint, σce) called a target
speciﬁcation deﬁned under the set of the following rules.

Seed Graph

A seed graph GC = (VC, EC) is deﬁned to be a graph (possibly with multiple edges) such that the
edge set EC consists of four sets E(≥2), E(≥1), E(0/1) and E(=1), where each of them can be empty.
A seed graph plays a role of the most abstract form S′ in R3. Figure 4(a) illustrates an example
of a seed graph GC with r(GC) = 5, where VC = {u1, u2, . . . , u12, u23}, E(≥2) = {a1, a2, . . . , a5},
E(≥1) = {a6}, E(0/1) = {a7} and E(=1) = {a8, a9, . . . , a16}.

2LM-M LLR monomer v7: August 25, 2021

27

N
u1
u14

C

C
u13

u3
C

C

u2
a8
a9
C
u4

a10

C

u24
O
Qu5
C
a11
u5
u6

a16
N
u8

S(6)

u15

a12

u16
C

u7 u9
C
a13

O

u10
C
a15

a14

u27
O

Qu18
C

u26
C

u25

u19
C

u17
C

C
u18

u28
N

P

Qu22

C
u22

u21

u20
C

C
u12
u11

a6

C
a17

Figure 9: The interior H int of chemical graph C with hCi in Figure 2 for ρ = 2.

S(2)

u23

N
u1
u14

C

Pa2

Pa1
C

C
u13

u3
C

u2
a8
a9
C
u4
u15

u16
C

S(6)

Pa3

a10

a12

C
u5

a11
u6

C

a16
N
u8

a14

u7 u9
C
a13

O

u10
C
a15

u17
C

u19
C

Pa4

u18
C

a6

C
a17

C
u22

C
u12
u11

u21

P

u20
C

Pa5

S(2)

u23

u1
N

a1

a2

a8
C

u3

u2

C

a9

C

u4
a10

a11
C
u6

C
u5

a16
N
u8

a12

a3

a14
u10
C
a15

u7
C
a13

u9
O

a6

C

u12

u11

a5

a4

C
a17

S(2)

u23

(a) A cyclical-base S of  Hint

(b) A contraction S’ of  S

Figure 10: (a) A cyclical-base S = H int−Su∈{u5,u18,u22}(V (Qu)\{u}) of the interior H int in Figure 9;
(b) A contraction S′ of S for a pure path set P = {Pa1, Pa2, . . . , Pa5} in (a), where a new edge
obtained by contracting a pure path is depicted with a thick line.

A subdivision S of GC is a graph constructed from a seed graph GC according to the following

rules:

- Each edge e = uv ∈ E(≥2) is replaced with a u, v-path Pe of length at least 2;

- Each edge e = uv ∈ E(≥1) is replaced with a u, v-path Pe of length at least 1 (equivalently e is

directly used or replaced with a u, v-path Pe of length at least 2);

- Each edge e ∈ E(0/1) is either used or discarded, where E(0/1) is required to be chosen as a
non-separating edge subset of E(GC) since otherwise the connectivity of a ﬁnal chemical graph
C is not guaranteed; r(C) = r(GC) − |E′| holds for a subset E′ ⊆ E(0/1) of edges discarded in a
ﬁnal chemical graph C; and

2LM-M LLR monomer v7: August 25, 2021

28

- Each edge e ∈ E(=1) is always used directly.

We allow a possible elimination of edges in E(0/1) as an optional rule in constructing a target
chemical graph from a seed graph, even though such an operation has not been included in the
process R3. A subdivision S plays a role of a cyclical-base in R2. A target chemical graph
C = (H, α, β) will contain S as a subgraph of the interior H int of C.

Interior-speciﬁcation

A graph H ∗ that serves as the interior H int of a target chemical graph C will be constructed as
follows. First construct a subdivision S of a seed graph GC by replacing each edge e = uu′ ∈
E(≥2) ∪ E(≥1) with a pure u, u′-path Pe. Next construct a supergraph H ∗ of S by attaching a leaf
path Qv at each vertex v ∈ VC or at an internal vertex v ∈ V (Pe) \ {u, u′} of each pure u, u′-path
Pe for some edge e = uu′ ∈ E(≥2) ∪ E(≥1), where possibly Qv = (v), E(Qv) = ∅ (i.e., we do not
attach any new edges to v). We introduce the following rules for specifying the size of H ∗, the
length |E(Pe)| of a pure path Pe, the length |E(Qv)| of a leaf path Qv, the number of leaf paths
Qv and a bond-multiplicity of each interior-edge, where we call the set of prescribed constants an
interior-speciﬁcation σint:

- Lower and upper bounds nint

LB, nint

UB ∈ Z+ on the number of interior-vertices of a target chemical

graph C.

- For each edge e = uu′ ∈ E(≥2) ∪ E(≥1),

a lower bound ℓLB(e) and an upper bound ℓUB(e) on the length |E(Pe)| of a pure u, u′-path
Pe. (For a notational convenience, set ℓLB(e) := 0, ℓUB(e) := 1, e ∈ E(0/1) and ℓLB(e) := 1,
ℓUB(e) := 1, e ∈ E(=1).)

a lower bound blLB(e) and an upper bound blUB(e) on the number of leaf paths Qv attached

at internal vertices v of a pure u, u′-path Pe.

a lower bound chLB(e) and an upper bound chUB(e) on the maximum length |E(Qv)| of a leaf

path Qv attached at an internal vertex v ∈ V (Pe) \ {u, u′} of a pure u, u′-path Pe.

- For each vertex v ∈ VC,

a lower bound chLB(v) and an upper bound chUB(v) on the number of leaf paths Qv attached

to v, where 0 ≤ chLB(v) ≤ chUB(v) ≤ 1.

a lower bound chLB(v) and an upper bound chUB(v) on the length |E(Qv)| of a leaf path Qv

attached to v.

- For each edge e = uu′ ∈ EC, a lower bound bdm,LB(e) and an upper bound bdm,UB(e) on
the number of edges with bond-multiplicity m ∈ [2, 3] in u, u′-path Pe, where we regard Pe,
e ∈ E(0/1) ∪ E(=1) as single edge e.

We call a graph H ∗ that satisﬁes an interior-speciﬁcation σint a σint-extension of GC, where the

bond-multiplicity of each edge has been determined.

2LM-M LLR monomer v7: August 25, 2021

29

Table 8: Example 1 of an interior-speciﬁcation σint.

LB = 20 nint
nint

UB = 28
a3
a2
2
2
3
4
0
0
0
1
0
1
1
3

a4
3
5
1
2
4
6

a6
1
4
0
0
0
2

a5
2
4
1
1
3
5

a1
2
3
0
1
0
3
u1 u2 u3 u4 u5 u6 u7 u8 u9 u10 u11 u12 u23
0
0
0
1
0
0
1
1
a13
a1
0
0
0
1
0
0
0
0

0
1
0
0
a2
0
1
0
0

0
0
0
4
a12
1
1
0
0

0
0
0
1
a10
0
0
0
0

0
0
0
2
a11
0
0
0
0

0
1
0
0
a3
0
0
0
0

0
1
0
0
a4
1
2
0
0

0
1
1
3
a5
0
2
0
1

0
0
0
0
a6
0
0
0
0

0
0
0
1
a7
0
0
0
0

0
0
0
1
a8
0
0
0
0

0
0
0
0
a9
0
0
0
0

ℓLB(ai)
ℓUB(ai)
blLB(ai)
blUB(ai)
chLB(ai)
chUB(ai)

blLB(ui)
blUB(ui)
chLB(ui)
chUB(ui)

bd2,LB(ai)
bd2,UB(ai)
bd3,LB(ai)
bd3,UB(ai)

a14
0
0
0
0

a15
0
0
0
0

a16
0
0
0
0

a17
0
0
0
0

Table 8 shows an example of an interior-speciﬁcation σint to the seed graph GC in Figure 4.
Figure 11 illustrates an example of an σint-extension H ∗ of seed graph GC in Figure 4 under

the interior-speciﬁcation σint in Table 8.

u1
u14

u13

u2
a8

u3

u24

a9

u4

a10

u15

a12

u16

a11
u6

u5

a16
u8

u7 u9
a13

u10
a15

a14

u27

u26

u25

u18

u17

u28

u22

u12
u11

u21

u20

a6

u19

a17

u23

Figure 11: An illustration of a graph H ∗ that is obtained from the seed graph GC in Figure 4
under the interior-speciﬁcation σint in Table 8, where the vertices newly introduced by pure paths
Pai and leaf paths Qvi are depicted with white squares and circles, respectively.

2LM-M LLR monomer v7: August 25, 2021

30

Chemical-speciﬁcation

Let H ∗ be a graph that serves as the interior H int of a target chemical graph C, where the
bond-multiplicity of each edge in H ∗ has be determined. Finally we introduce a set of rules
for constructing a target chemical graph C from H ∗ by choosing a chemical element a ∈ Λ and
assigning a ρ-fringe-tree ψ to each interior-vertex v ∈ V int. We introduce the following rules for
specifying the size of C, a set of chemical rooted trees that are allowed to use as ρ-fringe-trees
and lower and upper bounds on the frequency of a chemical element, a chemical symbol, and an
edge-conﬁguration, where we call the set of prescribed constants a chemical speciﬁcation σce:

- Lower and upper bounds nLB, n∗ ∈ Z+ on the number of vertices, where nint

LB ≤ nLB ≤ n∗.

- Subsets F (v) ⊆ F (Dπ), v ∈ VC and FE ⊆ F (Dπ) of chemical rooted trees ψ with ht(hψi) ≤ ρ,
where we require that every ρ-fringe-tree C[v] rooted at a vertex v ∈ VC (resp., at an internal
vertex v not in VC) in C belongs to F (v) (resp., FE). Let F ∗ := FE ∪ Sv∈VC
F (v) and Λex
denote the set of chemical elements assigned to non-root vertices over all chemical rooted trees
in F ∗.

- A subset Λint ⊆ Λint(Dπ), where we require that every chemical element α(v) assigned to an
a (C) and
a (C)) denote the number of vertices (resp., interior-vertices and exterior-vertices) v such

interior-vertex v in C belongs to Λint. Let Λ := Λint ∪ Λex and naa(C) (resp., naint
naex
that α(v) = a in C.

- A set Λint

dg ⊆ Λ × [1, 4] of chemical symbols and a set Γint ⊆ Γint(Dπ) of edge-conﬁgurations
(µ, µ′, m) with µ ≤ µ′, where we require that the edge-conﬁguration ec(e) of an interior-edge e
in C belongs to Γint. We do not distinguish (µ, µ′, m) and (µ′, µ, m).

- Deﬁne Γint

ac to be the set of adjacency-conﬁgurations such that Γint

ac := {(a, b, m) | (ad, bd′, m) ∈

Γint}. Let acint

ν (C), ν ∈ Γint

ac denote the number of interior-edges e such that ac(e) = ν in C.

- Subsets Λ∗(v) ⊆ {a ∈ Λint | val(a) ≥ 2}, v ∈ VC, we require that every chemical element α(v)

assigned to a vertex v ∈ VC in the seed graph belongs to Λ∗(v).

- Lower and upper bound functions naLB, naUB : Λ → [1, n∗] and naint

LB, naint

UB : Λint → [1, n∗] on

the number of interior-vertices v such that α(v) = a in C.

- Lower and upper bound functions nsint

LB, nsint

UB : Λint

dg → [1, n∗] on the number of interior-vertices

v such that cs(v) = µ in C.

- Lower and upper bound functions acint

LB, acint

UB : Γint

ac → Z+ on the number of interior-edges e such

that ac(e) = ν in C.

- Lower and upper bound functions ecint

LB, ecint

UB : Γint → Z+ on the number of interior-edges e such

that ec(e) = γ in C.

- Lower and upper bound functions fcLB, fcUB : F ∗ → [0, n∗] on the number of interior-vertices v

such that C[v] is r-isomorphic to ψ ∈ F ∗ in C.

2LM-M LLR monomer v7: August 25, 2021

31

- Lower and upper bound functions aclf
acC with adjacency-conﬁguration ν.

LB, aclf

UB : Γlf

ac → [0, n∗] on the number of leaf-edges uv in

We call a chemical graph C that satisﬁes a chemical speciﬁcation σce a (σint, σce)-extension of

GC, and denote by G(GC, σint, σce) the set of all (σint, σce)-extensions of GC.

Table 9 shows an example of a chemical-speciﬁcation σce to the seed graph GC in Figure 4.

Table 9: Example 2 of a chemical-speciﬁcation σce.

nLB = 30, n∗ = 50.
branch-parameter: ρ = 2
Each of sets F (v), v ∈ VC and FE is set to be
the set F of chemical rooted trees ψ with ht(hψi) ≤ ρ = 2 in Figure 4(b).
Λ = {H, C, N, O, S(2), S(6), P = P(5)} Λint
Γint
ac
Γint

dg = {C2, C3, C4, N2, N3, O2, S(2)2, S(6)3, P4}

ν1 = (C, C, 1), ν2 = (C, C, 2), ν3 = (C, N, 1), ν4 = (C, O, 1), ν5 = (C, S(2), 1), ν6 = (C, S(6), 1), ν7 = (C, P, 1)
γ1 = (C2, C2, 1), γ2 = (C2, C3, 1), γ3 = (C2, C3, 2), γ4 = (C2, C4, 1), γ5 = (C3, C3, 1), γ6 = (C3, C3, 2),
γ7 = (C3, C4, 1), γ8 = (C2, N2, 1), γ9 = (C3, N2, 1), γ10 = (C3, O2, 1), γ11 = (C2, C2, 2), γ12 = (C2, O2, 1),
γ13 = (C3, N3, 1), γ14 = (C4, S(2)2, 2), γ15 = (C2, S(6)3, 1), γ16 = (C3, S(6)3, 1), γ17 = (C2, P4, 2),
γ18 = (C3, P4, 1)

Λ∗(u1) = Λ∗(u8) = {C, N}, Λ∗(u9) = {C, O}, Λ∗(u) = {C}, u ∈ VC \ {u1, u8, u9}
P
P
0
0
1
1

N O S(2)
0
0
1
1
5
4

naLB(a)
naUB(a)

S(6)
0
1

S(6)
0
1

naint
naint

C
27
37

0
1

LB(a)
UB(a)

N O S(2)
0
1
1
1
8
4

C
H
9
40
65
23
C2 C3 C4 N2 N3 O2 S(2)2 S(6)3 P4
0
3
0
8
1
5
ν1
ν6
0
0
30
1
γ1
γ6
0
0
4
5
ψ ∈ {ψi | i = 1, 6, 11} ψ ∈ F ∗ \ {ψi | i = 1, 6, 11}

5
15
ν2
0
10
γ2
0
15

0
2
ν4
0
10
γ4
0
4

0
3
ν5
0
1
γ5
0
10

0
2
ν3
0
10
γ3
0
4

ν7
0
1
γ7
0
4

γ10
0
4

γ11
0
4

γ9
0
6

γ8
0
4

0
1

1
10

0
3

ν ∈ {(C, C, 1), (C, C, 2)} ν ∈ Γlf

ac \ {(C, C, 1), (C, C, 2)}

0
10

0
8

nsint
nsint

LB(µ)
UB(µ)

acint
acint

LB(ν)
UB(ν)

ecint
ecint

LB(γ)
UB(γ)

fcLB(ψ)
fcUB(ψ)

aclf
aclf

LB(ν)
UB(ν)

γ12
0
4

γ13
0
2

γ14
0
2

γ15
0
2

γ16
0
2

γ17
0
2

γ18
0
2

Figure 2 illustrates an example C of a (σint, σce)-extension of GC obtained from the σint-extension
H ∗ in Figure 11 under the chemical-speciﬁcation σce in Table 9. Note that r(C) = r(H ∗) =
r(GC) − 1 = 4 holds since the edge in E(0/1) is discarded in H ∗.

2LM-M LLR monomer v7: August 25, 2021

32

C Test Instances for Stages 4 and 5

We prepared the following instances (a)-(d) for conducting experiments of Stages 4 and 5 in
Phase 2.

In Stages 4 and 5, we use ﬁve properties π ∈ {Hc, Vd, OptR, IhcLiq, Vis} and deﬁne a set

Λ(π) of chemical elements as follows:
Λ(Hc) = {H, C, N, O, S(2), S(6), Cl},
Λ(OptR) = {H, C, N, O, S(2), F},
Λ(Vis) = {H, C, O, Si}.

Λ(Vd) = {H, C, N, O, N, Cl, P(3), P(5)},
Λ(IhcLiq) = {H, C, N, O, S(2), S(6), Cl} and

(a) Ia = (GC, σint, σce): The instance introduced in Appendix B to explain the target spec-
iﬁcation. For each property π, we replace Λ = {H, C, N, O, S(2), S(6), P(5)} in Table 9 with
Λ(π) ∩ {S(2), S(6), P(5)} and remove from the σce all chemical symbols, edge-conﬁgurations
and fringe-conﬁgurations that cannot be constructed from the replaced element set (i.e.,
those containing a chemical element in {S(2), S(6), P(5)} \ Λ(π)).

(b) I i

C, σi

b = (Gi
int, σi
2. In the four instances I i

ce), i = 1, 2, 3, 4: An instance for inferring chemical graphs with rank at most
b, i = 1, 2, 3, 4, the following speciﬁcations in (σint, σce) are common.

Set Λ := Λ(π) for a given property π ∈ {Hc, Vd, OptR, IhcLiq, Vis}, set Λint
dg to be
the set of all possible symbols in Λ × [1, 4] that appear in the data set Dπ and set Γint
to be the set of all edge-conﬁgurations that appear in the data set Dπ. Set Λ∗(v) := Λ,
v ∈ VC.
The lower bounds ℓLB, blLB, chLB, bd2,LB, bd3,LB, naLB, naint
are all set to be 0.

LB and aclf
LB

LB, nsint

LB, acint

LB, ecint

The upper bounds ℓUB, blUB, chUB, bd2,UB, bd3,UB, naUB, naint
aclf

UB are all set to be an upper bound n∗ on n(G∗).

UB, nsint

UB, acint

UB, ecint

UB and

For each property π, let F (Dπ) denote the set of 2-fringe-trees in the compounds in Dπ,
and select a subset F i
π| = 45 − 5i, i ∈ [1, 5]. For each instance I i
b,
set FE := F (v) := F i

π ⊆ F (Dπ) with |F i
π, v ∈ VC and fcLB(ψ) := 0, fcUB(ψ) := 10, ψ ∈ F i
π.

Instance I 1
are given by the rank-2 seed graph Gi

b is given by the rank-1 seed graph G1

C, i = 2, 3, 4 in Figure 6(ii)-(iv).

C in Figure 6(i) and Instances I i

b, i = 2, 3, 4

(i) For instance I 1

b, select as a seed graph the monocyclic graph G1

C = (VC, EC = E(≥2) ∪
LB :=
UB := 15, nLB := 35 and n∗ := 38. We include a linear constraint ℓ(a1) ≤ ℓ(a2) and

E(≥1)) in Figure 6(i), where VC = {u1, u2}, E(≥2) = {a1} and E(≥1) = {a2}. Set nint
5, nint
5 ≤ ℓ(a1) + ℓ(a2) ≤ 15 as part of the side constraint.
b, select as a seed graph the graph G2

C = (VC, EC = E(≥2) ∪ E(≥1) ∪ E(=1))
in Figure 6(ii), where VC = {u1, u2, u3, u4}, E(≥2) = {a1, a2}, E(≥1) = {a3} and E(=1) =
UB := 30, nLB := 45 and n∗ := 50. We include a linear
{a4, a5}. Set nint
constraint ℓ(a1) ≤ ℓ(a2) and ℓ(a1) + ℓ(a2) + ℓ(a3) ≤ 15.

LB := 25, nint

(ii) For instance I 2

2LM-M LLR monomer v7: August 25, 2021

33

(iii) For instance I 3

b, select as a seed graph the graph G3

C = (VC, EC = E(≥2) ∪ E(≥1) ∪
E(=1)) in Figure 6(iii), where VC = {u1, u2, u3, u4}, E(≥2) = {a1}, E(≥1) = {a2, a3} and
E(=1) = {a4, a5}. Set nint
UB := 30, nLB := 45 and n∗ := 50. We include linear
constraints ℓ(a1) ≤ ℓ(a2) + ℓ(a3), ℓ(a2) ≤ ℓ(a3) and ℓ(a1) + ℓ(a2) + ℓ(a3) ≤ 15.

LB := 25, nint

(iv) For instance I 4

b, select as a seed graph the graph G4

C = (VC, EC = E(≥2) ∪ E(≥1) ∪ E(=1))
in Figure 6(iv), where VC = {u1, u2, u3, u4}, E(≥1) = {a1, a2, a3} and E(=1) = {a4, a5}.
UB := 30, nLB := 45 and n∗ := 50. We include linear constraints
Set nint
ℓ(a2) ≤ ℓ(a1) + 1, ℓ(a2) ≤ ℓ(a3) + 1, ℓ(a1) ≤ ℓ(a3) and ℓ(a1) + ℓ(a2) + ℓ(a3) ≤ 15.

LB := 25, nint

We deﬁne instances in (c) and (d) in order to ﬁnd chemical graphs that have an intermediate
structure of given two chemical cyclic graphs GA = (HA = (VA, EA), αA, βA) and GB = (HB =
(VB, EB), αB, βB). Let Λint
A and Λint
dg,A denote the sets of chemical elements and chemical symbols
of the interior-vertices in GA, Γint
A denote the sets of edge-conﬁgurations of the interior-edges in
GA, and FA denote the set of 2-fringe-trees in GA. Analogously deﬁne sets Λint
B and
FB in GB.

dg,B, Γint

B , Λint

B and Λ∗(v) := {αA(v)}, v ∈ VC.

LB := min{nint(GA), nint(GB)}, nint

dg to be the set of all possible chemical symbols in Λ × [1, 4].

(c) Ic = (GC, σint, σce): An instance aimed to infer a chemical graph G† such that the core of G†
is equal to the core of GA and the frequency of each edge-conﬁguration in the non-core of
G† is equal to that of GB. We use chemical compounds CID 24822711 and CID 59170444 in
Figure 7(a) and (b) for GA and GB, respectively.
Set a seed graph GC = (VC, EC = E(=1)) to be the core of GA.
Set Λ := {H, C, N, O}, and set Λint
Set Γint := Γint
A ∪ Γint
Set nint
UB := max{nint(GA), nint(GB)},
nLB := min{n(GA), n(GB)} − 10 and n∗ := max{n(GA), n(GB)} + 5.
Set lower bounds ℓLB, blLB, chLB, bd2,LB, bd3,LB, naLB, naint
Set upper bounds ℓUB, blUB, chUB, bd2,UB, bd3,UB, naUB, naint
n∗.
Set ecint
interior-edges in GA and GB with edge-conﬁguration γ.
Let F (p)
Set FE := F (v) := F (1)

B , p ∈ [1, 2] denote the set of chemical rooted trees r-isomorphic p-fringe-trees in GB;

LB(γ) to be the number of core-edges in GA with γ ∈ Γint and ecint

B , v ∈ VC and fcLB(ψ) := 0, fcUB(ψ) := 10, ψ ∈ F (1)

UB(γ) to be the number

UB and aclf

B ∪ F (2)
B .

LB and aclf

B ∪ F (2)

LB to be 0.

UB, acint

UB, nsint

UB to be

LB, acint

LB, nsint

(d) Id = (G1

C, σint, σce): An instance aimed to infer a chemical monocyclic graph G† such that
the frequency vector of edge-conﬁgurations in G† is a vector obtained by merging those of
GA and GB. We use chemical monocyclic compounds CID 10076784 and CID 44340250 in
Figure 7(c) and (d) for GA and GB, respectively. Set a seed graph to be the monocyclic seed
graph G1
C = (VC, EC = E(≥2) ∪ E(≥1)) with VC = {u1, u2}, E(≥2) = {a1} and E(≥1) = {a2} in
Figure 6(i).
Set Λ := {H, C, N, O}, Λint
Set nint
nLB := min{n(GA), n(GB)} and n∗ := max{n(GA), n(GB)}.
Set lower bounds ℓLB, blLB, chLB, bd2,LB, bd3,LB, naLB, naint

dg,A ∪ Λint
LB := min{nint(GA), nint(GB)}, nint

dg,B and Γint := Γint
UB := max{nint(GA), nint(GB)},

dg := Λint

A ∪ Γint
B .

LB and aclf

LB to be 0.

LB, acint

LB, nsint

2LM-M LLR monomer v7: August 25, 2021

34

UB, acint

UB, nsint

UB and aclf

A(γint) (resp., x∗

Set upper bounds ℓUB, blUB, chUB, bd2,UB, bd3,UB, naUB, naint
n∗.
For each edge-conﬁguration γ ∈ Γint, let x∗
interior-edges with γ in GA (resp., GB), γ ∈ Γint and set
A(γ), x∗
B(γ)}, x∗
min(γ) := min{x∗
x∗
LB(γ) := ⌊(3/4)x∗
ecint
ecint
UB(γ) := ⌈(1/4)x∗
Set FE := F (v) := FA ∪ FB, v ∈ VC and fcLB(ψ) := 0, fcUB(ψ) := 10, ψ ∈ FA ∪ FB.
We include a linear constraint ℓ(a1) ≤ ℓ(a2) and 5 ≤ ℓ(a1) + ℓ(a2) ≤ 15 as part of the side
constraint.

A(γ), x∗
min(γ) + (1/4)x∗
min(γ) + (3/4)x∗

max(γ) := max{x∗
max(γ)⌋ and
max(γ)⌉.

B(γint)) denote the number of

UB to be

B(γ)},

2LM-M LLR monomer v7: August 25, 2021

35

D All Constraints in an MILP Formulation for Chemical

Graphs

We deﬁne a standard encoding of a ﬁnite set A of elements to be a bijection σ : A → [1, |A|], where
we denote by [A] the set [1, |A|] of integers and by [e] the encoded element σ(e). Let ǫ denote
null, a ﬁctitious chemical element that does not belong to any set of chemical elements, chemical
symbols, adjacency-conﬁgurations and edge-conﬁgurations in the following formulation. Given a
ﬁnite set A, let Aǫ denote the set A ∪ {ǫ} and deﬁne a standard encoding of Aǫ to be a bijection
σ : A → [0, |A|] such that σ(ǫ) = 0, where we denote by [Aǫ] the set [0, |A|] of integers and by [e]
the encoded element σ(e), where [ǫ] = 0.

Let σ = (GC, σint, σce) be a target speciﬁcation, ρ denote the branch-parameter in the speciﬁ-

cation σ and C denote a chemical graph in G(GC, σint, σce).

D.1 Selecting a Cyclical-base

Recall that

E(=1) = {e ∈ EC | ℓLB(e) = ℓUB(e) = 1};
E(≥1) = {e ∈ EC | ℓLB(e) = 1, ℓUB(e) ≥ 2}; E(≥2) = {e ∈ EC | ℓLB(e) ≥ 2};

E(0/1) = {e ∈ EC | ℓLB(e) = 0, ℓUB(e) = 1};

- Every edge ai ∈ E(=1) is included in hCi;

- Each edge ai ∈ E(0/1) is included in hCi if necessary;

- For each edge ai ∈ E(≥2), edge ai is not included in hCi and instead a path

Pi = (vC

tail(i), vT

j−1, vT

j, . . . , vT

j+t, vC

head(i))

of length at least 2 from vertex vC
structed in hCi; and

tail(i) to vertex vC

head(i) visiting some vertices in VT is con-

- For each edge ai ∈ E(≥1), either edge ai is directly used in hCi or the above path Pi of length

at least 2 is constructed in hCi.

Let tC , |VC| and denote VC by {vC
i | i ∈ [1, tC]}. Regard the seed graph GC as a digraph
j′ when j < j′.
j and vC
such that each edge ai with end-vertices vC
For each directed edge ai ∈ EC, let head(i) and tail(i) denote the head and tail of eC(i); i.e.,
ai = (vC

j′ is directed from vC

tail(i), vC

j to vC

head(i)).

Deﬁne

kC , |E(≥2) ∪ E(≥1)|,

kC , |E(≥2)|,
f

and denote EC = {ai | i ∈ [1, mC]}, E(≥2) = {ak | k ∈ [1,
kC + 1, kC]},
f
E(0/1) = {ai | i ∈ [kC + 1, kC + |E(0/1)|]} and E(=1) = {ai | i ∈ [kC + |E(0/1)| + 1, mC]}. Let I(=1)
denote the set of indices i of edges ai ∈ E(=1). Similarly for I(0/1), I(≥1) and I(≥2).

kC]}, E(≥1) = {ak | k ∈ [
f

To control the construction of such a path Pi for each edge ak ∈ E(≥2) ∪ E(≥1), we regard the
index k ∈ [1, kC] of each edge ak ∈ E(≥2) ∪ E(≥1) as the “color” of the edge. To introduce necessary

2LM-M LLR monomer v7: August 25, 2021

36

linear constraints that can construct such a path Pk properly in our MILP, we assign the color k
to the vertices vT

j+t in VT when the above path Pk is used in hCi.

j, . . . , vT

j−1, vT

(=1)(s) (resp., E−

s. Similarly for E+

For each index s ∈ [1, tC], let IC(s) denote the set of edges e ∈ EC incident to vertex vC

and E+
of ai is vertex vC
Let IC(s) denote the set of indices i of edges ai ∈ IC(s). Similarly for I +
I −
(0/1)(s), I +
(≥1)(s), I −
I(≥1) ∪ I(0/1) ∪ I(=1).
constants:

s,
(=1)(s)) denote the set of edges ai ∈ E(=1) such that the tail (resp., head)
(≥2)(s).
(0/1)(s),
kC + 1, mC] =
f

(=1)(s), I −
(≥2)(s). Note that [1, kC] = I(≥2) ∪ I(≥1) and [

(≥2)(s) and E−
(=1)(s), I +

(≥2)(s) and I −

(0/1)(s), E−

(0/1)(s), E+

(≥1)(s), E−

(≥1)(s), E+

(≥1)(s), I +

- tC = |VC|,

kC = |E(≥2)|, kC = |E(≥2) ∪ E(≥1)|, tT = nint
f

ai ∈ EC \ (E(≥2) ∪ E(≥1)) holds i ∈ [kC + 1, mC];

UB − |VC|, mC = |EC|. Note that

- ℓLB(k), ℓUB(k) ∈ [1, tT], k ∈ [1, kC]: lower and upper bounds on the length of path Pk;

- rGC ∈ [1, mC]: the rank r(GC) of seed graph GC;

NEW!

variables:

- eC(i) ∈ [0, 1], i ∈ [1, mC]: eC(i) represents edge ai ∈ EC, i ∈ [1, mC] (eC(i) = 1, i ∈ I(=1);

eC(i) = 0, i ∈ I(≥2)) (eC(i) = 1 ⇔ edge ai is used in hCi);

- vT(i) ∈ [0, 1], i ∈ [1, tT]: vT(i) = 1 ⇔ vertex vT

i is used in hCi;

- eT(i) ∈ [0, 1], i ∈ [1, tT + 1]: eT(i) represents edge eT

i−1, vT

i) ∈ ET, where eT

1 and eT

tT+1

are ﬁctitious edges (eT(i) = 1 ⇔ edge eT

i = (vT
i is used in hCi);

- χT(i) ∈ [0, kC], i ∈ [1, tT]: χT(i) represents the color assigned to vertex vT
i is assigned color k; χT(i) = 0 means that vertex vT

vertex vT

i is not used in hCi);

i (χT(i) = k > 0 ⇔

- clrT(k) ∈ [ℓLB(k) − 1, ℓUB(k) − 1], k ∈ [1, kC], clrT(0) ∈ [0, tT]: the number of vertices vT

i ∈ VT

with color c;

- δT

χ (k) ∈ [0, 1], k ∈ [0, kC]: δT

χ (k) = 1 ⇔ χT(i) = k for some i ∈ [1, tT];

- χT(i, k) ∈ [0, 1], i ∈ [1, tT], k ∈ [0, kC] (χT(i, k) = 1 ⇔ χT(i) = k);

+
C(i) ∈ [0, 4], i ∈ [1, tC]: the out-degree of vertex vC
−
C(i) ∈ [0, 4], i ∈ [1, tC]: the in-degree of vertex vC

i with the used edges eC in EC;

i with the used edges eC in EC;

-

-

deg
g
deg
g

- rank: the rank r(C) of a target chemical graph C;

constraints:

rank = rGC − X
i∈I(0/1)
eC(i) = 1,
eC(i) = 0, clrT(i) ≥ 1,
clrT(i) ≤ tT · (1 − eC(i)),

(1 − eC(i)),

i ∈ I(=1),
i ∈ I(≥2),
i ∈ I(≥1),

eC(i) + clrT(i) ≥ 1,

NEW!

(3)

(4)

(5)

(6)

2LM-M LLR monomer v7: August 25, 2021

37

c∈I −

(≥1)(i)∪I −

X
(0/1)(i)∪I −

(=1)(i)

eC(c) =

−
C(i),

deg
g

c∈I +

(≥1)(i)∪I +

X
(0/1)(i)∪I +

(=1)(i)

eC(c) =

+
C(i),

deg
g

i ∈ [1, tC],

(7)

χT(i, 0) = 1 − vT(i), X
k∈[0,kC]

χT(i, k) = 1, X
k∈[0,kC]

k · χT(i, k) = χT(i),

i ∈ [1, tT],

(8)

χT(i, k) = clrT(k),

X
i∈[1,tT]

tT · δT

χ (k) ≥ X
i∈[1,tT]

χT(i, k) ≥ δT

χ (k),

k ∈ [0, kC],

(9)

vT(i − 1) ≥ vT(i),
kC · (vT(i − 1) − eT(i)) ≥ χT(i − 1) − χT(i) ≥ vT(i − 1) − eT(i),

i ∈ [2, tT].

(10)

D.2 Constraints for Including Leaf Paths

Let
{u1, u2, . . . , up} so that

tC denote the number of vertices u ∈ VC such that blUB(u) = 1 and assume that VC =
e

Deﬁne the set of colors for the vertex set {ui | i ∈ [1,

blUB(ui) = 1, i ∈ [1,

tC] and blUB(ui) = 0, i ∈ [
e

tC + 1, tC].
e
tC]} ∪ VT to be [1, cF] with
e

cF ,

tC + tT = |{ui | i ∈ [1,
e

tC]} ∪ VT|.
e

i, i ∈ [1,

tC] (resp., vT
Let each vertex vC
e
j, vF
[1, cF]). When a path P = (u, vF
assign the color i ∈ [1, cF] of the vertex u to the vertices vF
constants:

j+1, . . . , vF

i ∈ VT) correspond to a color i ∈ [1, cF] (resp., i +

tC ∈
e
j+t) from a vertex u ∈ VC ∪ VT is used in hCi, we

j, vF

j+1, . . . , vF

j+t ∈ VF.

- cF: the maximum number of diﬀerent colors assigned to the vertices in VF;

- n∗: an upper bound on the number n(C) of non-hydrogen atoms in C;

- nint

LB, nint

UB ∈ [2, n∗]: lower and upper bounds on the number of interior-vertices in C;

- blLB(i) ∈ [0, 1], i ∈ [1,
rooted at a vertex vC
i;

tC]: a lower bound on the number of leaf ρ-branches in the leaf path
e

- blLB(k), blUB(k) ∈ [0, ℓUB(k) − 1], k ∈ [1, kC] = I(≥2) ∪ I(≥1):

lower and upper bounds on the
number of leaf ρ-branches in the trees rooted at internal vertices of a pure path Pk for an edge
ak ∈ E(≥1) ∪ E(≥2);

variables:

2LM-M LLR monomer v7: August 25, 2021

38

- nint

G ∈ [nint

LB, nint

UB]: the number of interior-vertices in C;

- vF(i) ∈ [0, 1], i ∈ [1, tF]: vF(i) = 1 ⇔ vertex vF

i is used in C;

- eF(i) ∈ [0, 1], i ∈ [1, tF + 1]: eF(i) represents edge eF

i = vF

i−1vF

i, where eF

1 and eF

ﬁctitious edges (eF(i) = 1 ⇔ edge eF

i is used in C);

tF+1 are

- χF(i) ∈ [0, cF], i ∈ [1, tF]: χF(i) represents the color assigned to vertex vF

i (χF(i) = c ⇔ vertex

vF

i is assigned color c);

- clrF(c) ∈ [0, tF], c ∈ [0, cF]: the number of vertices vF

i with color c;

- δF

χ (c) ∈ [blLB(c), 1], c ∈ [1,

χ (c) = 1 ⇔ χF(i) = c for some i ∈ [1, tF];

- δF

χ (c) ∈ [0, 1], c ∈ [

χ (c) = 1 ⇔ χF(i) = c for some i ∈ [1, tF];

tC]: δF
e

tC + 1, cF]: δF
e

- χF(i, c) ∈ [0, 1], i ∈ [1, tF], c ∈ [0, cF]: χF(i, c) = 1 ⇔ χF(i) = c;

- bl(k, i) ∈ [0, 1], k ∈ [1, kC] = I(≥2) ∪ I(≥1), i ∈ [1, tT]: bl(k, i) = 1 ⇔ path Pk contains vertex vT

i

as an internal vertex and the ρ-fringe-tree rooted at vT

i contains a leaf ρ-branch;

constraints:

χF(i, 0) = 1 − vF(i), X
c∈[0,cF]

χF(i, c) = 1, X
c∈[0,cF]

c · χF(i, c) = χF(i),

i ∈ [1, tF],

(11)

χF(i, c) = clrF(c),

X
i∈[1,tF]

tF · δF

χ (c) ≥ X
i∈[1,tF]

χF(i, c) ≥ δF

χ (c),

c ∈ [0, cF],

(12)

eF(1) = eF(tF + 1) = 0,

(13)

vF(i − 1) ≥ vF(i),
cF · (vF(i − 1) − eF(i)) ≥ χF(i − 1) − χF(i) ≥ vF(i − 1) − eF(i),

i ∈ [2, tF],

(14)

bl(k, i) ≥ δF
χ (

tC + i) + χT(i, k) − 1,
e

k ∈ [1, kC], i ∈ [1, tT],

X
k∈[1,kC],i∈[1,tT]

bl(k, i) ≤ X
i∈[1,tT]

δF
χ (

tC + i),
e

blLB(k) ≤ X
i∈[1,tT]

bl(k, i) ≤ blUB(k),

k ∈ [1, kC],

tC + X
i∈[1,tT]

vT(i) + X
i∈[1,tF]

vF(i) = nint
G .

(15)

(16)

(17)

(18)

2LM-M LLR monomer v7: August 25, 2021

39

D.3 Constraints for Including Fringe-trees

Recall that F (Dπ) denotes the set of chemical rooted trees ψ r-isomorphic to a chemical rooted
tree in T (C) over all chemical graphs C ∈ Dπ, where possibly a chemical rooted tree ψ ∈ F (Dπ)
consists of a single chemical element a ∈ Λ \ {H}.

To express the condition that the ρ-fringe-tree is chosen from a rooted tree Ci, Ti or Fi, we

introduce the following set of variables and constraints.

constants:

- nLB: a lower bound on the number n(C) of non-hydrogen atoms in C, where nLB, n∗ ≥ nint
LB;

- chLB(i), chUB(i) ∈ [0, n∗], i ∈ [1, tT]: lower and upper bounds on ht(hTii) of the tree Ti rooted

at a vertex vC

i;

- chLB(k), chUB(k) ∈ [0, n∗], k ∈ [1, kC] = I(≥2) ∪ I(≥1): lower and upper bounds on the maximum
height ht(hT i) of the tree T ∈ F (Pk) rooted at an internal vertex of a path Pk for an edge
ak ∈ E(≥1) ∪ E(≥2);

- Prepare a coding of the set F (Dπ) and let [ψ] denote the coded integer of an element ψ in

F (Dπ);

- Sets F (v) ⊆ F (Dπ), v ∈ VC and FE ⊆ F (Dπ) of chemical rooted trees T with ht(T ) ∈ [1, ρ];

- Deﬁne F ∗ := Sv∈VC

i ∈ [1, tF];

F (v) ∪ FE, F C
i

:= F (vC

i), i ∈ [1, tC], F T
i

:= FE, i ∈ [1, tT] and F F
i

:= FE,

- fcLB(ψ), fcUB(ψ) ∈ [0, n∗], ψ ∈ F ∗: lower and upper bound functions on the number of interior-

vertices v such that C[v] is r-isomorphic to ψ in C;

- F X

i [p], p ∈ [1, ρ], X ∈ {C, T, F}: the set of chemical rooted trees T ∈ F X

i with ht(hT i) = p;

- nH([ψ]) ∈ [0, 3ρ], ψ ∈ F ∗: the number n(hψi) of non-root hydrogen vertices in a chemical rooted

tree ψ;

- htH([ψ]) ∈ [0, ρ], ψ ∈ F ∗: the height ht(hψi) of the hydrogen-suppressed chemical rooted tree

hψi;

- deg

H
r ([ψ]) ∈ [0, 3], ψ ∈ F ∗: the number degr(hψi) of non-hydrogen children of the root r of a

chemical rooted tree ψ;

- deghyd

r

([ψ]) ∈ [0, 3], ψ ∈ F ∗: the number degr(ψ) − degr(hψi) of hydrogen children of the root r

of a chemical rooted tree ψ;

- vion(ψ) ∈ [−3, +3], ψ ∈ F ∗: the ion-valence of the root in ψ;

- aclf

ν (ψ), ν ∈ Γlf

ac: the frequency of leaf-edges with adjacency-conﬁguration ν in ψ;

- aclf

LB, aclf

UB : Γlf

ac → [0, n∗]: lower and upper bound functions on the number of leaf-edges uv in

acC with adjacency-conﬁguration ν;

2LM-M LLR monomer v7: August 25, 2021

40

variables:

- nG ∈ [nLB, n∗]: the number n(C) of non-hydrogen atoms in C;

- vX(i) ∈ [0, 1], i ∈ [1, tX], X ∈ {T, F}: vX(i) = 1 ⇔ vertex vX

i is used in C;

- δX

fr (i, [ψ]) ∈ [0, 1], i ∈ [1, tX], ψ ∈ F X
rooted at vertex vX

i in C;

i , X ∈ {C, T, F}: δX

fr (i, [ψ]) = 1 ⇔ ψ is the ρ-fringe-tree

- fc([ψ]) ∈ [fcLB(ψ), fcUB(ψ)], ψ ∈ F ∗: the number of interior-vertices v such that C[v] is r-

isomorphic to ψ in C;

- aclf([ν]) ∈ [aclf

LB(ν), aclf

UB(ν)], ν ∈ Γlf

ac: the number of leaf-edge with adjacency-conﬁguration ν

in C;

- degex

X (i) ∈ [0, 3], i ∈ [1, tX], X ∈ {C, T, F}: the number of non-hydrogen children of the root of

the ρ-fringe-tree rooted at vertex vX

i in C;

- hyddegX(i) ∈ [0, 4], i ∈ [1, tX], X ∈ {C, T, F}: the number of hydrogen atoms adjacent to vertex

vX

i (i.e., hyddeg(vX

i)) in C = (H, α, β);

- eledegX(i) ∈ [−3, +3], i ∈ [1, tX], X ∈ {C, T, F}: the ion-valence vion(ψ) of vertex vX

i (i.e.,

eledegX(i) = vion(ψ) for the ρ-fringe-tree ψ rooted at vX

i) in C = (H, α, β);

- hX(i) ∈ [0, ρ], i ∈ [1, tX], X ∈ {C, T, F}: the height ht(hT i) of the hydrogen-suppressed chemical

rooted tree hT i of the ρ-fringe-tree T rooted at vertex vX

i in C;

- σ(k, i) ∈ [0, 1], k ∈ [1, kC] = I(≥2) ∪ I(≥1), i ∈ [1, tT]: σ(k, i) = 1 ⇔ the ρ-fringe-tree Tv rooted at

vertex v = vT

i with color k has the largest height ht(hTvi) among such trees Tv, v ∈ VT;

constraints:

δC
fr(i, [ψ]) = 1,

X
ψ∈F C
i
δX
fr (i, [ψ]) = vX(i),

X
ψ∈F X
i

H
r ([ψ]) · δX

fr (i, [ψ]) = degex

X (i),

deg

X
ψ∈F X
i

deghyd
r

X
ψ∈F X
i

([ψ]) · δX

fr (i, [ψ]) = hyddegX(i),

vion([ψ]) · δX

fr (i, [ψ]) = eledegX(i),

X
ψ∈F X
i

i ∈ [1, tC],

i ∈ [1, tX], X ∈ {T, F},

(19)

i ∈ [1, tX], X ∈ {C, T, F},

(20)

fr(i, [ψ]) ≥ vF(i) − eF(i + 1),
δF

i ∈ [1, tF] (eF(tF + 1) = 0),

(21)

X
ψ∈F F

i [ρ]

2LM-M LLR monomer v7: August 25, 2021

41

htH([ψ]) · δX

fr (i, [ψ]) = hX(i),

i ∈ [1, tX], X ∈ {C, T, F},

(22)

X
ψ∈F X
i

X
ψ∈F X
i
i∈[1,tX],X∈{C,T,F}

nH([ψ]) · δX

fr (i, [ψ]) + X

vX(i) + tC = nG,

(23)

i∈[1,tX],X∈{T,F}

X
i∈[1,tX],X∈{C,T,F}

δX
fr (i, [ψ]) = fc([ψ]),

ψ ∈ F ∗,

(24)

X

ψ∈F X

i ,i∈[1,tX],X∈{C,T,F}

aclf

ν (ψ) · δX

fr (i, [ψ]) = aclf([ν]),

ν ∈ Γlf
ac,

(25)

hC(i) ≥ chLB(i) − n∗ · δF

χ (i), clrF(i) + ρ ≥ chLB(i),

hC(i) ≤ chUB(i), clrF(i) + ρ ≤ chUB(i) + n∗ · (1 − δF

χ (i)),

i ∈ [1,

tC],
e

(26)

chLB(i) ≤ hC(i) ≤ chUB(i),

i ∈ [

tC + 1, tC],
e

(27)

clrF(

hT(i) ≤ chUB(k) + n∗ · (δF
tC + i) + 1 − χT(i, k)),
χ (
e
tC + i) − χT(i, k)),
tC + i) + ρ ≤ chUB(k) + n∗ · (2 − δF
χ (
e
e

k ∈ [1, kC], i ∈ [1, tT],

(28)

σ(k, i) = δT

χ (k),

X
i∈[1,tT]

k ∈ [1, kC],

(29)

clrF(

hT(i) ≥ chLB(k) − n∗ · (δF
tC + i) + 1 − σ(k, i)),
χ (
e
tC + i) + ρ ≥ chLB(k) − n∗ · (2 − δF
tC + i) − σ(k, i)),
χ (
e
e

χT(i, k) ≥ σ(k, i),

k ∈ [1, kC], i ∈ [1, tT].

(30)

D.4 Descriptor for the Number of Speciﬁed Degree

We include constraints to compute descriptors for degrees in C.

variables:

2LM-M LLR monomer v7: August 25, 2021

42

- degX(i) ∈ [0, 4], i ∈ [1, tX], X ∈ {C, T, F}: the number of non-hydrogen atoms adjacent to

vertex v = vX

i (i.e., deghCi(v) = degH(v) − hyddegC(v)) in C = (H, α, β);

- degCT(i) ∈ [0, 4], i ∈ [1, tC]: the number of edges from vertex vC

i to vertices vT

j, j ∈ [1, tT];

- degTC(i) ∈ [0, 4], i ∈ [1, tC]: the number of edges from vertices vT

j, j ∈ [1, tT] to vertex vC

i;

dg(i, d) ∈ [0, 1], i ∈ [1, tC], d ∈ [1, 4], δX
- δC
dg(i, d) = 1 ⇔ degX(i) + hyddegX(i) = d;
δX

dg(i, d) ∈ [0, 1], i ∈ [1, tX], d ∈ [0, 4], X ∈ {T, F}:

- dg(d) ∈ [dgLB(d), dgUB(d)], d ∈ [1, 4]: the number of interior-vertices v with degH(vX

C = (H, α, β);

i) = d in

- degint

C (i) ∈ [1, 4], i ∈ [1, tC], degint

X (i) ∈ [0, 4], i ∈ [1, tX], X ∈ {T, F}: the interior-degree
i) in the interior H int = (V int(C), Eint(C)) of C; i.e., the number of interior-edges

degH int(vX
incident to vertex vX

i;

dg,C(i, d) ∈ [0, 1], i ∈ [1, tC], d ∈ [1, 4], δint
- δint
dg,X(i, d) = 1 ⇔ degint
δint

X (i) = d;

dg,X(i, d) ∈ [0, 1], i ∈ [1, tX], d ∈ [0, 4], X ∈ {T, F}:

- dgint(d) ∈ [dgLB(d), dgUB(d)], d ∈ [1, 4]: the number of interior-vertices v with the interior-

degree degH int(v) = d in the interior H int = (V int(C), Eint(C)) of C = (H, α, β).

constraints:

X
(≥2)(i)∪I +

k∈I +

(≥1)(i)

δT
χ (k) = degCT(i),

X
(≥2)(i)∪I −

k∈I −

(≥1)(i)

δT
χ (k) = degTC(i),

i ∈ [1, tC],

(31)

−
C(i) +

deg
g

deg
g

+
C(i) + degCT(i) + degTC(i) + δF

χ (i) = degint

C (i),

i ∈ [1,

tC],
e

(32)

−
C(i) +

deg
g

deg
g

+

C(i) + degCT(i) + degTC(i) = degint

C (i),

degint

C (i) + degex

C (i) = degC(i),

i ∈ [

tC + 1, tC],
e

i ∈ [1, tC],

fr(i, [ψ]) ≥ 2 − degint
δC

C (i)

i ∈ [1, tC],

X
ψ∈F C

i [ρ]

(33)

(34)

(35)

2vT(i) + δF
χ (
T (i) + degex
degint

tC + i) = degint
e

T (i),
T (i) = degT(i),

i ∈ [1, tT] (eT(1) = eT(tT + 1) = 0),

(36)

2LM-M LLR monomer v7: August 25, 2021

43

vF(i) + eF(i + 1) = degint
degint

F (i),
F (i) = degF(i),

F (i) + degex

i ∈ [1, tF] (eF(1) = eF(tF + 1) = 0),

(37)

X
d∈[0,4]

δX
dg(i, d) = 1, X
d∈[1,4]

d · δX

dg(i, d) = degX(i) + hyddegX(i),

X
d∈[0,4]

δint
dg,X(i, d) = 1, X
d∈[1,4]

d · δint

dg,X(i, d) = degint

X (i),

i ∈ [1, tX], X ∈ {T, C, F},

(38)

X
i∈[1,tC]
δint
dg,C(i, d) + X
i∈[1,tT]

δC
dg(i, d) + X
i∈[1,tT]
δint
dg,T(i, d) + X
i∈[1,tF]

δT
dg(i, d) + X
i∈[1,tF]
dg,F(i, d) = dgint(d),
δint

δF
dg(i, d) = dg(d),

X
i∈[1,tC]

d ∈ [1, 4].

(39)

D.5 Assigning Multiplicity

We prepare an integer variable β(e) for each edge e in the scheme graph SG to denote the bond-
multiplicity of e in a selected graph H and include necessary constraints for the variables to satisfy
in H.

constants:

- βr([ψ]): the sum βψ(r) of bond-multiplicities of edges incident to the root r of a chemical rooted

tree ψ ∈ F ∗;

variables:

- βX(i) ∈ [0, 3], i ∈ [2, tX], X ∈ {T, F}: the bond-multiplicity of edge eX

i in C;

- βC(i) ∈ [0, 3], i ∈ [

E(≥1) ∪ E(0/1) ∪ E(=1) in C;

kC + 1, mC] = I(≥1) ∪ I(0/1) ∪ I(=1): the bond-multiplicity of edge ai ∈
f

- βCT(k), βTC(k) ∈ [0, 3], k ∈ [1, kC] = I(≥2) ∪ I(≥1): the bond-multiplicity of the ﬁrst (resp., last)

edge of the pure path Pk in C;

- β∗F(c) ∈ [0, 3], c ∈ [1, cF =

rooted at vertex vC

c, c ≤

tC + tT]: the bond-multiplicity of the ﬁrst edge of the leaf path Qc
e
tC or vT
e

tC in C;
e

, c >

c−ftC

- βX

ex(i) ∈ [0, 4], i ∈ [1, tX], X ∈ {C, T, F}: the sum βC[v](v) of bond-multiplicities of edges in the
ρ-fringe-tree C[v] rooted at interior-vertex v = vX

i;

- δX

β (i, m) ∈ [0, 1], i ∈ [2, tX], m ∈ [0, 3], X ∈ {T, F}: δX

β (i, m) = 1 ⇔ βX(i) = m;

- δC

β (i, m) ∈ [0, 1], i ∈ [

kC, mC] = I(≥1) ∪ I(0/1) ∪ I(=1), m ∈ [0, 3]: δC
f

β (i, m) = 1 ⇔ βC(i) = m;

2LM-M LLR monomer v7: August 25, 2021

44

β (k, m), δTC
- δCT
β (k, m) = 1) ⇔ βCT(k) = m (resp., βTC(k) = m);
δTC

β (k, m) ∈ [0, 1], k ∈ [1, kC] = I(≥2) ∪ I(≥1), m ∈ [0, 3]: δCT

β (k, m) = 1 (resp.,

- δ∗F

β (c, m) ∈ [0, 1], c ∈ [1, cF], m ∈ [0, 3], X ∈ {C, T}: δ∗F

β (c, m) = 1 ⇔ β∗F(c) = m;

- bdint(m) ∈ [0, 2nint

UB], m ∈ [1, 3]: the number of interior-edges with bond-multiplicity m in C;

- bdX(m) ∈ [0, 2nint

UB], X ∈ {C, T, CT, TC}, bdX(m) ∈ [0, 2nint

UB], X ∈ {F, CF, TF}, m ∈ [1, 3]: the

number of interior-edges e ∈ EX with bond-multiplicity m in C;

constraints:

eC(i) ≤ βC(i) ≤ 3eC(i), i ∈ [

kC + 1, mC] = I(≥1) ∪ I(0/1) ∪ I(=1),
f

(40)

eX(i) ≤ βX(i) ≤ 3eX(i),

i ∈ [2, tX], X ∈ {T, F},

(41)

δT
χ (k) ≤ βCT(k) ≤ 3δT

χ (k),

δT
χ (k) ≤ βTC(k) ≤ 3δT
χ (c) ≤ βXF(c) ≤ 3δF
δF

χ (k),
χ(c),

k ∈ [1, kC],
c ∈ [1, cF],

(42)

(43)

X
m∈[0,3]

δX
β (i, m) = 1, X
m∈[0,3]

m · δX

β (i, m) = βX(i),

i ∈ [2, tX], X ∈ {T, F},

(44)

X
m∈[0,3]

δC
β (i, m) = 1, X
m∈[0,3]

m · δC

β (i, m) = βC(i),

i ∈ [

kC + 1, mC],
f

(45)

X
m∈[0,3]

δCT
β (k, m) = 1, X
m∈[0,3]

X
m∈[0,3]

δTC
β (k, m) = 1, X
m∈[0,3]

m · δCT

β (k, m) = βCT(k),

k ∈ [1, kC],

m · δTC

β (k, m) = βTC(k),

k ∈ [1, kC],

X
m∈[0,3]

δ∗F
β (c, m) = 1, X
m∈[0,3]

m · δ∗F

β (c, m) = β∗F(c),

c ∈ [1, cF],

(46)

βr([ψ]) · δX

fr (i, [ψ]) = βX

ex(i),

i ∈ [1, tX], X ∈ {C, T, F},

(47)

X
ψ∈F X
i

2LM-M LLR monomer v7: August 25, 2021

45

δC
β (i, m) = bdC(m), X
i∈[2,tT]

X
f
kC+1,mC]
δCT
β (k, m) = bdCT(m), X
k∈[1,kC]

i∈[

X
k∈[1,kC]

δT
β (i, m) = bdT(m),

δTC
β (k, m) = bdTC(m),

X
i∈[2,tF]

δF
β (i, m) = bdF(m), X
c∈[1,ftC]

δ∗F
β (c, m) = bdCF(m),

δ∗F
β (c, m) = bdTF(m),

X
c∈[ftC+1,cF]

bdC(m) + bdT(m) + bdF(m) + bdCT(m) + bdTC(m) + bdTF(m) + bdCF(m) = bdint(m),
m ∈ [1, 3].

(48)

D.6 Assigning Chemical Elements and Valence Condition

We include constraints so that each vertex v in a selected graph H satisﬁes the valence condition;
i.e., βC(v) = val(α(v)) + eledegC(v), where eledegC(v) = vion(ψ) for the ρ-fringe-tree C[v] r-
isomorphic to ψ. With these constraints, a chemical graph C = (H, α, β) on a selected subgraph
H will be constructed.

constants:

- Subsets Λint ⊆ Λ \ {H}, Λex ⊆ Λ of chemical elements, where we denote by [e] (resp., [e]int and

[e]ex) of a standard encoding of an element e in the set Λ (resp., Λint

ǫ and Λex

ǫ );

- A valence function: val : Λ → [1, 6];

- A function mass∗ : Λ → Z (we let mass(a) denote the observed mass of a chemical element

a ∈ Λ, and deﬁne mass∗(a) , ⌊10 · mass(a)⌋);

- Subsets Λ∗(i) ⊆ Λint, i ∈ [1, tC];

- naLB(a), naUB(a) ∈ [0, n∗], a ∈ Λ:

lower and upper bounds on the number of vertices v with

α(v) = a;

- naint

LB(a), naint
v with α(v) = a;

UB(a) ∈ [0, n∗], a ∈ Λint: lower and upper bounds on the number of interior-vertices

- αr([ψ]) ∈ [Λex], ∈ F ∗: the chemical element α(r) of the root r of ψ;

- naex

a ([ψ]) ∈ [0, n∗], a ∈ Λex, ψ ∈ F ∗: the frequency of chemical element a in the set of non-rooted

vertices in ψ, where possibly a = H;

- M: an upper bound for the average ms(C) of mass∗ over all atoms in C;

variables:

2LM-M LLR monomer v7: August 25, 2021

46

- βCT(i), βTC(i) ∈ [0, 3], i ∈ [1, tT]: the bond-multiplicity of edge eCT

j,i (resp., eTC

j,i) if one exists;

- βCF(i), βTF(i) ∈ [0, 3], i ∈ [1, tF]: the bond-multiplicity of eCF

j,i (resp., eTF

j,i) if one exists;

ǫ

- αX(i) ∈ [Λint

], δX
αX(i) = 0) ⇔ δX
used in C);

α (i, [a]int) ∈ [0, 1], a ∈ Λint
ǫ
α (i, 0) = 0) ⇔ α(vX
α (i, [a]int) = 1 (resp., δX

, i ∈ [1, tX], X ∈ {C, T, F}: αX(i) = [a]int ≥ 1 (resp.,
i is not

i) = a ∈ Λ (resp., vertex vX

- δX

α (i, [a]int) ∈ [0, 1], i ∈ [1, tX], a ∈ Λint, X ∈ {C, T, F}: δX

α (i, [a]t) = 1 ⇔ α(vX

i) = a;

- Mass ∈ Z+: Pv∈V (H) mass∗(α(v));
- ms ∈ R+: Pv∈V (H) mass∗(α(v))/|V (H)|;
- δatm(i) ∈ [0, 1], i ∈ [nLB + naLB(H), n∗ + naUB(H)]: δatm(i) = 1 ⇔ |V (H)| = i;

- na([a]) ∈ [naLB(a), naUB(a)], a ∈ Λ: the number of vertices v ∈ V (H) with α(v) = a, where

possibly a = H;

- naint([a]int) ∈ [naint
with α(v) = a;

LB(a), naint

UB(a)], a ∈ Λ, X ∈ {C, T, F}: the number of interior-vertices v ∈ V (C)

- naex

X ([a]ex), naex([a]ex) ∈ [0, naUB(a)], a ∈ Λ, X ∈ {C, T, F}: the number of exterior-vertices

rooted at vertices v ∈ VX and the number of exterior-vertices v such that α(v) = a;

constraints:

βCT(k) − 3(eT(i) − χT(i, k) + 1) ≤ βCT(i) ≤ βCT(k) + 3(eT(i) − χT(i, k) + 1), i ∈ [1, tT],
βTC(k) − 3(eT(i + 1) − χT(i, k) + 1) ≤ βTC(i) ≤ βTC(k) + 3(eT(i + 1) − χT(i, k) + 1), i ∈ [1, tT],
k ∈ [1, kC],

(49)

β∗F(c) − 3(eF(i) − χF(i, c) + 1) ≤ βCF(i) ≤ β∗F(c) + 3(eF(i) − χF(i, c) + 1), i ∈ [1, tF],
β∗F(c) − 3(eF(i) − χF(i, c) + 1) ≤ βTF(i) ≤ β∗F(c) + 3(eF(i) − χF(i, c) + 1), i ∈ [1, tF], c ∈ [

c ∈ [1,

tC],
e
tC + 1, cF],
e
(50)

α (i, [a]int) = 1, X
δC
X
a∈Λint
a∈Λint
α (i, [a]int) = vX(i), X
δX
a∈Λint

X
a∈Λint

[a]int · δX

α (i, [a]int) = αC(i),

i ∈ [1, tC],

[a]int · δX

α (i, [a]int) = αX(i),

i ∈ [1, tX], X ∈ {T, F},

(51)

αr([ψ]) · δX

fr (i, [ψ]) = αX(i),

i ∈ [1, tX], X ∈ {C, T, F},

(52)

X
ψ∈F X
i

2LM-M LLR monomer v7: August 25, 2021

47

X
j∈IC(i)

βC(j) + X

βCT(k) + X

βTC(k)

k∈I +

(≥2)(i)∪I +

(≥1)(i)

k∈I −

(≥2)(i)∪I −

(≥1)(i)

+β∗F(i) + βC

ex(i) − eledegC(i) = X
a∈Λint

val(a)δC

α (i, [a]int),

i ∈ [1,

tC],
e

(53)

βC(j) + X

βCT(k) + X

βTC(k)

k∈I +

(≥2)(i)∪I +

(≥1)(i)

k∈I −

(≥2)(i)∪I −

(≥1)(i)

X
j∈IC(i)

+βC

ex(i) − eledegC(i) = X
a∈Λint

val(a)δC

α (i, [a]int),

i ∈ [

tC + 1, tC],
e

(54)

βT(i) + βT(i+1) + βT

ex(i) + βCT(i) + βTC(i)

+β∗F(

tC + i) − eledegT(i) = X
e
a∈Λint

val(a)δT

α (i, [a]int),

i ∈ [1, tT] (βT(1) = βT(tT + 1) = 0),

(55)

βF(i) + βF(i+1) + βCF(i) + βTF(i)

+βF

ex(i) − eledegF(i) = X
a∈Λint

val(a)δF

α(i, [a]int),

i ∈ [1, tF] (βF(1) = βF(tF + 1) = 0),

(56)

α (i, [a]int) = naX([a]int),
δX

a ∈ Λint, X ∈ {C, T, F},

(57)

X
i∈[1,tX]

X
i ,i∈[1,tX]

ψ∈F X

naex

a ([ψ]) · δX

fr (i, [ψ]) = naex

X ([a]ex),

naC([a]int) + naT([a]int) + naF([a]int) = naint([a]int),
X ([a]ex) = naex([a]ex),

naex

X
X∈{C,T,F}

naint([a]int) + naex([a]ex) = na([a]),
naint([a]int) = na([a]),
naex([a]ex) = na([a]),

a ∈ Λex, X ∈ {C, T, F},

(58)

a ∈ Λint,

a ∈ Λex,

a ∈ Λint ∩ Λex,
a ∈ Λint \ Λex,
a ∈ Λex \ Λint,

(59)

48

(60)

(61)

(62)

(63)

2LM-M LLR monomer v7: August 25, 2021

α (i, [a]int) = 1,
δC

X
a∈Λ∗(i)

i ∈ [1, tC],

mass∗(a) · na([a]) = Mass,

X
a∈Λ

X
i∈[nLB+naLB(H),n∗+naUB(H)]

δatm(i) = 1,

X
i∈[nLB+naLB(H),n∗+naUB(H)]

i · δatm(i) = nG + naex([H]ex),

Mass/i − M · (1 − δatm(i)) ≤ ms ≤ Mass/i + M · (1 − δatm(i)),

i ∈ [nLB + naLB(H), n∗ + naUB(H)].
(64)

D.7 Constraints for Bounds on the Number of Bonds

We include constraints for speciﬁcation of lower and upper bounds bdLB and bdUB.
constants:

- bdm,LB(i), bdm,UB(i) ∈ [0, nint

UB], i ∈ [1, mC], m ∈ [2, 3]: lower and upper bounds on the number

of edges e ∈ E(Pi) with bond-multiplicity β(e) = m in the pure path Pi for edge ei ∈ EC;

variables :

- bdT(k, i, m) ∈ [0, 1], k ∈ [1, kC], i ∈ [2, tT], m ∈ [2, 3]: bdT(k, i, m) = 1 ⇔ the pure path Pk for
i) = m;

edge ek ∈ EC contains edge eT

i with β(eT

constraints:

bdm,LB(i) ≤ δC

β (i, m) ≤ bdm,UB(i), i ∈ I(=1) ∪ I(0/1), m ∈ [2, 3],

bdT(k, i, m) ≥ δT

β (i, m) + χT(i, k) − 1,

k ∈ [1, kC], i ∈ [2, tT], m ∈ [2, 3],

X
j∈[2,tT]

δT
β (j, m) ≥ X

bdT(k, i, m), m ∈ [2, 3],

k∈[1,kC],i∈[2,tT]

(65)

(66)

(67)

bdm,LB(k) ≤ X
i∈[2,tT]

bdT(k, i, m) + δCT

β (k, m) + δTC

β (k, m) ≤ bdm,UB(k),

k ∈ [1, kC], m ∈ [2, 3].

(68)

2LM-M LLR monomer v7: August 25, 2021

49

D.8 Descriptor for the Number of Adjacency-conﬁgurations

We call a tuple (a, b, m) ∈ (Λ \ {H}) × (Λ \ {H}) × [1, 3] an adjacency-conﬁguration. The adjacency-
conﬁguration of an edge-conﬁguration (µ = ad, µ′ = bd′, m) is deﬁned to be (a, b, m). We include
constraints to compute the frequency of each adjacency-conﬁguration in an inferred chemical graph
C.
constants:

- A set Γint of edge-conﬁgurations γ = (µ, µ′, m) with µ ≤ µ′;

- Let γ of an edge-conﬁguration γ = (µ, µ′, m) denote the edge-conﬁguration (µ′, µ, m);

< = {(µ, µ′, m) ∈ Γint | µ < µ′}, Γint

= = {(µ, µ′, m) ∈ Γint | µ = µ′} and Γint

> = {γ | γ ∈

- Let Γint
Γint
< };

- Let Γint

ac,<, Γint
in the sets Γint

ac,= and Γint
< , Γint

= and Γint

> , respectively;

ac,> denote the sets of the adjacency-conﬁgurations of edge-conﬁgurations

- Let ν of an adjacency-conﬁguration ν = (a, b, m) denote the adjacency-conﬁguration (b, a, m);

- Prepare a coding of the set Γint

ac ∪ Γint

ac,> and let [ν]int denote the coded integer of an element ν

in Γint

ac ∪ Γint

ac,>;

- Choose subsets

ΓF
ΓC
ac,
ac,
e
e
adjacency-conﬁgurations exactly, set
ac ∪ Γint
Γint

ΓCT
ac ,
e

ΓTC
ac ,
e

ΓT
ac,
e

ac,>;

ac ⊆ Γint
ΓTF
ΓCF
ac ,
e
e
ΓT
ΓC
ac :=
ac :=
e
e

ac ∪ Γint
ac,>; To compute the frequency of
ΓCT
:=
:=
ac
e

ΓTC
ac
e

ΓCF
ac
e

ΓTF
ac
e

ac :=

ΓF
e

:=

:=

- acint

LB(ν), acint

UB(ν) ∈ [0, 2nint

UB], ν = (a, b, m) ∈ Γint
ac :

lower and upper bounds on the number of

interior-edges e = uv with α(u) = a, α(v) = b and β(e) = m;

variables:

- acint([ν]int) ∈ [acint

LB(ν), acint

UB(ν)], ν ∈ Γint

ac : the number of interior-edges with adjacency-conﬁguration

ν;

- acC([ν]int) ∈ [0, mC], ν ∈

ac: the
number of edges eC ∈ EC (resp., edges eT ∈ ET and edges eF ∈ EF) with adjacency-conﬁguration
ν;

ac, acT([ν]int) ∈ [0, tT], ν ∈
ΓC
e

ac, acF([ν]int) ∈ [0, tF], ν ∈
ΓT
e

ΓF
e

- acCT([ν]int) ∈ [0, min{kC, tT}], ν ∈

[0,
eTC ∈ ETC and edges eCF ∈ ECF and eTF ∈ ETF) with adjacency-conﬁguration ν;

ac , acTF([ν]int) ∈ [0, tT], ν ∈
ΓCF
e

ac , acTC([ν]int) ∈ [0, min{kC, tT}], ν ∈
ΓCT
e

ac , acCF([ν]int) ∈
ΓCT
e
ac : the number of edges eCT ∈ ECT (resp., edges
ΓTF
e

tC], ν ∈
e

- δC

ac(i, [ν]int) ∈ [0, 1], i ∈ [
ac, δF
ΓT
[2, tT], ν ∈
e
adjacency-conﬁguration ν;

kC + 1, mC] = I(≥1) ∪ I(0/1) ∪ I(=1), ν ∈
f

ac(i, [ν]int) ∈ [0, 1], i ∈ [2, tF], ν ∈

ac(i, [ν]int) = 1 ⇔ edge eX

ac(i, [ν]int) ∈ [0, 1], i ∈
i has

ac, δT
ΓC
e

ac: δX
ΓF
e

2LM-M LLR monomer v7: August 25, 2021

50

- δCT
ac (k, [ν]int), δTC
ac (k, [ν]int) = 1) ⇔ edge eCT
δTC
conﬁguration ν;

ac (k, [ν]int) ∈ [0, 1], k ∈ [1, kC] = I(≥2) ∪ I(≥1), ν ∈
tail(k),j (resp., eTC

ac (k, [ν]int) = 1 (resp.,
head(k),j) for some j ∈ [1, tT] has adjacency-

ac : δCT
ΓCT
e

- δCF

ac (c, [ν]int) ∈ [0, 1], c ∈ [1,
adjacency-conﬁguration ν;

tC], ν ∈
e

ac : δCF
ΓCF
e

ac (c, [ν]int) = 1 ⇔ edge eCF

c,i for some i ∈ [1, tF] has

- δTF

ac (i, [ν]int) ∈ [0, 1], i ∈ [1, tT], ν ∈
adjacency-conﬁguration ν;

ac : δTF
ΓTF
e

ac (i, [ν]int) = 1 ⇔ edge eTF

i,j for some j ∈ [1, tF] has

- αCT(k), αTC(k) ∈ [0, |Λint|], k ∈ [1, kC]: α(v) of the edge (vC

tail(k), v) ∈ ECT (resp., (v, vC

head(k)) ∈

ETC) if any;

- αCF(c) ∈ [0, |Λint|], c ∈ [1,

tC]: α(v) of the edge (vC
e

c, v) ∈ ECF if any;

- αTF(i) ∈ [0, |Λint|], i ∈ [1, tT]: α(v) of the edge (vT

i, v) ∈ ETF if any;

- ∆C+

ac (i), ∆C−

ac (i), ∈ [0, |Λint|], i ∈ [

ac (i), ∆T−
kC+1, mC], ∆T+
f
ac (i) = 0 (resp., ∆X+
ac (i) = ∆X−

ac (i) ∈ [0, |Λint|], i ∈ [2, tT], ∆F+
ac (i) = α(u) and ∆X−

ac (i), ∆F−
ac (i) = α(v)) ⇔ edge

ac (i) ∈

[0, |Λint|], i ∈ [2, tF]: ∆X+
eX

i = (u, v) ∈ EX is used in C (resp., eX

i 6∈ E(G));

(k), ∆CT−
- ∆CT+
ac
(k) = α(u) and ∆CT−
∆CT+
ac
used in C (resp., otherwise);

ac

ac

(k) ∈ [0, |Λint|], k ∈ [1, kC] = I(≥2) ∪ I(≥1): ∆CT+

(k) = ∆CT−
(k) = 0 (resp.,
tail(k),j = (u, v) ∈ ECT for some j ∈ [1, tT] is

ac

ac

(k) = α(v)) ⇔ edge eCT

- ∆TC+
ac
∆CT−
ac

(k), ∆TC−
(k);

ac

(k) ∈ [0, |Λint|], k ∈ [1, kC] = I(≥2) ∪ I(≥1): Analogous with ∆CT+

ac

(k) and

- ∆CF+
ac

(c) ∈ [0, |Λint|], ∆CF−

ac

(c) ∈ [0, |Λint|], c ∈ [1,

α(u) and ∆CF−
otherwise);

ac

(c) = α(v)) ⇔ edge eCF

(c) =
ac
c,i = (u, v) ∈ ECF for some i ∈ [1, tF] is used in C (resp.,

(c) = 0 (resp., ∆CF+

tC]: ∆CF+
e

(c) = ∆CF−

ac

ac

- ∆TF+
ac

(i) ∈ [0, |Λint|], ∆TF−

ac

(i) ∈ [0, |Λint|], i ∈ [1, tT]: Analogous with ∆CF+

ac

(c) and ∆CF−

ac

(c);

constraints:

acC([ν]int) = 0,
acT([ν]int) = 0,
acF([ν]int) = 0,
acCT([ν]int) = 0,
acTC([ν]int) = 0,
acCF([ν]int) = 0,
acTF([ν]int) = 0,

ν ∈ Γint
ν ∈ Γint
ν ∈ Γint
ν ∈ Γint
ν ∈ Γint
ν ∈ Γint
ν ∈ Γint

ac \
ac \
ac \
ac \
ac \
ac \
ac \

ΓC
ac,
e
ΓT
ac,
e
ΓF
ac,
e
ΓCT
ac ,
e
ΓTC
ac ,
e
ΓCF
ac ,
e
ΓTF
ac ,
e

(69)

2LM-M LLR monomer v7: August 25, 2021

51

X
(a,b,m)=ν∈Γint
ac

acC([ν]int) = X

δC
β (i, m),

i∈[

f
kC+1,mC]
acT([ν]int) = X
i∈[2,tT]
acF([ν]int) = X
i∈[2,tF]

δT
β (i, m),

δF
β (i, m),

X
(a,b,m)=ν∈Γint
ac

X
(a,b,m)=ν∈Γint
ac

X
(a,b,m)=ν∈Γint
ac

X
(a,b,m)=ν∈Γint
ac

X
(a,b,m)=ν∈Γint
ac

acCT([ν]int) = X
k∈[1,kC]
acTC([ν]int) = X
k∈[1,kC]
acCF([ν]int) = X
c∈[1,ftC]

δCT
β (k, m),

δTC
β (k, m),

δ∗F
β (c, m),

X
(a,b,m)=ν∈Γint
ac

acTF([ν]int) = X

δ∗F
β (c, m),

c∈[ftC+1,cF]

∆C+

ac (i) + X
ν=(a,b,m)∈

∆C−

ac (i) + X
ν=(a,b,m)∈
∆C+

X

ν=(a,b,m)∈

ac(i, [ν]int) = βC(i),

m · δC
e
ΓC
ac
ac(i, [ν]int) = αC(tail(i)),
[a]intδC
e
ΓC
ac
[b]intδC
e
ΓC
ac
ac (i) ≤ 2|Λint|(1 − eC(i)),
ac (i) + ∆C−
ac(i, [ν]int) = acC([ν]int),
δC

ac(i, [ν]int) = αC(head(i)),

X
f
kC+1,mC]

i∈[

X
ν=(a,b,m)∈eΓT
ac
[a]intδT
e
ΓT
ac

∆T+

ac (i) + X
ν=(a,b,m)∈

m · δT

ac(i, [ν]int) = βT(i),

ac(i, [ν]int) = αT(i − 1),

∆T−

ac(i, [ν]int) = αT(i),

[b]intδT
ac (i) + X
e
ν=(a,b,m)∈
ΓT
ac
ac (i) ≤ 2|Λint|(1 − eT(i)),
ac (i) + ∆T−
ac(i, [ν]int) = acT([ν]int),
δT

∆T+

X
i∈[2,tT]

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

(70)

(71)

i ∈ [

kC + 1, mC],
f
ΓC
ac,
e

ν ∈

i ∈ [2, tT],
ΓT
ac,
e

ν ∈

(72)

2LM-M LLR monomer v7: August 25, 2021

52

X

m · δF

ac(i, [ν]int) = βF(i),

∆F+

ac (i) + X
ν=(a,b,m)∈

ν=(a,b,m)∈

e
ΓF
ac
[a]intδF
e
ΓF
ac

ac(i, [ν]int) = αF(i − 1),

∆F−

ac (i) + X

[b]intδF

ac(i, [ν]int) = αF(i),

∆F+

ν=(a,b,m)∈eΓF
ac
ac (i) ≤ 2|Λex|(1 − eF(i)),
ac (i) + ∆F−
ac(i, [ν]int) = acF([ν]int),
δF

X
i∈[2,tF]

αT(i) + |Λint|(1 − χT(i, k) + eT(i)) ≥ αCT(k),
αCT(k) ≥ αT(i) − |Λint|(1 − χT(i, k) + eT(i)),
ac (k, [ν]int) = βCT(k),

m · δCT

X
ν=(a,b,m)∈

e
ΓCT
ac
[a]intδCT

∆CT+
ac

(k) + X
ν=(a,b,m)∈

e
ΓCT
ac

ac (k, [ν]int) = αC(tail(k)),

∆CT−
ac

(k) + X
ν=(a,b,m)∈

e
ΓCT
ac

[b]intδCT

ac (k, [ν]int) = αCT(k),

∆CT+
ac

(k) + ∆CT−

(k) ≤ 2|Λint|(1 − δT
χ (k)),
ac
ac (k, [ν]int) = acCT([ν]int),
δCT

X
k∈[1,kC]

αT(i) + |Λint|(1 − χT(i, k) + eT(i + 1)) ≥ αTC(k),
αTC(k) ≥ αT(i) − |Λint|(1 − χT(i, k) + eT(i + 1)),
ac (k, [ν]int) = βTC(k),

m · δTC

X
ν=(a,b,m)∈

e
ΓTC
ac
[a]intδTC

ac (k, [ν]int) = αTC(k),

∆TC+
ac

(k) + X
ν=(a,b,m)∈

e
ΓTC
ac
[b]intδTC

∆TC−
ac

(k) + X
ν=(a,b,m)∈
∆TC+
ac

e
ΓTC
ac
(k) + ∆TC−

ac (k, [ν]int) = αC(head(k)),

(k) ≤ 2|Λint|(1 − δT
χ (k)),
ac
ac (k, [ν]int) = acTC([ν]int),
δTC

X
k∈[1,kC]

i ∈ [2, tF],
ΓF
ac,
e

ν ∈

(73)

i ∈ [1, tT],

k ∈ [1, kC],
ΓCT
ac ,
e

ν ∈

(74)

i ∈ [1, tT],

k ∈ [1, kC],
ΓTC
ac ,
e

ν ∈

(75)

2LM-M LLR monomer v7: August 25, 2021

53

αF(i) + |Λint|(1 − χF(i, c) + eF(i)) ≥ αCF(c),
αCF(c) ≥ αF(i) − |Λint|(1 − χF(i, c) + eF(i)),
ac (c, [ν]int) = β∗F(c),

m · δCF

X
ν=(a,b,m)∈

e
ΓCF
ac
ac (c, [ν]int) = αC(head(c)),
[a]intδCF

∆CF+
ac

(c) + X
ν=(a,b,m)∈

e
ΓCF
ac

∆CF−
ac

[b]intδCF

(c) + X
ν=(a,b,m)∈
(c) ≤ 2 max{|Λint|, |Λint|}(1 − δF

ac (c, [ν]int) = αCF(c),

e
ΓCF
ac

χ (c)),
ac (c, [ν]int) = acCF([ν]int),
δCF

∆CF+
ac

(c) + ∆CF−

ac

X
c∈[1,ftC]

αF(j) + |Λint|(1 − χF(j, i +
αTF(i) ≥ αF(j) − |Λint|(1 − χF(j, i +

tC) + eF(j)) ≥ αTF(i),
e
tC) + eF(j)),
e

m · δTF

ac (i, [ν]int) = β∗F(i +

tC),
e

X
ν=(a,b,m)∈

e
ΓTF
ac

∆TF+
ac

(i) + X
ν=(a,b,m)∈

[a]intδTF

ac (i, [ν]int) = αT(i),

e
ΓTF
ac
[b]intδTF

∆TF−
ac

(i) + X

ac (i, [ν]int) = αTF(i),

ν=(a,b,m)∈eΓTF
ac

∆TF+
ac

(i) + ∆TF−

ac

(i) ≤ 2 max{|Λint|, |Λint|}(1 − δF

tC)),
e
ac (i, [ν]int) = acTF([ν]int),
δTF

χ (i +

X
i∈[1,tT]

X
X∈{C,T,F,CT,TC,CF,TF}

(acX([ν]int) + acX([ν]int)) = acint([ν]int),

i ∈ [1, tF],

c ∈ [1,

ν ∈

tC],
e
ΓCF
ac ,
e

j ∈ [1, tF],

i ∈ [1, tT],
ΓTF
ac ,
e

ν ∈

ν ∈ Γint

ac,<,

(76)

(77)

X
X∈{C,T,F,CT,TC,CF,TF}

acX([ν]int) = acint([ν]int),

ν ∈ Γint

ac,=.

(78)

D.9 Descriptor for the Number of Chemical Symbols

We include constraints for computing the frequency of each chemical symbol in Λdg. Let cs(v)
denote the chemical symbol of an interior-vertex v in a chemical graph C to be inferred; i.e.,
C (v) = d in C = (H, α, β).
cs(v) = µ = ad ∈ Λdg such that α(v) = a and deghCi(v) = degH (v)−deghyd
constants:

- A set Λint

dg of chemical symbols;

2LM-M LLR monomer v7: August 25, 2021

54

- Prepare a coding of each of the two sets Λint

dg and let [µ]int denote the coded integer of an element

µ ∈ Λint
dg ;

- Choose subsets
dg :=

ΛC
e

dg :=

ΛT
e
variables:

ΛF
ΛT
ΛC
dg,
dg,
e
e
e
ΛF
dg := Λint
dg ;
e

dg ⊆ Λint

dg : To compute the frequency of chemical symbols exactly, set

- nsint([µ]int) ∈ [0, nint

UB], µ ∈ Λint

dg : the number of interior-vertices v with cs(v) = µ;

- δX

ns(i, [µ]int) ∈ [0, 1], i ∈ [1, tX], µ ∈ Λint

dg , X ∈ {C, T, F};

constraints:

X
e
ΛX
dg∪{ǫ}

µ∈

ns(i, [µ]int) = 1, X
δX
µ=ad∈

e
ΛX
dg

[a]int · δX

ns(i, [µ]int) = αX(i),

d · δX

ns(i, [µ]int) = degX(i),

X
e
µ=ad∈
ΛX
dg

i ∈ [1, tX], X ∈ {C, T, F},

(79)

X
i∈[1,tC]

ns(i, [µ]int) + X
δC
i∈[1,tT]

ns(i, [µ]int) + X
δT
i∈[1,tF]

ns(i, [µ]int) = nsint([µ]int),
δF

µ ∈ Λint
dg .

(80)

D.10 Descriptor for the Number of Edge-conﬁgurations

We include constraints to compute the frequency of each edge-conﬁguration in an inferred chemical
graph C.
constants:

- A set Γint of edge-conﬁgurations γ = (µ, µ′, m) with µ ≤ µ′;

- Let Γint

< = {(µ, µ′, m) ∈ Γint | µ < µ′}, Γint

= = {(µ, µ′, m) ∈ Γint | µ = µ′} and Γint

> = {(µ′, µ, m) |

(µ, µ′, m) ∈ Γint

< };

- Prepare a coding of the set Γint ∪ Γint

> and let [γ]int denote the coded integer of an element γ in

Γint ∪ Γint
> ;

- Choose subsets

ΓTC
ΓCT
ec ,
ec ,
e
e
ΓC
ec :=
conﬁgurations exactly, set
e

ΓC
ec,
e

ΓT
ec,
e

ec ⊆ Γint ∪ Γint
ΓTF
ΓCF
ΓF
ec ,
ec,
> ; To compute the frequency of edge-
e
e
e
ΓF
ΓCT
ΓT
ec :=
:=
ec :=
ec
e
e
e

:= Γint ∪ Γint
> ;

ΓTF
ec
e

ΓCF
ec
e

:=

:=

- ecint

LB(γ), ecint

UB(γ) ∈ [0, 2nint

lower and upper bounds on the number of

ΓTC
ec
e
UB], γ = (µ, µ′, m) ∈ Γint:

interior-edges e = uv with cs(u) = µ, cs(v) = µ′ and β(e) = m;

variables:

2LM-M LLR monomer v7: August 25, 2021

55

- ecint([γ]int) ∈ [ecint

LB(γ), ecint

UB(γ)], γ ∈ Γint: the number of interior-edges with edge-conﬁguration

γ;

- ecC([γ]int) ∈ [0, mC], γ ∈

ec: the
number of edges eC ∈ EC (resp., edges eT ∈ ET and edges eF ∈ EF) with edge-conﬁguration γ;

ec, ecT([γ]int) ∈ [0, tT], γ ∈
ΓC
e

ec, ecF([γ]int) ∈ [0, tF], γ ∈
ΓT
e

ΓF
e

- ecCT([γ]int) ∈ [0, min{kC, tT}], γ ∈

[0,
eTC ∈ ETC and edges eCF ∈ ECF and eTF ∈ ETF) with edge-conﬁguration γ;

ec , ecTF([γ]int) ∈ [0, tT], γ ∈
ΓCF
e

ΓCT
ec , ecTC([γ]int) ∈ [0, min{kC, tT}], γ ∈
e

ΓCT
ec , ecCF([γ]int) ∈
e
ec : the number of edges eCT ∈ ECT (resp., edges
ΓTF
e

tC], γ ∈
e

- δC

ec(i, [γ]int) ∈ [0, 1], i ∈ [
ec, δF
ΓT
[2, tT], γ ∈
e
conﬁguration γ;

kC + 1, mC] = I(≥1) ∪ I(0/1) ∪ I(=1), γ ∈
f

ec(i, [γ]int) ∈ [0, 1], i ∈ [2, tF], γ ∈

ec, δT
ΓC
e
ec(i, [γ]t) = 1 ⇔ edge eX

ec(i, [γ]int) ∈ [0, 1], i ∈
i has edge-

ec: δX
ΓF
e

- δCT

ec,C(k, [γ]int), δTC
(resp., δTC
conﬁguration γ;

ec,C(k, [γ]int) ∈ [0, 1], k ∈ [1, kC] = I(≥2) ∪ I(≥1), γ ∈

ec,C(k, [γ]int) = 1) ⇔ edge eCT

tail(k),j (resp., eTC

ec,C(k, [γ]int) = 1
ec : δCT
ΓCT
e
head(k),j) for some j ∈ [1, tT] has edge-

- δCF

ec,C(c, [γ]int) ∈ [0, 1], c ∈ [1,
has edge-conﬁguration γ;

tC], γ ∈
e

ΓCF
ec : δCF
e

ec,C(c, [γ]int) = 1 ⇔ edge eCF

c,i for some i ∈ [1, tF]

- δTF

ec,T(i, [γ]int) ∈ [0, 1], i ∈ [1, tT], γ ∈
has edge-conﬁguration γ;

ec : δTF
ΓTF
e

ec,T(i, [γ]int) = 1 ⇔ edge eTF

i,j for some j ∈ [1, tF]

- degCT

T (k), degTC
ECT (resp., (v, vC

head(k)) ∈ ETC) if any;

T (k) ∈ [0, 4], k ∈ [1, kC]: deghCi(v) of an end-vertex v ∈ VT of the edge (vC

tail(k), v) ∈

- degCF

F (c) ∈ [0, 4], c ∈ [1,

tC]: deghCi(v) of an end-vertex v ∈ VF of the edge (vC
e

c, v) ∈ ECF if any;

- degTF

F (i) ∈ [0, 4], i ∈ [1, tT]: deghCi(v) of an end-vertex v ∈ VF of the edge (vT

i, v) ∈ ETF if any;

- ∆C+

ec (i), ∆C−

ec (i), ∈ [0, 4], i ∈ [

kC + 1, mC], ∆T+
f
ec (i) = 0 (resp., ∆X+
ec (i) = ∆X−

ec (i), ∆T−

[0, 4], i ∈ [2, tF]: ∆X+
edge eX

i = (u, v) ∈ EX is used in hCi (resp., eX

ec (i) = deghCi(u) and ∆X−
i 6∈ E(hCi));

ec (i) ∈ [0, 4], i ∈ [2, tT], ∆F+

ec (i), ∆F−
ec (i) ∈
ec (i) = deghCi(v)) ⇔

ec

(k), ∆CT−
(k) = deghCi(u) and ∆CT−

- ∆CT+
ec
∆CT+
ec
j ∈ [1, tT] is used in hCi (resp., otherwise);

(k) ∈ [0, 4], k ∈ [1, kC] = I(≥2) ∪ I(≥1): ∆CT+

(k) = 0 (resp.,
ec
(k) = deghCi(v)) ⇔ edge eCT
tail(k),j = (u, v) ∈ ECT for some

(k) = ∆CT−

ec

ec

- ∆TC+
ec

(k), ∆TC−

ec

(k) ∈ [0, 4], k ∈ [1, kC] = I(≥2) ∪ I(≥1): Analogous with ∆CT+

ec

(k) and ∆CT−

ec

(k);

(c) ∈ [0, 4], c ∈ [1,

(c), ∆CF−
(c) = 0 (resp., ∆CF+
tC]: ∆CF+
(c) = deghCi(u) and
e
c,j = (u, v) ∈ ECF for some j ∈ [1, tF] is used in hCi (resp.,
(c) = deghCi(v)) ⇔ edge eCF

(c) = ∆CF−

ec

ec

ec

ec

- ∆CF+
ac
∆CF−
ec
otherwise);

- ∆TF+
ec

(i), ∆TF−

ec

(i) ∈ [0, 4], i ∈ [1, tT]: Analogous with ∆CF+

ec

(c) and ∆CF−

ec

(c);

2LM-M LLR monomer v7: August 25, 2021

56

constraints:

ecC([γ]int) = 0,
ecT([γ]int) = 0,
ecF([γ]int) = 0,
ecCT([γ]int) = 0,
ecTC([γ]int) = 0,
ecCF([γ]int) = 0,
ecTF([γ]int) = 0,

γ ∈ Γint \
γ ∈ Γint \
γ ∈ Γint \
γ ∈ Γint \
γ ∈ Γint \
γ ∈ Γint \
γ ∈ Γint \

ΓC
ec,
e
ΓT
ec,
e
ΓF
ec,
e
ΓCT
ec ,
e
ΓTC
ec ,
e
ΓCF
ec ,
e
ΓTF
ec ,
e

X
(µ,µ′,m)=γ∈Γint

ecC([γ]int) = X

δC
β (i, m),

i∈[

f
kC+1,mC]
ecT([γ]int) = X
i∈[2,tT]
ecF([γ]int) = X
i∈[2,tF]

δT
β (i, m),

δF
β (i, m),

X
(µ,µ′,m)=γ∈Γint

X
(µ,µ′,m)=γ∈Γint

X
(µ,µ′,m)=γ∈Γint

X
(µ,µ′,m)=γ∈Γint

X
(µ,µ′,m)=γ∈Γint

ecCT([γ]int) = X
k∈[1,kC]
ecTC([γ]int) = X
k∈[1,kC]
ecCF([γ]int) = X
c∈[1,ftC]

δCT
β (k, m),

δTC
β (k, m),

δ∗F
β (c, m),

X
(µ,µ′,m)=γ∈Γint

ecTF([γ]int) = X

δ∗F
β (c, m),

c∈[ftC+1,cF]

X

γ=(ad,bd′,m)∈

[(a, b, m)]int · δC
e
ΓC
ec
∆C+

ec (i) + X

ec(i, [γ]int) = X
e
ΓC
ac

ν∈

[ν]int · δC

ac(i, [ν]int),

d · δC

ec(i, [γ]int) = degC(tail(i)),

γ=(ad,µ′,m)∈eΓC
ec

∆C−

ec (i) + X

ec(i, [γ]int) = degC(head(i)),

γ=(µ,bd,m)∈

d · δC
e
ΓC
ec
∆C+

X
f
kC+1,mC]

i∈[

ec (i) ≤ 8(1 − eC(i)),
ec (i) + ∆C−
ec(i, [γ]int) = ecC([γ]int),
δC

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

m ∈ [1, 3],

i ∈ [

kC + 1, mC],
f
ΓC
ec,
e

γ ∈

(81)

(82)

(83)

2LM-M LLR monomer v7: August 25, 2021

57

X

γ=(ad,bd′,m)∈

[(a, b, m)]int · δT
e
ΓT
ec
∆T+

ec (i) + X

ec(i, [γ]int) = X
e
ΓT
ac

ν∈

d · δT
e
ΓT
ec

γ=(ad,µ′,m)∈

[ν]int · δT

ac(i, [ν]int),

ec(i, [γ]int) = degT(i − 1),

∆T−

ec (i) + X

d · δT

ec(i, [γ]int) = degT(i),

γ=(µ,bd,m)∈eΓT
ec
∆T+

ec (i) ≤ 8(1 − eT(i)),
ec (i) + ∆T−
ec(i, [γ]int) = ecT([γ]int),
δT

X
i∈[2,tT]

X

γ=(ad,bd′,m)∈

[(a, b, m)]int · δF
e
ΓF
ec
∆F+

ec (i) + X

ec(i, [γ]int) = X
e
ΓF
ac

ν∈

d · δF
e
ΓF
ec

γ=(ad,µ′,m)∈

[ν]int · δF

ac(i, [ν]int),

ec(i, [γ]int) = degF(i − 1),

∆F−

ec (i) + X

d · δF

ec(i, [γ]int) = degF(i, 0),

γ=(µ,bd,m)∈eΓF
ec

∆F+

ec (i) + ∆F−
ec (i) ≤ 8(1 − eF(i)),
ec(i, [γ]int) = ecF([γ]int),
δF

X
i∈[2,tF]

X

[(a, b, m)]int · δCT

γ=(ad,bd′,m)∈

e
ΓCT
ec
∆CT+
ec

degT(i) + 4(1 − χT(i, k) + eT(i)) ≥ degCT
degCT

T (k),
T (k) ≥ degT(i) − 4(1 − χT(i, k) + eT(i)),
ac (k, [ν]int),

[ν]int · δCT

ec,C(k, [γ]int) = X
e
ΓCT
ac

ν∈

(k) + X

d · δCT

ec,C(k, [γ]int) = degC(tail(k)),

γ=(ad,µ′,m)∈

e
ΓCT
ec

∆CT−
ec

(k) + X

d · δCT

ec,C(k, [γ]int) = degCT

T (k),

γ=(µ,bd,m)∈
∆CT+
ec

e
ΓCT
ec
(k) + ∆CT−

ec

(k) ≤ 8(1 − δT
χ (k)),
ec,C(k, [γ]int) = ecCT([γ]int),
δCT

X
k∈[1,kC]

i ∈ [2, tT],
ΓT
ec,
e

γ ∈

(84)

i ∈ [2, tF],
ΓF
ec,
e

γ ∈

(85)

i ∈ [1, tT],

k ∈ [1, kC],
ΓCT
ec ,
e

γ ∈

(86)

2LM-M LLR monomer v7: August 25, 2021

58

[(a, b, m)]int · δTC

degT(i) + 4(1 − χT(i, k) + eT(i + 1)) ≥ degTC
degTC

T (k),
T (k) ≥ degT(i) − 4(1 − χT(i, k) + eT(i + 1)),
ac (k, [ν]int),

[ν]int · δTC

ec,C(k, [γ]int) = X
ν∈eΓTC
ac
ec,C(k, [γ]int) = degTC

d · δTC

(k) + X

T (k),

∆TC+
ec

X
γ=(ad,bd′,m)∈eΓTC
ec

∆TC−
ec

(k) + X

γ=(ad,µ′,m)∈

e
ΓTC
ec
ec,C(k, [γ]int) = degC(head(k)),
d · δTC

γ=(µ,bd,m)∈

e
ΓTC
ec
∆TC+
ec

ec

(k) + ∆TC−

(k) ≤ 8(1 − δT
χ (k)),
ec,C(k, [γ]int) = ecTC([γ]int),
δTC

X
k∈[1,kC]

degF(i) + 4(1 − χF(i, c) + eF(i)) ≥ degCF
degCF

F (c),
F (c) ≥ degF(i) − 4(1 − χF(i, c) + eF(i)),
ac (c, [ν]int),

ec,C(c, [γ]int) = X
e
ΓCF
ac
ec,C(c, [γ]int) = degC(c),

ν∈
d · δCF

(c) + X

[ν]int · δCF

X

[(a, b, m)]int · δCF

γ=(ad,bd′,m)∈

e
ΓCF
ec

∆CF+
ec

γ=(ad,µ′,m)∈eΓCF
ec

∆CF−
ec

(c) + X

d · δCF

ec,C(c, [γ]int) = degCF

F (c),

γ=(µ,bd,m)∈
∆CF+
ec

e
ΓCF
ec
(c) + ∆CF−

ec

(c) ≤ 8(1 − δF

χ (c)),
ec,C(c, [γ]int) = ecCF([γ]int),
δCF

X
c∈[1,ftC]

[(a, b, m)]int · δTF

degF(j) + 4(1 − χF(j, i +
degTF

tC) + eF(j)) ≥ degTF
e

F (i) ≥ degF(j) − 4(1 − χF(j, i +
ec,T(i, [γ]int) = X
e
ΓTF
ac
ec,T(i, [γ]int) = degT(i),

(i) + X

ν∈
d · δTF

[ν]int · δTF

F (i),
tC) + eF(j)),
e
ac (i, [ν]int),

∆TF+
ec

X

γ=(ad,bd′,m)∈

e
ΓTF
ec

γ=(ad,µ′,m)∈

e
ΓTF
ec
d · δTF

∆TF−
ec

(i) + X

ec,T(i, [γ]int) = degTF

F (i),

γ=(µ,bd,m)∈
∆TF+
ec

e
ΓTF
ec
(i) + ∆TF−

X
i∈[1,tT]

(i) ≤ 8(1 − δF

tC)),
ec
e
ec,T(i, [γ]int) = ecTF([γ]int),
δTF

χ (i +

i ∈ [1, tT],

k ∈ [1, kC],
ΓTC
ec ,
e

γ ∈

(87)

i ∈ [1, tF],

c ∈ [1,

γ ∈

tC],
e
ΓCF
ec ,
e

(88)

j ∈ [1, tF],

i ∈ [1, tT],
ΓTF
ec ,
e

γ ∈

(89)

2LM-M LLR monomer v7: August 25, 2021

59

X
X∈{C,T,F,CT,TC,CF,TF}

(ecX([γ]int) + ecX([γ]int)) = ecint([γ]int),

γ ∈ Γint
< ,

X
X∈{C,T,F,CT,TC,CF,TF}

ecX([γ]int) = ecint([γ]int),

γ ∈ Γint
= .

(90)

D.11 Constraints for Standardization of Feature Vectors

By introducing a tolerance ε > 0 in the conversion between integers and reals, we include the
following constraints for standardizing of a feature vector x = (x(1), x(2), . . . , x(K)):

(1 − ε)(x(j) − min(dcpj; Dπ))
max(dcpj; Dπ) − min(dcpj; Dπ)

≤

x(j) ≤
b

(1 + ε)(x(j) − min(dcpj; Dπ))
max(dcpj; Dπ) − min(dcpj; Dπ)

, j ∈ [1, K].

(91)

An example of a tolerance is ε = 1 × 10−5.

We use the same conversion for descriptor xj = ms.

