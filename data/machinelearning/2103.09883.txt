1
2
0
2

r
a

M
7
1

]

G
L
.
s
c
[

1
v
3
8
8
9
0
.
3
0
1
2
:
v
i
X
r
a

A Survey on Spatio-temporal Data Analytics Systems

MD MAHBUB ALAM and LUIS TORGO, Dalhousie University, Canada
ALBERT BIFET, The University of Waikato, New Zealand

Due to the surge of spatio-temporal data volume, the popularity of location-based services and applications,
and the importance of extracted knowledge from spatio-temporal data to solve a wide range of real-world
problems, a plethora of research and development work has been done in the area of spatial and spatio-
temporal data analytics in the past decade. The main goal of existing works was to develop algorithms and
technologies to capture, store, manage, analyze, and visualize spatial or spatio-temporal data. The researchers
have contributed either by adding spatio-temporal support with existing systems, by developing a new system
from scratch for processing spatio-temporal data, or by implementing algorithms for mining spatio-temporal
data. The existing ecosystem of spatial and spatio-temporal data analytics can be categorized into three
groups, (1) spatial databases (SQL and NoSQL), (2) big spatio-temporal data processing infrastructures, and (3)
programming languages and software tools for processing spatio-temporal data. Since existing surveys mostly
investigated big data infrastructures for processing spatial data, this survey has explored the whole ecosystem
of spatial and spatio-temporal analytics along with an up-to-date review of big spatial data processing systems.
This survey also portrays the importance and future of spatial and spatio-temporal data analytics.

CCS Concepts: • General and reference → Surveys and overviews; • Information systems → Spatial-
temporal systems; Parallel and distributed DBMSs.
Additional Key Words and Phrases: spatial databases, spatial NoSQL, big spatial data, spatio-temporal data,
trajectory data, spatial data stream, GIS software, spatial libraries

ACM Reference Format:
Md Mahbub Alam, Luis Torgo, and Albert Bifet. 2021. A Survey on Spatio-temporal Data Analytics Systems.
ACM Comput. Surv. 1, 1 (March 2021), 44 pages. https://doi.org/10.1145/XXXX.XXXX

1 INTRODUCTION
Due to the technological advancement of the internet, sensor devices, GPS-enabled devices and the
popularity of location-based services (LBS) and applications (such as map services, recommendation
systems, navigation systems, location-based social networks, and other applications), a huge volume
of geo-referenced data is generated every day, often called big spatial data. However, a significant
portion of these data comes with a timestamp (temporal-tag), leading to spatio-temporal data. As a
result of the availability of smart mobile devices and the internet, LBS applications and services are
part of our daily activities and contributing significantly to this data growth. These data also comes
from other sources such as vehicles, sensors positioned around the world, satellites, space telescopes,
aerial photography, land survey, medical imaging and more. Therefore, mining information from this
huge volume of spatio-temporal data is not only important for popular LBS applications and services
we are using today, but it is also important for scientific discovery and exploration of a wide range

Authors’ addresses: Md Mahbub Alam, mahbub.alam@dal.ca; Luis Torgo, ltorgo@dal.ca, Dalhousie University, 6299 South
St., Halifax, NS, Canada, B3H 4R2; Albert Bifet, The University of Waikato, Knighton Road, Hamilton, New Zealand,
abifet@waikato.ac.nz.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee
provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and
the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored.
Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires
prior specific permission and/or a fee. Request permissions from permissions@acm.org.
© 2021 Association for Computing Machinery.
0360-0300/2021/3-ART $15.00
https://doi.org/10.1145/XXXX.XXXX

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

 
 
 
 
 
 
2

Alam, et al.

of application domains, such as climate change analysis, earthquake analysis, weather forecasting,
urban planning, health care, modern transportation system, agriculture, space exploration, crime
data analysis, e-commerce and advertising, epidemic analysis, animal migration, oceanography,
and many more. In this context, there is a demand for efficient tools and data processing systems to
store, manage, analyze, and visualize the high dimensional and heterogeneous big spatio-temporal
data.

Research and development of spatial and spatio-temporal database systems have started with
traditional relational database systems (RDBMSs). Traditional RDBMSs with a spatial extension
(such as PostgreSQL/PostGIS [174], Oracle Spatial, and more) are efficient in a single node computing
environment. However, due to the lack of parallelism and the I/O bottleneck, these systems only
work well for relatively small datasets. Besides, these systems have limited analysis and visualization
capabilities. Therefore, one may question if spatial RDBMSs are significant in this era of big spatial
data. Researchers are continuously adding new features to make these systems adaptable in this
new era. Researchers have also developed a few parallel and distributed systems by using spatial
RDBMSs. Though current spatial RDBMSs are not massively scalable, these systems are scalable
enough to solve many real-world problems we are facing today. There is a huge demand for Spatial
RDBMSs in a wide range of application domains at the enterprise level. Therefore, spatial RDBMSs
are still significant in this era of big spatial and spatio-temporal data.

Along with the limitations mentioned above, traditional RDBMSs also did not have support to
store and process semi-structured or unstructured data. Therefore, NoSQL (Not-Only-SQL) database
systems (e.g., MongoDB, Cassandra) [56, 98] have emerged as alternative databases, which are
schemaless, highly available, and horizontally scalable. Currently, a few of these systems have
limited native support to store and process spatial data. Still, researchers have extended some of
these databases to add spatial support. Moreover, several big spatial data processing systems have
been developed by utilizing the power of NoSQL databases [119, 142, 143, 165, 192]. Spatial support
of current NoSQL databases lack spatial analysis and visualization, and only a few of them support
SQL-like query language. Although many of the present modern RDBMSs do have support for
processing data other than structured data. For example, GeoJSON support in PostgreSQL/PostGIS.
In recent years, a number of data processing systems have emerged to process big spatial
and spatio-temporal data. These systems are implemented mainly by extending the MapReduce
framework Hadoop [86], Spark [85, 268, 269], and NoSQL database systems [56, 98] to incorporate
spatial and temporal data types, partitioning and indexing techniques, geometric operations, and a
SQL-like query language. However, a few of them have been developed either from scratch [27,
28, 154] or by extending systems other than Hadoop, Spark, and NoSQL databases [6, 7, 66].
Recently, Python libraries such as DASK [53] and RAPIDS [233] emerged as parallel and distributed
platforms for processing big data. These big data systems can be either spatial [68, 162, 261], spatio-
temporal [9, 112], trajectory [19, 142, 272], or spatial stream [46, 150, 209] data processing systems.
However, these big data systems have limited analysis and visualization capabilities. Also, a few of
them support SQL-like query language, but not as efficiently as spatial RDBMSs.

Due to the heterogeneity and implicit spatial and temporal dependencies of spatio-temporal data,
being able to extract and analyze knowledge from these data can be extremely challenging. The data
mining, analysis, and visualization support of existing spatial RDBMSs, spatial NoSQL databases,
and big spatial data infrastructures, are very limited. There is a wide range of libraries and packages
available for mining, analyzing, and visualizing spatial, spatio-temporal, and trajectory data in two
popular de facto programming languages for data science, R [194] and Python [246]. Besides, a large
community of people is continuously working to introduce new libraries and packages to meet the
current and future demands. However, these libraries and packages can not store and process a large
volume of data. Therefore, the utilization of these libraries and packages with RDBMSs, NoSQL

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

3

databases, and big data infrastructures in essential to fill the gap. On the other hand, GIS software
like ArcGIS [77] and QGIS [191] are leading tools to collect, store, process, and visualize spatial data.
Initially, GIS software has developed for a single user with limited DBMS capability. Currently, GIS
software like ArcGIS has developed additional tools to utilize the processing capability of Hadoop
and Spark. ArcGIS can also process data stored in spatial RDBMSs. Moreover, Python and R users
can use the functionality of GIS software to process spatial, spatio-temporal, and trajectory data.
Researchers from both academia and industry are working in order to meet the current and
future demands for big spatio-temporal analytics. Surveys are always crucial for current and future
researchers to know about the state-of-the-art. Surveys also help to choose a data analytics system
based on application requirements. However, existing surveys and performance analyses are not
up-to-date and mostly summarize infrastructures related to big spatial data processing. In the
meantime, a number of big spatio-temporal, trajectory, and spatial stream data processing systems
have emerged along with a few new spatial data processing systems. Besides, existing surveys
have not considered spatial RDBMSs, GIS software, and spatial support in programming languages.
These shortcomings motivate the current paper. This survey categorizes the existing ecosystem
of spatio-temporal data analytics (see Figure 1) into three data dimensional categories: (1) Data
Storage: spatial RDBMSs and NoSQL databases, by first defining the significance of spatial RDBMSs
(e.g., PostgreSQL/PostGIS) in this era of big spatial data, and then reviewing the spatial support of
popular NoSQL databases; (2) Data Processing: big data infrastructures, where big data processing
systems are classified based on underlying architecture (e.g., Hadoop, Spark, NoSQL, and others)
and the type of data processing system (such as spatial, spatio-temporal, trajectory, and spatial
stream); (3) Data Programming and Software Tools, which summarizes available libraries, packages,
and tools for processing spatial, spatio-temporal, and trajectory data in widely used programming
languages, such as R and Python. Two popular GIS software, ArcGIS and QGIS, are also discussed
in this last category.

Fig. 1. The Ecosystem of Spatio-temporal Data Analytics

The rest of the paper is organized as follows. Section 2 provides an overview of existing surveys
along with limitations, thus setting the goals of this survey. Section 3 discusses the importance of
spatio-temporal data analytics research, along with a few important application domains. Spatial
and spatio-temporal data is defined in Section 4. Section 5 defines the significance of spatial RDBMSs
in the era of big spatial data and discusses the spatial support of NoSQL systems. The detailed review
of existing big data infrastructures for processing spatial and spatio-temporal data is presented in
Section 6. Section 7 presents the ecosystem containing libraries, packages, and tools of two popular
languages, Python, and R for processing spatial, spatio-temporal, and trajectory data along with
two popular GIS software, ArcGIS and QGIS. Finally, Section 8 concludes the paper.

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

4

Alam, et al.

2 RELATED WORKS
A number of research works have been published which surveyed existing spatial data analytic
systems. These surveys either performed a comparative analysis of existing spatial data analytics
based on supported features or evaluated the performance of the existing systems by running
supported spatial queries. Therefore, we divided the existing works into two groups, (1) surveys,
(2) performance analyses.

Existing surveys: In their survey of big spatial data systems, Eldawy et al. [69] have explored
the existing works that are developed on or before 2016, based on six key features. These features
include (i) the system implementation approach, which defines whether the system was built as a
library on-top of a system, built inside the core of a system, or developed as a new system from
scratch, (ii) underlying data processing architecture (such as MapReduce, key-value stores, parallel
DBMS, spark and other architectures), (iii) supported query language, (iv) supported indexing
techniques, (v) supported spatial operations, and (vi) data visualization. This survey also provides an
overview of some applications of spatial data. Maguerra et al. [149] survey provides a comprehensive
review of big spatio-temporal data processing systems in the context of the underlying processing
frameworks, partitioning and indexing techniques, and supported spatial queries. Castro et al. [45]
survey analyzes the supported features of Hadoop and Spark-based spatial data systems from the
user’s viewpoint to help users to select spatial data processing systems for their applications. Yao
et al. [258] studied and discussed recent technologies and techniques for big spatial vector data
management based on the data model, storage, indexing, and processing and analysis. Karim et
al. [129] portrait the spatio-temporal aspect of big data and performed a comparison of the supported
spatio-temporal features on different frameworks, such as Apache Hadoop [86] (SpatialHadoop),
Apache Samza [166], Apache Storm [14], Apache Spark [85] (SpatialSpark and GeoSpark), and
Apache Flink [92]. Almeida et al. [57] presented a survey on big trajectory data analytics from the
viewpoints of storage, processing, summarization, and analysis of trajectories. This survey also
provides an overview of a few systems for processing big trajectory data along with traditional
systems based on PostgreSQL/PostGIS, Oracle Spatial, and other databases. The big trajectory
systems include a cloud-based system on Microsoft Azure [21], ST-Hadoop [9], TrajSpark [272],
DiStRDF [164], and systems based on Apache Flink, MongoDB [122], and other databases for
semantic trajectories. Recently, Guo et al. [108] have surveyed the geospatial data processing
capabilities in the 10 most popular NoSQL databases based on supported geometry types, geometry
functions, spatial indexes, query languages, and data formats. This survey also discussed the
strengths and weaknesses of each of these databases.

Existing performance analyses: Hulbert et al. [120] performed an experimental study on
GeoMesa [145] and Elasticsearch [43] by running spatio-temporal queries, where the authors have
compared these systems based on query execution time and throughput. García et al. [94] conducted
a comparative analysis of the performance of SpatialHadoop [68] and LocationSpark [225] based
on parallel and distributed spatial distance join queries. Hagedorn et al. [111] performed feature
comparison and performance analysis of Hadoop and Spark-based big spatial data processing
systems. They have conducted a performance evaluation by running range and spatial join queries
on SpatialHadoop, SpatialSpark [260], GeoSpark [261], and STARK [112], where STARK is proposed
by the authors as a spatio-temporal extension of Spark. Data Reply [199] published a report
on benchmarking six big geospatial data infrastructures to help the users to select the right
infrastructures for their applications. These infrastructures include GeoSpark, Hive [242], MongoDB,
GeoMesa, Elasticsearch, and Postgres-XL [231]. These systems are evaluated by running several
queries (range, regular expression, and join queries) on three different datasets, where each dataset
contains 10 billion records. This report also provided performance tuning tips for each of the

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

5

evaluated systems. Pandey et al. [177] performed a comprehensive study to analyze available
features of selected Hadoop and Spark-based spatial data processing systems. They also evaluated
the performance of five Spark-based spatial data systems (SpatialSpark, GeoSpark, Magellan [218],
LocationSpark, and Simba [257]) based on supported spatial operations, which include range and
kNN query, spatial join, distance join, and kNN join. The cost of memory is also considered for
performance evaluation. Alam et al. [6] also performed a comprehensive feature analysis and
performance evaluation on Hadoop and Spark-based spatial data processing systems. However,
instead of evaluating limited supported spatial features, they have implemented OGC-compliant
join predicates and analysis features on SpatialHadoop and GeoSpark to assess the performance by
running a number of spatial join queries, spatial analysis queries, and range queries on a cluster of
nodes using real-world datasets. The authors also included 𝑆𝑝𝑎𝑡𝑖𝑎𝑙𝐼𝑔𝑛𝑖𝑡𝑒 as part of the evaluation,
which is developed as extended spatial support for another in-memory computing system, Apache
Ignite [240]. More et al. [175] performed an experimental study on SpatialHadoop and GeoSpark to
evaluate the performance based on various geospatial tasks such as data compression, indexing, and
kNN and range query on a single node computer, which is not an ideal scenario for evaluating big
spatial data systems. Recently, Haynes et al. [113] proposed a benchmark to evaluate spatial raster
operations on big data platforms. They have assessed the performance of five raster operations
on three big data platforms, namely PostgreSQL/PostGIS [174], SciDB [28], and GeoTrellis [64],
using three different datasets. These operations include pixel count, reclassification, raster add,
focal operations, and zonal statistics.

Limitations of existing surveys and performance analyses: First, existing surveys and
performance analyses are not up-to-date. These researches mostly covered systems that were
developed on or before 2017. Second, most of these works analyze the big data infrastructures for
processing spatial data. However, in the meantime, a number of big data processing systems for
spatio-temporal and trajectory data emerged in addition to a few new big spatial data processing
systems. Though Guo et al. [108] have reviewed native spatial supports of NoSQL databases, there
is no comprehensive survey of big spatial data processing systems, which are developed by utilizing
NoSQL databases. Moreover, there is no review available on Python libraries such as DASK and
RAPIDS for big spatial data processing. However, at present, along with Spark, these parallel and
distributed libraries are gaining popularity and often considered as the next big data processing
platform. Finally, researchers have not considered the other parts of the ecosystem of spatio-
temporal analytics, namely spatial RDBMSs, GIS software, and spatial support in programming
languages for processing spatial, spatio-temporal, and trajectory data.

Goal of this survey: The goal of this survey is to conduct a comprehensive review on the current
state of spatio-temporal data analytics systems research for processing spatial, spatio-temporal, and
trajectory data. This survey discusses the up-to-date spatial support in RDBMSs, NoSQL databases,
big data processing platforms, programming languages, and GIS software. First, along with the
review of spatial support in popular relational (SQL) and NoSQL databases, we have addressed
the significance of relational spatial databases in this era of big spatial data. Second, since a large
number of research works have contributed by incorporating spatial support in big data platforms,
we have studied and discussed these platforms based on the type of supports, such as spatial (both
vector and raster), spatio-temporal, trajectory, or spatial streams. This survey also includes two
new emerging big data processing platforms, DASK and RAPIDS, in addition to Hadoop, Spark,
and NoSQL databases. Till now, there is no survey on spatial support in programming languages.
This survey provides an overview of available libraries, packages, and tools of R and Python for
processing spatial, spatio-temporal, and trajectory data. The APIs for interfacing R and Python with
spatial RDBMSs, GIS software, and big data platforms are also discussed. Besides, a summary of
spatial supports in other popular programming languages (e.g., C/C++, Java) is provided. Finally, this

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

6

Alam, et al.

survey presents a review of two popular GIS software, ArcGIS and QGIS. We hope that this survey
will help researchers, developers, and other stakeholders towards furthering the state-of-the-art.

3 IMPORTANCE AND APPLICATIONS OF SPATIO-TEMPORAL DATA ANALYTICS
In 1854, nearly 10 percent of a neighborhood at 40 Broad Street of the city of London died in just
seven days due to the severe outbreak of deadly disease Cholera. Dr. John Snow [217], a British
Physician, was able to identify the source (a water pump at Broad Street) of the disease by plotting
cases of Cholera on a map called ghost map [125]. This deadly map has taught us that the inherent
knowledge of a map can solve a problem. Now, if we look at the current coronavirus (COVID-19)
situation, or last year’s bushfire situation in Australia, or the aftermath of recent floods/hurricanes
around the world, or the effects of climate change, we observe that a large volume of people were
affected by these deadly events. Forests were brunt, and animals lost their habitats. Though we
are more technologically capable than ever, we are facing these situations or problems with more
strength and more frequently. Therefore, it is essential to utilize the knowledge of spatial and
temporal properties of data to mitigate or tackle many of these problems. The outcome of mined
information from spatial and spatio-temporal data has already touched many avenues of human
endeavor. Due to recent technological advancements, location-based services and applications are
an integral part of our daily activities. Researchers have been using these data for urban planning,
navigating vehicles, identifying road accidents, tracking the activity of diseases (e.g., flu) and natural
phenomena (e.g., hurricanes, tornados), and solving many other problems. In this context, it is
important to put a closer look into the problems we are facing today and look beyond the traditional
application domains for tackling future adverse events. In this section we discuss some important
application domains, which need special attention now and in the future.

The ongoing COVID-19 virus situation came as a shock and has stopped the pace of the world.
People lost their jobs and businesses, healthcare systems are overwhelmed with patients, many
countries are struggling to give minimum services to emergency patients, and governments are fac-
ing difficulties to maintain supplies of food and necessary medical equipment. Even technologically
advanced countries like USA and UK are not able to tackle this pandemic efficiently. Spatio-temporal
data analysis, visualization, and mapping in the domain of epidemiology and public health may
become essential tools for tackling future pandemics. A number of research works have discovered
spatio-temporal patterns [153] and the spread of the diseases by studying the patient’s treatment
history. However, along with technological support, there is a need to utilize the spatio-temporal
tools and techniques for efficient studies of the pandemics to quickly find the originating point,
to stop spreading and isolating patients, and to provide better health-care services. In addition,
other diseases like HIV, influenza, malaria, dengue, zika, and many other viruses are also a constant
threat to the health sector around the world.

Similarly, the 2019-2020 season bushfire in Australia was the biggest in Australian history [10].
As of March 2020, the bushfire burnt more than 18 million hectors across the country, destroyed
over 5900 buildings (including more than 2000 homes), killed at least 34 people, 3 billion animals
have been killed, and some animals may be driven to extinction [42, 243]. According to NASA, 306
million tones of CO2 were emitted during the 2019-2020 Australian bushfire season [139]. Besides,
countries like USA, Canada, and a few European countries are also affected by bushfires every year.
Spatio-temporal analysis of bushfires based on aerial and satellite images is useful to spot and
tackle the bushfires at the initial stage to save forests and the lives of people and animals. Also,
scientists have warned that if it is not possible to control the emission of greenhouse gas, bushfires
could become a normal scenario every year [104]. On the other hand, due to cyclones, hurricanes,
and floods, a huge volume of people were affected and died around the world every year. Even the
world’s most developed and technologically equipped country, the USA, was adversely affected by

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

7

Tropical Storm Nestor and Hurricane Dorian in 2019. Thus, climatology is another pivotal field
to discover spatio-temporal patterns and relationships of climate variables and helps to prepare
to tackle future adverse conditions [17]. Since pollution (air, water, sound, and other pollution’s)
is an ongoing issue for a long time, the study of the environmental science domain to discover
factors of pollution using data collected from sensors will always be as crucial as today.

A large number of people are affected by an increasing number of large scale crises and disasters
every year, such as hurricanes, bushfires, floods, earthquakes, epidemics, and other emergency
events. These also can be small scale local emergency events such as road accidents, crimes, and
house fires. During any such events, immediate actions are required to mitigate the suffering of
people. These actions include to rescue and alert peoples, to maintain the supply chains (foods,
medical supplies, and other essential resources), to provide medical services, and other necessary
steps. Currently, GIS tools and solutions [1, 30, 31, 206] are used by emergency teams around the
world to analyze data collected from aerial drones, satellites, smartphones, social networks, and
other sources to take immediate measures. Future geospatial analytics will be more advanced and
accurate for emergency management and response due to the integration of AI and machine
learning.

As the ocean and marine environment is the largest part of the earth, spatio-temporal ocean
and marine datasets collected from widespread sources (such as satellites, remote sensors, aerial
drones, stations, ships, buoys, and underwater sensors) are valuable in many application domains.
These domains include safe and secure maritime navigation, autonomous cargo shipping, aqua-
culture production optimization, improved detection and forecasting of environmental changes,
advanced weather forecasting, anomaly detection for identifying smuggling or drug trafficking,
maritime surveillance, classifying acoustic sounds, and more. In addition, maritime shipping is the
backbone of world trade and manufacturing supply chains. Therefore, application domains related
to the ocean and marine environment are hot fields of research [256].

Due to the advancement of GPS technology and the internet, most taxis are equipped with a
GPS device in large cities, and people use online location-based services, such as Uber, Google
Maps, Foursquare, and other services for traveling purposes. A taxi driver always wants to get
a passenger quickly and maximize the profit. Whereas, a passenger wants to reach destination
as quickly as possible. A number of research works [95, 193, 264, 266] have been done in the last
couple of years intending to maximize the profit of taxi drivers and utilize the valuable time of
passengers. The outcome of these researches was already implemented into location-based services
we are using today. These services can recommend locations for taxi drivers to find passengers
quickly and passengers to find a taxi on time, which in turn reduce energy consumption and air
pollution as well. This research also helps traffic engineers to implement policies to reduce traffic
congestion and identify road accidents. However, as we are moving towards driver-less taxi services,
intelligent transportation systems is becoming an important field of research. On the other
hand, researchers also started utilizing data generated from urban areas (such as sensors, vehicles,
and humans) for urban design and planning [263, 265], which is another domain to watch-out.
We need to increase agricultural productions to ensure food security for the growing population
of the world. However, the arable land area is decreasing due to the high growth of population and
urbanization. Also, the fertility of lands is reducing as a result of the excessive use of fertilizers,
pesticides, herbicides, water, and other inputs. Besides, crop production is affected by floods, drought,
soil erosion, and other calamities. On top of that, farmers might lose farmlands due to the rise of
sea levels as an effect of climate change. Increasing crop production as well as reducing the cost of
production and unnecessary use of fertilizers, pesticides, and other farm inputs are very challenging
tasks. Precision agriculture [60, 73, 105] uses knowledge extracted from spatio-temporal data
collected from aerial drones, satellites, sensors, and other sources to identify soil types, crop diseases,

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

8

Alam, et al.

and other attributes. This information helps farmers to identify site-specific needs and optimal use
of farm inputs such as fertilizers, pesticides, water, and so on to maximize crop production and
profits. Therefore, precision agriculture is another significant field of research that requires more
attention from the spatio-temporal research community.

Other application domains, such as Animal Migration and Forestation, Space Exploration,
and Neuroscience, are also prominent fields of research. Researchers also suggested explor-
ing beyond the traditional application domains, such as biology, chemistry, astronomy, and
more [250].

4 DEFINITION AND TYPES OF SPATIAL AND SPATIO-TEMPORAL DATA
Currently available spatial databases, big spatial data processing infrastructures, programming
languages, and software tools have built support to model, store, and process either spatial data or
spatio-temporal data. Spatio-temporal data can be either discrete point data or trajectory data. This
section will define and differentiate among these types of data.

A data item related to space (location-aware or geo-tagged) is called 𝑔𝑒𝑜𝑠𝑝𝑎𝑡𝑖𝑎𝑙 or 𝑠𝑝𝑎𝑡𝑖𝑎𝑙 data.
Traditionally, raster data (e.g., satellite images), point data (e.g., crime reports), or network data
(e.g., road maps) were known patterns of spatial data [80]. In recent years, the traditional pattern of
spatial data has changed due to the wide adoption of GPS-enabled mobile devices and the popularity
of location-based services (LBS) and applications. Examples of this change include check-ins, GPS
trajectories of smartphones, geo-tagged tweets, Instagram or Flickr photos, and so on. Spatial data
types can be divided into three categories: vector, raster, and network data.

Raster data is represented as a collection of pixels (or grid cells), where each pixel is associated
with a specific geographical location. Raster data can be discrete (such as land-cover type, soil
type) or continuous (such as temperature, elevation, aerial photographs, satellite images). Vector
data can be represented by points (e.g., a city, a movie theater), lines (e.g., roads, rivers, cables
for phone or electricity) or polygons (e.g., a country, a lake, a river, a national park). A spatial
network is a special graph that consists of nodes embedded in space. The most common example
of a spatial network is the transportation network (e.g. the road network), where edges represent
road segments, and nodes represent the intersection of road segments or points of interest [118].
On the other hand, spatial data is being captured with a timestamp (temporal-tag) called spatio-
temporal data, i.e., spatio-temporal data contains both spatial and temporal aspects of an object.
Spatio-temporal data can also be defined as geometries changing over time [72]. There are a number
of data models (such as event model, temporal snapshot model, temporal change model and more)
to represent spatio-temporal data in data processing systems [186, 212]. Spatio-temporal data type
is basically the integration of timestamps (e.g., time instance, period, interval) with the spatial data
type (e.g., point, line, polygon). Several classes of spatio-temporal data types are available in real-life
application domains to represent an object with respect to both space and time. Kisilevich et al.[131]
have considered point objects and defined five classes of spatio-temporal types, which include
spatio-temporal events, geo-referenced variables, geo-referenced time series, moving objects, and
trajectories. Whereas, Atluri et al. [17] have described four classes of spatio-temporal data types,
such as event data, point reference data, trajectory data, and raster data.

When raster data is collected with a timestamp, it is called spatio-temporal raster data. For
example, air quality observations data from ground-based sensors or earth surface observations
data from satellites are raster spatio-temporal data [17]. In both of these cases, data is collected at
fixed locations in space over time. The classification of vector data with timestamps depends on
the type of geometries, such as points, lines, and polygons (regions) [72].

If we consider spatial points and point of time, spatio-temporal data can be either discrete point
data or trajectory data. Spatio-temporal discrete point data can be event data that represent

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

9

where and when the event happened. For example, a traffic accident can be represented by accident
location and time of the accident. Therefore, event data can be used to model many real-life events
such as crime events, disease outbreaks, road accidents, plane crashes, volcano eruptions, and
more [17]. Spatio-temporal discrete point data can also be point reference data, which is collected
from a set of moving reference points in space over time. For example, drone observations of
bushfires at point locations in space over time is discrete point reference data [17]. Whereas, a
trajectory is a path that consists of a set of points generated by moving objects in geographical
space over time. The main sources of trajectory data are either GPS-enabled devices (e.g., taxi
trajectories) or sensors attached to moving objects (e.g., animal trajectories). Trajectories can be
classified into four main categories, such as mobility of humans, vehicles, animals, and natural
phenomena (such as hurricanes, tornados) [273]. The knowledge derived from trajectory data is
important in many application domains, such as intelligent transportation systems, urban planning,
location-based social networks, recommendation systems, animal migration analysis, and more.

Similarly, spatio-temporal data can be classified by considering other geometries like lines and
regions instead of points, and timestamps like interval and period instead of a point of time [72, 131].
Finally, due to the nature of spatio-temporal data, we can perform queries based on spatial, temporal,
and spatio-temporal properties and relationships.

5 SPATIAL DATABASES
Spatial databases can be divided into two main categories, relational databases (SQL), and NoSQL
databases. Traditional relational database management systems (RDBMSs) have been around and
serving us well for a long time. These RDBMSs with spatial support are stable, mature, efficient
and have been used in a wide range of application domains at the enterprise level. Due to the
large volume and diverse form of data being generated from a wide range of sources, NoSQL
database systems, and big spatial data processing platforms have emerged. One may ask what is
the significance of Spatial RDBMSs in this era of big spatial data. But Spatial RDBMSs are adapting
to this era by integrating new features continuously. Researchers from industry and academia
developed a few parallel and distributed systems by utilizing spatial RDBMSs. In this context,
researchers are still using these modern spatial RDBMSs in a wide range of application domains.
This section will address the significance of modern spatial RDBMSs in this era of big spatial data
and explores the spatial support of both SQL and NoSQL databases.

5.1 Spatial Relational Databases
Traditional RDBMSs are popular for efficient data management and query processing. Therefore,
research and development of spatial and spatio-temporal database systems have started by adding
extensions to traditional RDBMSs. For example, PostgreSQL/PostGIS [174], Oracle Spatial [229],
IBM DB2 Spatial Extender [2], Microsoft SQL Server [81], MySQL Spatial [159], and SpatialLite [93]
are some popular spatial RDBMSs. The up-to-date features of these popular spatial RDBMSs are
summarized in Table 1. These spatial RDBMSs are mature, stable, and contain efficient SQL query
engines. All of these systems support data formats (WKT and WKB) and geometry objects (point,
linestring, polygon, and collections) specified by OGC Simple Features for SQL (part-2) [167]. Also,
most of these spatial RDBMSs support R-Tree type indexing, except SQL Server and IBM DB2, where
grid indexing has been utilized. Among them, only PostgreSQL/PostGIS and Oracle Spatial can
store and process spatial raster data. Popular spatial RDBMSs such as PostgreSQL/PostGIS, Oracle
Spatial, and SQL Server provide the complete set of spatial relationship and analysis functions
defined in OGC [167] and ISO SQL/MM (part-3) [219] standard. Therefore, a wide range of spatial
queries (e.g., spatial join, range) can be executed in these databases.

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

10

Alam, et al.

Table 1. Popular Spatial RDBMSs

PostgreSQL/
PostGIS

Oracle Spatial

Data
Formats
WKT, WKB,
GML, KML,
GeoJSON,
SVG

WKT, WKB
JSON,
GeoJSON

Microsoft
SQL Server

WKT, WKB,
GML, GeoJSON

IBM DB2
Spatial Extender

WKT, WKB,
GML, KML
ESRI Shapefile

MySQL Spatial

WKT, WKB

SQLite/
SpatialLite

WKT, WKB

Geometry
Types
Point,
LineString,
Polygon,
Collections1
Point,
LineString,
Polygon,
Collections
Point,
LineString,
Polygon,
Collections
Point,
LineString,
Polygon,
Collections
Point,
LineString,
Polygon,
Collections
Point,
LineString,
Polygon,
Collections

Spatial
Indexing

Raster
Support

Spatial
Functions

GiST,
SP-GiST,
BRIN

Yes

OGC SFA-SQL,
ISO SQL/MM2

R-Tree

Yes

OGC SFA-SQL,
ISO SQL/MM

Multi-level
Grid

No

OGC SFA-SQL,
ISO SQL/MM

Spatial Grid

No

OGC SFA-SQL,
ISO SQL/MM

R-Tree

No

OGC SFA-SQL

R*-Tree

No

OGC SFA-SQL

1Collections - MultiPoint, MultiLineString, MultiPolygon, GeometryCollection
2Support functions compliant with OGC SFA-SQL [167] and ISO SQL/MM [219] standard

However, due to the I/O bottleneck, lack of parallelism and scalability, the performance of
these systems deteriorated with the increasing volume of data. Also, it is challenging to model
heterogeneous and multidimensional data in spatial RDBMSs. Still these databases went through a
lot of changes in the last couple of years. Researchers and developers are continuously integrating
new features to these systems or utilizing these systems to meet the current demands of spatial
data. For example, the GeoJSON data format of PostgreSQL/PostGIS. Therefore, this section will
also address the significance of modern spatial RDBMSs in this era of big spatial data by discussing
changes made in one of the most popular spatial RDBMS, PostgreSQL/PostGIS.

PostgreSQL is an open-source, vertically scalable, and extensible RDBMS. PostGIS is a spatial
extension of PostgreSQL, which supports OGC-compliant spatial SQL queries. Vertical scaling
can improve the performance of PostgreSQL/PostGIS on a single computer system, but horizontal
scalability is required for processing a large volume of spatial data. We can achieve horizontal
scalability through sharding in PostgreSQL. One can also achieve read scalability by utilizing
pgpool (Pgpool-II [189]) and streaming replication instead of sharding. However, sharding can
reduce the I/O bottleneck significantly by partitioning data across multiple nodes of a cluster [157].
Several solutions are available where horizontal scalability and query parallelism achieved through

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

11

sharding, such as Postgres-XL [231], Citus [55], PL/Proxy [230], etc. PostGIS can be integrated
with both Citus and Postgres-XL. PostgreSQL (v9.6+) also has a built-in sharding feature called
Foreign Data Wrappers (FDW), which allows PostgreSQL to access data from external sources.
Therefore, data can be distributed across nodes of a cluster, where each partition can be accessible
through FDW directly from disk or main memory instead of local tables of PostgreSQL. Moreover,
features like parallel sequence scans, parallel joins, and parallel aggregates for parallel spatial
query processing are now completely working with PostgreSQL (v12) and PostGIS (v3.0). Thus,
one can take advantage of default parallel processing support to process large scale spatial data in
PostgreSQL/PostGIS [195].

As today’s big data comes from diverse sources in different formats, it is not always possible
to store data in a tabular format in RDBMS. Therefore, NoSQL database systems emerged in the
last decade. However, JSON and JSONB data types were added to PostgreSQL in 2012 and 2014,
respectively. Recently, SQL/JSON was introduced in PostgreSQL v12, which is compliant with the
SQL-2016 standard. The SQL-2016 standard has recognized NoSQL and includes features for the
SQL/JSON data model and path language as well as commands for storing, publishing, and querying
JSON data. Thus, now we can query and index JSON (JSONB) data in PostgreSQL [133].

Some research work has also utilized PostgreSQL/PostGIS to develop parallel query processing
infrastructures for spatial data [5]. For example, Niharika [196] utilizes the powerful features of
PostgreSQL/PostGIS to implement a parallel query processing system along with efficient data
declustering and load balancing techniques. However, as its storage layer is not distributed, it needs
to replicate the whole dataset in each node of a cluster. On the contrary, each node of Paragon [114]
needs to host a subset of the partitions only. MobilityDB [275] was developed as an extension of
PostgreSQL/PostGIS, which provides support for storing and querying moving objects data (spatial
trajectory). This support includes spatio-temporal data types, indexing techniques, and query
operations. Recently, MobilityDB emerged as a distributed system by integrating with Citus [55]
for processing massive trajectory data [20]. CARTO [44] provides spatial analysis and mapping
services for a wide range of application areas for many organizations by developing APIs, libraries,
and tools. Developers and GIS scientists use CARTO for developing GIS applications. CARTO also
uses PostgreSQL/PostGIS underneath as a spatial database server.

Similarly, other spatial RDBMSs (e.g., Oracle Spatial and SQL Server) are also incorporating new
features continuously to adapt to this era of big spatial data. Besides, a large number of companies
are still using spatial RDBMSs for their businesses. This means that currently, if someone ask the
following questions: (i) can spatial RDBMSs (like PostgreSQL/PostGIS) scale well for the problems
we are dealing today?; (ii) can these systems process massive datasets?; (iii) can these systems
process data in different formats?; or (iv) how long will these systems survive in this era of big
data?; the answers to these questions would be yes, these systems are scalable enough for many
problems we are dealing with today and can process a certain volume of data in different formats,
and will be around for a long time.

5.2 Spatial NoSQL Databases
NoSQL (Not-Only-SQL) database systems [56, 98] are also known as non-relational database systems.
Carlo Strozzi came with the NoSQL term in 1998 [222]. Since a large volume of data comes from
diverse sources with various formats (such as semi-structured and unstructured), it is challenging to
model these data using relational tables as there is no predefined fixed schema. Besides, traditional
relational database systems suffer due to the lack of parallelism, I/O bottleneck, and horizontal
scalability. Therefore, NoSQL database systems have emerged as an alternative data management
technology in the last decade. NoSQL database systems can be classified into four broad groups
based on the core data model, (1) Key-Value Databases (e.g., Redis, Oracle NoSQL), (2) Column

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

12

Alam, et al.

Family (Wide-Column) Databases (e.g., Cassandra, HBase), (3) Document Databases (e.g., MongoDB,
Couchbase), and (4) Graph Databases (e.g., Neo4j, ArangoDB).

NoSQL database systems are fault-tolerant, scalable, highly available, and support high update
rates. However, a few of these systems have native spatial support currently. Spatial extensions have
been added to some of these NoSQL databases in recent years. The current spatial support of some
popular NoSQL databases is presented in Table 2. Redis [197] is an in-memory key-value store that
has implemented a geohash spatial index to accelerate query processing. It operates based on a Geo
Set data structure, which is built with a Sorted Set. A set of commands (e.g., geoadd, geopos, geohash,
georadius, and more) are available in Redis to create an index and perform spatial operations on
point datasets stored in Geo Sets. However, these spatial commands can only perform limited
spatial analyses on point type geometry. Also, Redis does not support SQL-like query language.
On the contrary, one can run SQL-like spatial queries on Oracle NoSQL [171], which supports all
common geometry objects, geohash indexing, and a set of spatial operators for processing spatial
data.

Table 2. Popular NoSQL Databases with Spatial Support

NoSQL
Database

Data
Model

Spatial
Support

Data
Formats

Geometry
Types

Spatial
Indexing

Redis

Key-Value

Native [198]

GeoJSON

Point

geohash

Oracle
NoSQL

Key-Value

Native [171]

GeoJSON

MongoDB

Document

Native [122]

GeoJSON,
Legacy
Coordinate
Pairs

Couchbase

Document

GeoCouch [50]

GeoJSON

Cassandra Wide_Column

Lucene Index
Plugin [124]

WKT

Point,
LineString,
Polygon,
Collections1

Point,
LineString,
Polygon,
Collections

Point,
LineString,
Polygon,
Collections
Point,
LineString,
Polygon,
Collections

geohash

2dsphere,
2d

Lucene
Index
(Secondary
Index)

Neo4j

Graph

Native

N/A

Point (2D, 3D) Hilbert-curve

Neo4j-Spatial
[228]

WKT, WKB

Point,
LineString,
Polygon,
Collections

R-Tree

1Collections - MultiPoint, MultiLineString, MultiPolygon, GeometryCollection

Spatial
Functions
geoadd, geodist,
zrange, zscan,
geopos, geohash,
georadius,
georadiusbymember,
zrem
geo_intersect,
geo_inside,
geo_within_distance,
geo_near
$near,
$nearSphere,
$geoWithin,
$geoIntersect,
$geoNear

SQL-like
Query Language

Not
Supported

Yes
Supported

Not
Supported

R-Tree

BBox

N1QL

intersects,
contains,
is_within

Distance
Contain, Cover,
Cross, Disjoint,
Intersect, Overlap,
Touch, Within, etc.

CQL

Cypher

MongoDB [122] is a document database that has native support for processing spatial data.
MongoDB supports common GeoJSON objects (such as point, linestring, polygon, and collections)
and 2dsphere indexes to model geometries on a spherical surface. It can also store geometries on
a 2D surface as legacy coordinate pairs and 2d indexes to model 2D queries. MongoDB provides
a set of operators such as $near, $nearSphere, $geoWithin, $geoIntersect, and $geoNear to perform
spatial queries. However, like Redis, it does not have support for SQL-like queries. Whereas, Couch-
base [226] is another popular document database that supports SQL-like query language, N1QL.
GeoCouch [50] is a spatial extension for both Couchbase and Apache CouchDB [89]. GeoCouch

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

13

is developed based on R-Trees and supports common GeoJOSN objects like MongoDB. It allows
executing spatial queries using bounding-boxes (BBox). However, MongoDB is richer in terms of
support to perform a wide range of spatial queries.

Apache Cassandra [84] is a column family database that does not have native support for
processing spatial data. Stratio’s Lucene Index [124] is a spatial plugin for Cassandra, whose spatial
index is an extension of Cassandra’s secondary indexes. The Lucene plugin provides a set of spatial
predicates (intersects, contains, and is_within) and transformation functions (buffer, convexhull,
union, and more), which enable Cassandra to store, index, and process common spatial objects such
as point, linestring, polygon, and collections. Brahim et al. [37] have also extended CQL (Cassandra
Query Language) to add spatial support with Cassandra, which includes geohash indexing and
spatial queries (within_circle, within_polygon, and within_path).

Neo4j [123] is one of the most popular graph database systems, which supports an efficient
query language, Cypher. Neo4j Spatial [228] is a library that facilitates Neo4j to store, index, and
process spatial data. This library contains modules to import spatial data (ESRI Shapefile and OSM),
and R-Tree indexing can be applied during import or later to stored data. It also supports a wide
range of spatial functions (contain, cover, intersect, and so on) to perform spatial operations on
common geometric objects (point, linestring, polygon, and collections). Besides, it wraps popular
geospatial libraries, JTS and GeoTools, and therefore, one can utilize the functionalities of these
libraries in Neo4j. However, Neo4j spatial is an external library, and hence, it is not highly scalable.
Moreover, this library suffers when applications require high concurrency and need to handle a
large volume of data. Therefore, Neo4j (v3.4) introduced two native data types, spatial (Point) and
temporal (Date, Time, DateTime, Duration, and other types). This point type supports both 2D and
3D points and can be specified by either a geographic or cartesian coordinate system. Neo4j uses
Hilbert-curve for indexing points (2D or 3D) and only supports spatial distance function. Similarly,
it also provides indexes and functions to process temporal data.

Researchers have also developed several big spatial data processing systems by utilizing the
capability of NoSQL databases in recent years that will be discussed in Section 6.3. The perfor-
mance of NoSQL databases is evaluated and discussed by several researchers for spatial work-
loads [128, 130]. Some of these performance analyses also involve comparisons with relational
spatial databases [3, 22, 23, 126, 152].

5.3 Future Research Directions
The codebase of spatial RDBSMs is mature, stable, efficient, and easily extensible. Also, these
systems support efficient SQL queries along with current distributed and parallel capability. By
considering the current state of spatial RDBMSs, it would be a great idea to incorporate distributed
storage like HDFS or utilize the main memory like Spark in distributed systems developed based
on spatial RDBMSs.

Currently, the spatial support of NoSQL databases lacks available spatial operations compared to
spatial RDBMSs. Also, a few of these databases do not have support for SQL-like spatial queries. In
addition, we need to work to add support to store and process spatial raster and trajectory data
in NoSQL databases. At present, the graph database, Neo4j (v4.0), can scale horizontally through
sharding, and therefore, it will be interesting to see the performance of distributed graph databases
like Neo4j for processing spatial data.

6 BIG SPATIO-TEMPORAL DATA PROCESSING INFRASTRUCTURES
With the rise of big spatial and spatio-temporal data and its application domains, there is demand
for highly scalable and distributed data processing systems to store, manage, and process the
massive volume of data. Therefore, researchers from both academia and industry are working

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

14

Alam, et al.

towards achieving these demands. The big spatial (or spatio-temporal) data processing systems
that have been developed in the last couple of years are mainly based on MapReduce framework
Hadoop [86], NoSQL databases [56, 98], and Spark [85]. Most of these systems have built spatial
or spatio-temporal support either by adding a layer on top existing systems or by extending the
core of the existing systems. Besides, a number of big spatial or spatio-temporal data processing
systems have been developed either from scratch or by utilizing data processing platforms other-
than Hadoop, NoSQL, and Spark. For example, recently, Python libraries such as DASK [53] and
RAPIDS [233] have started to gain popularity as a big data platform.

In this section, we first categorize the big spatio-temporal data infrastructures based on their
development criteria. The systems under each of the categories are then divided into groups based
on the type of data processing systems, which include spatial (spatial vector and raster, spatial
stream), spatio-temporal, and trajectory. An overview of these systems is provided in Figure 2.
Finally, this section provides a comprehensive review of each of these systems based on their
supported features, such as data types, partitioning and indexing techniques, query language, and
supported spatio-temporal operations.

Fig. 2. Overview of Big Spatio-temporal Data Processing Infrastructures

6.1 Hadoop-based Big Spatio-temporal Infrastructures
Hadoop [86] is a highly scalable and distributed open-source MapReduce [58] framework for
processing a large volume of data, which is integrated with the HDFS [214] distributed storage
system. Hadoop does not have any native support for processing spatial (or spatio-temporal)
data. Therefore, Hadoop distributes and indexes data across the clusters without considering
the spatial (or spatio-temporal) aspect of data, which affects query processing performance on

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

15

the data negatively. Due to the huge popularity of Hadoop as a big data processing framework
in both research and industry communities, a number of extensions to Hadoop were proposed
to store, process, and analyze spatial (or spatio-temporal) data. These systems include Hadoop-
GIS [4], SpatialHadoop [68], ESRI Tools for Hadoop [253], Parallel SECONDO [110], ST-Hadoop [9],
Summit [8], and HadoopTrajectory [19]. A detailed feature matrix of these systems is provided in
Table 3.

Hadoop-GIS [4] is a spatial extension of Hadoop. It integrates a spatial layer on top of Hadoop
instead of changing the core of the framework. As a result, the performance of Hadoop-GIS for
processing spatial data is not quite as good as expected. Besides, Hadoop-GIS extends Hive [242] to
support declarative spatial querying (HiveSP) that adds an extra layer of overhead over Hadoop for
processing spatial queries. SpatialHadoop [68] incorporates spatial support inside the core of the
Hadoop framework. Therefore, it achieves better performance than Hadoop-GIS for running spatial
queries on a large dataset. A SQL-like query language, Pigeon [67], which extends Pig Latin [168],
is also introduced to run spatial queries on SpatialHadoop. However, the evaluation shows that
Pigeon is not efficient to execute spatial join queries on large datasets [6].

Table 3. Hadoop-based Spatio-temporal Systems

System Type

Data Types

Partitioning

Indexing

Hadoop-GIS [4]
(2013)

Spatial

SpatialHadoop [68]
(2015)

Spatial

Parallel SECONDO
[110](2015)

Spatio-temporal
(Trajectory)

Point,
LineString,
Polygon

Point,
LineString,
Polygon

Point,
LineString,
Region,
Instant, Period,
Periods, Interval

SATO [248]
Framework1

Fixed-Grid,
STR

Two-Level
(Global, Local)
R*-tree
Two-Level
(Global, Local)
Grid File,
R-tree,
R+-tree

SQL-Like Query
Language

Supported
Queries

HiveSP
(Extended HiveQL)

Range, kNN,
Join

Pigeon
(Extended Pig Latin)

Range, kNN,
Join

3D Grid

B-Tree,
R-Tree

Executable

Range, Join

ST-Hadoop [9]
(2017)

Spatio-temporal

STPoint,
Time,
Interval

Time-Slice,
Data-Slice

Summit [8]
(2018)

Spatio-temporal
(Trajectory)

Trajectory,
Time,
Interval

Spatial-based,
Segmentation-based

HadoopTrajectory
[19](2019)

Spatio-temporal
(Trajectory)

Point, Region,
Instant, Interval,
Periods,
TrajSegment,
Trajectory

N/A

Two-Level
L1: Temporal
L2: Spatial

Spatial:
SpatialHadoop
Two-Level
L1: Temporal
L2: Spatial

Temporal: ST-Hadoop
Spatial: Extended

Grid, R-Tree
(3D Extension)
e.g., 3DR-Tree

Extended Pigeon

Range, Join

Extended Pigeon

Range, kNN,
kNN Similarity,
Join

N/A

Range, kNN,
Join

1SATO supports Fixed-Grid, Binary-Space, Hilbert-Curve, Strip-based, and STR partitioning techniques.

Due to the lack of spatio-temporal data types, partitioning, and indexing techniques, both
Hadoop-GIS and SpatialHadoop suffer when querying on spatio-temporal datasets. ST-Hadoop [9]
is a temporal extension of SpatialHadoop, which incorporates spatio-temporal awareness into each
layer of SpatialHadoop. However, ST-Hadoop was developed by considering attributes of discrete
spatio-temporal point data, not trajectory data, and properties of trajectory data are quite different
from discrete point data. Therefore, if we partition and index trajectory data using ST-Hadoop,
the performance of query processing will be be impacted negatively. For example, each individual

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

16

Alam, et al.

trajectory of an object contains a set of points and an object can have multiple trajectories. Now, if
we partition trajectories of a moving object using ST-Hadoop, they may be partitioned into different
blocks of HDFS over different clusters, which will require more time to perform queries. Therefore,
Summit [8] was developed as an extension of ST-Hadoop to include data types, partitioning and
indexing techniques, and operations, for processing trajectory data. Bakli et al. [19] have proposed
HadoopTrajectory, which adds a diverse set of data types and operators into the core of Hadoop to
store and process trajectory data. The careful integration of partitioning and indexing strategies for
trajectory data into Hadoop layers makes their system an efficient big trajectory processing system.
Parallel SECONDO [110] integrates SECONDO DBMS with Hadoop for scalability. SECONDO [109]
is a prototype DBMS to store and process moving object data. SECONDO supports data models
to represent spatial and temporal data, operations for processing moving objects, and a SQL-like
query language. As SECONDO was developed for a single computer and unable to process big data,
SECONDO was combined with Hadoop to execute parallel queries and distribute data across a
cluster of nodes. However, Hadoop only does the scheduling and query coordination tasks received
from the SECONDO master node, while SECONDO executes the query in each worker node. Finally,
SECONDO master node needs to aggregate the results. Therefore, Parallel SECONDO has not able
to utilize the power of Hadoop properly due to its centralized behavior.

6.2 Spark-based Big Spatio-temporal Infrastructures
Apache Hadoop is a disk-based system optimized for I/O efficiency. Therefore, the performance
of Hadoop-based big data systems can deteriorate at scale. On the other hand, the growing main
memory capacity in a cluster of machines has fueled the development of in-memory big data
systems. Apache Spark [85, 268, 269] is a popular and widely used distributed in-memory big
data processing framework, which is implemented by taking advantage of a large pool of mem-
ory available in a cluster of machines to achieve better performance than disk-based systems.
However, like Hadoop, Spark also does not have native support for processing spatial (or spatio-
temporal) data. Due to the lack of spatial (or spatio-temporal) data types, partitioning and indexing
strategies, and spatial operations, Spark process spatial (or spatio-temporal) data in the same way
as non-spatial data. Therefore, several Spark-based spatial (or spatio-temporal) data processing
systems have been developed in the last few years to alleviate these limitations. These systems
include SpatialSpark [260], GeoSpark [261], LocationSpark [224, 225], Simba [257], STARK [112],
SparkGIS [18], TrajSpark [272], Elcano [71], DiStRDF [164], DITA [210], UlTraMan [63], Dra-
goon [82], and GeoTrellis [64]. The detailed feature matrix of these systems is presented in Table 4.
GeoSpark [261, 262] is a spatial extension of Spark, which extends Spark RDDs (Resilient Dis-
tributed Datasets) [267] to support spatial data types called Spatial RDD. It supports several spatial
partitioning (Fixed-Grid, Voronoi Diagram, R-Tree, and Quad-Tree) and indexing (R-Tree and
Quad-Tree) techniques to speed-up spatial queries (range, kNN, and join) on Spatial RDDs. Initially,
it did not have any support for the SQL query [261]. Recently, GeoSpark has introduced an SQL
API (SQL/MM-Part 3 Standard) [262] as a spatial extension of Spark SQL [16]. SpatialSpark [260]
can perform range queries and two kinds of spatial join queries (broadcast and partitioned) over
geometric objects. Data can be partitioned using Fixed-Grid, Binary-Split, and Sort-Tile techniques
and indexing using R-tree. However, it does not have support for SQL queries. Since SpatialSpark
has implemented as a library on top of Spark instead of modifying the core of the framework,
it may affect the query performance. Besides, both GeoSpark and SpatialSpark do not have any
support for handling data and query skew.

On the other hand, Simba [257] extends Spark SQL [16] and DataFrame API to make spatial
support for Spark. It improves the query performance by introducing multi-level (global and local)
R-tree indexing on RDDs, and spatial-aware (logical and cost-based) query planning. Moreover,

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

17

Table 4. Spark-based Spatio-temporal Systems

Partitioning

Indexing

Query
Language

System Type

SpatialSpark [260]
(2015)

Spatial

GeoSpark [261]
(2015)

Spatial

Data
Types
Point,
LineString,
Polygon

Point,
LineString,
Polygon,
Rectangle

Fixed-Grid,
Binary-Split,
STR
Uniform-Grid
Voronoi,
R-Tree,
Quad-Tree,
KDB-Tree

Simba [257]
(2016)

Spatial

Point

STR

LocationSpark [225]
(2016)

Spatial

SparkGIS [18]
(2017)

Elcano [71]
(2018)

STARK [112]
(2017)
DiStRDF [164]
(2018)

Spatial

Spatial

Spatial,
Spatio-temporal

Spatio-temporal

Point,
LineString,
Polygon,
Rectangle

Point,
LineString,
Polygon

Point,
LineString,
Polygon
STObject
(geo, time)
Point,
Timestamp

Uniform-Grid,
R-Tree,
Quad-Tree

Fixed-Grid,
Binary-Space,
Quad-Tree,
Strip-based,
Hilbert-Curve,
STR

N/A

Fixed-Grid,
Binary-Space

Range-Partition

TrajSpark [272]
(2017)

Spatio-temporal
(Trajectory)

Point,
Timestamp

Quad-Tree,
KD-Tree

DITA [210]
(2018)

Spatio-temporal
(Trajectory)

Point,
Timestamp

UlTraMan [63]
(2018)

Spatio-temporal
(Trajectory)

Point,
TimeStamp

STR

STR

Dragoon [82]
(2021)

Spatio-temporal
(trajectory)
offline & online

Point,
TimeStamp

ID, Grid,
STR, Time

R-Tree

N/A

R-Tree,
Quad-Tree

Extended
Spark SQL

R-Tree
(Multi-Level)

R-Tree
Quad-Tree,
IR-Tree
(Multi-Level)

R*-Tree
(Multi-Level)

Extended
Spark SQL

N/A

N/A

Supported
Queries
Range,
Broadcast-Join,
Partitioned-Join

Range, kNN,
Spatial-Join,
Distance-Join

Range, kNN,
kNN-Join,
Distance-Join,

Range, kNN,
Range-Join,
kNN-Join

Range, kNN,
Join

GeoHash,
R-Tree,
GeoHash + R-Tree
R-Tree
(Live & Persistent)
Hilbert Hash
Z-order Hash
Local: Hash,
Global: Multi-Level
L1: Temporal
L2: Spatial
L3: B+-Tree
(Multi-Level)
Global - R-Tree
Local - Trie-like
Two-Level
(Global, Local)
R-Tree
Two-Level
(Global, Local)
R-Tree

Extended
Spark SQL

Join

Piglet

kNN, Join

SPARQL

Range, Join

N/A

Single Object,
Range,
kNN

Extended
Spark SQL

Similarity
Search and Join

N/A

N/A

ID, Range,
kNN,

ID, Range,
kNN

STR partitioner [141] mitigates the data partitioning skew significantly due to its consideration
of in-memory partition size, data locality, and load balancing. However, Simba only supports
spatial operations (range, kNN, distance-join, kNN-join) over point and rectangle objects. Location-
Spark [224, 225] was developed as a spatial library (like SpatialSpark) over Spark. It stores spatial
data as a key-value pair, where the key can be any geometric object (points, lines, polygons), and
the values can be any user-specified text. Like Simba, it also contains an efficient cost model and
a query execution planner to deal with data partitioning and query skew. Similarly, it supports
multi-level indexing, where the global index (grid, region Quad-tree) partitions the data across a
cluster of nodes and a local index (R-tree, Quad-tree variant, IR-tree) for indexing data on each node.
Moreover, it introduced a spatial bloom filter to reduce the communication cost of the global index.
LocationSpark only keeps frequently accessed data in memory which reduces the chances of an

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

18

Alam, et al.

overflow. It supports a number of spatial operations (such as range, kNN, range-join, and kNN-join)
and a few spatial analysis functions (such as clustering, skyline computation, and spatio-textual
topic summarization). However, it does not have support for SQL-like queries. SparkGIS [18] adopts
Spark for processing spatial queries (kNN, join). It supports several dynamic partitioning algo-
rithms (Fixed-Grid, Binary-Space, Quad-Tree, Strip-based, Hilbert-Curve, and STR), which mitigates
the data distribution skew across the cluster. Like Simba and LocationSpark, it also incorporates
multi-level (global and local) R*-tree indexing, which can be pre-generated or on-demand local
in-memory indexing. Like LocationSpark, it also keeps data in-memory as much as possible to
avoid running out of memory.

However, these five spatial data processing solutions are not fully compliant with the ISO standard
and OGC specifications. Elcano [71] implements ISO and OGC-compliant 2D geometry data types,
spatial functions, and operators based on Spark SQL [16]. It supports three indexation methods,
GeoHash, R-Tree, and a combination of both (hybrid) [70]. This paper reports the spatial join
performance of Elcano over SpatialSpark and PostgreSQL/PostGIS. However, this paper did not
include any information regarding data partitioning, and the process of spatial query execution of
Elcano.

All these Spark-based systems discussed above are only for spatial data processing. STARK [112]
is a spatio-temporal data processing system. It integrates spatial and temporal data types, operators,
and predicates to Spark RDD’s. It supports fixed grid and cost-based binary space partitioning to
distributed data across the nodes of a cluster. It allows two modes of indexing, where the live index
is built for each partition during query execution, and persistent indexing allows to create and save
indexed RDD into disk or HDFS for future use. STARK supports queries on unindexed data as well.
In addition to spatial join and kNN query, it supports DBSCAN clustering. STARK also extends
Pig Latin for declarative spatio-temporal queries, called Piglet. Though STARK has support for
temporal features, the only reported evaluation results are for spatial operations. DiStRDF [164]
is a distributed Spatio-temporal RDF [249] data processing system based on Spark. It consists of
two layers, where the storage layer is responsible for storing encoded RDF triples into HDFS and
dictionary of mapping values into the Redis in-memory key-value store [197]. The query processing
layer is based on the Spark query engine, which is responsible for parsing, planning, and executing
SPARQL [235] queries. Here, Apache Jena [88] is used as a query parser. It uses spatio-temporal
range partitioning to distribute 1D encoded RDF triples. It also supports Hilbert and Z-order hashing
for indexing RDF triples. However, it only supports spatio-temporal point data.

As it is mentioned in Section 6.1, trajectory data is quite different from discrete spatio-temporal
point data. Therefore, the performance of processing trajectory data using STARK and DiStRFD will
not be effective. Also, these systems work well for historical static data and require re-partitioning
the whole dataset when the dataset has changed or updated. TrajSpark [272] always keeps the global
index in the main memory and updates the global index when new data arrives using the time-decay
model by partitioning only a batch of new data. TrajSpark also stores the updated the global index
into a disk to protect it from any future system failures. In TrajSpark, first, the raw trajectory
points (RDD) are partitioned based on data locality, load balancing, and size of the partition using a
Quad-Tree/KD-Tree strategy. Then the local hash index is added to each partition, which creates
an IndexTRDD. Finally, a multi-level hybrid global index (level1 - temporal, level2 - spatial, level3 -
B+-Tree) is built for each partition. One can perform single object-based, range, and kNN queries on
trajectory data using TrajSpark. However, it does not have any support for SQL-like queries. Zeyuan
et al. [210] developed DITA, a distributed in-memory trajectory analytics system, where one can
use both SQL and Dataframe API for trajectory analysis. DITA adopts the STR [141] partitioning
strategy to create balanced partitions of trajectory points. Like TrajSpark, it also uses multi-level
(global - R-Tree and local - Trie-like) indexing to expedite the query performance. Besides, DITA has

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

19

developed a cost model to reduce inter-worker transmission costs and to balance the workload. Like
DITA, UITraMan [63] also uses STR for partitioning trajectory data, but it has adopted R-Tree for
both local and global indexing. Along with global indexing, UITraMan also maintains a meta table
to store information related to moving objects and partitions in order to improve the efficiency of
trajectory data processing in Spark. Unlike other systems, UITraMan incorporates a data processing
pipeline that includes data loading, preprocessing, extraction, and analysis. However, the on-heap
data caching in Spark induces GC (garbage collector) overhead, and the performance of Spark-based
systems is affected by this overhead. Therefore, UITraMan has added an off-heap key-value store
Chronicle Map [48] into the block manager of Spark. Chronicle Map always keeps data in an
off-heap cache, which reduces GC overhead and ensures data persistence on run-time. UITraMan
supports ID, range, and kNN queries on trajectory data.

Among TrajSpark, DITA, and UITraMan, only TrajSpark alleviates the overhead of re-partitioning
the whole dataset when a new batch of dataset arrives. Thus, TrajSpark achieves near real-time
trajectory processing capability, but it is not a system developed for processing real-time trajectory
streams. Besides, this new batch of data is loaded as RDDs in Spark, which are immutable, and any
updates on RDD create a new RDD, which is costly. Dragoon [82] is a hybrid trajectory analytics
system for processing both historical (offline) and streaming (online) trajectories. The offline module
of Dragoon is similar to UITraMan, but Dragoon has utilized Chronicle Map in such a way that it
works for both historical and streaming trajectories. In addition, a mutable RDD (mRDD) model
is designed so that data can be updated later, which is key to the hybrid storage of Dragoon. In
Dragoon, data partitioning (ID, spatial: Grid, STR, and temporal), indexing (two-level: R-Tree),
and trajectory queries (ID, range, and kNN) are developed for both offline and online modules.
Moreover, the hybrid data processing pipeline provides support for both historical and streaming
trajectories.

Other than these systems, GeoMesa [145] has recently added support for Spark. However, all
these systems are for processing vector spatial and spatio-temporal data. None of these systems
has support for raster data. GeoTrellis [64] is a Scala library that enables Spark to process spatial
raster data. It also has limited support for vector data. It can store into and query raster data from
HDFS, S3, Accumulo, Cassandra, and HBase.

6.3 NoSQL-based Big Spatio-temporal Infrastructures
A number of big spatio-temporal data processing systems have been developed by using the power of
NoSQL databases in the last couple of years, such as MD-HBase [165], Distributed SECONDO [160],
GeoMesa [91, 119, 145], BBoxDB [162, 163], THBase [192], TrajMesa [143], and JUST [142]. The
detailed feature matrix of these systems is presented in Table 5.

MD-HBase [165] extends HBase [87] to support spatio-temporal queries (range and kNN). It
applies linearization (e.g., Z-Ordering) to transform multi-dimensional locations data (id, lat, lon,
time) into 1D space for efficient indexing. A multi-dimensional index structure (Quad-tree, KD-tree)
is layered on top of a range partitioned key-value store which allows real-time processing of range
and kNN queries. MD-HBase achieves high insertion throughput, which is important for location-
based applications. GeoMesa [145] is a spatio-temporal data processing system built on top of NoSQL
databases that provides efficient storage and querying capabilities. It was implemented based on the
distributed key-value store Accumulo [91]. Like MD-HBase, GeoMesa also linearizes the keyspace
by transforming multi-dimensional data (location, timestamp) into 1D keys using space-filling
curves. It creates a spatio-temporal index using GeoHash and timestamps. Later, GeoMesa [119, 145]
has added support for HBase, Google BigTable, Cassandra, Kafka, and Spark. At present, GeoMesa
supports a set of indexing techniques, such as spatial (Z2 and XZ2), spatio-temporal (Z3, XZ3), ID
index, and attribute index. Traditional key-value stores with multi-dimensional support could be

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

20

Alam, et al.

Table 5. NoSQL-based Spatio-temporal Systems

Data Types

Partitioning

MD-HBase [165]
(2011)

GeoMesa [145]
(2013)

Distributed
SECONDO [160]
(2015)

BBoxDB [162]
(2018)

System Type

Underlying
NoSQL System

Spatio-temporal

HBase

Spatio-temporal

Accumulo

Spatio-temporal
(Trajectory)

Cassandra

Spatial

Key-BBox-Value
Store

THBase [192]
(2019)

Spatio-temporal
(Trajectory)

JUST [142]
(2020)

Spatial,
Spatio-temporal

HBase

HBase

TrajMesa [143]
(2020)

Spatio-temporal
(Trajectory)

GeoMesa

Point,
Timestamp
Point,
LineString,
Polygon,
Timestamp
Point, LineString,
Regions, Instant,
Period, Periods,
Interval
Point,
LineString,
Polygon

Point,
Timestamp

Geom,
Timestamp,
ST_Series,
T_Series

Point,
Timestamp

Range-Partition

Spatial,
Temporal,
Attribute

3D Grid

Grid,
KD-Tree,
Quad-Tree

MO-based
Model

N/A

Indexing

Quad-Tree,
KD-Tree

Z2 and XZ2,
Z3 and XZ3,.
id and attr

Query
Language

Supported
Queries

N/A

Range, kNN

CQL

Range

R-tree
(MMR-tree)

SQL-Like,
Executable

Join

Two-Level
Local: R-Tree
Global: KD-Tree
Two-Level
L1: Time Index
L2: Multi-level Grid

Z2 and XZ2,
Z3 and XZ3,
Z2T and XZ2T

N/A

Join

N/A

Single-Object,
Range, kNN

JustQL

Range, kNN

N/A

XZT and XZ2+

SQL-Like

ID-Temporal
Range, kNN,
Similarity

expensive to store and query non-point spatial data such as polygons or lines. Jan et al. [162] have
proposed a distributed and scalable key-bounding-box-value store for multi-dimensional data called
BBoxDB. Unlike traditional key-value stores, BBoxDB stores each value with an n-dimensional axis-
parallel bounding box, which defines the location of the value in space. It uses space partitioning
(Grid, KD-Tree, Quad-Tree) and multi-level indexing (global: KD-Tree, local: R-Tree) to store and
organize the data across the cluster of nodes. However, BBoxDB only supports spatial-join queries,
which can be executed locally on co-partitioned data.

Distributed SECONDO [160, 161] is a general-purpose DBMS, which can process relational,
spatial, and spatio-temporal (including trajectory) data. It integrates the highly scalable and available
key-value store Apache Cassandra and moving objects database SECONDO [109], where Cassandra
is used as distributed data storage and the SECONDO as a query processing engine. Previously,
SECONDO was integrated with Hadoop in Parallel SECONDO, but suffered due to centralized
management. Besides, Parallel SECONDO [110] does not support high update rates. Distributed
SECONDO achives high update rates by integrating Cassandra. In addition, it supports both
SQL-like and executable query. JUST (JD Urban Spatio-Temporal) [142] incorporates the power
of HBase [87], GeoMesa [91, 119, 145], and Spark [85] into one system to stores, manages, and
processes spatio-temporal data. It adopts the NoSQL store HBase as an underlying storage structure,
GeoMesa as an indexing tool, and Spark as a query execution engine. Along with indexing strategies
of GeoMesa, JUST introduces two indexing techniques, Z2T and XZ2T and efficient compression
mechanism to expedites the query performance significantly. A SQL-like query language JustQL
was also developed in JUST from scratch. Unlike in-memory systems, JUST only loads the necessary
data into memory. Hence, the nodes of a cluster are not required to have much memory. Though
NoSQL-based systems (mentioned before) have achieved high update rates, their performance is
hindered by disk latency. JUST has improved query efficiency by utilizing the main memory.

TrajMesa [143] has adopted GeoMesa to develop a trajectory storage engine, where a horizontal
storage schema (H-Store) is proposed for efficient trajectory data management. Instead of storing
each point of a trajectory as a separate entry in a key-value store (V-Store), H-Store allows storing
an entire trajectory in one-row with compression. Hence, in addition to reducing the storage size

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

21

significantly, H-Store also improves the query efficiency by reducing disk I/O in TrajMesa. To
perform a set of SQL-like queries (ID-Temporal, Range, kNN, and Similarity) on trajectory data
efficiently, TrajMesa introduced ID temporal, XZT, and extended XZ2 indexing of GeoMesa as
spatial range indexing, XZ2+. Most importantly, TrajMesa incorporates a module for trajectory
preprocessing [204] containing functions for noise filtering, segmentation, stay point detection,
map matching, and other statistical analysis. On the other hand, if we split and store the trajectories
of the same moving object (MO) into different partitions on different nodes of a cluster, the query
processing efficiency of trajectory processing systems [63, 272] will be impacted negatively. To
address this issue, THBase [192] has proposed a segment-based data model and a MO-based
partition model for efficient trajectory storage management in HBase. THBase consists of three
modules, T-table, L-index, and a query processing module. T-table is a container of trajectory data
in which adopted the MO-based partitioning model. Whereas, L-index is a local spatio-temporal
index structure that consists of two levels (level1: time index, level2: Quad-tree based multi-level
grid). Finally, the query processing module supports single-object, spatio-temporal range, and kNN
query.

6.4 Python Libraries as Big Spatio-temporal Infrastructures
Python is one of the most popular data analytics platforms today. The PyData stack is rich in terms
of supported libraries, but most of these libraries are developed to execute on a single CPU core
and to process data that fits in main memory. Therefore, Python does not scale well for processing
big data. One can utilize PySpark [62] to process data using Spark [85] on a cluster of nodes. At
present, Spark is the most popular distributed in-memory general-purpose data processing engine
that supports a set of essential libraries (such as Spark SQL, Streaming, MLlib, and GraphX). Spark
has a rich support community, and users can write code in many languages (such as Java, Scala,
Python, and R). However, PySpark is added as an extra layer on top of Spark, and therefore, when
Python code is executed using PySpark, the code is first compiled into Java code and then run
on JVM. Thus, PySpark adds an extra overhead in computation. On the contrary, DASK [53] is a
Python library for parallel and distributed computing that scales Python natively. DASK not only
scales Python across distributed nodes of a cluster, but it also parallelizes a task in a single node
by utilizing multiple CPU cores. Therefore, those who process data using Python on a personal
computer regularly can easily speedup computation using DASK.

DASK is a task-graph based platform that consists of two parts. At high-level, DASK parallelizes
the Python ecosystem by extending existing libraries, such as Pandas (DASK DataFrame), Numpy
(DASK Array), Scikit-Learn (DASK-ML), and other libraries. Whereas, at low-level, DASK provides
dynamic task schedulers like Airflow or Luigi to enable advanced workloads. Here, DASK libraries
(Array, DataFrame) produce task graphs and then DASK schedulers execute task graphs parallelly
either in a single node or in distributed nodes of a cluster. Python also supports a rich set of libraries
(e.g., GeoPandas) for processing spatial, spatio-temporal, and trajectory data. A detailed review of
these libraries is presented in Section 7.2. However, these libraries are also slow and not scalable to
process big spatial data like other Python libraries. DASK does not have a native parallel module for
processing big spatial data. One can utilize DASK DataFrame or low-level capabilities of DASK with
existing spatial libraries to process big spatial data. Previously, developers have tried to improve
the performance of GeoPandas through Cython [29], which allows GeoPandas to access the GEOS
library directly. However, Cythonizing only utilized one core of a single node effectively [52].
Hence, the main challenge is to use multiple CPU cores or distributed nodes of a cluster. Recently,
DASK-GeoPandas [216] was developed to parallelize GeoPandas with DASK, which organizes
many GeoPandas dataframes like DASK-DataFrame. However, this is an experimental project
and currently partitions dataframes by rows. Thus, spatial operations will not return the correct

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

22

Alam, et al.

results in a distributed environment without using spatial partitioning. XArray [117] is a Python
package for labeled multi-dimensional arrays which is efficient for processing scientific datasets
(e.g., netCDF, GeoTiff). Since XArray is tightly integrated with DASK for parallel computation,
we can utilize XArray for processing big raster spatial data. A few other projects, such as dask-
geomodeling [54] and dask-rasterio [136], also provide support for spatial raster data. Moreover,
dask-geomodeling has a module for spatial vector data.

As mentioned before, Hadoop is an efficient framework for big data processing but hindered by
the I/O bottleneck. In this context, as Spark keeps data always in-memory and does not require
to write intermediate results back to disk, it became an efficient and popular data processing
framework. Currently, CPU-based in-memory systems like Spark suffer due to the bottleneck of
processing complex workloads (e.g., deep learning on massive datasets), and this bottleneck is
due to the CPU itself. Compared to CPUs with a few cores and lots of cache memory, GPUs are
composed of hundreds of cores, high bandwidth memory (up to TB/s), and high-speed hardware
interconnections (e.g., bidirectional GPU to GPU bandwidth up to 300 GB/s). Also, GPUs can scale
up to 16x in a single node [134]. RAPIDS [233] is a collection of libraries and APIs that bring
the power of GPUs for processing big data in Python. RAPIDS supports a wide range of libraries
for Python developers, such as analytics (cuDF, cuIO), machine learning (cuML), graph analytics
(cuGraph), deep learning (PyTorch, TensorFlow, MxNet), spatial analytics (cuSpatial), visualization
(cuxFilter, pyViz, plotly), and other libraries. These libraries are literally replicated versions of the
existing python libraries. Therefore, Python developers can utilize the processing capability of
GPUs without knowing low-level CUDA implementations. Using RAPIDS, we can achieve vertical
scalability easily. Since RAPIDS integrates DASK, horizontal scalability can be achieved through
RAPIDS and DASK using OpenUCX on a single node as well as in distributed nodes of a cluster.
cuSpatial is a spatial module of RAPIDS, which is still in early-stages of development, but
growing rapidly. Dependent on the type of operations, it is possible to achieve significant (up
to 1000x) performance improvement in RAPIDS when compared to CPU spatial libraries like
GDAL. cuSpatial integrates with RAPIDS dataframe cuDF to use GPUs massive parallelism and
high memory bandwidth for performing spatial operations. Developers can also use cuSpatial
and cuGraph together for spatial and spatio-temporal analytics. cuSpatial is implementing spatial
features in four layers that include geometry types, spatial operations, indexing, and querying. The
current version of cuSpatial (v0.16) can model some basic geometry types such as points, polylines,
polygons, and shape primitives. It supports Quad-Tree indexing for performing various spatial
operations, such as point-in-polygon, Haversine distance (distance between points), and Hausdorff
distance (distance between trajectories). Currently, it supports spatial window and nearest polyline
queries. Since cuSpatial is working seamlessly with cuDF, users can use various data formats, such
as CSV, Parquet, Shapefiles, JSON, and more.

In terms of support, Spark lacks data visualization and deep learning libraries. Whereas, both
DASK and RAPIDS have support for data visualization and deep learning libraries (PyTorch,
TensorFlow, Keras). At present, there is no SQL query support in DASK. However, one can run SQL
queries on both Spark (Spark SQL) and RAPIDS (blazingSQL). Though all of them have support
for machine learning libraries, DASK (Dask-ML) and RAPIDS (cuML) libraries are more popular
compared to Spark (MLib).

6.5 Other Big Spatio-temporal Infrastructures
A number of distributed systems were developed by extending existing infrastructures other than
Hadoop, Spark, and NoSQL-databases for processing spatial data. Sphinx [65, 66] is a highly-scalable
distributed spatial data processing system that extends the core of Apache Impala [83, 132], which
is a SQL engine over Hadoop. Sphinx has adopted the ANSI-standard SQL interface and built spatial

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

23

support in four layers of Impala. It introduced spatial data types, OGC-compliant spatial predicates
and functions, and commands to create spatial indexes in the query parser layer. Two-level index is
added in the storage layer, where the global index (R-tree/R+-tree) partitions the data into blocks,
and local indexes (R-tree) arrange records in each block of HDFS. Finally, Sphinx modifies the query
planner and the executor layer to add support for spatial joins and range queries. Since SQL-like
queries of most big spatial data processing systems are not ANSI-standard and not efficient as spatial
RDBMS, Sphinx achieves good performance over systems like SpatialHadoop. However, one can
run a query on existing data only, as data updates are not allowed in HDFS. AsterixDB [7, 11, 12] is
a full-fledged big data management system, which incorporates LSM-based data storage and a set of
indexing techniques including B+-tree and R-tree. It supports a complete query language, AQL, that
uses Hyracks [36] as a query execution engine. A rich set of built-in data types, including spatial and
temporal data, allows users to perform spatial, temporal, and spatio-temporal queries. Currently, it
also supports the SQL++ query language, which is very similar to SQL, but for semi-structured
data (e.g., JSON).

Like Spark, Apache Ignite [240] is also a scalable and fault-tolerant distributed in-memory big
data processing platform, but has limited spatial supports. Its geospatial module supports geometry
data types (point, line, and polygon), a limited form of querying on geometry data (intersection
operation), and spatial indexing R-tree from the H2 database [227]. The main limitation of Ignite is
that it does not support any spatial partitioning technique to distribute data across the clusters.
Therefore, the result returned from Ignite for any spatial query is not accurate. Alam et al.[6]
introduced 𝑆𝑝𝑎𝑡𝑖𝑎𝑙𝐼𝑔𝑛𝑖𝑡𝑒 as extended spatial support for Ignite. They have added a spatial library
containing all the OGC-compliant spatial predicates and analysis functions and introduced two
spatial data partitioning techniques (fixed grid and Niharika [196]) into 𝑆𝑝𝑎𝑡𝑖𝑎𝑙𝐼𝑔𝑛𝑖𝑡𝑒. According
to the reported evaluation results, 𝑆𝑝𝑎𝑡𝑖𝑎𝑙𝐼𝑔𝑛𝑖𝑡𝑒 outperforms GeoSpark [261] for executing spatial
join and range queries.

There are a few spatial database systems that have been developed from scratch, such as SciDB [28,
40, 51, 220], RasDaMan [25–27], and DISTIL [154, 179]. Both RasDaMan and SciDB are specialized
database systems developed from scratch for scientific computing. These systems are implemented
using a multi-dimensional array data model and efficient for processing spatial raster data. Besides,
these systems support SQL-like queries. DISTIL is a scalable spatio-temporal in-memory system that
is implemented based on APGAS (Asynchronous Partitioned Global Address Space) programming
model. Its efficient data partitioning and distributed multi-level spatio-temporal indexing expedites
the performance of range and kNN queries. DISTIL achieves a high rate of updates by incorporating
LSM-Tree [169] based key-value store LevelDB [223] (developed by Google) as a local data store
in each node of a cluster. Besides, the data in the local store is periodically synchronized with
the distributed persistent global store, HDFS. At present, DISTIL does not have any support for
SQL-like queries. However, data processing systems built from scratch for a specific purpose, such
as spatial data processing, can achieve good performance. Whereas, it is always challenging to
develop a full-fledged system from scratch, and also, it is hard to use them as a general-purpose
system [69]. Besides, the code base of these systems is frequently immature and difficult to extend.
The big spatial data processing systems, which are developed based on Hadoop, Spark, or other
platforms, can only store and process historical static spatial data. However, a wide range of
location-based services require real-time processing of spatial data streams. Also, the indexing of
these systems does not support high update rates to adjust with newly arriving streams. Besides,
these services demand dynamic workload distribution. GeoFlink [209] extends Apache Flink to
add support for processing spatial data streams. It has introduced grid-based dynamic indexing
to perform continuous queries (range, kNN, and join). Both Tornado [150, 151] and SSTD [46]
have extended Apache Storm for processing spatio-textual (e.g., geo-tagged tweets) data streams.

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

24

Alam, et al.

Table 6. Other Big Spatio-temporal Infrastructures

System Type

Underlying
System/Architecture

Geometry
Types

Spatial Raster

Array DB

Spatial Raster

Array DB

N/A

N/A

RasDaMan [27]
(1997)
SciDB [40, 51]
(2009)

DISTIL [154, 179]
(2018)

Spatio-temporal

APGAS1

AsterixDB [11]
(2014)

Spatial,
Spatio-temporal

Hyracks [36]

Sphinx [65]
(2015)

SpatialIgnite [6]
(2018)

Spatial

Apache Impala

Spatial

Apache Ignite

Tornado [151]
(2015)

Spatio-textual
Stream

Apache Storm

Point (id,
oid, lat, lon,
timestamp,
direction,
speed)
Point, Line,
Polygon, Circle,
Rectangle, Date,
Time, Interval,
Duration, etc.
Point,
LineString,
Polygon,
Collections
Point,
LineString,
Polygon

{srcid, oid,
(x, y), t, text}

SSTD [46]
(2020)

Spatio-textual
Stream

Apache Storm

Point

Partitioning

Indexing

N/A

Query
Language

RasQL

Supported
Queries

Range

N/A

N/A

RRR2,
MDR3

Hash

STR

KD-Tree

AFL, AQL

Range, kNN

Multi-Level
L1: Quad-Tree
L2: Spatial
L3: Temporal

B+-Tree,
R-tree

N/A

Range, kNN

AQL, SQL++

Range, Join

Two-Level
Global: R/R+-Tree
Local: R-Tree

SQL
(ANSI-Standard)

Range, Join

Grid,
Niharika [196]

R-Tree

Distributed SQL
(ANSI-Standard)

Range, Join

Adaptive Indexing
Global: Spatial (A-Grid)
Local: Spatio-textual
(KD-Tree)

Global: QT-tree
Local: Object, Query

A-Grid

QT-tree
(Spatial,
Textual)

Atlas
(SQL-Like)

N/A

N/A

Snapshot,
Continuous
(Range, kNN,
Join)
Snapshot,
Continuous
(Range, kNN,
Top-k)
Continuous
(Range, kNN,
Join)

GeoFlink [209]
(2020)

Spatial Stream

Apache Flink

Point

Grid

Grid-based

1 APGAS - Asynchronous Partitioned Global Address Space
2 RRR - Row-wise Round-Robin Partitioning
3 MDR - Multi-dimensional Range Partitioning

Tornado has added a two-level (global spatial and local spatio-textual) adaptive indexing layer
for dynamically distributing data and query workloads. However, global indexing (A-Grid) and
the cost model for load balancing of Tornado works well with continuous queries, not snapshot
queries. Hence, SSTD has introduced QT-tree (a Quad-tree variant) global indexing and a set of
local indexing for both continuous and snapshot queries (range, kNN, and top-k). Among them,
only Tornado supports SQL-like (Atlas) queries with a map-based interface.

Currently, most major commercial data management systems have some form of spatial support.
For example, Google BigQuery [49] has a GIS module (BigQuery GIS) to perform ANSI-standard
SQL queries on large spatial datasets. Users can also visualize BigQuery results using BigQuery
Geo Viz and Google Earth Engine. Google Earth Engine [101] is itself a cloud-based platform for
the analysis of large scale geospatial data. Similarly, one can run standard SQL queries on Amazon
Athena [13] or Microsoft Azure for processing spatial data.

6.6 Future Research Directions
Though quite a large number of big data infrastructures have been developed for processing spatial,
spatio-temporal, and trajectory data in the last couple of years, most of these systems are not in
active development. Also, some of these systems have support for SQL-like queries but not as
efficiently as SQL queries in spatial RDBMSs. Besides, their visualization capability is limited except
for Python based libraries. Moreover, a few of these systems have support for processing spatial
raster data, such as RasDaMan [27], SciDB [28], GeoTrellis [64], and Google Earth Engine [101].
Among them, both RasDaMan and SciDB were built from scratch for specific purposes.

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

25

Therefore, considering the volume of spatial raster data generated from various sources (e.g.,
earth sensors, satellites) and the importance of this data in many application domains, more research
is required for processing spatial raster. Also, we need to improve the efficiency of SQL-like queries
and the visualization capabilities of existing or new infrastructures. Also, there will be demand in
the coming years to include more support for visualizing big spatial data on web platforms. Recently
a few big data stream processing platforms (e.g., Apache Flink, Apache Storm) have extended to
integrate support for processing spatial or spatio-textual data streams. But more research is required
in this area in the coming future. For example, instead of spatial point streams, future research
will explore line and polygon streams or will include support for spatio-temporal aspects of data
streams. Currently, there is a demand to incorporate SQL-like query engine and dedicated spatial
library in DASK. Since the spatial library (cuSpatial) of RAPIDS is in the early stage, there will be
more research in the coming future to add more features for processing spatial and spatio-temporal
data in GPU. In addition, future big data infrastructures will be more cloud-native and will include
machine learning and deep learning models to process spatial data.

7 PROGRAMMING AND SOFTWARE TOOLS FOR SPATIO-TEMPORAL ANALYSIS
The infrastructure we use to store spatio-temporal datasets is one of the key aspects of any project
involving this type of data. Still, what we do with this data is also of major importance as it allows
extracting value out of these data. In this context, it is of utmost importance to review the main
programming and software tools that are available to researchers and practitioners for analyzing
spatio-temporal data sets.

Analyzing these data may sometimes simply involve using the available geospatial tools and
write some code for storing, querying, analyzing, and visualizing spatial data. Other usage cases
involve developing libraries or packages for specific purposes like spatial I/O, visualization, spatial
regression, etc. In each of these cases, one essential question comes into our mind: which program-
ming language (or languages) to use to meet our purposes. This decision is frequently driven by
our goals. For example, if we want to develop a system that requires heavy-weight development,
we will look for a language that is fast and efficient like C/C++ or Java. However, if a developer
wants to extend an existing system, the developer will most probably use the language on which
the system was built. On the contrary, if our goals involve performing data processing, analysis,
and visualization, we need a language that provides a rich set libraries and packages good at these
tasks, like Python or R. Moreover, many spatial systems (e.g., ArcGIS) leverage more than one
language since some spatial features may be better supported by some languages than others.

The most popular libraries for modeling spatial data in use today in GIS applications and spatial
data processing systems are developed either by Java or C/C++, such as JTS (Java) [146], GEOS
(C++) [172], Google S2 (C++) [100], ESRI Geometry API (Java) [75], and Spatial4j (Java) [144]. Most
of the big spatial data processing systems have also utilized these libraries to model spatial data,
such as SpatialHadoop (JTS, ESRI Geometry API), GeoSpark (JTS), and GeoMesa (JTS, Spatial4j),
etc. Spatial RDBMSs like PostGIS or SpatialLite have used GEOS for modeling spatial data. Even
libraries and packages of Python or R have also utilized the GEOS library for modeling spatial
data. Recently, researchers have also proposed benchmarks [178, 271] for computational geometry
libraries used in data processing systems for spatial data exploration.

At present, almost all popular programming languages have some support in terms of libraries or
tools [137], which makes it easier to develop geospatial applications. However, C/C++ and Java are
still top in the game for heavy-weight spatial system development. On the other hand, Python or R
provide ease of programming and a rich set of libraries and packages for analysis, visualization,
and modeling spatial and spatio-temporal data for a wide range of application domains. Also, it is
comparatively easy to implement a new library or package for a specific purpose in R and Python,

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

26

Alam, et al.

by extending existing support. But if we need to work for the web, then we may need to get support
from JavaScript, Python, R, and other web-related languages. It is similar for mobile development;
we may need to choose language related to mobile operating systems, such as iOS and Android.

In this section we perform a comprehensive review of widely used libraries and packages of
Python and R for analyzing, modeling, and visualizing spatial, spatio-temporal, and trajectory data.
We focus on these two programming languages and environments because they are currently seen
as the de facto standards for data analysis. This section will also discuss two popular software tools
(ArcGIS and QGIS) for spatial data processing.

7.1 The R Ecosystem for Spatio-temporal Data Analysis
R is one of the most used languages in data science. From its inception, R is more focused on data
analysis and statistical tasks, and therefore, it is more popular with academicians, statisticians,
engineers, and scientists, who do not even have prior computer programming knowledge. The
capability of R is rapidly growing for statistical analysis, modeling, and visualization of data for
a wide range of application domains. In terms of the extension of libraries and packages for data
analysis, R is richer than its counterparts.

A rich set of packages and libraries are also available in R for analysis and visualization of spatial,
temporal, and spatio-temporal data. In addition to analysis and visualization, R also provides
interfaces to spatial database systems, GIS software, and big data processing platforms. The R
ecosystem for spatio-temporal data analysis is summarized in Table 7.

Table 7. R Ecosystem for Spatio-temporal Data Analysis

Category

Data Processing

Data Manipulation
Data Modeling

Visualization

APIs for GIS Software
and Spatial RDBMSs

APIs for
Big Data Platforms

Libraries/Packages/Tools/API’s
- sp, sf: spatial vector data
- raster, terra: spatial raster data
- spacetime, trajectories, stars: spatio-temporal data
- xts, zoo, its, ts: time series
- tidygraph: spatial network
- GDAL (rdal), GEOS (rgeos), PROJ.4(proj4): OSGeo libraries
- dplyr, tidyr, rmapshaper
- gstat, CAST, mlr/mlr3, performanceEstimation
- ggmap: spatial visualization with ggplot2
- tmap: thematic maps in R (static, animated and interactive)
- leaflet: JavaScript library for interactive web maps
- mapview: interactive viewing of spatial data
- plotly: interactive web-based graphs via plotly.js
- rasterVis: static visualization of raster data
- RQGIS for QGIS
- RSAGA for SAGA
- rgrass7 for GRASS
- RPyGeo for ArcGIS
- rpostgis for ’PostGIS’-enabled ’PostgreSQL’
- Hadoop: Hadoop Streaming, RHadoop, RHIPE, ORCH
- Spark: SparkR, sparklyr
- GeoSpark: geospark

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

27

Data Processing Infrastructures: The packages related to spatio-temporal data processing
can be categorized into three main groups, namely spatial, temporal, and spatio-temporal. The
sp [184] package was the first package related with this type of data developed for R, which consists
of methods and classes to represent spatial data types and operations. Since its release in 2005, it
became quite popular and nearly 350 other packages are dependent on it. However, spatial features
developed in sp are not compliant with OGC simple features [167]. Moreover, as many features and
functionalities of sp are directly dependent on OSGeo libraries [173] (such as GDAL, GEOS, and
PROJ.4), if these libraries make any changes, it is difficult for sp to manage and maintain interfaces
to these libraries due to a lack of simple features. The package sf (simple features) [181] provides
classes and methods for spatial vector data, which supersede the sp package. Its features are OGC-
compliant and provide direct interfaces to the GDAL, GEOS, and PROJ.4 libraries. Therefore, if
we use sf, we do not need to load these external libraries into R code. In addition, sf has many
advantages over sp, that include faster I/O operations, improved visualization, compatible with the
tidyverse collection of packages (e.g. dplyr), sf objects can be treated as data frames for spatial
operations, and finally, the spatial functions in sf have a more consistent naming that makes it
easier to use in the code [147]. Not surprisingly, sf is quickly being adopted as the backbone for
data processing by many other packages related to spatial data analysis.

The raster [116] package is popular for processing spatial raster data. It supports classes and
a large set of functions to create, read, write, manipulate, and process raster data. This package
can also process large raster datasets that are too large to fit in the main memory. The terra [115]
package is a new package for processing raster data in R, containing similar functionality as the
raster package. However, due to its simplicity and faster operation, terra will replace the raster
package soon. Besides, this package contains useful methods for data prediction (e.g., interpolation).
The packages stars [182] or spacetime [180] are used for processing spatio-temporal data, but
spacetime also has support for trajectory data. The package trajectories [183] was specifically
developed for the analysis trajectory data. These packages are dependent on packages for the
analysis of time series (such as xts [205], zoo [270]) and spatial data (such as sp, sf).

Data Manipulation: The package dplyr [254] provides a grammar for data manipulation. It
contains a set of functions (verbs) to manipulate data in data frames, such as adding new columns,
selecting specific columns, filtering rows, re-arranging rows, summarizing data, and other functions.
As the sf package is compatible with dplyr, the functions of dplyr can manipulate spatial objects
in sf. In addition to manipulating in-memory data frames, dplyr can also manipulate data stored in
relational databases (using dbplyr[255]) or large datasets stored in Spark (using sparklyr [148]).
Data Modeling: The gstat [107] package is used for statistical modeling, prediction, and simu-
lation of spatial and spatio-temporal data, which is also dependent on sp package. The CAST [156]
package provides functions to improve spatio-temporal modeling tasks using caret package [135].
The mlr [32] package contains a wide range of machine learning algorithms for modeling data.
However, due to its complex design, it is difficult for the developers to maintain and add new
features in mlr. Besides, as some dependent packages of mlr have changed their features in the
meantime, the developers of mlr could not manage to update the mlr accordingly. The mlr3 [138]
is a successor of mlr, and it is a generic, object-oriented, and extensible framework that solves
the above problems. The package performanceEstimation [244] also allows for predictive model
development and tuning and moreover, contains specific routines for handling predictive tasks
with time dependant data, like for instance sliding and growing window model building schemas.
Data Visualization: Data visualization is an important part of data analysis. In case of spatial
data analysis, mapping is one of the best way to present the findings of the research. Though most
of the spatial mapping packages were dependent on sp package before, a few of them (such as
tmap [238], leaflet [47], mapview [15]) are already supporting the classes of the sf package [147].

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

28

Alam, et al.

Spatial maps can be static or interactive and animated. The widely used static mapping tools are
tmap and ggmap [127], but tmap is also used for interactive mapping. There is a wide range of
packages for interactive and animated maps, such as leaflet, mapview and plotly [215]. Besides,
rasterVis [187] is a common package for static raster data visualization.

APIs for GIS Software and Spatial RDBMSs: R is very rich in terms of libraries and packages
for analysis spatio-temporal data, but it is neither a spatial database system nor a powerful stan-
dalone GIS software tool. Besides, R packages are not capable of processing large spatio-temporal
data. Therefore, the integration of R with GIS software and Spatial RDBMSs extends the capabilities
of R for processing spatio-temporal data. As a result, R users can use hundreds of algorithms
from GIS software and can process data stored in database systems using a rich set of R packages.
RQGIS [158] establishes an interface between R and QGIS [191] by utilizing Python API for QGIS.
It provides access to QGIS algorithms from within R. As QGIS has already integrated other popular
GIS software (such as GDAL, SAGA, GRASS, and more), integrating R with QGIS brings the power
of all these software into R using only one package, RQGIS. However, one can use dedicated
APIs to access complete support of each of these GIS software that include rgdal [34] for GDAL,
RSAGA [38] for SAGA, and rgrass7 [33] for GRASS. R users can also access functionalities of
another popular commercial GIS software ArcGIS through the RPyGeo [39] package. Spatial
RDBMSs (e.g., PostgreSQL/PostGIS, Oracle Spatial) can store, manage, and query both vector and
raster data efficiently. However, their data analysis and visualization capabilities are very limited.
Therefore, the integration of R with spatial RDBMSs is useful for both R and spatial RDBMSs users.
The rpostgis [41] package provides R with an interface to access a popular open-source database
system, PostgreSQL/PostGIS. It also supports methods to perform read and write operations with
PostgreSQL/PostGIS for handling both vector and raster spatial datasets.

APIs for Big Data Platforms: Traditional GIS software and spatial RDBMSs are not capable
of handling today’s huge volume of multi-dimensional and heterogeneous spatio-temporal data.
Therefore, R interfaces to these systems do not provide scalability and efficiency for processing big
spatio-temporal data. There are a number of R APIs that provide access to scalable and fault-tolerant
distributed big data computing platforms, such as Hadoop and Spark. We can use Hadoop Stream-
ing [90], RHadoop [202], RHIPE (R and Hadoop Integrated Programming Environment) [61],
and ORCH (Oracle R Connector for Hadoop) [170] API to run MapReduce jobs using Hadoop or
directly accessing Hadoop Distributed file System (HDFS) within the R programming environment.
However, the Hadoop Streaming API can only run R MapReduce scripts that are written using
the HadoopStreaming [203] package. The sparklyr [148] and SparkR [247] packages are used
as an interface between R and Spark. The package sparklyr is compatible with dplyr and allows
R users to access the built-in machine learning algorithms of Spark. SparkR is a native Spark
frontend for R users that provide access to all Spark libraries. Besides, these packages also allow R
users to access HDFS. However, both Hadoop and Spark do not have native support for processing
spatial data. On the other hand, most R packages for spatial analysis are developed for a single
node. Therefore, we can implement a custom R package for Hadoop and Spark-based spatial data
processing systems (discussed in Section 6.1 and 6.2) to achieve scalability for spatial processing.
For example, geospark [274] package allows R users to use GeoSpark [261] for big spatial analysis.

7.2 Python Ecosystem for Spatio-temporal Data Analysis
Python is a full-fledged general purpose programming language. However, Python has become one
of the most popular programming languages for data science in the last decade. It is widely used
for processing, analyzing, and visualizing data in both academia and industry. Researchers and
organizations are continuously working to develop new tools, libraries, and packages to process and
analyze real-world data. Therefore, the community of Python is growing as well as the capabilities

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

29

of the language. Other than data science, Python is also popular with programmers and developers
for developing general-purpose software applications. Due to the rise of spatial data, Python has
been adopted for modeling, analyzing, and visualizing spatial, temporal, and spatio-temporal data in
the last decade. The integration of Python as the main scripting language by popular GIS platforms
like ArcGIS and QGIS has expedited this process. Python also supports interfaces to big data
computing platforms, Hadoop and Spark. The Python ecosystem for spatio-temporal data analysis
is summarized in Table 8.

Table 8. Python Ecosystem for Spatio-temporal Data Analysis

Category

Core Libraries

Data I/O

Data Processing

Statistical Analysis
and Modeling

Visualization

APIs for
GIS Software
APIs for
Big Data Platforms

Libraries/Packages/Tools/API’s
- SciPy: core library for scientific computation
- NumPy: fundamental library for numerical computation
- Pandas: data structure and analysis library
- GDAL: raster and vector I/O (interface to GDAL/OGR)
- Fiona: vector I/O (interface to OGR)
- Rasterio: raster I/O (interface to GDAL)
- GeoPandas: spatial extension of pandas
- Shapely: spatial analysis of geometric objects
- scipy.spatial: spatial algorithms and data structures
- pyspatial: analysis vector/raster data
- sptemp: spatio-temporal vector data analysis
- Rtree: spatial indexing
- rasterstats: summarizing spatial raster datasets
- MovingPandas, traja: trajectory data analysis
- pyproj: coordinate transformations (interface to PROJ4)
- PySAL: spatial and spatio-temporal data analysis library
- scikit-learn: machine-learning algorithms
- scikit-image: algorithms for image (satellite) processing
- statsmodels: statistical modeling for python
- Matplotlib: static and interactive visualization
- Seaborn: statistical data visualization
- Bokeh: interactive visualizations for the web
- Plotly: interactive visualizations for the web
- Folium: visualizations via interactive leaflet map (leaflet.j)
- Cartopy: visualize data on maps
- ggplot: visualizations based on R ggplot2
- ArcPy, ArcGIS API: python interface to ArcGIS
- PyQGIS: python interface to QGIS
- Hadoop: Hadoop Streaming, mrjob, Pydoop, Luigi, PyArrow
- Spark: PySpark

The SciPy stack [237] consists of a set of libraries for scientific computing in Python. Specifically,
the SciPy [237], Numpy [236], and Pandas [176, 251] libraries have been used as core packages
in data science. These packages are also essential for the analysis of spatio-temporal data as most
of the libraries of the Python spatial stack depend on them.

Data I/O: The spatial input/output libraries of Python are developed using the existing C
library, GDAL (Geospatial Data Abstraction Library) [96], which supports a wide range of raster

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

30

Alam, et al.

and vector data formats. Therefore, Python spatial I/O libraries also support these data formats.
Fiona [99] interfaces to the OGR (OpenGIS Reference Implementation) layer of GDAL for reading
and writing spatial vector data of various formats, such as Shapefile, GeoJSON, JSON, CSV, etc. The
library rasterio [232] interfaces to GDAL for raster functionality. It relies on Numpy for efficient
processing of raster formats, such as GeoTIFF, netCDF, JPEG2000, and other formats.

Data Processing: A set of libraries is available in Python for processing spatial and spatio-
temporal data. The library Shapely [211] provides functions for manipulation and analysis of
vector geometric objects, and is based on the widely used GEOS [172] library. GeoPandas [97]
is a spatial extension of Pandas. It uses the Shapely, Fiona, and pyproj (Python interface to
PROJ.4) [252] libraries to add spatial support in the popular data analysis and manipulation tool,
Pandas. SciPy.Spatial also provides algorithms and data structures for spatial analysis. Whereas,
rasterstats [188] contains functions for zonal statistics and interpolated point queries for summa-
rizing spatial raster datasets using vector geometries. It can work with any data formats supported
by rasterio. Moreover, one can use pyspatial [239] for both raster and vector data, sptemp [24] for
spatio-temporal vector data, and MovingPandas [102] and traja [213] for trajectory data analysis.
Statistical Analysis and Modeling: PySAL [201] is an open-source spatial analysis library
with a primary focus on vector data. The functionality of PySAL covers a wide range of areas,
such as methods to detect spatial clusters, hot spots and outliers, spatial regression, statistical
modeling, spatial econometrics, space-time analysis, visualization, and more. The current version
of PySAL (v2.X) consists of four domains, which include PySAL core (pysal.lib), exploratory
spatial data analysis (pysal.explore), spatial statistical models (pysal.model), and geovisualization
(pysal.viz). pysal.lib is the core library which contains data structures and algorithms for spatial
I/O, spatial weights, computational geometry, and more. The pysal.explore library consists of
modules for exploratory analysis of spatial and spatio-temporal data. The pysal.model is designed
to model spatial relationships in data using different types of linear, generalized-linear, generalized-
additive, nonlinear, multi-level, and local regression models. Finally, the pysal.viz layer supports
functionality to visualize spatially analyzed data (e.g., detected clusters or hot-spots). Besides, PySAL
provides a toolkit for ArcGIS and a plugin for QGIS which allows using the functionalities of PySAL
within these GIS software. Some desktop applications like CAST (Crime Analytics in Space-Time)
and GeoDaSpace has also use a subset of PySAL. Moreover, PySAL is now available as a featured
package in the distribution of Anaconda Python and Enthought Canopy [200]. statemodels [207]
is another useful library for users who are looking for a Python library for statistics, financial
econometrics, or econometrics. It also supports models for time-series analysis.

scikit-learn [185] is a library of a vast collection of supervised and unsupervised machine
learning algorithms for clustering, classifications, regression, dimensionality reductions, and many
more. It also supports functions for data loading, manipulation, and prepossessing. Whereas
scikit-image [245] includes a wide range of algorithms for image analysis, such as segmentation,
transformations, restoration, metrics, feature selection, color space manipulation, filtering, mor-
phology, and other algorithms. Since both of these libraries are implemented based on the libraries
of the SciPy ecosystem, SciPy libraries must be installed before using scikit-learn and scikit-image.
Data Visualization: Like R, Python also supports a rich set of libraries for spatial data visu-
alization and mapping. Matplotlib [121] is a key visualization library in Python (part of a SciPy
ecosystem), which can be used for creating static, interactive, and animated visualizations. The
package Cartopy [155] uses PROJ.4, Shapely, and Numpy to provide a spatial mapping library on
top of Matplotlib. It includes an easy way to create maps via Matplotlib. Seaborn [208] is another
library built on top of Matplotlib for statistical data visualization. A number of Python packages are
also built to create interactive maps for the web, such as Folium [221], Bokeh [35], and Plotly [215].
Folium is a wrapper for the leaflet.js library for plotting interactive web maps. It includes a raster

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

31

and a vector layer for visualizing through an interactive leaflet map. Similarly, Bokeh and Plotly
are also developed as interactive visualization libraries for web browsers.

Python for GIS Software: The integration of Python as a main scripting language of Ar-
cGIS [77] and QGIS [191] allows users to use the combined power of GIS software and Python for
processing spatial data. The ArcPy package ships with a desktop version of ArcGIS and allows
Python to access GIS tools with extensions, useful functions, classes, and modules for processing
geospatial data. This package helps users to write Python scripts which can be run within ArcGIS
or as standalone scripts. ArcGIS API for Python (called Pythonic GIS API) gives access to a wide
range of modules, classes, and functions provided by ArcGIS Online and ArcGIS Enterprise for
web-based GIS solutions. Similarly, we can use Python with QGIS in many ways, such as executing
commands in the Python console within QGIS, extending the functionality of QGIS by developing
new plugins, creating standalone Python scripts, and developing custom GIS applications using
PyQGIS API [190]. Other popular GIS software like GRASS GIS [103] and SAGA GIS [234] also
support APIs for Python.

APIs for Big Data Platforms: As it was mentioned in Section 1, spatial libraries and packages
of Python were developed for processing data in a single-node environment. Therefore, we need to
use parallel and distributed computing platforms like Hadoop and Spark for processing larger sets of
data. There are a number of Hadoop APIs that allow Python users to access the Hadoop MapReduce
paradigm and distributed file system HDFS, which include Hadoop Streaming, mrjob (Yelp) [259],
Pydoop [140], and Luigi (Spotify) [241]. One can write and run MapReduce jobs on Hadoop using
all these APIs, but the Hadoop Streaming API ships with Hadoop as a native API. mrjob can also
run MapReduce jobs locally without Hadoop for testing purposes. Pydoop is tightly integrated
with Hadoop and provides full access to Hadoop APIs. Pydoop also supports direct access to HDFS
via its HDFS API. Moreover, PyArrow also includes an HDFS client to access HDFS. On the other
hand, PySpark [62] is a native Spark API that enables Python users to interact with the Spark
programming paradigm for processing large datasets. Along with a rich set of Python libraries,
this API also allows Python users to use built-in Spark libraries, such as MLlib (machine learning),
Spark Streaming, and Spark SQL and Dataframes. Besides, PySpark can process data stored in a
distributed storage like HDFS. However, these Python APIs add an extra overhead in computation
during big spatial data processing as they are developed as a layer on top of Hadoop and Spark.
Hence, DASK [53] and RAPIDS [233] have emerged as parallel and distributed Python libraries to
mitigate this issue (see Section 6.4).

7.3 GIS Software
A GIS (Geographical Information System) is an integrated environment to capture, store, analyze,
and visualize all kinds of geographical data (raster, vector, and network). GIS software is a useful tool
for researchers, scientists, or practitioners, who want to extract inherent knowledge, patterns, and
relationships from geographical data and analyze the data to address real-world problems. There
are a few commercial and open-source GIS software applications available, such as ArcGIS [77],
QGIS [191], GRASS [103], and SAGA [234]. ArcGIS and QGIS are the most popular GIS software
among them.

ArcGIS [77] is a leading commercial GIS software application developed by ESRI [79]. Whereas,
QGIS (Quantum GIS) [191] is a popular open-source GIS software application that supports similar
functionalities to ArcGIS. The desktop version of ArcGIS only supports the Windows platform,
but QGIS is available for all popular computing platforms like Windows, Mac, and Linux. As QGIS
has integrated a few other popular GIS software like GRASS [103], SAGA [234], and OTB (Orfeo
Toolbox) [106], one can use a subset of algorithms from these third party GIS software within QGIS.
However, if we want to use full functionality of these GIS software systems, we need to stick with

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

32

Alam, et al.

GRASS and SAGA [147]. Both ArcGIS and QGIS have support for a Python console that allows
users to execute the functionality of GIS tools and Python within ArcGIS and QGIS. Also, both of
them have an interface to Python and R. Therefore, one can use the functionality of ArcGIS and
QGIS within Python and R programming environments. According to an experiment conducted by
Debicka et al. [59] based on the buffer, convex hull, and intersection geometric operations, QGIS is
faster than ArcGIS for processing spatial data. However, in terms of spatial mapping capabilities,
ArcGIS is way better than QGIS. ArcGIS is also richer in terms of tools and supported algorithms,
but one can extend the capabilities of QGIS by adding third-party plugins. Moreover, the supported
input file format of QGIS is very rich, as it uses the GDAL/OGR library.

Like Spatial RDBMSs, GIS software is also going through many changes over the years to adapt
to this era of big spatial data. ESRI has released open-source GIS tools for Hadoop [74] to perform
analysis on big spatial data by utilizing the distributed processing capability of Hadoop. These
tools include: (i) a geometry API for Java users to develop MapReduce applications for spatial data
analysis; (ii) a spatial framework, which allows users to perform SQL-like queries on spatial data
using the Hive Query Language (HQL); (iii) a geoprocessing toolbox, which allows users to take
advantage of both Hadoop and ArcGIS for spatial processing; and (iv) a complete toolkit containing
a geometry API, a spatial framework, and a geoprocessing toolbox. ESRI has also introduced a
Spark-powered GeoAnalytics toolbox for both ArcGIS server and desktop versions. GeoAnalytics
Desktop [78] brings parallel processing of data across multiple cores of a personal computer through
ArcGIS Pro. Whereas, GeoAnalytics Server [76] provides distributed processing of big spatial data
across multiple nodes of a cluster running ArcGIS Enterprise. As Spark ships with ArcGIS, users do
not need to install Spark separately. Users can also write a Python program to process data using
the GeoAnalytics toolbox. Besides, ESRI ArcSDE is an RDBMSs gateway that allows ArcGIS users
to store, use, and manage spatial data in some popular databases, such as IBM DB2 and Informix,
Oracle, Microsoft SQL Server, and PostgreSQL. In summary, GIS software is continuously adapting
to process big spatial data.

7.4 Future Research Directions
At present, Python and R support a rich set of libraries and packages for processing spatio-temporal
data. These libraries and packages are developed for processing data in a single node computer
system and are not suitable for processing big data. Python and R users could utilize the available
APIs for big data processing platforms, such as Hadoop and Spark. But we do not know how these
libraries will perform with big data platforms since there is no comprehensive evaluation yet.
Besides, these APIs will add an extra overhead in overall the computation since we need to compile
Python or R code into the target platform. We can also implement APIs to use big spatio-temporal
systems that have been developed based on big data platforms. Currently, DASK and RADPIS are
promising platforms to process big spatial data for Python users. R users either need to use an
existing big spatio-temporal data processing system or need to develop a system like DASK.

On the other hand, GIS software will be adding new features and modules to create analysis and
mapping facilities for a wide range of new application domains. As machine learning (ML) and
deep learning (DL) algorithms and techniques are important for solving complex spatial problems,
there will be more ML and DL models in GIS software in the future. Therefore, along with parallel
and distributed computing, more research is required in terms of integrating ML and DL tools with
GIS Software.

8 CONCLUSION
Due to the rise of spatio-temporal data volume and the significance of extracted knowledge in a wide
range of application domains, plenty of research and development works have been done in the area

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

33

of spatio-temporal data analytics in the past decade. Survey work is always pivotal for researchers
to know and advance the state of the art. In this survey, we have conducted a comprehensive study
on the whole ecosystem of spatio-temporal data analytics, which covers spatial databases (SQL and
NoSQL), big spatial-temporal infrastructures, programming languages, and software tools. This
study also addressed the importance, current demand, and future of spatio-temporal data analytics.
Though the main focus was on spatio-temporal analysis for big data, we have discussed related
areas as well.

We argue that the research community needs to address a few areas of spatio-temporal data
analytics in future research that include (i) integrating more support to model and analysis of
spatial raster data, (ii) integrating more support for processing spatio-temporal (trajectory) data
streams, (iii) integrating or improving SQL-like queries, and (iv) adding more support for analysis
and visualization in big spatio-temporal infrastructures. It is already evident that there will be
more research on integrating AI, machine learning, and deep learning models in future big spatio-
temporal infrastructures for uncovering hidden knowledge. There will be demand for integrating
visualization support for big spatial data in web platforms. Besides, we think future infrastructures
will be more application-specific, such as IoT, neuroscience, emergency management, transportation,
and other applications. The usage of GPU in RAPIDS has shown significant speed-up in computation
compared to other infrastructures, and therefore, more research is required in terms of using GPUs
for spatio-temporal data analytics. We hope that the accumulated information in this study will be
useful for researchers, practitioners, and developers who are currently working or who want to
work in the area of spatio-temporal data analytics.

ACKNOWLEDGMENTS
The work of L. Torgo was undertaken, in part, thanks to funding from the Canada Research Chairs
program and NSERC.

REFERENCES

[1] Rifaat Abdalla. 2016. Evaluation of spatial analysis application for urban emergency management. SpringerPlus 5 (12

2016). https://doi.org/10.1186/s40064-016-3723-y

[2] David W. Adler. 2001. DB2 Spatial Extender - Spatial Data within the RDBMS. In Proceedings of the 27th International
Conference on Very Large Data Bases (VLDB ’01). Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 687–690.
[3] Sarthak Agarwal and K. Rajan. 2016. Performance analysis of MongoDB versus PostGIS/PostGreSQL databases
for line intersection and point containment spatial queries. Spatial Information Research 24 (11 2016), 671–677.
https://doi.org/10.1007/s41324-016-0059-1

[4] Ablimit Aji, Fusheng Wang, Hoang Vo, Rubao Lee, Qiaoling Liu, Xiaodong Zhang, and Joel Saltz. 2013. Hadoop-GIS:
A High Performance Spatial Data Warehousing System over MapReduce. The 39th International Conference on Very
Large Databases (VLDB’2013) 6, 11 (2013), 1009–1020.

[5] Md. Mahbub Alam. 2018. Parallel and In-Memory Big Spatial Data Processing Systems and Benchmarking. Master’s

thesis. Fredericton, NB, Canada.

[6] Md Mahbub Alam, Suprio Ray, and Virendra C. Bhavsar. 2018. A Performance Study of Big Spatial Data Systems. In
Proceedings of the 7th ACM SIGSPATIAL International Workshop on Analytics for Big Geospatial Data (Seattle, WA,
USA) (BigSpatial 2018). Association for Computing Machinery, New York, NY, USA, 1–9. https://doi.org/10.1145/
3282834.3282841

[7] Abdullah A. Alamoudi, Raman Grover, Michael J. Carey, and Vinayak Borkar. 2015. External Data Access And
Indexing In AsterixDB. In Proceedings of the 24th ACM International on Conference on Information and Knowledge
Management (Melbourne, Australia) (CIKM ’15). Association for Computing Machinery, New York, NY, USA, 3–12.
https://doi.org/10.1145/2806416.2806428

[8] Louai Alarabi. 2019. Summit: A Scalable System for Massive Trajectory Data Management. SIGSPATIAL Special 10, 3

(Jan. 2019), 2–3. https://doi.org/10.1145/3307599.3307601

[9] Louai Alarabi, Mohamed F. Mokbel, and Mashaal Musleh. 2018. ST-Hadoop: A MapReduce Framework for Spatio-

Temporal Data. Geoinformatica 22, 4 (Oct. 2018), 785–813. https://doi.org/10.1007/s10707-018-0325-6

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

34

Alam, et al.

[10] Harriet Alexander and Nick Moir. 2019. The monster: a short history of Australia’s biggest forest fire. The Sydney
Morning Herald (2019). https://www.smh.com.au/national/nsw/the-monster-a-short-history-of-australia-s-biggest-
forest-fire-20191218-p53l4y.html Accessed on December 20, 2020.

[11] Sattam Alsubaiee, Yasser Altowim, Hotham Altwaijry, Alexander Behm, Vinayak Borkar, Yingyi Bu, Michael Carey,
Inci Cetindil, Madhusudan Cheelangi, Khurram Faraaz, Eugenia Gabrielova, Raman Grover, Zachary Heilbron, Young-
Seok Kim, Chen Li, Guangqiang Li, Ji Mahn Ok, Nicola Onose, Pouria Pirzadeh, Vassilis Tsotras, Rares Vernica, Jian
Wen, and Till Westmann. 2014. AsterixDB: A Scalable, Open Source BDMS. Proc. VLDB Endow. 7, 14 (Oct. 2014),
1905–1916. https://doi.org/10.14778/2733085.2733096

[12] Sattam Alsubaiee, Alexander Behm, Vinayak Borkar, Zachary Heilbron, Young-Seok Kim, Michael J. Carey, Markus
Dreseler, and Chen Li. 2014. Storage Management in AsterixDB. Proc. VLDB Endow. 7, 10 (June 2014), 841–852.
https://doi.org/10.14778/2732951.2732958

[13] Amazon. 2020. Amazon Athena: A Serverless, Interactive Query Service. https://aws.amazon.com/athena/. Accessed

on December, 2020.

[14] Apache Software Foundation 2019. Apache Storm: An Open Source Distributed Real-time Data Stream Processing

Platform. https://storm.apache.org/. Accessed on December, 2020.

[15] Tim Appelhans, Florian Detsch, Christoph Reudenbach, and Stefan Woellauer. 2020. mapview: Interactive Viewing of

Spatial Data in R. https://CRAN.R-project.org/package=mapview R package version 2.7.8.

[16] Michael Armbrust, Reynold S. Xin, Cheng Lian, Yin Huai, Davies Liu, Joseph K. Bradley, Xiangrui Meng, Tomer Kaftan,
Michael J. Franklin, Ali Ghodsi, and Matei Zaharia. 2015. Spark SQL: Relational Data Processing in Spark. In Proceedings
of the 2015 ACM SIGMOD International Conference on Management of Data (Melbourne, Victoria, Australia) (SIGMOD
’15). Association for Computing Machinery, New York, NY, USA, 1383–1394. https://doi.org/10.1145/2723372.2742797
[17] Gowtham Atluri, Anuj Karpatne, and Vipin Kumar. 2018. Spatio-Temporal Data Mining: A Survey of Problems and

Methods. ACM Comput. Surv. 51, 4, Article 83 (Aug. 2018), 41 pages. https://doi.org/10.1145/3161602

[18] Furqan Baig, Hoang Vo, Tahsin Kurc, Joel Saltz, and Fusheng Wang. 2017. SparkGIS: Resource Aware Efficient In-
Memory Spatial Query Processing. In Proceedings of the 25th ACM SIGSPATIAL International Conference on Advances in
Geographic Information Systems (Redondo Beach, CA, USA) (SIGSPATIAL’17). Association for Computing Machinery,
New York, NY, USA, Article 28, 10 pages. https://doi.org/10.1145/3139958.3140019

[19] Mohamed Bakli, Mahmoud Sakr, and Taysir Hassan A. Soliman. 2019. HadoopTrajectory: A Hadoop Spatiotemporal
Data Processing Extension. Journal of Geographical Systems 21, 2 (June 2019), 211–235. https://doi.org/10.1007/s10109-
019-00292-

[20] Mohamed Bakli, Mahmoud Sakr, and Esteban Zimanyi. 2019. Distributed Moving Object Data Management in
MobilityDB. In Proceedings of the 8th ACM SIGSPATIAL International Workshop on Analytics for Big Geospatial Data
(Chicago, Illinois) (BigSpatial ’19). Association for Computing Machinery, New York, NY, USA, Article 1, 10 pages.
https://doi.org/10.1145/3356999.3365467

[21] Jie Bao, Ruiyuan Li, Xiuwen Yi, and Yu Zheng. 2016. Managing Massive Trajectories on the Cloud (SIGSPACIAL’16).
Association for Computing Machinery, New York, NY, USA, Article 41, 10 pages. https://doi.org/10.1145/2996913.
2996916

[22] E. Baralis, A. Dalla Valle, P. Garza, C. Rossi, and F. Scullino. 2017. SQL versus NoSQL databases for geospatial
applications. In 2017 IEEE International Conference on Big Data (Big Data). 3388–3397. https://doi.org/10.1109/BigData.
2017.8258324

[23] Dominik Bartoszewski, Adam Piorkowski, and Michal Lupa. 2019. The Comparison of Processing Efficiency of Spatial
Data for PostGIS and MongoDB Databases. In Beyond Databases, Architectures and Structures. Paving the Road to
Smart Data Processing and Analysis. Springer International Publishing, Cham, 291–302.

[24] Daniel Baumann. 2019.

sptemp: Python package for spatio-temporal vector data processing and analysis.

https://github.com/BaumannDaniel/sptemp. Accessed on December, 2020.

[25] P. Baumann, A. Dehmel, P. Furtado, R. Ritsch, and N. Widmann. 1998. The Multidimensional Database System

RasDaMan. SIGMOD Rec. 27, 2 (June 1998), 575–577. https://doi.org/10.1145/276305.276386

[26] Peter Baumann, Andreas Dehmel, Paula Furtado, Roland Ritsch, and Norbert Widmann. 1999. Spatio-Temporal
Retrieval with RasDaMan. In Proceedings of the 25th International Conference on Very Large Data Bases (VLDB ’99).
Morgan Kaufmann Publishers Inc., San Francisco, CA, USA, 746–749.

[27] Peter Baumann, Paula Furtado, Roland Ritsch, and Norbert Widmann. 1997. The RasDaMan Approach to Mul-
tidimensional Database Management. In Proceedings of the 1997 ACM Symposium on Applied Computing (San
Jose, California, USA) (SAC ’97). Association for Computing Machinery, New York, NY, USA, 166–173. https:
//doi.org/10.1145/331697.331732

[28] J. Becla, D. Zhang, M. Stonebraker, and P. Brown. 2013. SciDB: A Database Management System for Applications
with Complex Analytics. Computing in Science & Engineering 15, 03 (may 2013), 54–62. https://doi.org/10.1109/
MCSE.2013.19

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

35

[29] Stefan Behnel, Robert Bradshaw, Craig Citro, Lisandro Dalcin, Dag Sverre Seljebotn, and Kurt Smith. 2011. Cython:

The best of both worlds. Computing in Science & Engineering 13, 2 (2011), 31–39.

[30] V. Bhanumurthy, K. Ram Mohan Rao, G. Jai Sankar, and P. V. Nagamani. 2017. Spatial data integration for disas-

ter/emergency management: an Indian experience. Spatial Information Research 25 (2017), 303–314.

[31] V. Bhanumurthy, G. Jai Shankar, K. Ram Mohan Rao, and P.V. Nagamani. 2015. Defining a framework for integration
of geospatial technologies for emergency management. Geocarto International 30, 9 (2015), 963–983. https://doi.org/
10.1080/10106049.2015.1004132

[32] Bernd Bischl, Michel Lang, Lars Kotthoff, Julia Schiffner, Jakob Richter, Erich Studerus, Giuseppe Casalicchio, and
Zachary M. Jones. 2016. mlr: Machine Learning in R. Journal of Machine Learning Research 17, 170 (2016), 1–5.
http://jmlr.org/papers/v17/15-066.html

[33] Roger Bivand. 2019. rgrass7: Interface Between GRASS 7 Geographical Information System and R. https://CRAN.R-

project.org/package=rgrass7 R package version 0.2-1.

[34] Roger Bivand, Tim Keitt, and Barry Rowlingson. 2020. rgdal: Bindings for the ’Geospatial’ Data Abstraction Library.

https://CRAN.R-project.org/package=rgdal R package version 1.5-12.

[35] Bokeh Development Team. 2020. Bokeh: Python library for interactive visualization. https://bokeh.org/
[36] V. Borkar, M. Carey, R. Grover, Nicola Onose, and R. Vernica. 2011. Hyracks: A flexible and extensible foundation for

data-intensive computing. 2011 IEEE 27th International Conference on Data Engineering (2011), 1151–1162.

[37] M. B. Brahim, W. Drira, F. Filali, and N. Hamdi. 2016. Spatial data extension for Cassandra NoSQL database. Journal

of Big Data 3 (2016), 1–16.

[38] Alexander Brenning, Donovan Bangs, and Marc Becker. 2018. RSAGA: SAGA Geoprocessing and Terrain Analysis.

https://CRAN.R-project.org/package=RSAGA R package version 1.3.0.

[39] Alexander Brenning, Fabian Polakowski, and Marc Becker. 2018. RPyGeo: ArcGIS Geoprocessing via Python. https:

//CRAN.R-project.org/package=RPyGeo R package version 1.0.0.

[40] Paul G. Brown. 2010. Overview of SciDB: Large Scale Array Storage, Processing and Analysis. In Proceedings of
the 2010 ACM SIGMOD International Conference on Management of Data (Indianapolis, Indiana, USA) (SIGMOD ’10).
Association for Computing Machinery, New York, NY, USA, 963–968. https://doi.org/10.1145/1807167.1807271
[41] David Bucklin and Mathieu Basille. 2018. rpostgis: linking R with a PostGIS spatial database. The R Journal 10, 1

(2018), 251–268. https://journal.r-project.org/archive/2018/RJ-2018-025/index.html

[42] Jesinta Burton. 2020. ’It was a line of fire coming at us’: South West firefighters return home. Busselton-Dunsborough
https://www.busseltonmail.com.au/story/6620313/it-was-a-line-of-fire-coming-at-us-firefighters-

Mail (2020).
return-home/ February 7, 2020.

[43] Elasticsearch B.V. 2020. Elasticsearch: The heart of the free and open Elastic Stack. https://www.elastic.co/elasticsearch/.

Accessed on December, 2020.

[44] CARTO. 2020. CARTO: Unlock the power of spatial analysis. https://carto.com/. Accessed on October, 2020.
[45] João Pedro de Carvalho Castro, Anderson Chaves Carniel, and Cristina Dutra de Aguiar Ciferri. 2018. A User-centric
View of Distributed Spatial Data Management Systems. In Brazilian Symposium on Geoinformatics - GEOINFO.
MCTI/INPE.

[46] Yue Chen, Zhida Chen, Gao Cong, Ahmed R. Mahmood, and Walid G. Aref. 2020. SSTD: A Distributed System on
Streaming Spatio-Textual Data. Proc. VLDB Endow. 13, 12 (July 2020), 2284–2296. https://doi.org/10.14778/3407790.
3407825

[47] Joe Cheng, Bhaskar Karambelkar, and Yihui Xie. 2019. leaflet: Create Interactive Web Maps with the JavaScript ’Leaflet’

Library. https://CRAN.R-project.org/package=leaflet R package version 2.0.3.

[48] Chronicle Software 2021. Chronicle Map: A High Performance, Off-heap, Key-value, In-memory, Persisted Data Store.

https://github.com/OpenHFT/Chronicle-Map. Accessed on January, 2021.

[49] Google Cloud. 2020. Google BigQuery: Serverless, Highly Scalable, and Cost-effective Multi-cloud Data Warehouse.

https://cloud.google.com/bigquery. Accessed on December, 2020.

[50] Couchbase. 2011. GeoCouch: A Spatial Index for CouchDB. https://github.com/couchbase/geocouch. Accessed on

November, 2020.

[51] P. Cudre-Mauroux, H. Kimura, K.-T. Lim, J. Rogers, R. Simakov, E. Soroush, P. Velikhov, D. L. Wang, M. Balazinska, J.
Becla, D. DeWitt, B. Heath, D. Maier, S. Madden, J. Patel, M. Stonebraker, and S. Zdonik. 2009. A Demonstration of SciDB:
A Science-Oriented DBMS. Proc. VLDB Endow. 2, 2 (Aug. 2009), 1534–1537. https://doi.org/10.14778/1687553.1687584
[52] DASK Blog 2017. Fast GeoSpatial Analysis in Python. https://blog.dask.org/2017/09/21/accelerating-geopandas-1.

Last Accessed Nov, 2020.

[53] Dask Development Team. 2016. Dask: Library for Dynamic Task Scheduling. https://dask.org
[54] dask-geomodeling 2019. On-the-fly operations on geographical maps. https://dask-geomodeling.readthedocs.io/.

Last Accessed Nov, 2020.

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

36

Alam, et al.

[55] Citus Data. 2011. A distributed PostgreSQL as an extension for multi-tenant and real-time analytics workloads.

https://github.com/citusdata/citus. Accessed on October, 2020.

[56] Ali Davoudian, Liu Chen, and Mengchi Liu. 2018. A Survey on NoSQL Stores. ACM Comput. Surv. 51, 2, Article 40

(April 2018), 43 pages. https://doi.org/10.1145/3158661

[57] Damião de Almeida, Cláudio Baptista, Fabio Andrade, and Amilcar Soares. 2020. A Survey on Big Data for Trajectory
Analytics. ISPRS International Journal of Geo-Information 9 (02 2020), 88. https://doi.org/10.3390/ijgi9020088
[58] Jeffrey Dean and Sanjay Ghemawat. 2008. MapReduce: Simplified Data Processing on Large Clusters. Commun. ACM

51, 1 (Jan. 2008), 107–113. https://doi.org/10.1145/1327452.1327492

[59] Justyna Debicka and Stanislaw Szombara. 2018. Comparative Analysis of ArcGISs and QGIS in terms of the Transfor-
mations’ Runtime. Geoinformatica Polonica 17 (01 2018), 99–108. https://doi.org/10.4467/21995923GP.18.009.9639

[60] Jorge A. Delgado, Nicholas M. Short, Daniel P. Roberts, and Bruce Vandenberg. 2019. Big Data Analysis for Sustainable
Agriculture on a Geospatial Cloud Framework. Frontiers in Sustainable Food Systems 3 (2019), 54. https://doi.org/10.
3389/fsufs.2019.00054

[61] DeltaRho 2015. RHIPE: R and Hadoop Integrated Programming Environment. https://github.com/delta-rho/RHIPE.

Last Accessed June, 2020.

[62] Development Team. 2016. PySpark: Spark Python API. https://spark.apache.org/docs/latest/api/python/
[63] Xin Ding, Lu Chen, Yunjun Gao, Christian S. Jensen, and Hujun Bao. 2018. UlTraMan: A Unified Platform for Big
Trajectory Data Management and Analytics. 11, 7 (March 2018), 787–799. https://doi.org/10.14778/3192965.3192970
License.

GeoTrellis, Apache

contributors.

[64] Eclipse

2016.

2.0

Foundation, Azavea,
https://github.com/locationtech/geotrellis.

and

[65] Ahmed Eldawy, Mostafa Elganainy, Ammar Bakeer, Ahmed Abdelmotaleb, and Mohamed Mokbel. 2015. Sphinx:
Distributed Execution of Interactive SQL Queries on Big Spatial Data (SIGSPATIAL ’15). Association for Computing
Machinery, New York, NY, USA, Article 78, 4 pages. https://doi.org/10.1145/2820783.2820869

[66] Ahmed Eldawy, Mostafa Elganainy, Ammar Bakeer, Ahmed Abdelmotaleb, and Mohamed Mokbel. 2017. Sphinx:
Empowering Impala for Efficient Execution of SQL Queries on Big Spatial Data. In Advances in Spatial and Temporal
Databases. Springer International Publishing, Cham, 65–83.

[67] Ahmed Eldawy and Mohamed F. Mokbel. 2014. Pigeon: A Spatial MapReduce Language. 2014 IEEE 30th International

Conference on Data Engineering (2014), 1242–1245.

[68] Ahmed Eldawy and Mohamed F. Mokbel. 2015. SpatialHadoop: A MapReduce Framework for Spatial Data. In 31st
IEEE International Conference on Data Engineering, ICDE 2015, Seoul, South Korea, April 13-17, 2015. IEEE Computer
Society, 1352–1363. https://doi.org/10.1109/ICDE.2015.7113382

[69] Ahmed Eldawy and Mohamed F. Mokbel. 2016. The Era of Big Spatial Data: A Survey. 6, 3–4 (Dec. 2016), 163–273.

https://doi.org/10.1561/1900000054

[70] Jonathan Engélinus, Thierry Badard, and Éveline Bernier. 2019. Enabling Standard Geospatial Capabilities in Spark
for the Efficient Processing of Geospatial Big Data. In Geographical Information Systems Theory, Applications and
Management, Lemonia Ragia, Cédric Grueau, and Robert Laurini (Eds.). Springer International Publishing, Cham,
133–148.

[71] Jonathan Engélinus and Thierry Badard. 2018. Elcano: A Geospatial Big Data Processing System based on SparkSQL.

In GISTAM. 119–128. https://doi.org/10.5220/0006794601190128

[72] Martin Erwig, Ralf Hartmut Güting, Markus Schneider, and Michalis Vazirgiannis. 1999. Spatio-Temporal Data Types:

An Approach to Modeling and Querying Moving Objects in Databases. GeoInformatica 3 (1999), 269–296.

[73] ESRI. 2008. GIS for Sustainable Agriculture. GIS Best Practices (2008).
[74] ESRI. 2013. GIS Tools for Hadoop: Big Data Spatial Analytics for the Hadoop Framework. https://esri.github.io/gis-

tools-for-hadoop/. Accessed on October, 2020.

[75] ESRI. 2014. ESRI Geometry API. https://github.com/Esri/geometry-api-java. Accessed on October, 2020.
[76] ESRI 2019. GeoAnalytics Server: An Introduction. https://youtu.be/ajlA2dqTnF0. ESRI Developer Summit, 2019.
[77] ESRI. 2020. ArcGIS. https://www.arcgis.com/index.html. Accessed on June, 2020.
[78] ESRI 2020. Desktop GeoAnalytics: Geoprocessing in Parallel Using Apache Spark. https://youtu.be/Uq6ptTY5RMA.

ESRI Developer Summit, 2020.

[79] ESRI 2020. ESRI: Geographic Information System Company. https://www.esri.com/. Accessed on December, 2020.
[80] Michael R. Evans, Dev Oliver, KwangSoo Yang, Xun Zhou, Reem Y. Ali, and Shashi Shekhar. 2019. Enabling Spatial
Big Data via CyberGIS: Challenges and Opportunities. Springer Netherlands, Dordrecht, 143–170. https://doi.org/10.
1007/978-94-024-1531-5_8

[81] Yi Fang, Marc Friedman, Giri Nair, Michael Rys, and Ana-Elisa Schmid. 2008. Spatial Indexing in Microsoft SQL
Server 2008 (SIGMOD’08). Association for Computing Machinery, New York, NY, USA, 1207–1216. https://doi.org/10.
1145/1376616.1376737

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

37

[82] Ziquan Fang, Lu Chen, Yunjun Gao, Lu Pan, and Christian Jensen. 2021. Dragoon: a hybrid and efficient big trajectory
management system for offline and online analytics. The VLDB Journal (02 2021). https://doi.org/10.1007/s00778-
021-00652-x

[83] The Apache Software Foundation. [n.d.]. Apache Impala: An open Source, Native Analytic Database for Apache

Hadoop. https://impala.apache.org/. Accessed on October, 2020.

[84] The Apache Software Foundation. 2016. Apache Cassandra: Manage massive amounts of data, fast, without losing

sleep. https://cassandra.apache.org/. Accessed on June, 2020.

[85] The Apache Software Foundation. 2018.

Apache Spark: Lightning-fast Unified Analytics Engine.

http://spark.apache.org/. Accessed on June, 2020.

[86] The Apache Software Foundation. 2020. Apache Hadoop: An open-source software for reliable, scalable, distributed

computing. https://hadoop.apache.org/. Last Accessed June, 2020.

[87] The Apache Software Foundation. 2020. Apache HBase: The Hadoop database, a distributed, scalable, big data store.

https://hbase.apache.org/. Last Accessed June, 2020.

[88] The Apache Software Foundation. 2020. Apache Jena: A free and open source Java framework for building Semantic

Web and Linked Data applications. https://jena.apache.org/. Accessed on June, 2020.

[89] The Apache Software Foundation. 2020. CouchDB: An Open Source NoSQL Database. https://couchdb.apache.org/.

Accessed on October, 2020.

[90] The Apache Software Foundation. 2020. Hadoop Streaming API. https://hadoop.apache.org/docs/r1.2.1/streaming.html.

Last Accessed June, 2020.

[91] A. Fox, C. Eichelberger, J. Hughes, and S. Lyon. 2013. Spatio-temporal indexing in non-relational distributed databases.

In 2013 IEEE International Conference on Big Data. 291–299.

[92] Ellen Friedman and Kostas Tzoumas. 2016. Introduction to Apache Flink: Stream Processing for Real Time and Beyond

(1st ed.). O’Reilly Media, Inc.

[93] Alessandro Furieri. 2020.

SpatiaLite: An Open-source Spatial Extension of SQLite.

https://www.gaia-

gis.it/fossil/libspatialite/index. Accesses on December, 2020.

[94] Francisco García-García, Antonio Corral, Luis Iribarne, George Mavrommatis, and Michael Vassilakopoulos. 2017. A
Comparison of Distributed Spatial Data Management Systems for Processing Distance Join Queries. In Advances in
Databases and Information Systems, M¯ar¯ıte Kirikova, Kjetil Nørvåg, and George A. Papadopoulos (Eds.). Springer
International Publishing, Cham, 214–228.

[95] Nandani Garg and Sayan Ranu. 2018. Route Recommendations for Idle Taxi Drivers: Find Me the Shortest Route
to a Customer!. In Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data
Mining (London, United Kingdom) (KDD ’18). Association for Computing Machinery, New York, NY, USA, 1425–1434.
https://doi.org/10.1145/3219819.3220055

[96] GDAL/OGR contributors. 2020. GDAL/OGR Geospatial Data Abstraction Software Library. Open Source Geospatial

Foundation. https://gdal.org

[97] Team GeoPandas. 2013-2019. GeoPandas: Python Tools for Geographic Data. https://geopandas.org/
[98] Felix Gessert, Wolfram Wingerath, Steffen Friedrich, and Norbert Ritter. 2017. NoSQL Database Systems: A Survey
and Decision Guidance. Comput. Sci. 32, 3–4 (July 2017), 353–365. https://doi.org/10.1007/s00450-016-0334-3
[99] Sean Gillies. 2011. Fiona: Reads and Writes Geographic Data Files. The Toblerity Project. https://fiona.readthedocs.io/
[100] Google. 2019. S2 Geometry Library. http://s2geometry.io/. Accessed on December, 2020.
[101] Noel Gorelick, Matt Hancher, Mike Dixon, Simon Ilyushchenko, David Thau, and Rebecca Moore. 2017. Google
Earth Engine: Planetary-scale Geospatial Analysis for Everyone. Remote Sensing of Environment (07 2017). https:
//doi.org/10.1016/j.rse.2017.06.031

[102] Anita Graser. 2019. MovingPandas: Efficient Structures for Movement Data in Python. Journal of Geographic

Information Science 1 (06 2019), 54–68. https://doi.org/10.1553/giscience2019_01_s54

[103] GRASS Development Team. 2017. Geographic Resources Analysis Support System (GRASS GIS) Software, Version 7.2.

Open Source Geospatial Foundation. http://grass.osgeo.org

[104] Matthew Green. 2020. Australia’s massive fires could become routine, climate scientists warn.

Reuters
(2020). https://www.reuters.com/article/us-climate-change-australia-report/australias-massive-fires-could-become-
routine-climate-scientists-warn-idUSKBN1ZD06W Accessed on October, 2020.

[105] R. Grisso, M. M. Alley, P. McClellan, D. Brann, and S. Donohue. 2005. Precision Farming. A Comprehensive Approach.
[106] Manuel Grizonnet, Julien Michel, Victor Poughon, Jordi Inglada, Mickaël Savinaud, and Rémi Cresson. 2017. Orfeo
ToolBox: Open source processing of remote sensing images. Open Geospatial Data, Software and Standards 2, 1 (2017),
15.

[107] Benedikt Gräler, Edzer Pebesma, and Gerard Heuvelink. 2016. Spatio-Temporal Interpolation using gstat. The R

Journal 8 (2016), 204–218. Issue 1. https://journal.r-project.org/archive/2016/RJ-2016-014/index.html

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

38

Alam, et al.

[108] Dongming Guo and Erling Onstein. 2020. State-of-the-Art Geospatial Information Processing in NoSQL Databases.

ISPRS International Journal of Geo-Information 9, 5 (2020). https://doi.org/10.3390/ijgi9050331

[109] Ralf Hartmut Güting, Thomas Behr, and Christian Düntgen. 2010. SECONDO: A Platform for Moving Objects
Database Research and for Publishing and Integrating Research Implementations. IEEE Data Eng. Bull. 33, 2 (2010),
56–63. http://sites.computer.org/debull/A10june/secondo.pdf

[110] Ralf Hartmut Güting and Jiamin Lu. 2015. Parallel SECONDO: Scalable Query Processing in the Cloud for Non-
Standard Applications. SIGSPATIAL Special 6, 2 (March 2015), 3–10. https://doi.org/10.1145/2744700.2744701
[111] S. Hagedorn, P. Götze, and K. Sattler. 2017. Big Spatial Data Processing Frameworks: Feature and Performance

Evaluation. In EDBT.

[112] Stefan Hagedorn, Philipp Götze, and Kai-Uwe Sattler. 2017. The STARK Framework for Spatio-Temporal Data
Analytics on Spark. In Datenbanksysteme für Business, Technologie und Web (BTW 2017), 17. Fachtagung des GI-
Fachbereichs „Datenbanken und Informationssysteme" (DBIS), 6.-10. März 2017, Stuttgart, Germany, Proceedings (LNI,
Vol. P-265). GI, 123–142. https://dl.gi.de/20.500.12116/679

[113] David Haynes, Philip Mitchell, and Eric Shook. 2020. Developing the Raster Big Data Benchmark: A Comparison
ISPRS International Journal of Geo-Information 9, 11 (2020). https:

of Raster Analysis on Big Data Platforms.
//doi.org/10.3390/ijgi9110690

[114] David Haynes, Suprio Ray, Steven M. Manson, and Ankit Soni. 2015. High Performance Analysis of Big Spatial Data.
In Proceedings of the 2015 IEEE International Conference on Big Data (Big Data) (BIG DATA’15). IEEE Computer Society,
USA, 1953–1957. https://doi.org/10.1109/BigData.2015.7363974

[115] Robert J. Hijmans. 2020. terra: Spatial Data Analysis. https://CRAN.R-project.org/package=terra R package version

0.7-11.

[116] Robert J. Hijmans and Jacob van Etten. 2012. raster: Geographic analysis and modeling with raster data. http://CRAN.R-

project.org/package=raster R package version 2.0-12.

[117] S. Hoyer and J. Hamman. 2017. XArray: N-D Labeled Arrays and Datasets in Python. Journal of Open Research

Software 5, 1 (2017). https://doi.org/10.5334/jors.148

[118] Xuegang Huang. 2009. Supporting Location-Based Services in Spatial Network Databases.

IGI Global, 316–324.

http://doi:10.4018/978-1-60566-242-8.ch035

[119] James N. Hughes, Andrew Annex, Christopher N. Eichelberger, Anthony Fox, Andrew Hulbert, and Michael Ronquest.
2015. GeoMesa: a distributed architecture for spatio-temporal fusion. In Geospatial Informatics, Fusion, and Motion
Video Analytics V, Matthew F. Pellechia, Kannappan Palaniappan, Peter J. Doucette, Shiloh L. Dockstader, Gunasekaran
Seetharaman, and Paul B. Deignan (Eds.), Vol. 9473. International Society for Optics and Photonics, SPIE, 128 – 140.
https://doi.org/10.1117/12.2177233

[120] A. Hulbert, T. Kunicki, J. N. Hughes, A. D. Fox, and C. N. Eichelberger. 2016. An experimental study of big spatial

data systems. In 2016 IEEE International Conference on Big Data (Big Data). 2664–2671.

[121] J. D. Hunter. 2007. Matplotlib: A 2D Graphics Environment. Computing in Science & Engineering 9, 3 (2007), 90–95.

https://doi.org/10.1109/MCSE.2007.55

[122] MongoDB Inc. 2020. MongoDB Geospatial Queries. https://docs.mongodb.com/manual/geospatial-queries/. Accessed

on December, 2020.

[123] Neo4j Inc. 2020. Neo4j: Graphs for Everyone. https://neo4j.com/. Accessed on November, 2020.
[124] Stratio Big Data Inc. 2018. Lucene based secondary indexes for Cassandra. https://github.com/Stratio/cassandra-

lucene-index. 2020.

[125] Steven Johnson. 2007. A guided tour of the Ghost Map. https://youtu.be/KvHL0dHj3RM/. Accessed on June, 2020.
[126] Andre Josefsson. 2018. Comparing the performance of relational and document databases for hierarchical geospatial

data. Master’s thesis. KTH Royal Institute of Technology, Stockholm, Sweden.

[127] David Kahle and Hadley Wickham. 2013. ggmap: Spatial Visualization with ggplot2. The R Journal 5, 1 (2013), 144–161.

https://journal.r-project.org/archive/2013-1/kahle-wickham.pdf

[128] Yuvraj Sing Kanwar. 2019. Benchmarking Scalability of NoSQL Databases for Geospatial Queries. Master’s thesis. San

Jose State University, San Jose, USA. https://doi.org/10.31979/etd.azm5-7asx

[129] Saadia Karim, Tariq Soomro, and S.M.Aqil Burney. 2018. Spatiotemporal Aspects of Big Data. Applied Computer

Systems 23 (12 2018), 90–100. https://doi.org/10.2478/acss-2018-0012

[130] S. Kim and Y. S. Kanwar. 2019. GeoYCSB: A Benchmark Framework for the Performance and Scalability Evaluation of
NoSQL Databases for Geospatial Workloads. In 2019 IEEE International Conference on Big Data (Big Data). 3666–3675.
https://doi.org/10.1109/BigData47090.2019.9005570

[131] Slava Kisilevich, Florian Mansmann, Mirco Nanni, and Salvatore Rinzivillo. 2010. Spatio-temporal Clustering. Springer

US, Boston, MA, 855–874. https://doi.org/10.1007/978-0-387-09823-4_44

[132] M. Kornacker, A. Behm, V. Bittorf, T. Bobrovytsky, C. Ching, A. Choi, J. Erickson, M. Grund, D. Hecht, M. Jacobs,
I. Joshi, L. Kuff, D. Kumar, A. Leblang, N. Li, I. Pandis, H. Robinson, D. Rorke, S. Rus, J. Russell, D. Tsirogiannis, S.

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

39

Wanderman-Milne, and M. Yoder. 2015. Impala: A Modern, Open-Source SQL Engine for Hadoop. In CIDR’15.
[133] Alexande Korotkov. 2019. Viva, the NoSQL Postgres, PGCon-2019. https://youtu.be/70dBszaO67Af. Accessed on

October, 2020.

[134] Keith Kraus. 2019. High-Performance Data Science at Scale with RAPIDS, Dask, and GPUs, PyData NYC 2019.

https://youtu.be/jjtUgsOwkl0s. Accessed on December, 2020.

[135] Max Kuhn. 2008. Building Predictive Models in R Using the caret Package. Journal of Statistical Software, Articles 28,

5 (2008), 1–26. https://doi.org/10.18637/jss.v028.i05

[136] Dymaxion

Read
https://github.com/dymaxionlabs/dask-rasterio. Accessed on November, 2020.

and write

rasters

Labs.

2018.

parallel

in

using Rasterio

and Dask.

[137] Eduardo Lacerda. 2020. Long list of Geospatial Tools and Resources. https://github.com/sacridini/Awesome-Geospatial.

Accessed on December, 2020.

[138] Michel Lang, Martin Binder, Jakob Richter, Patrick Schratz, Florian Pfisterer, Stefan Coors, Quay Au, Giuseppe
Casalicchio, Lars Kotthoff, and Bernd Bischl. 2019. mlr3: A Modern Object-oriented Machine Learning Framework in
R. Journal of Open Source Software (dec 2019). https://doi.org/10.21105/joss.01903

[139] Heesu Lee. [n.d.]. Bushfires Release Over Half Australia’s Annual Carbon Emissions. Time, United States ([n. d.]).

https://time.com/5754990/australia-carbon-emissions-fires/ January 3, 2020.

[140] Simone Leo and Gianluigi Zanetti. 2010. Pydoop: A Python MapReduce and HDFS API for Hadoop. In Proceedings of
the 19th ACM International Symposium on High Performance Distributed Computing (Chicago, Illinois) (HPDC’10).
ACM, New York, NY, USA, 819–825. https://doi.org/10.1145/1851476.1851594

[141] S. T. Leutenegger, M. A. Lopez, and J. Edgington. 1997. STR: a simple and efficient algorithm for R-tree packing. In
Proceedings 13th International Conference on Data Engineering. 497–506. https://doi.org/10.1109/ICDE.1997.582015
[142] R. Li, H. He, R. Wang, Y. Huang, J. Liu, S. Ruan, T. He, J. Bao, and Y. Zheng. 2020. JUST: JD Urban Spatio-Temporal

Data Engine. In 2020 IEEE 36th International Conference on Data Engineering (ICDE). 1558–1569.

[143] R. Li, H. He, R. Wang, S. Ruan, Y. Sui, J. Bao, and Y. Zheng. 2020. TrajMesa: A Distributed NoSQL Storage Engine
for Big Trajectory Data. In 2020 IEEE 36th International Conference on Data Engineering (ICDE). 2002–2005. https:
//doi.org/10.1109/ICDE48307.2020.00224

[144] LocationTech. 2016. Spatial4j: A Geospatial Library for Java. https://github.com/locationtech/spatial4j. Accessed on

December, 2020.

[145] LocationTech. 2019. Apache GeoMesa. https://www.geomesa.org/. Last Accessed June, 2020.
[146] LocationTech. 2020.

JTS: A Java Topology Suite for Creating and Manipulating Vector Geometry.

https://github.com/locationtech/jts. Accessed on December, 2020.

[147] Robin Lovelace, Jakub Nowosad, and Jannes Muenchow. 2019. Geocomputation with R. CRC Press.
[148] Javier Luraschi, Kevin Kuo, Kevin Ushey, JJ Allaire, Hossein Falaki, Lu Wang, Andy Zhang, Yitao Li, and The Apache
Software Foundation. 2020. sparklyr: R Interface to Apache Spark. https://CRAN.R-project.org/package=sparklyr R
package version 1.3.1.

[149] Soufiane Maguerra, Azedine Boulmakoul, Lamia Karim, and Badir Hassan. 2018. A Survey on Solutions for Big
Spatio-Temporal Data Processing and Analytics. In 7th International Conference on Innovation and New Trends in
Information Systems. 127–140.

[150] Ahmed R. Mahmood. 2018. SRC: Tornado: A Distributed Spatio-Textual Stream Processing System. SIGSPATIAL

Special 9, 3 (Jan. 2018), 8–9. https://doi.org/10.1145/3178392.3178397

[151] Ahmed R. Mahmood, Ahmed M. Aly, Thamir Qadah, El Kindi Rezig, Anas Daghistani, Amgad Madkour, Ahmed S.
Abdelhamid, Mohamed S. Hassan, Walid G. Aref, and Saleh Basalamah. 2015. Tornado: A Distributed Spatio-Textual
Stream Processing System. Proc. VLDB Endow. 8, 12 (Aug. 2015), 2020–2023. https://doi.org/10.14778/2824032.2824126
[152] Antonios Makris, K. Tserpes, G. Spiliopoulos, and D. Anagnostopoulos. 2019. Performance Evaluation of MongoDB

and PostgreSQL for Spatio-temporal Data. In EDBT/ICDT Workshops.

[153] Yasuko Matsubara, Yasushi Sakurai, Willem G. van Panhuis, and Christos Faloutsos. 2014. FUNNEL: Automatic
Mining of Spatially Coevolving Epidemics. In Proceedings of the 20th ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining (New York, New York, USA) (KDD ’14). Association for Computing Machinery,
New York, NY, USA, 105–114. https://doi.org/10.1145/2623330.2623624

[154] P. Memarzia, M. Patrou, M. M. Alam, S. Ray, V. C. Bhavsar, and K. B. Kent. 2019. Toward Efficient Processing of
Spatio-Temporal Workloads in a Distributed In-Memory System. In 2019 20th IEEE International Conference on Mobile
Data Management (MDM). 118–127.

[155] Met Office. 2010 - 2015. Cartopy: A Cartographic Python Library with a Matplotlib Interface. Exeter, Devon. https:

//scitools.org.uk/cartopy

[156] Hanna Meyer. 2020. CAST: ’caret’ Applications for Spatial-Temporal Models. https://CRAN.R-project.org/package=

CAST R package version 0.4.2.

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

40

Alam, et al.

[157] Bruce Momjian. 2020. The Future of Postgres Sharding. https://momjian.us/main/writings/pgsql/sharding.pdf.

Accessed on October, 2020.

[158] Jannes Muenchow, Patrick Schratz, and Alexander Brenning. 2017. RQGIS: Integrating R with QGIS for Statistical

Geocomputing. The R Journal 9, 2 (2017), 409–428. https://doi.org/10.32614/RJ-2017-067

[159] MySQL. 2020. MySQL 8.0 Reference Manual. https://dev.mysql.com/doc/refman/8.0/en/
[160] Jan Kristof Nidzwetzki and Ralf Hartmut Güting. 2015. Distributed SECONDO: A Highly Available and Scalable
System for Spatial Data Processing. In Advances in Spatial and Temporal Databases. Springer International Publishing,
Cham, 491–496.

[161] Jan Kristof Nidzwetzki and Ralf Hartmut Güting. 2017. Distributed Secondo: An Extensible and Scalable Database
Management System. Distrib. Parallel Databases 35, 3–4 (Dec. 2017), 197–248. https://doi.org/10.1007/s10619-017-
7198-9

[162] Jan Kristof Nidzwetzki and Ralf Hartmut Güting. 2018. BBoxDB - A Scalable Data Store for Multi-Dimensional Big
Data. In Proceedings of the 27th ACM International Conference on Information and Knowledge Management (Torino,
Italy) (CIKM’18). ACM, New York, NY, USA, 1867–1870. https://doi.org/10.1145/3269206.3269208

[163] J. K. Nidzwetzki and R. H. Güting. 2019. Demo Paper: Large Scale Spatial Data Processing With User Defined Filters

In BBoxDB. In 2019 IEEE International Conference on Big Data (Big Data). 4125–4128.

[164] Panagiotis Nikitopoulos, Akrivi Vlachou, Christos Doulkeridis, and George A. Vouros. 2018. DiStRDF: Distributed

Spatio-temporal RDF Queries on Spark. In EDBT/ICDT Workshops.

[165] S. Nishimura, S. Das, D. Agrawal, and A. E. Abbadi. 2011. MD-HBase: A Scalable Multi-dimensional Data Infrastructure

for Location Aware Services. In 2011 IEEE 12th International Conference on Mobile Data Management, Vol. 1. 7–16.

[166] Shadi A. Noghabi, Kartik Paramasivam, Yi Pan, Navina Ramesh, Jon Bringhurst, Indranil Gupta, and Roy H. Campbell.
2017. Samza: Stateful Scalable Stream Processing at LinkedIn. Proc. VLDB Endow. 10, 12 (Aug. 2017), 1634–1645.
https://doi.org/10.14778/3137765.3137770

[167] OGC. 2010. OGC Simple Feature Access - Part 2: SQL. https://www.ogc.org/standards/sfs. Last Accessed June, 2020.
[168] Christopher Olston, Benjamin Reed, Utkarsh Srivastava, Ravi Kumar, and Andrew Tomkins. 2008. Pig Latin: A
Not-so-Foreign Language for Data Processing. In Proceedings of the 2008 ACM SIGMOD International Conference on
Management of Data (Vancouver, Canada) (SIGMOD’08). Association for Computing Machinery, New York, NY, USA,
1099–1110. https://doi.org/10.1145/1376616.1376726

[169] Patrick O’Neil, Edward Cheng, Dieter Gawlick, and Elizabeth O’Neil. 1996. The Log-Structured Merge-Tree (LSM-Tree).

Acta Inf. 33, 4 (June 1996), 351–385. https://doi.org/10.1007/s002360050048

[170] Oracle. [n.d.]. Oracle R Connector for Hadoop(ORCH). https://docs.oracle.com/cd/E36174_01/doc.11/e36049/orch.htm.

Last Accessed June, 2020.

[171] Oracle. 2019. SQL for Oracle NoSQL Database (v19.10).
[172] OSGeo. 2020. GEOS - Geometry Engine, Open Source. https://trac.osgeo.org/geos.
[173] OSGeo 2020. OSGeo Geospatial Libraries. https://www.osgeo.org/choose-a-project/development/libraries/. Last

Accessed June, 2020.

[174] OSGeo. 2020. PostGIS: Spatial and Geographic objects for PostgreSQL. https://postgis.net/. Accessed on October,

2020.

[175] N. P. More, V. B. Nikam, and S. S. Sen. 2018. Experimental Survey of Geospatial Big Data Platforms. In 2018 IEEE 25th

International Conference on High Performance Computing Workshops (HiPCW). 137–143.

[176] The pandas development team. 2020. pandas-dev/pandas: Pandas. https://doi.org/10.5281/zenodo.3509134
[177] Varun Pandey, Andreas Kipf, Thomas Neumann, and Alfons Kemper. 2018. How Good Are Modern Spatial Analytics

Systems? Proc. VLDB Endow. 11, 11 (July 2018), 1661–1673. https://doi.org/10.14778/3236187.3236213

[178] Varun Pandey, Alexander van Renen, Andreas Kipf, and Alfons Kemper. 2020. How Good Are Modern Spatial

Libraries? Data Science and Engineering (DSE) (2020). https://doi.org/10.1007/s41019-020-00147-9

[179] Maria Patrou, Md Mahbub Alam, Puya Memarzia, Suprio Ray, Virendra C. Bhavsar, Kenneth B. Kent, and Gerhard W.
Dueck. 2018. DISTIL: A Distributed in-Memory Data Processing System for Location-Based Services. In Proceedings
of the 26th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems (Seattle,
Washington) (SIGSPATIAL’18). Association for Computing Machinery, New York, NY, USA, 496–499. https://doi.org/
10.1145/3274895.3274961

[180] Edzer Pebesma. 2012. spacetime: Spatio-Temporal Data in R. Journal of Statistical Software 51, 7 (2012), 1–30.

http://www.jstatsoft.org/v51/i07/

[181] Edzer Pebesma. 2018. Simple Features for R: Standardized Support for Spatial Vector Data. The R Journal 10, 1 (2018),

439–446. https://doi.org/10.32614/RJ-2018-009

[182] Edzer Pebesma. 2020. stars: Spatiotemporal Arrays, Raster and Vector Data Cubes. https://CRAN.R-project.org/

package=stars R package version 0.4-3.

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

41

[183] Edzer Pebesma, Benedikt Klus, and Mehdi Moradi. 2020.

trajectories: Classes and Methods for Trajectory Data.

https://CRAN.R-project.org/package=trajectories R package version 0.2-2.

[184] Edzer J. Pebesma and Roger S. Bivand. 2005. Classes and methods for spatial data in R. R News 5, 2 (November 2005),

9–13. https://CRAN.R-project.org/doc/Rnews/

[185] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V.
Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-learn:
Machine Learning in Python. Journal of Machine Learning Research 12 (2011), 2825–2830.

[186] Nikos Pelekis, Babis Theodoulidis, Ioannis Kopanakis, and Yannis Theodoridis. 2004. Literature Review of Spatio-
Temporal Database Models. Knowl. Eng. Rev. 19, 3 (Sept. 2004), 235–274. https://doi.org/10.1017/S026988890400013X
[187] Oscar Perpiñán and Robert Hijmans. 2020. rasterVis. http://oscarperpinan.github.io/rastervis/ R package version

0.48.

[188] Matthew T. Perry. 2015. rasterstats: Summary statistics of geospatial raster datasets. https://pythonhosted.org/

rasterstats/

[189] Pgpool Team 2013. Pgpool-II: A middleware that works between PostgreSQL servers and a PostgreSQL database

client. https://wiki.postgresql.org/wiki/Pgpool-II. Accessed on June, 2020.

[190] PyQGIS [n.d.]. PyQGIS API. https://qgis.org/api/. Last Accessed June, 2020.
[191] QGIS Development Team. 2020. QGIS: A Free and Open Source Geographic Information System. QGIS Association.

https://www.qgis.org

[192] Jiwei Qin, Liangli Ma, and Jinghua Niu. 2019. THBase: A Coprocessor-Based Scheme for Big Trajectory Data

Management. Future Internet 11, 1 (2019). https://doi.org/10.3390/fi11010010

[193] Meng Qu, Hengshu Zhu, Junming Liu, Guannan Liu, and Hui Xiong. 2014. A Cost-Effective Recommender System
for Taxi Drivers. In Proceedings of the 20th ACM SIGKDD International Conference on Knowledge Discovery and Data
Mining (New York, New York, USA) (KDD ’14). Association for Computing Machinery, New York, NY, USA, 45–54.
https://doi.org/10.1145/2623330.2623668

[194] R Core Team. 2020. R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing,

Vienna, Austria. https://www.R-project.org/

[195] Paul Ramsey. 2019. Parallel PostGIS 3.0 and PostgreSQL 12. http://blog.cleverelephant.ca/2019/05/parallel-postgis-

4.html. Accessed on October, 2020.

[196] Suprio Ray, Bogdan Simion, Angela Demke Brown, and Ryan Johnson. 2013. A Parallel Spatial Data Analysis
Infrastructure for the Cloud. In Proceedings of the 21st ACM SIGSPATIAL International Conference on Advances in
Geographic Information Systems (Orlando, Florida) (SIGSPATIAL’13). Association for Computing Machinery, New
York, NY, USA, 284–293. https://doi.org/10.1145/2525314.2525347

[197] RedisLabs 2020. Redis: An in-memory database that persists on disk. https://redis.io/. Accessed on June, 2020.
[198] RedisLabs 2020. Redis Geospatial Support. https://redislabs.com/redis-best-practices/indexing-patterns/geospatial/.

2020.

[199] Data Reply. 2017. Benchmarking of Big Data Technologies for Ingesting and Querying Geospatial Datasets. (2017).
[200] Sergio Rey, Luc Anselin, Xun Li, Robert Pahle, Jason Laura, Wenwen Li, and Julia Koschinsky. 2015. Open Geospatial
Analytics with PySAL. ISPRS International Journal of Geo-Information 4, 2 (May 2015), 815–836. https://doi.org/10.
3390/ijgi4020815

[201] Sergio J. Rey and Luc Anselin. 2007. PySAL: A Python Library of Spatial Analytical Methods. The Review of Regional

Studies 37, 1 (2007), 5–27.

[202] RHadoop 2011. RHadoop. https://github.com/RevolutionAnalytics/RHadoop. Last Accessed June, 2020.
[203] David S. Rosenberg. 2012. HadoopStreaming: Utilities for using R scripts in Hadoop streaming. https://CRAN.R-

project.org/package=HadoopStreaming R package version 0.2.

[204] S. Ruan, R. Li, J. Bao, T. He, and Y. Zheng. 2018. CloudTP: A Cloud-Based Flexible Trajectory Preprocessing Framework.
In 2018 IEEE 34th International Conference on Data Engineering (ICDE). 1601–1604. https://doi.org/10.1109/ICDE.2018.
00186

[205] Jeffrey A. Ryan and Joshua M. Ulrich. 2020. xts: eXtensible Time Series. https://CRAN.R-project.org/package=xts R

package version 0.12-0.

[206] Henk Scholten, Steven Fruijtier, Arta Dilo, and Erik Borkulo. 2008. Spatial Data Infrastructure for Emergency Response

in Netherlands. 179–197. https://doi.org/10.1007/978-3-540-79259-8_11

[207] Skipper Seabold and Josef Perktold. 2010. statsmodels: Econometric and Statistical Modeling with Python. In 9th

Python in Science Conference.

[208] Team Seaborn. 2017. mwaskom/seaborn: v0.8.1 (September 2017). https://doi.org/10.5281/zenodo.883859
[209] Salman Ahmed Shaikh, Komal Mariam, Hiroyuki Kitagawa, and Kyoung-Sook Kim. 2020. GeoFlink: A Distributed
and Scalable Framework for the Real-Time Processing of Spatial Streams (CIKM ’20). Association for Computing
Machinery, New York, NY, USA, 8 pages. https://doi.org/10.1145/3340531.3412761

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

42

Alam, et al.

[210] Zeyuan Shang, Guoliang Li, and Zhifeng Bao. 2018. DITA: A Distributed In-Memory Trajectory Analytics System. In
Proceedings of the 2018 International Conference on Management of Data (Houston, TX, USA) (SIGMOD ’18). Association
for Computing Machinery, New York, NY, USA, 1681–1684. https://doi.org/10.1145/3183713.3193553

[211] Team Shapely. 2013. Shapely: Manipulation and Analysis of Geometric Objects in the Cartesian Plane. The Toblerity

Project. https://shapely.readthedocs.io/

[212] Shashi Shekhar, Zhe Jiang, Reem Y. Ali, Emre Eftelioglu, Xun Tang, Venkata M. V. Gunturi, and Xun Zhou. 2015.
Spatiotemporal Data Mining: A Computational Perspective. ISPRS International Journal of Geo-Information 4, 4 (2015),
2306–2338. https://doi.org/10.3390/ijgi4042306

[213] Justin Shenk and Rüdiger Busche. 2019. justinshenk/traja: v0.1.1. https://doi.org/10.5281/zenodo.3237827
[214] Konstantin Shvachko, Hairong Kuang, Sanjay Radia, and Robert Chansler. 2010. The Hadoop Distributed File System.
In Proceedings of the 2010 IEEE 26th Symposium on Mass Storage Systems and Technologies (MSST) (MSST’10). IEEE
Computer Society, USA, 1–10. https://doi.org/10.1109/MSST.2010.5496972

[215] Carson Sievert. 2020. Interactive Web-Based Data Visualization with R, plotly, and shiny. Chapman and Hall/CRC.

https://plotly-r.com

[216] Julia Signell. 2020. Parallel GeoPandas with DASK. https://github.com/jsignell/dask-geopandas. Last Accessed Nov,

2020.

[217] John Snow Society. [n.d.].

John Snow: The Pioneer of Epidemiological Method and Celebrated AnaesthetistS.

http://www.johnsnowsociety.org/. Accessed on June, 2020.

[218] Ram Sriharsha. 2017. Magellan: Geospatial Data Analytics on Spark. https://github.com/harsha2010/magellan.

Accessed on June, 2020.

[219] Knut Stolze. 2003. SQL/MM Spatial: The Standard to Manage Spatial Data in Relational Database Systems. In BTW
2003 – Datenbanksysteme für Business, Technologie und Web, Tagungsband der 10. BTW Konferenz, Gerhard Weikum,
Harald Schöning, and Erhard Rahm (Eds.). Gesellschaft für Informatik e.V., Bonn, 247–264.

[220] Michael Stonebraker, Paul Brown, Alex Poliakov, and Suchi Raman. 2011. The Architecture of SciDB. In Proceedings
of the 23rd International Conference on Scientific and Statistical Database Management (Portland, OR) (SSDBM’11).
Springer-Verlag, Berlin, Heidelberg, 1–16.

[221] Rob Story. 2013. Folium: Python data, leaflet.js maps. https://python-visualization.github.io/folium/
[222] Carlo Strozzi. 2010. NoSQL: A Non-SQL RDBMS. http://www.strozzi.it/cgi-bin/CSA/tw7/I/en_US/nosql/Home-Page.

Accessed on June, 2020.

[223] Dain Sundstrom. 2020. LevelDB Java Version. https://github.com/dain/leveldb. Last Accessed June, 2020.
[224] Mingjie Tang, Yongyang Yu, Walid G. Aref, Ahmed R. Mahmood, Qutaibah M. Malluhi, and Mourad Ouzzani.
2019. LocationSpark: In-memory Distributed Spatial Query Processing and Optimization. arXiv e-prints, Article
arXiv:1907.03736 (July 2019), arXiv:1907.03736 pages. arXiv:1907.03736 [cs.DB]

[225] Mingjie Tang, Yongyang Yu, Qutaibah M. Malluhi, Mourad Ouzzani, and Walid G. Aref. 2016. LocationSpark: A
Distributed in-Memory Data Management System for Big Spatial Data. Proc. VLDB Endow. 9, 13 (Sept. 2016), 1565–1568.
https://doi.org/10.14778/3007263.3007310

[226] Couchbase Team. 2011. Couchbase: A Distributed NoSQL Document Database. https://www.couchbase.com/.

Accessed On October, 2020.

[227] H2 Team. 2019. H2 Database Engine. http://www.h2database.com/. Last Accessed June, 2020.
[228] Neo4j Developer Team. 2019. Neo4j Spatial: A library for Neo4j to facilitates spatial operations on data.

https://github.com/neo4j-contrib/spatial/. Accessed on November, 2020.

[229] OracleSpatial Team. 2020. Oracle Spatial and Graph Features. https://www.oracle.com/database/technologies/spatialandgraph.html.

Accessed on December, 2020.

[230] PL/Proxy Team. 2020. PL/Proxy: Function-based sharding for PostgreSQL. https://plproxy.github.io/. Accessed on

October, 2020.

[231] Postgres-XL Team. 2018.

Postgres-XL: Scalable Open Source PostgreSQL-based Database Cluster.

https://www.postgres-xl.org/. Accessed on October, 2020.

[232] Rasterio Team. 2018. Rasterio: Access to Geospatial Raster Data. https://github.com/mapbox/rasterio/
[233] RAPIDS Development Team. 2018. RAPIDS: Collection of Libraries for End to End GPU Data Science. https://rapids.ai
[234] SAGA Team. 2001. SAGA: System for Automated Geoscientific Analyses. http://www.saga-gis.org/. Accessed on

June, 2020.

[235] SPARQL Team. 2013. SPARQL Query Language for RDF. https://www.w3.org/TR/rdf-sparql-query/. Accessed on

June, 2020.

[236] The Numpy Team. 2020. Array programming with NumPy. Nature 585 (2020), 357–362. https://doi.org/10.1038/s41586-

020-2649-2

[237] The SciPy Team. 2020. SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python. Nature Methods (2020).

https://doi.org/10.1038/s41592-019-0686-2

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

A Survey on Spatio-temporal Data Analytics Systems

43

[238] Martijn Tennekes. 2018.

tmap: Thematic Maps in R. Journal of Statistical Software 84, 6 (2018), 1–39. https:

//doi.org/10.18637/jss.v084.i06

[239] Aman Thakral. 2016. pyspatial: Pthon package to provide data structures on top of GDAL/OGR. https://pyspatial.

readthedocs.io/

[240] The Apache Software Foundation 2015. Apache Ignite: Distributed Database For High-Performance Computing With

In-Memory Speed. https://ignite.apache.org/. Last Accessed June, 2020.

[241] The Luigi Authors. 2020. Luigi: A Python Module with Hadoop Supports. https://luigi.readthedocs.io/
[242] Ashish Thusoo, Joydeep Sen Sarma, Namit Jain, Zheng Shao, Prasad Chakka, Suresh Anthony, Hao Liu, Pete Wyckoff,
and Raghotham Murthy. 2009. Hive: A Warehousing Solution over a Map-Reduce Framework. Proc. VLDB Endow. 2, 2
(Aug. 2009), 1626–1629. https://doi.org/10.14778/1687553.1687609

[243] Finbar Tiernan and Eamonn O’Mallon. 2020. Australia’s 2019–20 bushfire season. The Canberra Times (2020).

https://www.canberratimes.com.au/story/6574563/australias-2019-20-bushfire-season/ January 13, 2020.

[244] L. Torgo. 2014. An Infra-Structure for Performance Estimation and Experimental Comparison of Predictive Models in

R. CoRR abs/1412.0436 (2014).

[245] Stéfan van der Walt, Johannes L. Schönberger, Juan Nunez-Iglesias, François Boulogne, Joshua D. Warner, Neil Yager,
Emmanuelle Gouillart, Tony Yu, and the scikit-image contributors. 2014. scikit-image: image processing in Python.
PeerJ 2 (6 2014), e453. https://doi.org/10.7717/peerj.453

[246] Guido Van Rossum and Fred L Drake Jr. 1995. Python Tutorial. Centrum voor Wiskunde en Informatica Amsterdam,

The Netherlands.

[247] Shivaram Venkataraman, Zongheng Yang, Davies Liu, Eric Liang, Hossein Falaki, Xiangrui Meng, Reynold Xin, Ali
Ghodsi, Michael Franklin, Ion Stoica, and Matei Zaharia. 2016. SparkR: Scaling R Programs with Spark. In Proceedings
of the 2016 International Conference on Management of Data (San Francisco, California, USA) (SIGMOD’16). Association
for Computing Machinery, New York, NY, USA, 1099–1104. https://doi.org/10.1145/2882903.2903740

[248] Hoang Vo, Ablimit Aji, and Fusheng Wang. 2014. SATO: A Spatial Data Partitioning Framework for Scalable
Query Processing. In Proceedings of the 22nd ACM SIGSPATIAL International Conference on Advances in Geographic
Information Systems (Dallas, Texas) (SIGSPATIAL’14). Association for Computing Machinery, New York, NY, USA,
545–548. https://doi.org/10.1145/2666310.2666365

[249] W3C 2014. RDF: Semantic Web Standards. https://www.w3.org/RDF/. Last Accessed June, 2020.
[250] Leye Wang and Ouri Wolfson. 2020. Grand challenges for the Spatial Information Community. Journal of Spatial

Information Science 20 (04 2020), 79–85. https://doi.org/doi:10.5311/JOSIS.2020.20.667

[251] Wes McKinney. 2010. Data Structures for Statistical Computing in Python . In Proceedings of the 9th Python in Science
Conference, Stéfan van der Walt and Jarrod Millman (Eds.). 56 – 61. https://doi.org/10.25080/Majora-92bf1922-00a

[252] Jeffrey Whitaker. 2006-2018. pyproj: Python interface to PROJ. https://pyproj4.github.io/pyproj/latest/
[253] Randall T. Whitman, Michael B. Park, Sarah M. Ambrose, and Erik G. Hoel. 2014. Spatial Indexing and Analytics on
Hadoop. In Proceedings of the 22nd ACM SIGSPATIAL International Conference on Advances in Geographic Information
Systems (Dallas, Texas) (SIGSPATIAL ’14). Association for Computing Machinery, New York, NY, USA, 73–82. https:
//doi.org/10.1145/2666310.2666387

[254] Hadley Wickham, Romain François, Lionel Henry, and Kirill Müller. 2020. dplyr: A Grammar of Data Manipulation.

https://CRAN.R-project.org/package=dplyr R package version 1.0.0.

[255] Hadley Wickham and Edgar Ruiz. 2020. dbplyr: A ’dplyr’ Back End for Databases. https://CRAN.R-project.org/

package=dbplyr R package version 1.4.4.

[256] Dawn J. Wright. 2013. The Ocean GIS Initiative . ESRI Publications.
[257] Dong Xie, Feifei Li, Bin Yao, Gefei Li, Liang Zhou, and Minyi Guo. 2016. Simba: Efficient In-Memory Spatial Analytics. In
Proceedings of the 2016 International Conference on Management of Data (San Francisco, California, USA) (SIGMOD’16).
Association for Computing Machinery, New York, NY, USA, 1071–1085. https://doi.org/10.1145/2882903.2915237

[258] Xiaochuang Yao and Guoqing Li. 2018. Big Spatial Vector Data Management: A Review. Big Earth Data 2, 1 (2018),

108–129. https://doi.org/10.1080/20964471.2018.1432115

[259] Yelp and Contributors. 2018. mrjob: Run MapReduce jobs on Hadoop. https://mrjob.readthedocs.io/
[260] S. You, J. Zhang, and L. Gruenwald. 2015. Large-scale Spatial Join Query Processing in Cloud. In 2015 31st IEEE

International Conference on Data Engineering Workshops. 34–41.

[261] Jia Yu, Jinxuan Wu, and Mohamed Sarwat. 2015. GeoSpark: A Cluster Computing Framework for Processing
Large-Scale Spatial Data. In Proceedings of the 23rd SIGSPATIAL International Conference on Advances in Geographic
Information Systems (Seattle, Washington) (SIGSPATIAL’15). Association for Computing Machinery, New York, NY,
USA, Article 70, 4 pages. https://doi.org/10.1145/2820783.2820860

[262] Jia Yu, Zongsi Zhang, and Mohamed Sarwat. 2019. Spatial Data Management in Apache Spark: The GeoSpark
Perspective and Beyond. Geoinformatica 23, 1 (Jan. 2019), 37–78. https://doi.org/10.1007/s10707-018-0330-9

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

44

Alam, et al.

[263] Jing Yuan, Yu Zheng, and Xing Xie. 2012. Discovering Regions of Different Functions in a City Using Human
Mobility and POIs. In Proceedings of the 18th ACM SIGKDD International Conference on Knowledge Discovery and
Data Mining (Beijing, China) (KDD’12). Association for Computing Machinery, New York, NY, USA, 186–194. https:
//doi.org/10.1145/2339530.2339561

[264] Jing Yuan, Yu Zheng, Liuhang Zhang, XIng Xie, and Guangzhong Sun. 2011. Where to Find My next Passenger. In
Proceedings of the 13th International Conference on Ubiquitous Computing (Beijing, China) (UbiComp’11). Association
for Computing Machinery, New York, NY, USA, 109–118. https://doi.org/10.1145/2030112.2030128

[265] N. J. Yuan, Y. Zheng, X. Xie, Y. Wang, K. Zheng, and H. Xiong. 2015. Discovering Urban Functional Zones Using

Latent Activity Trajectories. IEEE Transactions on Knowledge and Data Engineering 27, 3 (2015), 712–725.

[266] Nicholas Jing Yuan, Yu Zheng, Liuhang Zhang, and Xing Xie. 2012. T-Finder: A Recommender System for Finding

Passengers and Vacant Taxis. IEEE Transactions on Knowledge and Data Engineering (September 2012).

[267] Matei Zaharia, Mosharaf Chowdhury, Tathagata Das, Ankur Dave, Justin Ma, Murphy McCauly, Michael J. Franklin,
Scott Shenker, and Ion Stoica. 2012. Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory
Cluster Computing. In 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12). USENIX
Association, San Jose, CA, 15–28. https://www.usenix.org/conference/nsdi12/technical-sessions/presentation/zaharia
[268] Matei Zaharia, Mosharaf Chowdhury, Michael J. Franklin, Scott Shenker, and Ion Stoica. 2010. Spark: Cluster
Computing with Working Sets. In Proceedings of the 2nd USENIX Conference on Hot Topics in Cloud Computing (Boston,
MA) (HotCloud’10). USENIX Association, USA, 10.

[269] Matei Zaharia, Reynold S. Xin, Patrick Wendell, Tathagata Das, Michael Armbrust, Ankur Dave, Xiangrui Meng,
Josh Rosen, Shivaram Venkataraman, Michael J. Franklin, Ali Ghodsi, Joseph Gonzalez, Scott Shenker, and Ion
Stoica. 2016. Apache Spark: A Unified Engine for Big Data Processing. Commun. ACM 59, 11 (Oct. 2016), 56–65.
https://doi.org/10.1145/2934664

[270] Achim Zeileis and Gabor Grothendieck. 2005. zoo: S3 Infrastructure for Regular and Irregular Time Series. Journal of

Statistical Software 14, 6 (2005), 1–27. https://doi.org/10.18637/jss.v014.i06

[271] Yaming Zhang and Ahmed Eldawy. 2020. Evaluating Computational Geometry Libraries for Big Spatial Data
Exploration (GeoRich ’20). Association for Computing Machinery, New York, NY, USA, Article 3, 6 pages. https:
//doi.org/10.1145/3403896.3403969

[272] Zhigang Zhang, Cheqing Jin, Jiali Mao, Xiaolin Yang, and Aoying Zhou. 2017. TrajSpark: A Scalable and Efficient
In-Memory Management System for Big Trajectory Data. In Web and Big Data, Lei Chen, Christian S. Jensen, Cyrus
Shahabi, Xiaochun Yang, and Xiang Lian (Eds.). Springer International Publishing, Cham, 11–26.

[273] Yu Zheng. 2015. Trajectory Data Mining: An Overview. ACM Trans. Intell. Syst. Technol. 6, 3, Article 29 (May 2015),

41 pages. https://doi.org/10.1145/2743025

[274] Harry Zhu. 2020. GeoSpark: Bring sf to spark. https://github.com/harryprince/geospark. Accessed on December,

2020.

[275] Esteban Zimányi, Mahmoud Sakr, Arthur Lesuisse, and Mohamed Bakli. 2019. MobilityDB: A Mainstream Moving
Object Database System. In Proceedings of the 16th International Symposium on Spatial and Temporal Databases (Vienna,
Austria) (SSTD ’19). Association for Computing Machinery, New York, NY, USA, 206–209. https://doi.org/10.1145/
3340964.3340991

ACM Comput. Surv., Vol. 1, No. 1, Article . Publication date: March 2021.

