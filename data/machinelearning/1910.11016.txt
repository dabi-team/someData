Convex Optimisation for Inverse Kinematics

Tarun Yenamandra1,2, Florian Bernard1,2, Jiayi Wang1,2, Franziska Mueller1,2, and Christian Theobalt1,2
1MPI Informatics, 2Saarland Informatics Campus

9
1
0
2

t
c
O
4
2

]

G
L
.
s
c
[

1
v
6
1
0
1
1
.
0
1
9
1
:
v
i
X
r
a

Abstract

We consider the problem of inverse kinematics (IK),
where one wants to ﬁnd the parameters of a given kinematic
skeleton that best explain a set of observed 3D joint loca-
tions. The kinematic skeleton has a tree structure, where
each node is a joint that has an associated geometric trans-
formation that is propagated to all its child nodes. The IK
problem has various applications in vision and graphics,
for example for tracking or reconstructing articulated ob-
jects, such as human hands or bodies. Most commonly, the
IK problem is tackled using local optimisation methods. A
major downside of these approaches is that, due to the non-
convex nature of the problem, such methods are prone to
converge to unwanted local optima and therefore require a
good initialisation. In this paper we propose a convex op-
timisation approach for the IK problem based on semidef-
inite programming, which admits a polynomial-time algo-
rithm that globally solves (a relaxation of) the IK problem.
Experimentally, we demonstrate that the proposed method
signiﬁcantly outperforms local optimisation methods using
different real-world skeletons.

1. Introduction

The inverse kinematics (IK) problem plays an important
role in robotics, computer games, graphics, and vision, as
it is a fundamental building block for animating, control-
ling, tracking and reconstructing articulated objects, such
as robotic arms or human bodies. The IK problem refers
to the task of recovering parameters of a kinematic skele-
ton (e.g. joint angles), given a set of observed locations for
(some of) the joints. The kinematic skeleton is represented
as a tree, where each node is a joint that has translational
and/or rotational degrees-of-freedom. In forward kinemat-
ics, one computes the positions of the joints given the trans-
lation and rotation parameters. Here, the transformation for
each joint is deﬁned relative to its parent joint, so that a
chain of transformations is applied along the path from the
root node to a leaf node (end-effector). Inverting this pro-
cess, i.e. given some of the joint positions, one wants to
recover the kinematic parameters that lead to this joint po-

Figure 1. Our SDP-IK method results in a better ﬁt compared to
local optimisation. Left: Ground truth pose, where the observed
points are shown in red. Centre: Local IK methods can get stuck
in an unwanted local minimum. Right: Our convex SDP-IK for-
mulation can reliably reach a good optimum that is much closer to
the ground truth.

sition conﬁguration.

The IK problem is considered to be difﬁcult due to sev-
eral reasons. On the one hand, depending on the kinematic
skeleton and the observed joint positions, the inverse kine-
matics can be ill-posed so that there may be multiple conﬁg-
urations of kinematic parameters that lead to the same joint
positions. On the other hand, depending on the given joint
locations, a solution that produces an exact ﬁt to the obser-
vations might not exist. Lastly, the resulting optimisation
problem is non-convex, which makes it generally difﬁcult
to ﬁnd a globally optimal solution. Hence, approximations
are oftentimes used in practice, which in turn require an
initialisation that is sufﬁciently close to a global optimum.
In computer vision, one of the most dominant applications
of the IK problem is tracking and reconstructing articulated
objects based on a temporal sequence of data (e.g. depth
images, or RGB images). A common approach for tack-
ling tracking applications is to initialise the kinematic para-
meters for the next frame using the tracked result from the
current frame, and then solve the IK problem using local

Ground TruthLocalSDP-IK 
 
 
 
 
 
optimisation methods. However, this is not possible for the
very ﬁrst frame of a sequence. Hence, in many works the
authors assume that a good initialisation is available for the
ﬁrst frame, e.g. based on an initial calibration with a neutral
pose, as done in [33]. In contrast, our proposed method is
entirely initialisation-free, and is therefore well-suited for
handling such cases. The main contribution of this work
is a polynomial-time solution of the IK problem, coined
SDP-IK, that ﬁnds a global optimum of a (convex relax-
ation of) the IK problem based on semideﬁnite program-
ming.

2. Related Work

In this section we ﬁrst address local optimisation meth-
ods for the inverse kinematics problem, followed by global
methods. Subsequently, we summarise the most relevant
works that consider semideﬁnite programming relaxations
of related optimisation problems.

Local IK approaches: Local optimisation methods
seek to iteratively ﬁnd a solution of the IK problem based
on a given initial estimate. One class of such meth-
ods use the ﬁrst-order Taylor approximation of the prob-
lem and attempt to solve a linear system characterised
by the Jacobian matrix. Alternatives are the Moore-
Penrose pseudoinverse method,
the Jacobian transpose
method (equivalent to gradient descent for least-squares er-
ror), the Levenberg-Marquardt method (equivalent to gra-
dient descent for damped least-squares error), and other
variants [6, 10, 14, 20]. Second-order methods also ex-
ist, but such approaches require the computation of the
Hessian of the forward kinematics function, which incur
higher computational cost. Quasi-Netwon methods, such as
the Broyden-Fletcher-Goldfarb-Shanno (BFGS) algorithm,
have been used to provide faster approximations for solving
the IK problem [23].

Instead of trying to approximate and invert the forward
kinematics function, heuristic methods employ simple rules
to be iteratively followed and can often reach the IK so-
lution. Cyclic coordinate descent (CCD) and its variants
are heuristic methods that seek to minimise joint errors by
changing one kinematic parameter at a time [27, 38]. For-
ward and backward reaching IK (FABRIK) [4] provides a
method that can provably converge to the correct solution,
when feasible, for a single unconstrained kinematic chain
[3]. Evolutionary algorithms such as particle swarm opti-
misation and genetic algorithms, are heuristics inspired by
evolution and are used to solve the IK problem in [34, 35].
Due to their speed and ease-of-use, local optimisation
methods are widely used in applications such as charac-
ter animation [20], motion re-targeting [19], model-based
tracking [33, 36], post-processing on pose estimation [26,
28], and data visualisation [27]. However, despite their pop-
ularity, local IK approaches require a good initialisation for

complex, real-world skeletons, as otherwise they are prone
to converge to unwanted local optima.

Global IK methods: Global IK methods aim to avoid
this tendency getting stuck in local optima, and instead seek
to obtain a global solution. One way of of achieving initiali-
sation independence is based on training a machine learning
model to solve the IK problem. In [11], the authors learn
an inverse kinematics function which maps from joint lo-
cations to kinematic parameters using a structured learning
method.

An alternative to learning approaches are global optimi-
sation methods. In [16], the authors tackle the problem of
force-closure grasp synthesis based on sequential semideﬁ-
nite programming, where rotation constraints are modelled
in terms of bilinear matrix inequalities involving quater-
nions and rotation matrices. An approach for a feasibil-
ity formulation of the IK problem based on mixed-integer
programming (MIP) is presented in [15]. The main idea
here is to discretise all non-convex constraints based on bi-
nary variables. The resulting problem is then solved with a
branch and bound algorithm, which is known to have expo-
nential worst-case time complexity.

Contrary to the discussed works, which address fea-
sibility versions of the IK problem, and/or do not ad-
mit polynomial-time algorithms, we propose a principled
polynomial-time approach for the IK problem. Moreover,
we consider a least-squares version of the IK problem,
which is most relevant for the majority of applications in
vision and graphics, such as for the tracking or the recon-
struction of articulated objects.

Semideﬁnite programming relaxations: Semideﬁnite
programming (SDP) relaxations are a popular way for tack-
ling non-convex optimisation problems. Such methods have
been successfully used for a range of different problems
in vision and beyond, e.g. for graph matching [32, 40] or
multi-graph matching [7, 21], the rigid registration of point-
clouds [22, 25], the segmentation of images [39], or for per-
mutation synchronisation [13]. However, generally such ap-
proaches are computationally expensive, since many of the
SDP relaxations are based on a lifting of the variables, so
that the size of the optimisation problem increases quadrat-
ically when moving from the original non-convex problem
to the convex relaxation [21, 32, 40].

One scenario where SDP relaxations particularly stand
out is in problems involving 3D rotation matrices. On the
one hand, lifting a matrix variable of size 3×3 merely re-
sults in a relatively small variable of size 1+(3·3)2=82, so
that such problems can be solved efﬁciently. On the other
hand, some relaxations that involve a single rotation ma-
trix have been observed to be tight in practice, i.e. even
when solving a relaxation of a non-convex problem, the
so-found solution is a global minimiser of the original
non-convex problem. This has for example been empiri-

3.1. Forward Kinematics Model

We assume that we are given a tree that deﬁnes the
kinematic skeleton, see Fig. 2. The root of the tree has
6 degrees-of-freedom (DOF), of which 3 account for the
global rotation, and 3 account for the global translation.
Each non-root joint has between 0 and 3 rotational DOF,
where each (non-zero) DOF accounts for a rotation of a
given angle around a given axis. Joints without DOF are
used to model the end-effectors, e.g. the ﬁngertips in the
human hand, cf. Fig. 2.

One-DOF representation: W.l.o.g., for convenience,
we redeﬁne this generic kinematic skeleton in such a way
that each (non-end-effector) joint only has a single DOF
that allows for a rotation around a given axis. To this end,
for each joint of the original skeleton that has more than 1
DOF, we simply introduce one or two additional auxiliary
joints (placed at the same position) that account for the addi-
tional DOF. We emphasise that while this redeﬁnition of the
kinematic skeleton does not change its kinematic behaviour,
such a representation is more convenient for deﬁning our
SDP relaxation, as we will become apparent in Sec. 4.2.

Kinematic skeleton: Let J ∈ N be the total number
of joints, where each joint now has at most 1 DOF (due to
the redeﬁnition of the skeleton). The global translation of
the root is denoted by t ∈ R3. For each subsequent joint
transformation, let aj ∈ R3 for j ∈ [J] denote the (unit-
length) rotation axis of the j-th joint, and let vj ∈ R3 be the
“bone-vector” of the j-th joint, i.e. the offset of joint j in
the coordinate system of its parent (cf. Fig. 2). For θj ∈ R
being the parameter of the j-th joint, by ˆT (aj, θj) ∈ R4×4
we denote the transformation from the coordinate system of
joint j to the coordinate system of its parent, represented in
homogeneous coordinates. To be more speciﬁc, we have

ˆT (aj, θj) =

(cid:20)K(aj, θj)
0T
3

(cid:21)

vj
1

,

(1)

where the rotation matrix K(a, θ) is obtained by Rodrigues’
rotation formula as

K(a, θ) = I3+ sin(θ)[a]×+(1− cos(θ))[a]2

× .

(2)

Here, [·]× is the skew-symmetric operator that gener-
ates a 3×3 matrix from a 3D vector (i.e. for x, y ∈ R3
we have [x]×y = x × y). For joints with 0 DOF (i.e. for
end-effectors), we deﬁne K(a, θ) to be the identity matrix
I3.

Forward model: For Θ := [tT , θ1, . . . , θJ ]T ∈ R3+J
being the parameter vector that stacks all joint parameters,
the forward model for computing the position xj(Θ) of the
j-th joint is given by

ˆxj(Θ) = ˆt +





(cid:89)

ˆT (ai, θi)


 ˆ03 ,

i∈α1
j

(3)

Figure 2. Illustration of a kinematic skeleton of a human hand (left)
and a human body (right). The root joint for both skeletons admits
6 DOF (global translation and rotation), whereas all other joints
admit between 0 and 3 rotational DOF.

cally demonstrated in [9] for the registration of 3D objects
(with known correspondence). Other approaches that con-
sider SDP approaches for problems involving rotations have
been demonstrated for SLAM [30], pose-graph optimisa-
tion [12], or rotation averaging [5, 17, 37].

In our work we consider an SDP relaxation for the in-
verse kinematics problem, which involves a composition of
several rotations that are propagated through the kinematic
chain.

2.1. Notation

Here, we brieﬂy outline the used notation. By Id we de-
note the d×d identity matrix, by 0d ∈ Rd we denote the
vector of all zeros, and the operator vec(X) vectorises a
given input matrix X by concatenating all the columns of
X. For an integer n we use the notation [n] := {1, . . . , n}.
For a matrix X we write X:,i to denote the vector that is
formed by the i-th column of X, and analogously Xi,: to
denote the row vector that is formed by the i-th row of X.
Moreover, for a 3D vector x ∈ R3, or a matrix T ∈ R3×3,
we use ˆx = [xT 1]T ∈ R4 and ˆT ∈ R4×4 to denote their
respective representation in homogeneous coordinates. For
X being a matrix, the notation X(cid:23)0 means that X is sym-
metric positive semideﬁnite.

3. Inverse Kinematics

In this section we describe our approach for tackling the
inverse kinematics problem. To this end, we ﬁrst deﬁne the
forward kinematics model, which is followed by the precise
statement of the problem.

where by αn
m we denote the path from the m-th joint to
the n-th joint (from children to root) in the kinematic skele-
ton, and ˆ03 = [0 0 0 1]T is the zero vector represented in
homogeneous coordinates. For brevity, we will refer to all
elements of Θ as angles, even if they represent translations.
Joint angle constraints: In addition, for each joint there
is an interval Ij that deﬁnes the range of valid values for
θj so that it must hold that θj ∈ Ij. For notational con-
venience, we deﬁne I := R3 × I1 × . . . × IJ and write
Θ ∈ I.

3.2. Problem Statement

We are interested in the problem of ﬁnding the param-
eters Θ such that the forward kinematics model best ex-
plains a given set of 3D joint position observations. Let
J ⊂ [J] denote the subset of joints for which the 3D po-
sitions yj ∈ R3, j ∈ J , are known. The IK problem can
now be phrased as a (constrained) nonlinear least-squares
problem that reads

min
Θ∈I

⇔ min
Θ∈I

(cid:88)

j∈J

(cid:88)

j∈J

(cid:107)yj − xj(Θ)(cid:107)2 =: f (Θ)

(4)

(cid:107)ˆyj − (ˆt +





(cid:89)

ˆT (ai, θi)


 ˆ03)(cid:107)2 .

i∈α1
j

Depending on the set J , there may be multiple parameter
vectors Θ that all lead to the same conﬁguration of joint po-
sitions xj(Θ) for all j ∈ J . As such, for general IK prob-
lems of the form (4), the solution may not be unique since
there can be multiple global optima. Most commonly, such
problems are solved based on local optimisation methods,
e.g. by modelling the hard constraints Θ ∈ I as penalty
in the objective function and then using a gradient descent
procedure for locally optimising the objective function. A
major downside of using such iterative approaches is that
one requires a good initialisation for Θ, so that the optimi-
sation does not result in an unwanted local optimum. We
will tackle the problem of ﬁnding a good initialisation for
Problem (4) based on a convex relaxation, as we will de-
scribe next.

4. Convex Relaxation for Inverse Kinematics

In order to achieve a convex relaxation of the IK
problem, we will ﬁrst redeﬁne the problem as a non-
convex quadratically constrained quadratic programme
(QCQP) [1]. Subsequently, we will introduce our convex
relaxation based on semideﬁnite programming.

4.1. Inverse Kinematics as QCQP

Global and relative rotations: Let Rj ∈ SO(3) ⊂
R3×3 denote the global rotation of the j-th joint (i.e. rel-
j ∈ SO(3) ⊂ R3×3 denote
ative to the root), and let Rrel
the rotation of the j-th joint relative to its immediate parent,
where we use the notation π(j) ∈ [J] to indicate the parent
of joint j ∈ [J]. For all joints we have the relation

Rj = Rπ(j)Rrel
j ,

(5)

where we deﬁne Rπ(1) = I3. Forward kinematics: The
position pj ∈ R3 of the j-th (non-root) joint is deﬁned re-
cursively as

pj = pπ(j) + Rπ(j)vj ,

(6)

where pπ(j) ∈ R3 is the 3D position of its parent, and we
deﬁne pπ(1) := t.

Joint angle constraints: For the j-th joint the rotation
relative to its parent is constrained to be within the interval
Ij, see Sec. 3.1. In our reformulation we impose a similar
constraint directly on the rotation matrix. In order to do so,
we express Rrel
, where
j
in our case we choose (w.l.o.g.) a rotation around the x-axis,
so that we have the general structure

in terms of a canonical rotation Rcan

j

Rcan

j =


1
0

0

0



0

cos(θj) − sin(θj)
cos(θj)
sin(θj)

 =:


1
0

0



 .

0
0
cj −sj
cj
sj

(7)

j Rcan

j = ST
As such, we can write Rrel
j Sj, for Sj ∈ SO(3)
being a suitably chosen matrix that is determined a priori
(i.e. before optimisation). In order to impose the joint angle
limits we enforce that cj and sj lie within the unit circle,
i.e. we impose the convex constraint

j + s2
c2

j ≤ 1 .

(8)

j , θ+
In addition, for Ij = [θ−
j ], we consider the line passing
j ), sin(θ+
through (cos(θ−
j )) and (cos(θ+
j ), sin(θ−
j )), and
enforce that the elements cj and sj of Rcan
are within a half-
space deﬁned by this line. This results in a linear inequality
j ∈ Lj to refer to both
constraint in sj and cj. We use Rcan
of these (convex) joint angle constraints.

j

Rotation constraints: The set of (proper) rotations

SO(3) can be deﬁned with quadratic constraints as

SO(3) = {X ∈ R3×3 : X T X = I3, X:,1×X:,2 = X:,3} ,

Rather than phrasing the IK problem in terms of the pa-
rameter vector Θ, we will directly optimise for rotation ma-
trices and the global translation.

where the cross-product is used to implement the right-hand
rule in order to ensure that the determinant is 1.

QCQP-IK: With the above elaborations we can now for-

mulate the IK problem as the QCQP

4.2.2 Semideﬁnite Relaxation for IK

min
t,{pj ,Rj ,Rrel

j ,Rcan
j }

s.t.

(cid:88)

(cid:107)yj − pj(cid:107)2

(9)

j , Rπ(1) = I3 ,

j∈J
pj = pπ(j) + Rπ(j)vj, pπ(1) = t ,
Rj = Rπ(j)Rrel
Rrel
j Rcan
Rcan
(Rj, Rrel

j = ST
j ∈ Lj ,

j ) ∈ SO(3)3 ,

j , Rcan

j Sj ,

where the constraints are applied for all j ∈ [J].

4.2. Inverse Kinematics as SDP

Before we introduce our semideﬁnite programming re-
laxation of the IK problem, we brieﬂy summarise the main
idea of semideﬁnite programming relaxations for general
QCQPs.

4.2.1 Semideﬁnite Relaxations of Generic QCQPs

A generic QCQP can be written in canonical form as

min
x∈Rn

s.t.

xT A0x

xT Aix ≤ bi ,

(10)

where Ai ∈ Rn×n are given symmetric matrices (that are
possibly indeﬁnite). Note that by using a homogeneous
coordinate representation, this form also allows for linear
terms in the objective as well as for linear constraints. Com-
monly, such non-convex QCQPs are solved by means of
lifting, where an additional lifted variable Y of size n×n is
introduced. Based on the property that for a given matrix
A it holds that xT Ax = tr(xT Ax) = tr(AxxT ), we can
rewrite Problem (10) as

min
x∈Rn,Y ∈Rn×n

tr(A0Y )

(11)

s.t.

tr(AiY ) ≤ bi , xxT = Y .

It is well-known that the constraint xxT = Y is equivalent
to

(cid:21)

(cid:20)1 xT
Y
x

(cid:23) 0, rank(

(cid:20)1 xT
Y
x

(cid:21)

) = 1 .

Since the left part is a convex cone constraint, to obtain a
convex relaxation the rank constraint (that accounts for the
non-convexity) is dropped, which leads to the semideﬁnite
programming problem

min
x∈Rn,Y ∈Rn×n

s.t.

tr(A0Y )

(12)

tr(AiY ) ≤ bi
(cid:20)1 xT
Y
x

(cid:21)

(cid:23) 0 .

In order to obtain our semideﬁnite programming relaxation
for the inverse kinematics problem, we systematically ap-
ply the elaborations in Sec. 4.2.1 to Problem (9).
In the
following we will elaborate on this. Matrix multiplication
constraints: For three orthogonal matrices X, Y, Z of size
n × n, the matrix constraint X = Y Z can equivalently be
written as

(cid:21)

(cid:20) In X
X T
In

(cid:20) Y
Z T

(cid:21) (cid:20) Y
Z T

=

(cid:21)T

.

(13)

Similarly as above, by dropping rank constraints, we obtain
a convex relaxation of this constraint as

(X, Y, Z) ∈ M := {(X, Y, Z) :





In
Y
Z T X T

Y T Z
In X
In



 (cid:23)0} .

Rotation constraints: As indicated in Sec. 4.1,
the
SO(3) constraint can be represented with quadratic equal-
ity constraints. A semideﬁnite relaxation of the constraint
R ∈ SO(3) is achieved by working with the vectorised
R, i.e. vec(R) ∈ R9, and introducing a lifted variable R
of size 9×9, as done in Sec. 4.2.1. The interested reader
is referred to [9, 31], where further details about the lift-
ing and the constraints can be found. We use the notation
(R, R) ∈ SO(3), where SO(3) is a convex set, to indi-
cate that (R, R) is a pair of variables that satisfy the lifted
rotation constraints.

Our convex relaxation: We now state the convex relax-

ation of the inverse kinematics problem, which reads

min
t,{pj ,Rj ,Rrel
{Rj ,Rrel

j ,Rcan
j }
j ,Rcan
j }

s.t.

(cid:107)yj − pj(cid:107)2

(cid:88)

j∈J

(14)

pj = pπ(j) + Rπ(j)vj, pπ(1) = t ,
(Rj, Rπ(j), Rrel
Rrel
j Rcan
Rcan

j ) ∈ M, Rπ(1) = I3 ,
j Sj ,

j = ST
j ∈ Lj ,

(Rj, Rj) ∈ SO(3) .
(Rrel
(Rcan
j

j ) ∈ SO(3) .
j ) ∈ SO(3) .

j , Rrel
, Rcan

Practical considerations: We solve our convex relax-
ation using the general purpose modelling tool Yalmip [24]
that interfaces the MOSEK solver [2].
In order to get a
tighter convex relaxation it helps to introduce convex re-
laxations of redundant constraints, e.g. for orthogonality
one would use convex relaxations for both the constraints
X T X = I and XX T = I, see [9]. Once we have found a
solution to Problem (14), we ﬁrst project the obtained ma-
trices onto the set SO(3) by means of Singular Value De-
composition, and subsequently extract the joint angles Θ

directly from the projected matrices. The so-obtained joint
angles Θ are not necessarily an optimum of the original IK
objective (4). Hence we use the found Θ as initialisation
for a trust region method as implemented in Manopt [8].
We refer to our overall approach as SDP-IK.

5. Experiments

In this section we experimentally demonstrate the ben-
eﬁts of our proposed approach based on two real-world
kinematic skeletons. To this end, in Sec. 5.1 we ﬁrst com-
pare different local optimisation methods. Subsequently, in
Secs. 5.2 and 5.3, we compare the best-performing local op-
timisation method to our convex relaxation approach, where
the effectiveness of the proposed SDP-IK will become ap-
parent. Since local IK methods are sensitive to initialisa-
tion, for every pose we uniformly sample multiple random
initialisations (5 for the experiments in Sec. 5.1, and 20 for
the experiments in Sec. 5.2 and 5.3) within the joint limit
constraints, and then run local optimisation for each of the
sampled initialisations. Note that we show the results ob-
tained by all random initialisations in the comparisons. We
measure the quality of the results based on the square-root
of the normalised f in (4), which we denote as

cost(Θ) =

(cid:115)

1
|J |

f (Θ) .

(15)

In our experiments, we use two real-world skeletons (hand
and human body, see Fig. 2) in 100 different natural poses
sampled from captured motion data sequences [18, 29]. The
motion data is represented as a sequence of angle vectors Θ
that animate the hand and body kinematic skeletons with
predeﬁned bone vectors {vj}. We obtain the “observed
joint positions” for each pose by computing the forward
kinematics using the angle vector Θ. For the evaluation
we consider two different cases:

1. The observed joint positions are noise-free, i.e. there
exist kinematic parameters that yield an exact ﬁt with
an objective value of 0 (cf. Sec. 5.2).

2. The observed joint positions have added noise, i.e. the
existence of kinematic parameters for an exact ﬁt is not
guaranteed (cf. Sec. 5.3). This is the common case for
practical applications.

5.1. Local Optimisation Methods

To choose a representative local optimisation method as
baseline, we compare four methods on the task of ﬁtting
the hand skeleton to observed joint locations when all joints
are observed (noise-free). For tackling the IK problem with
local optimisation methods it is common practice to convert
it to an unconstrained optimisation problem, where the joint

Figure 3. We show the performance of different local optimisation
methods: gradient descent (GD), trust region method (TR), conju-
gate gradient method (CG), and LBFGS.

angle constraints are modelled as penalties. As such, we
obtain the differentiable optimisation problem

min
Θ∈R3+J

(cid:88)

j∈J

(cid:107)yj − xj(Θ)(cid:107)2 + λ

3+J
(cid:88)

i=1

dist(θi, Ii)2 , (16)

where dist(θi, Ii) measures the distance of θi from the inter-
val of plausible angles Ii (as done in [28]), and λ is the hy-
perparameter that trades off joint limit violations with joint
position errors. For our experiments we ﬁx λ = 100.

In Fig. 3 we show results of gradient descent (GD),
the trust regions method (TR), conjugate gradient (CG),
and limited memory Broyden-Fletcher-Goldfarb-Shanno
(LBFGS) algorithms as implemented in the Manopt Mat-
lab toolbox [8]. For all methods we used default parameters
and allowed a maximum time budget of 30s. Each method
is tested with the same 8 poses with 5 random initialisa-
tions, so that a total of 40 IK problems is solved. While
the ﬁrst three methods yield solutions with similar quality,
LBFGS performs signiﬁcantly worse. Additionally, gradi-
ent descent and conjugate gradient are signiﬁcantly slower
compared to the other two methods. Hence we decide to
use the trust region method (TR) as representative local IK
method for the remaining experiments due to its good trade-
off between speed and accuracy.

5.2. Fitting to Noise-Free Observations

In Fig. 4 we show quantitative results when solving
the IK problem for noise-free observations. Our SDP-IK
method almost always achieves an exact ﬁt, i.e. the objec-
tive function value reaches 0, and thereby consistently out-
performs the local optimisation approach. This occurs both
when all joints are observed (All), and for the more ambigu-
ous case where only the end-effectors and root are observed
(End+Spine or End+Wrist), also cf. Fig. 2. Note that the
local IK method suffers more from outliers due to bad ini-
tialisations, while our method can consistently ﬁnd better
minima.

5.3. Fitting to Noisy Observations

In many situations a given inverse kinematics problem
can potentially be infeasible, i.e. kinematic parameters that

GDTRCGL-BFGS0.0e05.0e31.0e4Cost + PenaltyGDTRCGL-BFGS0102030Time [s]Figure 4. Box plot for ﬁtting to noise-free observed joint locations
of 100 poses for different skeletons (top: body, bottom: hand).
Our SDP-IK method yields a consistently lower error in terms of
cost (15), both in the case where all joints are given (top), as well
as in the case when only the end-effectors are given (bottom).

Figure 5. Box plot for ﬁtting to noisy observed joint locations of
100 poses for different skeletons (top: body, bottom: hand). Our
SDP-IK method yields lower or similar error in terms of the nor-
malised cost, both in the case where all joints are given (left), as
well as in the case when only the end-effectors are given (right).

exactly explain given observed joint locations may not ex-
ist. In practice, this is the case when the joint position ob-
servations are noisy. For example, neural networks have
been employed successfully for joint location prediction for
hands or human bodies. However, these networks mostly
output a set of independent joint locations without any con-
straints to comply with the underlying kinematic structure.
Hence, some approaches subsequently ﬁt a kinematic skele-
ton to the predictions to optimise for plausible joint angles,
usually relying on local IK methods like gradient descent.
The aim then is to ﬁnd kinematic parameters Θ and hence a
kinematically consistent and plausible set of joint positions
that achieve a minimum distance to the observed locations,
as e.g. done in [26, 28].

In this experiment we mimic such a setting by ﬁtting a
kinematic skeleton to joint locations that exhibit noise, so
that an exact ﬁt may not be possible. To this end, we use
the same poses as for the noise-free ﬁtting in Sec. 5.2, and
add noise to all observed joint locations. For each joint, the
3D noise offset n = r · d ∈ R3 is obtained by uniformly
sampling a unit length direction d ∈ R3, and a magnitude
r ∈ R from [0, rmax], where rmax is 10 mm for the hand
skeleton, and 100 mm for the body skeleton.

For infeasible cases, the minimum value of the IK cost
function in (15) ﬂuctuates randomly with the sampled noise.
The resulting box plot would merely capture how much
each noisy sample violates the kinematic constraints instead
of the quality of the solution. Hence, instead of reporting
the raw value of the IK cost, we provide normalised cost
values. To this end, for each pose we subtract the value
of the smallest cost that is obtained by local optimisation
among all the 20 random initialisations.

In Fig. 5 we show that our method consistently achieves
similar, or better performance than a local optimisation for
the IK problem. Qualitative results for the local optimisa-
tion method, the projected solution of the semideﬁnite pro-
gramming approach in (14), and our SDP-IK are shown in
Fig. 6.

6. Discussion & Limitations

Currently, solving the semideﬁnite programming prob-
lem (14) takes about 17s on average on an Intel i5 CPU
with 8GB of RAM, both for the hand as well as the hu-
man body skeleton. We emphasise that our current imple-
mentation is rather prototypical and is written so that it can
work with generic kinematic skeletons. Moreover, we did
not conduct any optimisations to improve the computational
efﬁciency—we expect that runtime improvements by one
order of magnitude or even more could be achieved using a
problem-speciﬁc efﬁcient implementation.

Currently, our model does not support translational DOF
in non-root joints.
In the future, we plan to also look
into this case, as translational DOF can account for small
changes in the bone length, which in turn can deal with the
variance of bone lengths in real-world data.

7. Conclusion

We have presented a convex optimisation approach for
the inverse kinematics problem based on a semideﬁnite pro-
gramming relaxation. A major beneﬁt of this approach is
that we can ﬁnd the global optimum of a (relaxation of the)
IK problem, in contrast to local optimisation methods that
heavily rely on good initialisations. Our experiments con-

SDP-IKLocal0.05.010.0CostBody: AllSDP-IKLocal0.05.010.015.0CostBody: End+SpineSDP-IKLocal0.02.04.0CostHand: AllSDP-IKLocal0.05.010.0CostHand: End+WristSDP-IKLocal0.02.04.06.0Normalised CostBody: AllSDP-IKLocal0.01.02.03.0Normalised CostBody: End+SpineSDP-IKLocal0.00.51.01.5Normalised CostHand: AllSDP-IKLocal0.02.04.06.0Normalised CostHand: End+WristFigure 6. Qualitative results for ﬁtting kinematic skeletons to known noisy points of human body and hand skeletons in different poses
(red spheres: noisy points, blue spheres: ﬁtted points). Top row: observed noisy joint positions. Second row: inverse kinematics solved
via local optimisation using a random initialisation (erroneous joints are circled). Third row: solution of the semideﬁnite programming
approach in (14) after projection. Bottom row: Our proposed SDP-IK method.

ﬁrm this advantage and also demonstrate that our proposed
SDP-IK approach is a useful method for tackling inverse
kinematics problems as they appear in computer vision and
computer graphic problems.

Acknowledgements

This work was funded by the ERC Consolidator Grant
4DRepLy. We thank Marc Habermann for making the hu-
man body skeleton and motion sequences available to us.

References

[1] K. M. Anstreicher.

Semideﬁnite programming versus
the reformulation-linearization technique for nonconvex

quadratically constrained quadratic programming. Journal
of Global Optimization, 43(2-3):471–484, 2009. 4

[2] M. ApS. The MOSEK optimization toolbox for MATLAB

manual. Version 9.0., 2019. 5

[3] A. Aristidou, Y. Chrysanthou, and J. Lasenby. Extending
fabrik with model constraints. Computer Animation and Vir-
tual Worlds, 27:35–57, 02 2016. 2

[4] A. Aristidou and J. Lasenby. FABRIK: A fast, iterative
solver for the inverse kinematics problem. Graph. Models,
73(5):243–260, Sept. 2011. 2

[5] A. S. Bandeira, M. Charikar, A. Singer, and A. Zhu.
Multireference alignment using semideﬁnite programming.
ITCS, 2014. 3

[6] C. Bensalah, J. Gonzalez-Quijano, N. Hendrich, and M. Ab-
derrahim. Anthropomorphic robotics hand inverse kinemat-
In
ics using estimated svd in an extended sdls approach.

Body SkeletonHand SkeletonTargetLocalSDP ProjectedSDP-IK (Ours)2013 16th International Conference on Advanced Robotics
(ICAR), pages 1–7, Nov 2013. 2

[7] F. Bernard, C. Theobalt, and M. Moeller. DS*: Tighter
Lifting-Free Convex Relaxations for Quadratic Matching
Problems. In CVPR, 2018. 2

[8] N. Boumal, B. Mishra, P.-A. Absil, and R. Sepulchre.
Manopt, a Matlab toolbox for optimization on manifolds.
Journal of Machine Learning Research, 15:1455–1459,
2014. 6

[9] J. Briales and J. Gonzalez-Jimenez. Convex Global 3D Reg-

istration with Lagrangian Duality. CVPR, 2017. 2, 5

[10] S. Buss.

Introduction to inverse kinematics with jacobian
transpose, pseudoinverse and damped least squares methods.
IEEE Transactions in Robotics and Automation, 17, 05 2004.
2

[11] B. Bcsi, D. Nguyen-Tuong, L. Csat, B. Schlkopf, and J. Pe-
ters. Learning inverse kinematics with structured prediction.
In 2011 IEEE/RSJ International Conference on Intelligent
Robots and Systems, pages 698–703, Sep. 2011. 2

[12] L. Carlone and G. C. Calaﬁore. Convex Relaxations for Pose
Graph Optimization With Outliers. IEEE Robotics and Au-
tomation Letters, 2018. 3

[13] Y. Chen, L. J. Guibas, and Q.-X. Huang. Near-Optimal Joint
In International

Object Matching via Convex Relaxation.
Conference on Machine Learning (ICML), 2014. 2

[14] A. Colom and C. Torras. Redundant inverse kinematics:
Experimental comparative review and two enhancements.
In 2012 IEEE/RSJ International Conference on Intelligent
Robots and Systems, pages 5333–5340, Oct 2012. 2

[15] H. Dai, G. Izatt, and R. Tedrake. Global inverse kine-
In Inter-
matics via mixed-integer convex optimization.
national Symposium on Robotics Research, Puerto Varas,
Chile, pages 1–16, 2017. 2

[16] H. Dai, A. Majumdar, and R. Tedrake. Synthesis and op-
timization of force closure grasps via sequential semideﬁ-
In Robotics Research, pages 285–305.
nite programming.
Springer, 2018. 2

[17] A. P. Eriksson, C. Olsson, F. Kahl, and T.-J. Chin. Rotation

Averaging and Strong Duality. CVPR, 2018. 3

[18] M. Habermann, W. Xu, M. Zollhoefer, G. Pons-Moll, and
C. Theobalt. Livecap: Real-time human performance capture
from monocular video, 2019. 6

[19] C. Hecker, B. Raabe, R. W. Enslow, J. DeWeese, J. Maynard,
and K. van Prooijen. Real-time motion retargeting to highly
varied user-created morphologies. In ACM SIGGRAPH 2008
Papers, SIGGRAPH ’08, pages 27:1–27:11, New York, NY,
USA, 2008. ACM. 2

[20] B. Kenwright. Real-time character inverse kinematics using
the gauss-seidel iterative approximation method. In 2012 4th
International Conference on Creative Content Technologies
(CONTENT 2012), pages 63–68, 2012. 2

[21] I. Kezurer, S. Z. Kovalsky, R. Basri, and Y. Lipman. Tight
Relaxation of Quadratic Matching. Comput. Graph. Forum,
2015. 2

[23] Kwan Wu Chin, B. R. von Konsky, and A. Marriott. Closed-
form and generalized inverse kinematics solutions for the
In Proceedings of the 19th
analysis of human motion.
Annual International Conference of the IEEE Engineering
in Medicine and Biology Society. ’Magniﬁcent Milestones
and Emerging Opportunities in Medical Engineering’ (Cat.
No.97CH36136), volume 5, pages 1911–1914 vol.5, Oct
1997. 2

[24] J. Lofberg. Yalmip: A toolbox for modeling and optimiza-
tion in matlab. In IEEE international conference on robotics
and automation, pages 284–289, 2004. 5

[25] H. Maron, N. Dym, I. Kezurer, S. Kovalsky, and Y. Lip-
man. Point registration via efﬁcient convex relaxation. ACM
Transactions on Graphics (TOG), 35(4):73, 2016. 2

[26] D. Mehta, S. Sridhar, O. Sotnychenko, H. Rhodin,
M. Shaﬁei, H.-P. Seidel, W. Xu, D. Casas, and C. Theobalt.
Vnect: Real-time 3d human pose estimation with a single
rgb camera. volume 36, 2017. 2, 7

[27] D. Merrick and T. Dwyer. Skeletal animation for the ex-
ploration of graphs. In Proceedings of the 2004 Australasian
Symposium on Information Visualisation - Volume 35, APVis
’04, pages 61–70, Darlinghurst, Australia, Australia, 2004.
Australian Computer Society, Inc. 2

[28] F. Mueller, F. Bernard, O. Sotnychenko, D. Mehta, S. Srid-
har, D. Casas, and C. Theobalt. GANerated Hands for Real-
Time 3D Hand Tracking from Monocular RGB. In Proceed-
ings of Computer Vision and Pattern Recognition (CVPR),
June 2018. 2, 6, 7

[29] F. Mueller, D. Mehta, O. Sotnychenko, S. Sridhar, D. Casas,
and C. Theobalt. Real-time hand tracking under occlusion
from an egocentric rgb-d sensor. In Proceedings of Interna-
tional Conference on Computer Vision (ICCV), 2017. 6
[30] D. M. Rosen, C. DuHadway, and J. J. Leonard. A convex
relaxation for approximate global optimization in simultane-
ous localization and mapping. ICRA, 2015. 3

[31] J. Saunderson, P. A. Parrilo, and A. S. Willsky. Semideﬁnite
Descriptions of the Convex Hull of Rotation Matrices. SIAM
Journal on Optimization, 2015. 5
[32] C. Schellewald and C. Schn¨orr.

Probabilistic subgraph
matching based on convex relaxation. In EMMCVPR, 2005.
2

[33] S. Sridhar, H. Rhodin, H.-P. Seidel, A. Oulasvirta, and
C. Theobalt. Real-time hand tracking using a sum of
In Proceedings of the Inter-
anisotropic gaussians model.
national Conference on 3D Vision (3DV), Dec. 2014. 2
[34] S. Starke, N. Hendrich, S. Magg, and J. Zhang. An efﬁ-
cient hybridization of genetic algorithms and particle swarm
In 2016 IEEE Inter-
optimization for inverse kinematics.
national Conference on Robotics and Biomimetics (ROBIO),
pages 1782–1789, 2016. 2

[35] S. Starke, N. Hendrich, and J. Zhang. A memetic evolution-
ary algorithm for real-time articulated kinematic motion. In
IEEE Congress on Evolutionary Computation (CEC), pages
2473–2479, 2017. 2

[22] Y. Khoo and A. Kapoor. Non-Iterative Rigid 2D/3D Point-
IEEE
Set Registration Using Semideﬁnite Programming.
Trans. Image Processing, 2016. 2

[36] A. Tkach, M. Pauly, and A. Tagliasacchi. Sphere-meshes for
real-time hand modeling and tracking. ACM Trans. Graph.,
35(6):222:1–222:11, Nov. 2016. 2

[37] L. Wang and A. Singer. Exact and stable recovery of rota-
tions for robust synchronization. Information and Inference,
2013. 3

[38] L. . T. Wang and C. C. Chen. A combined optimization
method for solving the inverse kinematics problems of me-
chanical manipulators. IEEE Transactions on Robotics and
Automation, 7(4):489–499, Aug 1991. 2

[39] P. Wang, C. Shen, and A. van den Hengel.

A Fast
Semideﬁnite Approach to Solving Binary Quadratic Prob-
lems. CVPR, 2013. 2

[40] Q. Zhao, S. E. Karisch, F. Rendl, and H. Wolkowicz.
Semideﬁnite programming relaxations for the quadratic as-
signment problem. Journal of Combinatorial Optimization,
2(1):71–109, 1998. 2

