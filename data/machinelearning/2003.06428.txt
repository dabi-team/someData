Towards a Resilient Machine Learning Classiﬁer
- a Case Study of Ransomware Detection

Chih-Yuan Yang and Ravi Sahita
Security and Privacy Research, Intel Labs, Hillsboro, Oregon, USA

0
2
0
2

r
a

M
3
1

]

R
C
.
s
c
[

1
v
8
2
4
6
0
.
3
0
0
2
:
v
i
X
r
a

Abstract—The damage caused by crypto-ransomware, due to
encryption, is difﬁcult to revert and cause data losses. In this
paper, a machine learning (ML) classiﬁer was built to early detect
ransomware (called crypto-ransomware) that uses cryptography
by program behavior. If a signature-based detection was missed,
a behavior-based detector can be the last line of defense to detect
and contain the damages. We ﬁnd that input/output activities of
ransomware and the ﬁle-content entropy are unique traits to
detect crypto-ransomware. A deep-learning (DL) classiﬁer can
detect ransomware with a high accuracy and a low false positive
rate. We conduct an adversarial research against the models
generated. We use simulated ransomware programs to launch
a gray-box analysis to probe the weakness of ML classiﬁers to
improve model robustness. In addition to accuracy and resiliency,
trustworthiness is the other key criteria for a quality detector.
Making sure that the correct information was used for inference
is important for a security application. The Integrated Gradient
method was used to explain the deep learning model and also to
reveal why false negatives evade the detection. The approaches
to build and to evaluate a real-world detector were demonstrated
and discussed. 1

Keywords— deep learning, adversarial research, simulated ran-
somware, bare-metal sandbox, machine learning as-a service, big
data, large scale malware analysis, I/O event, entropy, data augmen-
tation, bootstrapping

I. INTRODUCTION
Ransomware is a type of malware which hijacks user’s resource
or machine and demands for a ransom. It was estimated to cost
business more than $75 billion in 2019 and continues to be a
problem for enterprises [1]. Ransomware can be divided into two
main categories, the locker- and the crypto- ransomware [10]. The
locker-ransomware hijacks resource without using the encryption, but
crypto-ransomware does. Due to the encryption, the ﬁle encrypted by
the crypto-ransomware in most cases is difﬁcult to revert or decrypt.
Even with a proper backup, there is still a chance to miss partial
data between ransomware strike and the last backup. An endpoint
protection software based on binary signature may not be able to
block an unseen ransomware. The behavior-based detection [19],
[16] combined with a proper backup mechanism was proposed to
be one of mitigation solutions.

In this paper, machine learning (ML) and deep learning (DL)
classiﬁers were proposed to early detect
the crypto-ransomware
based on its behaviors. These classiﬁers can monitor the pattern
of input/output (I/O) activities and can minimize the damages by
an early detection. The detector could be a part of an endpoint
protection application and help to ﬁnd a new ransomware if static-
based detection can’t catch it (Figure 1). Although few ﬁles may get
encrypted before the detection, the dynamic-based classiﬁer would
be still valuable, if most of the data can be saved for an enterprise
user with lots of data in shared drives.

To collect the behavior data, the ransomwares was executed in a
Windows sandbox system and their ﬁle I/O activities were logged
[12]. The time-series data was analyzed by the DL algorithm, long

1This paper was presented at the Conference on Applied Machine Learning

for Information Security 2019, Washington DC

Fig. 1: The purpose of detector is to detect crypto-ransomware
early and contain the damage. The I/O event collector could
be a kernel driver, a ﬁle system ﬁlter, or an application. The
ML detector can be part of Anti-virus program which can stop
or kill positive processes.

short term memory (LSTM), and ML algorithm, N-gram featured
linear support vector machine (SVM). We found that a naive trained
classiﬁer even with good accuracy (˜98%) and low false positive
rate (˜1-3%)) didn’t perform well at real-world deployment. Issues
include: 1. Ransomware can’t be detected early; 2. The accuracy is
sensitive to size of sliding window and 3. False alarms from some
applications etc.

The bootstrapping method by Bradley Efron [13] is a well-known
technique used to estimate the properties of a statistic. The subclass
of bootstrap methods, the block bootstrap, were found effective to
improve the performance of classiﬁcation in our experiment. This
over-sampling mechanism can generate data similar to the samples
used for the online detector. The three issues mention above can be
mitigated after model retraining by the augmented dataset and by
adding a new dimension to the featuring method.

For security application, it is important to ensure that the ML
classiﬁers making decisions base on meaningful features. Interpreting
machine learning model become a needed process to elucidate impor-
tant aspects of learned models and to ensure the reliability. Several
saliency methods for the image model explanation were veriﬁed by
Adebayo, J et al.[15]. A good saliency method should satisfy two
fundamental axioms: sensitivity and implementation invariance. The
Integrated Gradient (IG) [21] method was selected for our case,
because it fulﬁlls the axioms and is easy to implement without
the needs to retrain or to instrument ML models. IG addresses the
”gradient saturation” by summing over scaled versions of inputs.
The integrated gradient along the ith dimension for an input x and
baseline ¯x is deﬁned as

IGi(x) = (xi − ¯xi) ×

(cid:90) 1

α=0

∂F (¯x + α(x − ¯x))
∂xi

dα

(1)

 
 
 
 
 
 
where ∂F (x)
is the gradient of F (x) along the ith dimension. The
∂xi
baseline input ¯x that represents the absence of a feature in the original
input x.

In our experiment, the attribution of each time step in LSTM
model can be generated. We observed that the attribution pattern
did match the known malicious I/O activities. Then the ﬁdelity of
classiﬁer can be veriﬁed and conﬁrmed. We also apply the IG method
to explain how an adversarial sample bypasses a detection.

A ML/DL model without adversarial mitigation may be vulnerable
to adversarial attacks [14]. A simulated ransomware, the Red team,
was developed to probe the blind spots of our classiﬁers. This
simulated program can perform the core ransomware behaviors, e.g.
the malicious encryption, and also conﬁgurable benign I/O activities,
e.g. ﬁle creation etc. With minor change to the I/O behavior of
encryption, the Red team found no difﬁculty to bypass the ML
detection. We conclude that an adversarial mitigation is necessary
procedure to fortify the ML/DL classiﬁer especially when dataset
size is limited or the featuring is simple.

The simulated adversarial program was found very helpful to
fortify the model. It not only discloses the weakness of the model,
but also serves as an adversarial sample generator. In addition to
the regular ML/DL training-testing iteration for model optimization,
we emphasize the adversarial training iteration. The real adversarial
samples by the polymorphic Red team were collected to augment the
dataset. Combining with data bootstrapping and model explanation
techniques, the resiliency and ﬁdelity of the model can be enhanced
and ensured. The tips and lessons learned for each steps of two-
iteration pipeline will be discussed in the result session. We believe
this in-depth analysis can be a general recommendation for ML/DL
application in cybersecurity ﬁeld.

Data Augmentation is a popular solution to enhance the size
and quality of training dataset for deep learning models [20].
For time series data, dataset augmentation can be done by data
warping, synthetic minority over-sampling technique (SMOTE) [11],
or generative neural networks. The “data warping” generates new
samples by transformation on raw data (such as image pixel) directly.
It includes the afﬁne transformation (translation, shearing, rotation,
ﬂip) and elastic distortions (scaled normalized displacement in image
space) etc. [22] The “SMOTE” works on the feature space. New
samples were generated by randomly selection of real features from
the minority dataset. The generative neural network is a powerful
method to learn the internal data representation and then to generate
new data samples with some variations. The Variational Autoencoder
(VAE) [17] and Generative Adversarial Networks (GAN) [12] are
two popular ones.

The samples generated by SMOTE were found to be very similar
to existing samples. It may be easy to cause overﬁtting, if too many
“similar” synthesized samples in the dataset. Depending on total
number of time step and feature count, the GAN and VAE may
need a bulky network architecture and may be difﬁcult to train.
In this paper, a simple and fast data augmentation, the ”keyed”
method, was proposed to synthesize time series samples and then to
prob and to help to understand the DL models.

augmentation method was developed to prob the deep learning
model. And the model was explained by the Integrated Gradient
method.

• The Red team, a simulated ransomware program, was proofed
to be effective for improving the resiliency of ML detector.
It can help to ﬁnd the weakness of ML classiﬁer and also
synthesize false-negative samples to augment the dataset. The
model robustness can be enhanced after few iterations of
adversarial re-training.

A. Crypto-ransomware

II. DATASET

˜22k of Ransomware binaries, Windows executable, were down-
loaded from VirusTotal R(cid:13) based on Microsoft R(cid:13) and Kaspersky R(cid:13)’s
label, ”ransom”. 2 Each binary was executed for 5 minutes in a
bare-metal sandbox system. The sandbox is a regular PC machine
running Windows 8.1 without any virtualization. To activate more
ransomware, an automated user activities simulator by AutoIt [3] was
running during the ransomware execution. The AutoIt is a scripting
language designed for automating the Windows GUI activities. It
can simulate keystrokes, mouse movements and window/control
manipulations. Ransomware will run as an administrator with full
access to the sandbox except the folder for log collection. Also
each sandbox was loaded with decoy or canary ﬁles in C: drive,
Documents, Downloads, Music, Pictures and Videos folders etc.
These ﬁles were designed to be the targets of crypto-ransomware.
At
the end, we identify around 4.4k of active ransomware by
checking the existence of the events from decoy ﬁles or folders.
The distribution of active ransomware family is shown in Figure 2.
The dataset has various of ransomware families.

Fig. 2: The ransomware family distribution in our dataset.
The distribution is based on the Microsoft R(cid:13)’s label provided
by VirusTotal R(cid:13).

In summary, this paper makes the following contributions:
• A general sandbox system was built for evasive malware analy-
sis. This system include two parts: a bare-metal machine and a
user activity simulator. The fundamental solution to catch anti-
VM or anti-sandbox malware is using a bare-metal system. By
utilizing the dual boot support in Linux, a bare-metal sandbox
can be refreshed quickly by copying a disk image. The user
activity simulator is important to trigger malware which spying
mouse movement or keyboard strokes etc. before starting its
malicious intents. The activity simulator can make a sandbox
like an active regular user machine.

• A full stack of ML/DL development process was demonstrated.
The real-world issues of ML detector were discovered by an
online detector. The processes from performance improvement
to adversarial analysis were revealed. Also the ”keyed” data

B. Bare-Metal System and Sandbox Farm

A fast bare-metal sandbox system is built to avoid using virtual
machine (VM). It can be easily implemented without error-prone
modiﬁcations on operating system or storage device ﬁrmware. It
supports any guest operating system (OS) on any machine with fast
storage devices, e.g. M.2 SSD. The guest OS can quickly be refreshed
and be automated for a continuously sandboxing process. The details
of sandbox life cycle can be found in Figure 3. The Master drive
can be hided and protected by three-fold mechanisms: 1. A trigger
listens to the “Plug and Play” (PnP) event to remove the Master drive
devise (if Guest OS supports the trigger). 2. A custom service/cron

2Intel and the Intel logo are trademarks of Intel Corporation in the U.S.
and/or other countries. Other names and brands may be claimed as the
property of others.

2

job polling the existence of Master device for removal if found. 3. A
simple kernel driver in Guest OS to remove the Master drive device
if found. The Figure 4 shows the architecture of a sandbox farm. The
malicious binary execution and data collection was fully automated
and is good for a large-scale malware analysis. The Control server
and the programmable power control are two key components to
orchestra the sandbox farm.

H = −

n
(cid:88)

i=1

pilog2(pi)

(2)

where pi is the probability of occurrence of the ith possible value
of the source data.

When a ﬁle was encrypted, the normalized Shannon entropy will
be high and close to value 1.0. A regular ﬁle may have an entropy
around 0.5. To avoid overload the CPU, the entropy was calculated
only from the ﬁrst 1 Mb of the ﬁle. The sample I/O event log can
be found at Figure 5.

Fig. 3: The life cycle of bare-metal machine by alternately
boot between two physical drives. The dash-line boxes repre-
sent the states of bare-metal machine: Active “Master OS” and
Active “Guest OS”. The Master OS utilizes the boot loader
supporting multiple OS to boot to the Guest OS. When the
Guest OS reboot, it will boot to the default drive deﬁned in
BIOS. The Master drive was protected when booting to Guest
OS. The Guest drive could be refreshed or saved/snapshot-ed
in active Master OS.

Fig. 4: The farm of bare-metal sandbox. The Control server
can dispatch tasks to bare-metal machines, collect the results
and monitor the status. If machine hung, the server can trigger
the programmable power control to re-start the machine.

Fig. 5: A sample execution log collected by behavior data
collector. It has ﬁelds:
targeted
ﬁlename, entropy etc. in CSV format

time stamp, event name,

D. Data Block Bootstrapping and Augmentation

The data bootstrapping was done by two methods: The early part
of execution log was sliced by different time periods. The length of
time period are 0˜1 sec; 0˜5sec; 0˜10sec and up to 0˜160sec. The
Figure 6 illustrates the slicing process in details. The intuition to
slice early part of execution log is to have a dataset focus on early
stage of ransomware behavior.

Fig. 6: The data bootstrapping and augmentation. The ﬁrst
row is simpliﬁed diagram for the full execution log. Each box
is one time step or an I/O event. Early-stage samples were
sliced from each sample by different time period and then
ﬁltered by decoy events. The sliding-window samples were
further sliced from the end of early-stage samples by different
window sizes.

The second set of sample was created by further slicing the
early-stage samples with different sizes of sliding windows. Sliding-
window samples have either 250, 500 or 1,000 time steps. The design
of sliding-window sample is based on the usage of online detector.
The detector inferences a sample extracted from I/O event stream by
a sliding window method.

The benign dataset was collected from ˜100 benign-ware running
in the same sandbox or from regular Windows machines in a normal
ofﬁce.

C. Behavior Data Collection

The behavior data was collected by a proof-of-concept (POC)
application which implemented the C# .Net API FileSystemWatcher
(FSW). Whenever there is a ﬁle input/output (I/O) activities, the
callback function will be invoked and the I/O activities can be logged.
The execution log is in a CSV format and contains timestamp, event
type and the entropy of target ﬁles. The entropy of target ﬁle was
calculated by Shannon entropy (H) method [4].

A. Model Architecture

III. METHODS

Around 3.7k of ransomware execution log was allocated with a
similar amount of benign sample for a supervised ML training. The
I/O event and ﬁle entropy were used for building the features for ML
training. Entropy was bucketed by an arbitrary selected range from
0(-), 0.2+, 0.4+, 0.6+, 0.8+, 0.9+. The raw data from execution log

3

then was categorized into few distinct numbers (features) and then
further encoding by ML algorithms.

The deep learning algorithms, long-short term memory (LSTM)
and the regularized linear support vector machine (SVM) with bag
of N-gram, N=1 and 2, were used to train models[7]. The LSTM
is a popular recurrent neural network (RNN) which can catch long
term dependence of time data. The architecture of LSTM contains a
one-hot encoding layer, a LSTM layer with 16 nodes, a 50% dropout
and a softmax layer. The linear SVM with N-gram algorithm is a
powerful but light-weight method for analyzing sequence data. ML
libraries used include Keras[6] with Tensorﬂow backend[9], Scikit-
Learn[8] or Spark MLlib[2]. An open source machine learning as-a
service [7], a big data based platform, makes the ML analysis very
handy.

B. Online Detector

The POC detector application was developed by Python which
utilized the ML model to detect ransomware pattern from I/O event
stream. It can continuously extract a sequence of I/O events by
various size of sliding window and make a real time prediction.
It depends on the Python libraries, e.g. Keras[6]/Tensorﬂow[9] and
Scikit Learn[8].

C. Integrated Gradients

The implementation of Integrated Gradients can be downloaded
from GitHub site [5]. The calculation for attribution is straightfor-
ward and quick by Python. The only criteria is that each layer in ML
model needs to have a gradient. We use zero for the baseline inputs
with 50 as the number of steps.

D. Adversarial Studies by the Red Team and the ”Keyed”
Augmentation

The simulated ransomware is a C# application which can do the
core business of ransomware, e.g. rename, delete or encrypt ﬁles
etc. The grey box attack was implemented. It attacks the ML model
by assuming features based on I/O events and ﬁle entropy without
knowing the ML model architectures, algorithms or weights. The
evasive tricks have two categories: changing the tempo of I/O activity
or the entropy of encrypted ﬁle. The tempo variants can be done by
actively inserting benign I/O events between malicious I/O events or
slowing down the malicious activities by a sleep. The benign events
will be inserted from other process during the sleep. Changing the
ﬁle entropy can be done by inserting dummy data into output ﬁles
or encrypt selected regions of ﬁle. The high entropy can be lowered
by dummy low-entropy data or partial encryption.

The ”keyed” data augmentation method for adversarial study
was developed (Figure 7). With the help of domain experts, a set
of “key observations” from real samples were identiﬁed based on
the golden rules or well-known heuristics. In our case, the key
observation are events from decoy ﬁles or folders. The purpose of
“key observations” is to ﬁnd out the important time steps which can
represent the “key” traits of real samples. If the order of multiple
key observations is critical, these observations should be groups into
a “key group” which can be treated as a single building block of
synthesis process in Figure 7(a). The “key group” can preserve the
ordering and completeness of related observations. Each synthesized
sample should have at least one “key” or “key group” observation
in it. Samples generated are based on the “keyed” real samples. The
“key” or “key groups” were operated as a single unit in synthesis
process (Figure 7a). The observation or key group can be seen as a
“block” which can be either replaced, removed, inserted or permuted,
see Figure 7(b-e). A series of blocks can be sliced or pruned, Figure
7(f-i).

A. Initial Model And Issues

IV. RESULTS

The classiﬁer was trained by a regular ML pipeline on a big-
data platform [7]. The initial result of both ML models have similar

Fig. 7: ”Keyed” Data Augmentation Methods. Each box rep-
resent an observation/time step. Left side of diagram represent
the “keyed” sample. Right side is “Un-keyed” samples. New
samples (b-i) were generated based on the keyed sample (a).
The “key” and “key group” observations (orange and yellow
boxes) were identiﬁed by human. (b) Some observations
were replaced. (c) Some observations were deleted. (d) New
observations were inserted. (e) Observations were permuted.
(f & g) Few observations was removed or pruned. (h & i) Few
observations was extracted (sliding window).

accuracy, around 98%, and false positive rate (FPR), around 2%.
from Figure 8.

Fig. 8: The result of naive trained ML model. LSTM has
9 distinct features: Create, Rename, Delete and six Change
events. The six Change events were from 6 buckets of content
entropy. Linear SVM with N-gram has 90 features: 9 from
N=1 and 9x9 from N=2

Then the detector application by this ML classiﬁer was tested
in a live settings. Even the classiﬁer has a good accuracy during
the training, three majors issues were found. 1. False alarms were
triggered from some applications, 2. small size of sliding window
missed some ransomware and 3. Ransomware can’t be detected
early. The naive trained classiﬁer didn’t work well in the real world
condition.

B. Early Detection and Size of Sliding Window Issues

To ﬁx these three issues, we ﬁrst studied the starting time of
ransomware. Based on the time region of decoy events, Figure 9(a),
the approximate starting time region of malicious activity can be
identiﬁed. The starting time for the dataset were found to have a
distribution along the span of execution time 9(b) . Around 20%
of ransomware shows malicious events in ﬁrst second of execution.
However, around 20% of them didn’t show any malicious activities
until very late of execution (>160sec). This distribution of starting
time will make the dataset preparation for early detection a bit tricky.
To measure the performance gap, early-stage samples and sliding-
windows samples were synthesized from ˜700 out-of-sample ran-
somware log. These two set of samples were predicted by the ML
classiﬁer. The performance results can be found at Figure 10(a).

4

The blue bars are the attribution amount calculated by Integrated
Gradients. The orange bars are ﬂags to label events from decoy
or canary ﬁles. They can reveal the malicious region of execution
log. In the clean region, Figure 12(a), there is no decoy events and
attributions are all closed to zero for all time steps. However, in
the region with clustered orange bars, the Figure 12(b), many blue
bars have high attributions. The pattern of blue bars does overlap
with the pattern of orange bars. It means the ML model based on
correct malicious events to make a positive prediction. We believe
the ML model relies on correct information for classiﬁcation and is
trustworthy.

E. Adversarial Studies

Adversarial attacks were done by a simulated ransomware applica-
tion, the Red team. It can do the core business of ransomware, e.g.
rename, delete and encrypt ﬁles with several evasive mechanisms.
The evasive tricks include changing the ﬁle I/O pattern or lower the
entropy of encrypt ﬁle. I/O pattern changes can be done by actively
creating benign events or by slowing down the malicious activities
(so events from other benign processes will go in). Many benign
events insertion can change the I/O pattern and dilute the effects of
malicious ones. Changing entropy can be done by insert low-entropy
data to output ﬁle or simply encrypt partial content of the victim ﬁles.
We found it won’t take long for the Red team to ﬁnd a condition
to bypass the detection. To defense the adversarial, the model was
probed by the Red team with several different conditions of evasive
tricks. All the false negatives were collected for an adversarial re-
training. The resiliency of model was improved after several attack-
retrain iterations and the Red team can’t easily evade the detection.
The Integrated Gradient was used to explain how the adversarial
samples evade the detection of LSTM model. The synthesized sam-
ple, in Figure 13, was done by inserting six benign events between
malicious events (by method in Figure 7d). The malicious events
indicated by orange bars in Figure 13 still have positive attributions,
but the amount of attribution, the blue bar, is weaken. The total
effect of insertion dilutes the malicious events and the prediction
was ﬂipped. The dilution effect is not linear. When inserting up to
ﬁve benign events, the prediction is still positive with a score 0.84.
The orders of malicious events to LSTM model were also studied.
The samples generated by the keyed method, e.g. relocation, reverse
and random shufﬂe (Figure 7e), were tested . ”Relocation” was done
by move the second half of log to the front of ﬁrst half. ”Reverse”
was reverse the order of all events. All three operations didn’t ﬂip the
prediction outcome, but they do lower the prediction scores of LSTM
from original 0.96 to relocation 0.83, reverse 0.81 and shufﬂe 0.88.
We believe individual events, the order and the pattern of events all
contribute to the LSTM decision making.

V. DISCUSSION
The bare-metal sandbox system in this paper leverages fast storage
interface to promptly refresh the Guest drive back to its original state
(within ˜40 seconds for ˜30Gb image). The refresh time depends
on the I/O speed of storage devise. The system utilizes a common
boot loader to programmatically switch booting between Master and
Guest OS. Since the Master and Guest OS on different physical
storage drives, the Master drive can be protected on the device
level by simple mechanisms, e.g. unloading the driver of SSD etc.
Without the need to modify storage driver, OS or the VMM for a
simulated bare-metal system, the simple implementation is the main
advantage of this system. For a large scale malware analysis, the
bare-metal machine farm can be a time saving solution. The Control
server with programmable power control can detect and force a
reboot/power cycle to any non-responsive machines. With small form
factor machines, e.g. Intel R(cid:13) NUCs, a sandbox farm can be built
within a limited space.

The dynamic data of crypto-ransomware is difﬁcult to obtain.
Around 20% active samples were identiﬁed from ˜22,000 downloads
in our experiment. The paper by Scaife, N et al.[18] had a similar
ratio. However, the crypto-ransomware was reported to be more

(a)

(b)

Fig. 9:
(a) The rough starting time can be found by the ﬁrst
event from decoy ﬁles. (b) The accumulated percentage of
ransomware with decoy events vs. different time period of
execution

The detection results for original SVM and LSTM models can be
found in the Figure 10(a). The gap between green line and color bars
means some ransomware samples were missed by the model. The
early-stage samples for SVM model, e.g. X-axis time period = 1, 5,
10 sec etc., have most prominent gaps. Also when sliding window
is getting smaller, the detection rate is getting worse. We suspected
the size effect of sliding window is related to the available amount
of data. And the cause of the early-stage issue could be that the
classiﬁer didn’t focus on the early stage region for decision making.
Comparing two models, the LSTM model has a smaller gap and is
less sensitive to the sizes of sliding window.

To build a model focus on a intended region of execution log,
the dataset was augmented by the bootstrapping. Early-stage and
sliding-window samples were generated from each execution log in
the original training dataset. Generated samples without any decoy
events were be excluded to make sure its maliciousness, Figure 6.
The sample count of dataset was increased to around 17.2k. After
a re-training, the result of re-test is in Figure 10(b). Both the early-
stage and sliding-window issues were ﬁxed or minimized for both
LSTM and SVM models.

C. False Alarm Issue

By inspecting few false positive samples, we found some benign-
wares show behaviors similar to ransomware e.g. delete or rename
many ﬁles or modify ﬁles with high entropy. To increase the
resolution of classiﬁer, we added a new dimension, the ”system
path” ﬂag,
to the feature. The system paths were white listed,
e.g. c:\Windows, c:\ProgramData, c:\Program Files, c:\Progra˜,
c:\AppData etc. Most of the benign-ware works on system folders,
but ransomware likely works on non-system folders. The output of
retraining model is at Figure 11. The FPR is lower for path-ﬂagged
model. Also around 22k out-of-sample clean execution logs were
tested by this path-ﬂagged model. The FPR was lower from 0.15%
to 0% for SVM and 0.09% to 0.04% for LSTM model. We believe
the path ﬂag does help to minimize the false alarm.

D. Model Fidelity

The model ﬁdelity for LSTM was veriﬁed by Integrated Gradients.
The attribution of ransomware sample can be found in Figure 12.

5

(a) Results of the original ML model

(b) Results of the ML model trained by augmented dataset

Fig. 10: The detection rates of early-stage and sliding-window samples are in colored bars. The green line is the percentage
of ransomware in each execution time period. It is the same result of Figure 9(b). When a ML model has a good performance,
the top of bar should be close to the green line and the detection rate for different size of sliding window should be similar.

the core malicious activities which would be very unique to crypto-
ransomware. We found the ML classiﬁers can be quickly trained
by a SVM or by a simple architecture for LSTM. Categorizing the
raw event logs into a series of feature id make the data processing
simple and the inference can be done quickly in the detector.
Several other ML models such as linear logistic regression or multi-
layer perceptron (MLP) etc. were also trained and evaluated. The
performances of these models are similar to SVM or LSTM. The
path ﬂag added to the feature can help to distinguish the source
of I/O event and lower the FPR. However it doubles the feature
dimension for LSTM (9 to 18) and more than triple for N-gram linear
SVM (90 to 336). To alleviate the concerns of over-ﬁtting, the out-
of-sample data from ˜700 ransomware log were used to evaluate the
performance. This out-of-sample dataset was from a newer download.
It can be predicted with a good accuracy by a classiﬁer trained by
older samples.

In addition to the regular ML pipeline to train and optimize a ML
classiﬁer, the block bootstrapping was used to augment the dataset for
the needs of the detection. A naive trained model won’t perform well
in real world especially when the detector need to make decisions
based on the partial data extracted from an event stream. The data for
a live detector is different from the sample generated directly from
the sandbox. Modifying dataset by bootstrapping and oversampling
were found to be effective to remove the difference. The classiﬁer
trained by augmented dataset was proved to be able to focus on the
correct regions of I/O events and doing prediction by limited the
amount of data, see Figure 10.

The adversarial research in this paper is done by a grey-box
attack. It started from changing the event pattern and the entropy of

Fig. 11: The result of path-ﬂagged ML model. The green
numbers in FPR column do have a lower number comparing
to the model without the path ﬂags

popular than the locker-ransomware in the review paper by Bander
Al-rimy et al.[10]. The possible causes of low active ratio could be:
1. the command and control servers (C&C server) was shutdown
or the connection got blocked; 2. the ransomware was designed for
speciﬁc victims; or 3. the evasive ransomware detect our sandboxes.
Based on Figure 9(b), the slope of green line is still upward near
the end of 5 minute region. The ransomware execution time could
be extended more to have more active samples. Also even an
execution log didn’t show any malicious events, we cannot exclude
the possibility that our data collection process got killed or blocked
before or during ransomware execution. We may investigate further
for samples without decoy events or with an uncompleted log if
resource available.

The feature selected in ML models are I/O event, path and ﬁle
entropy. The intuition behind is that ﬁle events and encryption are

6

(a) The attribution of clean region of ransomware execution log. All
of the time steps in this plot have negative or zero attribution.

Fig. 13: The attribution of an adversarial sample log for
LSTM model. An adversarial sample was synthesized by
inserting six benign I/O events (low attribution events) be-
tween malicious events. The orange bar indicates the de-
coy/malicious events. The attribution amount of decoy event is
less than one tenth comparing to the same event from Figure
12(b). This sample was predicted as a negative with score
0.01. The original sample without insertion has a positive label
with score 0.96

illustrates the I/O event insertion effects. Inserting low attribution
events to the log does blur the attribution of malicious events. Also
if an adversary could avoid generating high entropy events, e.g. by
a partial encryption etc., the entropy feature could become futile.
Although entropy is an effective trait to detect encryption, it is also
an obvious feature for adversary to dodge. To defense adversaries,
ML model based on few simple features won’t be robust based on
our Red team attacking tests. The ideal ML detector should based on
multiple featuring methods and inference by an ensemble algorithms.
An inference based on collective features increases the depth of
defense and could make adversaries more difﬁcult to evade.

Most of existing data augmentation techniques were developed by
computer vision community. They were widely used on convolution
neural network related applications for image, video and audio
datasets. In an image sample, each feature/pixel could be an arbitrary
value. But for time series data, such as execution log or API call
log, these augmentation techniques did not ﬁt well and may cause
the “synthetic gap”. The synthetic gap is the discrepancy between the
synthetic and “real” samples. The time series data consist a sequence
of observations which may have temporal dependence between them.
For example, “write ﬁle” event need to go after the “open ﬁle” event
etc. The generated samples won’t make sense or is “un-real”, if the
temporal relationships or important key observation don’t exist.

The ”keyed” method to synthesize new time-series samples was

(b) The attribution of malicious region of ransomware execution
log. The blue bar point to right has positive contribution to positive
prediction. The orange bar is a label for the events from decoy ﬁles
(found by the keyword ”myFile”). The pattern for blue and orange
bars are matched well.

Fig. 12: The attribution results of Integrated Gradients for
a ransomware execution log. The left part of the diagram
is the list of raw features (ﬁlename, event type, entropy &
sequence number). The right part is the attribution amount
from Integrated Gradients method (blue bar) and the ﬂags for
decoy/canary ﬁles (orange bar)

victim ﬁles. The simulated ransomware didn’t know the weights or
architectures of the model, but do assume the I/O event and entropy
of ﬁle content were used for featuring. Attacks by changing the I/O
event pattern, e.g. slowing down the malicious activities, may have
a higher risk for an adversary to be detected. Actively insert benign
events to blur malicious ones would be a better option for evasion.
the attribution of a synthesized ransomware log,

Figure 13,

7

proposed in this paper. It can avoid the “synthetic gap” and the extra
ﬁltering. It relies on human to identify a set of “key observations” and
preserves the feature constraints before applying data augmentation
methods. With the help of domain experts, the heuristics or known
golden rules were identiﬁed,
the “close-to-real” variants can be
promptly generated in the data space. Please see Figure 7.

VI. ACKNOWLEDGEMENTS
I would like to thank Erdem Aktas, Li Chen and Zheng Zhang
for their expert advises and encouragements throughout this project.
This project would have been impossible without the pioneer data
collection program from Erdem Aktas.

REFERENCES

[1] 27 Terrifying Ransomware Statistics & Facts You Need To Read. https:

//phoenixnap.com/blog/ransomware-statistics-facts, 2019.

[2] Apache Spark. https://github.com/apache/spark, 2019.
[3] AutoIt Scripting Language.

https://www.autoitscript.com/site/autoit/,

2019.

[4] Information theory.

https://en.wikipedia.org/wiki/Information theory,

2019.

[5] Integrated Gradients. https://github.com/ankurtaly/Integrated-Gradients,

2019.

[6] Keras. https://github.com/keras-team/keras, 2019.
[7] Resilient ML Research

-Platform.
Resilient-ML-Research-Platform, 2019.

https://github.com/intel/

[8] Scikit-Learn. https://github.com/scikit-learn/scikit-learn, 2019.
[9] Tensorﬂow. https://github.com/tensorﬂow/tensorﬂow, 2019.
[10] Bander Al-rimy, Mohd Maarof, and Syed Shaid. Ransomware threat
success factors, taxonomy, and countermeasures: A survey and research
directions. Elsevier Computers & Security: 74 144–166, 2018.

[11] N. V. Chawla, K. W. Bowyer, L. O. Hall,

and W. P.
Kegelmeyer. SMOTE: Synthetic Minority Over-sampling Technique.
arXiv:1106.1813 [cs.AI], 2011.

[12] Li Chen, Chih-Yuan Yang, Anindya Paul, and Ravi Sahita. Towards
resilient machine learning for ransomware detection. arXiv:1812.09400,
2018.

[13] Bradley Efron. Bootstrap Methods: Another Look at the Jackknife. The

Annals of Statistics, 1979 Vol 7, No 1, 1-26, 1979.

[14] Ian J. Goodfellow, Jonathon Shlens, and Christian Szegedy. Explaining
and Harnessing Adversarial Examples. arXiv:1412.6572v3, 2015.

[15] gilmer,

muelly,

beenkim@google.com
juliusad@mit.edu. Sanity Checks for Saliency Maps. NIPS 2018
arXiv:1810.03292v2, 2018.

goodfellow,

mrtz,

[16] Amin kharraz, Sajjad Arshad, Collin Mulliner, Willian Robertson, and
Engin kirda. Unveil: A large-scale, automated approach to detecting
ransomware. 25th USENIX Security Symposium (USENIX Security 16),
2016.

[17] Diederik P. Kingma and Max Welling. An Introduction to Variational

Autoencoders. arXiv:1906.02691 [cs.LG], 2016.

[18] Nolen Scaife, Henry Carter, Patrick Traynor, and Kevin R.B. Butler.
CryptoLock (and Drop It): Stopping Ransomware Attacks on User Data.
2016 IEEE 36th International Conference on Distributed Computing
Systems, 2016.

[19] Daniele Sgandurra, Luis Mu˜noz-Gonz´alez, Rabih Mohsen, and Emil C.
Lupu. Automated dynamic analysis of ransomware: Beneﬁts, limitations
and use for detection. arXiv preprint arXiv:1609.03020, 2016.

[20] Connor Shorten and Taghi M. Khoshgoftaar. A survey on Image Data
Journal of Big Data, volume 6,

Augmentation for Deep Learning.
Article number: 60, 2019.

[21] Mukund Sundararajan, Ankur Taly, and Qiqi Yan. Axiomatic Attribution

for Deep Networks. arXiv preprint arXiv:1703.01365, 2017.

[22] Sebastien C. Wong, Adam Gatt, Victor Stamatescu, and Mark D.
McDonnell. Understanding data augmentation for classiﬁcation: when
to warp? arXiv:160908764v2, 2016.

8

