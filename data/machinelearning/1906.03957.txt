9
1
0
2

y
a
M
4
2

]
L
P
.
s
c
[

1
v
7
5
9
3
0
.
6
0
9
1
:
v
i
X
r
a

Type-Driven Automated Learning with LALE

Martin Hirzel, Kiran Kate, Avraham Shinnar, Subhrajit Roy, Parikshit Ram
IBM Research
{hirzel,kakate,shinnar}@us.ibm.com,subhrajit.roy@au1.ibm.com,parikshit.ram@ibm.com

Abstract

Machine-learning automation tools, ranging from humble grid-search to hyperopt,
auto-sklearn, and TPOT, help explore large search spaces of possible pipelines.
Unfortunately, each of these tools has a different syntax for specifying its search
space, leading to lack of portability, missed relevant points, and spurious points
that are inconsistent with error checks and documentation of the searchable base
components. This paper proposes using types (such as enum, ﬂoat, or dictionary)
both for checking the correctness of, and for automatically searching over, hyper-
parameters and pipeline conﬁgurations. Using types for both of these purposes
guarantees consistency. We present LALE, an embedded language that resembles
scikit learn but provides better automation, correctness checks, and portability.
LALE extends the reach of existing automation tools across data modalities (tables,
text, images, time-series) and programming languages (Python, Java, R). Thus,
data scientists can leverage automation while remaining in control of their work.

1

Introduction

When machine-learning practitioners assemble and conﬁgure pipelines of data transformations and
machine-learning models, they face an over-abundance of choices. Fortunately, there are tools such
as GridSearchCV [3], hyperopt [2], auto-sklearn [8], and TPOT [23] that automatically search over a
space of such choices for combined algorithm selection and hyperparameter optimization (CASH).
This paper presents a novel type-driven approach for making CASH tools easier to use correctly and
more portable, thus expanding the set of people who can beneﬁt from data science automation.

Unfortunately, previous CASH tools each have their own syntax for specifying the search space, which
the user must learn. In practice, the search space often includes invalid points, causing the underlying
library to report an error or to produce useless results. To prevent that, users often overcorrect
by considering only an obviously valid subset of the search space, at the risk of missing relevant
points. As the search space speciﬁcation is a code artifact that is separate from the documentation or
error-checks of the underlying library, maintaining it is labor intensive and brittle. This is exacerbated
by the fact that to use multiple CASH tools, one must specify the same search space multiple times.
One work-around is to only use speciﬁcations pre-bundled with the tool, but that limits the available
operators (transformers or estimators).

The goals of this paper are automation together with usability and portability. For automation, we aim
to augment but not replace the data scientist, by letting them bind some free variables of their problem
space by automated search and others by hand. We refer to this as lifecycle as bindings, because
binding free variables (e.g., conﬁguring hyperparameters) transitions a pipeline to the next lifecycle
state (e.g., makes it trainable). For usability, we aim to retain the familiar interfaces of popular libraries
while improving correctness by embracing the DRY (don’t repeat yourself) principle [13]. And for
portability, we offer a pluggable middleware that is independent of any particular machine-learning
library or CASH tool and even works seamlessly across different programming languages.

Preprint. Under review.

 
 
 
 
 
 
This paper introduces LALE, an implementation of our type-driven learning automation approach.
LALE (Language for Automated Learning Exploration) is a new domain-speciﬁc embedded language
(DSEL, [12]) designed around JSON Schema [26] and scikit learn [3]. As a DSEL, LALE tries to
combine the best qualities of a library and a language. On the one hand, LALE is a pip-installable
Python library so users can edit code in familiar Python syntax using Python tooling such as Jupyter,
MyPy, or IDEs. On the other hand, LALE includes a compiler that auto-generates search spaces for
CASH tools; LALE provides pipeline combinators that guarantee consistency across the lifecycle;
and LALE avoids mutable state and magic strings, making it more robust.

LALE is compatible with scikit learn [3] in an attempt to capitalize on its many good qualities, includ-
ing familiarity, ease of use, clear basic concepts, many operators, wide adoption, and interoperability
with other libraries. LALE search spaces and LALE pipelines can include operators written in Python,
Java, and R. LALE uses JSON Schema [26], a type system for JSON, for type annotations on hyper-
parameters. We found JSON Schema to be well-suited to capture the intricacies of hyperparameters
including categorical and continuous values and conditional dependencies. Furthermore, JSON
Schema is widely adopted and on a path to standardization. There are JSON Schema validators in
Python, JavaScript, Java, and several other programming languages. Furthermore, JSON Schema is
closely linked to Swagger for specifying web APIs, which can be used to serve data science pipelines.

The contributions of this paper are:

• Lifecycle as bindings. LALE lets users bind some free variables of their problem space by
automated search and others by hand. These bindings in an operator determine which state
of its lifecycle it is in, thus giving users ﬁne-grained control and transparency (Section 3).

• Types as search spaces. LALE uses types, encoded using JSON Schema, as a single source of
truth not just for correctness checks (the traditional purpose of types) but also for automation
(by novel compilers to tool-speciﬁc search spaces) (Section 4).

• Scikit learn-compatible portability. LALE adopts a novel technique for simultaneously
being compatible with scikit learn but also more portable, allowing seamless interoperability
between machine learning and deep learning and between Python, Java, and R (Section 5).

This paper demonstrates LALE with case studies from four different data modalities: tables, text,
images, and time-series. This generality of modality demonstrates LALE’s portability. Overall, we
argue that our type-driven approach makes machine learning more automated, usable, and portable.

2 Related Work

Combined algorithm selection and hyperparameter optimization (CASH) requires a library of data sci-
ence operators (transformers or estimators). Popular such libraries include scikit learn [3], Weka [10],
R [15], pandas [20], Keras [6], and Spark MLlib [21]. Most of them have high-quality human-
readable documentation but lack machine-readable speciﬁcations of the induced search spaces. Thus,
such speciﬁcations are left to individual CASH tools. Weka stands out by specifying hyperparameter
types but does not specify conditional hyperparameter dependencies. LALE currently wraps operators
from scikit learn, Weka, and R, and provides detailed machine-readable speciﬁcations for them.

Most CASH tools expose a syntax for specifying their search space, and Table 1 compares how
expressive that is. Each point in a search space is a pipeline conﬁgured with its operator choices and
hyperparameter values. For ease of comparison, we look past superﬁcial choices of identiﬁers and

Table 1: Search space speciﬁcation expressiveness of CASH tools.

cat
(cid:88)
GridSearchCV
RandomizedSearchCV (cid:88)
(cid:88)
auto-sklearn (SMAC)
(cid:88)
hyperopt
(cid:88)
TPOT
LALE (JSON Schema) (cid:88)

cont

(cid:88)
(cid:88)
(cid:88)

(cid:88)

∧

dict ∨
(cid:88) (cid:88)
(cid:88)
(cid:88)
(cid:88) (cid:88)
(cid:88) (cid:88)
(cid:88) (cid:88) (cid:88) (cid:88)

¬ cond

(cid:88)

nesting
∨(dict{cat∗}∗)
dict{cat∗, cont∗}
dict{cat∗, cont∗} ∧ cond∗
fully nested
∨(dict{cat∗}∗)
fully nested

2

symbols to the underlying concepts: categoricals (cat), continuous (cont), dictionary (dict), Boolean
connectives (∨, ∧, ¬), and conditional (cond). The ﬁnal column summarizes how these can be nested.

Grid search is a humble but effective way to explore a search space. Many data science libraries
implement it; here, we focus on GridSearchCV from scikit learn [3]. It supports search spaces
of the form ∨(dict{cat∗}∗): a top-level disjunction of dictionaries of categorical hyperparameters.
Continuous hyperparameters must be discretized for use with GridSearchCV. Grid search has the
advantage of not getting stuck in local minima, but may miss relevant points due to discretization, and
it is slow for large grids. Most people use it only for hyperparameter tuning (not algorithm selection).
The LALE compiler has a backend that turns GridSearchCV into a full-ﬂedged CASH tool.

Randomized search, like grid search, cannot get stuck in local minima. In scikit learn, Random-
izedSearchCV, unlike GridSearchCV, lacks Boolean connectives such as a ∨ necessary for handling
algorithm selection or conditional hyperparameters, making it insufﬁcient for full-ﬂedged CASH.

SMAC (Sequential Model-based Algorithm Conﬁguration) is one way to approximate the probabilistic
dependency of the loss on the search space point, using an acquisition function to balance exploration
against exploitation [14]. SMAC is used internally by both auto-Weka [30] and auto-sklearn [8]. Its
search spaces have the form dict{cat∗, cont∗} ∧ cond∗, so it supports conditional hyperparameters
directly and algorithm selection indirectly via synthetic indicator hyperparameters. The LALE
compiler has a SMAC backend that takes advantage of these.

Hyperopt [2], and consequently hyperopt-sklearn [17], uses TPE (Tree-structured Parzen Estima-
tor [1]) to model the loss across the search space. Its search spaces support ∨, thus enabling algorithm
selection and conditional hyperparameters. The LALE compiler also has a backend for hyperopt.

TPOT (Tree-Based Pipeline Optimization Tool [23]) uses genetic algorithms. Continuous hyperpa-
rameters must be discretized for use with TPOT. In essence, its search space speciﬁcation has the
same form as in GridSearchCV, even though at the surface, its syntax differs. Unlike the other CASH
tools discussed here, TPOT can explore new graph topologies for pipelines.

In contrast to scikit learn’s GridSearchCV or RandomizedSearchCV, SMAC, hyperopt, or TPOT,
LALE uses JSON Schema [26] to specify search spaces. JSON Schema, normally used for correctness
checks, turns out to be an expressive basis for specifying constrained search spaces. Furthermore, it
is independent of individual machine learning libraries, CASH tools, or programming languages.

One focus of LALE is portable learning automation: LALE enables off-the-shelf CASH tools to
discover pipelines that mix operators from Python, Java, and R. In earlier work, PMML provided an
interchange format to export and import machine learning operators across libraries and languages [9].
Spark MLlib is available via APIs in different languages [21]. And Kubeﬂow Pipelines are designed
for portable machine learning workﬂows based on Docker containers [19]. In contrast to PMML,
Spark MLlib, or Kubeﬂow Pipelines, LALE is designed to facilitate automation. In future work,
LALE may offer interoperability with these technologies to improve scaling.

3 Lifecycle as Bindings

Machine learning pipelines have their own lifecycle. For CASH, the relevant lifecycle transitions
encompass selecting operators from a library and arranging them into candidate pipelines; tuning
hyperparameters; and ﬁnally training and evaluating candidates to ﬁnd the best. We wanted to give
data scientists ﬁne-grained control over which transitions to do manually and which to automate.
However, this posed a DSEL design challenge: how can LALE offer a uniﬁed experience for the
manual and automated tasks? Such as a uniﬁed experience is crucial to ensure a pipeline remains
consistent throughout its lifecycle and to help the data scientist understand the results of automation.

LALE offers three combinators for arranging operators into pipelines: >>, &, and |. The >> com-
binator behaves like scikit learn’s make_pipeline. The & combinator behaves like scikit learn’s
make_union, except without concatenating the features at the end. Instead, LALE provides a separate
ConcatFeatures operator to increase ﬂexibility. The | combinator implements operator choice and
does not have an equivalent in scikit learn. Users can also write | as make_choice.

Figure 1 illustrates how to perform lifecycle transitions manually for a text classiﬁcation example.
Line 1 imports BERT [7], a text embedding based on neural networks, in this case pre-trained and
implemented in PyTorch [25]. Line 2 imports the scikit-learn logistic regression as LR. Lines 3–5

3

conﬁgure the hyperparameters of
both BERT and LR and arrange
them into a pipeline using the >>
combinator. Note the argument
LR.solver.sag is a Python enumer-
ation, which LALE auto-generates
from the same JSON schema used
for search spaces. Lines 6–7 visual-
ize the computational graph. LALE
reﬂects the name used in the source
code in the visualization, e.g., LR in-
stead of LogisticRegression. Node
colors indicate lifecycle states, here
white for trained and light blue for
trainable. It is a static error to call
predict or transform on an operator
unless it is trained. Line 8 trains the pipeline, resulting in a new pipeline trained that is distinct from
the original trainable. Keeping these in separate Python variables and objects makes it easier to
track lifecycle states and should also help parallel or cloud-based execution and prevent accidental
overwrite, e.g., during k-fold cross validation. Calling predict in Line 9 is valid. Lines 10–11 show
that trained is fully trained (all white) and consistent with trainable (same graph topology).

Figure 1: Manual text processing pipeline example.

Figure 2 automates lifecycle
transitions for this example.
Lines 1–5 import a few more
operators. Line 6 arranges
them in a pipeline. But unlike
the earlier example, it does not
manually bind all operator se-
lections, nor does it manually
bind hyperparameters. We re-
fer to the lifecycle state where
these properties are still free
(not yet bound) as planned.
Lines 7–8 visualize the compu-
tational graph, rendering both
steps in a darker blue to indi-
cate their planned state. To-
gether with the hyperparame-
ter schemas of individual operators, a planned pipeline induces a search space. It is a static error to
call fit on an operator unless it is trainable. Line 8 imports a CASH tool, and Line 9 instantiates it
for our planned pipeline. Line 10 runs the CASH tool to bind the free properties of planned, resulting
in trained2. Lines 11-12 demonstrate visually that the end result is fully trained and has bound
operator choices consistent with the original planned pipeline.

Figure 2: Automated text processing pipeline example.

Pipeline

Individual operator

schemas, tags, priors

Table 2: Properties bound by lifecycle state.

Meta-model
Planned
Trainable
Trained

Table 2 summarizes the lifecycle
concepts. States are ordered from
top to bottom. An operator is in a
given state if all properties up to
that state are already bound. Prop-
erties in later states may still be
free. In other words, each lifecy-
cle state has a superset of the bound properties of its predecessor state. Each method, such as
fit or predict, requires certain bound properties, such as hyperparameters or learned coefﬁcients.
Therefore, each lifecycle state also supports a superset of the methods of its predecessor. Pretrained
methods, such as pretrained BERT, have no-op training. The state of an entire pipeline is the least
upper bound of the states of its steps. CASH tools may automate one or multiple state transitions. For
instance, TPOT can bind the graph topology [23] whereas hyperopt uses a pre-speciﬁed topology [2].
LALE also supports partial bindings, for instance, setting some hyperparameters manually and others
automatically, or transfer learning where some learnable coefﬁcients are pretrained and frozen.

composable elements
graph topology
operator choices

hyperparameters
learned coefﬁcients

4

12345678910111234567889101112Implementing LALE required some innovation in domain-speciﬁc embedded languages (DSELs [12]).
First, we wanted to get the beneﬁts of static typestate checking [29], such as error message or
auto-complete proposals, but with off-the-shelf Python tooling. We accomplished this by making the
lifecycle states manifest in the code as classes and making each state a subclass of its predecessor. For
instance, Trainable is a subclass of Planned and adds a fit method. In addition, we added Python 3
type annotations to guide error checking tools. For instance, the return type of fit is Trained.

One problematic case was omitting the predict or transform methods from Trainable. Scikit learn
allows users to call ﬁrst fit and then predict or transform on the same object (of the same class).
To ease adoption, we took a softer approach: we gave Trainable a predict or transform method
but made it deprecated. That way, users are encouraged but not forced to adopt a coding style that
cleanly separates lifecycle states. Users can even disable the deprecation warning if they so desire.

The LALE combinators >>, &, and | work uniformly at all lifecycle states, from planned (Figure 2) to
trainable and (pre-)trained (Figure 1). Getting this consistent experience to work posed a challenge:
whereas scikit learn implements the trainable and trained states via instance methods, it implements
the planned state as a class, not an instance. For LALE, this was problematic, because Python cannot
overload >>, &, and | as class methods. Our solution was to consistently implement all lifecycle states
via instance methods. One special case is that scikit learn sets hyperparameters with a constructor such
as BERT(batch_size=126); to turn this into an instance method, LALE overloads Planned.__call__.

Finally, we wanted to make it easy for operator developers to contribute operators to LALE. They
should only have to write one class per operator, not one class per state per operator. Also, they
should only have to write scikit learn style constructors, not overload __call__. LALE solves this
by applying state wrappers around contributed operator implementations. The wrappers follow the
hierarchy discussed before, creating new instances of the wrapped implementation classes as needed.

4 Types as Search Spaces

This section describes how to translate from a LALE search space to search spaces for three popular
CASH tools: scikit learn’s GridSearchCV [3], SMAC [14], and hyperopt [2]. These are the most
interesting cases from Table 1; we omitted RandomizedSearchCV because it is not expressive enough
and TPOT [23] because its search space speciﬁcation has the same form as that of GridSearchCV. A
LALE search space is induced by a LALE pipeline (which may involve the choice combinator ‘|’)
alongside the JSON schemas for the hyperparameters of each step in the pipeline. To avoid missing
relevant points and to avoid including invalid points, these schemas frequently include constraints for
conditional hyperparameters. Our compiler needs to preserve the search space including constraints.

As a running example, consider the LALE pipeline PCA >> (J48 | LR), where PCA and LR are the
principal component analysis and logistic regression from scikit learn and J48 is a decision tree with
pruning from Weka [10]. These operators have many hyperparameters and constraints and LALE
handles all of them. For didactic purposes, this section discusses only a representative subset:

PCA : dict{N : (0..1) ∨ [mle])}
J48 : dict{R: [true, false], C: (0..1)} ∧ (dict{R: ¬[true]} ∨ dict{C: [0.25]})
LR : dict{S: [linear, sag, lbfgs], P : [l1, l2]} ∧ (dict{S: ¬[sag, lbfgs]} ∨ dict{P : [l2]})

The number of components for PCA is given by N , which can be a continuous value in (0..1) or the
categorical value mle. J48 has a categorical hyperparameter R to enable reduced error pruning and
a continuous conﬁdence threshold C for pruning; the side constraint indicates that when R is true
then C must be 0.25. LR has two categorical hyperparameters S (solver) and P (penalty); the side
constraint indicates that solvers sag and lbfgs only support penalty l2.

LALE’s search space compiler has two phases: normalizer and backend. The normalizer transforms
the schemas of individual operators separately. The backend combines the schemas for the entire
pipeline and generates a search space in the format required by a given CASH tool.

The normalizer processes the schema for an individual operator in a bottom-up pass. The desired end
result is a search space in LALE’s normal form, which is ∨(dict{cat∗, cont∗}∗). At each level, the
normalizer simpliﬁes children and hoists disjunctions up. Simpliﬁcation applies several semantics-
preserving rewrites to keep the size of the search space speciﬁcation manageable and to reduce the
burden on the tool-speciﬁc backends, for instance:

5

s0 ∨ ⊥ ⇒ s0

s0 ∧ (cid:62) ⇒ s0

¬(s0 ∨ s1) ⇒ (¬s0) ∧ (¬s1)

[cat0] ∧ [cat1] ⇒ [cat0 ∩ cat1]
dict{k0 : s0, k1 : s1} ∧ dict{k0 : s(cid:48)

0, k1 : s1} ⇒ dict{k0 : s0 ∧ s(cid:48)

[cat0] ∧ ¬[cat1] ⇒ [cat0 \ cat1]
0, k1 : s1}

Disjunction hoisting moves ∨ up to the top-level, using semantics-preserving rewrites such as:

(s0 ∨ s1) ∧ (s2 ∨ s3) ⇒ (s0 ∧ s2) ∨ (s0 ∧ s3) ∨ (s1 ∧ s2) ∨ (s1 ∧ s3)
0, k1 : s1} ⇒ dict{k0 : s0, k1 : s1} ∨ dict{k0 : s(cid:48)
0, k1 : s1}

dict{k0 : s0 ∨ s(cid:48)

The normalizer always terminates, making a single bottom-up pass. Its output speciﬁes the same
search space as the input since the individual rewrites preserve semantics. The normalizer is not
guaranteed to reach normal form, but we test that it does so for all operators in the LALE library. It
also may generate redundant choices. The resulting normalized schemas for our running example are:

PCA : dict{N : (0..1)} ∨ dict{N : [mle]}
J48 : dict{R: [false], C: (0..1)} ∨ dict{R: [true, false], C: [0.25]}
LR : dict{S: [linear], P : [l1, l2]} ∨ dict{S: [linear, sag, lbfgs], P : [l2]}

The SMAC backend implements the >> and & combinators by concatenating the hyperparameter
dictionaries of the individual steps. The SMAC backend adds a discriminant property D into each
dictionary to track choices made for the | combinator, which it implements via ‘∨’ branches. It makes
hyperparameter names unique by adopting the scikit-learn name mangling convention of op__hp.
Here is the generated SMAC search space, eliding name mangling for readability:

dict{N : (0..1), D: [J48], R: [false],

∨ dict{N : (0..1), D: [J48], R: [true, false],
∨ dict{N : [mle], D: [J48], R: [false],
∨ dict{N : [mle], D: [J48], R: [true, false],
∨ dict{N : (0..1), D: [LR], S: [linear],
∨ dict{N : (0..1), D: [LR], S: [linear, sag, lbfgs], P : [l2]
∨ dict{N : [mle], D: [LR], S: [linear],
∨ dict{N : [mle], D: [LR], S: [linear, sag, lbfgs], P : [l2]

C: (0..1) }
C: [0.25] }
C: (0..1) }
C: [0.25] }
P : [l1, l2]}
}
P : [l1, l2]}
}

The GridSearchCV backend works similarly to the SMAC backend, but adds one additional step.
It discretizes each continuous hyperparameter into a categorical. It accomplishes this by sampling
a user-conﬁgurable number of random values from the range and distribution of the continuous
hyperparameter. LALE adds a distribution property in JSON Schema which is ignored by schema
validators but used by our compiler. Here is an excerpt of the generated GridSearchCV search space:

dict{N : [0.21, 0.65, 0.84], D: [J48], R: [false],

C: [0.07, 0.30, 0.89]} ∨ . . .

∨ dict{N : [mle],

D: [LR], S: [linear, sag, lbfgs], P : [l2]

}

The hyperopt backend takes advantage of the fact that hyperopt supports fully nested search spaces.
It adds a top-level ‘dict’ over steps of the >> and & combinator, with a nested ‘∨’ over choices of
the | combinator. At the innermost level, it simply includes per-step normalized schemas with
discriminants D. Here is the generated hyperopt search space for our running example:





dict



1 :





∨

0 : dict{N : (0..1)} ∨ dict{N : [mle]}

(cid:18) dict{D: [J48], R: [false],

C: (0..1)}
∨ dict{D: [J48], R: [true, false], C: [0.25]}

(cid:19)

(cid:18) dict{D: [LR], S: [linear],

∨ dict{D: [LR], S: [linear, sag, lbfgs], P : [l2]

P : [l1, l2]}
}











(cid:19)

Finally, in addition to a compiler that generates tool-speciﬁc search spaces, LALE also provides a
reverse mapping from a point in a tool-speciﬁc search space back to a trainable LALE pipeline, which
is essential for computing the loss being minimized by the CASH solver. This reverse mapping uses
the discriminant D to select an algorithm from the | operator. It then strips out the discriminant.
Furthermore, the reverse mapping interprets the op__hp name mangling to associate hyperparameters
with operators, then strips out the operator part and conﬁgures the hyperparameter.

6

5 Sklearn Compatible Portability

The auto-sklearn paper [8] reported a few cases where auto-Weka [30] performed better. Often, this
was because “the best classiﬁer it chose is not implemented in scikit-learn (trees with a pruning
component)” [8]. Since scikit learn is Python-based and Weka is Java-based, the two are non-trivial
to use side-by-side. LALE simpliﬁes using operators from different programming languages, for
different data modalities, and for DL (deep learning) and non-DL models in the same pipeline. Such
mixed pipelines support both manual (e.g. Figure 1) and automated (e.g. Figure 2) machine learning.
Additionally, LALE provides familiar syntax for features in scikit learn, making it easy for new users.
LALE pipelines can also be passed to off-the-shelf scikit learn components such as cross validation or
GridSearchCV. Supporting them was challenging as they expect speciﬁc behaviors of pipelines.

For a concrete example, we picked one of the cases where auto-Weka outperformed auto-sklearn:
the Car dataset [4] and the J48 operator, which is a tree with a pruning component. We also trained
various other operators on the same dataset: arulesCBA (classiﬁcation based on association rules [16])
from R, a highly interpretable classiﬁer; XGBoost [5], a popular implementation of boosting with
decision trees; and a few scikit learn operators such as logistic regression. This involved wrapping
non-Python operators for use with LALE. The JSON Schema part worked the same irrespective of
the programming language: in all cases, it was straightforward to express side constraints which
our search space compiler could translate for CASH tools. For Java interoperability, we used
the Python packages javabridge and weka, then wrote a modest amount of additional glue code
to wrap J48 for LALE. For R interoperability, we used the Python package rpy2, then wrote a
wrapper ARulesCBAClassifier for LALE. One tricky bit was that arulesCBA uses R’s lazy evaluation
feature [22], so we needed to create uninterpreted Formula objects to pass across the rpy2 interface.

To enable using scikit learn components such as GridSearchCV on LALE pipelines, LALE provides a
compatibility wrapper for pipelines. This supports the sklearn.base.clone and set_params method.
sklearn.base.clone is recursive and attempts to do all of its work with set_params if available, but
set_params is impractical for cloning operators in Java or R and for cloning some advanced LALE
features such as the | combinator. The LALE wrappers prevent this recursive behavior.

6 Experiments

This section demonstrates LALE’s portability via different data modalities and evaluates LALE’s
search space compiler. The value proposition of LALE is to leverage existing CASH tools effectively
and in a portable manner; in general, we do not expect LALE to outperform them.

To demonstrate portability, we picked four datasets from different modalities. For each dataset, we
speciﬁed a planned pipeline with operator choices in LALE, and then used hyperopt to pick the best
operators and tune their hyperparameters. Table 3 summarizes the results.

Text. For this modality we used the Movie Reviews dataset for binary sentiment classiﬁcation [24].
The planned pipeline is (BERT | TFIDF) >> (LR | MLP | KNN | SVC | PAC), as seen in Figure 2.
The best pipeline discovered by hyperopt was BERT >> LR. While the accuracy of 77.2% does not
match the state of the art, it is decent considering that the classiﬁer is a simple logistic regression.

Table. For this modality we used the Car dataset [4], consisting of structured data with categorical
features, which we label-encoded. The planned pipeline is J48 | ARules | LR | KNN, where J48
from Weka [10] is implemented in Java and ARules is implemented in R [16]. The best choice
discovered by hyperopt was J48 from Weka, which means that portability paid off.

Table 3: Performance of the best pipeline found using LALE with hyperopt. In all cases, the hyperopt
trials used average 10-fold cross validation on the training set. For datasets that have a pre-deﬁned
train-test split, this table reports the accuracy on the test set, averaged over 3 experiments.

Modality

Dataset

Iterations Accuracy (stdev) Accuracy type

Text
Table
Image
Time-series

Movie Reviews [24]
Car [4]
CIFAR-10 [18]
Epilepsy [28]

100
1000
50
50

77.20% (0.1)
98.07% (0)
93.53% (0.1058)
73.15% (8.2)

10-fold crossval
test accuracy
test accuracy
test accuracy

7

Image. For this modality we used the CIFAR-10 computer vision dataset [18]. We picked the
ResNet50 [11] deep-learning model, since it has been shown to do well on CIFAR-10.
In our
experiments, we kept the architecture of ResNet50 ﬁxed, but varied hyperparameters for learning
procedure (number of epochs, batch size, learning rate, and the type of learning rate decay).

Time-series. For this modality we used the Epilepsy dataset, which is a subset of the TUH Seizure
Corpus [28], for classifying seizures by onset location (generalized or focal). We implemented a
popular pre-processing method [27] in a WindowTransformer operator with three hyperparameters
W , O, and T . Note that this transformer leads to multiple samples per seizure. Hence, during
evaluation, each seizure is classiﬁed by taking a vote of the predictions made by each sample generated
from it. The planned pipeline is WindowTransformer >> (KNN | XGBoost | LR) >> Voting. The
transformer increases the number of rows, the classiﬁer works per-row, and the voting decreases the
number of rows. LALE pipelines can handle such non-trivial transformations and evaluations. The
best pipeline discovered by hyperopt was WindowTransformer >> KNN >> Voting.

side
on

search
compiler
hy-
rich

Figure 3: Convergence with planned pipeline LR | KNN.

Effect of
constraints
convergence.
LALE’s
space
takes
perparameter
in-
schemas
side
cluding
and
constraints
translates
them
into semantically
equivalent search
spaces for differ-
ent CASH tools.
This
the
raises
question of how
important
those
side constraints are in practice. To explore this, we did an ablation study where we generated
not just the constrained search spaces that are default with LALE but also unconstrained search
spaces that drop side constraints. With hyperopt on the unconstrained search space, some iterations
are unsuccessful due to exceptions, for which we reported np.float.max loss. Figure 3 plots the
convergence for the Car dataset on the planned pipeline LR | KNN. Both of these operators have a few
side constraints. Whereas the unconstrained search space causes some invalid points early in the
search, the two curves more-or-less coincide after about two dozen iterations. The story looks very
different in Figure 4 when adding a third operator J48 | LR | KNN. In the unconstrained case, J48
has many more invalid runs, causing hyperopt to see so many np.float.max loss values from J48
that it gives up on it. In the constrained case, on the other hand, J48 has no invalid runs, and hyperopt
eventually realizes that it can conﬁgure J48 to obtain substantially better performance.

Figure 4: Convergence with planned pipeline J48 | LR | KNN.

Results for different CASH tools. To explore whether the search spaces for different tools are
indeed equivalent, we generated search spaces from the planned pipeline J48 | ARules | LR | KNN
for both hyperopt and GridSearchCV, then ran both tools on the Car dataset [4]. We ran hyperopt for
1000 iterations and GridSearchCV for 960 iterations (there is no way to control the exact number
of grid points in our grid search implementation). Both CASH tools selected the J48 operator and
converged to very similar but not completely identical hyperparameter conﬁgurations for it. Both
CASH tools yielded the same test accuracy of 98.07%.

7 Conclusion

This paper introduces LALE, a new Python DSEL for automated machine learning. LALE resembles
scikit learn [3] while extending it for using CASH tools such as SMAC [14] and hyperopt [2]. It
accomplishes this via three novel contributions rooted in type systems: lifecycle as bindings, types
as search spaces, and scikit learn-compatible portability. Collectively, these contributions help
machine-learning practitioners use more automation in a controlled and portable manner.

8

References

[1] James Bergstra, Rémi Bardenet, Yoshua Bengio, and Balázs Kégl. Algorithms for hyper-
parameter optimization. In Conference on Neural Information Processing Systems (NIPS),
pages 2546–2554, 2011.

[2] James Bergstra, Brent Komer, Chris Eliasmith, Dan Yamins, and David D. Cox. Hyperopt: a
Python library for model selection and hyperparameter optimization. Computational Science &
Discovery, 8(1), 2015.

[3] Lars Buitinck, Gilles Louppe, Mathieu Blondel, Fabian Pedregosa, Andreas Mueller, Olivier
Grisel, Vlad Niculae, Peter Prettenhofer, Alexandre Gramfort, Jaques Grobler, Robert Layton,
Jake VanderPlas, Arnaud Joly, Brian Holt, and Gaël Varoquaux. API design for machine
learning software: Experiences from the scikit-learn project, 2013. https://arxiv.org/
abs/1309.0238.

[4] Car dataset from auto-Weka sample datasets.

https://www.cs.ubc.ca/labs/beta/

Projects/autoweka/datasets/ (Retrieved May 2019).

[5] Tianqi Chen and Carlos Guestrin. XGBoost: A scalable tree boosting system. In Conference on

Knowledge Discovery and Data Mining (KDD), pages 785–794, 2016.

[6] Fran cois Chollet. Keras: The Python deep learning library, 2015. https://keras.io/

(Retrieved May 2019).

[7] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of
deep bidirectional transformers for language understanding, 2018. https://arxiv.org/abs/
1810.04805.

[8] Matthias Feurer, Aaron Klein, Katharina Eggensperger, Jost Springenberg, Manuel Blum, and
Frank Hutter. Efﬁcient and robust automated machine learning. In Conference on Neural
Information Processing Systems (NIPS), pages 2962–2970, 2015.

[9] Alex Guazzelli, Michael Zeller, Wen-Ching Lin, and Graham Williams. PMML: An open

standard for sharing models. The R Journal, 1(1):60–65, 2009.

[10] Mark Hall, Eibe Frank, Geoffrey Holmes, Bernhard Pfahringer, Peter Reutemann, and Ian H.
Witten. The WEKA data mining software: An update. SIGKDD Explorations Newsletter,
11(1):10–18, November 2009.

[11] Kaiming He, Xianyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for image

recognition, 2015. http://arxiv.org/abs/1512.03385.

[12] Paul Hudak. Modular domain speciﬁc languages and tools. In International Conference on

Software Reuse (ICSR), pages 134–142, 1998.

[13] Andrew Hunt and David Thomas. The Pragmatic Programmer: From Journeyman to Master.

Addison-Wesley, 1999.

[14] Frank Hutter, Holger H. Hoos, and Kevin Leyton-Brown. Sequential model-based optimization
for general algorithm conﬁguration. In International Conference on Learning and Intelligent
Optimization (LION), pages 507–523, 2011.

[15] Ross Ihaka and Robert Gentleman. R: A language for data analysis and graphics. Journal of

Computational and Graphical Statistics, 5(3):299–314, 1996.

[16] Ian Johnson and Michael Hahsler. Package ‘arulescba’, 2018. https://cran.r-project.

org/web/packages/arulesCBA/index.html (Retrieved May 2019).

[17] Brent Komer, James Bergstra, and Chris Eliasmith. Hyperopt-sklearn: Automatic hyperpa-
rameter conﬁguration for scikit-learn. In Python in Science Conference (SciPy), pages 32–37,
2014.

[18] Alex Krizhevsky, Vinod Nair, and Geoffrey Hinton. Cifar-10 (canadian institute for advanced re-
search). 2012. https://www.cs.toronto.edu/~kriz/cifar.html (Retrieved May 2019).

[19] The Kubeﬂow Authors. Kubeﬂow pipelines, 2018. https://www.kubeflow.org/docs/

pipelines/ (Retrieved May 2019).

[20] Wes McKinney. pandas: a foundational Python library for data analysis and statistics. Workshop
on Python for High Performance and Scientiﬁc Computing (PyHPC), pages 1–9, 2011.

9

[21] Xiangrui Meng, Joseph K. Bradley, Burak Yavuz, Evan R. Sparks, Shivaram Venkataraman,
Davies Liu, Jeremy Freeman, D. B. Tsai, Manish Amde, Sean Owen, Doris Xin, Reynold
Xin, Michael J. Franklin, Reza Zadeh, Matei Zaharia, and Ameet Talwalkar. MLlib: Machine
learning in Apache Spark. Journal of Machine Learning Research (JMLR), 17:34:1–34:7, 2016.
[22] Floréal Morandat, Brandon Hill, Leo Osvald, and Jan Vitek. Evaluating the design of the
R language. In European Conference for Object-Oriented Programming (ECOOP), pages
104–131, 2012.

[23] Randal S. Olson, Ryan J. Urbanowicz, Peter C. Andrews, Nicole A. Lavender, La Creis
Kidd, and Jason H. Moore. Automating biomedical data science through tree-based pipeline
In European Conference on the Applications of Evolutionary Computation
optimization.
(EvoApplications), pages 123–137, 2016.

[24] Bo Pang and Lillian Lee. Seeing stars: Exploiting class relationships for sentiment categorization
with respect to rating scales. In Annual Meeting of the Association for Computational Linguistics
(ACL), pages 115–124, 2005.

[25] Adam Paszke, Sam Gross, Soumith Chintala, Gregory Chanan, Edward Yang, Zachary DeVito,
Zeming Lin, Alban Desmaison, Luca Antiga, and Adam Lerer. Automatic differentiation in
PyTorch. In AutoDiff Workshop, 2017.

[26] Felipe Pezoa, Juan L. Reutter, Fernando Suarez, Martín Ugarte, and Domagoj Vrgoˇc. Foun-
dations of JSON schema. In International Conference on World Wide Web (WWW), pages
263–273, 2016.

[27] Kaspar Schindler, Howan Leung, Christian E. Elger, and Klaus Lehnertz. Assessing seizure
dynamics by analysing the correlation structure of multichannel intracranial EEG. Brain,
130(1):65–77, 11 2006.

[28] Vinit Shah, Eva von Weltin, Silvia Lopez, James Riley McHugh, Lillian Veloso, Meysam
Golmohammadi, Iyad Obeid, and Joseph Picone. The Temple University Hospital seizure
detection corpus. Frontiers in Neuroinformatics, 12:83, 2018.

[29] Robert E. Strom and Shaula Yemini. Typestate: A programming language concept for enhancing
software reliability. IEEE Transactions on Software Engineering (TSE), 12(1):157–171, 1986.
[30] Chris Thornton, Frank Hutter, Holger H. Hoos, and Kevin Leyton-Brown. Auto-WEKA:
Combined selection and hyperparameter optimization of classiﬁcation algorithms. In Conference
on Knowledge Discovery and Data Mining (KDD), pages 847–855, 2013.

10

