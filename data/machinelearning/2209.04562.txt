2
2
0
2

p
e
S
0
1

]
I
S
.
s
c
[

1
v
2
6
5
4
0
.
9
0
2
2
:
v
i
X
r
a

The Bayan Algorithm: Detecting Communities in
Networks Through Exact and Approximate
Optimization of Modularity

Samin Arefa,b,*, Hriday Chhedac,†, and Mahdi Mostajabdavehd,e,†

aDepartment of Mechanical and Industrial Engineering, University of Toronto, Toronto, ON M5S3G8, Canada; bMax Planck Institute for Demographic Research, Rostock,
18057, Germany; cDepartment of Computer Science, University of Toronto, Toronto, ON M5S2E4, Canada; dDepartment of Mathematics and Industrial Engineering,
Polytechnique Montréal; eGERAD, Montreal, QC H3T1J4, Canada

This manuscript was compiled on September 13, 2022

Community detection is a classic problem in network science
with extensive applications in various ﬁelds. The most commonly
used methods are the algorithms designed to maximize a utility
function, modularity, across different ways that a network can
be partitioned into communities. Despite their name and design
philosophy, current modularity maximization algorithms generally
fail to maximize modularity or guarantee any proximity to an optimal
solution. We propose the Bayan algorithm which, unlike the existing
methods, returns network partitions with a guarantee of either
optimality or proximity to an optimal solution. At the core of the
Bayan algorithm is a branch-and-cut scheme that solves a sparse
integer programming formulation of the modularity maximization
problem to optimality or approximate it within a factor. We analyze
the performance of Bayan against 22 existing algorithms using
synthetic and real networks. Through extensive experiments, we
demonstrate Bayan’s distinctive capabilities not only in maximizing
modularity, but more importantly in accurate retrieval of ground-
truth communities.
Bayan’s comparative level of performance
remains stable over variations in the amount of noise in the data
(graph) generation process. The performance of Bayan as an exact
modularity maximization algorithm also reveals the theoretical capa-
bility limits of maximum-modularity partitions in accurate retrieval
of communities. Overall our analysis points to Bayan as a suitable
choice for a methodologically grounded detection of communities
through exact (approximate) maximization of modularity in networks
with up to ∼ 103 edges (and larger networks). Prospective advances
in graph optimization and integer programming can push these
limits further.

or guarantee proximity to a globally optimal solution. They
may result in degenerate solutions (3) of communities that
could be far from the underlying community structure (4).

Modularity is among the ﬁrst objective functions proposed
for optimization-based detection of communities (2, 5). Sev-
eral limitations of modularity including the resolution limit
(6) has led researchers develop alternative methods for de-
tecting communities using stochastic block modeling (7–10),
information theory (11, 12), and alternative objective functions
(13–15). In spite of its shortcomings, modularity is the most
commonly used method for community detection (16, 17).

We develop the Bayan algorithm, a novel community de-
tection method that is capable of providing a globally optimal
solution to the modularity maximization problem. Bayan can
also be implemented such that it provides an approximation
of the maximum modularity with a guarantee of proximity.
This algorithm is theoretically grounded by the Integer Pro-
gramming (IP) formulation of the modularity maximization
problem (18–20) and relies on an exact branch-and-cut scheme
for solving the NP-complete optimization problem to global
optimality. In keeping with the tradition of naming algorithms
after places (22, 24, 25), the name Bayan is chosen to repre-
sent the birthplaces of the developers. More information on
our proposed algorithm is provided in Materials and Methods
and detailed information is available in the Supplementary
Information (SI).

Keywords: Networks, community detection, modularity, optimization

Results

Community detection, the process of inductively identifying
clusters (communities) within a network, is a core problem in
physics, computer science, biology, and quantitative sociology
(1). Among common approaches for community detection are
the modularity maximization algorithms which are designed to
maximize a utility function, modularity (2), across all possible
ways that the nodes of the input network can be partitioned
into clusters. Modularity measures the fraction of edges within
communities minus the expected fraction if the edges were
distributed randomly; the random distribution of the edges is
a null model that preserves the degrees. Despite their name
and design philosophy, current modularity maximization algo-
rithms, which are used by no less than tens of thousands of
peer-reviewed studies, generally fail to maximize modularity

Using a range of real and synthetic networks, we provide three
evaluations of the performance of Bayan in comparison with
existing methods for maximizing modularity and/or detecting
communities.

Comparison with modularity maximization heuristics.
Most heuristic algorithms for modularity maximization tend

Author contributions: Conceptualization (SA); data curation (SA, HC); formal anal-
ysis (SA, MM); funding acquisition (SA); investigation (SA, MM); methodology (SA,
MM); project administration (SA); resources (SA, HC, MM); software (SA, HC, MM);
supervision (SA, MM); validation (SA, HC, MM); visualization (MM); writing - original
draft preparation (SA, MM); writing - review & editing (SA, MM)

Authors do not have any conﬂicts of interest to declare.

† HC and MM have contributed equally to this work.

* To whom correspondence should be addressed. E-mail: aref@mie.utoronto.ca

1

 
 
 
 
 
 
to scale well for large networks, but the scalability of these
heuristics come at a cost: their partitions have no guarantee of
proximity to an optimal solution(3).

For this analysis on maximizing modularity, we measure
the performance of the algorithms in terms of the fraction of
their modularity over maximum modularity and the similarity
between their partitions and a modularity-maximizing parti-
tion (optimal partition). We obtain optimal partitions using
Bayan with a termination criterion ensuring global optimal-
ity. Therefore, the baseline in this analysis is the Bayan algo-
rithm. We consider eight modularity maximization heuristics
known as greedy (21), Louvain (22), Leicht-Newman (LN)
(23), combo (16), belief (1), Paris (24), Leiden (25), and Ed-
Mot (26). These methods differ in approach and assumptions,
but they all attempt to maximize modularity or a variation of it.
For this evaluation, we include 29 small real networks* with
no more than 352 edges as well as 10 Erd˝os-Rényi graphs and
10 Barabási-Albert graphs.

For a quantitative measure of proximity to global optimality,
we deﬁne and use the Global Optimality Percentage (GOP) as
the fraction of the modularity returned by a heuristic method
for a network over the globally maximum modularity for that
network (obtained by Bayan). In cases where a heuristic algo-
rithm returns a partition with a negative modularity value, we
use 0 as the numerator of GOP to ensure GOP≥ 0.

We also use a quantitative measure for similarity of a par-
tition to an optimal partition. Normalized Adjusted Mutual
Information (AMI) (27) is a measure of similarity of partitions
which (unlike normalized mutual information (28)) adjusts the
measurement based on the similarity that two partitions may
have by pure chance. AMI for a pair of identical partitions (or
permutations of the same partition) equals 1. For two different
partitions, however, AMI takes a smaller value (including 0 or
small negative values for two extremely dissimilar partitions).
Figure 1 shows GOP on the y-axis and AMI on the x-axis for
each of the eight modularity maximization algorithms (colors
represent the algorithms). For each algorithm, there are 29
data points for the 29 real networks and 2 data points for the
average of 10 Erd˝os-Rényi and the average of 10 Barabási-
Albert graphs. The ﬁrst three letters of the network names
are indicated on each data point (magnify the ﬁgure on screen
for details). A 45-degree line is shown to indicate the cases
where the GOP and AMI are equal. In other words, the 45-
degree line shows cases where the optimality gap (1 − GOP)
causes a dissimilarity (1 − AMI) of the same size between the
sub-optimal partition and an optimal partition.

Looking at the y-axis values in Figure 1, we observe that
there is a substantial variation in the value of modularity (i.e.
extend of sub-optimality) for the partitions obtained by the
heuristic modularity maximization algorithms. The belief al-
gorithm returns partitions associated with negative modularity
values for most of the 49 instances (concentrated at the bottom

*The 29 networks are accessible in the network repository Netzschleuder with the following
names: ambassador, bison, cattle, ceo_club, dolphins, dom, dutch_criticism, dutch_school, elite,
ﬂorentine_families, game_thrones, high_tech_company, highschool, kangaroo, karate,
lesmis,
montreal, moreno_sheep, moreno_taro, moviegalaxies, november17, revolution, rhesus_monkey,
sa_companies, student_cooperation, terrorists_911, train_terrorists, windsurfers, zebras.

of Figure 1). The Paris algorithm is shown to return partitions
that are relatively far from an optimal solution. All data points
for Leiden and LN overlap for these 49 instances indicating
their identical performance in this experiment. The three algo-
rithms CNM, Leiden, and LN seem to have higher variation in
GOP (compared to the other algorithms) for these instances.
Overall, the three algorithms with highest and increasing per-
formance in returning close-to-maximum modularity values
are Edmot, Louvain, and combo respectively. However, even
these heuristics fail to maximize modularity on these 49 small
instances. In contrast, the Bayan algorithm succeeds in maxi-
mizing modularity and returning a globally optimal partition
for all the 49 instances (GOP = 1).

The x-axis values in Figure 1 show the considerable dis-
similarity between the sub-optimal partitions and an optimal
partition for these 49 instances. Some of the sub-optimal parti-
tions obtained by the algorithms CNM, Paris, LN, and Leiden
have AMI values smaller than 0.6. This indicates that not
only these modularity maximization algorithms do not gener-
ally maximize modularity, they return partitions substantially
different from an optimal partition. Even for data points con-
centrated at the top of Figure 1 which have GOP > 0.95, we see
AMI values substantially smaller than 1. Compared to other
heuristics, combo appears to return partitions with large AMIs
consistently and on a larger number of these 49 instances.

Focusing on the position of data points, we observe that
they are mostly above the 45-degree line. This indicates that
near optimal solutions tend to have partitions disproportionally
dissimilar to an optimal partition. This goes against the naive
viewpoint that close-to-maximum modularity partitions are
also close to an optimal partition. Given these observations on
the heuristic modularity maximization algorithms, we evalu-
ate an existing software package function which attempts to
exactly maximize modularity in the next section.

Comparison with an exact modularity maximization
method. In the second comparison, we compare the Bayan
algorithm with a method from the igraph library (29) for ob-
taining an exact maximum-modularity partition (IG for short).
IG calls the GLPK library to solve an integer programming for-
mulation of the modularity maximization problem (18). Given
the limitations of IG, we restrict this comparison to the same
dataset of 29 small real networks and 20 Erd˝os-Rényi and
Barabási-Albert random graphs.

The solve times of the IG algorithm on these 29 real net-
works, have an average and standard deviation of 400.4 ±
1082.0 seconds. Bayan, however, solves the same instances
53 times faster (in 7.9 ± 18.9 seconds). More importantly,
the IG algorithm fails to maximize modularity for 10 of these
networks on which the average GOP of the IG algorithm is
0.461 (run without any time limits). The difference in solve
time is more pronounced for the Erd˝os-Rényi and Barabási-
Albert graphs which are on average solved by Bayan over 650
times and 837 times faster than the IG respectively. For the
Erd˝os-Rényi and Barabási-Albert graphs in this analysis, IG
was terminated after 1 hour if it failed to return a partition.

2

Fig. 1. Global Optimality percentage and normalized adjusted mutual information measured for eight modularity maximization heuristic methods in comparison with Bayan

Therefore, the actual performance comparison would be even
more favourable to Bayan.

So far, we observed that heuristic modularity maximization
algorithms often return sub-optimal partitions. And that the
sub-optimal partitions are often considerably different from an
optimal partition. The existing exact method for maximizing
modularity (the IG algorithm) is not a reliable alternative either,
in that it also returns sub-optimal partitions and is tens or
hundreds of times slower that our proposed algorithm. To be
clear, the IG algorithm has not been proposed as a method for
community detection, but possibly as a complementary tool
in the igraph library (29) for evaluating and improving other
heuristic methods.

One may argue that the main purpose served by these algo-
rithms is to ﬁnd communities accurately and the sub-optimality
in modularity, or dissimilarity to an optimal partition are no
concerns per se as long as they can retrieve ground-truth parti-
tions. In the next section, we compare Bayan with 22 other al-
gorithms based on their capability in retrieving planted ground-
truth partitions. This analysis does not involve modularity
or optimality of partition. This allows us to compare Bayan

to algorithms from different families of community detection
methods (5) including algorithms that do not involve modular-
ity or optimization.

Comparison with community detection methods from
different families. In this section, we compare Bayan to 22
community detection algorithms including the modularity-
based heuristics from the previous analysis, other optimization-
based heuristics, as well as other community detection meth-
ods which do not rely on modularity or optimization. We use
Lancichinetti-Fortunato-Radicchi (LFR) benchmark graphs
(30) and measure the performance of each method in terms of
the AMI the partition with the planted ground-truth partition
from the LFR graph generation process.

The 22 algorithms we compare Bayan with are the commu-
nity detection methods known as greedy (21), Chinese whis-
pers (31), Reichardt Bornholdt (RB) (32), walktrap (33), k-cut
(34), Louvain (22), Infomap (12), LN (23), Genetic Algorithm
(GA) (35), label propagation (36), CPM (37), signiﬁcant scales
(38), Stochastic Block Model (SBM) (8), Weighted Commu-
nity Clustering (WCC) (39), combo (16), belief (1), surprise
(40), head-tail (41), Paris (24), Leiden (25), EdMot (26), and

3

−0.20.00.20.40.60.81.0AMI of comm2ni1ie0 ob1ained b4 1he algori1hm and 1he o.1imal comm2ni1ie0 ob1ained b4 Ba4an−0.20.00.20.40.60.81.0Ra1io of mod2lari14 val2e re.or1ed b4 1he algori1hm and o.1imal val2e of 1he mod2lari14 re.or1ed b4 Ba4an (Global Optimality PercentagenmLouvainComboBeliefLeidenParisEdmotLnFig. 2. Performance ranking of community detection methods

Gemsec (42). For this evaluation, we randomly generate 100
LFR benchmark graphs based on the following parameters:
number of nodes (n) randomly chosen from the range [20, 300],
maximum degree (cid:98)0.3n(cid:99), maximum community size (cid:98)0.5n(cid:99),
power law exponent for the degree distribution τ1 = 3, power
law exponent for the community size distribution τ2 = 1.5,
average degree 4, and the parameter µ chosen from the set
{0.01, 0.1, 0.3, 0.5, 0.7, 0.9, 1} for seven experiment settings
(each with 100 LFR graphs). The parameter µ determines
the fraction of inter-community edges incident to each node.
Larger values of µ make community detection more difﬁcult by
producing a structure with less dependence on the ground-truth
communities. Given this, µ can be considered as an indicator
of the noise in the data generation process.

All 22 algorithms as well as Bayan result in negative AMI
values for large values of µ (i.e. 0.9 and 1), which means the
communities obtained by these methods have no similarity to
the ground-truth communities beyond pure chance. Introducing
large amounts of noise in the graph generation process makes
the structure of the graph independent from the ground-truth
communities. Thus, we do not report on the comparative
performance of the algorithms on LFR graphs with µ = 0.9 or
µ = 1.

Figure 2 illustrates the relative ranking of the algorithms,
including Bayan, according to AMI averaged over 100 LFR
graphs generated based on each value of µ. Bayan is ranked
ﬁrst in two out of ﬁve experiment settings, and it comes second

in the other experiments. We can observe from this analysis
that Bayan has the most stable performance in detecting the
planted partition compared to the other 22 community detection
algorithms considered.

In Figure 2, the three algorithms walktrap, Paris, and Chi-
nese whispers seem to comparatively perform well for small
values of µ, but their comparative performance weakens sub-
stantially when the data generation process passes a certain
threshold of noise µ > 0.1. Contrary to this pattern, there
are algorithms like Edmot and GA whose comparative perfor-
mance improves when µ increases. Averaging the AMI values
for all 700 LFR graphs, Bayan has the highest performance
followed by walktrap and Leiden respectively.

Discussion

The three comparative analyses provided in the Results sec-
tion indicate the distinct capabilities of Bayan in modularity
maximization (which is expected by design) and in retrieving
ground-truth communities in synthetic data. Future research
may investigate the capability of Bayan and other algorithms
in retrieving ground-truth communities in real networks so that
the LFR graph generation process does not interfere with the
comparative evaluation of the algorithms’ performance.

While our current implementation of the Bayan algorithm
handles small and mid-sized networks with up to 1000 edges
in a reasonable time (ranging in a few seconds to a few minutes

4

0.00.10.20.30.40.50.60.7The 7a.6e 1f 2a3ame5e3 μ (fraction of inter-community edges) used in generating LFR graphs1234567891011121314151617181920212223Algorithm rank in having the highest similarity with the ground-truth partition planted in the LFR graphs (largest AMI value)BABABABABAWAWAWAWAWAPAPAPAPAPACHCHCHCHCHGRGRGRGRGRLOLOLOLOLOLELELELELECOCOCOCOCOINININININRBRBRBRBRBEDEDEDEDEDLNLNLNLNLNBEBEBEBEBESBSBSBSBSBGEGEGEGEGEGAGAGAGAGASISISISISIWCWCWCWCWCSUSUSUSUSUHEHEHEHEHECPCPCPCPCPLALALALALAKCKCKCKCKCBayan (BA)Walktrap (WA)Paris (PA)ChineseWhispers (CH)Greedy (GR)Louvain (LO)Leiden (LE)Combo (CO)Infomap (IN)Rb (RB)Edmot (ED)Ln (LN)Belief (BE)Sbm (SB)Gemsec (GE)Ga (GA)SignificantScales (SI)Wcc (WC)Surprise (SU)HeadTail (HE)Cpm (CP)LabelPropagation (LA)Kcut (KC)on a normal computer), exact maximization of modularity for
larger networks may require a substantially longer time. For
larger networks, one may run Bayan with a desired optimality
threshold (e.g. 0.1) or a desired time limit so that Bayan works
as an approximate algorithm for maximizing modularity and
returns a partition with a guaranteed proximity to the maxi-
mum modularity. Bayan offers a unique method for detecting
communities with an guarantee of what it is designed to do.
Using comprehensive experiments, we have demonstrated the
advantages that our proposed algorithm brings to tackling a fun-
damental network science problem, thereby improving upon a
widely used computational tool for understanding networked
systems.

Materials and Methods

Sparse IP formulation of modularity maximization. Consider
the input graph G = (V, E) with |E| = m edges, modularity matrix
entries bi j obtained using the resolution parameter γ, and a k-partition
{C1,C2, . . . ,Ck} of the node set V . For every pair of nodes (i, j), their
cluster membership is either the same (represented by xi j = 0) or dif-
ferent (represented by xi j = 1). Using the binary decision variable xi j,
the problem of maximizing the modularity of input graph G = (V, E)
can be formulated as an Integer Programming (IP) model (18–20) as
in Eq. (1).

Q =

max
xi j

1
2m ∑

bi j(1 − xi j)

s.t.

(i, j)∈V 2,i≤ j
xik + x jk ≥ xi j ∀k ∈ K(i, j) ⊆ V 2 \ {i, j}
xi j ∈ {0, 1} ∀(i, j) ∈ V 2, i ≤ j

[1]

In Eq. (1), the optimal objective function value equals the max-
imum modularity for the input graph and an optimal community
assignment is represented by the optimal values of the xi j variables.
K(i, j) indicates a minimum-cardinality separating set (20) for the
nodes i, j and its usage in the IP model of this problem leads to a more
efﬁcient formulation with O(n2) constraints (20) instead of O(n3)
constraints (18, 19). The triangular constraints for three nodes (i, j, k)
in Eq. (1) collectively ensure that being in the same cluster is a transi-
tive relation (18). Solving this optimization problem is NP-complete
(18), but Bayan uses a branch-and-cut algorithm for pushing the limits
on the largest instance for which this problem can be solved within a
reasonable time.

Bayan algorithm for modularity maximization. The triangular
constraints for the triple (i, j, k) can be written as the logical disjunc-
tion of Eq. (2) and Eq. (3).

xi j + xik + x jk = 0

xi j + xik + x jk ≥ 2

[2]

[3]

To maximize modularity with a branch and cut scheme, we start
with obtaining lower and upper bounds for the IP model in Eq. (1).
Dropping the integrality constraint of (i.e. solving the LP relaxation
of) the IP model in Eq. (1) provides an upperbound. Finding a feasible
partition (e.g. using the combo algorithm) provides a lower bound.

5

These form the bounds for the root node of a search tree. We then
select a triples for which the LP optimal solution violates both Eq. (2)
and Eq. (3). On the selected triple, we partition the feasible space
into two subspaces by adding either Eq. (2) or Eq. (3) as a cut to the
root node problem which leads to a left and a right subproblem. For
each subproblem, an upper bound can be obtained through solving the
LP relaxation. Similarly, for each subproblem, a lower bound can be
obtained through ﬁnding a feasible solution (e.g. running the combo
algorithm) for the graph modiﬁed based on the added cut.

For the left subproblem, we apply Eq. (2) by replacing nodes i, j, k
with a new node and connecting it to all their neighbours. For the right
subproblem, we apply Eq. (3) by deducting δ (a sufﬁciently large
value) from the six modularity matrix entries bi j associated with the
triple (i, j, k). This change makes the nodes i, j, k less appealing to be
assigned to the same community which in turn satisﬁes Eq. (3). For
each subproblem, the actual modularity associated with the feasible
partitions of the modiﬁed graphs provides a lower bound.

The search tree can be explored by branching based on a triple for
which the new LP optimal solutions violates the triangular constraints.
After completing the computations for each level of the tree, the best
lower bound is stored as the incumbent and the best upper bound is
stored as the best bound.

Throughout the branching process, three conditions lead to des-
ignating a tree node as fathomed. First, the LP solution becoming
integer. Second, the LP becoming infeasible. Third, the LP solution
becoming smaller than the current incumbent. In all these cases, we
do not branch on the node and close it.

The convergence of incumbent and best bound guarantees that
a globally optimal solution is found. This branch-and-cut scheme
gives rise to the Bayan exact algorithm if this convergence is used
as the termination criterion. Alternatively, one can use a different
termination criterion (specifying a desired solve time or an optimality
gap) which leads to the Bayan approximate algorithm for approxi-
mating maximum modularity within a factor (the optimality gap - the
gap between the incumbent and best bound at the termination of the
algorithm).

Technical details. The Bayan algorithm also leverages three graph
pre-processing steps (pre-solve graph reduction) based on the analyti-
cal results on equivalences in maximum modularity. As the ﬁrst step,
we break the input graph into its components if it has more than one
connected component. Each component is then processed individually
and the union of the community sets will be returned. The second and
third pre-processing steps are based on reducing pendant nodes (43)
and pendant cliques (44) respectively which are discussed in graph
pre-processing in the SI.

Besides pre-solve graph reduction, Bayan incorporates techniques
such as parallel computing for obtaining the separating sets, valid
inequalities, and variable ﬁxing to push the limits on the largest
instance to solve within a given time. All technical details of Bayan
are discussed in the SI.

Code and data availability

The Bayan algorithm will be publicly available in Python as
a part of the Community Discovery Library (CDlib) (45). All
data used in the experiments and evaluations of this study will
be made available upon publication.

ACKNOWLEDGMENTS. This study has been supported by the
Data Sciences Institute at the University of Toronto.

1. P Zhang, C Moore, Scalable detection of statistically signiﬁcant communities and hierarchies,
using message passing for modularity. Proc. Natl. Acad. Sci. 111, 18144–18149 (2014).
2. MEJ Newman, Modularity and community structure in networks. Proc. Natl. Acad. Sci. 103,
8577–8582 (2006) Publisher: National Academy of Sciences Section: Physical Sciences.
3. BH Good, YA De Montjoye, A Clauset, Performance of modularity maximization in practical

contexts. Phys. Rev. E 81, 046106 (2010) Publisher: APS.

4. MEJ Newman, Equivalence between modularity optimization and maximum likelihood meth-
ods for community detection. Phys. Rev. E 94, 052315 (2016) Publisher: American Physical
Society.

5. S Fortunato, D Hric, Community detection in networks: A user guide. Phys. Reports 659,

1–44 (2016) Community detection in networks: A user guide.

6. S Fortunato, M Barthélemy, Resolution limit in community detection. Proc. Natl. Acad. Sci.

104, 36–41 (2007).

38. VA Traag, G Krings, P Van Dooren, Signiﬁcant scales in community structure. Sci. reports 3,

1–10 (2013) Publisher: Nature Publishing Group.

39. A Prat-Pérez, D Dominguez-Sal, JL Larriba-Pey, High quality, scalable and parallel commu-
nity detection for large real graphs in Proceedings of the 23rd international conference on
World wide web. pp. 225–236 (2014).

40. VA Traag, R Aldecoa, JC Delvenne, Detecting communities using asymptotical surprise.

Phys. Rev. E 92, 022816 (2015) Publisher: APS.

41. B Jiang, D Ma, Deﬁning least community as a homogeneous group in complex networks.

Phys. A: Stat. Mech. its Appl. 428, 154–160 (2015) Publisher: Elsevier.

42. B Rozemberczki, R Davies, R Sarkar, C Sutton, Gemsec: Graph embedding with self clus-
tering in Proceedings of the 2019 IEEE/ACM international conference on advances in social
networks analysis and mining. pp. 65–72 (2019).

43. A Arenas, J Duch, A Fernández, S Gómez, Size reduction of complex networks preserving

7. B Karrer, MEJ Newman, Stochastic blockmodels and community structure in networks. Phys.

modularity. New J. Phys. 9, 176 (2007).

Rev. E 83, 016107 (2011).

8. TP Peixoto, Efﬁcient monte carlo and greedy heuristic for the inference of stochastic block

models. Phys. Rev. E 89, 012804 (2014).

44. LHN Lorena, MG Quiles, LAN Lorena, Improving the performance of an integer linear pro-
gramming community detection algorithm through clique ﬁltering in International Conference
on Computational Science and Its Applications. (Springer), pp. 757–769 (2019).

9. X Liu, et al., A scalable redeﬁned stochastic blockmodel. ACM Transactions on Knowl. Discov.

45. G Rossetti, L Milli, R Cazabet, Cdlib: a python library to extract, compare and evaluate

from Data (TKDD) 15, 1–28 (2021).

communities from complex networks. Appl. Netw. Sci. 4, 1–26 (2019).

10. B Serrano, T Vidal, Community detection in the stochastic block model by mixed integer

programming (2021).

11. M Rosvall, CT Bergstrom, An information-theoretic framework for resolving community struc-

ture in complex networks. Proc. Natl. Acad. Sci. 104, 7327–7331 (2007).

12. M Rosvall, CT Bergstrom, Maps of random walks on complex networks reveal community

structure. Proc. Natl. Acad. Sci. 105, 1118–1123 (2008).

13. R Aldecoa, I Marín, Deciphering network community structure by surprise. PLOS ONE 6,

1–8 (2011).

14. VA Traag, R Aldecoa, JC Delvenne, Detecting communities using asymptotical surprise.

Phys. Rev. E 92, 022816 (2015).

15. E Marchese, G Caldarelli, T Squartini, Detecting mesoscale structures by surprise. Commun.

Phys. 5, 1–16 (2022).

16. S Sobolevsky, R Campari, A Belyi, C Ratti, General optimization technique for high-quality

community detection in complex networks. Phys. Rev. E 90, 012811 (2014).

17. S Fortunato, ME Newman, 20 years of network community detection. Nat. Phys. 18, 848–850

(2022).

18. U Brandes, et al., On modularity clustering. IEEE transactions on knowledge data engineer-

ing 20, 172–188 (2007).

19. G Agarwal, D Kempe, Modularity-maximizing graph communities via mathematical program-

ming. The Eur. Phys. J. B 66, 409–418 (2008).

20. TN Dinh, MT Thai, Toward optimal community detection: From trees to general weighted

networks. Internet Math. 11, 181–200 (2015) Publisher: Taylor & Francis.

21. A Clauset, MEJ Newman, C Moore, Finding community structure in very large networks.

Phys. review E 70, 066111 (2004) Publisher: APS.

22. VD Blondel, JL Guillaume, R Lambiotte, E Lefebvre, Fast unfolding of communities in large
networks. J. statistical mechanics: theory experiment 2008, P10008 (2008) Publisher: IOP
Publishing.

23. EA Leicht, MEJ Newman, Community structure in directed networks. Phys. Rev. Lett. 100,

118703 (2008) Publisher: American Physical Society.

24. T Bonald, B Charpentier, A Galland, A Hollocou, Hierarchical graph clustering using node pair
sampling in MLG 2018 - 14th International Workshop on Mining and Learning with Graphs.
(London, UK), (2018).

25. VA Traag, L Waltman, NJ van Eck, From Louvain to Leiden: guaranteeing well-connected

communities. Sci. Reports 9 (2019).

26. PZ Li, L Huang, CD Wang, JH Lai, Edmot: An edge enhancement approach for motif-aware
community detection in Proceedings of the 25th ACM SIGKDD international conference on
knowledge discovery & data mining. pp. 479–487 (2019).

27. NX Vinh, J Epps, J Bailey, Information theoretic measures for clusterings comparison: Vari-
ants, properties, normalization and correction for chance. J. Mach. Learn. Res. 11, 2837–
2854 (2010).

28. L Danon, A Diaz-Guilera, J Duch, A Arenas, Comparing community structure identiﬁcation.

J. statistical mechanics: Theory experiment 2005, P09008 (2005).

29. G Csardi, T Nepusz, The igraph software package for complex network research. InterJour-

nal Complex Syst. 1, 1695 (2006).

30. A Lancichinetti, S Fortunato, F Radicchi, Benchmark graphs for testing community detection

algorithms. Phys. Rev. E 78, 046110 (2008) Publisher: American Physical Society.

31. C Biemann, Chinese whispers: an efﬁcient graph clustering algorithm and its application to
natural language processing problems in Proceedings of the First Workshop on Graph Based
Methods for Natural Language Processing, TextGraphs-1.
(Association for Computational
Linguistics, USA), pp. 73–80 (2006).

32. J Reichardt, S Bornholdt, Statistical mechanics of community detection. Phys. Rev. E 74,

016110 (2006) Publisher: American Physical Society.

33. P Pons, M Latapy, Computing communities in large networks using random walks. J. Graph

Algorithms Appl. 10, 191–218 (2006).

34. J Ruan, W Zhang, An efﬁcient spectral algorithm for network community discovery and its
applications to biological and social networks in Seventh IEEE international conference on
data mining (ICDM 2007). (IEEE), pp. 643–648 (2007).

35. C Pizzuti, GA-Net: A Genetic Algorithm for Community Detection in Social Networks in Pro-
ceedings of the 10th International Conference on Parallel Problem Solving from Nature —
PPSN X - Volume 5199. (Springer-Verlag, Berlin, Heidelberg), pp. 1081–1090 (2008).
36. G Cordasco, L Gargano, Community detection via semi-synchronous label propagation al-
gorithms in 2010 IEEE international workshop on: business applications of social network
analysis (BASNA). (IEEE), pp. 1–8 (2010).

37. VA Traag, P Van Dooren, Y Nesterov, Narrow scope for resolution-limit-free community de-

tection. Phys. Rev. E 84, 016114 (2011) Publisher: APS.

6

