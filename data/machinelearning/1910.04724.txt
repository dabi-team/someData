Using Neural Networks for Programming by
Demonstration

Karan K. Budhraja, Hang Gao and Tim Oates
Computer Science and Electrical Engineering
University of Maryland, Baltimore County
Baltimore, Maryland 21250, USA
Email: {karanb1,hanggao1}@umbc.edu, oates@cs.umbc.edu

9
1
0
2

t
c
O
0
1

]

G
L
.
s
c
[

1
v
4
2
7
4
0
.
0
1
9
1
:
v
i
X
r
a

Abstract—Agent-based modeling is a paradigm of modeling
dynamic systems of interacting agents that are individually
governed by speciﬁed behavioral rules. Training a model of
such agents to produce an emergent behavior by speciﬁcation
of the emergent (as opposed to agent) behavior is easier from
a demonstration perspective. Without the involvement of man-
ual behavior speciﬁcation via code or reliance on a deﬁned
taxonomy of possible behaviors, the demonstrator speciﬁes the
desired emergent behavior of the system over time, and retrieves
agent-level parameters required to execute that motion. A low
time-complexity and data requirement favoring framework for
reproducing emergent behavior, given an abstract demonstration,
is discussed in [1], [2]. The existing framework does, however,
observe an inherent
limitation in scalability because of an
exponentially growing search space (with the number of agent-
level parameters). Our work addresses this limitation by pursuing
a more scalable architecture with the use of neural networks.
While the (proof-of-concept) architecture is not suitable for many
evaluated domains because of its lack of representational capacity
for that domain, it is more suitable than existing work for larger
datasets for the Civil Violence agent-based model.

I. INTRODUCTION

An Agent-Based Model (ABM) is a computational model
simulating interacting agent behavior through agent-level be-
havioral rule speciﬁcation. Through interactions, the behaviors
of individual agents produce more complex emergent collec-
tive behavior. Examples of ABMs include motion of humans
in a crowd, spreading of diseases, and motion of groups of
animals. In the ﬁrst example, the ABM may specify average
speed and direction of motion for each human, based on other
humans around it. Simulation of such a system may then lead
to behaviors such as formation of groups with aligned motion.
The individual behavior of an agent is governed by control
parameters called Agent-Level Parameters (ALPs) for the
purpose of this work. Different values of ALPs lead to different
emergent behaviors in the ABM. Values quantifying such
emergent behavior are called Swarm-Level Parameters (SLPs).
Variation of the three ALP values results in the visualization
of different behaviors. An example of such variance is shown
in Figure 1.

When demonstrating swarm behavior, it is easier for demon-
strators to specify SLPs than it is to specify ALPs. Following
from [1], [3] (the AMF+ framework), we assume the demon-
strators to be more tactically, rather than technically, skilled.
This means that they can specify desired collective behavior

(a)

(b)

(c)

Fig. 1. Different behaviors (SLPs) observed with the variation of the ALPs
for the NetLogo-based simulation [4] for the ﬂocking ABM [5], [6]. These
are also examples of different behavior demonstrations [1].

but are not required to translate it to mathematical form. Given
an abstract behavior speciﬁcation (such as shape), a model is
required to interpret the parameters, and estimate the ALPs
needed to produce it. Figure 2 depicts a procedural outline of
how such a system is applied for this purpose. The task is
to replicate observed or desired real-world swarm behavior. A
demonstrator describes the behavior using images or a video
of agent motion and uses our framework to estimate associated
ALPs. These parameters can then be deployed to real-world
agents to manifest the required behavior. Work in [1], [3]
addresses a level of abstraction as in visual demonstration
with a lower time complexity than stochastic search algorithms
and without depending on prior knowledge about probable
collective behaviors to follow demonstrations.

While work in [1], [3], [2] describes and builds on the
AMF+ framework, the authors acknowledge and adhere to its
limitation in scalability. The search space used to map from
SLPs to ALPs grows exponentially with the number of ALPs
[7]. Our work therefore overlooks the low time complexity
and data requirements of the AMF+ framework and pursues
a more scalable architecture with the use of neural networks.
Section II describes existing work in the context of our
contribution. The problem of using neural networks for the
purpose of programming ABMs by demonstration is formal-
ized in Section III and is followed by the proposed solution in
Section IV. Experimental evaluations in Section V are then
used to evaluate the proposed neural network architecture
and compare with the AMF+ framework. At
the cost of
the proposed neural network
increased data requirements,

 
 
 
 
 
 
a framework to produce functional mappings between ALPs
and SLPs. This framework is called the ABM Meta-Modeling
Framework (AMF). The (many-to-one) mapping from ALPs
to SLPs is called Forward Mapping (FM). The (one-to-many)
mapping from SLPs to ALPs is called Reverse Mapping (RM).
The AMF framework generates FM and RM by sampling from
training data, consisting of observed correspondence pairs
between ALPs and SLPs. Work in [1] (the AMF+ framework)
extends [24], [25], [7], [26] by using the RM to suggest a
single conﬁguration of ALPs that may have produced a given
demonstration. The many points (in ALP space) returned on
querying RM are condensed to a single representative point.
Following evaluated methods in [2], research in the domain
of inverse kinematics is identiﬁed to facilitate the application
of neural networks to generate one-to-many mappings. Work
using hierarchical neural networks [27] uses a hierarchy of
neural networks to generate input variables independently. This
does, however, require manual identiﬁcation of the number
of possible sets in the behavioral distribution with respect to
the input variable. Other work [28] also uses multiple neural
networks for this problem, but in a different manner. The
networks are trained and optimized in parallel as parts of a
larger ensemble network. This approach also requires manual
speciﬁcation in the form of the number of sub-networks used.
Another approach [29] describes a method to circumvent
susceptibility to plateaus when optimizing neural network loss.
A method of alternating between training on the full dataset
and a subset is proposed, where the subset consists of data
points corresponding to maximum error. While this iterative
approach is useful to continue learning for extended epochs,
it may be unnecessary for the current exploratory nature of
this work. Alternatively, approaches may remove instances
of duplicate behavior to convert the one-to-many mapping
represented by the training data to a one-to-one mapping [30].
Such discarding of information may cause a loss in abstract
relationship representations between input and output. Some
approaches employ shallow neural networks to produce a
direct mapping from SLPs to ALPs [31], [32]. These methods
do not make use of the one-to-many nature of the mapping
and may lead to reduced quality of inference (during neural
network optimization) if the source ALPs for the given SLPs
vary signiﬁcantly (e.g., if they belong to distant clusters in
ALP space).

The method proposed in recent feedback-based work [33]
is exempliﬁed using a robot arm. It uses the retried ALPs
(joint angles) and applies them to the driving unit (ABM).
The observed position and orientation of the robot arm (SLPs)
are then provided as input to the neural network in the form
of control signals. This control method is based on feedback
and is therefore not applicable to our primary problem. Such
control may, however, be useful as a parallel for feedback to
the framework [34]. An important observation in this work is
the combination of RM and FM processes in some form.

Prior work [35] describes the use of modular distal teacher
network to solve the inverse kinematics mapping problem.
While that work additionally discusses many control-based

Fig. 2. An overview of this work being applied to an example. ALPs estimated
for a demonstration can be deployed to a swarm of agents to replicate
the demonstrated behavior. Impact of the ALPs is dependent on the ABM
governing the swarm. However, the modeling framework is independent of
the ABM used (since ABMs provide corresponding ALPs). The system uses
an ABM as a black box to which ALPs are provided as input and SLPs are
observed as output [1].

architecture shows potential to compete in performance with
the AMF+ framework and serves as a scalable alternative. It is
also observed that using contacted networks facilitates better
learning of the mapping between SLPs and ALPs than the
direct use of a single network.

II. RELATED WORK

Swarm behavior may be encoded as a ﬁtness function
[8], [9], [10] or using a high-level programming language
[11], [12], [13], [14]). Work in [15] enumerates common
behaviors and work in [16] uses pre-existing behavior modules
to describe emergent swarm behavior. These models depend on
prior speciﬁcation of possible behavior. Hierarchical training
methods [17], [18] require that the demonstrator manually de-
compose the task into a hierarchy of subtasks. Our work does
not impose such a requirement on the demonstrator. Work in
[19] using probabilistic graphs to encode spatial distributions
of agents requires them to be hand-made. Emergent behavior
is formulated as an inverse reinforcement learning problem in
[20], but imposes the creation of controllers per agent with
speciﬁcation of a space of states, observations and actions,
among other MDP characteristics. However, our work ad-
dresses a demonstrator with more abstract requirements for the
user by removing the requirement for technical speciﬁcation
of the demonstration.

Work in [21], [22], [23] discusses the use of abstraction of
swarm behavior based on speciﬁed rules that relate ALPs and
SLPs. However, it requires the manual speciﬁcation of these
rules. Subsequent work in [24], [25], [7], [26] then establishes

Desired real-world collective behavior (SLPs)Unknown ALPsApproximation of desired behaviorBehavior demonstration (SLPs)Modeling frameworkSuggested ALPsApproximated collective behavior (SLPs)ALP deployment to real-world agentsapproaches for temporal data, the method proposed in this
work is similar to the feedforward network proposed in prior
work [35]. The FM and RM networks proposed in Section IV
are symmetrically opposite in structure, however, unlike their
counterparts [35].

Also note that all these works that serve to map from SLPs
to ALPs are trained with the intuition of producing neural
networks with an optimal one-to-one mapping that serves as
a proxy for the underlying one-to-many mapping. This means
that the networks are able to learn decision boundaries that
best separate similar behaviors (except in the case of bypassing
one-to-many mapping [30]).

III. PROBLEM DEFINITION

the
Given a dataset of ALP and SLP correspondences,
current solution described in [1], [3], [2] is observed to be
limited in scalability with respect to ALPs. The problem,
then, is to propose a more architecture that may learn the
RM mapping (SLPs to ALPs) as an alternative to the AMF+
framework. This requires the formulation of a suitable neural
network architecture.

IV. PROPOSED METHOD

This section proceeds to describe two proposed architectures

to solve this problem.

A. Proposed MLP Architecture

Similar to methods proposed in existing work [7], [33],
[35], the primary idea behind the proposed method is to allow
the FM architecture to assist the RM architecture in learning
an approximation of the required one-to-many mapping. This
comprises of two stages.

The ﬁrst stage of the proposed approach is therefore to
train a neural network to learn the many-to-one FM mapping.
Similar to prior work [7], [35], an FM regression model pro-
vides a surrogate for expensive ABM simulations. The second
stage of the proposed approach is to formulate a network for
RM mapping. Because related research in inverse kinematics
demonstrates the effectiveness of MLP neural networks, the
architecture employed for this layer is MLP, similar to FM.

While the FM MLP network can be trained independently
using MSE loss, training the RM MLP network independently
with such loss is not as useful as it is for FM because of
the one-to-many nature of mappings. For this reason,
the
FM network is then concatenated to the RM network to
produce the prospective output behavior, given RM network
outputs. This allows for observation of output behavior similar
to the use of feedback [33] but
in a faster manner. The
difference between the concatenated FM network outputs and
RM network inputs can then be used as MSE for training
loss. Note that the FM section of the network is not trained
while training the RM section of the network. The output of
the system to the user, however, would be the intermediate
output of this concatenated network, i.e., the output of the
RM network. For clarity, the concatenated network is called
the FM+RM network.

For exploratory simplicity, both FM and RM architectures
are identical in layer structure, but with opposite layer order
from input to output. Layer sizes are adapted based on the
dimensions of ALPs and SLPs, with the intuition that larger
vectors of ALPs and SLPs would require more complex
networks for effective learning of mappings. The number of
nodes in hidden layers is assigned proportional to the number
of ALPs or SLPs, or the square of that value. Examples of
network architecture are shown in [2]. Note that all architec-
tures discussed in this section are composed of fully connected
layers.

The AMF+ framework uses a small subset of the total
training data available (which may also be selected at random
if not using Dataset Selection as in [36]) to generate FM and
RM. The neural networks discussed in this work, however,
are trained using the full extent of the available training
data. The speciﬁc sizes of subsets of training used by the
AMF+ framework are documented in [2]. The training data
requirement of 430 to 2700 points is therefore changed to
9, 000 points (this is the size of training data per cross-
validation fold). The loss used to train this architecture is
reconstruction error (between inputs to and outputs from the
FM+RM network) in the form of Mean Squared Error (MSE).

B. Proposed One-to-Many Architecture

While the network described in Section IV-A is a solution
to approximate the one-to-many RM mapping, the output of
a single query for a ﬁxed randomness setting is unique. If a
one-to-many mapping is mandated for the RM network, then
probabilistic architectures such as variational encoding layers
(or similar) may be introduced [37], [38]. To produce multiple
RM outputs in such a setting of ﬁxed environment randomness,
we therefore use variational inference. We assume that the
points corresponding to the one-to-many mapping represented
by the output of the RM network are a function of hidden
variables. These hidden variables are assumed to adhere a
Gaussian distribution and are produced as a function of the
input SLPs. The hidden variables are therefore be represented
using mean (µ) and variance (σ2) values. Speciﬁcally, nodes
are encoded using (µ, log(σ2)) pairs. For exploratory sim-
plicity, the number of hidden variables used for variational
inference is identical to the size of the layer at the middle of
the network (the square of the number of SLPs).

The loss used to train this architecture consists of two parts.
The ﬁrst is the reconstruction error (between inputs to and
outputs from the FM+RM network) in the form of MSE. The
second is the KullbackLeibler (KL) divergence [39] to promote
separation of ﬁtted Gaussian surfaces for the variational layer.
The contribution of each loss to the total loss may be weighted
using a parameter α, corresponding to weights of (1 − α) and
α for the ﬁrst and second loss components respectively.

V. EXPERIMENTS

The experiment data used for evaluation of the neural
network alternatives to the framework is a subset of that used
in [2]. While the 10-fold cross-validation remains the same,

(a)

(b)

(c)

Fig. 3. Proposed RM+FM concatenated variational architecture exempliﬁed for the Civil Violence ABM domain. Networks from left to right correspond to
RM, FM and RM+FM networks respectively. The number of hidden units in layers at the center of the FM and RM networks scale as the squared of the
dimensionality of ALPs and SLPs. Other layers are scaled linearly.

the comparative performance of the AMF+ framework used
for reference is when using its current state (as in [2]) without
outlier detection. Work in [2] establishes that the performance
of the framework is least sensitive to this module. It
is
therefore unused in comparison, given the signiﬁcant increase
in time complexity caused by the use of outlier detection.

As is for all datasets used to train the AMF+ framework,
data is normalized to the range [0, 1]. Additionally, standard
scaling of input data to have a mean of 0 and variance of 1
is established as an effective method to tailor data for neural
network training [40]. While such standardization of ALPs
improves neural network performance, standardization of SLPs
is observed to cause degradation. For this reason, SLPs are not
standardized. Subsequently, favorable activation functions for
the FM and RM network are empirically observed as sigmoid
[41] and ReLU [42] respectively.

The ABMs used for evaluation follow from work in [2] and
are summarized in Table I as an excerpt from their descriptions
in [2].

Equations referenced in this section are summarized as fol-
lows using their explanations in [2]. Work in [50] approximates
Equation 1, where x ∈ [0, 1] and evaluates f −1(x). Work
in [27] describes a method to invert the forward kinematics
equations shown in Equation 2 and Equation 3, where a, b ∈
[−2π, 2π]. The work evaluates the computation of inputs a
and b independently with datasets partitioned as (a, p1, p2)
and (b, p1, p2). These two problem sets are called A and B
respectively.

f (x) = x + 0.5 ∗ sin(2 ∗ π ∗ x)

(1)

TABLE I
A SUMMARY OF THE NUMBER OF ALPS AND SLPS CORRESPONDING TO
VARIOUS EVALUATED ABMS. VISUAL DOMAINS, FOR WHICH SLPS ARE
DEMONSTRATED BY AN IMAGE, ARE SPECIFIED USING TICKS.

ABM

#ALPs #SLPs

Visual Domain

Forest ﬁre [43]
Schelling [44]
Turbulence [45]
EUM [46], [47]
AIDS [48]
Flocking [5], [6]
Civil violence [49]

1
2
2
2
2
3
3

1
1
1
2
2
2
3

√

√

p1 = cos(a + b) + sin(a) ∗ sin(b)

p2 = sin(a + b) + cos(a) ∗ sin(b)

(2)

(3)

This section is divided into two subsections, following the
structure of Section IV. Evaluations use Output Difference [34]
and MSE as a measure of performance. Output Difference is
the Euclidean distance between the demonstration SLPs and
the SLPs generated by framework suggestions.

A. Proposed MLP Architecture

First, to demonstrate the viability of the RM MLP architec-
ture, its performance is compared to several other architectures
based on existing work. These networks focus on the problem
of inverse kinematics, and are therefore evaluated on Problem
set A [27] data. Train and test data consist of a single fold and

TABLE II
MEAN (µ) AND STANDARD DEVIATION (σ) FOR MSE COMPUTED FOR
VARIOUS RM MLP ARCHITECTURES FOR THE DOMAIN DEFINED BY
PROBLEM SET A. AFTER THE COMPLETION OF TRAINING, MSE IS
EVALUATED ON THE TRAIN AND TEST DATA FOR THE GIVEN
CROSS-VALIDATION SPLIT. SEE [2] FOR CORRESPONDING
ARCHITECTURES EVALUATED.

Source Architecture

Train MSE
σ
µ

Test MSE µ
σ
µ

Proposed MLP Architecture
[28]
[30]
[32]
[33]
[29]

0.5000
0.4752
0.4787
0.4984
0.5000
0.4877

0.4515
0.4447
0.4369
0.4525
0.4515
0.4467

0.5090
0.5201
0.5232
0.5114
0.5090
0.5170

0.4519
0.4820
0.4622
0.4549
0.4520
0.4642

as in [2] and regression error is evaluated using MSE. Table II
shows that MSE is similar (on average) when adapting to other
existing MLP architectures. This work therefore proceeds with
the proposed MLP architecture as in Section IV. The evaluated
architectures corresponding to Table II are shown in [2].

Next, to demonstrate the limitations of the direct use of
an RM network,
trained on the
the RM network is ﬁrst
various datasets for independent network evaluation. Regres-
sion error is then computed as MSE. These values serve as
reference for network architecture performance. This data is
then accompanied by FM regression MSE and subsequent
RM+FM MLP network MSE observed when training the
concatenated network. Experiments are summarized in Table
III. Unlike testing in [1], [3], evaluations in Table III use
the entirety of each test set instead of limiting to 10 test
instances. This is done for each of 10 folds i.e., the neural
network is independently trained once on training data for
a given fold. This leads to a total of 10 values used for
averaging, each representing the mean data for that fold. This
is with the exception of the forward kinematics domain and
derived problem sets A and B [27]. As in [2], these domains
contain a single split of test and train data. This is the same
setting used for the AMF+ framework and is therefore used
for fair comparison. Additionally, the domain corresponding
to [50] is used with a total dataset size of 10, 000 similar
to other evaluated ABMs (except forward kinematics). For
experimental consistency, a seed value of 0 is used to initialize
randomization. Further, all neural networks are trained for
1000 epochs.

It is evident from Table III that the use of an FM network
to assist the RM network results in a signiﬁcant decrease in
MSE. It is also evident that all the trained networks do not
overﬁt because the ratio of train and test MSE is close to 1. The
order of MSE values vary with the domain, showing the varied
capacity of the neural networks to learn for those domains.
Apart from the complexity of the data, these variations are
also attributed to the varied network architectures used. For
example, the architecture used for the Civil Violence domain
has signiﬁcantly more hidden nodes than the architecture
used for the Forest Fire domain (see [2]). Note that to be

competitive with the performance of the AMF+ framework
(mean Euclidean distance of the order of 1e−2 as in [51], [2]),
the neural networks would require MSE that is approximately
of the order of 1e − 4. This is because MSE is proportional
to the square of Euclidean distance and the number of SLPs
for the evaluated domains is small. As a result, the AIDS and
Civil Violence domains show potential for the use of their
architectures to replace the AMF+ framework.

Next, the trained RM+FM MLP neural network therefore
is evaluated for its suggested ALPs, i.e., the output at the end
of the RM section of the network. The data used for these
experiments is consistent with Table III. Similar to evaluations
in [2], the suggested ALPs are provided to the ABM simulator
to produce corresponding SLPs. For comparison with the
AMF+ framework, error values are measured using Euclidean
distance. Results for this evaluation are shown in Figure 4.
With each test fold contributing 10 test instances, data is
averaged (median) over 100 computed values (as in [2]).

For most ABM domains, the neural network shows sig-
niﬁcant deterioration in performance. This is expected given
high train and test MSE values for the RM+FM network
observed in Table III. We focus now on domains where
the MSE values show potential for performance competitive
with the AMF+ framework: AIDS and Civil Violence. While
the AIDS domain observes poor performance by the neural
network,
that observed for the Civil Violence domain is
competitive with the performance of the AMF+ framework.
The median values of the logarithm of Output Difference
corresponding to the random baseline, the AMF+ framework
and the neural network for this domain are −2.3567, −4.6212
and −3.7008 respectively. The difference in performance for
ALP suggestions for the AIDS and Civil Violence domains
is caused by the difference in MSE for the FM network (see
Table III). Even though the RM+FM network for the AIDS
domain is able to reconstruct the SLPs from the output of the
RM network, the high MSE of the FM network indicates that
the mapping learned by the RM network does not output ALPs
but an imprecise representation of them. Competitive perfor-
mance of the RM+FM network for the Civil Violence domain
demonstrates the potential effectiveness of the proposed neural
network architecture when the network has sufﬁcient capacity
to learn data mappings.

After establishing the use of neural networks as a potential
scalable alternative to the AMF+ framework, the next question
to be answered is about the trade-off in data requirement.
For this reason, the performance of the RM+FM network
is evaluated at different dataset sizes (as done for [50] in
[2]) for the Civil Violence domain. The use of 10-fold cross-
validation and test set size of 100 are consistent with [2]. The
results of this experiment are shown in Figure 5. Using the
AMF+ framework is observed to be more advantageous than
using neural network architecture below a threshold of dataset
size (approximately 1000 in Figure 5). For larger datasets,
the RM+FM network performs competitively and with signif-
icantly less variance. The large variance values observed for
the AMF+ framework indicate its susceptibility to outliers.

TABLE III
MEAN (µ) AND STANDARD DEVIATION (σ) FOR MSE COMPUTED FOR THE RM NETWORK AND FM NETWORK INDEPENDENTLY, AND FOR THE
CONCATENATED RM+FM MLP ARCHITECTURE ACROSS SEVERAL DOMAINS. AFTER THE COMPLETION OF TRAINING, MSE IS EVALUATED ON THE
TRAIN AND TEST DATA FOR A GIVEN CROSS-VALIDATION SPLIT. EQUATION 1 CORRESPONDS TO THE SIMULATION MODEL USED IN [50]. EQUATION 2
AND EQUATION 3 CORRESPOND TO THE SIMULATION MODEL USED IN [27].

ABM

Train MSE µ

Train MSE σ

Test MSE µ

Test MSE σ

RM

FM

RM+FM

RM

FM

RM+FM

RM

FM

RM+FM

RM

FM

RM+FM

Forest ﬁre
Schelling
Turbulence
EUM
AIDS
Flocking
Civil violence

1.0000
2.0000
2.0001
0.6474
0.6122
1.1872
0.1590

0.2129
0.0982
0.0028
0.0081
0.0064
0.0138
0.0004

0.2129
0.0982
0.0028
0.0224
0.0001
0.0018
0.0001

0.0000
0.0000
0.0001
0.0392
0.0228
0.0039
0.0041

0.0002
0.0002
0.0001
0.0033
0.0001
0.0001
0.0000

0.0002
0.0002
0.0001
0.0162
0.0000
0.0008
0.0000

1.0004
2.0000
2.0012
0.6489
0.6155
1.1925
0.1627

0.2130
0.0982
0.0028
0.0082
0.0065
0.0141
0.0004

0.2130
0.0982
0.0028
0.0228
0.0001
0.0018
0.0001

0.0180
0.0427
0.0354
0.0431
0.0386
0.0208
0.0040

0.0026
0.0022
0.0012
0.0029
0.0007
0.0005
0.0000

0.0026
0.0022
0.0012
0.0168
0.0000
0.0008
0.0000

Equation 1

1.0000

0.0495

0.0495

0.0000

0.0001

0.0001

1.0006

0.0496

0.0496

0.0238

0.0009

0.0009

Equations 2, 3
Problem set A
Problem set B

0.9792
0.5000
0.5000

0.0530
0.0703
0.0703

0.0703
0.0703
0.0703

0.0000
0.0000
0.0000

0.0000
0.0000
0.0000

0.0000
0.0000
0.0000

1.0220
0.5090
0.5274

0.0510
0.0694
0.0690

0.0691
0.0694
0.0690

0.0000
0.0000
0.0000

0.0000
0.0000
0.0000

0.0000
0.0000
0.0000

This is also reﬂected by the wider distribution spread for the
AMF+ framework compared to the MLP network shown in
Figure 4. The inference from Figure 5 is therefore based on
the trend in values rather than speciﬁc values themselves.

TABLE IV
MEAN (µ) AND STANDARD DEVIATION (σ) FOR MSE COMPUTED FOR THE
CONCATENATED RM+FM VARIATIONAL ARCHITECTURE FOR THE CIVIL
VIOLENCE ABM DOMAIN. AFTER THE COMPLETION OF TRAINING, MSE
IS EVALUATED ON THE TRAIN AND TEST DATA FOR A GIVEN
CROSS-VALIDATION SPLIT.

B. Proposed One-to-Many Architecture

Because the proposed MLP architecture is evaluated to
be effective only for the Civil Violence ABM domain, the
evaluation of the one-to-many variant of this architecture
focuses on that domain.

Similar to Section V-A, RM+FM variational network MSE
is observed when training the concatenated network. Experi-
ments are summarized in Table IV. To observe the effect of
the use of KL divergence loss combined with reconstruction
loss, we ﬁrst observe a setting with α = 0.5. The performance
of the RM+FM network shows signiﬁcant degradation. It is
therefore hypothesized that the KL divergence component of
the loss shadows reconstruction loss. The loss is visualized in
Figure 6, averaged over 10 cross-validation datasets. Because
of stability of convergence, the observations are limited to
2500 evaluations of loss. Because the compared values may
span orders of magnitude, performance is measured on a
logarithmic scale. For computational convenience when using
the logarithm, values which are evaluated to zero are replaced
by the minimum non-zero value observed in the experiment. It
is evident from Figure 6 that KL divergence loss dominates re-
construction loss during early training iterations. The network
therefore prioritizes the reduction of KL divergence loss. Once
KL divergence loss is signiﬁcantly lower than reconstruction
the optimizer does not proceed to reduce
loss, however,
reconstruction loss. This is likely a local optima characteristic
of the optimization surface. The network is then evaluated
with a reduced contribution from KL divergence loss (using
α = 0.0001). Prioritizing the optimization of reconstruction
loss assists the optimizer in attaining improved network train
and test MSE values, at the cost of signiﬁcantly increased
KL divergence error. Because of the observed improvement

Alpha Value

Train MSE
σ
µ

Test MSE µ
σ
µ

0.5000
0.0001
0.0000

0.0380
0.0012
0.0003

0.0003
0.0001
0.0002

0.0381
0.0012
0.0003

0.0013
0.0000
0.0002

in MSE on decreasing α, a ﬁnal setting using α = 0.0 is
evaluated. As expected based on the two previous results, the
removal of the KL divergence loss component improves MSE
performance of the network.

To understand the meaning of training the RM+FM varia-
tional network using α = 0.0, we ﬁrst summarize the concept
of meta-learning [52], [53]. Meta-learning, or learning to learn,
is the training of one learning model to learn to inﬂuence the
training of a second learning model. This is used to explain the
architecture of the RM component of the RM+FM variational
network. In the case of the RM variational network, both these
learning models are neural networks. We now revisit the RM
network and divide it into three logical parts as shown in
Figure 7. These parts are called the Meta-Learner network,
Sampler network and Generator network (in linear order).
The role of the Generator network is to produce an ALP
suggestion based on the Gaussian signal from the Sampler
is controlled by the Meta-
network. This Gaussian signal
Learner network. The Meta-Learner network therefore learns
to control Gaussian distributions to inﬂuence the learning of
the Generator network.

Following Section V-A, the three conﬁgurations evaluated
in Table IV are then evaluated for their suggested ALPs i.e.,
the output at the end of the RM section of the network.
Results for this evaluation are shown in Figure 8. The median

(a)

(b)

(c)

(d)

(e)

(f)

Fig. 4. Comparison of the performance of the performance of using them RM+FM MLP network and the AMF+ framework for various ABMs. ABMs
used for Figures (a) to (g) are in correspondence to the top-to-bottom listing of ABMs in Table I. The network performs better than the random baseline and
becomes competitive with the AMF+ framework for the Civil Violence domain (Figure (g)).

(g)

values of the logarithm of Output Difference corresponding to
α = 0.5, α = 0.0001 and α = 0.0 for the Civil Violence
domain are −1.3586, −2.9714 and −3.6011 respectively. The
values for the other methods shown in the ﬁgure are the
same as Figure 4. Using α = 0.5 performs worse than the
random baseline. This is improved by using α = 0.0001.
Using α = 0.0 further improves the performance of this
architecture and is competitive to the performance of the MLP
network (−3.7008). Similar to the proposed MLP architecture,
the proposed one-to-many architecture may therefore serve as
a scalable alternative to the AMF+ framework. This is with
the additional constraint of produces multiple ALP points per

SLP query, as opposed to the single ALP point produced by
the MLP architecture.

For visual analysis, the points returned by the variational
framework (using α = 0.0) are summarized in Figure 9.
Speciﬁcally, the network is trained using a cross-validation
training set and then queried using an SLP conﬁguration
speciﬁed in the corresponding test set. The suggested ALP
points are then used for ABM simulation to produce cor-
responding Output Difference values. In SLP space,
these
points form a sphere proximal to the demonstration SLPs
(0.2142, 0.0839, 0.8883) [3], [2]. The spherical shape reﬂects
the stability of the learned transformation between SLP and

layers. Alternatively,

The network architecture for one-to-many mapping currently
uses variational
the network may be
trained to learn a distribution surface using Mixture Density
Network (MDN) layers [54]. To avoid manual speciﬁcation
of the number of contributors to the probability surface (such
as the number of Gaussian distributions composited), we may
use regularization. This can be done by starting with a large
number of composite factors and then using regularization to
reduce redundant contributions.

REFERENCES

[1] K. K. Budhraja and T. Oates, “Controlling swarms by visual demonstra-
tion,” in Self-Adaptive and Self-Organizing Systems (SASO), 2016 IEEE
10th International Conference on.

IEEE, 2016, pp. 1–10.

[2] K. K. Budhraja, “Programming agent-based models by demonstration,”
Ph.D. dissertation, University of Maryland, Baltimore County, 2019.
[3] K. K. Budhraja, J. Winder, and T. Oates, “Feature construction for
controlling swarms by visual demonstration,” ACM Transactions on
Autonomous and Adaptive Systems (TAAS), 2017.

[4] U. Wilensky and I. Evanston, “Netlogo: Center for connected learning
and computer-based modeling,” Northwestern University, Evanston, IL,
pp. 49–52, 1999.

[5] U. Wilensky, “Netlogo ﬂocking model,” Center for Connected Learning
and Computer-Based Modeling, Northwestern University, Evanston, IL,
1998.

[6] C. W. Reynolds, “Flocks, herds and schools: A distributed behavioral
model,” ACM SIGGRAPH computer graphics, vol. 21, no. 4, pp. 25–34,
1987.

[7] D. Miner, “A framework for predicting and controlling system-level
properties of agent-based models,” Ph.D. dissertation, University of
Maryland, Baltimore County, 2010.

[8] D. B. D’Ambrosio, J. Lehman, S. Risi, and K. O. Stanley, “Evolving
policy geometry for scalable multiagent learning,” in Proceedings of
the 9th International Conference on Autonomous Agents and Multiagent
Systems: volume 1-Volume 1.
International Foundation for Autonomous
Agents and Multiagent Systems, 2010, pp. 731–738.

[9] J. Reeder, “Team search tactics through multi-agent hyperneat,” in
Information Processing in Cells and Tissues. Springer, 2015, pp. 75–89.
[10] D. Pickem, L. Wang, P. Glotfelter, Y. Diaz-Mercado, M. Mote, A. Ames,
E. Feron, and M. Egerstedt, “Safe, remote-access swarm robotics re-
search on the robotarium,” arXiv preprint arXiv:1604.00640, 2016.
[11] D. Pianini, M. Viroli, and J. Beal, “Protelis: Practical aggregate program-
ming,” in Proceedings of the 30th Annual ACM Symposium on Applied
Computing. ACM, 2015, pp. 1846–1853.

[12] M. Brambilla, C. Pinciroli, M. Birattari, and M. Dorigo, “Property-driven
design for swarm robotics,” in Proceedings of the 11th International
Conference on Autonomous Agents and Multiagent Systems-Volume
1.
International Foundation for Autonomous Agents and Multiagent
Systems, 2012, pp. 139–146.

[13] M. Brambilla, A. Brutschy, M. Dorigo, and M. Birattari, “Property-
driven design for robot swarms: A design method based on prescriptive
modeling and model checking,” ACM Transactions on Autonomous and
Adaptive Systems (TAAS), vol. 9, no. 4, p. 17, 2015.

[14] M. Massink, M. Brambilla, D. Latella, M. Dorigo, and M. Birattari, “On
the use of bio-pepa for modelling and analysing collective behaviours
in swarm robotics,” Swarm Intelligence, vol. 7, no. 2-3, pp. 201–228,
2013.

[15] M. Brambilla, E. Ferrante, M. Birattari, and M. Dorigo, “Swarm
robotics: a review from the swarm engineering perspective,” Swarm
Intelligence, vol. 7, no. 1, pp. 1–41, 2013.

[16] G. Francesca, M. Brambilla, A. Brutschy, V. Trianni, and M. Birattari,
“Automode: A novel approach to the automatic design of control
software for robot swarms,” Swarm Intelligence, vol. 8, no. 2, pp. 89–
112, 2014.

[17] K. Sullivan and S. Luke, “Learning from demonstration with swarm
hierarchies,” in Proceedings of the 11th International Conference on
Autonomous Agents and Multiagent Systems-Volume 1.
International
Foundation for Autonomous Agents and Multiagent Systems, 2012, pp.
197–204.

Fig. 5. Comparison of the performance of the RM+FM MLP neural network
for the Civil Violence domain for varied dataset sizes (showing mean and
standard deviation). Reducing the size of the training data increases the error
in prediction (Output Difference measured as Euclidean distance (see [34]).
The compared baseline indicates the performance of the AMF+ framework
for this domain in its current state as in [51]. The AMF+ framework uses a
total of 430 instances of training data (see [2]) for the Civil Violence domain.

ALP spaces, by the network. In ALP space, these points are
observed to form an ellipsoidal shape. The points shows a
wider spread in ALP space than in SLP space. This reﬂects
that points with minor perturbations in ALP parameters may
still produce the same behavior for the Civil Violence ABM
domain. This is not, however, an assumption that the network
is based on. The network remains applicable to domains in
which points that are signiﬁcantly different in ALP space
may produce the same output behavior. The values of Output
Difference observed are distributed similar to that observed in
Figure 8.

VI. CONCLUSION

A framework for

replicating abstract demonstrations
(AMF+) is discussed in [1], [3], [2]. Inherent from the AMF
framework, the AMF+ framework is limited in scalability,
primarily with respect to the length of ALP vector [7]. As
a scalable alternative, this work explores the use of neural
networks to suggest ALPs for given SLPs. The proposed
RM+FM MLP and variational neural network architectures
are competitive with the performance of the AMF+ framework
beyond a threshold of data availability (when the FM network
excels at approximating the ABM). Training the RM+FM
network also results in signiﬁcantly improved network training
(see Table III). This shows a method for potential improvement
in performance for existing works that only employ a direct
RM mapping (such as those discussed in Section II, with the
exception of the use of feedback [33], [35]).

The proposition of a neural network for these domains
may further be explored for time series data, images and
video by integrating Recurrent Neural Network (RNN) layers,
Convolutional Neural Network (CNN) layers and Recurrent
Convolutional Neural Network (RCNN) layers respectively.

(a)

(b)

(c)

Fig. 6. Mean and standard deviation values of KL divergence loss, reconstruction loss and total loss corresponding to the variational RM+FM network using
α = 0.5, α = 0.0001 and α = 0.0 ((a), (b) and (c) respectively). Values are averaged over 10 cross-validation datasets for the Civil Violence ABM domain.
Note that Reconstruction Loss and Total Loss are not distinguishable in (c) because of complete overlap caused by equality in value.

Fig. 7. Decomposition of the RM variational network into three logical com-
ponents: the Meta-Learner network, the Sampler network and the Generator
network (top to bottom). The Meta-Learner network learns to control Gaussian
input to the Generator network to produce ALP suggestions corresponding
to input SLPs.

[18] D. Freelan, D. Wicke, K. Sullivan, and S. Luke, “Towards rapid multi-
the robocup competition,” in
Springer, 2014, pp. 369–

robot
RoboCup 2014: Robot World Cup XVIII.
382.

learning from demonstration at

[19] J. P. Lancaster Jr, “Predicting the behavior of robotic swarms in discrete

simulation,” Ph.D. dissertation, Kansas State University, 2015.

[20] A.

ˇSoˇsi´c, W. R. KhudaBukhsh, A. M. Zoubir, and H. Koeppl,
learning in swarm systems,” arXiv preprint

“Inverse reinforcement
arXiv:1602.05450, 2016.

[21] D. Miner, “Rule abstraction: Understanding emergent behavior in swarm
systems,” PhD Proposal, University of Maryland, Baltimore County,
2009.

[22] D. Miner and M. desJardins, “Learning abstract properties of swarm
systems,” in Proc. 8th International Conference on Autonomous Agents

Fig. 8. Comparison of the performance of the performance of using them
RM+FM variational network and the AMF+ framework for the Civil Vio-
lence ABM. The variational network performs better with reduced values of
α. This Figure is a superset of Figure 4.

and Multiagent Systems. Citeseer, 2008.

[23] D. Miner, M. desJardins, and P. Hamilton, “The swarm application
framework,” in Proceedings of the 23rd national conference on Artiﬁcial
intelligence-Volume 3. AAAI Press, 2008, pp. 1822–1823.

[24] D. Miner and M. desJardins, “Learning non-explicit control parameters
of self-organizing systems,” in Self-Adaptive and Self-Organizing Sys-
tems, 2009. SASO’09. Third IEEE International Conference on.
IEEE,
2009, pp. 286–287.

[25] D. Miner et al., “Predicting and controlling system-level parameters of
multi-agent systems,” in 2009 AAAI Fall Symposium Series, 2009.
[26] D. Miner, “A framework for predicting and controlling system-
level properties of agent-based models,” https://github.com/donminer/
dissertation, accessed: 2016-04-08.

[27] J.-M. Wu, C.-C. Wu, J.-C. Chen, and Y.-L. Lin, “Set-valued functional
neural mapping and inverse system approximation,” Neurocomputing,
vol. 173, pp. 1276–1287, 2016.

[28] B. Daya, S. Khawandi, and M. Akoum, “Applying neural network
architecture for inverse kinematics problem in robotics,” Journal of
Software Engineering and Applications, vol. 3, no. 03, p. 230, 2010.

[29] F. Nagataa, S. Kishimotoa, S. Kuritaa, A. Otsukaa, and K. Watanabeb,
“Neural network-based inverse kinematics for an industrial robot and
its learning method,” in The 4th International Conference on Industrial
Application Engineering 2016 (ICIAE2016), 2016.

(a)

(b)

(c)

Fig. 9. Distribution of points returned by the RM+FM variational network for the Civil Violence ABM domain using an arbitrary cross-validation test set
query when trained on the given cross-validation training set. The points are shown in (a) ALP space and (b) corresponding SLP space (the output of the FM
network). Corresponding Output Difference values are summarized in (c). Note that all components of ALP and SLP vectors are normalized as in [1], [3],
[2].

of international crises and conﬂicts,” Ph.D. dissertation, George Mason
University, 2016.

[47] B. B. de Mesquita, Predicting politics. Ohio State Univ Pr, 2002.
[48] U. Wilensky, “Netlogo aids model,” ed. Evanston, IL: Center for
Connected Learning and Computer-Based Modeling, Northwestern Uni-
versity, 1997.

[49] J. M. Epstein, “Modeling civil violence: An agent-based computational
approach,” Proceedings of the National Academy of Sciences, vol. 99,
no. suppl 3, pp. 7243–7250, 2002.

[50] R. K. Brouwer, “Feed-forward neural network for one-to-many map-
pings using fuzzy sets,” Neurocomputing, vol. 57, pp. 345–360, 2004.
[51] K. K. Budhraja and T. Oates, “Improved reverse mapping for controlling
swarms by visual demonstration,” in 2018 IEEE 3rd International
Workshops on Foundations and Applications of Self* Systems (FAS*
W).

IEEE, 2018, pp. 130–135.

[52] M. Andrychowicz, M. Denil, S. Gomez, M. W. Hoffman, D. Pfau,
T. Schaul, B. Shillingford, and N. De Freitas, “Learning to learn by
gradient descent by gradient descent,” in Advances in Neural Information
Processing Systems, 2016, pp. 3981–3989.

[53] C. Finn, P. Abbeel, and S. Levine, “Model-agnostic meta-learning for
fast adaptation of deep networks,” arXiv preprint arXiv:1703.03400,
2017.

[54] C. M. Bishop, “Mixture density networks,” Citeseer, Tech. Rep., 1994.

[30] A.-V. Duka, “Neural network based inverse kinematics solution for
trajectory tracking of a robotic arm,” Procedia Technology, vol. 12, pp.
20–27, 2014.

[31] P. Srisuk, A. Sento, and Y. Kitjaidure, “Inverse kinematics solution using
neural networks from forward kinematics equations,” in Knowledge and
Smart Technology (KST), 2017 9th International Conference on.
IEEE,
2017, pp. 61–65.

[32] P. Jha and B. Biswal, “A neural network approach for inverse kinematic
of a scara manipulator,” IAES International Journal of Robotics and
Automation, vol. 3, no. 1, p. 52, 2014.

[33] A. R. Almusawi, L. C. D¨ulger, and S. Kapucu, “A new artiﬁcial
neural network approach in solving inverse kinematics of robotic arm
(denso vp6242),” Computational
intelligence and neuroscience, vol.
2016, 2016.

[34] K. K. Budhraja and T. Oates, “Implementing feedback for programming
by demonstration,” in 2018 IEEE 12th International Conference on Self-
Adaptive and Self-Organizing Systems (SASO).
IEEE, 2018, pp. 162–
167.

[35] M. I. Jordan and D. E. Rumelhart, “Forward models: Supervised learning
with a distal teacher,” Cognitive science, vol. 16, no. 3, pp. 307–354,
1992.

[36] K. K. Budhraja and T. Oates, “Dataset selection for controlling swarms
by visual demonstration,” in 2017 IEEE International Conference on
Data Mining Workshops (ICDMW).

IEEE, 2017, pp. 932–941.

[37] D. P. Kingma and M. Welling, “Auto-encoding variational bayes,” arXiv

preprint arXiv:1312.6114, 2013.

[38] T. Lucas and J. Verbeek, “Auxiliary guided autoregressive variational

autoencoders,” arXiv preprint arXiv:1711.11479, 2017.

[39] S. Kullback and R. A. Leibler, “On information and sufﬁciency,” The
annals of mathematical statistics, vol. 22, no. 1, pp. 79–86, 1951.
[40] Y. A. LeCun, L. Bottou, G. B. Orr, and K.-R. M¨uller, “Efﬁcient
Springer, 2012,

backprop,” in Neural networks: Tricks of the trade.
pp. 9–48.

[41] A. C. Marreiros, J. Daunizeau, S. J. Kiebel, and K. J. Friston,
“Population dynamics: variance and the sigmoid activation function,”
Neuroimage, vol. 42, no. 1, pp. 147–157, 2008.

[42] V. Nair and G. E. Hinton, “Rectiﬁed linear units improve restricted boltz-
mann machines,” in Proceedings of the 27th international conference on
machine learning (ICML-10), 2010, pp. 807–814.

[43] U. Wilensky, “Netlogo ﬁre model,” ed. Evanston, IL: Center for Con-
nected Learning and Computer-Based Modeling, Northwestern Univer-
sity, 1997.

[44] T. C. Schelling, “Dynamic models of segregation,” Journal of mathe-

matical sociology, vol. 1, no. 2, pp. 143–186, 1971.

[45] U. Wilensky, “Netlogo turbulence model,” ed. Evanston, IL: Center
for Connected Learning and Computer-Based Modeling, Northwestern
University, 2003.

[46] D. P. Masad, “Agents in conﬂict: Comparative agent-based modeling

