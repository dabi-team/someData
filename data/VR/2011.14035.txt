cMinMax: A Fast Algorithm to Find the Corners of an N-dimensional
Convex Polytope

Dimitrios Chamzas1,2, Constantinos Chamzas 3 and Konstantinos Moustakas1
1Department of Electrical and Computer Engineering, University of Patras, Rio Campus, Patras 26504, Greece
2McCormick School of Engineering, Northwestern University, 2145 Sheridan Road, Evanston, IL 60208 USA
3Department of Computer Science, Rice University, Houston, TX 77251, USA
chamzas95@gmail.com, chamzask@gmail.com, moustakas@ece.upatras.gr

Keywords:

Augmented reality environments, Image Registration, Convex Polygon Corner Detection Algorithm, N-
Dimensional Convex Polyhedrons

Abstract:

During the last years, the emerging ﬁeld of Augmented & Virtual Reality (AR-VR) has seen tremendous
growth. At the same time there is a trend to develop low cost high-quality AR systems where computing power
is in demand. Feature points are extensively used in these real-time frame-rate and 3D applications, therefore
efﬁcient high-speed feature detectors are necessary. Corners are such special features and often are used as the
ﬁrst step in the marker alignment in Augmented Reality (AR). Corners are also used in image registration and
recognition, tracking, SLAM, robot path ﬁnding, 2D or 3D object detection and retrieval as well as in linear
programming algorithms. Therefore there is a large number of corner detection algorithms but most of them
are too computationally intensive for use in real-time applications of any complexity. Many times the border
of the image is a convex polygon. For this special, but quite common case, we have developed a speciﬁc
algorithm, cMinMax. The proposed algorithm is faster, approximately by a factor of 5 compared to the widely
used Harris Corner Detection algorithm. In addition is highly parallelizable. The algorithm is suitable for the
fast registration of markers in augmented reality systems and in applications where a computationally efﬁcient
real time feature detector is necessary. The algorithm can also be extended to N-dimensional polyhedrons.

1 INTRODUCTION

Augmented & Virtual Reality (AR-VR) systems and
applications have seen massive development and have
been studied extensively over the last few decades
(Billinghurst et al., 2015). Also with the development
of three-dimensional measuring technologies (3D
Scanners) it is possible to acquire three-dimensional
data using inexpensive three dimensional scanners
raising the expectation that three-dimensional data
and interfaces will be used. At the same time there
is a trend to develop low cost high-quality 3D AR
systems where computing power is in demand. Fig-
ure 1 shows such a low cost 3D Augmented Reality
system using a tangible interface and constructed us-
ing commodity hardware (Chamzas and Moustakas,
2020). Its central processing unit is a Raspberry Pi 4
equipped with a Raspberry camera. Moreover smart-
phones are continuously evolving, adding more com-
puter power, more sensors, and high-quality display.
Multi cameras and depth sensors are some of their re-
cent additions. Therefore, we expect that it will be

Figure 1: 3D Augmented Reality Tangible User Interface
using Commodity Hardware Using cMinMax to register
Real World to AR World

possible to implement all the functionalities of an AR
system just in a smartphone. In this cases, comput-
ing power will be in demand and we will need to de-
velop new fast and efﬁcient algorithms. One of the
main problems in these systems is the registration of
the Real and Virtual world, where we need to map
the real-world 3D coordinates (xr, yr, zr) to the digi-

2
2
0
2

y
a
M
3
1

]

V
C
.
s
c
[

3
v
5
3
0
4
1
.
1
1
0
2
:
v
i
X
r
a

 
 
 
 
 
 
tal world coordinates (xv, yv, zv). One commonly used
technique is the image marker. We place an object,
the marker, with a known shape in the real world and
we want to ﬁnd a projective transformation that will
map this object to its virtual world counterpart. This
transformation has to be recalculated every time the
camera changes position within the real world envi-
ronment and for real time systems this requires a sub-
stantial amount of the systems computer resources.
This becomes even worst when we are dealing with
markerless AR systems. A common approach to ad-
dress this registration problem is ﬁnding features on
the real world marker and since we know their posi-
tion in the Virtual world, we can calculate the required
projective transformation. Corners are such features.
Detecting Corners is also the ﬁrst step in many
Computer Vision and Object identiﬁcation and re-
trieval tasks.
It is also important to areas such as
medicine, engineering, entertainment and so on that
are increasingly relying in processes that require this
kind of information. In this work we present a simple
and fast algorithm that addresses the above problem
when the border of the image is a convex polygon.

2 PREVIOUS WORK

The problem to ﬁnd the corners in an image was ex-
amined in the past. Most of the methods presented
were based on the original algorithm proposed in
(Harris et al., 1988), where they compute a corner by
exploiting sudden changes in image brightness. SU-
SAN (Smith and Brady, 1997) is another algorithm
widely used for edge and corner detection. Using
morphological operators was another approach (Lin
et al., 1998) used to ﬁnd the corners in an image. A
different approach using machine learning was also
proposed in (Rosten and Drummond, 2006).

With the development of three-dimensional tech-
nology and the usage of VR & AR and Robotic sys-
tems, another ﬁeld that is growing fast over the last
years is 3D or multidimensional data. Finding points
of interest in 3D clouds (Nousias et al., 2020a; Nou-
sias et al., 2020b) or decomposing multidimensional
workspaces into local primitives (Chamzas et al.,
2019), becomes important and again corners (ver-
tices) are one of them. An extension of Harris Corner
Detection algorithm to 3D was proposed in (Głomb,
2009; Sipiran and Bustos, 2010; Sipiran and Bus-
tos, 2011). An example of extending SUSAN to 3D
point clouds is described in (Walter et al., 2009) while
in (Katsoulas and Bergen, 2001) there is an indirect
method that extracts edges from a 3D point cloud,
and then regards these intersection points as corners.

In (Abe et al., 2017), a technique is presented that
estimates the vertices in a 3D Point Cloud on con-
vex polyhedra surfaces using Delaunay Tetrahedral-
ization. Convex Hull algorithms (Berg et al., 2013;
Toth et al., 2017) could also be used to determine the
corners.

All of the above algorithms have a considerable
processing cost as compared to the proposed tech-
nique, which is simple, robust and applicable to any
dimension. Moreover is highly parallelizable. The in-
put in the proposed method is a point cloud contained
in a convex polytope acquired by an appropriate scan-
ner.

3 THE ALGORITHM

In image registration we often need to ﬁnd the corners
of the image. One of the most popular algorithms to
address this problem is the Harris Corner Detection
(Harris et al., 1988; OpenCV03, 2019; OpenCV02,
2018) and its variants. Many times the border of the
image is a convex polygon. For this special, but quite
common case, we have developed a speciﬁc algo-
rithm, referred as cMinMax. The algorithm utilizes
the fact that if we ﬁnd the x-coordinates of the pix-
els that belong to the image, then their maximum,
xmax, is a corner’s coordinate. Similarly for xmin, ymin
and ymax. The proposed algorithm is approximately
5 times faster than the Harris Corner Detection Algo-
rithm, but its applicability is limited only to convex
polygons.

3.1 The Algorithm Steps for 2D

The basic steps of the algorithm are:

1. Prepossessing: Generate a binary version of the

image.

2. If φmax = 2ωmax is the expected maximum angle
of the polygon, choose ∆θ = π − φmax and M >
π
2(π−φmax) =

∆θ ,

π
2

3. For k = 0, 1, .., M −1, rotate the image by θrotate =

k ∗ ∆θ = k(π − φmax)

4. Project the image on the vertical and horizontal
axis and ﬁnd the (xmin, xmax, ymin, ymax). These are
coordinates of four corners of the rotated convex
polygon.

5. Rotate the image backwards by −∆θ to the initial
position and ﬁnd the coordinates of the four cor-
ners.

6. At the end, we have found 4M points which is
greater than the number of expected polygon cor-
ners. Hence,
there are more than one pixels
around each corner. We evaluate now the centroid
for each of these bunches and these are the esti-
mated corners of the convex polygon.

Note: (a) The rotation step is always ∆θ = π −
φmax but if we ﬁnd only xmin and xmax then M > π
∆θ and
if we ﬁnd only xmax then M > 2π
∆θ . (b) For a canonical
polygon with N corners where we ﬁnd only xmax, we
have φmax = N∗π−2π
and M > 2∗π

∆θ = N.

N

Figure 2: Detected corners in a hexagon for M=3 rotations.
In each rotation we detect 4 corners

In Figure 2 we apply the algorithm in a hexagon.
2(180◦−120◦) = 1.5,

We have φmax = 120◦, thus M >
and we use M=3.

180◦

3.2 The Proof

In this section we present the theoretical background
for the algorithm.

The Problem: Find the N-corners in an image that
contains an object with a boundary that is a convex
polygon.

Deﬁnition: Let us have a convex polygon with N-
corners with coordinates I = (xi, yi)i=1,N. One corner
with coordinates (xk, yk) is called discoverable, if one
of its coordinates is maximum or minimum in the set
I, that is

xk = max or min o f (x1, x2, ..., xN) or
yk = max or min o f (y1, y2, ..., yN)

(1)

Example: In Figure 3, the corners A,C, D of the
pentagon (ABCDE) are discoverable , while B, E are
not.

(cid:48)

) and (O

A) with the angle φ = ∠OO

Proposition 1: We have two connected lines
(cid:48)
A to be
) in incre-
A) will rotate also in

(OO
constant (see Figure 4). If we rotate (OO
ments of ∆θ around O, then (O
increments of ∆θ around O

(cid:48)

(cid:48)

(cid:48)

(cid:48)

.
Proof: Let us rotate (OO

(cid:48)

) by ∆θ = θ2 − θ1, from
A) ro-
position P1 to position P2. The line segment (O
tates around O
from θ1 + φ to θ2 + φ, and the change
is again ∆θ = (θ2 +φ)−(θ1 +φ). Therefore if the line

(cid:48)

(cid:48)

Figure 3: Discoverable Corners

Figure 4: Rotating Rigidly Connected Lines

(cid:48)

(cid:48)

) rotates around O

segment (OO
then, neglecting translations, the line segment (O
rotates also in increments of ∆θ around O

in increments of ∆θ,
A)

.

(cid:48)

(cid:48)

Proposition 2: In a convex polygon, B is one of its
corners, ∠B is its angle and φ = 180o − ∠B its exple-
mentary. If we rotate the polygon around B in incre-
ments of ∆θ < φ, then in at most M ≥ 2π
∆θ rotations,
the adjacent points A and C will be at least once to the
(cid:48)
left side of vertical line yy
.

Figure 5: Invariant Rotation Center

Proof: Let us assume that we rotate the polygon
counterclockwise around B, in increments of ∆θ start-

(cid:48)

ing from position P1 (Fig. 5 (a)).
In M steps, BC
will make a full rotation around B. Now let us con-
sider position P2 when BC moves for the ﬁrst time
to the left of yy
, (Fig. 5 (b)). Then ω < φ and
ω + ∠CBA < φ + ∠CBA = 180o. Therefore point A
is to the left of yy
. Since the polygon is convex, all
(cid:48)
its corners are to the left of yy
, therefore its coordi-
nate xB, will be at least once the maximum of all the
x-coordinates of the polygon angles.

(cid:48)

Corollary 1: For the corner B to be discoverable,
it is sufﬁcient to rotate the polygon around B in M ≥
pi
2∆θ with ∆θ < φ (see Fig. 5).

Proof: In order for corner B to be discoverable, it
is enough for its two adjacent edges to be to the left
(cid:48)
(cid:48)
(cid:48)
, or to the right of yy
of yy
.
Therefore we need only M ≥ pi

, or above xx

or below xx

2∆θ rotation steps.

(cid:48)

Theorem 1: We have a convex polygon see Fig.
5 (a)), and let φ be the explementary of its maximum
angle. We select a point O and we rotate the polygon
around it in increments of ∆θ < φ, then in at most
M ≥ π
2∆θ , all its corners will be discoverable at least
once.

Proof: Let B a corner of the polygon. The angle
between OB and its adjacent edges is constant during
the rotation around O. Then because of Proposition
1, as we rotate the polygon around O in increments
of ∆θ, all its edges are rotating in increments of ∆θ
around their adjacent corners. Consequently accord-
ing to Corollary 1 if we rotate the convex polygon
around a point O in increments of ∆θ < φ, then in at
most M ≤ π
2∆θ steps, all its corners will be discover-
able at least once.

3.3 Extension to N-dimensional Convex

Polyhedrons

The algorithm can also be extended to N-dimensional
polyhedrons.

Deﬁnition 2: A set C is convex if for any points
x, y ∈ C the segment [x, y] joining them belongs to C.
A convex polyhedron is a polyhedron that, as a solid,
forms a convex set. Another deﬁnition is: A convex
polyhedron can also be deﬁned as a bounded inter-
section of ﬁnitely many half-spaces (Grunbaum and
Shephard, 1969; Gr¨unbaum, 2013).

Deﬁnition 3: Let us have a convex polyhedron
with N-vertices with coordinates I = (xi, yi, zi)i=1,N.
One vertex with coordinates (xk, yk, zk) is called dis-
coverable, if one of its coordinates is maximum or

minimum in the set I, that is

xk = max or min o f (x1, x2, ..., xN) or
yk = max or min o f (y1, y2, ..., yN) or
zk = max or min o f (z1, z2, ..., zN)

(2)

Deﬁnition 4: Let O be a vertex of the convex
polyhedron and OA, OB, OC, OD, OE its edges (Fig-
ure 6 (shown for 3D)). We deﬁne O1OO2 as the Min-
imum Bounding Cone for the vertex O, the smallest
cone that its top is the vertex O and it contains all
the edges of the vertex O. This Minimum Bounding
Cone will have at least two of the vertex edges on
its surface and the rest inside. Let also OK be its
axis of symmetry. This way we can associate with
each vertex of a convex polyhedron an angle, the an-
gle ∠O1OO2 = 2ω of the Minimum Bounding Cone.
Since the polyhedron is convex, we have φ > 0o and
0o < ω = ∠KOO2 < 90o. The Minimum Bounding
Cone Angle is another way to deﬁne the solid angle
of a vertex in an N-dimensional convex polytope (?).

Figure 6: Minimum Bounding Cone of a vertex

Evaluation of the Minimum Bounding Cone an-
−→
gle: Assuming that the vector
OA is one of the edges
that are on the surface of the circumscribed cone and
−→
OK is its axis of symmetry, then the an-
the vector
gle between these two vectors ∠AOK = ω = φ/2 i.e.

(cid:18)

(cid:19)

−→
OK,

−→
OA)

dot(
−→
OK||
|

−→
OA|

ω = arccos

. For a regular polytope, A

is any vertex adjacent to O and K is its center of grav-
ity. In the last column of Figure 7 we show the Mini-
mum Bounding Cone Angles for the 3D and 4D reg-
ular polytopes.

∆θ (cid:101) and Nφ = (cid:100) 2π

Proposition 3: Let Rx(θ), Ry(θ), Rz(θ) be the rota-
tion matrices by θ around axis x, y, z respectively and
Nθ = (cid:100) 2π
∆φ (cid:101), where ∆θ and ∆φ are in-
cremental rotation angular steps around the axis z and
−→
z. We multiply a vector
OK by the rotation matrix
Rzy = Ry(k∆φ)Rz(m∆θ) for k = 0, 1, 2, ..., Nθ − 1 and
m = 0, 1, 2, ..., Nφ − 1. The NθNφ positions of the ro-
tated vector are shown in Figure 8. At least for one
of them, its distance dx from the axis x is less than

Figure 7: Minimum Bounding Cone Angles for 3D and 4D
Regular Polytopes
√

. The same is also true for dz the distance of

∆θ2+∆φ2
2

a grid point from the axis z .

Figure 8: 3D Grid of a vector position rotated around axis z
and axis y with ∆θ = ∆φ = π

10 rads

Proof: We ﬁrst rotate a unit vector

−→
OK around axis
z by k∆θ until it goes to its nearest position to plane
−−→
OK1 in Figure 9. Its distance
(x,z). This is position
from plane (xz) will be less than ∆θ
2 . Then we rotate it
around axis y in steps of ∆φ until it goes to its nearest
−−→
OK f in Fig-
position to plane (x,y). This is position
ure 9. Its distance from plane (xy) will be less than
∆φ
2 . Thus there is a pair (kx, mx) for which the vector
−−→
−→
OKx and for this position
OK goes to the grid position

∆θ2+∆φ2
its distance dx from the axis x is dx <
. Sim-
2
−→
OK goes to
ilarly for another pair (kz, mz) the vector
−−→
OKz the closest grid position to axis z. How-
vector
ever, we can never go close to second axis of rotation,
axis y, since for any position in the grid its angle to
axis y remains greater or equal to 90o − φ (see Fig-
ure 8) QED.

√

Proposition 4: In a convex polyhedron, the an-
gle of the Minimum Bounding Cone of vertex O is

Figure 9: 3D Rotation of a vector around axis z and axis y

2 − ω and Nθ ≥ π

2ω.
If we rotate the polyhedron ﬁrst around axis
z and then around axis y, in increments of k∆θ and
m∆φ, k = 0, ..., Nθ − 1, m = 0, 2, ..., Nφ − 1 with ∆θ <
π
2 − ω, ∆φ < π
∆φ , then the
Minimum Bounding Cone of vertex O will fall at least
once in the upper side of the plane vertical to axis z,
passing from O (see Figure 5). Also similarly will be
once bellow and once above the plane passing from O
and vertical to axis x.

∆θ , Nφ ≥ π

Figure 10: 3D Rotation of a Convex Polyhedron

Proof: Similar to Proposition 2. As we multiply
the points of the polyhedron with the rotation matrix
−→
Rzy the direction of vector
OK will go through all its
corresponding position in its 3D grid. As proved in
Proposition 3, at least one position of the 3D grid cor-
responding to the axis of symmetry OK of the Mini-
mum Bounding Cone of vertex O will fall inside the
cone (OAB). This cone is perpendicular to the plane
Q and the angle of its sides to Q is ω

Theorem 2: We have a convex polyhedron, and
let φmax = 2ωmax be the maximum angle of all the
Minimum Bounding Cones corresponding to its ver-
tices. We select two axis for the 3D case (N-1 axis

for an N-dimensional object) of the coordinate sys-
tem. i.e. z and y and by multiplying all the points with
the rotation matrix Rzy, we rotate the polygon around
them with k∆θ and m∆φ where k = 1, ..., Nθ, m =
1, 2, ..., Nφ, ∆θ < π
2 − ωmax, ∆φ < π
2 − ωmax and Nθ ≥
∆θ , Nφ ≥ π
π
∆φ . Then all its vertices will be discoverable
at least once in the axis x and axis z.

Proof: It follows from Proposition 4.
Note: A different line of proof could be based on
the fact that the projection of convex polyhedron on a
plane is a convex polygon. Thus we rotate the poly-
hedron around an axis, we project it on the planes that
contain the axis and then we apply the 2D algorithm
to the obtained convex polygons.

The extension of the algorithm to N-dimensional
Convex polytopes is possible in a similar way. Ro-
tations must now deﬁned in N-dimensional space (?)
around their ”N-dimensional axis”.

4 IMPLEMENTATION

A crucial parameter in the above algorithm was
the choice of M. With φmax the expected maximum
it was shown that if M ≥
angle of the polygon,
π/(π − φmax), then each corner of the polygon will
appear at least once in the set of the detected cor-
ners. For example, for an orthogonal parallelogram,
φmax = 2π/4 , M ≥ 2 and if we chose M = 2, the rota-
tion step is π/4. For a hexagon we have φmax = 2π/3,
M ≥ 3 and if we chose M = 3 the rotation step is π/6.
However, when an edge becomes nearly vertical to an
axis, due to numerical accuracy and noisy data, many
times there are more than one max or min points in the
projection on one axis. In this case we decided to ne-
glect all of them and go the next rotation step. Thus,
we must make more rotation steps than the one pre-
dicted by the theoretical analysis. Another parameter
is the center of the image rotation. Again, as it was
shown, we can choose any point as the image rotation
center, but it is expected that if the rotation center is
the centroid of the convex polygon, the algorithm to
be less sensitive to numerical errors.

4.1 Examples

4.1.1 2D Case

For the 2D case, we used a 2040x1080 binary image
of a convex polygon with seven corners Figure 11 and
φmax ≈ 158◦. The required number of rotations must
be at least M ≥ 180◦
180◦−158◦ = 8.53. Thus we used N=9
rotations with ∆θ = 90◦

9 = 10◦

Figure 11: Estimated Corners in a heptagon (red dots).

4.1.2

3D Case

In this example we used a dodecahedron point cloud
obtained from MeshLab, with 14535 points. The
length of its edge is 3.2361 . The results for this
dodecahedron with ∆θ = ∆φ = π
20 are shown in Fig-
ure 12. We did 20x20=400 rotations, for every rota-
tion we ﬁnd 6 corners, 2 in each axis, but only 282 of
them were accepted as valid and they were classiﬁed
as corners. For the other cases, due to numerical accu-
racy we had more than one max or min in one axis and
they were rejected. These 282 points were clustered
to 20 groups, and their centroids were the estimated
corners. The average accuracy of the estimation was
approximate 2% of the edge length. The maximum
angle of the minimum bound cone is ωmax = 69.095◦,
and theoretically we could use ∆θ = ∆φ = π
9 , but due
to numerical errors and noise we need less than half
of it.

Figure 12: Estimated Corners in a dodecahedron (red dots).
Circles indicate the weighted position of corners

4.2 Evaluation: Computational

Complexity

Let us assume we have a point cloud with n points of a
N-dimensional polytope and we know that the φmax =
2ωmax is the expected maximum angle of all the Min-
imum Bounding Cones corresponding to its vertices.

θ

θ

Then, following Theorem 2, with ∆θ < π
2 − ωmax and
∆θ , we have to perform (N − 1)N(N−1)
Nθ ≥ π
rotations
of n points, in order all its vertices to be discoverable
at least once in one axis. Therefore in every step of
the algorithm we perform one rotation and then ﬁnd
the max of the n points x-coordinates. Both oper-
ations are of complexity O(n) and we have to per-
form at least L = (N − 1)N(N−1)
steps, thus the al-
gorithm computational complexity is LO(n). At this
point we have to observe that each step is indepen-
dent from the others, therefore they can computed in
parallel and the proposed algorithm is highly paral-
lelizable. Assuming that the algorithm is running in
a computer with at least L GPUs then we can claim
that its complexity is O(n). Convex Hull and Harris
corner Detection algorithms can also be used to ad-
dress similar problems. Convex Hull algorithms are
difﬁcult to be parallelizable and their sequential ver-
sion is of O(nlog(n)) complexity (Berg et al., 2013;
Toth et al., 2017). To compare it with the complex-

rotation step for the application of cMinMax. One
approach will be to start with an initial rotation step.
Next we reduce it and try again, until the number of
detected corners remain constant. An alternative ap-
proach is to rotate the polytopes with angles selected
randomly, In this case it is important to have uni-
formly distributed rotations. The 2D case is simple,
but we have to be careful when we deal with objects
in with dimensionality higher than two.

2-D: We select a random angle ∆θ in the closed
interval [−π, π]. We rotate the convex polygon by ∆θ
and we ﬁnd the extremes of the coordinates in the x-
axis and y-axis. We continue until no more different
corners are detected.

Figure 13: Ratio of execution time for cMinMax and Har-
ris Corner Detection algorithm applied to regular polygons
with 3 to 25 corners

ity of Harris corner detection algorithm in 2D (Chen
et al., 2009), we did run both of them in MatLab®,
using the detectHarrisFeatures() command. For 2D
space we have N = 2 and the complexity of cMinMax
is NθO(n). For images with 3-12 corners, cMiniMax
is on the average 5 times faster than Harris Corner de-
tection algorithm (see Figure 13). In addition the pro-
posed algorithm appears to be less sensitive to sam-
pling quantization errors.

5 RANDOM SAMPLING

Most of the times the number of unknown corners is
not given and in addition we do not have a good es-
timation of φmax. Thus we cannot estimate a proper

Figure 14: (a) Uniformly distributed points on a sphere.
Red dots the 20 dodecahedron vertices. (b) A vector and
its rotated positions. (c) Histogram of (a) around the 20 red
dots. (d) Histogram of (b) around the 20 red dots.

3-D: We select two random angles ∆θ and ∆φ. ∆θ
is uniformly distributed in the interval [−π/2, π/2].
∆φ is randomly distributed in the interval [−π, π] with
a density distribution f (φ) = sin(φ)/2 . This way we
have more points around the equator φ = 0, generating
thus uniformly distributed pairs ∆θ, ∆φ on a sphere 1
(see Figure 14 (a)). We rotate now the convex poly-
hedron by ∆θ and ∆φ and we ﬁnd the extremes of the
coordinates in the x-axis, y-axis and z-axis. To make
the ﬁnal position of the rotated points as random as
possible, in every step we peak randomly one of the
possible six possible axis rotations. The rotated po-
sition of a vector are shown in Figure 14 (a). In Fig-

1http://corysimon.github.io/articles/uniformdistn-on-

sphere/

ure 14 (c) and (d) we show the histograms for (a) and
(b). Each of the 20 bins contain the points that close
to the corresponding vertex of dodecahedron (red dots
in (a)).

To simplify our analysis we will examine the case
where we ﬁnd the max ONLY in the x-axis. It is clear
that in every rotation we detect only ONE corner. The
question we want to answer is, how many times do
we have to rotate a polytope with N corners, in order
to detect all its corners. This problem is equivalent to
the following Die problem (Isaac, 1996), irrespective
of the dimensionality of the polytope space, ”Roll a
die with N-faces. What is the expected number of rolls
to get all its N faces?. 2

Figure 15: Mean and 99% percentile of required Rotations
for a canonical polytope with N corners (red line). With
blue dashed line and with red and green circles are the re-
quired rotations for the deterministic case for 2D, 3D and
4D canonical polyhedrons

(cid:17)2

(cid:17)3

π−2ωmax

(cid:16) 2π

In Figure 15, we show the theoretically re-
quired number of rotations for 2D, 3D and 4D
canonical polytopes with N vertices (Coxeter, 1973;
?). For the case of rotating in equal angle steps,
for the 2D canonical polygons we have Nrot =
= N. For 3D and 4D polytopes we have
(cid:16) 2π

2π
π−2ωmax
and Nrot =
Nrot =
respec-
tively. From Figure 7 we have for the 3D platonic
solids with N = 4, 6, 8, 12, 20 vertices, that their an-
gles φmax = 2ωmax of their Minimum Bound Cones
are 70.53◦, 90.00◦, 109.47◦, 116.57◦ and 138.19◦ re-
spectively. There are six 4D convex platonic solids
3,4 with N = 5, 8, 16, 24, 120, 600 vertices. The an-
gles φmax = 2ωmax of their Minimum Bound Cones is
for N = 5, 16, 75.52◦, 120◦, respectively. For the ran-
dom case, a canonical polytope is equivalent to a fair
die with N equiprobable faces and it is known that the
expected number of rolls to get all its N faces is the

π−2ωmax

n=1

harmonic mean of N, i.e. mNrot = N ∑N
1
n . This is
the red line in Figure 15 together with the 99% per-
centile. From Figure 15 we conclude that for 2D it is
preferable to use the rotation in equal steps, for 3D,
rotation in equal steps and random rotation are equiv-
alent but for higher dimensions the random rotation
case is expected to be preferable.

6 CONCLUSIONS

A new corner estimation technique on N-dimensional
point clouds of convex polytopes was proposed in
this contribution. The proposed algorithm is based
on the fact that the min and max of projected co-
ordinates in any axes belong to a corner. For 2D
we compared it with the Harris corner detection al-
gorithm (implementation at Matlab) and it was ap-
proximately 5 times faster for objects with less then
10 corners. We deﬁned the solid angle of a ver-
tex of an N-dimensional convex polyhedron by in-
troducing the concept of the MinimumBoundingCone
and we proved that the algorithm terminates in ﬁnite
steps and the number of steps depends on the maxi-
mum solid angle of the convex polytope. We study
2 different techniques for rotating the point cloud
of the object, either rotating by incremental angle
steps(deterministic) or by choosing the angles of rota-
tion randomly. We concluded that for 2D if preferable
to use deterministic approach, for 3D the two methods
are equivalent but for higher dimension we expect the
random to be preferable. Another advantage of the
algorithm is that it can be implemented using parallel
processing since all the rotations can be executed si-
multaneously. A limitation of the proposed algorithm
is that it requires a prior estimation of the maximum
solid angle of the convex polytope and in future work
we will try to address this problem. Usage in real
time multidimensional applications is another one, so
we plan to develop a faster version of the algorithm
suitable for graphics cards using multiple GPUs by
exploiting its parallel implementation. Finally, using
morphological operators we will try to extend its ap-
plicability to non-convex objects,

ACKNOWLEDGMENTS

2http://www.cis.jhu.edu/∼xye/papers and ppts/ppts/

SolutionsToFourProblemsOfRollingADie.pdf
3http://eusebeia.dyndns.org/4d/regular
4https://en.wikipedia.org/wiki/Regular 4-polytope#

Regular convex 4-polytopes

The authors wish to thank the members of the Vi-
sualization & Virtual Reality Group of the Depart-
ment of Electrical and Computer Engineering of the
University of Patras as well as Dr. A. Koutsoudis
and Dr. G. Ioannakis from the Multimedia Research

Lab of the Xanthi’s Division of the ”Athena” Re-
search and Innovation Center, for their useful com-
ments and discussions during the initial preparation
of this work. Constantinos Chamzas for this work was
supported by the National Science Foundation, Grad-
uate Research Fellowship Program under Grand NSF-
GRFP 1842494 and Konstantinos Moustakas by the
European Union’s Horizon 2020 research and innova-
tion programme under Grant Agreement No 871738 -
CPSoSaware-Crosslayer cognitive optimization tools
& methods for the lifecycle support of dependable
CPSoS.

Lin, R.-S., Chu, C.-H., and Hsueh, Y.-C. (1998). A modiﬁed
morphological corner detector. Pattern Recognition
Letters, 19(3-4):279–286.

Nousias, S., Arvanitis, G., Lalos, A. S., Koulamas, C.,
Pavlidis, G., Kalogeras, A., and Moustakas, K.
(2020a). A saliency aware CNN-Based 3D Model
simpliﬁcation and compression framework for re-
mote inspection of heritage sites. Access, 8:169982–
170001.

Nousias, S., Arvanitis, G., Lalos, A. S., and Moustakas, K.
(2020b). Mesh Saliency Detection Using Convolu-
tional Neural Networks. In 2020 Int. Conf. on Multi-
media and Expo (ICME), pages 1–6. IEEE.

on

How

OpenCV02

(2018).
a

to
ners
opencv.
image
//stackoverﬂow.com/questions/7263621/
how-to-ﬁnd-corners-on-a-image-using-opencv.
OpenCV03 (2019). Harris corner detection. https://docs.

cor-
https:

using

ﬁnd

opencv.org/5.1.1/dc/d0d/tutorial py features harris.
html.

Rosten, E. and Drummond, T. (2006). Machine learning for
high-speed corner detection. In European conference
on computer vision, pages 430–443. Springer.
Sipiran, I. and Bustos, B. (2010). A robust 3d interest points
In Eurographics
detector based on harris operator.
workshop on 3D object retrieval (3DOR), volume 5,
pages 7–14. Citeseer.

Sipiran, I. and Bustos, B. (2011). Harris 3d: a robust exten-
sion of the harris operator for interest point detection
on 3d meshes. The Visual Computer, 27(11):963.
Smith, S. M. and Brady, J. M. (1997). Susan—a new ap-
proach to low level image processing. International
journal of computer vision, 23(1):45–78.

Toth, C. D., O’Rourke, J., and Goodman, J. E. (2017).
Handbook of discrete and computational geometry
(see Chapter 26). CRC press.

Walter, N., Aubreton, O., Fougerolle, Y. D., and Laligant,
O. (2009). Susan 3D operator, principal saliency de-
grees and directions extraction and a brief study on
the robustness to noise. In 16th Int. Conf. on Image
Processing (ICIP), pages 3529–3532. IEEE.

REFERENCES

Abe, S., Mori, H., Toyama, F., and Shoji, K. (2017). Corner
estimation for 3D point cloud on convex polyhedral
surfaces using delaunay tetrahedralization. In Proc. of
the Computer Graphics Inter. Conf., page 25. ACM.

Berg, M., Cheong, O., van Kreveld, M., and Overmars, M.
(2013). Computational Geometry: Algorithms and
Applications. Springer, 3nd edition.

Billinghurst, M., Clark, A., Lee, G., et al. (2015). A sur-
vey of augmented reality. Foundations and Trends®
in Human–Computer Interaction, 8(2-3):73–272.
Chamzas, C., Shrivastava, A., and Kavraki, L. E. (2019).
Using Local Experiences for Global Motion Planning.
In International Conference on Robotics and Automa-
tion (ICRA), pages 8606–8612.

Chamzas, D. and Moustakas, K. (2020). 3D Augmented
Reality Tangible User Interface using Commodity
Hardware. In 15th Int. Conf. on Computer Graphics
Theory and Applications (GRAPP), pages 384–391.

Chen, J., Zou, L.-h., Zhang, J., and Dou, L. (2009). The
Comparison and Application of Corner Detection Al-
gorithms. Journal of Multimedia, 4:435–441.

Coxeter, H. S. M. (1973). Regular polytopes. Dover Publi-

cations.

Głomb, P. (2009). Detection of interest points on 3D data:
Extending the harris operator. In Computer Recogni-
tion Systems 3, pages 103–111. Springer.

Gr¨unbaum, B. (2013). Convex polytopes, volume 221.

Springer Science & Business Media.

Grunbaum, B. and Shephard, G. C. (1969). Canonical poly-
topes. Bulletin, London Math. Soc., 1(3):257–300.
Harris, C. G., Stephens, M., et al. (1988). A combined cor-
ner and edge detector. In Alvey vision conference, vol-
ume 15.50, pages 10–5244. Citeseer.

Isaac, R. (1996).

The Pleasures of Probability (8.4
The coupon collector’s problem solved. pp. 80-82).
Springer-Verlag, New York, 2nd edition.

Katsoulas, D. and Bergen, L. (2001). Efﬁcient 3D vertex
detection in range images acquired with a laser sensor.
In Joint Pattern Recognition Symposium, pages 116–
123. Springer.

