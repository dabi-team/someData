8
1
0
2
c
e
D
2

]

R
G
.
s
c
[

1
v
7
0
3
0
0
.
2
1
8
1
:
v
i
X
r
a

Heter-Sim: Heterogeneous multi-agent systems simulation by interactive
data-driven optimization

Jiaping Ren*
State Key Lab of CAD&CG, Zhejiang University
Yangxi Xiao‡
State Key Lab of CAD&CG, Zhejiang University
Dinesh Manocha¶
Department of Computer Science and Electrical
and Computer Engineering, University of
Maryland

Wei Xiang†
State Key Lab of CAD&CG, Zhejiang University
Ruigang Yang§
Baidu
Xiaogang Jin||
State Key Lab of CAD&CG, Zhejiang University

Figure 1: Our heterogeneous multi-agent simulation algorithm can be used for scenarios with tens or hundreds of different types of
agents sharing a physical space. Pedestrians walking on a street (the ﬁrst). Cars moving on a twisting road (the second). Trafﬁc
including cars and pedestrians (the third). Trafﬁc shown through VR (the fourth). Our approach can generate plausible behaviors at
interactive rates on a desktop PC and through VR.

ABSTRACT

Interactive multi-agent simulation algorithms are used to compute
the trajectories and behaviors of different entities in virtual reality
scenarios. However, current methods involve considerable parameter
tweaking to generate plausible behaviors. We introduce a novel ap-
proach (Heter-Sim) that combines physics-based simulation methods
with data-driven techniques using an optimization-based formula-
tion. Our approach is general and can simulate heterogeneous agents
corresponding to human crowds, trafﬁc, vehicles, or combinations
of different agents with varying dynamics. We estimate motion
states from real-world datasets that include information about po-
sition, velocity, and control direction. Our optimization algorithm
considers several constraints, including velocity continuity, collision
avoidance, attraction, and direction control. To accelerate the com-
putations, we reduce the search space for both collision avoidance
and optimal solution computation. Heter-Sim can simulate tens or
hundreds of agents at interactive rates and we compare its accuracy
with real-world datasets and prior algorithms. We also perform user
studies that evaluate the plausible behaviors generated by our algo-
rithm and a user study that evaluates the plausibility of our algorithm
via VR.

Index Terms: Computing methodologies—Computer graphics—
Animation—Procedural animation; Computing methodologies—
Computer graphics—Animation—Physical animation;

*e-mail: ren jia ping@zju.edu.cn
†e-mail: xiang wei@zju.edu.cn
‡e-mail: x x@zju.edu.cn
§e-mail: yangruigang@baidu.com
¶e-mail: dmanocha@gmail.com
||e-mail: jin@cad.zju.edu.cn

1 INTRODUCTION
Many virtual reality and training systems need to be able to simulate
different types of agents, including human crowds and trafﬁc. Ap-
plications include VR therapy for crowd phobias, trafﬁc agents for
autonomous driving, urban design and planning, driving simulators
for education and entertainment, etc. It is important to simulate
the behaviors and trajectories of different types of agents, including
pedestrians and vehicles, and the interactions between such hetero-
geneous agents. Furthermore, it is important to develop general
plausible algorithms that are applicable to a wide variety of scenar-
ios.

There is extensive work on interactive multi-agent simulation,
including crowd simulation and trafﬁc simulation. These works
include techniques based on rule-based methods [30], physics-based
simulations [17, 32], energy-based models [10], data-driven meth-
ods [6, 27], and combinations of these approaches [20, 31]. These
methods are ﬂexible and have been successfully applied to different
scenarios. However, they often use many parameters and require a
signiﬁcant amount of effort to achieve good results that are plausible
and match the behaviors observed in real-world scenarios. Further-
more, the results of these methods often seem too regular because
all the agents have similar locomotion or movement patterns.

With the improvement of data acquisition techniques, more data-
driven methods are emerging. Most of these methods are patch-based
or use real-world agent trajectories [14, 15, 20, 32]. These methods
extract patches or trajectory segments from input datasets and either
connect them with some rules or use them to learn some characteris-
tics of an agent’s motion. With these methods, users can generate
more plausible or more accurate results than with traditional rule-
based or physics-based simulation methods. However, the variety of
the simulation results depends on the amount of input data. If the
amount of input data is small, the simulation results will be periodic
and monotonous.

Most of the existing methods only apply to one kind of agent,
e.g., only human pedestrians or only vehicles. In contrast, we want
to use a general method to model the behaviors of different kinds of
agents in a heterogeneous setting while retaining the motion features
of each kind of agent. This is important in many situations like

 
 
 
 
 
 
simulating the motion trajectories and interactions between cars
and humans at a trafﬁc crossing. Data-driven methods can also
help us with simulating interactions between heterogeneous agents.
However, data-driven methods depend on the input data, and it is
difﬁcult to simulate behavior in a scenario that is different from the
one that generated the input data.
Main Results: We present a novel, heterogeneous multi-agent sim-
ulation algorithm (Heter-Sim) that combines the beneﬁts of prior
data-driven and physics-based simulation methods to generate gen-
eral and plausible simulations. Our interactive approach can simulate
not only different kinds of agents while generating plausible behav-
iors, but also scenarios beyond those included in the input datasets.
We convert various datasets captured using different types of sen-
sors into a uniform format and extract the agents’ states, including
velocity information. We model the decision-making or local navi-
gation process of each agent as an optimization problem and deﬁne
an energy function that considers collision avoidance, attraction,
velocity continuity, and direction control. Our energy function tries
to match the results with real-world data characteristics. At a given
moment, each agent chooses a velocity from a dataset. We align the
control directions between simulation agents and real-world agents
to diversify agents’ possible behaviors and movements where there
is relatively less input data available. To accelerate the computation,
we utilize spatial continuity to reduce the number of possible colli-
sions and use the velocity continuity to reduce the solution space for
energy functions.

Overall, the novel contributions of our work include: 1. A general,
optimization-based method to simulate heterogeneous multi-agent
systems. We use our approach to simulate crowds, trafﬁc, and any
combination of those agents.
In addition, we use a data-driven
scheme to improve the plausibility of our simulation. 2. Two fast
search methods. To achieve real-time simulations, we utilize spatial
continuity and velocity continuity to search for possible collision-
free solutions. In practice, these search methods result in a 32,298x
speedup with 4,000 agents. 3. Ability to simulate new scenarios
beyond the input datasets: Our method can simulate agent behaviors
in a dense scenario, even if the original datasets correspond to sparse
scenarios. Furthermore, our method can simulate behaviors of agents
that may differ from those captured by the input data. We can also
use direction control, which computes ideal directions, to guide
agents in various environments.

We highlight the performance of our approach on different scenar-
ios in Fig. 1. In practice, our approach can generate plausible trajec-
tories and behaviors for tens or hundreds of heterogeneous agents at
interactive rates. To demonstrate the beneﬁts of our method, we have
conducted two user studies to evaluate the beneﬁts of our method
over prior methods while using a top-down view and the agent’s
view. In both studies, participants exhibit signiﬁcant preference for
our method over a prior crowd simulation method [18] and a trafﬁc
simulation method [6]. We also conduct a user study to compare the
user experience via VR and via desktop, and VR shows a better user
experience (see Sec. 7).

2 RELATED WORK

There is considerable research in multi-agent simulation, including
many algorithms for simulating crowds and trafﬁc. In this section,
we give a brief overview of prior methods for parameter estimation
and data-driven simulation.

2.1 Parameter Estimation and Real-World Characteris-

tics

Parameter estimation with real-world datasets improves the accu-
racy of simulation methods. Researchers utilize empirical data to
compute the parameters used for rule-based or physically-based
multi-agent simulation methods automatically. Wolinski et al. [34]
present a method to compute optimal parameters for rule-based

or physically-based multi-agent simulation algorithms. Berseth et
al. [2] present an approach that computes parameters for steering
methods by minimizing any combination of performance metrics.
Karamouzas et al. [16] use distortion and longitudinal dispersion of
the group to evaluate the results from simulations. Our approach
based on data-driven optimization is quite different from these meth-
ods.

Many techniques have been proposed to learn agent character-
istics from empirical data and to then use them for multi-agent
simulation. Lee et al. [22] present a crowd simulation method which
use an agent model generated from real-world observations. Chao et
al. [7] apply characteristics of drivers from an empirical video to an
agent-based model. Boatright et al. [4] classify the contexts and learn
the characteristics from a dataset. Charalambous et al. [8] present
a real-time synthesis method for crowd steering behaviors with the
temporal perception pattern. Bi et al. [3] simulate the process of
lane-changing in trafﬁc by learning characteristics from features
of real vehicle trajectories. Kim et al. [20] compute collision-free
trajectories of virtual pedestrians by learning pedestrian dynamics
from 2D trajectories. Our data-driven optimization algorithm is
complimentary to these algorithms and can be combined with them.
Reconstruction of certain aspects of real-world scenes has also
been used for multi-agent simulation, especially trafﬁc simulation.
Li et al. [24] reconstruct trafﬁc with GPS mobile vehicle data. Wilkie
et al. [33] drive an agent-based trafﬁc simulator by using the state
of trafﬁc ﬂow estimated from sparse sensor measurements. Our
approach is more general than these prior methods. Qiao et al. [28]
present a trajectory interpolation method by combining trajectory
estimation and global optimization.

2.2 Data-Driven Multi-Agent Simulation

Patch-based methods transfer the original trajectories from empirical
data into patches and connect these patches with some rules. Yersin
et al. [36] extend the concept of motion patches to dense populations
in large environments. Li et al. [26] animate large crowds with ex-
amples of multi-agent motions by using a copy-and-paste technique.
Hyun et al. [13] tile deformable motion patches, which describe
episodes of the movements of multiple characters. Jordao et al. [14]
propose a crowd sculpting method to guide crowd motion by using
intuitive deformation gestures.

As with patch-based methods, researchers replicate trajectory
tubes extracted from empirical data to synthesize new agent ani-
mations. Lai et al. [21] introduce group motion graphs to animate
groups of discrete agents with empirical data. Lerner et al. [23]
generate seemingly natural behaviors by copying trajectories from
real people and applying them to simulated agents. Ju et al. [15]
generate new animations, which can include arbitrary numbers of
agents, by blending existing data. Zhao et al. [38] cluster the ex-
amples extracted from human motion data and combine similar
examples to produce an output. Li et al. [25] propose a general,
biologically-inspired framework with a three-level method using
statistical information from real datasets. A new data-driven method
has been proposed by Chao et al. [6]. They compute the velocity for
each agent in each frame from empirical data. However, this method
is time-consuming because it tries to minimize the overall trafﬁc
texture energy and is therefore not useful for interactive applications.
Our approach is complimentary to prior data-driven methods and
presents a new method that combines data-driven with physics-based
multi-agent methods.

3 DATA-DRIVEN OPTIMIZATION

In this section, we introduce our data-driven optimization approach
to simulating heterogeneous multi-agent simulations.

3.1 Terminology and Notation

We use agent to represent the virtual character in our method. We
also use the term state to represent the motion characteristics of each
agent. Our method is general and applicable for both 2D and 3D
motions. State can therefore refer to an agent’s movements in either
2D or 3D space. In this paper, we limit our discussions to 2D agents.
We use set G to specify the set of agents in the scenario. We
use the vector s = [p, v, vd]T, s ∈ R6 to specify an agent’s state,
where p is the agent’s position, v is the velocity, and vd is the con-
trol direction that guides the motion direction of agents. Distinct
from the velocity v, the control direction vd controls the agent’s
global direction. We use ˆv = v
(cid:107)v(cid:107) to represent the unit vector of
v. We also use vi,n to represent the velocity of agent i at time
tn. The overall state of the group becomes S = ∪isi. For any
state s = [p, v, vd] ∈ S , p ∈ Sp, v ∈ Sv, vd ∈ S
vd . We represent
our method by M = [S(), D(), I(), F()]T, where S is the environ-
ment evolution function, D is the data processing function, I is the
initialization function, and F is the decision making function. S
determines the external environment, which consists of the static
environment (static obstacles, ground, etc.) and the dynamic environ-
ment (moving stimulus). D processes the data set by transferring the
trajectories to the estimated states D = ∪nS ∗
i,n, where
s∗
i,n = [p∗
i,n] denotes the state of agent i at time tn of the
dataset. For any s = [p, v, vd] ∈ D, p ∈ Dp, v ∈ Dv, vd ∈ D
vd . I
initializes each agent’s state: position, velocity, and control direction.
F is the main routine corresponding to our algorithm and computes
a new state for each agent at each timestep.

n = ∪n ∪i s∗

i,n, vd∗

i,n, v∗

3.2 Overall Approach

Our model for simulating heterogeneous multi-agent systems ref-
erences the datasets to control the trajectories and behaviors of the
agents (see Fig. 2). The datasets might be videos or other data repre-
sentations, including trajectories or higher order features. We deal
with different types of datasets and transform them into a uniﬁed
representation, classifying the data by the magnitude of the velocity.
The environment may also consist of static and dynamic obstacles.
We initialize the position of each agent in the scene randomly and
choose an initial velocity for each agent from our datasets. At each
step of our simulator, we use an interactive optimization algorithm
to make decisions for each agent. In particular, we solve this opti-
mization problem by choosing a velocity from the datasets that tends
to minimize our energy function. The energy function is deﬁned
based on the locomotion or dynamics rules of heterogeneous agents,
including continuity of velocity, collision avoidance, attraction, di-
rection control, and other constraints deﬁned by users. In addition,
our approach is general and can deal with different kinds of agents in
the same way. We can capture corresponding motion characteristics
with different datasets. As a result, we can simulate heterogeneous
agents in the same physical space.

3.3 Dynamics Computation

An agent moves according to its surroundings, which include the
other agents and the external environment (attractions, obstacles,
roads, etc.). In these complex surroundings, the agent makes deci-
sions in relation to all these elements. At each timestep, the state of
each agent can be computed as

si,n+1 = F(tn, i, Stn , S(t, pi,0), D); si,0 = I(i, S(t0, pi,0), D).

(1)

Because the external environments may be time-varying, we set the
environment evolution function as a function of time. In addition,
our method is data-driven, so the function F() is also a function of
D.

Figure 2: Overview of our data-driven model for simulating heteroge-
neous multi-agent systems. We highlight different components of our
algorithm. The input empirical data can be videos from a top-down
view or trajectories of agents.
In the initialization, we ﬁrst transfer
real-world data into a consistent format. With the data and environ-
ment information set by the users, we initialize the positions and
velocities for agents. We treat the motion decision-making or local
navigation process of each agent at every timestep as an optimization
problem, and the energy function takes into consideration several
factors: continuity, collision avoidance, attraction, direction control,
and any other constraints deﬁned by users. Our model can simulate
heterogeneous agents in the same scenario, including crowds, trafﬁc,
any combination of these agents, etc.

We expand Eq. 1 to a system of equations, and obtain

pi,n+1 = pi,n + vi,n+1∆t,

vi,n+1 = argmin
v∈Dv

E(tn, i, v, Sn, S(tn, pi,n), vd

i,n+1),

(2)

vd
i,n+1 = R(pi,n, S(tn, pi,n)),

i at

the optimal velocity for agent

where E(tn, i, v, St , S(t, pi,t ), vd
i,n+1) is the energy function that
time tn+1.
chooses
R(pi,n, S(tn, pi,n)) is a function that computes the control direction vd
for each agent at each time. We compute a velocity that minimize the
energy function. If we search the velocity from a continuous-space,
our method becomes an energy-based model. In order to capture the
characteristics of different kinds of agents easily, we search for the
velocity from the states in the dataset D, which belongs to a discrete
space. If the states generated from the dataset are unlimited, the
simulation results will approximate the simulation results generated
from the method with the continuous velocity space .

To simulate heterogeneous agents in the same physical space,
we consider the common locomotion rules of multi-agent systems
for the energy function E(tn, i, v, Sn, S(tn, pi,n), vd
i,n+1) including
collision avoidance, attraction, continuity, direction control, and any
other constraints.

E(tn, i, v, Sn, S(tn, pi,n), vd

wkEk(tn, i, v, Sn, S(t, pi,n), vd

i,n+1),

i,n+1) = ∑
k∈θ

(3)
where θ = {m, c, a, d, s}, Em is the energy for velocity continuity, Ec
is the energy for collision avoidance, Ea is the energy for attraction,
Ed is the energy for direction control, and Es is the energy function
for constraints of certain kinds of agents. wm, wa, wt, wd, and ws
are the weights of these terms, respectively. Velocity continuity is
used to ensure that the agents move smoothly. Collision avoidance
is a crucial part of multi-agent simulation. Attraction helps agents
remain cohesive with other agents in the same group and has been
widely used in multi-agent simulation literature [30]. The direction
control represents the direction preference for agents according to
the environment. These four elements can describe the basic factors

considered by agents when moving.
constraints to control the movements of agents in Es.

It is possible to add more

3.4 Continuity
Because of the physical limitations, agents cannot change their
motion states frequently or abruptly within a ∆t time. Thus, the
agent i has a tendency to choose a velocity close to vi,t at a time
t + 1. The continuity energy is used to indicate that the agent tends
to keep its velocity unchanged to save its overall energy:

Em = wm1Edir

m + wm2EL
m,
(cid:13)2 is for direction continuity and EL

(cid:13)ˆvi,v − ˆv(cid:13)
m =
(cid:13)2 is for velocity length continuity. vi,n is the velocity

(4)

m = (cid:13)
where Edir
(cid:13)(cid:107)vi,n(cid:107) − (cid:107)v(cid:107)(cid:13)
(cid:13)
of agent i at time tn.

3.5 Collision Avoidance
Collision avoidance is a major issue in multi-agent simulation [17,
35]. To avoid collisions with other agents or the environmental
obstacles in the scene, the agent should choose a velocity that will
not cause a collision after one of more timesteps by assuming that
all objects keep moving with their current velocities. Here, we
consider two kinds of collisions to avoid: instantaneous collisions
and anticipatory collisions.

Ec = wc1EIns

c + wc2EAnti

c

,

(5)

where instantaneous collision avoidance energy EIns
c only considers
the possible collisions after a timestep, and anticipatory collision
energy EAnti
considers the possible collisions after anticipation time
T .

c

Instantaneous collision avoidance energy EIns

is given as

c

EIns

c =

1
|Ωc(∆t, i, v, Sn, S(t, pi,n))|

∑
Q∈Ωc(∆t,i,v,Sn,S(tn,pi,n))

edc−d(∆t,si,sQ,v),

(6)
where Ωc(∆t, i, v, Sn, S(tn, pi,n)) is the predicted neighborhood of
agent i after time δt. The neighborhood consists of agents that
probably collide with agent i. d(∆t, si, sQ, v) is the predicted distance
between agent i and agent Q. For each agent, we only consider
collision avoidance within a distance dc. Similarly, the anticipatory
collision avoidance energy EAnti

can be given as

c

EAnti

c =

1
|Ωc(T ∆t, i, v, Sn, S(t, pi,n))|
edc−d(T ∆t,si,sQ,v),
∑
Q∈Ωc(T ∆t,i,v,Sn,S(tn,pi,n))

·

(7)

where Ωc(T ∆t, i, v, Sn, S(tn, pi,n)) is the predicted collision neigh-
borhood of agent i after time T ∆t. d(T ∆t, si, sQ, v) is the predicted
distance between agent i and agent Q after time T .

3.6 Attraction
If the agents want to move together as a group, we need to account
for some attraction forces between them. The agent therefore prefers
to choose a velocity that brings it closer to a group, allowing it to
become a part of the group over the next few frames. In addition,
agents may also be attracted by external stimuli. The attractions
in our model include the attraction between the agents and the
environment. The attraction energy is given as

Ea =

1
|Ωa(∆t, i, v, Sn, S(tn, pi,n))|

∑
Q∈Ωa(∆t,i,v,Sn,S(tn,pi,n))

d2(∆t, si, sQ, v),

(8)
where Ωa(∆t, i, v, Sn, S(tn, pi,n)) is the predicted attraction neigh-
borhood of agent i after time ∆t.

3.7 Direction Control
We use direction control to imitate agents moving toward their goals.
In this case, the agents try to choose velocities that point to their
goals or that parallel the path to their goals. We assume that every
agent has a goal position to guide its local movement. The goal
might change over time. This goal can also be treated as a direction
control deﬁned by the users. The energy for direction control is
presented as

Ed =

(cid:13)
(cid:13)
(cid:13)vd − ˆv
(cid:13)
(cid:13)
(cid:13)2

,

(9)

where vd is the control direction.

4 MULTI-AGENT SYSTEM SIMULATION WITH DATA-DRIVEN

OPTIMIZATION

In this section, we present more details about our method, as it is
used to simulate heterogeneous agents.

n, v∗

n, vd∗

n = Yn and velocity v∗

4.1 State Estimation for the Dataset
The dataset of our method consists of trajectories that are time
series of positions, L : Y1, Y2, ..., Yn.... We estimate the state s∗
n =
[p∗
n ] in the dataset based on these trajectories, and obtain the
estimated position p∗
. Estimating
the control direction vd∗
n is equivalent to estimating the direction to
the corresponding agent’s goal, according to Sec. 3.7. Therefore, if
the agent only moves one way in the scenario, it is in the control
direction; if the agent changes its direction or goal in the dataset, we
estimate its control direction at time t by computing the direction
of its displacement, vd∗ = Yn−Yn−δ
(cid:107)Yt −Yt−δ (cid:107) , which is estimated every δ ∆t
time.

n = Yn−Yn−1

∆t

4.2 Direction Adaptation to Different Scenarios
According to Eq. 2, if we directly search the optimal velocity for
each agent from the dataset, the synthesized scenario will be limited
in its ability to achieve plausible movements by the scenario of the
dataset. To eliminate these constraints, we map the local coordinate
of the dataset to that of the scenario in the simulation by align their
forward directions. As a result, we can simulate scenarios that
may be different from the dataset. We suppose that the simulated
scenario and the dataset have the same relative position relationship
between the direction of velocity and the control direction; that is,
ˆv − vd = ˆv∗ − vd∗. Therefore, we obtain v = (cid:107)v∗(cid:107)(vd + (ˆv∗ − vd∗)).

4.3 Distance and Neighborhood
We hypothesize that the velocity of an agent remains unchanged
over a short time. If the agent i moves with the velocity v chosen
from the dataset, the predicted distance between agent i and agent Q
after a short time t becomes

d(t, si, sQ, v) = pi + vt − (pQ + vQt).

(10)

In this equation, we assumed that the shapes of the two agents can be
ignored. In fact, we cannot ignore the shapes of most of the agents
or obstacles. Thus, we modify Eq.10 and obtain

d(t, si, sQ, v) = pi + vt − (pQ + vQt) − (Rdir

i + Rdir

Q ),

(11)

i

where Rdir
is the radius of agent i in the direction toward agent Q.
Rdir
Q is also a directional radius of agent Q. The shapes of different
agents can be different. For example, we use a rectangle to represent
a car and a circle to represent a pedestrian. If Q is an identity in the
environment, Eq. 11 becomes a distance function between an agent
and the identity in the environment.

In contrast to the existing methods [29], the agents in our method
try to avoid collisions with not only the homogeneous agents but

also the heterogeneous agents. To avoid collisions, each agent tries
to keep away from other agents or obstacles when they get too close.
We deﬁne the neighborhood for collision avoidance as
Ωc(t, i, v, St , S(t, pi,t )) = (cid:8)Q(cid:12)

(cid:9) ,
(12)
where dc is the threshold distance for collision avoidance and Gc is
the set of obstacles in the scenario. Each agent considers collision
avoidance with the agents or obstacles within a distance dc. Each
agent tries to keep close to the agents in its group or to the external
attraction stimulus if the distance between the agents is large. We
deﬁne the neighborhood for attraction as

(cid:12)d(t, si, sQ, v) < dc, Q ∈ G \ {i} ∪ Gc

(cid:12)d(t, si, sQ, v) > da, Q ∈ G ∪ Ga

Ωa(t, i, v, St , S(t, pi,t )) = (cid:8)Q(cid:12)

(cid:9) ,
(13)
where da is the threshold distance for attraction and Ga is the set of
attraction in the scenario. An entity that is treated as an attraction
can also be an obstacle if the shape of it cannot be ignored, that is,
Gc ∩ Ga (cid:54)= ∅.

4.4 Faster Computation
If we use a brute force method to solve Eq. 2, the computation
cost will be large. The underlying time complexity will be O(n2m)
with n agents in the simulation and m estimate states in the dataset.
The most time-consuming parts are searching for the optimal veloc-
ity from the dataset and ﬁnding the neighborhood for each agent.
To achieve interactive performance, we propose two acceleration
methods.

4.4.1 Reduced Solution Space
To ﬁnd the optimal velocity for each agent efﬁciently, we reduce the
solution space of Eq. 2. We classify the estimated states of the dataset
into groups based on the magnitude of the velocity. Considering the
continuity of motion, we search for the velocity for each agent in
the current group of velocities and in the adjacent group,

vi,n+1 ∈

l+z
(cid:91)

m=l−z

{vn∗},

(14)

where {vl} is the set of velocities of the group l to which vi,t belongs,
z is the scope of the number of groups that are considered for com-
puting optimal velocity, and the group {vm} with m ∈ [l − z, l + z] is
the neighborhood of {vl}.

4.4.2 Grid in Space
To reduce the time consumption for computing the neighborhood
for each agent, we introduce the idea of a grid in space from ﬂuid
simulation [5]. For our simulation, the 2D plane is divided into 2D
grids. We suppose that Ox,y denotes the set of all agents in the grid
Ox,y. Then the candidate neighborhood of i in grid Ox,y is reduced
from G to G (cid:48),

x+1
(cid:91)

y+1
(cid:91)

G (cid:48) =

Ok1,k2 .

k1=x−1

k2=y−1

(15)

When we search the neighborhood for collision avoidance or attrac-
tion, we compare the distances of the agents in the grid Ox,y with
the agents adjacent to this grid instead of comparing them to all the
agents in the scenario.

5 RESULTS
In this section, we highlight the performance of our approach in
generating simulations of crowds, trafﬁc, and combinations of dif-
ferent types of agents. We have implemented our approach in C++
on a desktop machine with a 3.30GHz Inter Xeon CPU E3-1230 v3
4-core processor and 32GB memory. The performances for different

scenarios are given in Table 1. Table 2 shows the weights of all the
benchmarks. We deﬁne the user control for each pedestrian with
speed control Ea = ESG = (cid:107)(cid:107)v(cid:107) − vi(cid:107), where vi is the ideal speed
for agent i. We deﬁne the user control for each car with lane control
Ea = ECons = |v · (vd)⊥|. Cars try to drive in the middle of the lane.

5.1 Data Acquisition

Our method accepts different kinds of input datasets if those datasets
contain the velocity information for the agents. Any form of dis-
continuity or a small amount of abnormal data in the datasets is
acceptable.

In our current framework, we have used some widely available
datasets from different scenarios and environments. The datasets
for crowd simulation include two scenarios: one is from [37] and
features two-dimensional bidirectional movements with 304 pedes-
trians and 1,273 frames; the second is from [23] and features street
scenarios with 8-148 pedestrians and 9,014 frames. We set the con-
trol directions for the ﬁrst dataset as the directions that point to the
agents’ destinations. For the second dataset, the control direction
of one agent at a certain frame is the direction that points from its
current position to its position after 10 frames.

The trafﬁc dataset is extracted from the Next Generation Simu-
lation (NGSIM) datasets [1], which include detailed, high-quality
highway trafﬁc datasets. We extract 300 frames and 161 cars in total.
We set the direction of the road as the estimation of the control di-
rections of the cars. The datasets corresponding to the mixed trafﬁc
scenarios (including pedestrians, bicycles, tricycles, and cars) are
generated from videos. The video was recorded in Shandong, China.
We use the optical ﬂow tracking method [12] to trace the agents.
The extracted data consists of 435 frames and contains 3 pedestrians,
10 bicycles, 10 tricycles, and 2 cars. The control direction for each
agent in every frame is computed by averaging the directions of the
agent from 30 frames.

5.2 Human Crowd

We simulate three benchmark scenarios with crowds representing
each pedestrian as a circle.

Crowd-1: We simulate behaviors of pedestrians on a street with
the dataset from [23] to show that our method can reproduce a
scenario from the dataset. In this scenario, we set the number of
agents in the initialization and control directions to be the same as in
the dataset. Pedestrian agents, represented as circles, mainly avoid
collisions with other pedestrians that are close to them in the scene
(see Fig. 3(a)).

Crowd-2: In this scenario, we simulate two groups (50 pedestri-
ans in each group) with control directions inverse to those from the
dataset [37]. We randomly locate the agents in each group at one
side of the road and randomly choose a velocity for each agent from
the dataset in the initialization. The control direction points from
the agent’s position to the agent’s goal on the other side of the road.
The reference speed is the magnitude of the initial velocity. Agents
are attracted to those in the same group and avoid collisions with
other agents, including pedestrians in other groups (see Fig. 3(b)).

Crowd-3: Based on the benchmark Crowd-1, we add a cylindri-
cal obstacle in the center of the road (see Fig. 3(c)). We also use the
dataset [37] in this benchmark. The initialization method for this
benchmark is the same as for the benchmark Crowd-2. In our simu-
lations, we set different control directions for different groups and
agents in the same group share the same control direction. Agents
avoid the obstacle like they avoid other agents.

5.3 Trafﬁc

In trafﬁc simulations, vehicle-agents mainly interact with the cars
that are adjacent to them in the same lane, avoiding collisions when
they are too close and being attracted by the leader cars when the

Figure 3: The mixed crowds with different control directions.
(a)
Pedestrians with changing control directions walk on a street. (b) Two
crowds with inverse control directions. The pedestrians with the same
clothes represent individuals in the same crowd. The crowds walk to
their own destinations while avoiding collisions with each other. (c)
We add an obstacle to the scenario. In addition to avoiding collisions
with each other, crowds should also avoid collisions with this obstacle.

distance to that car becomes too large. However, cars that are chang-
ing lanes also interact with the adjacent cars in the target lanes. The
control directions for the cars in trafﬁc are the directions of the lanes
to which they currently belong.

Trafﬁc-1: With our method, we can simulate trafﬁc on twisting
roads with the straight high way trafﬁc dataset [1] (see Fig. 4(a)).
During the initialization step, 80 cars are distributed on the road.
The distance between two adjacent cars is chosen randomly from the
dataset. We also randomly select the magnitude of the velocity for
each agent from the dataset, and the direction of the velocity is the
same as the direction of the road on which the agent is driving. The
control direction of each agent is always the direction of the road.
In this benchmark, the directions of agents in different positions on
the twisting road vary.

Figure 4: Trafﬁc simulation. (a) Trafﬁc on a twisting 4-lane highway.
(b) A combination of cars and crowds. Some pedestrians are walking
on the sidewalk. Cars can be treated as obstacles for crowds and vice
versa. (c) Congested trafﬁc in an urban crossroad with a trafﬁc lights.

Our method is general, so we can mix different kinds of agents
in the same scenario. In this section, we show two benchmarks: a
zebra striped crosswalk and a crossroad without trafﬁc lights.

Trafﬁc-2: In this benchmark, we simulate a case in which people
want to cross the road (see Fig. 4(b)). We use dataset [37] for
the crowd and dataset [1] for the trafﬁc. Each pedestrian has a
certain possibility of crossing the road. Once the pedestrian starts to
cross road, the control direction becomes perpendicular to the road
direction and the pedestrian needs to avoid not only other pedestrians,
but also the cars around it. At the same time, the surrounding cars
need to stop if the pedestrian is in front of them, and the attractive
force from the leading cars disappears for these cars. We implement
these interactions by adding corresponding objects to the interaction
domain of agents.

Trafﬁc-3: Our model can handle congested scenarios with differ-
ent or heterogeneous agents. Here we simulate agents (8 pedestrians,
8 bicycles, 8 tricycles, and 8 cars) crossing a congested road with
a trafﬁc light (see Fig. 4(c)). We classify the dataset into groups
according to the corresponding type of agent in the original data
and choose the velocities of the agents from the corresponding class.
Furthermore, we classify the four kinds of agents into two types with
different motion constraints. The ﬁrst type includes pedestrians and
bicycles, which can overtake the agents in front of them in the same
lane. The second type includes tricycles and cars, which cannot
overtake the agent in front in the same lane. When an agent reaches
the crossing, the control direction is the interpolation of the original

road direction and the target road direction. The rule for trafﬁc light
is not strictly same as that in the real world.

5.4 VR scenarios
Our method can be applied to VR scenarios. We model the user
as an avatar in the VR scenario with a ﬁrst-person perspective (see
Fig. 5) (a). The user can sit in a car and observe the movements of
other cars around it (see Fig. 5 (b) and (c)). As a walker, the user can
also see the trafﬁc ﬂow and other pedestrians at the roadside (see
Fig. 5 (d) and (e)).

Figure 5: The avatar in a VR scenario. (a) We provide the user with
an immersive VR experience from a ﬁrst-person perspective with HTC
Vive. (b) The avatar drives a car on an high-way road. (c) The avatar
drives a car on an urban trafﬁc road. (d) The avatar is walking on the
sideroad. (e) The avatar is walking on the crosswalk.

6 TIME PERFORMANCE
To test the time performance of our method, we simulate a crowd in
a scenario with the size of 1,000*1,000. There is no obstacle in the
scenario. During the initialization, we randomly locate N agents at
random positions. The initial velocities of the agents are randomly
copied from the dataset [37]. We set the grid size of the simulation
as 10, and the z for Eq. 14 as 2.

In our method, we utilize spatial continuity and velocity continuity
to reduce possible collisions among the agents. We use the size of
the solution space of the optimization function in Eq. 2 to improve
the runtime performance of our simulation. We divide the space into
grids and each grid records the agents that belong to it. When we
search for the neighbors of each agent, we only need to search the
grid to which the agent belongs and the grids that are adjacent to
this grid. As a result, our method can reduce the time consumption
for multi-agent simulations dramatically (see Fig. 6 (a)).

Because we can solve the optimization problem for each agent
at the same time, we can also easily parallelize our method. Taking
the crowd as an example, we compare the time complexity of our
simulation using a serial implementation against a parallel imple-
mentation (see Fig. 6 (b)). Our parallel implementation can simulate
more than 5,000 agents in realtime on a multi-core processor with
four cores.

To evaluate the performance of our method further, we compute
the running time (seconds per frame) of all the simulation results
mentioned in this paper (see Table 1). Our method can achieve
real-time performance in various scenarios with multiple kinds of
input dataset. The time complexity is not only related to the number
of agents in the simulation, but also to the number of classes and
the number of data points in each dataset. As a result, similar
scenarios with the same number of agents may have different time
performances.

7 USER STUDIES AND EVALUATION
We conduct two user studies to evaluate the plausibility of our
method and one user study to show a better user experience through
VR. The eight cases in the ﬁrst user study are conducted from an
overhead view to show the agents’ movements. In the second user
study, we adopt the agent’s view in each case, meaning that the view
is closer to that of a participant in his/her daily life. In the third user
study, we compare the results as shown in immersive VR and those
shown on a desktop in four different scenarios or agents’ views.

Experiment Goals & Expectations: For the ﬁrst user study, we
hypothesize that the results simulated by our method will exhibit

Scenario
Crowd-1
Crowd-2
Crowd-3
Trafﬁc-1
Trafﬁc-2

Trafﬁc-3

Types
human
human
human
car
human/car
human/bicycle
/tricycle/car

Behavior
walking on street
mixture of two crowds
avoiding static obstacles
movements on a twist road
movements on a crossing road

mixture of multiple systems

N
8-148
100
79
80
30/35
8/8
/8/8

Dataset
[Lerner et al. 2007]
[Zhang et al. 2012]
[Zhang et al. 2012]
[NGS 2013]
[NGS 2013]/[Zhang et al. 2012]

Time(s/f)
0-0.0040
0.0209
0.0192
0.0137
0.0378

video from Shandong, China

0.0028

Table 1: Performance for different scenarios. We summarize the characteristics of the simulation scenarios in this paper. The agents include
humans, cars, bicycles, and tricycles. The datasets used for input data vary. We use seconds per frame to measure the time performance of the
simulations. Our method can achieve realtime performance using 4 cores on a CPU.

Scenario
Crowd-1
Crowd-2
Crowd-3
Trafﬁc-1

Trafﬁc-2

Trafﬁc-3

Pedestrian
Car
Type-1
Type-2

Edir
t
1.0
1.0
0.83
0.5
1.0
5.0
10.0
0.5

EL
t
1.0
1.0
1.0
0.5
1.0
1.0
1.0
0.5

EIns
c
1.0
1.0
0.67
1.0
1.0
1.0
1.0
1.0

EAnti
c
1.0
1.0
0.67
1.0
1.0
1.0
1.0
1.0
, the speed continuity EL

Ed
1.0
1.0
0.83
3.0
1.5
5.0
5.0
3.0

Ea
0
0
0.0
2.0
0
2.0
0
2.0

ESG
0.5
1.5
1.0
10.0
10.0
10.0
5.0
10.0

ECons
0
0
0.0
10.0
1.0
1.0
10.0
1.0
t , instantaneous collision avoidance EIns
c

,

Table 2: The weights. This table gives the weights for the direction continuity Edir
anticipated collision avoidance EAnti

t

, attraction Ea, direction control Ed, position constraint ECons, and speed control ESG in each scenario.

c

is in a street with 18 agents. The other two scenarios are the one
in which two crowds (100 agents in total) encounter each other
and the scenario in which 36 agents are located on a circle moving
towards the opposite positions. We also use three scenarios for trafﬁc
simulation. The scenario with the dataset [1] is on a straight 4-lane
road with 156 agents. The other two scenarios are on a twisting
2-lane road with 80 agents and on a twisting 4-lane road with 200
agents. In the third user study, we use one instance for the scenario
with 50 cars and a car’s view. We also use three instances for the
scenario with 35 cars and 30 pedestrians. In each instance, we use
different agent views: one from a car’s view, one from the view of a
pedestrian walking on a zebra crossing, and one from the view of a
pedestrian walking on a sidewalk.

Experimental Design: We conduct the user studies based on
a paired-comparison design. For the scenarios with a dataset, we
design two comparison pairs: the dataset vs. our method, and the
dataset vs. the prior method. We design one comparison pair for
each scenario without a dataset: our method vs. the prior method.
For each pair, we show two pre-recorded videos in a side-by-side
comparison. The order of the scenarios was random. The position
(left or right) of each method was also random. For the scenarios for
VR vs desktop comparison, we ask the participants to answer the
questionnaire after see the scenarios via VR and the scenarios via
desktop.

Metrics: In each user study, participants were asked to choose
a score using a 7-point Likert scale, in which 1 means that the
result presented on the left is strongly plausible, 7 means that the
result presented on the right is strongly plausible, and 4 means no
preference for either method. To combine the user study results in
the same scale, we transfer the score for each method to a certain
side when we deal with the scores.

7.1 User Study with an Overhead View

The user studies for crowd simulation and trafﬁc simulation with an
overhead view were completed by 26 participants (15 females and
11 males). We performed two-sample t-tests for the scenarios with
datasets (one for crowd simulation and another for trafﬁc simulation).
We hypothesize that the mean value of our method is bigger than
that of the prior method. Meanwhile, we performed one-sample

Figure 6: Time performance. We take a crowd as an example to
analyze the time performance of the simulation. (a) We compare the
time performance of the brute-force method and our method. With our
two search methods, we can improve the performance with 32,298x
speedup for 4000 agents. (b) We compare the performance of an
8-threaded parallel implementation with a single-threaded implemen-
tation. With parallel computing, as the number of agents increases,
the simulation time increases much more slowly. Our method can even
simulate 5,000 agents in realtime on a PC machine with a 4.00GHz
Intel i7-6700k CPU processor and 16GB memory.

more plausible movements than prior multi-agent methods. For the
second user study, we hypothesize that our method results in a better
user experience than the prior methods. Therefore, participants
will signiﬁcantly prefer our method over the prior methods in these
evaluations. In the third user study, we hypothesize that the results
shown in VR can produce a better user experience that those shown
on a desktop.

Comparison Methods: For crowd simulation, we compare our
method with the method in [18] which is a state-of-art physical-
based method for crowd simulation. We also use the dataset [23] in
crowd simulation. For trafﬁc simulation, we compare our method
with the method in [6], which is a state-of-art data-driven method on
trafﬁc simulation. Here we use the dataset [1]. All 2D trajectories
generated from simulation methods or extracted from datasets are
assigned to 3D characters. We also compare mixed trafﬁc results
shown in VR and those shown on a desktop.

Environments: In the ﬁrst and second user study, we used three
scenarios for crowd simulation. The scenario with the dataset [23]

01,0002,0003,0004,0005,000050100150200Parallel SimulationSerial SimulationBrute-force Simulation01,0002,0003,0004,0005,00000.020.04Parallel SimulationSerial Simulation(a)(b)Figure 7: Plausibility scores of the user study. We use a 7-point Likert scale to measure the plausibility of the methods. The lower the score, the
more the participants prefer the method on the left; the higher the score, the more the participants prefer the method on the right. (a)The statistics
for crowd simulation with an overhead view. Participants cannot tell the difference between the dataset and our method. Compared to method [18],
the participants think the results of our method are more plausible. (b) The statistics for trafﬁc simulation with an overhead view. Our method gets
a higher score than method [18] when compared with the dataset. We also get better results in the user study with the dataset. (c) The statistics
for crowd simulation from an agent view. Our method is closer to the dataset. The participants believe that the results of our method are more
plausible than those of the prior method. (d) The statistics for trafﬁc simulation from an agent’s view. Our method has a signiﬁcantly larger score
than method [6] in the user study with the dataset. Our method also shows better performance in the user study without the dataset. (e) The
statistics of the user study for the comparison of VR and desktop. The scores are transferred so that VR is supposed on the left. The scenarios
shown through VR have better scores.

t-tests for the scenarios without datasets (two scenarios for crowd
simulation and two for trafﬁc simulation), hypothesizing that the
mean value of our method is bigger than 4, which indicates no
difference. Overall, participants believed that our method was more
plausible than the compared methods for both crowd simulation and
trafﬁc simulation. Fig. 7 (a)-(b) shows details about the scores for
each comparison.

User Study for Crowd Simulation For the scenario with the
dataset, our method’s mean score is signiﬁcantly larger than the prior
method’s mean plausibility score (t(25) = 2.9111, p = 0.0027 <
0.01). For the scenarios without datasets, our method’s mean score
shows a signiﬁcant difference from the hypothetical mean (t(51) =
−8.7555, p < 0.001).

User Study for Trafﬁc Simulation For the scenarios with
datasets, our method’s mean of the score is signiﬁcantly larger than
the prior method’s mean plausibility score (t(25) = 2.4422, p =
0.0091 < 0.01). For the scenarios without datasets, our method’s
mean score shows a signiﬁcant difference from the hypothetical
mean (t(51) = −3.0169, p = 0.002 < 0.01).

7.2 User Study with an Agent View

The user studies for crowd simulation and trafﬁc simulation from an
agent’s view were completed by 28 participants (17 females and 11
males). For the user study from an agent view, we also performed
two-sample t-tests for the scenarios with datasets hypothesizing that
our method has a larger mean score than the prior method. For
the scenarios without datasets, we performed one-sample t-tests
hypothesizing that the mean value of our method is larger than 4 (no
difference). Overall, participants also judged that our method is more
plausible than the prior methods. The statistics of the participants’
plausibility evaluations can be found in Fig. 7 (c)-(d).

User Study for Crowd Simulation For the scenario with a
dataset, the mean plausibility score of our Heter-Sim is signiﬁcantly
larger (t(27) = 2.6692, p = 0.005 < 0.01) than the method [18].
The mean score of our method has a signiﬁcantly superior to the
hypothetical mean (t(55) = −5.0281, p < 0.001) for the scenarios
without datasets.

User Study for Trafﬁc Simulation For the scenario with a
dataset, the mean score of our method is signiﬁcantly larger than
the mean score of the prior method (t(27) = 6.4890, p < 0.001).
For the scenarios without datasets, the mean score of our method
shows a signiﬁcant difference from the hypothetical mean with
t(55) = −8.0381 and p < 0.001.

7.3 User Study via VR or desktop

The user studies for the comparison between VR and desktop were
taken by 28 participants (14 females and 14 males). We performed
one-sample t-tests for the four instances by hypothesizing that the
mean score of VR is bigger than 4 (no difference). Overall, partic-
ipants believed that the results shown with VR are more plausible
than those shown with a desktop. Fig. 7 (e) shows the details about
the scores for each comparison. In each scenarios, the score of
VR is signiﬁcantly better than that of desktop. t(27) = −5.0138,
p < 0.001 for the ﬁrst scenario, t(27) = −4.16478, p < 0.001 for
the second scenario, t(27) = −3.9890, p < 0.001 for the third sce-
nario, and t(27) = −5.7564, p < 0.001 for the last scenario. In
total, the mean score for VR shows a signiﬁcant difference from the
hypothetical mean (t(111) = −9.3485, p < 0.001).

8 CONCLUSION, LIMITATION AND FUTURE WORK

We present a novel and general data-driven optimization method
that can generate plausible behaviors for heterogeneous agents in
different scenarios. We demonstrate our model’s generalizability by
simulating human crowds, trafﬁc, and that mixes trafﬁc in multiple
scenarios. To the best of our knowledge, this is the ﬁrst data-driven
multi-agent method that is applicable to such different simulation
scenarios and mix different kinds of agents (e.g., vehicles and pedes-
trians).

The simulation results of our method are plausible. We com-
pare our results with prior methods in the same scenarios and by
conducting three user studies with various scenarios from different
views and analyzing the statistical results of the user studies. Our
method can generate results that are closer to the original datasets,
than those achieve with the prior methods. In addition, our model
is fast and can be used for interactive simulations (Tab. 1). We also
demonstrate that the plausibility of our method can be increased
via VR by performing a user study comparing the results via VR or
desktop.

Our method can simulate behaviors that are different from those
of the input datasets. First, our method can generate larger and
denser groups than those in the input datasets (Fig. 3). Second, our
method can simulate scenarios that may differ from those of the
input datasets (Fig. 3 (b), Fig. 4 (a)). Third, our method can mix
different kinds of agents in the same scenario (Fig. 4 (b) and (c)).
Limitations: Although our approach can generate various behaviors
even with a simple, sparse input dataset, the actual performance of
our approach can vary based on the datasets. For example, if the
dataset only has two magnitudes of velocity in it, the velocity of a
car attempting to stop and move again after several seconds will not

(a)(b)(d)(c)(e)be continuous. Because our method uses a forward Euler integration
scheme, the stability of our simulation depends on the size of the
timestep. An implicit integration scheme [18] can be introduced to
improve the stability. We represent agents as rectangles or circles.
More precise geometrical shapes should be used to implement better
collision avoidance.

As part of future work, our work can be extended in many ways.
The input data is not limited to the real datasets and users can also use
simulation results to direct certain behaviors. Therefore, the variety
or diversity of simulation results can be dramatically increased. We
could add traditional context-aware methods to our work to create
a variety of behaviors in multiple agents, which would improve the
realism of the simulation results. The idea of reducing the solution
space according to the continuity of movement can be applied to
optimization problems in animation.

Our model can be extended to other areas. The key idea of
our method can be extended to data-driven methods to simulate
other particle systems, such as ﬂuid simulation [9, 11] and cloth
simulation. If we treat the vertex as the agent in our system and
the connection between vertices as the relationship, our framework
can also be applied to data-driven body animation [19]. Because we
model the decision-making process as an energy-based optimization
problem, this idea may be applicable to path planning for robotics
and unmanned aerial vehicles. Finally, we want to further evaluate
the beneﬁts of our simulator in VR and training scenarios.

REFERENCES

[1] Next generation simulation. http://ops.fhwa.dot.gov/trafﬁcan-

alysistools/ngsim.htm., 2013.

[2] G. Berseth, M. Kapadia, B. Haworth, and P. Faloutsos. SteerFit: Auto-
mated Parameter Fitting for Steering Algorithms. In Proceedings of
the ACM SIGGRAPH/Eurographics Symposium on Computer Anima-
tion, SCA ’14, pp. 113–122. Eurographics Association, Aire-la-Ville,
Switzerland, Switzerland, 2014.

[3] H. Bi, T. Mao, Z. Wang, and Z. Deng. A data-driven model for lane-
changing in trafﬁc simulation. In ACM Siggraph/eurographics Sympo-
sium on Computer Animation, pp. 149–158. ACM, Zurich, Switzerland,
2016.

[4] C. D. Boatright, M. Kapadia, J. M. Shapira, and N. I. Badler. Context-
sensitive data-driven crowd simulation. In Proceedings of the 12th ACM
SIGGRAPH International Conference on Virtual-Reality Continuum
and Its Applications in Industry, pp. 51–56. ACM, 2013.

[5] R. Bridson and M. M¨uller-Fischer. Fluid simulation: Siggraph 2007
course notes video ﬁles associated with this course are available from
the citation page. In ACM SIGGRAPH 2007 courses, pp. 1–81. ACM,
2007.

[6] Q. Chao, Z. Deng, J. Ren, Q. Ye, and X. Jin. Realistic data-driven
trafﬁc ﬂow animation using texture synthesis. IEEE transactions on
visualization and computer graphics, 24(2):1167–1178, 2018.

[7] Q. Chao, J. Shen, and X. Jin. Video-based personalized trafﬁc learning.

Graphical Models, 75:305–317, 2013.

[8] P. Charalambous and Y. Chrysanthou. The PAG Crowd: A Graph Based
Approach for Efﬁcient Data-Driven Crowd Simulation. Computer
Graphics Forum, 33(8):95–108, Dec. 2014.

[9] M. Chu and N. Thuerey. Data-driven Synthesis of Smoke Flows with
CNN-based Feature Descriptors. ACM Trans. Graph., 36(4):69:1–
69:14, July 2017.

[10] T. B. Dutra, R. Marques, J. B. Cavalcante-Neto, C. A. Vidal, and
J. Pettr´e. Gradient-based steering for vision-based crowd simulation
algorithms. In Computer Graphics Forum, vol. 36, pp. 337–348. Wiley
Online Library, 2017.

[11] C. Fu, Q. Guo, T. Gast, C. Jiang, and J. Teran. A Polynomial Particle-
in-cell Method. ACM Trans. Graph., 36(6):222:1–222:12, Nov. 2017.
[12] B. K. Horn and B. G. Schunck. Determining optical ﬂow. Artiﬁcial

intelligence, 17(1-3):185–203, 1981.

[13] K. Hyun, M. Kim, Y. Hwang, and J. Lee. Tiling Motion Patches. IEEE
Transactions on Visualization and Computer Graphics, 19(11):1923–
1934, Nov. 2013.

[14] K. Jordao, J. Pettre, M. Christie, and M.-P. Cani. Crowd sculpting:
A space-time sculpting method for populating virtual environments.
Computer Graphics Forum, 33(2):351–360, May 2014.

[15] E. Ju, M. G. Choi, M. Park, J. Lee, K. H. Lee, and S. Takahashi.
Morphable Crowds. Acm Transactions on Graphics, 29(6):140, Dec.
2010.

[16] I. Karamouzas and M. Overmars. Simulating and Evaluating the Local
Behavior of Small Pedestrian Groups. IEEE Transactions on Visualiza-
tion and Computer Graphics, 18(3):394–406, Mar. 2012.

[17] I. Karamouzas, B. Skinner, and S. J. Guy. Universal power law gov-
erning pedestrian interactions. Phys. Rev. Lett., 113:238701, Dec 2014.
doi: 10.1103/PhysRevLett.113.238701

[18] I. Karamouzas, N. Sohre, R. Narain, and S. J. Guy. Implicit crowds: Op-
timization integrator for robust crowd simulation. ACM Trans. Graph.,
36(4):136:1–136:13, July 2017. doi: 10.1145/3072959.3073705
[19] M. Kim, G. Pons-Moll, S. Pujades, S. Bang, J. Kim, M. J. Black, and
S.-H. Lee. Data-driven Physics for Human Soft Tissue Animation.
ACM Trans. Graph., 36(4):54:1–54:12, July 2017.

[20] S. Kim, A. Bera, A. Best, R. Chabra, and D. Manocha. Interactive and
adaptive data-driven crowd simulation. In Virtual Reality (VR), 2016
IEEE, pp. 29–38. IEEE, 2016.

[21] Y.-C. Lai, S. Chenney, and S. Fan. Group motion graphs. In Pro-
ceedings of the 2005 ACM SIGGRAPH/Eurographics Symposium on
Computer Animation, SCA ’05, pp. 281–290. ACM, New York, NY,
USA, 2005.

[22] K. H. Lee, M. G. Choi, Q. Hong, and J. Lee. Group Behavior
from Video: A Data-Driven Approach to Crowd Simulation.
In
D. Metaxas and J. Popovic, eds., Proceedings of the 2007 ACM SIG-
GRAPH/Eurographics Symposium on Computer Animation, pp. 109–
118. Eurographics Association, San Diego, California, 2007.

[23] A. Lerner, Y. Chrysanthou, and D. Lischinski. Crowds by Example.

Computer Graphics Forum, 26(3):655–664, 2007.

[24] W. Li, D. Wolinski, and M. C. Lin. City-Scale Trafﬁc Animation
Using Statistical Learning and Metamodel-Based Optimization. Acm
Transactions on Graphics, 36(6):200, Nov. 2017.

[25] W. Li, D. Wolinski, J. Pettre, and M. C. Lin. Biologically-Inspired
Visual Simulation of Insect Swarms. Computer Graphics Forum,
34(2):425–434, May 2015.

[26] Y. Li, M. Christie, O. Siret, and R. Kulpa. Cloning crowd motions. In
Proceedings of the 11th ACM SIGGRAPH / Eurographics conference
on Computer Animation, pp. 201–210. ACM, Lausanne, Switzerland,
2012.

[27] J. Pettr´e, J. Ondˇrej, A.-H. Olivier, A. Cretual, and S. Donikian.
Experiment-based Modeling, Simulation and Validation of Interac-
In Proceedings of the 2009 ACM
tions Between Virtual Walkers.
SIGGRAPH/Eurographics Symposium on Computer Animation, SCA
’09, pp. 189–198. ACM, New York, NY, USA, 2009. doi: 10.1145/
1599470.1599495

[28] G. Qiao, S. Yoon, M. Kapadia, and V. Pavlovic. The role of data-driven

priors in multi-agent crowd trajectory estimation. 2018.

[29] Z. Ren, P. Charalambous, J. Bruneau, Q. Peng, and J. Pettr´e. Group
modeling: A uniﬁed velocity-based approach. In Computer Graphics
Forum, vol. 36, pp. 45–56. Wiley Online Library, 2017.

[30] C. W. Reynolds. Flocks, herds and schools: A distributed behavioral
model. In ACM SIGGRAPH computer graphics, vol. 21, pp. 25–34.
ACM, 1987.

[31] J. Sewall, D. Wilkie, and M. C. Lin. Interactive hybrid simulation of
large-scale trafﬁc. In ACM Transactions on Graphics (TOG), vol. 30,
p. 135. ACM, 2011.

[32] X. Wang, J. Ren, X. Jin, and D. Manocha. Bswarm: Biologically-
plausible Dynamics Model of Insect Swarms. In Proceedings of the
14th ACM SIGGRAPH / Eurographics Symposium on Computer An-
imation, SCA ’15, pp. 111–118. ACM, ACM, New York, NY, USA,
2015.

[33] D. Wilkie, J. Sewall, and M. Lin. Flow Reconstruction for Data-Driven
Trafﬁc Animation. Acm Transactions on Graphics, 32(4):89, July
2013.

[34] D. Wolinski, S. J. Guy, A.-H. Olivier, M. Lin, D. Manocha, and J. Pettre.
Parameter estimation and comparative evaluation of crowd simulations.
Computer Graphics Forum, 33(2):303–312, May 2014.

[35] D. Wolinski, M. C. Lin, and J. Pettr´e. Warpdriver: context-aware prob-
abilistic motion prediction for crowd simulation. ACM Transactions
on Graphics (TOG), 35(6):164, 2016.

[36] B. Yersin, J. Ma¨ım, J. Pettr´e, and D. Thalmann. Crowd Patches: Popu-
lating Large-scale Virtual Environments for Real-time Applications. In
Proceedings of the 2009 Symposium on Interactive 3D Graphics and
Games, I3D ’09, pp. 207–214. ACM, New York, NY, USA, 2009.
[37] J. Zhang, W. Klingsch, A. Schadschneider, and A. Seyfried. Ordering
in bidirectional pedestrian ﬂows and its inﬂuence on the fundamental
diagram. Journal of Statistical Mechanics: Theory and Experiment,
2012(02):P02002, 2012.

[38] M. Zhao, S. J. Turner, and W. Cai. A data-driven crowd simulation
model based on clustering and classiﬁcation. In Proceedings of the 2013
IEEE/ACM 17th International Symposium on Distributed Simulation
and Real Time Applications, pp. 125–134. IEEE Computer Society,
2013.

