1
2
0
2

n
u
J

0
1

]
I

N
.
s
c
[

1
v
2
5
6
5
0
.
6
0
1
2
:
v
i
X
r
a

Latency and Information Freshness in

Multipath Communications for Virtual Reality

1

Federico Chiariotti, Beatriz Soret, Petar Popovski

Department of Electronic Systems, Aalborg University, Denmark

Email:{fchi,bsa,petarp}@es.aau.dk

Abstract

Wireless Virtual Reality (VR) and Augmented Reality (AR) will contribute to people increasingly

working and socializing remotely. However, the VR/AR experience is very susceptible to various delays

and timing discrepancies, which can lead to motion sickness and discomfort. This paper models and

exploits the existence of multiple paths and redundancy to improve the timing performance of wireless

VR communications. We consider Multiple Description Coding (MDC), a scheme where the video

stream is encoded in Q streams (Q = 2 in this paper) known as descriptors and delivered independently

over multiple paths. We also consider an alternating scheme, that simply switches between the paths. We

analyze the full distribution of two relevant metrics: the packet delay and the Peak Age of Information

(PAoI), which measures the freshness of the information at the receiver. The results show interesting

trade-offs between picture quality, frame rate, and latency: full duplication results in fewer lost frames,

but a higher latency than schemes with less redundancy. Even the simple alternating scheme can

outperform duplication in terms of PAoI, but MDC can exploit the independent decodability of the

descriptors to deliver a basic version of the frames faster, while still getting the full-quality frames with

a slightly higher delay.

Index Terms

Virtual Reality, Multiple Description Coding, video transmission, multipath, packet delay, Age of

Information

I. INTRODUCTION

Over the past decade, Virtual Reality (VR) and Augmented Reality (AR) have exited the realm

of science ﬁction and become an increasingly commonplace reality in a variety of ﬁelds, from

June 11, 2021

DRAFT

 
 
 
 
 
 
2

education [1] and medicine [2] to tourism and industry [3]. The worldwide COVID-19 pandemic

has only accelerated the development of these technologies [4], as the need for social distancing

has moved several aspects of work and personal life online. VR is also crucial to the digital

twin concept, which enables remote inspection and operation of cyber-physical systems, and for

human-in-the-loop control, in which parts of a manufacturing system are automated, while other

parts are controlled directly by a human operator [5], [6]. In these scenarios, the timeliness of

the operation is crucial, as delays can have a signiﬁcant impact on the performance and even

safety of the machinery. Moreover, the necessity of communication cables severely limits the

mobility of both the operators and the autonomous robots.

Computational ofﬂoading can enable smooth operation on smaller devices or with mobile

nodes [7], freeing AR and VR users from being tied to desktop-level computing power through

direct wires which can impede movement and limit immersiveness. However, these applications

can suffer from signiﬁcant timeliness-related issues on wireless networks [8]: as the sense of

presence and immersion is critical, and the size of each omnidirectional frame can be huge,

this puts a strain on the notoriusly volatile wireless links, with a high risk of congestion and

sudden delay increases, which are perceived by the user as an annoying loss of smoothness in

the VR experience. Adaptive video content can reduce delay by compressing the video, trading

video quality for a smaller, more predictable delay [9], but the unpredictability of the wireless

propagation environment can make this task very complex.

In this context, there are two metrics that can be used to evaluate the timeliness of the

communication: the ﬁrst, and most traditional, is the latency of the transmission, i.e., the time

between when a frame is generated at the source and when it is delivered to the receiver and

displayed to the user, while the second is the Age of Information (AoI). AoI is a metric that

has attracted a signiﬁcant interest in the research community since its inception in the early

2010s [10], as it can better represent the delay perceived by users in real-time applications. The

age does not just measure the time between when a frame is generated and when it is delivered,

but keeps increasing until the next frame has been delivered. As the name suggests, the AoI

is the age of the frame that is currently on the VR display. Intuitively, AoI is more useful for

control tasks, as the age of the information shown to the user will affect both the smoothness

of the VR experience and the control performance: if the user makes a command, it will be

based on old information, and the older the scene that the user can see, the less immediate

that command will get. In particular, we consider the Peak Age of Information (PAoI), which

June 11, 2021

DRAFT

3

measures the age right before the next frame arrives, which is a good proxy for the worst-case

timing discrepancy of a virtual reaction.

In this work, we consider a theoretical model of multipath VR transmission, deriving the

complete distribution of the latency and PAoI analytically with four different transmission

schemes. In particular, we consider both schemes that try to reduce the load on the multipath

connection by splitting the trafﬁc between the two paths and a scheme that replicates the frames

on both paths to protect them from errors and delays of the individual paths. Multiple Description

Coding (MDC) [11] is a scheme that can strike a balance between smoothness and quality, as it

encodes the frame into multiple descriptors, each of which can then be delivered independently.

Each descriptor can be decoded individually, resulting in a lower-quality representation, but

larger numbers of descriptors can be combined to recover higher-quality representations if they

are delivered on time. We draw some considerations on the performance of each scheme, ﬁnding

interesting results in the trade-off between reliability (i.e., delivering as many frames as possible

in error-prone scenarios), frame rate and quality, and latency or age.

The rest of the paper is organized as follows: Sec. II presents an overview of the related work

on multipath multimedia communications, queuing models and AoI. Our overall system model

is described in Sec. III, and the analyses for the alternating and coded systems are described in

Sec. IV and Sec. V, respectively. Sec. VI then presents our simultion settings and results, and

Sec. VII concludes the paper and presents some avenues of future work.

A. Multipath multimedia communications

II. RELATED WORK

Multipath communications can be exploited for very different applications and purposes,

such as increasing the network capacity [12], increasing the reliability [13], or reducing the

latency [14]. Path diversity is often used as a means to apply other redundancy schemes, such

as error control coding [15]. In the case of multimedia content in real time, the use of multiple

paths to overcome possible failures and blockages on any single link has been the subject of

intense investigation over the past few years. For AR/VR, the higher bitrate required to transmit

360◦ frames can exacerbate these issues, making the beneﬁts of multipath delivery even more

evident: a higher capacity and resilience to failures or capacity drops on any single path can

signiﬁcantly improve the Quality of Experience (QoE) and the smoothness of remote control

operations.

June 11, 2021

DRAFT

4

The Internet of Things (IoT) has seen a signiﬁcant expansion in the past decade, and previously

impossible video sensor applications are now commonplace: in this case, real-time operation can

be required to monitor a process or an area remotely, or to control a robot’s activity. In this ﬁeld,

energy-efﬁciency is a signiﬁcant concern [16], and communication strategies need to take it into

account: a recent survey on multipath routing in this context [17] describes several techniques

that have been proposed by the research community. In this case, video quality is generally low,

and the most pressing concern is routing rather than bitrate adaptation. Interestingly, the same

type of concepts can also apply to VR services in heterogeneous 5G networks [18]: latency and

energy-efﬁciency are critical metrics in small cell networks.

There has also been signiﬁcant activity on the transport layer to enable end-to-end multipath

communications. As the bottlenecks in the paths might not be directly observable, this is a

signiﬁcantly more complex problem, which intersects congestion control research and highlights

some of the issues of the currently used transport protocols. The Multipath TCP (MPTCP)

standard [19] was developed as an extension of TCP to multipath connections, enabling faster

and more reliable delivery, but it has been shown to be unsuitable for real-time media. While

early studies [20] had promising outcomes, MPTCP fell prey to the same basic issues that

standard TCP has with real-time trafﬁc [21]: namely, the potentially long delays caused by the

congestion control and retransmission mechanisms if the capacity drops. Furthermore, scheduling

packets over the available paths is another problem speciﬁc to multipath transmission [22], which

can compound with the congestion issues and interact with congestion control in non-obvious

ways [23]. As it is the most common protocol, however, MPTCP is used in a number of VR

solutions [24], which devise application-level schemes to work around its issues.

In order to overcome the limitations inherent in MPTCP, there is active research on multipath

versions of other protocols such as the Real-time Transport Protocol (RTP) [25] and the Stream

Control Transmission Protocol (SCTP) [26], but the lack of widespread adoption makes these

protocols less likely candidates for future adoption. More recently, other solutions relying on

entirely new protocols have been developed: one example is the Multipath Multimedia Trans-

port Protocol (MPMTP) [27], which uses Raptor codes to recover from packet losses without

retransmissions. The more recent Latency-controlled End-to-End Aggregation Protocol (LEAP)

protocol [14] also uses coding, working on blocks with adaptable size and providing reliable

latency guarantees. For a more comprehensive study of multipath transport layer solutions, we

refer the reader to [28]. In most of these applications, the basic trade-off is between meeting

June 11, 2021

DRAFT

the application’s latency, throughput, and reliability requirements and reducing the impact on

other ﬂows, as using resources on multiple paths is a greedy option that should be limited to

5

necessary uses.

B. Queuing models

Our system model is based on a fork-join queue [29], where incoming tasks are split into

several servers and joined again before departing the system. This model has been used for

all kinds of parallel multitasking in computation and communications networks [30]. Most of

the works assume that, at any time instant, tasks can be canceled and abandon their respective

queue. [31] studies path redundancy in the context of cloud systems with a fork-join model,

to understand the trade-off latency-computing cost. [32] analyzes the transmission of redundant

requests to multiple servers for a faster execution in terms of average latency, at the cost of

increased system load. It is observed that not having redundancy is optimal for highly loaded

systems if service times are memoryless. The authors in [33] present a study on delay-optimal

scheduling of replications in centralized and distributed multi-server systems.

There has also been some work on bounds to worst-case performance in fork-join queues,

mostly concerned with the tail of the latency distribution [34]. These delay bounds concern them-

selves with Markovian arrival processes [35], as they model parallel or distributed processing of

randomly arriving data. To the best of our knowledge, the question of delay bounds with periodic

trafﬁc, such as video or VR/AR frames, has not been investigated in either the communication

or distributed processing literature.

C. Age of Information

Since the concept of AoI was introduced in the early 2010s [10], it has been the subject of

intense study, being the preferred latency metric for real-time video streaming and context-aware

IoT applications [36]. In these applications, the end receiver is interested in a fresh knowledge

of the remotely controlled system, rather than the packet delay. Most theoretical results derive

the average AoI or the PAoI. Much smaller is the number of works deriving higher moments or

the full distribution of the age (see e.g.

[14] [38]), although a reliable system design requires

knowing the probability of occurrence of rare, but extremely damaging events.

Initial studies focused on simple queuing systems with a single node and unicast scheduled

transmissions [39], [40]. However, there is already a signiﬁcant number of papers addressing

June 11, 2021

DRAFT

6

1234

µ1

1

2

µ2

1234

µ1

1

1 µ2

(a) Alternating transmission.

(b) Replicated transmission.

1234

µ1

1

1 µ2

1234

µ1

1

1 µ2

(c) Split transmission.

(d) Coded transmission.

Fig. 1: Depiction of the four transmission schemes.

more complex communication scenarios and topologies, like for instance models for random

access and ALOHA [41] [42], multi-cast and broadcast [43], or multi-hop transmissions [44],

[45].

None of the fork-join queuing works listed in Section II-B analyzes the AoI. To the best of our

knowledge, the only exceptions are [46], which gives the average age for distributed computing

with k over n coding, and [47], which addresses the age-delay trade-off considering the scheduler

and routing (selected path) of an M-server system with Poisson arrivals. They prove that a system

designed to minimize the age will do it at the expenses of high waiting times and service times

for the packets that do not contribute to the age metric (the non-informative packets) and the

average and variance of the packet delay will therefore increase enormously.

Unlike most of the fork-related works, we do not consider removal of task in the buffers, since

age-sensitive applications will typically have no feedback and there is no way for the transmitter

to know when the replicas/pieces of the frame have arrived to any of the receivers.

III. SYSTEM MODEL

We consider a wireless VR system, in which rendered frames of constant size are generated

with a constant period τ . The generated frames are then delivered to a user through a multipath

connection using two different Radio Access Technologies (RATs). We model the two paths as

two separate queuing systems with Markovian service. The two paths, dubbed 1 and 2, then

have exponential service times, with average rates µ1 and µ2, respectively: the service time is

June 11, 2021

DRAFT

7

exponentially distributed to account for physical and medium access issues, which introduce a

signiﬁcant volatility in the delivery of the data. We also consider them to have inﬁnite queues

with First Come First Serve (FCFS) service. In the following, we will refer to the individual

paths in the connection as “paths” or “channels” interchangeably, using “system” to indicate the

overall multipath connection, which is then similar to a D/M/2 queue, as the arrival process

is deterministic and the service process is Markovian for both servers, but the two paths have

separate queues and the transmitter has a scheduler, i.e., it can choose which connection to send

the data through. We assume that the two paths also function as Packet Erasure Channels (PECs),

with erasure rates ε1 and ε2, respectively. We deﬁne the load ρj on each path j as:

ρj =

Lλj
µj

j = 1, 2,

(1)

where λj is the average arrival rate on the path, which depends on the scheduling process, and

L is the normalized size of the packets: a full frame is considered to have L = 1. We consider

four different scheduling strategies, which are depicted in Fig. 1:

• The alternating transmission scheme, shown in Fig. 1a, is a simple round-robin scheduler:

odd-numbered packets are scheduled on the ﬁrst path, while even-numbered ones are sched-

uled on the second one. In this case, the multipath connection is used to reduce the load
on the two paths: the arrival rate is λj = 1

2τ for either connection, while we have L = 1.

• The replicated transmission scheme, shown in Fig. 1b, duplicates each frames in two

packets, which are sent over both paths at once. Naturally, this increases the load on the
system, as we have λj = 1

τ on either path and L = 1, but it also provides error protection,

as an erasure on either path can be compensated by the other replica.

• The split transmission scheme, shown in Fig. 1c, divides the frame in two smaller packets,

each of which is sent over one path. In this case, the interarrival period is τ but the packet
size is halved: we still have λj = 1

τ , but L = 0.5.

• The coded transmission scheme, shown in Fig. 1d, is a hybrid between the replicated and

split schemes: the transmitter sends two packets of equal size on each path. By using MDC,

each packet is decodable individually, and provides a lower-quality representation of the

frame. If both packets are delivered, the video frame can be displayed at the full quality.

The quality and size of each individual packet depend on the coding rate η: a value η = 0.5

corresponds to the replicated scheme, while η = 1 corresponds to the split scheme. The

June 11, 2021

DRAFT

8

arrival rate at each path is still λj = 1

τ , while we have L = 1

2η , as the frame is encoded and

then split over the two paths.

In all schemes but the ﬁrst one, arrivals on the two paths are synchronized, i.e., one packet is

sent on each path for each frame. Naturally, more intelligent schedulers are possible: a more

advanced version of the alternating scheme would schedule the frame based on the occupation of

each queue, always sending packets on the less congested path. However, this kind of scheduler

is difﬁcult to study analytically, and we will only provide simulation results for it. We can also

think of an adaptive coded scheme, which changes the MDC coding rate depending on the state

of the two queues, but this is beyond the scope of this work, where we aim to study the basic

features of the four alternatives from Fig. 1.

In the following, we will represent random variables using capital letters, and their values

with lower-case letters. Vectors are represented in bold, We deﬁne the state of the overall system

when the i-th frame is generated as Qi = (Qi,1, Qi,2), where Qi,j represents the number of

packets in channel j, including the one in service. We derive next the system time and peak

age distributions for the four transmission schemes, ﬁrst for the alternating scheme, then for the

coding-based ones.

IV. ANALYSIS: ALTERNATING TRANSMISSION

In this scheme, packets are divided between the two paths in a round-robin fashion. In this

case, the system is simple: each of the two paths is independent from the other and can be

treated individually, with an arrival process with only half the rate. We can consider the error-

free alternating D/M/2 system, in which the interarrival period for each path is 2τ . We then

have the following distribution of the state qi,j just before an arrival, following the well-known

formula derived by Erlang [48]:

pQi,j (qi,j) = (1 − σj)σqi,j

j

,

where the parameter σj is the solution in (0, 1) to the following equation:

x = e2µj τ (x−1).

(2)

(3)

The existence of σj is guaranteed if the paths are stable, i.e., if ρj = 1

2µj τ < 1 ∀j ∈ {1, 2}.
Since the two paths can be treated as independent, the Probability Density Function (PDF) of

the system time Ti,j for a successfully received packet on path j, is given by:

June 11, 2021

pTi,j (t) = µj(1 − σj)e−µj (1−σj )tu(t).

(4)

DRAFT

The PDF of the system time T alt
1

for successfully received packets is then given by:

pT alt

1

(t) =

∞
(cid:88)

(1 − σ1)σqi,1

1

q1,1=0

µqi,1+1
1

tqi,1e−µ1t
qi,1!

,

and the same goes for pT alt

1

(t), with inverted indices. Solving the series, we get:

pT alt

i

(t) =






(1 − σ1)µ1e−µ1(1−σ1)t

if i is odd;

(1 − σ2)µ2e−µ2(1−σ2)t

if i is even.

If we take a random packet, we will simply get:
pT alt

pT alt(t) =

1

(t) + pT alt
2

2

(t)

.

9

(5)

(6)

(7)

For the AoI calculation, it is convenient to work with the probability of a packet being relevant,

i.e., a successive packet has not arrived before it. We calculate ﬁrst the case without channel

errors. If i is odd, the probability pr,1 that packet i is relevant is given by:
(cid:90) ∞

pr,1 =PT1(τ ) +

pT1(t)(1 − PT2(t − τ ))dt

τ

=1 − e−µ1(1−σ1)τ

(cid:18)

1 −

µ1(1 − σ1)
µ1(1 − σ1) + µ2(1 − σ2)

(cid:19)

.

(8)

The same is true for pr,2, with inverted indices. The distribution of the peak age when a

relevant packet arrives from path 1 is then:
(1 − σ1)
pr,1

p∆,1(δ) =

u(δ − τ )µ1e−µ1(1−σ1)(δ−τ )

(cid:20)

u(2τ − δ)(1 − e−µ2(1−σ2)δ)

(cid:18)

+ u(δ − 2τ )

e−µ2(1−σ2)(δ−τ )eµ1(1−σ1)τ + (1 − e−2µ2(1−σ2)τ )e−µ2(δ−2τ )

+

(1 − σ2)
σ2

e−µ2δ(eµ2σ2δ − e2µ2σ2τ )

(cid:19)(cid:21)
.

The unconditioned PAoI distribution is:

p∆alt(δ) =

pr,1p∆,1(δ) + pr,2p∆,2(δ)
pr,1 + pr,2

.

(9)

(10)

If we consider error-prone channels, the exact PAoI distribution is hard to compute, as we need to

consider all possible orderings of past packets. We then compute a lower bound, assuming that,

for the transmission of packet i, packet i − 3 has already arrived at the other path, i.e., multiple

packets can be lost, but we never have more than 2 consecutive packets arrive out-of-order. This

approximation is tight for low trafﬁc scenarios. We denote the number of consecutive failures

as F . If the number of consecutive failures is larger than 1, the bound is given by:

June 11, 2021

p∆alt,e

1

|F (δ|f ) = pT1|r1(δ − (f + 1)τ ) ∀f ≥ 1,

(11)

DRAFT

10

where the conditioned PDF pT1|r1(t) is given by:

pT1|r1(t) =

µ1(1 − σ1)e−µ1(1−σ1)t(ε2 + (1 − ε2)(1 + u(t − τ )(e−µ2(1−σ2)(t−τ ) − 1))
ε2 + (1 − ε2)pr,1

.

(12)

The same is true for the second path, after inverting the indices. We can then compute p∆alt,e by

using the law of total probability:

p∆alt,e(δ) =

(1 − ε1)

(cid:18)
τ (cid:99)
(1 − ε2)pr,1p∆1(δ) + (cid:80)(cid:98) δ
f =1 pT1|r1(δ − (f + 1)τ )ε(cid:98)f 2(cid:99)

1

ε(cid:100)f 2(cid:101)
2

(cid:19)

(1 − ε1)(ε2 + (1 − ε2)pr,1) + (1 − ε2)(ε1 + (1 − ε1)pr,2)

(1 − ε2)

(cid:18)
τ (cid:99)
(1 − ε1)pr,2p∆2(δ) + (cid:80)(cid:98) δ
f =1 pT2|r2(δ − (f + 1)τ )ε(cid:100)f 2(cid:101)

1

ε(cid:98)f 2(cid:99)
2

(cid:19)

(13)

+

(1 − ε1)(ε2 + (1 − ε2)pr,1) + (1 − ε2)(ε1 + (1 − ε1)pr,2)

.

V. ANALYSIS: MULTIPATH TRANSMISSION

In a synchronized D/M/2 system, frames arrive simultaneously at both paths with constant in-

terarrival period τ . This scenario can represent a multipath transmission, using a split, replicated,

or coded approach, and the three approaches differ only by the coding rate η. The steady-state

distribution for this kind of system was derived in [49] following Palm probability theory [50].

The joint distribution of Q, considering the overall system just before packet i is generated, is

given by:

pQi(qi) = (1 − σ1)(1 − σ2)σqi,1

1 σqi,2

2

,

where σj is deﬁned, like in (3), as the solution in (0, 1) of the following equation:

x = e2ηµj τ (x−1).

(14)

(15)

Naturally, the stability condition is now ρj = 1

2ηµj τ < 1 ∀j ∈ {1, 2}. In the following, we
compute the distribution of the system time for the ﬁrst and last packet to arrive, which will be

used for the system time calculation for the three multipath schemes.

A. Minimum System Time Distribution (Error-Free)

We now consider the i-th generated request, which causes two packets to arrive simultaneously

at both paths at time gi. The two packets will then arrive at the receiver at times ri,1 and ri,2,

depending on the system time of the two paths. We consider the minimum system time T min

i

,

i.e., the system time of the ﬁrst packet to be received:

June 11, 2021

T min
i = min
j∈{1,2}

ri,j − gi.

(16)

DRAFT

11

The minimum system time is then a random variable whose distribution is the minimum between

the distributions of the two independent paths. This corresponds to the delay for a successful

transmission in a replicated scheme, as the ﬁrst copy of the frame to arrive is decoded and shown

to the user.

We ﬁrst solve the following series, which is used several times in the derivation of the

system time PDF. As the factor σ is guaranteed to be in the open interval (0, 1) due to the

stability condition on the two paths, its geometric series converges and the inversion of the two

summations is possible:

∞
(cid:88)

σq

q
(cid:88)

q=1

n=0

αn
n!

=

=

=

∞
(cid:88)

n=1

∞
(cid:88)

n=1

αn
n!

∞
(cid:88)

σq

q=n−1

(ασ)n
(1 − σ)n!

(17)

∞
(cid:88)

q=1

σq +

1
1 − σ

eασ
1 − σ

+

− 1.

We can now compute the conditioned PDF of the system time distribution, considering the

system state qi as known. In the following, we omit the index of the packet i for the sake of

readability. We then distinguish four cases, depending on whether each queue is empty. In the

ﬁrst case, the two paths are empty, and the system time is the minimum between the service

times at the two paths, which are two independent exponentially distributed random variables:

pT min|Q(t|(0, 0)) =pT1|Q1(t|0)(1 − PT2|Q2(t|0)) + (1 − PT1|Q1(t|0))pT2|Q2(t|0)

(18)

=2η(µ1 + µ2)e−2η(µ1+µ2)tu(t).

In the second case, in which the ﬁrst path is empty but the second has at least one packet in the

queue, the system time is the minimum between an exponentially distributed random variable

and an Erlang distributed one:

pT min|Q(t|(0, q2)) =pT1|Q1(t|0)(1 − PT2|Q2(t|q2)) + (1 − PT1|Q1(t|0))pT2|Q2(t|q2)

(cid:34)

=

e−2ηµ1t (2ηµ2)q2+1tq2e−2ηµ2t

q2!

+ 2ηµ1e−2ηµ1t

q2
(cid:88)

n=0

(2ηµ2t)ne−2ηµ2t
n!

(cid:35)

u(t).

(19)

The third case, in which the second time is empty but the ﬁrst one is not, is symmetrical to

the second case, and the conditioned PDF in this case is given by (19), inverting the indices of

June 11, 2021

DRAFT

the two paths. Finally, if both paths have packets in the queue, the resulting distribution is the

minimum between two Erlang distributed variables:

pT min|Q(t|(q1, q2)) =pT1|Q1(t|q1)(1 − PT2|Q2(t|q2)) + (1 − PT1|Q1(t|q1))pT2|Q2(t|q2)

12

(cid:34)

=

(2ηµ2)q2+1tq2e−2ηµ2t
q2!

(2ηµ1t)ne−2ηµ1t
n!

+

(2ηµ1)q1+1tq1e−2ηµ1t
q1!

(2ηµ2t)ne−2ηµ2t
n!

(cid:35)

u(t).

q1
(cid:88)

n=0
q2
(cid:88)

n=0

(20)

We now apply the law of total probability to remove the condition on Q2, using the solution of

the series in (17):

pT min|Q1(t|q1) =

∞
(cid:88)

q2=0

(cid:80)∞

pQ((q1, q2))
k=0 pQ((q1, k))
(cid:34)

∞
(cid:88)

q2=0

σq2
2

=u(t)(1 − σ2)

pT min|Q(t|(q1, q2))

(2ηµ2)q2+1tq2e−2ηµ2t
q2!

(2ηµ1t)ne−2ηµ1t
n!

q1
(cid:88)

n=0
(cid:35)

+

(2ηµ1)q1+1tq1e−2ηµ1t
q1!

q2
(cid:88)

n=0
(cid:34)

(2ηµ2t)ne−2ηµ2t
n!

=u(t)(1 − σ2)e−2η(µ1+µ2)t

2ηµ2e2ηµ2σ2t

q1
(cid:88)

n=0

(2ηµ1t)n
n!

+

(2ηµ1)q1+1tq1
q1!

e2ηµ2σ2t
1 − σ2

(cid:35)

.

(21)

Finally, we remove the condition on Q1 using the same principles and get the unconditioned

PDF of the minimum system time:

pT min(t) =

∞
(cid:88)

q1=0

pT min|Q1(t|q1)pQ1(q1)

=u(t)e−2η(µ1+µ2)t(1 − σ1)(1 − σ2)

∞
(cid:88)

q1=0

σq1
1 e2ηµ2σ2t

(cid:34)
2ηµ2

q1
(cid:88)

n=0

(2ηµ1t)n
n!

+

(2ηµ1)q1+1tq1
(1 − σ2)q1!

(cid:35)

=u(t)2η [µ1(1 − σ1) + µ2(1 − σ2)] e−2η(µ1(1−σ1)+µ2(1−σ2))t.

(22)

As stated above, the minimum system time T min can represent the latency of a replicated packet

sent over multiple connections, only one copy of which needs to be delivered in order to fulﬁll

the request. It is interesting to note that the resulting system time is still exponentially distributed,

with parameter 2η(µ1(1 − σ1) + µ2(1 − σ2)). The Cumulative Density Function (CDF) of the

system time distribution is then given by:

PT min(t) = u(t)(1 − e−2η(µ1(1−σ1)+µ2(1−σ2))t).

(23)

DRAFT

June 11, 2021

B. Minimum System Time Distribution (Error-Prone)

We can now consider a more interesting scenario, in which the two channels are error-prone

and behave as independent PECs with packet erasure probability ε1 and ε2, respectively. This is

a key scenario for replicated transmission, as sending two copies of a frame can protect it from

13

channel errors as well as reducing latency. We then have a probability pmin
, φ1 = (1−ε1)ε2
each request. Furthermore, we deﬁne φ1,2 = (1−ε1)(1−ε2)

s = 1−ε1ε2 of fulﬁlling
, and φ2 = (1−ε2)ε1
,

pmin
s

pmin
s

pmin
s

to identify the probability of having a successful request with two received packet, only the

packet on the ﬁrst path being received, and only the packet on the second path being received,

respectively. We now adjust the system time PDF calculation to account for the possibility of

erasure. We denote the minimum system time with errors as T min,e, and divide the computation

in the same four cases as above. We now consider the conditioned system time PDF when both

paths are empty:

pT min,e|Q(t|(0, 0)) = φ1,2pT min|Q(t|(0, 0)) + 2η(φ1µ1e−2ηµ1t + φ2µ2e−2ηµ2t)u(t).

(24)

In the second case, in which the ﬁrst path is empty but the second has at least one packet in the

queue, the conditioned system time PDF is given by:

pT min,e|Q(t|(0, q2)) =φ1,2pT min|Q(t|(0, q2)) + 2ηφ1µ1e−2ηµ1tu(t) + φ2

(2ηµ2)q2+1tq2e−2ηµ2t
q2!

u(t).

(25)

As for the error-free system, the third case, in which the second time is empty but the ﬁrst one

is not, is symmetrical to the second case. Finally, if both paths have packets in the queue, the

resulting distribution is:

pT min,e|Q(t|(q1, q2)) =φ1,2pT min|Q(t|(q1, q2))

(2ηµ1)q1+1tq1e−2ηµ1t
q1!
As above, we now use the law of total probability to remove the condition on Q2:

(2ηµ2)q2+1tq2e−2ηµ2t
q2!

u(t) + φ2

+ φ1

u(t).

(26)

pT min,e|Q1(t|q1) =

∞
(cid:88)

q2=0

pQ((q1, q2))
k=0 pQ((q1, k))

(cid:80)∞

(cid:34)

pT min,e|Q(t|(q1, q2))

=(1 − σ2)u(t)

φ1,2pT min|Q1(t|q1) + φ1

(cid:35)
+ 2ηφ2µ2e−2ηµ2t(e2ηµ2σ2t − 1)

.

(2ηµ1)q1+1tq1e−2ηµ1t
q1!

(27)

June 11, 2021

DRAFT

Finally, we remove the condition on Q1 using the same principles and get the unconditioned

14

PDF of the minimum system time:
∞
(cid:88)

pT min,e(t) =

pT min,e|Q1(t|q1)pQ1(q1)

q1=0

=φ1,2pT min(t) + 2η(1 − σ1)(1 − σ2)u(t) (cid:2)φ1µ1e−2ηµ1(1−σ1)t + φ2µ2e−2ηµ2(1−σ2)t(cid:3) .

(28)

We remind the reader that the latency above is computed only for successful requests, while a

fraction 1 − pmin

s

of the frames is lost, as both copies of the packet are erased. The system time

CDF in the error-prone case is given by:
PT min,e(t) = φ1,2PT min(t) + u(t)2η(cid:2)φ1(1 − σ2)(1 − e−2ηµ1(1−σ1)t) + φ2(1 − σ1)(1 − e−2ηµ2(1−σ2)t)(cid:3).
(29)

C. Maximum System Time Distribution

We now consider the maximum system time T max

i

, i.e., the system time of the second packet

to be received:

T max
i

= max
j∈{1,2}

ri,j − gi.

(30)

In a split transmission scheme, the maximum system time corresponds to the delay of a sucessful

frame. As for T min

i

, the distribution of T max

i

is the maximum of the two distributions of the

system times at the two paths, which are independent if the state of the two queues is given.

The distribution we compute below is only for successful requests, which in this case require

both packets to be delivered: we have pmax

s = (1 − ε1)(1 − ε2). The value of σj is given by (15).
As above, we omit the index of the request i for brevity, and consider four different cases based

on the state of the two queues immediately before the request. In the ﬁrst case, both queues are

empty, and the delay is the maximum between two exponential random variables:

pT max|Q(t|(0, 0)) = 2η (cid:0)µ1e−2ηµ1t + µ2e−2ηµ2t − (µ1 + µ2)e−2η(µ1+µ2)t(cid:1) u(t).

(31)

In the second case, the second path has at least one packet in the queue when the request arrives,

while the ﬁrst one is empty. In this case, the system time distribution is the maximum between

an exponentially distributed random variable and an Erlang distributed one:

pT max|Q(t|(0, q2)) =

(1 − e−2ηµ1t)

(cid:34)

(2ηµ2)q2+1tq2e−2ηµ2t
q2!

(cid:32)

+ 2ηµ1e−2ηµ1t

1 −

q2
(cid:88)

n=0

(2ηµ2t)ne−2ηµ2t
n!

(cid:33) (cid:35)

u(t).

June 11, 2021

(32)

DRAFT

15

As for the minimum system time, pT max|Q(t|(q1, 0)) follows the same distribution, inverting the

indices of the two paths. Finally, we consider the case in which both paths have queued packets.

In this case, the distribution of the overall system time is the maximum between two Erlang

distributed variables, which correspond to the system time for the two paths:

pT max|Q(t|(q1, q2)) =

1 −

(cid:32)

q1
(cid:88)

n=0

(2ηµ1t)ne−2ηµ1t
n!

(cid:33)

(2ηµ2)q2+1tq2e−2ηµ2t
q2!

u(t)

+

(2ηµ1)q1+1tq1e−2ηµ1t
q1!

(cid:32)

1 −

q2
(cid:88)

n=0

(2ηµ2t)ne−2ηµ2t
n!

(cid:33)

u(t).

(33)

We can then use (31), (32), and (33) to remove the condition on Q2 from the system time

distribution, using the law of total probability to condition only on the ﬁrst queue’s state:

pT max|Q1(t|q1) =

∞
(cid:88)

q2=0

pQ((q1, q2))
k=0 pQ((q1, k))

(cid:80)∞

pT max|Q(t|(q1, q2))

(cid:34)

(cid:32)

=u(t)(1 − σ2)

2ηµ2e−2ηµ2(1−σ2)t

1 −

q1
(cid:88)

n=0

(2ηµ1t)ne−2ηµ1t
n!

(cid:33)

(34)

+

(2ηµ1)q1+1tq1e−2ηµ1t
(1 − σ2)q1!

(cid:35)

(1 − e−2ηµ2(1−σ2)t

.

We can now remove the condition on the state of the ﬁrst queue as well:

pT max(t) =

∞
(cid:88)

q1=0

pT max|Q1(t|q1)pQ1(q1)

=u(t)2η(cid:2)(1 − σ1)µ1e−2ηµ1(1−σ1)t(1 − e−2ηµ2(1−σ2)t)
+ (1 − σ2)µ2e−2ηµ2(1−σ2)t(1 − e−2ηµ1(1−σ1)t)(cid:3).

(35)

The maximum system time represents the latency for a system which requires both packets

to fulﬁll the request. Network coded transmissions, in which both packets contain part of the

information required at the receiver, is one example of this kind of system. The CDF of the

system time is:

PT max(t) = u(t) (cid:2)1 − e−2ηµ1(1−σ1)t − e−2ηµ2(1−σ2)t + e−2η(µ1(1−σ1)+µ2(1−σ2))t(cid:3) .

(36)

D. System time and PAoI for synchronized systems

After computing pmin,e

T

and pmax

T

, we can go ahead and get the system time for a coded system.

In the most general case, we have a coded system with η ∈ (0.5, 1). We then have the following

June 11, 2021

DRAFT

CDF:

pT LQ(t) = pmin,e

T

(t)

pT HQ(t) = pmax,e

T

(t),

16

(37)

(38)

where T LQ is the delay of the low-quality version of the frame and T HQ is the delay of the

high-quality version of the frame. The split and replicated systems are two extreme cases of the

coded transmission: in the former, the low-quality frame is undecodable, and η = 1, while in

the latter, the low quality version is identical to the full-quality one, and η = 0.5.

We can now consider the distribution of the PAoI, denoted by ∆, in the systems for which

we just computed the system time PDF. For simplicity, we refer to the more general error-prone

system, which the error-free case is a special case of with ε1 = ε2 = 0. If we have a synchronized

D/M/2 system with success probability ps and system time PDF pT (t) for successful packets,

we need to consider the possibility of request failures. We denote the number of failures as F :

if there are f consecutive failures, the PDF of the PAoI is simply given by:

p∆|F (δ|f ) = pT (δ − (f + 1)τ )u(δ − (f + 1)τ ) ∀f ≥ 1.

(39)

This is due to the deterministic nature of the arrival process, which increases the age by τ for

every failure. As failures are independently distributed and the success probability is ps, we can

now apply the law of total probability to remove the condition:

p∆(δ) = ps

τ (cid:99)−1
(cid:98) δ
(cid:88)

(1 − ps)f pT (δ − (f + 1)τ ).

f =0

(40)

By substituting pmin

s

and pmin,e
T

, or pmax

s

and pmax

T

, we can compute the distribution of the PAoI

for replicated and split systems, respectively.

In a coded transmission scheme with MDC, the concept of PAoI is split between the two
and pmin,e
T

qualities: as above, we can substitute pmin

into (40) to compute the PAoI of low-

s

quality frames, or pmax

s

and pmax

T

to compute the peak age considering only high-quality frames.

VI. SIMULATION RESULTS

In this section, we compare our analytical results with an extensive Monte Carlo simulation,

consisting of over 106 packets, in order to verify the analysis. The ﬁrst 1000 packets of each

simulation were cut from the results to avoid the initial transition effects and ensure that the

system was only considered in a steady state. We analyzed both the system time for the four

June 11, 2021

DRAFT

)
t

≤

T
(
P

)
t

≤

T
(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

1

2

3

4

5

t

(a) Alternating transmission.

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

1

2

3

4

5

t

(c) Split transmission.

)
t

≤

T
(
P

)
t

≤

T
(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

17

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

1

2

3

4

5

t

(b) Replicated transmission.

τ = 0.75(LQ)

τ = 1.5(LQ)

τ = 2 (LQ)

τ = 4 (LQ)

τ = 0.75(HQ)

τ = 1.5(HQ)

τ = 2 (HQ)

τ = 4 (HQ)

1

2

3

4

5

(d) Coded transmission (η = 0.75).

t

Fig. 2: Latency CDF for the four schemes in an error-free D/M/2 with µ1 = µ2 = 1.

schemes and the PAoI, considering both the full distribution and the 99th percentile, used as a

proxy for the worst-case performance.

A. System time

We ﬁrst look at the latency of the four schemes in an error-free system. The two paths have

the same service rates, which are set to 1. Fig. 2 shows the CDF of the system time for different

values of the inter-frame period τ . The alternating transmission scheme in Fig. 2a can support

τ = 0.75, but it has a long tail: this is due to the fact that it relies on a single system sending a

large packet. The replicated scheme can avoid this problem, as shown in Fig. 2b, as its latency

is the minimum between the two paths. However, the higher load it imposes on the system

means that it cannot support a frame rate higher than 1 (e.g., the τ = 0.75 case represented

in the other schemes). This is not true for the split scheme in Fig. 2c, which has both a lower

load and a light tail. While it requires both paths to deliver their packets to decode a frame, it

can still have a good worst-case performance because of the reduced packet size. Finally, the

coded scheme, whose performance is shown in Fig. 2d, is a compromise between replicating

June 11, 2021

DRAFT

9
9
T

9
9
T

10

8

6

4

2

0
0.5

10

8

6

4

2

0
0.5

Alternating

Split

Coded (LQ)

Coded (HQ)

0.6

0.7

0.8

0.9

1

η

(a) Inter-frame period τ = 0.75.

Alternating

Replicated

Split

Coded (LQ)

Coded (HQ)

0.6

0.7

0.8

0.9

1

η

9
9
T

9
9
T

10

8

6

4

2

0
0.5

10

8

6

4

2

0
0.5

18

Alternating

Replicated

Split

Coded (LQ)

Coded (HQ)

0.6

0.7

0.8

0.9

1

η

(b) Inter-frame period τ = 1.5.

Alternating

Replicated

Split

Coded (LQ)

Coded (HQ)

0.6

0.7

0.8

0.9

1

η

(c) Inter-frame period τ = 2.

(d) Inter-frame period τ = 4.

Fig. 3: 99th percentile T99 of the latency as a function of the coding rate η in an error-free

D/M/2 with µ1 = µ2 = 1.

and splitting: it can deliver a lower-quality version of the frame much faster than the other

systems, but the full-quality version has a high latency, since it requires both packets to be

delivered and each packet is larger than in the split system. In this case, the high-quality curve

for τ = 0.75 is still in the stability region, unlike the replicated scheme, although with a long

tail. As expected, the simulated results perfectly match the analytical curves. This is also true for

the coded transmission, but Fig. 2d does not show the Monte Carlo results to improve clarity.

Naturally, the coded system depends on the efﬁciency of the code: an MDC scheme with a

higher η will have smaller packets, but each individual packet will contain less information on

the frame, so the lower-quality version will have a worse quality than the equivalent for a scheme

with a smaller η. The replicated and split scheme are the two extremes: in the replicated scheme,

each packet is enough on its own to get the full-quality frame, while in the split scheme, an

individual packet is not enough to decode the frame at any quality. Fig. 3 shows the worst-case

latency performance of the scheme, represented using the 99th percentile of the system time,

along with the three other schemes. We have η = 1 for the alternating and split schemes, and

June 11, 2021

DRAFT

)
t

≤

T
(
P

)
t

≤

T
(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

1

2

3

4

5

t

(a) Alternating transmission.

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

1

2

3

4

5

t

(c) Split transmission.

)
t

≤

T
(
P

)
t

≤

T
(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

19

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

1

2

3

4

5

t

(b) Replicated transmission.

τ = 0.75(LQ)

τ = 1.5(LQ)

τ = 2 (LQ)

τ = 4 (LQ)

τ = 0.75(HQ)

τ = 1.5(HQ)

τ = 2 (HQ)

τ = 4 (HQ)

1

2

3

4

5

(d) Coded transmission (η = 0.75).

t

Fig. 4: Latency CDF for the four schemes in an error-free D/M/2 with µ1 = 1 and µ2 = 1.5.

η = 0.5 for the replicated scheme. As the plots show, there is an inverse relationship between the

latency performance and the quality achievable with just one packet, as increasing the redundancy

leads to a sharp increase in the latency, and the system can become unstable if packets are both

frequent and large, as is shown in Fig. 3a, which has τ = 0.75. In this case, the load on the

two paths is already high, so choosing a low η can increase the queuing delay signiﬁcantly,

with a signiﬁcant delay increase. If the two paths have a very low load, as in Fig. 3d, which

has τ = 4, the beneﬁts from a more efﬁcient code are smaller, and the latency cost of having a

higher quality from a single packet is lower.

We can then look at what happens in an unbalanced system, in which the two paths have

different service rates: Fig. 4 shows the CDF of the latency for the four schemes in a system

with µ1 = 1 and µ2 = 1.5. In this case, the schemes that can rely on the faster path to transmit

the frame, i.e., the replicated and coded schemes, can signiﬁcantly improve their performance,

while the tail of the distribution for the alternating scheme remains similar to the balanced case:

packets on the slower path can still have long delays. The same thing happens for the split

system, for which the slower path is still a limiting factor: while performance is slightly better

June 11, 2021

DRAFT

20

Alternating

Replicated

Split

0.1

0.2

0.3

0.4

0.5
ε

0.6

0.7

0.8

0.9

1

s
p

1

0.8

0.6

0.4

0.2

0

0

Fig. 5: Frame delivery probability as a function of ε in an error-prone D/M/2 with ε1 = ε2 = ε.

)
t

≤

T
(
P

)
t

≤

T
(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

1

2

3

4

5

t

(a) Alternating transmission.

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

1

2

3

4

5

t

(c) Split transmission.

)
t

≤

T
(
P

)
t

≤

T
(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

1

2

3

4

5

t

(b) Replicated transmission.

τ = 0.75(LQ)

τ = 1.5(LQ)

τ = 2 (LQ)

τ = 4 (LQ)

τ = 0.75(HQ)

τ = 1.5(HQ)

τ = 2 (HQ)

τ = 4 (HQ)

1

2

3

4

5

(d) Coded transmission (η = 0.75).

t

Fig. 6: Latency CDF for the four schemes in an error-prone D/M/2 with µ1 = µ2 = 1 and

ε1 = ε2 = 0.2.

than in the balanced scenario, the improvements are far smaller than the one of the replicated

system. We note that alternating scheme can beneﬁt from a certain adaptation when the service

rates are unbalanced; for example, one possibility could be to try to keep the load on each of

the channels equal.

Finally, we consider what happens in an error-prone system, as the transmission schemes

June 11, 2021

DRAFT

9
9
T

9
9
T

10

8

6

4

2

0

10

8

6

4

2

0

Alternating

Replicated

Queue sched.

Split

Coded (LQ)

Coded (HQ)

0

1

2

3

4

5

τ

(a) Error-free, µ1 = µ2 = 1.

Alternating

Replicated

Queue sched.

Split

Coded (LQ)

Coded (HQ)

0

1

2

3

4

5

9
9
T

9
9
T

10

8

6

4

2

0

10

8

6

4

2

0

21

Alternating

Replicated

Split

Coded (LQ)

Coded (HQ)

0

1

2

3

4

5

(b) µ1 = µ2 = 1 and ε1 = ε2 = 0.2.

τ

Alternating

Replicated

Split

Coded (LQ)

Coded (HQ)

0

1

2

3

4

5

(c) Error-free, µ1 = 1, µ2 = 1.5.

(d) µ1 = µ2 = 1, ε1 = 0.1, and ε2 = 0.2.

τ

τ

Fig. 7: 99th percentile T99 of the latency as a function of the inter-frame time in a D/M/2. The

coded transmission has η = 0.75.

provide different protection from errors. While the replicated scheme provides extra redundancy

by duplicating the packet, the alternating one provides no protection at all against packet erasures,

while the split scheme does even worse. In order for a frame to be decoded in the split scheme,

both halves need to be delivered to the receiver. Fig. 5 shows the frame decoding probability as

a function of the packet erasure probability (considering the same erasure probability on both

paths): as expected, the replicated scheme is much more reliable, and the split scheme is less

so, while the alternating scheme follows the erasure probability exactly. In the coded scheme,

the probability of decoding a frame at any quality is the same as for the replicated scheme,

while the probability of getting a full-quality frame follows the curve for the split system, as it

requires both path to deliver their part correctly.

This difference between the schemes is reﬂected in the CDF of the latency of successfully

delivered frames, which is shown in Fig. 6 for a system with µ1 = µ2 = 1 and ε1 = ε2 = 0.2.

In this case, the distributions for the alternating and split scheme, as well as for the high-quality

version of the coded transmission, are exactly the same as in Fig. 2. This is because any packet

June 11, 2021

DRAFT

22

loss causes the whole frame to be lost, and is then not computed in the latency distribution. On

the other hand, the replicated scheme and the low-quality version of the coded transmission have

a higher delay: this is because they can recover from errors on one path by using the other, but

cannot then use the beneﬁts of path diversity to improve latency. In general, the far lower error

rate of these schemes makes them preferable in systems with a high packet erasure probability.

We can also look at system optimization, if we have an application that can work at different

frame rates: Fig. 7 shows the 99th percentile of the latency as a function of τ for 4 different

systems. As expected, a longer inter-frame time leads to a reduced latency in all cases: as the

load on the system decreases, the probability of having to wait for the queued frames to be

sent becomes smaller. The alternating system, which does not exploit the parallel paths fully,

can support a high frame rate but performs worse than the other systems when the load is low

(the 99th percentile of the service time, with µ = 1, would be equal to − log(0.01) (cid:39) 4.6). On

the other hand, the replicated system has a very high load, and underperforms for low values

of τ , but can actually keep a low latency when the load on the system is low. The split system

provides a middle ground, but it is also highly vulnerable to errors, as previously discussed.

Finally, the MDC solution can provide a very good delay, smaller than all the other schemes’,

for the low-quality version, while still delivering the full-quality frame in a reasonable time. We

also provide the simulation results for a queue-based scheduler, which transmits the packet over

the path with the shortest queue, in the two error-free scenarios. As expected, a pure round-robin

scheduler like the alternating scheme underperforms in the unbalanced scenario, but it actually

performs very well in the balanced one, except for very high frame rates. This is because the

two paths will have a similar queue most of the time, so the alternating scheme is close to the

optimal uncoded scheme if the load is relatively low.

B. Peak Age of Information

We now analyze the PAoI performance of the four schemes. We ﬁrst look at the simple error-

free, balanced system with two paths with the same service rate. Fig. 8 shows the CDF of the

PAoI for the four schemes. Unlike the system time, PAoI does not necessarily beneﬁt from a

lower load on the system, as it also includes the inter-frame time: the scenario with τ = 4 has

the worst PAoI for all four schemes. It is interesting to note that the CDF for the alternating

scheme, shown in Fig. 8a, is not smooth: this is because in some cases frame i arrives before

frame i − 1, which is transmitted on the other path. This out-of-order arrival can only result

June 11, 2021

DRAFT

)
δ
≤
∆

(
P

)
δ
≤
∆

(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

2

4

6

8

10

δ

(a) Alternating transmission.

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

2

4

6

8

10

δ

(c) Split transmission.

)
δ
≤
∆

(
P

)
δ
≤
∆

(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

23

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

2

4

6

8

10

δ

(b) Replicated transmission.

τ = 0.75 (LQ)

τ = 1.5 (LQ)

τ = 2 (LQ)

τ = 4 (LQ)

τ = 0.75 (HQ)

τ = 1.5 (HQ)

τ = 2 (HQ)

τ = 4 (HQ)

2

4

6

8

10

(d) Coded transmission (η = 0.75).

δ

Fig. 8: PAoI distribution for the three schemes in an error-free D/M/2 with µ1 = µ2 = 1. The

coded transmission has η = 0.75.

in a PAoI of at least 2τ , as the age of the i − 2-th frame, which has certainly arrived before

the i-th as it was sent on the same path, is 2τ when the i-th frame is sent. Interestingly, the

CDFs for different values of τ also cross, which is an indication that systems optimized for the

average PAoI will not have optimal worst-case performance. This is also true for the replicated

and split schemes, which have similar PAoI distributions, as shown in Fig. 8b and Fig. 8c. As

for the latency, the coded scheme, shown in Fig. 8d, can outperform all others and deliver the

lower-quality version with a signiﬁcantly lower PAoI, while the full-quality version is somewhat

slower in most cases. The coded scheme also has a case with very high load, for τ = 0.75,

which is close to its stability limit: in this case, the load on the system is too high and the PAoI

performance is not good. This further highlights the need to optimize the frame rate, as setting

the wrong frame rate can signiﬁcantly increase the PAoI, consequently decreasing the QoE of

the VR service.

As we discussed in Sec. IV, we do not compute the precise CDF of the PAoI of the alternating

scheme in a scenario with errors, as we do not consider the possibility of multiple out-of-order

June 11, 2021

DRAFT

)
δ
≤
∆

(
P

)
δ
≤
∆

(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

2

4

6

8

10

δ

(a) Alternating transmission.

τ = 0.75, sim.

τ = 0.75, an. res.

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

2

4

6

8

10

δ

(c) Split transmission.

)
δ
≤
∆

(
P

)
δ
≤
∆

(
P

1

0.8

0.6

0.4

0.2

0

0

1

0.8

0.6

0.4

0.2

0

0

24

τ = 1.5, sim.

τ = 1.5, an. res.

τ = 2, sim.

τ = 2, an. res.

τ = 4, sim.

τ = 4, an. res.

2

4

6

8

10

δ

(b) Replicated transmission.

τ = 0.75 (LQ)

τ = 1.5 (LQ)

τ = 2 (LQ)

τ = 4 (LQ)

τ = 0.75 (HQ)

τ = 1.5 (HQ)

τ = 2 (HQ)

τ = 4 (HQ)

2

4

6

8

10

(d) Coded transmission (η = 0.75).

δ

Fig. 9: PAoI distribution for the three schemes in an error-prone D/M/2 with µ1 = µ2 = 1 and

ε1 = ε2 = 0.2. The coded transmission has η = 0.75.

packets, which can further increase the age. Fig. 9, which shows the CDF of the peak age in an

error-prone system in which both channels have an error rate of 0.2, shows this: in Fig. 9a, the

actual age is higher than the bound. The bound is tighter for low system loads, and there are

now multiple ﬂection points that correspond to successive errors in the transmission. The errors

also cause ﬂection points in Fig. 9b, and the tail of the age is shifted to the right because of

packet loss. This phenomenon is much worse for the split scheme, as shown in Fig. 9c, as the

split system is much more vulnerable to errors. This can cause the PAoI to increase signiﬁcantly.

The same is true for the full-quality PAoI of the coded scheme, as depicted in Fig. 9d, while the

lower-quality version of the frames can actually be delivered with a relatively low PAoI even

with a high error rate.

We now look at the optimization of the system, using the 99th percentile of the PAoI as a

metric for the worst-case performance. Fig. 10 shows what happens as we change τ for the

four considered schemes. All results have a U shape, with an optimal frame rate which balances

the inter-frame period and the latency of frames that are sent. Naturally, this optimal point is

June 11, 2021

DRAFT

25

different for different schemes and scenarios. However, it is interesting to note that the lower-

quality version of the coded scheme always has the lowest age, aside from having the lowest

frame loss. On the other hand, the replicated scheme always performs slightly worse than the

split scheme, as even though it will lose fewer frames, its higher load signiﬁcantly increases

the optimal inter-frame period. We can also see that the real age for the alternating system is

close to the bound for the plots with error (shown on the right). The alternating scheme can

perform slightly better than the split scheme, but is outperformed by the coded scheme at the

lower quality. On the other hand, the full-quality version of the coded frames has a very high

age, as it has no protection from errors and the higher load associated to the redundancy in the

MDC scheme. In general, the alternating scheme performs surprisingly well in terms of PAoI.

All the schemes could beneﬁt from a more advanced scheduler, regulating the load on the two

paths based on the number of packets still in the queue: unlike latency-oriented systems, which

should have a very low load (and, consequently, little effect from improving the scheduler, as

the queues are almost always empty), PAoI is minimized for rather high load values, close to

0.5, so having an intelligent scheduler can be a signiﬁcant improvement.

As we did for the system time, we can then analyze the effect of the coding rate on the 99th

percentile of the PAoI in the coded scheme, as shown in Fig. 11. In this case, we have used an

optimized frame rate, i.e., set the inter-frame period that minimizes the 99th percentile of the

PAoI for each value of η. The two plots on the left, whose scenarios are error-free, show a smaller

effect of the coding rate, while it becomes more important for error-prone system. The intuitive

understanding that we got from the system time results holds: the more stressed a system is,

the more an efﬁcient code matters, and the tighter the trade-off between quality and latency or

age becomes. However, while latency-oriented systems are very sensitive to load, PAoI is very

sensitive to the packet erasure probability, as missing a frame can signiﬁcantly increase the age.

The results for the queue-based scheduler are also shown for the two error-free scenarios: in this

case, the alternating scheme performs almost as well even in the unbalanced scenario. This is

because sending multiple consecutive packets over the same path might improve the average age,

but has a negative effect in the worst case, as one hold-up can block two consecutive packets,

increasing the age signiﬁcantly.

June 11, 2021

DRAFT

26

9
9

∆

9
9

∆

15

10

5

0

0

15

10

5

0

0

Alternating

Replicated

Queue sched.

Split

Coded (LQ)

Coded (HQ)

1

2

3

4

5

τ

(a) Error-free, µ1 = µ2 = 1.

Alternating

Replicated

Queue sched.

Split

Coded (LQ)

Coded (HQ)

1

2

3

4

5

τ

9
9

∆

9
9

∆

15

10

5

0

0

15

10

5

0

0

Alternating (sim.)

Replicated

Alternating (bound)

Split

Coded (LQ)

Coded (HQ)

1

2

3

4

5

(b) µ1 = µ2 = 1 and ε1 = ε2 = 0.2.

τ

Alternating (sim.)

Replicated

Alternating (bound)

Split

Coded (LQ)

Coded (HQ)

1

2

3

4

5

τ

(c) Error-free, µ1 = 1, µ2 = 1.5.

(d) µ1 = µ2 = 1, ε1 = 0.1, and ε2 = 0.2.

Fig. 10: 99th percentile ∆99 of the PAoI as a function of the inter-frame time in a D/M/2. The

coded transmission has η = 0.75.

VII. CONCLUSIONS AND FUTURE WORK

In this work, we analyzed some schemes for the transmission of data over parallel queuing

systems, with multipath VR as a motivating scenario. Unlike previous works on the fork-join

model, we derived the full distribution of the latency and PAoI for uncoded and coded schemes

in the presence of communication errors, and examined the performance of the various schemes

as a function of the frame rate and the efﬁciency of the video encoding. The trade-offs between

picture quality, frame rate, and timeliness are complex, and our analysis provides a handy tool

for system designers.

The analysis opens several avenues of future research, most of which aim at making the model

more realistic. The use of more complex communication models and scheduling schemes is one,

while another is a closer examination of real omnidirectional video codecs and trafﬁc models.

These two expansions of the work can be combined to reach a realistic scheduling framework,

which should also take into account the human perception of smoothness and delay in VR.

June 11, 2021

DRAFT

15

10

5

9
9

∆

Alternating

Split

Coded (HQ)

Replicated

Coded (LQ)

15

10

5

9
9

∆

27

Alternating (sim.)

Alternating (bound)

Replicated

Coded (LQ)

Split

Coded (HQ)

0
0.5

0.6

0.7

0.8

0.9

1

0
0.5

0.6

0.7

0.8

0.9

1

η

η

(a) Error-free, µ1 = µ2 = 1.

(b) µ1 = µ2 = 1 and ε1 = ε2 = 0.2.

15

10

5

9
9

∆

Alternating

Split

Coded (HQ)

Replicated

Coded (LQ)

15

10

5

9
9

∆

Alternating (sim.)

Alternating (bound)

Replicated

Coded (LQ)

Split

Coded (HQ)

0
0.5

0.6

0.7

0.8

0.9

1

0
0.5

0.6

0.7

0.8

0.9

1

η

η

(c) Error-free, µ1 = 1, µ2 = 1.5.

(d) µ1 = µ2 = 1, ε1 = 0.1, and ε2 = 0.2.

Fig. 11: 99th percentile ∆99 of the PAoI with optimized frame rate as a function of the coding

rate η in a D/M/2.

ACKNOWLEDGMENT

This work is part of the IntellIoT project that received funding from the European Union’s

Horizon 2020 research and innovation program under grant agreement No. 957218.

REFERENCES

[1] S. Kavanagh, A. Luxton-Reilly, B. Wuensche, and B. Plimmer, “A systematic review of Virtual Reality in education,”

Themes in Science and Technology Education, vol. 10, no. 2, pp. 85–119, Dec. 2017.

[2] D. Freeman, S. Reeve, A. Robinson, A. Ehlers, D. Clark, B. Spanlang, and M. Slater, “Virtual reality in the assessment,

understanding, and treatment of mental health disorders,” Psychological Medicine, vol. 47, no. 14, pp. 2393–2400, Oct.

2017.

[3] M. Farshid, J. Paschen, T. Eriksson, and J. Kietzmann, “Go boldly!: Explore augmented reality (AR), virtual reality (VR),

and mixed reality (MR) for business,” Business Horizons, vol. 61, no. 5, pp. 657–663, Sep. 2018.

[4] R. P. Singh, M. Javaid, R. Kataria, M. Tyagi, A. Haleem, and R. Suman, “Signiﬁcant applications of virtual reality for

COVID-19 pandemic,” Diabetes & Metabolic Syndrome: Clinical Research & Reviews, vol. 14, no. 4, pp. 661–664, Jul.

2020.

June 11, 2021

DRAFT

28

[5] T. Chakraborti, S. Sreedharan, A. Kulkarni, and S. Kambhampati, “Projection-aware task planning and execution for

human-in-the-loop operation of robots in a mixed-reality workspace,” in International Conference on Intelligent Robots

and Systems (IROS).

IEEE, Oct. 2018, pp. 4476–4482.

[6] A. Bröring, V. Kulkarni, A. Zirkler, K. Fysarakis, S. Mayer, B. Soret, L. D. Nguyen, P. Popovski, S. Samarakoon, M. Bennis,

J. Harri, M. Rooker, G. Fritz, A. Bucur, G. Spanoudakis, and S. Ionannidis, “IntellIoT: Intelligent, real-time, and trusted

IoT environments with human-in-the-loop,” Submitted to European Conference on Networks and Communications, 2021.

[7] T. Braud, Z. Pengyuan, J. Kangasharju, and H. Pan, “Multipath computation ofﬂoading for mobile augmented reality,” in

International Conference on Pervasive Computing and Communications (PerCom).

IEEE, Mar. 2020.

[8] M. Li, K. Arning, L. Vervier, M. Zieﬂe, and L. Kobbelt, “Inﬂuence of temporal delay and display update rate in an

augmented reality application scenario,” in 14th International Conference on Mobile and Ubiquitous Multimedia. ACM,

2015, pp. 278–286.

[9] J. Wu, B. Cheng, C. Yuen, N.-M. Cheung, and J. Chen, “Trading delay for distortion in one-way video communication

over the internet,” IEEE Trans. on Circuits and Sys. for Video Tech., vol. 26, no. 4, pp. 711–723, 2016.

[10] S. Kaul, R. Yates, and M. Gruteser, “Real-time status: How often should one update?” in International Conference on

Computer Communications (INFOCOM).

IEEE, Mar. 2012, pp. 2731–2735.

[11] M. Kazemi, S. Shirmohammadi, and K. H. Sadeghi, “A review of multiple description coding techniques for error-resilient

video delivery,” Multimedia Systems, vol. 20, no. 3, pp. 283–309, Jun. 2014.

[12] C. Raiciu, S. Barre, C. Pluntke, A. Greenhalgh, D. Wischik, and M. Handley, “Improving datacenter performance and

robustness with multipath TCP,” ACM SIGCOMM Computer Communication Review, vol. 41, no. 4, pp. 266–277, Aug.

2011.

[13] J. Rao and S. Vrzic, “Packet duplication for URLLC in 5G: Architectural enhancements and performance analysis,” IEEE

Network, vol. 32, no. 2, pp. 32–40, Apr. 2018.

[14] F. Chiariotti, S. Kucera, A. Zanella, and H. Claussen, “Analysis and design of a latency control protocol for multi-path

data delivery with pre-deﬁned QoS guarantees,” IEEE/ACM Trans. on Net., vol. 27, no. 3, pp. 1165–1178, Jun. 2019.

[15] S. Ferlin, S. Kucera, H. Claussen, and Ö. Alay, “MPTCP meets FEC: Supporting latency-sensitive applications over

heterogeneous networks,” IEEE/ACM Transactions on Networking, vol. 26, no. 5, pp. 2005–2018, Aug. 2018.

[16] T. Mekonnen, P. Porambage, E. Harjula, and M. Ylianttila, “Energy consumption analysis of high quality multi-tier wireless

multimedia sensor network,” IEEE Access, vol. 5, pp. 15 848–15 858, Aug. 2017.

[17] M. Z. Hasan, H. Al-Rizzo, and F. Al-Turjman, “A survey on multipath routing protocols for QoS assurances in real-time

wireless multimedia sensor networks,” IEEE Communications Surveys & Tutorials, vol. 19, no. 3, pp. 1424–1456, Jan.

2017.

[18] X. Ge, L. Pan, Q. Li, G. Mao, and S. Tu, “Multipath cooperative communications networks for augmented and virtual

reality transmission,” IEEE Transactions on Multimedia, vol. 19, no. 10, pp. 2345–2358, Jul. 2017.

[19] A. Ford, C. Raiciu, M. Handley, O. Bonaventure, and C. Paasch, “TCP extensions for multipath operation with multiple

addresses,” IETF, RFC 6824, Jan. 2013. [Online]. Available: https://rfc-editor.org/rfc/rfc6824.txt

[20] E. Brosh, S. A. Baset, V. Misra, D. Rubenstein, and H. Schulzrinne, “The delay-friendliness of TCP for real-time trafﬁc,”

IEEE/ACM Transactions On Networking, vol. 18, no. 5, pp. 1478–1491, Jun. 2010.

[21] Y.-C. Chen, Y.-s. Lim, R. J. Gibbens, E. M. Nahum, R. Khalili, and D. Towsley, “A measurement-based study of Multipath

TCP performance over wireless networks,” in SIGCOMM Internet Measurement Conf. (IMC). ACM, Oct. 2013, pp. 455–

468.

[22] P. Hurtig, K.-J. Grinnemo, A. Brunstrom, S. Ferlin, Ö. Alay, and N. Kuhn, “Low-latency scheduling in MPTCP,” IEEE/ACM

Trans. on Net., vol. 27, no. 1, pp. 302–315, Dec. 2018.

June 11, 2021

DRAFT

29

[23] R. Khalili, N. Gast, M. Popovic, and J.-Y. Le Boudec, “MPTCP is not Pareto-optimal: performance issues and a possible

solution,” IEEE/ACM Trans. on Net., vol. 21, no. 5, pp. 1651–1665, Oct. 2013.

[24] F. Silva, M. A. Togou, and G.-M. Muntean, “AVIRA: Enhanced multipath for content-aware adaptive virtual reality,” in

International Wireless Communications and Mobile Computing (IWCMC).

IEEE, Jun. 2020, pp. 917–922.

[25] V. Singh, S. Ahsan, and J. Ott, “MPRTP: multipath considerations for real-time media,” in 4th Multimedia Systems

Conference (MMSys). ACM, Feb. 2013, pp. 190–201.

[26] T. D. Wallace and A. Shami, “Concurrent multipath transfer using SCTP: Modelling and congestion window management,”

IEEE Transactions on Mobile Computing, vol. 13, no. 11, pp. 2510–2523, Feb. 2014.

[27] O. C. Kwon, Y. Go, Y. Park, and H. Song, “MPMTP: Multipath multimedia transport protocol using systematic raptor

codes over wireless networks,” IEEE Transactions on Mobile Computing, vol. 14, no. 9, pp. 1903–1916, Oct. 2014.

[28] M. Polese, F. Chiariotti, E. Bonetto, F. Rigotto, A. Zanella, and M. Zorzi, “A survey on recent advances in transport layer

protocols,” IEEE Communication Surveys and Tutorials, vol. 24, no. 4, pp. 3584–3608, Aug. 2019.

[29] C. Kim and A. K. Agrawala, “Analysis of the fork-join queue,” IEEE Transactions on Computers, vol. 38, no. 2, pp.

250–255, Feb. 1989.

[30] W. R. KhudaBukhsh, A. Rizk, A. Frömmgen, and H. Koeppl, “Optimizing stochastic scheduling in fork-join queueing

models: Bounds and applications,” in Conference on Computer Communications (INFOCOM).

IEEE, May 2017, pp. 1–9.

[31] G. Joshi, E. Soljanin, and G. Wornell, “Efﬁcient redundancy techniques for latency reduction in cloud systems,” ACM

Transactions on Modeling and Performance Evaluation of Computing Systems (TOMPECS), vol. 2, no. 2, pp. 1–30, Feb.

2017.

[32] N. B. Shah, K. Lee, and K. Ramchandran, “When do redundant requests reduce latency?” IEEE Transactions on

Communications, vol. 64, no. 2, pp. 715–722, Dec. 2015.

[33] Y. Sun, C. E. Koksal, and N. Shroff, “On delay-optimal scheduling in queueing systems with replications,” ArXiv, vol.

abs/1603.07322, Mar. 2016.

[34] A. Rizk, F. Poloczek, and F. Ciucu, “Stochastic bounds in fork–join queueing systems under full and partial mapping,”

Queueing Systems, vol. 83, no. 3, pp. 261–291, Aug. 2016.

[35] M. Fidler and Y. Jiang, “Non-asymptotic delay bounds for (k, l) fork-join systems and multi-stage fork-join networks,” in

35th Annual International Conference on Computer Communications (INFOCOM).

IEEE, Apr. 2016.

[36] M. A. Abd-Elmagid, N. Pappas, and H. S. Dhillon, “On the role of age of information in the Internet of Things,” IEEE

Communications Magazine, vol. 57, no. 12, pp. 72–77, Dec. 2019.

[37] L. Huang and E. Modiano, “Optimizing age-of-information in a multi-class queueing system,” in International Symposium

on Information Theory (ISIT).

IEEE, Jun. 2015, pp. 1681–1685.

[38] Y. Inoue, H. Masuyama, T. Takine, and T. Tanaka, “A general formula for the stationary distribution of the Age of

Information and its application to single-server queues,” IEEE Transactions on Information Theory, vol. 65, no. 12, pp.

8305–8324, Dec. 2019.

[39] A. Kosta, N. Pappas, V. Angelakis et al., “Age of information: A new concept, metric, and tool,” Foundations and Trends

in Networking, vol. 12, no. 3, pp. 162–259, Nov. 2017.

[40] R. D. Yates, “The age of information in networks: Moments, distributions, and sampling,” IEEE Transactions on Information

Theory, vol. 66, no. 9, pp. 5712–5728, May 2020.

[41] X. Chen, K. Gatsis, H. Hassani, and S. S. Bidokhti, “Age of information in random access channels,” in International

Symposium on Information Theory (ISIT).

IEEE, Jun. 2020, pp. 1770–1775.

[42] A. Munari, “Modern random access: an age of information perspective on Irregular Repetition Slotted ALOHA,” IEEE

Transactions on Communications, Feb. 2021.

June 11, 2021

DRAFT

30

[43] J. Li, Y. Zhou, and H. Chen, “Age of information for multicast transmission with ﬁxed and random deadlines in IoT

systems,” IEEE Internet of Things Journal, vol. 7, no. 9, pp. 8178–8191, Mar. 2020.

[44] F. Chiariotti, O. Vikhrova, B. Soret, and P. Popovski, “Peak age of information distribution for edge computing with

wireless links,” IEEE Transactions on Communications, Jan. 2021.

[45] N. Akar, O. Do˘gan, and E. U. Atay, “Finding the exact distribution of (Peak) Age of Information for queues of PH/PH/1/1

and M/PH/1/2 type,” IEEE Transactions on Communications, vol. 68, no. 9, pp. 5661–5672, Jun. 2020.

[46] B. Buyukates and S. Ulukus, “Timely distributed computation with stragglers,” IEEE Transactions on Communications,

vol. 68, no. 9, pp. 5273–5282, Jun. 2020.

[47] R. Talak and E. H. Modiano, “Age-delay tradeoffs in queueing systems,” IEEE Transactions on Information Theory, vol. 67,

no. 3, pp. 1743–1758, Mar. 2021.

[48] A. K. Erlang, “Løsning af nogle problemer fra sandsynlighedsregningen af betydning for de automatiske telefoncentraler,”

Elektroteknikeren, vol. 13, pp. 5–13, Jan. 1917.

[49] D. Pinotsi and M. A. Zazanis, “Synchronized queues with deterministic arrivals,” Operations Research Letters, vol. 33,

no. 6, pp. 560–566, Nov. 2005.

[50] F. Baccelli and P. Brémaud, Palm probabilities and stationary queues, ser. Lecture Notes in Statistics. Springer Verlag,

Dec. 2012, vol. 41.

June 11, 2021

DRAFT

