7
1
0
2

p
e
S
6
2

]
I

A
.
s
c
[

1
v
1
3
1
9
0
.
9
0
7
1
:
v
i
X
r
a

Automatic Error Analysis of Human Motor
Performance for Interactive Coaching in
Virtual Reality

Felix H¨ulsmann1,2, Stefan Kopp2, and Mario Botsch1

1Computer Graphics Group
2Social Cognitive Systems Group
Bielefeld University, Germany

Abstract

In the context of ﬁtness coaching or for rehabilitation purposes,
the motor actions of a human participant must be observed and an-
alyzed for errors in order to provide eﬀective feedback. This task is
normally carried out by human coaches, and it needs to be solved
automatically in technical applications that are to provide automatic
coaching (e.g. training environments in VR). However, most coaching
systems only provide coarse information on movement quality, such
as a scalar value per body part that describes the overall deviation
from the correct movement. Further, they are often limited to static
body postures or rather simple movements of single body parts. While
there are many approaches to distinguish between diﬀerent types of
movements (e.g., between walking and jumping), the detection of more
subtle errors in a motor performance is less investigated. We propose
a novel approach to classify errors in sports or rehabilitation exercises
such that feedback can be delivered in a rapid and detailed manner:
Homogeneous sub-sequences of exercises are ﬁrst temporally aligned
via Dynamic Time Warping. Next, we extract a feature vector from
the aligned sequences, which serves as a basis for feature selection
using Random Forests. The selected features are used as input for
Support Vector Machines, which ﬁnally classify the movement errors.
We compare our algorithm to a well established state-of-the-art ap-
proach in time series classiﬁcation, 1-Nearest Neighbor combined with
Dynamic Time Warping, and show our algorithm’s superiority regard-
ing classiﬁcation quality as well as computational cost.

1

 
 
 
 
 
 
1

Introduction

Coaching environments for motor learning have become a more and more
popular research topic in the ﬁeld of Virtual Reality (VR) [1, 2, 3, 4]. They
are promising in areas such as rehabilitation or ﬁtness training. Obviously,
high-quality feedback on the coachee’s performance is crucial for the success
of such systems. Therefore, an intelligent coaching system does not only have
to detect which task — in the following called motor action — is executed. It
also has to detect the speciﬁc errors the coachee performs during an exercise
and has to address them using appropriate feedback. While lots of approaches
exist for the classiﬁcation of motor actions [5, 6, 7, 8, 9, 10], fewer consider
the analysis of the performance quality. If they do, authors often focus on
reporting simple scores, which summarize the performance quality in terms
of a deviation from a desired performance [4, 11, 1]. Others provide scoring
functions which describe overall improvement or decline in quality for a spe-
ciﬁc exercise [12]. However, many types of complex sports movements can be
executed correctly yet with diﬀerent individual styles [13]. Moreover, some
parts of the body are often completely irrelevant for the successful execution
of the movement. For instance, the orientation of the hands is negligible
when analyzing the quality of a body weight squat. Consequently, feedback
that only relies on an overall deviation from a prerecorded desired perfor-
mance, including task-irrelevant deviations, is non-optimal when aiming at
improving the coachee’s performance [14, 15].

For many types of motor actions, a set of typical errors can be found [16].
Often, there is only a very subtle distinction between a correct movement
and the occurrence of a certain error. For many known errors, coaches have
established feedback strategies to support a coachee in improving her perfor-
mance. This could be, for instance, verbal descriptions of the error together
with best practices on how to eliminate it. Intelligent coaching environments
in VR need to be able to detect such error patterns automatically and to
provide elaborate feedback, e.g. taken from real-world coaching experience.
Such feedback must be provided online or rapidly, i.e., either directly after a
coachee has ﬁnished the movement or — even better — already during the
motor action being performed. Some approaches try to achieve this using
manually designed rules that can be evaluated online [2, 17, 18]. However,
this requires enormous manual eﬀort and bears the risk of gaps or under-
ﬁtting of the designed rules.

In this paper, we present an approach to automatic error analysis of
human motor performance in an immersive VR coaching environment for
sports and rehabilitation exercises (see Figure 1). We focus on the squat
movement as a test case for our approach. The squat is a full-body motor

2

Figure 1: In our real-time VR coaching environment, a coachee performs
exercises while being observed by a virtual coach. The coach needs to extract
information on performed errors to provide eﬀective feedback.

action that is frequently used in the context of rehabilitation [19, 20] as
well as for sports training [20]. When executed by novice coachees, various
diﬀerent error patterns can be observed in a squat. We consider the detection
of such error patterns as a time series classiﬁcation problem. In the ﬁeld of
time series classiﬁcation, 1-Nearest-Neighbor combined with Dynamic Time
Warping (1NN-DTW) proved to be state of the art and diﬃcult to beat
by other classiﬁers [21, 22]. We aim to extend the current state of the art
in the classiﬁcation of typical error patterns in motor performance. Our
contribution is as follows:

• We propose a novel approach towards the classiﬁcation of error patterns
in motor performances which uses a reference-based Dynamic Time
Warping of movement segments as a basis for a feature selection using
Random Forest. The selected features are in a ﬁnal step classiﬁed by
a Support Vector Machine (SVM).

• We show that this classiﬁer outperforms the 1NN-DTW approach, in
both classiﬁcation performance as well as time needed for classiﬁcation.

• We show the eﬀectiveness of the approach on an exemplary data set and
demonstrate the impact of all components on classiﬁcation performance
as well as on time needed for classiﬁcation.

In the next section, we discuss related work towards motor performance
analysis and time series classiﬁcation. Then, we describe how we obtain

3

our data set, which consists of a list of typical error patterns, together with
annotated movement data. In Section 4, we ﬁrst evaluate the performance
of 1NN-DTW on our data set. Next, we provide a step-by-step evaluation
In Section 5, we discuss the results
of the components of our approach.
and conclude the paper. The video in the online material demonstrates
how we use the proposed analysis to generate verbal feedback inside our
“Intelligent Coaching Space”1, an immersive coaching environment for sports
and rehabilitation exercises (see Figure 1) [23].

2 Related Work

Two main approaches have been applied to assess the quality of human mo-
tor performances. The ﬁrst approach (Section 2.1) is to engineer a highly
specialized method, e.g., for the evaluation of feedback strategies for a very
speciﬁc type of motor action. In this approach, a common choice is to as-
sess quality by determining the overall distance of the performed motion to
the desired motion. Often, a model for these speciﬁc performance patterns
is manually designed drawing from expert knowledge. The second direction
(Section 2.2) consists in using more general, data-based approaches, such as
well established techniques from time series classiﬁcation. In the following,
we will present and discuss work stemming from both directions.

2.1 Speciﬁc, Manually Designed Approaches

Houmanfar et al. use a manually designed scoring function to represent pa-
tients’ performance changes in a rehabilitation setting [12]. Even though this
approach provides compelling results in the ﬁeld of application, no detailed
information on occurred error patterns is gained, which would be necessary
for the application of complex coaching strategies.

Other approaches make use of rule-based systems to detect the occur-
rence of certain error patterns. In the context of yoga training, Rector et al.
deﬁne optimal yoga poses [17]. De Kok et al. went one step further by man-
ually deﬁning error patterns [2] focussing on the whole trajectory. Rules are
implemented, ﬁrst to split the motion into sequential movement segments,
and then to describe the error patterns. A state machine performs the clas-
siﬁcation.

One major advantage of the approaches by Rector et al. or de Kok
is their real-time capability: Speciﬁc feedback strategies linked to
et al.
typical error patterns can be applied immediately. Further, the results are

1http://graphics.uni-bielefeld.de/research/icspace/

4

deterministic: If the rules are correct and exhaustive and the motion capture
system works properly, an incorrect classiﬁcation is unlikely to occur. This
directly leads to the major disadvantage: As the rules have to be designed
manually, they are prone to errors during the design phase, which might
be diﬃcult to be tracked down later on. A single error during the design
of only one pattern might have a devastating eﬀect on the resulting system
in terms of eﬀectiveness and even safety of the training. Moreover, it is
mostly not trivial — even when interviewing sports coaches — to obtain
exact information about which features are signiﬁcant or where to draw the
border between a correct or an incorrect movement. Finally, the design
of rules requires enormous manual eﬀort: For each motor action and for
each type of error, a detailed investigation on how to describe the motor
action and the error has to be performed. For complex error patterns, this
quickly becomes infeasible. Thus, it is desirable to focus on approaches that
automatically learn most of their information from data.

2.2 Data-based Approaches

Taylor et al. focus on classifying error patterns in rehabilitation exercises
using a combination of rule-based segmentation and AdaBoost on a set of
manually deﬁned features [24]. In a within-subject cross validation, the au-
thors obtain highly convincing results. However, classiﬁcation performance
decreases signiﬁcantly when generalizing to new subjects. Furthermore, the
design of feature sets requires additional manual work.

Kianifar et al. present an approach towards distinguishing between good,
moderate, and bad performances of squat movements [25]. They use a fea-
ture vector based on manually designed features, such as skewness and range,
whose dimensionality is reduced using Sparse Principal Component Analysis
(SPCA). Finally, Decision Trees are used for classiﬁcation. The classiﬁcation
accuracy to distinguish between good, moderate, and bad squats in a leave-
one-subject-out cross validation is 73 %. For the distinction between only
two classes (good and bad), a higher accuracy of 98.6 % was achieved. The
presented approach is only able to distinguish between three coarse classes
of quality and cannot spot single error patterns. In addition, manual eﬀort
is needed for feature preparation. Furthermore, SPCA is an unsupervised al-
gorithm, which searches for a set of sparse principal components which cover
as much as possible of the variance inside the data [26]. This is problematic
when most of the variance is due to individual diﬀerences rather than perfor-
mance errors, which holds for sports movements that can diﬀer considerably
between subjects.

O’Reilly et al. use a neural network classiﬁer to diﬀerentiate between cor-

5

rect and incorrect performances of squats and to classify error patterns. A
leave-one-out cross validation resulted in an accuracy of 80 % to distinguish
between correct and incorrect, but only in an accuracy of 57 % for the clas-
siﬁcation of error patterns. Similar experiments were conducted by Giggins
et al. [28, 29].

Yurtman and Barshan proposed an extension of Dynamic Time Warping
(DTW) that is able to detect multiple occurrences of multiple exercise types
in trajectories as well as to classify error patterns [30]. Classiﬁcation is
performed by comparing the just performed motion to pre-recorded templates
and then selecting the best matching one. This leads to a very high accuracy
of 93 % for exercise classiﬁcation and 89 % for the classiﬁcation of errors in
motor performances (inter-subject performance was not tested). However,
combinations of multiple error patterns cannot be considered as long as they
are not included as individually pre-recorded templates.

Overall, the data-based approaches employed in the context of sports
and rehabilitation applications have three weaknesses: First, it is often not
analyzed how well the trained classiﬁers generalize to new subjects. Many
approaches require the system be re-trained for each user. This leads to
problems as subjects are often physically not able to provide all the required
training data. For instance, in the context of sports performances, some users
are not able to perform the desired motor action correctly or, on purpose,
with a certain type of error. Second, the motor actions and error patterns are
often rather simple. Some of the presented systems only distinguish between,
e.g., “good” or “bad” for a motor action that only involves a very small
number of joints. Especially algorithms using variance-based dimensionality
reduction or pure comparisons with prototypes will perform worse on more
subtle errors or more complex movements: Most of the variance and also
the similarity to prototypes would be covered by inter-subject variations
instead of the movement patterns underlying the errors. Finally, for most
algorithms, no information on the applicability in interactive or real-time
systems is given. Especially algorithms which require expensive calculations
for each classiﬁcation do not meet the requirements of VR coaching systems
as, e.g., described in [23].

Another group of data-based approaches has been developed in the ﬁeld
of Computer Graphics to capture and synthesize human motion with partic-
ular styles. Analysis of observed movements is then often possible through
“analysis by synthesis”. Giese et al. introduced Spatio-Temporal Morphable
Models for analysis and synthesis of morphs between gait styles [31]. First,
recordings of prototypical performances are brought into spatio-temporal cor-
respondence. Then, new trajectories can be described as spatio-temporal
blends between prototypes. The underlying assumption is that a clearly

6

deﬁned prototype can be obtained for each desired style. In our case, these
styles would be the possible error patterns in a motor performance. However,
in the context of motor learning, movements often contain a combination of
diﬀerent error patterns and prerecorded single prototypical errors do not
work equally well for diﬀerent subjects.

A related approach has been proposed by Min and Chai [32]: Their model,
called Motion Graphs++, describes human movements by (a) discrete struc-
tural variations that deﬁne the motor action together with (b) continuous
variations that capture the movement style. Style variations are represented
using Principal Component Analysis (PCA) together with a Mixture of Gaus-
sians. MotionGraphs++ are powerful as they do not need an isolated demon-
stration of each prototype. However, if a targeted variation in style is not
covered by the PC dimensions, the model cannot detect this style pattern.
In the case of typical error patterns in motor performances, the diﬀerences
between users who perform the same error may be relatively big, whereas
the diﬀerence between error patterns within a user can be very subtle. Thus,
MotionGraphs++ would rather encode the inter-individual diﬀerences than
the characteristics of the error patterns.

Finally, the classiﬁcation of errors in motor performances is a special case
of time series classiﬁcation, for which several machine learning algorithms
have been proposed. Ground-breaking work was performed by Wilson and
Bobick, who used hidden Markov models (HMM) for the recognition of ges-
tures [33]. Other methods are based on decision trees [34], SVMs [35], or
Multi-Layer Perceptrons (MLP) [36]. Dynamic Time Warping (DTW) is
usually used to temporally align two recorded trajectories. As a pseudo-
metric combined with a subsequent classiﬁcation, DTW has a highly posi-
tive impact on motion classiﬁcation [37, 38, 21]. Xi et al. provide an exten-
sive review comparing a large set of available classiﬁcation methods, such as
HMMs, MLPs, and decision trees on time series data [21]. They show that
no tested classiﬁer is able to beat a combination of DTW and 1-Nearest-
Neighbor (1NN-DTW), which basically compares the query trajectory to
each available training trajectory using DTW as distance measure. Then the
most similar training trajectory is used to predict the label of the query tra-
jectory. The superiority of this approach in comparison with nine classiﬁers,
including Random Forests, SVM, Bayes Networks, et cetera, is supported by
work from Bagnall and Lines [22]. Likewise, Yurtman and Barshan achieved
good classiﬁcation results using a method similar to 1NN-DTW, which, how-
ever, was limited to simple movement patterns and was not evaluated with
respect to generalization to movements of other persons [30].

To sum up, the approaches discussed in this section suﬀer from a number
of limitations that prevent their use for real-time coaching of human motor

7

performances. We aim to go beyond this by developing a classiﬁcation ap-
proach that can classify subtle errors in a complex motor action with high
accuracy, works on a small or unbalanced dataset, achieves good generaliza-
tion over diﬀerent users, and provides its results very quickly and already
after relevant parts of the performance have been observed. We will base our
approach on knowledge from Sports Science about which errors are partic-
ularly relevant, and we present an approach that determines discriminatory
features of these errors and then realizes classiﬁers with the desired proper-
ties. We will take 1NN-DTW as a baseline in evaluating them.

3 Domain and Dataset

Sports coaches and sports scientists have developed coaching strategies to
address speciﬁc error patterns during a coaching session. Before developing
a VR coaching system, and to enable it to detect those errors automatically,
it is important to identify relevant error patterns along with corresponding
feedback strategies for each motor action of interest. To this end, we ana-
lyzed 21 video recordings of real-world squat coaching sessions. A part of
these data comes from the corpus described in [39]; additional other videos
were recorded in our lab. We used the videos together with information from
Sports Scientists as well as literature (e.g. [40]) to compile a list of 21 rel-
evant error patterns. For instance, one error pattern is an incorrect weight
distribution (depicted in Figure 2), which happens if the coachee shifts major
parts of the body weight too much to the front.

Motion data was recorded using an OptiTrack motion capture system,
which consists of ten Prime 13W cameras. Passive markers were mostly at-
tached to a customized motion capture suit; markers at the arms and the
hands were directly attached to the subjects’ skin (see Figure 3(a)). The
motion capture system outputs kinematic features for 19 joints (see Fig-
ure 3(b)) per frame at 120 Hz. In our representation, each frame consists of
k joint rotations as well as k joint positions (with k = 19). Joint rotations are
represented as quaternions q1, . . . , qk. Each quaternion denotes the rotation
of a joint with respect to its parent. The root rotation q1 describes to rota-
tion of the root with respect to its rotation at the beginning of the movement.
As root joint, we use the hips. The joint positions are represented by vectors
t1, . . . , tk ∈ R3. Each denotes the y- component of the translation (height)
of the joint as well as the translation relative to the x- and z- position of
the root joint at the beginning of the movement, after removing the subjects
orientation at the beginning of the movement. Further we additionally use
joint angles as Euler angles, calculated from the quaternion representation,

8

Figure 2: Squat performed with error pattern “incorrect weight distribution”.

which correspond to ﬂection/extension, abduction/adduction and twist of
the corresponding joint.

We asked 49 subjects to perform squats inside the capture volume. Up
to two squats per participant were annotated by an expert for the presence
of any of the error patterns. The expert had to add conﬁdence and intensity
ratings for each decision. These ratings were combined into a score in the
interval [0, 1] by averaging. Only ratings with a score above 0.5 were used
for the experiment. Trajectories which contained severe errors caused by the
motion capture system (e.g. due to missing markers), were excluded. The
ﬁnal training data set consisted of N = 95 squat movements coming from
49 subjects. We selected the error patterns that appeared with a suﬃcient
frequency (at least 15 positive and negative examples) for training. The
ten resulting patterns and their frequency in the training data are listed in
Table 1.

4 Classiﬁcation Algorithm

The combination of Dynamic Time Warping and 1-Nearest-Neighbor (1NN-
DTW) is one of the most successful classiﬁers for time series classiﬁcation [21,
22]. Thus it will serve as our baseline. In the following, we ﬁrst report how
we evaluate classiﬁer performance. Then we describe the 1NN-DTW baseline
approach and carve out its drawbacks for motor performance analysis in
interactive coaching sessions. Then, we develop classiﬁers to eliminate or
mitigate its weaknesses step by step. Finally, we verify that our approach
is suitable for error analysis of human motor performances in the context of
interactive VR coaching sessions.

9

(a) 41 Markers placed on the
subject’s body.

(b) Skeleton reconstructed from the
41 markers. We use the hips as root
joint.

Figure 3: Marker setup and reconstructed skeleton representation.

Table 1: Possible error patterns in the execution of a complex squat motor
action, selected based on their relevance as well as frequency and saliency in
our motion data (rated by sports experts).

Performance Error Pattern

arched neck
feet distance not suﬃcient
hips do not initiate movement
hollow back
incorrect weight distribution
knees tremble sideways
legs extended at end
not symmetric
too deep
wrong dynamics

#Erroneous
Executions
33
45
23
34
51
23
42
17
51
61

#Correct
Executions
29
33
51
42
16
33
38
46
34
27

10

4.1 Evaluation Procedure

Motor actions in sports or rehabilitation training often exhibit large inter-
subject variation [13]. Consequently, it is important to ensure that classiﬁers
are tested on data from persons whose performances are not included in the
training data. This hypothesis is experimentally supported by Taylor et al.,
who measure a huge diﬀerence in classiﬁer scores when testing on samples
from participants included in the training set, as compared to samples from
participants who were not included in the training data [24]. We made sure
that for the results described in the following, no data from subjects who
provided a recording to the training set is contained in the test set. We
applied 5-fold cross validation under this constraint for each error pattern.
In each fold, we aimed at achieving a similar proportion of positive and
negative labels as in the overall data set. For our experiments, the variables
of interest are the quality of the classiﬁcation and the time needed for the
classiﬁcation of a single query trajectory.

To investigate the quality of a classiﬁcation, diﬀerent types of scores can
be used. We report the accuracy of the described classiﬁer, deﬁned as the
number of correctly classiﬁed samples weighted by the overall number of
samples:

acc =

#TP + #TN
#P + #N

.

#TP is the number of true positives and #TN the number of true negatives.
#P is the overall number of positive examples and #N the overall number of
negative examples in the training data. Additionally, at the end of Section 4,
we provide plots for F1 scores, which is the harmonic mean of precision and
recall of the classiﬁer:

F 1 =

2#TP
2#TP + #FP + #FN

.

Here, #FP is the number of false positives, and #FN the number of false neg-
atives. All measured scores and standard deviations for the cross validation
folds can be found in the supplementary online material.

In addition to the quality of classiﬁcation, we report information on the
time each algorithm needs to classify a new query trajectory. As DTW is an
essential part for each of the proposed algorithms, we report the time that is
approximately needed for a DTW without any parallelization. Furthermore,
to be able to compare the algorithms that only have to perform one DTW
per query, we report the average time per query needed for the classiﬁcation
of a single error pattern. All experiments were conducted on a machine with
Intel Xeon CPU E5-1620 3.6 Ghz.

11

4.2 Baseline: 1NN-DTW

As described above, we take as baseline one of the most successful classiﬁca-
tion algorithms for time series: 1-Nearest-Neighbor as classiﬁcation algorithm
together with Dynamic Time Warping as distance measure (1NN-DTW). For
an input query, 1NN searches for the data point that is most similar to the
input. Then it returns the classiﬁcation label of this nearest neighbor in the
training set. The underlying assumption is that data points that lie nearby
belong to the same class. To determine which points lie nearby, a frame-
wise comparison is problematic in time series such as motion trajectories. If
the trajectories would be compared simply frame-to-frame, results would be
highly distorted: Even if the movement is performed completely in the same
way in space, but with a slight temporal oﬀset, this measure would report a
very high distance, whereas if a movement is performed with similar timing
but diﬀerent postures (e.g. a slightly weaker movement of some joints), the
distance would be very low. Dynamic Time Warping (DTW) is typically
used to solve this problem as it establishes a frame-to-frame correspondence
between two trajectories by warping in time and then allows to determine
the distance between them.

We implemented 1NN-DTW as follows. Given two trajectories T1 and
T2, consisting of n and m frames, respectively, we use DTW to calculate
the optimal match between them [41]. First, a n × m local cost matrix M is
constructed. Each element M(i, j) of this matrix corresponds to the distance
between the postures T1(i) and T2(j). This distance is deﬁned as the sum of
the quaternion distances of the corresponding joints. As quaternion distance,
we use the inner product as evaluated by Huynh [42]. Thus, each element in
the matrix M is calculated as follows:

M(i, j) =

k
(cid:88)

d=1

(1 − |qi,dqj,d|).

To establish a frame-to-frame correspondence, an optimal path through M
from M(1, 1) to M(n, m) is determined based on dynamic programming. The
distance between the two trajectories T1, T2 can now be deﬁned as mean value
of the M(i, j) on the warping path. Comparison of classiﬁcation results using
diﬀerent features, such as joint angles or joint positions, yielded no signiﬁcant
improvements in the 1NN step. Results of these comparisons can be found
in the supplementary online material.

We applied the above procedure to the relevant error patterns: For each
query trajectory Tq we compute DTW to each training trajectory T1, . . . , TN .
Next, the trajectory with the smallest DTW distance to Tq which is annotated
with respect to the error pattern, is selected. The label of this trajectory is

12

Figure 4: Accuracy results for classiﬁer 1NN-DTW.

then returned for Tq. As shown in Figure 4, 1NN-DTW is able to detect
some of the error patterns with accuracies of more than 60 percent. This
is comparable to the results by Giggins et al. [29] and O’Reilly et al. [27]
for simple rehabilitation exercises. The computational cost of DTW are
quadratic with respect to the lengths of the trajectories.
In our setting,
a single DTW takes about 55 ms on average per trajectory. On average,
the trajectories used for this experiment consist of 500 frames. For each
trajectory to be classiﬁed, DTW has to be calculated with each of our training
trajectories (N = 95). This leads to an average time of over 5 seconds to
calculate the DTWs necessary for one single query trajectory. Thus, even
if the classiﬁcation led to optimal results, it would not be applicable in an
interactive setting.

4.3 Reducing Alignment Cost: 1NN-RefDTW

To reduce computational cost, we can exploit the general similarity between
the trajectories that all represent the same motor action (squat). We can
thus warp all training trajectories to a normalized timing in an oﬄine pre-
processing step. This is done by selecting one reference trajectory Tr and
warping all trajectories to its timing. If Tr it is a very short trajectory (i.e. a
fast movement), information from the original trajectories gets lost due to the
warping. Thus, as reference trajectory, we select the longest trajectory that
contains all available movement segments. The warping exploits the corre-
spondences found by DTW. For each frame t of Tr, the corresponding frame
in the to-be-warped trajectory is selected according to the correspondence
path from DTW.

For classiﬁcation, we perform 1NN using the mean of the frame-by-frame

13

distance between the warped query trajectory Tq and the warped training
trajectories as distance measure:

dist(Tq, Ti) =

1
|Tr|

|Tr|
(cid:88)

k
(cid:88)

t=1

d=1

(1 − |qq

t,dqi

t,d|).

qq
t,d is the quaternion describing the d-th joint in the t-th frame of the warped
query trajectory, whereas qi
t,d refers to the corresponding joint of the training
trajectory i.
|Tr| is the length of the reference trajectory. In our case, we
have |Tr| = 902. For each classiﬁcation, the calculation of one DTW for Tq is
suﬃcient: All comparisons between warped query and training trajectories
can now be done frame-by-frame with computational cost linear in |Tr|. In
our setting, this process needs on average 25 ms per trajectory. We call the
resulting algorithm 1NN-RefDTW and expect it to have similar classiﬁcation
performance as 1NN-DTW while incurring reduced computational cost.

Figure 5 summarizes the classiﬁcation results of 1NN-RefDTW. The clas-
siﬁcation accuracy is comparable to 1NN-DTW, with some error patterns
detected slightly better. Still, the classiﬁcation accuracy is insuﬃcient for
being applied in a coaching scenario. Concerning the computational costs,
the new classiﬁer only needs one DTW per query trajectory. Warping a
training trajectory into the timing of the reference trajectory needs on av-
erage 90 ms. Additionally, the frame-to-frame distance between the warped
query and the training trajectories has to be calculated. The computational
eﬀort for classiﬁcation is thus |T |2 + N |T | instead of N |T |2 if all trajectories
are of size |T |. In our setting, the classiﬁcation process for N = 95 needs
approximately 2.5 s. However, the time needed for classiﬁcation still depends
on the number of trajectories in the data set, which is problematic for large
training sets.

4.4 Separate Classiﬁcation of Error Patterns: RefDTW-

SVM

Errors during the performance of motor actions can occur in many diﬀerent
combinations. 1NN-DTW and its extension 1NN-RefDTW only return the
whole set of labels of the nearest neighbor as classiﬁcation for each query.
Combinations of error patterns that do not exist in the training data cannot
be detected by the algorithm, unless the training data contains all possible
combinations of error patterns. As this is typically not the case, it is desir-
able to learn a separate classiﬁer for each pattern. Furthermore, we would
like to provide a classiﬁer with even more reduced computational cost, ide-
ally independent of the size of the training set. Both goals can be achieved

14

Figure 5: Accuracy results for classiﬁer 1NN-RefDTW.

using Support Vector Machines (SVM), one of the most successful machine
learning algorithms in general [43]. An SVM learns a decision hyperplane
which maximizes the margin between two classes [44]. For classiﬁcation, the
SVM only has to determine on which side of a hyperplane an input query
lies. In our case, we can learn a classiﬁer for each error pattern, consider-
ing each training trajectory as one data point with the label pattern occurs
or pattern does not occur. To use the SVM for training, we ﬁrst warp all
training trajectories to the timing of the reference trajectory. Then, for each
warped training trajectory, a feature vector is constructed and standardized
via scaling to unit variance and removing the mean. This vector consists of
all joint angles in Euler angle representation as well as the joint positions
for each frame in the warped trajectory. The feature vector thus has size
6|Tr|k, where |Tr| is the number of frames of the reference trajectory and k
the number of joints. In our case, we have |Tr| = 902 and k = 19. Again, we
tested diﬀerent features and found that using joint angles in Euler angle rep-
resentation together with joint positions leads to good classiﬁcation results
(cf. supplementary online material).

We trained one two-class SVM for each error pattern on the feature vec-
tors obtained from the warped trajectories. In our experiments, a non-linear
RBF kernel was unable to beat the linear kernel, thus we decided to use
SVMs with linear kernel (cf. supplementary online material). We use the
standard SVM implementation from scikit-learn [45] in version 0.17.1. For
classiﬁcation, a query trajectory is ﬁrst warped to the timing of the refer-
ence trajectory. Then the feature vector is constructed and classiﬁed by the
trained SVMs. The resulting algorithm is called RefDTW-SVM.

Results can be seen in Figure 6: Now, three of the error patterns are
classiﬁed with an accuracy greater than 80 %. Also, most of the other pat-

15

Figure 6: Accuracy results for classiﬁer RefDTW-SVM using joint angles as
well as joint positions as features.

terns reach higher results than with the previous 1NN approaches. However,
the overall classiﬁcation performance is still not suﬃcient. One explanation
is the immense number of features per trajectory. We will approach this
problem in the next section. Concerning the time needed for classiﬁcation,
for each error pattern, the classiﬁer now only needs a mean of 9.7 ms. Before
starting the classiﬁcation of error patterns, one DTW has to be calculated,
which takes about 90 ms as described in Section 4.3.

4.5 Reducing Features: RefDTW-RF-SVM

Our feature vector of size 6|Tr|k comprises many irrelevant features: For in-
stance, we intuitively do not consider the rotation of the wrist to be related
to having a straight back. The SVM classiﬁer might suﬀer from this high
number of irrelevant features as shown by Weston et al. [46] and Chen and
Lin [47]. According to their results, we assume a robust feature selection
method to be able to help improving classiﬁer performance. To this end, we
use Random Forests (RF) for feature selection [48, 47]. Random Forests per-
form feature selection as well as classiﬁcation. They are based on Decision
Trees, which learn a hierarchical set of rules to distinguish between classes.
Thereby, they implicitly weight the importance of each feature. Random
Forests extend Decision Trees and reduce their susceptibility to overﬁtting
via training multiple randomized Decision Trees and averaging them. This
leads to an improved accuracy of the estimator as well as a reduced overﬁt-
ting [49]. See [50] for an in-depth analysis of the statistical properties and
the mathematical background of Random Forests.

Direct classiﬁcation using Random Forests leads to high computational

16

Figure 7: Accuracy results for classiﬁer RefDTW-RF-SVM.

cost, as all trees in the forest must be considered. We are interested in a model
that provides good classiﬁcation performance with minimal time for classi-
ﬁcation. As the SVM-based classiﬁcation presented in Section 4.4 provides
almost acceptable results in real-time, we boosted it with a Random-Forest-
based feature selection: We trained one Random Forest for each error pat-
tern. The Random Forests are trained on the same feature vectors extracted
from the warped trajectories as described for RefDTW-SVM. To train the
trees, we used the Gini impurity as criterion to optimize the decision rules.
As break condition for growing, we require all leaves to contain only a single
class or less than two samples. We observed a number of 200 trees to lead to
good results.

The idea of our new algorithm RefDTW-RF-SVM is to use the Random
Forests only for feature selection during training: For each error pattern, the
Random Forest assigns an importance value to each feature via averaging the
relative importance of the feature in each decision tree. Following an idea of
Bi et al. [51], we add 20 random features to each frame before performing
the feature weighting by Random Forests. The average of their importance
values is used as threshold to discard irrelevant features. This leads to 580
features on average per error pattern (from originally around 100,000 fea-
tures) which we use as input for the SVMs. We trained the SVMs with the
same parameters as for RefDTW-SVM. For the Decision Trees as well as the
Random Forests, we use the the scikit-learn implementation [45].

Figure 7 shows the resulting classiﬁcation accuracy, which outperforms
RefDTW-SVM for nearly all patterns. Five patterns reach accuracies higher
than 80 percent. Concerning the classiﬁcation time, only 0.1 ms is needed in
addition to the DTW step. This leads to a total time to classify all patterns
after DTW of around 1 ms.

17

4.6 Getting Classiﬁcation Results Earlier: Segment-

based RefDTW-RF-SVM

RefDTW-RF-SVM and all other approaches presented before only allow clas-
siﬁcation after the whole motor action is completed, as the full query trajec-
tory needs to be warped by DTW. However, some error patterns are limited
to parts of the motor action. For instance, the desired depth of the squat
is relevant only at the deepest point of the motion. This information can
be exploited by using the concept of movement segments: Each performance
of a motor action can be considered a combination of simpler sequential
sub-actions. These movement segments are homogeneous and functionally
meaningful parts of a more complex movement. For the squat, we deﬁne the
movement segments preparation, going down, is down, going up, and wrap
up.

The underlying idea of a segment-based RefDTW-RF-SVM is to simply
apply RefDTW-RF-SVM to a single movement segment once it has been
completed. The segmentation is done based on a state machine which splits
the trajectory at boundary points (state changes) where important joints
like the knees start or stop moving. This is similar to the approach proposed
in [18]. The segmentation takes less than 1 ms per frame.

As shown in Figure 8, the classiﬁcation results are comparable to the
results obtained with RefDTW-RF-SVM, which however works on the com-
plete trajectories. For each pattern, the maximum accuracy per movement
segment is reported. Seven error patterns are classiﬁed with an accuracy
of above 80 percent. We performed the classiﬁcation with the automatically
segmented trajectories as well as with manually segmented trajectories. Both
led to similar results. Concerning the time needed for classiﬁcation, as the
trajectories for the movement segments are shorter than for the whole mo-
tor actions, DTW only needs about 10 ms per movement segment instead
of about 90 ms for a whole trajectory. The classiﬁcation step itself using
Segment-based RefDTW-RF-SVM needs around 0.1 ms. Overall, an error
pattern is classiﬁed on average around 10.1 ms after the movement segment
of interest has been performed. As the DTW, which is responsible for around
10 ms of this time, has to be performed only once, we now need approximately
11.0 ms to classify each of our ten error patterns.

4.7 Summary of the Results

All algorithms except from 1NN-RefDTW were able to beat the classiﬁca-
tion performance of our baseline 1NN-DTW. The best classiﬁcation quality
is achieved by RefDTW-RF-SVM and Segment-based RefDTW-RF-SVM.

18

Figure 8: Accuracy of classiﬁer Segment-based RefDTW-RF-SVM.

Most error patterns, including the most frequent ones “wrong dynamics”,
“incorrect weight distribution”, and “too deep”, can all be detected with
an accuracy above 80 %. The patterns “incorrect weight distribution” and
“feet distance not suﬃcient” are even nearly perfectly classiﬁed. Only the
error patterns with the fewest occurances in our training data, namely “not
symmetric” (17 occurances) and “knees tremble sideways” (23 occurances)
are classiﬁed with an accuracy below 70 %. Additionally, Figure 9 reports
the F1 score of all presented approaches. Concerning the F1 score, the data
looks similar: Only four patterns are classiﬁed with a score below 0.8. This
enables our system to make use of various feedback strategies (cf. video in
the supplementary online material). The exact scores and their standard
deviation in the 5-fold cross validation can be found in the supplementary
online material. All algorithms, except from Segment-based RefDTW-RF-
SVM, require the calculation of DTW on the whole trajectory, which takes
on average about 90 ms. Segment-based RefDTW-RF-SVM only needs single
movement segments to be warped, which can be performed in around 10 ms.
Table 2 summarizes the time needed to classify a query trajectory with re-
spect to the ten error patterns. Segment-based RefDTW-RF-SVM is clearly
the fastest classiﬁer as the classiﬁcation step itself only needs 1 ms and the
result is potentially available already during the execution of the movement,
directly after a single movement segment has been completed.

5 Discussion and Conclusion

We have presented steps to yield a novel classiﬁer for a fast detection of a
variety of error patterns in movement trajectories, as required for interactive

19

Figure 9: F1 Score of all classiﬁers.

Table 2: Time needed to classify a query trajectory with respect to all ten er-
ror patterns, including the time needed for DTW. The reference-based DTW
takes 89 ms for a complete trajectory and on average 10 ms on movement
segments. For the 1NN-based approaches, all 95 training trajectories were
used for classiﬁcation.

1NN-
DTW

1NN-
RefDTW

RefDTW-
SVM

RefDTW-
RF-
SVM

Segment-
based
RefDTW-
RF-SVM

Time in ms > 5000 ms

approx.
2500 ms

187 ms

90 ms

11 ms

20

coaching applications, e.g., in virtual reality environments. We evaluated
all algorithms on a complex motor task involving a high number of relevant
error patterns. All scores were measured using cross validation, in a setup
where data from one single subject is not allowed to be distributed over mul-
tiple folds. Thus our results capture the algorithms’ abilities to generalize
across subjects. The resulting algorithm, Segment-based RefDTW-RF-SVM,
provides the best balance between quality of classiﬁcation and computation
time: Besides being the fastest classiﬁer in our set, it is among the two
classiﬁers with the highest accuracy scores. Nearly all error patterns, espe-
cially the most frequent ones, are classiﬁed with accuracies above 80 %. In
contrast to many related approaches, this classiﬁer is able to work in inter-
active setups as shown in our demonstration of how online verbal feedback
can be triggered through our automatic error analysis (see the video in the
supplementary material).

Overall, from the evaluation of each of the diﬀerent steps taken in the
previous section, we can derive the following conclusions about automatic
error analysis of human motor performances:

1. If the data consists of structurally similar movements such as the same
type of motor actions, it is suﬃcient to temporally align all trajectories
via performing DTW with one reference trajectory. Thereby we were
able to reduce the computational eﬀort while keeping the quality of the
classiﬁcation in a similar range for nearly all error patterns.

2. For the classiﬁcation of multiple error patterns, independent classiﬁers
should be trained. A nearest neighbor-based classiﬁcation, which only
copies all labels from the nearest neighbor of a query, is insuﬃcient
especially for small training data sets. Learning independent classiﬁers
for all error patterns increased the classiﬁer performance for nearly all
examined error patterns.

3. Random Forests help to select relevant features from high-dimensional
input trajectories, even if the number of training examples is small.
Such a preprocessing step signiﬁcantly improves the performance of
SVM-based classiﬁcation. This holds especially for error patterns which
are characterized only by very few features such as the “hollow back”.

4. By classifying data from appropriate movement segments, instead of
whole trajectories, the time needed for classiﬁcation can be drastically
minimized while keeping the classiﬁcation performance high.

Note that even though general classiﬁcation performance of our algorithm
is high, the performance is not convincing speciﬁcally for two error patterns:

21

The pattern “not symmetric” is detected only with F1 scores around 0.43.
This error pattern is annotated in trajectories where some joints are not
symmetric between the left and the right side of the body. As this can occur
in almost all joints and all phases of the movement, the feature selection
cannot easily spot those features of interest that are relevant. Further, the
classiﬁer has no possibility to infer information on the relationship between
multiple joints with respect to symmetry. For the other problematic pattern,
“knees tremble sideways”, our best classiﬁer only achieves an F1 score of
0.51. This pattern describes a very subtle movement. Also, it can spread
temporarily: Exactly the frames that are problematic for subject A can be
correct for subject B and vice versa. Finally, the number of trembles can be
diﬀerent for diﬀerent subjects which also makes classiﬁcation harder. One
way to deal with these two problematic patterns is the construction of more
complex higher-level features. A higher-level feature could, for instance, de-
scribe the relationship between certain parts of the body or the movement of
the athlete’s center of mass. The automatic generation and inclusion of such
higher-level features is a promising ﬁeld of future work. Another limitation
is that temporal properties of the movements are not covered directly by
our algorithm. For motor actions where the user’s timing has an inﬂuence
on whether certain errors occur, temporal information could be included via
adding velocity as well as information on the warping function extracted from
DTW.

6 Acknowledgements

This research was supported by the Cluster of Excellence Cognitive Interac-
tion Technology CITEC (EXC 277) at Bielefeld University, which is funded
by the German Research Foundation (DFG).

References

[1] Matthew Kyan, Guoyu Sun, Haiyan Li, Ling Zhong, Paisarn Munee-
sawang, Nan Dong, Bruce Elder, and Ling Guan. An approach to ballet
dance training through ms kinect and visualization in a cave virtual re-
ality environment. ACM Transactions on Intelligent Systems and Tech-
nology (TIST), 6(2):23, 2015.

[2] Iwan de Kok, Julian Hough, Felix H¨ulsmann, Mario Botsch, David
Schlangen, and Stefan Kopp. A multimodal system for real-time action

22

instruction in motor skill learning. In Proceedings of the International
Conference on Multimodal Interaction, pages 355–362. ACM, 2015.

[3] Roland Sigrist, Georg Rauter, Laura Marchal-Crespo, Robert Riener,
and Peter Wolf. Soniﬁcation and haptic feedback in addition to visual
feedback enhances complex motor task learning. Experimental brain
research, 233(3):909–925, 2015.

[4] Jacky CP Chan, Howard Leung, Jeﬀ KT Tang, and Taku Komura. A
virtual reality dance training system using motion capture technology.
IEEE Transactions on Learning Technologies, 4(2):187–195, 2011.

[5] Dominik Endres, Enrico Chiovetto, and Martin A Giese. Bayesian ap-
proaches for learning of primitive-based compact representations of com-
In Dance Notations and Robot Motion, pages
plex human activities.
117–137. Springer, 2016.

[6] Oonagh Giggins, Kevin T Sweeney, and Brian Caulﬁeld. The use of
inertial sensors for the classiﬁcation of rehabilitation exercises. In An-
nual International Conference of the IEEE Engineering in Medicine and
Biology Society, pages 2965–2968. IEEE, 2014.

[7] Hsieh-Ping Chen, Hsieh-Chung Chen, Kai-Chun Liu, and Chia-Tai
Chan. Online segmentation with multi-layer svm for knee osteoarthri-
tis rehabilitation monitoring. In Wearable and Implantable Body Sensor
Networks (BSN), International Conference on, pages 55–60. IEEE, 2016.

[8] Amin Ahmadi, Edmond Mitchell, Chris Richter, Francois Destelle, Marc
Gowing, Noel E O’Connor, and Kieran Moran. Toward automatic ac-
tivity classiﬁcation and movement assessment during a sports training
session. IEEE Internet of Things Journal, 2(1):23–32, 2015.

[9] Terry Taewoong Um, Vahid Babakeshizadeh, and Dana Kulic. Exercise
motion classiﬁcation from large-scale wearable sensor data using convo-
lutional neural networks. arXiv preprint arXiv:1610.07031, 2016.

[10] Babak Hosseini and Barbara Hammer. Eﬃcient metric learning for
the analysis of motion data. In Data Science and Advanced Analytics
(DSAA), 2015. 36678 2015. IEEE International Conference on, pages
1–10. IEEE, 2015.

[11] Huey-Min Sun. The assessment of learning performance using dynamic
time warping algorithm for the virtual reality of full-body motion sensing
control. In Human-Computer Interaction (SIGHCI), 2016.

23

[12] R. Houmanfar, M. Karg, and D. Kuli´c. Movement analysis of rehabili-
tation exercises: Distance metrics for measuring patient progress. IEEE
Systems Journal, 10(3):1014–1025, 2016. ISSN 1932-8184.

[13] Ernst-Joachim Hossner, Frank Schiebl, and Ulrich G¨ohner. A functional
approach to movement analysis and error identiﬁcation in sports and
physical education. Frontiers in Psychology, 6:1339, 2015.

[14] Roland Sigrist, Georg Rauter, Robert Riener, and Peter Wolf. Aug-
mented visual, auditory, haptic, and multimodal feedback in motor
learning: a review. Psychonomic bulletin & review, 20(1):21–53, 2013.

[15] Dan Liu and Emanuel Todorov. Evidence for the ﬂexible sensorimo-
tor strategies predicted by optimal feedback control. The Journal of
Neuroscience, 27(35):9354–9368, 2007.

[16] Roger Bartlett. Introduction to sports biomechanics: Analysing human

movement patterns. Routledge, 2007.

[17] Kyle Rector, Cynthia L Bennett, and Julie A Kientz. Eyes-free yoga: an
exergame using depth cameras for blind & low vision exercise. In Pro-
ceedings of the International ACM SIGACCESS Conference on Com-
puters and Accessibility, pages 12–19, 2013.

[18] Felix H¨ulsmann, Cornelia Frank, Thomas Schack, Stefan Kopp, and
Mario Botsch. Multi-level analysis of motor actions as a basis for ef-
fective coaching in virtual reality. In Proceedings of the International
Symposium on Computer Science in Sports (ISCSS), pages 211–214.
Springer, 2016.

[19] Robert Bailey, James Selfe, and Jim Richards. The single leg squat test
in the assessment of musculoskeletal function: a review. Physiotherapy
Practice and Research, 32(2):18–23, 2011.

[20] Rafael F Escamilla. Knee biomechanics of the dynamic squat exercise.
Medicine and science in sports and exercise, 33(1):127–141, 2001.

[21] Xiaopeng Xi, Eamonn Keogh, Christian Shelton, Li Wei, and Choti-
rat Ann Ratanamahatana. Fast time series classiﬁcation using numeros-
ity reduction.
In Proceedings of the 23rd international conference on
Machine learning, pages 1033–1040. ACM, 2006.

[22] Anthony Bagnall and Jason Lines. An experimental evaluation of nearest
neighbour time series classiﬁcation. arXiv preprint arXiv:1406.4757,
2014.

24

[23] Thomas Waltemate, Felix H¨ulsmann, Thies Pfeiﬀer, Stefan Kopp, and
Mario Botsch. Realizing a low-latency virtual reality environment for
motor learning. In Proceedings of the 21st ACM Symposium on Virtual
Reality Software and Technology, pages 139–147, 2015.

[24] Portia E Taylor, Gustavo JM Almeida, Takeo Kanade, and Jessica K
Hodgins. Classifying human motion quality for knee osteoarthritis us-
In Annual International Conference of the IEEE
ing accelerometers.
Engineering in Medicine and Biology, pages 339–343, 2010.

[25] Rezvan Kianifar, Alex Lee, Sachin Raina, and Dana Kuli´c. Classiﬁcation
of squat quality with inertial measurement units in the single leg squat
mobility test. In Engineering in Medicine and Biology Society (EMBC),
Annual International Conference of the, pages 6273–6276. IEEE, 2016.

[26] Hui Zou, Trevor Hastie, and Robert Tibshirani. Sparse principal com-
ponent analysis. Journal of computational and graphical statistics, 15
(2):265–286, 2006.

[27] Martin O’Reilly, Darragh Whelan, Charalampos Chanialidis, Nial Friel,
Eamonn Delahunt, Tom´as Ward, and Brian Caulﬁeld. Evaluating squat
performance with a single inertial measurement unit. In International
Conference on Wearable and Implantable Body Sensor Networks (BSN),
pages 1–6. IEEE, 2015.

[28] Oonagh Giggins, Daniel Kelly, and Brian Caulﬁeld. Evaluating rehabil-
itation exercise performance using a single inertial measurement unit.
In Proceedings of the International Conference on Pervasive Computing
Technologies for Healthcare, pages 49–56, 2013.

[29] Oonagh M Giggins, Kevin T Sweeney, and Brian Caulﬁeld. Rehabili-
tation exercise assessment using inertial sensors: a cross-sectional ana-
lytical study. Journal of Neuroengineering and Rehabilitation, 11(1):1,
2014.

[30] Aras Yurtman and Billur Barshan. Automated evaluation of physical
therapy exercises using multi-template dynamic time warping on wear-
able sensor signals. Computer methods and programs in biomedicine,
117(2):189–207, 2014.

[31] Martin A Giese and Tomaso Poggio. Morphable models for the analysis
International Journal of

and synthesis of complex motion patterns.
Computer Vision, 38(1):59–73, 2000.

25

[32] Jianyuan Min and Jinxiang Chai. Motion graphs++: a compact gener-
ative model for semantic motion analysis and synthesis. ACM Transac-
tions on Graphics (TOG), 31(6):153, 2012.

[33] Andrew D Wilson and Aaron F Bobick. Parametric hidden markov
models for gesture recognition. IEEE transactions on pattern analysis
and machine intelligence, 21(9):884–900, 1999.

[34] Juan J Rodr´ıguez and Carlos J Alonso.

Interval and dynamic time
warping-based decision trees. In Proceedings of the ACM symposium on
Applied computing, pages 548–552, 2004.

[35] Yi Wu and Edward Y Chang. Distance-function design and fusion for se-
quence data. In Proceedings of the thirteenth ACM international confer-
ence on Information and knowledge management, pages 324–333, 2004.

[36] Alex Nanopoulos, Rob Alcock, and Yannis Manolopoulos. Feature-based
International Journal of Computer

classiﬁcation of time-series data.
Research, 10(3):49–61, 2001.

[37] Kevin Adistambha, Christian H Ritz, and Ian S Burnett. Motion classi-
ﬁcation using dynamic time warping. In Multimedia Signal Processing,
IEEE Workshop on, pages 622–627, 2008.

[38] Fran¸cois Petitjean, Germain Forestier, Geoﬀrey I Webb, Ann E Nichol-
son, Yanping Chen, and Eamonn Keogh. Dynamic time warping aver-
aging of time series allows faster and more accurate classiﬁcation. In
International Conference on Data Mining, pages 470–479. IEEE, 2014.

[39] Iwan de Kok, Julian Hough, Cornelia Frank, David Schlangen, and Ste-
fan Kopp. Dialogue structure of coaching sessions. In Proceedings of
the SemDial Workshop on the Semantics and Pragmatics of Dialogue
(DialWatt), pages 167–169, 2014.

[40] Micheal A Clark, Scott Lucett, and Brian G Sutton. NASM essentials
of personal ﬁtness training. Lippincott Williams & Wilkins, 2008.

[41] Hiroaki Sakoe and Seibi Chiba. Dynamic programming algorithm opti-
mization for spoken word recognition. IEEE transactions on acoustics,
speech, and signal processing, 26(1):43–49, 1978.

[42] Du Q Huynh. Metrics for 3d rotations: Comparison and analysis. Jour-

nal of Mathematical Imaging and Vision, 35(2):155–164, 2009.

26

[43] Manuel Fern´andez-Delgado, Eva Cernadas, Sen´en Barro, and Dinani
Amorim. Do we need hundreds of classiﬁers to solve real world classiﬁ-
cation problems. J. Mach. Learn. Res, 15(1):3133–3181, 2014.

[44] Christopher M. Bishop. Pattern Recognition and Machine Learning (In-
formation Science and Statistics). Springer-Verlag New York, Inc., Se-
caucus, NJ, USA, 2006. ISBN 0387310738.

[45] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion,
O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vander-
plas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duch-
esnay. Scikit-learn: Machine learning in Python. Journal of Machine
Learning Research, 12:2825–2830, 2011.

[46] Jason Weston, Sayan Mukherjee, Olivier Chapelle, Massimiliano Pon-
til, Tomaso Poggio, and Vladimir Vapnik. Feature selection for svms.
Advances in Neural Information Processing Systems (NIPS), 2000.

[47] Yi-Wei Chen and Chih-Jen Lin. Combining svms with various feature
selection strategies. In Isabelle Guyon, Masoud Nikravesh, Steve Gunn,
and Lotﬁ A. Zadeh, editors, Feature Extraction: Foundations and Ap-
plications, volume 207, chapter 12, pages 315–324. Springer Berlin Hei-
delberg, Berlin, Heidelberg, 2006. ISBN 978-3-540-35488-8.

[48] Robin Genuer, Jean-Michel Poggi, and Christine Tuleau-Malot. Vari-
able selection using random forests. Pattern Recognition Letters, 31(14):
2225–2236, 2010.

[49] Leo Breiman. Random forests. Machine learning, 45(1):5–32, 2001.

[50] G´erard Biau. Analysis of a random forests model. Journal of Machine

Learning Research, 13(Apr):1063–1095, 2012.

[51] Jinbo Bi, Kristin Bennett, Mark Embrechts, Curt Breneman, and
Minghu Song. Dimensionality reduction via sparse support vector ma-
chines. Journal of Machine Learning Research, 3(Mar):1229–1243, 2003.

27

A Supplementary Online Materials

A.1 Detailed Scores

Here, we report the measured classiﬁcation performance of all tested clas-
siﬁers with respect to accuracy (see Figure 11 and Table 3), F1 score (see
Table 4) and Receiver Operating Characteristics Area Under the Curve (ROC
AUC) (see Figure 10 and Table 5). ROC curves provide a plot which de-
scribes the relationship between recall and fall-out. The true positive rate is
plotted on the y axis, the false positive rate on the x axis. The higher the
curve, the better the classiﬁcation. The area under the curve (AUC) is thus
often used as score for classiﬁer performance as it provides the probability
to rank a randomly chosen positive instance higher than a randomly chosen
negative one. Thus the higher the result, the better the classiﬁer performs.
This section also contains results for the pure Random-Forest-based classiﬁ-
cation (RefDTW-RF). This, leads to a classiﬁcation performance in a similar
range to RefDTW-RF-SVM, but also to more computational eﬀort: We need
around 160 ms additional to the time needed for the DTW step to classify
all of our 10 error patterns even if the trees inside the Random Forests are
evaluated in parallel. All further components of the system, such as dia-
logue planning, Text-to-Speech, coaching animation, et cetera have to wait
this period of time until they can start planning the feedback corresponding
to the motion the trainee just performed in the virtual environment. Thus,
for RefDTW-RF-SVM, we only use the Random Forests for feature selection
during training to signiﬁcantly speed up the classiﬁcation time.

A.2 Comparison of Diﬀerent Feature Types

First, we compare the classiﬁcation results of the baseline 1NN-DTW when
using rotations as quaternions, as Euler angles or using joint positions. In
the nearest neighbor step, the euclidean distance between the warped frames
is used. All approaches lead to results in a similar range on average over all
error patterns (see Figure 12 and Figure 13).

Second, we compare the classiﬁcation results of our own ﬁnal classi-
ﬁer Segment-based RefDTW-RF-SVM with respect to diﬀerent feature sets.
The feature weighting using Random Forests on quaternions is implemented
component-wise. All quaternions with at least one feature weight above the
threshold are completely used for SVM classiﬁcation. For some error pat-
terns, we observe that the quality of the classiﬁcation complements each other
for joint angles and joint translations: Some patterns (such as “feet distance
not suﬃcient”) can be classiﬁed best based on the translations, others (such

28

Figure 10: ROC AUC Score of all classiﬁers.

as “hollow back”) are classiﬁed much better based on the angles. We thus
combine joint angles and joint translations which leads to a slight enhance-
ment of the overall performance. Here, we ﬁnally decide to use Euler angles
instead of quaternions for the sake of better interpretability of the selected
features and a slightly shorter feature vector. In general, all classiﬁers behave
similarly (see Figure 14 for the accuracies and Figure 15 for the F1 scores).

A.3 RFB Kernel vs. Linear Kernel in SVM

In this part, we compare the classiﬁcation performance of Segment-based
RefDTW-RF-SVM using a linear kernel compared to using a radial basis
function kernel. Results are in a similar range (see Figure 16 for the accu-
racies and Figure 17 for the F1 scores). We ﬁnally decide to use the linear
kernel for the sake of simplicity.

A.4

1NN-DTW Based on Movement Segments

Finally, we evaluated the performance of 1NN-DTW on movement segments
which leads to Segment-based 1NN-DTW. Here, the results are again worse
than for our own classiﬁer Segment-based RefDTW-RF-SVM (see Figure 18
for the accuracies and Figure 19 for the F1 scores).

29

Table 3: Classiﬁcation performance: Accuracy.

Accuracy
(SD)

1NN-
DTW

1NN-
RefDTW

RefDTW-
SVM

RefDTW-
RF

RefDTW-
RF-
SVM

arched neck

feet distance not
suﬃcient

hips do not initiate
movement

hollow back

incorrect weight dis-
tribution

knees tremble side-
ways

0.70
(0.09)

0.56
(0.11)

0.53
(0.15)

0.61
(0.06)

0.62
(0.20)

0.46
(0.07)

legs extended at end 0.62

not symmetric

too deep

wrong dynamics

(0.15)
0.56
(0.18)
0.47
(0.14)
0.65
(0.13)

0.63
(0.09)

0.98
(0.05)

0.72
(0.14)

0.71
(0.19)

0.86
(0.11)

0.51
(0.22)

0.61
(0.11)
0.68
(0.12)
0.78
(0.17)
0.88
(0.11)

0.73
(0.07)

0.94
(0.06)

0.84
(0.04)

0.95
(0.07)

0.94
(0.07)

0.49
(0.07)

0.93
(0.04)
0.70
(0.06)
0.87
(0.11)
0.93
(0.04)

0.70
(0.11)

0.95
(0.04)

0.78
(0.06)

0.91
(0.09)

0.94
(0.07)

0.55
(0.19)

0.76
(0.07)
0.71
(0.15)
0.85
(0.09)
0.91
(0.03)

0.66
(0.13)

0.56
(0.10)

0.59
(0.14)

0.59
(0.08)

0.57
(0.11)

0.57
(0.16)

0.62
(0.18)
0.55
(0.19)
0.48
(0.16)
0.65
(0.10)

30

Segment-
based
RefDTW-
RF-
SVM
0.71
(0.10)

0.98
(0.05)

0.81
(0.06)

0.92
(0.09)

1.00
(0.00)

0.57
(0.19)

0.90
(0.03)
0.67
(0.10)
0.81
(0.08)
0.88
(0.05)

Table 4: Classiﬁcation performance: F1 Score.

F1
(SD)

1NN-
DTW

1NN-
RefDTW

RefDTW-
SVM

RefDTW-
RF

RefDTW-
RF-
SVM

arched neck

feet distance not
suﬃcient

hips do not initiate
movement

hollow back

incorrect weight dis-
tribution

knees tremble side-
ways

0.70
(0.11)

0.63
(0.08)

0.16
(0.22)

0.58
(0.10)

0.73
(0.15)

0.31
(0.09)

legs extended at end 0.54

not symmetric

too deep

wrong dynamics

(0.18)
0.38
(0.20)
0.51
(0.13)
0.77
(0.08)

0.67
(0.08)

0.98
(0.04)

0.41
(0.31)

0.65
(0.24)

0.90
(0.07)

0.37
(0.31)

0.57
(0.21)
0.35
(0.23)
0.82
(0.14)
0.91
(0.08)

0.75
(0.06)

0.95
(0.05)

0.70
(0.07)

0.94
(0.09)

0.96
(0.05)

0.04
(0.09)

0.93
(0.04)
0.00
(0.00)
0.91
(0.08)
0.95
(0.03)

0.72
(0.08)

0.96
(0.03)

0.59
(0.16)

0.90
(0.11)

0.96
(0.05)

0.36
(0.26)

0.77
(0.07)
0.31
(0.27)
0.87
(0.08)
0.93
(0.02)

0.62
(0.19)

0.64
(0.11)

0.23
(0.14)

0.54
(0.10)

0.70
(0.08)

0.46
(0.21)

0.61
(0.20)
0.33
(0.23)
0.49
(0.17)
0.75
(0.07)

31

Segment-
based
RefDTW-
RF-
SVM
0.72
(0.07)

0.98
(0.04)

0.67
(0.07)

0.91
(0.11)

1.00
(0.00)

0.51
(0.22)

0.92
(0.02)
0.43
(0.13)
0.84
(0.10)
0.91
(0.04)

Table 5: Classiﬁcation performance: ROC AUC Score.

ROC AUC
(SD)

1NN-
DTW

1NN-
RefDTW

RefDTW-
SVM

RefDTW-
RF

RefDTW-
RF-
SVM

arched neck

feet distance not
suﬃcient

hips do not initiate
movement

hollow back

incorrect weight dis-
tribution

knees tremble side-
ways

0.69
(0.08)

0.54
(0.13)

0.43
(0.15)

0.61
(0.07)

0.58
(0.27)

0.44
(0.07)

legs extended at end 0.62

not symmetric

too deep

wrong dynamics

(0.14)
0.54
(0.20)
0.47
(0.14)
0.55
(0.17)

0.72
(0.12)

0.99
(0.01)

0.71
(0.12)

0.70
(0.22)

0.95
(0.05)

0.44
(0.31)

0.64
(0.13)
0.62
(0.13)
0.88
(0.13)
0.92
(0.09)

0.72
(0.07)

0.93
(0.07)

0.78
(0.04)

0.95
(0.08)

0.91
(0.11)

0.42
(0.05)

0.92
(0.05)
0.48
(0.04)
0.86
(0.14)
0.90
(0.05)

0.75
(0.11)

0.99
(0.02)

0.86
(0.05)

0.97
(0.05)

1.00
(0.00)

0.64
(0.26)

0.88
(0.06)
0.59
(0.10)
0.92
(0.07)
0.96
(0.03)

0.66
(0.13)

0.53
(0.09)

0.47
(0.11)

0.59
(0.09)

0.51
(0.19)

0.56
(0.16)

0.61
(0.18)
0.50
(0.20)
0.49
(0.16)
0.58
(0.15)

32

Segment-
based
RefDTW-
RF-
SVM
0.78
(0.15)

1.00
(0.00)

0.90
(0.03)

0.97
(0.06)

1.00
(0.00)

0.65
(0.23)

0.98
(0.03)
0.65
(0.18)
0.92
(0.06)
0.93
(0.03)

Figure 11: Accuracy of all classiﬁers.

Figure 12: Accuracies for diﬀerent types of features for classiﬁer 1NN-DTW.

33

Figure 13: F1 scores for diﬀerent types of features for classiﬁer 1NN-DTW.

Figure 14: Accuracies for diﬀerent types of features for classiﬁer Segment-
based RefDTW-RF-SVM.

34

Figure 15: F1 scores for diﬀerent types of features for classiﬁer Segment-based
RefDTW-RF-SVM.

Figure 16: Accuracies for linear and rbf kernel for classiﬁer Segment-based
RefDTW-RF-SVM.

35

Figure 17: F1 scores for linear and rbf kernel for classiﬁer Segment-based
RefDTW-RF-SVM.

Figure 18: Accuracies for the comparison of baseline 1NN-DTW on move-
ment segments with Segment-based RefDTW-RF-SVM.

36

Figure 19: F1 scores for the comparison of baseline 1NN-DTW on movement
segments with Segment-based RefDTW-RF-SVM.

37

