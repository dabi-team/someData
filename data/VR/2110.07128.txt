WebAssembly enables low latency
interoperable augmented and virtual reality
software
Bohdan B. Khomtchouk 1,∗
1Department of Medicine, Section of Computational Biomedicine and Biomedical
Data Science, Institute for Genomics and Systems Biology, University of Chicago,
Chicago, IL USA

Correspondence*:
Bohdan B. Khomtchouk
bohdan@uchicago.edu

ABSTRACT

There is a clear difference in runtime performance between native applications that use
augmented/virtual reality (AR/VR) device-speciﬁc hardware and comparable web-based
implementations. Here we show that WebAssembly (Wasm) offers a promising developer solution
that can bring near-native low latency performance to web-based applications, enabling hardware-
agnostic interoperability at scale through portable bytecode that runs on any WiFi or cellular data
network-enabled AR/VR device. Many software application areas have begun to realize Wasm’s
potential as a key enabling technology, but it has yet to establish a robust presence in the AR/VR
domain. When considering the limitations of current web-based AR/VR development technologies
such as WebXR, which provides an existing application programming interface (API) that enables
AR/VR capabilities for web-based programs, Wasm can resolve critical issues faced with just-
in-time (JIT) compilation, slow run-times, large ﬁle sizes and big data, among other challenges.
Existing applications using Wasm-based WebXR are sparse but growing, and the potential for
porting native applications to use this emerging framework will beneﬁt the web-based AR/VR
application space and bring it closer to its native counterparts in terms of performance. Taken
together, this kind of standardized “write-once-deploy-everywhere” software framework for AR/VR
applications has the potential to consolidate user experiences across different head-mounted
displays and other compatible hardware devices to ultimately create an interoperable AR/VR
ecosystem.

Keywords: Augmented Reality, Virtual Reality, WebAssembly, Software Engineering, Performance, Interoperability

1 INTRODUCTION

From a consumer’s point of view, the range and variety of augmented and virtual reality (AR/VR) software
experiences available on any given hardware device will ultimately drive user buying preferences and long-
term retention. Therefore, software developers are well-advised to create codebases that are future-proofed
to run on as many internet-connected AR/VR devices as possible, bringing together user experiences
regardless of hardware vendor preferences. As immersive technologies such as AR/VR, jointly referred
to as extended reality (XR), continue to rapidly develop in their scope and availability, the limitations
of current strategies in computation and adoption are becoming increasingly more apparent. Currently
available commercial headsets are almost exclusively dedicated to native-run video games with few offering
AR support. Mobile phones, which offer the greatest opportunity for portable and accessible XR, are

1

1
2
0
2

t
c
O
4
1

]

C
H
.
s
c
[

1
v
8
2
1
7
0
.
0
1
1
2
:
v
i
X
r
a

 
 
 
 
 
 
Khomtchouk BB, 2021

Wasm enables low latency interoperable AR/VR software

unfortunately limited by computational power and a lack of development focus.1 Mobile VR headsets such
as Google Cardboard and Samsung Gear VR, in which the user inserts a mobile phone into a headset to
serve as the display, have faded among both developers and users who favor more dedicated solutions such
as the Oculus or Vive headsets. Meanwhile, AR on mobile phones has seen incremental improvements
in general, such as the continued optimization and functionality of the ARCore and ARKit APIs from
Google and Apple, respectively. Despite this, there is still a lack of demand for mobile AR applications or
a standardized marketplace that consolidates them together within an interoperable ecosystem (Braud et al.
(2017)).

The closest solution to the accessibility bottleneck in the XR arena is the WebXR API, a set of open-
source standards produced collaboratively by companies including Google and Mozilla, designed to support
cross-platform web-based XR experiences.2 While WebXR offers a promising revitalization of a web-based
XR experience, it is still incompatible with most major browsers and has signiﬁcant performance limitations.
With XR being one of the most resource-intensive activities intended for common use, current web-based
implementations cannot match the efﬁciency of native XR. Hence, there are few multi-purpose WebXR
tools beyond a simple demo or proof of concept (Renius (2019)).

To accelerate the adoption and utility of web-based cross-platform XR experiences, we propose
WebAssembly (Wasm) as a solution for computationally expensive XR operations. Wasm is a low-level
binary format that markedly improves application performance to near-native speeds. Another advantage
is that it is both a compilation target for a range of languages like C++, C#, or Rust, and completely
platform-agnostic as it runs fully on the web. We propose a shift to Wasm for every major step involved in
XR visualization: tracking, rendering, registration, data visualization, and more. By reaching near-native
speeds, Wasm with WebXR has the possibility to combine the accessibility and cross-platform advantages
of WebXR with the computational advantages of native solutions. In addition, once Wasm gets sufﬁcient
open-source XR attention and traction among developers, existing native XR applications can be ported
over to the web for future maintenance and deployment.

2 WEB-BASED AR/VR

2.1 WebVR/XR API

As compilers, languages, and APIs grow more efﬁcient, web substitutes of native applications become
more capable and widespread. One notable example is Microsoft Ofﬁce Web released in 2010, which
provides access to Microsoft Ofﬁce applications through a web browser. As more complex web applications
became more common in the early-mid 2010s, aided by the high-proﬁle releases of HTML5 (with Web
Workers API) and WebGL, web-based VR also started appearing in simple demos (Qiao et al. (2019)).
Mozilla commenced development of the original WebVR API in 2014 and ﬁnally released the ﬁrst version
in early 2016. The latest iteration of this project, the WebXR standard, was released in 2018 and is actively
maintained to this day.

From its inception, WebVR’s primary goal was to standardize web-based VR experiences by querying
XR capabilities, recognizing controller inputs, and displaying images on the headset. Hence, the WebVR
API provides access to the input and output but does not handle the rendering of the 3D graphics itself.
Instead, this operation was delegated to WebGL, a graphics API for web browsers (Maclntyre and Smith
(2018)). There are many frameworks such as Mozilla’s A-Frame 3 and Facebook’s React 3604 built to
supplement WebVR in an effort to further simplify web-based VR development. These frameworks use
Javascript (JS) 3D libraries such as Three.js for the rendering step.

2

Khomtchouk BB, 2021

Wasm enables low latency interoperable AR/VR software

Beyond the technical implementation, the early stages of WebVR signaled a greater shift within the
history of high-performance web-based applications. While the early era of WebVR experiences mostly
consisted of still 3D images rendering at 20 frames per second (Hubbold et al. (1995)), it still laid the
groundwork and standardization protocols for more efﬁcient cross-platform XR experiences. Compared to
WebVR, WebXR featured notable changes in implementation and augmented reality support 2. While the
scalability and implementation of WebXR underwent a major overhaul, the goals and vision of the project
still remained similar 5.

While the release and adoption of WebXR has been successful – with popular cross-platform experiences
used commonly across desktop computers, VR headsets, and mobile phones – it still has a relatively small
commercial presence compared to native alternatives. Even with its current maturity, there still only exist a
handful of fully-featured applications. An example is Mozilla Hubs, a collaborative meeting space in VR
(Maclntyre and Smith (2018)). However, most applications using WebXR so far are mere proof-of-concept
implementations (Renius (2019)).

Unfortunately, WebXR’s small user base is due to many self-perpetuating factors. While WebXR offers an
exciting cross-platform solution, it is still incompatible with most major web browsers, especially amongst
mobile phones. Currently, only Chrome, Microsoft Edge, and Firefox are the major browsers that support
WebXR (Renius (2019)). The only way to run WebXR on iOS is to use the WebXR Viewer app, which
essentially defeats the purpose of a cross-platform browser-based solution. With few devices supporting
WebXR, there is less demand for a fully integrated user experience. And given the lack of development
and commercialization, there is less demand for platform adoption. On virtual reality headsets, where
WebXR is currently supported and performs well, native application marketplaces offer a better variety of
experiences, ease of discovery, and offer ﬁnancial incentives for developers.

2.2 Browser Compatibility

In spite of the drawbacks, the advantages of web-based AR/VR are clear – for example, the ease and
simplicity for users to share and load content, interconnectedness of the web, among many other factors.
However, as noted in the previous section, a key limitation of web-based XR frameworks is cross-platform
compatibility (Maclntyre and Smith (2018)). Given the current lack of a standardized framework, universal
compatibility across all major browsers is not a reality as of yet, with WebXR coming the closest. Access
to all platforms including all major browsers remains an issue, though Mozilla has committed to expanding
WebXR’s cross-platform compatibility.

2.3 Performance and Latency

Another major disadvantage is the signiﬁcant impact on the performance and latency of web applications
in general. Most modern JS uses Just-In-Time compilation (JIT), which compiles the code during run-time.
While optimization in compilers has drastically improved, JIT lags behind Ahead-Of-Time compilation
(AOT), which converts the code during the build-time before being run. The difference is due to a shorter
compilation time constraint, which offers less ﬂexibility for low-level optimization. Furthermore, there
are occurrences of re-optimization where parts of the optimized code are discarded (due to incorrect
assumptions made by JIT) and then sent through the optimizing compiler again. This process of re-
optimizing is signiﬁcantly time-consuming. In addition, JS is particularly prone to “JIT-unfriendly” code,
as it contains many popular dynamic features that are used inconsistently (Gong et al. (2015)). One other
large factor is the fetching speed of a JS bundle, where the transfer time from the server to the client
is not optimal even after being compacted, primarily over slow networks. Even an application that may

3

Khomtchouk BB, 2021

Wasm enables low latency interoperable AR/VR software

be optimized for performance, containing large amounts of visual and audio assets, will be much more
difﬁcult to deliver instantaneously compared to an ofﬂine application.

Altogether, the advances in WebXR standards and experiences have been impressive, but still not fully
utilized. While adoption is currently slow, iterative improvements in performance efﬁciency, browser
compatibility, and developer attention will eventually enable WebXR to cross a threshold into the
mainstream. Of all these limitations, we believe that near-native performance and platform compatibility
offer the greatest opportunity for WebAssembly to accelerate widespread adoption.

3 WEBASSEMBLY

3.1 History and Design

WebAssembly (Wasm) is a young, low-level binary format that brings near-native speeds to the web. It
can be a compilation target for a variety of languages, including typed languages such as C/C++ among
many others, including Python6. Thus, Wasm opens the door to porting many existing native applications
to the web7.

The precursor to Wasm was asm.js, a language also intended as a compilation target, speciﬁcally from JS
code. Its main performance optimizations come from its usage of AOT compilation. However, due to its
inherent design as a JS compilation target, asm.js inherits many of the same limitations from JS, such as
relatively slow compilation times. Additionally, the generated asm.js text is more difﬁcult to parse than
binaries. Thus, Wasm was created as a successor, which would compile native code into binaries, avoiding
the main limitations of asm.js while retaining the many optimizations such as AOT compilation. Thus,
Wasm offers considerable improvements over asm.js, as it can be a compilation target for a multitude of
languages, not just JS. This subsequently provides access to other source codes, libraries, etc. that are
available through the web.

Figure 1. Example of a simple native C program of addition that is compiled into a binary format using
WebAssembly.

Wasm modules can be embedded into separate execution environments, and have primarily been used
with JS and Web APIs to run in the browser (Haas et al. (2017)). It is important to note that Wasm was
designed to work in tandem with JS as opposed to being its replacement. Wasm’s main advantages are
that it can bring source language code to the web, can communicate effectively with JS, and can run at
higher speeds and smaller sizes. This performance advantage stems from its comparatively faster fetching
speed than JS, more efﬁcient instruction parsing, AOT compilation, and manual memory management that

4

Khomtchouk BB, 2021

Wasm enables low latency interoperable AR/VR software

removes the need for garbage collection 8. Jangda et al. (2019) found that most benchmarks came within
10% of native code, and code size was 63% the size of equivalent JS, and 85% the size of native code.
On analyzing the differences between platforms, Haas et al. (2017) found that Wasm even outperforms
some native benchmarks and signiﬁcantly outperforms JS (by 150-250%, depending on the platform). As
Wasm and its implementation continue to evolve, we expect the performance gap to widen in Wasm’s favor.
Since its minimum viable product release in 2017, major web browsers rapidly saw the utility of Wasm and
began supporting it. As of now, over 93% of browsers support it. In addition, many popular languages now
have compilers and frameworks for constructing Wasm, representing a huge leap forward in innovation
compared to its precursor asm.js.

3.2 WebAssembly Implementation

The ﬁrst major languages to support Wasm were C/C++ through Emscripten, a compiler toolchain to port
LLVM bitcode to Wasm. It also converts OpenGL, a graphics library designed for installed software, to
WebGL, which is its web-based counterpart. Besides creating the Wasm module, Emscripten generates
the JS and HTML necessary for loading on the web, allowing for web applications to easily integrate into
existing JS code. Besides C and C++, Emscripten also supports other languages compiled with LLVM such
as C#, Lua, and Ruby 9. Other Wasm compilers include AssemblyScript10, which compiles Typescript, and
TeaVM11, which compiles Java bytecode. This is useful for integrating performance-sensitive code into a
larger JS project or porting existing native code to the web. Wasm also allows for newer high performance
languages like Rust, which programmers might prefer for its high-level ergonomics7. As a whole, Wasm
gives web developers newfound freedom in using their language of choice rather than being bound to the
JS ecosystem.

In addition to compilers intended to port native code to browsers, some frameworks allow developers to
build web frontends from various languages that compile to Wasm. This allows other languages to compete
with JS-based tools such as Angular or React. The most popular of these is Blazor (speciﬁcally the Blazor
WebAssembly variant), an open-source framework for writing single-page web application frontends in
C#12. Yew is a similar alternative for writing web applications in Rust13.

As of 2021, Wasm-targeting web frameworks are still in their infancy, with Blazor’s production-ready
ofﬁcial source code released in mid-202014. In addition, the use-case is still quite narrow, mainly supporting
single-page, static web applications. Large drawbacks such as the large payload and subsequent long
loading time further suggest that, in the short-term, these frameworks will likely supplement JS-based
frameworks. Despite the narrow scope, the rise of these frontend frameworks written in backend languages
has provoked signiﬁcant discussions on the future of client-side web development with Wasm, both for
performance optimizations and simplicity of development in a single programming language.

3.3 WebAssembly and 3D Graphics

Since the WebXR API does not provide 3D rendering capabilities, it is used with an external WebGL
library. For example, A-Frame, one of the most popular WebXR development platforms, provides full
access to Three.js, which is a graphics library. Babylon.js, another popular graphics library, supports
WebXR directly 15. While these platforms are efﬁcient, Wasm offers an opportunity for even further
performance improvements and incorporation of native libraries into the web.

Magnum is an example of a C++ graphics engine that has utilized Wasm. Popular for its simplicity and
convenience, especially for data visualization, it has recently expanded to the web by taking advantage
of Emscripten 16. By enabling efﬁcient web demos of the engine on their website, this demonstrates how

5

Khomtchouk BB, 2021

Wasm enables low latency interoperable AR/VR software

Wasm has opened the doors to web developers who might not be satisﬁed with JS 3D libraries or want to
re-use visualizations across multiple platforms.

3.4 Existing WebAssembly WebXR Implementations

While most WebXR development still does not include Wasm, there are a few frameworks and engines
that have added some support. Unity has used Wasm for exporting 3D graphics to the web since 2018,
but only recently added WebXR support to the WebAssembly exporter in mid-2020 17. As one of the
most popular XR development engines, this enabled WebXR development for its large user base without
needing to learn a WebXR framework like A-Frame or Babylon that lacks many features of the Unity
engine. However, Unity lacks optimization for the web, causing large ﬁle sizes and thus minimizing the
performance beneﬁts of Wasm. Similarly, LOVR 18 is a Lua-based XR framework that also supports
WebXR through Wasm. Finally, Wonderland Engine19, released to the public in late 2020 is a game and
graphics engine dedicated to WebXR that uses Wasm, WebGL, and other performance improvements. Even
though the engine is in its developmental stage, unlike Unity or other JS-based platforms, it is an excellent
example of the capabilities of WebXR combined with a WebAssembly 3D engine.

In addition to development frameworks, some WebXR-adjacent libraries have begun to utilize the
performance beneﬁts of Wasm. OpenCV, a C++ computer vision library, was compiled for the web with
LLVM, ﬁrst using asm.js and more recently with Wasm 20. Comparing it to similar JS libraries found very
signiﬁcant performance improvements using the Wasm version 21. After testing out a face recognition
algorithm written in three separate languages – Wasm, asm.js, and JS – the Wasm-powered algorithm
was met with twice the frames per second (FPS) compared to its asm.js counterpart, and twenty times
that compared to an equivalent JS algorithm. Considering the many uses of computer vision in AR, this
example demonstrates the new XR possibilities brought by the performance beneﬁts of Wasm.

Figure 2. FPS produced when face recognition algorithm was run with each implementation language.
All the other factors, such as browser or architecture of the functionality, were kept constant during
benchmarking.21

4 DISCUSSION AND CONCLUSIONS

While WebXR remains relatively unpopular and underutilized among developers and users, improvements
to performance and widespread development tools will likely bring it closer in popularity to native XR.

6

Khomtchouk BB, 2021

Wasm enables low latency interoperable AR/VR software

Increased adoption and performance of WebXR has numerous beneﬁts to the ﬁeld, including economical
investment that would inevitably arise with better-performing 3D games and experiences. This would
facilitate further research, optimization, and development of platforms that could expand XR applications
from entertainment to educational and medical ﬁelds. Studies have already highlighted its potential with big
data (Olshannikova et al. (2015)) and biological visualizations (Huang et al. (2018)), including prototypes
for complex heatmap 22 and network 23 graphics. With more widespread access, expensive hardware devices
with exclusive walled garden software would no longer be necessary. Easy-to-use software available on
the web paired with any device will most likely become the industry norm, which would additionally spur
competition within that market and create an interoperable ecosystem. Concurrently, WebAssembly has
reached a point of maturity, and more widespread integration into WebXR would further elucidate the
potential for a web-based XR experience. Given that the existing infrastructure for both WebXR and Wasm
is at a phase of effective usage beyond a simple proof-of-concept stage, we propose the following two
recommendations/conclusions.

4.1 Integration of WebAssembly into WebXR and other native libraries

Given the enormous efﬁciency beneﬁts of Wasm, we recommend that it be utilized within existing
WebXR JS libraries to port over performance-sensitive operations, but can even stretch to the capacities of
porting over entire libraries. While targeting purely expensive operations might be the most cost-effective,
some have begun attempting to port entire libraries to AssemblyScript, such as glas24, which is an example
of a Three.js port to AssemblyScript. Recently, there have launched many libraries that realize the beneﬁt
of WebAssembly and have similarly ported entire applications. We also believe there is a large reserve of
powerful tools for native operating systems that could be utilized in WebXR using Wasm. OpenCV and
Magnum, as discussed above, are relevant examples of high-performance libraries that could beneﬁt from
the WebXR domain. As a whole, we support further research and porting to improve the performance of JS
libraries using this method, rather than only using Wasm to integrate existing native code into the web.

4.2 Standardization of a web-based XR framework combining WebXR and

WebAssembly

Similar to existing open-source solutions like A-Frame and powerful native engines like Unity, we
suggest an open-source WebXR framework built speciﬁcally to focus on utilizing Wasm for its performance
advantages. By focusing on accessibility, but without sacriﬁcing complexity, such a tool could transform
WebXR into the dominant form of XR experiences, and help enable XR to expand beyond entertainment
purposes to other domains. Naturally, creating a standardization of a WebXR development framework is a
longer-term recommendation. Yet, as an increasing number of libraries that tap into XR utilize WebXR
through Wasm, together with existing WebXR libraries that port operations to AssemblyScript, an industry
standard is not too far on the horizon. The development, accessibility, and standardization of an open-source
WebXR-Wasm framework is one that will help the XR domain reach the scalability it deserves, without
relinquishing performance. The industry as a whole should head towards this exciting possibility of a
write-once-deploy-anywhere workﬂow that can generate low latency XR applications across a multitude of
use-cases, which can be fully realized with improvements to the near-universal compatibility of WebXR.

5 APPENDIX

7

Khomtchouk BB, 2021

Wasm enables low latency interoperable AR/VR software

CONFLICT OF INTEREST STATEMENT

BBK is a founder of Dock Therapeutics, Inc. The authors declare that the research was conducted in the
absence of any commercial or ﬁnancial relationships that could be construed as a potential conﬂict of
interest.

AUTHOR CONTRIBUTIONS

BBK conceived and wrote the manuscript.

AUTHOR DEDICATION

This manuscript is dedicated to my now 6-year old son, Sviatoslav Khomtchouk, who in 2020 hacked
his school’s computer network to ﬁgure out what reading level all his other classmates were on during
kindergarten class, which exposed a broader system vulnerability that was later patched by school IT
services. My hope is for Slav to take inspiration from this paper and apply it to whatever interests he
decides to follow (in network security or otherwise).

ACKNOWLEDGMENTS

Research reported in this publication was supported by the National Heart, Lung, and Blood Institute of
the National Institutes of Health under Award Number K12HL143959 (BBK). The content is solely the
responsibility of the authors and does not necessarily represent the ofﬁcial views of the National Institutes
of Health.

FOOTNOTES

1 https://www.androidauthority.com/challenges-facing-mobile-vr-771609/
2 https://github.com/immersive-web/webxr/blob/master/explainer.md
3 https://aframe.io
4 https://github.com/facebookarchive/react-360
5 https://developer.mozilla.org/en-US/docs/Web/API/WebXR Device API/Fundamentals
6 https://github.com/pyodide/pyodide
7 https://webassembly.github.io/spec/core/
8 https://hacks.mozilla.org/2017/02/what-makes-webassembly-fast/
9 https://emscripten.org
10 https://www.assemblyscript.org
11 http://teavm.org
12 https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor
13 https://github.com/yewstack/yew
14 https://devblogs.microsoft.com/aspnet/blazor-webassembly-3-2-0-now-available/
15 https://www.babylonjs.com

8

Khomtchouk BB, 2021

Wasm enables low latency interoperable AR/VR software

16 https://magnum.graphics
17 https://docs.unity3d.com/Manual/index.html
18 https://github.com/bjornbytes/lovr
19 https://wonderlandengine.com
20 https://opencv.org
21 https://hacks.mozilla.org/2017/03/why-webassembly-is-faster-than-asm-js/
22 https://www.youtube.com/watch?v=IEDvXSbBnVU
23 https://www.youtube.com/watch?v=Djk0sHVIMeI
24 https://github.com/lume/glas

REFERENCES

Braud, T., Bijarbooneh, F. H., Chatzopoulos, D., and Hui, P. (2017). Future networking challenges: The
case of mobile augmented reality. 2017 IEEE 37th International Conference on Distributed Computing
Systems (ICDCS) , 1796–1807doi:10.1109/ICDCS.2017.48

Gong, L., Pradel, M., and Sen, K. (2015). Jitprof: pinpointing jit-unfriendly javascript code. In Proceedings
of the 2015 10th joint meeting on foundations of software engineering. 357–368. doi:10.1145/2786805.
2786831

Haas, A., Rossberg, A., Schuff, D. L., Titzer, B. L., Holman, M., Gohman, D., et al. (2017). Bringing the

web up to speed with webassembly. SIGPLAN Not. 52, 185–200. doi:10.1145/3140587.3062363

Huang, C., Zhou, W., Lan, Y., Chen, F., Hao, Y., Cheng, Y., et al. (2018). A novel webvr-based
IEEE Access 6, 27726–27735.

lightweight framework for virtual visualization of blood vasculum.
doi:10.1109/ACCESS.2018.2840494

Hubbold, R., Murta, A., West, A., and Howard, T. (1995). Design issues for virtual reality systems. In
Virtual Environments ’95, ed. M. G¨obel (Springer Vienna), 224–236. doi:10.1007/978-3-7091-9433-1
19

Jangda, A., Powers, B., Berger, E. D., and Guha, A. (2019). Not so fast: Analyzing the performance of
webassembly vs. native code. In 2019 USENIX Annual Technical Conference (USENIX ATC 19), ed.
E. Name (Renton, WA: USENIX Association). 107–120

Maclntyre, B. and Smith, T. F. (2018). Thoughts on the future of webxr and the immersive web. In 2018
IEEE International Symposium on Mixed and Augmented Reality Adjunct (ISMAR-Adjunct) (IEEE),
338–342. doi:10.1109/ISMAR-Adjunct.2018.00099

Olshannikova, E., Ometov, A., Koucheryavy, Y., and Olsson, T. (2015). Visualizing big data with
augmented and virtual reality: challenges and research agenda. Journal of Big Data 2. doi:10.1186/
s40537-015-0031-2

Qiao, X., Ren, P., Dustdar, S., Liu, L., Ma, H., and Chen, J. (2019). Web ar: A promising future for mobile
augmented reality—state of the art, challenges, and insights. Proceedings of the IEEE 107, 651–666.
doi:10.1109/JPROC.2019.2895105

Renius, O. (2019). A technical evaluation of the webxr device api for developing augmented reality web
applications. Link¨oping University, Department of Computer and Information Science, Human-Centered
systems, Master’s Thesis

9

