Optimal Task Scheduling in
Communication-Constrained Mobile Edge
Computing Systems for Wireless Virtual Reality

(cid:18)(cid:19)(cid:13)(cid:8)(cid:11)(cid:7)(cid:5)(cid:11)(cid:19)(cid:14)(cid:16)(cid:7)(cid:14)(cid:16)(cid:6)(cid:20)(cid:21)(cid:10)(cid:8)(cid:22)(cid:7)(cid:16)(cid:5)(cid:23)(cid:15)(cid:24)(cid:7)

(cid:21)(cid:10)(cid:6)(cid:26)(cid:5)
(cid:8)(cid:7)(cid:28)(cid:13)(cid:7)(cid:6)(cid:16)

(cid:4)(cid:10)(cid:11)(cid:12)(cid:7)(cid:5)
(cid:13)(cid:14)(cid:15)(cid:16)

(cid:1)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:7)(cid:8)

(cid:27)(cid:13)(cid:7)(cid:13)(cid:7)

(cid:1)(cid:2)

(cid:17)(cid:18)

(cid:4)(cid:10)(cid:11)(cid:12)(cid:7)(cid:5)(cid:13)(cid:14)(cid:15)(cid:16)

Xiao Yang∗, Zhiyong Chen∗, Kuikui Li∗, Yaping Sun∗ and Hongming Zheng†
∗Cooperative Medianet Innovation Center, Shanghai Jiao Tong University, Shanghai, P. R. China
†Intel Corporation, P.R. China
Email: {yangxiao1652, zhiyongchen, kuikuili, yapingsun}@sjtu.edu.cn, hongming.zheng@intel.com

(cid:18)(cid:19)(cid:13)(cid:8)(cid:11)(cid:7)(cid:5)(cid:11)(cid:19)(cid:14)(cid:16)(cid:7)(cid:14)(cid:16)(cid:6)(cid:20)(cid:21)(cid:10)(cid:8)(cid:22)(cid:7)(cid:16)(cid:5)(cid:23)(cid:15)(cid:24)(cid:7)

(cid:25)(cid:15)(cid:8)(cid:7)(cid:24)(cid:7)(cid:6)(cid:6)(cid:5)(cid:11)(cid:12)(cid:10)(cid:14)(cid:14)(cid:7)(cid:24)

(cid:1)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:7)(cid:8)

(cid:4)(cid:10)(cid:11)(cid:12)(cid:7)(cid:5)(cid:13)(cid:14)(cid:15)(cid:16)

(cid:21)(cid:10)(cid:6)(cid:26)

(cid:1)(cid:2)

(cid:17)(cid:18)

(cid:4)(cid:10)(cid:11)(cid:12)(cid:7)(cid:5)(cid:13)(cid:14)(cid:15)(cid:16)

7
1
0
2

g
u
A
2

]
T
I
.
s
c
[

1
v
6
0
6
0
0
.
8
0
7
1
:
v
i
X
r
a

Abstract—Mobile edge computing (MEC)

is expected to
be an effective solution to deliver 360-degree virtual reality
(VR) videos over wireless networks. In contrast to previous
computation-constrained MEC framework, which reduces the
computation-resource consumption at
the mobile VR device
by increasing the communication-resource consumption, we de-
velop a communications-constrained MEC framework to re-
duce communication-resource consumption by increasing the
computation-resource consumption and exploiting the caching
resources at the mobile VR device in this paper. Speciﬁcally,
according to the task modularization, the MEC server can only
deliver the components which have not been stored in the VR
device, and then the VR device uses the received components
and the corresponding cached components to construct the task,
resulting in low communication-resource consumption but high
delay. The MEC server can also compute the task by itself to
reduce the delay, however, it consumes more communication-
resource due to the delivery of entire task. Therefore, we then
propose a task scheduling strategy to decide which computation
model should the MEC server operates, in order to minimize
the communication-resource consumption under the delay con-
straint. Finally, we discuss the tradeoffs between communications,
computing, and caching in the proposed system.

I. INTRODUCTION

Virtual reality (VR) over wireless networks is gaining an un-
precedented attention due to the ability of bringing immersive
experience to users. VR application is computational-intensive,
communications-intensive and delay-sensitive, leading to the
fact that most of VR are wired with cables. Current wireless
systems (e.g., LTE) cannot cope with the ultra-low latency and
ultra-high throughput requirements of wireless VR application
(e.g., 360-degree VR video) [1].

To address this problem, an effective solution is mobile edge
computing (MEC) [2], [3], which enables cloud computing
capabilities at the edge of wireless network, e.g., base stations
(BS). By deploying computation resource at the network edge,
MEC performs the computation tasks closer to the VR device,
improving the quality of computation experience.

Computation-Constrained MEC, where the VR user can
ofﬂoad the computation tasks from the VR device to the MEC
server due to the limited computation capability at the VR
device, has attracted signiﬁcant attention recently [6]–[8]. In
[6], a dynamic computation scheduling algorithm based on
Lyapunov theory was proposed to minimize the execution

(cid:31)(cid:15)(cid:32)(cid:7)(cid:19)

(cid:33)(cid:34)(cid:10)(cid:22)(cid:7)

(cid:35)(cid:13)(cid:32)(cid:15)(cid:19)

(cid:4)(cid:19)(cid:14)(cid:16)(cid:7)(cid:14)(cid:16)(cid:6)(cid:5)(cid:24)(cid:15)(cid:29)(cid:8)(cid:10)(cid:8)(cid:30)

(cid:21)(cid:10)(cid:8)(cid:22)(cid:7)(cid:16)(cid:5)(cid:23)(cid:15)(cid:24)(cid:7)

(cid:1)(cid:2)

Fig. 1. Task can be modularized and then recovered at the user [4], [5].

delay and task failure. Similarly, [7] proposed an optimization
ofﬂoading framework to minimize the execution latency and
the user’s energy consumption. In order to minimize the
mobile energy consumption under the constraint of execution
delay, [8] optimized the ofﬂoading policy based on the channel
gains and the consumption of local computing energy. In
general, the computation-constrained MEC exploits the com-
munication resource to reduce the requirement of the user’s
computation resource. Therefore, it is quite suitable for the
computational-intensive and delay-sensitive application with
low bandwidth consumption, e.g., online picture processing.
The video data rate on online 360-degree VR videos is
already many times greater than that of a high deﬁnition
TV, even though 5G networks maybe not able to satisfy this
requirement [1]. Meanwhile, the end-to-end latency through
the system is no more than 20 ms for online 360-degree
VR videos. We can also use the MEC solution to improve
network responsiveness and reduce latency, however, we can-
not try to reduce the computation resource by increasing the
communications resource overhead. In contrast, we should try
to reduce the consumption of communications resource by
taking advantage of the computation and caching resources
at the mobile VR devices, where we term this solution as
Communications-Constrained MEC in this paper.

In this paper, we present a communications-constrained
MEC framework and develop an optimal
task scheduling
policy to minimize the average transmission data per task
in this system, where the average transmission data per task
is adopted as the consumption of communications resource
metric. Our major contributions are summarized as follows:

• We propose a communications-constrained MEC frame-

 
 
 
 
 
 
(cid:18)(cid:19)(cid:13)(cid:8)(cid:11)(cid:7)(cid:5)(cid:11)(cid:19)(cid:14)(cid:16)(cid:7)(cid:14)(cid:16)(cid:6)(cid:20)(cid:21)(cid:10)(cid:8)(cid:22)(cid:7)(cid:16)(cid:5)(cid:23)(cid:15)(cid:24)(cid:7)

(cid:4)(cid:10)(cid:11)(cid:12)(cid:7)(cid:5)
(cid:13)(cid:14)(cid:15)(cid:16)

(cid:1)(cid:19)(cid:27)(cid:15)(cid:24)(cid:7)(cid:5)
(cid:28)(cid:29)

(cid:21)(cid:10)(cid:6)(cid:26)(cid:5)
(cid:8)(cid:7)(cid:31)(cid:13)(cid:7)(cid:6)(cid:16)

(cid:30)(cid:13)(cid:7)(cid:13)(cid:7)

(cid:17)(cid:18)

(cid:1)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:7)(cid:8)

(cid:4)(cid:10)(cid:11)(cid:12)(cid:7)(cid:5)(cid:13)(cid:14)(cid:15)(cid:16)

Fig. 2. The proposed communication-constrained MEC system with a caching
enabled mobile VR device

(cid:4)(cid:10)(cid:11)(cid:12)(cid:7)(cid:5)(cid:13)(cid:14)(cid:15)(cid:16)

(cid:17)(cid:18)

(cid:1)(cid:2)

(cid:21)(cid:10)(cid:6)(cid:26)

(cid:4)(cid:10)(cid:11)(cid:12)(cid:7)(cid:5)(cid:13)(cid:14)(cid:15)(cid:16)

(cid:1)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)(cid:8)(cid:9)(cid:7)(cid:8)

(cid:25)(cid:15)(cid:8)(cid:7)(cid:24)(cid:7)(cid:6)(cid:6)(cid:5)(cid:11)(cid:12)(cid:10)(cid:14)(cid:14)(cid:7)(cid:24)

(cid:18)(cid:19)(cid:13)(cid:8)(cid:11)(cid:7)(cid:5)(cid:11)(cid:19)(cid:14)(cid:16)(cid:7)(cid:14)(cid:16)(cid:6)(cid:20)(cid:21)(cid:10)(cid:8)(cid:22)(cid:7)(cid:16)(cid:5)(cid:23)(cid:15)(cid:24)(cid:7)

work to reduce the consumption of communications re-
source by exploiting the caching resource and increasing
the consumption of computing resource at the mobile VR
device. To address this issue, we consider that a 360-
degree VR video (task) can be modularized today [4],
[5], e.g., MPEG Media Transport (MMT) standard, as
shown in Fig. 1. Besides, the contents composing each
whole task have popularity. As a result, for one intended
task, the MEC server only delivers the corresponding
components which have not been stored in the VR device,
and then the VR device uses the received components
and the corresponding cached components to construct
the task by exploiting the local computation resource.
• We develop an optimal task scheduling policy to minimize
the average transmission data per task. Of course, the
(cid:21)(cid:10)(cid:8)(cid:22)(cid:7)(cid:16)(cid:5)(cid:23)(cid:15)(cid:24)(cid:7)
MEC server can also select MEC computation model,
which the MEC server combines all corresponding con-
tents as the target task and then deliver the task to the VR
device. The MEC computation mode is a reliable way to
(cid:4)(cid:19)(cid:14)(cid:16)(cid:7)(cid:14)(cid:16)(cid:6)(cid:5)(cid:24)(cid:15)(cid:27)(cid:8)(cid:10)(cid:8)(cid:32)
reduce the latency due to the fast computation capability
at the MEC server, but this model delivers more data per
task to the user. Therefore, we formulate the transmission
data consumption minimization problem under the delay
constraint and propose a task scheduling strategy based
on Lyapunov theory.

(cid:34)(cid:35)(cid:10)(cid:22)(cid:7)

(cid:36)(cid:13)(cid:33)(cid:15)(cid:19)

(cid:1)(cid:2)

(cid:37)

(cid:37)

(cid:28)(cid:15)(cid:33)(cid:7)(cid:19)

• We discuss the tradeoffs between communications, com-
puting, and caching. We present how to joint allocate
communications, computing and caching resources in the
proposed communications-constrained MEC system to
achieve a target end-to-end latency, e.g., 20 ms.

II. SYSTEM MODEL

As shown in Fig.2, we consider an MEC system, where a
cache-enabled mobile VR device can access BS with an MEC
server to obtain task. The MEC server has an abundance of
computing and caching resource, while the mobile VR device
has limited computing ability and cache capacity.

A. Task Model

We consider each task consists of a number of contents,
e.g., MMT assets. All the contents composing each task come
from a set of N possible contents, which is denoted by F =
{F1, F2......FN }. Note that one content may be used more than
once in a task. The popularity distribution of the contents is

(cid:1)(cid:19)(cid:27)(cid:15)(cid:24)(cid:7)(cid:5)(cid:28)(cid:29)

N

pi = 1. We assume

denoted by p = [p1, . . . , pN ], where
all the contents are of equal size τ and the MEC server has
all N contents. The cache capacity of mobile VR device is M
with M < N , which can store at most M contents. We adopt
the most popular caching strategy and the stored content set
can be denoted as M = {F1, F2......FM }.

i=1
P

The system is time-slotted with the time slot length ∆. Let
Ht be the task scheduled at time slot t, which consists of Kt
contents. We denote H(t) = [h1(t), . . . , hKt(t)] as the content
index vector of the task Ht, where hkt (t) ∈ {1, . . . , N }
indicates that the kt-th content in Ht is Fhkt (t). Thus the size
of Ht is D(t) = τ Kt. Let Gt
n(1 ≤ n ≤ N ) denote whether
Fn ∈ F is requested in Ht and not cached in mobile VR
device, which can be given by

Gt

n =

1,
0,

(

for M + 1 ≤ n ≤ N, and hkt (t) = n
otherwise.

(1)

B. Computation Model

Each task can either be executed at the MEC server, or at the
mobile VR device. Let W denote the required CPU cycles for
computing one bit. The CPU frequency of the MEC server and
the mobile VR device is fc and fl, respectively. The wireless
transmission throughput is R.

1) MEC Computation Mode: When the mobile VR device
has a task request, the MEC server computes the contents as
the task, and then deliver the task. The size of transmission
data is Dct(t) = D(t). The size of computation data is
Dcc(t) = D(t). Therefore, Nc(t) = ⌈Dcc(t)W/(fc∆) +
Dct(t)/(R∆)⌉ time slots are required to complete the task Ht.
Similar to [9], we use Sc(t) ∈ {0, 1, ..., Nc(t) − 1} to model
the MEC state, where Sc(t) = 0 means that the MEC server
is idle and Sc(t) = n (n 6= 0) indicates a task is processing
at the MEC server and Nc(t) − n time slots are required to
complete the computation.

2) Local Computation Mode: For this model, the MEC
server delivers the contents which do not been stored in the
mobile VR device, and the mobile VR device computes the
received contents with the cached contents as the task. Because
the MEC server does not transmit the stored contents of the
Gt
n.

task, the size of transmission data is Dlt(t) = τ

N

The size of computation data also is Dlc(t) = D(t). As
a result, Nl(t) = ⌈Dlc(t)W/(fl∆) + Dlt(t)/(R∆)⌉ time
let Sl(t) ∈
slots are required to complete Ht. Similarly,
{0, 1, ..., Nl(t) − 1} denote the mobile VR device state. If
the system allocates a task to the mobile VR device at time
slot t, Sl(t) updates to Sl(t + 1) = Nl(t) − 1.

n=M+1
P

C. Task Queueing Model

The task arrival process is modeled as a Bernoulli process
with probability λ. When a task arrivals, the task ﬁrst enters
into a task queue with inﬁnite capacity. The number of the task
waiting in the queue is the queue state Q(t) = {0, 1, 2, 3......},
where Q(t) updates according to the following equation
Q(t+1)=(Q(t)−(u1

c(t)))++A(t), (2)

l (t)+u1

c (t)+u2

l (t)+u2

c(t), u2

where A(t) denotes whether a task arriving in the time slot t.
Thus we have Pr{A(t) = 1} = λ and Pr{A(t) = 0} = 1 − λ.
l (t), u1
l (t), u2
Here, {u1
c(t)} denotes the task scheduling
decision at time slot t.
Notice that at most

two tasks can be scheduled at a
time slot. The ﬁrst
task should be scheduled before the
second task. If the ﬁrst task is scheduled to do the com-
putation at the mobile VR device (MEC server), we have
u1
l (t) = 1 (u1
c(t) = 1) and the second task can not be
scheduled to operate in the local computation mode (MEC
computation mode) because the CPU has been occupied by
the ﬁrst
c(t) = 0). Otherwise,
we have u1
c(t) = 0) for the ﬁrst task and the
local computation mode (MEC computation mode) could be
scheduled for the second task, i.e., u2
c(t) = 1). As
a result, there are ﬁve possible states for the task scheduling
decision in each time slot, i.e., {u1
c(t)} =
{(0, 0, 0, 0), (1, 0, 0, 0), (0, 0, 1, 0), (1, 0, 0, 1), (0, 1, 1, 0)}.

task, yielding u2
l (t) = 0 (u1

l = 0 (u2

l = 1 (u2

l (t), u1

l (t), u2

c(t), u2

III. TASK SCHEDULING STRATEGY AND PROBLEM
FORMULATION

The MEC server is a reliable way to reduce the computation
latency due to fc ≥ fl, but consumes more communication
resource due to Dc(t) ≥ Dl(t). Hence, the MEC server needs
to make the task scheduling decision at each time slot to
minimize the average transmission data per task under the
average delay constraint.

A. Task Scheduling Strategy

When the MEC server (mobile VR device) is idle, the
task can be scheduled to the MEC computation mode (local
computation mode). The queue state Q(t) = 0 denotes the task
queue is empty and there is no task will be scheduled in time
slot t+1, while Q(t) = ∞ indicates that there are inﬁnite tasks
in the task queue, yielding the unstable system. According to
Q(t), Sl(t), and Sc(t), we can describe the system state.

Case 1: Sl(t) = Sc(t) = 0. Both the mobile VR device and
the MEC server are idle. The system can process at most two
tasks. If there are two tasks in Q(t) at least, i.e., Q(t) ≥ 2,
one task can be processed in the mobile VR device (MEC
server) and the other task remains wait in the task queue or
to be precessed in the MEC server (mobile VR device). The
task scheduling policy can be expressed as the follow:

Case 2: Sl(t) 6= 0, Sc(t) = 0. In this case, the MEC server
is idle and the mobile VR device is busy so that the system
can process one task at most for the MEC server. The task
scheduling policy is:

u3(t) =

(0, 0, 0, 0)
(0, 0, 1, 0)

(

for Q(t) ≥ 1.

(5)

Case 3: Sl(t) = 0, Sc(t) 6= 0. In this case, the mobile VR
device operates in idle mode and the MEC server is occupied.
Only one task can be scheduled for the mobile VR device.
The task scheduling policy can be expressed as following:

u4(t) =

(0, 0, 0, 0)
(1, 0, 0, 0)

(

for Q(t) ≥ 1.

(6)

Case 4: Sc(t) 6= 0, Sl(t) 6= 0 or Q(t) = 0. If both the MEC
server and mobile device are busy, i.e., (Sc(t) 6= 0, Sl(t) 6= 0),
or there is no task in the task queue Q(t) = 0, no task is
scheduled. We then have

u5(t) = (0, 0, 0, 0).

At the time slot t, Sl(t) and Sc(t) can be expressed as:

Sl(t+1) = 


l (t) = 0 or u2
max(Sl(t)−1, 0) u1
u1
N 1
l (t) = 1,
u2
N 2
l (t) = 1.

l (t) − 1
l (t) − 1

l (t)=0,



Sc(t+1)= 


c(t)=0 or u2
max(Sc(t)−1, 0) u1
u1
N 1
c(t) = 1,
u2
N 2
c(t) = 1.

c (t) − 1
c (t) − 1

c(t)=0,

(7)

(8)

(9)

l (t) and N i


where N i
c(t) denote Nl(t) and Nc(t) of the i-th
task for i = 1, 2, respectively. Sl(t + 1) = N i
l (t) − 1 means
the mobile VR device is occupied by a task in the time slot
t + 1 and will be busy in the follow N i
l (t) − 1 time slots.
Similarly, we have Sc(t + 1) = N i
c(t) − 1.

B. Problem Formulation

When T → ∞ and the length of task queue is not inﬁnite,
the total number of the task is close to λT . Therefore, the
average transmission data per task can be expressed as:

(0, 0, 0, 0)
(0, 0, 1, 0)
(1, 0, 0, 0)
(1, 0, 0, 1)
(0, 1, 1, 0)

for Q(t) ≥ 2.

(3)

u1(t) =






If there is only one task in Q(t), the task can be processed
in the mobile VR device, the MEC server or remains wait in
the task queue. We thus have

u2(t) = 


(0, 0, 0, 0)
(0, 0, 1, 0)
(1, 0, 0, 0)



for Q(t) = 1.

(4)

lim
T →∞

1
λT

T −1

2

l(t)Di
ui

lt(t) + ui

c(t)Di

ct(t)

.

(10)

t=0
n
X
where Di
lt(t) and Di
task for i = 1, 2, respectively.

i=1
X
ct(t) denote Dlt(t) and Dct(t) of the i-th

o

From the system model, we know that each task requires
transmission time, waiting time and processing time. The
computation processing time of the MEC server or the mobile
VR device is the dominant inﬂuence on the execution delay
the execution delay,
[10]. Based on the Little Law [11],
including the waiting time and processing time, is proportional
to the average queue length of the task buffer. The execution
delay is written as:

T −1

E

Q(t)

.

(11)

lim
T →∞

1
T

h
l (t), u2

t=0
X
l (t), u1

i
c(t), u2

Denote π(t) , {u1

the
communication-resource consumption minimization problem
is formulated as:

c (t)}. Thus,

P1 : min
π(t)

s.t.

lim
T →∞

1
λT

i=1
X

t=1
n
X
π(t) ∈ uk(t),
T

T

2

l(t)Di
ui

lt(t) + ui

c(t)Di

ct(t)

k ∈ {1, 2, 3, 4, 5},

o
(12)

(13)

lim
T →∞

1
T

E

Q(t)

< ∞,

h

t=1
X

i

where (13) indicates the delay constraint to ensure the task re-
quires can be completed with a ﬁnite delay. Unfortunately, P1
is a stochastic optimization problem. The system state changes
after a ofﬂoading decision is made, and P1 is impossible to
be solved by convex optimization methods.

IV. OPTIMAL TASK SCHEDULING ALGORITHM BASED ON
LYAPUNOV THEORY

A. Problem Transform

To simplify P1, we consider Lyapunov optimization theory.

We ﬁrst deﬁne the Lyapunov function:

L(Q(t)) =

1
2

Q2(t).

(14)

Consider the initial state Q(0) = 0, and then we have
L(Q(0)) = 0. If the queue is unstable, L(Q(t)) is more
volatile than Q(t). Thus the expectation of L(Q(t)) is:

E[L(Q(t))] = E

[L(Q(i + 1)) − L(Q(i))]

t−1

n
t−1

i=0
X
E{L(Q(i + 1)) − L(Q(i))|Q(i)}.

o

=

(15)

i=0
X

The system is stable when E[L(Q(t))] < ∞. Therefore the
Lyapunov drift function can be given by:

∆L(Q(t)) = E

L(Q(t + 1)) − L(Q(t))|Q(t)

.

(16)

n

We can see from (15) and (16) that to maintain the stability
of the queue, we should minimize (16) in each time slot.
Therefore the expectation of the L(Q(t)) would not tend to
inﬁnite. As a result, we have the following Lemma 1.

o

Lemma 1. Let us deﬁne the scheduling rate U (t) = u1
l (t) + u1
u2
we have:

l (t) +
c(t). In order to ensure E[L(Q(t))] < ∞,

c(t) + u2

∆L(Q(t)) ≤ Cmax − Q(t)E[U (t)|Q(t)],

(17)

where we use Cmax = 1

2 {5 + 2Q(t)A(t)}.

Proof. Please refer to Appendix A.

According to Lyapunov theory [11], when we make the task
scheduling decision π(t) to minimize ∆L(Q(t), the queue

Algorithm 1 Optimal Task Scheduling Algorithm Based On
Lyapunov Theory

1: Obtain the queue state Q(t), mobile device state Sl(t),
MEC server state Sc(t) at the beginning of each time
slot t.

2: Find the system case discussed in Section III.
3: Obtain the system case k.
4: Determine π(t) by solving:
5:

min
s.t.

−Q(t)U (t) + V D(t)
(12), and (13)

6:
7: Set t = t + 1 and update Q(t), Sl(t) , Sc(t) according

to (2), (8), (9) respectively.

state Q(t) can also approach a lower length. However, the
minimization of ∆L(Q(t) can not cause the minimization
of (10). Thus, we deﬁne the Lyapunov drift-plus-penalty
function:

∆L(Q(t)) + V E[D(t)|Q(t)] ≤Cmax − Q(t)E[U (t)|Q(t)]

+ V E[D(t)|Q(t)],

(18)

where V is a non-negative control parameter, which denotes
that the system is sensitive to the communication cost. When
V = 0, the system is only sensitive to the delay. With the
increase of V , the Lyapunov drift-plus-penalty becomes more
sensitive to the communication cost. Notice that the optimal
task scheduling decision π∗(t) for minimizing the right side
of (18) also minimize D(t) under the queue length stability
constraint. Therefore, we can solve P2 in each time slot t:

P2 : min

− Q(t)U (t) + V D(t)

(19)

s.t.

(12) and (13).

For each time slot t, we can obtain D(t) based on π(t) and
Q(t). Because there are only 5 possible choices for π(t), we
can solve P2 in each time slot t by an enumeration method.
Thus, we propose an optimal task scheduling algorithm based
on Lyapunov theory, as shown in Algorithm 1.

Lemma 2. P1 is not equivalent to P2, but if the control
parameter V is sufﬁciently large, the solution of P 1 is very
close to P2. Let ¯DAlg and ¯DOpt be the average transmission
data obtained by solving P2 and the optimal value of P 1,
respectively. We then have:

5
2V
Proof. Please refer to Appendix B.

¯DOpt ≤ ¯DAlg ≤

+ ¯DOpt.

(20)

B. Tradeoffs between Communications, Computing and
Caching

In this subsection, we reveal

the tradeoff between the
average transmission data per task and the computing ability
of the mobile VR device. The tradeoff between the the average
transmission data per task and the cache capacity is also
discussed.

Proposition 1. Let E[Dct(t)] = ¯Dct and E[Dlt(t)] = ¯Dlt
denote the average transmission data of MEC computation
model and local computation model, respectively. And let
E[Dlc(t)] = ¯Dlc denote the average computation data of local
computation model. We thus have
λ ¯Nl ( ¯Dct − ¯Dlt)

¯Nc ≥ λ, 1

¯Nl < λ,

¯Dct − 1
¯Dlt
inf easible

¯DOpt= 


1

¯Nl + 1
1
¯Nl ≥ λ,
+ 1
1
¯Nl

¯Nc < λ.



(21)
where we use E[Nc(t)] = ¯Nc and E[Nl(t)] = ¯Nl to denote the
exception of the time slots required to complete a task in MEC
computation model and local computation model, respectively.

MEC computation policy
Optimal schedling, W=10
Optimal schedling, W=30
Optimal schedling, W=50

260

240

220

200

180

160

)
s
t
i
b
M

(

k
s
a
t

r
e
p
a
t
a
d

n
o
i
s
s
i

m
s
n
a
r
t

e
g
a
r
e
v
A

140

0

5

10

15

20
30
25
Cache capacity

35

40

45

50

Proof. Due to page limitations, we skip the proof here.

Fig. 3. The communication-resource consumption vs. cache capacity.

According to Lemma 2, with large V , ¯DAlg approaches
2V + ¯DOpt based on (20). Because ¯Nl =
¯Dopt, and ¯DAlg ≤ 5
E[Nl(t)] = E[⌈Dlc(t)W/(fl∆) + Dlt(t)/R⌉], for large V , we
can observe from (21) that ¯DAlg or ¯Dopt decreases with the
increase of fl when 1
¯Nc ≥ λ, 1
+ 1
¯Nl
¯Nl
Proposition 2. Deﬁne K = E[Kt], and then we have

< λ.

E[Dct(t)] = ¯Dct = τ K,

N

(22)

E[Dlt(t)] = τ

1 − (1 − pn)k Pr(Kt = k).

(23)

k
n=M+1 X

X

Proof. Due to page limitations, we skip the proof here.

From proposition 2, we can see that ¯Dlt decreases with the
increase of the caching capacity M in the mobile VR device.
And we can know that ¯DOpt decreases with the decrease of
Dlt based on Proposition 1. Hence the increase of M can
decrease DOpt. Similar to proposition 1, with large V , ¯DAlg
approaches ¯Dopt, and ¯DAlg decrease with the increase of M .

V. NUMERICAL RESULTS

In this section, we evaluate the performance of the proposed
optimal scheduling policy by simulations. The number of
contents is N = 1000, the time slot is ∆ = 0.2 s, the length
of each content is τ = 5 M bits, and the average arrival
rate is λ = 0.4. The mobile VR device has fl = 1 GHz
CPU frequency, the cache capacity M = 50 and transmis-
sion throughput R = 500M bps, when the MEC server has
fc = 4 × 2.5 GHz CPU frequency unless otherwise speciﬁed.
Kt is distributed uniformly in [40, 60]. We assume the content
popularity distribution is identical among all elements of a
task, which follows the Zipf distribution with the parameter
α. We set α = 0.8 in simulations. We consider the MEC
computation policy as baselines, which executes all the tasks
in the MEC server.

Fig.3 shows that the average transmission data per task
achieved by the proposed optimal scheduling policy de-
creases with the cache capacity. That means the average
communication-resource consumption can be traded off by
the cache capacity to keep the queue length stable, which
veriﬁes the tradeoff presented by Proposition 2. Moreover, the

260

240

220

200

180

160

140

)
s
t
i
b
M

(

k
s
a
t

r
e
p
a
t
a
d

n
o
i
s
s
i

m

s
n
a
r
t

e
g
a
r
e
v
A

50

100

150

MEC computation policy
Optimal scheduling, V=0.5
Optimal scheduling, V=0.01
Optimal DOpt

200

250
MD CPU frequency (MHz)

300

350

400

450

Fig. 4. The communication-resource consumption vs. the computing ability
of mobile VR device.

scheduling policy always outperforms the MEC computation
policy even when there are no contents cached in the mobile
VR device. This is because the optimal scheduling always
executes a part of tasks by local computation policy, and the
redundant transmission of contents needed in those tasks can
be avoided. However, the MEC computation policy delivers
all the contents requested by each task.

Fig.4 presents the average transmission data per task versus
the mobile VR device computing ability fl. The increase
of the mobile VR device computing ability fl decrease the
average communication-resource consumption. The reason for
it is that the increase of fl decreases the computing delay
of local execution, and more tasks will be executed by local
computation policy. With large V , the system is more sensitive
to the communication-resource consumption, and more tasks
are scheduled to mobile VR device. And DAlg is close to
DOpt when V is sufﬁciently large, which verify the lemma
2. Further, when fl is sufﬁciently large, the local computation
mode becomes the optimal schedule strategy.

Tradeoff between Communications, Computing and
Caching (3C): In Fig. 5, the average end-to-end latency is
20 ms of the proposed system with different 3C resources
allocation, e.g., {R, fl, M }={125 M bps, 100 M Hz, 5} or
{R, fl, M }={67 M bps, 500 M Hz, 45}. As one can see, the
communication throughput R decreases with increasing com-

 
 
 
 
 
 
 
 
 
 
)
s
p
b
M

(

t
u
p
h
g
u
o
r
h
t
n
o
s
s
m
s
n
a
r
T

i

i

180

160

140

120

100

80

60
0

20

40

Caching capacity 

0

200

400

60

600

MD CPU frequency (MHz)

B. Proof of Lemma 2

We assume P 1 is feasible, and there exists at least one π∗(t)
for satisfying the constraints of P 1. ¯DAlg and ¯DOpt satisﬁes
the following condition:

E[D(t)|Q(t)] = ¯DAlg ≤ ¯DOpt + γ,

(26)

where γ is a positive value. According to Little Theorem [11],
if the average arriving rate is larger than the average service
rate, the queue length tends to inﬁnite with the increase of time
slot t. Therefore, if P 2 can be solved by proposed algorithm,
the following condition should be satisﬁed
E[U (t)|Q(t)] = λ + θ,

(27)

Fig. 5. The incorporation of communications, computing and caching to
achieve a target delay 20 ms. Here, we set λ = 0.2.

where θ is a positive value. Substituting (26) and (27) into
(18), and with γ → 0, we obtain:

puting capability fl and caching capacity M . As fl increases,
more task be scheduled to the mobile VR device, yielding
lower the communication cost. M is similar to fl. Therefore,
the system needs a smaller R. We observe that the computing
ability has more impact on the communication-resource con-
sumption than that of the caching capacity. This is because
the cache capacity only has impact on the performance of
local computation mode. On the other hand, when the system
has small computing ability and caching capability, the large
transmission throughput is required. This result reconﬁrm the
importance of simultaneous exploitation of all 3Cs in wireless
networks [2].

VI. CONCLUSION

investigated the

In this paper, we

communication-
constrained mobile edge computing systems for wireless vir-
tual reality. A transmission data consumption minimization
problem with the execution delay constraints was formulated,
and we proposed a task scheduling strategy based on Lapunov
theory. The tradeoffs between communications, computing,
and caching in the proposed system was also dicussed. Finally
Simulation results shown that the proposed scheduling strategy
achieve a signiﬁcant reduction in the average transmission data
consumption.

APPENDIX

A. Proof of Lemma 1

According to (2), we ﬁrst have

Q2(t+1) ≤ Q2(t)+U 2(t)+A2(t)−2Q(t)(U (t)−A(t)). (24)

Substituting (24) into (16), then (16) can be rewritten as

∆L(Q(t)) ≤

1
2

E[U 2(t) + A2(t)|Q(t)]
− Q(t)E[(U (t) − A(t))|Q(t)].

(25)

The task arriving rate A(t) is independent of Q(t). Finally,
according to U (t) ≤ 2 and A(t) ≤ 1, we have Lemma 1.

∆L(Q(t)) + V {DAlg(t)|Q(t)} ≤

5
2

+ V ¯Dopt.

(28)

Then taking iterated expectation and using the telescoping

sums over t ∈ {1......T }, we get

E[L(Q(T ))] − E[L(Q(1))] + V

E[DAlg(t)|Q(t)]

T

≤ T (

5
2

+ V ¯Dopt).

t=1
X

(29)

We divide (29) with V T and let T → ∞, then we have:

¯DAlg ≤

+ ¯DOpt.

5
2V
REFERENCES

(30)

[1] E. Bastug, M. Bennis, M. Medard, and M. Debbah, “Toward intercon-
nected virtual reality: Opportunities, challenges, and enablers,” IEEE
Communications Magazine, vol. 55, no. 6, pp. 110–117, 2017.

[2] H. Liu, Z. Chen, and L. Qian, “The three primary colors of mobile
systems,” IEEE Communications Magazine, vol. 54, no. 9, pp. 15–21,
September 2016.

[3] S. Wang, X. Zhang, Y. Zhang, L. Wang, J. Yang, and W. Wang, “A
survey on mobile edge networks: Convergence of computing, caching
and communications,” IEEE Access, vol. 5, pp. 6757–6779, 2017.
[4] L. Zhang, Y. Xu, W. Huang, L. Yang, J. Sun, and W. Zhang, “A
mmt-based content classiﬁcation scheme for vod service,” in 2015
IEEE International Symposium on Broadband Multimedia Systems and
Broadcasting, June 2015, pp. 1–5.

[5] J. Huang, Z. Chen, D. Ceylan, and H. Jin, “6-dof vr videos with a
single 360-camera,” in 2017 IEEE Virtual Reality (VR), March 2017,
pp. 37–44.

[6] Y. Mao, J. Zhang, Z. Chen, and K. B. Letaief, “Dynamic computation
ofﬂoading for mobile-edge computing with energy harvesting devices,”
IEEE Journal on Selected Areas in Communications, vol. 34, no. 12,
pp. 3590–3605, Dec. 2016.

[7] T. Q. Dinh, J. Tang, Q. D. La, and T. Q. S. Quek, “Ofﬂoading in mobile
edge computing: Task allocation and computational frequency scaling,”
IEEE Transactions on Communications, vol. PP, no. 99, pp. 1–1, 2017.
[8] C. You, K. Huang, H. Chae, and B. H. Kim, “Energy-efﬁcient resource
allocation for mobile-edge computation ofﬂoading,” IEEE Transactions
on Wireless Communications, vol. 16, no. 3, pp. 1397–1411, March
2017.

[9] J. Liu, Y. Mao, J. Zhang, and K. B. Letaief, “Delay-optimal computation
task scheduling for mobile-edge computing systems,” in IEEE ISIT, July
2016, pp. 1451–1455.

[10] Y. Jian, Y. Qinghai, K. Kyungsup, and R. Ramesh, “Power-Delay Trade-
off in Wireless Powered Communication Networks,” IEEE Transactions
on Vehicular Technology, July. 2016.

[11] S. Ross, Introduce to probability models. Academic Press, 2014.

 
 
