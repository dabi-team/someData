Echo-Liquid State Deep Learning for 360◦ Content Transmission and
Caching in Wireless VR Networks with Cellular-Connected UAVs

Mingzhe Chen∗, Walid Saad†, and Changchuan Yin∗
∗Beijing Laboratory of Advanced Information Network, Beijing University of Posts and Telecommunications, Beijing, China 100876,
Emails: chenmingzhe@bupt.edu.cn, ccyin@ieee.org.
†Wireless@VT, Bradley Department of Electrical and Computer Engineering, Virginia Tech, Blacksburg, VA, USA, Email: walids@vt.edu.

8
1
0
2

r
p
A
0
1

]
T
I
.
s
c
[

1
v
4
8
2
3
0
.
4
0
8
1
:
v
i
X
r
a

Abstract—In this paper, the problem of content caching and
transmission is studied for a wireless virtual reality (VR) network
in which unmanned aerial vehicles (UAVs) capture videos on live
games or sceneries and transmit them to small base stations (SBSs)
that service the VR users. However, due to its limited capacity, the
wireless network may not be able to meet the delay requirements of
such 360◦ content transmissions. To meet the VR delay requirements,
the UAVs can extract speciﬁc visible content (e.g., user ﬁeld of view)
from the original 360◦ data and send this visible content to the users
so as to reduce the trafﬁc load over backhaul and radio access links.
To further alleviate the UAV-SBS backhaul trafﬁc, the SBSs can also
cache the popular contents that users request. This joint content
caching and transmission problem is formulated as an optimization
problem whose goal is to maximize the users’ reliability, deﬁned
as the probability that the content transmission delay of each user
satisﬁes the instantaneous VR delay target. To address this problem,
a distributed deep learning algorithm that brings together new
neural network ideas from liquid state machine (LSM) and echo state
networks (ESNs) is proposed. The proposed algorithm enables each
SBS to predict the users’ reliability so as to ﬁnd the optimal contents
to cache and content transmission format for each UAV. Analytical
results are derived to expose the various network factors that
impact content caching and content transmission format selection.
Simulation results show that the proposed algorithm yields 25.4%
gain of reliability compared to Q-learning. The results also show
that the proposed algorithm can achieve 14.7% gain of reliability
due to the reduction of trafﬁc load over backhaul compared to the
proposed algorithm with random caching.

I. INTRODUCTION

Deploying virtual reality (VR) systems over wireless cellular
networks will enable VR users to experience and interact with
virtual and immersive environments without geographical or
behavioral restrictions [1]. However, for each 360◦ VR content
transmission, the data rate requirement may exceed 50 Mbps per
user [1] and the per-user delay requirement will be less than
20 ms. In consequence, existing cellular networks with limited
backhaul and fronthaul capacity cannot readily support this 360◦
VR content transmission especially for scenarios with dense VR
users. In essence, for a given user, a 360◦ VR content can be
divided into visible and invisible components. The component of a
360◦ content that is visible to a given user (e.g., in the user’s ﬁeld
of view) is deﬁned as a visible content. One promising approach to
meet the low latency and high data rate needs of VR applications
is to transmit each user’s visible content extracted from the 360◦
content so as to reduce the backhaul and fronthaul load. To further
alleviate the backhaul trafﬁc, the network can cache popular VR
content at different base stations [2]. However, visible content
transmission and content caching in VR networks also face many

challenges such as effective visible content extraction, choice of
the 360◦ and visible contents to cache as well as the prediction
of content popularity.

The existing literature has studied a number of problems related
to caching and visible contents extraction and transmission in
VR systems and cellular networks such as in [1]–[13]. In [1],
the authors introduced the challenges and beneﬁts of caching in
wireless VR networks. However, this work relies on simple toy
examples and does not provide a rigorous analytical treatment of
caching over wireless VR networks. The authors in [3] proposed
content caching methods for three dimensional VR images. In
[4], the authors proposed a new approach for cached content
replacement that allows optimization of the transmission delay.
However, the works in [3] and [4] focus only on caching without
considering the time that the VR controller needs to process
the VR images which may signiﬁcantly reduce the quality-of-
experience (QoE) of VR users. The works in [2], [5]–[13] studied
a number of problems related to the application of caching
for wireless networks such as coded caching, cached content
replacement, proactive caching, cache-enabled unmanned aerial
vehicles (UAVs), and caching for millimeter wave communi-
cations. However, these existing works [2], [5]–[13] focus on
caching of the contents that have equal data size and do not
consider joint caching of visible and 360◦ contents to ofﬂoad
the backhaul trafﬁc. Moreover, the works in [2], [5]–[13] do not
consider the limited computational resources that each small base
station (SBS) can use for caching. In fact, in order to cache
VR content, the SBSs need to ﬁrst process it which can incur
computational delays. In particular, for VR, if the SBSs want to
store the visible content, they need to use enough computational
resources to extract the visible contents from the original 360◦
contents.

The main contribution of this paper is a novel framework for
enabling caching and visible content transmission for wireless
VR networks so as to reduce the trafﬁc over the backhaul and
enable VR users achieve their delay requirements. To our best
knowledge, this is the ﬁrst work that jointly considers visible
and 360◦ content caching, visible content
transmission, and
processing time used for visible content extraction. Hence, our
key contributions include:

• We propose a novel VR model in which UAVs are used to
collect the contents that users request and send the collected
contents to cache-enabled SBSs that can serve the VR users.
• For the considered VR applications, we analyze how the
SBSs can make decisions related to caching and content

 
 
 
 
 
 
UAV

MmWave backhaul

Sub-6 GHz link

Cache

SBS

Fig. 1. The architecture of a VR network that consists of cache-enabled SBSs,
VR users, and UAVs.

transmission over the UAV-SBS backhaul [14], while de-
termining the format of both cached and transmitted content
(360◦ or visible content). We formulate this joint transmis-
sion and caching problem as an optimization problem whose
goal is to maximize the reliability of VR users.

• To solve this problem, we propose a deep learning al-
gorithm that combines liquid state machine (LSM) [15]
spiking neural networks with echo state networks (ESNs)
[16] to determine the transmission and caching strategies by
predicting the VR users’ reliability. In contrast to existing
algorithms that use LSM or ESN (e.g., [7] and [17]), the
proposed framework: a) can use historical information to
ﬁnd the relationship between the users’ reliability, caching,
and content transmission format, b) has a larger capacity
memory to record network information such as users’ con-
tent requests, and c) has lower complexity for training. In
fact, since the proposed algorithm uses a deep architecture
with both LSM and ESN, existing results on shallow neural
networks [7] and [17], cannot be directly applied.

• We perform fundamental analysis to ﬁnd the optimal content
transmission format and cached contents. The analytical
results show that the cached contents of each SBS depend
on the data rates of backhaul and the users, the number of
users, the computational resources allocated to each user, and
the cache storage size. Meanwhile, the content transmission
format depends on the computational resources of each UAV
and SBS, the data size of each content, and the number of
users that request the same content.

• Simulation results show that the proposed algorithm can
yield 25.4% gain in terms of uses’ reliability compared to
Q-learning.

The rest of this paper is organized as follows. The system
model and problem formulation are described in Section II. The
ESN and LSM based algorithm for reliability maximization is
proposed in Section III. Simulation results are presented and
analyzed in Section IV. Conclusions are drawn in Section V.

Determine content 
transmission format

Determine cached content 
and cached content format

360 or visible content transmission

UAVs

 SBSs

Tracking information transmission

Tracking information transmission

VR Users

 Visible content transmission

Fig. 2. The content and tracking information transmissions in a VR network.

transmitted to the SBSs via wireless backhaul links. Each UAV k
can provide a set Ck of Ck contents for VR users. VR tracking
information that consists of each users’ position and orientation
information is needed for visible content extraction. This tracking
data is transmitted in the uplink from the users to the SBSs, then
from the SBSs to the UAVs via cellular links. Here, the visible
content consists of 120◦ horizontal and 120◦ vertical images [4],
while an original VR content with 360◦ images is referred to as
a 360◦ content. VR users that request the same content will have
the same 360◦ contents but different visible contents. For each
content that they transmit to the SBSs, the UAVs can select the
appropriate content format (visible or 360◦ content).

A. Caching Model

Caching at the SBSs, referred as SBS cache hereinafter, allows
the SBSs to directly transmit their cached contents to VR users
without any backhaul transmission. Each SBS cache can store up
to S Mbits of data. We let Sj be the set of contents that are
stored at SBS j. Each content a requested by a user associated
with SBS j can be stored in two formats: visible format or 360◦
format. We let fja be the format of cached content a. fja ∈
{120◦, 360◦}. fja = 360◦ indicates that SBS j stores a 360◦
content a, otherwise, fja = 120◦ indicates that SBS j stores a
visible content a. The caching constraint of SBS j is:

χa (fja) ≤ S, χa (fja) =

Xa∈Sj,

G360◦ , fja = 360◦,
UjG120◦ , fja = 120◦,

(cid:26)

(1)

where G120◦ and G360◦ represent the data sizes of a visible
content and a 360◦ content, respectively. Uj is the number of
users associated with SBS j. From (1), we can see that, a given
SBS will have to store only one 360◦ content a for all of its
associated users. In contrast, if SBS j stores visible contents, then
it must store a speciﬁc visible content for each user associated
with it (e.g., corresponding to the ﬁeld of view of each user).
This is due to the fact that if an SBS stores a 360◦ content a,
it can extract all possible visible contents from the stored 360◦
contents.

II. SYSTEM MODEL AND PROBLEM FORMULATION

B. Transmission Model

Consider a cellular network that encompasses a set V of V
UAVs and a set B of B SBSs serving a set U of U wireless VR
users, as shown in Fig. 1. In this model, the UAVs are equipped
with cameras and used to collect the VR contents that will be

As shown in Fig. 2, contents can be sent from: a) UAVs to the
SBSs, and then from the SBSs to the users, and b) SBS cache to
the users. Next, we introduce the models for backhaul (UAVs-to-
SBSs links) and SBSs-to-users links.

1) Backhaul Links: Downlink backhaul links are used for VR
content transmission from the UAVs to SBSs. Since the UAVs
need to transmit large-sized VR content and have high probability
of building line-of-sight (LoS) links, millimeter wave (mmWave)
with large bandwidth will be a good choice for the UAV-SBS
backhaul links. The standard log-normal shadowing model of
[18] is used to model the mmWave propagation channel of the
downlink backhaul links. The standard log-normal shadowing
model can be used to model the LoS and non-line-of-sight (NLoS)
links by choosing speciﬁc channel parameters. Thus, the LoS and
NLoS path loss experienced by UAV k transmitting a content to
SBS j is [19] (in dB):

lLoS
kj = LF S (d0) + 10µLoS log (dkj ) + χσLoS ,

lNLoS
kj = LF S (d0)+10µNLoS log (dkj )+χσNLoS,

(2)

(3)

where β is the path loss exponent. In our model, each SBS j
uses a dedicated channel to transmit the tracking information
and, hence, we ignore the interference between SBSs, over the
backhaul. The LoS connection probability, the average path loss,
and the average SNR of the link from SBS j to UAV k can be
calculated using (4)-(6). For each SBS j, the bandwidth used for
tracking information transmission is BVU. Hence, for each user
associated with SBS j, the average channel capacity of the SBS-
1 + γVU
UAV link is cVU
kj is the average
kj
Uj
(cid:17)
SNR of the link from SBS j to UAV k.

kj = BVU

where γVU

log2

(cid:16)

2) SBSs-Users Links: For each SBS j, the total bandwidth
used for content transmission from each SBS to its associated
users is BSD. The channel capacity of the link from SBS j to
user i can be given by:

is

the

free

where LF S (d0)
space path loss given by
20 log (d0fc4π/c) with d0 being the free-space reference distance,
fc being the carrier frequency, and c being the speed of light.
is the distance between UAV k and SBS j. µLoS and
dkj
µNLoS are the path loss exponents for LoS and NLoS links.
χσLoS and χσNLoS are the shadowing random variables which are,
respectively, represented as the Gaussian random variables in dB
with zero mean and σLoS, σNLoS dB standard deviations. The LoS
probability is given by [20]:

Pr

lLoS
t,ki
(cid:0)

(cid:1)

= (1 + X exp (−Y [φt − X]))−1,

(4)

where X and Y are constants which depend on the environment
(e.g., rural or urban) and φt = sin−1 (hk/dkj) is the elevation
angle with hk being the altitude of UAV k. The average path loss
from UAV k to SBS j is [20]:
¯lkj = Pr

× lLoS

× lNLoS
kj

kj + Pr

(5)

,

lLoS
kj
(cid:0)
= 1 − Pr

(cid:1)

lNLoS
kj
(cid:0)

(cid:1)

lLoS
where Pr
kj
(cid:17)
(cid:17)
ratio (SNR) of SBS j is given by:

lNLoS
kj

(cid:16)

(cid:16)

. The average signal-to-noise

(6)

γVD
kj =

PV
¯lkj /10σ2

,

10
where PV is the transmit power of UAV k which is assumed to
be equal for all UAVs and σ2 is the variance of the Gaussian
noise. We assume that the bandwidth of the transmission link
from UAV k to SBS j is BVD. For each user associated with
SBS j, the average channel capacity between UAV k and SBS j
1 + γVD
will be cVD
, where Uj is the number of
kj
Uj
(cid:17)
users associated with SBS j. BVD
implies that the bandwidth used
Uj
for the content transmission between a UAV and SBS j is equally
allocated to the transmissions of users associated with SBS j.

kj = BVD

log2

(cid:16)

Uplink backhaul links are used to transmit the tracking in-
formation of the users from SBSs to the UAVs. Since the sub-6
GHz band can provide a more reliable transmission and a smaller
path loss compared to the mmWave channel [21], we consider
probabilistic LoS and NLoS links over the sub-6 GHz band for
tracking information transmission. The LoS and NLoS path loss
from SBS j to UAV k is [22]:
kj = d−β
LLoS

kj = ηd−β
kj ,

kj , LNLoS

(7)

(8)

(9)


,





,




cSD
ji =

BSD
Uj

log2



1+

PBhij

PBhin +σ2




Pn∈B,n6=j

where PB is the transmit power of each SBS j and hij is the
channel gain between SBS j and user i. Similarly, the channel
capacity of the link from user i to SBS j is:

cSU
ji =

BSU
Uj

log2



1+

PU hij

PU hnj +σ2




Pn∈U ,n6=i

where BSU is the total bandwidth used for tracking information
transmission from the users to the SBSs.

3) Transmission delay: In our model, the UAVs can select
the appropriate transmission format (visible or 360◦ format)
for each content. The transmission format of each content that
user i requests is deﬁned as gi = [gi1, . . . , giN ] where gia ∈
{120◦, 360◦}. gia = 360◦ indicates that a UAV transmits 360◦
content a to the SBS that associates with user i while gia = 120◦
implies that a UAV transmit visible content a to that SBS. For
user i associated with SBS j, the time used for the transmissions
of a content a and tracking information can be given by:

T M
i (a, gi, Sj, Uj) =

G120◦
cVD
kj
G360◦
UjacVD
kj

+ A
cVU
kj
+ A
cVU
kj
G120◦
cSD
ji

+ G120◦
cSD
ji
+ G120◦
cSD
ji
+ A
,
cSU
ji

+ A
cSU
ji
+ A
cSU
ji

, a /∈ Sj, gia = 120◦,
, a /∈ Sj, gia = 360◦,

(10)

a ∈ Sj ,

and G360◦
UjacVD
kj

where Uj is the set of users associated with SBS j, A is the
data size of tracking information, Uja is the number of users that
request content a, G120◦
represent the time used for
cVD
kj
content transmission from UAVs to SBS j, and G120◦
represents
cSD
ji
the time used for content transmission from SBS j to user i.
A
represent the time used for tracking information
cVU
kj
transmission from SBS j to UAV k and from user i to SBS
j. From (10), we can see that, the transmission delay depends
on the user association Uj, cached content set Sj, and content
transmission format vector gi.

and A
cSU
ji





C. Computing Model

When a UAV wants to transmit a visible content to the SBSs,
it must use the tracking information collected from the users to
generate the visible content. For user i associated with SBS j, the
size of the data that needs to be processed when a UAV extracts
visible content from a 360◦ content a is Hia. The processing time
that a UAV uses to generate visible content a is:

Input of 
RLSM

Liquid Model

Input of ESN
Output of 
liquid model

ESN Model

Output of 
RLSM

1{gia=120◦,a /∈Sj },

(11)

T UP
i

(a, gi, Uj, Sj) =

Hia
RU/Uj
{x} = 1 when x is true and 1

where 1
{x} = 0 otherwise. RU is
the total number of computational resources that a UAV uses to
extract visible contents for each SBS. From (11), we can see that
if a UAV wants to transmit a visible content a to the users, it
must spend time to extract visible content from 360◦ content a.
To reduce the trafﬁc load over SBS-users links, the SBSs will
only transmit visible contents to the users. In consequence, when
an SBS stores 360◦ content a, it must use tracking information
to generate the visible content then transmit the visible content to
the users. The processing time that SBS j uses to generate visible
content a of user i is given by:

Hia
RS/Uj

T SP
i

(cid:1)

=

a, gi, f j, Uj, Sj
(cid:0)

1{a∈Sj ,fja=360◦ or a /∈Sj ,gia=360◦},
(12)
where RS is the total number of computational resources allocated
to each SBS. (12) shows that SBS j needs to spend time for
the extraction of visible content a in two cases: a) 360◦ content
a is stored in the cache and b) content a is not stored in the
cache and the UAVs transmit 360◦ content a to SBS j. The
total processing time of each user i is T P
a, gi, f j, Uj, Sj
=
i
T SP
(a, gi, Uj, Sj) .
(cid:0)
i

+ T UP
i

(cid:1)

a, gi, f j, Uj, Sj
(cid:0)

(cid:1)

D. Problem Formulation

Our goal is to develop an effective transmission strategy for
UAVs as well as an effective caching strategy and user association
scheme for SBSs so as to maximize the reliability of each VR
user. The reliability of each user i is deﬁned as follows:

Pi

gi, f j, Uj, Sj
(cid:0)
T
lim
T →∞

1{T P

1
T

Xt=1

=

(cid:1)

it(ait,gi,f j ,Uj ,Sj)+T M

it(ait,gi,Sj,Uj )≤D},

(13)

where ait is the content that user i requests at time t. T P
it and
T M
it are, respectively, the processing time and transmission time
of user i at time t. D is the delay requirement of each VR
user. (13) actually captures the probability of user i’s successful
transmission which means that the total processing and trans-
mission delays of user i meet the delay requirement. Based on
(13), we formulate an optimization problem whose objective is to
maximize the reliability of all users. This maximization problem
involves determining the transmission format gi, user association
policy Uj, and set of cached contents Sj as well as cached content
format f j. Therefore, this problem can be formalized as follows:

max

gi,f j ,Uj ,Sj Xj∈B Xi∈Uj

Pi

gi, f j, Uj, Sj
(cid:0)

(cid:1)

(14)

Fig. 3. The components of the proposed deep RL algorithm using ELSM. Green
and blue circles represent the spiking and normal neurons, respectively.

s. t.

χa (fja) ≤ S,

∀j ∈ B,

Pa∈Sj ,
fja ∈ {120◦, 360◦} , ∀j ∈ B, a ∈ Sj,
gia ∈ {120◦, 360◦} , ∀i ∈ Uj, a ∈ Ck, a /∈ Sj,

(14a)

(14b)

(14c)

where (14a) is the maximum cache storage size. (14b) indicates
that each SBS j can store visible or 360◦ content a. (14c) indi-
cates that each UAV can transmit visible or 360◦ content a to user
i. From (14), we can see that user association Uj, cached content
set Sj, cached content format f j, and content transmission format
gj are coupled. Meanwhile, all of the elements in vectors f j
and gj are discrete. In consequence, the problem in (14) is
challenging to solve by conventional optimization algorithms.
Hence, we propose a deep reinforcement learning (RL) algorithm
[23] to solve it since RL algorithms can adaptively adjust the user
association policy, cached contents, and cached content format
according to the network and users states.

III. DEEP ECHO LIQUID STATE MACHINE LEARNING FOR
RELIABILITY MAXIMIZATION

Next, we introduce a novel deep RL algorithm that merges
together the neural network concepts of LSM and ESN into a
single deep learning framework called echo liquid state machine
(ELSM), so as to perform user association and determine transmis-
sion content format, cached content set, as well as cached content
format. Liquid state machines are spiking neural networks [24]
that are randomly generated. When used for learning, LSMs can
store information related to the network environment over time
and adjust the user association policy, cached contents, and cached
content formats according to the users’ content requests. However,
a traditional LSM uses feed-forward neural networks (FNNs)
as the output function. Training FNNs is complex (requires
computing the gradients for all of the neurons) and, hence, the
complexity of training a traditional LSM is high. To address
these challenges, we propose a learning approach that uses an
ESN scheme as the output function of LSMs. The proposed
deep learning algorithm can record large amount of historical
information and use it to predict the future output. Moreover, the
proposed algorithm is easy to train since ESNs only need to train
the output weight matrix. We ﬁrst introduce the components of
the proposed ELSM algorithm. Then, we explain the use of the
ELSM algorithm to solve our problem in (14).

A. ESLM Deep RL Algorithm Components

An ELSM based deep RL algorithm consists of eight compo-
nents: a) agents, b) input of ELSM, c) liquid model, d) output of
liquid model, e) input of ESN, f) ESN model, and g) output of
ELSM, as shown in Fig. 3. For each SBS j, the components of
deep RL using ELSM are speciﬁcally deﬁned as follows:

• Agents: The agents that implement the ELSM algorithm are
the SBSs. Each SBS implements one ELSM algorithm for
maximizing the reliability of its associated users.

• Input of ELSM: The input of the ELSM deep RL algorithm is
a vector xτ,j = [xτ,j1, · · · , xτ,jB]T where xτ,jk represents
the index of the policy that SBS k uses for action selection
at a period τ consisting of Nτ time slots. xτ,j is then used to
estimate the ELSM output that captures the total reliability
of the users associated with SBS j.

• Liquid Model: The liquid model for each SBS is used to
store the ELSM input information. Then, an ESN can use
the historical input information to estimate the the users’
reliability. The liquid model consists of NL = L1 × L2 × L3
leaky integrate and ﬁre neurons [24] that are arranged in a
three dimensional-column.
The liquid model typically has two categories of neurons:
inhibitory neurons and excitatory neurons. An excitatory
neuron will increase the information of the neurons in the
next
layer while an inhibitory neuron will decrease the
information of the neurons in the next layer. The information
state of each neuron n at each time slot t is vjn (t),
which can be calculated using [15, Equation (13)]. The
connections from the ELSM input to the liquid model are
made with probability PIN. The probability of having a
connection between neurons i and j in the liquid model can
be given by Pij = ςe−(ζij /λ)
, where ς ∈ {ςEE, ςEI, ςIE, ςII}
is a constant that depends on the type of both neurons. In
particular, ςEE denotes an excitatory-excitatory connection,
ςEI is an excitatory-inhibitory connection, ςIE is an inhibitory-
excitatory connection, and ςII is a inhibitory-inhibitory con-
nection. ζij is the Euclidean distance between neurons i and
j. λ inﬂuences how often neurons are connected.

2

• Output of Liquid Model

(Input of ESN): The output
of the liquid model at period τ is a vector ϕj(τ ) =
[vj(1) ; . . . ; vj(Nτ )] where ϕj (t) ∈ RNτ NL×1 and vj (t) =
[vj1 (t) , . . . , vjNL (t)] with vjn (t) being the information
state of neuron n at time slot t. In fact, the ELSM uses
unique output of liquid model to represent each input infor-
mation. We can also see that the size of the input vector is
B while the size of the output vector is Nτ NL. This implies
that the liquid model can use its spiking neurons to extract
and extend the dynamics of the input information. As shown
in Fig. 3, since the ESN is connected to the liquid model, the
input of the ESN is essentially the output of liquid model.
• ESN Model: The ESN model is used to ﬁnd the relation-
ship between the input and output of the ESN. The ESN
j ∈ RNW ×NLNτ , a
model consists of an input matrix W in
recurrent matrix W j ∈ RNW ×NW , and an output weight
j ∈ RNO×(NW +NLNτ ). Here, NW represents the
matrix W out

number of neurons in ESN model and NO is the number of
actions of the ELSM algorithm.

(cid:3)

i

h

uji1 (t) , . . . , ujiNUj

• Action: Each action i of the ELSM algorithm implemented
uji (t) ; qji (t)
by SBS j is a vector oji (t) =
where
(cid:2)
uji (t) =
with ujik (t) ∈ {0, 1}.
(t)
ujik = 1 implies that, under action i, user k will be
associated with SBS j, and ujik = 0, otherwise. qji (t) =
[qji1 (t) , . . . , qjiN (t)] where qjik ∈ {0, 120◦, 360◦}. qjik =
0 implies that when SBS j uses action i, content k is
not stored in the cache while qjik = 120◦ (qjik = 360◦)
implies that SBS j stores visible (360◦) content k. In fact,
action oji (t) determines the user association policy and
cached contents at time t. We can also deﬁne an alternative
action o′
ji (t) = [uji (t) ; zji (t)] that determines the user
association policy and content transmission format. Here,
zji (t) = [zji1 (t) , . . . , zjiN (t)] where zjik ∈ {120◦, 360◦}.
zjik = 120◦ implies that the UAVs will transmit visible
content a to user i while zjik = 360◦ implies that the UAVs
will transmit 360◦ content a to user i. In fact, action oji (t)
determines the user association policy and cached contents.
Meanwhile, action o′
ji (t) decides the user association and
transmission content format. The SBSs will determine the
use of either oji (t) or o′
ji (t) according to the cache storage
size, the number of users, and the number of UAV contents.
Note that, for each implementation of the ELSM algorithm,
each SBS will can at most use one action (oji (t) or o′
ji (t)).
• Output of ELSM (output of ESN): For each action i that SBS
j takes, the ELSM algorithm will output the estimated total
reliability for users associated with SBS j. Thus, the output
¯
Pi(oji (t)). If
of the ELSM algorithm is yj(oji(t)) =

Pi∈Uj

the SBS use action o′
yj

¯
Pi

ji (t)

=

(cid:1)

Pi∈Uj

o′
(cid:0)

ji (t), then the output of the ELSM is
o′
.
ji (t)
(cid:1)
(cid:0)

To allow the ELSM algorithm to estimate the users’ reliability,
we need to calculate the successful transmission of users when
SBS j uses action oji (t) at time t. A transmission is said to be
successful if the total processing and transmission delays of each
user meet the delay requirements. The number of users that have
successful transmission can be derived by the following theorem.

Theorem 1. Given an action oji (t) that determines user associ-
ation, cached contents, and cached content format, the number of
users that have successful transmissions is given by:

NF(oji(t),o−j (t)) =

1

Xi∈Uj ,ait∈Sj
(cid:26)

T SP

it (ait,oji(t))+

G120◦
cSD
ji

+ A
cSU
ji

≤D

(cid:27)

+
Xi∈Uj ,ait /∈Sj

1{T P

it(ait,giait ,oji(t))+T M

it(ait,giait ,oji(t))≤D},

where giait = 


360◦, if G360◦ 6 UjaG120◦ ,
360◦, if HiaUj (cid:16)
120◦, if HiaUj(cid:16)

−G120◦(cid:17)
−G120◦
and o−j (t) is the action vector of all SBSs except SBS j.

RU (cid:17)+(cid:16)
RU (cid:17)+(cid:16)

G360◦
Uja
G360◦
Uja

1
RS
1
RS

− B

− B

6 0,

(cid:17) > 0,



Proof. See Appendix A.

From Theorem 1, we can see that the content transmission

− NFU, fjait = 120◦,

pj (oji) =

(16)

format depends on the data rates of backhaul and users, the
computational resources of each UAV and SBS, the content size,
and the number of users that request the same content. From
Theorem 1, we can also see that, as the number of users that
request the same content increases, it will be better for the UAVs
to transmit 360◦ contents to the SBSs.

If each SBS j uses action o′

ji (t) for the implementation of
the ELSM algorithm, the number of users that have successful
transmissions at time t, which is given by the following theorem.

Theorem 2. Given an action o′
ji (t) that determines the user
association and content transmission format, the number of users
that have successful transmissions is given by:

NF

ji (t) , o′
o′
(cid:0)

−j (t)
(cid:1)
it(ait,f j ,Sj o′
ji(t))+T M

1{T P

=

Xi∈Uj

it(ait,f j ,Sj o′

ji(t))≤D},

where

Sj, f j

=

(cid:2)

with constraint

(cid:3)

arg max
Sj ,f j

χa (fja) ≤ S. Here, IF (fjait ) =

ait∈Sj ,giait =zjiait
P

(15)

IF (fjait )

1

G120◦
cSD
ji

(cid:26)

Pi∈Uj

Pa∈Sj,
+ A
cSU
ji

6D

(cid:27)

1

Pi∈Uj

(cid:26)

Uj Hia
Rs

+

G120◦
cSD
ji

+ A
cSU
ji (cid:27)

1

Uj Hia
Rs
where NFU = 1

G120◦
cSD
ji

Pi∈Uj

+

(cid:26)

+ A
cSU
ji (cid:27)






−NFU, fjait = 360◦, zjiait = 120◦,

−NFS, fjait = 360◦, zjiait = 360◦,

Hia
RU/Uj

+

G120◦
cVD
kj

+ A
cVU
kj

+

(cid:26)

and

G120◦
cSD
ji

.

+ A
cSU
ji

6D

(cid:27)

NFS = 1

Hia
RS/Uj

(cid:26)

+

G120◦
cVD
kj

+ A
cVU
kj

+

G120◦
cSD
ji

+ A
cSU
ji

6D

(cid:27)

Proof. See Appendix B.

From Theorem 2, we can see that the cached contents of
each SBS j depend on the data rates of backhaul and users,
the number of users associated with SBS j, the computational
resources allocated to each user, and the cache storage size.
Theorem 2 shows that, if the cache storage size is unlimited,
storing each visible content for each user is better than storing
a 360◦ content. This is due to the fact that an SBS that stores
visible contents can directly send its cached visible contents to
its users without performing any backhaul transmission or visible
content extraction. When the cache storage is limited, the SBSs
may store 360◦ contents to save cache storage. This, in turn, will
increase the processing delay. In consequence, the SBSs need to
balance the tradeoff between saving cache storage and increasing
processing delay. Based on Theorem 2, each SBS j calculates
the number of users that have successful transmission so as to
calculate the users’ reliability.

B. ELSM for Reliability Maximization

Next, we explain how each SBS j uses the ELSM algorithm to
solve problem (14). We ﬁrst introduce the policy that each SBS
j uses for action selection at each time slot t. Then, the use of
ELSM algorithm for users’ reliability estimation is speciﬁed.

TABLE I
ELSM-BASED DEEP RL ALGORITHM FOR RESOURCE ALLOCATION

for each time τ do.

(a) Estimate the value of the reliability of the users based on (18).
if τ = 1

(b) Set the policy of the action selection pj (1) uniformly.

else

(c) Set the policy of the action selection pj (τ ) based on (16).

end if
(d) Broadcast the index of the action selection policy to other SBSs.
(e) Receive the index of the action selection policy as input ϕτ,j.
(f) Sample the states of the spiking neurons in the liquid model as

the input of ESN.

for each time t do.

(g) Perform an action based on pj(τ ) and calculate the actual

reliability of the users.

(h) Update the states of the reservoir neurons based on (17).
(i) Update the output weight matrix based on (19).

end for
end for

1) Action Selection: At each time slot t, the ELSM algorithm
will implement one action chosen based on the Boltzmann policy,
pj (oj1) , . . . , pj
which is given by pj =
h

ojN O

j (cid:17)i

with

(cid:16)
ey(oji )/κ

ey(θ)/κ ,

Pθ∈Aj ,θ6=oji,
where Aj is the set of actions of SBS j and κ is a constant that
determines the probability distribution of the Boltzmann policy.
For example, as κ → ∞, the Boltzmann policy will follow a
uniform distribution.

2) Learning Process: At each period τ , the SBSs will update
their policies and broadcast them to other SBSs. Then, the SBSs
will use the policies of other SBSs as ELSM input. Using ESN,
the ELSM algorithm can record the historical information related
to the input of the ELSM. The information is recorded in the
states of reservoir neurons which is given by:

µj (τ ) = f

W jµj (τ − 1) + W in
(cid:0)

(cid:1)

j ϕj (τ )

.

(17)

From (17), we can see that, the reservoir neurons’ states depend
on the current input and historical states. Hence, the reservoir
neurons’ states can record historical information. Based on these
reservoir states, the ELSM algorithm can predict the reliability of
the users:

yj (t) = W out

j

(t)

µj (τ )
ϕj (τ ) (cid:21)

,

(cid:20)

(18)

yj (oj1 (t)), . . . , yj
h

where yj (t) =
is the predicted
output of the ELSM algorithm. To predict the users’ reliability,
the ELSM algorithm must train its output weight matrix W out
(t),
j
as follows:

ojN O
(cid:16)

(t)

(cid:17)i

j

W out

ji (t) = W out

ji (t)+λα 

Pi(oji (t)) − yj (oji (t))

µT

j (τ ),

Xi∈Uj



(19)
where λα is the learning rate, Pi(oji (t)) is the reliability
calculated based on Theorems 1 and 2. Table II summarizes the
proposed ELSM algorithm.



C. Convergence of the ELSM Algorithm

For the proposed algorithm, we only need to train the out-
put weight matrix of ESN. In consequence, we can directly
use the result of [17, Theorem 2] which has proved that, for
each action oji, ESNs will converge to
Pi(oji (t)) where

Pi∈Uj

Pi∈Uj

A−j =
of SBS j. To improve the value of

k6=j,k∈B Ak is the set of actions other than the action
Pi(oji (t)), the ELSM

Q

algorithm uses Boltzmann policy for action selection instead of
the work in [17] that uses a greedy mechanism. We assume
that the users’ reliability resulting from the ELSM algorithm
that uses a Boltzmann policy or a greedy mechanism for action
ε
i (oj), respectively. Then the
selection are

Pi(oj) and

P

relationship between

Pi∈Uj

Pi∈Uj
Pi(oj) and

Pi∈Uj
by the following theorem.

Pi∈Uj

ε
i (oj) can be given

P

Theorem 3. Given the Boltzmann policy in (16) and the greedy
Pi(oj) and
mechanism in [17], the relationship between

ε
i (oj) is given by:

P

Pi∈Uj

i) If κ → ∞ and ε = 1, then

ii) If κ = 0 and ε = 0, then

ε
i (oj) =

P

Pi∈Uj

ε
i (oj) =

P

Pi∈Uj

Pi(oj), oj ∈ Aj.

Pi∈Uj

Pi(oj) , oj ∈ Aj.

Pi∈Uj
<

Pi∈Uj
, then
(cid:1)

P

(cid:1)

ε
i

> pε
j

o∗
j
(cid:0)

o∗
j
(cid:0)

iii) If pj

Pi∈Uj
j is the optimal action of each SBS j, pj

.
(cid:1)
is the
j will be implemented in the Boltzmann
j will be

is the probability that action o∗

where o∗
probability that action o∗
o∗
policy, and pε
j
j
implemented in the greedy policy.
(cid:0)

o∗
j
(cid:0)
o∗
j
(cid:0)

o∗
j
(cid:0)

Pi∈Uj

Pi

(cid:1)

(cid:1)

(cid:1)

Proof. See Appendix C.

From Theorem 3, we can see that the value at the convergence
point stemming from the proposed algorithm depends on the
action selection policy used by the learning algorithm. As κ in
(16) increases, the proposed algorithm will use more iterations
for exploration and the number of iterations for exploitation
decreases. Hence,
the system performance will decrease and
the convergence speed increases. As κ decreases, the proposed
learning algorithm will use more iterations for exploitation and
less iterations for exploration, and, then, system performance (i.e.,
reliability) will increase while the convergence speed decreases.
In consequence, we need to appropriately adjust κ to balance
the exploration and exploitation so as to balance the convergence
speed and the reliability that the proposed algorithm can achieve.

IV. SIMULATION RESULTS

For our simulations, we consider a circular network area having
a radius r = 500 m, U = 20 uniformly distributed users, V = 5
uniformly distributed UAVs, and B = 5 uniformly distributed
SBSs. The other parameters used in simulations are listed in
Table II. For comparison purposes, we use two baselines: Q-
learning in [25] and ESN based learning algorithm in [17].

Fig. 4 shows how the total (sum) reliability of all users changes
as the number of SBSs varies. From Fig. 4, we can see that the

TABLE II
SYSTEM PARAMETERS

Parameter
µLoS
β
µNLoS
η
NW
Nτ
χσLoS
Ck
NL
Y

Value
2
2
2.4
100
100
10
5.3
3
125
0.13

Parameter
PU
RS
X
d0
RU
D
PV
BSU
χσNLoS
ρ

Value
20 dBm
2 Gbits
11.9
5 m
1 Gbit
20 ms
20 dBm
4 MHz
5.27
30 ms

Parameter
G120◦
BVD
PB
σ2
A
G360◦
BSD
fc
BVU
S

Value
12.5 Mbits
2 GHz
30 dBm
-105 dBm
50 kbits
50 Mbits
16 MHz
38 GHz
500 MHz
300 Mbits

ELSM algorithm
ESN algorithm
 Q-learning

2

4

6

8

Number of SBSs

(a)

ELSM algorithm
ELSM algorithm with random caching
ELSM algorithm with random transmission format

y
t
i
l
i

b
a

i
l

e
r

l

a
t
o
T

14

12

10

8

6

4

2

0

y
t
i
l
i

b
a

i
l

e
r

l

a
t
o
T

15

10

5

0

2

4

6

8

Number of SBSs

(b)
Fig. 4. The total reliability as the number of SBSs varies.

reliability of users increases as the number of SBSs increases.
This is due to the fact that, as the number of SBSs increases,
the users will have more choices to associate with SBSs and the
number of contents stored in the cache per SBS increases. Fig.
4(a) shows that the proposed algorithm yields 14.8% and 25.4%
gains in terms of total reliability compared to the ESN algorithm
and Q-learning. This is because the ELSM algorithm uses a liquid
model to record more historical information for the prediction
of the total reliability compared to the ESN algorithm and Q-
learning. In consequence, the ELSM algorithm can accurately
predict the reliability and ﬁnd a better solution. Fig. 4(b) shows
that the proposed algorithm can achieve 14.7% and 20.2% gains in
terms of reliability compared to the ELSM algorithm with random
caching and ESLM with random transmission format. These gains

 
 
y
t
i
l
i

b
a

i
l

e
r

l

a
t
o
T

7

6

5

4

3

2

1

5

ELSM algorithm
ESN algorithm
 Q-learning

12

10

8

6

4

2

y
t
i
l
i

b
a

i
l

e
r

l

a
t
o
T

ELSM algorithm with κ=5
ELSM algorithm with κ=1.25
LSM algorithm
ESN algorithm
Convergence point

10

20

15
30
Number of iterations (102)
Fig. 5. Convergence of learning algorithms.

25

35

40

stem from the fact that the proposed algorithm can use Theorems
1 and 2 to ﬁnd the optimal contents to cache for each SBS as
well as the transmission format for each UAV. Fig. 4(b) also
the reliability
shows that, as the number of SBSs increases,
resulting from the ELSM algorithm with random transmission
format is larger than the reliability of ELSM algorithm with
random caching. This is due to the fact that, as the number of
SBSs increases, the number of contents stored in the cache per
SBS increases and, hence, the number of contents transmitted
from the UAVs to SBSs decreases.

Fig. 5 shows the number of iterations needed till convergence
for the proposed ELSM algorithms with κ = 5 and κ = 1.25, the
LSM algorithm in [15], and the ESN algorithm. From this ﬁgure,
we can see that, as time elapses, the reliability of users increases
until convergence to their ﬁnal values. Fig. 5 also shows that the
ELSM algorithm with κ = 5 converges faster than the ELSM
algorithm with κ = 1.25. Meanwhile, the reliability resulting
from the ELSM algorithm with κ = 5 is lower than the reliability
of the ELSM algorithm with κ = 1.25. This is due to the fact
that, as κ increases, the ELSM algorithm uses more iterations
for exploration and less iterations for exploitation. In Fig. 5,
we can also see that the ELSM approach with κ = 5 needs
2600 iterations to reach convergence and exhibits a considerable
reduction of 16.1% less iterations compared to LSM algorithm.
This is because the proposed algorithm uses an ESN as the output
function and an ESN only needs to train the output weight matrix.
Fig. 5 also shows that the proposed algorithm needs 13% more
iterations to reach convergence compared to the ESN algorithm.
Meanwhile, the proposed algorithm can achieve 12% gain in
terms of reliability compared to the ESN algorithm. This stems
from the fact that the ELSM algorithm uses a liquid model to
record more historical information compared to ESN algorithm.
Hence, the ELSM algorithm must use more iterations to record
network information so as to accurately predict the reliability of
users.

In Fig. 6, we show how the total reliability of users changes
as the backhaul bandwidth per SBS varies. From Fig. 6, we
can see that, as the backhaul bandwidth increases, the reliability
resulting from all of the considered algorithms increases. This
is due to the fact that, as the backhaul bandwidth increases,

0.5
2.5
1.5
Backhaul bandwidth allocated to each SBS (GHz)

1

2

Fig. 6. The total reliability as the backhaul bandwidth per SBS varies.

ELSM algorithm
ESN algorithm
Q-learning

1

0.8

0.6

0.4

0.2

F
D
C

0
0.01

0.05

0.1 

0.3 
Reliability

0.5 

0.9 

1   

Fig. 7. CDFs of the per user reliability resulting from different algorithms.

both the delay of transmitting contents from the UAVs to SBSs
and the delay of transmitting tracking information from SBSs
to the UAVs decrease. Fig. 6 also shows that, as the backhaul
bandwidth increases,
the gains of reliability achieved by the
proposed ELSM algorithm compared to the ESN algorithm and
the UAVs
Q-learning decrease. This is due to the fact
have enough bandwidth for content and tracking information
transmission. In consequence, the impact of caching and content
transmission format on reliability decreases.

that

Fig. 7 shows the cumulative distribution function (CDF) for the
per user reliability resulting from all of the considered algorithms.
From Fig. 7, we can see that the ELSM algorithm improves
the CDF of up to 30% and 48.8% gains at a reliability of 0.5.
This is due to the fact that the ELSM algorithm can record
more historical information related to the states of network and
users compared to the ESN algorithm and Q-learning. Hence,
the proposed algorithm can predict the reliability more accurately
compared to the ESN algorithm and Q-learning and ﬁnd a better
solution for the reliability maximization.

In Fig. 8, we show how the number of 360◦ and visible contents
stored in the cache per SBS changes as the cache storage size
varies. Fig. 8 shows that, as the cache storage size per SBS
increases, both the number of cached 360◦ and visible contents
increases. Fig. 8 also shows that, as the cache storage size
increases, the number of cached visible contents increases faster
than the number of cached 360◦ contents. This is because as each

 
 
 
Average number of 360° contents
Average number of visual contents

5

4

3

2

1

e
h
c
a
c
S
B
S

t
a

d
e
o
r
t
s

s
t
n
e
t
n
o
c

f
o

r
e
b
m
u
N

100

200
400
300
Cache storage size (Mbits)
Fig. 8. Number of 360◦ and visible contents stored in the cache per SBS as the
cache storage size varies.

500

SBS has enough cache storage size, storing visible contents can
reduce both the processing delay and the delay of transmitting
contents from UAVs to SBSs. In contrast, storing 360◦ contents
can reduce only the delay of content transmission over UAV-SBS
links.

V. CONCLUSION

In this paper, we have developed a novel framework that uses
ﬂying UAVs to collect VR content for wireless transmission.
In this model, the UAVs can transmit VR contents to ground
SBSs, over wireless backhaul links. Meanwhile, the SBSs can
decide on whether to request and store visible or 360 content
from the UAVs, so as to reduce backhaul
trafﬁc. We have
formulated an optimization problem that jointly considers content
caching, content transmission format, and processing delay for
users’ reliability maximization. To solve this problem, we have
developed a novel deep learning algorithm that brings together
LSM and ESNs. The proposed algorithm enables each SBS to
predict the users’ reliability so as to ﬁnd the optimal contents to
cache and content transmission format for each UAV. Simulation
results have shown that the proposed approach yields signiﬁcant
performance gains. Moreover, the results have also shown that
the use of ESN for LSM can signiﬁcantly improve convergence
time when compared to LSM algorithm.

A. Proof of Theorem 1

APPENDIX

To calculate the number of users that have successful transmis-
sions, we need to simplify the problem in (14). Given a vector
oji (t), (14) can be simpliﬁed as:

max

gi,f j ,Uj ,Sj Xi∈Uj
(a)
= max

gi Xi∈Uj

1{T P

it(ait,giait ,f j ,Uj ,Sj)+T M

it(ait,giait ,Sj ,Uj)≤D}

1{T P

it(ait,giait ,oji(t))+T M

it(ait,giait ,oji (t))≤D},

(b)
=

1

Xi∈Uj ,ait∈Sj

T SP

it (ait,oji (t))+

(cid:26)

G120◦
cSD
ji

+ A
cSU
ji

≤D

(cid:27)

+ max

gi Xi∈Uj ,ait /∈Sj

1{T P

it(ait,giait ,oji(t))+T M

it(ait,giait ,oji(t))≤D},

where (a) is obtained from the fact that action oji (t) determines
the user association, cached contents, and cached content format.
In consequence, for a given action, we only need to ﬁnd the
optimal transmission format gi for each user i. (b) is obtained
that, when the contents that users request are
from the fact
stored at SBS cache, T P
it (ait, gia, oji (t)) = T SP
it (ait, oji (t)) and
it (ait, gia, oji (t)) = G120◦
+ A
T M
, which are not related to the
cSU
cSD
ji
ji
content transmission format gi. For each content ait that user i
requests at time t, if giait = 120◦ and ait /∈ Sj, the total time
used for transmission and processing can be given by:
it (ait, giait , oji (t))
it (ait, giait , oji (t))

it (ait, giait, oji (t)) + T M
T P
it (ait, giait, oji) + T M
= T UP
G120◦
Hia
cVD
RU/Uj
kj

A
cVU
kj

+

+

=

+

G120◦
cSD
ji

+

A
cSU
ji

.

(20)

.

+

+

+

=

+

(21)

A
cSU
ji

G120◦
cSD
ji

Similarly, if giait = 360◦ and ait /∈ Sj , then the total time used
for transmission and processing is given by:
it (ait, giait , oji (t)) + T M
T P
it (ait, giait , oji (t))
it (ait, giait , oji) + T M
= T SP
it (ait, giait , oji (t))
G360◦
A
Hia
cVU
UjacVD
RS/Uj
kj
kj
Hia
> Hia
RS/Uj
RU/BUj

Since RU 6 RS, then
. Hence, from (20) and
(21), we can see that, for user i, if G360◦
6
Uja cVD
kj
G120◦ , then UAV j must transmit 360◦ content a to user i,
giait = 360◦. If G360◦
> G120◦ and Hia
−
RS/Uj
Uja
G360◦
G120◦
+ 1
− B
1
= HiaUj
cVD
cVD
Uja
RS
kj (cid:16)
kj
giait = 360◦. As G360◦
Uja
1
> 0, giait=120◦. This completes the proof.
cVD
kj (cid:16)
B. Proof of Theorem 2
Given an action o′

> G120◦ and HiaUj

ji (t), (14) can be given by:

+ G360◦
UjacVD
kj

6 G120◦
cVD
kj

⇒ G360◦
Uja

< 0, then

− Hia

− G120◦

− G120◦

G360◦
Uja

RU (cid:17)

RU (cid:17)

− B

RU/BUj

(cid:17)
1
RS

+

(cid:17)

(cid:16)

(cid:16)

1{T P

it(ait,giait ,f j ,Uj ,Sj)+T M

it(ait,giait ,Sj ,Uj)≤D},

1{T P

it(ait,f j ,Sj,o′

ji(t))+T M

it(ait,f j ,Sj,o′

ji (t))≤D},

max

gi,f j ,Uj ,Sj Xi∈Uj
(a)
= max

f j ,Sj Xi∈Uj

(b)
= max

f j ,Sj Xi∈Uj ,giait =120◦

1{T P

it(ait,f j ,Sj o′

ji(t))+T M

it(ait,f j ,Sj,o′

ji(t))≤D}

+ max

f j ,Sj Xi∈Uj ,giait =360◦

1{T P

it(ait,f j ,Sj o′

ji(t))+T M

it(ait,f j ,Sj,o′

ji(t))≤D},

where (a) is obtained from the fact that action o′
ji (t) determines
the user association and content transmission format gi. (b) is
obtained from the fact that the transmission format giait = zjiait .
For user i, if giait = zjiait = 120◦, the the total time used for
transmission and processing of is:

=

ait, o′
(cid:0)
G120◦
cSD
ji
Uj Hia
Rs
Hia
RU/Uj

ji (t)

+ T M
ait, o′
ji (t)
it
(cid:0)
(cid:1)
, ait ∈ Sj, fjait = 120◦,
+ A
cSU
ji
+ G120◦
cSD
ji
+ G120◦
cVD
kj

, ait ∈ Sj, fjait = 360◦,
+ G120◦
+ A
cSU
cSD
ji
ji

+ A
cSU
ji
+ A
cVU
kj

(cid:1)

, ait /∈ Sj.

T P
it





 
 
 
 
 
 
The number of users that have successful transmissions due to
caching visible content ait can be given by:

IF (fjait ) = 


Pi∈Uj

1

Pi∈Uj

1

G120◦
cSD
ji

+ A
cSU
ji

(cid:26)

6D

(cid:27)

Uj Hia
Rs

+

G120◦
cSD
ji

+ A
cSU
ji (cid:27)

(cid:26)

− NFU, fjait = 120◦,

− NFU, fjait = 360◦.

(22)
As giait = 360◦, the number of users that have successful



transmission due to caching 360◦ content ait can be given by:

IF (fjait ) = 


1

G120◦
cSD
ji

+ A
cSU
ji

(cid:26)

6D

(cid:27)

Pi∈Uj

1

Uj Hia
Rs

+

G120◦
cSD
ji

+ A
cSU
ji (cid:27)

(cid:26)

Pi∈Uj

− NFU, fjait = 120◦,

− NFS, fjait = 360◦.

on
in


(22)
the

and
cache
to maximize
= arg max
Sj ,f j

Based
stored
formats
Sj, f j

(cid:2)
constraint

(cid:3)

(23), we
SBS

can ﬁnd
of
and
j
IF (fjait ), which

(23)
contents
storage
by
IF (fjait ) with the

the
their
is

given

ait∈Sj,giait =zjiait
P

χa (fja) ≤ S. This completes the proof.

Pa∈Sj ,
C. Proof of Theorem 3

To prove Theorem 3, we ﬁrst note that the greedy mechanism
j (oj) =
j . For case i), as κ → ∞,
Pi(oji) =

can be given by pε
j
1 − ε + ε
(cid:1)
, oj ∈ Aj, oj
N O
j
pj (oji) = 1
N O
j

= 1 − ε + ε
N O
j
6= o∗
j (oj) = 1
N O
j

o∗
j
(cid:0)
. As ε = 1, pε

and pε

. Since

Pi∈Uj

Po−j ∈A−j
sult in

FN (oji, o−j)

B

Qk=1,k6=j

pk (ok), pε

j (oj) = pj (oj) will re-

ε
i (oj) =

P

Pi(oj). For case ii), as κ = 0 and

Pi∈Uj
o∗
ε = 0, pj
j
0, oj ∈ Aj, oj 6= o∗
(cid:0)

Pi∈Uj
o∗
= pε
j
j
j . Therefore,
(cid:1)
(cid:0)

(cid:1)

= 1 and pj (oj) = pε
ε
i (oj) =

j (oj) =
Pi(oj).

P

For case iii), as pj

> pε
j

o∗
j
(cid:0)
k) and, hence,

(cid:1)

B

k (o∗
pε

Qk=1,k6=j
(cid:1)
on (16), pj (oj) depends on the value of

Pi∈Uj

value of

Pi (oj) is larger than the value of

Pi∈Uj
pj (oj) > pj
greedy mechanism, pε

o′′
j
(cid:0)

(cid:1)

, oj, o′′

j ∈ Aj, oj 6= o′′
j (oj) = pε
j

o′′
j
(cid:0)
REFERENCES

Pi∈Uj
o∗
,
j
(cid:1)
(cid:0)
o∗
j
(cid:0)

Pi

then

>

B

Pi∈Uj
pk (o∗

k) >

Qk=1,k6=j
ε
i

P

. Based
Pi∈Uj
(cid:1)
Pi (oj). When the

o∗
j
(cid:0)

Pi∈Uj

Pi

o′′
,
j
Pi∈Uj
(cid:1)
(cid:0)
j 6= o∗
j while in
. This completes the proof.
(cid:1)

j , oj, o′′

[1] E. Bastug, M. Bennis, M. Medard, and M. Debbah, “Toward interconnected
virtual reality: Opportunities, challenges, and enablers,” IEEE Communica-
tions Magazine, vol. 55, no. 6, pp. 110–117, June 2017.

[2] K. Hamidouche, W. Saad, M. Debbah, J. B. Song, and C. S. Hong, “The
5G cellular backhaul management dilemma: To cache or to serve,” IEEE
Transactions on Wireless Communications, vol. 16, no. 8, pp. 4866–4879,
Aug 2017.

[3] G. Schauﬂer and W. Stürzlinger, “A three dimensional image cache for
virtual reality,” Computer Graphics Forum, vol. 15, no. 3, pp. 227–235,
Aug. 1996.

[4] J. Chakareski, “VR/AR immersive communication: Caching, edge comput-
ing, and transmission trade-offs,” in Pro. of the Workshop on Virtual Reality
and Augmented Reality Network, Los Angeles, CA, USA, Aug. 2017.

[5] T. X. Tran, F. Kazemi, E. Karimi, and D. Pompili, “Mobee: Mobility-aware
energy-efﬁcient coded caching in cloud radio access networks,” in Proc.
of IEEE International Conference on Mobile Ad Hoc and Sensor Systems
(MASS), Orlando, FL, USA, Oct 2017.

[6] N. Zhao, F. Cheng, F. R. Yu, J. Tang, Y. Chen, G. Gui, and H. Sari,
“Caching UAV assisted secure transmission in hyper-dense networks based
on interference alignment,”
to
appear, 2018.

IEEE Transactions on Communications,

[7] M. Chen, M. Mozaffari, W. Saad, C. Yin, M. Debbah, and C. S. Hong,
“Caching in the sky: Proactive deployment of cache-enabled unmanned
IEEE Journal on
aerial vehicles for optimized quality-of-experience,”
Selected Areas in Communications, vol. 35, no. 5, pp. 1046–1061, May
2017.

[8] M. Hajimirsadeghi, N. B. Mandayam, and A. Reznik, “Joint caching and
pricing strategies for popular content in information centric networks,” IEEE
Journal on Selected Areas in Communications, vol. 35, no. 3, pp. 654–667,
March 2017.

[9] X. Xu, Y. Zeng, Y. L. Guan, and R. Zhang, “Overcoming endurance issue:
UAV-enabled communications with proactive caching,” available online:
arxiv.org/abs/1712.03542, Dec. 2017.

[10] O. Semiari, W. Saad, M. Bennis, and B. Maham, “Caching meets millimeter
wave communications for enhanced mobility management in 5g networks,”
IEEE Transactions on Wireless Communications, vol. 17, no. 2, pp. 779–
793, Feb 2018.

[11] J. Kwak, Y. Kim, L. B. Le, and S. Chong, “Hybrid content caching in
5G wireless networks: Cloud versus edge caching,” IEEE Transactions on
Wireless Communications, to appear, 2018.

[12] M. Mozaffari, W. Saad, M. Bennis, Y. H. Nam, and M. Debbah,

“A
tutorial on UAVs for wireless networks: Applications, challenges, and open
problems,” available online: arxiv.org/abs/1803.00680, 2018.

[13] Z. Zhao, M. Peng, Z. Ding, W. Wang, and H. V. Poor, “Cluster content
caching: An energy-efﬁcient approach to improve quality of service in cloud
radio access networks,” IEEE Journal on Selected Areas in Communications,
vol. 34, no. 5, pp. 1207–1221, May 2016.

[14] Y. Dong, Md. Zoheb Hassan, J. Cheng, Md. J. Hossain, and V. C. M.
Leung, “An edge computing empowered radio access network with UAV-
mounted FSO fronthaul and backhaul: Key challenges and approaches,”
IEEE Wireless Commun., to appear, 2018.

[15] W. Maass, “Liquid state machines: Motivation, theory, and applications,”
Computability in context: Computation and logic in the real world, pp. 275–
296, 2010.

[16] R. Ali and T. Peter, “Minimum complexity echo state network,” IEEE
Transactions on Neural Networks, vol. 22, no. 1, pp. 131–144, November
2011.

[17] M. Chen, W. Saad, and C. Yin, “Echo state networks for self-organizing
IEEE
resource allocation in LTE-U with uplink-downlink decoupling,”
Transactions on Wireless Communications, vol. 16, no. 1, January 2017.

[18] T. S. Rappaport, Wireless Communications: Principles and Practice, Upper

Saddle River, NJ: Prentice-Hall, 2002.

[19] T. S. Rappaport, F. Gutierrez, E. Ben-Dor, J. N. Murdock, Y. Qiao, and J. I.
Tamir, “Broadband millimeter-wave propagation measurements and models
using adaptive-beam antennas for outdoor urban cellular communications,”
IEEE Transactions on Antennas and Propagation, vol. 61, no. 4, pp. 1850–
1859, 2013.

[20] A. Al-Hourani, S. Kandeepan, and A. Jamalipour, “Modeling air-to-ground
in Proc.
path loss for low altitude platforms in urban environments,”
of IEEE Global Communications Conference (GLOBECOM), Austin, TX,
USA, December 2014.

[21] O. Semiari, W. Saad, M. Bennis, and M. Debbah, “Integrated millimeter
wave and sub-6 GHz wireless networks: A roadmap for ultra-reliable low-
latency communications,” available online: arxiv.org/abs/1802.03837, Feb.
2018.

[22] M. Mozaffari, W. Saad, M. Bennis, and M. Debbah, “Unmanned aerial
vehicle with underlaid device-to-device communications: Performance and
tradeoffs,” IEEE Transactions on Wireless Communications, vol. 15, no. 6,
pp. 3949–3963, June 2016.

[23] Y. Li,

“Deep reinforcement
arxiv.org/abs/1701.07274, Sep. 2017.

learning: An overview,”

available online:

[24] M. Chen, U. Challita, W. Saad, C. Yin, and M. Debbah,

learning for wireless networks with artiﬁcial
neural networks,” available online: arxiv.org/abs/1710.02913, Oct. 2017.

[25] M. Bennis and D. Niyato, “A Q-learning based approach to interference
avoidance in self-organized femtocell networks,” in Proc. of IEEE Global
Commun. Conference (GLOBECOM) Workshop on Femtocell Networks,
Miami, FL, USA, Dec. 2010.

“Machine
intelligence: A tutorial on

