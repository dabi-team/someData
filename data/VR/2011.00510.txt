Body coherence in curved-space virtual reality games

Jeﬀ Weeks

April 7, 2021

Abstract

Virtual-reality simulations of curved space are most eﬀective and most fun when presented as a game
(for example, curved-space billiards), so the user not only has something to see in the curved space, but
also has something fun to do there. However, such simulations encounter a geometrical problem: they must
track the player’s hands as well as her head, and in curved space the eﬀects of holonomy would quickly lead
to violations of body coherence. That is, what the player sees with her eyes would disagree with what she
feels with her hands. This article presents a solution to the body coherence problem, as well as several other
questions that arise in interactive VR simulations in curved space (radians vs. meters, visualization of the
projection transformation, native-inhabitant view vs. tourist view, and mental models of curved space).

1
2
0
2

r
p
A
5

]
h
p
-
d
e
.
s
c
i
s
y
h
p
[

2
v
0
1
5
0
0
.
1
1
0
2
:
v
i
X
r
a

 
 
 
 
 
 
1

Introduction

Seeing curved spaces on a computer monitor is informative and fun, but being in a curved space is a far richer
experience and far more informative. Indeed, for me personally, even having studied curved spaces for 45
years, when I ﬁrst put on the virtual reality (VR) headset and visited a hypersphere and hyperbolic 3-space,
I found surprises. And after playing a few games of billiards in those spaces (Figures 1 & 2), I got an intuitive
feel for them unlike any I had ever had before. The reason for that deeper gut-level understanding is that VR
connects not only with our conscious minds, but it also completely hijacks our subconscious understanding
of our environment [1]: it feels real! Moreover, a billiards game is especially eﬀective, because the need to
line up a good shot forces the player to continually walk around the table and look at the ball positions and
the table itself from many diﬀerent viewpoints, thus building curved-space intuition more quickly.

Figure 1: In hyperbolic 3-space, the billiards table
is a regular pentagon with all 90◦ angles.

Figure 2: The hyperbolic billiards table of Figure 1
agrees locally with a square Euclidean table in the
lab, which adds a tactile component to the game for
greater realism.

1

1.1 Overview and related work

1.2 Deﬁnitions and notation

Curved-space VR simulations [2, 3, 4] present the
player with some surprising optical eﬀects [3], going
beyond the surprises already found in non-VR ani-
mations of the same spaces [5, 6, 7]. The present ar-
ticle explains the challenges of curved-space VR and
presents some solutions for the beneﬁt of other devel-
opers who may wish to write games or other simu-
lations in curved space. The most substantive—and
most surprising—discovery is the need for a visitor to
curved space to use her muscles to provide internal
resistance to the eﬀects of holonomy (Section 1.6), in
order to maintain body coherence (Section 2).

The remainder of Section 1 presents some basic
concepts of geometry in curved space. Sections 2
and 3 explain body coherence in detail, and propose
a strategy for dealing with it in a VR simulation.
Section 4 adapts the standard graphics pipeline to
curved-space graphics, with new insights into the role
of radians and meters, and a fresh view of the projec-
tion transformation. Section 5 explains how stereo-
scopic vision would lead a Euclidean-born tourist to
grossly misjudge distances in curved space. That
same section then goes on to recommend that curved-
space VR games be written to simulate distances as
each space’s native-born inhabitants perceive them,
and shows how to modify the graphics pipeline to
achieve that goal. Section 6 notes that how a player
perceives a curved space depends not only on what
the player’s eyes see, but also on how the player’s
brain integrates that visual data into a mental model
of the space. Finally, Section 7 lays out some direc-
tions for future work.

This project as a whole takes its inspiration from,
and builds upon, the pioneering work of [2]. We
restrict our attention to the three isotropic spaces:
spherical, Euclidean, and hyperbolic. Other authors
have produced beautiful animations of non-isotropic
spaces, in both VR [8, 9, 10, 11, 12] and traditional
graphics [13, 14, 15, 16, 17]. For an excellent overview
of the existing literature, see Section 1.3 of [11].

Note that some well-known games start with sev-
eral Euclidean spaces and then use portals to make
ad hoc connections between them. By contrast, our
billiards game is played in a single self-consistent non-
Euclidean space (the player may choose spherical,
Euclidean or hyperbolic), with no need for portals.

The author thanks the anonymous referees for their
excellent suggestions that greatly improved the qual-
ity of this article.

Just as a circle (or 1-sphere) is the boundary of a
disk, and an ordinary sphere (or 2-sphere) is the sur-
face of a solid ball, a hypersphere, or 3-sphere, is the
3-dimensional hypersurface of a 4-dimensional hyper-
ball. Because the 3-sphere is intrinsically 3- (not 4-)
dimensional, it represents a possible universe for crea-
tures like us—and also a fun place to play billiards
and other games!

Figure 3: In a 3-sphere, if the player takes a step
back from the table, the nearest balls look smaller
but more distant balls look larger.

For example, a surprising optical eﬀect in the
3-sphere is that a billiard ball looks smallest when
it’s 90◦ away from the observer. If it gets any further
away than 90◦ it starts to look larger again (Figure 3),
because a distant ball sitting (180−θ)◦ away from the
observer subtends the same angle in the observer’s
ﬁeld of view that a nearby ball sitting θ◦ away would
subtend (Figure 4). A ball sitting at the observer’s
antipodal point (180◦ away) would ﬁll the whole sky!

Figure 4: A ball near the antipodal point subtends
the same angle as a nearby ball.

2

Figure 7: The concept of radius applies not only to
spheres (left), but also to hyperbolic spaces (right)
and even Euclidean spaces (center).

naturally deﬁned not in Euclidean 4-space, but in
Minkowski space, as the set of points ρ units from
the origin, where the radius ρ is measured using the
Lorentz metric

|(x, y, z, w)|2 = x2 + y2 + z2 − w2 = −ρ2.

For an elementary yet thorough introduction to this
deﬁnition of hyperbolic 3-space, please see the section
“What’s hyperbolic space?” in [6]. Typically one
works with the upper sheet of the hyperboloid (w >
0) and ignores the lower half (w < 0). Figure 7 of the
present article illustrates these deﬁnitions, but one
dimension lower, showing S2, E2 and H2 instead of
S3, E3 and H3. In Section 4.1 it will be convenient
to deﬁne the Euclidean space of radius ρ to be the
hyperplane w = ρ.

Rigid motions of S3 are represented by rotation ma-
trices from the rotation group O(4). Analogously,
rigid motions of H3 are represented by Lorentz ma-
trices from the Lorentz group O(3, 1). Readers who
wish to learn more about these matrices may ﬁnd an
elementary explanation in [6], but that explanation
isn’t required to understand the present article.

1.3 Construction of the billiards ta-

bles

In each of the three spaces, we want to construct a
billiards table

• whose sides all have the same length, and
• whose corners all have 90◦ angles,

so that the virtual table in the curved space will at
least locally match the player’s square physical table
in the lab (Figure 2).
In Euclidean 3-space this is
trivially easy: we use a square virtual table whose
dimensions match those of the physical table.

In the 3-sphere S3, no right-angled square is possi-
ble, because the angles of a regular n-gon in spherical
geometry are always at least slightly greater than the
angles of the corresponding Euclidean n-gon. More
precisely, the angles of a very small n-gon are close
to the Euclidean value, but then as we let the n-gon

Figure 5: When sitting in Euclidean space, a piece of
a hyperbolic plane is very curly.

The hyperbolic plane is intrinsically like a curly
piece of leaf lettuce (Figure 5). Hyperbolic 3-space
is similar, but one dimension higher (Figure 6). For
brevity, one often lets

denote the 3-sphere,
denote Euclidean 3-space, and

S3
E3
H3 denote hyperbolic 3-space.

A 3-sphere S3 of radius ρ may be formally deﬁned
as the set of points ρ units from the origin in Eu-
clidean 4-space, where the radius ρ is measured using
the Euclidean metric

|(x, y, z, w)|2 = x2 + y2 + z2 + w2 = ρ2.

By contrast, a hyperbolic 3-space of radius ρ is most

Figure 6: An “artist’s conception” of the fact that
every slice of hyperbolic 3-space is a hyperbolic plane.

3

(a) In spherical geometry, larger n-gons have broader angles.

(a) Typical player’s viewpoint

(b) In hyperbolic geometry, larger n-gons have sharper angles.

Figure 8: A polygon’s angles depend on the polygon’s
area.

grow, its angles get wider and wider (Figure 8(a)).
To construct the desired billiards table, we start not
with a square but with an equilateral triangle. A
small equilateral triangle on a sphere has angles close
to the Euclidean value of 60◦, so we let the triangle
grow until its angles reach 90◦, and use that 90◦ equi-
lateral triangle for our billiards table in S3 (Figure 9).
In hyperbolic 3-space H3, by contrast, the an-
gles of a regular n-gon are always less than the Eu-
clidean values, with larger n-gons having progres-
sively smaller angles (Figure 8(b)). So to construct
our right-angled billiards table, we start with a tiny
regular pentagon, whose angles are close to the Eu-
clidean value of 108◦, let it grow until its angles shrink
to 90◦, and use that 90◦ regular pentagon for our bil-
liards table in H3 (Figures 1 and 13). (Alternatively
any regular n-gon, with n ≥ 5, would work.)

The image of the square tabletop in Figure 2, when
considered as a 2-dimensional photo on the page, has
corner angles that are signiﬁcantly diﬀerent from 90◦.
Yet we know from experience that those corner angles
really are 90◦, and would look like 90◦ angles when
viewed from directly above. Similarly, our triangu-
lar billiards table has corner angles that look signiﬁ-
cantly diﬀerent from 90◦ when viewed obliquely (Fig-
ure 9(a)), yet they really are 90◦, and look like 90◦ an-

(b) Seen from above a corner

Figure 9: The billiards table in S3 is an equilateral
right triangle.

gles when viewed from directly above (Figure 9(b)).
And, of course, the same is true for the 90◦ angles of
our pentagonal billiards table in H3.

1.4 Straight lines look straight

Figure 10 shows a tiling of a 3-sphere by dodecahe-
dra with edge angles of 120◦, which is slightly more
than the roughly 117◦ angles of a regular dodeca-
hedron in ﬂat space. Figure 11 shows a tiling of
hyperbolic 3-space by dodecahedra with edge angles
of 90◦ which, by contrast, is less than the angles of
a ﬂat-space dodecahedron. But please note that in
both cases, even though the space is curved, straight
lines all look straight, in sharp contrast to the popular
conception of “curved space” as a place where every-

4

thing looks wavy. That popular conception would be
valid in a non-homogeneous or non-isotropic space
[14, 8, 9, 10, 11, 15, 16, 17, 12, 13], but the 3-sphere
and hyperbolic 3-space are both homogeneous and
isotropic. Of course, even though all straight lines
look straight, they behave diﬀerently than in ﬂat
space: only in hyperbolic 3-space can you have a pen-

tagonal billiards table with 90◦ corners (Figures 1 and
13), and only in a 3-sphere can you have a triangular
table with 90◦ corners (Figure 9).

1.5 Billiards table is planar

You might be wondering why the billiards table in
Figure 1, even though it’s hyperbolic and has ﬁve
90◦ corners, nevertheless looks ﬂat (not at all curly).
To understand why, ﬁrst consider how 2-dimensional
beings would see a circle. A circle drawn in the Eu-
clidean plane (Figure 12(a)) looks convex to an ob-
server viewing it from the outside, but concave to an
observer viewing it from the inside. By contrast, a

Figure 10: A tiling of the 3-sphere by dodecahedra
with 120◦ edge angles.

(a) A circle in a Euclidean plane

(b) A great circle on a sphere

(c) A line in a hyperbolic plane

Figure 11: A tiling of hyperbolic 3-space by dodeca-
hedra with 90◦ edge angles.

Figure 12: Whether a circle looks convex/concave or
straight depends on the surface that it sits in.

5

sphere’s equator (Figure 12(b)) is a circle that looks
perfectly straight—neither convex nor concave—to
observers on both sides. Moving up a dimension,
an ordinary sphere drawn in Euclidean space looks
convex to an observer viewing it from the outside,
but concave to an observer viewing it from the in-
side. By contrast, the “equator” of a 3-sphere is a
2-sphere that looks perfectly planar—neither concave
nor convex—to observers on both sides. That’s why
the faces of the dodecahedra in Figure 10 all look
planar—neither concave nor convex—even though
they sit in a 3-sphere.

Similarly, a slice of a hyperbolic plane is a line
that looks straight to observers on both sides (Fig-
ure 12(c)), and a slice of hyperbolic 3-space is a hy-
perbolic plane that looks perfectly straight—not at
all saddle-shaped—to observers on both sides. That’s
why the faces of the dodecahedra in Figure 11 all look
planar. Any one of those faces may be chosen to serve
as the right-angled, pentagonal, hyperbolic—yet per-
fectly planar—billiards table shown in Figure 1. Fig-
ure 13(a) shows a typical billiards game in progress
in H3; Figure 13(b) shows the same game with the
table viewed from approximately eye level, to con-
ﬁrm that the hyperbolic table really is planar (not
saddle-shaped).

1.6 Holonomy

As explained in [3], an observer who slides around a
loop in Euclidean space (being careful not to spin on
her own axis as she slides around!) comes back un-
rotated (Figure 14(b)). But an observer who slides
around a loop on a sphere (again taking care not
to spin on her own axis) comes back rotated rel-
ative to how she started (Figure 14(a)). This ef-
fect is called positive holonomy. For brevity, sliding-
without-spinning-on-one’s-own-axis is called paral-
lel translation. An observer who parallel-translates
around a loop in hyperbolic space also comes back ro-
tated (Figure 14(c)), but in the opposite sense (clock-

(a) Positive holonomy

(b) Zero holonomy

(a) A typical game in progress
on a hyperbolic billiards table.

(b) Viewing the same game at eye level conﬁrms
that the hyperbolic table is perfectly planar.

Figure 13: Two views of the same hyperbolic billiards
table.

(c) Negative holonomy

Figure 14: Holonomy

6

wise or counterclockwise) to the sense in which she
slid around the loop. This is called negative holon-
omy.

On a homogeneous surface, the exact angle θ by
which the observer gets rotated is proportional to
the area A that her loop encloses (for an elementary
proof, one may imitate the methods in Chapter 12 of
[18]). Because the holonomy angle θ is proportional
to the enclosed area A, we may talk about the density
k of holonomy per unit area, in symbols

k ≡

θ
A

.

While
there are many possible deﬁnitions of
curvature—all ultimately equivalent to each other—
a particularly simple one is to deﬁne a homogeneous
surface’s intrinsic (or Gaussian) curvature to be this
density k of holonomy per unit area, where the holon-
omy angle is measured in radians (not degrees).

A 3-dimensional space is homogeneous if its geom-
etry is the same at all points. A homogeneous space
is, in addition, isotropic if all its 2-dimensional slices
have the same intrinsic curvature k. By contrast, it’s
anisotropic if diﬀerent 2-dimensional slices sometimes
have diﬀerent intrinsic curvatures. For example, in
an anisotropic space, the “vertical” slices might have
zero curvature while the “horizontal” slices have pos-
itive curvature.
In the present article, we consider
only the three isotropic spaces S3, E3 and H3.

2 Headset tracking and body
coherence: the problem

When simulating a curved space in VR, a fundamen-
tal question is how to map a pose of the user’s headset
in the physical lab to a pose of the user’s virtual self
in the curved space. The simplest algorithm would
be to map local motions of the headset (as measured
in its own local coordinate system) to the same local
motions of the user’s virtual head (as measured in its
own local coordinate system). In other words, if the
physical headset moves 1 cm to its left in the lab, the
user’s virtual head moves 1 cm to its left in the curved
virtual space; if the physical headset rotates 2◦, the
user’s virtual head rotates 2◦; and so on.

That naive algorithm would work ﬁne if we were
tracking only the user’s head. But in practice we
must track the user’s two hands as well, so that,
for example, a player in the curved-space billiards
game can take a shot. Unfortunately holonomy (de-
ﬁned in Section 1.6 and illustrated in Figure 14) can
force the player’s head and hands out of alignment
when using the naive tracking algorithm. To see

Figure 15: The player moves her head around a small
square in the physical Euclidean lab, while leaving her
body and hands still.

how, consider what happens if the player parallel-
translates her head a small distance d forward, then
the same distance to her left, the same distance back-
wards, and ﬁnally the same distance to her right. In
the physical Euclidean lab, her head returns to its
original position and orientation (Figure 15). But
in the 3-sphere, those forward, leftward, backward,
and rightward motions are realized not by Euclidean
translations, but by rotations of the 3-sphere. If we
place the player at the north pole (0, 0, 0, 1) and let
θ = d/R, where R is the radius of the 3-sphere, the
ﬁnal placement of the player’s head is given by the
product of the four rotation matrices







cos θ
0
0
sin θ

0
1
0
0

0 − sin θ
0
1
0

0
0
cos θ







·







0
cos θ
0

1
0
0
0 − sin θ

0
0
1
0







0
sin θ
0
cos θ







·

cos θ
0
0
− sin θ

0
1
0
0

0
0
1
0

sin θ
0
0
cos θ







·







1
0
0
0

0
cos θ
0
sin θ

0

0
0 − sin θ
1
0

0
cos θ







This product assumes the left-to-right convention in
which matrices act as

(row vector)(ﬁrst factor)(second factor). . .

but may also be sensibly interpreted using the right-
to-left convention

. . . (second factor)(ﬁrst factor)(column vector)

Either way, the matrices for the forward, leftward,
backward, and rightward motions of the player’s head
get applied in the opposite order from which the
player makes those motions, which is somewhat coun-
terintuitive but nevertheless correct. The distance d
is typically small relative to the 3-sphere’s radius R,
in which case the matrix product multiplies out to

7

(a) Positive holonomy in a 3-sphere

(b) Negative holonomy in hyperbolic 3-space

Figure 16: In a curved space, the player’s virtual head ends up oﬀset and rotated, by an amount proportional
to the area that her path encloses.

approximately










1

−θ2

0
θ3
2

θ2

1

0
θ3
2










0 − θ3
2
0 − θ3
2
0
1

0

1

The entries in the bottom row tell us that the player’s
virtual head ends up oﬀset from its original position
by about 1
2 θ3 radians in both the x and y direc-
tions, while the upper-left 3 × 3 block tells us that
the player’s head ends up rotated by an angle of ap-
proximately θ2 radians. While the absolute oﬀset is
only a third-order eﬀect, the oﬀset as a fraction of the
square’s width θ, namely 1
2 θ2 is a second-
order eﬀect, just like the rotation.

2 θ3/θ = 1

The preceding computation proves that when the
player moves her head around a small square in the
physical Euclidean lab, as shown in Figure 15, the
naive head-tracking algorithm would move her virtual
head around a path in the 3-sphere like the one shown
in Figure 16(a). In the hyperbolic case, an analogous
matrix product, but this time using Lorentz matrices







cosh θ
0
0
sinh θ

0
1
0
0







·

cosh θ
0
0

− sinh θ

0
0
1
0

0
1
0
0

sinh θ
0
0
cosh θ







·







1
0
0
0 − sinh θ

0
cosh θ
0

0

0
0 − sinh θ
1
0

0
cosh θ







0 − sinh θ
0
1
0

0
0
cosh θ







·







1
0
0
0

0
cosh θ
0
sinh θ

0
0
1
0

0
sinh θ
0
cosh θ







shows that the naive head-tracking algorithm would
move the player’s virtual head around a path in hy-
perbolic 3-space like the one shown in Figure 16(b).
In both cases, when the player’s head returns to its
starting point in the physical Euclidean lab, her vir-
tual head ends up slightly oﬀset and slightly rotated

8

relative to its original pose in the virtual curved
space. In and of itself that’s not a problem, but if
she keeps her hands still while moving her head, then
she does have a problem: she sees her own hands sit-
ting slightly oﬀset and slightly rotated (Figure 16),
even though she still feels her hands sitting straight
in front of her (Figure 15).

This discrepancy between what the player sees and
what she feels, we call body incoherence. It’s a chal-
lenging problem that all interactive curved-space VR
simulations, present and future, will face. Section 3
presents a solution that works well in the case of
curved-space billiards, along with some more general
suggestions for other games.

3 Headset tracking and body

coherence: a solution

If you could truly visit hyperbolic 3-space or a
3-sphere, would you really experience body incoher-
ence? No, of course not. What you’d see and what
you’d feel would remain perfectly coherent. But as
you parallel-translated your head around in a small
circle, you’d feel a slight torque in your neck. You’d
need to use your neck muscles to counter that torque,
to keep your head pointed straight relative to your
body. This mysterious uninvited torque would feel
roughly analogous to what you feel when you rotate
a spinning gyroscope about one axis and must resist a
mysterious uninvited torque to prevent the gyroscope
from rotating about a perpendicular axis.

Curved-space simulations, such as the curved-space
billiards game, must pretend that the user’s neck is
providing whatever torque is necessary to keep her
head aligned with her body. Hence we must abandon
the naive tracking algorithm and devise a new algo-

rithm that’s guaranteed to place the user’s head and
hands coherently in the curved virtual space.

3.1 Tracking algorithm for curved-

space billiards

The curved-space billiards game incorporates a real
physical table into its simulation (Figure 2) to add a
tactile component to the game. You might be won-
dering how a physical square table in E3 (Figure 2)
could possibly be reconciled with a virtual pentagonal
table in H3 (Figure 13), given that the physical table
has only four corners while the virtual table has ﬁve,
and their geometries are diﬀerent. In spite of that,
amazingly enough, their perimeters are locally iden-
tical! Both tables’ perimeters consist of a sequence of
90 cm edges meeting at 90◦ angles. Thus the player
may walk around the pentagonal virtual table, con-
stantly touching the physical table’s edges and cor-
ners with her hands as she goes around, and what she
feels with her hands will always agree with she sees
with her eyes. Of course, a player who walks one full
lap around the pentagonal virtual table will be walk-
ing one-and-a-quarter times around the square phys-
ical table (Figure 17), but the player will be wearing
a VR headset and won’t see the physical table at
all, only the virtual one. As a practical matter, the
physical table also gives the player a place to rest her
“bridge hand” while setting up a shot. By combining
visual and tactile sensations in this way, the expe-
rience of playing billiards on a hyperbolic billiards
table becomes all the more convincing.

Figure 17: In order to walk one full lap around the
pentagonal virtual table, the player must walk one-
and-a-quarter laps around the square physical table.

Analogous comments apply to a virtual triangular
table in S3 (Figure 9), except that a player who walks
one full lap around the triangular virtual table will
have walked only three-quarters of the way around
the square physical table.

Two players could not share the same physical bil-
liards table, because even while taking great care not
to bump into each other in the virtual space (Fig-
ure 18 left), they might nevertheless collide in the

9

Figure 18: Even while staying a safe distance apart
in the virtual space, two players could accidentally
collide if there were playing at the same physical ta-
ble.

physical world (Figure 18 right). A future release
version of the billiards game will, however, let two
players at separate physical tables play billiards to-
gether at the same virtual table in a shared virtual
space. Each player will see the other player’s face as
a avatar (typically a photo) in the shared world.

The presence of the square physical table means
that we must ensure not only the coherence of the
player’s own body, but also the coherence between
where she sees the virtual table with her eyes and
where she feels the physical table with her hands.
The simplest algorithm is to track each object—the
player’s head and each of her two hands—relative to
the nearest edge of the physical table. This ensures
that the player’s head and hands stay coherent rel-
ative to the table edge, which in turn ensures that
they stay coherent relative to each other as well.

For concreteness, the following ﬁve steps deﬁne the
tracking algorithm as applied to the player’s head,
but it applies equally well to the player’s hands.

Tracking Algorithm
for billiards

1. From the center C of the physical table, extend
a horizontal ray in the direction of the player’s
head H. Let the point where that ray crosses
the table’s edge be our physical anchor point A
(Figure 19(a)).

2. Express the player’s physical head pose relative

to A as the composition of

• a rotation R about A (3 degrees of free-

dom), and

• a translation T from A to H.

3. Decide which edge E(cid:48) of the virtual table corre-
sponds to the edge E of the physical table that
contains the anchor point A. The text below will
explain how to do this.

(a) The tracking algorithm expresses the
player’s physical head position H relative to
a nearby point A on an edge of the square
physical table. . .

(b) . . . and then places the player’s virtual
head H (cid:48) in an analogous position relative to
the corresponding point A(cid:48) on an edge of the
pentagonal virtual table.

Figure 19: The tracking algorithm as applied to billiards

4. Let our virtual anchor point A(cid:48) be the point that
sits the same distance along E(cid:48) that the physical
anchor point A sits along E. (Recall that E and
E(cid:48) have the same length.)

5. Compute the player’s virtual head pose by start-
ing at the virtual anchor point A(cid:48) and applying
the rotation R and translation T from Step 2,
but re-interpreted here as rigid motions of the
curved virtual space (Figure 19(b)).

The question remains, in Step 3 how do we de-
cide which edge E(cid:48) of the virtual table corresponds
to edge E of the physical table? The correspondence
between the edges of the square physical table and
the edges of the virtual triangular, square or pentag-
onal table is not ﬁxed, but is something that must
be traced around in real time, as the player walks
around the table (Figure 17). For example, if a player
keeps walking around the physical table—always in
the same direction, never turning back—she’ll see the
following edges in the following order:

square physical table:
pentagonal virtual table :

0 1 2 3 0 1 2 3 0 1 2 3 0 1 2 . . .
0 1 2 3 4 0 1 2 3 4 0 1 2 3 4 . . .

This matching of an edge of the physical table to
an edge of the virtual table is the only thing that de-
pends on the player’s history. Once that matching is
known, the headset’s pose in the Euclidean physical
space uniquely determines its pose in the curved vir-
tual space, as speciﬁed in Steps 1, 2, 4 and 5 above,
with no additional history dependence.

We apply the same tracking algorithm to the
player’s left and right hands, just as we applied it
to her head, but with one diﬀerence: The correspon-
dence between the edges of the physical table and
the edges of the virtual table gets decided only once,

based on the player’s head position, and then that
same correspondence gets re-used in Step 3 of the
algorithm when computing the hand poses. During
normal play this ad hoc rule makes absolutely no dif-
ference. The only time it would have an eﬀect would
be if a mischievous player kept her head on one side
of the table while running one of her hands all the
way around the physical table’s perimeter. Without
the ad hoc rule, when she felt her physical hand back
in front of her, her eyes would see her virtual hand
sitting near the wrong edge of the virtual table. With
the ad hoc rule, when her hand passes the far side of
the table, the virtual image of that hand suﬀers a
discontinuous jump, to ensure that the virtual hand
remains coherent with the physical hand as it com-
pletes its lap around the table.

3.2 General principles

Looking to the future, all designers of interactive
curved-space VR games will face the body coherence
problem. In broad outline, our solution applies to all
games, in all spaces (even non-isotropic spaces):

Tracking Algorithm
in general

1. Use the current position of the player’s head
and hands to deﬁne a physical anchor point A.
The deﬁnition could be as simple as letting the
player’s head be the anchor point, or it could de-
pend on the player’s hands and/or other objects
in the scene.

2. Express the player’s physical head and hand
poses relative to the physical anchor point A.

3. Let ∆A be the motion that takes the physical
anchor point Aprev from the previous frame to

10

the physical anchor point A of the current frame,
expressed in local coordinates appropriate to the
anchor’s deﬁnition.

4. Apply that same incremental motion ∆A to the
previous virtual anchor point A(cid:48)
prev to get the
current virtual anchor point A(cid:48). Here we’re
working in the virtual anchor’s local coordinates,
and the increment ∆A is expressed as a rigid mo-
tion of the curved virtual space.

5. Compute the player’s virtual head and hand
poses relative to the virtual anchor point A(cid:48). The
player’s virtual head and hands should bear the
same relationship to the virtual anchor point A(cid:48)
that her physical head and hands bear to the
physical anchor point A.

For simple curved-space games, it may be enough
to deﬁne the anchor point A to coincide with the
player’s head, in which case the above algorithm lets
the player’s head move freely in the curved space
while ensuring that her hands follow along coherently.
For more complex games (like the billiards game,
which requires not only internal body coherence, but
also coherence with a physical table), other consider-
ations come into play. While a particular app’s ideal
solution will depend on its particular needs, some
general principles apply:

• Ensure visual stability. In a scene with no ﬁxed
reference points, it’s better to let the player’s vir-
tual head move freely and place the player’s vir-
tual hands to stay consistent with it, rather than
to let the hands move freely and place the head to
stay consistent. The reason for this is that arti-
ﬁcially tweaking the player’s head would slightly
shift her view of the whole scene. Hand motion
should, if possible, have no eﬀect on how the
player sees the scene. But if head motion causes
a slight change in the position of the player’s
virtual hands, that would be undesirable but ul-
timately acceptable. This asymmetry is due to
the primacy of the human visual system: a per-
son’s sense of “where she is in the world” is tied
most strongly to what she sees; her hands and
feet are then perceived as being 50–150 cm below
that primary viewpoint.

take a shot, she’d risk walking into a wall of
the physical lab (or, more likely, she’d see the
“chaperone” bounds that the VR system inserts
into the scene to prevent players from walking
into walls). To avoid such a scenario, all curved-
space VR games should, if possible, keep their
primary virtual content centered in the middle
of the physical lab, and keep the player’s posi-
tion coherent with that primary content.

The most challenging curved-space VR apps to de-
sign may be those whose game content is inherently
large-scale, such as a potential VR version of Hyper-
Rogue [15]. Even games whose content may be only
a few meters across, such as the author’s 3D mazes
in any of several multi-connected spaces, neverthe-
less appear inﬁnite to the player, because the player
sees such a maze as an inﬁnite periodic structure,
beckoning her to wander beyond the bounds of the
fundamental domain (http://www.geometrygames.
org/TorusGames). How might we let the player travel
longer distances than her real-world room would per-
mit? One solution would be to give her the ability
to press a button and ﬂy through the scene, but that
approach risks motion sickness, due to the player’s
eyes seeing accelerations that her inner ear doesn’t
feel. A safer solution—one used in some ﬂat-space
VR apps—would be teleportation [19]: after selecting
a destination and pressing a button, the player “fades
out” from her current location, brieﬂy sees total dark-
ness, and then “fades back in” at her selected destina-
tion. More sophisticated ﬂat-space techniques, such
as saccadic redirection [20], could be applied in curved
space as well.

4 Computer graphics in curved

space

Our approach to curved-space graphics uses the same
sequence of transformations that ﬂat-space graphics
uses:

Model Space −→ World Space

−→ Eye Space

−→ Projection Space

• Keep the player away from the walls.

If the
player in the curved-space billiards game weren’t
anchored to the table, then if she parallel-
translated herself around a small circle several
times, she’d see the virtual table orbit around
her, eventually passing behind her back. At that
point, if she turned around to face the table and

An elementary exposition of computer graphics in S3,
E3 and H3 appears in [6]. The following subsections
summarize the essentials of that article, but with a
new approach to radians in the Euclidean case, a com-
ment on units in VR, a new way to visualize the pro-
jection transformation, and an algorithm for drawing
the “back hemisphere” in the spherical case.

11

Note: While recent ray-tracing [16, 12] and ray-
marching [11] work has produced beautiful curved-
space animations, as of early 2021 a traditional
rasterization approach remains more eﬃcient on
consumer-level VR hardware, so we’ll focus on that.

rewrite our matrix product as







(x y z ρ)

0
R00
0
R10
0
R20
∆x/ρ ∆y/ρ ∆z/ρ 1

R01
R11
R21

R02
R12
R22







4.1 Euclidean radians

A game like curved-space billiards typically uses ex-
actly the same computer code for all three spaces
(S3, E3 and H3), with no need to split into separate
cases. To make this possible, we need to change how
we think about—and implement—Euclidean transla-
tions, to make them consistent with how we handle
translations in the spherical and hyperbolic cases.

In the spherical case, the model, world, and eye
spaces are all 3-spheres of some desired radius ρ, sit-
ting in Euclidean 4-space (recall Figure 7(left)). The
model and view matrices are elements of the rotation
group O(4).

In the hyperbolic case, the model, world, and eye
spaces are all hyperbolic 3-spaces of some desired ra-
dius ρ, sitting in the Minkowski space (recall Fig-
ure 7(right)). The model and view matrices are ele-
ments of the Lorentz group O(3, 1).

Surprisingly, it’s the Euclidean case that requires
the greatest care. A standard computer graphics trick
is to take the coordinates (x, y, z) and append a “1” as
a fourth coordinate, so we can package up a rotation
R and a translation (∆x ∆y ∆z) as a single 4 × 4
matrix

(x y z 1)







R00 R01 R02
R10 R11 R12
R20 R21 R22
∆x ∆y ∆z







0
0
0
1

When you do the matrix multiplication, the “1” mul-
tiplies the ∆x ∆y ∆z and they get added in. The
awkward question here is: What are the units on
∆x, ∆y, and ∆z? If we’re measuring x, y, and z in
meters, are ∆x, ∆y, and ∆z also in meters? Yet the
rotational components Rij are dimensionless. Hav-
ing a transformation matrix with some dimensionless
entries and other entries in meters gives us a hint
that our understanding of that matrix is less than
complete. The situation becomes much clearer if in-
stead of representing Euclidean 3-space as a hyper-
plane at height w = 1, we represent it as a hyper-
plane at height w = ρ, and call ρ the “radius” of this
Euclidean space (Figure 7(center)). So now we can

and it’s abundantly clear that ρ is in meters, just like
x, y, and z, and ∆x/ρ, ∆y/ρ, and ∆z/ρ are dimen-
sionless, just like the Rij. The best way to think of
this is that ∆x/ρ, ∆y/ρ, and ∆z/ρ are translation
distances in Euclidean radians.

The big practical advantage to using Euclidean
radians is that, by having a purely dimensionless
transformation matrix acting on a position vector
(x, y, z, ρ) in pure meters, we make the Euclidean case
consistent with the spherical and hyperbolic cases,
which lets us use the same computer code for all three
spaces.

4.2 VR needs explicit units

When writing traditional non-VR animations, most
mathematicians (including the author) treated dis-
tances as dimensionless quantities, in eﬀect measur-
ing all distances in spherical, hyperbolic, or Euclidean
radians. And that was ﬁne: in a non-VR maze in a
3-torus or a non-VR ﬂight through a curved space,
explicit units aren’t needed.

In VR, by contrast, units are essential. The
player’s two eyes and two hands are immersed in the
simulated world, so the distances the player sees with
her eyes must agree with the distances she feels with
her hands. The player perceives her own physical
body as part of the scene.

For an acceptable VR simulation, we must know
(1) the space’s radius of curvature in meters and (2)
the size of each object in meters. To see why, con-
sider what happens when a player in a hyperbolic
billiards game changes the radius of curvature of the
space.
If she increases the radius of curvature, the
space as a whole will scale up, and any geometrical
structures whose size is tied to the radius of curvature
will also scale up. For example, the billiards table,
which we’ve deﬁned to be a right-angled regular pen-
tagon, will get larger. But the player’s body, whose
size in meters is ﬁxed, will not get larger. Nor will the
billiard balls, whose diameter is ﬁxed at 57 mm, nor
the cue stick, whose length is ﬁxed at 1 m. The ﬁnal
result is that when the player increases the space’s ra-
dius of curvature, she’ll ﬁnd herself playing billiards
on a larger right-angled pentagon, but with the same
familiar billiard balls and cue stick.

12

the numerical precision of the results as the ﬂoating-
point arithmetic’s ﬁnite precision gets spread out over
an ever taller box.

In the spherical case, that same division-by-z takes
not a frustum, but rather a solid I like to call the view
banana (Figure 21), to a rectangular box. Like a real
banana, the view banana has ﬂat sides and tapers
down at both ends.

In the hyperbolic case (Figure 22), we again map a
frustum-like solid onto a rectangular box, and again
it’s perfectly acceptable to push the frustum’s far wall
oﬀ to inﬁnity.

4.3 Visualizing the projection trans-

formation

As part of the standard graphics pipeline, a vertex
shader computes and reports each vertex’s position in
homogeneous coordinates (x, y, z, w). The Graphics
Processing Unit (GPU) then divides through by the
w-coordinate

(x, y, z, w) (cid:55)→

(cid:16) x
w

,

y
w

,

z
w

(cid:17)

, 1

to map the desired view frustum onto a rectangular
box in the w = 1 hyperplane.

Even though the GPU divides through by w, I
personally ﬁnd it easier to think in terms of di-
viding through by z instead. Dividing through by
z makes the projection’s geometrical eﬀect much
clearer. Moreover, essentially all vertex shaders ap-
ply a 90◦ rotation in the zw-plane before the GPU
divides through by w, to ensure that the GPU’s hard-
wired division-by-w reproduces the same eﬀect as our
geometrically clear division-by-z. Conceptually, the
projection formula for all three spaces (S3, E3 and
H3) becomes

(x, y, z, w) (cid:55)→

(cid:16) x
z

,

y
z

, 1,

(cid:17)

w
z

Figure 21: In spherical graphics, dividing by z maps
the view banana to a rectangular box (y coordinate
suppressed).

Figure 20: In Euclidean graphics, dividing by z maps
the view frustum to a rectangular box (y coordinate
suppressed).

In the Euclidean case, the division-by-z takes the
view frustum to a rectangular box, as desired (Fig-
ure 20).
It’s perfectly acceptable to push the frus-
tum’s far wall oﬀ to inﬁnity, thus mapping an inﬁnite
portion of a pyramid onto a ﬁnite rectangular box.
By contrast, if the frustum’s near wall gets too close
to the observer, it will push the rectangular box’s top
face upwards towards inﬁnity, which quickly degrades

Figure 22: In hyperbolic graphics, dividing by z maps
the view frustum to a rectangular box (y coordinate
suppressed).

13

4.4 The 3-sphere

Rendering images in the 3-sphere is a two-part pro-
cess. To see why, ﬁrst recall that in Euclidean graph-
ics, if we let the near clipping distance go to zero, the
short edge of the red trapezoid in Figure 20 would
approach the observer (the black dot), which would
send the top edge of its projected image (the top edge
of the red rectangle in the vertical plane) upwards to
inﬁnity. To avoid that problem, in Euclidean graph-
ics we always set the near clipping distance to some
ε > 0.

In spherical graphics, we face that same problem at
both the top and the bottom of the red view banana
on the sphere in Figure 21. To avoid trouble, we
must set the near clipping distance to some ε > 0
to keep the top edge of its projected image (the top
edge of the red rectangle in the vertical plane) from
going upwards to inﬁnity, and we must also set the
far clipping distance to π − ε to keep the bottom
edge of the projected image from going downwards
to inﬁnity.

One immediate consequence of this approach is
that an ε-neighborhood of the observer’s antipodal
point is always excluded from the rendered image.
This is not surprising, given that a tiny ﬂeck of dust
sitting at the antipodal point would ﬁll the observer’s
entire sky! While ray-tracing methods would have
no problem rendering the antipodal point, our mesh-
based methods always omit the antipodal point and
some tiny neighborhood surrounding it.

Our mesh-based methods can, however, easily see
through the antipodal point and render content that
sits on the “back side” of the 3-sphere. That is, we
may render content whose line-of-sight distance from
the observer falls in the range [π + ε, 2π − ε]. Be-
cause the observer’s lines-of-sight all reconverge at
the antipodal point, what the observer sees at dis-
tances [π + ε, 2π − ε] is precisely the same as what
her antipodal twin would see at distances [ε, π − ε].
In other words, to render the back hemisphere, we
may simply apply our usual methods to render what
the antipodal twin sees at distances [ε, π − ε].

Technical detail: The most eﬃcient way to im-
plement this on a Tile-Based Deferred Render is to
encode commands taking the 3-sphere’s back hemi-
sphere into the back half of the clipping box ( 1
2 ≤
z ≤ 1) and the front hemisphere into the front half of
the clipping box (0 ≤ z ≤ 1
2 ), and then let the ren-
derer process of the whole scene at once. That way
back-hemisphere objects that are eclipsed by front-
hemisphere objects will never get rendered at all.

If the observer’s head were perfectly transparent,
would we also have to render objects that she sees at

distances in the range [2π + ε, 3π − ε]? No, this isn’t
necessary, because these would be the same objects
that the observer sees at distances [ε, π − ε], and they
would ﬁll exactly the same portions of observer’s sky.

5 Native-inhabitant view vs.

tourist view

To focus on a distant object in hyperbolic 3-space,
an observer must look slightly cross-eyed, to com-
pensate for the space’s inherent geodesic divergence
(Figure 23). For native inhabitants of hyperbolic
space, this is ﬁne, because when they were babies
they learned that a certain positive vergence angle
means that the object they’re looking at is far away.
But a Euclidean-born tourist who visits hyperbolic
space would misinterpret that positive vergence an-
gle as meaning that the object is close. In fact the
tourist would see all of hyperbolic space crammed
into a small ball, of radius only a meter or two in the
case of the hyperbolic billiards game.

In a 3-sphere, by contrast, an observer must look
less cross-eyed than in Euclidean space, to compen-
sate for the space’s inherent geodesic convergence
(Figure 24). When an object is exactly 90◦ away,

Figure 23: In hyperbolic space, an observer must look
slightly cross-eyed to focus on a distant object.

Figure 24:
In a 3-sphere, an observer must look
“walleyed” to focus on objects more than 90◦ away.

14

like the blue (#2) billiard ball in Figure 24, the ob-
server doesn’t need to look crosseyed at all. For those
of us who grew up in Euclidean space, our binocular
vision makes that blue (#2) ball seem inﬁnitely far
away. If a ball is more than 90◦ away, like the red
(#3) ball in Figure 24, the observer must look slightly
“walleyed”—with a negative vergence angle—to focus
on it.

When designing a virtual reality simulation like the
curved-space billiards game, the developer must de-
cide whether to show the space the way the native
sees it, to show it the way the Euclidean-born tourist
sees it, or to oﬀer the user the choice. For me, the
tourist’s view is just too weird: as you walk around
hyperbolic 3-space, the entire contents of the universe
seem to move along with you, all trapped inside that
ﬁnite ball. Spherical space is even worse, because you
have to look walleyed to focus on distant objects. The
human visual system can do this to some extent, but I
personally ﬁnd it uncomfortable and vaguely distress-
ing. To avoid such discomfort, I recommend oﬀering
the native-inhabitant view only.

To simulate a rigorously correct native-inhabitant
view, we must trick the user’s eyes and brain into
perceiving each object’s true hyperbolic or spherical
distance. This is most easily accomplished by insert-
ing some extra steps into the graphics pipeline:

Model Space −→ World Space

−→ Nose Space

−→ Euclidean Tangent Space

−→ Eye Space

−→ Projection Space

Rather than mapping the scene’s contents from the
world space directly into the space of either eye, we
instead map them into a space centered at the bridge
of the player’s nose. From there we map them onto
the nose’s Euclidean tangent space in such a way that
the distance from each object to the player’s nose is
preserved. In cartography this is called an azimuthal
equidistant map. We then apply a Euclidean transla-
tion of the tangent space to map the scene’s contents
into the space of the player’s left or right eye, and
ﬁnally we apply the standard Euclidean projection.

While the azimuthal equidistant map cannot be
realized as a matrix multiplication, it can be real-
ized with a simple trigonometric computation, which
puts only a small extra burden on the vertex shader.
For example, in the spherical case, say an observer
at P = (0, 0, 0, ρ) is viewing some point of interest
Q = (x, y, z, w) on a 3-sphere of radius ρ meters (Fig-
ure 25). Let θ be the distance in radians from P to Q,
and let d be that same distance in meters (measured

along the 3-sphere itself, not in the 4-dimensional ball
that it bounds). We want to ﬁnd a point Q(cid:48) in the
tangent space that sits in the same direction from P
as Q does, and also sits d meters away (but in the
tangent space, not on the 3-sphere).

Proposition (for S3). The desired point Q(cid:48), as
deﬁned above, is given by the formula

Q(cid:48) =

(cid:18) θ

sin θ

x,

θ
sin θ

y,

θ
sin θ

(cid:19)

z, ρ

.

Proof. Let v = (x, y, z) be the “horizontal part of Q”,
and let r = |v| be its length. Figure 25 shows that
d = ρθ, w = ρ cos θ, and r = ρ sin θ. Let v(cid:48) be the
horizontal vector connecting P to Q(cid:48). The deﬁnition
of the azimuthal equidistant map requires that v(cid:48) be
parallel to v, but have length d instead of length r.
Hence we may compute v(cid:48) as a scalar multiple of v

Figure 25: Azimuthal equidistant map in S3: The
point Q (cid:48) sits the same distance from P, in the same
direction, as Q does, but Q (cid:48) sits in the tangent space
while Q sits on the 3-sphere itself.

Figure 26: Azimuthal equidistant map in H3: This
ﬁgure is essentially the same as Figure 25, but drawn
in Minkowski space instead of in Euclidean space. To
our Euclidean eyes, the distance along the arc from
P to Q looks longer than the distance from P to Q (cid:48)
in the tangent space, but when measured using the
Lorentz metric the two distances are the same.

15

v(cid:48) =

d
r

v =

ρθ
ρ sin θ

v =

θ
sin θ

v =

(cid:18) θ

sin θ

x,

θ
sin θ

y,

θ
sin θ

(cid:19)

z

Setting

Q(cid:48) = P + v(cid:48) = (0, 0, 0, ρ) +

(cid:18) θ

sin θ

x,

θ
sin θ

y,

θ
sin θ

(cid:19)

z, 0

gives the required formula. (cid:4)

To compute θ, recall that w = ρ cos θ, where w
and ρ are both already known, so our shader code
becomes

CosineTheta = clamp(w/rho, -1, +1)
Theta = acos(CosineTheta)
SineTheta = sin(Theta)
if SineTheta > 0.0001

Factor = Theta / SinTheta

else

Factor = 1

// correct near north pole,
// but not near south pole

Qprime

= (Factor * x, Factor * y, Factor * z, rho)

Technical note: When rendering the back hemisphere
we must set Factor = (π +θ)/ sin θ in the shader code
above, so that back-hemisphere objects get drawn in
the azimuthal equidistant map at distances in the
desired range [π + ε, 2π − ε].

The computations for the hyperbolic case (Fig-
ure 26) are essentially the same, but with sinh and
cosh instead of sin and cos:

Proposition (for H3). In the hyperbolic case, the
desired point Q(cid:48) is given by the formula

Q(cid:48) =

(cid:18) θ

sinh θ

x,

θ
sinh θ

y,

θ
sinh θ

(cid:19)

z, ρ

.

Proof. The hyperbolic proof follows the spherical
proof line by line, but with the geometry shown in
Figure 26. (cid:4)

The shader code for the hyperbolic case is

CoshTheta = clamp(w/rho, +1, +infinity)
Theta = acosh(CoshTheta)
SinhTheta = sinh(Theta)
if SinhTheta > 0.0001

Factor = Theta / SinhTheta

else

Factor = 1

// correct near north pole

Qprime

= (Factor * x, Factor * y, Factor * z, rho)

6 Mental models of space

The algorithm presented in Section 5 lets the observer
use her Euclidean binocular vision to see every point
in the space at its correct hyperbolic or spherical dis-
tance. This eliminates the illusion that all of hyper-
bolic space sits in a small ﬁnite ball, and also elim-
inates the need for the observer to look walleyed in
spherical space. However, even though the observer
perceives all objects at their true hyperbolic or spher-
ical distances, there’s still the rich and interesting
question of how the observer’s brain integrates those
distances into a mental model of the space [3]. The
article [3] illustrates this question with the following
example:

. . . imagine a cue stick sitting 1 meter in
front of your face in Euclidean space (Fig-
ure 27). Point C (the stick’s midpoint) is
closest to you, points B and D are slightly
further away, and points A and E are fur-
ther still. If you repeat this experiment in
spherical space, you’ll observe almost the
same thing. . . except that distances increase
a little more slowly as you shift your atten-
tion from point C to D and thence to E.
And, by contrast, the distances increase a
little more rapidly in hyperbolic space.

Figure 27: The cue stick’s midpoint C is
closest to you. How fast the distance in-
creases as you shift your attention from
point C to point D and thence to E de-
pends on the curvature of the ambient
space.

So when you put on the VR headset
and play hyperbolic billiards, even though
the app is showing you the correct hyper-
bolic distance to every point on that cue
stick, your brain chooses to misinterpret
that data as a curved stick in a ﬂat space
(Figure 28(b)), rather than as a straight
stick in curved space (Figure 28(a)).
If, while you’re playing billiards, you shut
one eye, the eﬀect disappears immediately:
the cue stick instantly looks straight! If you
spent enough hours playing hyperbolic bil-
liards (with both eyes open!), your brain
might start to see the cue stick as straight,
but I think that would be an unhealthy ex-
periment. Please don’t try it.

16

and hands stay coherent with the table as well as
with each other. In the case of VR simulations with
no tangible components, we could either compute the
hand poses relative to the head, or compute both rel-
ative to some virtual object that we expect to remain
close to the center of the user’s play area. Future
work here may depend heavily on the details of the
individual VR applications.

We have found that the same computer code often
works for all three isotropic spaces (spherical, Eu-
clidean and hyperbolic), with almost no need to split
into separate cases, if certain principles are followed.
The simplest—but most surprising—such principle
is the need to assign a “radius” to a simulated Eu-
clidean space (just as we assign a radius to a simu-
lated 3-sphere and to a simulated hyperbolic 3-space),
and to measure Euclidean translation distances in
“Euclidean radians” (just as we measure rotations
of a sphere in radians, and measure translations of
hyperbolic 3-space in hyperbolic radians). A second
principle is that a slight modiﬁcation to how we vi-
sualize the projection transformation lets us easily
see the spherical and hyperbolic analogs of the tra-
ditional Euclidean view frustum. Those principles,
together with a careful distinction between distances
in meters and distances in radians, and some special
attention to the back hemisphere of the 3-sphere, al-
low for accurate and eﬃcient rendering in the three
isotropic spaces.

We have found that a Euclidean-born tourist vis-
iting a curved space grossly misjudges distances, be-
cause when her eyes focus on an object, her brain
misinterprets the vergence angle based on her prior
Euclidean experience, rather than on the required
curved-space relationship between vergence angle and
distance. To correct for this, we modiﬁed the graphics
pipeline so that a Euclidean-born tourist will perceive
each object at its correct curved-space distance.

that,

I was

surprised to discover

even with
the vergence-angle adjustment just described, a
Euclidean-born tourist nevertheless perceives the
space diﬀerently than a native-born inhabitant would
perceive it. The reason is that after one part of the
player’s brain interprets vergence angles as perceived
distances, some other part of the player’s brain in-
tegrates those perceived distances to form a mental
model of the 3-dimensional space. Much work re-
mains to be done to understand how people’s mental
model responds to being in a curved space and, for
example, playing a game like billiards there. Because
such an investigation would extend far beyond my
own skill set, I have made plans with a psychology
professor (a specialist in spatial perception) for us
to test this in her lab. At the most basic level, it

(a) A native inhabitant of hyperbolic 3-space
perceives a straight cue stick in a curved space.

(b) A Euclidean-born tourist incorrectly
perceives a curved cue stick in a ﬂat space.

Figure 28: The native and the tourist
see the same cue stick in the same hy-
perbolic space, yet they interpret what
they see very diﬀerently.

Exercise for the reader: If a person born
and raised in hyperbolic space were to come
visit us here in Euclidean space, how would
she perceive one of our cue sticks?

7 Conclusions and future work

We have noted that in any VR simulation of curved
space, the geometrical eﬀects of holonomy would
cause the player’s head and hands to gradually lose
coherence, in the sense that what the player sees with
her eyes would become inconsistent with what she
feels with her hands. To maintain body coherence,
the simulation must compensate for those holonomy
eﬀects. In the case of the curved-space billiards game,
there’s the additional constraint of maintaining co-
herence with a physical table. Fortunately the ta-
ble facilitates an eﬀective solution: we compute the
player’s head and hand poses relative to a nearby
point on the table edge, which ensures that the head

17

will be interesting to check whether all people per-
ceive curved spaces the same way. For example, for a
given space (spherical, Euclidean or hyperbolic) and
a given viewing mode (native-inhabitant or tourist),
do all people agree about whether the billiards table
and the cue stick appear convex, straight, or con-
cave? When they shut one eye, do they all agree that
the cue stick instantly looks straight? At a deeper
level, I look forward to learning more about people’s
mental model of space, how it responds to curved-
space experiences, and how it might vary from per-
son to person. Unfortunately the planned laboratory
experiments cannot begin until after the COVID-19
pandemic gets brought suﬃciently under control.

References

[1] Richie’s plank experience trailer.

Available
online at https://www.youtube.com/watch?v=
4M92kfnpg-k; 2017. Accessed: 2021-02-23.

[2] Hart,

V, Hawksley,

A, Matsumoto,

E,
H. Non-euclidean virtual real-
Segerman,
ity I: explorations of H3.
In: Proceedings of
Bridges 2017: Mathematics, Music, Art, Ar-
chitecture, Culture. 2017, p. 33–40. Available
online at https://archive.bridgesmathart.
org/2017/bridges2017-33.html.

J. Non-euclidean billiards in VR.
[3] Weeks,
In:
Proceedings of Bridges 2020: Math-
ematics, Music, Art, Architecture, Cul-
ture. 2020, p. 1–8.
Available online at
https://archive.bridgesmathart.org/
2020/bridges2020-1.html.

[4] Velho,

L, Silva,

V, Novello,
the

Im-
T.
mersive visualization of
classical non-
Euclidean spaces using real-time ray tracing
In: Proceedings of Graphics In-
in VR.
terface 2020. 2020, p. 423–430.
Available
online at https://graphicsinterface.org/
proceedings/gi2020/gi2020-42/.

J. Real-time rendering in curved
IEEE Computer Graphics & Appli-
Available online at

[6] Weeks,
spaces.
cations 2002;22:90–99.
http://www.geometrygames.org/Articles/
RealTimeRenderingInCurvedSpaces.

[7] Novello, T, Silva, V, Velho,

L. Global
illumination of non-Euclidean spaces. Com-
puters & Graphics 2020;93:61–70. Available
online at https://www.sciencedirect.com/
science/article/pii/S0097849320301485.

[8] Hart,

V, Hawksley,

A, Matsumoto,

E,
Segerman, H. Non-euclidean virtual reality
II: explorations of H2 × E.
In: Proceedings of
Bridges 2017: Mathematics, Music, Art, Ar-
chitecture, Culture. 2017, p. 41–48. Available
online at https://archive.bridgesmathart.
org/2017/bridges2017-41.html.

Non-euclidean virtual

[9] Coulon, R, Matsumoto, E, Segerman, H,
real-
Trettel,
S.
In: Proceedings of Bridges
ity III: Nil.
2020: Mathematics, Music, Art, Architecture,
Culture. 2020, p. 153–160.
Available on-
line at http://archive.bridgesmathart.org/
2020/bridges2020-153.html.

Non-euclidean virtual

[10] Coulon, R, Matsumoto, E, Segerman, H,
real-
Trettel,
S.
ity IV: Sol.
In: Proceedings of Bridges
2020: Mathematics, Music, Art, Architecture,
Culture. 2020, p. 161–168.
Available on-
line at http://archive.bridgesmathart.org/
2020/bridges2020-161.html.

[11] Coulon, R, Matsumoto, E, Segerman, H,
Trettel, S. Ray-marching Thurston geometries;
2020. Preprint available at https://arxiv.
org/abs/2010.15801.

[12] Novello, T, Silva, V, Velho, L. Visualization of
Nil, Sol, and (cid:102)SL(2, R) geometries. Computers &
Graphics 2020;91(6):219–231. Preprint version
available
https://www.visgraf.
impa.br/ray-vr/wp-content/uploads/2020/
03/vis-nil-sol-sl2.pdf.

online

at

[13] Weeks, J. Real-time animation in hyperbolic,
spherical, and product geometries. In: Prekopa,
A, Moln´ar, E, editors. Non-Euclidean Geome-
tries: J´anos Bolyai Memorial Volume. Springer;
2006, p. 287–305.

[5] Phillips, M, Gunn, C. Visualizing hyperbolic
space: unusual uses of 4 × 4 matrices.
In:
Proceedings of the 1992 Symposium on Inter-
active 3D Graphics. 1992, p. 209–214. Avail-
able online at https://www.researchgate.
net/profile/Charles_Gunn/publication/
220792023_Visualizing_Hyperbolic_
Space_Unusual_Uses_of_4x4_Matrices/
links/58a7605292851cf0e3b9730a/
Visualizing-Hyperbolic-Space-Unusual-Uses-of-4x4-Matrices.
pdf.

[14] Berger, P. Espaces imaginaires, motifs et mi-
rages; 2015. Available online at http://espaces-
imaginaires.fr/works/ExpoEspacesImaginaires2.html.

18

[15] Kopczy´nski, E, Celi´nska, D. HyperRogue:
Thurston geometries; 2019. Available online at
http://zenorogue.blogspot.com/2019/09/
hyperrogue-112-thurston-geometries-free.
html.

[16] Kopczy´nski, E, Celi´nska, D. Real-time visual-
ization in non-isotropic geometries; 2020. Avail-
able online at https://arxiv.org/abs/2002.
09533.

[17] Novello, T, Silva, V, Velho, L. Visualization
of Nil, SL2 and Sol (animations); 2020. Avail-
able online at https://www.visgraf.impa.br/
ray-vr/?page_id=252.

[18] Weeks, J. The Shape of Space. 3rd ed.; CRC

Press; 2020.

[19] Boletsis,

J.

VR loco-
C, Cedergren,
motion in the new era of virtual
reality:
An empirical comparison of prevalent tech-
niques. Advances in Human-Computer Inter-
action 2019;Available online at https://www.
hindawi.com/journals/ahci/2019/7420781/.

[20] Sun, Q, Patney, A, Wei, L, Shapira, O, Lu, J,
Asente, P, et al. Towards virtual reality inﬁnite
walking: Dynamic saccadic redirection. ACM
Transactions on Graphics 2018;37(4). Avail-
able
at https://research.nvidia.
com/sites/default/files/pubs/2018-08_
Towards-Virtual-Reality/paper_0.pdf.

online

19

