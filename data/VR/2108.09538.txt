Using Trajectory Compression Rate to Predict Changes in Cybersickness
in Virtual Reality Games

Diego Monteiro*
Department of Computing
Xi’an Jiaotong-Liverpool University
DMT Lab
Birmingham City University

Hai-Ning Liang†, Xiaohang Tang‡
Department of Computing
Xi’an Jiaotong-Liverpool University

Pourang Irani§
Department of Computer Science
University of Manitoba

1
2
0
2

g
u
A
1
2

]

C
H
.
s
c
[

1
v
8
3
5
9
0
.
8
0
1
2
:
v
i
X
r
a

ABSTRACT

Identifying cybersickness in virtual reality (VR) applications such
as games in a fast, precise, non-intrusive, and non-disruptive way
remains challenging. Several factors can cause cybersickness, and
their identiﬁcation will help ﬁnd its origins and prevent or minimize
it. One such factor is virtual movement. Movement, whether phys-
ical or virtual, can be represented in different forms. One way to
represent and store it is with a temporally annotated point sequence.
Because a sequence is memory-consuming, it is often preferable to
save it in a compressed form. Compression allows redundant data to
be eliminated while still preserving changes in speed and direction.
Since changes in direction and velocity in VR can be associated
with cybersickness, changes in compression rate can likely indicate
changes in cybersickness levels. In this research, we explore whether
quantifying changes in virtual movement can be used to estimate
variation in cybersickness levels of VR users. We investigate the
correlation between changes in the compression rate of movement
data in two VR games with changes in players’ cybersickness levels
captured during gameplay. Our results show (1) a clear correla-
tion between changes in compression rate and cybersickness, and
(2) that a machine learning approach can be used to identify these
changes. Finally, results from a second experiment show that our
approach is feasible for cybersickness inference in games and other
VR applications that involve movement.

Index Terms: Human-centered computing—Empirical studies in
HCI; Human-centered computing—Virtual reality Human-centered
computing—HCI design and evaluation methods

1 INTRODUCTION

Cybersickness affects many virtual reality (VR) users and remains
a signiﬁcant challenge [17, 48]. Although cybersickness has been
studied widely [5,17,27,35–37,41,42,46,48], the underlying factors
that can help identify and predict it are not yet fully understood [8].
Identifying cybersickness is a challenging yet essential task if we
want to minimize or eliminate it. As we identify and understand
more of the factors associated with cybersickness [36, 56], the easier
it will be to create efﬁcient, effective, and simple non-intrusive and
non-disruptive ways to prevent or at least mitigate it [6,13,35,36,57].
One well-known trigger of cybersickness symptoms is the illusion
of movement caused by visual stimuli without the accompanying
vestibular ones (e.g., the feeling of motion when seeing an adja-
cent vehicle move while the observer is stationary) [27]. Further, it
has been shown that rotational movement, such as turning or look-
ing sideways, is more sickening than translational movement (i.e.,

*Corresponding author; e-mail: Diego.VilelaMonteiro@bcu.ac.uk
†Corresponding author; e-mail: HaiNing.Liang@xjtlu.edu.cn
‡e-mail: Xiaohang.Tang19@student.xjtlu.edu.cn
§e-mail: Pourang.Irani@cs.umanitoba.ca

moving facing a constant direction) [4, 26, 31, 49].

One way to determine cybersickness is to measure the type of
movement users make, whether it has rotational changes or just
unidirectional movement. To do this measurement, we need to
represent movement computationally. One of the most common and
intuitive ways to represent and measure movement data is through
a sequential time series of positional points [2]. One feature of
such a representation is that it can be simpliﬁed and compressed
[38]. Data compression techniques work best on redundant (or
repeated) data [3, 30, 47]—that is, data that represent a path that is
unidirectional than with many turns and rotation changes [12]. It
is possible to assume that movement patterns following a straighter
path at a constant speed present greater redundancy and are more
prone to compression. Accordingly, we can use the compression
rate of movement data to detect whether users follow a straighter
path or have many turns. That is, we can use compression rate as a
measure of possible cybersickness experienced by VR users.

Our literature review and understanding of compression rate led
us to two hypotheses: (H1) There is a negative correlation between
compression rate and cybersickness; and (H2) Changes in com-
pression rate can be used to infer changes in cybersickness. We
ran an experiment where participants would move through two VR
environments while having their discomfort and movement trajecto-
ries recorded periodically to evaluate these two hypotheses. After
an in-depth analysis of the collected data, we were able to corre-
late changes in the compression of users’ navigation patterns with
changes in their cybersickness levels. We then applied our ﬁndings
in a proof-of-concept experiment to predict the level of cybersick-
ness in a navigation application. Our approach was able to predict
with relatively little error the changes in cybersickness levels, both
positively and negatively.

Our contributions are two-fold: (1) presenting a novel correlation
between trajectory compression rate and cybersickness, and (2)
demonstrating experimentally that a machine learning approach can
be used to identify changes in cybersickness using this measurement.
This paper is organized as follows. We next present a literature
review where we describe the theoretical background that led us to
the two hypotheses mentioned above. We then present the environ-
ments and algorithms used to test and verify our two hypotheses,
allowing us to create a functional prediction tool used in the second
experiment. Finally, we discuss the results and their implications for
future development.

2 THEORETICAL BACKGROUND

Researchers have been studying cybersickness for quite some time
since even before the advent of current consumer head-mounted
displays (HMD). However, its origins are still not entirely well
understood [10, 17]. Studies point to a relationship with motion sick-
ness. It has been empirically demonstrated that one factor associated
with cybersickness symptoms is the illusion of movement [27]. How-
ever, it is difﬁcult to pinpoint when these symptoms start because of
the way cybersickness is measured.

Another critical discussion is how to represent movement and

 
 
 
 
 
 
identify changes in it, which can be used to predict cybersickness.
Thus, this literature review is divided into two main themes: (1)
measurements to identify cybersickness; and (2) computational rep-
resentations of movement and its compression methods. They are
then subdivided into four parts.

2.1 Movement Type Affects Cybersickness

Various behavioral and technological factors can inﬂuence the level
of cybersickness experienced by people. These factors include
having enough rest, practicing speciﬁc eating habits, and the screen’s
ﬁeld of view and refreshing rate [44]. Nevertheless, these factors can
be challenging to observe and control from an application standpoint.
Factors that can be registered within a VR application include self-
motion components like velocity [50] and rotational movement [31],
which can be captured easily.

Keshavarz et al. [26, 27] observed that self-motion alone is not
enough to cause sickness but is a facilitator or enhancer because
virtual velocity can increase cybersickness [50]. Other studies found
that the sickness level would increase just by adding a single type
of rotation [31]. Adding another type of rotation increased it even
more [26]. Thus, it is likely these kinds of movements (that is,
changes in velocity and rotational navigation) performed by the user
can be precursors of cybersickness. This observation could be one
reason locomotion techniques that avoid or limit movement, such as
Teleport, are found to mitigate cybersickness.

2.2 Measuring Cybersickness

The identiﬁcation and measurement of cybersickness mostly rely
on subjective metrics, such as questionnaires, like the Simulator
Sickness Questionnaire (SSQ) [25] and Virtual Reality Sickness
Questionnaire (VRSQ) [28] or marking the discomfort level in a
scale midway through a game or after playing it [15]. These ap-
proaches have clear disadvantages. Using questionnaires to measure
cybersickness after completing the experiment loses the nuances
and speciﬁcity needed to identify when and why participants are
getting sick. Frequent incomplete information can potentially lead
to erroneous conclusions and overgeneralizations. Besides, asking
the participants to have a long pause or pauses mid-game and collect
their sickness levels can be equally problematic outside of an experi-
mental setting. It can potentially disrupt the immersive experience
and be detrimental to the in-game ﬂow experience and performance
in games. In many fast-paced games, seconds between actions can
be the difference between success and failure.

The alternatives to questionnaires or lengthy mid-game interrup-
tions are physiological or psychophysiological metrics to detect
cybersickness. These techniques usually rely on machine learn-
ing classiﬁcation to analyze the data and have produced positive
results [14, 22, 23, 54, 55]. One notable result is that of Islam et
al. [23], whose approach was able to predict cybersickness with 97%
accuracy. Other studies involve skin conductance that correlates
to nausea measurements [18] and eye movements that can explain
over a third of the total variance in cybersickness [9]. Further, these
physiological techniques can be predictive, such as using data of
eye movement [9], [53], heart rate [51], brainwaves [40], [24], and
vestibular-evoked myogenic potentials [16]. The approach presented
in [23] combined them and was able to achieve predictions with
almost 90% accuracy. Though all these techniques and approaches
have potential, they present disadvantages. They often require ex-
pensive, cumbersome, and sometimes intrusive equipment, limiting
the application potential of new techniques to mitigate cybersickness
and making it difﬁcult to assess sickness in commercial products
outside a controlled research environment.

Some recent works have focused on information that can be
acquired in-game rather than through expensive sensors [21, 43].
Porcino et al. [43] use a series of in-game data (such as virtual
movement) and data acquired from a demographics questionnaire

to detect when participants start to have some form of discomfort.
However, they relied on a long demographics questionnaire. Hell
and Argyriou [21] used a similar methodology to estimate the degree
of nausea likely to be caused by a virtual roller coaster. However,
their technique cannot work for dynamic, online detection.

In short, it would be of great advantage to be able to detect
cybersickness fast and without resorting to expensive equipment or
signiﬁcantly disrupting immersion and ﬂow during VR experiences
with long pauses. As stated earlier, because movement in VR can be
associated with sickness [43], it might be possible to use changes in
movement during user-VR interaction as a simple and inexpensive
marker to gauge alterations in discomfort and cybersickness.

2.3 Movement Representation

Representing natural phenomena computationally is challenging
[32]. For every phenomenon, various ways can be used to capture
and describe speciﬁc aspects or ﬁt within the machine’s limitations
[11, 33]. One such phenomenon that can be represented in several
ways is movement. Possible ways to represent it include vectors and
ﬂow networks [45] or equations of motion [19]. While these kinds
of representations are helpful and can be memory efﬁcient, they
often require extensive pre-processing and are thus not adequate for
dynamic applications [19, 38].

Trajectories are one of the most appropriate ways of representing
and storing movement [39]. According to Renso et al. [45], trajecto-
ries are segments of movement. Although movement is inherently
continuous, it cannot be stored as such in computers where the stored
data is discrete. Alvares et al. [2] have stated that data representing
moving objects are ordinarily available as sample points in the form
of (tid, x, y, z, t). In this representation, tid is an object identiﬁer
while x, y, z, and t are respectively a set of three-dimensional spa-
tial coordinates and a time stamp. This kind of representation is
commonly used in scientiﬁc and commercial applications [12]. We
chose to work with this discrete representation because it is the most
common and more easily translatable to an active gaming environ-
ment or other similar VR applications. It can be used in real-time
with little or no pre-processing because these stored trajectories can
be simpliﬁed further by compression, reducing memory demand and
processing power.

2.4 Trajectory Compression

In 1973, Douglas-Peucker proposed one well-known compression
technique, which has been studied and improved over the years [52].
This technique calculates the distance between the current point
and the path drawn by a straight line that is imagined between both
the current point’s neighbors. If the distance is below a threshold,
the point is eliminated. It was designed for line simpliﬁcation and,
although it can be used to compress trajectories, it often affects the
temporal aspects (such as stored object speed).

To minimize the Douglas-Peucker algorithm’s loss when dealing
with spatiotemporal data, Meratnia and By [34, 52] have proposed
a new technique that takes into consideration both speed and posi-
tion when compressing trajectory data [38]. Their technique works
differently and, instead of considering if the middle point should be
eliminated, this technique works with a pair of points at a time. Us-
ing the position and speed of the pair, they extrapolate the next point
and, if the distance between the predicted and actual point is below
a threshold, the following point becomes the last in the pair and the
ﬁrst remains the same; otherwise, a new pair is formed starting from
the former last point. Because Meratnia and By’s technique does
not require knowledge of the whole setup, it can be used in dynamic
applications [34, 52]. Although simple in conceptualization, com-
pression approaches based on this technique are very effective and
efﬁcient, making them relevant to various real-life applications [12].
Fig. 1 shows two examples of trajectories that are represented
and later compressed. Trajectories A and B are sampled at regular

Figure 2: A diagram of the dual handheld controller and its functions.
The orange markings show the controls associated with movement of
the character. The left joystick is used to rotate the character’s view-
point while the right joystick is used to move the character. The blue
markings show the controls associated with entering the Discomfort
Score (see also Fig. 5 below). The two trigger buttons are used to
move the slider left and right and pressing the right joystick is used
make a conﬁrmation.

3.1 Participants

We recruited a total of 10 participants (3 females) from a local
university with an average age of 19.3 (s.d. = 0.46), ranging from 19
to 20. All volunteers declared to have normal or corrected-to-normal
vision, and none of them declared any history of color blindness or
health issues. Two had experience with VR systems.

3.2 Apparatus

We used an Oculus Rift S with its accompanied controller as our
HMD because it is one of the most common, popular ready-made
VR devices. A desktop with 16GB RAM, an Intel Core i7-7700k
CPU @ 4.20GHz, a GeForce GTX 1080Ti dedicated GPU, and a
standard 21.5” 4K monitor were used to drive the HMD.

3.2.1 Game Environments

The games in our experiment were developed in-house using Unity.
We implemented them in-house to avoid or minimize confounding
factors. We created the environment using the metric system and
deﬁned one Unity unit to be equal to one meter [1]. To avoid confu-
sion with real-world movement, we would refer this measurement
unit as Unity Meter (Um for short).

The two games consisted of one maze escape (Maze) and the other
was an obstacle race-like challenge (Race). They were representative
of typical ﬁrst-person tasks in which players were required to get to
the end before running out of time. As such, all character movements
(i.e., acceleration and rotation) were performed using the joysticks in
the controller. They were designed to work with a standard Oculus
controller (see Fig. 2). The movement of the character was controlled
using the controller’s joysticks and happened in a continuous fashion
(standard Unity movement). In other words, pushing the joystick
towards the desired direction would see all the frames relative to that
movement.

The ﬁrst game, the maze, was a typical escape game (task). Play-
ers were positioned at the beginning of the maze and instructed to
ﬁnd the exit within a speciﬁed time. The environment was open on
the top and had tall beige walls towering beyond the player’s ﬁeld
of view. The maze did not have any other visual cues that could lead
to path memorization (see Fig. 3). It was designed to make players
turn their characters (i.e., their camera) at least 40 times at 90º or
more, a design that would increase rotation and thus the possibility
of cybersickness [4, 26, 31, 49]. There were no other adversarial or
stressing factors (e.g., no enemies, no path changes, no clock ticking

Figure 1: Example of trajectory sampling, storage, and compression.
Time (t) and distance (d) are abstract values and constant in all
ﬁgures. (I, Top) Trajectories A and B are sampled at regular intervals
(t=1); both trajectories are faster between t=2 and t=4 than during the
other intervals. (II, Middle) Later, they are stored as a sequence of
points. (III, Bottom) Finally, the points that do not represent changes
in direction or speed are removed. Trajectories A and B both lose a
point at t=1, whose speeds and positions can be inferred from their
respective t=0 and t=2. Only Trajectory A loses a point at t=3; its
speed and position can be inferred from t=2 and t=4. In Trajectory
B, the equivalent point represents a change in direction; if it was
eliminated, an erroneous t=3 could be estimated (red striped path and
circle).

intervals (Fig. 1.I). Later, they are stored as a sequence of points
(Fig. 1.II). Finally, the points that do not represent changes in direc-
tion or speed are removed. In this example, two points are removed
from Trajectory A, whereas only one is removed from Trajectory B
(Fig. 1.III).

Two observations are important to highlight. First, compression
is the most effective when redundancy is present [3,12], for example,
in a straight line or a stationary object. Second, turns and increases
in speed have been demonstrated to increase sickness in virtual
environments [50]. These two observations led us to hypothesize
that a trajectory with many redundant points, such as a straight line,
will be less likely to cause sickness than a trajectory that cannot
be compressed (or has a lower rate of compression) because of the
presence of turns. More succinctly, we formed the two hypotheses
presented in the introduction.

3 EXPERIMENT A

We conducted a two-part experiment to collect the necessary data
for correlation analysis. The experiment aimed to investigate if the
results would support our hypothesis of the correlation between
cybersickness and trajectory compression and inform the design of
the following experiment that would access its applicability in a
gaming environment.

This experiment was classiﬁed as low risk research and was
approved by the University Ethics Committee at Xi’an Jiaotong-
Liverpool University (#21-01-09).

Figure 3: The maze environment used in our experiment. (Left) A
bird’s-eye view of the maze; it needs players to make at least 40 turns
to ﬁnd the exit. (Right) A view of the high wall in the maze from within.

Figure 4: The race environment used in our experiment. (Left) A
bird’s-eye view of the track. (A) represents the start and ﬁnish points
within the tracks; (B) shows a zoomed-in region of the track. (Right) A
view of the Race game environment, where there is an obstacle that
the user needs to avoid running into as seen from within the track.

noises), nor any other incentives to turn. During movement, their
speed was 2 Unity Meters per second (Um/s).

The second game environment, the race, consisted of an obstacle
course. Players were positioned at the starting point and informed
they had to follow a roughly deﬁned path (a lap) within the least
possible time. In the path, there were barriers to be circumvented
by the player. The obstacles were visibly colored red to avoid
any confusion from the player (Fig. 4). Fog was used to hide the
obstacles beyond ﬁve rows. In this task, the player could control
the speed via the controller’s joystick (with a maximum speed of 10
Um/s).

3.2.2 Evaluation Metrics

To collect the in-game Discomfort Score quickly and as non-
interruptive as possible, we adopted the technique reported in [15].
We presented on the screen a sliding Scale from 0 to 10 to collect the
participants’ current level of sickness dynamically while the game
would still be running in the background (see Fig. 5). Zero meant
no discomfort, and ten meant that the participant felt so ill that the
game (and thus the experiment) had to be stopped. Participants used
the back-triggers to move the slider to the left or right and pressed
the right joystick to conﬁrm the answer (see also Fig. 2 above). Typ-
ically, it would take less than a second for participants to make a
selection.

The participants’ position was recorded using a logging function
in Unity. In this function, the character’s (camera’s) global position
in the world was recorded in the (tid, x, y, z, t) format. A sequence of
these positions was then used in the dynamic compression algorithm.
The algorithm used to compress the player’s trajectory is based on

Figure 5: An example of a screenshot when the Discomfort score is
being collected during the race game while it is still running in the
background.

the implementation of the spatiotemporal compression algorithm
[34] described in [38] (see also Sect. 2.4). It uses the speed and
direction between two points to estimate where a third one would
be. It would keep the points if either speed or direction changed.

We used a threshold of 0.4 Unity Meters (Um) between real and
expected positions to decide what points to eliminate. This threshold
was selected through prior experimentation, where we found that
such value represented a suitable balance and worked reliably in our
context. The results from this experimentation pointed to a value
between 0.25 Um and 0.5 Um. Smaller values would barely remove
any points, while greater values would remove virtually all the points.
In the end, we decided to use 0.4 Um for the current study. As our
results would show, this worked well in our experiments.

We then evaluated the compression rate of the segment by divid-
ing the eliminated points by the original number of points. We calcu-
lated the compression rate within 2-minute windows, which matched
the Discomfort Score measurements. The changes in compression
rate were calculated based on the difference between the current
x-minute window compression rate and the previous x-minute win-
dow compression rate, where x is a time pre-determined and can
be adjusted when needed. In other words, let Rw be the number of
points removed from the trajectory by the compression algorithm
in the current x-minute window w, and Tw be the total number of
points in the same window w. We then have the compression rate
Cw as Equation 1:

Cw = Rw/Tw

(1)

Then, we can deﬁne the compression rate in the former x-minute

window w − 1 as Equation 2:

Cw−1 = Rw−1/Tw−1

(2)

Finally, we have the difference in compression rate between x-

minute windows as Equation 3:

∆Cw = Cw/Cw−1

(3)

3.3 Procedure

Experiment A was divided into two tasks, one for each game, to
collect data from participants during the two different trajectory
scenarios.

Upon arrival and after consenting to participate in the experiment,
all participants completed a demographics questionnaire and were
divided into two groups, A and B. They were then instructed to
play the game according to their group. Group A ﬁrst played the

Figure 6: Mean Discomfort Scores according to the two groups for
the Maze and the Race games.

Training

Table 1: Prediction against Classiﬁcation. Lower means that the
Discomfort Score would decrease, and higher means that it would
increase. The empty row in between means no change would happen.

Classiﬁcation

Predicted

Sample

Lower

Higher

Correct

Lower

Higher

Global

Lower

Higher

Global

7

0

1

5

0

0

1

4

1

0

1

1

6

6

33

1

1

13

50.0%

40.0%

94.3%

74.6%

83.3%

50.0%

92.9%

86.4%

Test

The compression rate for the Maze conditions was higher than the
one for the Race conditions. On average, the algorithm eliminated
35.5% of trajectory points in the Race game and 77.6% of the
trajectory points in the Maze game (that is, a difference of 42%).

Although the compression rate was quite different in both con-
ditions, the mean variation between subsequent compression rate
was similar (-1.2 in the Race condition and -1.1 in the Maze condi-
tion) and was further validated by an RM-ANOVA (p = .844). The
absolute compression rate is weakly correlated to the absolute Dis-
comfort Score (rs(103) = .379, p < .001). However, the variation
in the compression rate and the variation in the Discomfort Score
were moderately correlated (rs(81) = .492, p < .001).

3.4.3 Predicting the Discomfort Score

Using the standard Multi-Layer Perceptron (MLP) function from
SPSS 241, the compression rate, and changes in compression as
input parameters, it is possible to determine if the Discomfort Score
would rise in over 90% of cases. However, the MLP struggled to
predict if the discomfort would be constant (see Table 1).

For this model, we used a 70/30 division between training and
testing with normalized data. The MLP had one hidden layer with
three neurons and the SoftMax activation function (the standard in
SPSS 24). Both compression rate and changes in compression rate
were equally important for the predictions.

3.5 Discussion

Our primary research question has been answered negatively. Our
results do not suggest a negative correlation between compression
and Discomfort Score (H1). However, our analysis indicates that
it is indeed possible to use changes in the trajectory’s compression
rate to identify changes in the level of cybersickness (H2). Our
results show that because of the way that compression changed, it is
quite possible to use the variations in compression rate as one of the
reference factors for identifying cybersickness dynamically during
gameplay.

Moreover, our results show that this technique can be applied to
other environments that use the same kind of controller and move-
ment because it is not based on a single set of parameters but on the
user’s current changes in behavior pertinent to that environment. It
worked quite well regardless of the order of the two games played
by the participants. As such, this could be an inexpensive technique
to detect cybersickness levels periodically without human interven-
tion or expensive sensing devices. Also, it could help identify and

1https://www.ibm.com/analytics/spss-statistics-software

maze, which was slower but with more turns, followed by at least
a 15-minute rest, and then they would play the race. Group B was
presented with the games in reverse order. Participants could rest
longer than 15 minutes if they wanted to. In all conditions, the
participants were sitting upright. The chair did not rotate or rock. In
both games, participants were informed that, although the challenge
was to ﬁnish as fast as possible, they could stop moving in the virtual
world if they felt any discomfort. They were allowed to pause or stop
the game and ask questions about the experiment at any time if they
so desired. Participants could quit the experiment if they so desired.
Because of the nature of the experiment, data from participants who
left the experiment earlier were still useful. Moreover, pauses were
also logged because they affected the compression rate.

Due to Covid-19, and although the situation was considered quite
safe to run experiments within campus, participants and researchers
were required to wear a mask and follow other additional safety
protocols to reduce any possible spread of the virus further.

3.4 Results
We used both statistical inference methods and visualizations to ana-
lyze the data. A Shapiro-Wilk test was conducted ﬁrst to check for
normality of data. We used parametric tests for normally distributed
data; otherwise, we used non-parametric tests.

We conducted Mauchly’s Test of Sphericity for normally dis-
tributed data and employed Repeated Measures ANOVA (RM-
ANOVA) with Bonferroni correction to detect overall signiﬁcant
differences. We applied the Greenhouse-Geisser correction when
faced with a violation of the assumption of sphericity. We used
Pearson’s correlation for normally distributed data; otherwise, Spear-
man’s correlation was used instead.

3.4.1 Discomfort Score
On average, the mean Discomfort Score increased 1.5 points every
2 minutes in the Maze game for Group A, and 0.4 points every
2 minutes for Group B (see Fig. 6). The mean Discomfort Score
change in the Race condition was 0.3 for Group A and 0.45 for
Group B.

Group A had one participant who reached a Discomfort Score of
10 and quit the Race game before 6 minutes. All other participants
were able to complete the Race game (8 before the 14-minute mark).
The Maze game had a greater early termination rate due to some par-
ticipants reaching an elevated level of discomfort; three participants
from Group A (minute 10) and two from Group B (minute 6).

The ﬁnal Discomfort Score between participants who played
the Maze game ﬁrst and the those who played the Race game ﬁrst
was signiﬁcantly different after the ﬁrst game (F(1, 8) = 29.333,
p < .001). However, the ﬁnal Discomfort Scores after having played
both were not statistically different between groups (F(1, 8) = .027,
p = .874).

3.4.2 Compression Rate
The compression rate did not vary between the two groups, but it
did vary between game conditions—this is a good indication that
compression rate can help predict changes in navigation patterns.

Figure 7: A high-level architecture diagram of the experiment (upper
part) and feedforward NN (lower part).
In the ﬁrst two days, data
is collected and used to train the NN. During days 3 and 4, the NN
was tested, and the Discomfort Scores were collected only for our
reference. The NN is presented in black and white with its data and
parameters.

provide visual or haptic mitigation techniques to be included in the
VR application or just to suggest stopping times for players.

Although the compression technique had difﬁculties predicting
when the discomfort remained stable, this could be expected from
our data. The majority of our data represented either increases or
decreases in the Discomfort Score, making their detection more
precise. Moreover, a participant might interpret a slight increase in
discomfort as an unchanged discomfort from the previous measure-
ment. In contrast, the same participant might consider an unchanged
discomfort as a slight increase or decrease after a while.

Finally, regarding the higher compression rate in the Maze com-
pared to the Race, we hypothesize that this is because in the race
game, players did smaller turns more often. As shown in Fig. 1, turns
do not have to be complete to be a change in trajectory. Moreover,
because participants had more ﬂexibility to control the speed with
the joystick, there was the need for more points to be kept by the
algorithm in order to preserve the trajectory. On the other hand, in
the maze game, the turns and speed were more controlled, creating
straighter paths that could be more easily compressed.

4 EXPERIMENT B

After showing high accuracy in detecting increases and decreases in
the Discomfort Score from the MLP in Experiment A, we decided
to implement a proof-of-concept neural network (NN) to predict
changes in the Discomfort Score of individual users in an application
periodically. We conducted a four-day experiment to collect the NN
training data (for two days) and test it (in the last two days), as
presented in the upper part of Fig. 7.

4.1 Participants

We recruited a total of 15 participants (2 females) from the same
local university. They had an average age of 22.47 (s.d. = 6.95),
ranging from 20 to 47. All declared that they had normal or normal-
to-corrected vision, and none declared any history of color blindness
or health issues. Seven participants had experience with VR systems.
On the last day, one participant (female, 47) quit the study for
personal reasons, resulting in participants being divided equally
among the two new navigation environments. The new average age
was then 20.79 (s.d. = 1.42), now ranging from 20 to 25.

4.2 Apparatus

We used the same equipment as in Experiment A: An Oculus Rift S
as our HMD and a desktop with 16GB RAM, an Intel Core, and a
dedicated GPU.

Figure 8: An aerial view of the environments used on the fourth day.
(Left) Storage unit with shelves and boxes.
(Right) Mansion with
different rooms. Participants were instructed to walk inside them to
look for an exit.

4.2.1 Neural Network

The NN was a simple feedforward NN developed by a third party
for Unity and available on GitHub2. The model took as input both
the current compression rate and its difference from the previous
compression rate. Both were scaled to ﬁt between 0 and 1. It had
one hidden layer with four neurons, and the output was the variation
in Discomfort Score. It was also scaled to ﬁt between 0 and 1 (see
Fig. 7, lower part). We used a 70/30 division of data between training
and testing for each participant. That is, the NN was trained with
each participant’s data separately, and each individual result was
used to predict the Discomfort Score of its respective participant.

4.2.2 Navigation Environments

On the ﬁrst three days of the experiment, all participants were asked
to play the maze game (the same as in Experiment A). On the fourth
(last) day, participants were randomly assigned to two different navi-
gation environments and asked to navigate freely in them (see Fig. 8).
These different environments had been developed in Unity and used
the same type of control (continuous motion using only the joysticks
on the controller). However, the environments presented different
paths, objects, and lighting compared to the ﬁrst experiment.

4.3 Procedure

As in the ﬁrst experiment, participants answered a demographics
questionnaire and received the general instructions. They then
played the environments for 15 minutes each day. As they played
the game, their positions were logged twice per second in the form
(x, y, z, t) in the same way as in the previous experiment. Further-
more, their Discomfort Score and respective compression rate were
registered every minute (that is, twice as often compared to the ﬁrst
experiment). We collected the data more often to have more data to
train the model. All other procedures were the same as in the ﬁrst
experiment. The data on the ﬁrst two days were used for training the
NN.

On the third and fourth (i.e., the last two) days the data collected
was used only to estimate the Discomfort Score. That is, it was not
used in any way to train the NN. Each trained NN was participant-
speciﬁc.

The prediction was calculated in the same periods that the partici-
pant would input their Discomfort Score. Note that the participants’
discomfort was not used in the calculation, nor were the participants
aware that a prediction existed.

2github.com/Blueteak/Unity-Neural-Network

Figure 9: Discomfort Score over time of three participants during the
15-minute span of the experiment in Day 3 (upper part) and Day 4
(lower part). The dashed blue lines represent the Discomfort Score
reported by each participant, while the continuous orange lines are
the predictions. The X-axis represents time in minutes, and the Y-axis
the Discomfort Score. The Discomfort Score was predicted well for
both days for the same participants (i.e., Participant A) and different
ones (i.e., Participants M and K).

4.4 Results

We used both statistical inference methods and visualizations to
analyze the data. A Shapiro-Wilk test was conducted ﬁrst to check
for normality of the data. We used parametric tests for normally
distributed data; otherwise, non-parametric tests were used instead.
Moreover, to calculate the error between the two graphs, we com-
puted the difference between curves, an integrative method that
accounts for mismatched peaks and valleys. For this calculation,
the area between the reported and predicted scores is deﬁned and
divided by the reported score area.

Because the data was not normally distributed, we used the
Wilcoxon signed-rank test to compare the predicted and reported
Discomfort Score. This test did not ﬁnd statistically signiﬁcant
differences between the reported and predicted scores in neither
the third nor fourth days (Z = −.739, p = .460 and Z = −.925,
p = .355, respectively). We then calculated the correlations between
the reported and predicted scores using Spearman’s ρ correlation,
which were identiﬁed as strong for both the third and fourth days
(r = .753, p < .001 and r = .608, p < .001, respectively). Finally,
the error (the difference between curves) concerning the mean re-
ported values and the mean predicted values calculated by their areas
was 2.9%. The mean difference between points was 0.04 Discomfort
Units on the third day (see Fig. 9 and Fig. 10-upper part). Finally,
the error was 6.1% on day four, with a mean difference between
points of 0.5 Discomfort Units (see Fig. 9 and Fig. 10-lower part).

4.5 Discussion

Our results indicate that our technique is an efﬁcient, low-cost, and
practical way to detect cybersickness for an individual user in situa-
tions that require repeated exposure to the same VR environment or
similar tasks. The mean difference between predicted and reported
cybersickness levels is remarkably positive. It is below what can
be input into the traditional Discomfort Score (slider with integers).
Our predicted Discomfort Score is continuous, which could be used
for further reﬁned predictions in the long run. For example, it could
be used for more frequent predictions and produce intermediary
values based on each user’s needs.

Given that our technique does not signiﬁcantly interrupt the nav-
igation activity in the VR environment, it can be used for games
or similar applications with minimal effect on users’ experience
compared to other techniques. Moreover, as it is a software-based

Figure 10: Mean Discomfort Score over time of all the participants
over the 15-minute span of the experiment in Day 3 (upper part) and
Day 4 (lower part). The dashed blue line represents the mean of the
Discomfort Score reported by all the participants, while the continuous
orange line is the mean of the predictions. The X-axis represents
time in minutes, the Y-axis the Discomfort Score, and the shaded
background the 95% conﬁdence interval.

technique without additional hardware, it is scalable, low-cost, and
can be implemented in different VR HMDs. For long-term exposure,
recalibration might be necessary as some people become immune
to cybersickness. Nevertheless, we do not see it as a problem since
the calibration data can happen dynamically during interaction or
gameplay. The Discomfort Score can be based on a starting and
ending score or during other natural pauses (for example, during
respawn or toilet breaks) rather than a repeated interruption of the
player activity. The development of such recalibration is beyond the
scope of this investigation and could represent an avenue for further
research.

Due to the comparative nature of our work, we had to collect
players’ Discomfort Score data during gameplay. We kept this as
non-disruptive as possible and allowed the game to continue playing
in the background. Users could effectively complete it within less
than a second each time. In addition, collecting this data is not a con-
cern in a real-life application since the predictions are independent
of the reported Discomfort Score and can be performed based on the
movement data alone. The traditional Discomfort Score measure-
ment is not a recommended long-term measure for cybersickness
in commercial gaming applications if enjoyment, immersion, or the
outcome of the games can be affected. In this research, the data
was collected because we needed a reference point. Furthermore,
given that we were not evaluating immersion or enjoyment in our
experiment, using it did not affect our collected data—participants in
our experiments did not express any issues with the data collection
procedure.

4.6 Limitations and Future Work

This study evaluated our results using the threshold of 0.4 Um,
which we found empirically to be an appropriate value before our
study. We measured the Discomfort Score every two minutes. This

period was not entirely arbitrary, and a value had to be deﬁned
for training this out-of-the-box NN, in which the input and output
were ﬁxed-size vectors. Further studies can be done to identify the
optimal conﬁgurations of collection time, other input parameters for
the NN, other machine learning models, and any relation to other
questionnaires (e.g., SSQ and VRSQ). Such in-depth, extended
evaluations are interesting but go beyond the scope of this paper,
whose goal was to explore if the compression rate could feasibly be
used to detect changes in discomfort—we have achieved this in our
experiments.

The pandemic affected somewhat the recruitment of participants
and limited the sample size of the experiments. Because of the size,
we follow the recommendation to control for both Type I and II
errors; thus, we presented the p values more consistently [20, 29].
Nevertheless, our experiments’ size falls within the normal range
for HCI empirical studies like ours that are published in rigorously
peer-reviewed venues [7]. As shown earlier, the results we have
gathered are promising and reliable.

Finally, though the compression code had been extensively tested
in other applications, in this study, we did not evaluate the accuracy
of the compression techniques since this was not the paper’s goal
and could be another possible line of future work.

5 CONCLUSION

In this work, we have explored if movement trajectory compression
rate could be used as one marker to help identify cybersickness in
virtual reality (VR) applications, especially games. Our results show
that it is indeed possible to use the compression rate as a potential
marker or indicator for cybersickness. Our ﬁndings also show that
it alone does not account for all the discomfort variations. Never-
theless, using compression rate as input for a simple neural network
makes it possible to obtain accurate predictions for when increases
or decreases in discomfort levels would occur during gameplay. In
this paper, we presented results from one experiment to show that
compression rate is a strong determinant of possible levels of cy-
bersickness. Overall, this approach is novel, simple, and does not
require special hardware. Compared to other techniques, it does not
disrupt the player’s immersive and ﬂow experience during gameplay
because data can be collected dynamically while the game is still
running.

ACKNOWLEDGMENTS

The authors thank the participants for their time and the reviewers for
their insightful comments that have helped improve the paper. The
work was supported in part by Xi’an Jiaotong-Liverpool University
(XJTLU) Key Special Fund (#KSF-A-03).

REFERENCES

[1] Unity - manual: Preparing assets for unity.
[2] L. O. Alvares, V. Bogorny, B. Kuijpers, J. A. F. de Macedo, B. Moelans,
and A. Vaisman. A model for enriching trajectories with semantic
geographical information. In Proceedings of the 15th Annual ACM
International Symposium on Advances in Geographic Information
Systems, GIS ’07. Association for Computing Machinery, New York,
NY, USA, 2007. doi: 10.1145/1341012.1341041

[3] G. E. Blelloch.

Introduction to data compression. Computer
Science Department, Carnegie Mellon University, www. cs. cmu.
edu/afs/cs/project/pscicoguyb/realworld/www/compression. pdf, 2001.
[4] F. Bonato, A. Bubka, and S. Palmisano. Combined pitch and roll
and cybersickness in a virtual environment. Aviation, space, and
environmental medicine, 80(11):941–945, 2009.

[5] J. E. Bos, S. C. de Vries, M. L. van Emmerik, and E. L. Groen. The
effect of internal and external ﬁelds of view on visually induced motion
sickness. Applied Ergonomics, 41(4):516–521, 2010. Special Section -
The First International Symposium on Visually Induced Motion Sick-
ness, Fatigue, and Photosensitive Epileptic Seizures (VIMS2007). doi:
10.1016/j.apergo.2009.11.007

[6] P. Budhiraja, M. R. Miller, A. K. Modi, and D. Forsyth. Rotation
blurring: use of artiﬁcial blurring to reduce cybersickness in virtual
reality ﬁrst person shooters. arXiv preprint arXiv:1710.02599, 2017.
[7] K. Caine. Local Standards for Sample Size at CHI, p. 981–992. Asso-

ciation for Computing Machinery, New York, NY, USA, 2016.

[8] E. Chang, H. T. Kim, and B. Yoo. Virtual reality sickness: A review of
causes and measurements. International Journal of Human–Computer
Interaction, 36(17):1658–1682, 2020. doi: 10.1080/10447318.2020.
1778351

[9] E. Chang, H. T. Kim, and B. Yoo. Predicting cybersickness based
on user’s gaze behaviors in HMD-based virtual reality. Journal of
Computational Design and Engineering, 8(2):728–739, 02 2021. doi:
10.1093/jcde/qwab010

[10] S. Davis, K. Nesbitt, and E. Nalivaiko. A systematic review of cy-
bersickness. In Proceedings of the 2014 Conference on Interactive
Entertainment, IE2014, p. 1–9. Association for Computing Machinery,
New York, NY, USA, 2014. doi: 10.1145/2677758.2677780

[11] D. H. Douglas and T. K. Peucker. Algorithms for the reduction of the
number of points required to represent a digitized line or its caricature.
Cartographica: the international journal for geographic information
and geovisualization, 10(2):112–122, 1973.

[12] L. Etienne. Motifs spatio-temporels de trajectoires d’objets mobiles, de
l’extraction `a la d´etection de comportements inhabituels. Application
au traﬁc maritime. PhD thesis, Universit´e de Bretagne occidentale-
Brest, 2011.

[13] Y. Farmani and R. J. Teather. Evaluating discrete viewpoint control to
reduce cybersickness in virtual reality. Virtual Reality, pp. 1–20, 2020.
[14] T. Feigl, D. Roth, S. Gradl, M. Wirth, M. E. Latoschik, B. M. Eskoﬁer,
M. Philippsen, and C. Mutschler. Sick moves! motion parameters as in-
dicators of simulator sickness. IEEE Transactions on Visualization and
Computer Graphics, 25(11):3146–3157, 2019. doi: 10.1109/TVCG.
2019.2932224

[15] A. S. Fernandes and S. K. Feiner. Combating vr sickness through
subtle dynamic ﬁeld-of-view modiﬁcation. In 2016 IEEE Symposium
on 3D User Interfaces (3DUI), pp. 201–210, 2016. doi: 10.1109/3DUI.
2016.7460053

[16] M. Gallagher, R. Dowsett, and E. R. Ferr`e. Vection in virtual reality
modulates vestibular-evoked myogenic potentials. European Journal
of Neuroscience, 50(10):3557–3565, 2019. doi: 10.1111/ejn.14499

[17] M. Gallagher and E. R. Ferr`e. Cybersickness: a multisensory integra-
tion perspective. Multisensory Research, 31(7):645 – 674, 2018. doi:
10.1163/22134808-20181293

[18] A. M. Gavgani, K. V. Nesbitt, K. L. Blackmore, and E. Nalivaiko.
Proﬁling subjective symptoms and autonomic changes associated with
cybersickness. Autonomic Neuroscience, 203:41–50, 2017. doi: 10.
1016/j.autneu.2016.12.004

[19] F. Geerts. Moving objects and their equations of motion. In Inter-
national Symposium on Constraint Databases and Applications, pp.
40–51. Springer, 2004.

[20] G. Gigerenzer. Mindless statistics. The Journal of Socio-Economics,
33(5):587–606, 2004. Statistical Signiﬁcance. doi: 10.1016/j.socec.
2004.09.033

[21] S. Hell and V. Argyriou. Machine learning architectures to predict
motion sickness using a virtual reality rollercoaster simulation tool.
In 2018 IEEE International Conference on Artiﬁcial Intelligence and
Virtual Reality (AIVR), pp. 153–156, 2018. doi: 10.1109/AIVR.2018.
00032

[22] R. Islam, S. Ang, and J. Quarles. Cybersense: A closed-loop frame-
work to detect cybersickness severity and adaptively apply reduction
techniques. In 2021 IEEE Conference on Virtual Reality and 3D User
Interfaces Abstracts and Workshops (VRW), pp. 148–155, 2021. doi:
10.1109/VRW52623.2021.00035

[23] R. Islam, Y. Lee, M. Jaloli, I. Muhammad, D. Zhu, P. Rad, Y. Huang,
and J. Quarles. Automatic detection and prediction of cybersickness
severity using deep neural networks from user’s physiological signals.
In 2020 IEEE International Symposium on Mixed and Augmented
Reality (ISMAR), pp. 400–411, 2020. doi: 10.1109/ISMAR50242.
2020.00066

[24] D. Jeong, S. Yoo, and J. Yun. Cybersickness analysis with eeg using
deep learning algorithms. In 2019 IEEE Conference on Virtual Reality

national Conference on Serious Games and Applications for Health
(SeGAH), pp. 1–8, 2020. doi: 10.1109/SeGAH49190.2020.9201649

[44] S. Rangelova, D. Motus, and E. Andr´e. Cybersickness among gamers:
In T. Ahram, ed., Advances in Human Factors
An online survey.
in Wearable Technologies and Game Design, pp. 192–201. Springer
International Publishing, Cham, 2020.

[45] C. Renso, S. Spaccapietra, and E. Zim´anyi. Mobility data. Cambridge

University Press, 2013.

[46] D. Saredakis, A. Szpak, B. Birckhead, H. A. D. Keage, A. Rizzo, and
T. Loetscher. Factors associated with virtual reality sickness in head-
mounted displays: A systematic review and meta-analysis. Frontiers in
Human Neuroscience, 14:96, 2020. doi: 10.3389/fnhum.2020.00096
[47] K. Sayood. Introduction to data compression. Morgan Kaufmann,

2017.

[48] R. Shi, H.-N. Liang, Y. Wu, D. Yu, and W. Xu. Virtual reality sickness
mitigation methods: A comparative study in a racing game. Proc. ACM
Comput. Graph. Interact. Tech., 4(1), Apr. 2021. doi: 10.1145/3451255
[49] R. H. So and W. Lo. Cybersickness with virtual reality training appli-
cations: A claustrophobia phenomenon with headmounted displays?
In First World Congress on Ergonomics For Global Quality and Pro-
ductivity, Hong Kong, 1998.

[50] R. H. Y. So, W. T. Lo, and A. T. K. Ho. Effects of navigation speed
on motion sickness caused by an immersive virtual environment. Hu-
man Factors, 43(3):452–461, 2001. PMID: 11866200. doi: 10.1518/
001872001775898223

[51] J.-P. Tauscher, A. Witt, S. Bosse, F. W. Schottky, S. Grogorick,
S. Castillo, and M. Magnor. Exploring neural and peripheral physiolog-
ical correlates of simulator sickness. Computer Animation and Virtual
Worlds, 31(4-5):e1953, 2020. doi: 10.1002/cav.1953

[52] J. Vaughan, D. Whyatt, and G. Brookes. A parallel implementation of
the douglas-peucker line simpliﬁcation algorithm. Software: Practice
and Experience, 21(3):331–336, 1991. doi: 10.1002/spe.4380210307
[53] J. Wang, H.-N. Liang, D. V. Monteiro, W. Xu, H. Chen, and Q. Chen.
Real-time detection of simulator sickness in virtual reality games
based on players’ psychophysiological data during gameplay. In 2020
IEEE International Symposium on Mixed and Augmented Reality Ad-
junct (ISMAR-Adjunct), pp. 247–248, 2020. doi: 10.1109/ISMAR
-Adjunct51615.2020.00071

[54] Y. Wang, J.-R. Chardonnet, and F. Merienne. A Semiautomatic Naviga-
tion Interface to Reduce Visually Induced Motion Sickness in Virtual
Reality. In Journ´ees de la R´ealit´e Virtuelle, pp. 47–52. Evry, France,
Oct. 2018.

[55] Y. Wang, J.-R. Chardonnet, and F. Merienne. Vr sickness prediction for
navigation in immersive virtual environments using a deep long short
term memory model. In 2019 IEEE Conference on Virtual Reality and
3D User Interfaces (VR), pp. 1874–1881, 2019. doi: 10.1109/VR.2019
.8798213

[56] W. Xu, H.-N. Liang, Z. Zhang, and N. Baghaei. Studying the effect
of display type and viewing perspective on user experience in virtual
reality exergames. Games for Health Journal, 9(6):405–414, 2020.
PMID: 32074463. doi: 10.1089/g4h.2019.0102

[57] X. Yu, D. Weng, and L. Cai. Reduce simulator sickness by overwritten
symbol in smartphone-based vr system. In 2016 International Confer-
ence on Virtual Reality and Visualization (ICVRV), pp. 426–429, 2016.
doi: 10.1109/ICVRV.2016.78

and 3D User Interfaces (VR), pp. 827–835, 2019. doi: 10.1109/VR.
2019.8798334

[25] R. S. Kennedy, N. E. Lane, K. S. Berbaum, and M. G. Lilienthal.
Simulator sickness questionnaire: An enhanced method for quantifying
simulator sickness. The International Journal of Aviation Psychology,
3(3):203–220, 1993. doi: 10.1207/s15327108ijap0303 3

[26] B. Keshavarz and H. Hecht. Axis rotation and visually induced motion
sickness: the role of combined roll, pitch, and yaw motion. Aviation,
space, and environmental medicine, 82(11):1023–1029, 2011.
[27] B. Keshavarz, B. E. Riecke, L. J. Hettinger, and J. L. Campos. Vection
and visually induced motion sickness: how are they related? Frontiers
in Psychology, 6:472, 2015. doi: 10.3389/fpsyg.2015.00472

[28] H. K. Kim, J. Park, Y. Choi, and M. Choe. Virtual reality sickness
questionnaire (vrsq): Motion sickness measurement index in a virtual
reality environment. Applied Ergonomics, 69:66–73, 2018. doi: 10.
1016/j.apergo.2017.12.016

[29] J. H. Kim and I. Choi. Choosing the level of signiﬁcance: A decision-
theoretic approach. Abacus, 57(1):27–71, 2021. doi: 10.1111/abac.
12172

[30] I. Kontoyiannis. Pointwise redundancy in lossy data compression and
universal lossy data compression. IEEE Transactions on Information
Theory, 46(1):136–152, 2000. doi: 10.1109/18.817514

[31] W. Lo and R. H. So. Cybersickness in the presence of scene rotational
movements along different axes. Applied Ergonomics, 32(1):1–14,
2001. doi: 10.1016/S0003-6870(00)00059-4

[32] G. Longo. Computer modelling and natural phenomena. In Proceed-
ings of the 9th European Software Engineering Conference Held Jointly
with 11th ACM SIGSOFT International Symposium on Foundations
of Software Engineering, ESEC/FSE-11, p. 1–5. Association for Com-
puting Machinery, New York, NY, USA, 2003. doi: 10.1145/940071.
940072

[33] C. Louboutin and D. Meredith. Using general-purpose compression
algorithms for music analysis. Journal of New Music Research, 45(1):1–
16, 2016. doi: 10.1080/09298215.2015.1133656

[34] N. Meratnia and A. Rolf. Spatiotemporal compression techniques
for moving point objects. In International Conference on Extending
Database Technology, pp. 765–782. Springer, 2004.

[35] D. Monteiro, H. Chen, H.-N. Liang, H. Tu, and H. Dub. Evaluating
performance and gameplay of virtual reality sickness techniques in a
ﬁrst-person shooter game. In 2020 IEEE Conference on Games (CoG),
pp. 1–8, 2021.

[36] D. Monteiro, H.-N. Liang, J. Wang, H. Chen, and N. Baghaei. An
in-depth exploration of the effect of 2d/3d views and controller types on
ﬁrst person shooter games in virtual reality. In 2020 IEEE International
Symposium on Mixed and Augmented Reality (ISMAR), pp. 713–724,
2020. doi: 10.1109/ISMAR50242.2020.00102

[37] D. Monteiro, H.-N. Liang, W. Xu, M. Brucker, V. Nanjappan, and
Y. Yue. Evaluating enjoyment, presence, and emulator sickness in vr
games based on ﬁrst- and third- person viewing perspectives. Computer
Animation and Virtual Worlds, 29(3-4):e1830, 2018. e1830 cav.1830.
doi: 10.1002/cav.1830

[38] D. V. Monteiro, R. D. C. dos Santos, and K. R. Ferreira. Mining
partners in trajectories. International Journal of Data Warehousing
and Mining (IJDWM), 16(1):22–38, 2020.

[39] D. V. Monteiro, K. R. Ferreira, and R. Santos. An algorithm to discover
partners in trajectories. In International Conference on Computational
Science and Its Applications, pp. 647–661. Springer, 2017.

[40] S. A. A. Naqvi, N. Badruddin, M. A. Jatoi, A. S. Malik, W. Hazabbah,
and B. Abdullah. Eeg based time and frequency dynamics analysis
of visually induced motion sickness (vims). Australasian physical &
engineering sciences in medicine, 38(4):721–729, 2015.

[41] C. M. Oman. Sensory conﬂict in motion sickness: an observer theory
approach. Pictorial communication in virtual and real environments,
pp. 362–376, 1991.

[42] T. Porcino, E. Clua, D. Trevisan, ´E. Rodrigues, and A. Silva. Automatic
recommendation of strategies for minimizing discomfort in virtual
environments. arXiv preprint arXiv:2006.15432, 2020.

[43] T. Porcino, E. O. Rodrigues, A. Silva, E. Clua, and D. Trevisan. Using
the gameplay and user data to predict and identify causes of cybersick-
ness manifestation in virtual reality games. In 2020 IEEE 8th Inter-

