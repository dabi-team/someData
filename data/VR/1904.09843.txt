GestARLite: An On-Device Pointing Finger Based Gestural Interface for
Smartphones and Video See-Through Head-Mounts

Varun Jain, Gaurav Garg, Ramakrishna Perla and Ramya Hebbalaguppe
TCS Research, India
{varun.in, ga.gaurav, r.perla, ramya.hebbalaguppe}@tcs.com

9
1
0
2

r
p
A
9
1

]

V
C
.
s
c
[

1
v
3
4
8
9
0
.
4
0
9
1
:
v
i
X
r
a

Abstract

Hand gestures form an intuitive means of interaction in Mixed
Reality (MR) applications. However, accurate gesture recog-
nition can be achieved only through state-of-the-art deep
learning models or with the use of expensive sensors. De-
spite the robustness of these deep learning models, they are
generally computationally expensive and obtaining real-time
performance on-device is still a challenge. To this end, we
propose a novel lightweight hand gesture recognition frame-
work that works in First Person View for wearable devices.
The models are trained on a GPU machine and ported on an
Android smartphone for its use with frugal wearable devices
such as the Google Cardboard and VR Box. The proposed
hand gesture recognition framework is driven by a cascade of
state-of-the-art deep learning models: MobileNetV2 for hand
localisation, our custom ﬁngertip regression architecture fol-
lowed by a Bi-LSTM model for gesture classiﬁcation. We ex-
tensively evaluate the framework on our EgoGestAR dataset.
The overall framework works in real-time on mobile devices
and achieves a classiﬁcation accuracy of 80% on EgoGestAR
video dataset with an average latency of only 0.12 s.

Introduction
Over the past few decades, information technology has tran-
sitioned from desktop to mobile computing. Smartphones,
tablets, smart watches and Head Mounted Devices (HMDs)
are slowly replacing the desktop based computing. There
has been a clear shift in terms of computing from ofﬁce
and home-ofﬁce environments to an anytime-anywhere ac-
tivity (Schmalstieg and Hollerer 2016). Mobile phones form
a huge part of lives: the percentage of trafﬁc on the inter-
net generated from them is overtaking its desktop counter-
parts 1. Naturally, with this transition, the way we interact
with these devices also has evolved from keyboard/mice to
gestures, speech and brain computer interfaces. In a noisy
outdoor setup, speech interfaces tend to be less accurate, and
as a result the combination of hand gestural interface and
speech are of interest to most HCI researchers. Hand ges-
ture recognition on a real-time feed or a video is a form of
activity recognition, and we speciﬁcally target models that
can work on smartphones.

Copyright c(cid:13) 2019, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

1https://stonetemple.com/mobile-vs-desktop-usage-study/

Figure 1: GestARLite: (left) Our framework works on com-
mercial off-the-shelf smartphones attached to generic video
see-through head-mounts like the Google Cardboard. (right)
Illustration of our MR application on Google Cardboard for
Android devices: The application shows enhanced visuali-
sation of data in the form of 3D graphs. Manipulation of
the graph is done through pointing hand gestures like a left
swipe as visualised by the gesture trail (in yellow).

such as

Expensive AR/MR devices

the Microsoft
HoloLens, Daqri and Meta Glasses provide a rich user in-
terface by using recent hardware advancements. They are
equipped with a variety of on-board sensors including multi-
ple cameras, a depth sensor and proprietary processors. This
makes them expensive and unaffordable for mass adoption.
In order to provide a user friendly interface via hand ges-
tures, detecting hands in the user’s Field of View (FoV),
localising certain keypoints on the hand, and understand-
ing their motion pattern has been of importance to the vi-
sion community in recent times. Despite having robust deep
learning models to solve such problems using state-of-the-
art object detectors and sequence tracking methodologies,
obtaining real-time performance on-device is still a chal-
lenge owing to resource constraints on memory and process-
ing.

In this paper, we propose a computationally effective hand
gesture recognition framework that works without depth in-
formation and the need of specialised hardware, thereby pro-
viding mass accessibility of gestural interfaces to the most
affordable video see-through HMDs. These devices provide
VR/MR experiences by using stereo rendering of the smart-
phone camera feed but have limited user interaction capabil-
ities (Hegde et al. 2016).

Industrial inspection and repair, tele-presence, and data

 
 
 
 
 
 
Figure 2: GestARLite, our proposed pointing gestural framework consists of: (a) The MobileNetV2 detector (Sandler et al. 2018)
block that takes RGB image as an input and outputs a hand candidate bounding box, (b) we crop and resize the hand candidate
and feed it to our Fingertip Regressor architecture (refer Figure 3) for accurately localising the ﬁngertip, and, (c) a Bi-LSTM
network for the classiﬁcation of ﬁngertip detections on subsequent frames into different gestures.

visualisation are some of the immediate applications for our
framework and we aim to design a mobile-based hand ges-
ture recognition framework which can work in real-time and
has the beneﬁt of being able to work in remote environments
without the need of internet connectivity. To demonstrate the
generic nature of our framework, we evaluate the detection
of 10 complex gestures performed using the pointing hand
pose with a sample Android application. Figure 1 shows a
real world application of 3D data visualisation on an An-
droid smartphone to be used with Google Cardboard device.

The summary of key contributions is as follows:

1. We propose GestARLite: an on-device gestural interface
based on ﬁngertip regression via a cascade of neural net-
work blocks, consisting of, MobileNetV2 for hand detec-
tion, our architecture for ﬁngertip regression followed by
a Bi-LSTM for gesture classiﬁcation. This approach is
marker-less and uses only RGB data without depth infor-
mation. The trained models are ported on to an Android
device for validating the accuracy and real-time perfor-
mance of the proposed framework.

2. EgoGestAR: a dataset of spatio-temporal sequences rep-
resenting 10 gestures suitable for MR applications. View
our demo and the dataset at: https://varunj.
github.io/gestarlite

Related Work
The efﬁcacy of hand gestures as an interaction modality for
MR applications on smartphones and HMDs has been ex-
tensively explored in the past (H¨urst and Van Wezel 2013).
Marker-based ﬁnger tracking (Buchmann et al. 2004) has
been established as an effective way of directly manipulating
objects in MR applications. However, most of the work has
been based either on skin colour or on hand-crafted features
for hand segmentation and interest point detection which is
followed by optical ﬂow for tracking.

Accurate hand segmentation is very important in all First-
Person View (FPV) gesture recognition applications. In
early attempts, it was observed that the Y CbCr colour space
allows better clustering of hand skin pixel data (Morerio,
Marcenaro, and Regazzoni 2013). In (Baraldi et al. 2014),
super-pixels with several features are extracted using SLIC

algorithm for computing hand segmentation masks. Li et
al. (Li and Kitani 2013) observed the response of Gabor ﬁl-
ters to examine local appearance features in skin colour re-
gions. Most of these approaches are faced by the following
challenges: (i) movement of the hand relative to the HMD
renders the hand blurry, which makes it difﬁcult to detect
and track it, thereby impeding classiﬁcation accuracy. (ii)
sudden changes in illumination conditions and the presence
of skin-like colours and texture in the background causes al-
gorithms with skin feature dependency to fail.

To this end, we look at utilising the current state-of-the-art
object detection architectures like MobileNetV2 (Sandler et
al. 2018), YOLOv2 (Redmon and Farhadi 2016) and Faster
R-CNN (Ren et al. 2015) for hand detection. Recently, a
Faster R-CNN based hand detector was proposed (Huang et
al. 2016). They used a cascaded CNN approach for jointly
detecting the hand and the key point using HSV colour space
information. A dual-target CNN takes input from the Faster
R-CNN and localises the index ﬁngertip and the ﬁnger-joint.
There are many classiﬁcation approaches proposed in the
context of hand gesture recognition. DTW and HMM based
classiﬁers (Liu, Kehtarnavaz, and Carlsohn 2014) have been
used with stereo camera setup to recognise third-person view
gestures. Support Vector Machines have also been explored
for hand gesture recognition via bag-of-features (Dardas and
Georganas 2011). All such classiﬁers work well given a
small set of sufﬁciently distinct gestures but fail to extract
discriminative features as one scales up to large datasets con-
taining gestures with high inter-class similarly.

Several works (Tompson et al. 2014) use depth informa-
tion from sensors such as the Microsoft Kinect that restricts
its applications in head mounted devices. Moreover, most
depth sensors perform poorly in the presence of strong spec-
ular reﬂection, direct sunlight, incandescent light and out-
door environments due to the presence of infrared radia-
tion (Fankhauser et al. 2015). On-device gesture recognition
is especially challenging due to the limited sensors present
on a smartphone. A recent work (Fink, Phelps, and Peck
2018) uses a thermographic camera for detecting the in-
frared radiation from the hand. This method needs additional
hardware in the form of an infrared transducer. To the best of
our knowledge, ours is the ﬁrst attempt to make an on-device

(a) MobileNetV2(b) Fingertip Regressor(c) LSTM Classification NetworkSelect Hand Bounding Box and ResizeFeed Spatial Data to Bidirectional LSTM NetworkCheckMark0.920Right0.021Rectangle0.020X0.018……Fingertip (x, y)45, 365290, 340560, 410Figure 3: Overview of our proposed ﬁngertip regressor architecture for ﬁngertip localisation. The input to our network are
3 × 99 × 99 sized RGB images. Each of the 2 convolutional blocks have 3 convolutional layers each followed by a max-pooling
layer. The 3 fully connected layers regress over ﬁngertip spatial location.

gesture classiﬁcation framework for mobile devices.

Proposed Framework
There has been an increased emphasis on developing end-to-
end networks that learn to model a number of sub-problems
implicitly while training. While this has several advantages
in learning joint tasks like object-detection followed by clas-
siﬁcation, it usually relies on the presence of a large amount
of labelled data which has discriminative features useful
for each of the sub-problems. For example, consider a sce-
nario where one had large volumes of labelled data for ob-
ject detection but only a small volume for object detection
with classiﬁcation. In such a scenario, an end-to-end model
would be restricted to train on the small volume of data
available for both tasks, whereas a model that is separately
trained on a large detection dataset in conjunction with a
classiﬁer is likely to do much better owing to superior detec-
tion performance.

Hence, we propose an ensemble of architectures capable
of recognising a variety of hand gestures for frugal AR wear-
able devices with a monocular RGB camera input that re-
quires only a limited amount of labelled classiﬁcation data.
The GestARLite architecture is capable of classifying ﬁn-
gertip motion patterns into different hand gestures. Figure 2
shows the building blocks of our proposed pipeline: (i) Mo-
bileNetV2 (Sandler et al. 2018) takes a single RGB image
as an input and outputs a hand candidate bounding box. The
input images are ﬁrst down-scaled to 640×480 resolution to
reduce processing time without compromising on the quality
of image features. (ii) The detected hand candidates are then
fed to a ﬁngertip regressor as depicted in Figure 3 which out-
puts the spatial location of the ﬁngertip. (iii) The collection
of these is then fed it to the Bi-LSTM network for classifying
the motion pattern into different gestures.

The Datasets section discusses the gesture patterns of our
EgoGestAR dataset used for classiﬁcation. As there is no
static reference for the camera, small errors introduced due
to the relative motion of the head with respect to the hand

can be rectiﬁed by the Bi-LSTM network used for classiﬁ-
cation. We observe that the Bi-LSTM network is robust to
unexpected impulses arising in gesture pattern due to false
detections.

Hand Detection
We compared state-of-the-art object detection approaches (i)
Faster R-CNN (Ren et al. 2015), (ii) YOLOv2 (Redmon and
Farhadi 2016) and (iii) MobileNetV2 (Sandler et al. 2018)
to detect the speciﬁc pointing hand pose.

MobileNetV2 (Sandler et al. 2018) is a streamlined archi-
tecture that uses depth-wise separable convolutions to build
light weight deep neural networks. The depth-wise sepa-
rable convolution factorises a standard convolution into a
depth-wise convolution and a 1 × 1 convolution also called a
point-wise convolution thereby reducing the number of pa-
rameters in the network. It builds upon the ideas from Mo-
bileNetV1 (Howard et al. 2017), however, it incorporates
two new features to the architecture: (i) linear bottlenecks
between the layers, and (ii) skip connections between the
bottlenecks. The bottlenecks encode the model’s interme-
diate inputs and outputs while the inner layer encapsulates
the model’s ability to transform from lower-level concepts
such as pixels to higher level descriptors such as image cat-
egories. Skip connections, similar to the traditional residual
connections, enable faster training without any loss in accu-
racy.

In our experiments to detect the hand candidate in RGB
input images obtained from wearable devices, we evalu-
ate the MobileNetV2 feature extractor with SSDLite (San-
dler et al. 2018) object detection module. The Experi-
ments and Results section highlights the results in com-
parison with YOLOv2 (Redmon and Farhadi 2016) and
Faster R-CNN (Ren et al. 2015) with a pre-trained VGG-
16 model (Simonyan and Zisserman 2014) consisting of
layers along with other com-
13 shared convolutional
pact models such as ZF (Zeiler and Fergus 2014) and
VGG1024 (Chatﬁeld et al. 2014) by modifying the last fully

InputImage24 x 3 x 33 x 99 x 99Convolutional LayersMax Pooling LayersFingertipCoordinates24 x 3 x 324 x 3 x 32 x 248 x 3 x 348 x 3 x 348 x 3 x 32 x 2xyFully Connected Layers5121282Convolution Block 1Convolution Block 2connected layer to detect hand class (pointing gesture pose).

Fingertip Localisation
We propose a ﬁngertip regressor based on a CNN architec-
ture to localise the (x, y) coordinates of the ﬁngertip. The
hand candidate detection (pointing gesture pose), discussed
in the previous section, triggers the regression CNN for ﬁn-
gertip localisation. The hand candidate bounding box is ﬁrst
cropped and resized to 99 × 99 resolution before feeding it
to the network described in Figure 3.

The proposed architecture consists of two convolutional
blocks each with three convolutional layers followed by a
max-pooling layer. Finally, we use three fully connected lay-
ers to regress over the two coordinate values of ﬁngertip
point at the last layer. Since the aim is to determine con-
tinuous valued outputs corresponding to ﬁngertip positions,
we use Mean Squared Error (MSE) measure to compute loss
at the last fully connected layer. The model is trained for ro-
bust localisation, and we compare our model with the archi-
tecture proposed by Huang et al. (Huang et al. 2016). They
localise both ﬁngertip and ﬁnger-joint while we regress ﬁn-
gertip alone.

Gesture Classiﬁcation
The ﬁngertip localisation network outputs the spatial loca-
tions of the ﬁngertip (x, y), which are then fed as an in-
put to our gesture classiﬁcation network. To reduce com-
putational cost, we just input the (x, y) coordinate instead
of the entire frame to the network thereby helping achieve
real-time performance. Motivated by the effectiveness of
LSTMs (Hochreiter and Schmidhuber 1997) in learning
long-term dependencies of sequential data (Tsironi, Barros,
and Wermter 2016), we employ a Bi-LSTM (Graves and
Schmidhuber 2005) architecture for the classiﬁcation of ges-
tures. We found that Bi-LSTMs perform better than LSTMs
for the particular classiﬁcation task since they process the
sequence in both forward and reverse direction. The usage
of LSTMs inherently means that the entire framework is
also adaptable to videos and live feeds with variable length
frame sequences. This is particularly important as the length
of gestures depends on the user performing it and on the per-
formance of the preceding two networks.

Hegde et al. (Hegde et al. 2016) conducted a feasibility
study for ranking the available modes of interaction for fru-
gal Google Cardboard set-up and reported that the frequent
usage of magnetic trigger and conductive lever leads to wear
and tear of the device and it scored poorly on usability.
Hence, we propose an automatic, implicit trigger to signify
the starting and ending of a user input sequence. In the event
of a positive pointing-ﬁnger hand detection on ﬁve consecu-
tive frames, the framework is triggered to start recording the
spatial location of the ﬁngertip. Similarly, the absence of any
hand detections on ﬁve consecutive frames denotes the end
of a gesture. The recorded sequence is fed as an input to the
Bi-LSTM layer consisting of 30 units. The forward and back-
ward activations are multiplied before being passed on to the
next ﬂattening layer that makes the data one-dimensional. It
is then followed by a fully connected layer with 10 output
scores that correspond to each of the 10 gestures. Since the

Figure 4: EgoGestAR dataset: The left column shows the
standard gesture sequences shown to the users before the
data collection and the right column depicts the variation
in the collected data samples. The highlighted point in each
gesture indicates the starting position of the gesture.

task is to classify 10 gesture classes, we use a softmax ac-
tivation function that interprets the output scores as unnor-
malised log probabilities and squashes the output scores to
be between 0 and 1 using the following equation:

σ (s)j =

esj
k=1 esk

(cid:80)K

(1)

where K denotes number of classes, s is a Kx1 vector
of scores, an input to softmax function, and j is an index
varying from 1 to K. σ (s) is Kx1 output vector denoting
the posterior probabilities associated with each gesture. The
cross-entropy loss has been used in training to update the
model in network back-propagation.

Datasets

Hand Dataset

We use the SCUT-Ego-Finger Dataset (Huang et al. 2015)
for training the hand detection and the ﬁngertip localisa-
tion modules. The dataset includes 93729 frames of pointing
hand gesture including hand candidate bounding boxes and
index ﬁnger key-point coordinates.

EgoGestAR Dataset

A major factor that has hampered the advent of deep learning
in the task of recognising temporal hand gestures is lack of
available large-scale datasets to train neural networks on. To
our knowledge, there exists no dataset, other than the ones
mentioned in this paper, that provides annotated data of a
wide range of intuitive temporal hand gestures.

(7) CheckMark(9) X(8) Caret(10) Star(5) Rectangle(6) Circle(1) Left(3) Up(2) Right(4) Down(7) CheckMark(9) X(8) Caret(10) Star(5) Rectangle(6) Circle(1) Left(3) Up(2) Right(4) DownHence, to train and evaluate the proposed gesture clas-
siﬁcation network, we propose EgoGestAR: an egocentric-
vision gesture dataset for AR/MR wearables. The dataset in-
cludes 10 gesture patterns. To introduce variability in the
data, the dataset has been collected with the help of 50 sub-
jects chosen at random from our research lab with ages
spanning from 21 to 50. The average age of the subjects
was 27.8 years. The dataset consists of 2500 gesture pat-
terns where each subject recorded 5 samples of each ges-
ture. The gestures were recorded by mounting a tablet PC
(model HP10EEG1) to a wall. The patterns drawn by the
user’s index ﬁnger on a touch interface application with po-
sition sensing region was stored. The data was captured at a
resolution of 640 × 480. Figure 4 describes the standard in-
put sequences shown to the users before data collection and a
sample subset of gestures from the dataset showing the vari-
ability introduced by the subjects. These gestures primarily
divided into 3 categories for effective utilisation in our con-
text of data visualisation in MR applications:

(i) 4 swipe gesture patterns (Up, Down, Left, and Right) for

navigating through graph visualisations/lists.

(ii) 2 gesture patterns (Rectangle and Circle) for RoI high-
lighting in user’s FoV and for zoom-in and zoom-out op-
erations.

(iii) 4 gesture patterns (CheckMark: Yes, Caret: No, X: Delete,
Star: Bookmark) for answering contextual questions
while interacting with applications such as industrial in-
spection (Ramakrishna et al. 2016).

Further, to test the entire framework, 240 videos were
recorded by a random subset of the aforementioned sub-
jects performing each gesture 22 times. Additional 20 videos
of random hand movements were also recorded. The videos
were recorded using a OnePlus X Android device mounted
on a Google Cardboard. High quality videos are captured at
a resolution of 640x480, and at 30 FPS. We have published
the dataset online 2 for the beneﬁt of the research commu-
nity.

Experiments and Results
Since the framework comprises of three networks, we eval-
uate the performance of each of the networks individually to
arrive at the best combination of networks for our proposed
application. We use an 8 core Intel R(cid:13) Core
i7-6820HQ
CPU, 32GB memory and an Nvidia R(cid:13) Quadro M5000M
GPU machine for experiments. A Snapdragon R(cid:13) 845 chip-
set smartphone was used which was interfaced with the
server (wherever needed: to evaluate our method that runs on
device) using a local network hosted on a Linksys EA6350
802.11ac compatible wireless router.

TM

For all the experiments pertaining to hand detection and
ﬁngertip localisation, we use the hand dataset (Huang et
al. 2015). Out of the 24 subjects present in the dataset, we
choose 17 subjects’ data for training with a validation split
of 70:30, and 7 subjects’ data (24, 155 images) for testing
the networks.

2https://varunj.github.io/gestarlite

Figure 5: Hand candidate detection and ﬁngertip localisation
on sample images using MobileNetV2, YOLOv2 and Faster
R-CNN with ZF networks in several challenging conditions.
(a) indoor light with skin-like colours in background, (b)
specular reﬂection, (c) low light with blurry hand, and, (d)
hand in the absence of the pointing gesture. MobileNetV2
localises the hand more accurately as compared to YOLOv2
by giving tighter bounds on hands. Faster R-CNN is the most
accurate, but does not work on-device.

Hand Detection

Table 1 reports percentage of mean Absolute Precision
(mAP) and frame rate for hand candidate detection. Even
though MobileNetV2 (Sandler et al. 2018) achieved higher
frame-rate compared to others, it produced high false pos-
itives hence resulted in poor classiﬁcation performance. It
is observed that YOLOv2 can also run on-device although
it outputs fewer frames as compared to MobileNetV2. At
an Intersection over Union (IoU) of 0.5, YOLOv2 achieves
93.9% mAP on SCUT-Ego-Finger hand dataset whereas
MobileNetV2 achieves 89.1% mAP. However, we observe
that YOLOv2 performs poorly when compared to Mo-
bileNetV2 in localising the hand candidate at higher IoU that
is required for including the ﬁngertip. Figure 5 shows results

Model

F-RCNN
VGG16
F-RCNN
VGG1024
F-RCNN
ZF
YOLOv2
MobileNetV2

On
Device

mAP
IoU=0.5

mAP
IoU=0.7

rate
(FPS)

Model
Size

(cid:55)

(cid:55)

(cid:55)

(cid:88)
(cid:88)

98.1

96.8

97.3

93.9
89.1

86.9

86.7

89.2

78.2
85.3

3

10

12

2
9

546 MB

350 MB

236 MB

202 MB
12 MB

Table 1: Performance of various methods on the SCUT-Ego-
Finger dataset for hand detection. mAP score, frame-rate
and the model size are reported with the variation in IoU.

(a)YOLOv2 (b)(c)(d)MobileNetV2Faster R-CNNof the detectors in different conditions such as poor illumi-
nation, blurry rendering, indoor and outdoor environments.
We notice that even though both the detectors are unlikely
to predict false positives in the background, YOLOv2 makes
more localisation errors proving MobileNetV2 to be a better
ﬁt for our use-case.

It is worth noticing that the model size for MobileNetV2
is signiﬁcantly less than the rest of the models. It enables us
to port the model on mobile device and removes the frame-
work’s dependence on a remote server. This helps reduce
latency introduced by the network and can enable a enable
wider reach of frugal devices for MR applications.

Method
DTW (2014)
SVM (2008)
LSTM (1997)
Bi-LSTM (2005)

Precision Recall F1 Score
0.76
0.842
0.920
0.940

0.741
0.860
0.975
0.956

0.734
0.851
0.947
0.948

Table 2: Performance of different classiﬁcation methods on
our EgoGestAR dataset. Average of precision and recall val-
ues for all classes is computed to get a single number.

Gesture Classiﬁcation
We use our EgoGestAR dataset for training and testing of the
gesture classiﬁcation network. We also tried classiﬁcation
with an LSTM network in the same training and testing set-
ting as the Bi-LSTM. During training, 2000 gesture patterns
of the training set were used. A total of 8, 230 parameters of
the network are trained with a batch size of 64 and validation
split of 80 : 20. Adam optimiser with learning rate of 0.001
has been used. The networks are trained for 900 epochs
and achieved validation accuracy of 95.17% and 96.5% for
LSTM and Bi-LSTM respectively. LSTM and Bi-LSTM
achieve classiﬁcation accuracy of 92.5% and 94.3% respec-
tively, outperforming the traditional approaches that are be-
ing used for similar classiﬁcation tasks. We present com-
parison of the proposed LSTM and Bi-LSTM approach with
DTW (Liu, Kehtarnavaz, and Carlsohn 2014) and SVM (Fan
et al. 2008) classiﬁcation in Table 2. Additionally, we ob-
serve that the performance of traditional methods like DTW
and SVM deteriorate signiﬁcantly in the absence of sufﬁ-
cient data-points. Hence, they rely on complex interpolation
techniques to give consistent results.

Figure 6: Comparison of our proposed ﬁnger localisation
model with Huang et al. (Huang et al. 2016). (above) our
model achieves a higher success rate at any given error
threshold. (below) The fraction of images with low locali-
sation error is higher for our proposed method.

Fingertip Localisation

We evaluate the model employed for ﬁngertip localisation on
the test set of 24, 155 images. The 2 × 1 continuous-valued
output corresponding to ﬁnger coordinate estimated at the
last layer are compared against ground truth values to com-
pute rate of success with changing thresholds on the error (in
pixels) and the resultant plot when compared to the network
proposed by Huang et al. (Huang et al. 2016) is shown in
Figure 6. Adam optimiser with a learning rate of 0.001 has
been used. The model achieves 89.06% accuracy with an er-
ror tolerance of 10 pixels on an input image of 99 × 99 res-
olution. The mean absolute error is found to be 2.72 pixels
for our approach and is 3.59 pixels for the network proposed
in (Huang et al. 2016).

Figure 7: The overall performance of our proposed frame-
work on 240 egocentric videos captured using a smartphone
based Google Cardboard head-mounted device. The gesture
is detected when the predicted probability is more than 0.85.
Accuracy of our proposed framework is 0.8 (excluding the
unclassiﬁed class).

020406080100Fingertip Error Threshold (pixels)020406080100Success RateFingertip DetectionHuang et al.Proposed Method0510152025Fingertip Error (pixels)0.0000.0250.0500.0750.1000.1250.1500.1750.200Success RateError HistogramHuang et al.Proposed MethodUpDownLeftRightStarXRectangleCaretCheckMarkCircleUnclassifiedPredictedUpDownLeftRightStarXRectangleCaretCheckMarkCircleUnclassifiedTrue19000000010202100000000100200100001010012000060301011900100000000180002200000317000200001002000100000210152200000520015024410030114Confusion Matrix048121620Time taken On Device

Method
Tsironi et al.
VGG16+LSTM
C3D
GestARLite

Accuracy
32.27
58.18
66.36
80.00

0.76
0.69
1.19
0.12

(cid:55)
(cid:55)
(cid:55)
(cid:88)

Table 3: Analysis of gesture recognition accuracy and la-
tency of various models against the proposed framework.
Our framework GestARLite works on-device and effectively
has the highest accuracy and the least response time.

Framework Evaluation
Since the proposed approach is a series of different net-
works, the overall classiﬁcation accuracy in real-time will
vary depending on the performance of each network used in
the pipeline. Therefore, we evaluate the entire framework
using 240 egocentric videos captured with a smartphone
based Google Cardboard head-mounted device. The Mo-
bileNetV2 model was used in our experiments as it achieved
the best trade-off between accuracy and performance. Since
the model can work independently on a smartphone using
the TF-Lite engine, it removes the framework’s dependence
on a remote server and a quality network connection.

The framework achieved an overall accuracy of 80.00%
on a dataset of 240 egocentric videos captured in FPV is
as shown in Figure 7. The MobileNetV2 network works at
9 FPS on 640 × 480 resolution videos, and the ﬁngertip re-
gressor is capable of delivering frame rates of up-to 166 FPS
working at a resolution of 99 × 99. The gesture classiﬁca-
tion network is capable of processing a given stream of data
in less than 100ms. As a result, the average response time
of the proposed framework is found to be 0.12s on a smart-
phone powered by a Snapdragon R(cid:13) 845 chip-set. The entire
model has a very small memory footprint of 16.3 MB.

Discussion and Comparison
Further analysis of the results shows that the CheckMark
gesture is slightly correlated with the Right gesture since
they both involve an arc that goes from left to right. Hence
we observe a drop in the classiﬁcation accuracy due to the
inherent subjectivity of how a user draws a given gesture.
Further, there are cases when the user’s hand goes out of
the frame which can lead to a gesture not getting classiﬁed.
Our framework is currently limited to a single ﬁnger in the
users’ FoV and the accuracy drops if multiple ﬁngers are
present at roughly the same distance. However, we observe
that the framework performs equally well in cases where the
user is wearing nail paint or has minor ﬁnger injuries. In
such cases, the ﬁngertip regressor outputs the point just be-
low the nail and tracks it. Further, it is also robust to different
hand colours and sizes. The EgoGestAR dataset can poten-
tially be extended to a number of pointing gestures as per
the requirement of the MR application since the framework
can accommodate a number of sufﬁciently distinct gestures.
We also make an important observation regarding our
approach for including dedicated modules in our pipeline
in contrast to an end-to-end framework. We compared our

modular pipeline against several end-to-end trained gesture
classiﬁcation methods Table 3. Tsironi et al.(Tsironi, Bar-
ros, and Wermter 2016) proposed a network that works with
differential image input to convolutional LSTMs to capture
the body parts’ motion involved in the gestures performed
in second-person view. Even after ﬁne-tuning the model on
our egocentric video dataset, it produced an accuracy of only
32.14% as our data involved a dynamic background and no
static reference to the camera.

The VGG16+LSTM network (Donahue et al. 2015) uses
2D CNNs to extract features from each frame. These frame-
wise features are then encoded as a temporally deep video
descriptor which is fed to an LSTM network for classiﬁca-
tion. Similarly, a 3D CNNs approach (Tran et al. 2015) uses
3D CNNs to extract features directly from video clips. Ta-
ble 3 shows that both of these methods do not perform well.
A plausible intuitive reason for this is that the network might
be learning noisy and bad features while training.

Attention based video classiﬁcation (Sharma, Kiros, and
Salakhutdinov 2015) also performed poorly owing to the
high inter-class similarity. Since we require features from
only a small portion of the entire frame, that is, the ﬁnger-
tip, such attention models appear redundant since we already
know the ﬁngertip location.

Conclusion
We have presented GestARLite to enable mass market reach
of gestural interfaces that works in a resource constrained
environment like on a smartphone or a video see-through
HMD. GestARLite works in real-time and on-device achiev-
ing an accuracy of 80.00% with a model size of 16.3 MB.
Our approach is marker-less and uses only RGB data from
a single smartphone camera. The framework is tested on
GPUs and Android devices with a Snapdragon R(cid:13) 845 chip-
set. To the best of our knowledge, our proposed work is the
ﬁrst of its kind, deep learning based attempt to build on-
device gestural interface for frugal head-mounted devices
without the built-in depth sensors and having no need of net-
work connectivity.

In the future, we intend to use the GestARLite architec-
ture to come up applications of gesture recognition in second
person view on Android phones exclusively for the visually
challenged. Further, we aim to develop applications for huge
display screens and boardrooms as an attempt to replace the
mouse pointer with ﬁngertip for controlling presentations.

References
Baraldi, L.; Paci, F.; Serra, G.; Benini, L.; and Cucchiara, R.
2014. Gesture recognition in ego-centric videos using dense
In Proceedings of the
trajectories and hand segmentation.
IEEE Conference on Computer Vision and Pattern Recogni-
tion Workshops, 688–693.
Buchmann, V.; Violich, S.; Billinghurst, M.; and Cockburn,
A. 2004. Fingartips: gesture based direct manipulation
In Proceedings of the 2nd inter-
in augmented reality.
national conference on Computer graphics and interactive
techniques in Australasia and South East Asia, 212–221.
ACM.

involving stereo cameras, depth camera, and inertial sensor.
In SPIE Photonics Europe, 91390C–91390C. International
Society for Optics and Photonics.
Morerio, P.; Marcenaro, L.; and Regazzoni, C. S. 2013.
Hand detection in ﬁrst person vision. In Information Fusion
(FUSION), 2013 16th International Conference on, 1502–
1507. IEEE.
Ramakrishna, P.; Hassan, E.; Hebbalaguppe, R.; Sharma,
M.; Gupta, G.; Vig, L.; Sharma, G.; and Shroff, G. 2016.
An ar inspection framework: Feasibility study with multi-
ple ar devices. In 2016 IEEE International Symposium on
Mixed and Augmented Reality (ISMAR-Adjunct), 221–226.
Redmon, J., and Farhadi, A. 2016. Yolo9000: better, faster,
stronger. arXiv preprint arXiv:1612.08242.
Ren, S.; He, K.; Girshick, R.; and Sun, J. 2015. Faster r-cnn:
Towards real-time object detection with region proposal net-
works. In Advances in neural information processing sys-
tems, 91–99.
Sandler, M.; Howard, A.; Zhu, M.; Zhmoginov, A.; and
Chen, L.-C. 2018. Mobilenetv2: Inverted residuals and lin-
ear bottlenecks. In Proceedings of the IEEE Conference on
Computer Vision and Pattern Recognition, 4510–4520.
Schmalstieg, D., and Hollerer, T. 2016. Augmented reality:
principles and practice. Addison-Wesley Professional.
Sharma, S.; Kiros, R.; and Salakhutdinov, R. 2015. Ac-
arXiv preprint
tion recognition using visual attention.
arXiv:1511.04119.
Simonyan, K., and Zisserman, A. 2014. Very deep convo-
lutional networks for large-scale image recognition. arXiv
preprint arXiv:1409.1556.
Tompson, J.; Stein, M.; Lecun, Y.; and Perlin, K. 2014. Real-
time continuous pose recovery of human hands using con-
volutional networks. ACM Transactions on Graphics (ToG)
33(5):169.
Tran, D.; Bourdev, L.; Fergus, R.; Torresani, L.; and Paluri,
M. 2015. Learning spatiotemporal features with 3d convo-
lutional networks. In Proceedings of the IEEE international
conference on computer vision, 4489–4497.
Tsironi, E.; Barros, P.; and Wermter, S. 2016. Gesture recog-
nition with a convolutional long short-term memory recur-
rent neural network. In Proceedings of the European sym-
posium on artiﬁcial neural networks computational intelli-
gence and machine learning (ESANN), 213–218.
Zeiler, M. D., and Fergus, R. 2014. Visualizing and under-
In European conference
standing convolutional networks.
on computer vision, 818–833. Springer.

Chatﬁeld, K.; Simonyan, K.; Vedaldi, A.; and Zisserman, A.
2014. Return of the devil in the details: Delving deep into
convolutional nets. arXiv preprint arXiv:1405.3531.
Dardas, N. H., and Georganas, N. D. 2011. Real-time hand
gesture detection and recognition using bag-of-features and
support vector machine techniques. IEEE Transactions on
Instrumentation and Measurement 60(11):3592–3607.
Donahue,
J.; Anne Hendricks, L.; Guadarrama, S.;
Rohrbach, M.; Venugopalan, S.; Saenko, K.; and Darrell,
T. 2015. Long-term recurrent convolutional networks for
In Proceedings of the
visual recognition and description.
IEEE conference on computer vision and pattern recogni-
tion, 2625–2634.
Fan, R.-E.; Chang, K.-W.; Hsieh, C.-J.; Wang, X.-R.; and
Lin, C.-J. 2008. Liblinear: A library for large linear classiﬁ-
cation. Journal of machine learning research 9(Aug):1871–
1874.
Fankhauser, P.; Bloesch, M.; Rodriguez, D.; Kaestner, R.;
Hutter, M.; and Siegwart, R. Y. 2015. Kinect v2 for mobile
robot navigation: Evaluation and modeling. In 2015 Interna-
tional Conference on Advanced Robotics (ICAR), 388–394.
IEEE.
Fink, R.; Phelps, R.; and Peck, G. 2018. Gesture recognition
systems and devices for low and no light conditions. US
Patent 9,990,043.
Graves, A., and Schmidhuber, J. 2005. Framewise phoneme
classiﬁcation with bidirectional lstm and other neural net-
work architectures. Neural Networks 18(5):602–610.
Hegde, S.; Perla, R.; Hebbalaguppe, R.; and Hassan, E.
2016. Gestar: Real time gesture interaction for ar with ego-
In International Symposium on Mixed and
centric view.
Augmented Reality. IEEE.
Hochreiter, S., and Schmidhuber, J. 1997. Long short-term
memory. Neural computation 9(8):1735–1780.
Howard, A. G.; Zhu, M.; Chen, B.; Kalenichenko, D.; Wang,
W.; Weyand, T.; Andreetto, M.; and Adam, H. 2017. Mo-
bilenets: Efﬁcient convolutional neural networks for mobile
vision applications. arXiv preprint arXiv:1704.04861.
Huang, Y.; Liu, X.; Jin, L.; and Zhang, X. 2015. Deepﬁnger:
A cascade convolutional neuron network approach to ﬁnger
key point detection in egocentric vision with mobile cam-
era. In Systems, Man, and Cybernetics (SMC), 2015 IEEE
International Conference on, 2944–2949. IEEE.
Huang, Y.; Liu, X.; Zhang, X.; and Jin, L. 2016. A point-
ing gesture based egocentric interaction system: Dataset, ap-
In Proceedings of the IEEE Con-
proach and application.
ference on Computer Vision and Pattern Recognition Work-
shops, 16–23.
H¨urst, W., and Van Wezel, C. 2013. Gesture-based interac-
tion via ﬁnger tracking for mobile augmented reality. Multi-
media Tools and Applications 62(1):233–258.
Li, C., and Kitani, K. M. 2013. Pixel-level hand detection in
ego-centric videos. In Proceedings of the IEEE Conference
on Computer Vision and Pattern Recognition, 3570–3577.
Liu, K.; Kehtarnavaz, N.; and Carlsohn, M. 2014. Com-
parison of two real-time hand gesture recognition systems

