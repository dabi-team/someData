7
1
0
2

r
a

M
7
2

]

M
M

.
s
c
[

1
v
0
9
0
9
0
.
3
0
7
1
:
v
i
X
r
a

MULTI-STREAM SWITCHING FOR INTERACTIVE VIRTUAL REALITY
VIDEO STREAMING

Gene Cheung #, Zhi Liu ∗, Zhiyou Ma $, Jack Z. G. Tan $

# National Institute of Informatics, ∗ Waseda University, $ Kandao Technology

ABSTRACT
Virtual reality (VR) video provides an immersive
360 viewing experience to a user wearing a head-
mounted display: as the user rotates his head,
correspondingly different ﬁelds-of-view (FoV) of
the 360 video are rendered for observation. Trans-
mitting the entire 360 video in high quality over
bandwidth-constrained networks from server to
client for real-time playback is challenging. In
this paper we propose a multi-stream switching
the server
framework for VR video streaming:
pre-encodes a set of VR video streams covering
different view ranges that account for server-client
round trip time (RTT) delay, and during streaming
the server transmits and switches streams accord-
ing to a user’s detected head rotation angle. For
a given RTT, we formulate an optimization to
seek multiple VR streams of different view ranges
and the head-angle-to-stream mapping function
simultaneously, in order to minimize the expected
distortion subject to bandwidth and storage con-
straints. We propose an alternating algorithm that,
at each iteration, computes the optimal streams
while keeping the mapping function ﬁxed and vice
versa. Experiments show that for the same band-
width, our multi-stream switching scheme outper-
forms a non-switching single-stream approach by
up to 2.9dB in PSNR.

Index Terms— Video streaming, virtual reality,

video coding

I. INTRODUCTION
The advent of technologies for camera rigs,
ﬁsheye lenses and image-stitching algorithms [1,
2] means that 360 virtual reality (VR) video can

now be readily generated. A user equipped with
a head-mounted display (HMD) such as Oculus
Rift1 or HTC Vive2 can enjoy an immersive 360
viewing experience: as the user rotates his head to
the left or right, correspondingly different ﬁelds-
of-view (FoV) of the 360 VR video are rendered
for observation. See Fig. 1 for an illustration. It has
been shown [3] that such motion parallax visual
effect—changing FoVs according to user’s head
position and rotation angle—is the strongest cue
for human’s depth perception in a 3D scene, and
VR video enables this effect for any head rotation
angle from 0 to 360.

Fig. 1. Interactive VR video streaming system using 5
pre-encoded streams with overlapping view ranges. Cor-
responding to user’s head rotation angle θ(t) and FoV
[θ(t) − a, θ(t) + a] at
time t, stream 3 is selected and
transmitted.

However, transmitting the entire 360 VR video
in high quality over bandwidth-limited networks
from a server to a client for real-time playback

1https://www3.oculus.com/en-us/rift/
2https://www.vive.com/jp/

 
 
 
 
 
 
is challenging. Leveraging on previous works in
interactive multiview video streaming (IMVS) [4,
5], we propose a multi-stream switching frame-
work for 360 VR video streaming. The server
pre-encodes a set of VR video streams, each
covering a different view range of the original 360
video. During streaming, the server transmits and
switches among the pre-encoded streams accord-
ing to a user’s detected head rotation angle.

By transmitting one video stream covering a
limited view range at a time, the server can en-
code the stream at a higher quality than a single
stream covering all 360 viewing angles for the
same bandwidth constraint. However, to minimize
the adverse effect of interaction delay in mo-
tion parallax—even in the face of non-negligible
server-to-client round trip time (RTT) delay—each
pre-encoded stream must cover a wide enough
view range, so that a user’s head with rotation
angle starting in the view range center would not
drift outside the view range in one RTT. This
implies that the coded streams tend to overlap
in view ranges, resulting in representation redun-
dancies and high storage cost. Thus, multi-stream
switching can enable higher visual quality, at the
expense of an increase in storage cost due to
streams’ view range overlaps.

Thus, the technical challenge is, for a given
RTT, to design multiple VR streams of different
view ranges and the head-angle-to-stream map-
ping function in order to minimize the expected
distortion subject to bandwidth and storage con-
straints. We mathematically formalize this opti-
mization and propose an alternating algorithm that,
at each iteration, computes the optimal VR streams
while keeping the mapping function ﬁxed and
vice versa. Experimental results show that for the
same bandwidth constraint, our proposed multi-
stream switching scheme outperforms a single-
stream approach by up to 2.9dB in PSNR.

II. RELATED WORK
Using an array of cameras to capture a 3D
scene synchronously from slightly shifted view-
points, IMVS systems [4–8] study how the cap-
tured multi-view videos can be pre-encoded into
multiple streams. A receiving user can periodically

request switches to neighboring camera views, and
the server in response switches video streams with
minimum discruption to the user’s viewing expe-
rience. To facilitate stream-switching, new frames
like DSC frame [9] and merge frame (M-frame)
[10] were proposed. Unlike IMVS [4–8], we op-
timize the division of 360 VR video into multiple
streams covering different view ranges given a
constant RTT. To the best of our knowledge, we
are the ﬁrst to study this problem for interactive
VR video streaming formally.

There are recent studies on VR video stream-
ing. Assuming that the 3D scene can be repre-
sented by a 3D mesh, [11, 12] proposed to ﬁrst
divide the mesh into 3D sub-meshes (tiles). During
streaming, a user communicates the desired tiles
to the server using MPEG-DASH-SRD [13], an
extension of MPEG-DASH [14] to specify spatial
relationships in media content. Unlike [11, 12], we
assume the input to our optimization is a 360 VR
video, not 3D mesh. Further, we take the effect of
RTT on interaction delay into account explicitly
during optimization (to be detailed in Section IV).
Assuming a camera rig with multiple cameras
capturing a 360 view from different angles, [15]
described a multiview video scheme that divides
and codes captured camera views into two types:
i) primary views at lower resolution that cover the
entire 360 ﬁeld-of-view, and ii) auxiliary views for
the remaining camera views at high resolution.
The two video types are coded using multilayer
extensions of HEVC. The receiver then performs
image stitching to compose a 360 VR view. In-
stead, we assume 360 VR video is composed at
the sender, and the challenge is to design multiple
video streams covering different view ranges for
interactive streaming.

III. SYSTEM OVERVIEW
We overview the operations of our multi-stream
switching framework for a given RTT. Denote by
T the RTT between server and client. Denote by
∆ the time interval between coded frames; 1/∆
is the number of frames per second (fps). For
simplicity, assume for now that all frames are
intra-coded, so that streams can be switched at
any frame. The server starts transmission of an

view angle at which an observer is watching
straight ahead at discrete time n. For convenience,
we deﬁne the duration of a discrete time interval
to be ∆ (time interval between frames), and RTT
in discrete instants to be Ts = T /∆. We assume
that θ[n] ∈ {1, . . . , K} is also discrete, where
θ[n] 2π/K is angle in radians between 0 and 2π.
We assume a one-hop Markov view transition
model, where the probability of an observer’s
angle θ[n + 1] = j given θ[n] = i is pi,j. Finally,
we assume that the observer changes views only
locally per instant, i.e., pi,j = 0 if |i − j| > vmax.
At any instant n, the observer has a FoV of
size 1 + 2a (cid:28) K that deﬁnes the angular span a
human observes at a time. Hence at time instant n,
given central view angle θ[n], the observer’s FoV
is R[n] = [θ[n] − a, θ[n] + a]. It means that an
observer will see visual distortion if the current
video stream is not coded at high enough video
quality in this range R[n].

IV-B. Expected Distortion

We deﬁne the expected distortion an observer
sees in a 360 VR video as he naturally rotates
his head. We consider ﬁrst the simple case when
the GOP size is a single frame. First, we compute
the steady state probabilities q ∈ RK assuming
stationary view transition probabilities pi,j via the
Perron-Frobenius Theorem3:
q P = q

(1)

where q is the left eigenvector (row vector) corre-
sponding to the eigenvalue 1 for matrix P.

Denote by 1k the canonical row vector of length
K with the only non-zero entry at position k
equals to 1. Ts instants after an observer starts in
central angle k, the angle distribution is 1kPTs.
Because an observer’s FoV size is 1 + 2a, we
multiply 1k by a binary circulant matrix Ca ∈
{0, 1}K×K to account for FoV. For example, C1
for K = 5 is:

C1 =








1 1 0 0 1
1 1 1 0 0
0 1 1 1 0
0 0 1 1 1
1 0 0 1 1








(2)

3https://en.wikipedia.org/wiki/Perron%E2%80%93Frobenius theorem

Fig. 2. Interaction between server and client where RTT
is T and frame interval is ∆. A switched stream arrives T
seconds after a feedback is sent.

initial video stream to the user at time t = −T /2,
assuming the user begins at an initial head rotation
angle θ(0). At time t = 0, the stream arrives at
the client and playback begins. At time t = ∆,
transmits the ﬁrst feedback θ(∆) of
the client
the user’s head rotation angle to the server. This
feedback θ(∆) arrives at the server at t = T /2+∆,
and the server decides the new stream to transmit
corresponding to θ(∆) using a mapping function
f (θ(∆)). This new stream arrives at the client at
time t = T + ∆, exactly T seconds after feedback
θ(∆) was generated. Hence, the transmitted stream
must accommodate the change in head rotation
angle from θ(∆) to θ(T + ∆). See Fig. 2 for an
illustration.

Consider now the case when the VR streams are
coded in Group-of-Pictures (GOP) of H frames
each. This means that the frequency at which the
server can switch streams is also every H frames.
Compared to the previous case of intra-coded
frames, each VR stream must now accommodate
the change in head rotation angle in time interval
T + H∆.

We next formulate the optimization problem to
ﬁnd the multiple VR streams and the mapping
function f ( ).

IV. PROBLEM FORMULATION

IV-A. View Interaction Model

We ﬁrst deﬁne a view interaction model that
models a typical view selection process during 360
VR video observation. Denote by θ[n] the central

Suppose now that for central angle k, the server
transmits stream f (k) with distortion vector df (k),
where df (k),l is the distortion of angle l in stream
f (k). We can then write the expected distortion
for this intra-coded streaming system as:

IV-D. Objective Function

Assuming H = 1, collecting derived equations
(3), (6) and (7), we write an unconstrained La-
grangian objective as:

D({di}, f ( )) =

K
(cid:88)

qk 1kCaPTsdf (k)

(3)

min
{di},f ( )

K
(cid:88)

qk 1kCaPTsdf (k)+λ

(cid:88)

r(di)+µ

K
(cid:88)

qkr(df (k))

k=1
where the expected distortion D depends on both
the distortion vectors di of different streams i and
the mapping function f ( ) from angles to streams.
If the 360 VR video streams are coded in GOP
of H frames each, then the stream-switching delay
becomse Ts + H, and the distortion term for each
k needs to be computed for all H frames:

D({di}, f ( )) =

K
(cid:88)

qk

H−1
(cid:88)

k=1

h=0

1kCaPTs+hdf (k) (4)

IV-C. Rate Constraints

Given distortion vector di of stream i, we deﬁne
the coding rate as r(di) = (cid:80)K
k=1 g(di,k), where
g(di,k) is in turn deﬁned as a clipped Laplacian
function with parameter σ:

g(d) = U (dmax − d) exp

−

(cid:18)

(cid:19)

|d|
σ2

(5)

where U ( ) is a step function; i.e., if d ≥ dmax,
then rate g(d) is 0. Parameter σ can be chosen
according to the 360 VR video characteristics.
Because distortion d is non-negative, we can drop
the absolute value operator in practice.

Having deﬁned r(di), we can deﬁne a storage
constraint as follows. Denote by S the set of pre-
encoded video streams, by Q the duration in time
for the 360 video, and by B the storage budget in
bits. We write the storage constraint as:

(cid:88)

i∈S

r(di) ≤ B/Q

(6)

We can similarly deﬁne a transmission con-
straint for a transmission budget C in bps. As-
suming a mapping function f ( ) from angles to
streams, we write:
K
(cid:88)

qkr(df (k)) ≤ C

(7)

k=1

k=1

i∈S

k=1

(8)
where λ and µ are chosen parameters so that the
storage constraint (6) and transmission constraint
(7) are satisﬁed.

V. OPTIMIZATION ALGORITHM

We take an alternating optimization approach,
where we optimize variables {di} and f ( ) one at
a time while keeping the other ﬁxed. When f ( ) is
ﬁxed, we take the derivative of the objective with
respect to di,l and set it to 0:



(cid:88)

k|f (k)=i

qk

(cid:2)1kCaPTs(cid:3)

l +

λ + µ

(cid:124)

(cid:88)

k|f (k)=i
(cid:123)(cid:122)
γ



qk



∂g(di,l)
∂ di,l

= 0

(cid:88)

(cid:2)1kCaPTs(cid:3)

qk

l =

−

1
γ

k|f (k)=i


− σ2 log



σ2
γ

(cid:88)

qk

k|f (k)=i

(cid:2)1kCaPTs(cid:3)

(cid:125)
(cid:17)

∂ exp

(cid:16)

− di,l
σ2

∂ di,l

 = d∗

l

i,l

(9)

where [ ]l denotes the l-th entry of a vector.

For intuition, we can check the boundary cases
of (9) as follows. If angle l of stream i is not
observed (summation in the argument of log is 0),
then the left side of (9) evaluates to ∞, so we can
set d∗
i,k to dmax. On the other hand, if angle l is
observed with high probability (summation in the
argument of log is upper-bounded by 1), assuming
σ2/γ is also upper-bounded by 1, then d∗
i,l is lower-
bounded by 0.

When streams {di} are ﬁxed, we optimize f ( )
simply as follows. For each angle k, we identify
a stream i for k with the minimum expected
transmission cost in (8).

V-A. Initialization

|S| of

For a given number

target streams,
we perform initialization as follows. We evenly
distribute the central angles of |S| streams in
{1, . . . , K}. For each stream i with central angle
k, we set distortion di,l to a constant d1 for angle
l where |k − l| < Ts vmax; i.e., angle l is reachable
in Ts transitions. Otherwise, di,l = dmax. d1 is then
adjusted so that the transmission constraint is met
for this stream.

The number of streams |S| is varied to ﬁnd a

locally optimal solution.

VI. EXPERIMENTS

VI-A. Experimental Setup

We use two 360 VR sequences captured by
Kandao Technology4, indoor concert and
outdoor walking, for our experiments. Each
video is 1 hour long at 30 fps. FoV is assumed
to be 90◦, and vmax is 5◦. Video for one FOV
has resolution 512 × 512. Number of discrete view
angles K is 60, and RTT Ts is 3. We use a linear
function to model angle transition probabilities:
pi,j linearly decreases with |i − j|, and the slope
of decrease is steeper at π/2 and 3π/2, resulting
in higher steady state probabilities qk at these two
angles.

As competitor we choose a non-switching
scheme called static, which always sends an
encoded video covering the entire 360 angles.
For practical implementation, both our proposed
scheme (called adaptive) and static use two QPs
to encode each VR video stream; the two QPs
are selected using Lloyd-Max quantizer [16] to
approximate the theoretical Laplacian RD curve
r(d) shown in Fig. 3 (a). Test videos are ﬁrst
encoded at different QPs to generate empirical RD
points, then the parameters of r(d) are ﬁtted.

VI-B. Experimental Results

We assume two different channel bandwidths
are available. We vary the available storage and
show the tradeoff against visual quality (PSNR)
in Fig. 4 for indoor concert and outdoor
walking. Weight parameters λ and µ are tuned to

4VR sequences will be made available at time of publication.

satisfy bandwidth and storage constraints at each
point. Each data point in Fig. 4 is marked by a
square, circle or triangle to denote the optimal
number of streams generated: 1, 2 and 3, respec-
tively. static uses 1 stream (squares), and adaptive
uses multiple streams (circles and triangles).

We observe that adaptive outperforms static for
the two sequences—up to 2.9dB in PSNR at the
same bandwidth but using more storage. For given
channel bandwidth and storage, adaptive selects
the optimal number of streams and view range for
each stream via optimization of distortion vectors
di. Fig. 3 (b) (distortion versus viewing angle)
shows the optimized distortion vectors di for two
streams when the storage is 5Gb and bandwidth
is 1Mbps. dmax = 46 in this case, and the cor-
responding angle range is not encoded because
there is zero probability of being observed (given
our view interaction model). In contrast, viewing
angles with high probabilities have low distortion
values in di. We observe also that the two steams
overlap, as discussed in the Introduction, to guar-
antee good visual quality when user’s head rotates
in one RTT. Due to the low observe probability at
the stream view range boundaries, the associated
distortion values are relatively larger.

(a) R-D curve

(b) distortion vs. view angle

Fig. 3. Illustration of R-D curve and streams’ distortion
vectors.

When storage is small, static and adaptive have
the same performance for both ch1 and ch2. As
more storage becomes available, relative perfor-
mance of adaptive becomes better for both ch1
and ch2 when multiple streams are employed. On
the other hand, by sending only one stream always,
static cannot make use of extra storage to improve
quality for a given channel bandwidth.

[6] T. Maugey, I. Daribo, G. Cheung, and P. Frossard,
“Navigation domain partitioning for interactive multi-
view imaging,” in Special Issue on 3D Video Represen-
tation, Compression, Rendering, IEEE Transactions on
Image Procesing, September 2013, vol. 22, no.9, pp.
3459–3472.

[7] D. Ren, G. Chan, G. Cheung, V. Zhao, and P. Frossard,
“Anchor view allocation for collaborative free view-
in IEEE Transactions on
point video streaming,”
Multimedia, March 2015, vol. 17, no.3, pp. 307–322.
[8] L. Toni, G. Cheung, and P. Frossard, “In-network view
synthesis for interactive multiview video systems,” in
IEEE Transactions on Multimedia, May 2016, vol. 18,
no.5, pp. 852–864.

[9] N.-M. Cheung, A. Ortega, and G. Cheung, “Distributed
source coding techniques for interactive multiview
video streaming,” in 27th Picture Coding Symposium,
Chicago, IL, May 2009.

[10] W. Dai, G. Cheung, N.-M. Cheung, A. Ortega, and
O. Au, “Merge frame design for video stream switch-
in IEEE
ing using piecewise constant functions,”
Transactions on Image Processing, June 2016, vol. 25,
no.8, pp. 2896–2909.

[11] M. Hosseini and V. Swaminathan, “Adaptive 360 VR
video streaming based on MPEG-DASH SRD,”
in
IEEE International Symposium on Multimedia, San
Jose, CA, December 2016.

[12] M. Hosseini and V. Swaminathan,

“Adaptive 360
VR video streaming: Divide and conquer,” in IEEE
International Symposium on Multimedia, San Jose, CA,
December 2016.

[13] O. Niamut, E. Thomas, and L. D’Acunto,

“MPEG
DASH SRD - spatial relationship description,”
in
ACM Conference on Multimedia Systems, Klagenfurt,
Austria, May 2016.

[14] T. Stockhammer, “Dynamic adaptive streaming over
in ACM
HTTP-standards and design principles,”
Conference on Multimedia Systems, San Jose, CA,
February 2011.

[15] K. Sreedhar, A. Aminlou, M. Hannuksela, and M. Gab-
bouj, “Standard-compliant multiview video coding and
in IEEE
streaming for virtual reality applications,”
International Symposium on Multimedia, San Jose, CA,
December 2016.

[16] Allen Gersho and Robert M. Gray, Vector Quantization
and Signal Compression, Kluwer Academic Publish-
ers, 1992.

(a) indoor concert

(b) outdoor walking

Fig. 4. PSNR versus storage for two competing schemes.

VII. CONCLUSION
Transmitting 360 VR video in high quality over
bandwidth-limited networks is difﬁcult. In this
paper, we pre-compute mulitple streams covering
different overlapping view ranges at the server,
and during streaming a single stream is selected
corresponding to the user’s tracked head rotation
angle that minimizes the adverse effect of in-
teraction delay. We formulate an optimization to
ﬁnd the optimal streams and the head-angle-to-
stream mapping function simultaneously, solved
via an alternating algorithm. Experimental results
show that our multi-stream switching approach
outperforms a single-stream approach by up to
2.9dB in PSNR.

VIII. REFERENCES

[1] J. Jia and C.-K. Tang, “Image stitching using structure
deformation,” in IEEE Transactions on Pattern Analy-
sis and Machine Intelligence, April 2014, vol. 30, no.4,
pp. 617–631.

[2] J. Zaragoza, T.J. Chin, and Q.-H. Tran, “As-projective-
as-possible image stitching with moving DLT,”
in
IEEE Transactions on Pattern Analysis and Machine
Intelligence, July 2014, vol. 36, no.7, pp. 1285–1298.
[3] S. Reichelt, R. Hausselr, G. Futterer, and N. Leister,
“Depth cues in human visual perception and their
realization in 3D displays,” in SPIE Three-Dimensional
Imaging, Visualization, and Display 2010, Orlando, FL,
April 2010.

[4] G. Cheung, A. Ortega, and N.-M. Cheung, “Interactive
streaming of stored multiview video using redundant
in IEEE Transactions on Image
frame structures,”
Processing, March 2011, vol. 20, no.3, pp. 744–761.
[5] X. Xiu, G. Cheung, and J. Liang, “Delay-cognizant
interactive multiview video with free viewpoint syn-
thesis,” in IEEE Transactions on Multimedia, August
2012, vol. 14, no.4, pp. 1109–1126.

