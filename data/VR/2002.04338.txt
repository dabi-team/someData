0
2
0
2

b
e
F
6
1

]
S
D
.
s
c
[

2
v
8
3
3
4
0
.
2
0
0
2
:
v
i
X
r
a

Optimizing Item and Subgroup Conﬁgurations for
Social-Aware VR Shopping

Shao-Heng Ko∗, Hsu-Chao Lai∗†, Hong-Han Shuai†,
De-Nian Yang∗, Wang-Chien Lee‡, Philip S. Yu§
∗Academia Sinica, Taiwan †National Chiao Tung University, Taiwan
‡The Pennsylvania State University, USA §University of Illinois at Chicago, USA
∗{arsenefrog, hclai0806, dnyang}@iis.sinica.edu.tw †hhshuai@g2.nctu.edu.tw
‡wlee@cse.psu.edu §psyu@cs.uic.edu

ABSTRACT
Shopping in VR malls has been regarded as a paradigm shift
for E-commerce, but most of the conventional VR shopping
platforms are designed for a single user. In this paper, we
envisage a scenario of VR group shopping, which brings ma-
jor advantages over conventional group shopping in brick-
and-mortar stores and Web shopping: 1) conﬁgure ﬂexible
display of items and partitioning of subgroups to address
individual interests in the group, and 2) support social in-
teractions in the subgroups to boost sales. Accordingly, we
formulate the Social-aware VR Group-Item Conﬁguration
(SVGIC) problem to conﬁgure a set of displayed items for
ﬂexibly partitioned subgroups of users in VR group shop-
ping. We prove SVGIC is APX-hard and also NP-hard to
approximate within 32
31 − (cid:15). We design an approximation
algorithm based on the idea of Co-display Subgroup Forma-
tion (CSF) to conﬁgure proper items for display to diﬀer-
ent subgroups of friends. Experimental results on real VR
datasets and a user study with hTC VIVE manifest that
our algorithms outperform baseline approaches by at least
30.1% of solution quality.

PVLDB Reference Format:
Shao-Heng Ko, Hsu-Chao Lai, Hong-Han Shuai, De-Nian Yang,
Wang-Chien Lee, Philip S. Yu. Optimizing Item and Subgroup
Conﬁgurations for Social-Aware VR Shopping. PVLDB, 14(xxx):
xxxx-yyyy, 2020.
DOI:

1.

INTRODUCTION

Virtual Reality (VR) has emerged as a disruptive tech-
nology for social [23], travel [79], and E-commerce appli-
cations. Particularly, a marketing report about future re-
tails from Oracle [8] manifests that 78% of online retail-
ers already have implemented or are planning to implement
VR and AI. Recently, International Data Corporation (IDC)
forecasts the worldwide spending on VR/AR to reach 18.8
billion USD in 2020 [84], including $1.5 billion in retails.

licensed under

This work is
the Creative Commons Attribution-
NonCommercial-NoDerivatives 4.0 International License. To view a copy
of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/. For
any use beyond those covered by this license, obtain permission by emailing
info@vldb.org. Copyright is held by the owner/author(s). Publication rights
licensed to the VLDB Endowment.
Proceedings of the VLDB Endowment, Vol. 14, No. xxx
ISSN 2150-8097.
DOI:

It also foresees the VR/AR market to continue an annual
growth rate of 77% through at least 2023. Moreover, shop-
ping in VR malls is regarded as a paradigm shift for E-
commerce stores, evident by emerging VR stores such as
Amazon’s VR kiosks [77], eBay and Myer’s VR department
store [75], Alibaba Buy+ [2], and IKEA VR Store [78]. Al-
though these VR shopping platforms look promising, most
of them are designed only for a single user instead of a group
of friends, who often appear in brick-and-mortar stores. As
a result, existing approaches for conﬁguring the displayed
items in VR shopping malls are based on personal prefer-
ence (similar to online web shopping) without considering
potential social discussions amongst friends on items of in-
terests, which is reported as beneﬁcial for boosting sales in
the marketing literature [87, 90, 91]. In this paper, with the
support of Customized Interactive Display (CID), we envis-
age the scenario of group shopping with families and friends
in the next-generation VR malls, where item placement is
customized ﬂexibly in accordance with both user preferences
and potential social interactions during shopping.

The CID technology [32, 46] naturally enables VR group
shopping systems with two unique strengths: 1) Customiza-
tion. IKEA (see video [78] at 0:40) and Lowe’s [47] respec-
tively launch VR store applications where the displayed fur-
niture may adapt to the preferences of their users, which
attracts more than 73% of the users to recommend IKEA
VR store [37]. Alibaba’s [24] and eBay’s VR stores [51]
also devote themselves to provide personalized product of-
fers. According to a marketing survey, 79% of surveyed US,
UK, and China consumers are likely to visit a VR store dis-
playing customized products [25]. Similar to group traveling
and gaming in VR, the virtual environments (VEs) for in-
dividual users in VR group shopping need not be identical.
While it is desirable to have consistent high-level layout and
user interface for all users, the displayed items for each user
can be customized based on her preferences. As CID allows
diﬀerent users to view diﬀerent items at the same display
slot, personalized recommendation is supported.

2) Social Interaction. While a speciﬁc slot no longer needs
to display the same items to all users, users viewing a com-
mon item may engage a discussion on the item together,
potentially driving up the engagement and purchase conver-
sion [90, 91]. As a result, the displayed items could be tai-
lored to maximize potential discussions during group shop-
ping. A survey of 1,400 consumers in 2017 shows that 65%
of the consumers are excited about VR shopping, while 54%
of them acknowledge social shopping as their ways to pur-

1

 
 
 
 
 
 
tems [34, 58, 64, 68] may be leveraged to retrieve a bundled
itemset for all users. Nevertheless, by presenting the same
conﬁguration for the whole group of all users, this approach
may sacriﬁce the diverse individual interests. In the follow-
ing example, we illustrate the diﬀerence amongst the afore-
mentioned approaches, in contrast to the desirable SAVG
conﬁguration we target on.

Example 1 (Illustrative Example). Figure 1(a) depicts a
scenario of group shopping for a VR store of digital pho-
tography. At the upper left is a social network G = (V, E)
of four VR users, Alice, Bob, Charlie, and Dave (indicated
by red circles, green squares, blue pentagons, and brown
hexagons, respectively). On top is an item set C consist-
ing of ﬁve items: tripod, DSLR camera, portable storage
device (PSD), memory card, and self-portrait (SP) camera.
Given three display slots, the shaded areas, corresponding
to diﬀerent conﬁguration approaches, illustrate how items
are displayed to individuals or subgroups (in black rectan-
gles), respectively. For instance, in SAVG, the SP camera is
displayed at slot 1 to Alice, Charlie, and Dave to stimulate
their discussion. Figure 1(b) shows the same conﬁguration
as Figure 1(a) by depicting the individual item assignments
for each user with diﬀerent approaches.

A conﬁguration based on the personalized approach is
shown in the light-green shaded area. It displays the top-3
items of interests to individual users based on their prefer-
ences (which is consistent with the numerical example shown
in Table 1 in Section 3). This conﬁguration, aiming to in-
crease the exposure of items of interests to customers, does
not have users seeing the same item at the same slot. Next,
the conﬁguration shaded in light-orange, based on the group
approach, displays exactly the same items to every user
in the group. While encouraging discussions in the whole
group, this conﬁguration may sacriﬁce some individual in-
terests and opportunities to sell some items, e.g., Dave may
not ﬁnd his favorite item (the memory card). Aiming to
strike a balance between the factors of individual prefer-
ences and social interactions, the SAVG conﬁguration forms
subgroups ﬂexibly across the displayed slots, having some
users seeing the same items at the same slots (to encourage
discussions), yet ﬁnding items of individual interests at the
remaining slots. For example, the tripod is displayed at slot
2 to all users except for Charlie, who sees the PSD on his
own. The DSLR camera is displayed to Bob at slot 1 and to
Alice at slot 3, respectively, satisfying their individual inter-
ests. Figures 1(c) and 1(d) show Alice’s view at slot 1 and
slot 2, respectively, in this conﬁguration. As shown, Alice is
co-displayed the SP camera with Charlie and Dave at slot 1
(informed by the user icons below the primary view of the
item), then co-displayed the Tripod with Bob and Dave at
slot 2. As shown, SAVG shopping displays items of inter-
ests to individuals or diﬀerent subgroups at each slot, and
thereby is more ﬂexible than other approaches.

As illustrated above, in addition to identifying which items
to be displayed in which slots, properly partitioning sub-
groups by balancing both factors of personal preferences and
social discussions is critical for the above-depicted SAVG
shopping. In this work, we deﬁne the notion of SAVG k-
Conﬁguration, which speciﬁes the partitioned subgroups (or
individuals) and corresponding items for each of the allocated
k slots. We also introduce the notion of co-display that rep-
resents users sharing views on common items. Formally, we

(a) Comparison of diﬀerent approaches.

(b) Item assignments of diﬀerent approaches.

(c) Alice’s view at slot 1.

(d) Alice’s view at slot 2.

Figure 1: Illustrative example.

chase products [56]. The L.E.K. consulting survey [33] shows
that 70% of 1,000 consumers who had already experienced
VR technology are strongly interested in virtual shopping
with friends who are not physically present. Embracing the
trend, Shopify [71] and its technical partner Qbit [57] build
a social VR store supporting attendance of multiple users
with customized display [1].
In summary, compared with
brick-and-mortar shopping, VR group shopping can better
address the preferences of individuals in the group due to
the new-found ﬂexibility in item placement, which can be
conﬁgured not only for the group as a whole but also for in-
dividuals and subgroups. On the other hand, compared with
conventional E-commerce shopping on the Web, VR group
shopping can boost sales by facilitating social interactions
and providing an immersive experience.

Encouraged by the above evidence, we make the ﬁrst at-
tempt to formulate the problem of conﬁguring displayed
items for Social-Aware VR Group (SAVG) shopping. Our
strategy is to meet the item preferences of individual users
via customization while enhancing potential discussions by
displaying common items to a shopping group (and its sub-
groups). For customization, one possible approach is to use
existing personalized recommendation techniques [12,30,31]
to infer individual user preferences, and then retrieve the
top-k favorite items for each user. However, this person-
alized approach fails to promote items of common inter-
ests that may trigger social interactions. To encourage so-
cial discussions, conventional group recommendation sys-

2

𝑐1𝑐2𝑐3𝑐4𝑐5Item Set 𝐶TripodDSLRCameraSPCameraMemoryCard PSDslot 1slot 2slot 3SAVGslot 1slot 2slot 3AliceBobCharlieDaveslot 1slot 2slot 3slot 1slot 2slot 3G=(V,E)PersonalizedGroupSubgroup-by-friendshipslot 1slot 2slot 3Subgroup-by-preferenceSAVGslot 1slot 2slot 3Alice𝒄𝒄𝟓𝟓𝒄𝒄𝟏𝟏𝒄𝒄𝟐𝟐Bob𝒄𝒄𝟐𝟐𝒄𝒄𝟏𝟏𝒄𝒄𝟒𝟒Charlie𝒄𝒄𝟓𝟓𝒄𝒄𝟑𝟑𝒄𝒄𝟒𝟒Dave𝒄𝒄𝟓𝟓𝒄𝒄𝟏𝟏𝒄𝒄𝟒𝟒Person.slot 1slot 2slot 3Alice𝒄𝒄𝟓𝟓𝒄𝒄𝟐𝟐𝒄𝒄𝟏𝟏Bob𝒄𝒄𝟐𝟐𝒄𝒄𝟏𝟏𝒄𝒄𝟒𝟒Charlie𝒄𝒄𝟑𝟑𝒄𝒄𝟒𝟒𝒄𝒄𝟐𝟐Dave𝒄𝒄𝟒𝟒𝒄𝒄𝟓𝟓𝒄𝒄𝟑𝟑Groupslot 1slot 2slot 3Alice𝒄𝒄𝟓𝟓𝒄𝒄𝟏𝟏𝒄𝒄𝟐𝟐Bob𝒄𝒄𝟓𝟓𝒄𝒄𝟏𝟏𝒄𝒄𝟐𝟐Charlie𝒄𝒄𝟓𝟓𝒄𝒄𝟏𝟏𝒄𝒄𝟐𝟐Dave𝒄𝒄𝟓𝟓𝒄𝒄𝟏𝟏𝒄𝒄𝟐𝟐US $482.00SP CameraUS $1330.00DSLR CameraUS $55.00PSDTripodUS $140.00formulate a new optimization problem, namely Social-aware
VR Group-Item Conﬁguration (SVGIC), to ﬁnd the optimal
SAVG k-Conﬁguration that maximizes the overall 1) pref-
erence utility from users viewing their allocated items and
2) social utility from all pairs of friends having potential
discussions on co-displayed items, where the basic prefer-
ence utility of an individual user on a particular item and
the basic social utility of two given users on a co-displayed
item are provided as inputs. Meanwhile, we ensure that no
duplicated items are displayed at diﬀerent slots to a user.
The problem is very challenging due to a complex trade-oﬀ
between prioritizing personalized item conﬁguration and fa-
cilitating social interactions. Indeed, we prove that SVGIC
is NP-hard to approximate SVGIC within a ratio of 32
31 − (cid:15).
To solve SVGIC, we ﬁrst present an Integer Program (IP)
as a baseline to ﬁnd the exact solution which requires super-
polynomial time. To address the eﬃciency issue while ensur-
ing good solution quality, we then propose a novel approx-
imation algorithm, namely Alignment-aware VR Subgroup
Formation (AVG), to approach the optimal solution in poly-
nomial time. Speciﬁcally, AVG ﬁrst relaxes the IP to allow
fragmented SAVG k-Conﬁgurations, and obtains the opti-
mal (fractional) solution of the relaxed linear program. It
then assigns the fractional decision variables derived from
the optimal solution as the utility factors for various po-
tential allocations of user-item-slot in the solution. Items of
high utility factors are thus desirable as they are preferred to
individuals or encouraging social discussions. Moreover, by
leveraging an idea of dependent rounding, AVG introduces
the notion of Co-display Subgroup Formation (CSF) to strike
a balance between personal preferences and social interac-
tions in forming subgroups. CSF forms a target subgroup of
socially connected users with similar interests to display an
item, according to a randomized grouping threshold on util-
ity factors to determine the membership of the target sub-
group. With CSF, AVG ﬁnds the subgroups (for all slots)
and selects appropriate items simultaneously, and thereby
is more eﬀective than other approaches that complete these
tasks separately in predetermined steps. Theoretically, we
prove that AVG achieves 4-approximation in expectation.
We then show that AVG can be derandomized into a deter-
ministic 4-approximation algorithm for SVGIC. We design
further LP transformation and sampling techniques to im-
prove the eﬃciency of AVG.

Next, we enrich SVGIC by taking into account some prac-
tical VR operations and constraints. We deﬁne the no-
tion of indirect co-display to capture the potential social
utility obtained from friends displayed a common item at
two diﬀerent slots in their VEs, where discussion is facil-
itated via the teleportation [6] function in VR. We also
consider a subgroup size constraint on the partitioned sub-
groups at each display slot due to practical limits in VR
applications. Accordingly, we formulate the Social-aware
VR Group-Item Conﬁguration with Teleportation and Size
constraint (SVGIC-ST) problem, and prove that SVGIC-
ST is unlikely to be approximated within a constant ratio in
polynomial time. Nevertheless, we extend AVG to support
SVGIC-ST and guarantee feasibility of the solution. More-
over, we have extended AVG to support a series of practical
scenarios. 1) Commodity values. Each item is associated
with a commodity value to maximize the total proﬁt. 2) Lay-
out slot signiﬁcance. Each slot location is associated with
a diﬀerent signiﬁcance (e.g., center is better) according to

retailing researches [18, 74]. 3) Multi-View Display, where a
user can be displayed multiple items in a slot, including one
default personally preferred item in the primary view, and
multiple items to view with friends in group views, whereas
the primary and group views can be freely switched. 4)
Generalized social beneﬁts, where social utility can be mea-
sured from not only the pairwise (each pair of friends) but
also group-wise (any group of friends) perspectives. 5) Sub-
group change, where the ﬂuctuations (i.e., change of mem-
bers) between the partitioned subgroups at consecutive slots
are limited to ensure smooth social interactions as the elapse
of time. 6) Dynamic scenario, where users dynamic join and
leave the system with diﬀerent moving speeds. Finally, we
have also identiﬁed Social Event Organization (SEO) as an-
other important application of the targeted problem.

The contributions of this work are summarized as follows:

• We coin the notion of SAVG k-Conﬁguration un-
der the context of VR group shopping and formulate
the SVGIC problem, aiming to return an SAVG k-
Conﬁguration that facilitates social interactions while
not sacriﬁcing the members’ individual preferences.
We prove SVGIC is APX-hard and also NP-hard to
approximate within 32

31 − (cid:15).

• We systematically tackle SVGIC by introducing an
IP model and designing an approximation algorithm,
AVG, based on the idea of Co-display Subgroup For-
mation (CSF) that leverages the ﬂexibility of CID to
partition subgroups for each slot and display common
items to subgroup members.

• We deﬁne the SVGIC-ST problem to incorporate tele-
portation and subgroup size constraint. We prove
SVGIC-ST admits no constant-ratio polynomial-time
approximation algorithms unless ETH fails. We ex-
tend AVG to obtain feasible solutions of SVGIC-ST.

• A comprehensive evaluation on real VR datasets and
a user study implemented in Unity and hTC VIVE
manifest that our algorithms outperform the state-of-
the-art recommendation schemes by at least 30.1% in
terms of solution quality.

This paper is organized as follows. Section 2 reviews the
related work. Section 3 formally deﬁnes the notion of SAVG
k-Conﬁguration, then formulates the SVGIC and SVGIC-ST
problems and IP models for them. Then, Section 4 details
the proposed AVG algorithm and the theoretical results.
Section 5 discusses the directions for extensions. Section
6 reports the experimental results, and Section 7 concludes
this paper.

2. RELATED WORK

Group Recommendation.
Various schemes for esti-
mating group preference have been proposed by aggregat-
ing features from diﬀerent users in a group [58, 64]. Cao et
al. [9] propose an attention network for ﬁnding the group
consensus. However, sacriﬁcing personal preferences, the
above group recommenders assign a uniﬁed set of items
for the entire group based only on the aggregate prefer-
ence without considering social topologies. For advanced
approaches, recommendation-aware group formation [62]
forms subgroups according to item preferences. SDSSel [68]

3

ﬁnds dense subgroups and diverse itemsets. Shuai et al. [72]
customize the sequence of shops without considering CID.
However, the above recommenders ﬁnd static subgroups,
i.e., a universal partition, and still assign a ﬁxed conﬁgura-
tion of items to each subgroup, where every subgroup mem-
ber sees the same item in the same slot. In contrast, the
SAVG approach considered in this paper allows the parti-
tioned subgroups to vary across all display slots and thereby
is more ﬂexible than the above works.

Personalized Recommendation. Personalized recom-
mendation, a cornerstone of E-commerce, has been widely
investigated. A recent line of study integrates deep learn-
ing with Collaborative Filtering (CF) [12, 49] on heteroge-
neous applications [26], while Bayesian Personalized Rank-
ing [11,61] is proposed to learn the ranking of recommended
items. However, the above works fail to consider social in-
teractions. While social relations have been leveraged to
infer preferences of products [94, 95], POIs [42], and social
events [45], they do not take into account the social interac-
tions among users in recommendation of items. Thus, they
fail to consider the trade-oﬀ between social and personal fac-
tors. In this paper, we exploit the preferences obtained from
such studies to serve as inputs for the tackled problems.

Social Group Search and Formation.
Research on
ﬁnding various groups from online social networks (OSNs)
for diﬀerent purposes has drawn increasing attention in re-
cent years. Community search ﬁnds similar communities
containing a given set of query nodes [13, 43]. Group forma-
tion organizes a group of experts with low communication
costs and speciﬁc skill combinations [5, 59]. In addition, or-
ganizing a group in location-based social networks based on
certain spatial factors has also gained more attention [69,70].
The problems tackled in the above studies are fundamen-
tally diﬀerent from the scenario in this paper, since they
focus on retrieving only parts of the social network accord-
ing to some criteria, whereas item selection across multiple
slots is not addressed. Instead, SAVG group shopping aims
to conﬁgure item display for all VR shopping users, whereas
the subgroups partition the entire social network.

Related Combinatorial Optimization Problems.
SVGIC is related to the Multi-Labeling (ML) [85] prob-
lem and its variations, including Multiway Partition [85,92],
Maximum Happy Vertices/Edges (MHV/MHE) [88], and
Multiway Cut [16] in graphs.
In Section 3.4, we revisit
the challenging combinatorial nature of the proposed SVGIC
problem and its relation with the related problems with de-
tailed introduction of all problems and a summary table.

3. PROBLEM FORMULATION

AND

HARDNESS RESULTS

In this section, we ﬁrst deﬁne the notion of SAVG k-
Conﬁguration and then formally introduce the SVGIC and
SVGIC-ST problems. We also prove their hardness of ap-
proximation, and introduce integer programs for SVGIC and
SVGIC-ST as cornerstones for the AVG algorithm.

3.1 Problem Formulation

Given a collection C of m items (called the Universal Item
Set), a directed social network G = (V, E) with a vertex set
V of n users (i.e., shoppers to visit a VR store) and an edge

set E specifying their social relationships.
In the follow-
ing, we use the terms user set and shopping group inter-
changeably to refer to V , and deﬁne SAVG k-Conﬁguration
to represent the partitioned subgroups and the correspond-
ing items displayed at their allocated slots.

Deﬁnition 1. Social-Aware VR Group k-Conﬁguration
(SAVG k-Conﬁguration). Given k display slots for display-
ing items to users in a VR shopping group, an SAVG k-
Conﬁguration is a function A(·, ·) : (V × [k]) → C mapping a
tuple (u, s) of a user u and a slot s to an item c. A(u, s) = c
means that the conﬁguration has item c displayed at slot
s to user u, and A(u, :) = (cid:104)A(u, 1), A(u, 2), . . . , A(u, k)(cid:105)
are the k items displayed to u. Furthermore, the func-
tion is regulated by a no-duplication constraint which en-
sures the k items displayed to u are distinct, i.e., A(u, s) (cid:54)=
A(u, s(cid:48)), ∀s (cid:54)= s(cid:48).

For shopping with families and friends, previous research
[87, 90, 91] demonstrates that discussions and interactions
are inclined to trigger more purchases of an item. Speciﬁ-
cally, the VR technology supporting social interactions has
already been employed in existing VR social platforms, e.g.,
VRChat [80], AltspaceVR [3], and Facebook Horizon [22],
where users, represented by customized avatars,
interact
with friends in various ways: 1) Movement and gesture.
Commercial VR devices, e.g., Oculus Quest and HTC Vive
Pro, support six-degree-of-freedom headsets and hand-held
controllers to detect the user movements and gestures in
real-time. These movements are immediately updated to
the server and then perceived by other users. For example,
a high-ﬁve gesture mechanism is used in Rec Room [60] to
let users befriend others. 2) Emotes and Emojis. Similar to
emoticons in social network platforms, VR users can present
their emotions through basic expressions (happy face, sad
face, etc.) or advanced motions (e.g., dance, backﬂip, and
3) Real sound. This allows users
die in VRChat [81]).
to communicate with friends verbally through their micro-
phones. As such, current VR applications support immer-
sive and seamless social interactions, rendering social inter-
actions realistic in shopping systems.

With non-customized user environments in brick-and-
mortar stores, discussing a speciﬁc item near its location
is the default behavior. On the other hand, as users are
displayed completely customized items in personalized e-
commerce (e.g., the 20 items appearing on the main page of
a shopping site can be completely disjoint for two friends),
it often requires a “calibration” step (e.g., sharing the exact
hyperlink of the product page) to share the view on the tar-
get item before e-commerce users can engage in discussions
on some items. Since shopping users are used to having
discussions on the common item they are viewing at the
identical slot in their own Virtual Environments (VEs), we
devote to enhance the possibility of this intuitive setting in
our envisioned VR shopping VEs even though other settings
are also possible in VR.

Therefore, for a pair of friends displayed a common item,
it is most convenient to display the item at the same slot in
the two users’ respective VEs such that they can locate the
exact position easily (e.g., “come to the second shelf; you
should see this.”). Accordingly, upon viewing any item, it
is expected that the user interface indicates a list of friends
being co-displayed the speciﬁc item with the current user,
so that she is aware of the potential candidates to start a

4

Table 1: Preference and social utility values in Example 2.

p(uA, ·)

p(uB, ·)

p(uC , ·)

p(uD, ·)

c1
c2
c3
c4
c5

0.8
0.85
0.1
0.05
1.0

0.7
1.0
0.15
0.2
0.1

0
0.15
0.7
0.6
0.1

0.1
0
0.3
1.0
0.95

τ (uA,
uB, ·)
0.2
0.05
0.1
0
0.05

τ (uA,
uC , ·)
0
0.05
0.1
0
0.3

τ (uA,
uD, ·)
0.2
0.05
0.1
0.05
0.2

τ (uB,
uA, ·)
0.2
0.05
0.1
0.05
0.05

τ (uB,
uC , ·)
0
0.05
0.1
0.2
0

τ (uC ,
uA, ·)
0
0.05
0.1
0.05
0.3

τ (uC ,
uB, ·)
0.1
0.05
0.1
0.2
0.05

τ (uD,
uA, ·)
0.3
0.05
0.05
0
0.25

discussion with. To display an item at the same slot to a
pair of friends, we deﬁne the notion of co-display as follows.

Deﬁnition 2. Co-display (u c←→
s
that users u and v are co-displayed an identical item c at
slot s, i.e., A(u, s) = A(v, s) = c. Let u c←→ v denote that
there exists at least one s such that u c←→
s

v). Let u c←→
s

v represent

v.

Naturally, the original group of users are partitioned into
subgroups in correspondence with the displayed items. That
is, for each slot s ∈ [k], the SAVG k-Conﬁguration implicitly
partitions the user set V into a collection of disjoint subsets
V s = {V s
Np(s)}, where Np(s) is the number of
partitioned subgroups at slot s, such that u c←→
v if and only
s
if u, v ∈ V s

i , i = 1, . . . , Np(s).

2 , . . . , V s

1 , V s

Under the scenario of brick-and-mortar group shopping,
previous research [48, 50, 63, 87, 90] indicates that the sat-
isfaction of a group shopping user is aﬀected by two fac-
tors: personal preference and social interaction. Further-
more, empirical research on dynamic group interaction in
retails ﬁnds that shopping while discussing with others con-
sistently boosts sales [87], while intra-group talk frequency
has a signiﬁcant impact on users’ shopping tendencies and
purchase frequencies [90, 91]. Accordingly, we capture the
overall satisfaction by combining 1) the aggregated personal
preferences and 2) the retailing beneﬁts from facilitating so-
cial interactions and discussions. We note that, from an op-
timization perspective, these two goals form a trade-oﬀ be-
cause close friends/families may have diverse personal pref-
erences over items. One possible way to simultaneously con-
sider both factors is to use an end-to-end machine learning-
based approach, which generates the user embeddings and
item embeddings [9] and designs a neural network aggregator
to derive the total user satisfaction. However, this approach
requires an algorithm to generate candidate conﬁgurations
for ranking and relies on a huge amount of data to train the
parameters in the aggregator. On the other hand, previous
research [73, 82] has demonstrated that a weighted combi-
nation of the preferential and social factors is eﬀective in
measuring user satisfaction, where the weights can be di-
rectly set by a user or implicitly learned from existing mod-
els [45, 93]. Another possible objective is a weighted sum
of the previous objective metric (the aggregated preference)
with the aggregated social satisfaction as the constraint, or
vice versa, which is equivalent to our problem after apply-
ing Lagrangian relaxation to the constraint. Therefore, we
follow [73, 82] to deﬁne the SAVG utility as a combination
of aggregated preference utility and aggregated social utility,
weighted by a parameter λ.

Speciﬁcally, for a given pair of friends u and v, i.e., (u, v) ∈
E, and an item c ∈ C, let p(u, c) ≥ 0 denote the preference
utility of user u for item c, and let τ (u, v, c) ≥ 0 denote the

5

social utility of user u from viewing item c together with user
v, where τ (u, v, c) can be diﬀerent from τ (v, u, c). Following
[73, 82], the SAVG utility is deﬁned as follows.

Deﬁnition 3. SAVG utility (wA(u, c)). Given an SAVG
k-Conﬁguration A, the SAVG utility of user u on item c
in A represents a combination of the preference and social
utilities, where λ ∈ [0, 1] represents their relative weight.

wA(u, c) = (1 − λ) · p(u, c) + λ ·

(cid:88)

v|u

c←→v

τ (u, v, c)

The preference and social utility values can be directly given
by the users or obtained from social-aware personalized rec-
ommendation learning models [45,93]. Those models, learn-
ing from purchase history, are able to infer (u, c) and (u, v, c)
tuples to relieve users from ﬁlling those utilities manually.
The weight λ can also be directly set by a user or implic-
itly learned from existing models [45, 93]. To validate the
eﬀectiveness of this objective model, we have conducted a
user study in real CID VR shopping system which shows
high correlations between user satisfaction and the proposed
problem formulation (Please see Section 6.9 for the results).

Example 2. Revisit Example 1 where C = {c1, c2, . . . , c5}
and let V = {uA, uB, uC , uD} denote Alice, Bob, Charlie,
and Dave, respectively. Table 1 summarizes the given pref-
erence and social utility values. For example, the prefer-
ence utility of Alice to the tripod is p(uA, c1) = 0.8.
In
the SAVG 3-conﬁguration described at the top of Figure 1,
A(uA, ·) = (cid:104)c5, c1, c2(cid:105), meaning that the SP camera, the tri-
pod, and the DSLR camera are displayed to Alice at slots
1, 2, and 3, respectively. Let λ = 0.4. At slot 2, Alice
is co-displayed the tripod with Bob and Dave. Therefore,
wA(uA, c1) = 0.6 · 0.8 + 0.4 · (0.2 + 0.2) = 0.64.

We then formally introduce the SVGIC problem as follows.
All used notations in SVGIC are summarized in Table 2.
Problem: Social-aware VR Group-Item Conﬁguration.
Given: A social network G = (V, E), a universal item set
C, preference utility p(u, c) for all u ∈ V and c ∈ C, social
utility τ (u, v, c) for all (u, v) ∈ E and c ∈ C, the weight λ,
and the number of slots k.
Find: An SAVG k-Conﬁguration A∗ to maximize the total
SAVG utility

(cid:88)

(cid:88)

u∈V

c∈A∗(u,·)

wA∗ (u, c),

where wA∗ (u, c) is the SAVG utility deﬁned in Deﬁnition 3,
and the no-duplication constraint is ensured.

Based on SVGIC, we have the following observation on
several special cases of this problem. The personalized ap-
proach, introduced in Section 1, is a special case of SVGIC

Table 2: Notations used in SVGIC.

Symbol
n
m
k
G = (V, E)
V
E
C
A(·, ·)
A∗
p(u, c)
τ (u, v, c)
wA(u, c)
λ
p’(u, c)
u c←→
v
s
u c←→ v
Np(s)
V s

xc

u,s

xc
u

yc
e,s

yc
e

Description
number of users
number of items
number of display slots
social network
user set/shopping group
(social) edge set
Universal Item Set
SAVG k-Conﬁguration
optimal SAVG k-Conﬁguration
preference utility
social utility
SAVG utility
weight of social utility
scaled preference utility
Co-display (at slot s)

Co-display (at some slot)
number of user subgroups at slot s
collection of subgroups at slot s
decision variable of
u displayed c at slot s
decision variable of
u displayed c
decision variable of
u, v co-displayed c at slot s
decision variable of
u, v co-displayed c

Table 3: Notations used in SVGIC-ST.

Description
SAVG utility with indirect co-display
Indirect Co-display (at slots s, s(cid:48))

Indirect Co-display (at some slots)

discount factor
subgroup size constraint
decision variable of u, v co-displayed c

Symbol
w’A(u, c)
u c←−→
v
s,s(cid:48)
u c←→
ind
dtel
M
zc
e

v

with λ set to 0. In this special case, it is suﬃcient to lever-
age personalized (or social-aware personalized) recommen-
dation systems to infer the personal preferences, because the
problem reduces into trivially recommending the top-k fa-
vorite items for each user. On the other hand, the group
approach is also a special case of SVGIC with Np(s) = 1
for each s, i.e., all users view the same item at the same
slot. However, the combinatorial complexity of the solution
space for SVGIC is Θ(mnk) due to the ﬂexible partitioning of
subgroups across diﬀerent display slots in SAVG. Formally,
A(u, s) = A(v, s), ∀u, v ∈ V, s = 1, . . . , k, which corresponds
to a group recommendation scenario.

Due to the complicated interplay and trade-oﬀ of prefer-
ence and social utility, the following theorem manifests that
the optimal objective value of SVGIC can be signiﬁcantly
larger than the optimal objective values of the special cases
above, corresponding to personalized and group approaches.
Speciﬁcally, for each problem instance I, let OPT(I) denote

the optimal objective value of SVGIC. Let OPTP(I) and
OPTG(I) respectively denote the optimal objective values
of the special cases of personalized and group approaches in
the above discussion, i.e., SVGIC with λ = 1, and SVGIC
with Np(s) = 1 for each slot s, respectively.

Theorem 1. Given any n, there exists 1) a SVGIC instance
IG with n users such that OPT(IG)
OPTG(IG) = n. 2) a SVGIC
instance IP such that OPT(IP)
OPTP(IP) ≥ λ

2 = O(n).

1−λ · n−1

For IG,
Proof. We construct IG and IP as follows.
each user ui
in IG prefers exactly k items Ci =
{ci, cn+i, . . . , c(k−1)n+i}, i.e., p(ui, cj) = 1 for cj ∈ Ci, and
0 for cj /∈ Ci. Let E = ∅, and τ (u, v, c) thereby is 0 for all
(u, v, c). In the optimal solution of the group approach, each
slot s contributes at most 1 − λ to the total SAVG utility
because every item is preferred by exactly one user. By con-
trast, the optimal solution in SVGIC recommends ui all the
k items in Ci. Each ui then contributes k(1 − λ) to the total
SAVG utility, and thus OPT(IG)

OPTG(IG) = nk(1−λ)

k(1−λ) = n.

Speciﬁcally,

For IP, each user ui in IP prefers the items in Ci only
let
slightly more than all the other items.
p(ui, cj) = 1 for cj ∈ Ci, and p(ui, cj) = 1 − (cid:15) for cj /∈ Ci.
Let G represent a complete graph here, and τ (u, v, c) = 1
for all u, v and c. The optimal solution of the personal-
ized approach selects all the k items in Ci for each ui and
contributes (1 − λ) · n · k to the total SAVG utility. Note
that co-display is not facilitated because no common item is
chosen. By contrast, one possible solution in SVGIC recom-
mends to all users the same k items in C1, where each item
contributes (1 − λ) · ((1 − (cid:15))n + (cid:15)) to the total preference
and λ · n(n−1)
to the social utility. Thus, as (cid:15) approaches 0,
OPTP(IP ) ≥ k[(1−λ)·((1−(cid:15))n+(cid:15))+λ· n(n−1)
O(n), regarding λ as a constant.

1−λ · n−1

≈ 1 + λ

2 =

OPT(IP )

(1−λ)·n·k

2

2

]

3.2

Indirect Co-display and SVGIC-ST

In SVGIC, we characterize the merit of social discussions
by the social utilities to a pair of users when they see the
same item at the same slot. On the other hand, if a com-
mon item is displayed at diﬀerent slots in two users’ VEs,
a prompt discussion is more diﬃcult to initiate since the
users need to locate and move to the exact position of the
item ﬁrst. Teleportation [6], widely used in VR tourism and
gaming applications, allows VR users to directly transport
between diﬀerent positions in the VE. Thus, for a pair of
users Alice and Bob co-displayed an item at diﬀerent slots,
as long as they are aware of where the item is displayed,
one (or both) of them can teleport to the respective display
slot of the item to trigger a discussion. To model this event
that requires more eﬀorts from users, we further propose
a generalized notion of indirect co-display to consider the
above-described scenario.
Deﬁnition 4. Indirect Co-display. (u c←−→
s,s(cid:48)

v). Let u c←−→
s,s(cid:48)

v

denote that users u and v are indirectly co-displayed an item
c at slots s and s(cid:48) respectively in their VEs, i.e., A(u, s) =
A(v, s(cid:48)) = c. We use u
v to denote that there exist
diﬀerent slots s (cid:54)= s(cid:48) such that u c←−→
s,s(cid:48)

c←→
ind

v.

Note that we use u c←→ v to denote direct co-display, i.e.,
there exists at least one s such that u c←→
v, while using
s

6

v to denote indirect co-display. Also note that these

u c←→
ind
two events are mutually exclusive due to the no-duplication
constraint. Also note that u c←→
v is equivalent to direct
s,s
co-display: u c←→
s

v.

As social discussions on indirectly co-displayed items are
less immersive and require intentional user eﬀort, we intro-
duce a discount factor dtel < 1 on teleportation to down-
grade the social utility obtained via indirect co-display.
Therefore, the total SAVG utility incorporating indirect co-
display is as follows.

Deﬁnition 5. SAVG utility with indirect co-display
(w’A(u, c)). Given an SAVG k-Conﬁguration A, the SAVG
utility with indirect co-display of user u on item c in A is
deﬁned as

w’A(u, c) = (1 − λ) · p(u, c)

+ λ · (cid:0) (cid:88)
c←→v

v|u

τ (u, v, c) +

(cid:88)

dtel · τ (u, v, c)(cid:1).

v|u

c←→
v

ind

Finally, we note that existing VR applications often do not
accommodate an unlimited number of users in one shared
VE, e.g., VRChat [80] allows at most 16 users, and IrisVR
[38] allows up to 12 users within the same VE. Therefore,
we further incorporate a subgroup size constraint M as an
upper bound on the number of users directly co-displayed
the same item at the same location. More speciﬁcally, for all
slot s ∈ [k], all partitioned subgroups V s
i ∈ V s contain no
more than M users; or equivalently, given a ﬁxed slot s and
a ﬁxed item c, A∗(u, s) = c for at most M diﬀerent users
u. In the following, we introduce the SVGIC-ST problem
that incorporates indirect co-display and the subgroup size
constraint.
Problem:
Group-Item
Conﬁguration with Teleportation and Size con-
straint (SVGIC-ST).
Given: A social network G = (V, E), a universal item set
C, preference utility p(u, c) for all u and c, social utility
τ (u, v, c) for all u,v, and c, the weight λ, the number of
slots k, the teleportation discount dtel, and the subgroup
size upper bound M .
Find: An SAVG k-Conﬁguration A∗ to maximize the total
SAVG utility (with indirect co-display)

Social-aware

VR

(cid:88)

(cid:88)

u∈V

c∈A∗(u,·)

w’A∗ (u, c),

such that the subgroup size constraint is satisﬁed, and
w’A∗ (u, c) is deﬁned as in Deﬁnition 5.

Notations in SVGIC-ST are summarized in Table 3.

3.3 Hardness Result and Integer Program

In the following, we prove that SVGIC is APX-hard and
also NP-hard to approximate within a ratio of 32
31 − (cid:15). We
then prove that SVGIC-ST does not admit any constant-
factor polynomial-time approximation algorithms, unless
the Exponential Time Hypothesis (ETH) fails.

Theorem 2. SVGIC is APX-hard. Moreover, for any (cid:15) > 0,
it is NP-hard to approximate SVGIC within a ratio of 32
31 −(cid:15).
In the following, we prove the hardness result with a gap-
preserving reduction from the MAX − E3SAT problem [29].

7

Figure 2:
MAX − E3SAT

An illustration instance built

for

Given a conjunctive normal form (CNF) formula φ with ex-
actly 3 literals in each clause, MAX − E3SAT asks for a truth
assignment of all variables such that the number of satisﬁed
clauses in φ is maximized. The following lemma (from [29])
states the hardness of approximation of MAX − E3SAT.

Lemma 1. MAX − E3SAT is NP-hard to approximate
within a ratio of 8

7 − (cid:15).

Our reduction builds on the following lemma.

Lemma 2. There exists a gap-preserving reduction from
MAX − E3SAT to SVGIC which translates from a formula φ
to an SVGIC instance I such that

• If at least χ clauses can be satisﬁed in φ, then the

optimal value of I is at least 8 · χ,

• If less than 7

optimal value of I is less than 31

8 · χ clauses can be satisﬁed in φ, then the
4 · χ.

j2 , vj3 , v(cid:48)

Proof. Given a MAX − E3SAT instance φ with nvar Boolean
variables a1, . . . , anvar and mcla clauses C1, . . . , Cmcla , we
construct an SVGIC instance as follows. 1) Each clause
Cj = (lj1 ∨ lj2 ∨ lj3 ) corresponds to i) a vertex uj ∈ V1,
j1 , vj2 , v(cid:48)
and ii) six vertices vj1 , v(cid:48)
j3 ∈ V2, where vjt
corresponds to ai, and v(cid:48)
jt corresponds to ai (the negation of
ai), if and only if ljt is ai or ai. 2) Each Boolean variable ai
corresponds to a vertex wi ∈ V3. (Thus, V = (V1 ∪ V2 ∪ V3)
has (nvar + 7 · mcla) vertices.) 3) For each clause Cj, we
add an edge between uj and each of the three vertices in
V2 that correspond to TRUE assignments of the literals in
Cj. 4) For each literal ljt , if ljt is ai or ai, we add an edge
between wi and vjt and also an edge between wi and v(cid:48)
jt .
(Therefore, G has (9 · mcla) edges.) 5) For each edge be-
tween V1 and V2 with the form (uj, vjt ), we add an item cjt ;
similarly, for each edge between V1 and V2 with the form
(uj, v(cid:48)
jt ), we add an item c(cid:48)
jt . 6) For each Boolean vari-
able ai, we add two items ci and c(cid:48)
i. 7) For the preference
utility values, let p(v, c) = 0 for all v ∈ V, c ∈ C. 8) For
the social utility values, let τ (uj, vjt , cjt ) = τ (vjt , uj, cjt ) =
1 for every (uj, vjt ) ∈ E; similarly,
jt ) =
τ (v(cid:48)
jt ) ∈ E. Moreover, let
τ (wi, vjt , ci) = τ (vjt , wi, ci) = 1 if and only if ljt = ai;
similarly, let τ (wi, v(cid:48)
i) = τ (v(cid:48)
i) = 1 if and only
if ljt = ai. All other τ values are zero. An example is
illustrated in Figure 2. Finally, let k = λ = 1.

jt ) = 1 for every (uj, v(cid:48)

let τ (uj, v(cid:48)

jt , wi, c(cid:48)

jt , uj, c(cid:48)

jt , c(cid:48)

jt , c(cid:48)

𝜙=𝑎1∨ത𝑎3∨𝑎4∧(ത𝑎2∨𝑎3∨ത𝑎4)𝑢1𝑢2𝑣11𝑣11′𝑤1𝑤2𝑤3𝑤4𝑣12𝑣13𝑣12′𝑣13′𝑣21𝑣21′𝑣22𝑣22′𝑣23𝑣23′We ﬁrst prove the suﬃcient condition. Assume that there
exists a truth assignment in φ satisfying at least m clauses.
We construct a feasible solution for SVGIC as follows. 1)
For each satisﬁed clause Cj, let tj be the smallest t such
if ljtj
that ljt is assigned TRUE. uj is displayed item cjtj
is of the form ai; otherwise uj is displayed item c(cid:48)
; 2) For
jtj
each literal ljt with the form ai and assigned TRUE, vjt is
displayed item cjt ; for each literal ljt with the form ai and
assigned TRUE, v(cid:48)
jt is displayed item c(cid:48)
jt ; 3) For each literal
ljt with the form ai assigned FALSE, vjt is displayed item
ci; for each literal ljt with the form ai assigned FALSE, v(cid:48)
jt
is displayed item c(cid:48)
i; 4) For each Boolean variable ai, wi is
displayed item ci if and only if ai is FALSE in the assignment;
otherwise wi is displayed item c(cid:48)
i; 5) For an unsatisﬁed clause
Cj, uj can be displayed any item.

, or c(cid:48)

In the following, we prove that this solution achieves an
objective of at least (2 · m + 6 · mcla) in SVGIC. We ﬁrst
is co-
observe that for each satisﬁed clause Cj, either cjtj
is co-displayed to uj and
displayed to uj and vjtj
jtj
v(cid:48)
; each of the above cases achieves an objective value of
jtj
2. As there are at least m satisﬁed clauses, the above two
cases in total contribute at least 2 · m to the objective of
SVGIC. Next, for each Boolean variable ai assigned TRUE,
wi is co-displayed c(cid:48)
jt such that ljt is ai or ai;
similarly, for each Boolean variable ai assigned FALSE, wi
is co-displayed ci with every vjt such that ljt is ai or ai.
The above two cases achieve an objective value of 2 for each
co-display pairs. As there are exactly (3 · mcla) such pairs
of (wi, vjt ) or (wi, v(cid:48)
jt ), they in total contributes (6 · mcla)
to the objective of SVGIC. Combining the above two parts,
the objective value is at least (2 · m + 6 · mcla).

i with every v(cid:48)

We then prove the necessary condition. Assume that all
possible truth assignments in φ satisfy fewer than m(cid:48) clauses.
We then prove that the optimal solution in the SVGIC in-
stance is strictly less than (2 · m(cid:48) + 6 · mcla). We prove it by
contradiction. If there exists a feasible solution of SVGIC
with an objective at least (2 · m(cid:48) + 6 · mcla), we prove that
there exists at least one feasible solution of SVGIC such that
the total social utility from co-displaying items to one ver-
tex in V2 and another vertex in V3, denoted by τ (V2, V3),
is exactly 6 · mcla. To prove the above argument, we ﬁrst
observe that the total number of edges between vertices in
V2 and vertices in V3 is 6 · mcla. Furthermore, these edges
form exactly 3 · mcla copies of P3 (where every P3 is formed
by a wi and two vertices vjt and v(cid:48)
jt such that ljt is ai or
is ai). Since the two edges in each P3 can only contribute
to the ﬁnal objective through diﬀerent co-displayed items,
these edges in total contribute at most 6 · mcla to the ﬁnal
objective. Therefore, τ (V2, V3) ≤ 6 · mcla. Next, suppose a
solution with τ (V2, V3) < 6 · mcla is given. For an arbitrary
literal ljt , let ai be the corresponding variable. We examine
the following cases: 1) wi is co-displayed ci with vjt or c(cid:48)
i
with v(cid:48)
jt . In this case, a social utility of 2 is achieved. 2) wi
is not co-displayed any item with vjt or v(cid:48)
jt . As wi does not
contribute to the objective if it is displayed neither ci nor c(cid:48)
i,
it is feasible to display ci to wi without decreasing the total
objective. Next, it is also feasible to co-display ci to both vjt
and v(cid:48)
jt while not decreasing the total objective, since the
most social utility that vjt or v(cid:48)
jt could contribute previously
from being co-displayed cjt (or c(cid:48)
jt ) is also at most 2. By
repeatedly applying the two cases, we conclude that there
exists a solution where each literal ljt contributes exactly 2

to τ (V2, V3), which implies τ (V2, V3) = 6 · mcla.

jt must be co-displayed c(cid:48)

Given a feasible solution with τ (V2, V3) = 6 · mcla, we con-
struct a truth assignment in φ according to this solution as
follows. Let every variable ai be TRUE if and only if wi is
displayed c(cid:48)
i; otherwise ai is FALSE. Note that this is con-
sistent to the construction in the suﬃcient condition. For
each pair of vertices (uj, vjt ) co-displayed cjt in the solution,
since vjt is not co-displayed an item with any vertex in V3, it
follows that v(cid:48)
i with some wi ∈ V3
(otherwise τ (V2, V3) = 6 · mcla does not hold), which in turn
implies ai (appearing in clause Cj) is assigned TRUE in this
truth assignment, and Cj is therefore satisﬁed. Analogously,
for (uj, v(cid:48)
jt in the solution, Cj is also sat-
isﬁed by this truth assignment. As the total objective is at
least (2 · m(cid:48) + 6 · mcla) and τ (V2, V3) = 6 · mcla, the total
social utility from co-displaying items to one vertex in V1
and another vertex in V2, denoted by τ (V1, V2), is at least
(2 · m(cid:48)), meaning that at least m(cid:48) clauses are satisﬁed in φ
by the constructed truth assignment, leading to a contra-
diction. Therefore, we conclude that the optimal solution in
the SVGIC instance is strictly less than (2 · m(cid:48) + 6 · mcla).

jt ) co-displayed c(cid:48)

Finally, for any instance of MAX − E3SAT, a folklore ran-
dom assignment of variables satisﬁes 7
8 · mcla clauses in ex-
pectation (see, for example, Theorem 2.15 in [29]). There-
fore, for any instance of MAX − E3SAT with mcla clauses,
the optimal objective is always at least 7
8 · mcla. Therefore,
let OPTE3SAT denote the optimal objective in MAX − E3SAT,
we have

7
8

· mcla ≤ OPTE3SAT ≤ mcla.

Let χ be a constant. Based on this lower bound, we have:

OPTE3SAT ≥ χ =⇒ OPTSVGIC ≥ 2χ + 6mcla

≥ 8χ

OPTE3SAT <

7
8

· χ =⇒ OPTSVGIC < 2 ·

7
8

· χ + 6mcla

<

31
4

· χ,

where the second inequality holds since
OPTE3SAT < 7

8 · χ implies mcla < χ. The lemma follows.

7
8 · mcla ≤

8
31
4

= 32

Therefore, combining Lemma 1 and 2,

if there exists
an algorithm ALG that approximates SVGIC within a ra-
31 -gap ver-
tio of
sion of SVGIC), then it also solves the 8
7 -gap version of
MAX − E3SAT, which is known to be NP-hard. This com-
pletes the proof of Theorem 2.

31 (or equivalently, solves the 32

We then prove the APX-hardness through an exact re-
duction from the maximum K3-packing problem (Max-K3P)
[10] as follows.

Proof. Given a graph ˆG = ( ˆV , ˆE), Max-K3P aims to ﬁnd a
subgraph ˆH ⊆ ˆG with the largest number of edges such
that ˆH is a union of vertex-disjoint edges and triangles.
Given a Max-K3P instance ˆG = ( ˆV , ˆE), we construct an
SVGIC instance as follows. Let G = ˆG. For each edge
e = (u, v) ∈ ˆE, we construct an item ce. Let social utility
τ (u, v, ce) = τ (v, u, ce) = 0.5. For each triangle ∆ consist-
ing of vertices u, v, and w in ˆG, we construct an item c∆.
Let social utility τ (u, v, c∆) = τ (v, u, c∆) = τ (u, w, c∆) =

8

τ (w, u, c∆) = τ (v, w, c∆) = τ (w, v, c∆) = 0.5. Let all
other social utility values be 0. Also, let preference utility
p(u, c) = 0 for all users u and items c. Finally, let k = λ = 1.
We ﬁrst prove the suﬃcient condition. Assume there ex-
ists a feasible ˆH ⊆ ˆG with x edges. For each disjoint edge
e = (u, v) ∈ ˆH, let A(u, 1) = A(v, 1) = ce in SVGIC. Simi-
larly, for each disjoint triangle ∆ consisting of vertices u, v,
and w in ˆH, let A(u, 1) = A(v, 1) = A(w, 1) = c∆. Each
edge in ˆH achieves an SAVG utility of 1. Therefore, this
conﬁguration achieves a total SAVG utility of x. We then
prove the necessary condition. If the optimal objective in the
SVGIC instance is x, we let ˆH include all edges e = (u, v)
such that A(u, 1) = A(v, 1) = c and τ (u, v, c) = 0.5 (Note
that c could be ce or some c∆). It is straightforward to ver-
ify that any connected component in ˆH is either an edge or
a triangle. As each edge in ˆH contributes 1 to the objective
in SVGIC, there are exactly x edges in ˆH. Finally, since
Max-K3P is APX-hard [10], SVGIC is also APX-hard.

Here we further point out that both the hardness results of
SVGIC and SVGIC-ST are from a simple case where k = 1,
i.e., the considered problems are already very hard when
only one display slot is in consideration. Therefore, the
hardness of SVGIC and SVGIC-ST with general values of k
may be even harder. We revisit this issue in Section 3.4.

Next, we propose an Integer Programming (IP) model
for SVGIC and SVGIC-ST to serve as the cornerstone for
the approximation algorithm proposed later in Section 4.
We begin with the IP for SVGIC. Let binary variable xc
u,s
denote whether user u is displayed item c at slot s, i.e.,
xc
u,s = 1 if and only if A(u, s) = c. Let xc
u indicate whether
u is displayed c at any slot in the SAVG k-Conﬁguration.
Moreover, for each pair of friends e = (u, v) ∈ E, let binary
variable yc
e,s denote whether u and v are co-displayed item
c at slot s, i.e., yc
v. Similarly,
e = 1 if and only if u c←→ v. The objective of

e,s = 1 if and only if u c←→

variable yc
SVGIC is speciﬁed as follows.

s

We then prove the hardness of approximation for the ad-

vanced SVGIC-ST problem.

(cid:88)

max

(cid:88)

[(1 − λ) · p(u, c) · xc

u + λ ·

(cid:88)

(τ (u, v, c) · yc

e)]

Theorem 3. There exists no polynomial-time algorithm
that approximates SVGIC-ST within any constant factor,
unless the exponential time hypothesis (ETH) fails.

Proof. We prove the theorem with a gap-preserving re-
duction from the Densest k-Subgraph problem (DkS) [53].
Given a graph ˆG = ( ˆV , ˆE), DkS aims to ﬁnd a subgraph
ˆH ⊆ ˆG with ˆk vertices with the largest number of induced
(Note that for a ﬁxed ˆk, maximizing the density
edges.
is equivalent to maximizing the number of edges. We use
ˆk instead of the conventional k to avoid confusion with
the number of slots in SVGIC-ST.) Given a DkS instance
ˆG = ( ˆV , ˆE) and ˆk, we construct an SVGIC instance as fol-
lows. Let V = ˆV ∪ S, where S = {w1, w2, . . . , w|S|} consists
of |S| = ˆk − (| ˆV | mod ˆk) additional vertices if ˆk (cid:45) | ˆV |, and
S = ∅ if ˆk | | ˆV |. Let E = ˆE. Therefore, all vertices in S are
singletons. Let C = {c1, c2, . . . , cm}, where m = |V |
. Let
ˆk
preference utility p(u, c) = 0 for all u ∈ V and c ∈ C. For
each edge e = (u, v) ∈ ˆE, let τ (u, v, c1) = τ (v, u, c1) = 0.5.
Let τ (u, v, c) = 0 for all (u, v) /∈ ˆE or c (cid:54)= c1. Finally, let
k = 1, λ = 1, and M = ˆk.

We ﬁrst prove the suﬃcient condition. Assume that there
exists a subgraph ˆH ⊆ ˆG with ˆk vertices and x edges. We
construct an SVGIC-ST solution with objective x by co-
displaying c1 to all vertices in ˆH (and thereby obtaining
social utility of 1 on each edge) and then randomly parti-
tioning the vertices not in ˆH to m − 1 sets of cardinality
ˆk. We then prove the necessary condition. Since there are
items, and the subgroup size constraint is M = ˆk,
m = |V |
ˆk
it follows that each item is co-displayed to exactly M = ˆk
users in a feasible solution. Assume the optimal objective
in the SVGIC-ST instance is x, then the M = ˆk users co-
displayed item c1 collectively form a induced subgraph of
exactly x edges. Let ˆH be the induced subgraph formed by
these vertices in ˆG, then ˆH has exactly x edges. Finally,
according to [53], assuming the exponential time hypothe-
sis (ETH) holds, there is no polynomial-time algorithm that
approximates DkS to within a constant factor; in fact, a
stronger inapproximability of n(1/ log log n)c
holds. The re-
sult for SVGIC-ST directly follows.

9

u∈V

c∈C

e=(u,v)∈E

subject to the following constraints,

k
(cid:88)

s=1
(cid:88)

c∈C

xc
u,s ≤ 1, ∀u ∈ V, c ∈ C

xc
u,s = 1, ∀u ∈ V, s ∈ [k]

k
(cid:88)

s=1

k
(cid:88)

xc
u =

yc
e =

xc
u,s, ∀u ∈ V, c ∈ C

yc
e,s, ∀e = (u, v) ∈ E, c ∈ C

s=1
e,s ≤ xc
yc
u,s, ∀e = (u, v) ∈ E, s ∈ [k], c ∈ C
e,s ≤ xc
yc
v,s, ∀e = (u, v) ∈ E, s ∈ [k], c ∈ C
e,s, yc
e ∈ {0, 1}, ∀u ∈ V, e ∈ E, s ∈ [k], c ∈ C.

u,s, xc
xc

u, yc

(1)

(2)

(3)

(4)

(5)

(6)

(7)

e = 1 if and only if yc

Constraint (1) states that each item c can only be dis-
played at most once to a user u (i.e., the no-duplication
constraint). Constraint (2) guarantees that each user u is
displayed exactly one item at each slot s. Constraint (3)
ensures that xc
u = 1 (u is displayed c in the conﬁguration)
if and only if there is exactly one slot s with xc
u,s = 1. Sim-
ilarly, constraint (4) ensures yc
e,s = 1
for exactly one s. Constraints (5) and (6) specify the co-
display, where yc
e,s is allowed to be 1 only if c is displayed
to both u and v at slot s, i.e., xc
u,s = xc
v,s = 1. Finally,
constraint (7) ensures all decision variables are binary. Note
that the x variables in the IP model are suﬃcient to rep-
resent the solution of SVGIC (i.e., xc
u,s denotes whether an
item c is displayed at slot s for user u), whereas the y vari-
ables are auxiliary to enable SVGIC to be formulated as an
IP. Without incorporating the y variables, the formulation
will become nonlinear.

Next, for each e = (u, v) ∈ E, let binary variable zc
e de-
note whether u and v are co-displayed (both directed or in-
directed) item c. Note that yc
e = 1. To avoid
repetitive calculation of the social utility, the coeﬃcient be-
fore yc
e in the objective is modiﬁed to be (1 − dtel), such that
a social utility of τ (u, v, c) is obtained when yc
e = 1.
The objective of SVGIC-ST is thus

e = 1 implies zc

e = zc

(cid:88)

(cid:88)

max

u∈V

c∈C

[(1 − λ) · p(u, c) · xc

u + λ ·

(cid:88)

τ (u, v, c)

· (cid:0)(1 − dtel) · yc

e + dtel · zc
e

(cid:1)]

e=(u,v)∈E

subject to constraints (1) to (6) above, as well as the follow-
ing constraints:

e ≤ xc
zc
e ≤ xc
zc

u, ∀e = (u, v) ∈ E, c ∈ C
v, ∀e = (u, v) ∈ E, c ∈ C

(8)
(9)
e ∈ {0, 1}, ∀u ∈ V, e ∈ E, s ∈ [k], c ∈ C. (10)

u,s, xc
xc

u, yc

e,s, yc

e, zc

u = xc

Constraints 8 and 9 specify the co-display, where zc
e is
allowed to be 1 only if c is displayed to u and v in some (not
necessarily the same) slots, i.e., xc
v = 1. Therefore,
yc
e = zc
e = 1 for the case of direct co-display. Constraint
10 is the integrality constraint. The other constraints follow
from the basic SVGIC problem. Note that in the optimal
solution, whenever yc
e = 1 for some edge e, the corresponding
zc
e will also naturally equal 1, as it is always better to have
a larger zc
e. Therefore, no additional constraint needs to
be introduced to enforce this relation. Note that, similar to
that in the IP for SVGIC, the y and z variables are auxiliary
variables to enable linearity in this IP.

3.4 Related Combinatorial Problems

SVGIC is related to the Multi-Labeling (ML) [85] prob-
lem and its variations, including Multiway Partition [85,92],
Maximum Happy Vertices/Edges (MHV/MHE) [88], and
Multiway Cut [16] in graphs. In the Multi-Labeling (ML)
problem, the general inputs are a ground set of entities V , a
set of labels L = {1, 2, . . . , m}, and a partial labeling func-
tion (cid:96) : V (cid:55)→ L that pre-assigns each label i to a non-empty
subset Ti ⊆ V , and a set function f : 2V (cid:55)→ R. The goal
of ML is to partition the ground set into m subsets to opti-
mize the aggregated set function on the partitioned subsets,

i.e.,

f (Ti). The special cases with set function f being

m
(cid:80)
i=1

submodular or supermodular is called Submodular Multi-
Labeling (Sub-ML) or Supermodular Multi-Labeling (Sup-
ML) [85]. Another work [92] studies the case where the par-
tial labeling function is required to assign a label i to only
one entity vi. The above problems become Submodular Mul-
tiway Partition (Sub-MP) and Supermodular Multiway Par-
tition (Sup-MP) in this context. Some special cases of Sub-
ML and Sup-ML are described as graph problems, where the
ground set V is the vertex set on a graph G = (V, E). In this
context, the above assumption on f in Sub-MP and Sup-MP
can be interpreted as m speciﬁed terminals on the graph.
Two representative special cases are the Maximum Happy
Vertices (MHV) problem and the Maximum Happy Edges
(MHE) problem [88]. Originally proposed to study homo-
phyly eﬀects in networks, MHV and MHE are described as
coloring problems where, diﬀerent from traditional graph
coloring, vertices are encouraged to share the same color
with neighbors. Edges with same-color vertices and vertices
sharing the same color with all neighbors are characterized
as happy edges and happy vertices, respectively. The opti-
mization goals of MHV and MHE are thus to maximize the
number of happy vertices and edges. The complement prob-
lem of MHV, Minimum Unhappy Vertices (MUHV) [85],
minimizes the number of unhappy vertices. When the above
optimization goal of MHE is combined with the assumption

of m terminals, the resultant problem becomes the Mul-
tiway Uncut problem [41], which is the complement of the
classical and extensively studied Multiway Cut problem [16].
The Multiway Cut problem asks for the minimum number
of edges removed to partition a graph into m subgraph, each
containing one terminal. The Metric Labeling problem [40]
is a generalization of Multiway Cut considering edge weights
and also a cost function on labeling the vertices. We summa-
rize the problem characteristics, hardness results, currently
best algorithmic results, and their interdependency in Ta-
ble 4. All the problems are NP-hard, while more advanced
inapproximability results, relying on other complexity con-
jectures, are stated for some problems. Note that the ap-
proximation ratios for maximization problems are shown as
inverses (i.e., values larger than 1) for better comparison
and consistency with this paper.

Among the ML-type problems, SVGIC is particularly
correlated to the MHE problem. Regarding the displayed
items in SVGIC as colors(labels) in MHE, the social utility
achieved in SVGIC is closely related to preserved number
of happy edges in MHE, and SVGIC thereby encourages
partitioning all users into dense subgroups to preserve the
most social utility. However, SVGIC is more diﬃcult than
the above ML-type problems due to the following reasons.
1) The ML-type problems ﬁnd a strict partition that maps
each entity/vertex to only one color(label), while SVGIC as-
signs k items to each user, implying that any direct reduction
from the above problems can only map to the k = 1 special
case in SVGIC, where AVG can achieve a 2-approximation.
2) The above problems do not discriminate between diﬀer-
ent labels, i.e., switching the assigned labels of two diﬀerent
subgroups will not change their objective functions. This
corresponds to the special case of SVGIC where all prefer-
ence utility p(u, c) and social utility τ (u, v, c) do not depend
on the item c. 3) The above problems admit a partial label-
ing (pre-labeling) in the input such that some entities have
predeﬁned ﬁxed labels (otherwise labeling every entity with
the same label is optimal and renders the problem trivial),
while SVGIC does not specify any items to be displayed to
speciﬁc users. However, SVGIC requires k items for each
user; moreover, even in the k = 1 special case, it is still
not optimal to simply display the same item to all users
in SVGIC due to the item-dependent preference and social
utility.

Finally, we note that while most of the minimization prob-
lems admit stronger hardness results than conventional NP-
hardness, no such type of results are known for all maxi-
mization problems above. As SVGIC is also a maximiza-
tion problem, its hardness does not directly follow from any
complementary minimization problems.
Interestingly, the
algorithmic aspect of all these problems share an obvious
trend: almost all approximation results here, including our
algorithm for SVGIC, utilizes some kind of (dependent) ran-
domized rounding on some formulation of relaxed problem
(not limited to linear relaxation). In this regard, this paper
extends the scheme beyond labeling problems to the SVGIC
problem that assigns a k-itemset to each user, which has an
even more complicated combinatorial nature.

4. ALGORITHM DESIGN

In this section, we introduce the Alignment-aware VR
Subgroup Formation (AVG) algorithm to tackle SVGIC. As
shown in Example 1, the personalized and group approaches

10

Table 4: Related Combinatorial Problems (approximation ratio for MAX problems inversed).

Abbrev.

Prelabeling

Type Objective

Problem
Name

Submodular
Multi-Labeling [85]
Supermodular
Multi-Labeling [85]
Submodular
Multiway Partition [92]
Supermodular
Multiway Partition [85]
Maximum
Happy Vertices [88]
Minimum
Unhappy Vertices [85]
Maximum
Happy Edges [88]

Sub-ML General

MIN

Sup-ML General

MAX

Sub-MP m terminals MIN

Sup-MP m terminals MAX

MHV

General

MAX

MUHV

General

MIN

MHE

General

MAX

Multiway Cut [16]

m terminals MIN

Multiway Uncut [41]

m terminals MAX

submodular
set function
supermodular
set function
submodular
set function
supermodular
set function
# happy
vertices
# unhappy
vertices
# happy
edges
# edges
removed
# edges
preserved

Hardness
Result
2 − 2
m − (cid:15)
(UGC) [85]

NP-hard

2 − 2
m − (cid:15)
(NP = RP) [19]

NP-hard

NP-hard

2 − 2
m − (cid:15)
(UGC) [85]

Approx.
Result

Is a special
case of

Is the comple-
ment of

2 − 2

m [85]

m
2 [85]

2 − 2

m [19]

m
2 [85]

2 − 2

m [85]

Sup-ML

Sub-ML

Sub-ML

Sup-MP

Sup-ML

Sub-MP

Sup-ML

MUHV

Sub-ML

MHV

NP-hard

1.1716 [89]

Sup-ML

8
7 [52]

1.2965 [65] UML

NP-hard

1.1716 [41] MHE

Multiway
Uncut
Multiway
Cut

Uniform Metric
Labeling [40]

UML

m terminals MIN

# total cost of
edges/vertices

2 − 2
m
(UGC) [52]

2 [40]

Metric
Labeling

u,s

Table 5: Notations used in AVG.
Symbol
X ∗
x∗c
(c, s, α)
c/ˆc
s/ˆs
u/ˆu
α
U
OPT
R
Rper
Rsoc
Scur
Star(c, s, x∗c
u,s)
Sfut(c, s, x∗c
u,s)
ALG(Star(c, s, x∗c
OPTLP(Sfut(c, s, x∗c

Description
optimal fractional solution
optimal decision variable
set of focal parameters
focal item
focal slot
current user/eligible user
grouping threshold
target subgroup
optimal SAVG utility
achieved utility
achieved preference utility
achieved social utility
available display units
display units to be ﬁlled
display units not to be ﬁlled
SAVG utility gained by CSF
expected future SAVG utility
τ (ˆu, ˆv, c) + τ (ˆv, ˆu, c)
balancing ratio

u,s))
u,s))

wc
e
r

do not solve SVGIC eﬀectively, as the former misses on so-
cial utility from co-display while the latter fails to leverage
the ﬂexibility of CID to preserve personal preference. An
alternative idea, called the subgroup approach, is to ﬁrst
pre-partition the shopping group (i.e., the whole user set)
into some smaller social-aware subgroups (e.g., using tradi-
tional community detection techniques), and then determine
the displayed items based on preferences of the subgroups.
While this idea is eﬀective for social event organization [82]
where each user is assigned to exactly one social activity, it
renders the partitioning of subgroups static across all display
slots in SVGIC, i.e., a user is always co-displayed common

11

items only with other users in the same subgroup. There-
fore, this approach does not fully exploit the CID ﬂexibility,
leaving some room for better results.

Instead of using a universal partition of subgroups as
in the aforementioned subgroup approach, we aim to de-
vise a more sophisticated approach that allows varied co-
display subgroups across the display slots to maximize the
user experience. Accordingly, we leverage Linear Program-
ming (LP) relaxation strategies that build on the solution
of the Integer Program formulated in Section 3.3 because
it naturally facilitates diﬀerent subgroup partitions across
all slots while allocating proper items for those subgroups
with CID. In other words, our framework partitions the sub-
groups (for each slot) and selects the items simultaneously,
thus avoiding any possible shortcomings of two-phased ap-
proaches that ﬁnish these two tasks sequentially. By relax-
ing all the integrality constraints in the IP, we obtain a re-
laxed linear program whose fractional optimal solution can
be explicitly solved in polynomial time. For an item c to be
displayed to a user u at a certain slot s, the fractional deci-
sion variable x∗c
u,s obtained from the optimal solution of the
LP relaxation problem can be assigned as its utility factor.
Items with larger utility factors are thus inclined to con-
tribute more SAVG utility (i.e., the objective value), since
they are preferred by the users or more capable of triggering
social interactions.

Next, it is important to design an eﬀective rounding pro-
cedure to construct a promising SAVG k-Conﬁguration ac-
cording to the utility factors. We observe that simple in-
dependent rounding schemes may perform egregiously in
SVGIC because they do not facilitate eﬀective co-displaying
of common items, thereby losing a huge amount of potential
social utility upon constructing the SAVG k-Conﬁguration,
especially in the cases where the item preferences are not di-
verse. Indeed, we prove that independent rounding schemes
may achieve an expected total objective of only O(1/m)
of the optimal amount. Motivated by the incompetence
of independent rounding, our idea is to leverage dependent

rounding schemes that encourage co-display of items of com-
mon interests, i.e., with high utility factors to multiple users
in the optimal LP solution.

Based on the idea of dependent rounding schemes in [40],
we introduce the idea of Co-display Subgroup Formation
(CSF) that co-displays a focal item c at a speciﬁc focal slot
s to every user u with a utility factor xc
u,s greater than a
grouping threshold α. In other words, CSF clusters the users
with high utility factors to a focal item c to form a target
subgroup in order to co-display c to the subgroup at a spe-
ciﬁc display slot s. Depending on the randomly chosen set
of focal parameters, including the focal item, the focal slot,
and the grouping threshold, the size of the created target
subgroups can span a wide spectrum, i.e., as small as a sin-
gle user and as large as the whole user set V , to eﬀectively
avoid the pitfalls of personalized and group approaches. The
randomness naturally makes the algorithm less vulnerable
to extreme-case inputs, therefore resulting in a good ap-
proximation guarantee. Moreover, CSF allows the parti-
tions of subgroups to vary across all slots in the returned
SAVG k-Conﬁguration, exploiting the ﬂexibility provided
by CID. However, diﬀerent from the dependent rounding
schemes in [40], the construction of SAVG k-Conﬁgurations
in SVGIC faces an additional challenge – it is necessary to
carefully choose the displayed items at multiple slots to en-
sure the no-duplication constraint.

We prove that AVG is a 4-approximation algorithm for
SVGIC and also show that AVG can be fully derandomized
into a deterministic approximation algorithm. We also tailor
CSF to consider the size constraint so as to extend AVG for
the more complicated SVGIC-ST. In the following, we ﬁrst
deal with the case with λ = 1
2 . We observe that all other
cases with λ (cid:54)= 0 can be reduced to this case by proper
scaling of the inputs, i.e., p’(u, c) = 1−λ
λ p(u, c), whereas
λ = 0 makes the problem become trivial. We explicitly
prove this property in Section 4.4. Moreover, for brevity,
the total SAVG utility is scaled up by 2 so that it is a direct
sum of the preference and social utility. All used notations
in AVG are summarized in Table 5.

4.1 LP Relaxation and an Independent

Rounding Scheme

u, yc

e,s, yc

u,s, xc

Following the standard linear relaxation technique [83],
the LP relaxation of SVGIC is formulated by replacing the
integrality constraint (constraint (7)) in the IP model, i.e.,
e,s, yc
u,s, xc
xc
e ∈ {0, 1}, with linear upper/lower bound
constraints, i.e., 0 ≤ xc
u, yc
e ≤ 1. The optimal frac-
tional solution of the relaxed problem can be acquired in
polynomial time with commercial solvers, e.g., CPLEX [36]
or Gurobi [28]. Recall that the x-variables are suﬃcient to
represent the solution of SVGIC (i.e., xc
u,s denotes whether
an item c is displayed at slot s for user u), whereas the y-
variables are auxiliary. Therefore, the optimal solution can
be fully represented by X ∗ (the set of optimal x variables).
The fractional decision variable x∗c
u,s in X ∗ is then taken as
the utility factor of item c at slot s for user u. Note that the
optimal objective in the relaxed LP is an upper bound of the
optimal total SAVG utility in SVGIC, because the optimal
solution in SVGIC is guaranteed to be a feasible solution of
the LP relaxation problem.

Example 3. Table 6 shows the utility factors in Example
2, where the fractional solution is identical for all slots 1-
3 (thereby only slot 1 is shown). For example, the utility

12

Table 6: Optimal fractional solution for slot 1 in
Example 2.

x∗c1
·,1
0.33
0.33
0
0.33

x∗c2
·,1
0.33
0.33
0
0

x∗c3
·,1
0
0
0.33
0

x∗c4
·,1
0
0.33
0.33
0.33

x∗c5
·,1
0.33
0
0.33
0.33

uA
uB
uC
uD

factor of c1 (the tripod) to Alice at each slot is x∗c1
x∗c1

u,2 = x∗c1

u,3 = 0.33.

u,1 =

Note that three items (c1, c2, and c5) have nonzero utility
factors to Alice at slot 1 in Example 3, which manifests that
the optimal LP solution may not construct a valid SAVG
k-Conﬁguration because each user is allowed to display ex-
actly one item at each display slot in SVGIC. Therefore, a
rounding scheme is needed to construct appropriate SAVG
k-Conﬁgurations from the utility factors. Given X ∗, a sim-
ple rounding scheme is to randomly (and independently)
assign item c to user u at slot s with probability x∗c
u,s, i.e.,
the utility factor of c to u at s, so that more favorable items
are more inclined to be actually displayed to the users. This
rounding scheme is summarized in Algorithm 1.

Algorithm 1 Trivial Rounding Scheme
Input: X ∗
Output: An SAVG k-Conﬁguration A
1: for u ∈ V do
2:
3:

for s ∈ {1, 2, . . . , k} do

with probability x∗c

u,s

Display item c to user u at slot s independently

However, as this strategy selects the displayed items in-
dependently, for a pair of friends u and v, the chance that
the algorithm obtains high social utility by facilitating co-
display is small, since it requires the randomized rounding
process to hit on the same item for both u and v simulta-
neously. Furthermore, this strategy could not ensure the ﬁ-
nal SAVG k-Conﬁguration to follow the no-duplication con-
straint, as an item c can be displayed to a user u at any slot
with a nonzero utility factor. The following lemma demon-
strates the ineﬀectiveness of this rounding scheme.

Lemma 3. There exists an SVGIC instance I on which the
above rounding scheme achieves only a total SAVG utility
of O( 1

m ) of the optimal value in expectation.

u,s = 1

Proof. Assume that for all users u, v ∈ V and c ∈ C, we have
p(u, c) = 0 and τ (u, v, c) = τ for a constant τ > 0. Intu-
itively, every user is indiﬀerent among all items. In this case,
a trivial optimal solution for the relaxed LP can be found
by setting x∗c
m for all c, u, s. As the trivial rounding
scheme determines the displayed items independently, for
any pair of users u, v and any slot s, the probability that u
and v are co-displayed any item at slot s is only 1
m . There-
fore, the expected total SAVG utility achieved is n(n−1)
m ·τ ·k.
On the other hand, co-displaying an arbitrary item to all
users achieves a social utility of n(n − 1) · τ , and repeating
this with distinct items for all slots yields a total SAVG util-
ity of n(n − 1) · τ · k. This independent rounding scheme thus

m(n−1)τ = O( 1

achieves only (n−1)τ
m ) of the optimal value. More-
over, the resulting SAVG k-Conﬁguration is highly unlikely
to satisfy the no-duplication constraint.

4.2 Alignment-aware Algorithm

To address the above issues, we devise the Co-display
Subgroup Formation (CSF) rounding scheme, inspired by
the dependent rounding scheme for labeling problems [40],
as the cornerstone of AVG to ﬁnd a target subgroup U
according to a set of focal parameters for co-display of
the focal item to all users in U . Given the optimal frac-
tional solution X ∗ to the LP relaxation problem, AVG it-
eratively 1) samples a set of focal parameters (c, s, α) with
c ∈ C, s ∈ {1, 2, . . . , k}, and α ∈ [0, 1] uniformly at random;
it then 2) conducts CSF according to the selected set of pa-
rameters (c, s, α) until a complete SAVG k-Conﬁguration is
constructed. It is summarized in Algorithm 2.

Algorithm 2 Alignment-aware VR Subgroup Formation
(AVG)
Input: X ∗
Output: An SAVG k-Conﬁguration A
1: A(ˆu, ˆs) ← NULL for all ˆu, ˆs
2: X ∗ ← X ∗
LP
3: while some entry in A is NULL do
4:
5:
6:
7:
8:
9:
10: return A

if A(ˆu, s) = NULL and A(ˆu, t) (cid:54)= c ∀t (cid:54)= s then
(ˆu eligible for (c, s))

Sample c ∈ C, s ∈ [k], α ∈ [0, 1] randomly
for ˆu ∈ V do

ˆu,s ≥ α then

A(ˆu, s) ← c

if x∗c

Co-display Subgroup Formation. Given the randomly
sampled set of parameters (c, s, α), CSF ﬁnds the target
subgroup as follows. With the focal item c and the focal
slot s, a user ˆu is eligible for (c, s) in CSF if and only if 1)
ˆu has not been displayed any item at slot s, and 2) c has
not been displayed to ˆu at any slot. Users not eligible for
(c, s) are not displayed any item in CSF to ensure the no-
duplication constraint. For each eligible user ˆu, CSF selects
c for ˆu at slot s (i.e., A(ˆu, s) ← c) if and only if x∗c
ˆu,s is
no smaller than the grouping threshold α. In other words,
given (c, s, α), CSF co-displays c to a target subgroup U that
consists of every eligible user ˆu with x∗c
ˆu,s ≥ α. Therefore,
the grouping threshold α plays a key role to the performance
bound in the formation of subgroups. Later we prove that
with the above strategy, for any pair of users u, v and any
item c, Pr(u c←→ v) ≥ y∗ c
4 ; or equivalently, the expected
social utility of u from viewing c with v obtained in the ﬁnal
SAVG k-Conﬁguration is at least a constant factor within
that in the optimal LP solution.

e

AVG repeats the process of parameter sampling and CSF
until a feasible SAVG k-Conﬁguration is fully constructed,
i.e., each user is displayed exactly one item at each slot, and
the no-duplication constraint is satisﬁed.

Revisiting independence vs. dependence. Recall the
troublesome input instance in the proof of Lemma 3 where
independent rounding performs poorly. By exploiting the
dependent rounding scheme in CSF, since x∗c
m for
all c, u, s, upon the ﬁrst time a grouping threshold α ≤ 1
m

u,s = 1

is sampled, CSF co-displays the focal item c to every user
in the shopping group, which is the optimal solution. On
the other hand, independent rounding could not facilitate
co-displaying an item to all users as eﬀectively.

uA,2 = 0.

uC ,2 = x∗c4

uA,3 = x∗c1

uD ,3 = 0.33 > 0.06 > x∗c1

Example 4. For Example 2 with the utility factors shown
in Table 6, assume that the set of focal parameters are sam-
pled as (c, s, α) = (c1, 3, 0.06). Since x∗c1
uB ,3 =
x∗c1
uC ,3 = 0, CSF co-displays
the tripod to the subgroup {Alice, Bob, Dave} at slot
3. Note that this solution is not the SAVG conﬁgura-
tion in Figure 1.
Next, for the second set of parame-
ters (c, s, α) = (c4, 2, 0.22), {Bob, Charlie, Dave} is formed
and co-displayed the memory card at slot 2, since x∗c4
uB ,2 =
uD ,2 = 0.33 > 0.22 > x∗c4
x∗c4
In the
third iteration, RFS selects (c, s, α) = (c3, 1, 0.04). As only
x∗c3
uC ,1 = 0.33 is nonzero among the utility factors for c3 at
slot 1, CSF assigns PSD to {Charlie} alone at slot 1. Next,
in iteration 4, (c, s, α) = (c5, 3, 0.2). At this moment, only
Charlie has not been assigned an item at slot 3 since the oth-
ers are co-displayed the tripod earlier. Because utility factor
x∗c3
uC ,5 = 0.33 > 0.2, the SP camera is displayed to {Charlie}
at slot 3. Iteration 5 generates (c, s, α) = (c5, 1, 0.31). For
the users without displayed items at slot 1, only Alice and
Dave (but not Bob) have their utility factors of the SP cam-
era larger than 0.31. Thus {Alice, Dave} are co-displayed
the item at slot 1. The ﬁnal two iterations with x∗c3
uC ,5 as
(c2, 1, 0.01) and (c2, 2, 0.19) displays the DSLR camera to
{Bob} at slot 1 and {Alice} at slot 2. This ﬁnalizes the
construction of a SAVG k-Conﬁguration as represented in
Table 7, achieving a total SAVG utility of 9.75.1

We then show that AVG is a 4-approximation algorithm

for SVGIC in expectation.

Theorem 4. Given the optimal
solution
X ∗, AVG returns an expected 4-approximate SAVG k-
Conﬁguration in O(n2 · k)-time.

fractional

Let OPT be the optimal total SAVG utility in SVGIC. An
iteration of AVG includes 1) focus phase sampling a (c, s, α)
and 2) CSF with (c, s, α). Let R denote the total SAVG
utility achieved by AVG. Moreover, let Rpre and Rsoc denote
the total preference and social utilities achieved by AVG,
respectively. Let OPT be the optimal total SAVG utility of
SVGIC. Let X and Y be the solutions found by AVG, i.e.,
feasible solutions to xc
u, yc
e in Section 3.3. Let
wc
e = τ (u, v, c) + τ (v, u, c) for all e = (u, v) ∈ E. Therefore,
E[R] = E[Rpre] + E[Rsoc], where

e,s, and yc

u,s, xc

E[Rpre] = E[

(cid:88)

E[Rsoc] = E[

c∈C
(cid:88)

(cid:88)

u∈V
(cid:88)

c∈C

e∈E

p(u, c) · xc
u]

wc

e · yc
e]

We ﬁrst prove that E[Rper] ≥ (cid:80)

c∈C

(cid:80)
u∈V

(cid:0)p(u, c)· x∗ c

u

2

(cid:1). Based

on the deﬁnition of AVG, we have the following observation.

1It is worth noting that those iterations with focal parame-
ters not leading to any item display are omitted from this
Indeed, it suﬃces for RFS to sample from the
example.
combinations of focal parameters that does result in item
displays, which also help improve the practical eﬃciency of
AVG. We revisit this issue in the proof of Theorem 4 and
also in the enhancement strategies in Section 4.4.

13

Lemma 4. In any iteration t, if u is eligible for (c, s), the
x∗ c
probability P u
k·m (where k and m
are respectively the numbers of slots and items) since c and s
are selected randomly, and α is uniformly chosen from [0, 1].

rec that A(u, s) ← c is

u,s

Note that the above observation only gives the conditional
probability of u being assigned c at slot s when u is still
eligible for (c, s) at the beginning of iteration t. Thus, we
also need to derive the probability that u is eligible for (c, s)
for each iteration t.

Lemma 5. In any iteration t, for any c, s and a user u
eligible for (c, s), the probability P u
ne that u is not eligible
for (c, s) in iteration (t + 1) is at most

2
k·m .

Proof. User u is not eligible for (c, s) in iteration (t + 1)
when one of the following cases occurs in iteration t: 1) u
is displayed c in some slot ˆs, or 2) u is displayed some item
ˆc at slot s. From Lemma 4, the probabilities for the above

two cases are at most

Recall that for any u,

k
(cid:80)
ˆs=1
k
(cid:80)
ˆs=1

x∗ c
k·m and (cid:80)

u,ˆs

x∗ ˆc
k·m , respectively.

u,s

ˆc∈C

x∗c

u,ˆs ≤ 1 and (cid:80)

x∗ ˆc

u,s = 1 in

ˆc∈C

LP relaxation. Therefore, the total probability of the above
u,ˆs + (cid:80)

cases is at most

u,s) ≤ 2

x∗ ˆc

x∗c

1
k·m (

k·m .

k
(cid:80)
ˆs=1

ˆc∈C

In the following, we ﬁrst consider the case that u is eligible
for (c, s) in the beginning of iteration t. According to Lemma
4, the probability Prec that u is displayed c in slot s in this
x∗ c
k·m . Moreover, according to above, let
iteration is Prec =
Pne denote the probability of u losing eligibility for (c, s) in
this iteration, then Pne ≤ 2

k·m . Therefore, we have

u,s

Pr(A(u, s) = c)

=

=

=

∞
(cid:88)

t=1
∞
(cid:88)

t=1
∞
(cid:88)

t=1

Pr(A(u, s) ← c in iteration t)

P u

rec · Pr[u is eligible for (c, s) in the t-th iteration]

rec · (1 − P u
P u

ne)t−1 =

P u
rec
P u
ne

≥

x∗c
u,s
2

,

where t = ∞ is allowed in the analysis (but not in the al-
gorithm design) since an empty target group can be ran-
domly generated here (explained later). Thus, E[Rper] ≥
(cid:0)p(u, c) · x∗ c
(cid:1). Next, we aim to use a similar
(cid:80)
(cid:80)
approach to prove that E[Rsoc] ≥ 1
e. To
4
e∈E

e · y∗c

(cid:80)
c∈C

wc

(cid:80)

u∈V

c∈C

2

u

prove this for the more complicated social utility, instead
of directly analyzing E[Rsoc], we ﬁrst consider the case that
the social utility τ (u, v, c) is generated when both u and v
are co-displayed c in the same iteration, and let E[R(cid:48)
soc] de-
note the expected total social utility in this case. Clearly,
E[Rsoc] ≥ E[R(cid:48)
soc]. Similarly, we have the following obser-
vations.

Lemma 6. In any iteration t, for any pair of users e =
(u, v) with both u and v eligible for (c, s), the probability

that A(u, s) ← c or A(v, s) ← c is
the probability P e
u,s,x∗ c
min{x∗ c
k·m

, and
rec that A(u, s) ← c and A(v, s) ← c is

v,s}

.

max{x∗ c

u,s,x∗ c
k·m

v,s}

x∗c

The reason of Observation 6 is as follows.

u,s, CSF assigns c at s to all users in U since xc

If α ≤
min
u,s ≥ α
u∈U
x∗c
for all u ∈ U . Similarly, if α ≤ max
u,s, CSF at least
u∈U
assigns c to the user u with the largest xc
u,s. For each it-
eration t, the following lemma then bounds the probability
that at least one user in a group U loses eligibility for (c, s)
in iteration t, either due to the no-duplication constraint or
due to the assignment of some other item at slot s.

Lemma 7. In any iteration t, for any pair of users e = (u, v)
with u and v eligible for (c, s), the probability P e
ne that at
least one of u and v is not eligible for (c, s) in iteration (t+1)
is at most

4
k·m .

Proof. At least one of u and v is not eligible for (c, s) in itera-
tion (t+1) when one of the following cases occurs in iteration
t: 1) u or v is displayed c in some slot ˆs, or 2) u or v is dis-
played some item ˆc in slot s. From Lemma 6, the probabili-
v,ˆs}

ties for the above two cases are at most

max{x∗ c

u,ˆs,x∗ c
k·m

k
(cid:80)
ˆs=1

and (cid:80)

ˆc∈C

max{x∗ ˆc

u,s,x∗ ˆc
k·m

v,s}

, respectively. Recall that for any u,

x∗c

u,ˆs ≤ 1 and (cid:80)

k
(cid:80)
ˆs=1
the total probability of the above cases is at most

u,s = 1 in LP relaxation. Therefore,

x∗ ˆc

ˆc∈C

1
k · m

(

k
(cid:88)

ˆs=1

max{x∗c

u,ˆs, x∗c

v,ˆs} +

k
(cid:88)
(

(x∗c

u,ˆs + x∗c

v,ˆs) +

max{x∗ ˆc

u,s, x∗ ˆc

v,s})

(cid:88)

ˆc∈C

(cid:88)

(x∗ ˆc

u,s + x∗ ˆc

v,s))

ˆs=1

k
(cid:88)
(

ˆs=1

ˆc∈C

x∗c

u,ˆs +

k
(cid:88)

ˆs=1

x∗c

v,ˆs +

x∗ ˆc

u,s +

(cid:88)

ˆc∈C

x∗ ˆc

v,s)

(cid:88)

ˆc∈C

≤

1
k · m

=

≤

1
k · m

4
k · m

.

Similarly, consider the case that in the beginning of iter-
ation t, both u, v are eligible for (c, s). Let u c←→
v|t denote
s
that u, v are co-displayed c at slot s in iteration t. Therefore,
we have

Pr[u c←→
s

v] =

∞
(cid:88)

t=1

Pr[u c←→
s

v|t]

P e

rec · Pr[u, v are both eligible for (c, s) in t-th iteration]

P e

rec · Pr[u, v both eligible for (c, s) in t-th iteration]

∞
(cid:88)

t=1
∞
(cid:88)

t=1
∞
(cid:88)

=

=

=

≥

≥

rec · (1 − P e
P e

ne)t−1 =

P e
rec
P e
ne

v,s}

t=1
min{x∗ c

u,s,x∗ c
k·m
4
k·m
u,s, x∗c
min{x∗c
4

v,s}

=

y∗c
e,s
4

.

Finally, because of the no-duplicate constraint, for all u,
v|t and u c←→
v|t for diﬀerent slots s
s(cid:48)

v and c, the events u c←→
s

14

and s(cid:48) are mutually exclusive. Similarly, the events u c←→
s
and u c←→
s
every user sees exactly one item at each slot. Therefore,

v|t
v|t(cid:48) for t (cid:54)= t(cid:48) are also mutually exclusive because

Pr(u c←→ v) ≥

k
(cid:88)

∞
(cid:88)

s=1
E[Rsoc] ≥ E[R(cid:48)

t=1
soc]

Pr(u c←→
s

v|t),

=

≥

(cid:88)

(cid:88)

wc
e ·

c∈C

e∈E

(cid:88)

(cid:88)

c∈C

e∈E

wc
e ·

∞
(cid:88)

t=1
y∗c
e
4

Pr(u c←→
s

v|t)

.

Therefore,

E[R] = E[Rper] + E[Rsoc]
(cid:88)

(cid:88)

p(u, c) ·

≥

x∗c
u
2

(cid:88)

(cid:88)

+

wc
e ·

c∈C

e∈E

y∗c
e
4

u∈V

c∈C
OPT
4

,

≥

which proves the approximation ratio.

g In the above derivation, a large α could lead to an empty
target group if it exceeds x∗c
u,s for every u eligible for (c, s).
Therefore, the total number of iterations could approach ∞.
To address the above issue, instead of sampling (c, s, α) uni-
formly from all possible combinations, AVG samples (c, s, α)
uniformly from only the combinations generating nonempty
target groups (i.e., an enormous α is no longer chosen). Be-
cause the setting of α is independent for each iteration, and
the probability of selecting each combination to generate a
nonempty target group remains equal, the expected solu-
tion quality is also identical for AVG. Therefore, the num-
ber of iterations for AVG is eﬀectively reduced to O(nk),
and CSF in each iteration requires O(n)-time. The total
time complexity of AVG, including the conﬁg phase, is thus
O(LP)+O(n2 ·k), where O(LP) is the complexity2 of solving
X ∗. Some immediate corollaries are directly obtained from
Theorem 4 as follows.

Corollary 4.1. Repeating AVG and selecting the best out-
put returns a (4 + (cid:15))-approximate SAVG k-Conﬁguration
in O(n2 · k · log(cid:15) n)-time with high probability, i.e., with a
probability 1 − 1

nO(1) .

Corollary 4.2. Given a (non-optimal) fractional solution
˜X ∗ as a β-approximation of the LP relaxation problem,
AVG returns an expected (4 · β)-approximate SAVG k-
Conﬁguration.

Corollary 4.3. For k = 1, given the optimal fractional
solution X ∗, AVG returns an expected 2-approximate SAVG
k-Conﬁguration in O(n2 · k)-time.

Proof. For the ﬁrst corollary, from Theorem 4, AVG achieves
an expected total SAVG utility E[R] ≥ OP T
. Let R(cid:48) =

4

2The current best time complexity for solving linear pro-
gram equals the complexity of matrix multiplication, or
roughly O(N 2.5) for N variables [15]. However, practical
computation generally takes much less time.

OP T − R denote the gap between R (the objective achieved
by AVG) and OP T (the optimal objective). Clearly, R(cid:48) is
non-negative, and we have E[R(cid:48)] = E[OP T − R] = OP T −
E[R] ≤ 3·OP T
. Therefore, by the Markov inequality, the
probability that a single invocation of AVG failing to return
a (4 + (cid:15))-approximate SAVG k-Conﬁguration is R(cid:48) > (1 −
1
4+(cid:15) ) · OP T is

4

Pr[R(cid:48) ≥ OP T · (1 −

1
4 + (cid:15)

)] ≤

≤

=

(1 − 1

E[R(cid:48)]
4+(cid:15) ) · OP T
3·OP T
4

4+(cid:15) ) · OP T

(1 − 1
12 + 3(cid:15)
12 + 4(cid:15)

.

Therefore, if AVG is repeated nrepeat times, the proba-
bility that the best solution is not a (4 + (cid:15))-approximate
12+4(cid:15) )nrepeat . By set-
SAVG k-Conﬁguration is at most ( 12+3(cid:15)
ting nrepeat = log 12+4(cid:15)
n, the success rate will be at least
12+3(cid:15)
1 − ( 12+3(cid:15)

12+4(cid:15) )nrepeat = 1 − 1
n .

A single run of AVG is in O(n2 · k)-time. Therefore, re-
n times can be done in O(n2 · k ·

peating it for log 12+4(cid:15)
12+3(cid:15)

n) = O(n2 · k · log(cid:15) n)-time.

log 12+4(cid:15)
12+3(cid:15)
For the second corollary, note that the total objective
achieved by the non-optimal approximate LP solution ˜X ∗
is at least β · OP T , since it is a β-approximation of the LP
relaxation problem, which has an optimal objective of at
least OP T . Therefore, from Theorem 4, running AVG with
˜X ∗ achieves an expected SAVG utility of at least OP T
4·β .

Finally, for the third corollary, simply note that for k = 1,
the ﬁnal sum in Lemma 7 changes from 4
k·m , since the
ﬁrst case in the proof of Lemma 7 is impossible to happen
in k = 1. Following the original proof but plugging in this
change implies the 2-approximation of AVG when k = 1.

k·m to 2

The second corollary is particularly useful in practice for
improving the eﬃciency of AVG since state-of-the-art LP
solvers often reach a close-to-optimal solution in a short time
but need a relatively long time to return the optimal solu-
tion, especially for large inputs. Therefore, it allows for a
quality-eﬃciency trade-oﬀ in solving SVGIC.

4.3 Derandomizing AVG

From the investigation of AVG, we observe that the group-
ing threshold α plays a key role in forming eﬀective target
subgroups in CSF. If α is close to 0, CSF easily forms a
large subgroup consisting of all users and co-displays the fo-
cal item to them, similar to the ineﬀective group approach.
On the other hand, large α values lead to small subgroups,
not good for exploiting social interactions. Due to the ran-
domness involved in AVG, these caveats cannot be com-
pletely avoided. To address these issues, we aim to further
strengthen the performance guarantee of AVG by derandom-
izing the selection of focal parameters to obtain a stronger
version of the algorithm, namely Deterministic Alignment-
aware VR Subgroup Formation (AVG-D), which is a deter-
ministic 4-approximation algorithm. First, we observe that
α can be assigned in a discrete manner.

Observation 1. There are O(knm) distinct possible out-
comes in CSF, each corresponding to a grouping threshold

15

Table 7: SAVG k-Conﬁguration returned by AVG
for Example 4.

Slot 1
c5
c2
c3
c5

Slot 2
c2
c4
c4
c4

Slot 3
c1
c1
c5
c1

uA
uB
uC
uD

α = x∗c
a slot s.

u,s, i.e., the utility factor of an item c to a user u at

The above observation can be veriﬁed as follows. Given c
and s, the outcome of CSF with grouping threshold α = x,
for any x ∈ [0, 1], is equivalent to that with α set to the
smallest x∗c
u,s ≥ x. It enables us to derandomize AVG eﬀec-
tively. Instead of randomly sampling (c, s, α), we carefully
evaluate the outcomes (of CSF) from setting α to every pos-
sible x∗c
u,s in the optimal fractional solution. Intuitively, it
is desirable to select an α that results in the largest incre-
ment in the total SAVG utility. However, this short-sighted
approach ignores the potentially signiﬁcant increase in to-
tal SAVG utility in the future from the remaining users and
slots that have not been processed. In fact, it always selects
an outcome with α = 0 to maximize the current utility in-
crement. Therefore, it is necessary for AVG-D to carefully
evaluate all potential future allocations of items.

ˆu,s ≥ x∗c

u,s. Let Sfut(c, s, x∗c

u,s) = {(ˆu, s) ∈ Scur|x∗c

Speciﬁcally, let Scur = {(ˆu, ˆs)|A(ˆu, ˆs) = NULL} denote
the set of display units,
i.e., a slot ˆs for a user ˆu, that
have not been assigned an item before the current itera-
tion. Let Star(c, s, x∗c
u,s}
denote the set of display units to be assigned c in CSF
with α = x∗c
u,s)
denote the set of remaining display units to be processed
in the future. Moreover, let ALG(Star(c, s, x∗c
u,s)) be the
SAVG utility gained by co-displaying c to the target sub-
group. Let OPTLP(Sfut(c, s, x∗c
u,s)) represent the expected
SAVG utility acquired in the future from the display units in
Sfut(c, s, x∗c
u,s). To strike a balance between the increment
of SAVG utility in the current iteration and in the future,
AVG-D examines every α = x∗c

u,s) = Scur \ Star(c, s, x∗c

u,s to maximize

f (c, s, x∗c

u,s) = ALG(Star(c, s, x∗c

u,s))
+ r · OPTLP(Sfut(c, s, x∗c

u,s)),

where

ALG(Star(c, s, x∗c

u,s)) =

(cid:88)

p(ˆu, c) +

(cid:88)

wc
e,

(ˆu,s)∈Star

e=(ˆu,ˆv)
(ˆu,s),(ˆv,s)∈Star

OPTLP(Sfut(c, s, x∗c

u,s)) =

(cid:88)

c∈C

k
(cid:88)

[
s=1

(cid:88)

p(ˆu, c)x∗c

ˆu,ˆs

(ˆu,ˆs)∈Sfut
wc

(cid:88)

ey∗c

e,ˆs],

+

e=(ˆu,ˆv)
(ˆu,ˆs),(ˆv,ˆs)∈Sfut

wc
e = τ (ˆu, ˆv, c) + τ (ˆv, ˆu, c) for all e = (ˆu, ˆv) ∈ E, and r is
the balancing ratio. In other words, AVG-D simultaneously
optimizes the current and potential future SAVG utility in
each iteration. It is summarized in Algorithm 3.

Example 5. For the instance in Example 2, the ﬁrst
4 sets α = x∗c5
iteration of AVG-D with r = 1
uB ,1 = 0,
and CSF with (c, s, x∗c
u,s) = (c5, 1, 0) co-displays the SP
camera to everyone at slot 1, where Star(c, s, x∗c
u,s) =

16

Algorithm 3 Deterministic Alignment-aware VR Subgroup
Formation
Input: X ∗
Output: An SAVG k-Conﬁguration A
1: A(ˆu, ˆs) ← NULL for all ˆu, ˆs
2: X ∗ ← X ∗
LP
3: while some entry in A is NULL do
4:

c, s, u ← arg max

f (c, s, x∗c

u,s)

c,s,u

α ← x∗c
for ˆu ∈ V do

u,s

5:
6:
7:
8:
9:
10: return A

if x∗c

ˆu,s ≥ α then

A(ˆu, s) ← c

if A(ˆu, s) = NULL and A(ˆu, t) (cid:54)= c ∀t (cid:54)= s then

Table 8: SAVG k-Conﬁguration returned by AVG-D
for Example 4.

Slot 1
c5
c5
c5
c5

Slot 2
c1
c1
c3
c1

Slot 3
c2
c2
c2
c4

uA
uB
uC
uD

=

Sfut(c, s, x∗c

u,s)

{(uA, 1), (uB, 1), (uC , 1), (uD, 1)},
{(uA, 2), (uB, 2), (uC , 2), (uD, 2), (uA, 3), (uB, 3), (uC , 3),
(uD, 3)}, ALG(Star(c, s, x∗c
u,s)) = p(uA, c5) + p(uB, c5) +
(uA,uC ) + wc4
p(uC , c5) + p(uD, c5) + wc5
(uA,uB ) + wc4
(uA,uD ) +
wc4
(uB ,uC ) = 3.35, OPTLP(Sfut(c, s, x∗c
u,s)) = 6.97, and
f (c, s, x∗c
u,s) = 3.35 + 1
4 · 6.97 = 5.09 is maximized. The
next iteration selects α = x∗c1
uA,2 = 0.33 to co-display the
tripod to {Alice, Bob, Dave} at slot 2. AVG-D selects
α = x∗c2
uD ,2 = 0 in the
next three iterations, resulting in a total SAVG utility of
9.85, which is slightly larger than AVG (9.75) in Example
4. The returned SAVG k-Conﬁguration is shown in Table
8.

uA,3 = 0, and α = x∗c3

uD ,3 = 0, α = x∗c4

For this running example, the optimal solution is the
SAVG k-Conﬁguration shown at the top of Figure 1(a),
with a total SAVG utility of 10.35. The personalized ap-
proach retrieves the top-3 preferred items for each user,
e.g., (cid:104)c5, c2, c1(cid:105) for Alice, and achieves a total SAVG util-
ity of 8.25. For the group approach, the total SAVG util-
ity for the universal subgroup {Alice, Bob, Charlie, Dave}
viewing each item is aggregated. For example, the total
SAVG utility of the subgroup of all users viewing c1 would
be (cid:80)
τ (u, u(cid:48), c1), which equals the sum-

p(u, c1) + (cid:80)

u∈V

u,u(cid:48)inV

mation of all values in the ﬁrst row in Table 1, or 2.6 (note
that λ = 0.5 and the objective is scaled up by 2 here). The
top-3 items, i.e., (cid:104)c5, c1, c2(cid:105), is retrieved and co-displayed to
all users. This achieves a total SAVG utility of 8.35.

We also compare with two variations of the subgroup ap-
proach, namely the subgroup-by-friendship and subgroup-
by-preference approaches, where the former pre-partitions
the subgroups based on social relations among the users,
while the latter ﬁnds subgroups with similar item pref-
erences. The subgroup-by-friendship approach ﬁrst parti-
tions the social network into two equally sized and dense
subgroups {Alice, Dave} and {Bob, Charlie}.
Items are
then determined analogously to the group approach, result-

Table 9: Conﬁguration by the baseline approaches
for Example 4.
personalized
uA
uB
uC
uD

Slot 1
c5
c2
c3
c4

Slot 3
c1
c4
c2
c3

Slot 2
c2
c1
c4
c5

group
{uA, uB, uC , uD}

subgroup-by-friendship
{uA, uD}
{uB, uC }

subgroup-by-preference
{uA, uB}
{uC , uD}

c5

c5
c2

c2
c4

c1

c1
c4

c1
c5

c2

c4
c3

c5
c3

ing in a total SAVG utility of 8.4. Finally, the subgroup-
by-preference approach partitions the network into {Alice,
Bob} and {Charlie, Dave}. The total SAVG utility would
be 8.7.

The conﬁgurations returned by these four baseline ap-
proaches are consistent with Figure 1 and are also summa-
rized in Table 9. To sum up, the total SAVG utility for
AVG, AVG-D, and the personalized, group, subgroup-by-
friendship and subgroup-by-preference approaches, are 9.75,
9.85, 8.25, 8.35, 8.4 and 8.7, respectively. Therefore, both
AVG and AVG-D achieves a near-optimal solution.

In AVG-D, r serves as a turning knob to strike a good
balance between the current increment in SAVG utility and
the potential SAVG utility in the future. Speciﬁcally, we
prove that by setting r = 1
4 in each iteration, AVG-D is
a deterministic 4-approximation algorithm for SVGIC. We
also empirically evaluate the performance of AVG-D with
diﬀerent values of r in Section 6.7.

Theorem 5. Given the optimal fractional solution X ∗,
AVG-D returns a worst-case 4-approximate SAVG k-
Conﬁguration in O(n · m · k · |E|)-time.

In DPS, let OPTLP(Scur) denote the total SAVG utility
from only the slots in Scur according to X ∗. More speciﬁ-
cally,

OPTLP(Scur) =

(cid:88)

k
(cid:88)

ˆc∈C

ˆs=1

+

(cid:88)

(p(ˆu, ˆc)x∗ ˆc

ˆu,ˆs

(ˆu,ˆs)∈

Scur(c,s,x∗ c
(cid:88)

u,s)

e=(ˆu,ˆv)

(ˆv,ˆs)∈Scur(c,s,x∗ c

u,s)

wˆc

ey∗ ˆc

e,ˆs).

is at least OPTLP(Scur)
at least one (c, u, s) with f (c, s, x∗c
4
AVG-D is therefore a 4-approximating algorithm.

. Thus, for each iteration there exists
, and

u,s) ≥ OPTLP(Scur)

4

We begin with proving that in every iteration t, if (c, s, α)
is selected with RPS instead of DPS, E[f (c, s, α)] ≥ 1
4 ·
OPTLP(Scur), where the function f (c, s, α) is the evalua-
tion criteria in DPS. Therefore, f (c, s, x∗c
u,s) in DPS is also
at least 1
u,s).
Lemma 8. In any iteration of AVG, if (c, s, α) is selected
by RPS, E[f (c, s, α)] ≥ 1

4 ·OPTLP(Scur), since DPS maximizes f (c, s, x∗c

4 · OPTLP(Scur).

Proof. In any iteration t, for each e = (ˆu, ˆv), c, and s with
(ˆu, s) and (ˆv, s) in Scur (i.e., ˆu and ˆv are eligible for (c, s)),
by Lemma 6, the probability that ˆu and ˆv are co-displayed
c at slot s is

min{x∗c

ˆu,s, x∗c
k · m

ˆv,s}

Therefore,

E[ALG(Star(c, s, α))]
(cid:88)

=E[

(cid:0)p(ˆu, c) +

=

y∗c
e,s
k · m

.

(cid:88)

τ (ˆu, ˆv, c)(cid:1)]

(ˆu,s)∈Star(c,s,α)

(ˆv,s)∈Star(c,s,α)

(cid:88)

k
(cid:88)

(cid:0) (cid:88)

=

c∈C

s=1

(ˆu,s)∈Scur

p(ˆu, c)

x∗c
ˆu,s
k · m

+

(cid:88)

(ˆu,s),(ˆv,s)∈Scur

wc
e

y∗c
e,s
k · m

(cid:1)

=

1
k · m

(cid:88)

k
(cid:88)

(cid:0) (cid:88)

c∈C

s=1

(ˆu,s)∈Scur

p(ˆu, c)x∗c

ˆu,s +

(cid:88)

e=(ˆu,ˆv)(ˆu,s),
(ˆv,s)∈Scur

=

OPTLP(Scur)
k · m

.

wc

ey∗c

e,s

(cid:1)

Next, from Lemma 5 and 7, for each e = (ˆu, ˆv), ˆc, and ˆs
such that (ˆu, ˆs), (ˆv, ˆs) ∈ Scur, the probability that (ˆu, ˆs) ∈
Sfut(c, s, α) is at least 1 − P ˆu
ne, and the probability that
(ˆu, ˆs), (ˆv, ˆs) ∈ Sfut(c, s, α) is at least 1 − P e
ne, which implies
the probability that both ˆu and ˆv are eligible for (ˆc, ˆs) in
iteration (t + 1) is at least 1 − 4
k·m . Therefore, the expected
contribution of the social utility from the co-display of ˆc to
ˆu and ˆv at slot ˆs is at least wˆc

e · (1 − 4

k·m ). Thus,

E[OPTLP(Sfut(c, s, α))]

≥

(cid:88)

ˆc∈C

k
(cid:88)

[
ˆs=1

(cid:88)

(ˆu,ˆs)∈Scur

(1 − P ˆu

ne)pˆc

ˆu,ˆsx∗ ˆc

ˆu,ˆs +

(1 − P e

ne)wˆc

ey∗ ˆc

e,ˆs]

(cid:88)

(ˆu,ˆs),
(ˆv,ˆs)∈Scur

≥(1 −

4
k · m

) ·

(cid:88)

ˆc∈C

k
(cid:88)

[
ˆs=1

(cid:88)

ˆu,ˆsx∗ ˆc
pˆc

ˆu,ˆs +

(cid:88)

(ˆu,ˆs)∈Scur

(ˆu,ˆs),
(ˆv,ˆs)∈Scur

=(1 −

4
k · m

)OPTLP(Scur).

Combining the above, we have

wˆc

ey∗ ˆc

e,ˆs]

Similar to above, an iteration for AVG-D refers to DPS
selecting (c, s, x∗c
u,s) and the subsequent CSF. We ﬁrst out-
line the proof sketch. To prove the approximation ratio for
AVG-D, we ﬁrst need to show that, in an iteration of AVG-
D, if (c, s, x∗c
u,s) is selected with RPS instead of DPS, so
that the probability of selecting (c, s, x∗c
u,s) is the sum of
selecting all (c, s, α) that lead to an equivalent outcome as
selecting (c, s, x∗c
u,s)

u,s), then the expected value of f (c, s, x∗c

E[f (c, s, α)] = E[ALG(Star(c, s, α))] +

1
4

· E[OPTLP(Sfut(c, s, α))]

≥

=

OPTLP(Scur)
k · m
OPTLP(Scur)
4

+

1
4

.

· OPTLP(Scur) · (1 −

4
k · m

)

17

The lemma follows.

tar and St

Back to AVG-D, let the total number of iterations be T .
u,s)
cur = St
tar ∪ St
fut. By
ˆu,ˆs) ≥ E[f (c, s, α)] ≥

Let St
in the t-th iteration of AVG-D, and St
Lemma 8, f (c, s, x∗c
f (ˆc, ˆs, x∗ ˆc

fut denote Star(c, s, x∗c

u,s) and Sfut(c, s, x∗c

u,s) = max
ˆc,ˆs,ˆu

OPTLP(Scur)
4

for every iteration t in AVG-D. Therefore, since
the solution of AVG-D performs no worse than the random-
ized approach in the above lemma,

ALG(S1

tar) +

ALG(S2

tar) +

ALG(ST

tar) +

1
4
1
4

1
4

· OPTLP(S1

fut) ≥

· OPTLP(S2

fut) ≥
...

· OPTLP(ST

fut) ≥

1
4
1
4

1
4

· OPTLP(S1

cur)

· OPTLP(S2

cur) =

1
4

· OPTLP(S1

fut)

· OPTLP(ST −1

fut ).

By summing up all the above inequalities, we have

T
(cid:88)

t=1

ALG(St

tar) ≥

OPTLP(S1
4

cur)

−

OPTLP(ST
4

fut)

OPT
4
which proves the approximation ratio.

OPT
4

− 0 =

=

,

u,s) ≥ 1

u,s is too large that the target group is empty.

Similar to that in AVG, a slight modiﬁcation on AVG-
D is to select only (c, s, x∗c
u,s) that leads to a nonempty
target group, so that T = O(nk). We ﬁrst prove that
there does exist such (c, s, x∗c
u,s) that f (c, s, x∗c
4 ·
OPTLP(Scur(c, s, x∗c
u,s)). Consider those cases where α =
x∗c
In
this case Scur(c, s, x∗c
u,s), which implies
f (c, s, x∗c
i.e., exactly
u,s)),
u,s)
the expected value.
exists so that f (c, s, x∗c
u,s)),
4 ·
then the expected value should be lower
OPTLP(Scur(c, s, x∗c
such
(c, s, x∗c
u,s) must exist, and AVG-D can always choose such
(c, s, x∗c
u,s).

Suppose that no other (c, s, x∗c
4 · OPTLP(Scur(c, s, x∗c
u,s) ≥ 1

u,s) = Sfut(c, s, x∗c
4 · OPTLP(Scur(c, s, x∗c

u,s)), a contradiction.

u,s) = 1

than 1

Thus,

u,s), ﬁnding f (c, s, x∗c

The number of iterations is thus also O(nk). For each iter-
ation, there are O(nmk) combinations of pivot parameters.
Finding Star(c, s, x∗c
u,s) and Sfut, as well as executing CSF,
require O(n) time. To ﬁnd the optimal pivot parameters
in DPS in each iteration, a simple approach is to exam-
ine all O(nmk) combinations of pivot parameters. For each
(c, s, x∗c
u,s) requires O(E) time. Thus,
each iteration needs O(nmk|E|) time. Since T = O(nk),
the total time complexity of AVG-D, including the conﬁg
phase, is therefore O(LP) + O(n2mk2|E|). By using heaps
to store the utility factors and reordering the computation,
repeated calculations can be avoided to reduce the complex-
ity to O(LP) + O(nmk2|E|). Alternatively, eﬀectively paral-
lelizing the computation of f (c, s, x∗c
u,s) can achieve at most
a speedup factor of nmk, which further lowers the time com-
plexity to O(LP) + O(nmk|E|).

4.4 Enhancements

In the following, we detail enhancements of the AVG and
AVG-D algorithms. First, we show that AVG and AVG-D
support values of λ (cid:54)= 1
2 via a simple scaling on the in-
puts. We then design two advanced strategies, including

18

an advanced LP transformation technique and a new fo-
cal parameter sampling scheme, to improve the eﬃciency
of AVG and AVG-D. The LP transformation technique de-
rives a new LP formulation to reduce the number of de-
cision variables and constraints from O((n + |E|)mk) to
O((n + |E|)m) by condensing the xc
u,s variables (k is the
number of slots). We prove that the optimal objective in
the new formulation is exactly that in the original one. The
focal parameter sampling scheme maintains a maximum util-
ity factor ¯x∗c
s (detailed later) for each pair of item c and slot
s to avoid unnecessary sampling of focal parameters (c, s, α)
when α ≥ max
u,s, especially for a large k. We prove that
u∈V
the sampling results of the new sampling technique and the
original one are the same. Therefore, the eﬃciency of AVG
can be improved without sacriﬁcing the solution quality. Fi-
nally, we extend AVG and AVG-D to support SVGIC-ST
(and also the Social Event Organization (SEO)-type prob-
lems) by tailoring CSF with consideration of the additional
VR-related constraints.

x∗c

Supporting Other Values of λ.
First, observe that
λ = 0 corresponds to a special case of maximizing only the
total preference utility, where a simple greedy algorithm can
ﬁnd the exact optimal solution. Assume that λ (cid:54)= 0. To
support the cases with λ (cid:54)= 1
2 , AVG ﬁrst sets the scaled
preference values for each (u, c) as p’(u, c) = 1−λ
λ p(u, c).
This value is then used instead of p(u, c) in the LP relaxation
problem, as well as in the computation of f (c, s, x∗c
u,s) in
DPS in AVG-D. Since

(1 − λ) · p(u, c) + λ ·

(cid:88)

τ (u, v, c)

=2λ · (

1
2

· p’(u, c) +

1
2

·

v|u

c←→v
(cid:88)

v|u

c←→v

τ (u, v, c)),

each instance with λ (cid:54)= 1
with λ = 1
and AVG-D can achieve the approximation ratio.

2 can be transformed to an instance
2 by this scaling of input parameters, where AVG

Advanced LP Transformation.
relaxation of the SVGIC problem (denote by LPSVGIC) is

Recall that the LP

(cid:88)

max

(cid:88)

[(1 − λ) · p(u, c) · xc

u + λ ·

(cid:88)

(τ (u, v, c) · yc

e)]

u∈V

c∈C

e=(u,v)∈E

subject to the following constraints:

k
(cid:88)

s=1
(cid:88)

c∈C

xc
u,s ≤ 1, ∀u ∈ V, c ∈ C

xc
u,s = 1, ∀u ∈ V, s ∈ [k]

k
(cid:88)

s=1

k
(cid:88)

xc
u =

yc
e =

xc
u,s, ∀u ∈ V, c ∈ C

yc
e,s, ∀e = (u, v) ∈ E, c ∈ C

s=1
yc
e,s ≤ xc
e,s ≤ xc
yc
e,s, yc
u, yc

u,s, ∀e = (u, v) ∈ E, s ∈ [k], c ∈ C
v,s, ∀e = (u, v) ∈ E, s ∈ [k], c ∈ C
e ≥ 0, ∀u ∈ V, e ∈ E, s ∈ [k], c ∈ C.

u,s, xc
xc

Solving LPSVGIC, which is the ﬁrst step of the AVG al-
gorithm, deals with O((n + |E|)mk) decision variables and
O((n + |E|)mk) constraints. In the following, we transform
LPSVGIC into a more compact linear program formulation
LPSIMP with fewer decision variables as follows.

(cid:88)

max

(cid:88)

[(1 − λ) · p(u, c) · xc

u + λ ·

(cid:88)

(τ (u, v, c) · yc

e)]

u∈V

c∈C

e=(u,v)∈E

subject to the following constraints:

xc
u ≤ 1, ∀u ∈ V, c ∈ C
xc
u = k, ∀u ∈ V

(cid:88)

c∈C

yc
e ≤ xc
u, ∀e = (u, v) ∈ E, c ∈ C
e ≤ xc
yc
v, ∀e = (u, v) ∈ E, c ∈ C
u, yc
xc
e ≥ 0, ∀u ∈ V, e ∈ E, c ∈ C.

To avoid confusion, we use normal math symbols (x and
y) to represent decision variables in LPSVGIC and Typewriter
symbols (x and y) to denote those in LPSIMP. Let OPTSIMP
and OPTSVGIC denote the optimal objective values in LPSIMP
and LPSVGIC. We have the following observation.

Observation 2. OPTSIMP = OPTSVGIC always holds. More-
over, given an optimal solution X∗ = {xc
u} for LPSIMP,
there exists an optimal solution X ∗ of LPSVGIC with x∗c
u,s =
k · x∗c
1

u, ∀c, u, s.

u = xc

u,s = 1

s=1 xc
e = yc

Proof. We ﬁrst prove OPTSIMP ≤ OPTSVGIC. Given any fea-
sible solution X of LPSIMP, let X denote a solution of LPSVGIC
such that xc
k · xc
u, ∀c, u, s. By construction, we have
u = (cid:80)k
xc
k · xc
u,s = k · 1
u for all c, u, s, and analo-
gously yc
e for all c, e. Therefore, X is feasible in LPSVGIC.
Moreover, it achieves the same objective value in LPSVGIC as
X in LPSIMP, which implies OPTSIMP ≤ OPTSVGIC. We then
prove OPTSIMP ≥ OPTSVGIC. Given any feasible solution
X of LPSVGIC, let X denote a solution of LPSIMP such that
xc
u = xc
u,s. Similarly, X is a feasible solution of
LPSIMP, and it achieves exactly the same objective value in
LPSIMP as X in LPSVGIC. Therefore, OPTSIMP ≥ OPTSVGIC.
Combining the above, we have OPTSIMP = OPTSVGIC, and
the second part of the observation follows from the above
construction.

u = (cid:80)k

s=1 xc

As AVG requires only one optimal solution for LPSVGIC,
it suﬃces for AVG to ﬁrst solve the above simpliﬁed linear
program LPSIMP with only O((n + |E|)m) decision variables
and constraints. AVG then scales the optimal solution by
a factor of 1
k according to Observation 2 to ﬁnd an optimal
solution for LPSVGIC. Therefore, LPSIMP eﬀectively improves
the eﬃciency of AVG.

Advanced Focal Parameter Sampling.
In AVG, a set
of focal parameters (c, s, α) is sampled uniformly at random
for each iteration. However, for input instances with a large
k, the utility factor x∗c
u,s of assigning item c to user u at
slot s tends to become smaller, e.g., roughly O( 1
k ), espe-
cially after the above LP transformation strategy is applied.
Recall that AVG compares α to every user eligible for view-
ing item c at slot s and displays c to user u if x∗c
u,s ≥ α.
u,s, AVG essentially remains idle (i.e., making
If α > max
u∈V
no progress) in the current round and needs to re-sample

x∗c

another set of focal parameters in the next iteration. For
instances with large k, it is thus more diﬃcult for AVG to
eﬀectively sample a set of good focal parameters without the
above property.

{x∗c

To address the above issue, we design an advanced fo-
cal parameter sampling scheme as follows. For each pair
of (c, s), AVG maintains the maximum utility factor ¯x∗c
s =
u,s|u is eligible for (c, s)}. Speciﬁcally, ¯x∗c
max
s is initial-
u∈V
u,s after X ∗ (the optimal solution of LP) is
ized as max
u∈V
retrieved, and it is constantly updated along the rounding
process (as the number of users eligible for (c, s) decreases).
In each iteration, AVG ﬁrst randomly samples a pair (c, s)
, i.e., proportional to the value
with probability

x∗c

¯x∗ c
s

(cid:80)

¯x∗ c
s

c∈C,s∈[k]

¯x∗c

s. It then samples α uniformly at random from [0, ¯x∗c
s].
Speciﬁcally, let GOOD denote the event that a set of good
focal parameters is sampled, i.e., α is at most ¯x∗c
s for the se-
lected (c, s) in the original sampling scheme. Moreover, for a
set of good focal parameter (c, s, α), let TARGET(c, s, α) de-
note the event that Co-display Subgroup Formation ends up
with the same behavior as if (c, s, α) is sampled. We have the
following observation. Let Prorig(TARGET(c, s, α)) denote
the probability that TARGET(c, s, α) happens in the origi-
nal sample scheme, and let Pradv(TARGET(c, s, α)) denote
the probability of TARGET(c, s, α) in the advanced sample
scheme. The following observation indicates that sampling
with the advanced sampling scheme is equivalent (in terms
of outcome distribution) to sampling good parameters, i.e.,
picking (c, s, α) directly and only from the pool of focal pa-
rameters that lead to a successful assignment of at least one
item to one user at some slot.

Observation 3. For any set of good focal parameter
x∗c
u,s, Pradv(TARGET(c, s, α)) =
(c, s, α) such that α ≤ max
u∈V

Prorig(TARGET(c, s, α)|GOOD).

Proof. By construction, Prorig(GOOD) = (cid:80)

c∈C,s∈[k]

1

k·m ( ¯x∗c

s).

Next, by construction, it is straightforward that the ad-
vanced sampling scheme only samples good focal parame-
ters. Consider a set of good focal parameter (c, s, α). Let
u1 and u2 denote the users such that u1 = arg max
u,s<α

x∗c

x∗ c

u,s

x∗c

u,s. By deﬁnition, if CSF chooses any

α ∈ (x∗c
u2,s], it ends up with the same behavior as
if (c, s, α) is sampled, i.e., TARGET happens. With (c, s)
given, this happens with probability pα = x∗c
u2,s − x∗c
u1,s.
Note that u2 is guaranteed to exist, and we replace x∗c
u1,s
with 0 if u1 does not exist (i.e., the case where every eligible
user is assigned c by Co-display Subgroup Formation). In
the advanced sampling scheme, the probability of this event
· pα. On the
is thus Pradv(TARGET(c, s, α)) =

¯x∗ c
s

(cid:80)

¯x∗ c
s

c∈C,s∈[k]

and u2 = arg min
u,s≥α

x∗ c
u1,s, x∗c

other hand, in the original sampling scheme, the probability

19

of this event is Prorig(TARGET(c, s, α)) = 1

k·m · pα. We have

Prorig(TARGET(c, s, α)|GOOD) =

=

=

Prorig(TARGET(c, s, α))
Prorig(GOOD)
1
k·m · pα

(cid:80)

c∈C,s∈[k]
pα

(cid:80)

c∈C,s∈[k]

1

k·m ( ¯x∗c
s)

¯x∗c
s

The observation follows.

= Pradv(TARGET(c, s, α)).

Therefore, the advanced focal sampling scheme eﬀectively
improves the eﬃciency of AVG since it discards the non-
contributing sampling events in advance. Note that it can
also be applied to improve AVG-D such that the events of
selecting non-controlling focal parameters will not be simu-
lated in the derandomization process. The main algorithm
AVG with the advanced LP transformation strategy and fo-
cal sampling scheme are detailed in Algorithm 4. The eﬀects
of these two speedup techniques are tested in Section 6.4.

Algorithm 4 AVG with advanced LP transformation and
focal parameter sampling
Input: X ∗
Output: An SAVG k-Conﬁguration A
1: A(ˆu, ˆs) ← NULL for all ˆu, ˆs
2: Construct LPSVGIC (Original Relaxed LP)
3: Transform into LPSIMP (Simpliﬁed LP)
4: ¯X ← optimal solution for LPSIMP
5: ¯x∗c
u,s

x∗c

s ← max
u∈V

6: for u ∈ V, c ∈ C, s ∈ [k] do
7:

c,s ← 1

x∗u

k · ¯xc

u
8: while some entry in A is NULL do
9:

Sample (c, s) randomly with probability

¯x∗ c
s

(cid:80)

c∈C,s∈[k]

¯x∗ c
s

Sample α ∈ [0, ¯x∗c
for ˆu ∈ V do

s] uniformly at random

if A(ˆu, s) = NULL and A(ˆu, t) (cid:54)= c ∀t (cid:54)= s then
(ˆu eligible for (c, s))

10:
11:
12:
13:
14:
15:
16:
17: return A

Update ¯x∗c
s

if x∗c

ˆu,s ≥ α then

A(ˆu, s) ← c

Extending AVG for SVGIC-ST. To modify AVG (and
consequently, AVG-D) to support the teleportation and sub-
group size constraints in VR, the LP relaxation problem is
ﬁrst replaced by the corresponding formulation in Section
3.3, i.e., with Constraints (8), (9) and (10). Next, in each
iteration of CSF, instead of displaying the focal item c to all
eligible users ˆu with x∗c
u,s ≥ α, CSF ﬁrst checks the number
of users already displayed c at the focal slot s. It then it-
eratively adds the eligible user with the highest utility factor
of c at slot s until the number of users displayed c at slot s
reaches the size constraint M or every user is examined. If
the size constraint is reached, CSF locks the item c at slot
s by setting x∗c
u,s = 0 for all remaining eligible users, as
well as removes (c, s, α) from the set of candidate parameter

sets in AVG-D. Therefore, AVG never displays more than M
users to the same item in the ﬁnal SAVG k-Conﬁguration.

Supporting Social Event Organization. We have also
identiﬁed Social Event Organization (SEO) as another im-
portant application of the targeted problem. Speciﬁcally,
SEO [14, 44, 66, 67, 82] is a line of research that studies the
problem of organizing overlapping and conﬂicting events for
users of Event-Based Social Network (EBSN) (e.g. Meetup
[54], Facebook Events [21], and Douban Location [17]).
Given a set of users and a set of events, SEO assigns each
user to a single or a series of events, such that the total
preferences of the selected users to their assigned events are
maximized, while several constraints are satisﬁed, e.g. trav-
eling cost budget, time conﬂict avoidance, and event sizes.
Consequently, the optimization problems for SEO are closely
related to SVGIC: social event attendees directly correspond
to VR shopping users, while social events correspond to the
displayed items in VR. SVGIC can be viewed as a general
version of the SEO problem that incorporates both social-
based utilities to support a series of social events. It is then
straightforward to see the above extension for SVGIC-ST
supports SEO, as the social event size constraints can be
modelled as subgroup size constraints.

5. EXTENSIONS FOR PRACTICAL SCE-

NARIOS

In this section, we extend SVGIC and AVG to support
a series of practical scenarios. 1) Commodity values. Each
item is associated with a commodity value to maximize the
total proﬁt. 2) Layout slot signiﬁcance. Each slot location
is associated with a diﬀerent signiﬁcance weight (e.g., center
is better) according to retailing research [18, 74]. 3) Multi-
View Display, where a user can be displayed multiple items
in a slot, including one default, personally preferred item in
the primary view and multiple items to view with friends in
group views, and the primary and group views can be freely
switched. 4) Generalized social beneﬁts, where social utility
can be measured not only pairwise (each pair of friends) but
also group-wise (any group of friends). 5) Subgroup change,
where the ﬂuctuations (i.e., change of members) between
the partitioned subgroups at consecutive slots are limited to
ensure smooth social interactions as the elapse of time. 6)
Dynamic scenario, where users dynamically join and leave
the system with diﬀerent moving speeds.

A. Commodity Value. The current objective function,
i.e., maximizing the total utility among all users, is not de-
signed from a retailer’s perspective. In contrast, it will be
more proﬁtable to maximize the total expected proﬁt by tak-
ing into account the commodity values, while regarding the
ﬁnal SAVG utility as the willingness/likelihood of purchases.
Therefore, the ILP formulation of SVGIC and AVG can be
modiﬁed to examine the total SAVG utility weighted by a
commodity value ωc for each item c. Let ωc denote the com-
modity price of each item c. The new objective of SVGIC
is the weighted total SAVG utility as follows.

ωA∗(u,s)·[p(u, A∗(u, s))+

(cid:88)

τ (u, v, A∗(u, s))].

A∗ (u,s)←−−−−→v

v|u

(cid:88)

k
(cid:88)

u∈V

s=1

20

B. Layout Slot Signiﬁcance. Retailing research [18, 74]
manifests that diﬀerent slot locations in the item placement
layout have varying signiﬁcance for users. For example, the
slots at the center of an aisle are nine times more important
than the slots at the ends [74]. Vertical slots right at the
eye-level of users are also more signiﬁcant [18]. Therefore, it
is important for SVGIC to not only select the items but also
optimize the corresponding placements on the shelf. Specif-
ically, let γs represent the relative signiﬁcance of slot s in
the layout. The new objective of SVGIC is the SAVG utility,
weighted by the relative signiﬁcance as follows.

(cid:88)

γs ·

k
(cid:88)

[p(u, A∗(u, s)) +

(cid:88)

τ (u, v, A∗(u, s))].

u∈V

s=1

A∗ (u,s)←−−−−→v

v|u

C. Multi-View Display (MVD). SAVG k-Conﬁguration
with CID allows each user to see only one item at each
slot. In contrast, MVD [32, 46] has been proposed to sup-
port the display of multiple items at the same slot, so that
the primary view (for a personally preferred item) and the
group view (for common items with friends) can be freely
switched. Let β denote the maximum number of items (i.e.,
views) displayed for each user in each slot (depending on the
user interface). an MVD-supportive SAVG k-Conﬁguration
A maps a tuple (u, s) to an itemset A(u, s) with at most β
items, and the new objective function of SVGIC is as follows.

(cid:88)

k
(cid:88)

(cid:0) (cid:88)

[p(u, c) +

u∈V

s=1

c∈A∗(u,s)

(cid:88)

v|u

c←→v

τ (u, v, c)]

D. Generalized Social Beneﬁts.
In SVGIC τ (u, v, c)
considers only the pair-wise social interaction, i.e., social dis-
cussion and inﬂuence between two users viewing the com-
mon item. However, existing research on social inﬂuence
[4,35,96] manifests that quantifying the magnitude of social
inﬂuence from group-wise interactions is more general since
the pair-wise interaction is a special case of the group-wise
interaction. Therefore, let τ (u, V, c) denote the subgroup so-
cial utility for user u when co-displaying c to a subgroup of
friends V learned from group-wise social interaction models
such as [35]. Let u c←→
V represent the maximal group co-
s
display3, i.e., user u sees item c at slot s with every user in
V, and no friend of u outside V also sees c at slot s. Thus,
the new objective of SVGIC is generalized as follows.

(cid:88)

k
(cid:88)

[p(u, A∗(u, s)) +

(cid:88)

τ (u, V, A∗(u, s))].

u∈V

s=1

V|u

c←→
V

s

Algorithm Extension for Scenarios A–D.
In the fol-
lowing, we ﬁrst introduce a new ILP formulation to support
the above practical scenarios. Decision variable xc
u,s now
indicates whether user u views item c in the primary view
at slot s. On the other hand, let decision variable wc
u,s de-
note whether u can see c in some view, i.e., in the primary

3Here only the maximal groups, instead of every subgroup,
are examined in the objective function; otherwise, dupli-
cated social utilities will be summed up because multiple
overlapping subgroups are contained in a maximal groups

21

wc

u =

γs · wc

view or a group view, at slot s. Therefore, xc
plies wc

u,s = 1 im-
u,s = 1. To consider the layout slot signiﬁcance, let
k
(cid:80)
s=1

u,s be the weighted sum of all w decision

variables, and here wc
u is not required to be binary. There-
fore, wc
u represents the total signiﬁcance of the assigned slots
for u to view c. To capture the maximal co-display, for all
subgroups of users V ⊆ V , let yc
u,V,s now indicate the max-
imal group co-display. In other words, u c←→
V if and only
s
if yc
u,V be the weighted sum of
yc
u,V,s. The new objective function is as follows.

u,V,s = 1. Analogously, let yc

max

(cid:88)

c∈C

ωc · [

(cid:88)

u∈V

(cid:0)p(u, c) · wc

u +

(cid:88)

V⊆V

(τ (u, V, c) · yc

u,V )(cid:1)]

subject to the constraints,

(cid:88)

xc
u,s = 1, ∀u ∈ V, s ∈ [k]

c∈C
(cid:88)

wc

u,s ≤ β, ∀u ∈ V, s ∈ [k]

c∈C
u,s ≤ wc
xc
k
(cid:88)

u,s, ∀u ∈ V, s ∈ [k], c ∈ C

xc
u,s ≤ 1, ∀u ∈ V, c ∈ C

s=1

k
(cid:88)

(γs · xc

u,s), ∀u ∈ V, c ∈ C

s=1

k
(cid:88)

(γp · yc

V,s), ∀V ⊆ V, c ∈ C

xc
u =

yc
V =

s=1
V,s ≤ xc
yc
yc
V,s + xc
u,s, yc
xc

u,s, ∀u ∈ V, s ∈ [k], c ∈ C
u,s ≤ 1, ∀u /∈ V, s ∈ [k], c ∈ C

V,s ∈ {0, 1}, ∀u ∈ V, e ∈ E, s ∈ [k], c ∈ C.

(11)

(12)

(13)

(14)

(15)

(16)

(17)

(18)

(19)

u,s = 1), then wc

Constraint (11) guarantees that a user is displayed ex-
actly one default item (for the primary view) at each slot.
Constraint (12) ensures that at most β items can be viewed
at one slot in MVD. Constraint (13) states that the de-
fault item can be viewed in the MVD, i.e., if c is displayed
(xc
u,s will become 1. Constraint (14) guar-
antees that the default displayed items for each user are not
replicated. Constraint (15) ensures that xc
u (signiﬁcance of
the slot where u is displayed c) is the weighted sum of xc
u,s.
Similarly, constraint (16) states that yc
V is the weighted sum
of yc
V,s (on the slot signiﬁcance). Constraints (17) and (18)
specify the maximal co-display. Constraint (17) states that
V,s = 1 only if every xc
yc
u,s = 1, implying that c is displayed
to every u in V at slot s. When yc
V,s = 1, constraint (18)
ensures no other xc
u,s is 1 for u outside of V, so that V is
indeed the maximal set. Finally, constraint (19) ensures the
decision variables to be binary, i.e., ∈ {0, 1}.

The LP relaxation of the above formulation also re-
laxes the last constraint, so that binary decision variables
xc
u,s, yc
V,s become real numbers in [0, 1]. The other two
phases of AVG and AVG-D remain unchanged. The com-
modity value ωc and the layout slot signiﬁcance γs will not
aﬀect the theoretical guarantee of AVG and AVG-D because
the original proof can be modiﬁed by replacing the prefer-
ence utility and social utility values with weighted versions.
Furthermore, in any iteration t in AVG, for any subgroup of

users V with all users u ∈ V eligible for (c, s), as the maxi-
mal co-displayed subgroups contain at most (max |V|) users,
Lemma 7 can be analogously modiﬁed to upper bound the
probability that at least one user in V is not eligible for (c, s)
in iteration (t + 1) by summing exactly 2(max |V|) summa-
tion terms as in the last inequality in the proof of Lemma 7.
Consequently, AVG and AVG-D can achieve a 2(max |V|)-
approximation. Moreover, the advanced focal parameter
sampling scheme can be employed in the above model.

E. Subgroup Changes. While the partitions of sub-
groups in AVG enable ﬂexible conﬁgurations and facilitates
social discussion, drastic subgroup changes between adjacent
slots may undermine the smoothness of social interactions
and discussions within the group when users are exploring
the VE. To address this issue, one approach is to incorpo-
rate a constraint on edit distances between the partitioned
induced subgroups at consecutive slots. Speciﬁcally, a pair
of friends u and v in the same subgroup (i.e., viewing a com-
mon item) at slot s but separated into diﬀerent subgroups
at slot s + 1 will contribute 1 to the edit distance between
the two slots. To reduce the subgroup changes, IP of the
extended AVG discourages the intermediate solution (the
fractional solution) to introduce large subgroup changes by
constraining the total edit distances across all consecutive
slots in the SAVG k-Conﬁguration. In the rounding scheme,
AVG examines the potential outcomes before co-displaying
a focal item to the target subgroup. It voids the current it-
eration and re-sample another set of pivot parameters, if the
solution incurs a large subgroup change. Finally, after the
complete SAVG k-Conﬁguration is constructed, AVG can
facilitate a local search by exchanging the sub-conﬁguration
at diﬀerent slots to reduce the total subgroup change.

F. Dynamic Scenario.
To support the dynamic join
and leave of users with diﬀerent walking speeds, executing
the whole AVG for every dynamic event is computation-
ally intensive. Therefore, one approach is to ﬁrst solve the
relaxed LP for the partial SVGIC instance with the new
setting, whereas the majority of utility factors remain the
same (temporarily regarded as constants in LP), so that the
utility factors are updated eﬃciently. CSF then assigns new
users to existing target subgroups according to their utility
factors, and it also invokes local search to examine the po-
tential proﬁt from exchanging users among existing target
subgroups. Moreover, similar to in SVGIC-ST, teleporta-
tion in VR enables a user to move directly to her friends at
a diﬀerent slot. Therefore, when two users are co-displayed
an item (directly or indirectly) but are far apart from each
other in the store, the shopping application could suggest
one of them to teleport to the other’s location.

6. EXPERIMENTS

In this section, we evaluate the proposed AVG and AVG-
D along with various baseline algorithms on three real
datasets. Moreover, a case study on the real dataset is pro-
vided to demonstrate the characteristics of solutions derived
from diﬀerent approaches. Finally, we build a prototype of a
VR store with Unity and SteamVR to conduct a user study.

6.1 Experiment Setup and Evaluation Plan

Datasets.
To evaluate the proposed algorithms, three
real datasets are tested in the experiment. The ﬁrst dataset

22

Timik [39] is a 3D VR social network containing 850k ver-
tices (users) and 12M edges (friendships) with 12M check-
in histories of 849k virtual Point-of-Interests (POIs). The
second dataset, Epinions [20], is a website containing the
reviews of 139K products and a social trust network with
132K users and 841K edges. The third dataset, Yelp [86],
is a location-based social network (LBSN) containing 1.5M
vertices, 10M edges, and 6M check-ins. For Timik and Yelp,
we follow the settings in [7,27,68] to treat POIs in the above
datasets as the candidate items in SVGIC. The preference
utility and social utility values are learned by the PIERT
learning framework [45] which jointly models the social in-
ﬂuence between users and the latent topics of items. Follow-
ing the scales of the experiments in previous research [62,64],
the default number of slots k, number of items m, and size
of user set n selected from the social networks to visit a VR
store are set as 50, 10000, and 125, respectively.

Baseline Methods. We compare AVG and AVG-D with
ﬁve baseline algorithms: Personalized Top-k (PER), Fair-
ness Maximization in Group recommendation (FMG) [64],
Social-aware Diverse and Preference selection (SDP) [68],
Group Recommendation and Formation (GRF) [62], and
Integer Programming (IP). PER and FMG correspond to
the two baseline approaches outlined in Section 1. Speciﬁ-
cally, PER retrieves the top-k preferred items for each user
(the personalized approach), while FMG selects a bundled
itemset for all users as a group (the group approach) with
considerations of fairness of preference among the users.
SDP selects socially-tight subgroups to display their pre-
ferred items, which corresponds to the subgroup approach
outlined in Section 4. GRF splits the input users into sub-
groups with similar item preferences without considering the
social network topology, which can be viewed as a variation
of the subgroup approach where the subgroups are parti-
tioned based on preferences instead of social connections.
Finally, IP is the integer program formulated in Section 3.3
that ﬁnds the optimal solutions of small SVGIC instances
by Gurobi [28]. All algorithms are implemented in an HP
DL580 Gen 9 server with four 3.0 GHz Intel CPUs and 1TB
RAM. Each result is averaged over 50 samples.

Evaluation Metrics.
To evaluate the algorithms con-
sidered for SVGIC and analyze the returned SAVG k-
Conﬁgurations, we introduce the following metrics: 1) to-
tal SAVG utility achieved, 2) total execution time (in sec-
onds), 3) the percentages of personal preference utility (Per-
sonal% ) and social utility (Social% ) in total SAVG utility, 4)
the percentage of Inter -subgroup edges (Inter% ) and Intra-
subgroup edges (Intra% ) in the returned partition of sub-
groups, 5) the average network density among partitioned
subgroups, normalized by the average density of the origi-
nal social network, 6) the percentage of friend pairs viewing
common items together (Co-display% ), 7) the percentage of
users viewing items alone (Alone% ), and 8) regret ratio (a
fairness measure detailed later in Section 6.5.) Moreover, for
evaluating the performance of all methods in SVGIC-ST, we
measure 9) feasibility ratio: the number of feasible solutions
divided by the total number of instances, and 10) group size
constraint violation: the number of partitioned subgroups
exceeding the predeﬁned size constraint.

Evaluation Plan.
To evaluate the performance of the
above algorithms, in Section 6.2, we use IP to derive the

(a) Total SAVG utility
vs. size of user set (n).

(b) Execution time vs.
size of user set (n).

Figure 4: Normalized total SAVG utility of diﬀ. λ.

(c) Total SAVG utility
vs. size of item set (m).

(d) Execution time vs.
size of item set (m).

(e) Total SAVG utility
vs. number of slots (k).

(f) Execution time vs.
number of slots (k).

Figure 3: Comparisons on small datasets.

optimal total SAVG utility on small datasets.4 The social
networks and items in the small datasets are respectively
sampled by random walk and uniform sampling from Timik
according to the setting of [55]. Next, in Section 6.3, we eval-
uate the eﬃcacy of AVG and AVG-D in large datasets with
input scales following previous research [62, 64], while con-
ducting experiments on diﬀerent inputs (the p and τ values)
generated by PIERT [45] (default), AGREE, and GREE [9].
We examine the eﬃciency of all algorithms, including vari-
ous conﬁgurations of mixed integer programming (MIP) al-
gorithms, in Section 6.4. We then compare the algorithms
on the aforementioned group formation-related performance
metrics in Section 6.5. A case study on a 2-hop ego network
in Yelp is shown in Section 6.6 to examine the subgroup
partition patterns in diﬀerent algorithms. Result of a sensi-
tivity test on r, an important algorithmic parameter of the
deterministic AVG-D algorithm and experimental results on
the SVGIC-ST problem are reported in Sections 6.7 and 6.8,
respectively. Finally, we build a prototype of VR store with
Unity 2017.1.1.1 (64bit), Photon Unity Network free 1.86,
SteamVR Plugin 1.2.2, VRTK, and 3ds Max 2016 for hTC
VIVE HMD to validate the proposed objective in modelling
SVGIC. We detail the user study in Section 6.9.

6.2 Comparisons on Small Datasets

Figure 3(a) manifests that AVG and AVG-D outperform
the other approaches regarding the total SAVG utility for
diﬀerent n (i.e., the size of user set). Solutions of AVG-D are

Figure 5: Total SAVG utility vs. size of user set (n).

close to optimal since AVG-D extracts the target subgroups
by jointly optimizing the current and expected future total
SAVG utility in each iteration. AVG-D outperforms other
baselines by at least 50.8% to 62.8% as n grows, because the
social interactions on extracted target subgroups become in-
creasingly important when the size of user set increases. In
contrast, the values of total SAVG utility of PER grows
slowly because it is not designed to cope with the inter-
play and trade-oﬀ between personal preferences and social
interactions. Moreover, while FMG and GRF seem to ben-
eﬁt from large values of n, their solution qualities are still
limited due to the ﬁxed partition of subgroups generated
without leveraging CID.

Figure 3(c) presents the total SAVG utility under varied
numbers of items (m). However, m does not seem to af-
fect the total SAVG utility by much since any user’s top
preferred items are already contained in the top-100 items.
Moreover, Figure 3(e) presents the total SAVG utility under
varied number of slots (k). AVG-D and AVG signiﬁcantly
outperform the baselines by at least 134.7% and 102.1% in
terms of the total SAVG utility when k grows to 20, because
CSF leverages the ﬂexibility provided by CID to optimize
the social utility for diﬀerent slots, which is beneﬁcial for
a large k as it becomes diﬃcult to ﬁnd more commonly in-
terested items for static subgroup members. Figures 3(b),
3(d) and 3(f) show the execution time by varying the size
of user set (n), the size of item set (m), and the number
of slots (k). The running times of AVG and AVG-D are at
most 7.5% and 17.4% of that of IP. AVG and AVG-D require
slightly more time than PER, GRF, and FMG, since the
baseline approaches focus only on one of preference utility,
social utility, or subgroup partition, instead of considering
all of them jointly. Figure 4 evaluates the impact of λ on
the total SAVG utility of all schemes normalized by that of
IP. The normalized total SAVG utilities of FMG and SDP
improve when the social utility becomes more important as
λ grows. However, it is diﬃcult for them to address the
diverse personal preferences. In contrast, PER achieves the
highest preference utility and the lowest social utility, but
tends to generate a small total SAVG utility.

4Since solving IP is NP-hard, Gurobi cannot solve large in-
stances within hours.

6.3 Sensitivity Tests on Large Datasets

23

0%50%100%AVGAVG-DPERFMGSDPGRFIPAVGAVG-DPERFMGSDPGRFIPAVGAVG-DPERFMGSDPGRFIPλPersonal%Social%0.330.50.67AVGAVG-DPERFMGSDPGRFIPAVGAVG-DPERFMGSDPGRFIPAVGAVG-DPERFMGSDPGRFIPTotal SAVG UtilityFigure 6: Total SAVG utility in diﬀ. datasets.

(a) Execution time vs.
size of user set (n).

(b) Execution time vs.
size of item set (m).

Figure 8: Execution time in Yelp.

Figure 7: Total SAVG utility vs. diﬀerent input.

We evaluate the eﬃciency and eﬃcacy of AVG and AVG-
D in large datasets with the scales of the three dimensions
following previous research [62, 64], i.e., m = 10000, k = 50,
and n = 125. Figure 5 presents the total SAVG utility by
varying the sizes of user set in Timik. The results mani-
fest that AVG and AVG-D outperform all baselines by at
least 30.1%, while AVG-D is slightly better than AVG since
it selects better pivot parameters for CSF. Moreover, the
returned objective values of AVG and AVG-D respectively
achieve at least 93.7% and 96.4% of the objective value of
IP, manifesting that our algorithms are eﬀective. Compared
with GRF, the improvement of AVG-D grows from 43.6%
to 54.6% as n increases, since GRF splits the users into sub-
groups without considering social relations, but social in-
teractions among close friends become more important for
a larger group. By striking a balance between preference
and social utility, AVG and AVG-D achieve a greater to-
tal SAVG utility. Compared with PER and GRF, FMG
achieves a higher social utility but a lower preference utility
because it displays a universal conﬁguration to all users.

Figure 6 compares the results on Timik, Yelp, and Epin-
ions. The social utility obtained in Epinions is lower than
in Yelp due to the sparser social relations in the review net-
work, and group consensus thereby plays a more important
role in Yelp. Despite the diﬀerent characteristics of datasets,
AVG and AVG-D prevail in all datasets and outperform
all baselines since CSF operates on the utility factors from
the optimal LP solution, which does strike a good balance
among all factors. FMG and SDP beneﬁt from the high so-
cial utility in Yelp and outperform PER. By contrast, PER
performs nearly as good as FMG and SDP in Epinions since
the social utility is lower.

Next, to examine the inﬂuence of input models on the
tackled problem, Figure 7 shows the experimental results on
diﬀerent inputs generated by PIERT [45] (default), AGREE
and GREE [9]. PIERT jointly learns the preference and so-
cial utilities by modeling the social inﬂuence between users
and the latent topics of items. For AGREE and GREE [9],
the former assumes the social inﬂuence between users is
equal, and the later learns sophisticated weights of the triple
(user, user, item). AVG and AVG-D outperform the base-
lines with regards to all diﬀerent input models, manifesting
that our method is generic to diﬀerent distributions of in-

(a) Results of diﬀerent IP
heuristics.

(b) Eﬀects
strategies.

of

speedup

Figure 9: Sensitivity Test on Eﬃciency and Eﬃcacy.

puts. Note that the social utilities returned by AVG and
AVG-D with PIERT and AGREE are slightly greater than
the ones with GREE. The result manifests that AVG and
AVG-D can select better items for users to enjoy if social
utilities are diﬀerent across items.

6.4 Scalability Tests on Large Datasets

Figure 8(a) presents the execution time in Yelp with dif-
ferent n. IP cannot terminate within 24 hours when n ≥ 25,
and SDP needs 300 seconds to return a solution even when
n = 5. Figure 8(b) shows the execution time with diﬀerent
m. Note that AVG and AVG-D are both more scalable to
m than the baseline approaches because CSF exploits the
fractional solution without m in the complexity. Although
AVG-D provides a stronger theoretical guarantee, the scal-
ability of AVG on n is better than AVG-D because AVG
samples the target subgroups randomly. However, practical
VR applications, e.g., VRChat [80] and IrisVR [38], seldom
have n > 25.

AVG, AVG-D, and IP are all integer program (IP)-based
approaches, which means solving an IP (or a relaxed linear
program) is the ﬁrst step. For a ﬁxed k (number of dis-
play slots for a user), when n and m grow, the numbers of
variables and constraints in IP and LP also increase. How-
ever, as the number of core decisions (which items to be
displayed in the k slots) remains the same, an increasing
number of newly introduced constraints become dominated
(i.e., redundant) and thus pre-solved (relaxed) by the highly
optimized commercial IP/LP solvers. Accordingly, the em-
pirical complexity of the problem models after pre-solving
will not grow explicitly with n and m, rendering the prac-
tical computational cost of solving the IP/LP more scalable
regarding n and m. Moreover, in AVG and AVG-D, after the
optimal fractional solution for the LP is retrieved, decision
variables with values of 0 or 1 do not require the random-
ized/deterministic rounding procedure and can be directly
ﬁlled into the ﬁnal solution. This usually happens when
1) some user has a very strong preference toward a speciﬁc

24

0230460AVGAVG-DPERFMGSDPGRFIPAVGAVG-DPERFMGSDPGRFIPAVGAVG-DPERFMGSDPGRFIPTotal SAVG UtilityEpinionsTimikYelp0230460AVGAVG-DPERFMGSDPGRFAVGAVG-DPERFMGSDPGRFAVGAVG-DPERFMGSDPGRFTotal SAVG UtilityLearning ModelPersonalSocialPIERT (default)AGREEGREEitem such that viewing the item by her own still outweighs
viewing other items with friends, and 2) some item is ex-
tremely popular and thus is co-displayed to a majority of
users. As n and m increases in this case, the total num-
ber of decision variables x∗(u, ·) grows, but the summation
of all decision variables remains constant in Constraint (2).
Therefore, more decision variables have values close to 0 in
this case. On the other hand, all other baselines are based
on local greedy heuristics that need either a linear scan on
all users (O(n)) or all items (O(m)) at each step, and do not
beneﬁt from the above “decision dilution” phenomenon.

To examine the performance of diﬀerent mixed integer
programming (MIP) algorithms, we further conducted ex-
periments with Primal-ﬁrst Mixed Integer Programming
(IP-Primal), Dual-ﬁrst Mixed Integer Programming (IP-
Dual), Concurrent Mixed Integer Programming (IP-C), De-
terministic Concurrent Mixed Integer Programming (IP-
DC), and the Barrier Algorithm (IP-Barrier) in the Gurobi
[28] package. Figure 9(a) shows the trade-oﬀ between ef-
ﬁciency and eﬃcacy of ﬁve diﬀerent IP algorithms on the
Timik dataset with the default parameters ((k, m, n) =
(50, 10000, 125)). For every MIP algorithm, we evaluate
the solution quality of diﬀerent algorithms with the running
time constrained by 200, 1000 and 5000 times the running
time of our proposed AVG-D algorithm for the same instance
to compare the obtained solutions in diﬀerent time limits.
The y-axis shows the objective value normalized by the so-
lution of AVG-D, which manifests none of the 5 baselines
achieves any solution better than that of AVG-D in 5000X
of the running time of AVG-D. As such, although there is
some subtle diﬀerence in performance across diﬀerent MIP
algorithms, none of the examined algorithms shows a rea-
sonable scalability.

Figure 9(b) shows the eﬀects of the speedup strategies on
AVG and AVG-D. AVG–ALP and AVG-D–ALP are AVG
and AVG-D without the advanced LP transformation tech-
nique, respectively, while AVG–AS and AVG-D–AS are AVG
and AVG-D without the advanced focal parameter sam-
pling technique, respectively. The results manifest that all
speedup strategies eﬀectively boost the eﬃciency of AVG
and AVG-D. For AVG, the advanced LP transformation
plays a more dominant role than the advanced focal param-
eter sampling scheme since the computational cost of solv-
ing the linear program is more evident in AVG. Conversely,
as AVG-D needs to carefully examine every combination of
good focal parameters (i.e., those sets of parameters that
do assign an item to at least one user), the advanced sam-
pling technique has a signiﬁcant eﬀect in ﬁltering out bad
focal parameters. Therefore, the eﬀect of the advanced LP
transformation pales in comparison to that of the advanced
sampling technique in AVG-D.

6.5 Comparisons on Subgroup Metrics

In the following, we analyze the subgroups in the SAVG
k-Conﬁgurations returned from all algorithms5 in terms of
subgroup-related metrics. Figures 10(a), 10(b), and 10(c)
compare the ratios of Inter-/Intra-subgroup edges averaged
across all slots in the SAVG k-Conﬁgurations in the Timik,
Yelp, and Epinions datasets, respectively. It also shows the
average network density among the partitioned subgroups

5Some of the results of AVG-D are omitted as they are sim-
ilar to AVG.

normalized by the original density of the input social net-
work. The results from all datasets indicate that the major-
ity of preserved edges by AVG are within the same subgroups
(large Intra%). FMG achieves 100% in Intra%, 0% in In-
ter%, and 1 in normalized density because it consistently
views the whole network as a large subgroup. In contrast,
PER has a high Inter% as it separates most users into inde-
pendent subgroups to display their favorite items. This phe-
nomenon is more obvious in Yelp (with a 100% Inter%, i.e.,
every user is left alone as a tiny subgroup) than in Timik
(about 30% of the social edges are Intra-subgroup edges)
or Epinions (a nonzero Intra%). This is because Yelp is
a product-review application, where the POIs (restaurants,
stores, service centers, etc.) are highly diversiﬁed, making it
more diﬃcult for diﬀerent users to have aligned preferences,
e.g., user A has her k-th favorite POI (indicated by check-in
records) identical to user B’s k-th favorite POI, such that
PER happens to co-display the POI to them. On the other
hand, there exist a small subset of widely liked or adopted
items in Epinions that appear as most users’ favorite (hence
the small nonzero Intra% of PER), while famous VR loca-
tions (e.g., transportation hubs in Timik) are inclined to
be associated with high preference utilities by the exploited
recommendation learning models as they generate a lot of
check-ins among all users. Therefore, they have a higher
chance to be co-displayed by PER.

Among all methods, AVG achieves the largest normalized
density as CSF carefully considers the utility factors to par-
tition the network into dense communities. The normalized
density achieved by AVG in Yelp is the lowest among the
three datasets due to the aforementioned issue of diversi-
ﬁed interests but is still higher than all other algorithms.
As a result, AVG has the most abundant social connections
among subgroup members, which usually trigger enthusi-
astic discussions and purchases.
It is worth noting that
VR users generally interact with more strangers during the
trip, whereas users in traditional LBSN mainly interact with
friends in their spatial proximity. Therefore, the local com-
munity structures in Timik are less apparent than those of
Yelp. As such, despite adopting diﬀerent partitioning crite-
ria, the average densities of the subgroups retrieved by SDP
and GRF do not diﬀer much in Timik.

Figures 10(d), 10(f), and 10(e) illustrate the Co-display%
and Alone% among the returned SAVG k-Conﬁgurations.
As shown, AVG has a high Co-display% near 1.0 (implying
almost all pairs of friends are sharing the views of com-
mon items) and a near-zero Alone% (showing that almost
no users are left alone in the conﬁguration) in all datasets.
Note that the Co-display% is based on friend pairs and the
Alone% is calculated based on all users, i.e., they are not
complementary statistics (thus do not sum up to 100%).
Although FMG achieves 100% in Co-display% and 0% in
Alone%, it sacriﬁces the preferences of group members by
forming huge subgroups for co-display. On the other hand,
both AVG and GRF are able to maintain high values of Co-
display% while taking into account the personal preferences.
In all datasets, GRF leaves a considerably high portion of
users alone because it forms the subgroups according to item
preferences. Therefore, some users with unique proﬁles of
interests are more inclined to be left alone. The only other
method with a higher Alone% than GRF is PER, which does
not facilitate shared views.

Figures 10(g), 10(i), and 10(h) report the CDF of regret

25

(a) Inter/Intra% and sub-
group density (Timik).

(b) Inter/Intra% and sub-
group density (Epinions).

(c) Inter/Intra% and sub-
group density (Yelp).

(d) Share rate and alone
rate (Timik).

(e) Share rate and alone
rate (Epinions).

(f) Share rate and alone
rate (Yelp).

(g) Regret ratio (Timik).

(h) Regret ratio (Epinions).

(i) Regret ratio (Yelp).

Figure 10: Comparisons on subgroup metrics.

ratios of all algorithms in the the Timik, Yelp, and Epin-
ions datasets. The regret ratio reg(u) [44] is a game-theory
based measurement for satisfaction of individual users and
the overall fairness of the solution. For each user u, the re-
gret ratio reg(u), and its converse, happiness ratio hap(u),
are deﬁned as

reg(u) ≡ 1 − hap(u),

hap(u) ≡

(cid:80)
c∈A∗(u,·)
(cid:80)
max
Cu
c∈Cu

wA(u, c)

¯wA(u, c)

where the numerator in hap(u) is the achieved SAVG util-
ity, the denominator with ¯wA(u, c) = (1 − λ) · p(u, c) + λ ·
(cid:80)
v∈V τ (u, v, c) is an upper bound of possible SAVG util-
ity when all users view c together with user u, and Cu is
a k-itemset, corresponding to a very optimistic scenario fa-
voring u the most. Note that the second term of ¯wA(u, c)
is diﬀerent from wA(u, c) in Deﬁnition 3. In other words,
the upper bound is the SAVG utility of u if she dictates
the whole SAVG k-Conﬁguration selﬁshly. Therefore, a high
hap(u) (equivalently, a low reg(u)) implies that user u is rela-
tively satisﬁed with the SAVG k-Conﬁguration, and fairness
among the users can be observed by inspecting the distri-
bution of regret ratio in the ﬁnal conﬁgurations. AVG and
AVG-D consistently have the lowest regret ratios. Among
the other approaches, PER incurs the highest regret ratios
for users in all datasets, since it does not foster social inter-
actions in shared views. Consistent with the performances
on SAVG utility, FMG and SDP outperform PER and GRF
in the Timik and Yelp datasets, but their performances are
comparable in Epinions because the sparser social relations

in the review network generates lower social utility. Inter-
estingly, in Timik and Yelp, some users in GRF are highly
satisﬁed (as the CDF of GRF matches well with that of
AVG and AVG-D from the beginning) but some others have
very high regret ratios (as the CDF dramatically rises near
the end). This indicates that a portion of the users in GRF
may actually have their preferences sacriﬁced, i.e., they are
forced to share views on uninterested items with other sub-
In contrast, FMG and SDP show ﬂatter
group members.
CDFs,
implying the user preferences are more balanced.
However, users in FMG and SDP consistently have regret
ratios over 20%, while the regret ratios seldom exceed 20%
in AVG/AVG-D; this is because the randomly chosen pivot
parameters (in AVG) and the deterministically optimized
one (in AVG-D) can eﬀectively form dense subgroups with
similar item preferences.

6.6 A Case Study on Partitioning Subgroups
Figure 11 depicts a 2-hop ego network (the subnetwork
consisting of all 2-hop friends) of a user A in Yelp and two
slots with the highest regret. Note that user A is studied
here because she has a unique proﬁle of preference that does
not resemble any of her friends (B, E, and F), as shown in the
table listing the top-4 POIs of the preference utility for each
user. The shaded areas illustrate the partitioned subgroups
at the speciﬁc slot, while solid and dashed lines depict intra-
subgroup and inter-subgroup social edges. The icon beside
each subgroup represents the selected POI (displayed item).
As indicated in the table, A has a unique proﬁle of pref-
erence that does not resemble any of her friends B, E and
F. Therefore, A and her friends are partitioned into distinct

26

00.20.40.60.800.20.40.60.81CDFAVGAVG-DPERFMGSDPGRFRegret Ratio0.10.30.50.700.20.40.60.81CDFAVGAVG-DPERFMGSDPGRFRegret Ratio00.20.40.60.8100.20.40.60.81CDFAVGAVG-DPERFMGSDPGRFRegret RatioFigure 11: Illustration of subgroup partitioning approaches.

lutions as Co-display Subgroup Formation with r balances
between the current increment in SAVG utility and the po-
tential SAVG utility in the future. This phenomenon is also
observed in other datasets. However, setting r = 0.25 is
still promising as it achieves 86.1% of the optimal objective,
which is consistent with the theoretical guarantee. Figure
12(a) also manifests that AVG-D with small values of r tends
to resemble the group approach in Section 1 (i.e., displaying
the same items to every user). For instance, AVG-D ﬁnds
a large subgroup of all users with r ≤ 0.2. AVG-D gradu-
ally becomes more alike to the personalized approach as r
grows (e.g., the social utility is close to 0 for r ≥ 1.5, imply-
ing almost every user is displayed her own favorite items).
This is actually consistent with the design of AVG-D, since
1) a small r essentially ignores the potential utility gain in
the future from allocating other items than the current fo-
cal item, leading to a greedy behavior of always including
every eligible user into the targeted subgroup in CSF. Con-
sequently, running every iteration with r close to 0 ﬁnds a
large subgroup of all users in every slot; 2) a large r prior-
itizes only the future gain and thereby tends to select very
few users into the targeted subgroup. This reluctant behav-
ior in the extreme (consider r = ∞) thus leads to subgroups
consisting of only one user, essentially simulating the per-
sonalized approach. In summary, this again manifests that
AVG-D can strike a good balance between the personalized
and group approaches.

Figure 12(b) depicts the execution time of AVG-D with
diﬀerent values of r. Intuitively, when AVG-D chooses fewer
users in the current targeted subgroup, more iterations are
required to construct a complete SAVG k-Conﬁguration.
For n users and k slots, the total number of iterations is
k if every targeted subgroup includes all n users but would
increase to kn if every iteration displays the focal item to
only one user. Therefore, AVG-D has a larger execution
time with larger values of r. Figures 12(c) and 12(d) fur-
ther show the average normalized density and Inter/Intra%
among the subgroups in the solutions of AVG-D with diﬀer-
ent values of r. Consistent with the above discussion, the
behavior of AVG-D essentially spans a spectrum from the
personalized to the group approach.

6.8 Experimental Results for SVGIC-ST

In the following, we investigate the behavior of all meth-
ods in SVGIC-ST, where the default discount factor is 0.5,
and the subgroup size constraint M is varied. As none of the
baseline algorithms considers the subgroup size constraint,

(a) Total SAVG utility vs.
diﬀ. r.

(b) Execution time vs. diﬀ.
r.

(c) Normalized density vs.
diﬀ. r.

(d) Inter/Intra% vs. diﬀ. r.

Figure 12: Sensitivity test on r in AVG-D.

subgroups by GRF. On the other hand, AVG assigns a base-
ball ﬁeld to {A, E, F, G} at slot 1, and a bar to {A, B, C, D}
at slot 2. Therefore, AVG is able to capture diﬀerent inter-
ests of A and select proper subgroups of friends for them.
However, A is not co-displayed the library with {B, C, D}
at slot 1 and the beach with {E, F, G} at slot 2 because
none of the two POIs is in A’s favor. On the other hand,
SDP partitions the ego-network into three cliques based on
the network topology and then assigns a music place and
a movie theater to {A, B}, favoring B’s but sacriﬁcing A’s
interests. Moreover, A is inclined to be dissatisﬁed for not
joining {E, F, G} to the baseball ﬁeld (the third preferred
POI) at slot 2. GRF gathers the users with similar interests
and leaves A alone, since none of her friends is a big fan of
the two restaurants. Therefore, the regret ratios for A are
35.2% (SDP), 41.2% (GRF), and 19.6% (AVG) accordingly.
Indeed, this case study manifests that ﬂexible partitions of
subgroups are crucial the situations of friends not necessarily
sharing similar interests.

6.7 Sensitivity Test of AVG-D

In the following, we compare AVG-D with the optimal so-
lution in the Timik dataset. Figure 12(a) shows that with
r values from 0.7 to 1.0, AVG-D ﬁnds nearly-optimal so-

27

Top-k1234ABCDEFGAVG-RSDPGRFSlot 1ABCDEFGABCDEFGABCDEFGSlot 2ABCDEFGABCDEFGABCDEFGYXIntra-edgeInter-edgeSubgroupSelectedPOI(a) Total
subgroup size
(Timik, n = 25).

violation

vs.
constraint

(b) Total violation vs. sub-
group size constraint (Epin-
ions, n = 15).

Figure 13: Comparisons on SVGIC-ST.

Figure 14: Total SAVG utility vs.
constraint (Timik, n = 15).

subgroup size

Figure 15: Total SAVG utility vs.
constraint (Epinions, n = 15).

subgroup size

for SVGIC-ST with subgroup size constraint M , we ﬁrst
pre-partition the user set in to (cid:100) N
M (cid:101) subgroups with bal-
anced sizes. The results of all baseline algorithms on the
partitioned subproblems are then aggregated into the ﬁnal
returned SAVG k-Conﬁguration for them. Figures 13(a) and
13(b) show the total violation of subgroup size constraint (in
total number of users) of all methods aggregated over all dis-
play slots in a total of 10 sampled instances in Timik (with
n = 25) and Epinions (with n = 15), respectively. The suﬃx
“-P” in the method name represents prepartitioning of the
user set into (cid:100) N
M (cid:101) subgroups with balanced sizes, and the
suﬃx “-NP” indicates no prepartitioning is applied. The
results manifest that the pre-partitioning helps decrease the
total violation of the subgroup size constraint for all baseline
methods except PER because the methods do not take the
cap on subgroup sizes into account. AVG never violates the
constraint since the greedy cutoﬀ in CSF prevents large tar-
geted subgroups. PER also achieves 100% feasibility since
it does not consider social interactions. Among the base-
line methods that consider social interactions, GRF incurs
the lowest violation since only it partitions the user set into
subgroups based on preference. However, it still has a low
feasibility if not used with the pre-partition technique.

Figures 14 and 15 compares the total SAVG utility
achieved by all methods with pre-partitioning in Timik and
Epinions, respectively, with n = 15 and the subgroup size
constraint varies from 3 to 15, where infeasible solutions
achieves a total SAVG utility of 0. Note that all the base-
line methods, except for PER, could still violate the sub-
group size constraint even incorporated with the preparti-
tioning technique. This is because they from time to time
display the same item to diﬀerent pre-partitioned subgroups
(or, in the case of GRF, subgroups of them) at the same
display slot. AVG consistently outperforms all other meth-
ods except for the cases where M is very small (3 in Epin-
ions). GRF achieves high total SAVG utility in Epinions
as it achieves 100% feasibility and also selects proper dis-
tinct and preferred items for separated small subgroups of
users in the sparse Epinions network. However, GRF has a
surprisingly low feasiblity in Timik (around 20%), leading
to a low total SAVG utility. This is because GRF displays
the commonly-preferred popular VR locations in Timik to
almost all pre-partitioned subgroups at the ﬁrst few display
slots due to its greedy (and thus deterministic) algorithmic
behavior in selecting display items for subgroups. There-
fore, while its accumulative violation is the lowest (among all
methods that possibly violate the constraint), it often ﬁnds
slightly oversized subgroups at slots 1 and 2, and thereby
has a low feasibility.

6.9 User Study

For the user study, we recruit 44 participants to visit our
VR store. Their social networks, preference utility, and λ are
pre-collected with questionnaires, which follows the setting
of [62], and the social utility is learned by PIERT [45]. A
Likert scale questionnaire [76] is used to ﬁnd the preference
utility of items, where users are allowed to discuss the prod-
ucts so that the social utility can be learned. Finally, they
are asked to provide λ in [0,1]. We investigate the following
research question: After experiencing the VR store, are the
participants satisﬁed with the SAVG k-Conﬁgurations gen-
erated by AVG, PER, FMG, and GRF? User feedbacks are
collected in Likert score [76] from 1 to 5 (very unsatisfactory,

28

0100200AVGPERFMGSDPGRFAVGPERFMGSDPGRFAVGPERFMGSDPGRFTotal SAVG UtilityubPersonalSocial3515075150AVGPERFMGSDPGRFAVGPERFMGSDPGRFAVGPERFMGSDPGRFTotal SAVG UtilityubPersonalSocial3515datasets manifest that our algorithms outperform baseline
approaches by at least 30.1% in terms of solution quality.

8. REFERENCES
[1] 3D virtual stores - the new virtual reality social

shopping in 3D.
https://www.qbittech.com/index.php/component/k2/
item/41-virtual-reality-ecommerce-3d-stores.
Accessed: 2020-02-03.

[2] Alibaba oﬀers VR shopping.

https://edition.cnn.com/videos/world/2016/11/
28/alibaba-vr-shopping-stevens-pkg.cnn.
Accessed: 2019-09-30.

[3] AltspaceVR. https://altvr.com/. Accessed:

2020-02-03.

[4] F. Amato, V. Moscato, A. Picariello, and G. Sperl`ı.

Inﬂuence maximization in social media networks using
hypergraphs. In GPC, pages 207–221, 2017.

[5] A. An, M. Kargar, and M. Zihayat. Finding aﬀordable
and collaborative teams from a network of experts. In
SDM, pages 587–595. SIAM, 2013.

[6] E. Bozgeyikli, A. Raij, S. Katkoori, and R. V. Dubey.
Point & teleport locomotion technique for virtual
reality. In CHI PLAY, pages 205–216. ACM, 2016.

[7] C. Cai, R. He, and J. J. McAuley. SPMC:

socially-aware personalized Markov chains for sparse
sequential recommendation. In IJCAI, pages
1476–1482, 2017.

[8] Can virtual experiences replace reality? The future
role for humans in delivering customer experience.
https://www.oracle.com/webfolder/s/
delivery production/docs/FY16h1/doc35/
CXResearchVirtualExperiences.pdf. Accessed:
2020-02-03.

[9] D. Cao, X. He, L. Miao, Y. An, C. Yang, and

R. Hong. Attentive group recommendation. In SIGIR,
pages 645–654. ACM, 2018.

[10] F. Chataigner, G. Manic, Y. Wakabayashi, and

R. Yuster. Approximation algorithms and hardness
results for the clique packing problem. Discrete
Applied Mathematics, 157(7):1396–1406, 2009.
[11] H. Chen, D. Niu, K. Lai, Y. Xu, and M. Ardakani.
Separating-plane factorization models: Scalable
recommendation from one-class implicit feedback. In
CIKM, pages 669–678. ACM, 2016.

[12] J. Chen, H. Zhang, X. He, L. Nie, W. Liu, and

T. Chua. Attentive collaborative ﬁltering: Multimedia
recommendation with item- and component-level
attention. In SIGIR, pages 335–344. ACM, 2017.

[13] L. Chen, C. Liu, R. Zhou, J. Li, X. Yang, and

B. Wang. Maximum co-located community search in
large scale social networks. PVLDB,
11(10):1233–1246, 2018.

[14] Y. Cheng, Y. Yuan, L. Chen, C. G. Giraud-Carrier,
and G. Wang. Complex event-participant planning
and its incremental variant. In ICDE, pages 859–870.
IEEE, 2017.

[15] M. B. Cohen, Y. T. Lee, and Z. Song. Solving linear

programs in the current matrix multiplication time. In
FOCS. IEEE, 2019.

[16] E. Dahlhaus, D. S. Johnson, C. H. Papadimitriou,

P. D. Seymour, and M. Yannakakis. The complexity of

(a) Percentage of diﬀ. λ.

(b) Total SAVG utility and
user satisfaction.

(c) Inter/Intra% and sub-
group density.

(d) Co-display
alone rate.

rate

and

Figure 16: Comparisons on user study.

unsatisfactory, average, satisfactory, and very satisfactory).
Each group of participants visits the VR stores twice via
hTC VIVE with the items selected by each scheme in ran-
domized order.

Figure 16(a) reports that λ values speciﬁed by the users
range from 0.15 to 0.85 with the average as 0.53, indicating
that both personal preferences and social interactions are
essential in VR group shopping. Figure 16(b) compares the
total SAVG utility as well as the recorded user satisfaction
of each method. AVG outperforms the baselines by at least
34.2% and 29.6% in terms of the average total SAVG utility
and average user satisfaction, respectively. The diﬀerence
of AVG is statistically signiﬁcant (p-value ≤ 0.019 < 0.05).
It is worth noting that the correlation between the SAVG
utility and user satisfaction is high (Spearman correlation
0.835; Pearson correlation 0.814), which manifest that the
SAVG utility is a good estimation of user satisfaction.

Figures 16(c) and 16(d) report the subgroup metrics in
the user study datasets. GRF, which separates users into
subgroups according to preference similarities, returns a low
normalized density (0.21), i.e., users in the same subgroup
tends to be strangers. Compared with the results in large-
scale datasets (Figure 10), GRF performs worse here since
the normalized density is more sensitive when the user set
is relatively small. In contrast, AVG ﬂexibly assigns proper
items to diﬀerent subgroups of friends such that the normal-
ized density is greater than 1 and the alone rate is 0%.

7. CONCLUSION

To the best of our knowledge, there exists no prior work
tackling ﬂexible conﬁgurations under the envisaged sce-
In this paper, we formu-
nario of VR group shopping.
late the SVGIC problem to retrieve the optimal SAVG k-
Conﬁguration that jointly maximizes the preference and the
social utility, and prove SVGIC is NP-hard to approximate
within 32
31 − (cid:15). We introduce an IP model and design a novel
4-approximation algorithm, AVG, and its deterministic ver-
sion, AVG-D, by exploring the idea of Co-display Subgroup
Formation (CSF) that forms subgroups of friends to dis-
play them the same items. Experimental results on real VR

29

multiterminal cuts. Journal on Computing,
23(4):864–894, 1994.

[17] Douban Location. http://www.douban.com/location/.

Accessed: 2020-02-03.

[18] X. Dreze, S. J. Hoch, and M. E. Purk. Shelf

management and space elasticity. Journal of retailing,
70(4):301–326, 1994.

[19] A. Ene, J. Vondr´ak, and Y. Wu. Local distribution

and the symmetry gap: Approximability of multiway
partitioning problems. In SODA, pages 306–325.
SIAM, 2013.
[20] Epinions dataset.

http://www.trustlet.org/extended epinions.html.

[21] Facebook Events.

https://www.facebook.com/events/. Accessed:
2020-02-03.

[22] Facebook Horizon.

https://www.oculus.com/facebookhorizon/.
Accessed: 2020-02-03.

[23] Facebook social VR demo - Oculus connect 2016.
https://youtu.be/YuIgyKLPt3s. Accessed:
2019-09-30.

[24] From virtual reality to personalized experiences:

Alibaba is bringing us the future of retail this singles
day. https://www.forbes.com/sites/helenwang/
2016/11/06/how-alibaba-will-use-the-worlds-
biggest-shopping-day-to-transform-retail/
#41d6340c6d4e. Accessed: 2020-02-03.

[25] Future of retail: Artiﬁcial intelligence and virtual

reality have big roles to play.
https://www.forbes.com/sites/rachelarthur/2016/
06/15/future-of-retail-artificial-
intelligence-and-virtual-reality-have-big-
roles-to-play/#b87b8ae7f9df. Accessed:
2020-02-03.

[26] R. Guerraoui, A. Kermarrec, T. Lin, and R. Patra.
Heterogeneous recommendations: What you might
like to read after watching interstellar. PVLDB,
10(10):1070–1081, 2017.

[27] A. Gulati and M. Eirinaki. With a little help from my
friends (and their friends): Inﬂuence neighborhoods
for social recommendations. In WWW, pages
2778–2784. ACM, 2019.

[28] Gurobi optimizer. http://www.gurobi.com. Accessed:

2019-09-30.

[29] J. H˚astad. Some optimal inapproximability results.

Journal of the ACM, 48(4):798–859, 2001.

[30] R. He and J. J. McAuley. VBPR: visual Bayesian

personalized ranking from implicit feedback. In AAAI,
pages 144–150. AAAI, 2016.

[31] X. He, L. Liao, H. Zhang, L. Nie, X. Hu, and T. Chua.

Neural collaborative ﬁltering. In WWW, pages
173–182. ACM, 2017.

[32] L. Homaeian, N. Goyal, J. R. Wallace, and S. D.

Scott. Group vs individual: Impact of TOUCH and
TILT cross-device interactions on mixed-focus
collaboration. In CHI, page 73. ACM, 2018.

[33] How will V-Commerce arrive? consumers show the

way. https://www.lek.com/insights/ei/how-will-v-
commerce-arrive-consumers-show-way. Accessed:
2020-02-03.

[34] L. Hu, J. Cao, G. Xu, L. Cao, Z. Gu, and W. Cao.

Deep modeling of group preferences for group-based
recommendation. In AAAI, pages 1861–1867, 2014.
[35] H.-J. Hung et al. When social inﬂuence meets item

inference. In KDD. ACM, 2016.

[36] IBM CPLEX optimizer.

https://www.ibm.com/analytics/cplex-optimizer.
Accessed: 2019-09-30.
[37] IKEA VR experience.

https://store.steampowered.com/app/447270/
IKEA VR Experience/. Accessed: 2020-02-03.

[38] IrisVR. https://irisvr.com/. Accessed: 2019-09-30.
[39] J. Jankowski, R. Michalski, and P. Br´odka. A

multilayer network dataset of interaction and inﬂuence
spreading in a virtual world. Scientiﬁc Data, 4:170144,
2017.

[40] J. M. Kleinberg and ´E. Tardos. Approximation

algorithms for classiﬁcation problems with pairwise
relationships: metric labeling and Markov random
ﬁelds. Journal of the ACM, 49(5):616–639, 2002.

[41] M. Langberg, Y. Rabani, and C. Swamy.

Approximation algorithms for graph homomorphism
problems. In APPROX-RANDOM, volume 4110,
pages 176–187, 2006.

[42] H. Li, Y. Ge, R. Hong, and H. Zhu. Point-of-interest
recommendations: Learning potential check-ins from
friends. In KDD, pages 975–984. ACM, 2016.

[43] J. Li, X. Wang, K. Deng, X. Yang, T. Sellis, and J. X.
Yu. Most inﬂuential community search over large
social networks. In ICDE, pages 871–882. IEEE, 2017.

[44] K. Li, W. Lu, S. Bhagat, L. V. S. Lakshmanan, and
C. Yu. On social event organization. In KDD, pages
1206–1215. ACM, 2014.

[45] Y. Liao, W. Lam, L. Bing, and X. Shen. Joint

modeling of participant inﬂuence and latent topics for
recommendation in event-based social networks. ACM
Transactions on Information Systems,
36(3):29:1–29:31, 2018.

[46] R. Lissermann, J. Huber, M. Schmitz, J. Steimle, and
M. M¨uhlh¨auser. Permulin: mixed-focus collaboration
on multi-view tabletops. In CHI, pages 3191–3200.
ACM, 2014.

[47] Lowes Innovation Labs: The next-generation Lowes

holoroom. https://youtu.be/DVsEb9vla-I. Accessed:
2020-02-03.

[48] B. Lu, W. Fan, and M. Zhou. Social presence, trust,

and social commerce purchase intention: An empirical
research. Computers in Human Behavior, 56:225–237,
2016.

[49] Z. Lu, Z. Dou, J. Lian, X. Xie, and Q. Yang.

Content-based collaborative ﬁltering for news topic
recommendation. In AAAI, pages 217–223, 2015.
[50] X. Luo. How does shopping with others inﬂuence
impulsive purchasing? Journal of Consumer
Psychology, 15(4):288–294, 2005.

[51] Macys ramps up tech push with virtual reality and

personalized online shopping.
https://fortune.com/2018/03/19/macys-tech-2/.
Accessed: 2020-02-03.

[52] R. Manokaran, J. Naor, P. Raghavendra, and
R. Schwartz. SDP gaps and UGC hardness for

30

multiway cut, 0-extension, and metric labeling. In
STOC, pages 11–20. ACM, 2008.

deployment. ACM TKDD, 10(4):47:1–47:36, 2016.

[71] Shopify. https://www.shopify.com/. Accessed:

[53] P. Manurangsi. Almost-polynomial ratio eth-hardness
of approximating densest k-subgraph. In STOC, pages
954–961. ACM, 2017.

[54] Meetup. https://www.meetup.com/. Accessed:

2020-02-03.

[55] A. Nazi, Z. Zhou, S. Thirumuruganathan, N. Zhang,
and G. Das. Walk, not wait: Faster sampling over
online social networks. PVLDB, 8(6):678–689, 2015.
[56] New Walker Sands study: Drones and virtual reality
as a solution for the modern retail experience.
https://www.walkersands.com/new-walker-sands-
study-drones-and-virtual-reality-as-a-
solution-for-the-modern-retail-experience/.
Accessed: 2020-02-03.

[57] Qbit. https://www.qbittech.com/index.php.

Accessed: 2020-02-03.

[58] S. Qi, N. Mamoulis, E. Pitoura, and P. Tsaparas.

Recommending packages to groups. In ICDM, pages
449–458. IEEE, 2016.

[59] S. S. Rangapuram, T. B¨uhler, and M. Hein. Towards
realistic team formation in social networks based on
densest subgraphs. In WWW, pages 1077–1088. ACM,
2013.

[60] Rec Room. https://recroom.com/rec-room.

Accessed: 2020-02-03.

[61] S. Rendle, C. Freudenthaler, Z. Gantner, and

L. Schmidt-Thieme. BPR: Bayesian personalized
ranking from implicit feedback. In UAI, pages
452–461, 2009.

[62] S. B. Roy, L. V. S. Lakshmanan, and R. Liu. From
group recommendations to group formation. In
SIGMOD, pages 1603–1616. ACM, 2015.

[63] L. Q. S´anchez, J. A. Recio-Garc´ıa, B. D´ıaz-Agudo, and
G. Jim´enez-D´ıaz. Social factors in group recommender
systems. ACM Transactions on Intelligent Systems
and Technology, 4(1):8:1–8:30, 2013.

[64] D. Serbos, S. Qi, N. Mamoulis, E. Pitoura, and
P. Tsaparas. Fairness in package-to-group
recommendations. In WWW, pages 371–379. ACM,
2017.

[65] A. Sharma and J. Vondr´ak. Multiway cut, pairwise

realizable distributions, and descending thresholds. In
STOC, pages 724–733. ACM, 2014.

[66] J. She, Y. Tong, and L. Chen. Utility-aware social
event-participant planning. In SIGMOD, pages
1629–1643. ACM, 2015.

[67] J. She, Y. Tong, L. Chen, and C. C. Cao.

Conﬂict-aware event-participant arrangement and its
variant for online setting. TKDE, 28(9):2281–2295,
2016.

[68] C. Shen, C. P. K. Fotsing, D. Yang, Y. Chen, and
W. Lee. On organizing online soirees with live
multi-streaming. In AAAI, pages 151–159, 2018.
[69] C. Shen, D. Yang, L. Huang, W. Lee, and M. Chen.

Socio-spatial group queries for impromptu activity
planning. IEEE Transactions on Knowledge and Data
Engineering, 28(1):196–210, 2016.

[70] C. Shen, D. Yang, W. Lee, and M. Chen.

Spatial-proximity optimization for rapid task group

2020-02-03.

[72] H. Shuai, Y. Li, C. Feng, and W. Peng.

Four-dimensional shopping mall: Sequential group
willingness optimization under VR environments. In
WWW, pages 131–134. ACM, 2018.

[73] H. Shuai, D. Yang, P. S. Yu, and M. Chen.

Willingness optimization for social group activity.
PVLDB, 7(4):253–264, 2013.

[74] V. Sigurdsson et al. Brand placement and consumer

choice: an in-store experiment. Journal of Applied
Behavior Analysis, 2009.

[75] The world’s ﬁrst virtual reality department store -

brought to you by eBay and Myer.
https://youtu.be/yAuiXhJPnr8. Accessed:
2019-09-30.

[76] W. M. Trochim and J. P. Donnelly. Research methods
knowledge base, volume 2. Atomic Dog Publishing
Cincinnati, OH, 2001.

[77] VentureBeat: Amazon virtual reality VR mall kiosks -

the future of retail. https://youtu.be/J5NviNVdOsc.
Accessed: 2019-09-30.
[78] Virtual reality store IKEA.

https://youtu.be/5 znFPj5Lis. Accessed:
2019-09-30.

[79] Virtual reality: Tourism ﬁrms use VR to attract
visitors. https://bbc.in/2MExzZx. Accessed:
2019-09-30.

[80] VRChat. https://vrchat.net/. Accessed: 2019-09-30.
[81] VRChat guides. https://vrchat.com/guides.

Accessed: 2020-02-03.

[82] X. Wang, W. Zhu, C. Chen, and M. Ester. Joint user-

and event- driven stable social event organization. In
WWW, pages 1513–1522. ACM, 2018.

[83] D. P. Williamson and D. B. Shmoys. The Design of

Approximation Algorithms. Cambridge University
Press, 2011.

[84] Worldwide augmented and virtual reality spending

guide.
https://www.idc.com/getdoc.jsp?containerId=
prUS45679219. Accessed: 2020-02-03.

[85] Y. Xu, R. Goebel, and G. Lin. Submodular and

supermodular multi-labeling, and vertex happiness.
CoRR, abs/1606.03185, 2016.

[86] Yelp dataset. https://www.yelp.com/dataset.

Accessed: 2019-09-30.

[87] M. Y.-C. Yim, S.-C. Yoo, P. L. Sauer, and J. H. Seo.

Hedonic shopping motivation and co-shopper inﬂuence
on utilitarian grocery shopping in superstores. Journal
of the Academy of Marketing Science, 42(5):528–544,
2014.

[88] P. Zhang and A. Li. Algorithmic aspects of homophyly

of networks. Theoretical Computuer Science,
593:117–131, 2015.

[89] P. Zhang, Y. Xu, T. Jiang, A. Li, G. Lin, and

E. Miyano. Improved approximation algorithms for
the maximum happy vertices and edges problems.
Algorithmica, 80(5):1412–1438, 2018.

[90] X. Zhang, S. Li, and R. R. Burke. Modeling the eﬀects
of dynamic group inﬂuence on shopper zone choice,

31

purchase conversion, and spending. Journal of the
Academy of Marketing Science, 46(6):1089–1107, 2018.

[91] X. Zhang, S. Li, R. R. Burke, and A. Leykin. An

examination of social inﬂuence on shopper behavior
using video tracking data. Journal of Marketing,
78(5):24–41, 2014.

[92] L. Zhao, H. Nagamochi, and T. Ibaraki. Greedy
splitting algorithms for approximating multiway
partition problems. Mathematical Programming,
102(1):167–183, 2005.

[93] T. Zhao, J. J. McAuley, and I. King. Leveraging social
connections to improve personalized ranking for
collaborative ﬁltering. In CIKM, pages 261–270.
ACM, 2014.

[94] W. X. Zhao, Y. Guo, Y. He, H. Jiang, Y. Wu, and

X. Li. We know what you want to buy: a
demographic-based system for product
recommendation on microblogs. In KDD, pages
1935–1944. ACM, 2014.

[95] W. X. Zhao, S. Li, Y. He, E. Y. Chang, J. Wen, and
X. Li. Connecting social media to E-Commerce:
Cold-start product recommendation using
microblogging information. IEEE TKDE,
28(5):1147–1159, 2016.

[96] J. Zhu, J. Zhu, S. Ghosh, W. Wu, and J. Yuan. Social

inﬂuence maximization in hypergraph in social
networks. IEEE Transactions on Network Science and
Engineering, 6(4):801–811, 2019.

32

