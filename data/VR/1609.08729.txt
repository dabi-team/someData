Adaptive 360 VR Video Streaming:
Divide and Conquer!

Mohammad Hosseini*†, Viswanathan Swaminathan†

*University of Illinois at Urbana-Champaign (UIUC)

†Adobe Research, San Jose, USA

Email: shossen2@illinois.edu, vishy@adobe.com

7
1
0
2

v
o
N
7
1

]

M
M

.
s
c
[

5
v
9
2
7
8
0
.
9
0
6
1
:
v
i
X
r
a

Abstract—While traditional multimedia applications such as
games and videos are still popular, there has been a signiﬁcant
interest in the recent years towards new 3D media such as 3D
immersion and Virtual Reality (VR) applications, especially 360
VR videos. 360 VR video is an immersive spherical video where
the user can look around during playback. Unfortunately, 360
VR videos are extremely bandwidth intensive, and therefore are
difﬁcult to stream at acceptable quality levels.

In this paper, we propose an adaptive bandwidth-efﬁcient 360
VR video streaming system using a divide and conquer approach.
We propose a dynamic view-aware adaptation technique to tackle
the huge bandwidth demands of 360 VR video streaming. We
spatially divide the videos into multiple tiles while encoding
and packaging, use MPEG-DASH SRD to describe the spatial
relationship of tiles in the 360-degree space, and prioritize the
tiles in the Field of View (FoV). In order to describe such tiled
representations, we extend MPEG-DASH SRD to the 3D space of
360 VR videos. We spatially partition the underlying 3D mesh,
and construct an efﬁcient 3D geometry mesh called hexaface
sphere to optimally represent a tiled 360 VR video in the 3D
space. Our initial evaluation results report up to 72% bandwidth
savings on 360 VR video streaming with minor negative quality
impacts compared to the baseline scenario when no adaptations
is applied.

I. INTRODUCTION

Advances in computing hardware and networking technolo-
gies with support of high bandwidth have enabled the use of
new 3D media such as 3D immersion and 360-degree VR
video applications in the recent years. 360 VR videos are
immersive spherical videos, mapped into a 3D geometry as
shown in Figure 1, where the user can look around during
playback using a VR head-mounted display (HMD). This gives
viewer a sense of depth in every direction.

Despite the promising nature of 360 VR videos, existing 360
VR video applications are still restricted to lower resolutions
compared to their 2D counterparts. Unfortunately, a major
challenge is how to efﬁciently transmit the bulky 360 VR video
streams to bandwidth-constrained devices such as wireless VR
HMDs given their high bitrate requirements. Especially with
the 4K video resolution being widely viewed as a functional
minimum resolution for current HMDs, and 8K or higher
being desired,
these new media are extremely bandwidth
intensive and difﬁcult to stream at acceptable quality levels.
Thus there must be a balance between the requirements of
streaming and the available resources on the display devices.
One of the challenges to achieving this balance is that we need
to meet this requirement without much negative impact on the
user’s viewing experience. While our work is motivated by the
360 VR video applications with 8K and 12K resolutions and
the data rate issues that such rich multimedia system have,
a semantic link between FoV, spatial partitioning, and stream
prioritization has not been fully developed yet for the purpose

of bandwidth management and high performance 360 VR
video streaming. Hence, we propose to utilize this semantic
link in our dynamic adaptations.

Fig. 1: Visual
structure of a 360
VR video

In this paper, we propose FoV-aware
streaming adaptations for efﬁcient deliv-
ery of high-resolution 360 VR videos
to bandwidth-limited HMDs. We spa-
tially divide the videos into multiple
tiles while encoding and packaging, use
MPEG-DASH SRD to describe the spa-
tial relationship of tiles in the 360-
degree space, and prioritize the tiles in
the viewport. We then extend our tiling
process to the 360-degree VR environ-
ment to conquer the intense bandwidth
requirements using viewport adaptation techniques. To achieve
that, we spatially partition the underlying 3D mesh, and
construct an efﬁcient 3D geometry mesh called hexaface
sphere to optimally represent a tiled 360 VR video in the
3D space. On the other hand, due to the absence of a
ﬁne-grained prioritized mechanism, most 360 VR streaming
systems today handle all the portions of the spherical view
as equally important, resulting in sub-optimal resource usage.
Our approach is to deliver higher bitrate content to regions
where the user is currently looking and is most likely to
look, and delivering lower quality level to the area outside of
user’s immediate viewport. Our initial evaluation results using
a real-platform wireless HMD and multiple 360 VR video
benchmarks show that our adaptations signiﬁcantly reduces
the amount of bandwidth required to deliver a high quality
immersive experience, and increases the overall 360 VR video
quality at a given bandwidth.

II. BACKGROUND AND RELATED WORK

In this section we brieﬂy present different concepts and
categories of state-of-the-art related to our proposed approach.

A. Dynamic Adaptive Streaming

One of

the main approaches

for bandwidth saving
on bandwidth-intensive multimedia applications is adaptive
streaming. Dynamic Adaptive Streaming over HTTP (DASH)
speciﬁcally, also known as MPEG-DASH [1], [2] is an ISO
standard that enables adaptive bitrate streaming whereby a
client chooses the video segment with the appropriate quality
(bit rate, resolution, etc.) based on the constrained resources
such as bandwidth available at the client.

As a part of ISO/IEC 23009-1:2015, a new ammendment
called Spatial Relationship Description (SRD) has been added
to MPEG-DASH standard, which allows to deﬁne spatial

 
 
 
 
 
 
given time. Therefore, a user’s FoV is also only a small portion
equivalent to a speciﬁc conﬁned region on the 3D object
mesh which is spatially related to the corresponding portion
of the raw content. For example, the Samsung Gear VR HMD
offers a 96-degree FoV, meaning it can only almost cover
a quarter of a whole 360-degree-wide content horizontally.
Figure 2 illustrates this concept. The left subﬁgure shows an
example 90-degree viewport as projected on a spherical 3D
geometry, while the right subﬁgure shows how the mapping
of the viewport corresponds to that of a given frame on a raw
360-degree video.

One of the major challenges in streaming 360-degree VR
videos is the high bandwidth demands. To decrease the band-
width requirements, our approach is to assign higher quality
to parts within a user’s viewport, and use lower quality to
parts which are not within the immediate viewport of the
user. This approach also makes it possible to stream tiles
inside the viewport at highest resolution, at or near the native
resolution of the HMD, virtually enabling a total resolution
of 8K and higher in the 360-degree VR environment. To
achieve that, our approach consists of two parts. First, the raw
360-degree video is spatially partitioned into multiple tiles.
Using the features of MPEG-DASH SRD, a reference space is
deﬁned for each tile, corresponding to the rectangular region
encompassing the entire raw 360-degree video. Second, we
partition the underlying 3D geometry into multiple segments,
each representing a subset of the original 3D mesh with a
unique identiﬁer. Finally, a mapping mechanism is deﬁned for
spatial positioning of the tiles on the 3D space, so that each
tile be textured on its corresponding 3D mesh segment.

A. 3D Geometry Construction: Hexaface Sphere

Most of the cameras available
nowadays output 360 panoramic
videos using a equirectangular
format. While these videos are
mapped into a ﬂat projection
for storage, they are inherently
spherical. To achieve a spherical
view as a common practice, a 3D
sphere mesh is created surround-
ing the virtual camera inside the
main virtual scene. Every indi-
vidual photo-sphere, an image
of a equirectangular 360 video
frame, is wrapped on the internal
surface of the sphere. The stereoscopic depth of 360 VR video
requires two photo-spheres be stored and shown side-by-side
representing the small disparity of left eye and right eye. The
sphere is setup in such a way that it contains vertex locations
and texture coordinates to achieve equirectangular mapping.
The front faces of each of the rendered sphere polygons is
culled to enable their internal surface showing as opposed to
external showing. As a part of our geometry construction, we
programmatically create a 3D sphere mesh in code to be able
to control and further modify the geometry, and set the normal
vectors of all of the mesh segments to point inside, towards
the center of the sphere, achieving internal showing.

Fig. 3: A 3D sphere mesh.
The highlighted area
represents a slice.

In order to create a 3D sphere mesh, we create an array
of vertices by procedurally generating triangles for rendering.
We approximate the sphere and provide a quality parameter

Fig. 2: An example visual view of how a 90-degree spherical
viewport is mapped on a raw 360 video (Star Wars)

relationships between spatially partitioned multimedia con-
tent [3]. The SRD feature explores how to combine sev-
eral spatially-related videos in a tiled combination, while at
the same time provides backward compatibility with regular
deﬁnition of adaptation sets. It provides a unique approach
to tiled streaming in the perspective of the facilitated ultra
high-resolution video display, speciﬁcally in the context of
immersive environments such as those seen in 360 VR videos.
There have been some work exploring the features of MPEG-
DASH SRD. Le Feuvre et al. in their work [4] explored spatial
access of 2D video contents within the context of MPEG-
DASH, and discussed how the tiling feature of SRD extension
can enable that. In another work [5], D’Acunto et al. explored
the use of MPEG-DASH SRD to partition a video into sub-
parts to provide a zooming feature inside 2D video contents.
In this work, we extend the semantics of MPEG-DASH SRD
towards the context of 360 VR videos, and use that to partition
the bulky 360 VR videos into spatially related tiles in the
3D space for the purpose of view-aware adaptation. Our aim
is to explore prioritization of the tiles by assigning highest
resolution only to those tiles that are relevant to the user’s
FoV and lower resolution to tiles outside of the user’s FoV.

B. Prioritized Multimedia Streaming

Generally, different parts of multimedia can have different
importance given various settings such as view, region, or
the context. Hosseini et al. [6], [7] adopted prioritization
techniques towards efﬁciently transmitting, rendering, and
displaying bulky 3D contents to resource-limited devices given
the importance of various 3D objects in the context. Similarly,
in the context of 3D tele-immersive systems, the authors in [8]
studied stream prioritization in regards to bandwidth savings.
Their approach assigns higher quality to parts within users’
viewport given the features of the human visual system.

In this paper, we build upon the concepts from these works
to implement an adaptive prioritized view-aware streaming
approach to reduce the bandwidth requirements of 360 VR
video streaming.

III. METHODOLOGY

Similar to the context of 3D graphics, the visual experience
of 360 VR videos is also based upon texturing. Textures are
used to provide surface wrapping for a 3D object mesh, with
3D textures being a logical extension of the traditional 2D
textures. 360 VR videos are created by mapping a raw 360
video as a 3D texture onto a 3D geometry mesh, often a sphere,
with the user at the center of that geometry as shown in Figure
1. In this 360-degree environment however, a user is viewing
only a small portion of the whole raw 360-degree video at any

Algorithm 1 Our process to generate a 3D sphere mesh

M : the number of stacks
N : the number of slices
∀m : 0 ≤ m ≤ M and ∀n : 0 ≤ n ≤ N − 1, calculate
and store a spatial point P (x, y, z) such that:
Px ← Sin(π × m/M ) · Cos(2π × n/N )
Py ← Sin(π × m/M ) · Sin(2π × n/N )
Pz ← Cos(π × m/M )
Draw the line segments between the each vertex.

Fig. 4: Visual overview of a generated hexaface sphere.

to account for the trade-off between more smoothness and
more triangles to render (representing highest quality) and
rendering speed (lower spherical smoothness and chunkier
shape). Figure 3 illustrates a visual view of the structure of a
3D sphere mesh. Our quality parameter is a combination of
two major parameters which together control the smoothness
of the sphere: a) number of slices, which represent the number
of vertical cuts. Let’s assume each slice collides with a sphere’s
perimeter at a vertical degree θ which −π/2 ≤ θ ≤ π/2; and
b) number of stacks, which is the number of horizontal cuts
determining the number of rows of rectangles. Let’s assume
each stack collides with a sphere’s perimeter at a horizontal
degree φ which −π/2 ≤ φ ≤ π/2. Algorithm 1 presents
pseudo-code of our process to create 3D spherical mesh.

Next, in order to generate 3D mesh segments, we partition
the 3D sphere into multiple different 3D meshes, in a two-step
process. In the ﬁrst step, we split the sphere into 3 major parts:
• The top cap, which includes meshes from the top point
of the sphere (i.e. top pole where θ = +π/2 o) to the top
stack of the middle body (θ = +βo), totaling (π/2−β) o,
• The middle body which is a ring of triangles stretching
from the bottom stack of the top cap (θ = +βo) to the
top stack of the bottom cap (θ = −βo), totaling 2βo,
• The bottom cap, which includes triangles ranging from
the bottom stack of the middle body (θ = −βo) to the
bottom point of the sphere (i.e. bottom pole where θ =
−π/2 o), for π/2 − β degrees.

360-degree videos formatted in equirectangular projection
can contain redundant information at the top and bottom ends,
but not the middle body. So in the second step, we further split
the middle body into multiple 3D meshes, each covering αo of
the entire 360-degree wide screen. The number of second-step
partitions, and therefore αo, can be a function of the horizontal
FoV of the VR HMD platform. We split the middle body into
four segments with αo = π/2, so that each segment has a 90-
degree cover, and similarly set 2β = π/2 following the default
settings for the vertical FoV. Overall, with this procedure, our
projection will result into a combination of six 3D meshes of

a 3D sphere. We call our customized 3D geometry a hexaface
sphere 3D mesh. Figure 4 illustrates a visual overview of our
process to generate a hexaface sphere. It should be noted that
our assignment of α = π/2 and β = π/4 is not a hard
requirement, and is derived from the default settings of our
VR HMD device as well as the result of our performance
and quality trade-offs. Our approach is general, and depending
on the performance of underlying hardware can be extended
towards higher number of tiles and 3D meshes. Similarly, our
tiling process is general, and therefore can also be employed
in other geometrical projections such as cube maps.

B. Viewport Tracking

VR device orientation is usually deﬁned using three types of
rotation over the X, Y , and Z axes. The values are inherently
represented in the Tait-Bryan anglular system, which uses a
special form of Euler angles that require 3 rotations around
each of the 3 axes. To avoid possible orientation tracking
problems such as gimbal lock, the angular Euler system is
transformed into a different rotational system known as a
quaternion, which is converted into a unit rotation matrix. To
enable view awareness, we use the following three steps to
create valid conﬁnes of unit quaternions speciﬁcally set for
each of the hexaface sphere 3D mesh segments:

• convert Euler angles to a unit quaternion representation

for VR device orientation tracking,

• calculate an array corresponding to a normalized direction

vector from our quaternion,

• combine the values together to compute the conﬁnes
of segment-speciﬁc quaternion representations inside the
hexaface sphere.

With the conﬁnes of each 3D mesh segment being deﬁned,
we then identify which segments and the corresponding video
tiles intersect with a user’s viewport and implement our
tracking,
tracking at every frame. With viewport
viewport
we then implement view-aware adaptation, and dynamically
deliver higher bitrate content to the tiles within the user’s FoV,
and assign lower quality level to the area outside the user’s
immediate viewport.

IV. EVALUATION

To evaluate our work, we used Samsung Gear VR HMD
mounted with the Samsung Galaxy S7 smartphone with 4GB
RAM and Android Marshmallow 6.0.1 as our target VR
platform. We used Oculus Mobile SDK 1.0.3 along with
Android SDK API 24 for development of a 360 VR video
streaming application prototype based on MPEG-DASH SRD.
Our VR platform provides a total resolution of 2560x1440
(1280x1440 per eye), with maximum frame rate of 60 FPS
and a horizontal FoV of 96 degrees. As stated before, we set
the vertical FoV of our 360 VR video prototype to 90 degrees.
We prepared 5 different 360 equirectangular-formatted sample
videos publicly available on Youtube as test sequences for
the purpose of applying our adaptations. Table ?? provides
detailed information about our test video sequences.

To beneﬁt from the features of MPEG-DASH SRD-based
streaming and for the purpose of texturing the hexaface sphere
mesh, we developed an executable script based on FFmpeg
Zeranoe 64-bit API that given a video input, spatially crops
the video and generates 6 different tiles as per requirements of

TABLE I

360 Video
Waldo
Plane
Karate
Star Wars
Racing Car

Resolution
3840x1920
3840x1920
1920x960
3840x2160
4096x2048

Orig. Bitrate (Mbps)
20.0
13.1
4.4
13.0
12.6

FPS (Hz)
30
30
30
24
24

Fig. 7: Visual comparison of a speciﬁc frame within Waldo with the
peripheral tiles having REP4 (resolution of 240x480)

V. CONCLUSION AND FUTURE WORK
In this paper, we proposed bandwidth-efﬁcient FoV-aware
streaming adaptations to tackle the high bandwidth demands
of 360 VR videos. Our novel adaptations exploits the semantic
link of MPEG-DASH SRD with a user’s viewport to provide
dynamic view awareness in the context of VR videos. We
divide the bulky 360 VR videos as well as the underlying 3D
geometry into spatially partitioned segments in the 3D space,
and then conquer the huge streaming bandwidth requirements
using a dynamic viewport adaptation. Our initial experimental
results shows our adaptations can save up to 72% of bandwidth
on 360 VR video streaming without much noticeable quality
impacts.

Appendix I includes our adaptive rate allocation algorithm

for tiled streaming given the available bandwidth.

In the future, we also plan to extend the hexaface sphere
towards higher number of 3D segments and measure the
bandwidth saving-performance trade-offs.

REFERENCES

[1] “MPEG DASH, Information technology – Dynamic adaptive streaming
over HTTP (DASH) – Part 1: Media presentation description and segment
formats,” ISO-IEC 23009-1, 2014-05-12.

[2] T. Stockhammer, “Dynamic adaptive streaming over HTTP: standards
and design principles,” in Proc. of 2011 ACM Multimedia Systems, ser.
MMSys ’11, 2011.

[3] O. A. Niamut, E. Thomas, L. D’Acunto, C. Concolato, F. Denoual, and
S. Y. Lim, “MPEG DASH SRD: Spatial Relationship Description,” in
Proceedings of the 7th International Conference on Multimedia Systems,
ser. MMSys ’16. New York, NY, USA: ACM, 2016, pp. 5:1–5:8.
[4] J. Le Feuvre and C. Concolato, “Tiled-based adaptive streaming using
mpeg-dash,” in Proceedings of
the 7th International Conference on
Multimedia Systems, ser. MMSys ’16. New York, NY, USA: ACM,
2016, pp. 41:1–41:3.

[5] L. D’Acunto, J. van den Berg, E. Thomas, and O. Niamut, “Using mpeg
dash srd for zoomable and navigable video,” in Proceedings of the 7th
International Conference on Multimedia Systems, ser. MMSys ’16. New
York, NY, USA: ACM, 2016, pp. 34:1–34:4.

[6] M. Hosseini, J. Peters, and S. Shirmohammadi, “Energy-budget-compliant
adaptive 3D texture streaming in mobile games,” in Proceedings of the
4th ACM Multimedia Systems Conference. ACM, 2013, pp. 1–11.
[7] M. Hosseini, A. Fedorova, J. Peters, and S. Shirmohammadi, “Energy-
aware adaptations in mobile 3D graphics,” in Proceedings of the 20th
ACM international conference on Multimedia. ACM, 2012, pp. 1017–
1020.

[8] M. Hosseini, G. Kurillo, S. R. Etesami, and J. Yu, “Towards coordinated
bandwidth adaptations for hundred-scale 3d tele-immersive systems,”
Multimedia Systems, pp. 1–14, 2016.

Fig. 6: A comparison of bandwidth savings of streaming different
360 VR videos, using our adaptations, and tiled-streaming with no
adaptation.

our hexaface sphere geometry. We encoded all video segments
with H.264 AVC encoder into 4 different representations using
a hierarchical resolution degrading, with original resolutions
decreasing polynomially at every step, as depicted in Figure
5.

Fig. 5: Our hierarchical
resolution degrading for
various representations.

We applied various sets of reso-
lutions to different tiles to exper-
iment how our prioritized adap-
tations affects the average bitrate
as well as the perceived quality.
Each trial of our experiment was
run for a total of 30 seconds,
and during each run we setup the
experiment
in such a way that
each tile is within user’s viewport
for 5 seconds. We measured the
bandwidth usage in terms of av-
erage bitrate, when maximum res-
olution is assigned for tiles within
immediate FoV, and lower resolu-
tions assigned to the other tiles. Figure 6 demonstrates results
for only a small subset of our experiments on all of our bench-
marks, with ratios normalized to ﬁt within a unit. We measured
the relative bandwidth usage when using our adaptations
compared to the baseline case where no adaptation is applied
(the 360 VR video is tiled; no viewport awareness is present,
and all tiles are streamed with highest representation (REP1).
As can be seen, the results show that our adaptations can
signiﬁcantly save bandwidth usage for up to 72% compared to
baseline case where our adaptation approach is not employed.
Figure 7 shows a sample screenshot of the experiments on
Waldo. While the highest representation possible (REP1- res-
olution of 960x1920) is delivered to the main front tile, lowest
representation is delivered to the peripheral tile on the right
identiﬁed by the red conﬁnes (REP4- resolution of 240x480)
Our adaptations results in minor noticeable quality impacts,
sometimes not even perceptible, while maintaining the original
quality for the main viewport to ensure a satisfactory user
experience.

0.2770.2780.3260.3010.4530.7410.6290.7200.7440.75611111WALDOPLANESTAR WARSRACING CARKARATERELATIVE  RATIOBANDWIDTH USAGEProposed (Rep4)Proposed (Rep2)Tiled (Rep1)VI. APPENDIX I: RATE ALLOCATION PROBLEM

Our proposed view-aware tile-based 360 VR video stream-
ing system is “adaptive” in the sense that it priorities the tiles.
It delivers higher bitrate content to the tiles where the user is
currently looking at and is most likely to look at, and lower
quality level to the tiles outside of a user’s immediate viewport.
For that purpose, we hereby explain the rate allocation problem
within the context of tiled 360 VR video streaming, and
propose a rate allocation heuristic algorithm to enable the
adaptations within our tile-based 360 VR video streaming
system. This appendix aims to mathematically model, and
propose a rate allocation heuristic algorithm within the context
of tile-based 360 VR video streaming to VR devices.

The rate selection and allocation problem is the well-
known binary Knapsack optimization problem, for which one
approach to tackle is to transmit a subset of the whole tiles
within the 360-degree VR environment. The binary Knapsack
problem is NP-hard, but efﬁcient approximation algorithms
can be utilized (fully polynomial approximation schemes), so
this approach is computationally feasible. However, using this
method only a subset of the whole tiles are selected, which
is not desired since the VR user intends to receive all the
necessary tiles to avoid black views when the user turns head
and changes orientation in the 360-degree space. Our proposed
algorithms selects all necessary tiles, but with different bitrates
according to their priorities given the user’s viewport. This is a
multiple-choice knapsack problem (MCKP) in which the items
(tiles in our context) are organized into groups corresponding
to the objects. Each group contains the highest bitrate stream
corresponding to an object and lower-bitrate versions of the
same stream given the adaptation manifest.

There are n tiles T = {τ1, τ2, . . . , τn} in the 360-degree
VR environment. The highest possible representation of each
τh ∈ T has a bitrate requirement of sτh , and a priority or
importance coefﬁcient pτh given the various priority classes
per our deﬁnition. With view awareness feature of our tiling
process, our algorithm assigns highest priority to the tiles
within the user’s immediate viewport (C1), and lowest priority
(C3) to the tiles in the area outside the user’s viewport in the
360-degree space. Figure 8 illustrates how our prioritization
approach is applied against tiles in the context of tiled 360
degree VR videos. Our approach is general, and can work
with any number of priority classes. We use three classes in
this pilot study. We assume the quality contribution of a tile τh
is a simple function qτh = pτh × sτh . The available bandwidth
in every interval limits the total bitrate of all tiles that can
be received at the headset device to W , which serves as an
available budget.

Let X = {x1, x2, . . . , xn}, be the set of tiles that are
received at the headset device, serving as the output of running
rate allocation algorithm. Each xi ∈ X corresponds to an
original tile τi ∈ T . Similarly, each xi has a priority coefﬁcient
pxi = pτi.

We assume there are L number of representations avialable
given the manifest, with a representation of level k noted as
Rk (0 ≤ k ≤ L) and the bitrate of a tile τi with representation
Rk noted as sRk
τi . We assume the lowest bitrate corresponds
to the representation with highest ID which is RL which is
determined as the minimum bitrate that can be tolerated by

Fig. 8: An example tile prioritization. Tiles within viewport are
assigned highest priority (C1), while tiles outside of viewport are
assigned lowest priority (C3)

users. In a similar way, the quality contribution of a tile xi is
qxi = pxi × sxi.

A. Heuristic Algorithm

Let S be the total bitrate of all streams, and W be the
available bandwidth budget. The minimum quality that the user
can tolerate is given as the representation of level L noted as
RL. Let C1, C2, and C3 be the class of tiles with the highest
priority, medium priority, and lowest priority, respectively.

For each tile τi in T , we calculate qi as described previously.
This is the contribution that τi would make to the average
quality of the system if it were received at highest bitrate
possible. We then calculate Wmin = (cid:80) sRL
τi which is the
minimum bitrate that is needed to receive all tiles at their
lowest bitrates. In the following, assume that Wmin ≤ W so
the unused bitrate budget would be W0 = W − Wmin.

− sRL
τ1

To determine the best bitrate for each tile, our algorithm
sorts the prioritized list of tiles by the global priority from the
largest to the smallest. For ease of notation in the following,
suppose that the tiles are re-indexed so that the sorted list of
tiles is τ1, τ2, . . . , τn. If sτ1 − sRL
≤ W0 then there is enough
τ1
unused budget to receive τ1 at highest bitrate (R0), so the
tile x1 would have sx1 = sτ1 and would contribute q1 to the
average quality. This leaves an unused bandwidth budget of
W1 = W0 − sR0
for the remaining tiles after x1. The
τ1
algorithm repeats for τ2, τ3, . . . until some tiles τ(cid:96) cannot be
received at highest bitrate within the remaining budget W(cid:96)−1.
It then determines the highest possible bitrate at which it
can be received by calculating the lowest representation level
: L(cid:48) ≤ L such that sRL(cid:48)
L(cid:48)
τ(cid:96) ≤ W(cid:96)−1 + sRL
τ(cid:96) . The tile x(cid:96)
will have bitrate sx(cid:96) = sRL(cid:48)
(cid:96) to the
τ(cid:96)
average quality of the whole. The remaining bandwidth budget
after streaming x(cid:96) will be W(cid:96) = W(cid:96)−1 − sRL(cid:48)
. The algorithm
τ(cid:96)
repeats this process to determine the proper bitrates, amount
of bandwidth budget, and quality contribution for each of the
remaining tiles x(cid:96)+1, x(cid:96)+2, . . . , xn. Algorithm ?? describes
our heuristic algorithm.

and will contribute q(cid:48)

As a special feature, our algorithm considers cases where
the viewport intersects with multiple tiles in the 360-degree
VR environment. Figure 9 illustrates the concept. As a differ-
entiating tweak in that scenario, our multi-tile rate allocation
heuristic ensures all visible tiles (tiles within a user’s viewport)
get the same bitrate to avoid edging problems due to quality
variation of tiles. For such cases, our algorithm packs all tiles
within the viewport together and deals with them as a single
tile just for the purpose of rate allocation, so that all visible
tiles are assigned the same bitrate. This tweak minimizes
any possible edged views on the tile boundaries, therefore
enabling a smooth viewing experience in the tiled 360 VR

Algorithm 2: Rate allocation heuristic algorithm

T : prioritized list of tiles sorted from highest to lowest priority
τi: tile with highest bitrate sτi
xi: adapted tile with bitrate sxi
L: Number of representation levels
RL: Level L representation
Calculate Wmin = (cid:80) sRL
∀τi ∈ T : sxi ← sRL
W0 ← W − Wmin %comment: initialization
while sτi − sRL
τi
sxi ← sτi
Wi ← Wi−1 − (sτi − sRL
τi
i ← i + 1 %comment: adapt next tile

≤ Wi−1 do %comment: i=1 initially.

)

τi %comment: minimum bitrate requirement for all tiles

τi %comment: assign RL (minimum bitrate) to all τi’s.

end while
%comment: above loop repeats until a tile τ(cid:96) cannot be delivered at highest bitrate within the remaining bandwidth budget
W(cid:96)−1.
(cid:96) ← i %comment: resulting from above loop.
Find lowest L(cid:48) ≤ L such that
sRL(cid:48)
τ(cid:96) ≤ W(cid:96)−1 + sRL
τ(cid:96)
budget, by calculating the lowest representation level L(cid:48).
sx(cid:96) ← sRL(cid:48)

%comment: determines the highest bitrate possible at which τ(cid:96) can be received within remaining

τ(cid:96) %comment: adapt τ(cid:96) and calculate sx(cid:96)

Fig. 9: Multi-tile adaptation within an example 360 video frame.
Multiple tiles within viewport are assigned same priority.

video scenario. Treating all visible tiles as a single tile depends
on the developer preference and is not a hard requirement. It
can be a pack of any of visible tiles given how much of the
visible tiles intersect with the viewport.

The algorithm needs a one-time implementation in the
beginning of the session for the main process. Therefore it is
implemented in real-time and does not provide any additional
overhead during the runtime. It is implemented efﬁciently in
O(nlogn) time and O(n) space and produces solutions close
optimal. The approximation error depends on the difference
between the bitrate chosen for the ﬁrst tile that cannot be
received at highest bitrate (i.e. τ(cid:96)) and the remaining budget
available to receive it.

