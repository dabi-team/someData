1

Deep Learning Development Environment in
Virtual Reality

Kevin C. VanHorn, Meyer Zinn, & Murat Can Cobanoglu

Abstract—Virtual reality (VR) offers immersive visualization and intuitive interaction. We leverage VR to enable any biomedical
professional to deploy a deep learning (DL) model for image classiﬁcation. While DL models can be powerful tools for data analysis,
they are also challenging to understand and develop. To make deep learning more accessible and intuitive, we have built a virtual
reality-based DL development environment. Within our environment, the user can move tangible objects to construct a neural network
only using their hands. Our software automatically translates these conﬁgurations into a trainable model and then reports its resulting
accuracy on a test dataset in real-time. Furthermore, we have enriched the virtual objects with visualizations of the model’s
components such that users can achieve insight about the DL models that they are developing. With this approach, we bridge the gap
between professionals in different ﬁelds of expertise while offering a novel perspective for model analysis and data interaction. We
further suggest that techniques of development and visualization in deep learning can beneﬁt by integrating virtual reality.
Availability: github.com/Cobanoglu-Lab/VR4DL

Index Terms—Virtual reality, Machine learning, Deep learning, Neural nets, Visualization

(cid:70)

1 INTRODUCTION

D EEP learning (DL) has emerged as a broadly useful

ﬁeld of machine learning that is deployed in many do-
mains. In parallel, technological advancements have made
virtual reality (VR) viable in routine applications. VR offers
inherent advantages for visualization, which DL can beneﬁt
from. To leverage the synergy, we developed a VR platform
to build DL models in a more intuitive and immersive
environment.

Deep learning is a subset of machine learning that pro-
cesses data through successive layers between the model
input and output. DL has become increasingly relevant in
natural language processing, image recognition, and other
ﬁelds of artiﬁcial intelligence [1]. Convolutional neural net-
works (ConvNets) are a speciﬁc class of deep neural net-
works designed for sequential data. This data can take on
various multi-dimensional forms, including audio, video,
and visual imagery. In regard to image analysis, ConvNets
have become the dominant approach for nearly all recog-
nition and detection tasks and have produced remarkable
results for segmentation [1]. Applications include the la-
beling of pathology images on a per-pixel basis [2], object
recognition for self-driving cars [3], and segmentation in
medical imaging [4].

Data visualization in deep learning is crucial to model
construction, diagnostics, and a general intuition into how
deep neural networks function. Proper analysis of neural
networks is often clouded by uncertainty due to the large
quantities of intermediate layers. To address this limitation,
interactive techniques have been developed such as the live
observation of layer activations which has been shown to

• Kevin VanHorn, Meyer Zinn, and Murat Can Cobanoglu were with the
Lyda Hill Department of Bioinformatics, University of Texas Southwest-
ern Medical Center, Dallas, Texas, 75390.
E-mail: {kevin.vanhorn, murat.cobanoglu}@utsouthwestern.edu

Manuscript received June 3, 2019

build valuable intuition [5]. Data representations tend to
retain pieces of information that resemble important fea-
tures of the input [6]. Observation of these features can
help validate the integrity of a model and identify edge
cases that may occur. Research has been dedicated to many
such visualization methods. Examples in this ﬁeld include
overlaying heat maps and highlighting features that con-
tribute to the ﬁnal classiﬁcation of an image [7]. Hidden
features of the data can also be extracted; such techniques
have been implemented for a wide range of applications [8],
[9], [10], including Deep Car Watcher, which constructs color
maps from driving data that can be used to infer a drivers
intention [11]. Overall, the visualization of neural networks
can offer critical insights that beneﬁt users at all levels of
experience.

Virtual reality (VR) offers distinct advantages over con-
ventional data visualization approaches. Techniques for
coding, development, and training are much more immer-
sive in VR compared to other relevant mediums. Height-
ened immersion can increase productivity, retention, and (in
our case) ease of understanding. Similarly, VR enables more
intuitive user interfaces that bolster the effect of interactivity.
As a result, we can use VR to perform tasks more easily
and with greater comprehension. We deﬁne the functional
aspect of virtual reality by two core components: immersion
and interactivity [12]. These components have improved in
recent years as hardware becomes less cumbersome. For vi-
suals, we continue to achieve higher performance in quality,
resolution, and frame rate. Developers are also exploring
interaction methods that push a sensory encompassing VR
experience. Methods include spatial audio, haptic interfaces,
motion platforms [13], and olfactory displays [14]. In this
regard, VR will likely be at the forefront of emerging media
and technology in the coming decades.

By its nature, VR minimizes outside distractions. Head-
wear encompasses the user’s eyes to reduce ”information

2

Fig. 1. An overview of our virtual reality environment.

clutter” and other distractions [15]. VR constrains visual
feedback and applies varying levels of interactivity to create
a sense of presence. We deﬁne presence as the feeling that
the user is actually there in the environment [16]. Even
applications that do not resemble reality can attribute to this
phenomenon. By immersion of the senses, we can see ben-
eﬁts in a wide range of ﬁelds. Applications vary in design
from entertainment and education to psychological therapy
[17], [18]. For construction safety training, researchers have
seen VR platforms to be more effective than conventional
methods for maintaining attention and focus [19]. Both of
these beneﬁts are integral to any development environment.

Interactivity in virtual reality acts as a bridge between
the application and user. Methods of interaction in VR
draw many parallels to actions in real life. VR platforms
translate movements from the physical world to the virtual
world with high levels of precision. We can take advantage
of this by designing controls that mimic physical actions.
As an example, a user often navigates the VR camera by
turning his/her head and looking around the environment.
With this approach, the user can attain positional awareness
with ease. We can take advantage of this new paradigm
by extending workﬂows and data representation into the
virtual world. Traditional methods of navigating three di-
mensions on a desktop environment lack functionality. This
type of environment impairs navigation and interactivity
by separating the user from the action taken. Instead, VR
can implement intuitive movements for interaction. An
additional restriction of most environments is the inability
to represent 3D objects in two dimensions. Virtual reality
introduces a method of visualization that mimics day-to-day
life. Altogether, VR offers the potential to improve existing
workﬂows and methodologies for data representation.

2 RELATED WORK

Various methods exist in two and three dimensions to
represent convolutional neural networks. In this domain,
we examine algorithmic visualizations and interactive plat-
forms. Visualizations extract data from a model during or
after training and are crucial to analysis within interactive
platforms. These platforms offer a means with which to
construct and/or visualize neural nets by control of various
parameters. We propose that a virtual reality platform could
complement existing techniques. We also suggest advan-
tages of our VR platform that enable users to construct
ConvNets with ease no matter their skillset.

2.1 Solutions in 2D

The domain of 2D visual representations for ConvNets is
rich with evolving techniques. Each has its own function
and purpose over different degrees of granularity. Work in
algorithmic representations continues to grow and is beneﬁ-
cial to understanding ConvNets. Many of the platforms that
take advantage of these visualizations are limited to a given
dataset.

Algorithmic representations display information rele-
vant to the model for understanding and debugging pur-
poses. A user can identify what the computer sees and
then adjust the model with the gathered insight. Examples
include activation layers, heat maps, ﬁlter visualization,
feature visualization, and saliency [7]. It is worth noting
that researchers need to analyze many of these methods on
simple models before extending to deep neural nets [20].
Our solution introduces an interactive environment that can
apply evolving representations. To clarify, we encourage the
use of a VR platform to better navigate between layers and

display valuable information. We can project this informa-
tion on a 2D surface or present it as a tangible 3D object.

There are many platforms in 2D that offer insight into
how ConvNets function. These frameworks offer a method
of network visualization limited to some representational
extent. Graph visualization is common between many plat-
forms [7]. These node-based systems highlight the relation-
ships between components of a ConvNet. Tools such as Ten-
sorFlow Graph Visualizer [21] and CNNVis [10] for neural
net simpliﬁcation exist for those who develop ConvNets but
are not heavily integrated into workﬂows. We argue that
an interactive experience in VR can streamline productivity
over large volumes of data.

Our product is currently targeted at non-expert users. We
deﬁne a non-expert as a professional whose primary ﬁeld of
expertise is not in machine learning. A non-expert could
also be one with little technical knowledge or one who is
familiar with programming but has not been exposed to ma-
chine learning. Existing tools for this demographic include
Tensorﬂow Playground [22], ConvNetJS [23], and Keras.js
[24]. A majority of techniques targeted at non-experts offer
minimal customization of the data set. The ability to adjust
model parameters is often restricted or nonexistent in such
platforms (with Tensorﬂow Playground as an exception).
Our VR framework allows the user to deﬁne the model
by specifying a sequence of layers. We train the model and
report the accuracy within the application. The ability to
construct models allows for interactive visualization with
real-time results. This style of interaction environment better
fosters insight. We also provide the ability to customize the
dataset and model parameters, a feature lacking in most
2D platforms. We argue that by introducing the beneﬁts of
virtual reality, we can further improve from traditional 2D
techniques.

2.2 Solutions in 3D

Interactive three-dimensional platforms are less common
and borrow from existing 2D visualization methods. The
common visualization strategy is to present a web of ex-
pandable layers in 3D. Here we examine TensorSpace.js
[25] and an interactive node-link visualization by Harley
[26]. TensorSpace.js offers multiple ”playgrounds” for inter-
acting with pre-built networks. Both methods display the
connection of data between levels of the network. When
the user hovers over a pixel, the applications display its
connections and resulting size. ConvNets involve variable
shapes of data matrices between each layer. By visualizing
the effect of each layer type, users can gain valuable insight
into how a model functions. However, these 3D methods are
limited to non-expert users and would need to be further
developed for more advanced use. Both methods analyzed
focus on digit recognition or existing layers. In this regard,
there are heavy customization and interaction constraints in
current 3D platforms. In our solution, we separate training
and visualization through the gRPC, remote procedure call
framework. This allows for complex analysis in real time. As
a result, we can better integrate problems with large datasets
in ﬁelds like pathology with ease.

The ﬁeld of DL visualization platforms is widely un-
derdeveloped in terms of 3D tools and techniques. Our

3

application introduces model development that solves a
customizable classiﬁcation task. With our approach, the user
can build and test a network for any set of images and
gain insight from his/her actions. For a non-expert user,
existing 3D visualization platforms overload the user with
information. These applications can also be difﬁcult and
inconsistent to navigate. If a user is unable to navigate the
environment with ease, the tool has less educational value.
With a virtual reality framework, we can ease this discon-
nect. VR users are ”placed” into the virtual environment,
allowing for unrestricted inspection. With virtual reality,
existing techniques can experience signiﬁcant beneﬁts for
interaction and visualization.

3 BACKGROUND
Convolutional neural networks process data through many
layers of artiﬁcial neurons. This process is similar to that of
the human brain. When such networks take in data, their
neurons have individual responses within each layer. A
single layer (e.g. convolution) can have multiple ﬁlters of
the same type. Layers exist in between the input and output
of the model. Data passes through a network sequentially
until a ﬁnal judgment forms on the input. For the task
of image classiﬁcation, this judgment speciﬁes a label for
the image. ConvNets produce these labels with a level
of uncertainty. We can measure the performance of a DL
model by its accuracy and loss. As a model becomes more
robust, we want to receive predictions with a tighter level of
conﬁdence. In our framework, we implement three types of
layers in the context of the TensorFlow/Keras DL library.We
limit the number of types for easier construction of effective
ConvNets by a non-expert user. These layers are visualized
as rectangular objects (ﬁgure 2) in our application.

Convolutional (conv) layers deﬁne small transforma-
tions applied to every part of the image. Each convolution
element learns to transform a section of the image into
a single value. We ’slide’ these elements across the entire
input. Every conv layer also contains multiple ﬁlters of these
convolution elements.

Max pooling (pool) layers group the signal from a very
small patch of the image into a single value by taking the
largest value. They serve to selectively highlight a dominant
signal from the surrounding noise. In the process, they
reduce the size of the input.

Dense layers connect every part of the information in
their input layer to every part of their output layer. They
enable the user to bridge the gap between the many signals
in the input image and the small number of classes in the
label decision.

4 DESIGN
We have constructed a VR visualization development envi-
ronment for deep convolutional neural network models. In
our platform, users can easily build and visualize compo-
nents of a neural network. We compile models in real-time
on the local computer or over the network. For faster results,
the application can connect to high-performance computing
(HPC) nodes. Our solution offers a shallow learning curve
for the construction and implementation of deep convo-
lutional networks. Using this approach, users of varying

4

Fig. 2. A render of the representational layer objects in the VR applica-
tion. Left to right: dense, max pooling, convolutional.

Fig. 3. An example of ﬁlters visualized from a convolution layer (left) and
the corresponding ReLU activation (right). ReLU activation is applied by
default after each conv dense layer.

levels of technical knowledge can obtain insight into the
neural network. The current platform communicates the
fundamentals of deep learning for classiﬁcation tasks. It
also offers an expandable technique for professional and
educational model development.

4.1 Environment

The virtual reality environment is simplistic with mini-
mal distractions. The user controls virtual hands to grab,
throw, and place objects. The user can additionally point
a laser from his/her index ﬁnger for item selection. We
have designed the environment to function with limited
physical movement. The user only needs a small physical
space to operate the application and can perform actions
while standing or sitting. We minimize possible VR motion
sickness with a calm and sleek environment that maintains
constant points of reference for the user.

Our VR interface surrounds the user with various tools
for building deep learning models. Users can grab layers
from a tool shelf to their left and place them within a
”workspace.” The workspace is a deﬁned region in front
of the user that suspends a sequence of layers. Users can in-
sert, remove, and rearrange layers within its bounds. These
operations allow for simple construction and modiﬁcation
of a functional ConvNet. After the user grabs a layer from
the tool shelf, a new layer of the same type will spawn to ﬁll
its place. By this manner, there can be more than one layer of
a given type within the model. The user deﬁnes the model
from left to right and can train it by pressing or selecting
a button to the right of the workspace. While computing,
a display in front of the user reports the status of training.
Upon completion, the same display reports the accuracy of
the model against a testing set.

As data passes through a ConvNet, layers reduce the
image resolution. In our application, we display the current
shape with a peripheral at the top left of the workspace.
This dimensionality indicator reﬂects the state of the model
with a representational sphere (ﬁgure 4). The shape of the
sphere interpolates between sizes to reﬂect the state of the
model. For example, adding a max pooling layer reduces
the 128x128 pixel image to a shape of 64x64. For simplicity,
we ignore extra dimensions present in the tensor such as
ﬁlter depth and color in this indicator visualization. Before
input passes through a ﬁrst dense layer, we ﬂatten the 2D
image matrix to a 1D array. We display this reduction by
ﬂattening the sphere indicator to a line. Without this tool, the
rearrangement of layers would have no discernable effect on
the model. Since understanding the shape and dimension-

ality of the model is crucial to users as they reﬁne a layer
sequence, this indicator provides valuable information.

When the model is complete, we report accuracy at the
display beneath the workbench. At this point, the appli-
cation updates layers with their intermediate activations.
The image displayed corresponds to the ﬁrst ﬁlter of the
respective layer. As the user adds more layers, the resolution
of the image reduces to reﬂect changes in shape. Dense
layers after the ﬂatten operation are not visualized because
they are not spatially intuitive. We offer a more complete
representation of the layer by projecting a 4x3 matrix of
such activations at the user’s right. This matrix contains
additional ﬁlters for the layer that the user last touched. We
also apply a ReLU activation by default to all convolutional
and max pooling layers. The user can view the effects of this
activation by holding a button on the controller (ﬁgure 3).
The user changes the matrix to their right by hovering on or
picking up a layer. One can glide his/her hand through the
sequence of layers to see a progression of the network. With
this technique, the user can see the ﬂow of data as it passes
through the ConvNet. The user can then use this insight to
modify his/her sequence. For example, the user may see
that data is too large throughout the network. At this point,
he/she would want to insert max pooling layers before any
convolutional layers to trim the data.

Certain models may be excellent at identifying one class
of images but not another. Above the workspace, we display
image classes that the ConvNet is analyzing. The user can
select a class to display activations for on the next build of
the model. This information gives context and customiza-
tion to the classiﬁcation problem. Rather than stating the
task, we display example image patches for the user to
observe. When the user selects a class of image, we can
visualize activations speciﬁc to that class. In this manner,
the user can analyze the different effects of the ConvNet on
each class. We provide this customization to aid users in
the reﬁnement of their models. If many of the intermediate
activations are blank, the model may not be effective. In
this case, the user can reorder layers to better identify key
features of the input image. The ReLU activations can also
be insightful to the user. These activations pull out different
features depending on the range of intensities in an image
class. This may motivate the user to reduce or increase the
number of convolutional layers, for example.

4.2 User Experience

As discussed in section 1, interactivity is a distinct advan-
tage of a virtual reality environment. We have designed the

5

Fig. 4. Traditional representation of a neural network (top), our method of building a model (middle), and our dimensionality indicator within the VR
environment to help build intuition as a model is built (bottom).

experience to ease the user into building a DL model. Our
primary goal in design was to keep the environment simple
and intuitive.

The core aspect of the application is building the Con-
vNet. For this functionality, users can grab objects and
release them into the workspace. If any arrangement needs
to occur, users can again pick up layers and move them to
a new location. We keep this functionality simple to ensure
that users can interact with the application in a familiar way.
An element of familiarity is especially important for users
new to virtual reality. The environment will be unfamiliar
to all new users, so we design interactions to minimize the
learning curve. To discard a layer, the user picks it up and
then throws it in any direction. We apply in-game physics
to the object at this point so that it falls to the ground and
disappears on contact with the ﬂoor. In this manner, the
user can quickly cast aside irrelevant layers and intuitively
modify the model.

Initially, we deﬁned the workspace with a ﬁxed number
of translucent containers. In this setup, layers snap to the
center of a container when released. However, we observed
two drawbacks for this setup: vagueness about whether the
translucent objects or the gaps in between are the hold-
ers, and an implicit suggestion to ﬁll all the containers to
complete the model building task. These were undesirable
intuitions. The user should immediately identify the target
area. Likewise, smaller models may be more effective thus
there should not be a discriminating intuition against them.
Additionally, this order made model order deﬁnition difﬁ-
cult.

To address these concerns, we modeled the workspace

after containers from Google’s Material Design [27]. We
adopted the ”slipstream” design, which is an adaptable list
that centers layers within a deﬁned data stream. We apply
linear interpolation to translate objects when a user modiﬁes
the stream. Through this method, the sequence can move
to free up space wherever the user is attempting to place
a layer. As a result, the interaction model suggests func-
tionality by design rather than instruction. Furthermore,
we can also ensure that restrictions of the ConvNet are
upheld. When users release dense layers at any position
in the workspace, we propagate them to the back. This
communicates a common design principle about this layer
type without direct instruction. With this redesign, we make
the model building process more clear. Users can quickly
append, insert, and remove layers with intuitive grab and
release actions.

5 IMPLEMENTATION

While deep learning models are useful in many domains,
we had to focus on one task to build a functional prototype.
The speciﬁc task we chose to address is the classiﬁcation of
128x128 RGB image patches. These patches originate from a
larger set of tissue images. To make our prototype serve
a useful goal, we chose to focus on the pathology pixel
classiﬁcation problem where DL models are the state-of-
the-art classiﬁers. Googles AI for metastatic breast cancer
detection, LYNA, demonstrates a case where deep learning
algorithms are faster and more accurate than pathologists
[28]. Further study using the same algorithm suggests that
by adding the contextual strengths of human experts, we

can better employ DL to improve diagnostic speed and accu-
racy [29]. For our dataset speciﬁcally, we ﬁrst divide patches
into seven classiﬁcations based on pathologist annotations:
tumor, stroma, background, normal, inﬂammatory, blood,
and necrosis. We then construct testing and training sets
from this data. Image classes are used for the ﬁnal model
and also for displayed activations.

The software runs as a standalone application operated
by the standard requirements of the Oculus Rift VR head-
set. We chose this hardware for its intuitive controls that
mimic grabbing and releasing. Oculus Rift also has a widely
available application programming interface (API) for game
engines. We developed the frontend of the application in
the Unity game development platform (Unity 2018.2.15f1).
We built the DL backend with the TensorFlow/Keras frame-
work using Python3. The Unity application and backend
communicate core requests via gRPC. gRPC is a remote pro-
cedure call system initially developed by Google. It exists as
an interface between different programming languages over
the network. We render and export images locally using
OpenCV. We modiﬁed the standard ”Oculus Integration for
Unity” asset for base interaction functionality. One can con-
ﬁgure our software to implement any set of image patches.

5.1 Conﬁgurability

Users can conﬁgure our application to process and display
their own custom datasets. We update the in-game visuals
and back-end model to reﬂect changes in the data. In this
manner, we provide the beneﬁt of our environment across
classiﬁcation tasks and domains. With further adaptation,
our application could construct neural networks for addi-
tional ﬁelds. One such task is the label-free prediction of
ﬂuorescence images for transmitted-light microscopy [30].
In this case, we would not ﬂatten the image, output full-
sized image predictions instead.

Our application provides a .conﬁg ﬁle that allows the
user to specify parameters for the model and dataset. Users
can modify the batch size, the number of epochs, and details
speciﬁc to each layer type. If the user provides custom
data, he/she can specify the number of classes, the name of
each category, and the number of datapoints. The frontend
and backend both update to reﬂect these changes. If the
user speciﬁes new classes, the input selector above the
workbench will update accordingly. In this situation, the
user must provide up to six input images for the generation
of activations.

As a proof-of-concept, we have integrated histopatho-
logic image patches from the Camelyon16 dataset that assess
the presence of metastatic tissue for breast cancer [28]. We
obtain patches for binary classiﬁcation from the PatchCame-
lyon benchmark [31]. This adaptation of the Camelyon16
dataset labels image patches based on whether a tumor
tissue exists in the center region of an image. With our
integration of this new problem set, we have achieved
accuracy upwards of 80% with minimal testing. We quickly
found that to construct effective models for this dataset,
users needed to construct larger networks by adding more
layers.

6

5.2 Constraints

Our application automatically enforces the constraints in-
herent to convolutional neural networks. We eliminate the
need to debug errors by ensuring that all models respect
inherent constraints of the Keras architecture. This speeds
up the initial learning process for experts and non-experts
alike. Through this method, we can effectively eliminate the
”boilerplate” present in high-level APIs. Users can thereby
develop a model for the ﬁrst time in seconds. We uphold the
following constraints to ensure a robust and consistent user
experience.
1) We present the user with layers of three types: convo-
lutional, max pooling and dense. Within these types,
we can communicate the core DL concepts relevant to
ConvNets. Users can build an effective neural network
while lowering the complexity and potential to ”break”
the model.

2) We propagate dense layers to the end of the model
because of the accompanying ﬂatten layers effect on the
shape of the model. Before the ﬁrst dense layer, we
ﬂatten the model to one dimension. After this point, no
multidimensional layers can exist. To ensure that this
restriction is upheld, we do not permit the user to place
a conv or pool layer after a dense layer.

3) We limit the number of layers in the workspace to 10
for a consistent user experience. As the number of layers
increases in a model, so does the compile time and
training time. Thus, to avoid the user needing to wait
excessive amounts of time, we restrict the model size.
This restriction does not necessarily lower the accuracy of
the model. Throughout testing, we have seen that models
with excessive numbers of layers in our dataset tend to
have diminishing returns for our classiﬁcation task.
4) We implement the core input and output layers of the
model beforehand. By doing so, we avoid grossly in-
accurate or dysfunctional models. This process includes
deﬁning the initial shape with a conv layer and classify-
ing the ﬁnal result.

5) Models produced within our application are sequential
and apply only to classiﬁcation tasks. Custom datasets
must adhere to this constraint. As discussed in section
5.1, we can modify the program to support any number
of ConvNet problem domains. For a consistent experi-
ence, we have chosen to focus the application datasets
such as ours.

6 RESULTS

In this section, we analyze the performance of the models
constructed within our application. For this purpose, we
specify a distinction between exploratory and production
methods of interactivity. The ﬁrst method beneﬁts users
looking to explore a dataset and obtain general insight
into what models are effective. The second provided more
detailed data for intensive analysis, better for reﬁning the
model.

6.1 Model Training and Evaluation

Our application gives the user a choice of how compu-
tationally expensive evaluation should be. By default, we

7

a ﬂatten layer before the ﬁnal classiﬁcation. Otherwise, we
perform this ﬂatten immediately before the ﬁrst dense layer
that the user provides.

Each model uses 60% of the data for training, 20% for
validation, and 20% for testing. We use validation data
for early stopping to minimize overﬁtting. We evaluate the
performance of the ﬁnal model on the testing set.

For the option of rapid training and evaluation, we use
a balanced set of 7000 data points. The application compiles
and ﬁts models using the training and validation data.
We save the best iteration in this process. Here, we stop
early if convergence occurs or if the program reaches a set
number of epochs. We enforce a maximum to ensure rapid
development and testing. Finally, the application reports the
accuracy of a model on the testing set to the user. Overall,
this model involves fewer epochs, a smaller patience value,
and less data. Thus, the accuracy reported to the user is not
wholly consistent between runs. This can be a hindrance to
more advanced learning and model development. For this
use, we recommend the second option.

The second option takes more time-intensive calcula-
tions but does not necessarily have to be slow. Using
gRPC, we can connect the application to a series of high-
performance computing nodes (HPC). For accessibility pur-
poses, a larger dataset is not the default. For this option,
we choose to measure the performance of models using a
ﬁvefold stratiﬁed cross-validation strategy. The application
trains models at each fold until convergence with a high
patience value. This means, that the model can run over
more epochs to achieve more consistent results. We train on
a balanced set of 14,000 data points as well. Instead of model
accuracy, we report the area under the receiver operating
characteristic curve (AUC). This new primary metric of
evaluation is performed on a new set of data that is not
shown to the model during training. This set is also balanced
and consists of 21,000 image patches. To measure the ﬁnal
performance of the model we report the median ﬁvefold
mean AUC and its 95% conﬁdence interval (CI) [32]. In the
following subsection, we obtain the AUC and CI reported
in ﬁgure 5 using this strategy.

6.2 Progression

Fig. 5. An example of user progression within the VR application. The
x-axis signiﬁes user-deﬁned layer sequences such as the screenshot
depicted.

Fig. 6. A second example of user progression. Conﬁdence interval and
AUC are reported for each model built (y-axis).

use a small training set for streamlined exploration. In this
situation, results often ﬂuctuate on each run, even with
the same model. This is due to the sample size and non-
deterministic nature of DL. If a user wants more detailed,
production-quality information, he/she can select a larger
dataset. This will report results truer to the performance of
the model, but the process will take more time.

In both modes, we compile the model with the binary
cross entropy loss function and adam optimizer in Keras.
Conv layers have 32 ﬁlters and a kernel size of (3,3). Conv
layers are always followed by a ReLU activation as previ-
ously mentioned. Max pooling layers have a pool size of
(2,2), and dense layers have 128 neurons. Every model has
a convolutional layer and its accompanying activation to
begin. At the end of a model, a dense layer exists with 7
neurons and a softmax activation. The number of neurons
corresponds to the ﬁnal number of classes and can vary with
the dataset. If the user does not insert a dense layer, we put

There are certain patterns that result in a more successful
model. These patterns are speciﬁc to the classiﬁcation do-
main and features of the dataset. In this section we discuss
how users can discern patterns for our dataset through
iterative experimentation and informed evaluation. The pro-
gression of the user is a term used here to describe the vital
process of improving a model for a given problem. Model
progression is crucial to understanding and designing an
effective DL model. Both experts and non-experts can bene-
ﬁt because each problem and domain poses a unique set of
challenges.

Through observation and testing, we have identiﬁed
certain patterns that our interface can provide to the user.
Patterns can be speciﬁc to the dataset or general to the
domain. General patterns tend to cover aspects inherent
to ConvNets. These are more relevant for non-experts to
understand how neural nets function. In ﬁgure 5, we explore
some possible progression strategies. These progressions

can communicate various important patterns to the user.
As the user progresses, he/she can better reﬁne a model by
tightening the CI and increasing the AUC.

In ﬁgure 5, the user starts with a larger, underperforming
network. He/she reduces the problem to three layers for
simpliﬁcation. By identifying the effectiveness of multiple
pooling layers, the user can further progress. The insight
here is that max pooling layers reduce the dimensionality of
the image so that the model can analyze speciﬁc features.
By the 5th stage, the user has brought back in conv layers
to achieve an AUC of 0.97. With this progression, we com-
municate the need for pooling layers if conv elements are
to be effective. The ﬁrst and fourth stages differ by only
one layer, yet they produce signiﬁcantly different results.
This observation illustrates the volatility of networks and
the need for reducing dimensionality.

In ﬁgure 6, the user follows a different progression to
achieve the same model. Initially, the user builds up from a
single conv layer. He/she then identiﬁes an issue and then
continues to improve the model. After stage 3, the user is
able to identify that multiple dense layers are not necessary
for small models. In the ﬁnal two stages, the user identiﬁes
the beneﬁt of grouping layers of the same type.

7 DISCUSSION

An interactive VR visualization approach has promising
results for cross-domain machine learning applications.
For image classiﬁcation, one can implement this technique
throughout the ﬁeld of bioinformatics. We presented an
example, virtual environment for the classiﬁcation of pathol-
ogy data. Our application targets new users for rapid model
building. However, one can expand this approach to the nth
degree. Researchers and pathologists could use one such VR
environment for any deep learning task.

7.1 Applications

We tailored our tool to users with little to no knowledge of
machine learning. We visualize processes that are difﬁcult
to understand and interact with otherwise. Our method is
useful because it permits the construction of high quality
models with minimal effort. For education, teachers can
integrate VR applications into curriculum and training at
all levels. Such applications can relay vital concepts funda-
mental to those learning about deep learning. The properties
inherent to VR in section 1 could greatly beneﬁt educational
environments. By combining evolving technology and tra-
ditional curriculum, teachers can boost attentiveness and
learning. Virtual reality introduces a novel technique for vi-
sual learning. This technique offers a tactile and interactive
learning strategy to stimulate students’ minds.

Fully-immersive VR environments have immense poten-
tial for professional applications. Experienced developers
in the ﬁeld of artiﬁcial intelligence are one of such audi-
ences. We can streamline production and better guide visual
insight with this technique. Traditional platforms fail to
capitalize on advances in immersion and interactivity. Vir-
tual reality offers a new paradigm of development that can
implement existing visualizations. We can continue to build
on state of the art representations in VR with this approach.

8

Presence and immersion speciﬁc to VR offer many beneﬁts
in efﬁciency and understanding.

Two classes of professionals are already using visualiza-
tion techniques for DL [33]. The ﬁrst class, which we have
touched on, is model builders/developers. Developers ben-
eﬁt from new methods of development and visualization for
debugging purposes. With detailed technical information,
this class of users can better construct DL models. These
models are then deployed to solve real-world problems.
The second class is that of the target users. Target users
do not need to understand the details a model but need
to interact with it on some level. Convenient visualization is
especially important for this class to communicate relevant
information. A pathologist using a DL model to aid in
labeling regions of an image is an example of this class.

7.2 Future Work

Here we discuss some of the identiﬁable pitfalls and areas
of improvement in our work. We stress that one can apply
the technique proposed with any level of complexity. Tech-
nical improvements and customization using modern DL
visualizations beneﬁt different target audiences.

Customization is the primary concern that one would
need to address in future work. Our application sacriﬁces
customization for fast and easy model implementation. It
lacks in the ability of the user to ﬁne tune more advanced
parameters. This could include the optimization technique
and more extensive layer properties. These additions beneﬁt
more advanced users but can overwhelm those new to DL.
Without more sophisticated parameter testing, ﬁne-tuned
control also slows development. In a professional setting,
companies can provide these tools while interfacing with
VR. We chose to build the product around fundamental
features but recognize potential
improvements. For this
purpose, we propose that an application of this type be
modular. In this setup, developers hide advanced features
from the user but allow for extensive customization.

Context is an additional aspect that one would need to
expand on. New users are often confused by the ﬁeld of
deep learning and the purpose of the program. For this
purpose, we recorded an introductory video to explain the
controls and problem domain. Even with further explana-
tion, many users were unsure what problem they were
solving. Pathology and image classiﬁcation techniques are
extensive ﬁelds that can confuse users. To this effect, we see
the beneﬁt of further improvement to ease understanding
for new users.

Visualization techniques are a strong point of potential
improvement. The solution would beneﬁt greatly from more
sophisticated tools that provide analysis in 2D and 3D.
Many of the algorithms and frameworks in section 2 would
be useful here. These visualizations heighten the potential
for insight and provide multi-faceted analysis. Expanding
layers and 3D visualization of data ﬂow would be particu-
larly helpful.

8 CONCLUSION

We have discussed the beneﬁts of our tool for building
DL models in VR and highlighted further improvements.

9

[14] Y. Chen, Olfactory Display: Development and Application in
Virtual Reality Therapy, in 16th International Conference on Artiﬁcial
Reality and TelexistenceWorkshops (ICAT06), 2006, pp. 580584.
[15] D. A. Bowman and R. P. McMahan, Virtual Reality: How Much
Immersion Is Enough?, Computer, vol. 40, no. 7, pp. 3643, Jul. 2007.
[16] M. J. Schuemie, P. van der Straaten, M. Krijn, and C. A. P. G.
van der Mast, Research on Presence in Virtual Reality: A Survey,
Cyberpsychol. Behav., vol. 4, no. 2, pp. 183201, Apr. 2001.

[17] R. J. Lamson, Virtual reality immersion therapy for treating psy-
chological, psychiatric, medical, educational and self-help prob-
lems, US6425764B1, 30-Jul-2002.

[18] H. L. Miller and N. L. Bugnariu, Level of Immersion in Virtual
Environments Impacts the Ability to Assess and Teach Social Skills
in Autism Spectrum Disorder, Cyberpsychology Behav. Soc. Netw.,
vol. 19, no. 4, pp. 246256, Apr. 2016.

[19] R. Sacks, A. Perlman, and R. Barak, Construction safety training
using immersive virtual reality, Constr. Manag. Econ., vol. 31, no. 9,
pp. 10051017, Sep. 2013.

[20] P.-J. Kindermans et al., Learning how to explain neural networks:
PatternNet and PatternAttribution, ArXiv170505598 Cs Stat, May
2017.

[21] K. Wongsuphasawat et al., Visualizing Dataﬂow Graphs of Deep
Learning Models in TensorFlow, IEEE Trans. Vis. Comput. Graph.,
vol. 24, no. 1, pp. 112, Jan. 2018.

[22] D. S. and S. Carter, Tensorﬂow Neural Network Playground.
[Online]. Available: http://playground.tensorﬂow.org. [Accessed:
12-May-2019].

[23] ConvNetJS: Deep Learning in your browser. [Online]. Available:
https://cs.stanford.edu/people/karpathy/convnetjs/. [Accessed:
12-May-2019].

[24] Keras.js - Run Keras models in the browser. [Online]. Avail-
[Accessed: 12-

able: https://transcranial.github.io/keras-js/#/.
May-2019].
[25] TensorSpace.js.

Available:

[Online].

https://tensorspace.org/index.html. [Accessed: 11-May-2019].
[26] A. W. Harley, An Interactive Node-Link Visualization of Convo-
lutional Neural Networks, in Advances in Visual Computing, vol.
9474, G. Bebis, R. Boyle, B. Parvin, D. Koracin, I. Pavlidis, R. Feris,
T. McGraw, M. Elendt, R. Kopper, E. Ragan, Z. Ye, and G. Weber,
Eds. Cham: Springer International Publishing, 2015, pp. 867877.

[27] Design

-

Material

Design.

[Online].

Available:

https://material.io/design/. [Accessed: 25-May-2019].

[28] Y. Liu et al., Artiﬁcial IntelligenceBased Breast Cancer Nodal
Metastasis Detection: Insights Into the Black Box for Pathologists,
Arch. Pathol. Lab. Med., p. arpa.2018-0147-OA, Oct. 2018.

[29] Impact of Deep Learning Assistance on the Histopathologic Re...:
The American Journal of Surgical Pathology. [Online]. Available:
https://journals.lww.com/ajsp/fulltext/2018/12000/Impact of D
29-May-
eep Learning Assistance on the.7.aspx.
2019].

[Accessed:

[30] C. Ounkomol, S. Seshamani, M. M. Maleckar, F. Collman, and G. R.
Johnson, Label-free prediction of three-dimensional ﬂuorescence
images from transmitted-light microscopy, Nat. Methods, vol. 15,
no. 11, p. 917, Nov. 2018.

[31] B. Veeling, The PatchCamelyon (PCam) deep learning classiﬁcation

benchmark.: basveeling/pcam. 2019.

[32] Molecular

convolutions:

moving

ﬁngerprints
SpringerLink.
https://link.springer.com/article/10.1007%2Fs10822-016-9938-
8Sec3. [Accessed: 20-May-2019].

[Online].

[33] F. Hohman, Visualization in Deep Learning, Multiple Views: Visu-

alization Research Explained, 01-Mar-2019. .

beyond
Available:

graph
—

We analyzed existing strategies for data representation and
platforms that employ them. We argued for the extension
of visualization to virtual reality. In this regard, educational
and professional environments could achieve heightened ef-
ﬁciency and insight. To illustrate a simple use case, we built
our application to classify tumor image patches from two
different datasets. We found our approach to be effective
and robust for building ConvNets with ease.

ACKNOWLEDGMENTS

Tumor images for classiﬁcation were provided by Drs.
Satwik Rajaram and Payal Kapur who is funded by the
Kidney cancer SPORE grant (P50CA196516). The software is
a derivative of work from the UT Southwestern hackathon,
U-HACK Med 2018, and has continued development under
the same Principal Investigator (Murat Can Cobanoglu) and
lead developer (Kevin VanHorn). The project was originally
proposed by Murat Can Cobanoglu, with the ﬁnal code
being submitted to the NCBI-Hackathons GitHub under
the MIT License. Hackathon was sponsored by BICF from
funding provided by Cancer Prevention and Research Insti-
tute of Texas (RP150596). We would like to thank hackathon
contributors Xiaoxian Jing (Southern Methodist University),
Siddharth Agarwal (University of Texas Arlington), and
Michael Dannuzio (University of Texas at Dallas) for their
initial work in design and development.

REFERENCES

[1] Y. LeCun, Y. Bengio, and G. Hinton, Deep learning, Nature, vol.

521, no. 7553, pp. 436444, May 2015.

[2] L. Hou, D. Samaras, T. M. Kurc, Y. Gao, J. E. Davis, and J. H.
Saltz, Patch-based Convolutional Neural Network for Whole Slide
Tissue Image Classiﬁcation, Proc. IEEE Comput. Soc. Conf. Comput.
Vis. Pattern Recognit., vol. 2016, pp. 24242433, 2016.

[3] G. von Zitzewitz, Survey of neural networks in autonomous

driving, Jul. 2017.

[4] M. Vardhana, N. Arunkumar, S. Lasrado, E. Abdulhay, and G.
Ramirez-Gonzalez, Convolutional neural network for bio-medical
image segmentation with hardware acceleration, Cogn. Syst. Res.,
vol. 50, pp. 1014, Aug. 2018.
J. Yosinski, J. Clune, A. Nguyen, T. Fuchs, and H. Lipson, Under-
standing Neural Networks Through Deep Visualization, p. 12.
[6] A. Mahendran and A. Vedaldi, Understanding deep image repre-
sentations by inverting them, in 2015 IEEE Conference on Computer
Vision and Pattern Recognition (CVPR), 2015, pp. 51885196.

[5]

[7] F. M. Hohman, M. Kahng, R. Pienta, and D. H. Chau, Visual
Analytics in Deep Learning: An Interrogative Survey for the Next
Frontiers, IEEE Trans. Vis. Comput. Graph., pp. 11, 2018.

[8] Y. Ming et al., Understanding Hidden Memories of Recurrent
Neural Networks, in 2017 IEEE Conference on Visual Analytics
Science and Technology (VAST), Phoenix, AZ, 2017, pp. 1324.
[9] H. Strobelt, S. Gehrmann, H. Pﬁster, and A. M. Rush, LSTMVis: A
Tool for Visual Analysis of Hidden State Dynamics in Recurrent
Neural Networks, IEEE Trans. Vis. Comput. Graph., vol. 24, no. 1,
pp. 667676, Jan. 2018.

[10] M. Liu, J. Shi, Z. Li, C. Li, J. Zhu, and S. Liu, Towards Better
Analysis of Deep Convolutional Neural Networks, IEEE Trans. Vis.
Comput. Graph., vol. 23, no. 1, pp. 91100, Jan. 2017.

[11] H. Liu, T. Taniguchi, Y. Tanaka, K. Takenaka, and T. Bando, Visu-
alization of Driving Behavior Based on Hidden Feature Extraction
by Using Deep Learning, IEEE Trans. Intell. Transp. Syst., vol. 18,
no. 9, pp. 24772489, Sep. 2017.

[12] M.-L. Ryan, Immersion vs. Interactivity: Virtual Reality and Liter-
ary Theory, SubStance, vol. 28, no. 2, pp. 110137, Apr. 1999.
[13] J. Lee, M. Kim, and J. Kim, A Study on Immersion and VR Sickness
in Walking Interaction for Immersive Virtual Reality Applications,
Symmetry, vol. 9, no. 5, p. 78, May 2017.

Kevin VanHorn Kevin VanHorn received his
B.S. in Computer Science at the University of
Texas at Dallas and is currently pursuing a M.S.
at the same institution. For his undergraduate
education, he was awarded the Terry Scholar-
ship. He is currently developing visualization so-
lutions for deep learning to aid in bioinformatics
research at UT Southwestern Medical Center.
Kevin has experience as a graphic artist and
independent game developer.

10

Meyer Zinn Meyer Zinn is a rising senior at
St. Mark’s School of Texas with an interest in
computer science and artiﬁcial intelligence. He
was awarded the Rice University Book Award,
the Engineering Sciences Award, and the Uni-
versity of Rochester Xerox Award for Innovation
and Information Technology. Previously, he de-
veloped a real time location tracking system for
the Medical Artiﬁcial Intelligence and Automation
lab’s smart clinic project in the Department of
Radiation Oncology. He has participated in sev-
eral hackathons and competitions, and his team was the runner-up at
EarthxHack 2019.

Murat Can Cobanoglu Dr. Cobanoglu received
his undergraduate training in computer science
(major) and mathematics (minor) from Sabanc
University in stanbul, where he was invited as
a recipient of the university’s most competitive
scholarship. He completed his M.S. in computer
science in Sabanci University, supported by a
fellowship from the Scientiﬁc and Technological
Research Council of Turkey. He attended the
Carnegie Mellon University University of Pitts-
burgh Joint Ph.D. Program in Computational Bi-
ology. He joined the Lyda Hill Department of Bioinformatics as the
inaugural UTSW Distinguished Fellow. He works on integrating machine
learning into drug discovery.

