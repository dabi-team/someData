Utilizing Class Information for Deep Network Representation Shaping

Daeyoung Choi∗ and Wonjong Rhee∗
Department of Transdisciplinary Studies
Seoul National University
Seoul, 08826, South Korea
{choid, wrhee}@snu.ac.kr

9
1
0
2

r
a

M
1

]

G
L
.
s
c
[

2
v
7
0
3
9
0
.
9
0
8
1
:
v
i
X
r
a

Abstract

Statistical characteristics of deep network representations,
such as sparsity and correlation, are known to be relevant to
the performance and interpretability of deep learning. When a
statistical characteristic is desired, often an adequate regular-
izer can be designed and applied during the training phase.
Typically, such a regularizer aims to manipulate a statisti-
cal characteristic over all classes together. For classiﬁcation
tasks, however, it might be advantageous to enforce the de-
sired characteristic per class such that different classes can
be better distinguished. Motivated by the idea, we design two
class-wise regularizers that explicitly utilize class informa-
tion: class-wise Covariance Regularizer (cw-CR) and class-
wise Variance Regularizer (cw-VR). cw-CR targets to reduce
the covariance of representations calculated from the same
class samples for encouraging feature independence. cw-VR
is similar, but variance instead of covariance is targeted to
improve feature compactness. For the sake of completeness,
their counterparts without using class information, Covari-
ance Regularizer (CR) and Variance Regularizer (VR), are
considered together. The four regularizers are conceptually
simple and computationally very efﬁcient, and the visualiza-
tion shows that the regularizers indeed perform distinct rep-
resentation shaping. In terms of classiﬁcation performance,
signiﬁcant improvements over the baseline and L1/L2 weight
regularization methods were found for 21 out of 22 tasks over
popular benchmark datasets. In particular, cw-VR achieved
the best performance for 13 tasks including ResNet-32/110.

Introduction
For deep learning, a variety of regularization techniques
have been developed by focusing on the weight parame-
ters. A classic example is the use of L2 (Hoerl and Kennard
1970) and L1 (Tibshirani 1996) weight regularizers. They
have been popular because they are easy to use, computa-
tionally light, and often result in performance enhancements.
Another example is the parameter sharing technique that en-
forces the same weight values as in the Convolutional Neural
Networks (CNNs). Regularization techniques that focus on
the representation (the activations of the units in a deep net-
work), however, have been less popular even though the per-
formance of deep learning is known to depend on the learned
representation heavily.

∗Authors contributed equally.

Figure 1: A single unit’s activation histogram (upper three
plots) and two randomly chosen units’ activation scatter
plots (lower three plots) for MNIST. For a 6-layer Multi-
layer Perceptron (MLP), the ﬁfth layer’s representation vec-
tors calculated using 10,000 test samples were used to gen-
erate the plots. For the baseline model, a substantial overlap
among different classes can be observed at the time of ini-
tialization as shown in (a). Even after 50 epochs of training,
still, a substantial overlap can be observed as shown in (b).
When class information is used to regularize the represen-
tation shapes, the overlap is signiﬁcantly reduced as shown
in (c). Note that a slight correlation between each pair of
classes can be observed in the scatter plot of (b), but not
in that of (c) due to the use of cw-CR. The ﬁgures are best
viewed in color.

For representation shaping (regularization), some of the
promising methods for performance and interpretability in-
clude (Glorot, Bordes, and Bengio 2011; Cogswell et al.
2015; Liao et al. 2016). (Glorot, Bordes, and Bengio 2011)
considers increasing representational sparsity, (Cogswell et
al. 2015) focuses on reducing covariance among hidden
units, and (Liao et al. 2016) forces parsimonious represen-
tations using k-means style clustering. While all of them
are effective representation regularizers, none of them ex-
plicitly use class information for the regularization. A few
recent works (Wen et al. 2016b; Belharbi et al. 2017;
Yang et al. 2018) do utilize class information, and their ap-
proaches are based on hidden layer activation vectors. The
method of (Belharbi et al. 2017) is computationally expen-
sive because pair-wise dissimilarities need to be calculated

1

 
 
 
 
 
 
among the same class samples in each mini-batch.

In this work, two computationally light representation
regularizers, cw-CR (class-wise Covariance Regularizer)
and cw-VR (class-wise Variance Regularizer), that utilize
class information are introduced and studied. We came up
with the design ideas by observing typical histograms and
scatter plots of deep networks as shown in Figure 1. In Fig-
ure 1 (b), different classes substantially overlap even after
the training is complete. If we directly use class informa-
tion in regularization, as opposed to using it only for cross-
entropy cost calculation, we can speciﬁcally reduce overlaps
or pursue a desired representation characteristic. An exam-
ple of cw-CR reducing class-wise covariance is shown in
Figure 1 (c), and later we will show that cw-VR can no-
tably reduce class-wise variance resulting in minimal over-
laps. The two class-wise regularizers are very simple and
computationally efﬁcient, and therefore can be easily used
as L1 or L2 weight regularizers that are very popular.

Our Contributions
The contributions of this work can be summarized as fol-
lows.

Introduction of three new representation regularizers
We introduce two representation regularizers that utilize
class information. cw-CR and cw-VR reduce per-class co-
variance and variance, respectively. In this work,
their
penalty loss functions are deﬁned, and their gradients are an-
alyzed and interpreted. Also, we investigate VR that is cw-
VR’s all-class counterpart. Intuitively, reducing the variance
of each unit’s activations does not make sense unless it is
applied per class, but we have tried VR for the sake of com-
pleteness and found that VR is useful for performance en-
hancement. cw-CR’s all-class counterpart, CR, is analyzed
as well, but CR turns out to be the same as DeCov that was
already studied in-depth in (Cogswell et al. 2015).

Performance improvement with the new representation
regularizers Rather than trying to ﬁnd a single case of
beating the state-of-the-art record, we performed an ex-
tensive set of experiments on the most popular datasets
(MNIST, CIFAR-10, CIFAR-100) and architectures (MLP,
CNN). Additionally, ResNet (He et al. 2016) was tested as
an example of a sophisticated network, and an image re-
construction task using autoencoder was tested as an exam-
ple of a different type of task. We have tested a variety of
scenarios with different optimizers, number of classes, net-
work size, and data size. The results show that our represen-
tation regularizers outperform the baseline (no regularizer)
and L1/L2 weight regularizers for almost all the scenarios
that we have tested. More importantly, class-wise regular-
izers (cw-CR, cw-VR) usually outperformed their all-class
counterparts (CR, VR). Typically cw-VR was the best per-
forming regularizer and achieved the best performance for
the autoencoder task, too.

Effects of representation regularization Through visu-
alizations and quantitative analyses, we show that the new
representation regularizers indeed shape representations in
the ways that we have intended. The quantitative analysis of

representation characteristics, however, indicates that each
regularizer affects multiple representation characteristics to-
gether and therefore the regularizers cannot be used to con-
trol a single representation characteristic without at least
mildly affecting some other representation characteristics.

Related Works
Regularization for Deep Learning
The classic regularizers apply L2 (Hoerl and Kennard 1970)
and L1 (Tibshirani 1996) penalties to the weights of models,
and they are widely used for Deep Neural Networks (DNNs)
as well. (Wen et al. 2016a) extended L1 regularizers by us-
ing group lasso to regularize the structures of DNN (i.e.,
ﬁlters, channels, ﬁlter shapes, and layer depth). (Srivastava
et al. 2014) devised dropout that randomly applies activa-
tion masking over the units. While dropout is applied in a
multiplicative manner, (Glorot, Bordes, and Bengio 2011)
used L1 penalty regularization on the activations to encour-
age sparse representations. XCov proposed by (Cheung et al.
2014) minimizes the covariance between autoencoding units
and label encoding units of the same layer such that repre-
sentations can be disentangled. Batch normalization (BN)
proposed by (Ioffe and Szegedy 2015) exploits mini-batch
statistics to normalize activations. It was developed to accel-
erate training speed by preventing internal covariate shift,
but it was also found to be a useful regularizer. In line with
batch normalization, weight normalization, developed by
(Salimans and Kingma 2016), uses mini-batch statistics to
normalize weight vectors. Layer normalization proposed by
(Ba, Kiros, and Hinton 2016) is a RNN version of batch nor-
malization, where they compute the mean and variance used
for normalization from all of the summed inputs to the units
in a layer on a single training case. There are many other
publications on regularization techniques for deep learning,
but we still do not fully understand how they really affect
the performance. Recent work by (Zhang et al. 2016) shows
that the traditional concept of controlling generalization er-
ror by regularizing the effective capacity does not apply to
the modern DNNs.

Penalty Regularization on Representations
Some of the existing regularization methods explicitly shape
representations by adopting a penalty regularization term.
DeCov (Cogswell et al. 2015) is a penalty regularizer that
minimizes the off-diagonals of a layer’s representation co-
variance matrix. DeCov reduces co-adaptation of a layer’s
units by encouraging the units to be decorrelated. In this
work, it is called as CR (Covariance Regularizer) for consis-
tent naming. A recent work (Liao et al. 2016) used a cluster-
ing based regularization that encourages parsimonious rep-
resentations. In their work, similar representations in sam-
ple, spatial, and channel dimensions are clustered and used
for regularization such that similar representations are en-
couraged to become even more similar. While their work
can be applied to unsupervised as well as supervised tasks,
our work utilizes a much simpler and computationally efﬁ-
cient method of directly using class labels during training to
avoid k-means like clustering.

2

Class-wise Learning

ci,j, using the N samples in each mini-batch.

True class information has been rarely used directly for reg-
ularization methods. Traditionally, the class information has
been used only for evaluating the correctness of predic-
tions and the relevant cost function terms. Some of the re-
cent works, however, have adopted the class-wise concept in
more sophisticated ways. In those works, class information
is used as a switch or for emphasizing the discriminative as-
pects over different classes. As an example, (Li, Pan, and
Chu 2008) proposed a kernel learning method using class
information to model the manifold structure. They modify
locality preserving projection to be class dependent. (Jiang,
Lin, and Davis 2011) added label consistent regularizers for
learning a discriminative dictionary. (Wen et al. 2016b) de-
veloped a regularizer called center loss that reduces the acti-
vation vector distance between representations and their cor-
responding class centers for face recognition tasks. (Yang
et al. 2018) designed a loss function named prototype loss
that improves representation’s intra-class compactness for
enhancing the robustness of CNN. Another recent work by
(Belharbi et al. 2017) directly uses class labels to encour-
age similar representations per class as in our work, but it
is computationally heavy as explained earlier. Besides the
pair-wise computation, two optimizers are used for handling
the supervised loss term and the hint term separately. Class
information is used for autoencoder tasks as well. (Shi et al.
2016) implicitly reduced the intra-class variation of recon-
structed samples by minimizing pair-wise distances among
same class samples. Like the strategies listed above, our cw-
VR and cw-CR use class-wise information to control the
statistical characteristics of representations. However, our
methods are simple because only one optimizer is used, and
computationally efﬁcient because pair-wise computation is
not required.

Class-wise Representation Regularizers:
cw-CR and cw-VR

In this section, we ﬁrst present basic statistics of represen-
tations. Then, three representation regularizers, cw-CR, cw-
VR, and VR are introduced with their penalty loss functions
and gradients. Interpretations of the loss functions and gra-
dients are provided as well.

Basic Statistics of Representations

For the layer l, the output activation vector of the layer is de-
ﬁned as zl = max(W(cid:62)
l zl−1 + bl, 0) using Rectiﬁed Linear
Unit (ReLU) activation function. Because we will be focus-
ing on the layer l for most of the explanations, we drop the
layer index. Then, zi is the ith element of z (i.e. activation
of ith unit).

To use statistical properties of representations, we deﬁne
mean of unit i, µi, and covariance between unit i and unit j,

3

µi =

ci,j =

1
N

1
N

(cid:88)

n
(cid:88)

n

zi,n

(zi,n − µi)(zj,n − µj)

(1)

(2)

Here, zi,n is the activation of unit i for nth sample in the
mini-batch. From equation (2), variance of i unit can be writ-
ten as the following.

vi = ci,i

(3)

When class-wise statistics need to be considered, we choose
a single label k from K labels and evaluate mean, covari-
ance, and variance using only the data samples with true la-
bel k in the mini-batch.

µk

i =

ck
i,j =

1
|Sk|

1
|Sk|

(cid:88)

n∈Sk
(cid:88)

n∈Sk

i = ck
vk
i,i

zi,n

(zi,n − µk

i )(zj,n − µk
j )

(4)

(5)

(6)

Here, Sk is the set containing indexes of the samples whose
true label is k, and |Sk| is the cardinality of the set Sk.

cw-CR
cw-CR uses off-diagonal terms of the mini-batch covari-
ance matrix of activations per class as the penalty term:
Ωcw-CR = (cid:80)
i,j)2. This term is added to the orig-
inal cost function J, and the total cost function (cid:101)J can be
denoted as

i(cid:54)=j(ck

(cid:80)

k

(7)

(cid:101)J = J + λΩcw-CR(z),
where λ is the penalty loss weight (λ ∈ [0, ∞)). The penalty
loss weight balances between the original cost function J
and the penalty loss term Ω. When λ is equal to zero, (cid:101)J is the
same as J, and cw-CR does not inﬂuence the network. When
λ is a positive number, the network is regularized by cw-CR,
and the performance is affected. In practice, we have ob-
served that deep networks with too large λ cannot be trained
at all.

cw-VR
A very intuitive way of enforcing distinguished representa-
tions per class is to maximize the inter-class distances in the
representation space. Because inter-class needs to be max-
imized, the corresponding penalty term can be inverted or
multiplied by -1 before it is minimized with the original cost
function. We tried such approaches, but the optimization be-
came unstable (failed to converge). An alternative way is
to reduce intra-class (same-class) variance. By applying this
idea, the penalty loss term of cw-VR can be formulated as
Ωcw-V R = (cid:80)

(cid:80)

With the design of cw-VR, we naturally invented VR that
is the all-class counterpart of cw-VR. VR minimizes the ac-
tivation variance of each unit, and it is mostly the same as

i vk
i .

k

Table 1: Penalty loss functions and gradients of the representation regularizers. All the penalty loss functions are normalized
with the number of units (I) and the number of classes (K) such that the value of λ can have a consistent meaning. CR and
cw-CR are standardized using the number of distinct covariance combinations.

Penalty loss function

(ci,j)2

(cid:88)

(cid:88)

(ck

i,j)2

k

i(cid:54)=j

ΩCR =

Ωcw-CR =

ΩV R =

(cid:88)

i(cid:54)=j

2
I(I − 1)
2
KI(I − 1)
1
I

(cid:88)

vi

i

Ωcw-V R =

1
KI

(cid:88)

(cid:88)

vk
i

k

i

∂ΩCR
∂zi,n
∂Ωcw-CR
∂zi,n
∂ΩV R
∂zi,n
∂Ωcw-V R
∂zi,n

=

=

=

=

4
N I(I − 1)

j(cid:54)=i

4
KI(I − 1)|Sk|
2
N I
2
KI|Sk|

(zi,n − µi)

Gradient
(cid:88)

ci,j(zj,n − µj)

i,j(zj,n − µk
ck

j ), n ∈ Sk

(cid:88)

j(cid:54)=i

(zi,n − µk

i ), n ∈ Sk

cw-VR except for not using the class information. We ex-
pected VR to hurt the performance of deep networks be-
cause it encourages all classes to have similar representation
in each unit. VR, however, turned out to be effective and
useful for performance enhancement. We provide a possible
explanation in the Experiments section.

Penalty Loss Functions and Gradients

The penalty loss functions of cw-CR and cw-VR are sim-
ilar to CR and VR, respectively, except that the values are
calculated for each class using the mini-batch samples with
the same class label. Also, gradients of CR and cw-CR are
related to those of VR and cw-VR as shown in Table 1. We
investigate more details of the equations in the following.

Interpretation of the gradients Among the gradient
equations shown in Table 1, the easiest to understand is VR’s
gradient. It contains the term zi,n − µi, indicating that the
representation zi,n of each sample n is encouraged to be-
come closer to the mean activation µi. In this way, each
unit’s variance can be reduced. For cw-VR, the equation
contains zi,n − µk
i instead of zi,n − µi. Therefore the repre-
sentation zi,n of a class k sample is encouraged to become
closer to the class mean activation µk
i . Clearly, the variance
reduction is applied per class by cw-VR.

For CR, the equation is less straightforward. As explained
in (Cogswell et al. 2015), a possible interpretation is that
the covariance term ci,j is encouraged to be reduced where
zj,n − µj acts as the weight. But, another possible interpre-
tation is that zj,n is encouraged to become closer to µj just
as in the case of VR, where ci,j acts as the weight. Note that
VR’s mechanism is straightforward where each unit’s vari-
ance is directly addressed in the gradient equation of activa-
tion i, but CR’s mechanism is slightly complicated where all
variances over all activations of j (j = 1, ..., I, where j (cid:54)= i)
are collectively addressed through the summation terms over
all j (j = 1, ..., I, where j (cid:54)= i). Thus, one can interpret CR
as a hybrid regularizer that wants either or both of covari-
ance and variance to be reduced. This can be the reason why
the visualizations of CR and VR are similar as will be shown
in Figure 2 later.

For cw-CR, it can be interpreted similarly. As in the re-

lationship between VR and cw-VR, cw-CR is the class-
wise counterpart of CR and it can be conﬁrmed in the
gradient equation: cw-CR has ck
j ) instead of
ci,j(zj,n −µj). As in our explanation of CR, cw-CR can also
be interpreted as trying to reduce either or both of covariance
and variance. The visualizations of cw-CR and cw-VR turn
out to be similar as well.

i,j(zj,n − µk

The interpretations can be summarized as follows. VR
and cw-VR aim to reduce activation variance whereas CR
and cw-CR additionally aim to reduce covariance. CR and
VR do not distinguish among different classes, but cw-CR
and cw-VR explicitly perform representation shaping per
class.

Activation squashing effect There is another important
effect that is not necessarily obvious from the gradient for-
mulations. For L1W (L1 weight regularization) and L2W
(L2 weight regularization), the gradients contain the weight
terms, and therefore the weights are explicitly encouraged
to become smaller. Similarly, our representation regularizers
include the activation terms zi,n and therefore the activations
are explicitly encouraged to become smaller (when activa-
tions become close to zero, the mean terms become close to
zero as well). Thus, a simple way to reduce the penalty loss
is to scale the activations to small values instead of satisfy-
ing the balance between the terms in the gradient equations.
This means that there is a chance for the learning algorithm
to squash activations just so that the representation regular-
ization term can be ignored. As we will see later in the next
section, indeed activation squashing happens when our reg-
ularizers are applied. Nonetheless, we will also show that
the desired statistical properties are sufﬁciently manifested
anyway. One might be able to prevent activation squashing
with another regularization technique, but such an experi-
ment was not in the scope of this work.

Experiments
In this section, we investigate performance improvements of
the four representation regularizers, where baseline, L1W,
L2W, CR, cw-CR, VR, and cw-VR are evaluated for im-
age classiﬁcation and reconstruction tasks. When a regu-
larizer (including L1W and L2W) was used for an evalu-

4

Table 2: Error performance (%) for CIFAR-10 CNN model.

Regularizer

Baseline
L1W
L2W
CR
cw-CR
VR
cw-VR

Optimizer

Adam
26.64 ± 0.16
26.46 ± 0.39
25.71 ± 0.98
24.96 ± 0.63
22.99 ± 0.58
21.44 ± 0.88
21.44 ± 0.88
21.44 ± 0.88
21.58 ± 0.21

Momentum
25.78 ± 0.37
25.73 ± 0.40
26.35 ± 0.54
26.72 ± 0.61
25.93 ± 0.59
25.01 ± 0.41
24.42 ± 0.31
24.42 ± 0.31
24.42 ± 0.31

Table 3: Error performance (%) for CIFAR-100 CNN model.

Regularizer

Baseline
L1W
L2W
CR
cw-CR
VR
cw-VR

16
45.75 ± 0.73
45.08 ± 1.53
45.28 ± 1.59
44.55 ± 1.10
43.50 ± 1.21
42.33 ± 1.03
41.38 ± 0.53
41.38 ± 0.53
41.38 ± 0.53

Number of Classes
64
58.02 ± 0.40
58.08 ± 1.18
57.47 ± 0.66
56.76 ± 0.86
54.24 ± 0.64
54.32 ± 0.40
54.23 ± 1.06
54.23 ± 1.06
54.23 ± 1.06

100
61.26 ± 0.52
60.97 ± 0.64
60.23 ± 0.31
59.88 ± 0.50
57.03 ± 0.73
57.68 ± 0.94
56.75 ± 0.64
56.75 ± 0.64
56.75 ± 0.64

ation scenario, the penalty loss weight λ was determined
as one of {0.001, 0.01, 0.1, 1, 10, 100} using 10,000 val-
idation samples. Once the λ was determined, performance
evaluation was repeated ﬁve times. Code is made avail-
able at https://github.com/snu-adsl/class_
wise_regularizer.

Image Classiﬁcation Task
Three popular datasets (MNIST, CIFAR-10, and CIFAR-
100) were used as benchmarks. An MLP model was used for
MNIST, and a CNN model was used for CIFAR-10/100. The
details of the architecture hyperparameters can be found in
Section A of the supplementary materials. All the regulariz-
ers were applied to the ﬁfth layer of the 6-layer MLP model
and the fully connected layer of the CNN model, and the
reason will be explained in the Layer Dependency section.
For L1W and L2W, we applied regularization to all the lay-
ers as well for comparison, but the performance results were
comparable to when applied to the ﬁfth layer. Mini-batch
size was increased to 500 for CIFAR-100 such that class-
wise operations can be appropriately performed but was kept
at the default value of 100 for MNIST and CIFAR-10. We
have tested a total of 20 scenarios where the choice of an
optimizer, number of classes, network size, or data size was
varied.

The results for two CIFAR-10 CNN scenarios are shown
in Table 2 and three CIFAR-100 CNN scenarios are shown
in Table 3. The rest of the scenarios including full cases of
MNIST MLP can be found in Section B of the supplemen-
tary materials. In the Table 2 and Table 3, it can be seen
that cw-VR achieves the best performance in 4 out of 5
cases and class-wise regularizers perform better than their
all-class counterparts except for one case. For the scenarios
shown in Table 3, we initially guessed that the performance

Table 4: Error performance (%) for ResNet-32/110 (CIFAR-
10). For ResNet-32, average of two experiments is shown.
For ResNet-110, we experimented ﬁve times and ‘best
(mean±std)’ is reported as in (He et al. 2016).

Model & Regularizer
ResNet-32
ResNet-32 + CR
ResNet-32 + cw-CR
ResNet-32 + VR
ResNet-32 + cw-VR
ResNet-110
ResNet-110 + CR
ResNet-110 + cw-CR
ResNet-110 + VR
ResNet-110 + cw-VR

He et al.
7.51

6.43 (6.61±0.16)

Ours
7.39
7.27
7.21
7.22
7.17
6.12 (6.31±0.14)
6.17 (6.26±0.05)
6.10 (6.18±0.10)
6.10 (6.17±0.05)
6.00 (6.18±0.15)

of class-wise regularizers would be sensitive to the number
of classes, but cw-VR performed well for all three cases. As
for the 20 scenarios that were tested, the best performing one
was cw-VR for 11 cases, VR for 5 cases, cw-CR for 2 cases,
and CR for 1 case. L1W and L2W were never the best per-
forming one, and the baseline (no regularization) performed
the best for only one case.

As mentioned earlier, in general, VR did not hurt per-
formance compared to the baseline. There are two possible
explanations. First, representation characteristics other than
variance are affected together by VR (see Table 5 in the next
section), and VR might have indirectly created a positive ef-
fect. Second, the cross-entropy term limits how much VR
performs variance reduction, and the overall effects might
be more complicated than a simple variance reduction.

To test a sophisticated and advanced DNN architecture,
we tried the four representation regularizers on ResNet-
32/110. ResNet is known as one of the best performing deep
networks for CIFAR-10, and we applied the four represen-
tation regularizers to the output layer without modifying the
network’s architecture or hyperparameters. The results are
shown in Table 4. All four turned out to have positive effects
where cw-VR showed the best performance again.

Image Reconstruction Task

In order to test a completely different type of task, we exam-
ined an image reconstruction task where a deep autoencoder
are used. Class information is used for representation reg-
ularization only. A 6-hidden layer autoencoder with a stan-
dard L2 objective function was used. Representation regular-
izers were only applied to the third layer because the repre-
sentations of the layer are considered as latent variables. The
other experiment settings are the same as the image classi-
ﬁcation tasks in the previous subsection. The reconstruction
error of the baseline is 1.44 × 10−2 and become reduced to
1.19 × 10−2 when cw-VR is applied. Result details can be
found in Section B of the supplementary materials. As in the
classiﬁcation tasks, class-wise regularizers performed better
than their all-class counterparts.

5

Figure 2: Visualization of the learned representations for MNIST. The plots in top and middle rows were generated in the same
way as in the Figure 1. The plots in the bottom row show the top three principle components of the representations.

Table 5: Quantitative evaluations of representation characteristics.

Regularizer Test error (%) ACTIVATION AMPLITUDE

Baseline
L1W
L2W
CR
cw-CR
VR
cw-VR

2.85 ± 0.11
2.85 ± 0.06
3.02 ± 0.40
2.50 ± 0.05
2.49 ± 0.10
2.65 ± 0.11
2.42 ± 0.06
2.42 ± 0.06
2.42 ± 0.06

4.93
4.53
4.76
0.50
0.63
1.35
0.63

COVARIANCE
(CR)
2.08
1.95
2.23
0.01
0.02
0.15
0.02

CORRELATION
(CR)
0.27
0.28
0.29
0.19
0.31
0.26
0.36

CW CORRELATION
(cw-CR)
0.21
0.22
0.21
0.15
0.19
0.17
0.25

VARIANCE
(VR)
9.05
7.78
8.38
0.04
0.06
0.58
0.05

N CW VARIANCE
(cw-VR)
1.33
1.33
1.36
1.37
0.95
1.52
0.74

Representation Characteristics
In this section, we investigate representation characteristics
when the regularizers are applied.

Visualization
In Figure 2, the 50th epoch plots are shown for the base-
line and four representation regularizers. L1W and L2W are
excluded because their plots are very similar to those of
the baseline. Principle Component Analysis (PCA) was also
performed over the learned representations, and the plots in
the bottom row show the top three principal components of
the representations (before ReLU). The ﬁrst thing that can be
noticed is that the representation characteristics are quite dif-
ferent depending on which regularizer is used. Apparently,
the regularizers are effective at affecting representation char-
acteristics. In the ﬁrst row, it can be seen that cw-VR mini-
mizes the activation overlaps among different classes as in-
tended. Because the gradient equation of cw-CR is related to
that of cw-VR, cw-CR also shows reduced overlaps. CR and
VR still show substantial overlaps because class information

was not used by them. In the second row, a linear correlation
can be observed in the scatter plot of the baseline, but such a
linear correlation is mostly removed for CR as expected. For
VR, still, linear correlations can be observed. For cw-CR and
cw-VR, it is difﬁcult to judge because many points do not
belong to the main clusters and their effects on correlation
are difﬁcult to guess. As we will see in the following quan-
titative analysis section, in fact, correlation was not reduced
for cw-CR and cw-VR. In the third row, it can be seen that
the cw-VR has the least overlaps when the ﬁrst three princi-
pal components are considered. Interestingly, a needle-like
shape can be observed for each class in the cw-VR’s plot.
The plots using learned representations after ReLU are in-
cluded in Section C of the supplementary materials. Over-
all, cw-VR shows the most distinct shapes compared to the
baseline.

Quantitative Analysis

For the same MNIST task that was used to plot Figure 1 and
Figure 2, the quantitative values of representation charac-

6

teristics were evaluated, and the results are shown in Table
5. Each is calculated using only positive activations and is
the average of representation statistics. For example, ACTI-
VATION AMPLITUDE is the mean of positive activations in
a layer. In the third column (ACTIVATION AMPLITUDE), it
can be conﬁrmed that indeed the four representation regular-
izers cause activation squashing. Nonetheless, the error per-
formance is improved as shown in the second column. For
CR, covariance is supposed to be reduced. In the fourth col-
umn (COVARIANCE), it can be conﬁrmed that the covariance
of CR is much smaller than that of the baseline. The small
value, however, is mostly due to the activation squashing. In
the ﬁfth column (CORRELATION), the normalized version of
covariance is shown. The correlation of CR is conﬁrmed to
be smaller than that of the baseline, but the reduction rate is
much smaller compared to the covariance that was affected
by the activation squashing. In any case, CR indeed reduces
correlation among hidden units. For cw-CR, class-wise cor-
relation (CW CORRELATION) is expected to be small, and it
is conﬁrmed in the sixth column. The value 0.19, however,
is larger than CR’s 0.15 or VR’s 0.17. This is an example
where not only cw-CR but also other representation regular-
izers end up reducing CW CORRELATION because the reg-
ularizers’ gradient equations are related. For VR, variance
should be reduced. In the seventh column (VARIANCE), the
variance of VR is indeed much smaller than that of the base-
line, but again other representation regularizers have even
smaller values because their activation squashing is more se-
vere than that of VR. For cw-VR, class-wise variance is sup-
posed to be small. Normalized class-wise variance is shown
in the last column (N CW VARIANCE), and it is conﬁrmed
that cw-VR is capable of reducing N CW VARIANCE. (Nor-
malization was performed by mapping activation range of
each hidden unit to [0,10] such that activation squashing ef-
fect can be removed.)

Layer Dependency

In the previous sections, we have consistently applied the
representation regularizers to the upper layers that are closer
to the output layer. This is because we have found that it
is better to target the upper layers, and two exemplary re-
sults are shown in Figure 3. In Figure 3 (a), the performance
improvement becomes larger as the representation regular-
ization targets upper layers. In fact, the best performance
is observed when the output layer is regularized. In Figure
3 (b), similar patterns can be seen over the convolutional
layers, but the performance degrades when applied to fully
connected or output layers. This phenomenon is probably
relevant to how representations are developed in deep net-
works. Because the lower layers often represent many sim-
pler concepts, regularizing the shapes of representations can
be harmful. For the upper layers, a smaller number of more
complex concepts are represented and therefore controlling
representation characteristics (e.g., reduction of activation
overlaps) might have a better chance to improve the perfor-
mance.

(a) MNIST

(b) CIFAR-100

Figure 3: Layer dependency of representation regularizers.
The x-axis indicates layers where regularizers are applied.
CR and cw-CR are excluded in (b) due to the high computa-
tional burden of applying them to the convolutional layers.
The result of CIFAR-10 can be found in Section D of the
supplementary materials.

(cid:80)
n

Discussion and Conclusion
A well-known representation regularizer is L1 representa-
tion regularizer (L1R) whose penalty loss function can be
(cid:80)
written as ΩL1R = 1
i |zi,n|. L1R is known to in-
N I
crease representational sparsity. CR and VR have second-
order terms in their penalty loss functions, but L1R does not.
As a consequence, L1R’s class-wise counterpart turns out to
have the same penalty function as L1R’s (this is trivial to
prove). So, one might say that L1R is also a class-wise rep-
resentation regularizer just like cw-CR and cw-VR. When
it is used, however, there is no need for the true class in-
formation. For instance, when true label information is not
available for an autoencoder problem, one might use L1R
and still have a chance to obtain the beneﬁts of class-wise
regularization. In our study, we have not included L1R such
that we can better focus on the difference between all-class
and class-wise regularizers. When cw-VR was directly com-
pared with L1R in terms of performance, we have found that
cw-VR performs better than L1R for 12 out of the 21 test
scenarios (ResNet-110 and an autoencoder were not tested).
Overall, however, it looks like both L1R and cw-VR are very
effective representation regularizers for improving perfor-
mance of deep networks.

Dropout and batch normalization are very popular regu-
larizers, but they are fundamentally different because they
are not ‘penalty cost function’ regularizers. Instead, they are
implemented by directly affecting the feedforward calcula-
tions during training. Dropout has been shown to have sim-
ilar effects as ensemble and data-augmentation through its
noisy training procedure, and such beneﬁts are not obtain-
able with a penalty regularizer. On the other hand, there is a
common belief that ‘dropout reduces co-adaptation (or pair-
wise correlation).’ Reducing correlation is something that
can be done by penalty regularizers as we have shown in
this work. When we applied the same quantitative analy-
sis on the test scenarios while using dropout, however, we
have found that dropout does not really reduce the corre-
lation. This indicates that the belief might be an incorrect
myth. Batch normalization has been known to have a sta-

7

bilization effect because it can adjust covariate shift even
when the network is in the early stage of training. Thus a
higher learning rate can be used for faster training. Such an
effect is not something that can be achieved with a penalty
regularizer. But when dropout and batch normalization were
directly compared with the two representation regularizers
cw-VR and L1R in terms of performance, we have found
that at least one of cw-VR and L1R outperforms both of
dropout and batch normalization for 16 out of the 20 test
cases (ResNet-32/110 and an autoencoder were not tested).
Despite the performance results for our benchmark scenar-
ios, it is important to recognize that dropout and batch nor-
malization might be able to play completely different roles
that cannot be addressed by the penalty regularizers. When
such additional roles are not important for a task as in our
test scenarios, there is a very high chance of penalty regular-
izers outperforming dropout and batch normalization.

Performance improvement through representation regu-
larizers, especially by utilizing class information, has been
addressed in this work and other previous works. The un-
derlying mechanism for the improvement, however, is still
unclear. Recently, (Choi et al. 2018) showed that some of
the statistical properties of representations cannot be the di-
rect cause of performance improvement. The representation
regularizers might have tuning effects instead.

With the enormous efforts of the research community,
deep learning is becoming better understood, and regulariza-
tion techniques are evolving with the in-depth understand-
ings. In this work, we have addressed the fundamentals of
using class information for penalty representation regular-
ization. The results indicate that class-wise representation
regularizers are very efﬁcient and quite effective, and they
should be considered as important and high-potential con-
ﬁgurations for learning of deep networks.

Acknowledgments
This work was supported by the National Research Foun-
dation of Korea (NRF) grant funded by the Korea govern-
ment (MSIT) (No. NRF-2017R1E1A1A03070560) and by
SK telecom Co., Ltd.

References
Ba, J. L.; Kiros, J. R.; and Hinton, G. E. 2016. Layer nor-
malization. arXiv preprint arXiv:1607.06450.
Belharbi, S.; Chatelain, C.; Herault, R.; and Adam, S. 2017.
Neural networks regularization through invariant features
learning. arXiv preprint arXiv:1709.01867.
Cheung, B.; Livezey, J. A.; Bansal, A. K.; and Olshausen,
B. A. 2014. Discovering hidden factors of variation in deep
networks. arXiv preprint arXiv:1412.6583.
Choi, D.; Lee, K.; Shin, C.; and Rhee, W. 2018. On the
statistical and information-theoretic characteristics of deep
network representations. arXiv preprint arXiv:1811.03666.
Cogswell, M.; Ahmed, F.; Girshick, R.; Zitnick, L.; and
Reducing overﬁtting in deep net-
Batra, D.
arXiv preprint
works by decorrelating representations.
arXiv:1511.06068.

2015.

8

Glorot, X.; Bordes, A.; and Bengio, Y. 2011. Deep sparse
In Proceedings of the Four-
rectiﬁer neural networks.
teenth International Conference on Artiﬁcial Intelligence
and Statistics, 315–323.
He, K.; Zhang, X.; Ren, S.; and Sun, J. 2016. Deep resid-
In Proceedings of the
ual learning for image recognition.
IEEE conference on computer vision and pattern recogni-
tion, 770–778.
Hoerl, A. E., and Kennard, R. W. 1970. Ridge regression:
Biased estimation for nonorthogonal problems. Technomet-
rics 12(1):55–67.
Ioffe, S., and Szegedy, C. 2015. Batch normalization: Accel-
erating deep network training by reducing internal covariate
In International Conference on Machine Learning,
shift.
448–456.
Jiang, Z.; Lin, Z.; and Davis, L. S. 2011. Learning a dis-
criminative dictionary for sparse coding via label consistent
k-svd. In Computer Vision and Pattern Recognition (CVPR),
2011 IEEE Conference on, 1697–1704. IEEE.
Li, J.-B.; Pan, J.-S.; and Chu, S.-C. 2008. Kernel class-
Information Sciences
wise locality preserving projection.
178(7):1825–1835.
Liao, R.; Schwing, A.; Zemel, R.; and Urtasun, R. 2016.
In Advances
Learning deep parsimonious representations.
in Neural Information Processing Systems, 5076–5084.
Salimans, T., and Kingma, D. P. 2016. Weight normaliza-
tion: A simple reparameterization to accelerate training of
deep neural networks. In Advances in Neural Information
Processing Systems, 901–909.
Shi, H.; Zhu, X.; Lei, Z.; Liao, S.; and Li, S. Z. 2016. Learn-
ing discriminative features with class encoder. In Proceed-
ings of the IEEE Conference on Computer Vision and Pat-
tern Recognition Workshops, 46–52.
Srivastava, N.; Hinton, G. E.; Krizhevsky, A.; Sutskever, I.;
and Salakhutdinov, R. 2014. Dropout: a simple way to pre-
vent neural networks from overﬁtting. Journal of machine
learning research 15(1):1929–1958.
Tibshirani, R. 1996. Regression shrinkage and selection via
the lasso. Journal of the Royal Statistical Society. Series B
(Methodological) 267–288.
Wen, W.; Wu, C.; Wang, Y.; Chen, Y.; and Li, H. 2016a.
Learning structured sparsity in deep neural networks.
In
Advances in Neural Information Processing Systems, 2074–
2082.
Wen, Y.; Zhang, K.; Li, Z.; and Qiao, Y. 2016b. A dis-
criminative feature learning approach for deep face recog-
nition. In European Conference on Computer Vision, 499–
515. Springer.
Yang, H.-M.; Zhang, X.-Y.; Yin, F.; and Liu, C.-L. 2018.
Robust classiﬁcation with convolutional prototype learning.
In Proceedings of the IEEE Conference on Computer Vision
and Pattern Recognition, 3474–3482.
Zhang, C.; Bengio, S.; Hardt, M.; Recht, B.; and Vinyals,
O. 2016. Understanding deep learning requires rethinking
generalization. arXiv preprint arXiv:1611.03530.

Supplementary Materials

A Architectures and Hyperparameters

A.1 Default Settings
By default, we chose ReLU, SGD with Adam optimizer, and a learning rate of 0.0001 for networks. Mini-batch size is set to
100 by default but is set to 500 only for CIFAR-100. We evaluated validation performance for {0.001, 0.01, 0.1, 1, 10, 100}
and chose the one with the best performance for each regularizer and condition. Then, performance was evaluated through ﬁve
trainings using the pre-ﬁxed weight value. In the case of CIFAR-10 and CIFAR-100, the last 10,000 instances of 50,000 training
data were used as the validation data, and after the weight values are ﬁxed, the validation data was merged back into training
data. All experiments in this work were carried out using TensorFlow 1.5.

A.2 MNIST
For classiﬁcation tasks, a 6-layer MLP that has 100 hidden units per layer was used. For image reconstruction task, a 6-layer
autoencoder was used. The number of hidden units in each layer is 400, 200, 100, 200, 400, and 784 in the order of hidden
layers.

A.3 CIFAR-10 and CIFAR-100
A CNN with four convolutional layers and one fully connected layer was used for both of CIFAR-10 and CIFAR-100. Detailed
architecture hyperparameters are shown in Table 6.

Table 6: Default architecture hyperparameters of CIFAR-10/100 CNN model.

Layer
Convolutional layer-1
Convolutional layer-2
Max-pooling layer-1
Convolutional layer-3
Max-pooling layer-2
Convolutional layer-4
Max-pooling layer-3
Fully connected layer

# of ﬁlters (or units)
32
64
-
128
-
128
-
128

Filter size Conv. stride

3 × 3
3 × 3
-
3 × 3
-
3 × 3
-
-

1
1
-
1
-
1
-
-

Pooling size
-
-
2 × 2
-
2 × 2
-
2 × 2
-

Pooling stride
-
-
2
-
2
-
2
-

9

Table 7: Results for MNIST MLP model. The best performing regularizer in each condition (each column) is shown in bold.
For the default condition, the standard values of data size=50k and layer width=100 were used.

B Result Details

Regularizer

Default

Baseline
L1W
L2W
CR (DeCov)
cw-CR
VR
cw-VR

2.85 ± 0.11
2.85 ± 0.06
3.02 ± 0.40
2.50 ± 0.05
2.49 ± 0.10
2.65 ± 0.11
2.42 ± 0.06
2.42 ± 0.06
2.42 ± 0.06

Data size

Layer width

1k
11.41 ± 0.19
11.64 ± 0.27
11.38 ± 0.18
11.63 ± 0.24
10.62 ± 0.05
14.42 ± 0.14
10.44 ± 0.18
10.44 ± 0.18
10.44 ± 0.18

5k
6.00 ± 0.07
5.96 ± 0.11
5.86 ± 0.10
6.05 ± 0.06
5.80 ± 0.15
5.80 ± 0.15
5.80 ± 0.15
6.90 ± 0.22
5.90 ± 0.12

2
31.62 ± 0.07
31.67 ± 0.15
31.66 ± 0.13
34.80 ± 0.25
31.50 ± 0.11
32.39 ± 0.13
30.34 ± 0.06
30.34 ± 0.06
30.34 ± 0.06

8
10.52 ± 0.57
11.02 ± 0.58
10.65 ± 0.23
10.25 ± 0.74
10.81 ± 1.11
9.22 ± 0.28
9.22 ± 0.28
9.22 ± 0.28
10.01 ± 0.63

Table 8: Results for CIFAR-10 CNN model. The best performing regularizer in each condition (each column) is shown in bold.
For the default condition, the standard values of data size=50k and layer width=128 were used and Adam optimizer was applied.

Regularizer

Default

Data size

Layer width

Optimizer

1k

5k

32

512

Momentum

RMSProp

Baseline
L1W
L2W
CR (DeCov)
cw-CR
VR
cw-VR

26.64 ± 0.16
26.46 ± 0.39
25.71 ± 0.98
24.96 ± 0.63
22.99 ± 0.58
21.44 ± 0.88
21.44 ± 0.88
21.44 ± 0.88
21.58 ± 0.21

56.07 ± 0.36
56.64 ± 0.91
56.57 ± 0.22
57.40 ± 2.11
53.50 ± 1.05
53.90 ± 0.97
51.93 ± 1.09
51.93 ± 1.09
51.93 ± 1.09

43.95 ± 0.43
44.32 ± 0.66
44.87 ± 0.81
45.16 ± 0.94
42.15 ± 0.64
42.15 ± 0.64
42.15 ± 0.64
42.33 ± 0.57
43.00 ± 0.95

28.54 ± 0.63
28.65 ± 1.14
28.54 ± 0.30
26.45 ± 0.22
26.40 ± 0.62
24.96 ± 0.26
24.96 ± 0.26
24.96 ± 0.26
25.81 ± 0.64

28.52 ± 1.06
27.96 ± 0.72
27.79 ± 0.83
28.65 ± 1.21
28.54 ± 1.01
26.61 ± 0.47
26.46 ± 0.25
26.46 ± 0.25
26.46 ± 0.25

25.78 ± 0.37
25.73 ± 0.40
26.35 ± 0.54
26.72 ± 0.61
25.93 ± 0.59
25.01 ± 0.41
24.42 ± 0.31
24.42 ± 0.31
24.42 ± 0.31

28.52 ± 1.21
28.30 ± 0.99
28.02 ± 0.88
27.94 ± 0.43
27.77 ± 0.88
26.06 ± 0.72
26.06 ± 0.72
26.06 ± 0.72
26.19 ± 1.35

Table 9: Results for CIFAR-100 CNN model. The best performing regularizer in each condition (each column) is shown in
bold. For the default condition, the standard values of data size=50k, layer width=128, and number of classes=100 were used.

Regularizer

Default

Data Size

Layer Width

1k

5k

32

512

4

Classes

16

Baseline
L1W
L2W
CR (DeCov)
cw-CR
VR
cw-VR

61.26 ± 0.52
60.97 ± 0.64
60.23 ± 0.31
59.88 ± 0.50
57.03 ± 0.73
57.68 ± 0.94
56.75 ± 0.64
56.75 ± 0.64
56.75 ± 0.64

90.89 ± 0.30
91.33 ± 0.37
90.53 ± 0.39
91.70 ± 0.14
90.85 ± 0.29
91.43 ± 0.32
90.45 ± 0.22
90.45 ± 0.22
90.45 ± 0.22

82.21 ± 0.72
82.3 ± 0.6
82.05 ± 0.70
82.47 ± 0.41
81.29 ± 0.62
81.85 ± 0.38
81.03 ± 0.57
81.03 ± 0.57
81.03 ± 0.57

62.41 ± 0.34
62.23 ± 0.58
62.78 ± 0.36
60.47 ± 0.63
60.47 ± 0.63
60.47 ± 0.63
61.41 ± 0.67
61.35 ± 0.45
60.67 ± 0.59

61.30 ± 0.64
60.92 ± 0.47
61.55 ± 0.99
60.70 ± 0.94
58.02 ± 0.25
56.87 ± 0.74
56.87 ± 0.74
56.87 ± 0.74
56.91 ± 0.73

24.95 ± 2.36
24.95 ± 2.36
24.95 ± 2.36
26.75 ± 2.04
26.90 ± 1.24
27.25 ± 1.51
26.35 ± 1.04
26.10 ± 1.81
26.40 ± 1.08

45.75 ± 0.73
45.08 ± 1.53
45.28 ± 1.59
44.55 ± 1.10
43.50 ± 1.21
42.33 ± 1.03
41.38 ± 0.53
41.38 ± 0.53
41.38 ± 0.53

64

58.02 ± 0.40
58.08 ± 1.18
57.47 ± 0.66
56.76 ± 0.86
54.24 ± 0.64
54.32 ± 0.40
54.23 ± 1.06
54.23 ± 1.06
54.23 ± 1.06

Table 10: Mean squared error of deep autoencoder.

Regularizer
Baseline
CR
cw-CR
VR
cw-VR

Mean Squared Error
1.44 × 10−2 ± 3.36 × 10−4
1.29 × 10−2 ± 2.44 × 10−4
1.22 × 10−2 ± 3.63 × 10−4
1.29 × 10−2 ± 5.16 × 10−4
1.19 × 10−2 ± 2.48 × 10−4
1.19 × 10−2 ± 2.48 × 10−4
1.19 × 10−2 ± 2.48 × 10−4

10

C Principal Component Analysis of Learned Representations

(a) Baseline (Before ReLU)

(b) Baseline (After ReLU)

(c) L1W (Before ReLU)

(d) L1W (After ReLU)

(e) L2W (Before ReLU)

(f) L2W (After ReLU)

Figure 4: The top three principal components of learned representations (Baseline, L1W, and L2W). Note that representation
characteristics of L1W and L2W are very similar to those of the baseline because weight decay methods do not directly shape
representations.

11

(a) CR (Before ReLU)

(b) CR (After ReLU)

(c) cw-CR (Before ReLU)

(d) cw-CR (After ReLU)

(e) VR (Before ReLU)

(f) VR (After ReLU)

(g) cw-VR (Before ReLU)

(h) cw-VR (After ReLU)

Figure 5: The top three principal components of learned representations (representation regularizers).

12

D Layer Dependency

Figure 6:Layer dependency of representation regularizers on CIFAR-10 CNN model. The x-axis indicates layers where regular-
izers are applied. CR and cw-CR are excluded because of the high computational burden of applying them to the convolutional
layers.

13

