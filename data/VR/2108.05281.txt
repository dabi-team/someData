1
2
0
2

g
u
A
1
1

]

R
G
.
s
c
[

1
v
1
8
2
5
0
.
8
0
1
2
:
v
i
X
r
a

"Deep Cut": An all-in-one Geometric Algorithm for
Unconstrained Cut, Tear and Drill of Soft-bodies in Mobile VR

Manos Kamarianakis∗
University of Crete, ORamaVR
Heraklion, Greece

John Petropoulos
Michail Tamiolakis
University of Crete, ORamaVR
Heraklion, Greece

Nick Lydatakis
University of Crete, ICS-FORTH,
ORamaVR
Heraklion, Greece

Paul Zikas
University of Crete, ICS-FORTH,
ORamaVR
Heraklion, Greece

Antonis Protopsaltis
University of Western Macedonia,
ORamaVR
Veria, Greece

George Papagiannakis
University of Crete, ICS-FORTH,
ORamaVR
Heraklion, Greece

Figure 1: A linear-blend skinned 3D model (left), current state-of-the-art of predefined cut, tear and drill (center), our ’deep-cut’
framework for unconstrained, arbitrary cuts, tears, drills with soft-body deformations in mobile VR (right)

ABSTRACT
In this work, we present an integrated geometric framework: "deep-
cut" that enables for the first time a user to geometrically and
algorithmically cut, tear and drill the surface of a skinned model
without prior constraints, layered on top of a custom soft body
mesh deformation algorithm. Both layered algorithms in this frame-
work yield real-time results and are amenable for mobile Virtual
Reality, in order to be utilized in a variety of interactive application
scenarios. Our framework dramatically improves real-time user
experience and task performance in VR, without pre-calculated or
artificially designed cuts, tears, drills or surface deformations via
predefined rigged animations, which is the current state-of-the-art

∗Corresponding Author, kamarianakis@uoc.gr

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGGRAPH ASIA ’21, December 2021, Tokyo, Japan
© 2021 Association for Computing Machinery.
ACM ISBN 978-x-xxxx-xxxx-x/YY/MM. . . $15.00
https://doi.org/10.1145/nnnnnnn.nnnnnnn

in mobile VR. Thus our framework improves user experience on one
hand, on the other hand saves both time and costs from expensive,
manual, labour-intensive design pre-calculation stages.

CCS CONCEPTS
• Computing methodologies → Mesh geometry models; Virtual
reality; • Mathematics of computing → Mesh generation.

KEYWORDS
Cutting Algorithm, Tear Algorithm, Drill Algorithm, Skinned Model,
Soft-Body Deformation, Virtual Reality

ACM Reference Format:
Manos Kamarianakis, Nick Lydatakis, Antonis Protopsaltis, John Petropou-
los, Michail Tamiolakis, Paul Zikas, and George Papagiannakis. 2021. "Deep
Cut": An all-in-one Geometric Algorithm for Unconstrained Cut, Tear and
Drill of Soft-bodies in Mobile VR. In Proceedings of ACM Conference (SIG-
GRAPH ASIA ’21). ACM, New York, NY, USA, 5 pages. https://doi.org/10.
1145/nnnnnnn.nnnnnnn

 
 
 
 
 
 
SIGGRAPH ASIA ’21, December 2021, Tokyo, Japan

Kamarianakis, Protopsaltis, Lydatakis et al.

1 INTRODUCTION
Since their inception, rigged animated models [Magnenat-thalmann
et al. 1988] have become a major research topic in real-time com-
puter graphics. Experts have been experimenting with various
animation and deformation techniques, pushing the boundaries
of realism and real-time performance. As the industry of Virtual,
Augmented Reality (VR, AR) rapidly grows, increasingly more com-
plicated and optimized methods are being developed. An example
of such tools in computer graphics involve the ability to perform
cuts, tears and drills on the surface of a skinned model [Bruyns
et al. 2002; Kamarianakis and Papagiannakis 2021]. Such algorithms
are utilized with the aim to increase user immersion and be used
as sub-modules of even more complex operations. However, their
scale-up for the extreme real-time conditions of virtual reality en-
vironments and the specifically mobile, all-in-one un-tethered VR
computing environments, remains an active field of research.

The need to interact in a shared virtual world with other partici-
pants soon led to the need of more realistic deformation techniques
and interaction paradigms. Certain rigid objects, e.g., a sponge, are
expected to change in real world when external forces are applied
on them. It feels natural to try and replicate this behavior in VR too
[Macklin et al. 2014; Papagiannakis et al. 2018; Terzopoulos et al.
1987]. One way to accomplish this is via the so-called soft-body
mesh deformation [Papagiannakis et al. 2020], an algorithm that
essentially dictates how the vertices of a mesh should affect one an-
other when an external force is applied somewhere on the surface
of the model.

Performing interactive cuts on a model is not something new;
current bibliography describes a great number of how one may
accomplish this. However, most techniques cannot be applied in
applications demanding a high frame rates, such as computer games
or demanding VR applications. Moreover, if cuts are indeed imple-
mented in such an application they are almost always constrained:
camera, model or user degrees of freedom i.e. the user cannot freely
cut anywhere on the model; a set of predefined cuts and their anima-
tions are usually created by VR designers or artists where each one
of them is played/triggered by the user’s specific and constrained
actions.

In this work, we propose a framework that allows the user to
perform on a rigged soft-body mesh, actions such as cuts, tears and
drills on the model’s skin surface, without any constraints. Our algo-
rithms are based on pure geometric operations on the surface mesh,
and therefore are amenable to yield real-time results, even in low-
spec devices such as mobile VR Head Mounted Displays (HMDs).
An offline pre-processing of the model’s mesh allows the creation
of suitable data structures that store both vertex neighbours (used
in cut/tear/drill) and a custom particles grid with weights assign-
ment (used in soft-body deformations). This allows the effective,
latency-free application of multiple consecutive actions as the data
structures only need to be incrementally updated and not re-created
from scratch. Our methods can be implemented in modern game
engines such as Unity and Unreal Engine; convincing results are
illustrated in the video accompanying this work.

The significance of our work lies on the fact that in the current
state-of-the-art, cuts, tears and drills of a rigged 3D model in VR
are predefined and require a VR designer to manually manipulate

and rig the model for several labour-intensive hours, depending on
the model complexity, to achieve a single operation of the above.
Using our methods, the VR designer is removed from the loop,
while similar results are obtained at a fraction of time (actually
milliseconds). Moreover , in cases where a simple change on a cut,
tear, or drill is needed, our proposed algorithms may be applied
continuously and incrementally until a satisfying result is achieved,
saving a lot of processing time.

Our work is organized as follows: first we provide an outline of
our methodology (Section 2), we then present our results (Section 3)
followed by our conclusions and future work (Section 4).

2 OUR METHODOLOGY
The key components of our proposed method are the Cut/Tear/Drill
algorithms, described in Section 2.1, and the Soft Mesh Deformation
algorithms, described in Section 2.2. To effectively combine these
methods and achieve real-time performance, we used a variety of
optimization techniques and tools; you may see Section 2.3 for more
details.

2.1 Algorithms for Cut, Tear and Drill
The idea of performing cuts on a model’s skin has been a highly
researched topic [Bruyns et al. 2002]. We may distinguish two main
categories on how this may be achieved.

The first approach is via Finite Element Methods (FEM), which
is mainly used to slice parts of concrete objects, using tetrahedral
meshes [Wu et al. 2013]. This is a process requiring heavy pre-
processing and near real-time results can only be achieved using
powerful CPU/GPU machines.

The second approach utilizes elementary geometric subpredi-
cates (e.g., intersection of a face with a given plane) on the model
mesh. Such techniques require far less process power and therefore
are suitable for VR environments, especially collaborative ones.

Below we provide an outline of how we perform cuts, tears and
drills, following the second approach (see Figure 2). These algo-
rithms are explained in detail in [Kamarianakis and Papagiannakis
2020] and [Kamarianakis and Papagiannakis 2021].

Cutting Algorithm. The user inputs a plane that intersects the
model. The algorithm detects the intersection points of the mesh
with the plane, re-triangulates the mesh and splits the original
mesh into multiple models (usually two), that correspond to the
submodels having vertices on each side of the plane only.

Tearing Algorithm. The user inputs the tearing tool’s (scalpel’s)
starting and ending positions. Let Π be the plane defined by the
tool’s end position and the initial intersection point of the model
with the scalpel. We evaluate the intersection points of Π with the
model that lie between the scalpel’s starting and ending position,
and correspond them to the tear. These points are duplicated, re-
triangulated and moved away from the plane by a fraction of its
normal, forming a visible tear.

Drilling Algorithm. The user inputs the radius and the end
points of the axis of a cyclical drill that intersects the model. The
model’s mesh is up-projected to a plane Π, perpendicular to the
drill’s axis, and the mesh vertices intersected by the drill are de-
tected. After removing all parts of the mesh “inside” the drill, we

"Deep Cut": An all-in-one Geometric Algorithm for Unconstrained Cut, Tear and Drill of Soft-bodies in Mobile VR

SIGGRAPH ASIA ’21, December 2021, Tokyo, Japan

Figure 2: Performing (A) Cut, (B) Tear and (C) Drill on a tri-
angular mesh. The red line represents a plane in (A) and (B).
For the Drill case, we simply project the 3D-mesh to a plane
and therefore reduce the face versus drill predicate to a sim-
pler 2D-triangle versus circle.

re-triangulate the mesh on Π and down-project it to the original
model.

After performing any of these actions, we assign weights to the
newly introduced intersection points, using the update weight func-
tion described in [Kamarianakis and Papagiannakis 2021]. This al-
lows the final model, or submodels in case of cut, to be (re)animated
in a artifact-free way.

Details on the preprocessing of the model and the data-structures

used to perform either of the methods are found in Section 2.3.

2.2 Soft Body Meshes
There are various methods to implement soft body mesh deforma-
tion for skinned models [Nealen et al. 2006]. In most methods, the
vertices of the mesh are clustered into groups, called particles. A
vertex can belong to multiple particles and a particle is centered
at the average position of all vertices it contains. Deciding a suit-
able clustering is not an easy task; it depends on the topology of
the model and the desired deformation behavior the user wants to
achieve.

In our method, the clustering was determined by the following
property: every particle may contain vertices within a range of 0.8
units, using the euclidean distance. This resulted in a total of 224
particles (see Figure 3). Notice that using a smaller range would
result in more particles, and therefore more accurate deformations.
However, this would impact performance by causing worse running-
times during the deformation algorithm, as shown in Table 2.

When a user applies a force to a particle, its position changes and
this movement affects the position of all vertices of the particle. The
particle’s velocity is changed, proportionally to the displacement,
always pointing to its initial position (simulating elasticity). For
skinned models, the velocity and displacement of the particles are
calculated based on the pose of the model at the existing time,

Figure 3: The 224 particles of the cactus model used for the
soft body deformation.

similar to how the skinning algorithm works for the vertices. The
physics part is natively handled by the game engine employed.

In order to apply soft-bodies clustering for cut, teared or drilled
objects, we update the clustering map by adding or removing ver-
tices, depending on the case. Simple rules allow fast updates with-
out the need to add more particles. An example of such a rule is
that, vertices belonging to opposite sides of a tear, although close
enough, cannot belong to the same particle, as this would result to
non-physically correct deformation results.

2.3 Optimization Techniques
To perform either of the three main algorithms (cut, tear or drill) in
near real-time, we have created data structures containing, mainly,
vertex neighbours and face neighbours. Currently, we maintain two
adjacency data structures, tailored to optimize the running times
of the tear and the drill algorithm respectively. When importing
the model, we initially check and remove any duplicate vertices
that may occur as they cause artifacts in our algorithms. Then the
data structures are populated; this is the most time-consuming
part of the preprocessing. After the initialization is complete, the
data structures are updated every time the user performs one of
the algorithms. The time required to update them is miniscule
compared to the initialization time and is a fraction of the time
required to perform the algorithm itself. A summary of the running
times for the preprocessing and the main algorithms can be found
in Table 1.

The visualization quality of the drilling algorithm was also opti-
mized. Specifically, if one drills the model in an area and the number
of the edges on the contour of the hole drops below a user-defined
threshold (e.g., 10), then the drilled part looks more like a poly-
gon rather than a circle. In this case, we split each face involved
into 4 subtriangles by introducing new edges that connect the mid
points of their edges. This is done recursively until the number of
intersection points with the updated mesh are above the threshold.
Of course, for each introduced vertex, we assign weights to allow
subsequent model deformation.

Important under-the-hood optimizations regard the (re)design
of the algorithms described in [Kamarianakis and Papagiannakis
2021] to take advantage of multi-threaded or parallel processing
allowed by modern game engines such as Unity and Unreal Engine.
Since basic geometric subpredicates such as the intersection of a
face of the mesh with a plane (used multiple times when cutting or
tearing) can be down in parallel, we have carefully structured our

SIGGRAPH ASIA ’21, December 2021, Tokyo, Japan

Kamarianakis, Protopsaltis, Lydatakis et al.

Table 1: Running times regarding the cactus model. The
model optimization time corresponds to the time we need to
detect and delete duplicate vertices of the mesh. The prepro-
cessing times required for the tear, drill and clustering are
only performed during the initial import and can be done in
parallel in different threads. The running times of cut, tear
and drill grow linearly with respect to the number of inter-
section points and include the time required to update the
data structure that was initialized during the model prepro-
cess.

Procedure
Model Optimization
Preprocess for Tear
Preprocess for Drill
Soft Body Clustering

Cut

Tear

Drill

Running time
0.005 sec
13.620 sec
0.876 sec
41.275 sec
0.440 sec
(156 intersection points)
0.095 sec
(26 intersection points)
0.201 sec
(27 intersection points)

Table 2: Running times for the soft body deformation for
the cactus model. As expected, the running times are pro-
portional to the number of the particles.

Particles number Running time min-max

224
452
863

1.5 msec - 3.7 msec
1.6 msec - 4.2 msec
2.0 msec - 6.7 msec

algorithms to achieve minimum running times. The updates of the
data structures are also down in parallel, after each algorithm call.

3 RESULTS
The results of our methods are depicted in Figure 1 and are further
illustrated in the video accompanying this work. . We depict a
cactus model of 15819 vertices and 25267 triangles that is getting cut,
teared and/or drilled. In all cases, further soft-body deformations
and/or model animation are possible. Our methods are also partially
implemented in a VR medical training application [Zikas et al. 2021],
running on a modern game engine.

Table 1 contains the time required to perform the model prepro-
cessing and individually apply one of the algorithms for cut, tear
or drill. In Table 2, we describe the time required to evaluate the
soft body deformation depending on the number of the particles.
All running times were obtained using an Intel core i7 7700HQ at
2.8GHZ with an Nvidia GTX 1050ti m (8GB RAM) graphics card.

4 CONCLUSIONS & FUTURE WORK
We have presented an algorithm that allows a user to perform un-
constrained cuts, tears and drills on a rigged model in VR, while pre-
serving its ability to be deformed as a soft-body. Since our method is

geometry-based, it does not require significant GPU/CPU resources,
it is amenable to work in real-time VR for even low-spec devices,
making it ideal for mobile VR. We expect that it will eventually
pave the way to alter the modern landscape of such VR interactions,
where similar operations are mostly predefined and most state-of-
the-art expensive, physically-correct methods (e.g. Finite Element
Methods) cannot be used as they require significant computing
resources and/or produce low fps results unsuitable for mobile VR
applications. In an area of the 3D model that the surface triangles
are larger in comparison to the drilling diameter and not partic-
ularly dense, the resulting hole looks more like a polygon than
a drilled circle. That’s due to the low number of the intersection
points of the circle with the triangles in the drilling area. In the
current state of our drilling algorithm, when we increase the model
density the texture coordinates are showing some artifacts due to
non-proper UV recalculation. In the future, we will be addressing
this artifact.

In the future, we also intend to optimize further our ’deep-cut’
framework so that they can achieve higher frame-rates with com-
pute and geometry shaders for the pre-processing stage; so far, we
have minimum latency after applying any algorithm that in some
cases is negligible as the user usually takes some time for mental
preparation between actions. However, we are planning to support
consecutive tears, something that is not possible at this stage.

As cuts, tears and drills are especially useful for VR medical
training scenarios, we would like to explore how our framework
could adapt to the collaborative needs of such applications. Lastly,
we would like to see how deep learning could be used to help
identify which type of clustering is best suited, based on the model
and the action(s) the user would like to perform.

ACKNOWLEDGMENTS
This project was co-financed by European Regional Development
Fund of the European Union and Greek national funds through
the Operational Program Competitiveness, Entrepreneurship and
Innovation, under the call RESEARCH – CREATE - INNOVATE
(project codes:T1EDK-01149 and T1EDK-01448). The project also
received funding from the European Union’s Horizon 2020 research
and innovation programme under grant agreements No 871793(AC-
CORDION) and No 101016509(CHARITY).

REFERENCES
Cynthia D Bruyns, Steven Senger, Anil Menon, Kevin Montgomery, Simon Wildermuth,
and Richard Boyle. 2002. A survey of interactive mesh-cutting techniques and a
new method for implementing generalized interactive mesh cutting using virtual
tools. The journal of visualization and computer animation 13, 1 (2002), 21–42.
Manos Kamarianakis and George Papagiannakis. 2020. Deform, Cut and Tear a Skinned
Model Using Conformal Geometric Algebra. In Computer Graphics International
Conference. Springer, 434–446.

Manos Kamarianakis and George Papagiannakis. 2021. An All-in-One Geometric
Algorithm for Cutting, Tearing, and Drilling Deformable Models. Advances in
Applied Clifford Algebras 31, 3 (Jul 2021), 58. https://doi.org/10.1007/s00006-021-
01151-6

Miles Macklin, Matthias Müller, Nuttapong Chentanez, and Tae-Yong Kim. 2014. Uni-
fied Particle Physics for Real-Time Applications. ACM Transactions on Graphics
(TOG) 33, 4 (2014), 104.

Nadia Magnenat-thalmann, Richard Laperrire, Daniel Thalmann, and Université De
Montréal. 1988. Joint-Dependent Local Deformations for Hand Animation and
Object Grasping. In In Proceedings on Graphics interface ’88. 26–33.

Andrew Nealen, Matthias Müller, Richard Keiser, Eddy Boxerman, and Mark Carlson.
2006. Physically based deformable models in computer graphics. In Computer
graphics forum, Vol. 25. Wiley Online Library, 809–836. Issue 4.

"Deep Cut": An all-in-one Geometric Algorithm for Unconstrained Cut, Tear and Drill of Soft-bodies in Mobile VR

SIGGRAPH ASIA ’21, December 2021, Tokyo, Japan

George Papagiannakis, Nick Lydatakis, Steve Kateros, Stelios Georgiou, and Paul Zikas.
2018. Transforming Medical Education and Training with VR Using M.A.G.E.S.. In
SIGGRAPH Asia 2018 Posters (Tokyo, Japan) (SA ’18). Association for Computing
Machinery, New York, NY, USA, Article 83, 2 pages. https://doi.org/10.1145/3283289.
3283291

George Papagiannakis, Paul Zikas, Nick Lydatakis, Steve Kateros, Mike Kentros,
Efstratios Geronikolakis, Manos Kamarianakis, Ioanna Kartsonaki, and Giannis
Evangelou. 2020. MAGES 3.0: Tying the Knot of Medical VR. In ACM SIG-
GRAPH 2020 Immersive Pavilion (Virtual Event, USA) (SIGGRAPH ’20). Associ-
ation for Computing Machinery, New York, NY, USA, Article 6, 2 pages. https:
//doi.org/10.1145/3388536.3407888

Demetri Terzopoulos, John Platt, Alan Barr, and Kurt Fleischer. 1987. Elastically de-
formable models. In Proceedings of the 14th annual conference on Computer graphics
and interactive techniques. 205–214.

Jun Wu, Christian Dick, and Rüdiger Westermann. 2013. Efficient collision detection
for composite finite element simulation of cuts in deformable bodies. The Visual
Computer 29, 6 (June 2013), 739–749. https://doi.org/10.1007/s00371-013-0810-8
Paul Zikas, Manos Kamarianakis, Ioanna Kartsonaki, Nick Lydatakis, Steve Kateros,
Mike Kentros, Efstratios Geronikolakis, Giannis Evangelou, Achilles Apostolou,
Paolo Alejandro Alejandro Catilo, and George Papagiannakis. 2021. Covid-19 - VR
Strikes Back: Innovative Medical VR Training. Association for Computing Machinery,
New York, NY, USA. https://doi.org/10.1145/3450615.3464546

