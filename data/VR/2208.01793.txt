Segmented Learning for Class-of-Service
Network Trafﬁc Classiﬁcation

Yoga Suhas Kuruba Manjunath‡, Sihao Zhao‡, Hatem Abou-zeid∗,
Akram Bin Sediq∗, Ramy Atawia∗, Xiao-Ping Zhang‡
‡Department of Electrical, Computer and Biomedical Engineering, Ryerson University, Toronto, ON, Canada
*Ericsson Canada, Ottawa, Canada

2
2
0
2

g
u
A
3

]
P
S
.
s
s
e
e
[

1
v
3
9
7
1
0
.
8
0
2
2
:
v
i
X
r
a

Abstract—Class-of-service (CoS) network trafﬁc classiﬁcation
(NTC) classiﬁes a group of similar trafﬁc applications. The CoS
classiﬁcation is advantageous in resource scheduling for Internet
service providers and avoids the necessity of remodelling. Our
goal is to ﬁnd a robust, lightweight, and fast-converging CoS
classiﬁer that uses fewer data in modelling and does not require
specialized tools in feature extraction. The commonality of
statistical features among the network ﬂow segments motivates us
to propose novel segmented learning that includes essential vector
representation and a simple-segment method of classiﬁcation. We
represent the segmented trafﬁc in the vector form using the EVR.
Then, the segmented trafﬁc is modelled for classiﬁcation using
random forest. Our solution’s success relies on ﬁnding the optimal
segment size and a minimum number of segments required in
modelling. The solution is validated on multiple datasets for
various CoS services, including virtual reality (VR). Signiﬁcant
ﬁndings of the research work are i) Synchronous services that
require acknowledgment and request to continue communication
are classiﬁed with 99% accuracy, ii) Initial 1,000 packets in any
session are good enough to model a CoS trafﬁc for promising
results, and we therefore can quickly deploy a CoS classiﬁer,
and iii) Test results remain consistent even when trained on
one dataset and tested on a different dataset. In summary, our
solution is the ﬁrst to propose segmentation learning NTC that
uses fewer features to classify most CoS trafﬁc with an accuracy
of 99%. The implementation of our solution is available on
GitHub.

Index Terms—network trafﬁc classiﬁcation (NTC), class of
service (CoS), virtual reality trafﬁc. machine learning, segmented
learning.

I. INTRODUCTION

The surge in Internet trafﬁc has posed a signiﬁcant challenge
for Internet service providers (ISPs) to strategize the resource
allocation for a better quality of service (QoS) [1]. The ISPs
use network trafﬁc classiﬁcation (NTC) to understand the traf-
ﬁc [2] and decide on network management. The conventional
multi-class NTC [3]–[6] classiﬁes the network trafﬁc into
respective applications such as Facebook, Netﬂix, YouTube
trafﬁc, etc. Conventional NTC needs to be remodelled for
every new application type released on the Internet, which
is expensive in training and adds up to the maintenance cost
for ISPs [7], [8]. Unlike the conventional multi-class NTC,
the class-of-service (CoS) classiﬁer groups similar applications

This work is supported in part by the Ontario Center of Innovation (OCI)
ENCQOR 5G development program and the Natural Sciences and Engineering
Research Council of Canada (NSERC) under Grant RGPIN-2020-04661.
(Corresponding author: Xiao-Ping Zhang, e-mail: xzhang@ryerson.ca)

and maps them into one CoS type. For example, Skype, Hang-
outs, and Facebook chat services are treated as “chat” CoS
types instead of three different classes. The CoS classiﬁcation
is more suitable and offers less latency in scheduling for
better QoS [9]. The CoS NTC is getting more attention from
researchers to provide better solutions because of its necessity
in faster resource scheduling for a better QoS [10].

Interactive (e.g., VoIP), bulk data transfer (e.g., FTP),
streaming (e.g., video), and transactional (e.g., chat) CoS
types are investigated in [11]. The linear discriminant analysis
and the K-nearest neighbours-based solutions achieve 43%
and 86% accuracy, respectively. The solution has a complex
feature engineering process, which uses packet-level, ﬂow-
level, connection-level, intra-ﬂow level, and multi-ﬂow level
features to obtain statistics for CoS classiﬁcation, and the
performance is not satisfactory. Shapley value-based super-
features are used to represent the CoS trafﬁc data in [12].
The preprocessing requires 266 features to obtain the Shapley
values. The work uses a neural network in classiﬁcation.
Currently, the solution stands as the state-of-the-art (SOA)
solution with an accuracy of 92.5%. However, the result is
validated on only 10% of the dataset. No works consider the
network trafﬁc in segments for classiﬁcation to take advantage
of the commonality of statistical features in trafﬁc features.

Based on the literature review, we observe the following
issues in the current CoS classiﬁers: i) complex feature engi-
neering methods that are impractical in a real-world scenario,
ii) less robust solutions evaluated on a limited dataset, iii)
an extensive number of packets in modelling, iv) complex
classiﬁers with huge training complexity and v) lack of taking
advantage of properties of trafﬁc segments. The research gaps
motivate us to ﬁnd a simple feature engineering technique that
is feasible in a real-world scenario, and a quicker method to
model a robust CoS classiﬁer that learns the CoS services
holistically to avoid retraining.

We propose a novel segmented learning that includes an
essential vector representation (EVR) and a simple-segment
method of classiﬁcation (S2MC) algorithms. Segmented learn-
ing treats the network trafﬁc in segments and learns the unique
and common properties among the segments pertaining to a
CoS class. The trafﬁc packets are collected with four primary
features: packet direction, inter-arrival time, packet length, and
timestamp segments. The EVR forms one feature vector per

 
 
 
 
 
 
segment with eleven elements: packet size statistics, inter-
arrival time statistics, the number of packets in the uplink
and downlink directions, and time duration from the segment.
The main aim of segmented learning is to ﬁnd the ideal
segment size (N ) so that the statistical feature shows less
or no variation, and a minimum number of segments (ST )
is required for modelling a classiﬁer. Therefore, segmented
learning involves ﬁnding (N, ST ) pair by employing a self-
learning heuristic technique that uses a random forest. The
solution is validated on different datasets [13]–[15] that consist
of several CoS types such as ﬁle transfer, remote cloud service,
video, VoIP, virtual reality (VR), chat, audio, and peer to peer
(P2P). Hence, we provide a robust CoS classiﬁer. In addition,
we show the generalization of the solution by training on one
dataset and testing on a different dataset.

The implementation of our work is available in GitHub
[16]. A few crucial ﬁndings of the work are as follows. i)
Synchronous services (e.g. video, VR streaming and many
others) that requires acknowledgements from the other end are
modelled with 99% accuracy. ii) Test accuracy is consistent
even when trained on one dataset and testing on the other
dataset for synchronous services. iii) We ﬁnd that N =20 and
ST =50 provide best performance for both datasets used in the
work. iv) The maximum packet length, maximum mean, and
standard deviation of inter-arrival time consistently provide
more information for classiﬁcation using random forest. v)
Asynchronous services (e.g. Chat, email and many others) are
not modelled accurately when delay occurs in communica-
tion. vi) Different parameters such as user inactivity, delay
in networks or congestion are not effectively captured in
segmented learning. We will discuss more on synchronous and
asynchronous services in later sections.

The contributions of the paper are as follows.

• We develop a lightweight CoS classiﬁer that uses fewer
features captured by simple sniffer tools like Wireshark
or TCPdump.

• The new segmented learning, which includes EVR and
S2MC, has a superior classiﬁcation compared to state-
of-the-art solution [12].

• We prove the robustness of the solution by validating on
various CoS trafﬁc services (virtual reality, video, chat,
and many others) and on multiple datasets.

• To the best of the author’s knowledge, ours is the ﬁrst
lightweight, robust, and high-performing CoS classiﬁer.

II. SEGMENTED LEARNING

Segmented learning treats the trafﬁc in segments. Then,
statistics of segments are modelled for classiﬁcation. The
fruition of segmented learning depends on ﬁnding an optimal
segment size N and a minimum number of segments ST
required for modelling. We introduce the EVR and S2MC to
ﬁnd segment size and number of segments pair (N, ST ) for
successful classiﬁcation of CoS trafﬁc.

Fig. 1. Representing vn for the nth segment. We show the representation of
EVR for 15th and 115th segment from FTP.

Algorithm 1 EVR Algorithm
Data: total number of segments required (ST ), segment size

(N ) and Raw trafﬁc data with time, pkt len, iat, dir.

Result: S
initialization
S = [ ]
n = 0
while n != ST do

initialize data packets and time
while length(data packets) != segment size (N ) do

data = collect data packets
time = timer value

end

vn = stats(data.pktlen, data.iat, data.up, data.dn, time)
S.append(vn)
n + +

end
return S

A. Essential Vector Representation (EVR)

In the EVR, trafﬁc segments are represented in a vector
form, denoted by vn, where n represents the index of the
vector. The process of the vector formation using EVR is
illustrated in Fig. 1. Every segment consists of a N number
of packets with 4 features in each, i.e., packet direction, inter-
arrival time, packet length, and timestamp. The vector vn
consists of 11 features derived from the above 4 features. The
ﬁrst 4 are the packet length’s statistical information (minimum,
maximum, average, and standard deviation derived from pkt
len in the ﬁgure). The second 4 features are the statistical
information of the packet inter-arrival time (iat in the ﬁgure).
The next feature is the number of packets in uplink and
downlink directions. Finally, the last feature is the time taken
to form the trafﬁc segment. In total, eleven features are used
in the proposed method, as shown in Fig. 1.

Algorithm 1 shows the EVR implementation that is invoked
by the S2MC algorithm, which will be explained in the
next section. Algorithm 1 requires the segment size (N ), the
number of segments required (ST ) and the raw trafﬁc data with

B. Simple-Segment Method of Classiﬁcation (S2MC)

The fruition of the solution majorly depends on ﬁnding
the optimal segment size (number of packets in a segment)
N . That means we need to ﬁnd segment sizes that produce
less or no variation in statistical information. The statistical
information can vary for a given CoS trafﬁc at different stages
in a session. The minimum number of segments ST required
for modelling the CoS trafﬁc is also an imperative parameter.
With an appropriate ST , we can save time in modelling.
Because of the high randomness of CoS trafﬁc, we employ the
S2MC that employs a heuristic machine learning method to
ﬁnd the ST value. We observe variation in the statistical infor-
mation at the beginning of the session due to irregular packet
transmissions related to protocol negotiations. However, that
is unique to the CoS types, and statistical information remains
constant throughout the session. Intuitively, the solution can
perform well if we choose the packets at the beginning and
a few packets from the middle part of a session. We can use
irregularities and stationarity at the beginning and middle of
the session, respectively.

The N and ST are positive integers that can take val-
ues from 0 to ∞. At this stage, it is difﬁcult to ﬁnd the
values analytically because of randomness and hence, we
employ a heuristic method to take advantage of machine
learning. The S2MC chooses different values from the pool
N = {10, 20, · · · , 50} and ST = {10, 20, · · · , 50}. Any value
less than 10 is too low for N because segment information
might be statistically insigniﬁcant, and we choose 50 as the
maximum to not exhaust the data. A small value for ST might
underﬁt, and a huge value might overﬁt. Therefore, the S2MC
uses the random forest classiﬁer to evaluate the performance
and optimize the algorithm for a given network with a given
type of CoS. The (N , ST ) pair might not be universal and
depends on the network’s behaviour and health. However, the
found pair value by Algorithm 2 holds good for all CoS types
within a network. In our experiment, the (N , ST ) remains the
same for both datasets.

Algorithm 2 S2MC model and segment size selection
Data: CoS trafﬁc data, benchmarkAccuracy
Result: ﬁnal model, N
initialization
for ST = 10; ST (cid:54) 50; ST += 10 do

for Nf = 10; Nf (cid:54) 50; Nf += 10 do

trainData = EVR(ST , Nf , CoS data)
testData = EVR((L − ST ), Nf , CoS data)
model = RandomForest(10,trainData)
performanceMetrics = model.test(testData)
if performanceMetrics > benchmarkAccuracy then

N = Nf
ﬁnalModel = model
break

end

end

end
return ﬁnal model, N

Fig. 2. Histogram of packet length (len), inter-arrival time (iat), and direction
(dir) for ﬁle transfer service. (a,b,c) shows histogram for the 15th segment with
N =20 packets. (d,e,f) shows histogram for the 115th segment with N =20
packets. Histograms at different parts of trafﬁc look similar, showing that the
statistical information of segments can be used to represent the trafﬁc data.

the basic features. EVR algorithm perform segmentation and
vectorization based on the input. Every vector vn is stacked
to form a matrix S. Stacking action is performed by “append”
in Algorithm 1.

We analyze the rationality behind the 11 statistical features
present in vn. Asynchronous services such as chat and VoIP
use smaller packets than synchronous services such as video
and ﬁle transfer. Because the service type and quality of ser-
vice are essential in synchronous services. Therefore, statistics
of packet size provide unique information on different CoS.
Inter-arrival time is another critical feature. The delay-sensitive
services like VoIP and chat show aggressive packet bursts
in both directions and smaller inter-arrivals. However, if the
users are inactive or take a long time to respond, the inter-
arrival time might be more signiﬁcant in those services. Video
or ﬁle transfer services use the cache and spend mechanism
[17], which causes a slightly longer inter-arrival time because
the server transmits data in bulk. The client caches the data
in a buffer. Once the buffer gets depleted to lower than the
threshold, it sends a request for the remaining data to the
server. However, the inter-arrival time will be less in those data
transferred in bulk, even for ﬁle transfer or video streaming
in
services. We capture this behavioural
the statistics from the trafﬁc segments, and we observe that
these characteristics remain almost constant if we choose the
segment size N correctly. We can observe in Fig. 2 that
statistical information of packet length, inter-arrival time and
direction is almost the same in the 15th and 115th segments for
N =20 for ﬁle transfer service. However, we see the differences
in statistical information of features for different values of N .
How to select the value of N will be explained in the next
subsection. Therefore, the 11-feature vector with statistical
information can provide a good representation of different CoS
types.

information well

TABLE I
COS LABELLING OF DATASET I AND DATASET II

I

t
e
s
a
t
a
D

I
I

t
e
s
a
t
a
D

CoS label
File
transfer
Video
VoIP
Remote
cloud
VR
File
transfer
Video
VoIP
Chat
Audio
P2P
Email

service type

Synchronous

Synchronous
Synchronous

services

FTP, OneDrive

RTP, YouTube, UDP video
JoinMe, line, Skype, Zoom

Synchronous

ncuCloud, RDP, VmWare, Xen

Synchronous

cloud and local gaming

Synchronous

Synchronous
Synchronous
Asynchronous
Asynchronous
Asynchronous
Asynchronous

FTP, SCP etc.

Vimeo, Youtube, Netﬂix
Facebook voice, Skype voice, etc.
Facebook chat, ICQ etc.
Spotify
Bittorrent
SMPTS

B. Performance Metrics

We use accuracy, recall, precision, F1 score and false-
negative rate (FNR) as the performance metrics. The equation
of all performance metrics are given below:

Accuracy =

T P + T N
T P + T N + F P + F N

,

Recall =

T P
T P + F N

,

P recision =

T P
T P + F P

,

F 1 = 2 ×

P recision × Recall
P recision + Recall
F N
T P + F N

,

F N R =

where, FP is the false-positive that signiﬁes the ﬂows when the
ﬂow is not present in reality. False-negative (FN) represents no
detection when the ﬂows present in reality. True-negative (TN)
shows correct no detection. The correct detection is captured
in true-positive (TP). The false-negative rate (FNR) in the
NTC problem is important because we need to know when
our model indicates no trafﬁc, whereas the trafﬁc is present in
reality. Generally, a model with a higher F1 score is robust and
reliable. A model with lower FNR is better in classiﬁcation.
Ideally, a model with a higher F1 score and lower FNR is
preferred.

C. Performance on the Real-world Datasets

We perform three different experiments. Dataset I is used
for both training and testing in the ﬁrst experiment. In the
second experiment, for training and testing Dataset II is used.
Finally, in the third experiment, Dataset II is used in training
and Dataset I in testing. The performance of the solution for
different values of N and ST is shown in Fig. 4 for both
datasets. We observe 96.1% accuracy when N =50 and ST =30
for Dataset I from Fig 4 (a). Values greater than ST =30 provide
lower accuracy for N =50. The results show that with greater
N values, segmented learning cannot capture the holistic

Fig. 3. Flow chart of the segmented learning that includes the EVR and
S2MC

Algorithm 2 shows the model and segment size selection
using S2MC. L − ST represent the size of the testing data.
L is the size of the original data. The algorithm employs
optimization for every number from the N and ST pool to ﬁnd
the best pair. Random forest is trained based on the selected
ST number of segments, and performance is analyzed on the
new data. We use 97% as the benchmark accuracy for Dataset I
and 99% for Dataset II. The benchmark accuracies are selected
arbitrarily. If it is lower than the benchmark accuracy, the
algorithm selects new values from the N and ST pool and
continues until the algorithm converges. Once the algorithm
converges, we keep the N value required for the deployment
and trained model on the ST number of segments. The general
ﬂow of segmented learning is shown in Fig. 3 that consists of
EVR and S2MC.

III. EXPERIMENTAL SETUP & RESULTS

The experiments are done on a computer with Intel i9
processor, 32 GB RAM and Nvidia RTX 2080S GPU with 8
GB RAM. The required software is implemented in python
using TensorFlow and Keras APIs along with sci-kit learn
libraries.

A. Dataset Preparation

We use the datasets from [13], [14] and [15]. We combine
the datasets from [13] and [14] to form Dataset I, which
consists of 16 different services and 850,857 trafﬁc packets
in total. Dataset II from [15] provides the trafﬁc captures of
19 different services with 6,977,991 packets in total. Both
datasets represent the real-world trafﬁc. We use four features,
namely timestamps, packet size, uplink and downlink inter-
arrival time, and packet direction as shown in Fig. 1. It does
not require scanning the contents of the packets to obtain those
four features. Therefore, our method does not breach privacy,
and simple sniffers like Wireshark [18] or TCPDump [19] are
good enough. Moreover, we can obtain the packet captures
at any point in the network. Our solution is the ﬁrst to use
only 4 features in trafﬁc classiﬁcation problems to the best of
our knowledge. We combine the similar applications and label
them with CoS types. The services and labels of Dataset I and
Dataset II are shown in Table I.

characteristics required for classiﬁcation. The observation is
similar on Dataset II. Therefore, we provide results for N =20
and ST =50 and these values are consistent in all the three
experiments. ST greater than 50 shows poor performance
mainly because of data exhaustion.

(a)

(b)

Fig. 4. Effects of different values of N and ST on Dataset I (a) and Dataset
II (b) modelling. We ﬁnd the best accuracy when N =20 and ST =50 in both
cases.

Our solution shows an accuracy of 97.13% and an F1
score of 97.14% in experiment 1 as given by Fig. 5. In the
second experiment, we obtain 99.15% accuracy and 99.36%
F1 score as given by Fig. 5. We notice that Dataset II is
highly unbalanced, which is one of the reasons for miss-
classiﬁcations. The number of test segments, accuracy per
class, and FNR in both experiments are given in Table II.
Classes like FTP, Video, and VoIP are modelled perfectly
in both experiments as given by the table. Email and P2P
services show FNR of 46% and 42%, respectively. We observe
the variations in statistical information among the segments
from these services because of asynchronous timeout in the
protocols.

In the third experiment, we use FTP, video, and VoIP CoS
type from Dataset II in training and test the same CoS types

Fig. 5. Results of performance metrics on test set of Dataset I and Dataset II

TABLE II
ACCURACY AND FNR FOR DATASET I AND DATASET II

I

t
e
s
a
t
a
D

I
I

t
e
s
a
t
a
D

CoS label

File transfer
Video
VoIP
Remote cloud
VR
File transfer
Video
VoIP
Chat
Audio
P2P
Email

Number of test
segments
9849
5153
12948
4202
10143
286971
6504
49817
647
54
3803
757

Accuracy
(%)
98.07
99.89
99.54
98.47
98.28
99.86
99.96
99.85
99.82
99.44
99.52
99.78

FNR

0.04
0.0005
0.014
0.07
0.02
0.001
0.02
0.009
0.19
0
0.42
0.46

TABLE III
ACCURACY AND FNR COMPARISON OF OUR SOLUTION WITH PRIOR
WORK.

CoS class

File transfer
Video
VoIP
chat
Audio
P2P
Email
Accuracy (%)

SOA work [12]
FNR

Our solution
FNR

0.27
0.22
0.36
0.35
0.27
0.04
0.14
92.5

0.001
0.02
0.009
0.19
0
0.42
0.46
99.13

but from Dataset I. We notice 99.8% accuracy and 99.11% F1
score in that case. As expected, synchronous communication
CoSs such as video, VoIP and VR, have better results which
is observed in the third experiment.

D. Feature Importance

The essential features that provide information in the ran-
dom forest classiﬁer are shown in Fig. 6 for both datasets.
The impurity-based feature importance is calculated using the
Scikit-learn library [20]. In the ﬁgure, 0 represents the mini-
mum contribution, and 1 represents the maximum contribution
from the features towards classiﬁcation. We can see from Fig.
6 that, in Dataset I, min. and max. packet length provides
more information than the mean and std of the packet length.
Also, max., mean, and std of inter-arrival time, the number of
downlink packets, and time duration all together provide good
information in classiﬁcation. In Dataset II, max., mean, and
std of packet length provide more information. In addition,
max., mean, and std of inter-arrival time also provide good
information in classiﬁcation.

E. Result Comparison

The second experiment explained in Section III-C uses the
same dataset as in the SOA [12]. Because of the unavailability
of the feature extraction tool used in [12], we could not
reproduce the work. However, the datasets used in the SOA
and our work are the same. Hence, we compare the results with
those of the SOA paper. The results published in SOA paper

Fig. 6. Feature importance in the S2MC classiﬁer

[12] are based on 10% of their dataset. On the contrary, we use
1,000 packets from each CoS trafﬁc for training and the rest for
testing. The exact number of test segments in our experiment
is shown in Table II. Except for P2P and Email, our method
achieves lower FNR for all other CoS types, and the overall
accuracy is 99.13%, whereas the SOA achieves only 92.5% as
shown in Table III. In our method, we observe that the CoS
type, which uses asynchronous communication [21] with more
extensive delays, is not appropriately modelled. In our dataset,
P2P and Email are asynchronous types of communication with
massive delays. Chat is another asynchronous type, but there
are no considerable delays in the dataset. Hence, in Table III,
we can observe that chat is the third-worst performing class.

IV. CONCLUSION AND FUTURE WORK

We develop a novel segmented learning that includes the
EVR and S2MC algorithms. We represent the CoS trafﬁc in
segments to model a trafﬁc classiﬁer. Then, S2MC determines
the number of segments required for modelling to achieve
superior classiﬁcation performance. The proposed method is
validated using multiple test scenarios that contain a number of
real-world class-of-service network trafﬁc ﬂows. We employ
multiple performance metrics to study the performance of
the solution and show that it outperforms the state-of-the-
art solution [12]. To the best of our knowledge, ours is the
ﬁrst work to classify more than 6 CoS trafﬁc, including the
latest hot trend VR trafﬁc. Furthermore, our method exhibits
exceptional results compared to the current solutions and
stands as the state-of-the-art method for quick convergence,
generalized, lightweight and robust CoS NTC.

Moving forward in the research, we need to investigate
the modelling of asynchronous CoS types that
introduce
irregularities and abnormalities. A statistical variation imposes
complexity in capturing the holistic characteristics of such
asynchronous trafﬁc. We need to test the solution in multiple
networks to ﬁnd the fruition of segmented learning in differ-
ent conditions. We wish to explore incremental learning to
improve the scalability of model and avoiding training from
scratch to save time during deployment.

REFERENCES

[1] IMT, “Report ITU-R m.2370-0,” Available at https://www.itu.int/dms

pub/itu-r/opb/rep/R-REP-M.2370-2015-PDF-E.pdf.

[2] M. Finsterbusch, C. Richter, E. Rocha, J. Muller, and K. Hanssgen,
“A survey of payload-based trafﬁc classiﬁcation approaches,” IEEE
Commun. Surveys Tuts., vol. 16, no. 2, pp. 1135–1156, 2013.

[3] M. Lopez-Martin, B. Carro, A. Sanchez-Esguevillas, and J. Lloret, “Net-
work trafﬁc classiﬁer with convolutional and recurrent neural networks
for Internet of Things,” IEEE Access, vol. 5, pp. 18 042–18 050, 2017.
[4] V. Tong, H. A. Tran, S. Souihi, and A. Mellouk, “A novel QUIC trafﬁc
classiﬁer based on convolutional neural networks,” in 2018 IEEE Global
Communications Conference (GLOBECOM), 2018, pp. 1–6.

[5] H. Yao, P. Gao, J. Wang, P. Zhang, C. Jiang, and Z. Han, “Capsule
network assisted IoT trafﬁc classiﬁcation mechanism for smart cities,”
IEEE Internet Things J., vol. 6, no. 5, pp. 7515–7525, 2019.

[6] Y. Manjunath, S. Zhao, and X.-P. Zhang, “Time-distributed feature
learning in network trafﬁc classiﬁcation for Internet of Things,” in IEEE
7th World Forum on Internet of Things (WF-IoT 2021), 2021 (In press)
arXiv:2109.14696.

[7] F. Pacheco, E. Exposito, M. Gineste, C. Baudoin, and J. Aguilar,
“Towards the deployment of machine learning solutions in network traf-
ﬁc classiﬁcation: A systematic survey,” IEEE Communications Surveys
Tutorials, vol. 21, no. 2, pp. 1988–2014, 2019.

[9] H. Ekstr¨om, “QoS control

[8] J. Zhao, X. Jing, Z. Yan, and W. Pedrycz, “Network trafﬁc classiﬁcation
for data fusion: A survey,” Information Fusion, vol. 72, pp. 22–47, 2021.
in the 3GPP evolved packet system,”
IEEE Commun. Mag., vol. 47, no. 2, p. 76–83, Feb. 2009. [Online].
Available: https://doi.org/10.1109/MCOM.2009.4785383

[10] P. Mehta and R. Shah, “A survey of network based trafﬁc classiﬁcation

methods,” Database Systems Journal, vol. 7, no. 4, pp. 24–31, 2017.

[11] M. Roughan, S. Sen, O. Spatscheck, and N. Dufﬁeld, “Class-of-service
mapping for QoS: a statistical signature-based approach to IP trafﬁc
classiﬁcation,” in Proceedings of the 4th ACM SIGCOMM conference
on Internet measurement, 2004, pp. 135–148.

[12] S. Chowdhury, B. Liang, and A. Tizghadam, “Explaining class-of-
service oriented network trafﬁc classiﬁcation with superfeatures,” in
Proceedings of the 3rd ACM CoNEXT Workshop on Big DAta, Machine
Learning and Artiﬁcial Intelligence for Data Communication Networks,
2019, pp. 29–34.

[13] K. Chiu, “network service trafﬁc,” Available at https://dx.doi.org/10.

21227/c84w-nj38, 2020.

[14] S. Zhao, H. Abou-zeid, R. Atawia, Y. S. K. Manjunath, A. B. Sediq, and
X.-P. Zhang, “Virtual reality gaming on the cloud: A reality check,” in
2021 IEEE Global Communications Conference (GLOBECOM), 2021,
pp. 1–6.

[15] G. Draper-Gil, A. H. Lashkari, M. S. I. Mamun, and A. A. Ghorbani,
“Characterization of encrypted and vpn trafﬁc using time-related,” in
Proceedings of the 2nd international conference on information systems
security and privacy (ICISSP).

sn, 2016, pp. 407–414.

[16] “S2MC method for CoS network trafﬁc classiﬁcation,” https://github.

com/yoga-suhas-km/S2MC-for-CoS.

[17] R. Dubin, A. Dvir, O. Pele, and O. Hadar, “I know what you saw last
minute—encrypted http adaptive video streaming title classiﬁcation,”
IEEE Trans. Inf. Forensics Security, vol. 12, no. 12, pp. 3039–3049,
2017.

[18] U. Lamping and E. Warnicke, “Wireshark user’s guide,” Interface, vol. 4,

no. 6, p. 1, 2004.

[19] F. Fuentes and D. C. Kar, “Ethereal vs. tcpdump: a comparative study
on packet snifﬁng tools for educational purpose,” Journal of Computing
Sciences in Colleges, vol. 20, no. 4, pp. 169–176, 2005.

[20] S. Erwan, “Trees, forests, and impurity-based variable importance,”

2020.

[21] S. Vonderwell, “An examination of asynchronous communication expe-
riences and perspectives of students in an online course: A case study,”
The Internet and higher education, vol. 6, no. 1, pp. 77–90, 2003.

