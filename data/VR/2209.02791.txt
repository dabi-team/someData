2
2
0
2

p
e
S
4
1

]
T
A
.
h
t
a
m

[

2
v
1
9
7
2
0
.
9
0
2
2
:
v
i
X
r
a

Spherical Coordinates from Persistent Cohomology

Nikolas C. Schonsheck∗ and Stefan C. Schonsheck†

Abstract

We describe a method to obtain spherical parameterizations of arbitrary data through the
use of persistent cohomology and variational optimization. We begin by computing the second-
degree persistent cohomology of the ﬁltered Vietoris-Rips (VR) complex of a data set X. We
extract a cocycle α from any signiﬁcant feature and deﬁne an associated map α : V R(X) →
S2. We use this map as an infeasible initialization for a variational optimization problem
with a unique minimizer, up to rigid motion. We employ an alternating gradient descent/
M¨obius transformation update method to solve the problem and generate a more suitable, i.e.,
smoother, representative of the homotopy class of α. We show that this process preserves the
relevant topological feature of the data and converges to a feasible optimum. Finally, we conduct
numerical experiments on both synthetic and real-world data sets to show the eﬃcacy of our
proposed approach.

1 Introduction

Representing high dimensional data in a lower dimension through non-linear dimensionality reduc-
tion (NLDR) algorithms is a key step in understanding complex data. Diﬀerent NLDR methods
attempt to preserve diﬀerent key properties of the data, such as global structure [3], local neighbor-
hoods [27], statistical properties [31] or manifold constraints [19], while simultaneously simplifying
the representation of the information contained in the dataset [30]. Recently, algorithms that can
preserve various topological properties have been of particular interest [5, 8, 9]. In many applications,
preserving topological features of data, such as “holes” of various dimensions, is key to downstream
tasks including classiﬁcation, regression, and novel data generation [28]. In this work, we generalize
the ideas of de Silva et al.
[8] to a higher dimension, producing topologically-invariant spherical
parameterizations of data sets as represented by simplicial complexes.

Simplicial complexes are natural generalizations of graphs, capable of encoding higher-dimensional
information. From a theoretical standpoint, they are useful in that they provide a “rigid” model for
topological spaces that can be represented by a ﬁnite sample of points from the space [3]. Moreover,
most reasonable spaces can be represented by a simplicial complex up to homotopy equivalence.
In applications to data science, their advantages are even more numerous. For instance, whereas
graphs contain only vertices and edges, which capture binary relations, simplicial complexes are built
from vertices, edges, and their analogs in higher dimensions—namely n-simplices—and can encode
relationships between any number of points. Simplicial complexes can also be easily represented
on a computer, and there are tractable algorithms and software packages—such as Ripser [2] and
Eirene [15]—that can calculate their topological invariants.

In this paper, we develop a method to ﬁnd spherical parameterizations of simplicial complexes
that have nontrivial topology as seen by second-degree cohomology. This method is based on an
understanding that instructions for an oriented winding of triangular faces (i.e., 2-simplices) of a
simplicial complex X can be extracted from any cocycle in second-degree cohomology. Given a

∗University of Delaware, Department of Mathematical Sciences
†University of California Davis, Department of Mathematics, TETRAPODS Institute of Data Science

1

 
 
 
 
 
 
cocycle and list of faces, we deﬁne a variational problem with a unique optimum up to rigid motion.
The resulting map X → S2 is useful for both data visualization and downstream analysis.
In
summary, our main contributions are as follows.

• A generalization of the circular coordinates method of de Silva et al. [8] to spherical coordi-

nates.

• A deﬁnition of discrete simplicial harmonic energy for maps between simplicial complexes and

the unit sphere based on oriented winding, or degree.

• A generalized discrete simplicial spring energy, based on the energy above, which can be useful
for noisy or non-uniformly sampled data including in the 1-dimensional, or circular, case.

• An eﬃcient optimization method for minimizing these energies in both the one and two-

dimensional settings.

• A proof that our smoothing procedure preserves the homotopical information encoded by the

initial map.

1.1 Related Work

The fundamental idea of this paper—that natural nonlinear coordinate systems for data can be
extracted from persistent cohomology—goes back to [8], where the authors recover circular coordi-
nate systems from ﬁrst-degree persistent cohomology. In more detail, de Silva et al.
leverage the
natural isomorphism H 1(X; Z) ∼= [X, K(Z, 1)] given by Brown Representability, and the fact that
K(Z, 1) (cid:39) S1 to, ﬁrst, deﬁne an initial map α : X → S1 that represents a signiﬁcant topological
feature of the data set X. They then determine the “smoothest” such α by ﬁnding its harmonic rep-
resentative in H 1(X; R). Perea [24] strengthens these results using the theory of principal Z-bundles
to design a more eﬃcient and robust method for producing circular coordinates, known as “sparse
circular coordinates.”

The work above focuses on one-dimensional persistent cohomology. In this paper, we are inter-
ested in what can be obtained from second degree persistent cohomology. The reason this is not
a straightforward generalization is that in dimension two, Brown Representability gives a natural
isomorphism H 2(X; Z) ∼= [X, K(Z, 2)] and whereas K(Z, 1) (cid:39) S1 is amenable to direct calculation,
K(Z, 2) is homotopy equivalent to inﬁnite-dimensional projective space CP ∞. Perea [23] shows that
one can reduce this problem to working in ﬁnite-dimensional projective space via dimensionality re-
duction. However, the question raised in [8] of whether spherical coordinates, i.e., parameterizations
X → S2, can be obtained from two-dimensional cohomology calculations has remained open thus
far. Our results answer this question in the aﬃrmative.

In geometric data processing, deﬁning maps from manifolds (or discrete representation thereof)
to spheres has been a popular genre of approach for many problems. Most relevant to this work
is that of [12] which deﬁnes a discrete version of harmonic energy that can be minimized to ﬁnd
a conformal map from an arbitrary genus-zero 2-manifold (represented as a triangular mesh) to
the unit sphere. Other shape processing algorithms have further developed these ideas for quasi-
conformal maps [17], non-genus-0 maps [34] and others settings [13, 14]. More recently, [1] developed
a shape matching pipeline that utilizes a M¨obius transform of the unit sphere to ﬁnd correspondences
between genus-zero 3D shapes. As we will see in Section 4 the group of M¨obius transformations will
be essential to our smoothing procedure.

In the geometric deep learning community, there has been a recent surge of interest in auto-
regressive methods that are topologically informed. Works such as [9, 7, 26, 6] introduce autoen-
coders with various non-euclidean latent spaces that are useful for problems when the underlying
data topology is known and relatively simple. This assumption is too strong for many real-world
problems, where the topology is not known a priori. In another line of research, [28, 29] and [20]

2

provide methods for representing data sampled from unknown and arbitrary topological spaces.
However, these methods can be sensitive to hyper-parameter tuning, and extracting topological
invariants from the trained models is often non-trivial.

Additionally, all of these auto-regressive methods rely on training neural networks with stochastic
gradient descent to approximate the desired map(s). In general, the topologies are not guaranteed
to be preserved—rather, the authors show that there exist networks that can preserve them and
provide numerical experiments to show that the networks often do so. The method presented here,
instead, ﬁnds the map directly by solving a variational optimization problem and is guaranteed to
preserve the homotopy class of the map. Our method does not, however, lend itself directly to novel
data generation, but rather to representation learning.

1.2 Acknowledgements

The authors would like to thank Chad Giusti for many helpful discussions, and Jose Perea for an
enlightening conversation about the paper. NC Schonsheck’s work is supported by the Air Force
Oﬃce of Scientiﬁc Research under award number FA9550-21-1-0266 and SC Schonsheck’s work is
supported by the US National Science Foundation grant DMS-1912747.

2 Persistent Cohomology

In this section, we brieﬂy recapitulate the basics of persistent cohomology. For a more thorough
introduction, see [5] and [35]. Another useful treatment is given in [33].

2.1 Background on Persistent Cohomology

Let X be a ﬁnite simplicial complex and F a ﬁnite ﬁeld (or, more generally, any commutative ring).
For each n ≥ 0, let C n(X; F ) = C n denote the F -vector space (more generally, F -module) of set
maps X n → F . That is,

C n(X; F ) = {maps of sets f : X n → F }

(1)

where vector addition and scalar multiplication are inherited from F . Further deﬁne coboundary
maps dn : C n → C n+1 by

(d0f )(ab) = f (b) − f (a)
(d1f )(abc) = f (bc) − f (ac) + f (ab)
(d2f )(abcd) = f (bcd) − f (acd) + f (abd) − f (abc)
...

(2)

It is a straightforward check that each dn is F -linear, allowing us to deﬁne the following.

Deﬁnition 1. The degree n cohomology of the simplicial complex X with coeﬃcients in F is the
F -vector space given by

H n(X; F ) = H n(X) = ker(dn)/ im(dn−1)

(3)

In the persistent setting, rather than working with a ﬁxed simplicial complex X, we often consider

a ﬁltered simplicial complex X •, i.e., a sequence of inclusions

X • = X 0 → X 1 → X 2 → · · ·

(4)

where each X n is a simplicial complex.

3

Remark 2. Here there is a potential for notational confusion. If X is a simplicial complex, then
X n generally denotes its set of n-simplices. On the other hand, if X • is a ﬁltered simplicial complex,
then X n refers to a simplicial complex. It will be clear from context which is intended.

Because cohomology is functorial, any diagram as in equation 4 implies the existence of a corre-

sponding diagram in cohomology

P H n(X •; F ) = H n(X 0; F ) → H n(X 1; F ) → H n(X 2; F ) → · · ·

(5)

called the persistent cohomology of X •. As is evident from equation 5, P H n(X •; F ) has the structure
of a graded F -vector space, which can be thought of as an F [t]-module where t acts via the inclusion
maps. In other words, P H n(X •; F ) is a persitence module. Provided F is a ﬁeld, F [t] is a principal
ideal domain (PID), and so if X • is ﬁnite, the Structure Theorem for ﬁnitely generated modules
over a PID implies that P H n(X •; F ) can be uniquely decomposed into its barcode, i.e., a triple

where bcn(X •; F ) is a ﬁnite set of bars and β, δ : bcn(X •; F ) → Z record the birth and death times
of each bar. There is also a (nonunique) isomorphism of persistence modules

(bcn(X •; F ), β, δ)

(6)

B : Ibcn(X •) → P H n(X •; F )

(7)

where Ibcn(X •) is the barcode module for X •, called an interval decomposition of P H n(X •; F ). The
nonuniqueness here arises from choosing a (compatible) basis for each H n(X k; F ). In this paper, we
generally assume that the practitioner has chosen a ﬁxed interval decomposition for any considered
persistence module.

2.2 Lifting to Integer Coeﬃcients
In practice, one generally computes persistent cohomology with coeﬃcients in a ﬁnite ﬁeld Fp.
However, our process for deﬁning an S2-valued map, below, requires an integral cohomology class.
Given a simplicial complex X, our strategy for obtaining an element of H 2(X; Z) from an element
of H 2(X; Fp) is the same as that of [8].
In more detail, a straightforward analysis of the long
exact sequence associated with the Bockstein homomorphism shows that provided H 3(X; Z) has no
p-torsion, any element of H 2(X; Fp) can be lifted to an element of H 2(X; Z). In practice, given
[αp] ∈ H 2(X; Fp), we replace the coeﬃcients of αp with their corresponding congruence class in the
range

{−(p − 1)/2, . . . , −1, 0, 1, . . . , (p − 1)/2}

(8)

and verify that the resultant cochain α ∈ C 2(X; Z) satisﬁes the cocycle condition. Hence, [α]
represents an element of H 2(X; Z). While, theoretically, this procedure may fail (for instance, if
there is p-torsion), we have yet to encounter a real-world example where it does.

3 Obtaining a Map to the 2-Sphere

Suppose X • is a ﬁltered ﬁnite simplicial complex, and that ρ ∈ BC2(X •; Fp) has been identiﬁed as
BC2(X •;Fp) → P H 2(X •; Fp)
a signiﬁcant topological feature. Fixing an interval decomposition B : I

4

and a parameter δ during the lifetime of ρ, we obtain a cohomology class [αp] ∈ H 2(X δ; Fp) which
we lift, as in Section 2.2, to a class [α] ∈ H 2(X δ; Z). Letting X = X δ for notation’s sake, we now
describe how to construct a sphere-valued map from [α].

The Brown Representability Theorem gives a natural isomorphism

H 2(X; Z) ∼= [X, K(Z, 2)]

(9)

where the latter term denotes the set (in this case, group) of homotopy class of maps from X into
the Eilenberg-MacLane space K(Z, 2) (cid:39) CP∞. Thus, the homology class [α] determines a unique
homotopy class of map X → K(Z, 2), and the goal now is to lift this to a sphere-valued map. Since
there is a canonical inclusion S2 (cid:44)→ K(Z, 2), we can phrase this as searching for the dotted map
below.

S2

˜α

X

α (cid:47)

(cid:47) K(Z, 2)

(10)

In general, there will be obstructions to lifting α on all of X because S2 has (inﬁnitely) many non-
trivial higher homotopy groups. However, since the inclusion sk3(X) (cid:44)→ X induces an isomorphism
∼=−→ H 2(sk3(X); Z), it is reasonable to instead deﬁne a lift from sk3(X) which, in fact,
H 2(X; Z)
always exists. To see this, ﬁrst note that given a generic 2-simplex ϕ and integer n, there is a
homotopy-unique map ϕ → S2 deﬁned by collapsing the boundary of ϕ to obtain a 2-sphere, then
mapping to S2 via the degree n map. We now deﬁne the desired lift ˜α.
Deﬁnition 3. Let α ∈ Z 2(X; Z) be a 2-cocycle and ﬁx a basepoint p ∈ S2. We deﬁne the canonical
lift of α to be the map ˜α : sk3(X) → S2 deﬁned by mapping each vertex and 1-simplex of X to p
and mapping each 2-simplex of X to S2 as described above. The following shows that this map can
then be extended to sk3(X).

Proposition 4. The map deﬁned on sk2(X) in Deﬁnition 3 can be extended to sk3(X).

Proof. Let σ = abcd be a 3-simplex in X. The map ˜α can be extended to σ if and only if the map
from the boundary of σ to S2 is nullhomotopic. Since the boundary of σ is homeomorphic to S2,
this map will be determined up to homotopy by its degree (by the Hopf degree theorem) and be
nullhomotopic if and only if it is of degree 0. The fact that α is a cocycle guarantees exactly that.
To see this, consider the composite below (Figure 1), determined by ˜α on sk2(X).

Figure 1: Given a 2-cocycle α, we consider the corresponding map on the boundary of a generic
3-simplex σ.

Let f denote the ﬁrst map in Figure 1, g the second, and ﬁx an orientation (i.e., an inward or
outward facing normal which we deonte as ω = ±1) of S2. We have induced maps on second-degree
homology given by

Z f∗

(cid:47) Zbcd ⊕ Zacd ⊕ Zabd ⊕ Zabc

g∗

(cid:47) Z

(11)

5

(cid:15)
(cid:15)
(cid:59)
(cid:59)
(cid:47)
(cid:47)
The map f∗ is given by either f∗(1) = (1, −1, 1, −1) or f∗(1) = (−1, 1, −1, 1), depending on the

chosen orientation. In either case, g∗ is determined by

g∗(1, 1, 1, 1) = α(bcd) + α(acd) + α(abd) + α(abc)

and the cocycle condition guarantees that f ∗g∗ = 0. Indeed, we have

g∗f∗(1) = ±(α(bcd) − α(acd) + α(abd) − α(abc)) = 0

Repeating this argument for all 3-simplices of X completes the proof.

(12)

(13)

4 Smoothing the Initial Map

Although we have now obtained a map from a Vietoris-Rips complex on our data to the unit sphere,
it is not very useful for visualization or analysis since all of the vertices are mapped to the same
point. Next, we describe our procedure for smoothing this initial map to obtain a more desirable
representation and prove that this smoothing process preserves the homotopy class of the initial
map.

4.1 Harmonic Energy

In order to obtain a useful representation of the data, we deﬁne a notion of harmonic energy of
a map from an arbitrary 2-simplex to the unit sphere. We minimize this energy across the whole
simplicial complex in order to smooth the initial map. Later, we will show that this process preserves
the homotopy class of the initial map and results in a more tractable representation of the data the
initial map.

Deﬁnition 5. For ease of notation, let x be an arbitrary 2-simplex in X 2. We deﬁne the discrete
simplicial harmonic energy for a map α : sk3(X) → S2 as:

EH (α(X)) =

(cid:88)

x∈X 2

1
2

||A(α(x))||2

where A(α(x)) is the area of the spherical triangle to which x is mapped.

Elements x ∈ X 2 that are mapped via the degree 1 or −1 map as in Proposition 4 are assigned
an area of 4π (i.e., the whole sphere) and those that are mapped via the degree 0 map are set to
0. Note that a map of degree 0 that collapses all of the vertices to a single point has zero area.
Additionally, a triangle with two coincidental vertices has zero area, and therefore zero harmonic
energy as well. This energy is a direct generalization of the discrete harmonic energy proposed in
[12] in that if our 2-simplex X 2 is in fact a regular, air-tight triangle mesh, then the energies are
identical.

A spherical triangle with an area less than 4π can be uniquely identiﬁed by three points and its
barycenter. (Note that without the barycenter three points on the sphere deﬁne two spherically-
complementary triangles). Given this information we can measure the sides lengths, a, b, c, and
semiperimeter, s = 1
2 (a + b + c), of the triangle using spherical trigonometry [32]. Finally, we
employ L’huilier’s theorem [18] to compute the spherical excess of the triangle. That is: E(x) =
4 arctan (cid:0) tan s
tan s−b
is equal to the surface area of the spherical triangle.

2 . Since we are working on a unit sphere the spherical excess

2 tan s−c

2 tan s−a

(cid:1) 1

2

2

6

4.2 Spring Energy

In some cases, it is useful to replace harmonic energy with a notion of spring energy so each simplex
may have some non-zero rest-state area and so that we can tune a “pull” parameter (i.e., spring
constant). Although this introduces additional parameters into the model, we have found that
parameter selection is not particularly onerous.

Deﬁnition 6. We deﬁne the discrete simplicial spring energy for a map α : sk3(X) → S2 as:

ES(α(X)) =

(cid:88)

x∈X 2

1
2

||k(A(α(x)) − R)||2

where k is the spring constant, and R is the rest area of the spring.

We will show later in Section 5 that by tuning k and R we can develop better representations
of data with nonuniform sampling densities or noise in the barcode. Obviously, setting R = 0 and
k = 1 makes the harmonic and spring energies identical.

4.3 Optimization Routine

Minimizing harmonic (or spring) energy alone is not enough to uniquely determine a map from
V R(X) to S2 since the solution is not unique. The minimums do, however, form a M¨obius group
[12]. In order to deﬁne a unique representation, we ﬁrst stipulate that the ﬁnal mapping must have
zero-center of mass. This solution is then unique up to rigid motion, which we can ﬁx later during
post-processing (see Section 5). Thus, given an initial map α : V R(X) → S2, the optimization
problem is:

arg min
˜α : V R(X)→S2

E(cid:0)˜α(cid:1)

such that ˜α (cid:39) α

(14)

To solve this problem we use an alternating scheme beginning with the map generated in Section
3. Note this is an infeasible starting point since it is not zero-centered. Moreover, since all of the
vertices are mapped to the same point on the sphere, it is not possible to zero center it. First, we
decrease the energy by computing the gradient of the energy with respect to the positions of the
vertices and performing a step of manifold gradient descent [4]. This spreads the points out, and
allows us to approach the feasible region of the zero-center of mass constraint by approximating a
M¨obius transform which centers the mass afterwards. By choosing the step-size carefully we are
able to ensure convergence to a unique minimizer as in [12].

Consider a single spherical triangle with a non-zero area. The negative gradient of the harmonic
energy pulls each vertex toward the barycenter. Moreover, the magnitude of the gradient is propor-
tional to the area of the triangle. Then, to perform a step of the gradient update, while remaining on
the sphere, we only need to ﬁnd the geodesic between each vertex and the barycenter. In practice,
we compute this direction as the tangent to the geodesic, take a small step in the direction of the
gradient in the tangent plane, and then project back to the sphere. So for vertex p, triangle x, and
barycenter b, we compute g = p − b − (cid:104)p − b, p(cid:105), and then the gradient terms:

∇p⊥,xEH = A(x)

g
||g||2

and ∇p⊥,xES = k(A(x) − D)

g
||g||2

(15)

Then to compute the gradient of the energy of an entire complex, we simply sum these gradients
pointwise over all of the individual triangles x. This process is embarrassingly parallelizable and can
be computed extremely eﬃciently.

For a triangle with non-zero winding (i.e., a triangle which has wrapped around the entire sphere),
we have the diﬃculty that there is not a unique geodesic between the vertex and the barycenter since
they are bipolar. Since we have previously deﬁned a positive orientation and negative orientation

7

for these elements, we can choose a canonical direction of the gradient for one orientation and use
its mirror image for the opposite orientation (see Figure 2). After one step in the gradient direction,
the triangle will no longer cover the entire sphere and can be treated as those above. Note that a
diﬀerent choice of orientation directions will lead to equivalent results up to some reﬂection.

Finally, to take perform a step in the direction of the gradient of the energy, we move each vertex
in its tangent plane in the direction determined by the gradient, scaled by a step-size parameter, δg,
and then normalize each point so that they once again lie on the unit sphere. After each gradient step,
we update the barycenters of each spherical triangle by ﬁnding the euclidean barycenter, normalizing
it to the sphere, then choosing the correct pole based on the previous barycenter.

Computing the exact M¨obius transform which centers the mass of ˜α is nonlinear and compu-
tationally expensive. Instead, following the method of [12], we replace the M¨obius transform with
an approximation and iteratively update it. First, we compute the current center of mass c and
then subtract δmαc from each point. Finally, we project each point back onto the unit sphere using
the Gauss map. In order to preserve the triangle orientation, the barycenters are updated identi-
cally. Since the initial map α begins with all of the points being mapped to the same basepoint, we
compute a few iterations of the gradient descent before beginning the alternating process.

The full algorithm is presented in A

Figure 2: Left:Our choice of canonical directions for positive and negative orientations with for
triangle with non-zero winding (ω = ±1), vertices at [1, 0, 0] and barycenter [−1, 0, 0]. The outward
normal is chosen to be positive and the inward negative. Right: Equilateral Triangle mapped to
circle and regular, triangular pyramid mapped to the unit sphere using harmonic energy minimizing
maps

4.4 Energy Minimization Preserves Homotopical Information

Recall that the minimization problem begins with a map α : sk3(X) → S2, i.e., a representative
of a homotopy class in [sk3(X), S2] and that the goal is to ﬁnd a smoother but homotopic map
α(cid:48) : sk3(X) → S2.
It is crucial, then, that we verify each map produced by our minimization
procedure is homotopic to the previous so that we have equivalences

α = α0 (cid:39) α1 (cid:39) α2 (cid:39) · · · (cid:39) αN = ˜α

(16)

through the optimization process. Without this, there would be no topological connection between
α, representing a signiﬁcant feature of the data, and the map produced by our algorithm. Towards
proving the string of equivalences in equation 16, we begin with the following.
Proposition 7. Let X be a space, and suppose f and g are two maps f, g : X → S2 from X to
the unit sphere in R3. Let (cid:107) − (cid:107) denote the Euclidean norm and suppose (cid:107)f (x) − g(x)(cid:107) < 2 for all
x ∈ X. Then f (cid:39) g.

Proof. Since (cid:107)f (x) − g(x)(cid:107) < 2 for all x ∈ X, we know that f (x) and g(x) are never antipodal, in
which case the straight-line homotopy

ft(x) =

(t − 1)f (x) + tg(x)
(cid:107)(t − 1)f (x) + tg(x)(cid:107)

(17)

8

is well-deﬁned, continuous, and shows f (cid:39) g.

Proposition 7 shows that by limiting the distance that the vertices and barycenter of each 2-
simplex are moved by each gradient descent step, we can guarantee that successive maps in the
descent are homotopic, at least up to sk2(X). As we observe below, this homotopy can in fact be
extended to sk3(X).

Proposition 8. Suppose αi and αi+1 are successive functions in the minimization procedure de-
scribed in Section 4. If αi+1 is obtained from αi by a gradient descent step, then αi (cid:39) αi+1 as maps
sk3(X) → S2.

Proof. It follows from Proposition 7 that αi and αi+1 are homotopic as maps on the 2-skeleton of
X. We may assume inductively that αi extends to a map on sk3(X) and the Homotopy Extension
Property of the pair (sk3(X), sk2(X)) then ensures that the homotopy between αi and αi+1 can also
be extended to the 3-skeleton of X.

Lastly, we must show that composing with a M¨obius transformation preserves the homotopy
class of a map sk3(X) → S2. We suspect the following is well-known to experts, but record proof
here for the sake of completeness.

Proposition 9. Identifying S2 with the Riemann sphere (or extended complex plane), any M¨obius
transformation f is homotopic to the identity.

Proof. There are a number of ways to see this, but one of the more straightforward is as follows.
for a, b, c, d ∈ C with
Identify S2 with the extended complex plane and represent f as f (z) =

az + b
cz + d

ad − bc (cid:54)= 0. If c (cid:54)= 0, decompose f into a composition of simpler M¨obius functions

f1(z) = z +

c
d

,

f2(z) =

1
z

,

f3(z) =

bc − ad
c2

z,

f4(z) = z +

a
c

(18)

whence f = f4 ◦ f3 ◦ f2 ◦ f1. For i = 1, 3, 4, each fi is a polynomial on C that we have canonically
extended to C ∪ {∞}. It is a well-known fact that the degree of such a function viewed as a map
S2 → S2 is equal to its degree as a polynomial. Therefore, deg(fi) = 1 and so fi is homotopic to
the identity for i = 1, 3, 4 by the Hopf degree theorem. Lastly, f2 represents a rotation S2 by 180
degrees, so is also homotopic to the identity. Thus, f is a composition of functions each of which is
homotopic to the identity, so f is as well. The case c = 0 is handled similarly.

Together, Propositions 7 and 9 guarantee that our minimization procedure does not alter the

homotopy class of the initial map sk3(X) → S2.

Theorem 10. Suppose α = α0 (cid:32) α1 (cid:32) α2 (cid:32) . . . (cid:32) αN is the sequence of maps sk3(X) → S2
obtained via the minimization procedure described in Section 4. Then α (cid:39) αN .

Proof. It follows from Proposition 7 that α0 (cid:39) α1. Inductively, suppose that we have shown αi−1 (cid:39)
αi. If αi diﬀers from αi+1 by a gradient descent step, then Proposition 7 also shows αi (cid:39) αi+1.
Otherwise, αi+1 = m ◦ αi for a M¨obius transformation m. In this case, it follows from Proposition
9 that

αi+1 = m ◦ αi (cid:39) id ◦ αi = αi

(19)

which completes the proof.

9

4.5 Relation to the 1D Problem

The numerical scheme presented in section 4.3 can also be adapted to map V R(X) to the unit
circle S1, recovering the original results of [8]. For harmonic energy, it is more eﬃcient to explicitly
calculate the harmonic representative as in [8], but formulating the 1D problem is useful for building
intuition for the 2D case. Here, the harmonic energy and spring energy for α : sk2(X) → S1 are
given by:

EH (α(X)) =

(cid:88)

x∈X 1

1
2

||L(α(x))||2

and ES(α(X)) =

(cid:88)

x∈X 1

1
2

||k(L(α(x)) − R)||2

(20)

where L(α(x)) is the arc length of α(x), k is a spring constant and R is the spring rest-length.
Similar to the set up for the spherical case, we interpret ωα = ±1 as wrapping an edge around
the circle in a clockwise (ωα = 1) or anti-clockwise ( ωα = −1) direction. Since there is a unique
harmonic representative of α we do not need to compute M¨obius updates, and can instead directly
minimize the energy using a ﬁrst-order scheme. The arguments presented in Section 4.4 show that
this scheme preserves the homotopy class of the map, and numerical results in Section 5.1 showcase
the usefulness of the spring energy for 1D problems.

5 Numerical Results

Here we present some numerical results on syntheic and real-word data. All experiments were
performed in Python using Ripser [2] to compute cohomology classes.

5.1 Synthetic Problems

We begin with a series of illustrative tests on the 1D problem to demonstrate the eﬃcacy of our
approach and showcase the diﬀerence between the harmonic and spring energy. Figure 3 shows 5 tests
of our approach on data sampled from topological circles. The ﬁrst column shows the original data,
the second plots the cocycles computed by Ripser, the third shows the ﬁnal mapping of the data,
and the fourth shows a plot of the circular coordinate (x-axis) vs. an arc length parameterization
coordinate of the data. The ﬁrst test is an evenly sampled circle, for which we recover the original
coordinates almost exactly. The second shows a much sparer and more noisily sampled circle. The
third row is a trefoil knot, embedded in 3 dimensions, but visualized here in 2. The fourth and ﬁfth
rows demonstrate the diﬀerence between spring and harmonic energies. We begin with an ellipse in
2D and then embedded it in 50 dimensions and add Gaussian noise. We obtain the cocycles with
Ripser then minimize harmonic energy in the fourth row and spring in the ﬁfth. Here we see that
the spring energy produces a much more reasonable map since it is able better separate the more
densely sampled regions around the ends of the ellipse.

10

Figure 3: First Row: Evenly sampled circle, Second Row: Noisy, sparsely sampled circle, Third
Row: Trefoil knot in 3d (visualized in 2d) with spring energy, Forth row: Noisy Ellipse in 5D
(visualized in 2D without noise) with harmonic energy, Last row: Same as above but with spring
energy

Next, we demonstrate our approach to dimension-2 problems. Figure 4 shows a battery of tests.
The ﬁrst column shows the original data. The second column shows the bar codes detected by
Ripper and highlights the topological feature that we focus on. The third column shows the ﬁnal
mapping. Finally, the fourth column shows the generated azimuth and elevation coordinates of the
initial data versus the ﬁnal map after alignment. For the ellipsoid cases, we use the paramtools
package [16] to generate the sampling. Note that, below, the x and y axes of the “Azimuth” and
“Elevation” diagrams are “circular,” so that points very near the top (resp. right) are, in fact, quite
close to points near the bottom (resp. left) and vice-versa.

11

Figure 4: First Row: Sphere Second Row: Sphere with noise, Third Row: Ellipse

5.2 More Complicated Topology

We also illustrate several interesting cases where the underlying topology is not simply a single
sphere, but rather some combination of two spherical sub-domains and show how pruning simplexes
in a post-process can improve the results by disentangling the subdomains. We begin with two
disconnected spheres. Of course, these could be separated in preprocessing, but we belay that in
order to build intuition. In the top row of ﬁgure 6, we select the feature associated with the red
sphere. Even though the spheres are disconnected, the points on the blue sphere still contribute
to the zero-center of mass constraint. However, after pruning these points we are able to recover a
good representation of each sphere in the last row of the ﬁgure. From this observation, we propose
a pruning scheme: After completion of the algorithm, if the results are unsatisfactory, we remove all
simplexes which have an area less than some threshold (in this case 1e−2) and apply the minimization
procedure to the remaining points.

12

Figure 5: Columns 1: Input data. Simplex connections produced by Ripser are shown as black
lines. Column 2: Barcode with the selected feature highlighted in red. Columns 3: Final maps
Column 4-5: Computed coordinates vs ground truth.

A similar phenomenon appears when applying our algorithm naively to a dataset consisting
of points sampled from a wedge of two spheres. Here there are two main topological features,
corresponding to the two spheres, that are good candidates for our algorithm. Neither produces a
very satisfactory result since the underlying data is non-spherical (left column of Figure 5. Note
that in the ﬁrst case, the chosen feature corresponds to the red sphere, and in the second the chosen
one corresponds to the blue sphere. In both of these cases, we see that the points associated with
the sphere not chosen are mapped very close to a lower dimensional subspace in the algorithm (a
line). In this case, we can apply the pruning scheme explained above. Figure 5 shows the results
before and after applying our pruning technique. Although the results are not perfect (note that
there are still some red points on the blue sphere and vice versa) we observe that the results are
much improved.

13

Figure 6: Columns 1: Input data. Simplex connections produced by Ripser are shown as black
lines. Column 2: Barcode with the selected feature highlighted in red. Columns 3: Final maps
Column 4-5: Computed coordinates vs ground truth.

5.3 Applied Topological Data Analysis Problems

We begin with our more realistic tests using a 1D example taken from the Columbia Object Image
Library (COIL-100) dataset [21]. The dataset contains images of everyday objects (in our case a
rubber ducky) photographed from diﬀerent angles along a single axis of rotation. There are 72
images per object and each image can be represented as a point in R512. These points can be
modeled as coming from a topological circle in R512. Applying our algorithm to the problem, we are
able to closely recover the angle at which each picture was taken. Figure 7 shows the embedding
along with the coordinate reconstruction using both harmonic and spring energy minimization. For
this case, the harmonic energy minimization did not produce satisfactory results as shown in the
left side of Figure 7.

Figure 7: Left: The embedding of the Coil-100 duck. Starting with an arbitrary origin, we show
the images whose ﬁnal coordinates diﬀer by π
4 . Right: Coordinates of ﬁnal map vs ground truth
coordinates from dataset

We conduct a similar experiment for the 2D problem by rotating an object in 3D. In Figure 8
we show the results of applying our algorithm to a dataset consisting of 200 images of the Stanford

14

Bunny [25] under random rotations. Although the barcode of the dataset is irregular, by selecting
the maximum barcode and using a large enough spring constant we are able to embed the images
onto the sphere in a meaningful way.

Figure 8: Stanford bunny experiment. In the right 4 columns, we show the images nearest to the
point indicated in the subtitle.

We also conduct a synthetic experiment inspired by applications of topological data analysis
to neuroscience. It has long been known [22] that certain cells in the hippocampus, called place
cells, have spatially localized receptive ﬁelds. In other words, they represent one’s position during
navigation by ﬁring rapidly at speciﬁc locations in an environment, while maintaining low activity
at all others. Analysis of such data using persistent (co)homology can recover the coarse geometry
of the environment itself, e.g., determining if a rat was navigating a circular track, or an open ﬁeld
[11]. Similarly, head direction as encoded by a product of circles can be recovered [10] from neural
activity using persistence techniques. We model a variation of this idea: what if place cells were
embedded not on, e.g., a circle as a rat runs around a circular track, but rather on a sphere?

We begin by choosing 64 nearly-equally distributed points on the sphere using the Fibonacci
lattice. These points serve as sensors for a discrete random walk on the sphere. During the the
jth step a sensor j measures the distance to walking points as Sj(xi) = exp (−D(xi, j)) + N where
D(x, j) is the distance between x and the jth sensor and N is random noise. We simulate 25
discrete random walks of length 25 steps and step size δ = .1 on the sphere to generate given a
matrix S = sij. Then our goal is to use S to recover the original coordinates of the sensors. Figure
9 shows the coordinate recovery for the cases N = 0, 0.2, .5.

Figure 9: Results from the sensors experiments under diﬀerent levels of noise. From Right to left
the noise values are: N = 0, 0.2, .5

15

References

[1] Alex Baden, Keenan Crane, and Misha Kazhdan. M¨obius registration. In Computer Graphics

Forum, volume 37, pages 211–220. Wiley Online Library, 2018.

[2] Ulrich Bauer. Ripser: eﬃcient computation of vietoris-rips persistence barcodes. Journal of

Applied and Computational Topology, 2021.

[3] Mikhail Belkin and Partha Niyogi. Laplacian eigenmaps for dimensionality reduction and data

representation. Neural computation, 15(6):1373–1396, 2003.

[4] Silvere Bonnabel. Stochastic gradient descent on riemannian manifolds. IEEE Transactions on

Automatic Control, 58(9):2217–2229, 2013.

[5] Gunnar Carlsson. Topology and data. Bull. Amer. Math. Soc. (N.S.), 46(2):255–308, 2009.

[6] Marissa Connor and Christopher Rozell. Representing closed transformation paths in encoded

network latent space. arXiv preprint arXiv:1912.02644, 2019.

[7] Tim R Davidson, Luca Falorsi, Nicola De Cao, Thomas Kipf, and Jakub M Tomczak. Hyper-

spherical variational auto-encoders. arXiv preprint arXiv:1804.00891, 2018.

[8] Vin De Silva, Dmitriy Morozov, and Mikael Vejdemo-Johansson. Persistent cohomology and

circular coordinates. Discrete & computational geometry, 45(4):737–759, 2011.

[9] Luca Falorsi, Pim De Haan, Tim R Davidson, Nicola De Cao, Maurice Weiler, Patrick Forr´e,
and Taco S Cohen. Explorations in homeomorphic variational auto-encoding. arXiv preprint
arXiv:1807.04689, 2018.

[10] Arseny Finkelstein, Dori Derdikman, Alon Rubin, Jakob N. Foerster, Liora Las, and Nachum
Ulanovsky. Three-dimensional head-direction coding in the bat brain. Nature, 517(7533):159–
164, 2015.

[11] Chad Giusti, Eva Pastalkova, Carina Curto, and Vladimir Itskov. Clique topology reveals
intrinsic geometric structure in neural correlations. Proceedings of the National Academy of
Sciences of the United States of America, 112, 02 2015.

[12] Xianfeng Gu, Yalin Wang, Tony F Chan, Paul M Thompson, and Shing-Tung Yau. Genus zero
surface conformal mapping and its application to brain surface mapping. IEEE transactions on
medical imaging, 23(8):949–958, 2004.

[13] Xianfeng Gu and Shing-Tung Yau. Global conformal surface parameterization. In Proceedings of
the 2003 Eurographics/ACM SIGGRAPH symposium on Geometry processing, pages 127–137,
2003.

[14] Xianfeng David Gu and Shing-Tung Yau. Computational conformal geometry, volume 1. Inter-

national Press Somerville, MA, 2008.

[15] G. Henselman and R. Ghrist. Matroid Filtrations and Computational Persistent Homology.

ArXiv e-prints, June 2016.

[16] Max Kapur. Param tools, 2020.

[17] Ka Chun Lam and Lok Ming Lui. Landmark-and intensity-based registration with large de-
formations via quasi-conformal maps. SIAM Journal on Imaging Sciences, 7(4):2364–2392,
2014.

16

[18] AJ Lhuilier. Maemoire sur la polyaedromaetrie, contenant une daemonstration directe du thae-
oraeme d’euler sur les polyaedres, et un examen de diverses exceptions auxquelles ce thaeoraeme
est assujetti (extrait par m. gergonne). Annales de mathaematiques pures et appliquaees par
Gergonne III, 1812.

[19] Leland McInnes, John Healy, and James Melville. Umap: Uniform manifold approximation and

projection for dimension reduction. arXiv preprint arXiv:1802.03426, 2018.

[20] Michael Moor, Max Horn, Bastian Rieck, and Karsten Borgwardt. Topological autoencoders.

In International conference on machine learning, pages 7045–7054. PMLR, 2020.

[21] Sameer A Nene, Shree K Nayar, Hiroshi Murase, et al. Columbia object image library (coil-100).

Report, 1996.

[22] John O’Keefe. Place units in the hippocampus of the freely moving rat. Experimental Neurology,

51(1):78–109, 1976.

[23] Jose A. Perea. Multiscale projective coordinates via persistent cohomology of sparse ﬁltrations.

Discrete Comput. Geom., 59(1):175–225, 2018.

[24] Jose A. Perea. Sparse circular coordinates via principal Z-bundles.

In Nils A. Baas, Gun-
nar E. Carlsson, Gereon Quick, Markus Szymik, and Marius Thaule, editors, Topological Data
Analysis, pages 435–458, Cham, 2020. Springer International Publishing.

[25] Fran¸cois Pomerleau, Ming Liu, Francis Colas, and Roland Siegwart. Challenging data sets
for point cloud registration algorithms. The International Journal of Robotics Research,
31(14):1705–1711, 2012.

[26] Luis Armando P´erez Rey. Disentanglement with hyperspherical latent spaces using diﬀusion

variational autoencoders. Proceedings of Machine Learning Research, 1:1–4, 2019.

[27] Sam T Roweis and Lawrence K Saul. Nonlinear dimensionality reduction by locally linear

embedding. science, 290(5500):2323–2326, 2000.

[28] Stefan C. Schonsheck, Jie Chen, and Rongjie Lai. Chart auto-encoders for manifold structured

data. arXiv preprint arXiv:1912.10094, 2019.

[29] Stefan C. Schonsheck, Scott Mahan, Timo Klock, Timo Cloninger, and Rongjie Lai. Semi-
supervised manifold learning with complexity decoupled chart autoencoders. arXiv preprint
arXiv:2208.10570, 2022.

[30] Flora S Tsai and Kap Luk Chan. Dimensionality reduction techniques for data exploration. In
2007 6th International conference on information, communications & signal processing, pages
1–5. IEEE, 2007.

[31] Laurens Van der Maaten and Geoﬀrey Hinton. Visualizing data using t-sne. Journal of machine

learning research, 9(11), 2008.

[32] Eric W Weisstein. Spherical trigonometry. From MathWorld–A Wolfram Web Ressource. Avail-

able from http://mathworld. wolfram. com/SphericalTrigonometry. html, 2008.

[33] Hee Rhang Yoon, Robert Ghrist, and Chad Giusti. Persistent extension and analogous bars:

Data-induced relations between persistence barcodes, 2022.

[34] Wei Zeng, Dimitris Samaras, and David Gu. Ricci ﬂow for 3d shape analysis. IEEE Transactions

on Pattern Analysis and Machine Intelligence, 32(4):662–677, 2010.

[35] Afra Zomorodian and Gunnar Carlsson. Computing persistent homology. Discrete Comput.

Geom., 33(2):249–274, 2005.

17

A Algorithm

Algorithm 1 Energy Minimization
Require: X 2, B, ˜α(X), r, tol

Initialize p = [1, 0, 0]N
i = 0
while Not Converged do
E ← 0 and ∇p⊥E ← 0
for x ∈ X 2 do

E ← E + E(x)
for p ∈ x do

g ← p − B(x)
g ← g − (cid:104)g, p(cid:105)
g
g ←
||g||2

∇p⊥E(p) = E(x)g

end for

p∈x p
p∈x p||2

end for
p ← p − r(∇p⊥E)
p ←

B ←

p
||p||2
(cid:80)
|| (cid:80)
if i ≥ 50 then
c ← (cid:80)
p(p)
p ← p − rc
p ←

p
||p||2
B ← B − rc

B
||B||2

B ←

end if
i++
end while

(cid:46) Begin with all points on basepoint

(cid:46) loop through triangles

(cid:46) update gradient

(cid:46) Find barycenters of shifted triangles

(cid:46) Begin mass centering after points have spread some

(cid:46) Barycenters shift the same as points

18

