Communication, Computing and Caching for
Mobile VR Delivery: Modeling and Trade-off

Yaping Sun, Zhiyong Chen, Meixia Tao and Hui Liu
Department of Electronic Engineering, Shanghai Jiao Tong University, Shanghai, P. R. China
Email: {yapingsun, zhiyongchen, mxtao, huiliu}@sjtu.edu.cn

8
1
0
2

r
p
A
7
2

]
T
I
.
s
c
[

1
v
5
3
3
0
1
.
4
0
8
1
:
v
i
X
r
a

Abstract—Mobile virtual reality (VR) delivery is gaining in-
creasing attention from both industry and academia due to its
ability to provide an immersive experience. However, achieving
mobile VR delivery requires ultra-high transmission rate, deemed
as a ﬁrst killer application for 5G wireless networks. In this
paper,
in order to alleviate the trafﬁc burden over wireless
networks, we develop an implementation framework for mobile
VR delivery by utilizing caching and computing capabilities
of mobile VR device. We then jointly optimize the caching
and computation ofﬂoading policy for minimizing the required
average transmission rate under the latency and local average
energy consumption constraints. In a symmetric scenario, we
obtain the optimal joint policy and the closed-form expression of
the minimum average transmission rate. Accordingly, we analyze
the tradeoff among communication, computing and caching, and
then reveal analytically the fact that the communication overhead
can be traded by the computing and caching capabilities of
mobile VR device, and also what conditions must be met for
it to happen. Finally, we discuss the optimization problem in
a heterogeneous scenario, and propose an efﬁcient suboptimal
algorithm with low computation complexity, which is shown to
achieve good performance in the numerical results.

I. INTRODUCTION AND FRAMEWORK

Virtual reality (VR) over wireless networks is gaining
increasing attention recently, due to their ability to generate a
digital experience at the full ﬁdelity of human perception [1].
Recently, a market report forecasts that the data consumption
from wireless VR headsets (smartphone-based or standalone)
will grow by over 650% in the next 4 years (2017-2021) [2].
One major mobile VR service is streaming 360◦ videos, which
are currently available on some major video platforms, such as
Youtube, Facebook, etc. However, currently available mobile
VR can only provide narrow ﬁeld of view (FOV), e.g., about
90◦ FOV for Daydream View. Achieving high-quality mobile
VR delivery is extremely urgent nowadays for a real immersive
experience.

However, achieving mobile VR delivery leads to ultra-
high transmission rate requirement (on the order of G bit/s),
deemed as a ﬁrst killer application for 5G wireless network
[3]. This is mainly due to the following two facts. First, a
360◦ VR video consumes much larger data (on the order of
Gigabytes), since a 360◦ video provides larger-than-normal
view angle (e.g., 110◦×90◦ versus 30◦×20◦) and higher-than-
normal resolution (e.g., 8K versus 4K) [4] for immersive and
good user experience. Secondly, 360◦ video delivery requires
extremely low latency (less than 20ms) so as to avoid dizziness
and nausea [3].

In order to tackle such challenges, researchers in both
academia and industry make great efforts. First of all, at any
given time, considering that any user only watches a portion
of the 360◦ video, namely FOV [6], the corresponding FOV is
chosen to be transmitted instead of the entire panoramic video,
thereby saving bandwidth signiﬁcantly. Then, by knowing
user’s FOV, researches on multi-view and tile-based video
streaming are being investigated [7]. Moreover, in order to
further improve the quality of experience for tile-based video
streaming, motion-prediction-based transmission is also being
studied based on dataset collected from real users [8].

In addition to the aforementioned work [6]–[8] which
mainly focus on the VR video-level design, researches on
investigating the opportunities for mobile VR delivery that can
be potentially obtained via efﬁciently utilizing resources at the
mobile edge network (MEN), i.e., communications, computing
and caching (3C), are also drawing increasing attention [4],
[5], [9]–[11]. Speciﬁcally, [4] illustrates the potential gain ob-
tained from utilizing the resources at the MEN via simulation
results. [5] provides an explicit VR framework, based on which
the insights on how to deliver 360◦ video in mobile network
are illustrated. [9] analyzes the optimal subcarrier allocation
to maximize VR QoS for streaming VR videos over hetero-
geneous small-cell network. [10] formulates an optimization
framework for VR video delivery in a cooperative multi-cell
network. [11] develops a communication-constrained MEC
framework to reduce communication resource consumption via
exploiting the computation and caching resources at mobile
devices.

In this paper, we try to fully exploit

the mobile edge
resources to alleviate the communication burden over the wire-
less network for 360◦ VR video delivery, especially the com-
puting and caching capabilities at the mobile VR device [12].
To illustrate the problem at hand, we ﬁrst analyze a typical VR
framework [5], as shown in Fig. 1: 1) Stitching, which obtains
a spherical video by stitching the videos captured by a multi-
camera array; 2) Equirectangular projection, which obtains 2D
video by unfolding the spherical video; 3) Extraction, which
extracts the 2D video to obtain 2D FOV corresponding to the
viewpoint obtained from the tracker at mobile VR device; 4)
Projection, which projects the corresponding 2D FOV into
3D FOV; 5) Rendering, which renders the obtained 3D FOV
on the display of mobile VR device. Obviously, the tracker
and rendering components must be computed at the mobile
VR device. In addition, we assume that the stitching and

 
 
 
 
 
 
Captured 
Videos

Stitching

Cloud Server

Spherical Video

Equirectangular 
Projection

2

Computing

Cache

Computing

Cache

FOV Request

VR device

2D Video

MEC server or 
VR device

VR device

Mobile VR Device

MEC Server

Cloud Server

Tracker

Viewpoint

Extraction

2D FOV

Projection

3D FOV

Rendering

Fig. 2. System model.

Fig. 1. A typical framework of VR service [5].

the cloud server. Meanwhile,

equirectangular projection components are computed ofﬂine
at
the extraction component
is computed online at the cloud server. In this way, it can
not only release mobile edge computing (MEC) server or
mobile VR device from heavy computation process, but also
alleviate the trafﬁc burden on the wireless link, since such three
components require the entire 360◦ video as their inputs.

A key observation is that the projection component can be
computed either at the MEC server or the mobile VR device
due to its low computational complexity [6] and increasing
computation capability at the mobile edge network [4]. Speciﬁ-
cally, ofﬂoading projection to the mobile VR device can save at
least half of the wireless trafﬁc load compared with computing
projection at the MEC server. This is mainly due to the fact
that in order to create a stereoscopic vision, the projection
component has to be computed twice (one for each eye) to
obtain two slightly differing images [6], and thus the data size
of its output (i.e., 3D FOV) is at least twice larger than that
of its input (i.e., 2D FOV). However, ofﬂoading projection to
the mobile VR device may incur longer latency compared with
computing projection at the MEC server, since the computation
capability of the MEC server is relatively stronger than that
of the mobile VR device. Thus, the ofﬂoading policy requires
careful design. In addition, some FOVs can be cached at the
mobile VR device proactively during idle trafﬁc period based
on the predictability of user FOV request process, so as to
reduce the trafﬁc burden over the wireless link during playback
of VR video [13]–[15].

Based on this proposed framework, we formulate the joint
caching and ofﬂoading policy optimization problem to mini-
mize the average transmission rate under both latency and local
energy consumption constraints in this paper. Speciﬁcally, we
consider a cache-enabled MEC system with one single-antenna
MEC server (e.g., base station (BS)) serving one mobile user
via a wireless link. For a symmetric scenario, the optimal
joint caching and computing ofﬂoading policy is obtained by
analyzing the problem structure. Then, based on the closed
form expression of the minimum average transmission rate,
we analyze the three-way tradeoff among communication,
computing and caching, which provides useful guidelines for
future mobile VR delivery design. At last, we discuss the

optimization problem for a heterogeneous scenario, and pro-
pose an efﬁcient suboptimal algorithm with low computation
complexity, which is shown to achieve good performance in
numerical results.

II. SYSTEM MODEL

As illustrated in Fig. 2, we consider a cache-enabled MEC
system with one single-antenna MEC server (e.g., BS) serving
one mobile user via a wireless link. The mobile user uses
its single-antenna and cache-enabled mobile VR device to
run a VR application. In this paper, we focus on the on-
demand VR video streaming. As mentioned above, instead
of transmitting the whole 360◦ video, the MEC server only
delivers the corresponding FOV to the mobile VR device at
each time.

A. VR Task Model

For any viewpoint i ∈ I, where I , {1, ..., N } represents
the viewpoint space [10], there exist a 2D FOV and a 3D FOV
correspondingly, which are the input and output of the pro-
jection component as shown in Fig. 1, respectively. For each
viewpoint i ∈ I, the computation process of projecting the 2D
FOV into 3D FOV is characterized by a 4−tuple (I, O, w, τ ).
Speciﬁcally, I and O denote the data size (in bits) of the
corresponding 2D FOV and 3D FOV, respectively. Generally,
O/I ≥ 2. This is because in order to create a stereoscopic
vision, the projection component has to be computed twice
(one for each eye) to obtain two slightly differing images
[6]. w and τ denote the required computation cycles per bit
and the maximum tolerable latency (in seconds), respectively.
In addition, denote with Pi the stationary probability for the
mobile user requesting viewpoint i [10]. We consider uniform
distribution, i.e., Pi = 1
N for each i ∈ I.1

B. Caching and Ofﬂoading

First, we consider the cache placement at the mobile VR
device. We assume that the mobile VR device is able to store
the 2D FOVs for some viewpoints and equipped with a cache
size CI (in bits), where C is an integer. Denote with ci ∈
{0, 1} the caching decision for viewpoint i, where ci = 1
means that the 2D FOV for viewpoint i is cached in the VR

1The heterogeneous popularity distribution is considered in Section V. In
addition, in order to capture the temporal correlation of user’s requests for
different FOVs, we would like to model user request process for FOVs as a
Markov chain in the future work.

device, and ci = 0 otherwise. Under the cache size constraint,
we have

ci ≤ C.

N

i=1
X

(1)

Next, we consider the computation ofﬂoading for the pro-
jection component. For each viewpoint i ∈ I, denote with
di ∈ {0, 1} the computation ofﬂoading decision, where di = 0
means that the projection component is computed at the MEC
server and di = 1 means that the projection component is
computed at the mobile VR device.

Speciﬁcally,

if di = 0,

i.e., computing projection for
viewpoint i at the MEC server, the execution for delivering
the requested 3D FOV consists of such two stages: 1) the
2D FOV downloaded from the cloud server is projected into
3D FOV at the MEC server; 2) the 3D FOV is transmitted
to the mobile VR device via the wireless link. Denote with
Ri the transmission rate (in bit/s) of the wireless link for
viewpoint i and f0 the CPU-cycle frequency (in cycle/s) of
the MEC server. Then, the latency required for serving the
requested 3D FOV is Iw
. Under the latency constraint,

f0 + O
Ri
(1 − di) ≤ τ , we have

i.e.,

Iw

f0 + O
Ri

(cid:16)

(cid:17)

Ri ≥ R0(1 − di),

i ∈ I,

(2)

τ − Iw
f0

where R0 , O
represents the least required transmission
rate when the projection is computed at the MEC server. Here,
we assume that Iw
f0 < τ for feasibility, i.e., the projection
the MEC server can be completed within
computation at
the deadline. Considering that
the MEC server is usually
connected to an electricity grid, we do not take into account
the energy consumption at the MEC server in this paper.

If di = 1, i.e., ofﬂoading the projection component to the
mobile VR device, the execution consists of such two stages:
1) the 2D FOV for viewpoint i that is not cached in the
mobile VR device is downloaded from the MEC server; 2) the
projection component is computed at the mobile VR device.
Denote with f1 the CPU-cycle frequency (in cycle/s) of the
mobile VR device. Then, the required latency is I(1−ci)
+ Iw
f1 .
di ≤ τ , we have
Under latency constraint, i.e.,

Ri

I(1−ci)
Ri

+ Iw
f1

Ri ≥ R1(1 − ci)di,

(cid:16)

(cid:17)
i ∈ I,

(3)

τ − Iw
f1

where R1 , I
represents the least required transmission
rate when the projection is computed at the VR device and
without caching. Here, we assume that Iw
f1 < τ for feasibility,
i.e., the projection computation at the mobile VR device can
be completed within the deadline.2 Denote with fmin , Iw
τ
the minimal required frequency for the mobile VR device. In
brief, the latency constraints (2) and (3) can be rewritten as

Ri ≥ R0(1 − di) + R1(1 − ci)di,

i ∈ I.

(4)

2It is reasonable considering that the computation capability of mobile VR
device becomes stronger with the development of Graphic Processing Unit
(GPU) as well as the projection component is not very complex.

3

The energy consumption for computation per cycle at the
mobile VR device with frequency f1 is kf 2
1 , where k is a
constant related to the hardware architecture [16]. Considering
that the mobile VR device is powered by its own battery,
denote with ¯E the maximum average energy available at the
VR device over a period of τ . Then, under the average energy
consumption constraint of the mobile VR device, we have

kf 2
1 Iw
N

N

i=1
X

di ≤ ¯E,

(5)

where N ¯E
kf 2

1 Iw is assumed to be an integer throughout this paper.

III. PROBLEM FORMULATION AND OPTIMAL POLICY

A. Problem Formulation

A feasible joint caching and ofﬂoading policy is deﬁned as

follows:

Deﬁnition 1 (Feasible Joint Policy): A feasible joint caching
and ofﬂoading policy is a mapping from the system resource,
i.e., (C, ¯E, f0, f1), and the VR projection parameters, i.e.,
(I, O, w, τ ), into the joint caching and ofﬂoading decision,
denoted as (c, d), where c , (ci)i∈I denotes the caching
decision, satisfying both the cache size constraint (1) and the
latency constraints (4), and d , (di)i∈I denotes the ofﬂoading
decision, satisfying both the latency constraints (4) and the
local average energy consumption constraint (5).

Given a feasible joint policy, the average transmission rate
N
is given as 1
i=1 Ri. In this paper, we would like to obtain
N
the optimal joint policy to minimize the average transmission
rate. The optimization problem is formulated as follows:

P

Problem 1 (Joint Caching and Ofﬂoading Optimization):

min
c,d

s.t.

N

Ri

1
N

i=1
X
(1) (4) (5).

In order to minimize the average transmission rate, it is
direct to observe that the latency constraint (4) is reduced to
equality, i.e., Ri = R0(1 − di) + R1(1 − ci)di for each i ∈ I.
For ease of structural property analysis and without loss of
equivalence, Problem 1 is rewritten as:

Problem 2 (Equivalent Joint Policy Optimization):

R0 −

min
c,d

s.t.

(R0 − R1)
N

N

di −

i=1
X
(1) (5).

R1
N

N

i=1
X

cidi

Denote with R∗ the optimal objective value of Problem 2 and
(c∗, d∗) the optimal joint decision.

Remark 1 (Performance Gain Analysis): From Problem
2, we note that the ﬁrst term of its objective function, i.e.,
R0, represents the average transmission rate required without
the viewpoints are
ofﬂoading,
computed at
two
terms represents the local computing gain. Speciﬁcally, the
N
second term of its objective function, i.e., (R
i=1 di,

the MEC server. The sum of the last

the projections for all

0−R
N

i.e.,

)

1

P

represents the gain obtained from local computing without
caching, which depends on the relationship between R0 and
R1, and also the computing capacity of the mobile VR device.
N
The last term, i.e., R
i=1 cidi, represents the gain obtained
N
from local computing with caching, which depends on both the
computation and caching capacity of the mobile VR device.

P

1

B. Optimal Joint Policy

P

First, for notational simplicity, denote with d ,

N
i=1 di
N
and c ,
i=1 ci the number of ofﬂoaded projections and that
of 2D FOVs cached at the mobile VR device, where from
(5) and (1), we have d ∈ {0, ..., N ¯E
1 Iw } and c ∈ {0, ..., C},
kf 2
respectively. Considering that the projection parameters of
each viewpoint i ∈ I are the same, in the following discus-
sion, without loss of generality, given d, we assume that the
corresponding d = (di)i∈I is obtained from:

P

4

9
x 10

∗

R

3
2.5
2
1.5
1
0.5
0
0

20

40

C
N

(%)

60

80

100

80

100

0

20

(%)

60

40
¯E
kf 2
1 Iw

Tradeoff among communication, computing and caching
Fig. 3.
¯E
under the latency constraint, where any (R∗, C
N ,
1 Iw ) point in this
kf 2
3D ﬁgure can achieve τ = 20 ms. I = 25M bits, O = 50M bits,
N = 6 × 104, k = 10−27.

di =

1
0
(

i = 1, ..., d,
otherwise.

And the corresponding optimal value R∗ is given as:

(6)

Next, by analyzing the objective function of Problem 2, we

obtain the following optimality property of the joint policy.

Lemma 1 (Optimality Structural Property): For any i ∈ I

such that di = 0, ci = 0 without loss of optimality.

Remark 2: Lemma 1 indicates that caching 2D FOV of
any viewpoint i ∈ I at the mobile VR device can achieve
performance gain only when the corresponding viewpoint i
is computed at the mobile VR device. Otherwise, there is no
need to cache it to save the storage cost of the VR device.

Under the assumption of (6), from Lemma 1, we obtain the

corresponding optimal caching decision c∗ as follows.

Corollary 1 (Optimal Caching): Under the assumption (6),

an optimal caching decision c∗ is given as

c∗
i =

1 i = 1, ..., C,
0 otherwise,

(

(7)

with c∗ = C.

Remark 3 (Optimal Caching): Based on (6) (7), the number
of 2D FOVs cached at the mobile VR device can be inde-
pendent of the number of ofﬂoaded tasks d without loss of
optimality.
Then,

the objective function of Problem 2, denoted as

f (d, c∗), is rewritten as

f (d, c∗) , R0 −

R0 − R1
N

d −

R1
N

min{d, C}.

(8)

Finally, by analyzing the structure of (8), we obtain the
optimal number of ofﬂoaded projections, denoted as d∗, and
the corresponding minimum average transmission rate R∗
from the following lemma.

Lemma 2 (Optimal Ofﬂoading and Minimum Average
Transmission Rate): The optimal ofﬂoading decision d∗ is
given as

kf 2

N ¯E
1 Iw ,
N ¯E
1 Iw ,

kf 2
C,

if N ¯E
1 Iw ≤ C,
kf 2
else if R0 > R1,
otherwise.

(9)

d∗ = 




¯E
R0(1 −
1 Iw ),
kf 2
R0 − (R0 − R1)
R0(1 − C

N ),

¯E
1 Iw − R
kf 2

C
N ,

1

if N ¯E
1 Iw ≤ C,
kf 2
else if R0 > R1,
otherwise.

R∗ = 


(10)

Remark 4 (How Many VR Tasks to be Ofﬂoaded?): From
(9), if N ¯E
1 Iw ≤ C, d∗ is limited by the computation capacity at
kf 2
the VR device. This is because all the ofﬂoaded tasks can be
cached at the VR device. Otherwise, if R0 > R1, d∗ is limited
by the computation capacity at the mobile VR device, since
ofﬂoading itself can save transmission rate. On the other hand,
if R0 ≤ R1, d∗ is limited by the local caching capacity C,
since the gain of ofﬂoading only comes from local caching.

IV. DISCUSSIONS ON TRADEOFFS

In this section, we discuss the tradeoff among communica-
tion, computing and caching, and the impacts of f1 and ¯E on
the minimum average transmission rate R∗ based on Lemma 2.

A. Tradeoff among Communication, Computing and Caching

Based on (10), we discuss the tradeoff among communica-
tion, computing and caching. Given C, we note that R∗ de-
creases with the computing capacity N ¯E
1 Iw . The performance
kf 2
gain obtained from the increase of N ¯E
1 Iw increases with C,
kf 2
which grows from 46% when C = 0 to 100% when C = N ,
as illustrated in Fig. 3. This indicates that caching capacity
promotes the exploitation of the computing capacity at the
mobile VR device. On the other hand, given N ¯E
1 Iw , we see
kf 2
that if N ¯E
1 Iw > C, R∗ decreases linearly with C. However,
kf 2
when N ¯E
1 Iw ≤ C, R∗ does not decrease with C. Hence, given
kf 2
¯E and f1, we obtain the minimum required cache size, denoted
as C∗, which minimizes R∗, as follows.

Corollary 2 (Minimum C∗ given ¯E and f1): Given ¯E and

1 Iw and R∗ = R0(1 − N ¯E
f1, C∗ = N ¯E
kf 2
kf 2

1 Iw ), ∀ C ≥ C∗.

9
x 10

3

C. Impact of ¯E on R∗

5

2.8

2.6

∗

R

2.4

2.2

2

1.8

C
N
C
N
C
N

= 0

= 10%

= 30%

2

3

4

5

6

f1

7

10

x 10

Fig. 4.

Impact of f1 on R∗. Parameters are the same as that in Fig. 3.

9
x 10

3

2.5

∗

R

2

1.5

C
N
C
N
C
N

= 0

= 10%

= 30%

1
0

20

40

¯E
kf 2
1 Iw

60
(%)

80

100

Fig. 5.

Impact of ¯E on R∗. Parameters are the same as that in Fig. 3.

B. Impact of f1 on R∗

From (10), we observe that if N ¯E
kf 2

1 Iw ≤ C, R∗ increases
with f1 monotonically. This is mainly due to the fact that when
N ¯E
1 Iw ≤ C, the local computing gain with caching is limited
kf 2
by the computing capacity, while increasing f1 decreases the
computing capacity. Otherwise, if R0 ≤ R1, R∗ does not
decrease with f1 but with C, since local computing without
caching can not bring performance gain and the gain from
ofﬂoading is limited by the caching capacity. On the other
hand, if R0 > R1, by derivative w.r.t. f1, we obtain the
following lemma.

Lemma 3: If N ¯E
kf 2

1 Iw > C and R0 > R1, R∗ ﬁrst decreases

and then increases with f1.

Remark 5: Lemma 3 is mainly due to the fact that when
f1 is relatively small, increasing f1 alleviates the transmis-
sion rate requirement, while when f1 grows relatively large,
increasing f1 decreases the computation capacity.

We illustrate the analytical result in Fig. 4. We can observe
that there exists an optimal computation frequency of the
mobile VR device, denoted as f ∗
1 , which minimizes R∗.
Extremely, when C = 0, via derivative w.r.t. f1, we obtain
f ∗
1 as follows.
Corollary 3 (Optimal f ∗
1 that minimizes R∗ is obtained from
f ∗

1 without Caching): When C = 0,

f ∗
1 =

1 −

I
4R0τ

(cid:16)
where fR , Iw

(cid:17)
τ −I/R0 .

fR +

1 −

r(cid:16)

I
4R0τ

(cid:17)

2

f 2
R −

Iw
τ

fR, (11)

From (10), we observe that if N ¯E
1 Iw ≤ C, R∗ decreases
kf 2
with ¯E linearly at the decreasing rate
R
1 Iw . Otherwise, if
kf 2
R0 ≥ R1, R∗ decreases with ¯E linearly at the decreasing rate
0−R
R
1 Iw , as illustrated in Fig. 5. On the other hand, if R0 ≤ R1,
kf 2
R∗ does not decrease with ¯E, since the gain of computing at
the mobile VR device is only limited by the caching capacity.

0

1

V. HETEROGENEOUS SCENARIO DISCUSSION

In this section, we consider a heterogeneous scenario, where
the projection parameters for each viewpoint may be different
from those of others, denoted as (Ii, Oi, wi, τi) for each
viewpoint i ∈ I. Similar to Problem 2, in order to obtain
the optimal joint caching and ofﬂoading policy to minimize
the average transmission rate, the optimization problem is
formulated as follows:

Problem 3 (Joint Policy Optimization in Heterogeneous

Scenario):

PiR0

i −

N

i=1
X

N

i=1
X
N

min
c,d

s.t.

Pi(R0

i − R1

i )di −

N

PiR1

i cidi

i=1
X
1 Iiwidi ≤ ¯E,

Pikf 2

i=1
X
N

i=1
X

Iici ≤ C′,

(12)

(13)

where R0
i

, Oi

τi− Iiwi
f0

and R1
i

,

Ii
τi− Iiwi
f1

denote the minimum

required transmission rate to satisfy the latency constraint,
when the projection of viewpoint i is computed at the MEC
server and computed at the mobile VR device, respectively.
C′ (in bits) denotes the cache size at the VR device.

Note that Problem 3 is equivalent to a bilinear knapsack
problem. An optimal algorithm is proposed in [17], which
consists of two stages. The ﬁrst stage is to implement a moun-
tain climbing algorithm (MCA) to obtain a local maximum.
The second one is to adjoin a cutting plane which eliminates
a local maximum and yet does not eliminate any solution
potentially better than the current incumbent. However, for
the MCA in the ﬁrst stage, at each iteration, optimizing the
knapsack problem via dynamic programming yields an overall
running time of O(N 2) and requires an overall memory space
of O(N 2), respectively. Hence, it may be infeasible when N
is relatively large (e.g., N = 104). In order to tackle the
computational complexity of MCA, heuristically, we propose
a greedy algorithm (GA). In this way, the overall running time
is reduced to O(N logN ) and the required memory space is
of O(1) via heap sort. Note that GA is computed ofﬂine, i.e.,
before the mobile VR device runs the VR application. Thus,
the quality of user experience will not be inﬂuenced by GA.
As shown in Fig. 6, in the heterogeneous scenario, the 3C
tradeoff exhibits similar property to that in the symmetric
scenario. Differently, when γ = 0.8, the gain obtained from

 
 
 
 
Algorithm 1 Greedy Algorithm (GA)
1: Joint Greedy Allocation. Sort I according to PiR
Ii

ing order and obtain c and d from

0
i

in descend-

c⌊j⌋ =

1,
0,

(

j = 1, · · · , sc − 1,
otherwise,

d⌊j⌋ =

1,
0,

(

j = 1, · · · , min{se − 1, sc − 1},
otherwise,

(14)

(15)

0
i

where ⌊j⌋ represents the index i ∈ I with the j-th max-
imal value of PiR
index satisfying
Ii
sc
j=1 I⌊j⌋ > C ′ and se represents
se−1
j=1 P⌊j⌋kf 2
1 I⌊j⌋w⌊j⌋ ≤ ¯E and

sc−1
j=1 I⌊j⌋ ≤ C ′ and
the split index satisfying
P

, sc represents the split

j=1 P⌊j⌋kf 2
se

P
1 I⌊j⌋w⌊j⌋ > ¯E.
P

2: Additional Ofﬂoading Greedy Allocation. If se > sc, sort I ′ ,
in descending

i } according to R

P
{i ∈ I : di = 0, R0
order and obtain {di : i ∈ I ′} from

0
1
i −R
i
kIiwif 2
1

i > R1

d⌊j′⌋ =

1,
0,

(

j′ = 1, · · · , s′
e,
otherwise,

(16)

where ⌊j′⌋ represents the index i ∈ I ′ with the j′-th maximal
0
1
value of R
i −R
e represents the split index satisfying
i
kIiwif 2
1
se−1
j=1 P⌊j⌋kf 2
1 I⌊j′⌋w⌊j′⌋ ≤ ¯E and
se−1
j=1 P⌊j⌋kf 2
1 I⌊j′⌋w⌊j′⌋ > ¯E.

′
e−1
s
j′=1 P⌊j′⌋kf 2
′
s
j′=1 P⌊j′⌋kf 2
e

1 I⌊j⌋w⌊j⌋ +
1 I⌊j⌋w⌊j⌋ +

and s′

P

P

P

P

∗

R

2.5

2

1.5

1

0.5

0
0

9
x 10

20

40

C ′

(%)

γ = 0
γ = 0.8

60

80

100

80

100

60
¯E′

40
(%)

0

20

Fig. 6. Tradeoff in Heterogeneous Scenario under GA. ¯C ′ ,
¯E′ ,
parameters are the same as that in Fig. 3.

, Ii ∈ [15, 25] M bits and Pi ∝ 1

¯E
i=1 Pikf 2

1 Iiwi

PN

C
PN
i=1 Ii
iγ . The other

,

the increase of C decreases w.r.t. C, since as γ grows, the
probability that a requested ﬁle is requested and ofﬂoaded or
cached becomes larger.

VI. CONCLUSION

In this paper, we develop an implementation framework for
mobile VR delivery by utilizing the caching and computing
capacities of the mobile VR device and optimize the joint
caching and ofﬂoading policy to minimize the average trans-
mission rate under the latency and local energy consumption
constraints in both symmetric and heterogeneous scenario. In
the symmetric scenario, we obtain the optimal joint policy and
the closed form expression of the minimal transmission rate,
based on which we analyze the tradeoff among communica-

6

tion, computing and caching. In the heterogeneous scenario,
we propose GA, which is efﬁcient and shown to achieve good
performance. In summary, we show theorectically that:

• R∗ increases with f1 if N ¯E
kf 2
• R∗ ﬁrst decreases with f1 and then increases with f1 if

1 Iw ≤ C;

N ¯E
1 Iw > C and R0 ≥ R1;

kf 2

linearly if N ¯E
kf 2

• R∗ stays unchanged with f1 if N ¯E
1 Iw > C and R0 < R1;
kf 2
• R∗ decreases with the caching size C of mobile VR
1 Iw > C, while stays unchanged otherwise.
Note that in this paper, we mainly focus on obtaining ﬁrst-
order design insights and plan to further validate the proposed
framework via real tests in future work.

REFERENCES

[2] Juniper,“Virtual

[1] R. Begole, [Online] available: https://www.forbes.com/sites/valleyvoices
/2016/02/09/why-the-internet-pipes-will-burst-if-virtual-reality-takes-off/.
con-
available:

tent
[Online]
https://www.juniperresearch.com/researchstore/innovation-
disruption/virtual-reality/hardware-content-accessories, Aug. 2017.

markets:
2017-2022,”

accessories

Hardware,

reality

&

[3] ABI Research, Qualcomm,
First Wave

of

“Augmented

the
https://www.qualcomm.com/documents/augmented-and-virtual-reality-
ﬁrst-wave-5g-killer-apps, Feb. 2017.

5G Killer Apps,”

and Virtual Reality:
available:

[Online]

[4] E. Bastug, M. Bennis, M. Medard and M. Debbah, “Toward Intercon-
nected Virtual Reality: Opportunities, Challenges, and Enablers,” IEEE
Commun. Mag., vol. 55, no. 6, pp. 110–117, June 2017.

[5] M. Simone, K. Guenter, N. Amit, G. Zhuang, R. Ju and S. Dias, “VR is
on the Edge: How to Deliver 360◦ Videos in Mobile Networks,” ACM
SIGCOMM. Workshop on VR/AR Network, Aug. 2017.

[6] S. Reichelt, R. Hausselr, G. Futterer, and N. Leister, “Depth cues in
human visual perception and their realization in 3D displays,” in SPIE
Three-Dimensional Imaging, Visualization, and Display 2010, Orlando,
FL, April 2010.

[7] V. R. Gaddam, M. Riegler, R. Eg, C. Griwodz, and P. Halvorsen, “Tiling
in interactive panoramic video: Approaches and evaluation,” IEEE Trans.
on Multimedia, vol. 18, no. 9, pp. 1819–1831, 2016.

[8] C. Fan, J. Lee, W. Lo, C. Huang, K. Chen, and C. Hsu, “Fixation
Prediction for 360 Video Streaming to Head-Mounted Displays” in
Proceedings of ACM NOSSDAV 2017, June 2017.

[9] M. Chen, W. Saad, and C. Yin,“Resource management in a network of
wireless virtual reality devices: Machine learning meets multi-attribute
utility theory,” submitted to IEEE GLOBECOM, Dec. 2017.

[10] J. Chakareski, “VR/AR Immersive Communication: Caching, Edge
Computing, and Transmission Trade-Offs,” ACM SIGCOMM. Workshop
on VR/AR Network, Aug. 2017.

[11] X. Yang, Z. Chen, K. Li, Y. Sun and H. Zheng, “Optimal Task Schedul-
ing in Communication-Constrained Mobile Edge Computing Systems for
Wireless Virtual Reality,” arXiv preprint arXiv:1708.00606.

[12] H. Liu, Z. Chen, and L. Qian,“The three primary colors of mobile
systems” IEEE Commun. Mag., vol. 54, no. 9, pp. 15–21, Sep. 2016.
[13] H. Liu, Z. Chen, X. Tian, X. Wang and M. Tao, “On Content-centric
Wireless Delivery Networks,” IEEE Wireless Commun., vo 21, no. 6,
pp. 118–125, Dec. 2014.

[14] K. Wang, Z. Chen, and H. Liu, ”Push-based Wireless Converged Net-
works for Massive Multimedia Content Delivery,” IEEE Trans. Wireless
Commun., vo.13, no.5, pp. 2894-2905, May 2014.

[15] H. Feng, Z. Chen and H. Liu, “Design and Optimization of VoD
Schemes With Client Caching in Wireless Multicast Networks,” IEEE
Trans. Veh. Technol.

[16] S. Ko, K. Han, and K. Huang, “Wireless Networks for Mobile Edge
Computing: Spatial Modeling and Latency Analysis (Extended version),”
arXiv preprint arXiv:1709.01702, 2017.

[17] H. Konno, “An Algorithm for Solving Bilinear Knapsack Problems,”
Journal of the Operations Research Society of Japan, vol. 24, no. 4,
pp. 360–374, 1981.

 
 
