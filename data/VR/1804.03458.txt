8
1
0
2

r
p
A
0
1

]

A
N
.
h
t
a
m

[

1
v
8
5
4
3
0
.
4
0
8
1
:
v
i
X
r
a

The Virtual Ring Shear-Slip Mesh Update Method

Fabian Key∗, Lutz Pauli, Stefanie Elgeti

Chair for Computational Analysis of Technical Systems,
CCES, RWTH Aachen University,
52056 Aachen, Germany

Abstract

A novel method – the Virtual Ring Shear-Slip Mesh Update Method (VR-SSMUM) –
for the eﬃcient and accurate modeling of moving boundary or interface problems in the
context of the numerical analysis of ﬂuid ﬂow is presented. We focus on cases with
periodic straight-line translation including object entry and exit. The periodic character
of the motion is reﬂected in the method via a mapping of the physical domain onto
a closed virtual ring. Therefore, we use an extended mesh, where unneeded portions
are deactivated to control the computational overhead. We provide a validation case as
well as examples for the applicability of the method to 2D and 3D models of packaging
machines.

Keywords: Moving Boundary Problems, Mesh Update Method, Interface Tracking,
Space-Time Finite Element Method, Computational Fluid Dynamics

1. Introduction

As part of the analysis of ﬂuid ﬂow problems, we often encounter situations in which
we have to deal with deforming domains. These can either be due to movement of outer
boundaries or internal interfaces. Problems including moving boundaries or interfaces
impose special requirements on the numerical methods to model the involved motion
with respect to both the computational mesh and the solution ﬁeld. Figure 1 shows an
overview of diﬀerent approaches that have been developed for the analysis of moving
boundary or interface problems.

Commonly, a ﬁrst distinction is made between interface capturing and interface tracking
methods [1]. In the former approach, one employs an implicit description of the dynamic
boundary or interface on some reference mesh. More precisely, the distribution of a scalar
function is used to identify the bounds of the considered domains. This strategy implies
a certain degree of ﬂexibility, since (1) it allows complex interfaces and even topological
changes, and (2) it operates on ﬁxed spatial domains. However, it can potentially involve

∗Corresponding author
Email address: key@cats.rwth-aachen.de (Fabian Key)

NOTICE: this is the author’s version of a work that was accepted for publica-
tion in Computers and Fluids. Changes resulting from the publishing process,
such as peer review, editing, corrections, structural formatting, and other
quality control mechanisms may not be reﬂected in this document. Changes
may have been made to this work since it was submitted for publication.
A deﬁnitive version was subsequently published in Computers and Fluids,
https: // doi. org/ 10. 1016/ j. compfluid. 2018. 04. 006

c(cid:13) 2018. This manuscript version is made available under the CC-BY-NC-ND
4.0 license http: // creativecommons. org/ licenses/ by-nc-nd/ 4. 0/

April 11, 2018

 
 
 
 
 
 
Figure 1: Overview of numerical methods for moving boundary problems.

drawbacks with respect to accuracy of mass conservation, resolution of both discontinu-
ities and high gradients across the interface, or the imposition of boundary conditions.
The most common examples for interface capturing methods are the level-set method
[2, 3] and the volume-of-ﬂuid method [4].

The class of interface tracking methods is based on boundary-conforming meshes. This
requires an update of the computational mesh to account for the moving boundary.
There exist several strategies to adjust the mesh according to the change in the position
of the interface. One elementary approach is to perform a global remeshing of the altered
geometry. As a consequence, the solution ﬁeld has to be projected from the old mesh to
the newly created one. This increases not only the computational eﬀort, but also intro-
duces an additional projection error. In general, the computational costs for a complete
remeshing are quite high. Therefore, this is not a feasible solution for most cases.
In contrast, other mesh deformation methods follow the idea of retaining at least the
connectivity information of the original mesh. They aim at varying only the position
of interior mesh nodes based on the prescribed boundary motion; an approach, which
reduces the computational eﬀort signiﬁcantly. Examples are PDE-based methods like
the elastic mesh update method [5], spring-based methods [6] or the concept of radial
basis functions [7].
Some further methods enhance these strategies and apply a subsequent mesh optimiza-
tion based on local mesh topology changes [8, 9]. These could be, e.g., edge swapping or
vertex smoothing operations. As a consequence, also large displacements can be consid-
ered.

For situations in which the previous methods are not applicable, local remeshing strate-
gies have been developed. For cases including large relative movement, the Shear-Slip
2

Mesh Update MethodsGlobal RemeshingVertex DisplacementPDE-based MethodsSpring-based MethodsRadial Basis Functions…Local RemeshingVertex Addition/RemovalConnectivity Update…Moving Boundary Problems Interface TrackingInterface CapturingLevel-Set MethodVolume of Fluid Method…Weak Domain CouplingSliding InterfacesChimera Method Immersed Boundary Methods…Mesh Update Method (SSMUM) was introduced and applied in [10] to translational and
in [11, 12, 13] to rotational movement. Here, only elements in a small portion of the
mesh are deformed and remeshed by means of a connectivity update. This circumvents
a projection of the solution ﬁeld and reduces the eﬀort of updating the mesh. So far,
the method was mainly applied to model the relative movement of rotating objects with
respect to other ﬁxed parts. Several results for simulations in both 2D and 3D as well as
on unstructured grids are available, but there is only one example which covers transla-
tional movement.
In the context of ﬁnite volume schemes, boundary movement in two dimensional prob-
lems has been modeled by adding and removing vertices in the corresponding space-time
mesh [14].

As an alternative to the former methods, one can also follow weak domain coupling
strategies to account for the moving boundary or interface. Typically, these methods
are based on composite grids that are made up of sub-grids, which are not connected in
the classical sense. The coupling of the domains is rather achieved by introducing addi-
tional conditions on the solution ﬁeld. The Chimera method [15, 16, 17] was introduced
to simplify the mesh generation for complex geometries. It works on overlapping grids
that, individually, are easy to generate. The coupling is performed via an interpolation
of the solution ﬁeld in the overlapping regions, which again requires a projection. The
continuity of the solution ﬁeld can also be weakly imposed over a sliding interface, e.g.,
between rotating components [18, 19]. A further approach is the immersed boundary
method [20], where simulations are always performed on a cartesian background grid.
The actual boundary of the geometry is immersed in these grids and boundary condi-
tions are applied via an additional forcing function, which enters the underlying state
equations.

Summarizing, a great variety of methods exists for the solution of moving boundary
problems. The choice of a speciﬁc method commonly depends on the special characteris-
tics of the present problem. Thus, we give a characterization of problems which we aim
to solve with the proposed method in the following. We will focus on cases that include
large relative translational movement and assume periodic motion including topological
domain changes in the sense of object entry and exit. Our aim is to avoid projection of
the solution and the associated inaccuracies, as well as global remeshing or mesh mod-
iﬁcations to keep the computational eﬀort small. In this paper, we will present a novel
method that allows to eﬃciently and accurately handle moving boundary problems. We
developed an interface tracking approach that is embedded in a Deforming-Spatial Do-
main/Stabilized Space-Time (DSD/SST) ﬁnite element framework.
It is an extension
of the SSMUM and its main idea is to map the translational movement in the physical
domain to a continuous circular movement in an abstract space, i.e., along a virtual
ring. Therefore, we will refer to it as the Virtual Ring Shear-Slip Mesh Update Method
(VR-SSMUM).

The paper starts with a characterization of the underlying moving boundary problem
and explains the fundamental ideas of the proposed mesh update method in Section
In Section 3, we will brieﬂy outline the space-time ﬁnite element method for the
2.
incompressible Navier-Stokes equations and place the focus on the implementation of
3

the VR-SSMUM into this framework in Section 4. Section 5 contains numerical exam-
ples including a validation case and further test cases in 2D and 3D to demonstrate the
applicability of the method.

2. Problem Statement

In the following, we will focus on the modeling of domain deformations that are on the
one hand strictly translational, prescribed and periodic in nature and on the other hand
aﬀect only a portion of the domain boundary, thus leading to large relative movement.
The Shear-Slip Mesh Update Method (SSMUM) presented in [11] has been developed
for this kind of problems including large but regular boundary displacements. Although
the concept was proposed also for straight-line translation, only one example was shown
in [10]. Therein, two trains passing in a tunnel have been simulated. The computations
have been performed on a structured grid and the issue of modeling the entry or exit of
the trains into or out of the tunnel has not been adressed.

However, the applications we have in mind require the use of unstructured grids due
to their complex geometry and also include object entry and exit by the virtue of the
periodic movement. As an example, this could be the simulation of processes which in-
clude the movement of a conveyor belt through a stationary machine casing as present in
packaging machines or coating procedures. Thus, we present the Virtual Ring Shear-Slip
Mesh Update Method (VR-SSMUM), which is an extension of the SSMUM, and is appli-
cable to a certain class of problems including translational movement. More speciﬁcally,
the movement can be characterized in the way described above: unidirectional, periodic
and relative to a static reference boundary. The method is able to work on unstructured
grids and, additionally, allows us to model object entry and exit. The main beneﬁts of
the SSMUM, namely no need for either global remeshing or projection of the solution, are
inherited. This implies the favorable properties of the method with respect to eﬃciency
and accuracy.

First, we will shortly review the concept of the SSMUM which served as basis for the
presented VR-SSMUM in the context of translational movement. The basic idea is to

(a)

(b)

Figure 2: Two objects in relative motion: the square undergoes an unidirectional translation, whereas
the wall does not move.
(b) Splitting into a moving and a static part
connected by update layer.

(a) Computational domain.

4

computationaldomainstaticmovingupdatelayersplit the computational domain into a moving and a static part, respectively. Subse-
quently, a thin layer of elements – the update layer – is added, which connects the
moving and static mesh portions. For illustration, we will consider two objects in rel-
ative translational movement, e.g., a box which moves along a static wall (see Figure 2a).

For this example, a splitting of the computational domain into a moving portion, a static
portion and the update layer is shown in Figure 2b. The moving and static domains each
hold a mesh, which is ﬁxed with respect to the corresponding boundaries. This means
that the moving mesh will perform a rigid body displacement as soon as the object and,
thus, its boundary starts to move. Due to the movement of the interface between the
moving mesh and the update layer, the elements in this layer undergo a shear deforma-
tion. This is referred to as shear step in the SSMUM. When the movement proceeds,
the elements will become more and more distorted. To counter this, the SSMUM applies
a slip step, which means that the update layer is remeshed by means of a connectivity
update, i.e., the elements will then be comprised of a diﬀerent, yet neighbouring set of
nodes. In Figure 3, this procedure is illustrated for the discussed example of the moving
square.

in the update layer deform due to movement of the square (shear step). A
Figure 3: Elements e
•
connectivity update reverts the deformation (slip step). Nodes of the moving and static mesh are
denoted as m
•

, respectively.

and s

•

The connectivity update is based on update node information: each node of an aﬀected
element knows by which node it has to be replaced in the update procedure. A pro-
jection of the nodal solution coeﬃcients is not necessary, since the nodes retain their
position. Nevertheless, an update of the connectivity alters the basis functions in the
aﬀected elements even if the nodes stay in place. Thus, the representation of the solution
diﬀers when the nodal values remain unchanged. A modiﬁcation of the original SSMUM
circumvents this inaccuracy by changing the connectivity over a time slab instead of
updating it between two time slabs [21]. Another approach is to incorporate the old
connectivity during the integration of the jump term inside the update layer. However,
our experience is that the solutions with and without this additional treatment show no
signiﬁcant diﬀerences if the grid, i.e., the update layer, is ﬁne enough.

Next, we will outline the underlying idea and the additional features of the VR-SSMUM,
which allows us to handle the class of moving boundary problems described above. In
order to address the periodicity, the moving domain is assumed to be built-up of charac-
teristic blocks. Furthermore, all blocks have identical discretization, i.e., the same mesh.
In the most general case, our moving domain can consist of only one block. Hence, the
assumption of characteristic blocks does not entail any restrictions on the choice of the

5

m0s0m1s1m2s2m3s3m4s4m5s5e1e2e3shearm0m1m2m3m4s0s1s2s3s4s5e1e2e3slipm0m1m2m3m4s1s2s3s4s5e1e2e3(a)

(b)

Figure 4: Moving domain for two squares which undergo translation. (a) Domain composed of charac-
teristic mesh blocks. (b) Characteristic mesh blocks plus additional copy.

moving geometry. The setup for an example with two moving squares is shown in Figure
4a.

The modeling of the movement by means of the computational grid is achieved through
the following idea: the translational, unidirectional movement in physical space is mapped
to a movement along a virtual ring in a more abstract space. To set up this ring, the
mesh for the moving domain is closed between its physical boundaries Γin and Γout by an
additional copy of the characteristic mesh block (see Figure 4b). The boundary of this
block will be denoted as Γvirt. We let Γin and Γvirt coincide in the abstract space and,
thus, the moving mesh now represents a closed ring. In Figure 5a, the virtual ring in
the abstract space is illustrated for the example discussed. We can identify the original
physical domain boundaries as points on this ring. Between these two points, the addi-
tional virtual block is depicted. The other segments correspond to the original blocks of
the moving domain. As one can conclude from the ﬁgure, the geometric periodicity is
automatically implied, since we have assumed that all blocks are identical. However, the
geometric periodicity does not enforce periodicity with respect to the solution ﬁeld, since
the mesh block, which enters the domain, is not the same one, which leaves the domain.
For the solution process, the mesh portion in the virtual region between outlet and inlet
is deactivated. It is only used to model the mesh deformation.

Once the movement can be modeled following this concept, we have to connect the
moving and static mesh portions. This can be done in the same way as it has been
proposed in the presentation of the SSMUM: in the intermediate space between the dif-
ferent mesh portions, we add a thin layer of hand made elements, which aggregate the
individual sub-meshes into one (see Figure 5b).

In contrast to the original version of the SSMUM, the update criterion is not (directly)
based on the shape of the elements in the update layer. Instead, an update is triggered
if any mesh point, which is part of the interface between the moving mesh portion and

6

movementmovingdomainΓinΓoutmovementmovingdomaincopyΓinΓoutΓvirt(a)

(b)

Figure 5: Virtual ring in abstract space for the example of two moving squares. (a) Moving mesh closed
by additional mesh block (dashed). (b) Closed moving mesh combined with static mesh by update layer.

the update layer, enters the virtual region and disappears in the physical space. Due to
the identity of the mesh blocks, the corresponding copy of this point in the next block
concurrently enters the physical domain at the opposite boundary. Thus, it is ensured
that we are always able to perform the connectivity update in the update layer.

3. Governing Equations and Solution Method

∈

In the present study, we deal with the ﬂow ﬁeld of a viscous, incompressible ﬂuid.
(0, T ) be an instant of time and nsd the number of space dimensions. The
Let t
Rnsd is enclosed by
time-dependent computational domain for time t given by Ωt ⊂
its boundary Γt. The velocity and pressure ﬁelds, u(x, t) and p(x, t), evolve according
to the incompressible Navier-Stokes equations. The equations for the conservation of
momentum and mass can be written as:
(cid:18) ∂u
∂t

(0, T ),

+ u

− ∇ ·

· ∇

(1)

−

(cid:19)

∈

u

ρ

f

∇ ·
where ρ is the ﬂuid density, which is assumed to be constant. An external force ﬁeld
enters the equations via the source term f (x, t). Considering a Newtonian ﬂuid, the
following relation for the stress tensor σ is used to close the set of equations:

∈

(0, T ),

(2)

σ = 0 on Ωt ∀
t
u = 0 on Ωt ∀
t

where

σ (u, p) =

pI + 2µε(u),

−

ε(u) =

(cid:16)

1
2

∇

u + (

∇

u)T (cid:17)

.

The boundary conditions of Dirichlet or Neumann type read

u = g on (Γt)g,
σ = h on (Γt)h,

7

n

·

(3)

(4)

(5)

(6)

ΓvirtΓinΓoutmovementmovingmeshΓvirtmovementΓinΓoutupdatelayerstaticmeshmovingmeshFigure 6: Sketch of a space-time slab Qn between lower and upper time level t+
space-time element Qe
n.

n and t−n+1 with exemplary

with complementary portions (Γt)g and (Γt)h of Γt.

The computations presented here are based on the DSD/SST ﬁnite element formula-
tion [22]. Instead of constructing the weak form for the underlying equations only over
the spatial domain, the space-time formulation involves the corresponding space-time
domain. This framework is particularly suitable for moving boundary or interface prob-
lems, since the deformation of the spatial domain over time is naturally involved. In the
discrete sense, the shape of the space-time elements already implies the movement.

Next, we will present the ﬁnite element function spaces for the DSD/SST method. Con-
sider the time interval (0, T ) and a partition into subintervals In = (tn, tn+1). The two
time levels tn and tn+1 line up in the ordered sequence of time levels 0 = t0 < t1 <
... < tN = T . For the time level n, the spatial domain and its boundary are denoted
as Ωn = Ωtn and Γn = Γtn , respectively. A so called space-time slab Qn is deﬁned as
the domain that emerges between Ωn, Ωn+1 and the surface Pn, which emerges from
Γt when t passes In. Figure 6 shows a sketch of such a space-time slab. Similar to the
spatial boundary Γt, we can assign portions of Pn, (Pn)g and (Pn)h, belonging to the
space-time boundary of Dirichlet or Neumann type.

For each space-time slab, the ﬁnite element function spaces for ﬁrst-order polynomials in
space and time are given as

S

(

(

V
(

S

∈

h
uh
u)n =
{
wh
h
u)n =
∈
{
h
h
p )n =
p )n = (

[H 1h(Qn)]nsd
[H 1h(Qn)]nsd

|

uh = g on (Pn)g}
,
wh = 0 on (Pn)g}
,
H 1h(Qn)
}

|

.

ph

{

∈

V

(7)

(8)

(9)

In contrast to the original publications, we follow the slightly modiﬁed formulation
presented in [23]. The stabilized space-time formulation for the incompressible Navier-
Stokes equations (1) and (2) then reads as follows:

8

xytt=t+nt=t−n+1ΓnΓn+1PnQnQenΩnΩn+1Given (uh)−n , ﬁnd uh

h
p )n such that
(
S

∈

wh

∀

∈

h
u)n and

(
V

qh
∀

(

h
p )n:
V

∈

(cid:90)

Qn

wh

·

(

u)n and ph
h
∈
S
(cid:16) ∂uh
∂t

+ uh

·

ρ

∇uh

(cid:90)

+

Qn

qh∇

·

uhdQ +

(cid:90)

(cid:17)

f

dQ +

Qn

∇wh : σ(uh, ph)dQ

(wh)+
n ·

ρ

(cid:16)(cid:0)uh(cid:1)+

n −

(cid:17)

(cid:0)uh(cid:1)−

n

dΩ

−
(cid:90)

Ωn

(nel)n(cid:88)

(cid:90)

+

e=1

Qe
n

τMOM

(cid:104)

(cid:16)

ρ

uh

1
ρ

·

∇wh(cid:17)

+ ∇qh(cid:105)

(cid:104)
·

ρ

(cid:16) ∂uh
∂t

+ uh

∇uh

·

−

(cid:17)

f

∇

·

−

(cid:105)
σ(uh, ph)

dQ

(nel)n(cid:88)

(cid:90)

+

e=1

Qe
n

τCONT∇

whρ∇

·

·

uhdQ =

(cid:90)

(Pn)h

hhdP.

wh

·

Here, we make use of the following notation:

(uh)±n = lim
0
→
(cid:90)
(cid:90)

ζ

u(tn ±

ζ)

. . . dQ =

. . . dΩdt

In
(cid:90)

Ωt
(cid:90)

. . . dP =

. . . dΓdt

In

Γt

(cid:90)

Qn
(cid:90)

Pn

(10)

(11)

(12)

(13)

The fourth term in Equation 10 is the so-called jump term. The purpose of this integral
is to induce a weak continuity in time for the velocity ﬁeld over Ωn – which is (cid:0)uh(cid:1)+
n –
with respect to the previous space-time slab. More precisely, we minimize the diﬀerence
n and the velocity ﬁeld over Ωn from the underlying slab (cid:0)uh(cid:1)−
between (cid:0)uh(cid:1)+
n . For the
stabilization parameters τMOM and τCONT, we use the expressions given in [23].

4. Mesh Update Method

In this section, we illustrate the implementation of the VR-SSMUM into the frame-
work of the space-time FEM as presented in Section 3. The VR-SSMUM mainly tackles
two problems: ﬁrst, it allows us to deal with large relative movement between moving
and static objects (“SSMUM part”). Additionally, the concept of the virtual ring makes
it possible to model the object entry and exit (“VR part”). Note that this concept –
taken individually – may also be transferred to a semi-discrete approach, i.e., an Ar-
bitrary Lagrangian Eulerian (ALE) formulation, with appropriate modiﬁcations. The
space-time formulation simply provided a framework in which the concept of the virtual
ring could be conveniently combined with the SSMUM to accomplish the requirements
of the applications discussed. We will ﬁrst outline the mesh generation process that is
necessary to produce the special purpose computational grids which are suitable for the
use with the VR-SSMUM. Afterwards, the implications for the implementation of the
space-time FEM are stated.

9

Following the division of the computational domain into moving and static portions,
an individual mesh is created for each part. The part of the domain which is allocated
for the update layer remains empty. The mesh generation for the static part does not
require special treatment except for the discretization of the interface adjacent to the
update layer. Details are presented below. For the moving mesh, we have assumed in
Section 2 that the corresponding domain is composed of several characteristic blocks.
Thus, we start with a mesh for the ﬁrst block and copy this sample to ﬁll up the moving
domain. Additionally, one further copy is attached at the end of the original domain.
In the next step, this copy will be used to close the ring. As discussed in Section 2,
the closure happens through concurrence of the lateral boundaries Γin and Γvirt. To
achieve this also in the discrete sense, the indices of nodes on Γvirt are replaced by the
corresponding indices of nodes on Γin. In the abstract sense, the mesh is closed now in
the direction of movement. In physical space, we have elements that span from one end
to the other.

The interface between the update layer and the moving or static mesh will be denoted
as ΓM and ΓS, respectively. We assume that we ﬁrst discretize opposite interfaces in a
structured manner and, if necessary, switch to an unstructured one afterwards by diag-
onalization. As a restriction, the discretization of ΓM has to provide at least as many
elements as ΓS along the direction of movement. This ensures that we are able to create
the elements in the update layer which connect the moving and static mesh. Further-
more, the structure of the interface discretization allows us to assign for each node on
ΓM an unique update node, i.e., the node which will replace the original node in case of
a recreation of the connectivity in the update layer. When we have set up the individual
computational grids as described above, we can manually create the layer of elements
which connects the static and moving parts.

The modiﬁcations regarding the procedure of the FEM are presented hereinafter. The
mesh update process per time step can be broken down into the following steps:

1. Perform the connectivity update if the corresponding criterion is fulﬁlled.
2. Apply the prescribed movement and determine active nodes and elements.
3. Update the lateral boundaries.
4. Incorporate the activity information during assembly and solution of the linear

system.

At the beginning of each time step, we have to decide if a connectivity update in the
update layer has to be performed for the mesh of the related space-time slab. Strictly
speaking, we have stated in Section 2 that a node is deactivated as soon as it crosses the
boundary Γout. However, this condition is slightly relaxed in the actual implementation.
Therefore, we deﬁne a critical coordinate xcrit with respect to the direction of movement,
which is located further downstream. If xout is the position of Γout, we deﬁne

xcrit = xout + δ,

(14)

with some distance δ deﬁning two margins at the lateral boundaries Γin and Γout (see
Figure 7). The following criterion is used to detect a connectivity update: check if a node
on the interface ΓM exceeds the critical coordinate xcrit. If the criterion is fulﬁlled, we
10

reconnect the corresponding elements in the update layer. As already mentioned above,
this procedure is based on the update node information.

Figure 7: Moving domain with critical coordinate xcrit. Additionally, the zones for activating, deacti-
vating and shifting nodes are depicted. As an example, multiple spatial elements are sketched. Their
nodes are activated (black), deactivated (red) or shifted (blue). Elements with an “D” are deactivated,
since they consist either of deactivated nodes only or hold a shifted one.

The next step is to update the nodal coordinates in the moving mesh according to
the prescribed motion. Since we follow the space-time approach outlined in Section 3,
the prescribed movement can be directly applied to the space-time mesh of the current
time step. This is accomplished by altering the coordinates of the nodes on the upper
time level. Therefore, the current velocity is evaluated and the resulting displacement is
applied to the nodes on the upper time level. Although the nodes can continuously move
along the virtual ring, a shift oft their physical coordinates is necessary at some point.
In other words, nodes which have already left the physical domain need to jump to its
front such that they can enter the domain again when the movement proceeds. We apply
this shift with respect to the physical coordinates to those nodes which have moved too
far. Here, we again make use of the critical coordinate from the update criterion. Every
node which has left the right margin, i.e., it has crossed xcrit, has reached the shift region
and is shifted to the deactivation zone in front of the domain.

Based on the updated nodal coordinates, we determine on the upper time level the
nodes which remain in our computational domain and, thus, stay activated. Therefore,
we use the (de-)activation zones depicted in Figure 7. We always assign the same activity
information to the associated nodes on the lower time level. Using the nodal activity
pattern, we set the activated elements. The following rule is applied: every element with
at least one activated node is also activated; otherwise, it is deactivated. Furthermore,
all elements containing a node that has been shifted are deactivated. Due to the setup
with multiple identical mesh blocks, an element at the boundary Γin has a related copy
at Γout. The aforementioned rule ensures that always only one instance of these ele-
ments is activated at a time. Furthermore, the distance δ should be less or equal the
minimal extent of any element in the direction of movement. This prevents that both
elements are deactivated at the same time, since at least one of the element nodes is
always located in the activation zone. By now, boundary nodes have been deactivated
to turn on or oﬀ the appropriate elements. To correct this and to take them into ac-
11

xyδDEACTIVATEDACTIVATEDδδSHIFTΓinΓoutxinxoutxcritDDDDcount in the computation, all nodes belonging to active elements are activated afterwards.

Since the mesh on the virtual ring moves through the physical domain, we constantly
have to update the element faces which form the boundaries Γin and Γout. The new lat-
eral boundaries are identiﬁed as transition of activated to deactivated elements. Hence,
also the nodes belonging to boundary faces change during the movement. Since we allow
to prescribe boundary conditions on Γin and Γout, we have to update the active degrees
of freedom before we start with the assembly of the linear system of equations. Note
that the VR-SSMUM itself does not restrict the type of boundary condition which is set
on the lateral boundaries. The choice of these boundary conditions rather depends on
the speciﬁc problem which is investigated.

During the assembly process, we also have to consider the element activity informa-
tion. In general, all deactivated elements should not lead to a contribution to the system
matrix and right hand side. We achieve this goal by skipping the deactivated elements in
the course of computing the element contributions. As we will see in the following, the
jump term from Equation (10) has to be treated carefully during the assembly process.
The integral of the jump term is deﬁned over the spatial domain Ωn at time tn. Since
we update the nodal coordinates and the element activity information for each space-
time slab, new elements can enter the computational domain compared to the previous
one. As a result, the spatial domain, which is covered by the elements of the moving
mesh, may be diﬀerent for two successive space-time slabs. According to the rule for
activating elements, a newly activated element contains a number of nodes, which have
been activated already in an earlier time step, and at least one node which just became
active. For the latter type of nodes, no information about the old solution is available.
Therefore, active elements, which have been deactivated in the previous time slab, are
not considered in the integration of the jump term. An example for two consecutive
space-time slabs with diﬀerent element activity patterns and, thus, non-matching spatial
domains is shown in Figure 8.

A solution that would allow to incorporate newly activated elements in the jump term
integration would need to provide information about the old solution for the previously
deactivated nodes. One idea would be the projection of the solution ﬁeld from the inlet
boundary surface of the previous space-time slab to the old solution ﬁeld at the inlet of
the current slab, which now consists of a diﬀerent set of elements.

As soon as the assembly process is ﬁnished, we can solve the resulting linear system.
Here, we only include those degrees of freedom which are neither constrained by a bound-
ary condition nor related to deactivated nodes. Thus, the computational overhead arising
from the additionally introduced mesh elements and nodes is limited.

When the moving mesh undergoes a rigid body displacement, its boundaries do not
conform with the original lateral boundaries of the computational domain anymore. For
structured grids, the boundary conformity of the moving portion can be achieved by
relocating the nodes of the boundary faces onto the original domain boundary. However,
this approach cannot be easily adopted for unstructured grids, since it could lead to
collapsing or twisted spatial elements. An example for each case is sketched in Figure 9.
12

Figure 8: Example for changing element activity pattern and non-matching domains for two successive
space-time slabs. Space-time elements with dotted edges are deactivated. The jump term integration is
only performed over the solid-colored spatial elements. The shaded one is skipped, since we have no old
solution for the nodes an and fn. Note that each space-time element has 8 nodes.

For the case shown in Figure 9a, we can detect the collapsing element and ignore it for
the current time step. A solution for the case in Figure 9b would require a reordering
of the element nodes. Although this approach is not yet included in the current imple-
mentation, we observed that this situation only occurs very rarely. Furthermore, if we
can ensure that we do not encounter this situation for a speciﬁc simulation, no special
treatment is necessary.

Our mesh update method was integrated in a fully parallelized implementation of the
DSD/SST method based on domain decomposition in use with MPI. The integration did
not require any special treatment with respect to parallelization.

13

xytfn−1gn−1hn−1in−1jn−1an−1bn−1cn−1dn−1en−1Fn−1Gn−1Hn−1In−1Jn−1An−1Bn−1Cn−1Dn−1En−1t−nQn−1t+n−1fngnhninjnanbncndnenFnGnHnInJnAnBnCnDnEnt−n+1Qnt+ndeactivateddeactivated(a)

(b)

Figure 9: Two examples where enforced boundary conformity leads to invalid spatial elements of an
unstructured grid: (a) collapsing element, (b) twisted element. Boundary faces are drawn as thick blue
lines.

5. Numerical Examples

5.1. Validation Case: 2D Couette Flow

For the validation of the newly implemented VR-SSMUM, we make use of the clas-
sical Couette ﬂow test case. The analytic solution, which is known in this situation, will
allow us to conﬁrm the correctness of the numerical results. The setup of the test case is
depicted in Figure 10a. It naturally ﬁts into the framework of moving and static objects
treated by the VR-SSMUM. On the one hand, we have the ﬁxed bottom plate. On the
other hand, we have the moving top plate. Together, we have two objects in relative,
unidirectional and translational motion. The moving mesh portion will be connected to
the upper plate, whereas the static mesh portion contains the lower one. In between,
the placement of the update layer is arbitrary. However, we place it oﬀ-center to avoid
potential symmetry eﬀects (see Figure 10b). Furthermore, we use a structured grid to
illustrate also the conformity of the lateral boundaries. Figure 11 shows the mesh pre-
pared for the VR-SSMUM. It includes the additional copy for the moving domain, which
consists of one original block in this case. The entire mesh contains 3,250 space-time
elements with 6,770 nodes, where each moving block consists of 750 elements.

For the setting of the Couette ﬂow test case shown in Figure 10a, the exact velocity
distribution u = (u, v)T is given at steady state as

u(y) = ¯u

y
H

,

(15)

v

0,

(16)

≡
where we have the velocity of the upper plate ¯u and the distance between the two plates
H. The dimensions and material parameters used for the simulation are given in Table
1. Information of the prepared mesh for the VR-SSMUM is stated in Table 2. Since the
dynamic mesh movement only allows unsteady simulations, the idea is to prescribe the
analytic solution as initial conditions and to validate that the method does not distort
the correct solution. The relative error

δu
rel = |

˜u

u
|

−
¯u

14

(17)

ΓinABCΓinABCΓinABCΓinABCH [m] L [m]

1.0

1.0

(cid:3)

¯u (cid:2) m
s
0.02

ρ

(cid:105)

(cid:104) kg
m3
100

µ

(cid:105)

(cid:104) kg
m
s
·
2.5

Table 1: 2D Couette ﬂow: dimensions and parameter values.

H1 [m] H2 [m] H3 [m] ∆x [m] ∆y [m]
0.3

0.02

0.68

0.02

0.02

Table 2: 2D Couette ﬂow: mesh information.

For
with the numerical solution ˜u is evaluated for the ﬁrst 8 time steps in Table 3.
time steps 1 to 5, we cannot see any negative inﬂuence of our mesh update method.
In time step 6, the relative error increases although it still accomplishes a good level of
accuracy. The reason for this eﬀect is the fact that previously deactivated nodes become
active at that moment. As already discussed in Section 4, we have no information about
the solution at these nodes from the previous time step. This leads to a perturbation
of the solution in the ﬁrst non-linear iteration. However, we observe that the induced
error vanishes over subsequent iterations. To illustrate this situation, Figure 12 shows
the mesh for time steps 5 and 6. For time step 5, the movement of the upper plate and
the corresponding mesh portion led to a deformation of the elements in the update layer.
However, the original connectivity is still retained. In time step 6, new elements or rather
nodes enter the domain at the left boundary accompanied by a connectivity recreation
of elements in the update layer.

5.2. Test Case: 2D Packaging Machine with Object Entry and Exit

In the following, we will show the application of the VR-SSMUM for a generic packag-
ing machine. We consider a simpliﬁed setup which consists of multiple packages passing
through a machine casing. At the top of the casing, a nozzle is located, which provides
the inﬂow of ﬂuid with velocity

vin(x) = ¯v

103(x

40

·

·

−

0.095)(x

0.105).

−

(18)

Figure 13 shows a sketch of this setting. Again, the computational domain is split into
static and moving parts. In this case, we have two static mesh portions, i.e., the lower
and the upper part, which contain the machine casing and the nozzle. Consequently,
also two update layers are present, which link the static mesh portions to the moving
one, in which the packages are embedded. For the mesh, the overall number of space-
time elements is 154,970 with 158,210 nodes in total. The time step size is chosen as
∆t = 2

3 s and we run the simulation for 700 time steps.

10−

·

Step

δu
rel ·
Table 3: 2D Couette ﬂow: relative error for x-velocity δu
performed and, more important, previously deactivated nodes became active.

1014

1 - 5
0.0173

6
5.98

7
0.260

8
0.0520

rel. In time step 6, a connectivity update was

15

(a)

(b)

Figure 10: 2D Couette ﬂow: (a) setup with boundary conditions, (b) splitting of the computational
domain into static and moving portions connected by the update layer.

Figure 11: 2D Couette ﬂow: mesh prepared for VR-SSMUM.

16

xy(0,0)u=¯u,v=0u=v=0u(y)=¯uyHv=0LHboundaryconditionsxy→→→(0,0)LstaticmeshH1updatelayerH2movingmeshH3movingstaticcopyupdatelayer(a)

(b)

Figure 12: 2D Couette ﬂow: part of the mesh with update layer (blue) for time steps 5 (left) and 6
(right).
In time step 6, the element connectivity in this layer has been recreated to counteract the
deformation resulting from the movement of the upper plate.

(cid:3)

uP

(cid:2) m
s
0.1

(cid:3)

¯v (cid:2) m
s
1.0

(cid:105)

(cid:104) kg
ρ
m3
0.6924

(cid:105)

(cid:104) kg
m
s
·
10−

µ
271

·

7

Table 4: 2D simpliﬁed packaging machine: parameter values.

The movement of the packages is prescribed via a constant velocity uP, which is set
along the wall of the packages to achieve a no-slip condition. The static walls of the ma-
chine casing are equipped with a no-slip condition as well. Furthermore, the movement
requires that we are able to let packages leave and enter the computational domain. Al-
though this type of boundary condition is typically suitable for boundaries far away from
signiﬁcant ﬂow patterns, we set zero Neumann conditions on the lateral boundaries, since
this academic case is intended to rather illustrate the functionality of the method than to
investigate the detailed ﬂow ﬁeld. Note that we only consider the ﬂow of a single-phase
ﬂuid. The parameter values for density and viscosity are chosen to match hot air.

We use the results for the static scenario with stationary packages (uP = 0), but in-
= 0), as initial condition. Snapshots of the ﬂow ﬁeld at several points of
jected ﬂuid (vin (cid:54)
time are given in Figure 14. Right after the beginning of the movement, we can observe
how the packages carry along surrounding ﬂuid and, that way, inﬂuence the inﬂow jet
of the nozzle. When a package passes the nozzle, the jet enters the inner space and
induces several vortex structures. Afterwards, the jet leaves the package and the pro-
cedure begins again for the subsequent package. Note that we encounter situations in
which the moving domain contains two complete packages as well as situations with one
whole package and two packages, which are only partially inside the domain.

5.3. Use Case: 3D Packaging Machine

In this section, we will demonstrate that the presented mesh update method also
works for industrial applications. Therefore, we show results for a real three-dimensional
packaging machine. The basic setup of the machine is similar to the generic two-
dimensional case which we discussed before. Again, we have a static machine casing
which contains several nozzles and further components at the top. At the bottom, an
additional suction box is mounted which removes redundant ﬂuid. Through the static

17

Figure 13: 2D simpliﬁed packaging machine: setup and boundary conditions. No-slip walls are drawn
as thick lines. All dimensions are given in meters.

(a) 0.0 s

(b) 0.2 s

(c) 0.5 s

(d) 0.8 s

(e) 1.1 s

(f) 1.4 s

Figure 14: 2D simpliﬁed packaging machine: snapshots of the velocity ﬁeld for several times. Packages
pass the nozzle and enter or leave the domain.

18

vin→→→uP→→→uPstaticmovingstaticupdatelayerupdatelayer0.10.10.0950.010.0950.1660.0290.0010.0960.0010.0390.030.0760.0520.0010.0240.01(a)

(b)

Figure 15: 3D packaging machine: (a) mesh from real geometry data prepared for the VR-SSMUM, (b)
slice with pressure distribution.

machine casing, a conveyor belt transports the so-called pocket chain which holds the
packages. Based on the realistic geometry data, we prepared a mesh suitable for the
VR-SSMUM. More precisely, we created a single mesh for the static mesh portion, i.e.,
the outer machine casing with attached components, and a mesh for the moving block
containing the pocket chain and the packages. As described in Section 4, we initially
started with structured meshes for the interfaces, which we subdivided afterwards to
obtain complete unstructured meshes on the one hand but to make the update node
information available on the other hand. The resulting mesh is depicted in Figure 15a.
It is made up of 5,497,172 space-time elements and 2,198,944 nodes. The pocket chain
moves along the x-direction according to a prescribed time-dependent functional, which
describes acceleration and deceleration during one stroke of the machine. In Figure 15b,
the pressure ﬁeld is visualized on a slice through the machine after a certain movement
of the pocket chain.

6. Conclusion

We presented the Virtual Ring Shear-Slip Mesh Update Method (VR-SSMUM) for
the eﬃcient and accurate modeling of moving boundary or interface problems including
straight-line translation, potentially on unstructured grids and in combination with ob-
ject entry and exit. As an extension of the Shear-Slip Mesh Update Method (SSMUM),
the key idea is to map the physical movement onto a virtual ring in an abstract space by
extending the computational mesh properly. The method was integrated into a frame-
work based on the Deformable-Spatial-Domain/Stabilized Space-Time (DSD/SST) ﬁnite
19

element formulation. The favorable eﬃciency and accuracy properties of the SSMUM
are automatically inherited. The computational overhead of the method is limited, since
unneeded portions of the mesh are deactivated during the solution process, i.e., the ele-
ment assembly process and the solution of the linear system. We validated the method
by means of a Couette ﬂow test case with analytic solution for the velocity ﬁeld.
In
addition, we showed the application to a relevant two-dimensional test case including
object entry and exit based on a simpliﬁed packaging machine. Finally, we performed a
simulation for an industrial three-dimensional use case of a realistic packaging machine
to prove the usefulness of the method in this ﬁeld.

Acknowledgements

The authors gratefully acknowledge the research funding, which was provided by SIG
Combibloc Systems GmbH. The computations were conducted on computing clusters
supplied by the J¨ulich Aachen Research Alliance (JARA) and the RWTH IT Center.

References

References

[1] S. Elgeti, H. Sauerland, Deforming ﬂuid domains within the ﬁnite element method: Five mesh-
based tracking methods in comparison, Archives of Computational Methods in Engineering 23 (2)
(2016) 323–361.

[2] S. Osher, J.A. Sethian, Fronts propagating with curvature-dependent speed: Algorithms based on

Hamilton-Jacobi formulations, Journal of Computational Physics 79 (1) (1988) 12–49.

[3] Y.C. Chang, T.Y. Hou, B. Merriman, S. Osher, A level set formulation of Eulerian interface cap-
turing methods for incompressible ﬂuid ﬂows, Journal of Computational Physics 124 (2) (1996) 449
– 464.

[4] C.W. Hirt, B.D. Nichols, Volume of ﬂuid (VOF) method for the dynamics of free boundaries,

Journal of Computational Physics 39 (1981) 201–225.

[5] T.E. Tezduyar, M. Behr, S. Mittal, A.A. Johnson, Computation of Unsteady Incompressible Flows
with the Stabilized Finite Element Methods: Space-Time Formulations, Iterative Strategies and
Massively Parallel Implementations, American Society of Mechanical Engineers, 1992, 7–24.

[6] J.T. Batina, Unsteady Euler airfoil solutions using unstructured dynamic meshes, AIAA Journal

28 (8) (1990) 1381–1388.

[7] A. de Boer, M.S. van der Schoot, H. Bijl, Mesh deformation based on radial basis function inter-

polation, Computers and Structures 85 (11-14) (2007) 784–795.

[8] F. Alauzet, Eﬃcient moving mesh technique using generalized swapping, in: Proceedings of the

21st International Meshing Roundtable, Springer, Berlin, Heidelberg, 2013, 17–37.

[9] L. Wang, P.-O. Persson, A high-order discontinuous Galerkin method with unstructured space-time
meshes for two-dimensional compressible ﬂows on domains with large deformations, Computers and
Fluids 118 (2015) 53–68.

[10] T.E. Tezduyar, S. Aliabadi, M. Behr, A.A. Johnson, V. Kalro, M. Litke, Flow simulation and high

performance computing, Computational Mechanics 18 (6) (1996) 397–412.

[11] M. Behr, T.E. Tezduyar, The shear-slip mesh update method, Computer Methods in Applied

Mechanics and Engineering 174 (1999) 261–274.

[12] M. Behr, T.E. Tezduyar, Shear-slip mesh update in 3D computation of complex ﬂow problems
with rotating mechanical components, Computer Methods in Applied Mechanics and Engineering
190 (24) (2001) 3189–3200.

[13] M. Behr, D. Arora, Shear-slip mesh update method: Implementation and applications, Computer

Methods in Biomechanics and Biomedical Engineering 6 (2) (2003) 113–123.

[14] P.J. Zwart, G.D. Raithby, Space-time meshing for two-dimensional moving boundary problems, in:

Proceedings of 7th International Meshing Roundtable, 1998, 187–200.

[15] J.L. Steger, F.C. Dougherty, J.A. Benek, A chimera grid scheme, 1983.

20

[16] J.A. Benek, J.L. Steger, F.C. Dougherty, P.G. Buning, Chimera. A grid-embedding technique, Tech.

rep., Arnold Engineering Development Center (1986).

[17] J.L. Steger, J.A. Benek, On the use of composite grid schemes in computational aerodynamics,

Computer Methods in Applied Mechanics and Engineering 64 (1) (1987) 301–320.

[18] Y. Bazilevs, T.J.R. Hughes, NURBS-based isogeometric analysis for the computation of ﬂows about

rotating components, Computational Mechanics 43 (1) (2008) 143–150.

[19] K. Takizawa, T.E. Tezduyar, H. Mochizuki, H. Hattori, S. Mei, L. Pan, K. Montel, Space-time VMS
method for ﬂow computations with slip interfaces (ST-SI), Mathematical Models and Methods in
Applied Sciences 25 (2015) 2377–2406.

[20] C.S. Peskin, Flow patterns around heart valves: A numerical method, Journal of Computational

Physics 10 (2) (1972) 252–271.

[21] H. Schippke, A. Zilian, Space-time shear-slip mesh update method for ﬂuid-structure interaction
problems, in: ECCOMAS 2012 - European Congress on Computational Methods in Applied Sciences
and Engineering, 2012, 2574–2589.

[22] T.E. Tezduyar, M. Behr, J. Liou, A new strategy for ﬁnite element computations involving moving
boundaries and interfaces – the deforming-spatial-domain/space-time procedure: I. the concept and
the preliminary tests, Computer Methods in Applied Mechanics and Engineering 94 (1992) 339–351.
[23] L. Pauli, M. Behr, On stabilized space-time FEM for anisotropic meshes: Incompressible Navier-
Stokes equations and applications to blood ﬂow in medical devices, International Journal for Nu-
merical Methods in Fluids 85 (3) (2017) 189–209.

21

