0
2
0
2

p
e
S
0
3

]

R
G
.
s
c
[

1
v
5
3
5
4
1
.
9
0
0
2
:
v
i
X
r
a

Volume xx (200y), Number z, pp. 1‚Äì13

Turbulent Details Simulation
for SPH Fluids via Vorticity ReÔ¨Ånement

Sinuo Liu2‚Ä†, Xiaokun Wang1‚Ä†‚Ä°, Xiaojuan Ban1‚Ä°, Yanrui Xu1, Jing Zhou2, JiÀár√≠ Kosinka3, Alexandru C. Telea4

1University of Science & Technology Beijing, Institute of ArtiÔ¨Åcial Intelligence, China
2University of Science & Technology Beijing, School of Computer & Communication Engineering, China
3University of Groningen, Bernoulli Institute, Netherlands
4Utrecht University, Department of Information and Computing Sciences, Netherlands

Without vorticity reÔ¨Ånement

With vorticity reÔ¨Ånement

Figure 1: Our Vorticity ReÔ¨Ånement (VR) solver applied to an DFSPH [BK15] simulation (1.18M particles). In this scene, a breaking dam
collides with a board, creating turbulence. Zoom-ins compare the surface under DFSPH without (top) and with (bottom) our VR solver. The
result shows that our method better captures turbulence details.

Abstract
A major issue in Smoothed Particle Hydrodynamics (SPH) approaches is the numerical dissipation during the projection pro-
cess, especially under coarse discretizations. High-frequency details, such as turbulence and vortices, are smoothed out, leading
to unrealistic results. To address this issue, we introduce a Vorticity ReÔ¨Ånement (VR) solver for SPH Ô¨Çuids with negligible com-
putational overhead. In this method, the numerical dissipation of the vorticity Ô¨Åeld is recovered by the difference between the
theoretical and the actual vorticity, so as to enhance turbulence details. Instead of solving the Biot-Savart integrals, a stream
function, which is easier and more efÔ¨Åcient to solve, is used to relate the vorticity Ô¨Åeld to the velocity Ô¨Åeld. We obtain turbu-
lence effects of different intensity levels by changing an adjustable parameter. Since the vorticity Ô¨Åeld is enhanced according
to the curl Ô¨Åeld, our method can not only amplify existing vortices, but also capture additional turbulence. Our VR solver is
straightforward to implement and can be easily integrated into existing SPH methods.

CCS Concepts
‚Ä¢ Computing methodologies ‚Üí Physical simulation;

‚Ä† Co-Ô¨Årst author, contributed equally

‚Ä° Corresponding author: banxj@ustb.edu.cn; wangxiaokun@ustb.edu.cn

submitted to COMPUTER GRAPHICS Forum (10/2020).

 
 
 
 
 
 
2

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

1. Introduction

Fluid simulation is a hot topic in computer graphics, with huge re-
search and application demands. Within this context, the Smoothed
Particle Hydrodynamics (SPH) method simulates Ô¨Çuids with large
deformations accurately and efÔ¨Åciently, showing abundant details
and vivid motion. In the past decades, several solutions have
been proposed to enforce incompressibility [SP09, ICS‚àó14, BK15].
However, numerical dissipation problems still remain and cause
a signiÔ¨Åcant loss of turbulence details [JST17, FGG‚àó17]. For in-
stance, vorticity dissipation is one of the major issues causing the
loss of details on the Ô¨Çuid surface and in overall dynamic effects
[KBST19].

To maintain complex turbulence and vortex details on the Ô¨Çuid
surface, some methods proposed to increase the apparent resolution
by seeding over surface points [MBT‚àó15], or use an adaptive volu-
metric mesh for grid-based Ô¨Çuids [EB14]. However, these methods
only add details over a coarse discretization, without considering
the inner volume. Vorticity ConÔ¨Ånement (VC) methods add vor-
tices from the perspective of the entire Ô¨Çow Ô¨Åeld [FSJ01, MM13]
to recover dissipated details. However, VC methods tend to add
more energy than is dissipated, and can amplify only existing vor-
tices. Lagrangian vortex methods, such as vortex particles [PK05]
and vortex Ô¨Ålaments [WP10], have been used to effectively simu-
late turbulent Ô¨Çuids. While these methods maintain a divergence-
free velocity Ô¨Åeld and have theoretically no numerical dissipation,
they require solving the equivalent of three Poisson equations to
obtain velocity from vorticity, which is computationally expensive.

To alleviate the above-mentioned problems and obtain more real-
istic turbulent Ô¨Çows, we introduce a turbulence reÔ¨Ånement scheme
by correcting the vorticity Ô¨Åeld. In continuum mechanics, vortic-
ity is a pseudovector Ô¨Åeld that describes the local spinning motion
of a continuum. It can be deÔ¨Åned as the curl of the Ô¨Çuid√¢ ÀòA ¬¥Zs ve-
locity Ô¨Åeld. Like the divergence error issue mentioned in the DF-
SPH method [BK15], vorticity dissipation also reduces the realism
of simulations. To date, the kinetic energy from the vorticity Ô¨Åeld
could be transformed into positive divergence, causing the loss of
surface details and of overall dynamic motion [ZBG15]. State-of-
the-art SPH approaches for Ô¨Çuid simulation cannot solve this prob-
lem completely.

During the advection-projection process,

the advection step
maps the original velocity Ô¨Åeld into a rotational part and a divergent
part, after which the pressure projection removes the divergent part,
leaving only the rotational part. The angular momentum is there-
fore lost in the simulation, with the effect becoming worse as the
time step size increases; see Fig. 2, the orange part of the diagram.
To alleviate this, we use the accurate vorticity Ô¨Åeld derived from the
curl of the Navier-Stokes equations to correct the linear velocity for
each particle; see Fig. 2, the green part of the diagram. Moreover,
we use a stream function to reÔ¨Åne the velocity using a reasonable
augmentation of the vorticity Ô¨Åeld which can restore vivid yet con-
trollable vortices and turbulence effects (as shown in Figs. 1 and 3
among others). Previous related work [XBP‚àó19] looked into cor-
recting the velocity Ô¨Åeld through the vorticity recovered from the
kinematic viscosity by increasing the vorticity Ô¨Åeld proportionally
by the energy dissipated, which is based on the rotational kinetic
energy. In contrast, we focus on getting the ideal vorticity Ô¨Åeld di-

Figure 2: This diagram shows how the vorticity dissipates in the
advection-projection process. Linear velocity at time step n splits
into normal (red) and tangential (green) components during the
advection procedure. Next, projection eliminates the normal com-
ponent using the pressure force to keep the Ô¨Çow divergence-free.

rectly from the curl of the Navier-Stokes equations, which is a more
physically reasonable model.

Summarizing, the main contributions of this paper are:

‚Ä¢ A vivid turbulence-details generation method that recovers nu-

merical dissipation through vorticity Ô¨Åeld correction;

‚Ä¢ A novel vorticity-based constraint and stream function solution

for simulating turbulence;

‚Ä¢ An orthogonal solver for the SPH Ô¨Çuid framework with turbu-
lence simulation that can be easily integrated into other particle-
based methods and Ô¨Çuid solvers.

The remainder of the paper is organized as follows. Section 2
gives an overview of related work. Section 3 discusses the accuracy
of numerical calculations in SPH. Our vorticity reÔ¨Ånement scheme
is presented in Section 4. Section 5 presents and discusses our ex-
perimental results. Finally, Section 6 concludes the paper.

2. Related Work

Fluid simulation is a well researched topic in computer graphics.
Early works on this topic include [Mon94, FM96, Sta99, MCG03].
For recent overviews, we refer to Bridson‚Äôs book [Bri15] and the
state-of-the-art report of Koschier et al. [KBST19]. We further dis-
cuss more speciÔ¨Åc work related to our context, namely SPH-based
Ô¨Çuid simulation (Sec. 2.1) and turbulence simulation (Sec. 2.2).

2.1. Incompressibility and Numerical Accuracy in SPH Fluid

Simulations

Monaghan simulated free surface Ô¨Çows with SPH [Mon94],
which laid the foundation for Ô¨Çuid simulation. Later, Muller et
al. [MCG03] proposed to simulate Ô¨Çuids using the ideal gas state
equation with surface tension and viscosity forces, but without full
incompressibility. An improved weakly-compressible SPH (WC-
SPH) method was proposed by Becker and Teschner [BT07]. The
use of the stiff equation of state (EOS) signiÔ¨Åcantly increased re-
alistic effects, but the efÔ¨Åciency of such methods is limited by the
size of the used time step. To further enforce incompressibility and
improve numerical accuracy, much effort has been invested into
implicit pressure solvers. Previous approaches can be categorized

submitted to COMPUTER GRAPHICS Forum (10/2020).

Pressure projectionŒ∂n=‚àá√óùíónVorticityVelocityùíónùíóùëõùëúùëüùëöùëéùëô+ùíóùë°ùëéùëõùëîùëíùëõùë°ùëñùëéùëôùíóùë°ùëéùëõùëîùëíùëõùë°ùëñùëéùëôŒîŒ∂=Œ∂n+1‚àí‡∑®Œ∂refineùíón+1‡∑®Œ∂=‚àá√óùíóùë°ùëéùëõùëîùëíùëõùë°ùëñùëéùëô‚àá‚ãÖùíóùëõùëúùëüùëöùëéùëô>0AdvectionProjectionS. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

3

(a) DFSPH

(b) MP solver

(c) Our method

Figure 3: A breaking dam collides with a board (1.18M particles). (a) Only few vortex effects are formed using DFSPH. (b) The MP solver
enhances the simulation result to some extent. (c) Our method greatly improves the turbulence details, and the surface details are richer than
with the MP solver. The MP solver and our solver achieve different styles.

as methods that project particle positions onto an incompressible
state using iterative EOS solvers, and pressure projection meth-
ods [IOS‚àó14], as follows.

He et al. [HLL‚àó12] and Solenthaler and Pajarola [SP09] pro-
posed predictive-corrective approaches that iteratively project par-
ticle positions onto an incompressible state. This is also done in
position-based Ô¨Çuids (PBF) [MM13]. However, PBF avoids ac-
cumulating pressure or pressure forces that eventually update the
velocity and the position. Ihmsen et al. [ICS‚àó14] proposed im-
plicit incompressible SPH (IISPH) following the strategy of pres-
sure projections. Separately, Bender and Koschier [BK15] pro-
posed a method that enforces a low compression (0.01% ) and a
divergence-free velocity constraint (DFSPH). Among all the vari-
ants of the SPH method, the typical advection-projection models
are PCISPH [SP09], IISPH [ICS‚àó14] and DFSPH [BK15]. In this
paper, we use the DFSPH approach as a baseline for comparisons
of computational efÔ¨Åciency and stability.

It

is well known that SPH approaches suffer

from nu-
merical dissipation problems, especially for coarse discretiza-
tions [Mon94, dGWH‚àó15, BKKW18]. Ihmsen et al. [IOS‚àó14]
pointed out that SPH results in undesired dissipation and high-
frequency features are smoothed out. Therefore, avoiding dissipa-
tion for turbulence in Ô¨Çuid simulation is needed to improve visual
realism.

submitted to COMPUTER GRAPHICS Forum (10/2020).

2.2. Restoring Turbulence in Fluid Simulation

Restoring high-frequency details has been an important challenge
in Ô¨Çuid simulation since its very beginning [KTJG08, JSMF‚àó18].
For Eulerian approaches, Stam‚Äôs scheme [Sta99] Ô¨Årst achieved re-
alistic and real-time Ô¨Çuid simulation on consumer-grade graphics
hardware. However, the Ô¨Årst-order accuracy in both time and space
makes this method (and other extensions thereof) suffer from seri-
ous numerical dissipation. Kim et al. [KLLR05] proposed a higher-
order approximation. Jonas et al. [ZNT18] proposed an advection-
reÔ¨Çection solver for detail-preserving Ô¨Çuid animation which leads
to two orders of magnitude reduction in energy loss. Rahul et
al. [NZT19] then established a connection between this method
and the implicit midpoint time integration scheme, and presented a
simple improvement to obtain an advection-reÔ¨Çection scheme with
second-order accuracy in time.

Hybrid particle-grid methods were subsequently proposed to
further reduce numerical dissipation. Zhu and Bridsons√¢ ÀòA ¬¥Z FLIP
method for incompressible Ô¨Çow [ZB05] signiÔ¨Åcantly eliminates the
dissipation in advection. Jiang et al. [JSS‚àó15] successfully restore
most of the rotational motion using a hybrid method.

Although the general simulation methods mentioned above can
handle numerical dissipation on a macroscopic level, both Eulerian
and Lagrangian approaches face challenges when simulating high-
frequency details such as turbulence. Therefore, methods speciÔ¨Å-
cally designed for reÔ¨Åning turbulent details have emerged. These

4

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

can be classiÔ¨Åed into three categories: up-res methods, vorticity
conÔ¨Ånement methods, and Lagrangian vortex methods [BKKW18],
as follows.

pressure force may introduce vorticity errors into the velocity Ô¨Åeld
after the projection step. Although it maintains an incompressible
density Ô¨Åeld, it is not necessarily divergence-free.

Up-res methods add high-frequency details over a coarse dis-
cretization. Mercier et al. [MBT‚àó15] proposed a post-processing
method to apply Ô¨Åne turbulence over particle-based Ô¨Çuid sur-
faces. High-resolution surface points are seeded after curvature
evaluation, and the detailed surface waves are then evolved over
coarse particles. Edwards and Bridson [EB14] proposed an adap-
tive volumetric-mesh method for grid-based Ô¨Çuids by using the
adaptive discontinuous Galerkin method. Machine learning meth-
ods such as Convolutional Neural Networks (CNNs) [CT17] have
been applied in Ô¨Çuid simulation to synthesize high-resolution tur-
bulence on rough simulation results based on a high-resolution
source. However, training CNNs is time-consuming and often re-
quires delicate hyperparameter tuning. Overall, up-res methods can
typically improve only surface effects.

Vorticity conÔ¨Ånement methods aim to Ô¨Ånd existing vortices and
recover their dissipation. A new forcing term is added to increase
the velocity of target positions, and to enforce the rotation, of the
vortex. Lentine et al. [LAF11] improved vorticity conÔ¨Ånement to
be both energy conserving and momentum conserving. Jang et
al. [JKB‚àó10] used multi-level vorticity conÔ¨Ånement to acquire bet-
ter results. Macklin and Muller [MM13] presented a simple method
to amplify the existing vorticity through accelerating particles us-
ing SPH. Overall, vorticity conÔ¨Ånement methods provide a simple
way for preserving vortices, but are in general unable to create ad-
ditional turbulence details. Moreover, they are prone to adding ex-
cessive energy to the system so that energy conservation is likely to
be violated, leading to unstable results.

Lagrangian vortex methods build on the vorticity representa-
tion of the Navier-Stokes equations [PK05], which have less nu-
merical dissipation and more divergence retention than vortic-
ity conÔ¨Ånement methods. These methods can be applied to par-
ticles [WLB‚àó20], curves [AN05], Ô¨Ålaments [EWPT17], and even
surfaces [WP10]. Yet, boundaries, such as non-rigid obstacles and
free surfaces, are difÔ¨Åcult to handle. Zhu et al. [ZYF10] proposed
to simulate vortex details around moving objects using Eulerian
grids. Golas et al. [GNS‚àó12] also treated boundaries of an Eulerian
grid to solve this issue. A disadvantage of these methods is that
the velocity Ô¨Åeld has to be recovered by solving the Biot-Savart
integrals or a vector-valued Poisson equation. Recently, Bender et
al. [BKKW18] introduced the MicroPolar Ô¨Çuid solver (MP solver)
for inviscid Ô¨Çuids in order to capture the micro-rotation of Ô¨Çuid
particles, achieving impressive visual turbulent features. Wang et
al. [WLB‚àó20] proposed a turbulence reÔ¨Ånement method based on
the Rankine vortex model for particle-based simulation. Zhang et
al. [ZBG15] proposed an Integrated Vorticity of Convective Kine-
matics (IVOCK) method to restore dissipated energy by measuring
vorticity loss in advection. This method can cheaply capture much
of the lost details for smoke and Ô¨Åre, but does not work well for
liquid simulations. In [ZBG15], only the vorticity dissipated dur-
ing the advection step is considered. The reÔ¨Åned linear velocity in
their paper is the velocity after the advection step. This velocity
is then further affected by viscosity and the projection step. Vis-
cosity may become another source of vorticity dissipation and the

Our method is inspired by the idea of stream functions [ZBG15],
extended to Lagrangian Ô¨Çuid simulations. This allows us to efÔ¨Å-
ciently derive velocity reÔ¨Ånement from the vorticity Ô¨Åeld. Recov-
ering turbulence from the curl form of the Navier-Stokes equations
has a long history. In 2005, Park and Kim [PK05] gave the gov-
erning equations of the vortex method and introduced the concept
of the stream function. [ZBG15] and our work, among many other
vortex methods, utilize this concept to reduce numerical dissipation
during simulation. In our method, we derive the dissipated vorticity
during the whole advection-projection step in the SPH approach.
This can be easily done with little extra computation overhead.
With respect to the concept of the stream function, we carry out
the Biot-Savart summation process within smoothing length, which
makes it less accurate but more efÔ¨Åcient than [ZBG15]; we show
this to be sufÔ¨Åcient to maintain stability. This is because, theoret-
ically, the reÔ¨Åned velocity is the curl of the stream function, and
any curl of a vector Ô¨Åeld is divergence-free. Moreover, we imple-
mented our method using DFSPH (Divergence-free SPH), which
includes an extra divergence-correction solver, thereby eliminating
possible errors caused by the summation process. Moreover, we do
not need to solve the Biot-Savart integrals or a vector-valued Pois-
son equation. In contrast to the MP solver [BKKW18], in which the
motion equation is obtained from the MicroPolar model and dis-
cretized with SPH, we derive the vorticity equation from the curl of
the Navier-Stokes equations, and recover velocity from the vortic-
ity Ô¨Åeld using stream functions. Our results show that our method
can not only enhance existing vortices, but also generate turbulence
at potential locations of new vortices.

3. SPH Discretization for Fluid Simulation

Traditional Lagrangian-based Ô¨Çuid simulations use the Ô¨Çuid gov-
erning equations, the Navier-Stokes equations, to solve for the po-
sition and velocity of each Ô¨Çuid particle. The acceleration of the
Ô¨Çuid particles is obtained by the combination of pressure apres, vis-
cous force avis, and gravity ag as

Dvvv
Dt

= apres + avis + ag = ‚àí

1
œÅ

‚àáp + ŒΩv‚àá2vvv + g,

(1)

where D denotes the material derivative, œÅ is the density of the Ô¨Çuid,
p represents pressure, vvv is velocity, ŒΩv is the kinematic viscosity
coefÔ¨Åcient, a value that characterizes various Ô¨Çuid types (set to ŒΩv =
0.05 in our experiments), g is the gravitational acceleration, and ‚àá2
denotes the Laplace operator.

The SPH approach can be used to discretize the Navier-Stokes
equations to numerically solve them. The continuous physical val-
ues in space can be discretized using a smooth kernel W as in

A (xxxi) = ‚àë

(cid:107)xxxi‚àíxxx j(cid:107)‚â§h

m(xxx j)

A(xxx j)
œÅ(xxx j)

W (cid:0)xxxi ‚àí xxx j, h(cid:1)

(2)

with A (xxxi) being a certain quantity associated with particle i at
location xxxi. This quantity can be interpolated from the values of
neighbour particles, indexed by j, within a support radius h. The

submitted to COMPUTER GRAPHICS Forum (10/2020).

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

5

DFSPH

MP solver (ŒΩt = 0.05)

MP solver (ŒΩt =0.2)

Our method (Œ± = 1.0)

Figure 4: Comparison of vorticity in a 2D scene extracted from the 3D scene in Fig. 3. This visualization corresponds to the second column
in Fig. 3. Color shows the vorticity magnitude of the particles, thereby allowing one to compare the vorticity of DFSPH, the MP solver, and
our VR method.

quantities m and œÅ stand for mass and density, respectively. To sim-
plify notation, we next use the shorthand Ai to denote the quantity
A evaluated at position xxxi.

divergence-free conditions accordingly. Further, œÅ0 is the rest den-
sity of the Ô¨Çuid, and œÅerr, diverr, n, and n(cid:48) are user-speciÔ¨Åed scalar
values as thresholds.

‚àá ‚äó A = ‚àë
j

m j
œÅ j

(cid:0)
A j ‚àí Ai

(cid:1) ‚äó ‚àáWi j,

(3)

xxxn+1 = Àúxxx

The density of a Ô¨Çuid can be derived by simply replacing A by

œÅ. In our work, we use the cubic spline kernel [Mon85]:

Ô£±
Ô£¥Ô£≤

Ô£¥Ô£≥

4 x3

Wi j =

1
œÄh3

0 ‚â§ x ‚â§ 1

1 ‚àí 2
1

3 x2 + 3
4 (2 ‚àí x)3
0
where x = (cid:107)xxxi ‚àí xxx j(cid:107)/h and Wi j is a short form of W (cid:0)xxxi ‚àí xxx j, h(cid:1). To
obtain a better accuracy of the approximation of the divergence of
velocity, the gradient and the curl of velocity, we apply the differ-
ence form of the SPH discretization as:

1 ‚â§ x ‚â§ 2
x ‚â• 2

,

which expresses the gradient (‚àáA), divergence (‚àá ¬∑ A), and curl
(‚àá √ó A, in which case the right hand side is negative) of A. Since
the second derivative is often sensitive to particle disorder and sign
changes inside the support radius h, we use artiÔ¨Åcial viscosity to
approximate the Laplacian as follows [KBST19]:

‚àá2A(xxxi) = 2(d + 2)‚àë

j

m j
œÅ j

xxxi j

Ai j ¬∑ xxxi j
2 + 0.01h2 ‚àáWi j,

(4)

where d is the space dimension (in our case equal to 3), xxxi j = xxxi ‚àí
xxx j, and Ai j = Ai ‚àí A j.

Simulating incompressible Ô¨Çuids in DFSPH follows several
steps, including advection and projection, and an extra diver-
gence correction step which is applied to keep the velocity Ô¨Åeld
divergence-free. The whole process is summarized in Algorithm 1,
where ‚àÜt denotes the size of one time step, aadv = avis + ag, and
apro j and acorrect are the change rate of velocity derived form
the implicit pressure Ô¨Åeld to satisfy the incompressibility and

submitted to COMPUTER GRAPHICS Forum (10/2020).

ALGORITHM 1: Advection-projection with divergence correction

Advectiom process:

compute aadv
Àúvvv := vvvn + ‚àÜtaadv
Àúxxx := xxxn + ‚àÜt Àúvvv
ÀúœÅ := positionBasedDensity(Àúxxx)

Projection process:

while ( ÀúœÅ ‚àí œÅ0) > œÅerr || numberO f Iterations < n

p := positionBasedPressure(Àúxxx)
apro j := pressureBasedForce(p)
Àúvvv := Àúvvv + ‚àÜtapro j
ÀúœÅ := positionBasedDensity(Àúxxx + ‚àÜt Àúvvv)

Divergence correction process:

while (‚àá ¬∑ Àúvvv) > diverr || numberO f Iterations < n(cid:48)

p := velocityBasedPressure(Àúvvv)
acorrect := pressureBasedForce(p)
Àúvvv := Àúvvv + ‚àÜtacorrect

vvvn+1 := Àúvvv

4. Vorticity ReÔ¨Ånement Model for Turbulence Simulation

Our method is closely related to Lagrangian vortex methods,
namely it restores the velocity Ô¨Åeld through vorticity. In our
method, besides velocity vvv, each particle has a vector vorticity at-
tribute Œ∂Œ∂Œ∂ deÔ¨Åned as

Œ∂Œ∂Œ∂ = ‚àá √ó vvv.

(5)

In a particle system, vorticity is a quantity used to describe the ro-
tation of a particle. For the vorticity at the position of particle i, the
value can be derived using Eqn. 3 as:

Œ∂Œ∂Œ∂i = Œ∂Œ∂Œ∂(vvvi) = ‚àá √ó vvvi = ‚àë
j

m j
œÅ j

(vvvi ‚àí vvv j) √ó ‚àáWi j.

(6)

6

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

(a) DFSPH

(b) MP solver (ŒΩt = 0.05)

(c) Our method (Œ± = 1.0)

Given that the numerical dissipation of vorticity occurs between
time steps, an ideal non-dissipative rate of change of vorticity is
required to know the exact vorticity loss in each projection step. We
achieve this through the curl of the Navier-Stokes equation (Eqn.1)
as:

‚àá √ó

(cid:19)

(cid:18) Dvvv
Dt

=

DŒ∂Œ∂Œ∂
Dt

= Œ∂Œ∂Œ∂ ¬∑ ‚àávvv + ŒΩv‚àá2Œ∂Œ∂Œ∂,

(7)

where Œ∂Œ∂Œ∂ ¬∑ ‚àávvv is the stretching term, which is vital for physically
meaningful turbulence motion evolution. We use Eqn. 7 to obtain
the exact non-dissipative vorticity change of Ô¨Çuid particles between
time steps, including boundary treatment [AIA‚àó12].

Note that Œ∂Œ∂Œ∂ ¬∑ ‚àávvv in Eqn. 7 is a vector, which we compute, per
coordinate, using the difference form of the SPH approximation
(Eqn. 3) via

{x,y,z}
‚àáv
i

m j
œÅ j

= ‚àë
j

(cid:16)
{x,y,z}
v
j

{x,y,z}
‚àí v
i

(cid:17)

‚àáWi j,

(8)

where vx

i is the x component of the velocity of particle with index
i, and similarly for y and z. For the particle with index i, the vector
Œ∂Œ∂Œ∂i ¬∑ ‚àávvvi can be thus derived as

Ô£´

Œ∂Œ∂Œ∂i ¬∑ ‚àávvvi =

Ô£≠

Ô£∂

Ô£∏ .

Œ∂Œ∂Œ∂i ¬∑ ‚àávx
i
Œ∂Œ∂Œ∂i ¬∑ ‚àávy
i
Œ∂Œ∂Œ∂i ¬∑ ‚àávz
i

(9)

The Laplacian of Œ∂Œ∂Œ∂ in Eqn. 7 is derived using the artiÔ¨Åcial approx-
imation analogous to Eqn. 4. Hence, for the particle with index i,
ŒΩv‚àá2Œ∂Œ∂Œ∂i can be derived as

ŒΩv‚àá2Œ∂Œ∂Œ∂i = 2(d + 2)ŒΩv ‚àë

j

m j
œÅ j

xxxi j

Œ∂Œ∂Œ∂i j ¬∑ xxxi j
2 + 0.01h2 ‚àáWi j.

(10)

(d) Our method (Œ± = 1.2)

Figure 5: Comparison of DFSPH, the MP solver (ŒΩt = 0.05), and
our method (Œ± = 1.0 and Œ± = 1.2) for a simulation of a stick (rod)
mixing water. Besides turbulence enhancement, our method stands
out in keeping the Ô¨Çow trail visible and maintaining the stability
of the surface. As visible, the MP solver and our solver can obtain
different enhancement results.

4.1. Vorticity ReÔ¨Ånement

Similarly to the divergence error issue [BK15], vorticity dissipa-
tion can also hinder the performance of a simulation. Recent SPH
approaches [ICS‚àó14, BK15] for Ô¨Çuid animation can only correct
negative divergence of the velocity Ô¨Åeld. As a result, the kinetic en-
ergy from the vorticity Ô¨Åeld is still allowed to be transformed into
positive divergence during simulation, causing the loss of surface
details and overall dynamic motions, effectively violating (the dis-
crete version of) Eqn. 5.

According to Eqn. 7, the ideal change of the vorticity Ô¨Åeld with

respect to time, i.e., from time tn to tn+1, is:
DŒ∂Œ∂Œ∂n
Dt

Œ∂Œ∂Œ∂n+1 = Œ∂Œ∂Œ∂n + ‚àÜt

,

and the dissipative vorticity update is given by:

‚àÜŒ∂Œ∂Œ∂ = Œ∂Œ∂Œ∂n+1 ‚àí ‚àá √ó Àúvvv,

(11)

(12)

where Àúvvv is the (intermediate) velocity, as in the last line of Algo-
rithm 1.

We next explain how we apply the update of Eqn. 12. Assume
that we know the velocity and position of all Ô¨Çuid particles at time
tn, and that the velocity at this time step is non-dissipative. We then
get the velocity and position at time tn+1 using the DFSPH ap-
proach. Next, we compute the vorticity at the current time tn and
the next time tn+1, denoted Œ∂Œ∂Œ∂n and ÀúŒ∂Œ∂Œ∂, respectively, from the ve-
locity Ô¨Åeld using Eqn. 6. By our assumption, Œ∂Œ∂Œ∂n is ideal, but ÀúŒ∂Œ∂Œ∂
is dissipative due to numerical integration. Thus the ideal vortic-
ity value for a Ô¨Çuid particle at tn+1, denoted Œ∂Œ∂Œ∂n+1, is computed
based on Œ∂Œ∂Œ∂n and the vorticity equation (Eqn. 7). Hence, the dissipa-
tive vorticity value for this particle in Eqn. 12 can be converted to
‚àÜŒ∂Œ∂Œ∂ = Œ∂Œ∂Œ∂n+1 ‚àí ÀúŒ∂Œ∂Œ∂. The dissipated vorticity is used to reÔ¨Åne the velocity
using the stream function, as explained next.

submitted to COMPUTER GRAPHICS Forum (10/2020).

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

7

(a) DFSPH

(b) MP solver

(c) Our method

Figure 6: A breaking dam collides with a ship and 2 static pillars (1.70M particles). The key area is marked in white and zoomed in on. Our
method and the MP solver have more details than the DFSPH solution. In the second column, the MP solver becomes unstable and some
particles explode, while our method enhances the turbulence effect in a more stable and realistic way.

4.2. Solving Velocity via the Stream Function

Inspired by [ZB14], we express the relationship between the veloc-
ity vvv and the vorticity Œ∂Œ∂Œ∂ using the stream function œàœàœà as:

vvv =‚àá √ó œàœàœà,
‚àá2œàœàœà = ‚àíŒ∂Œ∂Œ∂.

(13)

Green√¢ ÀòA ¬¥Zs function provides a semi-analytical solution for the
stream function. The derivation from the stream function to linear
velocity can be solved using Eqn. 3. Generalized by the Helmholtz
decomposition, the stream function is the vector potential œàœàœà of the
velocity Ô¨Åeld vvv, which can be deÔ¨Åned as

œàœàœà(xxx) =

(cid:90)

R3

‚àá √ó vvv(yyy)
4œÄ (cid:107)xxx ‚àí yyy(cid:107)

,

(14)

that is, the stream function œàœàœà at position xxx is computed by integrat-
ing the curl of velocity vvv at position yyy over the three-dimensional
space R3. Using Eqn. 5, we next discretize Eqn. 14 to get the stream
function at the local position of particle with index i as:

œàœàœài =

1
4œÄ ‚àë

(cid:107)xi‚àíx j(cid:107)‚â§h

‚àÜŒ∂Œ∂Œ∂ jVj
(cid:13)
(cid:13)xxxi ‚àí xxx j

,

(cid:13)
(cid:13)

(15)

where Vj stands for the volume represented by the particle with
index j. Ideally, Vj should be inÔ¨Ånitely small and all distances (cid:107)xxxi ‚àí
xxx j(cid:107) should be considered in the summation in Eqn. 15. However,
to limit computational overhead and its adaptability to SPH, we

submitted to COMPUTER GRAPHICS Forum (10/2020).

only include neighbouring particles within a smoothing radius h in
Eqn. 15. This is justiÔ¨Åed by the fact that the inÔ¨Çuence of neighbour
particles shrinks with distance. Although the approximation could
potentially induce instability and dissipation, our results show that
this improves performance without sacriÔ¨Åcing turbulent details, as
already observed e.g. in [MCG03].

With the stream function obtained for each particle, the reÔ¨Åned

velocity for the particle with index i is derived as

‚àÜvvvi = ‚àë
j

m j
œÅ j

(cid:16)
œàœàœài ‚àí œàœàœà j

(cid:17)

√ó ‚àáWi j.

(16)

To extend the Ô¨Çexibility of our method, we introduce an adjust-
ment parameter Œ± ‚àà R, with the default value of 1 representing
the ideal vorticity reÔ¨Ånement. It controls the amount of turbulence
added to every simulation time step. Therefore the reÔ¨Åned linear
velocity at tn+1 is expressed as

vvvn+1 = Àúvvv + Œ±‚àÜvvv.

(17)

Since the divergence of the curl of any Ô¨Åeld is zero, the correction
of linear velocity due to vorticity does not cause any further diver-
gence deviations. Hence, our method does not contradict any SPH
principles, making it easier to implement into standard Lagrangian
approaches. Algorithm 2 summarizes our method, integrated with
the DFSPH technique for SPH simulation; see also Fig. 2.

8

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

ALGORITHM 2: Our vorticity reÔ¨Ånement (VR) solver

Compute current vorticity Ô¨Åeld:
Advection-projection:
Correct divergence Ô¨Åeld:
Vorticity through linear Ô¨Åeld:
Compute vorticity equation:
Dissipation of vorticity:
Compute stream function:
ReÔ¨Ånement of linear velocity:
ReÔ¨Åne linear velocity:

Œ∂Œ∂Œ∂n = ‚àá √ó vvvn
vvvadv = advectPro ject(vvvn)
Àúvvv = correctDivergence(vvvadv)
ÀúŒ∂Œ∂Œ∂ = ‚àá √ó Àúvvv
Œ∂Œ∂Œ∂n+1 = Œ∂Œ∂Œ∂n + ‚àÜt DŒ∂Œ∂Œ∂n
‚àá √ó vvv(yyy) = Œ∂Œ∂Œ∂n+1 ‚àí ÀúŒ∂Œ∂Œ∂
œàœàœà = (cid:82)
R3
‚àÜvvv = ‚àá √ó œàœàœà
vvvn+1 = Àúvvv + Œ± ‚àÜvvv

‚àá√óvvv(yyy)
4œÄ(cid:107)xxx‚àíyyy(cid:107)

(Eqn. 11)
(Eqn. 12)
(Eqn. 14)
(Eqn. 13)
(Eqn. 17)

Dt

5. Results and Discussion

We next test our novel Vortex ReÔ¨Ånement (VR) method on sev-
eral scenes, comparing it with the state-of-the-art micropolar (MP)
model and classical SPH approaches.

Both the VR and the MP method are integrated with DFSPH in
the following experiments to show the applicability of our method.
We used the boundary handling method proposed by Akinci et al.
[AIA‚àó12]. We implemented the entire framework in C++, with an-
imations rendered by Blender. Our simulation platform is a graphic
workstation with an Intel Xeon E5-2687w v4 (15M cache, 3.5 GHz,
12 cores) CPU, 80 GB RAM, and an NVIDIA Quadro P4000 GPU.

Similarly to the adjustment parameter Œ± in our method, there is
a scalar ŒΩt in the MP method to control it. Based on the mechanism
of the MP method [Eri66, BKKW18], ŒΩt greater than ŒΩv can poten-
tially violate the second law of thermodynamics. In all experiments
below we set ŒΩv = 0.05. We therefore choose ŒΩt = 0.05 as a nat-
ural reÔ¨Ånement for the MP solver, which corresponds to Œ± = 1 in
our method. However, to explore the stability and performance of
the methods, we test Œ± greater than 1 and ŒΩt greater than 0.05; see
Figs. 5 and 9. As stated in [BKKW18], Ô¨Çuids are reasonably stable
when ŒΩt ‚â§ 0.4.

5.1. Effectiveness and Comparison

To show the effectiveness of our approach numerically, we exe-
cuted two breaking-dam experiments, and we executed two other
experiments for parameter discussion and energy comparison with
other methods, as follows.

Breaking dam with a board. In Figs. 1 and 3, a board collides with
a breaking dam which only allows Ô¨Çuid to go through the so-created
gap. Figure 3 shows the results with 1.18M particles. Only few vor-
tex effects can be seen using DFSPH. Water Ô¨Çushes through the gap
and dissipates quickly without clear turbulence effects. Compared
to DFSPH, our solver generates several realistic vortices around
the board and corners. The MP solver also improves the visual re-
sult, but not as obviously as our method. Since our method reÔ¨Ånes
particle velocity based on the vorticity Ô¨Åeld, vortices are naturally
preserved and turbulence is generated from the dissipated energy
in a realistic way. In Fig. 4, the vorticity magnitude of all parti-
cles is visualized. The comparison shows that both our method and
the MP method yield higher energy values than DFSPH. The MP
solver adds energy in a natural way, while our method recovers en-
ergy from numerical dissipation more effectively and is thus able
to simulate more details.

Breaking dam with three obstacles. As shown in Fig. 11, a break-
ing dam scenario with static obstacles was tested using 457K Ô¨Çuid
particles. The Ô¨Çuid Ô¨Çows in from the left and hits the wall on the
right. Several waves are generated in the process, which then come
back and interact with three rigid bodies. Desirable turbulence can
be observed over the surface. We compared our method with the
DFSPH and MP solvers. In DFSPH, the Ô¨Çuid seems to go around
the pillars and forms splashes, but scarcely any complex turbulence
effects. In contrast, our solver creates small-scale vortices instead
of just the Ô¨Çuid smoothly Ô¨Çowing around the pillars. Since these
small vortices cannot sustain a self-spinning state, they quickly
break down into turbulence. Compared to the MP solver in this
scene, our method seems to generate more turbulent details but
smaller vortices. The MP solver and our method can achieve dif-
ferent visual effects.

Energy Comparison. An energy comparison of a breaking dam
experiment (see Fig. 8) is shown in Fig. 7. The left plot shows the
energy comparison, while the right plot shows the energy increase
ratio relative to DFSPH. When t ‚àà [2, 8], the Ô¨Çuid keeps Ô¨Çowing
and forming turbulence. If the energy is larger than that of DFSPH,
then energy is recovered (or added) successfully. After the water
surface calms down (after about 10s), the scene should contain only
potential energy (no kinetic energy). The energy of the traditional
DFPSH method can be used as a benchmark: If a method gener-
ates, at this time point, more energy than DFSPH, then this method
is considered to create additional energy. In this comparison ex-
periment, the energy values after 10s for both the MP solver with
ŒΩt = 0.05, 0.1 and for our method with Œ± = 1.0, 1.1, 1.2 are very
close to the DFSPH values. Our method with Œ± = 1.3 and the MP
method with ŒΩt = 0.2, 0.3, 0.4 have higher energy than DFSPH. In
some applications, in order to enhance the visual effect, one can use
such larger parameter values. However, this can very likely cause
excessive chaos and even instability such as unnatural turbulence
similar to boiling. Hence, we recommend to use our method with
Œ± = 1.0 to ensure the energy is always in line with the underlying
physics.

Breaking dam with a hemisphere: parameter inÔ¨Çuence. In this
experiment (see Fig. 9) we Ô¨Çush a hemisphere obstacle with a Ô¨Åxed
volume of Ô¨Çuid. This means only limited kinetic energy is involved
in this scenario (from gravitational potential energy). We simulated
the Ô¨Çow using DFSPH, our method with Œ± = 1 and Œ± = 1.2, and
the MP solver with ŒΩt = 0.05, ŒΩt = 0.2 and ŒΩt = 0.4. When com-
paring the DFSPH approach with our method with Œ± = 1 and with
MP with ŒΩt = 0.05, both methods are able to increase the turbu-
lence performance, but our result is more pronounced than the MP
one. To obtain more obvious turbulence effects, we increase the
turbulence control parameters in the two methods, which means
that more energy is added to the simulation. The renderings show
that our method with Œ± = 1.2 yields more turbulence and the re-
sult is better than that of the MP solver with vt = 0.2. To keep our
method in line with the underlying physics, as explained for the ear-
lier example, we do not use higher parameter values. The MP solver
adds more turbulence in this scene. The obtained results are visu-
ally more salient for large parameter values, e.g. ŒΩt = 0.2. However,
ŒΩt cannot be increased indeÔ¨Ånitely. For example, if we set ŒΩt = 0.4
(Fig. 9, last row), the Ô¨Çuid does not calm down, which is unnatural.
The detailed energy comparison is shown in Fig. 10. Our method

submitted to COMPUTER GRAPHICS Forum (10/2020).

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

9

Figure 7: Comparison of energy changes for different methods using different parameter values in the breaking dam scene shown in Fig. 8.
Left: direct energy comparison. Right: energy increase ratio relative to DFSPH. When the Ô¨Çuid is Ô¨Çowing (t ‚àà [2, 8]), our method and the MP
solver are able to add energy to the scene and enhance the visual effect. However, the MP solver with ŒΩt = 0.2, 0.3, 0.4 and our method with
Œ± = 1.3 do not converge after t = 8 due to the excessive energy added.

DFSPH. Both our method and the MP method enhance the visual
effect. In contrast to the MP method, our method adds energy in a
physically reasonable way (no turbulence in front of the propeller)
and creates vivid turbulent details over the free Ô¨Çuid surface. The
key areas are zoomed in on. Also, a vortex is observed with our
method after the propeller has stopped spinning (see also the sup-
plementary video).

Boat-sinking. In this scenario, a boat and two columns interact
with a breaking dam. Figure 6 shows the results using 1.7M Ô¨Çuid
particles. The potential energy of the Ô¨Çuid transforms into the ki-
netic energy of the Ô¨Çuid particles and the boat. The water is Ô¨Årst
violently displaced when it hits the column and the boat, and next
gradually calms down as time goes by, Ô¨Ånally reaching a stable
state. We see that the DFSPH method produces relatively weakly
turbulent details, which get lost quickly due to numerical dissipa-
tion. In contrast, our method and MP server shows more natural
dynamics with realistic turbulent effects on the Ô¨Çuid surface. The
Ô¨Çuid gradually calms down as time goes on. Our method and the
MP method achieve different styles.

Stirring water. In Fig. 5, a cylindrical stick was inserted into a
tank of water, and stirred at a uniform speed for several seconds.
The water splashed around due to the quick movement of the stick.
Observe that the trace left on the surface lasts longer in our method
than with the MP method, which is a critical point for boat-sailing
animation scenarios. After the stirring process, the stick is pulled
out of the Ô¨Çuid, and the water starts to calm down. The DFSPH ap-
proach calms the Ô¨Çuid down quickly due to numerical dissipation.
The surface details are clearer and sharper in our method. Also, we
notice a disturbance wave in the MP method, caused by the fact that
ŒΩt exceeds the kinematic viscosity.

The above three scenarios show that our method can keep sta-
bility when dealing with extreme conditions like strong collisions,
while physically preserving energy. Moreover, in the accompany-

Figure 8: A breaking dam scenario for the evaluation of energy
changes (461K Ô¨Çuid particles); see Fig. 7.

can be applied to scenes that are more sensitive to physics laws,
such as adding more details to a relatively stably-Ô¨Çowing scene. In
contrast, the MP method can be used in scenes where one wants to
create a stronger visual impact, such as collapses or violent shocks.

Overall, this experiment shows that the MP solver and our solver
can achieve different turbulence effects. Our method achieves bet-
ter turbulence results without adding energy sources. In contrast,
the MP solver can add small vortices, but when increasing its pa-
rameter values, energy sources will pop up and prevent the Ô¨Çuid
from calming down.

5.2. Quality

To further demonstrate the turbulence quality of our method, we
simulated several complex scenarios with dynamic boundary con-
ditions and compared them with the MP solver.

Spinning Propeller. A propeller is slowly submerged into water,
after which it starts spinning at 3 radians per second. Fig. 12 shows
the results of this simulation using 1.29M Ô¨Çuid particles for DF-
SPH, MP, and VR (our method). Observe that neither the complex
Ô¨Çow nor strong turbulence effects are produced and preserved using

submitted to COMPUTER GRAPHICS Forum (10/2020).

0246810126.07.59.010.512.013.5EnergyTime(s) DFSPH VR 1.00 VR 1.10 VR 1.20 VR 1.30 MP 0.05 MP 0.10 MP 0.20 MP 0.30 MP 0.400246810120%10%20%30%40%50%Time(s)Percentage VR 1.00 VR 1.10 VR 1.20 VR 1.30 MP 0.05 MP 0.10 MP 0.20 MP 0.30 MP 0.4010

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

Figure 9: Comparison of DFSPH, the MP solver with ŒΩt = 0.05, 0.2, 0.3, 0.4, and our method with Œ± = 1.0, 1.2 in the breaking dam scenario
with a static spherical obstacle placed to the right.

ing video it can be seen that our method not only ampliÔ¨Åes existing
vortices but also generates new ones.

Computational overhead. The computational overhead of our
method is negligible compared to the whole SPH simulation pro-
cedure. Table 1 shows the computing times for DFSPH, the MP
solver, and our method for different simulation scenes. The dif-
ferent computation times are explained as follows. Compared to
DFSPH, both turbulence methods (MP and ours) need to compute

the vorticity Ô¨Åeld, i.e., solve for the Laplacian ‚àá2Œ∂Œ∂Œ∂. Further, ‚àá √ó Œ∂Œ∂Œ∂
(in the MP solver) and ‚àávvv (in our method) also need to be solved
for. The difference is that our method needs to compute œàœàœà(Œ∂Œ∂Œ∂) and
‚àá √ó œàœàœà to get the reÔ¨Åned velocity, but as Table 1 shows, the extra
computational effort is negligible.

submitted to COMPUTER GRAPHICS Forum (10/2020).

10S.Liu&X.Wang&X.Banetal./TurbulentDetailsSimulationforSPHFluidsviaVorticityReÔ¨Ånement(a)DFSPH(b)MPsolver(nt=0.05)(c)MPsolver(nt=0.2)(d)MPsolver(nt=0.4)(e)Ourmethod(a=1.0)(f)Ourmethod(a=1.2)Figure9:ComparisonofDFSPH,theMPsolverwithnt=0.05,0.2,0.3,0.4,andourmethodwitha=1.0,1.2inthebreakingdamscenariowithastaticsphericalobstacleplacedtotheright.Thewatersplashedaroundduetothequickmovementofthestick.ObservethatthetraceleftonthesurfacelastslongerinourmethodthanwiththeMPmethod,whichisacriticalpointforboat-sailinganimationscenarios.Afterthestirringprocess,thestickispulledoutoftheÔ¨Çuid,andthewaterstartstocalmdown.TheDFSPHap-proachcalmstheÔ¨Çuiddownquicklyduetonumericaldissipation.Thesurfacedetailsareclearerandsharperinourmethod.Also,wesubmittedtoCOMPUTERGRAPHICSForum(9/2020).S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

11

(a) DFSPH

(b) MP solver

(c) Our method

Figure 11: A comparison of DFSPH, the MP solver and our
method in a breaking dam scene with 3 static pillars as obstacles.
The water hits the cylinders and the right wall and bounces back,
forming turbulence in the process. Compared to DFSPH, our solver
gives rise to tiny vortices instead of the water simply going around
the pillars. Compared to the MP solver, our method seems to pro-
vide more turbulent details but smaller vortices in this scene.

ods. Our method can simulate typical turbulent scenes efÔ¨Åciently
and is relatively stable even for scenarios with highly turbulent
Ô¨Çow. At the same time, we should note that some vorticity is lost
in such cases. While this small amount of loss does not affect the
general visual quality, decreasing it is an open topic for future re-
search, which can be expected to lead to even more realistic Ô¨Çuid
simulations.

In the future, we aim to investigate merging our method with mi-
crostructural models, since these models show great potential for
rough simulation conditions and also have a close relationship with
viscosity. Improving computation accuracy is another potential fu-
ture research direction. Finally, increasing the computational scal-
ability of our method by e.g. efÔ¨Åcient and effective parallelization
is attractive for making our method directly applicable to complex
real-world and/or interactive simulations.

References
[AIA‚àó12] AKINCI N., IHMSEN M., AKINCI G., SOLENTHALER B.,
TESCHNER M.: Versatile rigid-Ô¨Çuid coupling for incompressible sph.
ACM Transactions on Graphics (TOG) 31, 4 (2012), 62.

Figure 10: Similar to Fig. 8, we compared the energy increase ratio
of different methods to the DFSPH method using the scene shown in
Fig. 9. We see that all methods produce more energy than DFSPH
when the Ô¨Çuid is Ô¨Çowing (t ‚àà [0, 15]). Note that the MP solver with
ŒΩt = 0.2, 0.4 does not converge after t = 15.

Experiment Fig. Particles ‚àÜt (ms) Steps DFSPH (m) MP (m) VR (m)
2401.2 2565.9 2565.1
2.4 9542
Board
2399.9 2864.4 2693.4
2.4 9542
Stirring
1657.4 1715.2 1827.2
2.4 8375
Sphere
156.4
3 6667
Pillars
218.5
188.3
1782.1 2309.1 2338.9
3 7334
Propeller

1.18M
1.39M
899.8K
457K
1.29M

3
5
9
11
12

Table 1: Total time comparisons of three methods: DFSPH, MP,
and our method (VR) over Ô¨Åve simulations. ‚àÜt, in milliseconds, is
the time step used in the experiments, and the total computation
times, in minutes, include the costs of the density solver and the
divergence-free solver in DFSPH.

6. Conclusion and Discussion

We have presented a particle-based turbulence reÔ¨Ånement method
that recovers lost velocity from the difference between the theoreti-
cal and the actual vorticity value. Our method can not only increase
existing vortices signiÔ¨Åcantly by recovering numerical dissipation,
but also generates new turbulence at potentially different locations.
The turbulence-enhancement parameter of our method has a theo-
retically optimal value Œ± = 1 that can increase turbulence without
adding too much energy. At the same time, one can easily adjust
this parameter to achieve different turbulence levels for different
simulation effects.

Experimental results show that, compared to the classical and
micropolar SPH methods, our method is able to enhance turbulent
effects more visibly. Furthermore, our method guarantees energy
conservation, even when using a large particle radius and/or a large
time step. This means that our method is still robust even under
extreme simulation conditions and can handle complex large-scale
scenes, as demonstrated in our simulation scenarios.

Numerical dissipation is difÔ¨Åcult to fully correct in SPH meth-

[AN05] ANGELIDIS A., NEYRET F.:

Simulation of smoke based

submitted to COMPUTER GRAPHICS Forum (10/2020).

051015200%10%20%30%40%PercentageTime(s) VR 1.00 VR 1.20 MP 0.05 MP 0.20 MP 0.4012

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

(a) DFSPH

(b) MP solver

(c) Our method

Figure 12: A propeller interacts with 1.29M Ô¨Çuid particles using DFSPH, the MP solver, and our method. DFSPH (top row) is not able to
produce a complex Ô¨Çow. Under stable conditions, the MP solver (middle row) can only add limited turbulence effects to DFSPH, while our
VR method is able to generate realistic vortices (bottom row). The improved turbulence performance can be seen clearly in the insets.

the 2005 ACM
on vortex Ô¨Ålament primitives.
SIGGRAPH/Eurographics symposium on Computer animation (2005),
ACM, pp. 87‚Äì96.

In Proceedings of

[EB14] EDWARDS E., BRIDSON R.: Detailed water with coarse grids:
combining surface meshes and adaptive discontinuous galerkin. ACM
Transact. on Graphics (TOG) 33, 4 (2014), 136.

[BK15] BENDER J., KOSCHIER D.: Divergence-free smoothed par-
the 14th ACM SIG-
In Proceedings of
ticle hydrodynamics.
GRAPH/Eurographics Symposium on Computer Animation (2015),
ACM, pp. 147‚Äì155.

[BKKW18] BENDER J., KOSCHIER D., KUGELSTADT T., WEILER M.:
Turbulent micropolar sph Ô¨Çuids with foam. IEEE Transact. on Visual-
ization and Computer Graphics (2018).

[Bri15] BRIDSON R.: Fluid simulation for computer graphics. AK Pe-

ters/CRC Press, 2015.

[BT07] BECKER M., TESCHNER M.: Weakly compressible sph
the 2007 ACM SIG-
for free surface Ô¨Çows.
GRAPH/Eurographics symposium on Computer animation (2007), Eu-
rographics Association, pp. 209‚Äì217.

In Proceedings of

[CT17] CHU M., THUEREY N.: Data-driven synthesis of smoke Ô¨Çows
with cnn-based feature descriptors. ACM Transactions on Graphics
(TOG) 36, 4 (2017), 69.

[dGWH‚àó15] DE GOES F., WALLEZ C., HUANG J., PAVLOV D., DES-
BRUN M.: Power particles: an incompressible Ô¨Çuid solver based on
power diagrams. ACM Trans. Graph. 34, 4 (2015), 50‚Äì1.

[Eri66] ERINGEN A. C.: Theory of micropolar Ô¨Çuids. Journal of Mathe-

matics and Mechanics (1966), 1‚Äì18.

[EWPT17] EBERHARDT S., WEISSMANN S., PINKALL U., THUEREY
In Proceedings of the ACM
N.: Hierarchical vorticity skeletons.
SIGGRAPH/Eurographics Symposium on Computer Animation (2017),
ACM, p. 6.

[FGG‚àó17] FU C., GUO Q., GAST T., JIANG C., TERAN J.: A poly-
nomial particle-in-cell method. ACM Trans. Graph. 36, 6 (Nov. 2017),
222:1‚Äì222:12.

[FM96] FOSTER N., METAXAS D.: Realistic animation of liquids.

Graphical models and image processing 58, 5 (1996), 471‚Äì483.

[FSJ01] FEDKIW R., STAM J., JENSEN H. W.: Visual simulation of
In Proceedings of the 28th conference on Computer graphics

smoke.
and interactive techniques (2001), ACM, pp. 15‚Äì22.

[GNS‚àó12] GOLAS A., NARAIN R., SEWALL J., KRAJCEVSKI P.,
DUBEY P., LIN M.: Large-scale Ô¨Çuid simulation using velocity-vorticity
domain decomposition. ACM Transactions on Graphics (TOG) 31, 6
(2012), 148.

submitted to COMPUTER GRAPHICS Forum (10/2020).

S. Liu & X. Wang & X. Ban et al. / Turbulent Details Simulationfor SPH Fluids via Vorticity ReÔ¨Ånement

13

[WP10] WEISSMANN S., PINKALL U.: Filament-based smoke with vor-
In ACM Transactions on

tex shedding and variational reconnection.
Graphics (TOG) (2010), vol. 29, ACM, p. 115.

[XBP‚àó19] XU Y., BAN X., PENG Y., WANG X., LIU S., ZHOU J.: Tur-
bulence enhancement for sph Ô¨Çuids visualization. In International Con-
ference on Cooperative Design, Visualization and Engineering (2019),
Springer, pp. 254‚Äì260.

[ZB05] ZHU Y., BRIDSON R.: Animating sand as a Ô¨Çuid. ACM Trans-

actions on Graphics (TOG) 24, 3 (2005), 965‚Äì972.

[ZB14] ZHANG X., BRIDSON R.: A pppm fast summation method for
Ô¨Çuids and beyond. ACM Transactions on Graphics (TOG) 33, 6 (2014),
206.

[ZBG15] ZHANG X., BRIDSON R., GREIF C.: Restoring the missing
vorticity in advection-projection Ô¨Çuid solvers. ACM Transactions on
Graphics (TOG) 34, 4 (2015), 52.

[ZNT18] ZEHNDER J., NARAIN R., THOMASZEWSKI B.: An advection-
reÔ¨Çection solver for detail-preserving Ô¨Çuid simulation. ACM Transac-
tions on Graphics (TOG) 37, 4 (2018), 1‚Äì8.

[ZYF10] ZHU B., YANG X., FAN Y.: Creating and preserving vortical
details in sph Ô¨Çuid. In Computer Graphics Forum (2010), vol. 29, Wiley
Online Library, pp. 2207‚Äì2214.

[HLL‚àó12] HE X., LIU N., LI S., WANG H., WANG G.: Local poisson
In Computer Graphics Forum

sph for viscous incompressible Ô¨Çuids.
(2012), vol. 31, Wiley Online Library, pp. 1948‚Äì1958.

[ICS‚àó14]

IHMSEN M., CORNELIS J., SOLENTHALER B., HORVATH C.,
IEEE Transactions on

TESCHNER M.:
Visualization and Computer Graphics 20, 3 (2014), 426‚Äì435.

Implicit incompressible sph.

[IOS‚àó14]

IHMSEN M., ORTHMANN J., SOLENTHALER B., KOLB A.,

TESCHNER M.: Sph Ô¨Çuids in computer graphics.

[JKB‚àó10]

JANG T., KIM H., BAE J., SEO J., NOH J.: Multilevel vorticity
conÔ¨Ånement for water turbulence simulation. The Visual Computer 26,
6-8 (2010), 873‚Äì881.

[JSMF‚àó18]

JESCHKE S., SK ÀáRIVAN T., M√úLLER-FISCHER M., CHEN-
TANEZ N., MACKLIN M., WOJTAN C.: Water surface wavelets. ACM
Trans. Graph. 37, 4 (July 2018), 94:1‚Äì94:13.

[JSS‚àó15]

JIANG C., SCHROEDER C., SELLE A., TERAN J., STOM-
AKHIN A.: The afÔ¨Åne particle-in-cell method. ACM Transactions on
Graphics (TOG) 34, 4 (2015), 51.

[JST17]

JIANG C., SCHROEDER C., TERAN J.: An angular momen-
tum conserving afÔ¨Åne-particle-in-cell method. Journal of Computational
Physics 338 (2017), 137‚Äì164.

[KBST19] KOSCHIER D., BENDER J., SOLENTHALER B., TESCHNER
M.: Smoothed particle hydrodynamics techniques for the physics based
simulation of Ô¨Çuids and solids.

[KLLR05] KIM B., LIU Y., LLAMAS I., ROSSIGNAC J. R.: FlowÔ¨Åxer:
Using bfecc for Ô¨Çuid simulation. Tech. rep., Georgia Institute of Tech-
nology, 2005.

[KTJG08] KIM T., TH√úREY N., JAMES D., GROSS M.: Wavelet tur-
bulence for Ô¨Çuid simulation. In ACM Transactions on Graphics (TOG)
(2008), vol. 27, ACM, p. 50.

[LAF11] LENTINE M., AANJANEYA M., FEDKIW R.: Mass and mo-
mentum conservation for Ô¨Çuid simulation. In Proceedings of the 2011
ACM SIGGRAPH/Eurographics Symposium on Computer Animation
(2011), ACM, pp. 91‚Äì100.

[MBT‚àó15] MERCIER O., BEAUCHEMIN C., THUEREY N., KIM T.,
NOWROUZEZAHRAI D.: Surface turbulence for particle-based liquid
simulations. ACM Transactions on Graphics (TOG) 34, 6 (2015), 202.

[MCG03] M√úLLER M., CHARYPAR D., GROSS M.: Particle-based Ô¨Çuid
simulation for interactive applications. In Proceedings of the 2003 ACM
SIGGRAPH/Eurographics symposium on Computer animation (2003),
Eurographics Association, pp. 154‚Äì159.

[MM13] MACKLIN M., M√úLLER M.: Position based Ô¨Çuids. ACM Trans-

actions on Graphics (TOG) 32, 4 (2013), 104.

[Mon85] MONAGHAN J.: Particle methods for hydrodynamics. Com-

puter Physics Reports 3, 2 (1985), 71‚Äì124.

[Mon94] MONAGHAN J. J.: Simulating free surface Ô¨Çows with sph. Jour-

nal of computational physics 110, 2 (1994), 399‚Äì406.

[NZT19] NARAIN R., ZEHNDER J., THOMASZEWSKI B.: A second-
order advection-reÔ¨Çection solver. Proceedings of the ACM on Computer
Graphics and Interactive Techniques 2, 2 (2019), 1‚Äì14.

[PK05] PARK S. I., KIM M. J.: Vortex Ô¨Çuid for gaseous phenomena. In
Proceedings of the 2005 ACM SIGGRAPH/Eurographics symposium on
Computer animation (2005), ACM, pp. 261‚Äì270.

[SP09] SOLENTHALER B., PAJAROLA R.: Predictive-corrective incom-
pressible sph. In ACM transactions on graphics (TOG) (2009), vol. 28,
ACM, p. 40.

[Sta99] STAM J.: Stable Ô¨Çuids. In Proceedings of the 26th annual con-
ference on Computer graphics and interactive techniques (1999), ACM
Press/Addison-Wesley Publishing Co., pp. 121‚Äì128.

[WLB‚àó20] WANG X., LIU S., BAN X., XU Y., ZHOU J., KOSINKA J.:
Robust turbulence simulation for particle-based Ô¨Çuids using the rankine
vortex model. In 2020 IEEE Conference on Virtual Reality and 3D User
Interfaces Abstracts and Workshops (VRW) (2020), IEEE, pp. 657‚Äì658.

submitted to COMPUTER GRAPHICS Forum (10/2020).

