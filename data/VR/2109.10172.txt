1
2
0
2

p
e
S
1
2

]

C
H
.
s
c
[

1
v
2
7
1
0
1
.
9
0
1
2
:
v
i
X
r
a

VRMenuDesigner: A toolkit for automatically
generating and modifying VR menus

Shengzhe Hou ∗ 1 and Bruce H. Thomas2

1College of Computer Science and Engineering, Shandong University of Science and
Technology, Qingdao 266590, China
2Australian Research Centre for Interactive and Virtual Environments, University of
South Australia, Adelaide 5000, Australia

Abstract

With the rapid development of Virtual Reality (VR) technology, the
research of User Interface (UI), especially menus, in the VR environment
has attracted more and more attention. However, it is very tedious for
researchers to develop UI from scratch or modify existing functions and
there are no easy-to-use tools for eﬃcient development. This paper aims
to present VRMenuDesigner, a ﬂexible and modular toolkit for automat-
ically generating/modifying VR menus. This toolkit is provided as open-
source library and easy to extend to adapt to various requirements. The
main contribution of this work is to organize the menus and functions
with object-oriented thinking, which makes the system very understand-
able and extensible. VRMenuDesigner includes two key tools: Creator
and Modiﬁer for quickly generating and modifying elements. Moreover,
we developed several built-in menus and discussed their usability. After a
brief review and taxonomy of 3D menus, the architecture and implemen-
tation of the toolbox are introduced.

Keywords Virtual Reality, Human-Computer Interaction, 3D Menu, User Inter-

face

1

Introduction

In recent years, the Human-Computer Interaction (HCI) techniques of 3D Virtual
Environment (VE) have attracted the attention of more and more researchers [1]. The
graphical menu, derived from the traditional desktop environments, is one of the most
successful HCI metaphors because of its intuitiveness and ease of use [2]. Naturally,
menu is still the most widely used UI in VR Environment. The increase in Degrees
of Freedom (DoF) and the diﬀerence in I/O devices make the interactive technology
in the VR environment signiﬁcantly diﬀerent from the traditional 2D desktop [3].

∗Corresponding author: Housz@sdust.edu.cn

1

 
 
 
 
 
 
Therefore, compared with the traditional desktop environment, the research of menus
in the VR environment is more challenging.

For researchers, because of the lack of tools that can quickly create prototypes to
test research ideas, they have to develop menus from scratch every time. With the
development of game engines and VR platforms, some commercial VR frameworks
have appeared. However, the existing toolkits are not speciﬁcally designed for VR
menu research. And they are all too complicated to learn and extend.

In this paper, we introduce VRMenuDesigner: an open-source 1 toolkit for au-
tomatically generating and modifying VR menus. The Toolkit interface is shown in
Figure 1. VRMenuDesigner works directly in the Unity Editor environment as a plug-
in. With the tools, users can quickly create new menus and modify existing menus.

Figure 1: Interface of VRMenuDesigner. 1) This toolbox has been installed as
a plugin in the menu bar of the Unity Editor. 2) The Panel of Creator and
Modiﬁer.

The research of the 3D menu technique has been going on for about thirty years.
[4]. Traditional 2D UI metaphors, such as Windows, Icons, Menus, Pointer (WIMP)
based on mouse or touch screen, have long been familiar to user. However, directly
applying traditional UI, especially menus, to VR environments will cause many prob-
lems. For a long time, researchers have paid attention to designing better VR menus,
including to a suitable form for virtual environments and designing new 3D menu
formats [5, 6]. In this paper, we reviewed the history of VR menus to design an eﬃ-
cient and easy-to-use toolbox. According to the research history, we extracted several
typical characteristics of VR menus and proposed a concise taxonomy.

Our contribution is mainly in three aspects. First, we designed a VR menu system
with object-oriented thinking. We organize existing research results of VR menus
in abstract classes and their implementation. Users can easily expand new menu
types or customize functions. Second, we have developed two useful tools: Creator
and Modiﬁer. Users can use Creator to quickly generate menu prototypes with few

1https://github.com/Housz/VRMenuDesigner

2

settings. The Modiﬁer is used for modifying the generated menu elements. Finally, we
built several commonly used menus for VRMenuDesigner and compared their usability.
The paper is structured as follows. In Section 2, a brief survey on the VR menu is
presented as a research background review. According to the characteristics of the VR
menus, we propose a concise taxonomy. In Section 3, the overall design architecture
and speciﬁc implementation of the system are introduced. The class design and the
working principle of the system are introduced in detail.
In Section 4, The user
pipeline is shown and several built-in menus are introduced. We also analyzed the
usability of some typical menus. Finally, conclusions of this work and future research
are summarized in Section 5.

2 Survey and Taxonomy of VR Menus

To understand the big picture of the VR menu technology, it is necessary to do a
survey on it. In this section, we ﬁrst reviewed the history and typical work of VR
menus, then discussed some of the most critical features, and ﬁnally discussed the VR
menu taxonomy. A more comprehensive survey is in Reference [7].

2.1 VR Menu History

In the early stage of VR technology, many interaction metaphors were directly derived
from the traditional 2D environment. Many researchers directly introduced the design
of WIMP (windows, icons, menus, pointing) into virtual environments [8], such as the
work of Angus and Sowizral [9]. 2D Windows widgets are introduced into the 3D
environment in the work [10]. A later work [11] attempted to mix 2D and 3D UI in
a virtual environment. The 2D ﬂoating menu in 3D space, developed in the ISAAC
system [12], is still the most widely used menu until now.

In order to achieve more complex interactions, some hierarchical menu technologies
have emerged. In the ﬁeld of HCI, hierarchy is a very important structural concept
that can make functions more organized. The hierarchical menu system with a tree
topology can improve the eﬃciency of operation and enhance information density. This
design idea is very common in 2D desktops, but the overly complex menu structure
in VR will reduce usability. An early hierarchical ﬂoating menu was implemented in
[13]. Another similar hierarchical menu is introduced in [14].

Besides the most classic ﬂat list menu, more menu layouts are also designed. The
Pie menu (also called radial menu) is a typical circular menu, which items are equally
spaced in a circle. Pie menus are usually used as hand-held tools for users to quickly
call a temporary option. A 3D pie menu example is implemented in HoloSketch system
[15]. The ring menu has a circular layout which is similar to the pie menu, but the
former usually has a larger area and usually uses 3D widgets as items. The most
famous ring menu was introduced in [16], and an extended ring menu was developed
in [17]. Usually, the menu layout determines the dimension of the operation task [2].
For example, the list menu is usually one-dimensional, while the pie menu or matrix
menu is two-dimensional. In other words, the layout is the key factor in determining
the usability of a menu.

With the advancement of VR devices, especially input devices, interactions of VR
menus has also become diversiﬁed [4]. Selection is the most basic VR menu interaction
method. Ray-casting is a selection technique with a long history but still very popular
[18]. The nature of the input device determines the interactive mode for selecting

3

menu items. Typical input devices include handles (controllers), gloves, touchpads,
etc. Currently, the most extensive VR solution (such as HTC Vive) is based on the
controller-based ray-casting interaction.

2.2 VR Menu Properties

There are many kinds of classiﬁcation criteria for VR menu [2, 7]. In this work, there
are four Properties used for describing menu characteristics: Structure, Appearance,
Position, and the most abstract characteristic Usability.

• Structure. There are two important menu structure factors: The number of
functional items and the depth of hierarchy. The former measures the number
of items of a single menu, which has a great impact on eﬃciency and usability [17,
19]. Therefore, most menu systems limit the number of items. The latter reﬂects
the number of levels of a menu system. Most permanent menus allow multiple
hierarchies, but temporary menus generally do not. Due to the particularity of
the VR environment, a lot of systems only allow two levels (depth of hierarchy
= 2) menus [20]. That is, each root menu item has at most one level of submenus.
Some studies have also paid attention to the inﬂuence of the arrangement and
ease of use of multi-level (depth of hierarchy > 2) menus [21, 22].

• Appearance. The appearance mainly refers to the layout of the menu, the
type of menu items, the size of the menu, etc. The rectangular list menu is
derived from the traditional WIMP metaphor and is still the most used menu
design in the VR environment. The matrix menu is similar to the list menu,
which is composed of the same or diﬀerent square items. The circular layout
menu includes pie(radial) menu [22, 23] and ring menu [24]. The type of menu
items usually include traditional 2D buttons (rectangular, circular or other), 3D
objects [25], Text [26], or a combination of multiple types. The size of a menu
and its items are also very important properties. Generally, the size of the menu
depends on many factors such as the distance from users and the viewing angle
to reduce the probability of error.

• Position. The position describes the placement, orientation, and reference ob-
ject of menus [27]. The most common menus are always displayed in a ﬁxed
position in 3D space. Device-referenced menus usually move with a certain VR
device. For example, the head-referenced menu moves with HMD, and the hand-
referenced menu moves with the controller [28]. Some studies have discussed the
inﬂuence of the menu position on the eﬃciency and accuracy of use [29].

• Usability. User experience has always been the core issue in the HCI ﬁeld.
Usability, including eﬃciency and accuracy, is the most important criterion for
evaluating a menu [30]. Usability is related to many factors (such as input
device, menu location, size, etc.) so it is diﬃcult to measure. Fitts’ law [31] is
a classic model of UI usability, it can be expressed by equation 1:

M T = a + b log2

(cid:16)

1 +

(cid:17)

2D
W

(1)

where M T is the average movement time to complete the action, a and b are
device-related constants, D is the distance from the starting position to the
target center, and W is the width of the target. Generally, the smaller M T , the
higher eﬃciency and accuracy of interactions. Research in [32] extends Fitts’
law into the 3D environment. We will discuss the extension of the Fitts’ law for
diﬀerent VR menus when using ray-casting in section 4.

4

2.3 VR Menu Taxonomy

According to the characteristics discussed in Section 2.2, we propose a practical taxon-
omy of VR menus. We only consider the menu system of immersive VR, especially the
VR environment based on HMDs and controllers. The menu taxonomy we proposed
is only a concise summary of the VR menu. A more systematic study of this ﬁeld
reference [7].

According to the depth of hierarchy, we divide the menus into three categories:
Single Menus, Two-level Menus, and Multi-level Menus, which are summarized in
Table 1. According to the layout style of the menu, the four most widely used menus:
List Menus (Panel Menus), Matrix Menus, Pie Menus, Ring Menus are listed in Table
2. Finally, according to the placement, three types of menus: Fixed Position Menus,
Hand-referenced Menus, and Head-referenced Menus are shown in Table 3.

Type

Single Menus

Two-level Menus

Multi-level Menus

Table 1: Classiﬁcation according to depth of hierarchy
Examples

Description

Depth of hierarchy = 1,
usually used as a temporary tool menu.
Depth of hierarchy = 2,
is the most common VR menu system design.
Depth of hierarchy > 2 with tree structure.
Used to complete complex tasks.

Single ring menu [16],
Pull-down menu [33]
Spin menu [34],
Textual menu [20]
Multi-level pie menu [22],
Multi-level list menu [14]

Type

List Menus
(Panel Menus)

Matrix Menus

Pie Menus

Ring Menus

Table 2: Classiﬁcation according to layout
Examples

Description

A ﬂat list menu has items arranged in
1 dimension horizontally or vertically.
A ﬂat menu with items arranged in
a 2-dimensional grid.
A circular menu with buttons arranged
equidistantly, looks like a cut pie.
Ring menu is similar to pie menu,
but the appearance is a ring.

Floating list menu[13]
Tinmith-Hand menu [35]

Grid menu [36]

Multi-level Pie menu [22]
System control pie menu [37]

JDCAD ring menu [16]

Type

Description

Examples

Table 3: Classiﬁcation according to position

Fixed Position Menus

The menu is ﬁxed at a certain position
in the virtual environment.
The menu follows the user’s hand (controller)
and is usually used as a frequently used tool.
Head-referenced Menus The menu always follows the user’s head (HMDs). Look-at menu [39]

Hand-referenced Menus

Floating list menu [13]

Hand-referenced pie menu [38]

5

3 VRMenuDesigner

In this section, an overview of the implementation of the VRMenuDesigner toolbox
is given with object-oriented thinking. Only important classes, functions, and archi-
tectures are introduced here. More details are shown in the source code and doc-
umentation. Currently, there are a wide variety of VR hardware and development
environments. Considering that the most popular VR input and output devices are
the 6DoF Controllers and Head-mounted displays (HMDs) respectively, we selected
HTC Vive as the development platform. With the increasing application of 3D game
engines in VR development, most of the VR research is based on a commercial game
engine. In this work, Unity3D is used as the development environment. The entire
toolbox is installed directly in the Unity Editor as a plug-in.

3.1 System Architecture

In this section, the general structure of the VRMenuDesigner is introduced. Above
all, the overall architecture design of the toolkit is introduced, then the design of two
important tools and some important classes is presented.

The overall architecture of VRMenuDesigner is shown in Figure 3.1. This toolkit
can be divided into two parts: Scripts and Resources. Scripts is the core part of the
system, including the logic of tools and the realization of important classes. Resources
is a variety of related resources, such as background images, menu icons, and prefabs
(a built-in resource type of Unity).

Figure 2: Architecture diagram of VRMenuDesigner

The Scripts section includes System, Tools, and Components. System includes the
core implementation of VRMenuDesigner, such as controller input processing, and two
important tools: Creator and Modiﬁer. Tools contains several development common
tools. Components include interfaces for abstract menu and button, and classes of
various types of speciﬁc menus and buttons. For each type of menu and button, there
is a corresponding Prefab in Resources section.

6

3.2 Class Design

By reviewing the history of menu development for about 30 years, we found that
most menus can be divided into two parts: the carrier of the content and its items of
function. Intuitively, the former is a display area of the menu, and we summarize it
into an abstract class, called MenuInterface, that determines the overall behavior of
the menu and contains functional items. The latter is a function item of the menu,
which is triggered by the user through an input device and executes a certain function.
The abstract class ButtonInterface is designed to describe functional items. Obviously,
a button should be a component of a menu. The UML class diagram illustrated in
Figure 3.

Figure 3: UML class diagram

Abstract classes MenuInterface and ButtonInterface only have basic functions and
data structures. The important member functions and variables of these two abstract
classes are listed in Table 4 and Table 5.

Member functions and variables Description

Table 4: Description of MenuInterface

ButtonNum : int
isRootMenu : bool

InitMenu(int, bool)

SwitchActive()

The current number of buttons in this menu.
The ﬂag indicates whether this menu is the top level.
Initialization menu (used by Creator ).
The parameters are ButtonNum and isRootMenu.
Toggle the activation state of this menu.

MenuInterface only saves the number of buttons (ButtonN um), and its various
implementations (such as RingMenu, ListMenu, etc.) will automatically adjust the
layout according to current ButtonN um. The topological structure of the hierarchi-

7

Member functions and variables

Table 5: Description of ButtonInterface
Description

allowSubMenu : bool

The ﬂag indicates whether this button is allowed to
have a submenu.
The Reference to submenu.

subMenu : Reference to Menu
DisableSubMenu() / EnableSubMenu() Disable or Enable submenu of this menu (if available).
SetAllowSubMenu(bool)
SetSubMenuRef(Reference to Menu)
SetText(string)
SetIcon(Sprite)

Set whether to allow this button to have a submenu.
Set the reference to submenu (if allowed).
Set button text.
Set button Icon.

cal menu is a tree. A menu tree has only one root menu (isRootM enu == f alse)
which cannot be a submenu of a button. A button is allowed to invoke a submenu
(allowSubM enu == true) or call a custom function (allowSubM enu == f alse).

3.3 Creator and Modiﬁer

Creator and Modiﬁer are key tools to automate the creation and modiﬁcation of VR
menus. With these two tools, most work can be achieved without modifying its project
source code. In short, the functions of these two tools are instantiating and modifying
the classes mentioned in 3.2. In order to achieve a better user experience, we directly
carried out the secondary development of the Unity Editor. This section mainly focuses
on the principle of tools, and the speciﬁc usage process is shown in Section 4.

The Creator always monitors the menu information entered by users and adjusts
the buttons setting list instantly according to ButtonN um. After the user has set
all the menu information and each button information, Creator will automatically
instantiate the menu and buttons according to the menu type. The created menu will
be automatically placed in the Unity Scene. The speciﬁc working cycle of Creator is
shown in Algorithm 1.

The Modiﬁer will automatically switch the working state according to the type of
active object (currSelection) selected by the user. If the type of currSelection is a
button, the Modiﬁer panel will automatically become a button modiﬁer. Conversely,
if the type of currSelection is a menu, it will become a menu modiﬁer. Regardless of
whether it is a menu or a button, the Modiﬁer modiﬁes the corresponding instance at
runtime based on the information entered by the user. The speciﬁc working cycle of
Modiﬁer is shown in Algorithm 2.

8

Algorithm 1: Creator Loop

System Initialization;
Get menu basic information from user input;
Set M enuN ame, M enuT ype, IsRootM enu, M enuT itle, ButtonN um;
Initiate M axButtonN um according to M enuT ype;
if ButtonN um > M axButtonN um then
ButtonN um ← M axButtonN um;
Alert: the number of buttons exceeds the maximum;

end
// Instantiate Menu
Calculate the menu layout based on ButtonN um;
Instantiate current menu;
// Instantiate buttons
while ButtonN um > 0 do

ButtonN um ← ButtonN um − 1;
Get current button information from user input;
Set ButtonT ype, ButtonN ame, ButtonIcon;
if ButtonT ype = SubM enus then

Get reference to submenu from user input;
Set SubM enuRef ;

end
Instantiate current button;
Set parent reference of current button to current menu;

end

9

Algorithm 2: Modiﬁer Loop

System Initialization;
// get Unity Editor Selection.activeGameObject
Get currSelection from Unity Editor;
// Modify button
if The type of currSelection is Button then

if Change button type then

if ButtonT ype = SubM enus then

Get reference to submenu from user input;
Set SubM enuRef ;

else

Release SubM enuRef ;

end

end
if Change button text then

Get button text from user input;
Set ButtonT ext;

end
if Change button Icon then

Get button icon reference from user input;
Set ButtonIcon;

end
if Remove this button then

Destroy this button object;
Update the menu layout;

end

end
// Modify menu
if The type of currSelection is Button then

if Change menu title then

Get menu title text from user input;
Set M enuT itle;

end
if Add a new Button then

if ButtonN um < M axButtonN um then
ButtonN um ← ButtonN um + 1;
Get new button information from user input;
Set ButtonT ype, ButtonN ame, ButtonIcon, ButtonT ext;
Instantiate new button;
Set parent reference of current button to current menu;

else

Alert: the number of buttons exceeds the maximum;

end

end

end

10

4 Application examples

In this section, the process of automatically generating VR menus and quickly modi-
fying menus and buttons is introduced. In addition, four built-in menu examples are
shown.

4.1 User Pipeline

Figure 1 shows the overview interface of VRMenuDesigner. The detailed installation
process is in the source code README.md document. After the installation is com-
plete, the MenuDesigner menu will appear on the top bar of the Unity Editor. Drag
its Creator and Modiﬁer panels to any place, such as the red box in Figure 1.

4.1.1 Create Menus

We will create a list menu with four buttons to illustrate the creation process. Figure 4
shows the interface of the Creator panel. First, set the basic information of the menu
in the upper part of the panel. The basic information of the menu includes Menu
Name, Menu Type (Default List Menu, Pie Menu, Ring Menu, etc.), whether it is a
root menu, Menu Title, and Number of Buttons. If a menu is Root Menu, it is not
allowed to be a submenu.

Figure 4: Creator Panel

The buttons setting list, shown in the red box in Figure 4, will automatically
appear in the lower part of the Creator panel after setting the number of buttons.
User can set name, type (SubMenus or Functions), and icon for each button one

11

If this type
by one. Buttons of the SubMenus type are used to trigger submenus.
is selected, the submenu reference option will appear automatically. Buttons of the
Functions are used to trigger custom functions. Finally, click the button at the bottom
and a menu will be automatically created. Simultaneously, the layout of the menu will
be automatically adjusted.

4.1.2 Modify Menus or Buttons

Unity provides Selection.activeGameObject to detect the object which currently se-
lected by the user in Unity Editor Hierarchy or Scene. The state of the Modiﬁer panel
is determined by the type of active object currently selected by the user. If the active
object type selected by the user is a button, the Modiﬁer panel automatically becomes
a button modiﬁer (shown in ﬁgure 5). Correspondingly, if the active object selected by
the user is a menu, the Modiﬁer panel automatically becomes a menu modiﬁer(shown
in ﬁgure 6). Besides, if the user selected active object does not belong to these two
types, the Modiﬁer panel will be automatically disabled.

• Modify a button. As shown in Figure 5, users can modify the button type,
button text, button icon, and even delete the current button directly. The
speciﬁc operation process is similar to the process of creating a button. If the
current button is deleted, the menu it belongs to before will automatically adjust
the layout.

Figure 5: Modify Buttons

• Modify a menu. As shown in Figure 6, users can modify the menu title or
add a new button. Every time a new button is added, the current menu will
automatically adjust the layout to accommodate more buttons.

4.2 Build-in Demos

We have designed four built-in menus for VRMenuDesigner: List Menu, Matrix Menu,
Pie (Radial) Menu, and Ring Menu. The properties of the four menus, including depth
of hierarchy, position, and trigger method, are shown in Table 6. The classes of these
menus and their corresponding buttons inherit MenuInterface and ButtonInterface,
respectively. They are built into the Resources of VRMenuDesigner as prefabs.

12

Figure 6: Modify Menus

Table 6: Characteristics of the built-in menus

Type

Depth of hierarchy Menu Position

Trigger method

List Menu
Matrix Menu
Pie (Radial) Menu
Ring Menu

Arbitrary
Arbitrary
1
1

Fixed or Head-referenced Ray-casting
Fixed or Head-referenced Ray-casting
Hand-referenced
Head-referenced

Touchpad
Ray-casting

The ﬁrst build-in menu is the most common List Menu, which is designed as a
vertical button layout. The menu title is at the top of the menu. Each button has
an icon on the left and text in the middle. Each button can be deﬁned to trigger a
submenu or trigger a custom function. For example, ’Button0’ of ’Menu0’ in Figure 7
has triggered a submenu ’Menu1’.

Figure 7: List Menu

The Matrix Menu can be regarded as a two-dimensional generalization of the List
Menu. We designed the Matrix menu to be a 3 × 3 grid similar to Sudoku shown
in Figure 8. The Matrix Menu is not signiﬁcantly diﬀerent from the List Menu in
principle, but the two-dimensional grid arrangement improves the selection eﬃciency.
For any target button in matrix menus, the cursor moves shorter than in list menus.

13

That is, a smaller D in Equation 1 results in a smaller Movement Time M T .

Figure 8: Matrix Menu

Unlike other menus triggered by ray-casting, the Pie (Radial) Menu is triggered by
the touchpad on the controller. For higher accuracy and selection eﬃciency, we only
designed four buttons for Pie (Radial) Menu. Users can set frequently used functions
for the four buttons. For example, use the pie menu button to invoke or dismiss other
menus.

Figure 9: Pie (Radial) Menu

Inspired by the JDCAD system [16], we designed a novel Ring Menu shown in
Figure 10. Intuitively, the signiﬁcant change from list menu to ring menu is that the
layout is replaced by a ring and the buttons are replaced by 3D widgets. The ring
menu is more intuitive than the list menu in the 3D environment. In our design, the
user is in the center of the ring menu, and the buttons surround the user. Therefore,
the distance between each button and the user is equal.

The Fitts’ law is extended to apply to the VR environment with ray-casting. We
extend the deﬁnition of W in Equation 1. In the traditional desktop WIMP environ-
ment with the mouse, W refers to the width of the target area (for example, the width

14

Figure 10: Ring Menu

of the button in a one-dimensional list). But the ray-casting in the VR environment is
diﬀerent from the mouse in the desktop environment. In general, users turn the input
device (controller) to make ray-casting reach the target area. Therefore, it is incorrect
to regard the width of the target area as W . We use the angle of ray-casting rotation
as W . On the premise that the distance between the menu and the user and the size
of the button are the same, the change of W in the ring menu and the list menu is
shown in Figure 11. Intuitively, the W in the ring menu is a constant. But for ring
menu, the closer the button is to menu side, the smaller the W will be. According to
Equation 1, as W becomes smaller, Movement Time M T will become larger. That is,
the target button becomes more and more diﬃcult to select.

Figure 11: Compare the width of the target (W ) of the ring menu and the list
menu. The ﬁgure on the left is the use of ray-casting to operate the ring menu
and the W of any target button is the same. But in the list menu on the right,
as the button gets farther and farther, W is getting smaller and smaller.

Diﬀerent types of menus can be used together. Figure 12 shows a mixed menu
system: use a Pie (Radial) Menu to control a Ring Menu. The Pie (Radial) Menu

15

can change the state of the Ring Menu, such as invoking or dismissing the Ring Menu,
switch whether the Ring Menu rotates with HMDs, and directly rotate the Ring Menu.

Figure 12: Hybrid Menu System: a Ring Menu with a Pie (Radial) Menu

5 Conclusion

In this paper, a new open-source toolkit VRMenuDesigner is presented. This work
aims to quickly generate and modify VR menus to realize the ideas of VR researchers.
The whole system is based on object-oriented thinking and modular design. Users
can modify and expand the system according to their requirements. We reviewed the
history of VR menus and proposed a concise taxonomy to summarize the work of
researchers in this ﬁeld. In particular, we discussed the usability of VR menus based
on Fitts’ law. We have designed several built-in menus as best practices for users.

This work can improve the eﬃciency of VR researchers. Because of the modular
design and the abstraction of the menu, this toolbox has great ﬂexibility and extensi-
bility. We hope this work can help users get rid of the tedious development process.
The current system is only suitable for VR environments on speciﬁc platforms.
In
future work, we want to improve the universality of the system.

Acknowledgment

This work was supported in part by the National Key Research and Development
Projects of China under Grant 2017YFC0804406, and in part by the National Natural
Science Foundation of China under Grant 51904173.

16

References

[1] Jacek Jankowski and Martin Hachet. Advances in interaction with 3d environ-
ments. In Computer Graphics Forum, volume 34, pages 152–190. Wiley Online
Library, 2015.

[2] A Santos, Telmo Zarraonandia, Paloma D´ıaz, and Ignacio Aedo. A comparative
study of menus in virtual reality environments. In Proceedings of the 2017 ACM
International Conference on Interactive Surfaces and Spaces, pages 294–299, 2017.

[3] Joseph J LaViola Jr, Ernst Kruijﬀ, Ryan P McMahan, Doug Bowman, and Ivan P
Poupyrev. 3D user interfaces: theory and practice. Addison-Wesley Professional,
2017.

[4] Jacek Jankowski and Martin Hachet. A survey of interaction techniques for in-

teractive 3d environments. 2013.

[5] Patrick Harms. Automated usability evaluation of virtual reality applications.
ACM Transactions on Computer-Human Interaction (TOCHI), 26(3):1–36, 2019.

[6] Christoph Anthes, Rub´en Jes´us Garc´ıa-Hern´andez, Markus Wiedemann, and Di-
eter Kranzlm¨uller. State of the art of virtual reality technology. In 2016 IEEE
Aerospace Conference, pages 1–19. IEEE, 2016.

[7] Raimund Dachselt and Anett H¨ubner. Three-dimensional menus: A survey and

taxonomy. Computers & Graphics, 31(1):53–65, 2007.

[8] Andries Van Dam, Andrew S Forsberg, David H Laidlaw, Joseph J LaViola, and
Rosemary M Simpson. Immersive vr for scientiﬁc visualization: A progress report.
IEEE Computer Graphics and Applications, 20(6):26–52, 2000.

[9] Ian G Angus and Henry A Sowizral. Embedding the 2d interaction metaphor in a
real 3d virtual environment. In Stereoscopic Displays and Virtual Reality Systems
II, volume 2409, pages 282–293. International Society for Optics and Photonics,
1995.

[10] Steven Feiner, Blair MacIntyre, Marcus Haupt, and Eliot Solomon. Windows on
the world: 2d windows for 3d augmented reality. In Proceedings of the 6th annual
ACM symposium on User interface software and technology, pages 145–155, 1993.

[11] Karin Coninx, Frank Van Reeth, and Eddy Flerackers. A hybrid 2d/3d user
interface for immersive object modeling. In Proceedings Computer Graphics In-
ternational, pages 47–55. IEEE, 1997.

[12] Mark Mine. Isaac: A virtual environment tool for the interactive construction of
virtual worlds. UNC Chapel Hill Computer Science Technical Report TR95-020,
1995.

[13] Ron van Teylingen, William Ribarsky, and Charles van der Mast. Virtual data
visualizer. IEEE Transactions on Visualization and Computer Graphics, 3(1):65–
74, 1997.

[14] Steve Bryson. The virtual windtunnel: A high-performance virtual reality appli-
cation. In Proceedings of IEEE Virtual Reality Annual International Symposium,
pages 20–26. IEEE, 1993.

17

[15] Michael F Deering. Holosketch: a virtual reality sketching/animation tool. ACM
Transactions on Computer-Human Interaction (TOCHI), 2(3):220–238, 1995.

[16] Jiandong Liang and Mark Green. Jdcad: A highly interactive 3d modeling system.

Computers & graphics, 18(4):499–506, 1994.

[17] Dominique Gerber and Dominique Bechmann. Design and evaluation of the ring

menu in virtual environments. Immersive projection technologies, 2004.

[18] Doug A Bowman and Larry F Hodges. An evaluation of techniques for grabbing
and manipulating remote objects in immersive virtual environments. In Proceed-
ings of the 1997 symposium on Interactive 3D graphics, pages 35–ﬀ, 1997.

[19] Ben Shneiderman, Catherine Plaisant, Maxine Cohen, Steven Jacobs, Niklas
Elmqvist, and Nicholas Diakopoulos. Designing the user interface: strategies
for eﬀective human-computer interaction. Pearson, 2016.

[20] Bernhard Preim, Andreas Raab, and Thomas Strothotte. Coherent zooming of
illustrations with 3d-graphics and text. In Graphics Interface, volume 97, pages
105–113, 1997.

[21] Seongwook Jeong, Eui S Jung, and Youngjae Im. Ergonomic evaluation of in-
teraction techniques and 3d menus for the practical design of 3d stereoscopic
displays. International Journal of Industrial Ergonomics, 53:205–218, 2016.

[22] Matthew M Davis, Joseph L Gabbard, Doug A Bowman, and Dennis Gracanin.
Depth-based 3d gesture multi-level radial menu for virtual object manipulation.
In 2016 IEEE Virtual Reality (VR), pages 169–170. IEEE, 2016.

[23] Wenmin Li, Xueyi Wan, Yanwei Shi, Nailang Yao, Ci Wang, and Zaifeng Gao.
Depth and breadth of pie menus for mid-air gesture interaction. International
Journal of Human–Computer Interaction, pages 1–10, 2020.

[24] Shuo Wang, Marcin Poturalski, and David Vronay. Designing a generalized 3d
carousel view. In CHI’05 Extended Abstracts on Human Factors in Computing
Systems, pages 2017–2020, 2005.

[25] Mark Billinghurst, Sisinio Baldis, Lydia Matheson, and Mark Philips. 3d palette:
a virtual reality content creation tool. In Proceedings of the ACM symposium on
Virtual reality software and technology, pages 155–156, 1997.

[26] Andreas Butz, Markus Groß, and Antonio Kr¨uger. Tuister: a tangible ui for
In Proceedings of the 9th international conference on

hierarchical structures.
Intelligent user interfaces, pages 223–225, 2004.

[27] Namgyu Kim, Gerard Jounghyun Kim, Chan-Mo Park, Inseok Lee, and Sung H
Lim. Multimodal menu presentation and selection in immersive virtual environ-
ments. In vr, page 281, 2000.

[28] Irina Lediaeva and Joseph LaViola. Evaluation of body-referenced graphical

menus in virtual environments. 2020.

[29] Yanbin Wang, Yizhou Hu, and Yu Chen. An experimental investigation of menu
selection for immersive virtual environments: ﬁxed versus handheld menus. Vir-
tual Reality, pages 1–11, 2020.

18

[30] Yu-Min Fang and Chun Lin. The usability testing of vr interface for tourism

apps. Applied Sciences, 9(16):3215, 2019.

[31] Paul M Fitts. The information capacity of the human motor system in controlling
the amplitude of movement. Journal of experimental psychology, 47(6):381, 1954.

[32] Yeonjoo Cha and Rohae Myung. Extended ﬁtts’ law for 3d pointing tasks using 3d
target arrangements. International Journal of Industrial Ergonomics, 43(4):350–
355, 2013.

[33] Rudolph P Darken and Richard Durost. Mixed-dimension interaction in virtual
environments. In Proceedings of the ACM symposium on Virtual reality software
and technology, pages 38–45, 2005.

[34] Dominique Gerber and Dominique Bechmann. The spin menu: A menu system
for virtual environments. In IEEE Proceedings. VR 2005. Virtual Reality, 2005.,
pages 271–272. IEEE, 2005.

[35] Wayne Piekarski and Bruce H Thomas. Tinmith-metro: New outdoor techniques
for creating city models with an augmented reality wearable computer. In Pro-
ceedings Fifth International Symposium on Wearable Computers, pages 31–38.
IEEE, 2001.

[36] Nicholas G Lipari and Christoph W Borst. Handymenu: Integrating menu selec-
tion into a multifunction smartphone-based vr controller. In 2015 IEEE Sympo-
sium on 3D User Interfaces (3DUI), pages 129–132. IEEE, 2015.

[37] Martin Mundt and Tintu Mathew. Exploring pie menus for system control tasks
in virtual reality. In Proceedings of Mensch und Computer 2019, pages 509–513.
2019.

[38] Pedro Monteiro, Hugo Coelho, Guilherme Gon¸calves, Miguel Melo, and Maximino
Bessa. Comparison of radial and panel menus in virtual reality. IEEE Access,
7:116370–116379, 2019.

[39] Mark R Mine, Frederick P Brooks Jr, and Carlo H Sequin. Moving objects in
space: exploiting proprioception in virtual-environment interaction. In Proceed-
ings of the 24th annual conference on Computer graphics and interactive tech-
niques, pages 19–26, 1997.

19

