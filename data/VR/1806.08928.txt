Communications, Caching and Computing for
Mobile Virtual Reality: Modeling and Tradeoff

Yaping Sun, Zhiyong Chen, Meixia Tao and Hui Liu

1

8
1
0
2

n
u
J

3
2

]
T
I
.
s
c
[

1
v
8
2
9
8
0
.
6
0
8
1
:
v
i
X
r
a

Abstract—Virtual reality (VR) over wireless is emerging as
an important use case of 5G networks. Immersive VR expe-
rience requires the delivery of huge data at ultra-low latency,
thus demanding ultra-high transmission rate. This challenge
can be largely addressed by the recent network architecture
known as mobile edge computing (MEC), which enables caching
and computing capabilities at the edge of wireless networks.
This paper presents a novel MEC-based mobile VR delivery
framework that is able to cache parts of the ﬁeld of views
(FOVs) in advance and run certain post-processing procedures
at the mobile VR device. To optimize resource allocation at the
mobile VR device, we formulate a joint caching and computing
decision problem to minimize the average required transmission
rate while meeting a given latency constraint. When FOVs
are homogeneous, we obtain a closed-form expression for the
optimal joint policy which reveals interesting communications-
caching-computing tradeoffs. When FOVs are heterogeneous, we
obtain a local optima of the problem by transforming it into a
linearly constrained indeﬁnite quadratic problem then applying
concave convex procedure. Numerical results demonstrate great
promises of the proposed mobile VR delivery framework in
saving communication bandwidth while meeting low latency
requirement.

Index Terms—Virtual reality, mobile edge computing, wireless

caching, low latency, transmission rate.

I. INTRODUCTION

A. Motivation

Virtual reality (VR) over wireless, namely mobile VR
delivery, is emerging as an important use case of 5G and
beyond networks, due to its ability to generate an immersive
experience at the full ﬁdelity of human perception [1]–[3].
A recent market report forecasts that the data consumption
from mobile VR devices (smartphone-based or standalone)
will grow by over 650% in the next 4 years (2017-2021)
[4]. Immersive VR experience requires the delivery of massive
amount of data (on the order of Gigabyte) at ultra-low latency
(less than 20 ms), thus demanding ultra-high transmission rate
and leading to the wireless bandwidth bottleneck problem [3].
In order to tackle the challenge, the recent network architec-
ture concept known as mobile edge computing (MEC), which
enables caching and computing capabilities at the edge of
wireless networks, is envisioned as one of the key enablers for

The paper was presented in part at IEEE ICC 2018 [1].
Y. Sun and M. Tao are with the Department of Electronic Engineering,
Shanghai Jiao Tong University, Shanghai 200240, China (e-mail: yaping-
sun@sjtu.edu.cn; mxtao@sjtu.edu.cn).

Z. Chen and H. Liu are with the Cooperative Medianent Innovation
Center, Shanghai Jiao Tong University, Shanghai 200240, China, and
also with the Shanghai Key Laboratory of Digital Media Processing and
Transmissions, Shanghai 200240, China (e-mail: zhiyongchen@sjtu.edu.cn;
huiliu@sjtu.edu.cn).

Captured 
Videos

Stitching

Cloud Server

Spherical Video

Equirectangular 
Projection

VR device

2D Video

MEC server or 
VR device

VR device

Tracker

Viewpoint

Extraction

2D FOV

Projection

3D FOV

Rendering

Figure 1: A typical framework of 360

◦ VR video producing [6].

mobile VR delivery [5]. The main idea of the MEC network
is to cache strategic contents in advance and compute certain
post-processing procedures on demand at the mobile edge
network, thereby reducing trafﬁc load as well as response
time. Thus, in this paper, we aim to investigate the mobile VR
delivery using MEC network architecture and ﬁnd out how to
make the best use of the caching and computing capabilities
of the MEC network to minimize the bandwidth requirement
for mobile VR delivery while satisfying the stringent latency
constraint.

B. Our Contributions

To illustrate the problem at hand, we ﬁrst analyze a typical
360◦ VR video producing framework [6], as shown in Fig.
1: i) Stitching, which obtains a spherical video by stitching
the videos captured by a multi-camera array; ii) Equirect-
angular projection, which obtains 2-dimensional (2D) video
by unfolding the obtained spherical video; iii) Extraction,
which extracts the 2D video to obtain 2D ﬁeld of view (FOV)
of the viewpoint captured by the tracker at the mobile VR
device; iv) Projection, which projects 2D FOV into 3D FOV;
v) Rendering, which renders the obtained 3D FOV onto the
display of the mobile VR device.

We propose the following method to realize the above
mentioned framework within the MEC network illustrated in
Fig. 2, which consists of one MEC server (e.g., base station)
and one mobile VR device, both with certain caching and
computing capabilities. First, without doubt, the tracker and
rendering components must be computed at the mobile VR

 
 
 
 
 
 
device. Secondly, we assume that the ﬁrst three pre-processing
procedures including stitching, equirectangular projection and
extraction components are computed ofﬂine at the cloud server.
Considering that such three components require the entire
360◦ video as inputs, realizing them at
the cloud server
can release both MEC server and mobile VR device from
heavy computation process as well as alleviate the trafﬁc
burden within the wireless network. Then, 2D FOVs of all the
viewpoints extracted at the cloud server can be cached at the
MEC server in advance, thereby reducing the trafﬁc burdern
on the backhaul link and also the response latency. Moreover,
the projection component can be computed ofﬂine at the MEC
server, and thus 3D FOVs of all the viewpoints can also be
proactively cached at the MEC server.

the mobile VR device can reduce at

A key observation is that the projection component can be
ofﬂoaded from the MEC server to the mobile VR device due
to its low computational complexity [7] and the increasing
computing capability of the mobile VR device [5]. Speciﬁcally,
compared with downloading the requested 3D FOV from the
MEC server, named as MEC computing, downloading 2D
FOV from the MEC server and then computing the projection
at
least half of the
trafﬁc load on the wireless link. This is due to the fact
that in order to create a stereoscopic vision, the projection
component has to be computed twice (one for each eye) to
obtain two slightly differing images [7], and hence the data
size of 3D FOV is at least twice larger than that of the 2D
FOV. However, computing at the mobile VR device incurs
additional computation latency. Thus, the computing policy,
i.e., whether to compute the projection at the mobile VR device
or not, requires careful design. In addition, caching capability
of the mobile VR device can be utilized to store 2D FOVs or
3D FOVs of some viewpoints for future requests. Speciﬁcally,
compared with caching a 2D FOV, caching 3D FOV can help
reduce both latency and energy consumption, since the 3D
FOV request can be directly served and without the need
of transmission and computing. However, 3D FOV caching
consumes at least twice larger caching resource at the mobile
VR device than 2D FOV caching. Thus, the caching policy,
i.e., caching 2D FOVs or 3D FOVs at the mobile VR device,
also requires careful design.

Main contributions of this paper are summarized as follows.
• A novel MEC-based framework for mobile VR deliv-
ery: We propose a realization method for mobile VR
delivery, as mentioned above. This method allows the
pre-processing procedures computed at the cloud server
and post-processing procedure, i.e., projection compo-
nent, computed at the MEC server or the mobile VR
device, thereby signiﬁcantly reducing the transmission
data within the wireless network as well as required
latency.

• Optimal joint caching and computing policy: Based on
the proposed realization method, when FOVs are ho-
mogeneous, we formulate joint caching and computing
decision problem to minimize the average transmission
rate, under the latency, local cache size and average
energy consumption constraints. By analyzing the opti-
mal properties and solving several linear programming

2

problems, a closed-form expression for the optimal joint
policy is obtained and provides useful guidelines for
network designers on how to make the best use of caching
and computing capabilities of the mobile VR device.
• Communications-caching-computing tradeoff: Based on
the optimal
joint policy, we derive the minimum re-
quired transmission rate and theoretically illustrate the
communications-caching-computing (3C) tradeoff. Ana-
lytical results show that compared with MEC comput-
ing, the transmission rate gain under the optimal joint
policy comes from the following three aspects: local 3D
caching, local computing with local 2D caching and local
computing without local caching. We theoretically reveal
that such three gains can be exploited opportunistically in
different caching and computing capability regimes. For
example, when the computation frequency at the mobile
VR device is relatively small, there is no local computing
gain without local caching, and transmission rate gain
comes from local 3D caching and local computing with
local 2D caching. In addition, caching resource at the
mobile VR device is exploited more efﬁciently joint with
computing resource, and vice versa; when the computa-
tion frequency is large enough, the gain comes from local
3D caching and local computing with/without caching
coherently. The power efﬁciency of the mobile VR device
is also shown to play an important role in the transmission
rate via determining the local computing gain directly.
More details can be seen in Section IV.

• Heterogeneous scenario optimization: We extend the
joint caching and computing optimization problem to the
scenario where FOVs are heterogeneous. In particular,
we ﬁrst show the NP-hardness of the joint policy opti-
mization problem, and then obtain a local optima of the
problem via transforming it into an equivalent linearly
constrained indeﬁnite quadratic problem (IQP) and using
concave convex procedure (CCCP) [8]. Numerical results
demonstrate great promises of the proposed mobile VR
delivery framework in saving communication bandwidth
while meeting low latency requirement.

C. Related Works

Researchers in both academia and industry have made great
efforts in order to achieve mobile VR delivery. First of all,
at any given time, since each user only watches a portion
of the 360◦ VR video, the requested FOV is chosen to be
transmitted instead of the entire panoramic video, thereby
saving bandwidth signiﬁcantly. Then, by knowing each user’s
FOV, multi-view and tile-based video streaming have been
investigated in [9], [10]. To further improve the quality of
experience, motion-prediction-based transmission is also being
studied based on dataset collected from real users [11]–[14].
However, [7], [9]–[14] mainly focus on the VR video-level
design, and have not investigated the opportunities for mobile
VR delivery potentially obtained via efﬁciently using the MEC
network architecture.

The opportunities for mobile VR delivery that can be
potentially obtained via efﬁciently utilizing resources at MEC

Mobile VR device

MEC Server

Cloud Server

Figure 2: MEC-based VR delivery model.

network, i.e., 3C, have been studied in [5], [6], [17]–[23].
Speciﬁcally, [5], [17], [18] envision joint computing and
caching as the key enablers for mobile VR delivery and
illustrate the potential gain via simulation results. [6] provides
an explicit VR framework, based on which the insights on
how to deliver 360◦ video in mobile edge network are illus-
trated. However, [5], [6], [17], [18] do not establish explicit
theoretical formulation or propose any efﬁcient algorithms. On
the other hand, [19] proposes a collaborative cache allocation
and computation ofﬂoading policy, where the MEC servers
collaborate for executing computation tasks and data caching.
[20] extends the results in [19] to a big data MEC network.
[21] proposes hybrid control algorithms in smart base stations
along with devised communication, caching, and computing
techniques based on game theory. However, the joint caching
and computing designs developed in [19]–[21] do not exploit
speciﬁc nature of VR delivery and look deeper into the VR de-
livery framework, and thus the performances are limited. [22]
formulates an optimization framework for VR video delivery
in a cache-enabled cooperative multi-cell network and explores
the fundamental tradeoffs between caching, computing and
communication for VR/AR applications. [23] proposes joint
policy based on millimeter wave communication for interactive
VR game applications.

It is worthy to note that all the works in [19]–[23] try to uti-
lize the caching and computing resources at the MEC servers
to alleviate the computation burdens at the mobile devices.
However, as mentioned above, for the mobile VR delivery,
computing at the MEC server may incur more transmission
data since the computation results are generally larger than the
inputs. Thus, in this paper, we focus on utilizing the caching
and computing capabilities at the mobile VR device to alleviate
the communication burden on the wireless link and tackle
the wireless bandwidth bottleneck problem. [24] exploits the
caching and computing capabilities at the mobile VR device
to minimize the trafﬁc load over wireless link. However, [24]
does not capture the speciﬁc nature of VR delivery and designs
the optimal computation ofﬂoading policy based on the most
popular caching policy, and thus the performance is limited.
Therefore, the fundamental impacts of caching and computing
resources at the mobile devices on the bandwidth requirement
still have not been fully unleashed.

D. Outline

An outline of the remainder of the paper is as follows.
Section II describes the system model for the MEC-based
mobile VR delivery system under consideration. Section III
formulates the joint policy optimization problem for the ho-

3

Table I: Key Notations

Meaning

set of viewpoints, number of viewpoints, viewpoint index
data size of 2D FOV, computation load,
data size of 3D FOV, maximum tolerable service latency
cache size, average available energy, computation
frequency at the mobile VR device
computation frequency at the MEC server
the least required transmission rate when the projection
is computed at the MEC server
the least required transmission rate when the projection
is computed at the mobile device without caching
cI
i
at the mobile VR device and not otherwise.
cO
i
at the mobile VR device and not otherwise.
di = 1 means that projection is computed
at the mobile VR device and not otherwise.

= 1 means that the 3D FOV of viewpoint i is stored

= 1 means that the 2D FOV of viewpoint i is stored

Notation
N , N , i
DI , w, DO, τ

C, ¯E, fV
fS

RS

RV

i ∈ {0, 1}
cI

i ∈ {0, 1}
cO

di ∈ {0, 1}

mogeneous scenario. Section IV obtains the optimal policy and
3C tradeoffs. Section V formulates the optimization problem
for the heterogeneous scenario and obtains the local optima
via CCCP. Section VI concludes the paper.

II. SYSTEM MODEL

As illustrated in Fig. 2, we consider a novel MEC-based
mobile VR delivery system consisting of one MEC server
and one mobile VR device, both with certain caching and
computing capabilities. In this paper, we focus on the on-
demand 360◦ VR video streaming. As mentioned above,
instead of transmitting the whole 360◦ video, the MEC server
only delivers the requested FOV at each time. Key notations
in this paper are summarized in Table I.

A. VR Task Model

Denote with N , {1, ..., N } the viewpoint space [22].
The projection from 2D FOV to 3D FOV of each viewpoint
i ∈ N is characterized by a 3−tuple (DI , DO, w), where DI
and DO are the data sizes (in bit) of the 2D FOV and 3D
FOV, respectively, and w is the number of computation cycles
required to process one bit input (in cycle/bit). Denote with
α , DO
the ratio of the size of 3D FOV to that of 2D FOV.
DI
Typically, α ≥ 2 in order to create a stereoscopic vision [7].

B. Request Model

The request stream at the mobile VR device conforms to
the independent reference model (IRM) [22] based on the
following assumptions: i) the viewpoints that the mobile VR
device requests are ﬁxed to the set N ; ii) the probability of the
request for viewpoint i ∈ N at the mobile VR device at each
time, denoted as Pi, is constant and independent of all the
N
i=1 Pi = 1. We consider uniform
past requests, satisfying
distribution, i.e., Pi = 1
N for each i ∈ N .1 In addition, in order
to avoid dizziness and nausea, each request at the mobile VR
device must be satisﬁed within the deadline of τ (in second).

P

1The scenario with nonuniform data size and popularity distribution is

considered in Section V.

C. Caching and Computing Model

First, consider the cache placement at the mobile VR device.
We assume that the mobile VR device is equipped with a
cache size CDI (in bit), where C is an integer, and is able to
store both 2D and 3D FOVs of some viewpoints. Denote with
cI
i ∈ {0, 1} the caching decision for 2D FOV of viewpoint i,
where cI
i = 1 means that the 2D FOV of viewpoint i is cached
at the mobile VR device and cI
i = 0 otherwise. Denote with
cO
i ∈ {0, 1} the caching decision for 3D FOV of viewpoint
i, where cO
i = 1 means that the 3D FOV of viewpoint i is
cached at the mobile VR device and cO
i = 0 otherwise. Under
the cache size constraint of the mobile VR device, we have

N

DI cI

i + αDI cO

i ≤ CDI .

(1)

i=1
X

For the cache placement at the MEC server, we assume that
both 2D and 3D FOVs of all the viewpoints are cached at the
MEC server. This is reasonable due to the fact that the storage
size at the MEC server is much larger than that of the mobile
VR device.

Next, consider the computing decision for the projection
component at the mobile VR device. The mobile VR device
is assumed to run at a given CPU-cycle frequency, denoted as
fV (in cycle/s), and has an average energy constraint, denoted
as ¯E (in J). The energy consumed for computing one cycle
with frequency fV at the mobile VR device is kf 2
V , where
k is a constant related to the hardware architecture and can
indicate the power efﬁciency of CPU at the mobile VR device
[25]. Denote with di ∈ {0, 1} the computing decision for
viewpoint i, where di = 1 indicates that the projection from
2D FOV to 3D FOV is executed at the mobile VR device upon
viewpoint request and di = 0 otherwise. Under the average
energy consumption constraint of the mobile VR device, we
have

kf 2

V DI w
N

N

i=1
X

di ≤ ¯E.

(2)

kf 2

N ¯E
From (2), note that
V DI w corresponds to the maximum
number of projections that can be computed at the mobile
VR device, named as computing capability of the mobile VR
device, and is assumed to be an integer throughout this paper.
Last, denote with (cO, cI , d) the joint caching and comput-
ing decision at the mobile VR device, where cO , (cO
i )i∈N
denotes the caching decision vector for 3D FOVs of all the
viewpoints and cI , (cI
i )i∈N denotes the caching decision
vector for 2D FOVs of all
the viewpoints, satisfying the
cache size constraint in (1), and d , (di)i∈N denotes the
computing decision vector, satisfying the local average energy
consumption constraint in (2).

Table II: Transmission Rates vs. Local Caching and Computing Costs

4

= 1, cI
i

= 0, di = 0

Joint Decision
Local 3D caching
cO
i
Local computing with local 2D caching
cO
= 1, di = 1
i
Local computing without local caching
= 0, di = 1
= 0, cI
cO
i
i
MEC computing
= 0, cI
cO
i
i

= 0, di = 0

= 0, cI
i

Rate Caching Computing

0

0

RV
N

RS
N

αDI

DI

0

0

0

kDI wf
N
kDI wf
N

2
V

2
V

0

• Local 3D caching. If cO

i = 1, the 3D FOV of viewpoint
i can be obtained from the local cache and without the
need of the transmission and computing. In this way, the
required latency is negligible and the minimum required
transmission rate is Ri = 0.

• Local computing with local 2D caching. If cO

i = 0,
di = 1 and cI
i = 1, the mobile VR device obtains the
2D FOV of viewpoint i from the local cache and without
the need of transmission, and then projects it to 3D FOV
using its local CPU processor. Thus, the overall consumed
latency is DI w
(in second) and the minimum required
fV
transmission rate is Ri = 0. In this paper, we assume
that DI w
< τ for feasibility, i.e., computing the projection
fV
at the mobile VR device can be completed within the
deadline.

+ DI w
fV

• Local computing without local caching. If cO

i = 0,
di = 1 and cI
i = 0, the mobile VR device downloads the
2D FOV of viewpoint i from the MEC server and then
projects it to 3D FOV using its local CPU processor.
Thus, the overall consumed latency is DI
(in sec-
Ri
ond), where DI
corresponds to the 2D FOV transmission
Ri
latency over the wireless link and DI w
corresponds to
fV
the computation latency at the mobile VR device. Under
the latency constraint, the minimum required transmission
rate is Ri = RV , DI
.
τ − DI w
fV
• MEC computing. If cO
i = 0 and di = 0, the mobile
VR device downloads the 3D FOV of viewpoint i from
the MEC server. Then, the overall consumed latency can
be represented as DO
(in second). Under the latency
Ri
constraint, the minimum required transmission rate is
Ri = RS , DO
τ .
By combining all

the above cases, for any given joint
caching and computing decision (cO, cI , d),
the minimum
average required transmission rate to deliver the requested 3D
FOV under latency constraint, denoted as ¯R (in bit/s), is given
by

N

RV di(1 − cI

i ) + RS (1 − di)

1 − cO
i

.

(3)

¯R =

1
N

i=1
X

(cid:0)

D. Service Mechanism and Transmission Rate Requirement

Based on the joint caching and computing decision, i.e.,
(cO, cI , d), we can see that request for viewpoint i ∈ N can
be served via the following four routes, each of which yields
a unique minimum transmission rate requirement, denoted as
Ri (in bit/s).

Obviously, minimizing ¯R is equivalent to minimizing the
bandwidth for a given spectral efﬁciency.

(cid:1) (cid:0)

(cid:1)

Remark 1. As illustrated in Table II, for each viewpoint
i ∈ N , compared with local 3D caching, local computing
with local 2D caching achieves the same rate gain and saves at

least half of the cache size consumed by local 3D caching, but
incurs additional energy consumption; compared with local
computing with local 2D caching, local computing without
local caching saves cache cost, but incurs larger transmission
rate requirement; compared with local computing without
local caching, MEC computing saves local caching and com-
puting cost, but relationship between its incurred transmission
rate, i.e., RS, and that incurred by local computing without
local caching,
i.e., RV , depends on the local computing
capability. Thus, joint caching and computing design requires
careful thinking.

III. PROBLEM FORMULATION AND OPTIMAL PROPERTY
ANALYSIS

In this section, we formulate the joint caching and com-
puting optimization problem to minimize the average required
transmission rate and analyze the optimal properties, based on
which we obtain an equivalent problem.

A. Problem Formulation

Problem 1 (Joint Caching and Computing Optimization).

min
cO,cI ,d

1
N

s.t.

N

RV di(1 − cI

i ) + RS (1 − di)

1 − cO
i

i=1
X

(cid:0)

N

i + αcO
cI

i ≤ C,

(cid:1) (cid:0)

(cid:1)
(4)

i=1
X
N

di ≤

N ¯E
V DI w
i=1
X
i ∈ {0, 1}, di ∈ {0, 1}, i ∈ N ,

kf 2

,

(5)

i ∈ {0, 1}, cI
cO

where (4) and (5) correspond to the cache size constraint in (1)
and average energy consumption constraint in (2), respectively.
Denote with R∗ the optimal objective value of Problem 1
and (cO∗
, d∗) the optimal joint caching and computing
decision.

, cI ∗

B. Optimal Properties and Equivalent Formulation

N
i=1 cI

i and d ,

In this subsection, we analyze the optimal properties of the
joint caching and computing policy, based on which we obtain
N
an equivalent optimization. Denote with cO ,
i=1 cO
i ,
cI ,
the number of locally
cached 3D FOVs, that of locally cached 2D FOVs and that of
P
locally computed projections, respectively. From (4) and (5),
0, 1, · · · , C
, cI ∈
we have cO ∈
and
α
d ∈
, respectively. Considering that the
projection tuple (DI , DO, w, Pi, τ ) of each viewpoint i ∈ N
is the same, for any given cO, we can let

0, 1, · · · , N ¯E
(cid:8)
n

0, 1, · · · , C − αcO

N
i=1 di

V DI w

kf 2

P

P

o

(cid:8)

(cid:9)

(cid:9)

cO
i =

1 i = 1, · · · , cO,
0 otherwise,

(

(6)

s.t.

without loss of optimality.

We ﬁrst obtain the optimality property between local 2D

and 3D FOV caching.

5

Property 1. For any i ∈ N such that cO

i = 1, we have cI

i = 0.

This property indicates that if 3D FOV of viewpoint i is
already cached at the mobile VR device, there is no need to
cache the 2D FOV, since the request for viewpoint i can be
directly served from local cache.

Property 2. For any given cO, we have cI = C − αcO.

Property 2 can be obtained by observing that the equality
holds in the cache size constraint (4) for minimizing the re-
quired transmission rate. Based on Property 1 and Property 2,
when cO is given by (6), we can let

0
1
0

cI
i = 


i = 1, · · · , cO,
i = cO + 1, · · · , cO + cI ,
otherwise,

(7)

where cI = C − αcO.



We next analyze the optimality between local caching and

local computing as follows.

Property 3. For any viewpoint i ∈ N , we have cO
and cI

i ≤ di.

i + di ≤ 1

i + di > 1. Then, when cO

Property 3 can be obtained by contradiction. First, suppose
that cO
i = 1, we have di = 1.
i = 1, by setting di from 1 into 0, ¯R does
However, when cO
not change and computing cost is saved. Thus, cO
i + di > 1
is not optimal. Secondly, suppose that cI
i > di. Then, when
i = 1. However, when di = 0, by setting cI
di = 0, we have cI
i
from 1 into 0, based on (3), ¯R does not change and caching
cost is saved. Thus, cI

i > di is not optimal.
Property 3 indicates that if 3D FOV of viewpoint i is already
cached at the mobile VR device, there is no gain from local
computing, since the request for viewpoint i can be directly
served from the local cache. Similarly, if 2D FOV is already
cached at the mobile VR device, it would be a waste of
caching resource if the locally cached 2D FOV is not utilized
to compute the projection component at the mobile VR device.
Based on Property 3, when cO and cI are given by (6) and

(7), for any given d, we can let

0 i = 1, · · · , cO,
1 i = cO + 1, · · · , cO + d,
0 otherwise.

di = 


(8)

Finally, for ease of structural property analysis, by rewriting
cO, cI and d as (6), (7) and (8), Problem 1 is equivalent to
Problem 2.



Problem 2 (Equivalent Joint Policy Optimization).

min
cO,cI ,d

RS −

RS
N

cO −

RS
N

min

cI , d

−

RS − RV
(cid:8)
(cid:9)
N

d − min

cI , d

cI ∈ {0, 1, · · · , C} ,
(cid:0)
C − cI
α

cO =

,

d ∈

0, 1, · · · ,

(cid:26)

N ¯E
V DI w

kf 2

(cid:8)

(9)
(cid:9)(cid:1)

(10)

(11)

.

(cid:27)

cO∗

, cI ∗

, d∗

.

(cid:0)

, d∗

term,

(cid:1)
cO∗

N min

i.e., RS

Denote with
the optimal solution to Problem 2.
Based on (6), (7) and (8), we can obtain the corresponding
(cid:0)
optimal joint policy, i.e.,

, cI ∗
From the objective function of Problem 2, we note that
(cid:1)
i.e., RS, corresponds to the average trans-
the ﬁrst
mission rate required via MEC computing and without local
caching or local computing. The second term, i.e., RS
N cO,
corresponds to the local 3D caching gain, which increases
with the number of locally cached 3D FOVs, i.e., cO. The
cI , d
, corresponds to the local
third term,
computing gain with local 2D caching, which increases with
(cid:8)
the minimum of the number of locally cached 2D FOVs,
i.e., cI , and that of locally computed projections,
i.e., d.
The last term, i.e., RS −RV
, corresponds
to the local computing gain without local caching, which
(cid:0)
depends on the difference between RS and RV . Note that
if fV < F , DOw
(α−1)τ , RS < RV and the local computing gain
without local caching is negative. Thus, we name fV < F as
local computing limited region. Otherwise, the local computing
gain without local caching is positive and we name fV ≥ F as
MEC computing limited region. In summary, the total number
of viewpoint requests that can be served locally is cO + d. For
the interest of joint caching and computing design, we assume
that C

d − min

cI , d

(cid:9)(cid:1)

(cid:9)

(cid:8)

N

α + N ¯E
kf 2

V DI w ≤ N .

IV. OPTIMAL POLICY AND TRADEOFF ANALYSIS

In this section, we obtain the optimal joint caching and com-
puting policy and the minimum transmission rate, yielding the
fundamental relationship between communications, caching
and computing, deﬁned as 3C tradeoff, in the local computing
limited region, i.e., fV < F , and MEC computing limited
region, i.e., fV ≥ F , respectively.

A. Local Computing Limited Region

Theorem 1 (Optimal
fV < F ). The optimal joint policy

joint policy and 3C tradeoff when
, cI ∗

is given as

cO∗

, d∗

cO∗

=

C − cI ∗
(cid:0)
α

,

(cid:1)

cI ∗

= min

C,

(cid:26)

d∗ = min

C,

(cid:26)

kf 2

N ¯E
V DI w
N ¯E
V DI w

kf 2

,

(cid:27)

,

(cid:27)

and the minimum transmission rate R∗ is given as
N ¯E
V DI w

R∗ = RS −

RS
N

C
α

kf 2

min

1 −

1
α

C,

+

(cid:18)

(cid:18)

(cid:19)

(cid:26)

(12)

(13)

(14)

.

(cid:27)(cid:19)

(15)

Proof. Proof can be seen in Appendix A.

Remark 2 (Tradeoff analysis when fV < F ). When fV < F ,
RS < RV and from the objective function of Problem 2,
we can see that
the performance gain comes from local
3D caching and local computing with local 2D caching,
i.e.,
but
RS −RV
, is negative. Speciﬁcally, from the
N

the local computing gain without

local caching,

d−min

cI , d

(cid:0)

(cid:8)

(cid:9)(cid:1)

6

109
3

2

1

0
0

0.2

0.4

0.6

0.8

0.6

0.8

1

1

0

0.2

0.4

Figure 3: 3C tradeoff under latency constraint when fV < F , where
any (R∗, C
¯E
V DI w ) point in this 3D ﬁgure achieves τ = 20 ms.
N ,
DI = 25 M bits, w = 10 cycles/bit, DO = 50 M bits, N = 6 × 104,
k = 10

−27, fV = 0.7 ∗ F .

kf 2

the optimal number of
optimal computing policy in (14),
locally computed projections d∗ is jointly limited by the local
caching and computing capabilities, since local computing
without local 2D caching cannot bring rate gain. From the
optimal caching policy in (12) and (13), we can see that local
computing with local 2D caching is chosen ﬁrst and then
local 3D caching is chosen if there still remains underutilized
storage size, which indicates that caching resource is exploited
more efﬁciently joint with computing resource, and vice versa.
This is because the caching cost for local 2D caching of each
FOV, i.e., DI , is smaller than that for local 3D caching of
each FOV, i.e., DO = αDI .

As illustrated in Fig. 3, we can see that R∗ ﬁrst decreases
with the local computing capability and then remains un-
changed when the local computing capability is larger than
local caching capability. Thus, the caching capability facilitates
the utilization of the local computing capability when fV < F .
Based on Theorem 1, we analyze the impacts of cache
size C and local computation frequency fV on the average
transmission rate R∗ by plotting numerical results.

Fig. 4 (a) illustrates the impact of the cache size C on the
optimal rate R∗ when fV < F . We can see that the decreasing
rate of R∗ w.r.t. C depends on the relationship between the
N ¯E
caching C and computing
V DI w capabilities of the mobile
kf 2
VR device. When C ≤ N ¯E
V DI w , R∗ decreases with C at the
rate of RS
N since the caching gain comes from local computing
with local 2D caching. Otherwise, R∗ decreases with C at
the rate of RS
αN since the caching gain comes from local 3D
caching.

kf 2

Fig. 4 (b) illustrates the impact of the computation frequency
fV on the optimal rate R∗ when fV < F . We can see that
R∗ increases with fV and k. This is because increasing fV or
k decreases the number of projections that can be computed
at the mobile VR device. Since increasing k corresponds to

2.2

2.1

2

1.9

1.8

1.7

7

109

2.6

2.4

2.2

2

1.8

1.6

1.4

1.2

1

0.8

0

MEC Computing
Local 3D Caching
Optimal Joint Policy

0.2

0.4

0.6

0.8

1

109

3

2.5

2

1.5

1

0.5

0
0

0.2

0.4

0.6

0.8

0

0.2

0.4

0.6

1

1

0.8

(a) Cache size when

¯E
V DI w

kf 2

= 30%.

109

Figure 5: 3C Tradeoff when F ≤ fV , where any (R∗, C
¯E
N ,
V DI w )
point in this 3D ﬁgure can achieve τ = 20 ms. fV = 1.2 ∗ F .
Other parameters are the same as those in Fig. 3.

kf 2

and the minimum transmission rate R∗ is given as

1.4

1.6

1.8

2

2.2

2.4
1010

(b) Computation frequency when C
N

= 30%.

Figure 4: Local cache size and computation frequency when fV < F .
Parameters are the same as those in Fig. 3.

decreasing the power efﬁciency, we learn that improving the
power efﬁciency of the mobile VR device can help facilitate
utilizing the local computing resource and thereby reduce the
transmission rate requirement. In addition, we observe that R∗
decreases with ¯E since the increase of ¯E increases the number
of projections that can be computed at the mobile VR device.

B. MEC Computing Limited Region

Theorem 2 (Optimal
F ≤ fV ). The optimal joint policy, i.e., (cO∗
as

joint policy and 3C tradeoff when
, d∗), is given

, cI ∗

cO∗

=

C − cI ∗
α

,

(16)

cI ∗

= min

C,

(cid:26)

N ¯E
V DI w

kf 2

(cid:27)

,

(17)

d∗ =

N ¯E
V DI w

kf 2

,

(18)

+

1 −

min

C,

R∗ = RS −

RS
N
RS − RV
N

−

C
α

(cid:18)
N ¯E
V DI w

kf 2

(cid:18)

(cid:18)

1
α

(cid:19)
− min

(cid:26)
C,

N ¯E
V DI w

kf 2
N ¯E
V DI w

kf 2

(cid:26)

(cid:27)(cid:19)

(cid:27)(cid:19)
. (19)

Proof. Proof can be seen in Appendix B.

i.e.,

Remark 3 (Tradeoff analysis when F ≤ fV ). When F ≤ fV ,
RS ≥ RV and we can see that the performance gain comes
from local 3D caching, local computing with local 2D caching
as well as local computing without local caching. Speciﬁcally,
from the optimal computing policy in (18), the optimal number
of locally computed projections d∗ is only limited by the
N ¯E
V DI w , since local computing
computing capability,
kf 2
without local 2D caching can also bring performance gain.
From the optimal caching policy in (16) and (17), the local
computing with local 2D caching is chosen ﬁrst and then
the 3D caching is chosen if there still remains underutilized
storage size. The reasons lie in the following two aspects. First,
the caching cost for local 2D caching of each FOV, i.e., DI ,
is smaller than that for local 3D caching of each FOV, i.e.,
DO = αDI . Secondly, when F ≤ fV , the gain from local
computing without caching, i.e., RS −RV , is not large enough
to compensate for the caching resource waste for 3D caching
compared with 2D caching.

As illustrated in Fig. 5, we can see that R∗ monotonically
decreases with the local computing capability and the decreas-
ing rate increases with the cache capability (43% when C
N = 0
and 100% when C
N = 1). It demonstrates that the caching
capability facilitates the utilization of the local computing ca-
pability. On the other hand, R∗ monotonically decreases with
the local caching capability and the decreasing rate increases
¯E
with the local computing capability (50% when
V DI w = 0
¯E
V DI w = 1). It also demonstrates that

and 100% when

kf 2

kf 2

109

Table III: Gains vs. Caching and Computing Costs in Heterogeneous
Scenario

8

MEC Computing
Local 3D Caching
Optimal Joint Policy

Route

Route 1

Route 2

Route 3

Route 4

= 0, di = 0

Joint Decision
Local 3D caching
cO
= 1, cI
i
i
Local computing
with local 2D caching
= 0, cI
cO
i
i
Local computing
without local caching
cO
= 0, cI
i
i
MEC computing
= 0, cI
cO
i
i

= 0, di = 1

= 0, di = 0

= 1, di = 1

Rate Gain

Caching Computing

PiRS
i

PiRS
i

αDI
i

0

DI
i

PikDI

i wif 2
V

Pi (cid:0)RS

i − RV

i (cid:1)

0

0

0

PikDI

i wif 2
V

0

0.2

0.4

0.6

0.8

1

(a) Cache size when

¯E
V DI w

kf 2

= 30%.

109

device. In addition, we can see that R∗ decreases with ¯E and
increases with k, which demonstrates again that improving
power efﬁciency of the mobile VR device can help facilitate
the local computing gain. From the ﬁrst-order derivative of R∗
w.r.t. fV , we obtain the following remark.

Remark 4. When C = 0 and F ≤ fV , f ∗
given by

V minimizing R∗ is

f ∗
V =

1 −

(cid:16)

DI
4RSτ

F +

(cid:17)

s

(cid:16)

1 −

DI
4RSτ

2

F 2 −

DI w
τ

F . (20)

(cid:17)

Equation (20) indicates that the optimal computation fre-
quency is independent of the energy ¯E and power efﬁciency k
of the mobile device, and depends on the projection parameters
(DI , DO, w, τ ) only.

3

4

5

6

7

8

9

10
1010

V. PROBLEM FORMULATION IN HETEROGENEOUS
SCENARIO

2.6

2.4

2.2

2

1.8

1.6

1.4

1.2

1

0.8

0

2.2

2

1.8

1.6

1.4

1.2

1

(b) Computation frequency when C
N

= 30%.

Figure 6: Local cache size and computation frequency when F ≤ fV .
Parameters are the same as those in Fig. 5.

the local computing capability facilitates the utilization of the
caching capability.

Based on Theorem 2, we analyze the impacts of cache size,
i.e., C, and local computation frequency, i.e., fV , on R∗ via
plotting numerical results.

Fig. 6 (a) illustrates the impact of C on the optimal rate R∗
when F ≤ fV . We can see that it exhibits similar structure to
that when fV < F . The decreasing rate of R∗ w.r.t. C depends
on the relationship between the caching C and computing
N when
αN otherwise. Note that when C = 0, there
N ¯E
V DI w , due to the

N ¯E
V DI w capabilities of the mobile VR device, i.e., RV
kf 2
C ≤ N ¯E
V DI w and RS
kf 2
still exists performance gain, i.e., RS −RV
local computing without local 2D caching.

kf 2

N

Fig. 6 (b) illustrates the impact of fV on the optimal rate
R∗ when F ≤ fV . We can see that R∗ ﬁrst decreases and then
increases with fV . This is mainly due to the fact that when fV
is relatively small, increasing fV alleviates the transmission
rate requirement by reducing the local computation latency,
while when fV is relatively large, increasing fV decreases the
number of projections that can be computed at the mobile VR

In this section, we consider a heterogeneous scenario, where
the parameters of each viewpoint i ∈ N , generalized as
(DI
i , wi, τi, Pi), are different from each other. Similar to
Problem 2, the optimization problem is formulated as below.

i , DO

Problem 3 (Joint Policy Optimization in Heterogeneous Sce-
nario).

Pi

N

i=1
X

min
cI ,cO,d

s.t.

RS

i (1 − di) + RV

i di

1 − cI
i

1 − cO
i

(cid:0)

(cid:1)(cid:1) (cid:0)

Pikf 2

V DI

i widi ≤ ¯E,

(cid:0)

N

i=1
X
N

DI

i cI

i + αDI

i cO

i ≤ C′,

(cid:1)
(21)

(22)

i=1
X
i ∈ {0, 1}, cI
cO

i ∈ {0, 1}, di ∈ {0, 1}, i ∈ N ,

where RS
i

, DO
i
τi

(in bit/s) and RV
i

,

DI
i
DI
i
fV

wi

τi−

(in bit/s)

denote the minimally required transmission rates to satisfy the
latency constraint when the projection of viewpoint i ∈ N is
computed at the MEC server and at the mobile VR device,
respectively. The objective function is obtained directly via
generalizing (3). C′ (in bit) denotes the cache size at the
mobile VR device.

For each viewpoint i ∈ N , we list the transmission rate
gain compared with the MEC computing, local caching and

computing costs in Table III of each service route, which is
obtained via directly generalizing Table II. In the following,
we will show that Problem 3 is NP-hard in strong sense and
transform Problem 3 into an equivalent IQP, which can be
solved via CCCP efﬁciently.

B. Equivalent IQP and CCCP

In the following, we transform Problem 4 into an equivalent
linearly constrained IQP and solve it using CCCP. First,
without loss of equivalence, (26) can be rewritten as

9

A. Computational Intractability

To show that Problem 3 is NP-hard in strong sense, we
transform Problem 3 into a multiple choice multiple dimen-
sional knapsack problem (MMKP) equivalently. For each
viewpoint i ∈ N and service route j ∈ {1, 2, 3, 4}, introduce
variable xi,j ∈ {0, 1} where xi,j = 1 indicates that the request
for viewpoint i is served via the j-th route and xi,j = 0
otherwise. Based on Table III,
can be obtained
from (xi,j )i∈N ,j∈{1,2,3,4}, and without loss of equivalence,
(cid:0)
Problem 3 can be rewritten as Problem 4.

, cI ∗

, d∗

cO∗

(cid:1)

Problem 4 (Equivalent Joint Policy Optimization).

max
(xi,j )i∈N ,j∈{1,2,3,4}

s.t.

N

4

vi,jxi,j

N

i=1
X
4

j=1
X
i,j xi,j ≤ C′,

w1

i=1
X
N

j=1
X
4

i=1
X
4

j=1
X

w2

i,j xi,j ≤ ¯E,

xi,j = 1, i ∈ N ,

j=1
X

xi,j ∈ {0, 1}, i ∈ N , j ∈ {1, 2, 3, 4},

where

PiRS
i
Pi(RS
0

i − RV
i )

vi,j ,




j = 1, 2,
j = 3,
j = 4,

(23)

(24)

(25)

(26)

(27)

xi,j ∈ [0, 1], i ∈ N , j ∈ {1, 2, 3, 4},

(30)

N

4

i=1
X

j=1
X

xi,j(1 − xi,j ) ≤ 0.

(31)

Then, by substituting (26) with (30) and (31), we transform

Problem 4 into Problem 5 equivalently.

Problem 5 (Equivalent Joint Policy Optimization).

min
(xi,j )i∈N ,j∈{1,2,3,4}

s.t.

N

4

−vi,jxi,j

i=1
X

j=1
X

(23), (24), (25), (30), (31).

Note that Problem 5 is a continuous optimization problem,
the computation complexity of which is much less compared
with that of solving Problem 4 directly. However, considering
4
j=1xi,j(1 − xi,j ) in (31) is a concave function, (31)
is not a convex constraint and thus obtaining an efﬁcient
P
algorithm for solving Problem 5 is still very challenging.

N
i=1

P

Next, to facilitate the solution, we transform Problem 5 into
Problem 6 by penalizing the concave constraint in (31) to the
objective function.

Problem 6 (Penalized Joint Policy Optimization).

N

4

N

4

min
(xi,j)i∈N ,j∈{1,2,3,4}

s.t.

i=1
X

j=1
X

(23), (24), (25), (30),

i=1
X

j=1
X

−vi,jxi,j − µ

xi,j (xi,j − 1)

denotes the proﬁt value for the choice of j for viewpoint i,



with the penalty parameter µ > 0. Denote with ¯R(µ) the
optimal objective value.

w1
i,j

,

αDI
i
DI
i
0




j = 1,
j = 2,
j = 3, 4,

(28)

denotes the caching cost for the choice of j for viewpoint i,
and



w2
i,j

,

i wif 2
V

PikDI
0

(

j = 2, 3,
j = 1, 4,

(29)

denotes the energy cost for the choice of j for viewpoint i.

We can see that Problem 4 corresponds to a 4-choice 2-
dimensional knapsack problem. Since MMKP is NP-hard in
strong sense [26], we conclude that Problem 3 is NP-hard in
strong sense.

Note that the objective function of Problem 6 is a difference
of a linear function and a quadratic convex function, and the
constraints of Problem 6 are linear. From [8], Problem 6 is an
IQP, a special case of general difference of convex problem,
and the local optima of Problem 6 can be obtained in ﬁnite
steps via DC algorithms (DCA). In addition, since the second
term of the objective function of Problem 6 is differentiable,
DCA exactly reduces to CCCP [29], as shown in Algorithm 1.
CCCP involves iteratively solving a sequence of convex prob-
lems, each of which is obtained via linearizing the second
term of the objective function of IQP. Speciﬁcally, at each
4
iteration t, we approximate
j=1 xi,j(xi,j − 1) with
j=1 x(t)
i,j −1)(xi,j −x(t)
N
i,j ).
i,j −1)+
P
i=1
Thus, as for our problem, CCCP involves iteratively solving
P
P
a sequence of linear problems, as shown in Algorithm 1.

j=1(2x(t)
4
P

i,j (x(t)

N
i=1

N
i=1

P

P

4

Algorithm 1 CCCP for Solving Problem 6

1: Initialization. Find an initial feasible point x(0) of Problem 6

and set t = 0.

2: Repeat
3: Set x(t+1) to be an optimal solution to the following convex

problem:

min
x
s.t.

G(x) − µ ˇH(x; x(t))

(23), (24), (25), (30),

N
i=1 P
P
i,j (x(t)
i,j −1)+

4

j=1 −vi,j xi,j and ˇH(x; x(t)) ,
i,j −1)(xi,j −x(t)
i,j ).

j=1(2x(t)

4

N
i=1 P

P

where G(x) ,
j=1 x(t)
4

N
i=1 P
4: Set t ← t + 1.
5: until

P

hG (cid:16)x(t−1)

(cid:17) − µ ˇH (cid:16)x(t−1); x(t−2)

(cid:17)i

−

hG (cid:16)x(t)

(cid:17) − µ ˇH (cid:16)x(t); x(t−1)

(cid:17)i ≤ δ.

Last, based on Theorem 1 in [27], we show the equivalence

between Problem 5 and Problem 6 in the following lemma.

maxx

µ0 ,

4
j=1 −vi,jx0

Lemma 1 (Exact Penalty). For all µ > µ0 where
i,j − ¯R(0)

N
i=1
4
j=1 xi,j(xi,j − 1) : (23), (24), (25), (30)
P
(32)
nP
with any (x0
i,j )i∈N ,j∈{1,2,3,4} satisfying (23), (24), (25) and
(30), Problem 6 and Problem 5 have the same optimal
solution.

N
i=1

P

P

o

Proof. Lemma 1 can be obtained directly from Theorem 1 in
[27].

Lemma 1 illustrates that Problem 6 is equivalent to Prob-
lem 5 if the penalty parameter µ is sufﬁciently large. Thus,
we can solve Problem 6 instead of Problem 5 by using
CCCP. However, it may not always be a feasible solution to
Problem 5. In order to obtain a global optima of Problem 5,
we obtain multiple local optimal solutions of Problem 6 via
performing CCCP multiple times, each with a unique initial
feasible point of Problem 6, and then choose the one which
achieves the minimum average value [28].

C. Numerical Results

In this section, we illustrate the performance of CCCP via
numerical results, as shown in Fig. 7. Speciﬁcally, CCCP
is obtained via performing Algorithm 1 with δ = 0.001
100 times, each starting with a random initial feasible point,
and then selecting the local optima with the lowest average
transmission rate value. We compare it with the following three
baselines:

• MEC computing: requests for all FOVs are computed at
i = 0, di = 0 for all

i = 0, cI

the MEC server, i.e., cO
i ∈ N ;

• Greedy 3D caching: 3D FOVs are cached at the mobile
VR device via greedy algorithm, i.e., sort N according to
PiRS
in descending order, denote with ⌊j⌋ the index i ∈
i
DO
i
N with the j-th maximal value of PiRS
i
DO
i
sc−1
j=1 DO
⌊j⌋ ≤ C and
index satisfying

, and sc the split
⌊j⌋ > C.

sc
j=1 DO

P

P

14

12

10

8

6

4

2

0

7

6

5

4

3

2

,

10

108

MEC Computing
Greedy 3D Caching
Greedy Caching and Computing
CCCP

0

0.2

0.4

0.6

0.8

1

(a) Cache size.

108

2.6

2.8

3

3.2

3.4

3.6

1010

(b) Computation frequency under CCCP.

Figure 7: Heterogeneous scenario analysis at fV = 50 G Hz, N =
100, DI
i ∈ [1, 25] M bits, α = 2, w = 10 cycle/bit, Pi ∝ 1
iγ with
γ = 0.8, C ′
i=1 DI
i=1 PiDI
i ,
µ = 105 unless otherwise stated.

i , ¯E = 0.25 ∗ kwf 2
V

= 0.3 ∗

P

P

N

N

Set cO
and cO

⌊j⌋ = 1, cI
⌊j⌋ = 0, cI

⌊j⌋ = 0, d⌊j⌋ = 0 for all j ∈ {1, · · · , sc}
⌊j⌋ = 0, d⌊j⌋ = 0, otherwise;

V

DI

• Greedy caching and computing: ﬁrst, local computing
with local 2D caching is determined via greedy al-
in
gorithm,
descending order, denote with ⌊j⌋ the index i ∈ N
with the j-th maximal value of
, and

i.e., sort N according to

PiRS
i
i +PikDI

i wif 2

⌊j⌋ > C or

index satisfying

DI
s1
c −1
j=1 DI

s1
c the split
s1
j=1 DI
c
s1
j=1 P⌊j⌋kDI
c

i wif 2
⌊j⌋ ≤ C and
V ≤ ¯E and
⌊j⌋ =
⌊j⌋ =
⌊j⌋ = 0, d⌊j⌋ = 0, otherwise; secondly, if there still
⌊j⌋ < C,
exists underutilized cache size, i.e.,
then 3D FOVs of the rest of viewpoints are cached at

⌊j⌋w⌊j⌋f 2
P
P
1, d⌊j⌋ = 1 for all j ∈ {1, · · · , s1
P
0, cI

s1
c−1
j=1 P⌊j⌋kDI
P
V > ¯E. Set cO

⌊j⌋ = 0, cI
c − 1} and cO

s1
c −1
j=1 DI

⌊j⌋w⌊j⌋f 2

PiRS
i
i +PikDI

V

P

s1
c−1
j=1 P⌊j⌋kDI

the mobile VR device via greedy algorithm. Otherwise,
V < ¯E, then local computing
if
without caching is decided via greedy algorithm accord-
ing to Pi(RS
PikDI

⌊j⌋w⌊j⌋f 2

i −RV
i )
i wif 2

P

.

V

Fig. 7 (a) and Fig. 7 (b) illustrate the impacts of the local
i.e., C′, and the local computation frequency,
cache size,
i.e., fV , on the optimal average transmission rate in the
heterogeneous scenario. We see that CCCP exhibits great
promises in saving communication bandwidth compared with
the baselines. For example, compared with greedy 3D caching
and greedy caching and computing, CCCP brings larger trans-
mission rate gain over MEC computing (e.g., 45%, 48 % vs.
63% at

= 20%).

C ′
i=1 DI
i

PN

VI. CONCLUSION

In this paper, we develop a novel MEC-based mobile
VR delivery framework by jointly utilizing the caching and
computing capacities of the mobile VR device. When FOVs
are homogeneous, a closed-form expression for the optimal
joint policy is derived, which reveals a fundamental tradeoff
between the three primary resouces,
i.e., communications,
caching and computing. The tradeoff results show that:

• When fV < F , R∗ increases with fV if

N ¯E
V DI w ≤ C
and stays unchanged with fV , otherwise; R∗ decreases
N ¯E
with C at the rate of RS
V DI w ≤ C and RS
N ,
αN when
kf 2
otherwise;

kf 2

• When F ≤ fV , R∗ ﬁrst decreases and then increases with
N ¯E
V DI w > C and increases with fV , otherwise; R∗
N ¯E
V DI w ≤ C

fV if
decreases with C at the rate of RS
and RV

αN when

kf 2

kf 2

N , otherwise;

In the heterogeneous scenario, we transform the NP-hard
problem into an equivalent IQP and solve it via CCCP,
which obtains a local optima and is shown to achieve good
performance in numerical results.

APPENDIX A: PROOF OF LEMMA 1
When fV < F , RS − RV < 0 and the objective function
of Problem 2 increases with d − min{cI , d}. Thus, we can
see that d − min{cI , d} = 0, i.e., d ≤ cI . In addition, based
on Property 2, by replacing cO with C−cI
α , Problem 2 can be
rewritten as

Problem 7 : min
cI ,d

s.t.

RS

1 −

C
αN

+

RS
αN

cI −

RS
N

d

(cid:18)

(cid:19)

cI ∈ {0, 1, · · · , C} ,

d ∈

0, 1, · · · , min

(cid:26)

cI ,

N ¯E
V DI w

kf 2

(cid:26)

(cid:27)(cid:27)

(33)

. (34)

In the following, we analyze the optimal solution to Problem 7
from the following two aspects.

• If cI ≤ N ¯E

kf 2

V DI w , (33) and (34) can be rewritten as

11

Since the objective function of Problem 7 decreases with
d, we have d = cI without
loss of optimality. By
replacing d with cI , and (33) with (35), Problem 7 can
be rewritten as

cI

cI

RS

1 −

C
αN

− (α − 1)

Problem 8 : min

RS
αN
N ¯E
V DI w
(cid:27)(cid:27)
(cid:26)
Since α > 1, we can see that
the objective
function of Problem 8 decreases with cI , and thus
cI ∗
. Accordingly, we have d∗ =

(cid:18)
0, 1, · · · , min

s.t. cI ∈

= min

kf 2

C,

(cid:26)

(cid:19)

C, N ¯E
kf 2

.

V DI w
and cO∗
o

min

C, N ¯E
n
kf 2
V DI w
• If cI ≥ N ¯E
V DI w , (33) and (34) can be rewritten as
n

= C−cI∗

kf 2

o

α

.

cI ∈

N ¯E
V DI w

kf 2

(cid:26)

d ∈

0, 1, · · · ,

(cid:26)

, · · · , C

,

(cid:27)

N ¯E
V DI w

kf 2

.

(cid:27)

(37)

(38)

N ¯E

V DI w . Accordingly, we have cO∗

Since the objective function of Problem 7 decreases with
d and increases with cI , we have d∗ = N ¯E
V DI w and cI ∗
=
= C−cI∗
.
V DI w , we
kf 2
C, N ¯E
kf 2

V DI w holds only when C ≥ N ¯E

kf 2
Since cI ≥ N ¯E
have cI ∗
and cO∗

kf 2
= min
= C−cI∗
n
.

o

n

o

kf 2
via cO∗

C, N ¯E
kf 2

, d∗ = min

V DI w

V DI w

α

α

Thus, (12), (13) and (14) hold. By substituting (12), (13) and
(14) into the objective function of Problem 2, (15) holds. The
proof ends.

APPENDIX B: PROOF OF LEMMA 2
When F ≤ fV , RV ≤ RS < αRV . We analyze the optimal

solution to Problem 2 from the following two aspects.

• If cI ≤ d, Problem 2 can be rewritten as
C
αN

αRV − RS
αN

min
cI ,d

1 −

RS

−

RS − RV
N
(cid:19)
cI ∈ {0, 1, · · · , min {d, C}} ,

cI −

d

(39)

(cid:18)

s.t.

d ∈

0, 1, · · · ,

(cid:26)

N ¯E
V DI w

kf 2

(cid:27)

.

(40)

Since RV ≤ RS < αRV , we have the objective
function decreases with cI and d. Thus, we have cI ∗
=
min {d∗, C}, d∗ = N ¯E

= C−cI∗

.

V DI w and cO∗

kf 2

α

• If cI ≥ d, Problem 2 can be rewritten as

min
cI ,d

s.t.

RS

1 −

C
αN
cI ∈ {d, · · · , C} ,

+

(cid:18)

(cid:19)

RS
αN

cI −

RS
N

d

d ∈

0, 1, · · · ,

(cid:26)

N ¯E
V DI w

kf 2

.

(cid:27)

(41)

(42)

cI ∈

0, 1, · · · , min

C,

(cid:26)

d ∈

(cid:26)
0, 1, · · · , cI

kf 2

N ¯E
V DI w
.

(cid:8)

(cid:9)

,

(35)

(cid:27)(cid:27)

(36)

Since the objective function increases with cI and
decreases with d, we have cI ∗
= C−cI∗
and cO∗

N ¯E
kf 2
V DI w
= d∗ holds

. In addition, since cI ∗

= d∗, d∗ =

α

12

[22] J. Chakareski, “VR/AR Immersive Communication: Caching, Edge
Computing, and Transmission Trade-Offs,” ACM SIGCOMM. Workshop
on VR/AR Network, Aug. 2017.

[23] M. S. Elbamby, C. Perfecto, M. Bennis and K. Doppler, “Edge Com-
puting Meets Millimeter-wave Enabled VR: Paving the Way to Cutting
the Cord,” IEEE WCNC, 2018.

[24] X. Yang, Z. Chen, K. Li, Y. Sun, N. Liu, W. Xie and Y. Zhao,
“Communication–Constrained Mobile Edge Computing Systems for
Wireless Virtual Reality: Scheduling and Tradeoff,” IEEE Access, vol. 6,
pp. 16665–16677, Mar. 2018.

[25] Y. Mao, C. You, J. Zhang, K. Huang, and K. R. Letaief, “A Survey
on Mobile Edge Computing: The Communication Perspective,” IEEE
Commun. Surveys & Tutorials, vol. 19, no. 4, pp. 2322–2358, 2017.
[26] M. Hiﬁ, M. Michrafy and A. Sbihi, “Heuristic algorithms for the
the
multiple-choice multidimensional knapsack problem,” Journal of
Operational Research Society, vol. 55, pp. 1323–1332, 2004.

[27] H. A. Le Thi, T. P. Dinh, and H. Van Ngai, “Exact penalty and error
bounds in dc programming,” Journal of Global Optimization, vol. 52, no.
3, pp. 509–535, 2012.

[28] H. A. Le Thi, T. P. Dinh, H. M. Le, and X. T. Vo, “DC approximation
approaches for sparse optimization,” european Journal of Operational
Research, vol. 244, no. 1, pp. 26–46, 2015.

[29] B. Sriperumbudur and G. Lanckriet, “On the convergence of concave-
convex procedure,” NIPS Workshop on Optimization for Machine Learn-
ing, 2009.

only when C ≥ d∗, cI ∗
cI ∗

= min {d∗, C}.

can also be rewritten as

Thus, (16), (17) and (18) hold. By substituting (16), (17) and
(18) into the objective function of Problem 2, (19) holds. The
proof ends.

REFERENCES

[1] Y. Sun, Z. Chen, M. Tao, and H. Liu, “Communication, Computing and
Caching for Mobile VR Delivery: Modeling and Trade-off,” IEEE ICC,
to appear, May 2018.

“Augmented

[2] R. Begole, [Online] available: https://www.forbes.com/sites/valleyvoices/
2016/02/09/why-the-internet-pipes-will-burst-if-virtual-reality-takes-off/.
and Virtual Reality:
available:

[3] ABI Research, Qualcomm,
First Wave

the
https://www.qualcomm.com/documents/augmented-and-virtual-reality-
ﬁrst-wave-5g-killer-apps, Feb. 2017.
“Virtual

[4] Juniper,
tent
[Online]
https://www.juniperresearch.com/researchstore/innovation-
disruption/virtual-reality/hardware-content-accessories, 2017.

5G Killer Apps,”

con-
available:

2017–2022,”

accessories

Hardware,

markets:

[Online]

reality

of

&

[5] E. Bastug, M. Bennis, M. Medard and M. Debbah, “Toward Intercon-
nected Virtual Reality: Opportunities, Challenges, and Enablers,” IEEE
Commun. Mag., vol. 55, no. 6, pp. 110–117, June. 2017.

[6] S. Mangiante, G. Klas, A. Navon, G. Zhuang, J. Ran and M. D. Silva,
“VR is on the Edge: How to Deliver 360◦ Videos in Mobile Networks,”
ACM SIGCOMM. Workshop on VR/AR Network, Aug. 2017.

[7] S. Reichelt, R. Hausselr, G. Futterer, and N. Leister, “Depth cues in
human visual perception and their realization in 3D displays,” in SPIE
Three-Dimensional Imaging, Visualization, and Display 2010, Orlando,
FL, April 2010.

[8] Le Thi Hoai An and Pham Dinh Tao, “Solving a class of linearly
constrained indeﬁnite quadratic problems by D.C. algorithms,” Journal
of Global Optimization, vol. 11, no. 3, pp. 253–285, 1997.

[9] V. R. Gaddam, M. Riegler, R. Eg, C. Griwodz, and P. Halvorsen, “Tiling
in interactive panoramic video: Approaches and Evaluation,” IEEE Trans.
on Multimedia, vol. 18, no. 9, pp. 1819–1831, 2016.

[10] T. El-Ganainy and M. Hefeeda. 2016. Streaming Virtual Reality Content.

arXiv preprint arXiv:1612.08350 (2016).

[11] F. Qian, L. Ji, R. Han, and V. Gopalakrishnan, “Optimizing 360 video
delivery over cellular networks,” in Proceedings of the 5th Workshop
on All Things Cellular: Operations, Applications and Challenges. ACM,
pp. 1–6, 2016.

[12] C. Fan, J. Lee, W. Lo, C. Huang, K. Chen, and C. Hsu, “Fixation
Prediction for 360 Video Streaming to Head-Mounted Displays,” in
Proceedings of ACM NOSSDAV, June 2017.

[13] M. Chen, W. Saad and C. Yin, “Resource Management for Wireless
Virtual Reality: Machine Learning Meets Multi-Attribute Utility,” IEEE
GLOBECOM, Singapore, Dec. 2017, pp. 1-7.

[14] M. Chen, W. Saad and C. Yin, “Virtual Reality over Wireless Networks:
Quality-of-Service Model and Learning-Based Resource Management,”
IEEE Trans. on Commun., to appear, 2018.

[15] H. Liu, Z. Chen, and L. Qian, “The three primary colors of mobile
systems,” IEEE Commun. Mag., vol. 54, no. 9, pp. 15–21, Sep. 2016.
[16] H. Liu, Z. Chen, X. Tian, X. Wang, and M. Tao, “On content-centric
wireless delivery networks,” IEEE Wireless Commun., vol. 21, no. 6,
pp. 118–125, Jan. 2014.

[17] Erol-Kantarci M., Sukhmani S., “Caching and Computing at the Edge
for Mobile Augmented Reality and Virtual Reality (AR/VR) in 5G,” Ad
Hoc Networks., vol. 223, pp. 169–177, 2018.

[18] M. S. Elbamby, C. Perfecto, M. Bennis and K. Doppler, “Towards Low-
Latency and Ultra-Reliable Virtual Reality,” in IEEE Network, vol. 32,
no. 2, pp. 78-84, 2018.

[19] A. Ndikumana, S. Ullah, T. LeAnh, N. H. Tran, and C. S. Hong,
“Collaborative Cache Allocation and Computation Ofﬂoading in Mobile
Edge Computing,” IEEE Asia-Paciﬁc Netw. Operation Manage. Symp.,
pp. 366–369, Sep. 2017.

[20] A. Ndikumana, N. H. Tran, T. M. Ho, Z. Han, W. Saad, D. Niyato
and C. S. Hong, “Joint Communication, Computation, Caching, and
Control
in Big Data Multi-access Edge Computing,” arXiv preprint
arXiv:1803.11512, 2018.

[21] S. Kim, “5G Network Communication, Caching, and Computing Al-
gorithms Based on the Two–Tier Game Model,” ETRI Journal, vol. 40,
no. 1, pp. 61–71, Feb. 2018.

