2
1
0
2

t
c
O
8

]

C
C
.
s
c
[

1
v
0
6
2
2
.
0
1
2
1
:
v
i
X
r
a

Extensions of the Minimum Cost
Homomorphism Problem

Rustem Takhanov1

Department of Computer and Information Science, Link¨oping University,
SE-581 83 Link¨oping, Sweden
takhanov@mail.ru

v∈V

P

Abstract. Assume D is a ﬁnite set and R is a ﬁnite set of functions
from D to the natural numbers. An instance of the minimum R-cost
homomorphism problem (M inHomR) is a set of variables V subject to
speciﬁed constraints together with a positive weight cvr for each combi-
nation of v ∈ V and r ∈ R. The aim is to ﬁnd a function f : V → D such
r∈R cvrr(f (v)) is minimized.
that f satisﬁes all constraints and
This problem uniﬁes well-known optimization problems such as the min-
P
imum cost homomorphism problem and the maximum solution prob-
lem, and this makes it a computationally interesting fragment of the
valued CSP framework for optimization problems. We parameterize
M inHomR (Γ ) by constraint languages, i.e. sets Γ of relations that are
allowed in constraints. A constraint language is called conservative if
every unary relation is a member of it; such constraint languages play
an important role in understanding the structure of constraint problems.
The dichotomy conjecture for M inHomR is the following statement: if Γ
is a constraint language, then M inHomR (Γ ) is either polynomial-time
solvable or NP-complete. For M inHom the dichotomy result has been
recently obtained [Takhanov, STACS, 2010] and the goal of this paper
is to expand this result to the case of M inHomR with conservative con-
straint language. For arbitrary R this problem is still open, but assuming
certain restrictions on R we prove a dichotomy. As a consequence of this
result we obtain a dichotomy for the conservative maximum solution
problem.

1

Introduction

Constraint satisfaction problems (CSP ) and valued constraint satisfaction prob-
lems (V CSP ) are natural ways of formalizing a large number of computa-
tional problems arising in combinatorial optimization, artiﬁcial intelligence, and
database theory. CSP has the following two equivalent formulations: (1) to ﬁnd
an assignment of values to a given set of variables, subject to constraints on
the values that can be assigned simultaneously to speciﬁed subsets of variables,
and (2) to ﬁnd a homomorphism between two ﬁnite relational structures A and
B. V CSP is a “soft” version of CSP where constraint relations are replaced
by functions from set of tuples to some totally ordered set with addition oper-
ation (for example, rational numbers). A solution is deﬁned as an assignment

 
 
 
 
 
 
to variables that maximize a functional which is equal to a sum of constraint
functions applied to corresponding variables. Applications of CSP s and V CSP s
arise in the propositional logic, database and graph theory, scheduling, biology
and many other areas. CSP and its subproblems has been intensively studied
by computer scientists and mathematicians since the 70s, and recently attention
has been paid to its modiﬁcations such as V CSP . Considerable attention has
been given to the case where the constraints are restricted to a given ﬁnite set
of relations Γ , called a constraint language [2, 5, 12, 20]. For example, when Γ
is a constraint language over the boolean set {0, 1} with four ternary predicates
x ∨ y ∨ z, x ∨ y ∨ z, x ∨ y ∨ z, x ∨ y ∨ z we obtain 3-SAT. For every constraint
language Γ , it has been conjectured that CSP (Γ ) is either in P or NP-complete
[5]. An analogous situation appears in V CSP where the constraint language is
deﬁned as a set of “soft” predicates.

We believe that problems like minimum cost homomorphism problem
(M inHom) has an intermediate position between CSP s and V CSP s which
makes their structure important for understanding the relationship between
“hard” and “soft” constraints in optimization. In the minimum cost homomor-
phism problem, we are given variables subject to constraints and, additionally,
costs on variable/value pairs. Now, the task is not just to ﬁnd any satisfying as-
signment to the variables, but one that minimizes the total cost. In the context
of V CSP this is equivalent to addition of “soft” constraints equal to character-
istic functions of one element sets. We will consider a weighted version of this
problem.

∞

Deﬁnition 1. Suppose we are given a ﬁnite domain set A, a ﬁnite constraint

language Γ ⊆

k

2A

and a ﬁnite set of functions R ⊆ {r : A → IN}. Denote by

Sk=1

M inHomR (Γ ) the following minimization task:
Instance: A triple (V, C, W ) where

– V is a set of variables;
– C is a set of constraints, where each constraint C ∈ C is a pair (s, ρ), such

that

• s = (v1, . . . , vm) is a tuple of variables of length m, called the constraint

scope;

• ρ is an element of Γ with arity m, called the constraint relation.

– Weights wvr ∈ IN, v ∈ V, r ∈ R.

Solution: A function f from V to A, such that, for each variable v ∈ V ,
f (v) ∈ A, and for each constraint (s, ρ) ∈ C, with s = (v1, . . . , vm), the tu-
ple (f (v1), . . . , f (vm)) belongs to ρ.
Measure:

wvrr (f (v)).

Pv∈V Pr∈R

Deﬁnition 2. For R∗ = {ei|i ∈ A}, M inHomR∗ (Γ ) is called minimum cost
homomorphism problem where ei : A → IN denotes a characteristic function of
{i} ⊆ A.

We will write M inHom instead of M inHomR∗ for short. M inHom has
applications in defence logistics [10] and machine learning [4]. Complete classi-
ﬁcation of constraint languages Γ for which M inHom (Γ ) is polynomial-time
solvable has recently been obtained in [21]. The question for which directed
graphs H the problem M inHom ({H}) is polynomial-time solvable was consid-
ered in [7–11]. Maximum Solution Problem (M axSol), which is deﬁned analo-
wvf (v)
gously to M inHom, but with A ⊆ IN and a functional of the form

to maximize, was investigated in a series of papers [14–16]. It is easy to see
s + 1 and R = {n − x}, then M inHomR (Γ ) = M axSol (Γ ).
that if n = max
s∈A

Pv∈V

In this paper, we will assume that a constraint language Γ contains all unary
predicates over a domain set A and approach the problem of characterizing the
complexity of M inHomR (Γ ) in its most general form by algebraic methods.
When R satisﬁes certain conditions, we obtain a dichotomy for M inHomR (Γ ),
i.e., if M inHomR (Γ ) is not polynomial-time solvable, then it is NP-hard. As a
consequence, we obtain a dichotomy for conservative M axSol.

In Section 2, we present some preliminaries together with results connecting
the complexity of M inHomR with conservative algebras. The main dichotomy
theorem is stated in Section 3 and its proof is divided into several parts which
can be found in Sections 4-6. Finally, in Section 7 we present directions for future
research.

2 Algebraic structure of tractable constraint languages

Recall that an optimization problem A is called NP-hard if some NP-complete
language can be recognized in polynomial time with the aid of an oracle for A.
We assume that P 6= N P .

Deﬁnition 3. Suppose we are given a ﬁnite set A and a constraint language

∞

Γ ⊆

k

2A

. The language Γ is said to be R-tractable if, for every ﬁnite subset

Sk=1

Γ ′ ⊆ Γ , the task M inHomR (Γ ′) is polynomial-time solvable, and Γ is called
R-NP-hard if there is a ﬁnite subset Γ ′ ⊆ Γ , such that the task M inHomR (Γ ′)
is NP-hard.

First, we will state some standard deﬁnitions from universal algebra.

Deﬁnition 4. Let ρ ⊆ Am and f : An → A. We say that the function (oper-
∈ ρ, 1 ≤ i ≤ n, we
ation) f preserves the predicate ρ if, for every
have that

1, . . . , xi
xi
m
∈ ρ.
(cid:0)

, . . . , f

(cid:1)

f
(cid:0)

1, . . . , xn
x1
1
(cid:0)

(cid:1)

m, . . . , xn
x1
m
(cid:0)

(cid:1)(cid:1)

For a constraint language Γ , let P ol (Γ ) denote the set of operations preserv-
ing all predicates in Γ . Throughout the paper, we let A denote a ﬁnite domain
and Γ a constraint language over A. We assume the domain A to be ﬁnite.

Deﬁnition 5. A constraint language Γ is called a relational clone if it contains
every predicate expressible by a ﬁrst-order formula involving only

a) predicates from Γ ∪
b) conjunction; and
c) existential quantiﬁcation.

=A
(cid:8)

;
(cid:9)

First-order formulas involving only conjunction and existential quantiﬁcation
are often called primitive positive (pp) formulas. For a given constraint language
Γ , the set of all predicates that can be described by pp-formulas over Γ is called
the closure of Γ and is denoted by hΓ i.

For a set of operations F on A, let Inv (F ) denote the set of predicates
preserved under the operations of F . Obviously, Inv (F ) is a relational clone.
The next result is well-known [1, 6].

Theorem 1. For a constraint
Inv (P ol (Γ )).

language Γ over a ﬁnite set A, hΓ i =

Theorem 1 tells us that the Galois closure of a constraint language Γ is
equal to the set of all predicates that can be obtained via pp-formulas from the
predicates in Γ . We will omit the proof of the following standard theorem.

Theorem 2. For any ﬁnite constraint language Γ , ﬁnite Γ ′ ⊆ hΓ i and ﬁnite
R ⊆ {r : A → IN} there is a polynomial time reduction from M inHomR (Γ ′) to
M inHomR (Γ ).

The previous theorem tells us that the complexity of M inHomR (Γ ) is ba-
sically determined by Inv (P ol (Γ )), i.e., by P ol (Γ ). That is why we will be
concerned with the classiﬁcation of sets of operations F for which Inv (F ) is a
tractable constraint language.

Deﬁnition 6. An algebra is an ordered pair A = (A, F ) such that A is a
nonempty set (called a universe) and F is a family of ﬁnitary operations on
A. An algebra with a ﬁnite universe is referred to as a ﬁnite algebra.

Deﬁnition 7. An algebra A = (A, F ) is called R-tractable if Inv(F ) is a R-
tractable constraint language and A is called R-NP-hard if Inv(F ) is an R-NP-
hard constraint language.

For B ⊆ A, deﬁne RB = {f |B|f ∈ R}, where f |B is a restriction of f on a
set B. We will use the term MinHom-tractable (NP-hard) instead of {ei|i ∈ A}-
tractable (NP-hard) and, in case A = {0, 1}, the term min-tractable (NP-hard)
instead of {x}-tractable (NP-hard).

We only need to consider a very special type of algebras, so called conservative

algebras.

Deﬁnition 8. An algebra A = (A, F ) is called conservative if for every opera-
tion f ∈ F we have that f (x1, . . . , xn) ∈ {x1, . . . , xn}.

Since we assume that Γ is a constraint language with all unary relations
over the domain set A, then A = (A, P ol (Γ )) is conservative. Besides conser-
vativeness of constraint languages we will make some additional restrictions on
function sets R.

Deﬁnition 9. Suppose we are given a ﬁnite set of functions R ⊆ {r : A → IN}.
Denote by G (R) = (A, E (R)) a directed graph with a set of vertices A and an
edge set E (R) = {(a, b)|∃r ∈ R r(a) > r(b)}. The U G (R) is the graph G (R)
with all edges considered as undirected. We will call G a preference graph and
U G an undirected preference graph.

In the sequel, we will assume that a graph U G is complete. It is easy to see
that U G ({ei|i ∈ A}), U G ({n − x}) are complete and our results can be applied
to M inHom and M axSol.

3 Boolean case and the necessary local conditions

The ﬁrst step to understand the structure of R-tractable algebras is to under-
stand the boolean case. Well-known structure of boolean clones [18] helps us to
prove the following theorem.

Theorem 3. A boolean clone H is MinHom-tractable if either {x ∧ y, x ∨ y} ⊆
H or {(x ∧ y) ∨ (y ∧ z) ∨ (x ∧ z)} ⊆ H, where x, x ∧ y, x ∨ y denote nega-
tion, conjunction and disjunction. Otherwise, H is MinHom-NP-hard. A
conservative boolean clone H is min-tractable if either {x ∧ y} ⊆ H or
{(x ∧ y) ∨ (y ∧ z) ∨ (x ∧ z)} ⊆ H. Otherwise, H is min-NP-hard.

In the proof of Theorem 3 we will need the following deﬁnition.

Deﬁnition 10. A constraint language Γ over {0, 1} is called a MinHom(min)-
maximal constraint language if it is conservative MinHom(min)-tractable and is
not contained in any other conservative MinHom(min)-tractable languages.

We identify all MinHom(min)-maximal constraint languages using Post‘s
classiﬁcation [18]. Via Theorems 1,2 we conclude that every MinHom(min)-
maximal constraint language corresponds to some conservative functional clone.
In the case A = {0, 1}, there is a countable number of conservative clones: we
list them below according to the table on page 76 [17].

Lemma 1. The relational clones Inv (M01) and Inv (S01) are MinHom-
maximal constraint languages. Every other constraint language given in the table
that is not contained in any of these two is MinHom-NP-hard. The relational
clones Inv (K01) and Inv (S01) are min-maximal constraint languages. Every
other constraint language given in the table that is not contained in any of these
two is min-NP-hard.

Proof. For every row, the closure of the predicates given is equal to the set of
all predicates preserved under the functions of the corresponding clone.

T01
M01
S01
SM
L01
U01
K01
D01
I m
1
M I m
1
Om
0
M Om

x = 0, x = 1
x = 0, x = 1, x1 ≤ x2
x = 0, x1 6= x2
x1 6= x2, x1 ≤ x2
x = 1, x1 ⊕ x2 ⊕ x3 = 0
x = 0, x = 1, x1 = x2 ∨ x1 = x3
x = 0, x = 1, x1 = x2x3
x = 0, x = 1, x1 = x2 ∨ x3
x = 1, x1x2 . . . xm = 0
x = 1, x1 ≤ x2, x1x2 . . . xm = 0
x = 0, x1 ∨ x2 ∨ . . . ∨ xm = 1
0 x = 0, x1 ≤ x2, x1 ∨ x2 ∨ . . . ∨ xm = 1

where x ⊕ y = x + y (mod 2).

The class Inv (T01) is MinHom(min)-tractable, since it contains only two
simple unary predicates {0} and {1}. As we will see later,
it cannot be
MinHom(min)-maximal since it is included in other MinHom(min)-tractable con-
straint languages.

2,

Let us prove that Inv (M01) and Inv (S01) are MinHom-tractable. By The-
orem
equiv-
it
alent to polynomial solvability of M inHom ({{0} , {1} , {(x1, x2) |x1 ≤ x2}})
and M inHom ({{0} , {(x1, x2) |x1 6= x2}}), because the classes Inv (M01) and
Inv (S01) are the closures of those sets. We will skip the proof since it can be
found in [13](in this paper boolean M inHom called Max AW Ones). It is easy
to see that MinHom-tractability implies min-tractability of those classes.

is

Let us show that all the classes in the table, except Inv (M01), Inv (S01)
and Inv (T01), are MinHom-NP-hard, and all the classes, except Inv (M01),
1 =
Inv (S01), Inv (T01), Inv (K01) and Inv
∞

1 ), where M I∞

, . . . , Inv (M I∞

M I 2
1
(cid:0)

(cid:1)

M I m

1 , are min-NP-hard. Since,

Sm=1

x1 ∨ x2 = ∃x3 [x1 6= x3] ∧ [x3 ≤ x2]
x1 ∨ x2 = ∃x3 [x3 = 1] ∧ [x3 = x1 ∨ x3 = x2]
x1 ∨ x2 = ∃x3 [x3 = 0] ∧ [x3 = x1x2]
x1 ∨ x2 = ∃x3 [x3 = 1] ∧ [x3 = x1 ∨ x2]
x1 ∨ x2 = ∃x3 . . . xm [x1x2 . . . xm = 0] ∧ [x2 = x3] ∧ . . . ∧ [xm−1 = xm]
x1 ∨ x2 = ∃x3 . . . xm [x1 ∨ x2 ∨ . . . ∨ xm = 1] ∧ [x2 = x3] ∧ . . . ∧ [xm−1 = xm]

we
{(x1, x2) |x1 ∨ x2} ∈ Inv (SM ), Inv (U01) , Inv (D01), Inv (Om
and {(x1, x2) |x1 ∨ x2} ∈ Inv (K01), Inv (I m

1 ), Inv (M I m

1 ).

see

that
0 ) , Inv (M Om
0 )

We ﬁrst prove that M inHom{x} ({{(x1, x2) |x1 ∨ x2}}) is NP-hard. Sup-
pose an instance of this problem consists of an undirected graph G = (V, E)
where each vertex is considered as a variable. For each pair of variables

(u, v) ∈ E, we require their assignments to satisfy u = 1 or v = 1. It is
easy to see that for any such assignment f , the set {x|f (x) = 0} is indepen-
dent in the graph G. Furthermore, for any independent set S in the graph G,
g(x) = [x /∈ S] is a satisfying assignment. If we deﬁne wi = 1 for i ∈ V , then
M inHom{x} is equivalent to ﬁnding a maximum independent set. This implies
that M inHom{x} ({{(x1, x2) |x1 ∨ x2}}) is NP-hard, since ﬁnding independent
sets of maximal size is an NP-hard problem.

Therefore, Inv (SM ), Inv (U01), Inv (D01), Inv (Om

0 ), Inv (M Om

0 ) are min-

NP-hard, and, consequently, MinHom-NP-hard.

1 ), Inv (M I m

Classes Inv (K01), Inv (I m

1 ) are MinHom-NP-hard also since
M inHom ({{(x1, x2) |x1 ∨ x2}}) and M inHom ({{(x1, x2) |x1 ∨ x2}}) are equiv-
alent. Let us show that these classes are min-tractable. It is easy to see that
Inv (K01) contains Inv (I m
1 ) and ∧ ∈ K01. Indeed, any con-
straint satisfaction problem with predicates from Inv (K01) can be solved by
local 1-consistency algorithm and a solution is an assignment of every vari-
able to a minimum of its allowed values. Obviously, the same algorithm solves
M inHom{x} (Inv (K01)).

1 ), Inv (M I m

It remains to prove min-NP-hardness of Inv (L01) which will also show
its MinHom-NP-hardness. First we will show that using an algorithm for
M inHom{x} ({(x1, x2, x3) |x1 ⊕ x2 ⊕ x3 = 1}) as an oracle, we can solve Max-
CUT in polynomial time. Since we have that x1⊕x2⊕x3 = 1 ⇔ ∃y, z x1⊕x2⊕y =
0&y ⊕ x3 ⊕ z = 0&z = 1, we will conclude that Inv (L01) is min-NP-hard.

Let G = (V, E) be a graph and introduce variables xij , yi, yj, i, j ∈ V . A
system of equations xij ⊕ yi ⊕ yj = 1, i, j ∈ V can be viewed as an instance
of M inHom{x} ({(x1, x2, x3) |x1 ⊕ x2 ⊕ x3 = 1}). It is easy to see that arbitrary
boolean vector y =
deﬁnes a single solution xij = yi⊕yj⊕1, i, j ∈ V
of the system. Vector y can be considered as the cut {i|yi = 1} ⊆ V and the
(1 − xij ) is equal to the doubled cost of the cut. Then Max-CUT is
value

y1, . . . , y|V |
(cid:0)

(cid:1)

Pij

polynomially reduced to minimizing

xij which is equivalent to M inHom{x}.

Only two classes Inv (M01) and Inv (S01) are left as candidates for MinHom-
maximality. Since they are not included in each other, they are both maximal.
The same argument shows that Inv (K01) and Inv (S01) are min-maximal.

Pij

Proof of Theorem 12. Obviously, {∧, ∨} is a basis of M01, {∧} is a basis of
K01 and {(x ∧ y) ∨ (y ∧ z) ∨ (x ∧ z)} is a basis of S01. By Lemma 1 we conclude
⊓⊔
the statement of the theorem.

Deﬁnition 11. We call a pair of vertices {a, b} in G (R) a MinHom-pair if they
have arcs in both directions and we call {a, b} a min-pair if they have an arc in
one direction only.

Suppose f ∈ F . By

a
↓
b
Theorem 3 we obtain the following deﬁnition.

f , we mean a 6= b and f (a, b) = f (b, a) = b. Guided by

Deﬁnition 12. Let F be a conservative functional clone over A and R ⊆
{r : A → IN}. We say that F satisﬁes the necessary local conditions for R if
and only if

(1) for every MinHom-pair {a, b} of G (R), either

(1.a) there exists f1, f2 ∈ F s.t.

f1 and

f2; or

a
↓
b

a
↑
b

(1.b) there exists f ∈ F s.t. f |{a,b} (x, x, y) = f |{a,b} (y, x, x) =

f |{a,b} (y, x, y) = y,

(2) for every min-pair {a, b} of G (R) such that (a, b) ∈ E (R), either

(2.a) there exists f ∈ F s.t.

f ; or

a
↓
b

(2.b) there exists f ∈ F s.t. f |{a,b} (x, x, y) = f |{a,b} (y, x, x) =

f |{a,b} (y, x, y) = y.

Theorem 4. Suppose F is a conservative functional clone. If F is R-tractable
and U G (R) is complete, then it satisﬁes the necessary local conditions for R. If
F does not satisfy the necessary local conditions for R, then it is R-NP-hard.

As in case of M inHom, the necessary local conditions are not suﬃcient for
=

R-tractability
conservative
{B|B ⊆ A, |B| = 2, F |B contains 2 diﬀerent binary commutative functions},
M o = {(a, b) | {a, b} ∈ M } and M = {B|B ⊆ A, |B| = 2} \M .

clone.

Let

M

of

a

Introduce an undirected graph without loops T R

F = (M o ∩ E (R) , P ) where

P =

h(a, b) , (c, d)i | (a, b) , (c, d) ∈ M o ∩ E (R) , there is no f ∈ F :

(cid:26)

a
↓
b

c
↓
d

f

.
(cid:27)

Theorem 5. Suppose F satisfy the necessary local conditions for R and U G (R)
is complete. If the graph T R
F = (M o ∩ E (R) , P ) is bipartite, then F is R-
tractable. Otherwise, F is R-NP-hard.

A proof for NP-hard case of Theorem 5 will be omitted since it is basically

the same as in case of M inHom [21].

4 Multi-sorted MinHom and its tractable case

Deﬁnition 13. For any collection of sets A = {Ai|i ∈ I}, and any list of indices
i1, . . . , im ∈ I, a subset ρ of Ai1 ×. . .×Aim, together with the list (i1, . . . , im), will
be called a multi-sorted relation over A with arity m and signature (i1, . . . , im).
For any such relation ρ, the signature of ρ will be denoted σ(ρ).

Deﬁnition 14. Let Γ be a set of multi-sorted relations over a collection of
sets A = {Ai|i ∈ I}. The multi-sorted M inHom problem over Γ , denoted
M M inHom(Γ ), is deﬁned to be the minimization problem with
Instance: A quadruple (V, δ, C, W ) where

– V is a set of variables;
– δ is a mapping from V to I, called the domain function;

– C is a set of constraints, where each constraint C ∈ C is a pair (s, ρ), such

that

• s = (v1, . . . , vm) is a tuple of variables of length m, called the constraint

scope;

• ρ is an element of Γ with arity m and signature (δ(v1), . . . , δ(vm)), called

the constraint relation.
– Weights wva ∈ IN, v ∈ V, a ∈ Aδ(v).

Solution: A function f from V to
Ai, such that, for each variable v ∈ V ,
f (v) ∈ Aδ(v), and for each constraint (s, ρ) ∈ C, with s = (v1, . . . , vm), the tuple
(f (v1), . . . , f (vm)) belongs to ρ.
Measure:

Si∈I

wvf (v).

Pv∈V

nary relation ρA over a set

We can consider any multi-sorted relation ρ over A = {Ai|i ∈ I} as an ordi-
Ai where Ai, i ∈ I are considered to be disjoint.
If Γ is a set of multi-sorted relations over A = {Ai|i ∈ I}, then Γ A denotes a
Ai. It is easy to see that
set of relations of Γ considered as relations over

Si∈I

M M inHom(Γ ) is equivalent to M inHom(Γ A).

Si∈I

Deﬁnition 15. A set of multi-sorted relations over A, Γ , is said to be MinHom-
tractable, if Γ A is MinHom-tractable. A set of multi-sorted relations over A, Γ ,
is said to be MinHom-NP-complete, if Γ A is MinHom-NP-complete.

Deﬁnition 16. Let A be a collection of sets. An n-ary multi-sorted operation t
on A is deﬁned by a collection of interpretations
, where each tA is
an n-ary operation on the corresponding set A. The multi-sorted operation t on
A is said to be a polymorphism of a multi-sorted relation ρ over A with signature
(δ(1), . . . , δ(m)) if, for any (a11, . . . , am1), . . . , (a1n, . . . , amn) ∈ ρ, we have

tA|A ∈ A
(cid:9)
(cid:8)

a11 · · · a1n
...
...
am1 · · · amn

t 








= 



tδ(1) (a11, . . . , a1n)
...
tδ(m) (am1, . . . , amn)

∈ ρ






For any given set of multi-sorted relations Γ , M P ol (Γ ) denotes the set of

multi-sorted operations which are polymorphisms of every relation in Γ .

Deﬁnition 17. Suppose a set of operations H over D is conservative and
B ⊆ {{x, y} |x, y ∈ D, x 6= y}. A pair of binary operations φ, ψ ∈ H is called
a tournament pair on B,
if ∀ {x, y} ∈ B φ (x, y) = φ (y, x) , ψ (x, y) =
ψ (y, x) , φ (x, y) 6= ψ (x, y) and for arbitrary {x, y} ∈ B, φ (x, y) = x, ψ (x, y) =
x. An operation m ∈ H is called arithmetical on B, if ∀ {x, y} ∈ B m (x, x, y) =
m (y, x, x) = m (y, x, y) = y.

The following theorem is a simple consequence of the main result of [21].

Theorem 6. Let Γ be a constraint language over A containing all unary re-
lations and B ⊆ {{a, b}|a, b ∈ A, a 6= b}. If P ol (Γ ) contains operations φ, ψ, m
such that

– φ, ψ is a tournament pair on B,
– m is arithmetical on B,

then Γ is MinHom-tractable.

The following theorem is a generalization of the previous one.

Theorem 7. Let Γ be a set of multi-sorted relations over a collection of ﬁnite
sets A = {A1, . . . , An} containing all unary multi-sorted relations. Assume that
Bi ⊆ {{a, b}|a, b ∈ Ai, a 6= b}. If M P ol (Γ ) contains a multi-sorted operations
φ, ψ, m such that
– φAi , ψAi is a tournament pair on Bi,
– mAi is arithmetical on Bi,
then Γ A is MinHom-tractable.

Proof. Denote G =

n

Ai. It is easy to see that we can deﬁne operations φ′, ψ′ :

Si=1

G2 → G and m′ : G3 → G such that φ′|Ai = φAi , ψ′|Ai = ψAi , m′|Ai = mAi
and φ′, ψ′ is a tournament pair on
Γ A
(cid:0)

Bi ∪ {{a, b}|a ∈ Ai, b ∈ Aj, i 6= j}. Then
which by Theorem 6 means that Γ A is MinHom-tractable.

φ′, ψ′, m′ ∈ P ol

Si=1

(cid:1)

n

5 Structure of R-tractable algebras

Deﬁnition 18. Suppose a set of operations H over D is conservative and O ⊆
{(x, y) |x, y ∈ D, x 6= y}. A pair of binary operations φ, ψ ∈ H is called a weak
tournament pair on O, if

(1) ∀ a, b such that (a, b) , (b, a) ∈ O :

a
↓
b

φ,

(2) ∀ a, b such that (a, b) ∈ O, (b, a) /∈ O :

a
↑
b
a
↓
b

ψ or

φ,

a
↑
b

a
↑
b

φ,

ψ or

a
↓
b
a
↑
b

ψ;

φ,

a
↓
b

ψ or

a
↓
b

φ,

a
↓
b

ψ;

(3) ∀ a, b such that (a, b) /∈ O, (b, a) /∈ O : φ|{a,b} (x, y) = x, ψ|{a,b} (x, y) = y.

For

binary

operation

f
de-
a
ﬁne Com(f ) =
. Consider any binary operation
fmax ∈ F which has maximal set Com(fmax), i.e. there is no f ∈ F such that
Com(fmax) ⊂ Com(f ). Since for any binary operations a, b, Com(a (x, y)) ∪
Com(b (x, y)) = Com(a (b (x, y) , b (y, x))), we conclude that Com(fmax) =

{a, b} : f |{a,b} is commutative

∈

F

(cid:8)

(cid:9)

Com(f ). Deﬁne Como(fmax) = {(a, b) | {a, b} ∈ Com(fmax)}.

Sf ∈F
Theorem 8. If F satisﬁes the necessary local conditions for R, U G (R) is com-
plete and T R
F = (M o ∩ E (R) , P ) is bipartite, then there is a pair φ, ψ ∈ F which
is a weak tournament pair on Como(fmax) ∩ E (R).

Proof. Let M1, M2 denote a partitioning of vertices of the bipartite graph T R
F .
φ. Let us
Then, for every (a, b) , (c, d) ∈ M1, there is a function φ ∈ F :

a
↓
b

c
↓
d

prove by induction that for every (a1, b1) , (a2, b2) , . . . , (an, bn) ∈ M1, there is a

φ :

. . .

a2
↓
b2

an
↓
bn

a1
↓
b1
The base of

φ.

an
↓
bn
an+1
↓
bn+1

a1
↓
b1

. . .

an
↓
bn

induction n = 2 is obvious. Let (a1, b1), (a2, b2),

. . .,
(an+1, bn+1) ∈ M1 be given. By the induction hypothesis, there are φ1, φ2, φ3 ∈
a2
a1
↓
↓
b2
b1

φ3. Then, it is easy to see that

an+1
↓
bn+1

an+1
↓
bn+1

an
↓
bn

an
↓
bn

a3
↓
b3

a1
↓
b1

a2
↓
b2

F :

φ2,

φ1,

. . .

. . .

. . .

φ3 (φ1 (x, y) , φ2 (x, y)) which completes the induction proof.

The analogous statement can be proved for M2. So it follows from the proof
φ′ and

that there are binary operations φ′, ψ′ ∈ F , such that ∀ (x, y) ∈ M1:

x
↓
y

∀ (x, y) ∈ M2:

x
↓
y

ψ′.

If (a, b) , (b, a) ∈ Como(fmax) ∩ E (R), then the necessary local conditions
for C give that {a, b} ∈ M . Moreover, (a, b) , (b, a) ∈ M o ∩ E (R) are always
in diﬀerent partitions of T R
F . Consequently, φ′, ψ′ satisfy the ﬁrst property of a
weak tournament pair on Como(fmax) ∩ E (R). Our goal is to construct a pair
of operations that satisfy other two properties.

Consider operations φ′′ (x, y) = fmax (φ′ (x, y) , φ′ (y, x)) and ψ′′ (x, y) =
fmax (ψ′ (x, y) , ψ′ (y, x)). Since for any B ∈ Com(φ′), φ′′|B = φ′|B and ψ′′|B =
ψ′|B, we obtain that φ′′, ψ′′ satisfy the ﬁrst property of a weak tournament pair
on Como(fmax) ∩ E (R), too. Moreover, φ′′, ψ′′ are commutative on Com(fmax).
For any two elements a, b ∈ A such that (a, b) ∈ Como(fmax) ∩ E (R) , (b, a) /∈
Como(fmax) ∩ E (R), φ′′|{a,b}, ψ′′|{a,b} are both commutative. If (a, b) is a vertex
a
in T R
, and therefore it holds for one of φ′′, ψ′′, too.
↓
b

F , then one of φ′, ψ′ satisﬁes

a
↓
b

a
↓
b

If (a, b) is not a vertex in T R

F , i.e. {a, b} /∈ M , then
contains only one commutative operation. In both cases the second property of
a weak tournament pair on Como(fmax) ∩ E (R) is satisﬁed.

ψ′′, because F |{a,b}

φ′′,

In case that (a, b), (b, a) /∈ Como(fmax) ∩ E (R), we see that {a, b} /∈
Com(fmax) (the case when {a, b} ∈ Com(fmax), (a, b), (b, a) /∈ E (R) is im-
possible due to completeness of U G (R)) which means that φ′′
{a,b} are
projections. Thus, a pair of operations φ (x, y) = φ′′ (x, φ′′ (y, x)), ψ (x, y) =
ψ′′ (ψ′′ (y, x) , y) satisfy all three properties of a weak tournament pair on
Como(fmax) ∩ E (R).

{a,b}, ψ′′

Theorem 9. If F satisﬁes
Com(fmax) 6= ∅, then F contains an arithmetical operation on Com(fmax).

the necessary local

conditions

for R and

Proof. Obviously, for every B ∈ Com(fmax), F |B cannot contain any commu-
tative binary function. Therefore, every binary function in F |B is a projection.

For B ∈ Com(fmax), let mB be an arithmetical function on B; existence of
this function follows from the necessary local conditions for R. Assume now
that Com(fmax) = {{x1, y1} , . . . , {xs, ys}}. We prove by induction that for
every r ≤ s, F contains a function mr : A3 → A that is arithmetical on
{{xi, yi} |1 ≤ i ≤ r}.

When r = 1, m1 (x, y, z) = m{x1,y1} (x, y, z) and the statement is obviously
true. Suppose it is true for r ≤ k < s and that we have the function mk : A3 → A.
Let us prove the statement for r = k +1. If mk is arithmetical on {{xk+1, yk+1}},
∆
= mk and the statement is proved. Otherwise, one of the
then we deﬁne mk+1
following three statements is true

∃x, y ∈ {xk+1, yk+1} [mk (x, x, y) 6= y] ,

∃x, y ∈ {xk+1, yk+1} [mk (y, x, x) 6= y] ,

∃x, y ∈ {xk+1, yk+1} [mk (y, x, y) 6= y] .

Suppose the ﬁrst case holds (the proof for other cases is analogous), i.e.
mk|{xk+1,yk+1} (x, x, y) is the x-projection. It is easy to see that the function
m{xk+1,yk+1} (x, y, z) , m{xk+1,yk+1} (x, y, z) , mk (x, y, z)
is
mk+1 (x, y, z) = mk
arithmetical on {{xi, yi} |1 ≤ i ≤ k + 1}.
(cid:1)
(cid:0)

Induction completed and it is clear that ms (x, y, z) satisﬁes the condition of

theorem.

6 Proof of Theorem 5

Suppose we have some instance (V, C, W ) of M inHomR (Inv (F )). Let
Sol (V, C, W ) denote the set of its solutions. By Theorem 8, there is a pair
φ, ψ ∈ F which is a weak tournament pair on Como(fmax) ∩ E (R).

Until the end of this section, the pair φ, ψ will be ﬁxed. For any f, g :
V → A, deﬁne φ (f, g) , ψ (f, g) : V → A such that φ (f, g) (v) = φ (f (v), g(v)),
ψ (f, g) (v) = ψ (f (v), g(v)). Since any constraint relation of C is preserved by
φ, ψ, we have φ (f, g) , ψ (f, g) ∈ Sol (V, C, W ) for f, g ∈ Sol (V, C, W ).

Lemma 2. For any measure M (f ) =

wvrr (f (v)) we have

Pv∈V Pr∈R

M (φ (f, g)) + M (ψ (f, g)) ≤ M (f ) + M (g)

Proof. Let us prove that for any a, b ∈ A and any r ∈ R: r (a) + r (b) ≥
r (φ (a, b)) + r (ψ (a, b)).

If (a, b) , (b, a) ∈ Com(fmax) ∩ E (R) or {a, b}

/∈ Com(fmax), then
{φ (a, b) , ψ (a, b)} = {a, b}, and we have an equality. If (a, b) ∈ Com(fmax) ∩
E (R) , (b, a) /∈ E (R), then {φ (a, b) , ψ (a, b)} = {a, b} or {φ (a, b) , ψ (a, b)} =
{b}. In the ﬁrst case we have an equality and in the second case we have:

∀ r ∈ R, r (a) + r (b) ≥ 2r (b) ⇔ ∀ r ∈ C r (b) ≤ r (a) ⇔ (b, a) /∈ E (R)

From this

n

inequality, we

conclude

that

for any measure M (f ) =

wvrr (f (v)) we have M (f ) + M (g) ≥ M (φ (f, g)) + M (ψ (f, g))

Pv∈V Pr∈R
Lemma 3. Suppose Av = {f (v)|f ∈ Sol (V, C, W )} and there is a, b ∈ Av such
that

φ. Then we have

ψ,

a
↓
b

a
↓
b

min
f ∈Sol(V,C,W ),f (v)=b

M (f ) ≤

min
f ∈Sol(V,C,W ),f (v)=a

M (f )

Proof. Suppose
Sol (V, C, W ) , f ∗∗(v) = b such that

that

∈

f ∗

Sol (V, C, W ) , f ∗(v) = a and f ∗∗

M (f ∗) =

min
f ∈Sol(V,C,W ),f (v)=a

M (f ), M (f ∗∗) =

min
f ∈Sol(V,C,W ),f (v)=b

M (f )

Since φ (f ∗, f ∗∗) (v) = b, ψ (f ∗, f ∗∗) (v) = b, then by Lemma 2

2M (f ∗∗) ≤ M (φ (f ∗, f ∗∗)) + M (ψ (f ∗, f ∗∗)) ≤ M (f ∗) + M (f ∗∗)

∈

⊓⊔

Now

we
are ready to describe polynomial-time algorithm for M inHom (Inv (F )), which
conceptually follows the proof of Theorem 8.3 in [3]. First we compute sets
Av = {f (v)|f ∈ Sol (V, C, W )} for every v ∈ V . This could be done polynomial-
time, because, by result of [2], CSP (Inv (F )) is polynomial-time solvable by
3-consistency algorithm: adding a constraint (v, {a}) to C we can ﬁnd whether
a ∈ Av or not. After this operation, we iteratively delete all elements a from

every Av such that there is b ∈ Av :

ψ,

φ. This operation will not increase a

a
↓
b

a
↓
b

minimum of optimized functional due to Lemma 3. Afterwards, we update every
constraint pair ((v1, . . . , vm) , ρ) ∈ C by deﬁning ρ = ρ ∩ Av1 × . . . × Avm .

Consider a collection of sets A = {Av|v ∈ V }. Obviously, |A| < 2|A|. For
a pair ((v1, . . . , vm) , ρ) ∈ C, a predicate ρ can be considered as multi-sorted
predicate over A with signature (Av1 , . . . , Avm ). Moreover, for any p ∈ F this
where pB = p|B.
multi-sorted predicate preserves a polymorphism

pB|B ∈ A
(cid:9)
(cid:8)

By

Theorem 9, F contains an operation m which is arithmetical on Com(fmax).
mB|B ∈ A
φB|B ∈ A
Consider multi-sorted polymorphisms
.
It is easy to see that this polymorphisms satisfy conditions of Theorem 7 and
(cid:9)
(cid:8)
(cid:8)
(cid:9)
the set of multi-sorted predicates {ρ| (s, ρ) ∈ C} is tractable. Therefore, we can
polynomially solve our problem.

ψB|B ∈ A
(cid:9)

(cid:8)

,

,

7 Directions for further work

As it was said in the introduction, M inHomR ﬁts the framework of Valued CSP
(V CSP ) [3]. The following subproblems of V CSP generalize M inHom and are
not investigated yet.

1. What happens with M inHomR when U G (R) is not complete. We believe

that Theorem 5 is true for this case too.

2. Suppose we have a ﬁnite valued constraint language Γ , i.e. a set of valued
predicates over some ﬁnite domain set. If Γ contains all unary valued predicates,
we call V CSP (Γ ) a conservative V CSP . This name is motivated by the fact
that in this case the multimorphisms (which is a generalization of polymorphisms
for valued constraint languages [3]) of Γ must consist of conservative functions.
Since there is a well-known dichotomy for conservative CSPs [2], we suspect that
there is a dichotomy for conservative V CSP s.

References

1. Bodnarcuk, V.G., Kaluˇznin, L.A., Kotov, N.N., Romov, B.A.: Galois theory for Post

algebras. Kibernetika 3 1–10, 5 1–9 (in Russian)

2. Bulatov, A.A.: Tractable conservative Constraint Satisfaction Problems. 18th An-

nual IEEE Symposium on Logic in Computer Science (2003) 321–330

3. Cohen, D., Cooper, M., Jeavons, P.: Generalising submodularity and horn clauses:
Tractable optimization problems deﬁned by tournament pair multimorphisms.
Theor. Comput. Sci. 401 (2008) 36–51

4. Daniels, H., Velikova, M.: Derivation of monotone decision models from non-

monotone data. Tilburg University, Center Internal Report 30 (2003)

5. Feder, T., Vardi, M. Y.: The computational structure of monotone monadic SNP and
constraint satisfaction: A study through datalog and group theory. SIAM Journal
on Computing 28 (1999) 57–104

6. Geiger D.: Closed Systems of Functions and Predicates. Paciﬁc Journal of Mathe-

matics 27 (1968) 95–100

7. Gupta, A., Hell, P., Karimi, M., Raﬁey, A.: Minimum cost homomorphisms to re-

ﬂexive digraphs. LATIN (2008)

8. Gutin, G., Hell, P., Raﬁey, A., Yeo, A.: A dichotomy for minimum cost graph ho-

momorphisms. European Journal of Combinatorics 29 (2008) 900–911

9. Gutin, G., Hell, P., Raﬁey, A., Yeo, A.: Minimum cost and list homomorphisms to

semicomplete digraphs. Discrete Appl. Math. 154 (2006) 890–897

10. Gutin, G., Raﬁey, A., Yeo, A., Tso, M.: Level of repair analysis and minimum cost
homomorphisms of graphs. Discrete Applied Mathematics 154 (2006) 881–889
11. Gutin, G., Raﬁey, A., Yeo, A.: Minimum Cost Homomorphism Dichotomy for

Oriented Cycles. Proceedings of AAIM’08. LNCS 5034 (2008) 224–234

12. Jeavons P.: On the Algebraic Structure of Combinatorial Problems. Theoretical

Computer Science 200 (1998) 185–204

13. Jonnson P.: Boolean constraint satisfaction: complexity results for optimization
problems with arbitrary weights. Theoretical Computer Science 244, 1–2, pp. 189–
203 (2000)

14. Jonsson, P., Kuivinen, F., Nordh, G.: Max Ones generalised to larger domains.

SIAM Journal on Computing 38 (2008) 329–365

15. Jonsson, P., Nordh, G.: Generalised integer programming based on logically deﬁned
relations. Mathematical Foundations of Computer Science 2006. LNCS 4162 (2006)
549–560

16. Jonsson, P., Nordh, G., Thapper, J.: The maximum solution problem on graphs.
Mathematical Foundations of Computer Science 2007. LNCS 4708 (2007) 228-239

17. Marchenkov, S.S.: Closed classes of boolean functions. Nauka, Fizmatlit, Moscow

(2000) (in Russian)

18. Post, E.: The two-valued iterative systems of mathematical logic. Annals of Math-

ematical Studies 5 (1941)

19. Raﬁey, A., Hell, P.: Duality for Min-Max Orderings and Dichotomy for Min Cost

Homomorphisms, http://arxiv.org/abs/0907.3016v1

20. Schaefer, T.J.: The complexity of satisﬁability problems. 10th ACM Symposium

on Theory of Computing (1978) 216–226

21. Takhanov, R.: A dichotomy theorem for the general minimum cost homomorphism

problem. STACS (2010) (to appear)

